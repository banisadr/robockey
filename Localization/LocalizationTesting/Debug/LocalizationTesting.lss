
LocalizationTesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001b52  00001be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080010c  0080010c  00001bf2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bf2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002364  00000000  00000000  00001e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000936  00000000  00000000  000041c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cbf  00000000  00000000  00004afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000610  00000000  00000000  000057c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000849  00000000  00000000  00005dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002beb  00000000  00000000  00006619  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__vector_10>
      2c:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__vector_11>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      80:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      84:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      88:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      8c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      90:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      94:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      98:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      9c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      a0:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      a4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      a8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__trampolines_end>:
      f8:	20 20       	and	r2, r0
	...

000000fb <__c.2017>:
      fb:	20 20 79 20 3d 20 00                                  y = .

00000102 <__c.2015>:
     102:	0a 78 20 3d 20 00                                   .x = .

00000108 <descriptor_list>:
     108:	00 01 00 00 9f 01 12 00 02 00 00 5c 01 43 00 03     ...........\.C..
     118:	00 00 58 01 04 01 03 09 04 44 01 12 02 03 09 04     ..X......D......
     128:	3c 01 06 03 03 09 04 32 01 08                       <......2..

00000132 <string3>:
     132:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000013c <string2>:
     13c:	06 03 4d 00 32 00 00 00                             ..M.2...

00000144 <string1>:
     144:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     154:	65 00 00 00                                         e...

00000158 <string0>:
     158:	04 03 09 04                                         ....

0000015c <config1_descriptor>:
     15c:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     16c:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     17c:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     18c:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     19c:	40 00 00                                            @..

0000019f <device_descriptor>:
     19f:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1af:	03 01                                               ..

000001b1 <endpoint_config_table>:
     1b1:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	da e0       	ldi	r29, 0x0A	; 10
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
     1c8:	11 e0       	ldi	r17, 0x01	; 1
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b1 e0       	ldi	r27, 0x01	; 1
     1ce:	e2 e5       	ldi	r30, 0x52	; 82
     1d0:	fb e1       	ldi	r31, 0x1B	; 27
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
     1d4:	05 90       	lpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	ac 30       	cpi	r26, 0x0C	; 12
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	ac e0       	ldi	r26, 0x0C	; 12
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	a8 32       	cpi	r26, 0x28	; 40
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 2a 05 	call	0xa54	; 0xa54 <main>
     1f2:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     1fa:	83 30       	cpi	r24, 0x03	; 3
     1fc:	91 05       	cpc	r25, r1
     1fe:	01 f1       	breq	.+64     	; 0x240 <distIndex+0x46>
     200:	34 f4       	brge	.+12     	; 0x20e <distIndex+0x14>
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	91 05       	cpc	r25, r1
     206:	51 f0       	breq	.+20     	; 0x21c <distIndex+0x22>
     208:	02 97       	sbiw	r24, 0x02	; 2
     20a:	89 f0       	breq	.+34     	; 0x22e <distIndex+0x34>
     20c:	42 c0       	rjmp	.+132    	; 0x292 <distIndex+0x98>
     20e:	85 30       	cpi	r24, 0x05	; 5
     210:	91 05       	cpc	r25, r1
     212:	51 f1       	breq	.+84     	; 0x268 <distIndex+0x6e>
     214:	f4 f0       	brlt	.+60     	; 0x252 <distIndex+0x58>
     216:	06 97       	sbiw	r24, 0x06	; 6
     218:	91 f1       	breq	.+100    	; 0x27e <distIndex+0x84>
     21a:	3b c0       	rjmp	.+118    	; 0x292 <distIndex+0x98>
	{
		case 1 : 
			pointsUsed[0] = 0;
     21c:	ec e0       	ldi	r30, 0x0C	; 12
     21e:	f1 e0       	ldi	r31, 0x01	; 1
     220:	11 82       	std	Z+1, r1	; 0x01
     222:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	93 83       	std	Z+3, r25	; 0x03
     22a:	82 83       	std	Z+2, r24	; 0x02
			break;
     22c:	32 c0       	rjmp	.+100    	; 0x292 <distIndex+0x98>
			
		case 2 : 
			pointsUsed[0] = 0;
     22e:	ec e0       	ldi	r30, 0x0C	; 12
     230:	f1 e0       	ldi	r31, 0x01	; 1
     232:	11 82       	std	Z+1, r1	; 0x01
     234:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     236:	82 e0       	ldi	r24, 0x02	; 2
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	93 83       	std	Z+3, r25	; 0x03
     23c:	82 83       	std	Z+2, r24	; 0x02
			break;
     23e:	29 c0       	rjmp	.+82     	; 0x292 <distIndex+0x98>
			
		case 3 : 
			pointsUsed[0] = 0;
     240:	ec e0       	ldi	r30, 0x0C	; 12
     242:	f1 e0       	ldi	r31, 0x01	; 1
     244:	11 82       	std	Z+1, r1	; 0x01
     246:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     248:	83 e0       	ldi	r24, 0x03	; 3
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	93 83       	std	Z+3, r25	; 0x03
     24e:	82 83       	std	Z+2, r24	; 0x02
			break;
     250:	20 c0       	rjmp	.+64     	; 0x292 <distIndex+0x98>
			
		case 4 : 
			pointsUsed[0] = 1;
     252:	ec e0       	ldi	r30, 0x0C	; 12
     254:	f1 e0       	ldi	r31, 0x01	; 1
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	91 83       	std	Z+1, r25	; 0x01
     25c:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	93 83       	std	Z+3, r25	; 0x03
     264:	82 83       	std	Z+2, r24	; 0x02
			break;
     266:	15 c0       	rjmp	.+42     	; 0x292 <distIndex+0x98>
			
		case 5 : 
			pointsUsed[0] = 1;
     268:	ec e0       	ldi	r30, 0x0C	; 12
     26a:	f1 e0       	ldi	r31, 0x01	; 1
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	91 83       	std	Z+1, r25	; 0x01
     272:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	93 83       	std	Z+3, r25	; 0x03
     27a:	82 83       	std	Z+2, r24	; 0x02
			break;
     27c:	0a c0       	rjmp	.+20     	; 0x292 <distIndex+0x98>
			
		case 6 :
			pointsUsed[0] = 2;
     27e:	ec e0       	ldi	r30, 0x0C	; 12
     280:	f1 e0       	ldi	r31, 0x01	; 1
     282:	82 e0       	ldi	r24, 0x02	; 2
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	91 83       	std	Z+1, r25	; 0x01
     288:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     28a:	83 e0       	ldi	r24, 0x03	; 3
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	93 83       	std	Z+3, r25	; 0x03
     290:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     292:	8c e0       	ldi	r24, 0x0C	; 12
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	08 95       	ret

00000298 <orientationCalculationFour>:


void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom)
{
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	ec 01       	movw	r28, r24
     2a6:	7a 01       	movw	r14, r20
     2a8:	89 01       	movw	r16, r18
	//Find index of shortest length
	int indexMin = 0;
	int minVal = distVect[0];
     2aa:	e6 2f       	mov	r30, r22
     2ac:	f7 2f       	mov	r31, r23
     2ae:	21 91       	ld	r18, Z+
     2b0:	31 91       	ld	r19, Z+
	for (int i = 0; i < 6; i++){
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	70 e0       	ldi	r23, 0x00	; 0


void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	08 c0       	rjmp	.+16     	; 0x2cc <orientationCalculationFour+0x34>
	int minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     2bc:	a1 91       	ld	r26, Z+
     2be:	b1 91       	ld	r27, Z+
     2c0:	a2 17       	cp	r26, r18
     2c2:	b3 07       	cpc	r27, r19
     2c4:	1c f4       	brge	.+6      	; 0x2cc <orientationCalculationFour+0x34>
     2c6:	9d 01       	movw	r18, r26
void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	int minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     2c8:	86 2f       	mov	r24, r22
     2ca:	97 2f       	mov	r25, r23
     2cc:	6f 5f       	subi	r22, 0xFF	; 255
     2ce:	7f 4f       	sbci	r23, 0xFF	; 255
     2d0:	66 30       	cpi	r22, 0x06	; 6
     2d2:	71 05       	cpc	r23, r1
     2d4:	99 f7       	brne	.-26     	; 0x2bc <orientationCalculationFour+0x24>
	}
	
	//Find points used by shortest length
	
	int* pointsShort; 
	pointsShort = distIndex(indexMin);
     2d6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <distIndex>
	
	if (pointsShort[0] == pointsLong[0]){
     2da:	fc 01       	movw	r30, r24
     2dc:	20 81       	ld	r18, Z
     2de:	31 81       	ldd	r19, Z+1	; 0x01
     2e0:	48 81       	ld	r20, Y
     2e2:	59 81       	ldd	r21, Y+1	; 0x01
     2e4:	24 17       	cp	r18, r20
     2e6:	35 07       	cpc	r19, r21
     2e8:	49 f4       	brne	.+18     	; 0x2fc <orientationCalculationFour+0x64>
		*top = pointsLong[0];
     2ea:	f7 01       	movw	r30, r14
     2ec:	31 83       	std	Z+1, r19	; 0x01
     2ee:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	9b 81       	ldd	r25, Y+3	; 0x03
     2f4:	f8 01       	movw	r30, r16
     2f6:	91 83       	std	Z+1, r25	; 0x01
     2f8:	80 83       	st	Z, r24
     2fa:	25 c0       	rjmp	.+74     	; 0x346 <orientationCalculationFour+0xae>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     2fc:	6a 81       	ldd	r22, Y+2	; 0x02
     2fe:	7b 81       	ldd	r23, Y+3	; 0x03
     300:	26 17       	cp	r18, r22
     302:	37 07       	cpc	r19, r23
     304:	49 f4       	brne	.+18     	; 0x318 <orientationCalculationFour+0x80>
			*top = pointsLong[1];
     306:	f7 01       	movw	r30, r14
     308:	31 83       	std	Z+1, r19	; 0x01
     30a:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     30c:	88 81       	ld	r24, Y
     30e:	99 81       	ldd	r25, Y+1	; 0x01
     310:	f8 01       	movw	r30, r16
     312:	91 83       	std	Z+1, r25	; 0x01
     314:	80 83       	st	Z, r24
     316:	17 c0       	rjmp	.+46     	; 0x346 <orientationCalculationFour+0xae>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     318:	fc 01       	movw	r30, r24
     31a:	82 81       	ldd	r24, Z+2	; 0x02
     31c:	93 81       	ldd	r25, Z+3	; 0x03
     31e:	48 17       	cp	r20, r24
     320:	59 07       	cpc	r21, r25
     322:	49 f4       	brne	.+18     	; 0x336 <orientationCalculationFour+0x9e>
				*top = pointsLong[0];
     324:	f7 01       	movw	r30, r14
     326:	51 83       	std	Z+1, r21	; 0x01
     328:	40 83       	st	Z, r20
				*bottom = pointsLong[1];
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	9b 81       	ldd	r25, Y+3	; 0x03
     32e:	f8 01       	movw	r30, r16
     330:	91 83       	std	Z+1, r25	; 0x01
     332:	80 83       	st	Z, r24
     334:	08 c0       	rjmp	.+16     	; 0x346 <orientationCalculationFour+0xae>
			} else {
				*top = pointsLong[1];
     336:	f7 01       	movw	r30, r14
     338:	71 83       	std	Z+1, r23	; 0x01
     33a:	60 83       	st	Z, r22
				*bottom = pointsLong[0];
     33c:	88 81       	ld	r24, Y
     33e:	99 81       	ldd	r25, Y+1	; 0x01
     340:	f8 01       	movw	r30, r16
     342:	91 83       	std	Z+1, r25	; 0x01
     344:	80 83       	st	Z, r24
			}
		}
	}
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	1f 91       	pop	r17
     34c:	0f 91       	pop	r16
     34e:	ff 90       	pop	r15
     350:	ef 90       	pop	r14
     352:	08 95       	ret

00000354 <fourPointCalc>:
	
}


int* fourPointCalc(int pvect[4][2])
{
     354:	2f 92       	push	r2
     356:	3f 92       	push	r3
     358:	4f 92       	push	r4
     35a:	5f 92       	push	r5
     35c:	6f 92       	push	r6
     35e:	7f 92       	push	r7
     360:	8f 92       	push	r8
     362:	9f 92       	push	r9
     364:	af 92       	push	r10
     366:	bf 92       	push	r11
     368:	cf 92       	push	r12
     36a:	df 92       	push	r13
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	a8 97       	sbiw	r28, 0x28	; 40
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	1c 01       	movw	r2, r24
	static int centerFour[2];
	
	int dist01 = sqrt((pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     38a:	dc 01       	movw	r26, r24
     38c:	14 96       	adiw	r26, 0x04	; 4
     38e:	0d 90       	ld	r0, X+
     390:	bc 91       	ld	r27, X
     392:	a0 2d       	mov	r26, r0
     394:	ba 8b       	std	Y+18, r27	; 0x12
     396:	a9 8b       	std	Y+17, r26	; 0x11
     398:	fc 01       	movw	r30, r24
     39a:	e0 80       	ld	r14, Z
     39c:	f1 80       	ldd	r15, Z+1	; 0x01
     39e:	cd 01       	movw	r24, r26
     3a0:	8e 19       	sub	r24, r14
     3a2:	9f 09       	sbc	r25, r15
     3a4:	26 81       	ldd	r18, Z+6	; 0x06
     3a6:	37 81       	ldd	r19, Z+7	; 0x07
     3a8:	3e 8b       	std	Y+22, r19	; 0x16
     3aa:	2d 8b       	std	Y+21, r18	; 0x15
     3ac:	02 81       	ldd	r16, Z+2	; 0x02
     3ae:	13 81       	ldd	r17, Z+3	; 0x03
     3b0:	20 1b       	sub	r18, r16
     3b2:	31 0b       	sbc	r19, r17
     3b4:	88 9f       	mul	r24, r24
     3b6:	40 01       	movw	r8, r0
     3b8:	89 9f       	mul	r24, r25
     3ba:	90 0c       	add	r9, r0
     3bc:	90 0c       	add	r9, r0
     3be:	11 24       	eor	r1, r1
     3c0:	22 9f       	mul	r18, r18
     3c2:	c0 01       	movw	r24, r0
     3c4:	23 9f       	mul	r18, r19
     3c6:	90 0d       	add	r25, r0
     3c8:	90 0d       	add	r25, r0
     3ca:	11 24       	eor	r1, r1
     3cc:	88 0e       	add	r8, r24
     3ce:	99 1e       	adc	r9, r25
     3d0:	09 2c       	mov	r0, r9
     3d2:	00 0c       	add	r0, r0
     3d4:	aa 08       	sbc	r10, r10
     3d6:	bb 08       	sbc	r11, r11
     3d8:	c5 01       	movw	r24, r10
     3da:	b4 01       	movw	r22, r8
     3dc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__floatsisf>
     3e0:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <sqrt>
     3e4:	6d 8f       	std	Y+29, r22	; 0x1d
     3e6:	7e 8f       	std	Y+30, r23	; 0x1e
     3e8:	8f 8f       	std	Y+31, r24	; 0x1f
     3ea:	98 a3       	std	Y+32, r25	; 0x20
	int dist02 = sqrt((pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     3ec:	d1 01       	movw	r26, r2
     3ee:	18 96       	adiw	r26, 0x08	; 8
     3f0:	ad 90       	ld	r10, X+
     3f2:	bc 90       	ld	r11, X
     3f4:	19 97       	sbiw	r26, 0x09	; 9
     3f6:	c5 01       	movw	r24, r10
     3f8:	8e 19       	sub	r24, r14
     3fa:	9f 09       	sbc	r25, r15
     3fc:	1a 96       	adiw	r26, 0x0a	; 10
     3fe:	6d 90       	ld	r6, X+
     400:	7c 90       	ld	r7, X
     402:	1b 97       	sbiw	r26, 0x0b	; 11
     404:	93 01       	movw	r18, r6
     406:	20 1b       	sub	r18, r16
     408:	31 0b       	sbc	r19, r17
     40a:	88 9f       	mul	r24, r24
     40c:	40 01       	movw	r8, r0
     40e:	89 9f       	mul	r24, r25
     410:	90 0c       	add	r9, r0
     412:	90 0c       	add	r9, r0
     414:	11 24       	eor	r1, r1
     416:	22 9f       	mul	r18, r18
     418:	c0 01       	movw	r24, r0
     41a:	23 9f       	mul	r18, r19
     41c:	90 0d       	add	r25, r0
     41e:	90 0d       	add	r25, r0
     420:	11 24       	eor	r1, r1
     422:	88 0e       	add	r8, r24
     424:	99 1e       	adc	r9, r25
     426:	94 01       	movw	r18, r8
     428:	99 0c       	add	r9, r9
     42a:	44 0b       	sbc	r20, r20
     42c:	55 0b       	sbc	r21, r21
     42e:	29 8f       	std	Y+25, r18	; 0x19
     430:	3a 8f       	std	Y+26, r19	; 0x1a
     432:	4b 8f       	std	Y+27, r20	; 0x1b
     434:	5c 8f       	std	Y+28, r21	; 0x1c
     436:	69 8d       	ldd	r22, Y+25	; 0x19
     438:	7a 8d       	ldd	r23, Y+26	; 0x1a
     43a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     43c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     43e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__floatsisf>
     442:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <sqrt>
     446:	69 8f       	std	Y+25, r22	; 0x19
     448:	7a 8f       	std	Y+26, r23	; 0x1a
     44a:	8b 8f       	std	Y+27, r24	; 0x1b
     44c:	9c 8f       	std	Y+28, r25	; 0x1c
	int dist03 = sqrt((pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     44e:	d1 01       	movw	r26, r2
     450:	1c 96       	adiw	r26, 0x0c	; 12
     452:	8d 90       	ld	r8, X+
     454:	9c 90       	ld	r9, X
     456:	1d 97       	sbiw	r26, 0x0d	; 13
     458:	c4 01       	movw	r24, r8
     45a:	8e 19       	sub	r24, r14
     45c:	9f 09       	sbc	r25, r15
     45e:	1e 96       	adiw	r26, 0x0e	; 14
     460:	4d 90       	ld	r4, X+
     462:	5c 90       	ld	r5, X
     464:	1f 97       	sbiw	r26, 0x0f	; 15
     466:	92 01       	movw	r18, r4
     468:	20 1b       	sub	r18, r16
     46a:	31 0b       	sbc	r19, r17
     46c:	88 9f       	mul	r24, r24
     46e:	60 01       	movw	r12, r0
     470:	89 9f       	mul	r24, r25
     472:	d0 0c       	add	r13, r0
     474:	d0 0c       	add	r13, r0
     476:	11 24       	eor	r1, r1
     478:	22 9f       	mul	r18, r18
     47a:	c0 01       	movw	r24, r0
     47c:	23 9f       	mul	r18, r19
     47e:	90 0d       	add	r25, r0
     480:	90 0d       	add	r25, r0
     482:	11 24       	eor	r1, r1
     484:	c8 0e       	add	r12, r24
     486:	d9 1e       	adc	r13, r25
     488:	0d 2c       	mov	r0, r13
     48a:	00 0c       	add	r0, r0
     48c:	ee 08       	sbc	r14, r14
     48e:	ff 08       	sbc	r15, r15
     490:	c7 01       	movw	r24, r14
     492:	b6 01       	movw	r22, r12
     494:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__floatsisf>
     498:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <sqrt>
     49c:	69 a3       	std	Y+33, r22	; 0x21
     49e:	7a a3       	std	Y+34, r23	; 0x22
     4a0:	8b a3       	std	Y+35, r24	; 0x23
     4a2:	9c a3       	std	Y+36, r25	; 0x24
	int dist12 = sqrt((pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     4a4:	c5 01       	movw	r24, r10
     4a6:	e9 89       	ldd	r30, Y+17	; 0x11
     4a8:	fa 89       	ldd	r31, Y+18	; 0x12
     4aa:	8e 1b       	sub	r24, r30
     4ac:	9f 0b       	sbc	r25, r31
     4ae:	93 01       	movw	r18, r6
     4b0:	4d 89       	ldd	r20, Y+21	; 0x15
     4b2:	5e 89       	ldd	r21, Y+22	; 0x16
     4b4:	24 1b       	sub	r18, r20
     4b6:	35 0b       	sbc	r19, r21
     4b8:	88 9f       	mul	r24, r24
     4ba:	60 01       	movw	r12, r0
     4bc:	89 9f       	mul	r24, r25
     4be:	d0 0c       	add	r13, r0
     4c0:	d0 0c       	add	r13, r0
     4c2:	11 24       	eor	r1, r1
     4c4:	22 9f       	mul	r18, r18
     4c6:	c0 01       	movw	r24, r0
     4c8:	23 9f       	mul	r18, r19
     4ca:	90 0d       	add	r25, r0
     4cc:	90 0d       	add	r25, r0
     4ce:	11 24       	eor	r1, r1
     4d0:	c8 0e       	add	r12, r24
     4d2:	d9 1e       	adc	r13, r25
     4d4:	0d 2c       	mov	r0, r13
     4d6:	00 0c       	add	r0, r0
     4d8:	ee 08       	sbc	r14, r14
     4da:	ff 08       	sbc	r15, r15
     4dc:	c7 01       	movw	r24, r14
     4de:	b6 01       	movw	r22, r12
     4e0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__floatsisf>
     4e4:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <sqrt>
     4e8:	6d a3       	std	Y+37, r22	; 0x25
     4ea:	7e a3       	std	Y+38, r23	; 0x26
     4ec:	8f a3       	std	Y+39, r24	; 0x27
     4ee:	98 a7       	std	Y+40, r25	; 0x28
	int dist13 = sqrt((pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     4f0:	c4 01       	movw	r24, r8
     4f2:	a9 89       	ldd	r26, Y+17	; 0x11
     4f4:	ba 89       	ldd	r27, Y+18	; 0x12
     4f6:	8a 1b       	sub	r24, r26
     4f8:	9b 0b       	sbc	r25, r27
     4fa:	92 01       	movw	r18, r4
     4fc:	ed 89       	ldd	r30, Y+21	; 0x15
     4fe:	fe 89       	ldd	r31, Y+22	; 0x16
     500:	2e 1b       	sub	r18, r30
     502:	3f 0b       	sbc	r19, r31
     504:	88 9f       	mul	r24, r24
     506:	60 01       	movw	r12, r0
     508:	89 9f       	mul	r24, r25
     50a:	d0 0c       	add	r13, r0
     50c:	d0 0c       	add	r13, r0
     50e:	11 24       	eor	r1, r1
     510:	22 9f       	mul	r18, r18
     512:	c0 01       	movw	r24, r0
     514:	23 9f       	mul	r18, r19
     516:	90 0d       	add	r25, r0
     518:	90 0d       	add	r25, r0
     51a:	11 24       	eor	r1, r1
     51c:	c8 0e       	add	r12, r24
     51e:	d9 1e       	adc	r13, r25
     520:	0d 2c       	mov	r0, r13
     522:	00 0c       	add	r0, r0
     524:	ee 08       	sbc	r14, r14
     526:	ff 08       	sbc	r15, r15
     528:	c7 01       	movw	r24, r14
     52a:	b6 01       	movw	r22, r12
     52c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__floatsisf>
     530:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <sqrt>
     534:	69 8b       	std	Y+17, r22	; 0x11
     536:	7a 8b       	std	Y+18, r23	; 0x12
     538:	8b 8b       	std	Y+19, r24	; 0x13
     53a:	9c 8b       	std	Y+20, r25	; 0x14
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     53c:	94 01       	movw	r18, r8
     53e:	2a 19       	sub	r18, r10
     540:	3b 09       	sbc	r19, r11
     542:	c2 01       	movw	r24, r4
     544:	86 19       	sub	r24, r6
     546:	97 09       	sbc	r25, r7
     548:	22 9f       	mul	r18, r18
     54a:	60 01       	movw	r12, r0
     54c:	23 9f       	mul	r18, r19
     54e:	d0 0c       	add	r13, r0
     550:	d0 0c       	add	r13, r0
     552:	11 24       	eor	r1, r1
     554:	88 9f       	mul	r24, r24
     556:	90 01       	movw	r18, r0
     558:	89 9f       	mul	r24, r25
     55a:	30 0d       	add	r19, r0
     55c:	30 0d       	add	r19, r0
     55e:	11 24       	eor	r1, r1
     560:	c2 0e       	add	r12, r18
     562:	d3 1e       	adc	r13, r19
     564:	0d 2c       	mov	r0, r13
     566:	00 0c       	add	r0, r0
     568:	ee 08       	sbc	r14, r14
     56a:	ff 08       	sbc	r15, r15
     56c:	c7 01       	movw	r24, r14
     56e:	b6 01       	movw	r22, r12
     570:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__floatsisf>
     574:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <sqrt>
     578:	6b 01       	movw	r12, r22
     57a:	7c 01       	movw	r14, r24

int* fourPointCalc(int pvect[4][2])
{
	static int centerFour[2];
	
	int dist01 = sqrt((pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     57c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     57e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     580:	8f 8d       	ldd	r24, Y+31	; 0x1f
     582:	98 a1       	ldd	r25, Y+32	; 0x20
     584:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fixsfsi>
     588:	7a 83       	std	Y+2, r23	; 0x02
     58a:	69 83       	std	Y+1, r22	; 0x01
	int dist02 = sqrt((pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     58c:	69 8d       	ldd	r22, Y+25	; 0x19
     58e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     590:	8b 8d       	ldd	r24, Y+27	; 0x1b
     592:	9c 8d       	ldd	r25, Y+28	; 0x1c
     594:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fixsfsi>
     598:	7c 83       	std	Y+4, r23	; 0x04
     59a:	6b 83       	std	Y+3, r22	; 0x03
	int dist03 = sqrt((pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     59c:	69 a1       	ldd	r22, Y+33	; 0x21
     59e:	7a a1       	ldd	r23, Y+34	; 0x22
     5a0:	8b a1       	ldd	r24, Y+35	; 0x23
     5a2:	9c a1       	ldd	r25, Y+36	; 0x24
     5a4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fixsfsi>
     5a8:	7e 83       	std	Y+6, r23	; 0x06
     5aa:	6d 83       	std	Y+5, r22	; 0x05
	int dist12 = sqrt((pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     5ac:	6d a1       	ldd	r22, Y+37	; 0x25
     5ae:	7e a1       	ldd	r23, Y+38	; 0x26
     5b0:	8f a1       	ldd	r24, Y+39	; 0x27
     5b2:	98 a5       	ldd	r25, Y+40	; 0x28
     5b4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fixsfsi>
     5b8:	78 87       	std	Y+8, r23	; 0x08
     5ba:	6f 83       	std	Y+7, r22	; 0x07
	int dist13 = sqrt((pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     5bc:	69 89       	ldd	r22, Y+17	; 0x11
     5be:	7a 89       	ldd	r23, Y+18	; 0x12
     5c0:	8b 89       	ldd	r24, Y+19	; 0x13
     5c2:	9c 89       	ldd	r25, Y+20	; 0x14
     5c4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fixsfsi>
     5c8:	7a 87       	std	Y+10, r23	; 0x0a
     5ca:	69 87       	std	Y+9, r22	; 0x09
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     5cc:	c7 01       	movw	r24, r14
     5ce:	b6 01       	movw	r22, r12
     5d0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fixsfsi>
     5d4:	7c 87       	std	Y+12, r23	; 0x0c
     5d6:	6b 87       	std	Y+11, r22	; 0x0b
     5d8:	fe 01       	movw	r30, r28
     5da:	31 96       	adiw	r30, 0x01	; 1
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
	int dist13 = sqrt((pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	90 e0       	ldi	r25, 0x00	; 0
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     5e8:	41 91       	ld	r20, Z+
     5ea:	51 91       	ld	r21, Z+
     5ec:	64 17       	cp	r22, r20
     5ee:	75 07       	cpc	r23, r21
     5f0:	1c f4       	brge	.+6      	; 0x5f8 <fourPointCalc+0x2a4>
			indexMax = i;
			maxVal = distVect[i];
     5f2:	ba 01       	movw	r22, r20
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     5f4:	82 2f       	mov	r24, r18
     5f6:	93 2f       	mov	r25, r19
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
     5f8:	2f 5f       	subi	r18, 0xFF	; 255
     5fa:	3f 4f       	sbci	r19, 0xFF	; 255
     5fc:	26 30       	cpi	r18, 0x06	; 6
     5fe:	31 05       	cpc	r19, r1
     600:	99 f7       	brne	.-26     	; 0x5e8 <fourPointCalc+0x294>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLong; 
	pointsLong = distIndex(indexMax);
     602:	0e 94 fd 00 	call	0x1fa	; 0x1fa <distIndex>
	int center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     606:	fc 01       	movw	r30, r24
     608:	a0 81       	ld	r26, Z
     60a:	b1 81       	ldd	r27, Z+1	; 0x01
     60c:	aa 0f       	add	r26, r26
     60e:	bb 1f       	adc	r27, r27
     610:	aa 0f       	add	r26, r26
     612:	bb 1f       	adc	r27, r27
     614:	a2 0d       	add	r26, r2
     616:	b3 1d       	adc	r27, r3
     618:	22 81       	ldd	r18, Z+2	; 0x02
     61a:	33 81       	ldd	r19, Z+3	; 0x03
     61c:	f9 01       	movw	r30, r18
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	e2 0d       	add	r30, r2
     628:	f3 1d       	adc	r31, r3
     62a:	0d 91       	ld	r16, X+
     62c:	1c 91       	ld	r17, X
     62e:	11 97       	sbiw	r26, 0x01	; 1
     630:	20 81       	ld	r18, Z
     632:	31 81       	ldd	r19, Z+1	; 0x01
     634:	02 0f       	add	r16, r18
     636:	13 1f       	adc	r17, r19
     638:	11 23       	and	r17, r17
     63a:	14 f4       	brge	.+4      	; 0x640 <fourPointCalc+0x2ec>
     63c:	0f 5f       	subi	r16, 0xFF	; 255
     63e:	1f 4f       	sbci	r17, 0xFF	; 255
     640:	15 95       	asr	r17
     642:	07 95       	ror	r16
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     644:	12 96       	adiw	r26, 0x02	; 2
     646:	ad 90       	ld	r10, X+
     648:	bc 90       	ld	r11, X
     64a:	13 97       	sbiw	r26, 0x03	; 3
     64c:	22 81       	ldd	r18, Z+2	; 0x02
     64e:	33 81       	ldd	r19, Z+3	; 0x03
     650:	a2 0e       	add	r10, r18
     652:	b3 1e       	adc	r11, r19
     654:	bb 20       	and	r11, r11
     656:	1c f4       	brge	.+6      	; 0x65e <fourPointCalc+0x30a>
     658:	ff ef       	ldi	r31, 0xFF	; 255
     65a:	af 1a       	sub	r10, r31
     65c:	bf 0a       	sbc	r11, r31
     65e:	b5 94       	asr	r11
     660:	a7 94       	ror	r10
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     662:	9e 01       	movw	r18, r28
     664:	21 5f       	subi	r18, 0xF1	; 241
     666:	3f 4f       	sbci	r19, 0xFF	; 255
     668:	ae 01       	movw	r20, r28
     66a:	43 5f       	subi	r20, 0xF3	; 243
     66c:	5f 4f       	sbci	r21, 0xFF	; 255
     66e:	be 01       	movw	r22, r28
     670:	6f 5f       	subi	r22, 0xFF	; 255
     672:	7f 4f       	sbci	r23, 0xFF	; 255
     674:	0e 94 4c 01 	call	0x298	; 0x298 <orientationCalculationFour>
	
	int centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     678:	ed 84       	ldd	r14, Y+13	; 0x0d
     67a:	fe 84       	ldd	r15, Y+14	; 0x0e
     67c:	ee 0c       	add	r14, r14
     67e:	ff 1c       	adc	r15, r15
     680:	ee 0c       	add	r14, r14
     682:	ff 1c       	adc	r15, r15
     684:	e2 0c       	add	r14, r2
     686:	f3 1c       	adc	r15, r3
     688:	8f 85       	ldd	r24, Y+15	; 0x0f
     68a:	98 89       	ldd	r25, Y+16	; 0x10
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	28 0e       	add	r2, r24
     696:	39 1e       	adc	r3, r25
     698:	d7 01       	movw	r26, r14
     69a:	6d 91       	ld	r22, X+
     69c:	7c 91       	ld	r23, X
     69e:	f1 01       	movw	r30, r2
     6a0:	80 81       	ld	r24, Z
     6a2:	91 81       	ldd	r25, Z+1	; 0x01
     6a4:	68 1b       	sub	r22, r24
     6a6:	79 0b       	sbc	r23, r25
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
	
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
     6a8:	07 2e       	mov	r0, r23
     6aa:	00 0c       	add	r0, r0
     6ac:	88 0b       	sbc	r24, r24
     6ae:	99 0b       	sbc	r25, r25
     6b0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__floatsisf>
     6b4:	2b 01       	movw	r4, r22
     6b6:	3c 01       	movw	r6, r24
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
	
	int centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     6b8:	d7 01       	movw	r26, r14
     6ba:	12 96       	adiw	r26, 0x02	; 2
     6bc:	6d 91       	ld	r22, X+
     6be:	7c 91       	ld	r23, X
     6c0:	13 97       	sbiw	r26, 0x03	; 3
     6c2:	f1 01       	movw	r30, r2
     6c4:	82 81       	ldd	r24, Z+2	; 0x02
     6c6:	93 81       	ldd	r25, Z+3	; 0x03
     6c8:	68 1b       	sub	r22, r24
     6ca:	79 0b       	sbc	r23, r25
	
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
     6cc:	07 2e       	mov	r0, r23
     6ce:	00 0c       	add	r0, r0
     6d0:	88 0b       	sbc	r24, r24
     6d2:	99 0b       	sbc	r25, r25
     6d4:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__floatsisf>
     6d8:	90 58       	subi	r25, 0x80	; 128
     6da:	a3 01       	movw	r20, r6
     6dc:	92 01       	movw	r18, r4
     6de:	0e 94 82 0a 	call	0x1504	; 0x1504 <atan2>
	theta += M_PI/2;
     6e2:	2b ed       	ldi	r18, 0xDB	; 219
     6e4:	3f e0       	ldi	r19, 0x0F	; 15
     6e6:	49 ec       	ldi	r20, 0xC9	; 201
     6e8:	5f e3       	ldi	r21, 0x3F	; 63
     6ea:	0e 94 03 0a 	call	0x1406	; 0x1406 <__addsf3>
     6ee:	2b 01       	movw	r4, r22
     6f0:	3c 01       	movw	r6, r24
	int t[2];
	t[0] = -1*center[0] + 512;
	t[1] = -1*center[1] + 382;
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     6f2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <sin>
     6f6:	6b 01       	movw	r12, r22
     6f8:	7c 01       	movw	r14, r24
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
	theta += M_PI/2;
	
	int t[2];
	t[0] = -1*center[0] + 512;
	t[1] = -1*center[1] + 382;
     6fa:	6e e7       	ldi	r22, 0x7E	; 126
     6fc:	71 e0       	ldi	r23, 0x01	; 1
     6fe:	6a 19       	sub	r22, r10
     700:	7b 09       	sbc	r23, r11
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     702:	07 2e       	mov	r0, r23
     704:	00 0c       	add	r0, r0
     706:	88 0b       	sbc	r24, r24
     708:	99 0b       	sbc	r25, r25
     70a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__floatsisf>
     70e:	4b 01       	movw	r8, r22
     710:	5c 01       	movw	r10, r24
     712:	c3 01       	movw	r24, r6
     714:	b2 01       	movw	r22, r4
     716:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <cos>
     71a:	69 8b       	std	Y+17, r22	; 0x11
     71c:	7a 8b       	std	Y+18, r23	; 0x12
     71e:	8b 8b       	std	Y+19, r24	; 0x13
     720:	9c 8b       	std	Y+20, r25	; 0x14
	
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
	theta += M_PI/2;
	
	int t[2];
	t[0] = -1*center[0] + 512;
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	72 e0       	ldi	r23, 0x02	; 2
     726:	60 1b       	sub	r22, r16
     728:	71 0b       	sbc	r23, r17
	t[1] = -1*center[1] + 382;
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     72a:	07 2e       	mov	r0, r23
     72c:	00 0c       	add	r0, r0
     72e:	88 0b       	sbc	r24, r24
     730:	99 0b       	sbc	r25, r25
     732:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__floatsisf>
     736:	2b 01       	movw	r4, r22
     738:	3c 01       	movw	r6, r24
     73a:	0c e1       	ldi	r16, 0x1C	; 28
     73c:	11 e0       	ldi	r17, 0x01	; 1
     73e:	a5 01       	movw	r20, r10
     740:	94 01       	movw	r18, r8
     742:	c7 01       	movw	r24, r14
     744:	b6 01       	movw	r22, r12
     746:	0e 94 86 0c 	call	0x190c	; 0x190c <__mulsf3>
     74a:	6d 8b       	std	Y+21, r22	; 0x15
     74c:	7e 8b       	std	Y+22, r23	; 0x16
     74e:	8f 8b       	std	Y+23, r24	; 0x17
     750:	98 8f       	std	Y+24, r25	; 0x18
     752:	a3 01       	movw	r20, r6
     754:	92 01       	movw	r18, r4
     756:	69 89       	ldd	r22, Y+17	; 0x11
     758:	7a 89       	ldd	r23, Y+18	; 0x12
     75a:	8b 89       	ldd	r24, Y+19	; 0x13
     75c:	9c 89       	ldd	r25, Y+20	; 0x14
     75e:	0e 94 86 0c 	call	0x190c	; 0x190c <__mulsf3>
     762:	9b 01       	movw	r18, r22
     764:	ac 01       	movw	r20, r24
     766:	6d 89       	ldd	r22, Y+21	; 0x15
     768:	7e 89       	ldd	r23, Y+22	; 0x16
     76a:	8f 89       	ldd	r24, Y+23	; 0x17
     76c:	98 8d       	ldd	r25, Y+24	; 0x18
     76e:	0e 94 02 0a 	call	0x1404	; 0x1404 <__subsf3>
     772:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fixsfsi>
     776:	d8 01       	movw	r26, r16
     778:	6d 93       	st	X+, r22
     77a:	7c 93       	st	X, r23
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     77c:	29 89       	ldd	r18, Y+17	; 0x11
     77e:	3a 89       	ldd	r19, Y+18	; 0x12
     780:	4b 89       	ldd	r20, Y+19	; 0x13
     782:	5c 89       	ldd	r21, Y+20	; 0x14
     784:	c5 01       	movw	r24, r10
     786:	b4 01       	movw	r22, r8
     788:	0e 94 86 0c 	call	0x190c	; 0x190c <__mulsf3>
     78c:	4b 01       	movw	r8, r22
     78e:	5c 01       	movw	r10, r24
     790:	a3 01       	movw	r20, r6
     792:	92 01       	movw	r18, r4
     794:	c7 01       	movw	r24, r14
     796:	b6 01       	movw	r22, r12
     798:	0e 94 86 0c 	call	0x190c	; 0x190c <__mulsf3>
     79c:	9b 01       	movw	r18, r22
     79e:	ac 01       	movw	r20, r24
     7a0:	c5 01       	movw	r24, r10
     7a2:	b4 01       	movw	r22, r8
     7a4:	0e 94 03 0a 	call	0x1406	; 0x1406 <__addsf3>
     7a8:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fixsfsi>
     7ac:	f8 01       	movw	r30, r16
     7ae:	73 83       	std	Z+3, r23	; 0x03
     7b0:	62 83       	std	Z+2, r22	; 0x02
	
	return centerFour;
}
     7b2:	c8 01       	movw	r24, r16
     7b4:	a8 96       	adiw	r28, 0x28	; 40
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	df 90       	pop	r13
     7ce:	cf 90       	pop	r12
     7d0:	bf 90       	pop	r11
     7d2:	af 90       	pop	r10
     7d4:	9f 90       	pop	r9
     7d6:	8f 90       	pop	r8
     7d8:	7f 90       	pop	r7
     7da:	6f 90       	pop	r6
     7dc:	5f 90       	pop	r5
     7de:	4f 90       	pop	r4
     7e0:	3f 90       	pop	r3
     7e2:	2f 90       	pop	r2
     7e4:	08 95       	ret

000007e6 <localization_calc>:
void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom);


//Public function declarations 
int* localization_calc(int rawStarData[8], int robotCenterPrev[2])
{
     7e6:	af 92       	push	r10
     7e8:	bf 92       	push	r11
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	68 97       	sbiw	r28, 0x18	; 24
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     80c:	ed b6       	in	r14, 0x3d	; 61
     80e:	fe b6       	in	r15, 0x3e	; 62
int* localization_calc(int rawStarData[8], int robotCenterPrev[2])
{
	static int robotCenter[2];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     810:	80 81       	ld	r24, Z
     812:	91 81       	ldd	r25, Z+1	; 0x01
     814:	9a 83       	std	Y+2, r25	; 0x02
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	80 85       	ldd	r24, Z+8	; 0x08
     81a:	91 85       	ldd	r25, Z+9	; 0x09
     81c:	9c 83       	std	Y+4, r25	; 0x04
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	82 81       	ldd	r24, Z+2	; 0x02
     822:	93 81       	ldd	r25, Z+3	; 0x03
     824:	9e 83       	std	Y+6, r25	; 0x06
     826:	8d 83       	std	Y+5, r24	; 0x05
     828:	82 85       	ldd	r24, Z+10	; 0x0a
     82a:	93 85       	ldd	r25, Z+11	; 0x0b
     82c:	98 87       	std	Y+8, r25	; 0x08
     82e:	8f 83       	std	Y+7, r24	; 0x07
     830:	84 81       	ldd	r24, Z+4	; 0x04
     832:	95 81       	ldd	r25, Z+5	; 0x05
     834:	9a 87       	std	Y+10, r25	; 0x0a
     836:	89 87       	std	Y+9, r24	; 0x09
     838:	84 85       	ldd	r24, Z+12	; 0x0c
     83a:	95 85       	ldd	r25, Z+13	; 0x0d
     83c:	9c 87       	std	Y+12, r25	; 0x0c
     83e:	8b 87       	std	Y+11, r24	; 0x0b
     840:	86 81       	ldd	r24, Z+6	; 0x06
     842:	97 81       	ldd	r25, Z+7	; 0x07
     844:	9e 87       	std	Y+14, r25	; 0x0e
     846:	8d 87       	std	Y+13, r24	; 0x0d
     848:	86 85       	ldd	r24, Z+14	; 0x0e
     84a:	97 85       	ldd	r25, Z+15	; 0x0f
     84c:	98 8b       	std	Y+16, r25	; 0x10
     84e:	8f 87       	std	Y+15, r24	; 0x0f
     850:	9e 01       	movw	r18, r28
     852:	2f 5f       	subi	r18, 0xFF	; 255
     854:	3f 4f       	sbci	r19, 0xFF	; 255
     856:	69 01       	movw	r12, r18
     858:	ae 01       	movw	r20, r28
     85a:	4f 5e       	subi	r20, 0xEF	; 239
     85c:	5f 4f       	sbci	r21, 0xFF	; 255
     85e:	f9 01       	movw	r30, r18
	
	//If the x or y data is not received, ensure that the whole point is removed (set to 1023)
	for (int i = 0; i < 4; i++ ){
		for (int j = 0; j < 2; j++ ){
			if (pvect[i][j] == 1023){
				pvect[i][0] = 1023;
     860:	6f ef       	ldi	r22, 0xFF	; 255
     862:	73 e0       	ldi	r23, 0x03	; 3
     864:	0c c0       	rjmp	.+24     	; 0x87e <localization_calc+0x98>
     866:	d9 01       	movw	r26, r18
     868:	11 96       	adiw	r26, 0x01	; 1
     86a:	7c 93       	st	X, r23
     86c:	6e 93       	st	-X, r22
				pvect[i][1] = 1023;
     86e:	13 96       	adiw	r26, 0x03	; 3
     870:	7c 93       	st	X, r23
     872:	6e 93       	st	-X, r22
     874:	12 97       	sbiw	r26, 0x02	; 2
     876:	34 96       	adiw	r30, 0x04	; 4
		{rawStarData[2], rawStarData[6]},
		{rawStarData[3], rawStarData[7]}
	};
	
	//If the x or y data is not received, ensure that the whole point is removed (set to 1023)
	for (int i = 0; i < 4; i++ ){
     878:	e4 17       	cp	r30, r20
     87a:	f5 07       	cpc	r31, r21
     87c:	61 f0       	breq	.+24     	; 0x896 <localization_calc+0xb0>
     87e:	9f 01       	movw	r18, r30
		for (int j = 0; j < 2; j++ ){
			if (pvect[i][j] == 1023){
     880:	80 81       	ld	r24, Z
     882:	91 81       	ldd	r25, Z+1	; 0x01
     884:	8f 3f       	cpi	r24, 0xFF	; 255
     886:	93 40       	sbci	r25, 0x03	; 3
     888:	71 f3       	breq	.-36     	; 0x866 <localization_calc+0x80>
     88a:	82 81       	ldd	r24, Z+2	; 0x02
     88c:	93 81       	ldd	r25, Z+3	; 0x03
     88e:	8f 3f       	cpi	r24, 0xFF	; 255
     890:	93 40       	sbci	r25, 0x03	; 3
     892:	89 f7       	brne	.-30     	; 0x876 <localization_calc+0x90>
     894:	e8 cf       	rjmp	.-48     	; 0x866 <localization_calc+0x80>
			}
		}
	}
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     896:	fe 01       	movw	r30, r28
     898:	71 96       	adiw	r30, 0x11	; 17
     89a:	88 e0       	ldi	r24, 0x08	; 8
     89c:	df 01       	movw	r26, r30
     89e:	1d 92       	st	X+, r1
     8a0:	8a 95       	dec	r24
     8a2:	e9 f7       	brne	.-6      	; 0x89e <localization_calc+0xb8>
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     8a8:	00 e0       	ldi	r16, 0x00	; 0
     8aa:	10 e0       	ldi	r17, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     8ac:	f6 01       	movw	r30, r12
     8ae:	80 81       	ld	r24, Z
     8b0:	91 81       	ldd	r25, Z+1	; 0x01
     8b2:	8f 3f       	cpi	r24, 0xFF	; 255
     8b4:	93 40       	sbci	r25, 0x03	; 3
     8b6:	71 f0       	breq	.+28     	; 0x8d4 <localization_calc+0xee>
			numPoints++;
     8b8:	0f 5f       	subi	r16, 0xFF	; 255
     8ba:	1f 4f       	sbci	r17, 0xFF	; 255
			pointIndices[numPoints] = i;
     8bc:	f8 01       	movw	r30, r16
     8be:	ee 0f       	add	r30, r30
     8c0:	ff 1f       	adc	r31, r31
     8c2:	aa 24       	eor	r10, r10
     8c4:	a3 94       	inc	r10
     8c6:	b1 2c       	mov	r11, r1
     8c8:	ac 0e       	add	r10, r28
     8ca:	bd 1e       	adc	r11, r29
     8cc:	ea 0d       	add	r30, r10
     8ce:	fb 1d       	adc	r31, r11
     8d0:	31 8b       	std	Z+17, r19	; 0x11
     8d2:	20 8b       	std	Z+16, r18	; 0x10
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     8d4:	2f 5f       	subi	r18, 0xFF	; 255
     8d6:	3f 4f       	sbci	r19, 0xFF	; 255
     8d8:	44 e0       	ldi	r20, 0x04	; 4
     8da:	c4 0e       	add	r12, r20
     8dc:	d1 1c       	adc	r13, r1
     8de:	24 30       	cpi	r18, 0x04	; 4
     8e0:	31 05       	cpc	r19, r1
     8e2:	21 f7       	brne	.-56     	; 0x8ac <localization_calc+0xc6>
		if (pvect[i][0] != 1023){
			numPoints++;
			pointIndices[numPoints] = i;
		}
	}
	m_usb_tx_int(numPoints);
     8e4:	c8 01       	movw	r24, r16
     8e6:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <m_usb_tx_int>
	
	if (numPoints) { //If any points were found 
     8ea:	01 15       	cp	r16, r1
     8ec:	11 05       	cpc	r17, r1
     8ee:	09 f4       	brne	.+2      	; 0x8f2 <localization_calc+0x10c>
     8f0:	84 c0       	rjmp	.+264    	; 0x9fa <localization_calc+0x214>
     8f2:	cd b6       	in	r12, 0x3d	; 61
     8f4:	de b6       	in	r13, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     8f6:	b8 01       	movw	r22, r16
     8f8:	66 0f       	add	r22, r22
     8fa:	77 1f       	adc	r23, r23
     8fc:	66 0f       	add	r22, r22
     8fe:	77 1f       	adc	r23, r23
     900:	8d b7       	in	r24, 0x3d	; 61
     902:	9e b7       	in	r25, 0x3e	; 62
     904:	86 1b       	sub	r24, r22
     906:	97 0b       	sbc	r25, r23
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	9e bf       	out	0x3e, r25	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	8d bf       	out	0x3d, r24	; 61
     912:	01 96       	adiw	r24, 0x01	; 1
		for (int i = 0; i < numPoints; i++) {
     914:	10 16       	cp	r1, r16
     916:	11 06       	cpc	r1, r17
     918:	7c f5       	brge	.+94     	; 0x978 <localization_calc+0x192>
     91a:	ae 01       	movw	r20, r28
     91c:	4f 5e       	subi	r20, 0xEF	; 239
     91e:	5f 4f       	sbci	r21, 0xFF	; 255
     920:	dc 01       	movw	r26, r24
     922:	68 0f       	add	r22, r24
     924:	79 1f       	adc	r23, r25
			int index = pointIndices[i];
     926:	fa 01       	movw	r30, r20
     928:	21 91       	ld	r18, Z+
     92a:	31 91       	ld	r19, Z+
     92c:	af 01       	movw	r20, r30
			points[i][1] = pvect[index][1];
     92e:	f9 01       	movw	r30, r18
     930:	ee 0f       	add	r30, r30
     932:	ff 1f       	adc	r31, r31
     934:	ee 0f       	add	r30, r30
     936:	ff 1f       	adc	r31, r31
     938:	aa 24       	eor	r10, r10
     93a:	a3 94       	inc	r10
     93c:	b1 2c       	mov	r11, r1
     93e:	ac 0e       	add	r10, r28
     940:	bd 1e       	adc	r11, r29
     942:	ea 0d       	add	r30, r10
     944:	fb 1d       	adc	r31, r11
     946:	02 80       	ldd	r0, Z+2	; 0x02
     948:	f3 81       	ldd	r31, Z+3	; 0x03
     94a:	e0 2d       	mov	r30, r0
     94c:	13 96       	adiw	r26, 0x03	; 3
     94e:	fc 93       	st	X, r31
     950:	ee 93       	st	-X, r30
     952:	12 97       	sbiw	r26, 0x02	; 2
			points[i][2] = pvect[index][2];
     954:	f9 01       	movw	r30, r18
     956:	31 96       	adiw	r30, 0x01	; 1
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	ea 0d       	add	r30, r10
     962:	fb 1d       	adc	r31, r11
     964:	20 81       	ld	r18, Z
     966:	31 81       	ldd	r19, Z+1	; 0x01
     968:	15 96       	adiw	r26, 0x05	; 5
     96a:	3c 93       	st	X, r19
     96c:	2e 93       	st	-X, r18
     96e:	14 97       	sbiw	r26, 0x04	; 4
     970:	14 96       	adiw	r26, 0x04	; 4
	}
	m_usb_tx_int(numPoints);
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     972:	a6 17       	cp	r26, r22
     974:	b7 07       	cpc	r27, r23
     976:	b9 f6       	brne	.-82     	; 0x926 <localization_calc+0x140>
			points[i][1] = pvect[index][1];
			points[i][2] = pvect[index][2];
		}
		
		
		m_red(ON);
     978:	6e 9a       	sbi	0x0d, 6	; 13
     97a:	76 98       	cbi	0x0e, 6	; 14
		
		int* calcPointer; 
		static int rc[2] = {1023, 1023};
		switch (numPoints)
     97c:	02 30       	cpi	r16, 0x02	; 2
     97e:	11 05       	cpc	r17, r1
     980:	e9 f0       	breq	.+58     	; 0x9bc <localization_calc+0x1d6>
     982:	24 f4       	brge	.+8      	; 0x98c <localization_calc+0x1a6>
     984:	01 30       	cpi	r16, 0x01	; 1
     986:	11 05       	cpc	r17, r1
     988:	41 f0       	breq	.+16     	; 0x99a <localization_calc+0x1b4>
     98a:	22 c0       	rjmp	.+68     	; 0x9d0 <localization_calc+0x1ea>
     98c:	03 30       	cpi	r16, 0x03	; 3
     98e:	11 05       	cpc	r17, r1
     990:	59 f0       	breq	.+22     	; 0x9a8 <localization_calc+0x1c2>
     992:	04 30       	cpi	r16, 0x04	; 4
     994:	11 05       	cpc	r17, r1
     996:	21 f0       	breq	.+8      	; 0x9a0 <localization_calc+0x1ba>
     998:	1b c0       	rjmp	.+54     	; 0x9d0 <localization_calc+0x1ea>
			case 2 :
				calcPointer = twoPointCalc(points);
				break; 
				
			case 1 : 
				calcPointer = onePointCalc(points);
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b1 e0       	ldi	r27, 0x01	; 1
     99e:	1a c0       	rjmp	.+52     	; 0x9d4 <localization_calc+0x1ee>
		int* calcPointer; 
		static int rc[2] = {1023, 1023};
		switch (numPoints)
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     9a0:	0e 94 aa 01 	call	0x354	; 0x354 <fourPointCalc>
     9a4:	dc 01       	movw	r26, r24
				break;
     9a6:	16 c0       	rjmp	.+44     	; 0x9d4 <localization_calc+0x1ee>


int* threePointCalc(int pvect[3][2])
{
	static int centerThree[2];	
	centerThree[0] = 1023;
     9a8:	e8 e1       	ldi	r30, 0x18	; 24
     9aa:	f1 e0       	ldi	r31, 0x01	; 1
     9ac:	8f ef       	ldi	r24, 0xFF	; 255
     9ae:	93 e0       	ldi	r25, 0x03	; 3
     9b0:	91 83       	std	Z+1, r25	; 0x01
     9b2:	80 83       	st	Z, r24
	centerThree[1] = 1023;
     9b4:	93 83       	std	Z+3, r25	; 0x03
     9b6:	82 83       	std	Z+2, r24	; 0x02
			case 4 :
				calcPointer = fourPointCalc(points);
				break;
				
			case 3 : 
				calcPointer = threePointCalc(points);
     9b8:	df 01       	movw	r26, r30
				break;
     9ba:	0c c0       	rjmp	.+24     	; 0x9d4 <localization_calc+0x1ee>


int* twoPointCalc(int pvect[2][2])
{
	static int centerTwo[2];
	centerTwo[0] = 1023;
     9bc:	e4 e1       	ldi	r30, 0x14	; 20
     9be:	f1 e0       	ldi	r31, 0x01	; 1
     9c0:	8f ef       	ldi	r24, 0xFF	; 255
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	91 83       	std	Z+1, r25	; 0x01
     9c6:	80 83       	st	Z, r24
	centerTwo[1] = 1023;
     9c8:	93 83       	std	Z+3, r25	; 0x03
     9ca:	82 83       	std	Z+2, r24	; 0x02
			case 3 : 
				calcPointer = threePointCalc(points);
				break;
				
			case 2 :
				calcPointer = twoPointCalc(points);
     9cc:	df 01       	movw	r26, r30
				break; 
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <localization_calc+0x1ee>
			case 1 : 
				calcPointer = onePointCalc(points);
				break; 
				
			default:
				calcPointer = &rc[0];
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b1 e0       	ldi	r27, 0x01	; 1
				
		}
		
		robotCenter[0] = (int)calcPointer[0];
     9d4:	8d 91       	ld	r24, X+
     9d6:	9c 91       	ld	r25, X
     9d8:	11 97       	sbiw	r26, 0x01	; 1
     9da:	e0 e2       	ldi	r30, 0x20	; 32
     9dc:	f1 e0       	ldi	r31, 0x01	; 1
     9de:	91 83       	std	Z+1, r25	; 0x01
     9e0:	80 83       	st	Z, r24
		robotCenter[1] = (int)calcPointer[1];
     9e2:	12 96       	adiw	r26, 0x02	; 2
     9e4:	8d 91       	ld	r24, X+
     9e6:	9c 91       	ld	r25, X
     9e8:	13 97       	sbiw	r26, 0x03	; 3
     9ea:	93 83       	std	Z+3, r25	; 0x03
     9ec:	82 83       	std	Z+2, r24	; 0x02
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de be       	out	0x3e, r13	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd be       	out	0x3d, r12	; 61
     9f8:	0a c0       	rjmp	.+20     	; 0xa0e <localization_calc+0x228>
		
	
	} else { 
		robotCenter[0] = 1023; 
     9fa:	e0 e2       	ldi	r30, 0x20	; 32
     9fc:	f1 e0       	ldi	r31, 0x01	; 1
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	93 e0       	ldi	r25, 0x03	; 3
     a02:	91 83       	std	Z+1, r25	; 0x01
     a04:	80 83       	st	Z, r24
		robotCenter[1] = 1023; 
     a06:	93 83       	std	Z+3, r25	; 0x03
     a08:	82 83       	std	Z+2, r24	; 0x02
		m_red(OFF);	
     a0a:	6e 9a       	sbi	0x0d, 6	; 13
     a0c:	76 9a       	sbi	0x0e, 6	; 14
	
	return robotCenter;
	
	
	
}
     a0e:	80 e2       	ldi	r24, 0x20	; 32
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	fe be       	out	0x3e, r15	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	ed be       	out	0x3d, r14	; 61
     a1c:	68 96       	adiw	r28, 0x18	; 24
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	cf 90       	pop	r12
     a38:	bf 90       	pop	r11
     a3a:	af 90       	pop	r10
     a3c:	08 95       	ret

00000a3e <init>:
}


void init() 
{
	m_red(ON);
     a3e:	6e 9a       	sbi	0x0d, 6	; 13
     a40:	76 98       	cbi	0x0e, 6	; 14
	while(!m_wii_open());
     a42:	0e 94 4e 08 	call	0x109c	; 0x109c <m_wii_open>
     a46:	88 23       	and	r24, r24
     a48:	e1 f3       	breq	.-8      	; 0xa42 <init+0x4>
	m_red(OFF);
     a4a:	6e 9a       	sbi	0x0d, 6	; 13
     a4c:	76 9a       	sbi	0x0e, 6	; 14
	
	m_usb_init();
     a4e:	0e 94 92 05 	call	0xb24	; 0xb24 <m_usb_init>
     a52:	08 95       	ret

00000a54 <main>:
#include "localization_function.h"

void init(); 

int main(void)
{
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	ac 97       	sbiw	r28, 0x2c	; 44
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
	
	init();
     a68:	0e 94 1f 05 	call	0xa3e	; 0xa3e <init>
	m_green(ON);
     a6c:	6a 9a       	sbi	0x0d, 2	; 13
     a6e:	72 98       	cbi	0x0e, 2	; 14
	unsigned int blobs[12];
	//char rx_buffer;

	int robotCenterPrev[2] = {1023, 1023};
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	93 e0       	ldi	r25, 0x03	; 3
     a74:	9a 8f       	std	Y+26, r25	; 0x1a
     a76:	89 8f       	std	Y+25, r24	; 0x19
     a78:	9c 8f       	std	Y+28, r25	; 0x1c
     a7a:	8b 8f       	std	Y+27, r24	; 0x1b
	int* robotCenter;
	
    while (1) 
    {
		
		m_wii_read(blobs);
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	0e 94 6f 09 	call	0x12de	; 0x12de <m_wii_read>
		unsigned int x1 = blobs[0];
		unsigned int y1 = blobs[1];
     a84:	6b 81       	ldd	r22, Y+3	; 0x03
     a86:	7c 81       	ldd	r23, Y+4	; 0x04
		unsigned int x2 = blobs[3];
     a88:	0f 81       	ldd	r16, Y+7	; 0x07
     a8a:	18 85       	ldd	r17, Y+8	; 0x08
		unsigned int y2 = blobs[4];
     a8c:	49 85       	ldd	r20, Y+9	; 0x09
     a8e:	5a 85       	ldd	r21, Y+10	; 0x0a
		unsigned int x3 = blobs[6];
     a90:	ad 85       	ldd	r26, Y+13	; 0x0d
     a92:	be 85       	ldd	r27, Y+14	; 0x0e
		unsigned int y3 = blobs[7];
     a94:	2f 85       	ldd	r18, Y+15	; 0x0f
     a96:	38 89       	ldd	r19, Y+16	; 0x10
		unsigned int x4 = blobs[9];
     a98:	eb 89       	ldd	r30, Y+19	; 0x13
     a9a:	fc 89       	ldd	r31, Y+20	; 0x14
		unsigned int y4 = blobs[10];
     a9c:	8d 89       	ldd	r24, Y+21	; 0x15
     a9e:	9e 89       	ldd	r25, Y+22	; 0x16
		
		int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
     aa0:	e9 80       	ldd	r14, Y+1	; 0x01
     aa2:	fa 80       	ldd	r15, Y+2	; 0x02
     aa4:	fe 8e       	std	Y+30, r15	; 0x1e
     aa6:	ed 8e       	std	Y+29, r14	; 0x1d
     aa8:	18 a3       	std	Y+32, r17	; 0x20
     aaa:	0f 8f       	std	Y+31, r16	; 0x1f
     aac:	ba a3       	std	Y+34, r27	; 0x22
     aae:	a9 a3       	std	Y+33, r26	; 0x21
     ab0:	fc a3       	std	Y+36, r31	; 0x24
     ab2:	eb a3       	std	Y+35, r30	; 0x23
     ab4:	7e a3       	std	Y+38, r23	; 0x26
     ab6:	6d a3       	std	Y+37, r22	; 0x25
     ab8:	58 a7       	std	Y+40, r21	; 0x28
     aba:	4f a3       	std	Y+39, r20	; 0x27
     abc:	3a a7       	std	Y+42, r19	; 0x2a
     abe:	29 a7       	std	Y+41, r18	; 0x29
     ac0:	9c a7       	std	Y+44, r25	; 0x2c
     ac2:	8b a7       	std	Y+43, r24	; 0x2b
		robotCenter = localization_calc(rawStarData, robotCenterPrev); 
     ac4:	be 01       	movw	r22, r28
     ac6:	67 5e       	subi	r22, 0xE7	; 231
     ac8:	7f 4f       	sbci	r23, 0xFF	; 255
     aca:	ce 01       	movw	r24, r28
     acc:	4d 96       	adiw	r24, 0x1d	; 29
     ace:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <localization_calc>
     ad2:	8c 01       	movw	r16, r24

		m_usb_tx_string("\nx = ");
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	0e 94 c7 07 	call	0xf8e	; 0xf8e <print_P>
		m_usb_tx_int((int)robotCenter[0]);
     adc:	f8 01       	movw	r30, r16
     ade:	80 81       	ld	r24, Z
     ae0:	91 81       	ldd	r25, Z+1	; 0x01
     ae2:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <m_usb_tx_int>
		m_usb_tx_string("  y = ");
     ae6:	8b ef       	ldi	r24, 0xFB	; 251
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 c7 07 	call	0xf8e	; 0xf8e <print_P>
		m_usb_tx_int((int)robotCenter[1]);
     aee:	f8 01       	movw	r30, r16
     af0:	82 81       	ldd	r24, Z+2	; 0x02
     af2:	93 81       	ldd	r25, Z+3	; 0x03
     af4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <m_usb_tx_int>
		m_usb_tx_string("  ");
     af8:	88 ef       	ldi	r24, 0xF8	; 248
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 c7 07 	call	0xf8e	; 0xf8e <print_P>
// 			m_usb_tx_string("\n");
// 
// 		}
		
		
    }
     b00:	bd cf       	rjmp	.-134    	; 0xa7c <main+0x28>

00000b02 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     b02:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     b04:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     b06:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     b08:	8c e0       	ldi	r24, 0x0C	; 12
     b0a:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     b0e:	e9 e6       	ldi	r30, 0x69	; 105
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	80 62       	ori	r24, 0x20	; 32
     b16:	80 83       	st	Z, r24
     b18:	80 81       	ld	r24, Z
     b1a:	8f 7e       	andi	r24, 0xEF	; 239
     b1c:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     b1e:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     b20:	78 94       	sei
     b22:	08 95       	ret

00000b24 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     b2a:	80 ea       	ldi	r24, 0xA0	; 160
     b2c:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     b30:	82 e1       	ldi	r24, 0x12	; 18
     b32:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     b34:	09 b4       	in	r0, 0x29	; 41
     b36:	00 fe       	sbrs	r0, 0
     b38:	fd cf       	rjmp	.-6      	; 0xb34 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     b3a:	80 e9       	ldi	r24, 0x90	; 144
     b3c:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     b40:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     b44:	10 92 27 01 	sts	0x0127, r1
	cdc_line_rtsdtr = 0;
     b48:	10 92 24 01 	sts	0x0124, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     b4c:	8c e0       	ldi	r24, 0x0C	; 12
     b4e:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     b52:	78 94       	sei
     b54:	08 95       	ret

00000b56 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     b5a:	90 91 27 01 	lds	r25, 0x0127
     b5e:	99 23       	and	r25, r25
     b60:	09 f4       	brne	.+2      	; 0xb64 <m_usb_tx_char+0xe>
     b62:	4c c0       	rjmp	.+152    	; 0xbfc <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     b64:	9f b7       	in	r25, 0x3f	; 63
	cli();
     b66:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     b68:	24 e0       	ldi	r18, 0x04	; 4
     b6a:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     b6e:	20 91 25 01 	lds	r18, 0x0125
     b72:	22 23       	and	r18, r18
     b74:	49 f0       	breq	.+18     	; 0xb88 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
     b76:	20 91 e8 00 	lds	r18, 0x00E8
     b7a:	25 fd       	sbrc	r18, 5
     b7c:	03 c0       	rjmp	.+6      	; 0xb84 <m_usb_tx_char+0x2e>
			SREG = intr_state;
     b7e:	9f bf       	out	0x3f, r25	; 63
			return -1;
     b80:	8f ef       	ldi	r24, 0xFF	; 255
     b82:	41 c0       	rjmp	.+130    	; 0xc06 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
     b84:	10 92 25 01 	sts	0x0125, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     b88:	30 91 e4 00 	lds	r19, 0x00E4
     b8c:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     b8e:	20 91 e8 00 	lds	r18, 0x00E8
     b92:	25 fd       	sbrc	r18, 5
     b94:	24 c0       	rjmp	.+72     	; 0xbde <m_usb_tx_char+0x88>
		SREG = intr_state;
     b96:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     b98:	90 91 e4 00 	lds	r25, 0x00E4
     b9c:	93 17       	cp	r25, r19
     b9e:	81 f0       	breq	.+32     	; 0xbc0 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     ba0:	90 91 27 01 	lds	r25, 0x0127
     ba4:	99 23       	and	r25, r25
     ba6:	61 f1       	breq	.+88     	; 0xc00 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     ba8:	a9 ee       	ldi	r26, 0xE9	; 233
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     bae:	e8 ee       	ldi	r30, 0xE8	; 232
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     bb2:	c4 ee       	ldi	r28, 0xE4	; 228
     bb4:	d0 e0       	ldi	r29, 0x00	; 0
     bb6:	0d c0       	rjmp	.+26     	; 0xbd2 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     bb8:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     bba:	98 81       	ld	r25, Y
     bbc:	93 13       	cpse	r25, r19
     bbe:	05 c0       	rjmp	.+10     	; 0xbca <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	80 93 25 01 	sts	0x0125, r24
			return -1;
     bc6:	8f ef       	ldi	r24, 0xFF	; 255
     bc8:	1e c0       	rjmp	.+60     	; 0xc06 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     bca:	90 91 27 01 	lds	r25, 0x0127
     bce:	99 23       	and	r25, r25
     bd0:	c9 f0       	breq	.+50     	; 0xc04 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
     bd2:	9f b7       	in	r25, 0x3f	; 63
		cli();
     bd4:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     bd6:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     bd8:	20 81       	ld	r18, Z
     bda:	25 ff       	sbrs	r18, 5
     bdc:	ed cf       	rjmp	.-38     	; 0xbb8 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     bde:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     be2:	80 91 e8 00 	lds	r24, 0x00E8
     be6:	85 fd       	sbrc	r24, 5
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <m_usb_tx_char+0x9a>
     bea:	8a e3       	ldi	r24, 0x3A	; 58
     bec:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     bf0:	85 e0       	ldi	r24, 0x05	; 5
     bf2:	80 93 26 01 	sts	0x0126, r24
	SREG = intr_state;
     bf6:	9f bf       	out	0x3f, r25	; 63
	return 0;
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	05 c0       	rjmp	.+10     	; 0xc06 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     c00:	8f ef       	ldi	r24, 0xFF	; 255
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <m_usb_tx_char+0xb0>
     c04:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     c1e:	e1 ee       	ldi	r30, 0xE1	; 225
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
        UDINT = 0;
     c24:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
     c26:	83 ff       	sbrs	r24, 3
     c28:	11 c0       	rjmp	.+34     	; 0xc4c <__vector_10+0x40>
		UENUM = 0;
     c2a:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
     c34:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     c38:	92 e1       	ldi	r25, 0x12	; 18
     c3a:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
     c3e:	98 e0       	ldi	r25, 0x08	; 8
     c40:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
     c44:	10 92 27 01 	sts	0x0127, r1
		cdc_line_rtsdtr = 0;
     c48:	10 92 24 01 	sts	0x0124, r1
        }
	if (intbits & (1<<SOFI)) {
     c4c:	82 ff       	sbrs	r24, 2
     c4e:	13 c0       	rjmp	.+38     	; 0xc76 <__vector_10+0x6a>
		if (usb_configuration) {
     c50:	80 91 27 01 	lds	r24, 0x0127
     c54:	88 23       	and	r24, r24
     c56:	79 f0       	breq	.+30     	; 0xc76 <__vector_10+0x6a>
			t = transmit_flush_timer;
     c58:	80 91 26 01 	lds	r24, 0x0126
			if (t) {
     c5c:	88 23       	and	r24, r24
     c5e:	59 f0       	breq	.+22     	; 0xc76 <__vector_10+0x6a>
				transmit_flush_timer = --t;
     c60:	81 50       	subi	r24, 0x01	; 1
     c62:	80 93 26 01 	sts	0x0126, r24
				if (!t) {
     c66:	81 11       	cpse	r24, r1
     c68:	06 c0       	rjmp	.+12     	; 0xc76 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
     c6a:	84 e0       	ldi	r24, 0x04	; 4
     c6c:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     c70:	8a e3       	ldi	r24, 0x3A	; 58
     c72:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     c76:	ff 91       	pop	r31
     c78:	ef 91       	pop	r30
     c7a:	9f 91       	pop	r25
     c7c:	8f 91       	pop	r24
     c7e:	0f 90       	pop	r0
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	0f 90       	pop	r0
     c84:	1f 90       	pop	r1
     c86:	18 95       	reti

00000c88 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     c88:	1f 92       	push	r1
     c8a:	0f 92       	push	r0
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	0f 92       	push	r0
     c90:	11 24       	eor	r1, r1
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	2f 93       	push	r18
     c98:	3f 93       	push	r19
     c9a:	4f 93       	push	r20
     c9c:	5f 93       	push	r21
     c9e:	6f 93       	push	r22
     ca0:	7f 93       	push	r23
     ca2:	8f 93       	push	r24
     ca4:	9f 93       	push	r25
     ca6:	af 93       	push	r26
     ca8:	bf 93       	push	r27
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     cb2:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     cb6:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     cba:	83 ff       	sbrs	r24, 3
     cbc:	4c c1       	rjmp	.+664    	; 0xf56 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
     cbe:	e1 ef       	ldi	r30, 0xF1	; 241
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	60 81       	ld	r22, Z
                bRequest = UEDATX;
     cc4:	80 81       	ld	r24, Z
                wValue = UEDATX;
     cc6:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
     cc8:	90 81       	ld	r25, Z
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	39 2b       	or	r19, r25
                wIndex = UEDATX;
     cce:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
     cd0:	90 81       	ld	r25, Z
     cd2:	50 e0       	ldi	r21, 0x00	; 0
     cd4:	59 2b       	or	r21, r25
                wLength = UEDATX;
     cd6:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
     cd8:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     cda:	92 ef       	ldi	r25, 0xF2	; 242
     cdc:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
     ce0:	86 30       	cpi	r24, 0x06	; 6
     ce2:	09 f0       	breq	.+2      	; 0xce6 <__vector_11+0x5e>
     ce4:	58 c0       	rjmp	.+176    	; 0xd96 <__vector_11+0x10e>
     ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
     ce8:	81 e2       	ldi	r24, 0x21	; 33
     cea:	80 93 eb 00 	sts	0x00EB, r24
					return;
     cee:	3a c1       	rjmp	.+628    	; 0xf64 <__vector_11+0x2dc>
     cf0:	66 e0       	ldi	r22, 0x06	; 6
     cf2:	88 e0       	ldi	r24, 0x08	; 8
     cf4:	91 e0       	ldi	r25, 0x01	; 1
				}
				desc_val = pgm_read_word(list);
     cf6:	fc 01       	movw	r30, r24
     cf8:	a5 91       	lpm	r26, Z+
     cfa:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
     cfc:	2a 17       	cp	r18, r26
     cfe:	3b 07       	cpc	r19, r27
     d00:	11 f0       	breq	.+4      	; 0xd06 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
     d02:	07 96       	adiw	r24, 0x07	; 7
					continue;
     d04:	23 c0       	rjmp	.+70     	; 0xd4c <__vector_11+0xc4>
				}
				list += 2;
     d06:	fc 01       	movw	r30, r24
     d08:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
     d0a:	a5 91       	lpm	r26, Z+
     d0c:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
     d0e:	4a 17       	cp	r20, r26
     d10:	5b 07       	cpc	r21, r27
     d12:	11 f0       	breq	.+4      	; 0xd18 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
     d14:	07 96       	adiw	r24, 0x07	; 7
					continue;
     d16:	1a c0       	rjmp	.+52     	; 0xd4c <__vector_11+0xc4>
				}
				list += 2;
     d18:	fc 01       	movw	r30, r24
     d1a:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
     d1c:	45 91       	lpm	r20, Z+
     d1e:	54 91       	lpm	r21, Z
				list += 2;
     d20:	fc 01       	movw	r30, r24
     d22:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
     d24:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
     d26:	87 2f       	mov	r24, r23
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     d2c:	8f 3f       	cpi	r24, 0xFF	; 255
     d2e:	91 05       	cpc	r25, r1
     d30:	19 f0       	breq	.+6      	; 0xd38 <__vector_11+0xb0>
     d32:	10 f0       	brcs	.+4      	; 0xd38 <__vector_11+0xb0>
     d34:	8f ef       	ldi	r24, 0xFF	; 255
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	82 17       	cp	r24, r18
     d3a:	08 f4       	brcc	.+2      	; 0xd3e <__vector_11+0xb6>
     d3c:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     d3e:	a8 ee       	ldi	r26, 0xE8	; 232
     d40:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     d42:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     d44:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
     d46:	c1 ef       	ldi	r28, 0xF1	; 241
     d48:	d0 e0       	ldi	r29, 0x00	; 0
     d4a:	03 c0       	rjmp	.+6      	; 0xd52 <__vector_11+0xca>
     d4c:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     d4e:	99 f6       	brne	.-90     	; 0xcf6 <__vector_11+0x6e>
     d50:	cb cf       	rjmp	.-106    	; 0xce8 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     d52:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     d54:	98 2f       	mov	r25, r24
     d56:	95 70       	andi	r25, 0x05	; 5
     d58:	e1 f3       	breq	.-8      	; 0xd52 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
     d5a:	82 fd       	sbrc	r24, 2
     d5c:	03 c1       	rjmp	.+518    	; 0xf64 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     d5e:	32 2f       	mov	r19, r18
     d60:	21 31       	cpi	r18, 0x11	; 17
     d62:	08 f0       	brcs	.+2      	; 0xd66 <__vector_11+0xde>
     d64:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
     d66:	33 23       	and	r19, r19
     d68:	09 f4       	brne	.+2      	; 0xd6c <__vector_11+0xe4>
     d6a:	f9 c0       	rjmp	.+498    	; 0xf5e <__vector_11+0x2d6>
     d6c:	fa 01       	movw	r30, r20
     d6e:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
     d70:	94 91       	lpm	r25, Z
     d72:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     d74:	81 50       	subi	r24, 0x01	; 1
     d76:	31 96       	adiw	r30, 0x01	; 1
     d78:	81 11       	cpse	r24, r1
     d7a:	fa cf       	rjmp	.-12     	; 0xd70 <__vector_11+0xe8>
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	83 0f       	add	r24, r19
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	48 0f       	add	r20, r24
     d86:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     d88:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     d8a:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     d8c:	21 11       	cpse	r18, r1
     d8e:	e1 cf       	rjmp	.-62     	; 0xd52 <__vector_11+0xca>
     d90:	30 31       	cpi	r19, 0x10	; 16
     d92:	f9 f2       	breq	.-66     	; 0xd52 <__vector_11+0xca>
     d94:	e7 c0       	rjmp	.+462    	; 0xf64 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     d96:	85 30       	cpi	r24, 0x05	; 5
     d98:	61 f4       	brne	.+24     	; 0xdb2 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     d9a:	8e ef       	ldi	r24, 0xFE	; 254
     d9c:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     da0:	e8 ee       	ldi	r30, 0xE8	; 232
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	80 ff       	sbrs	r24, 0
     da8:	fd cf       	rjmp	.-6      	; 0xda4 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     daa:	20 68       	ori	r18, 0x80	; 128
     dac:	20 93 e3 00 	sts	0x00E3, r18
			return;
     db0:	d9 c0       	rjmp	.+434    	; 0xf64 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     db2:	89 30       	cpi	r24, 0x09	; 9
     db4:	09 f0       	breq	.+2      	; 0xdb8 <__vector_11+0x130>
     db6:	35 c0       	rjmp	.+106    	; 0xe22 <__vector_11+0x19a>
     db8:	61 11       	cpse	r22, r1
     dba:	cd c0       	rjmp	.+410    	; 0xf56 <__vector_11+0x2ce>
			usb_configuration = wValue;
     dbc:	20 93 27 01 	sts	0x0127, r18
			cdc_line_rtsdtr = 0;
     dc0:	10 92 24 01 	sts	0x0124, r1
			transmit_flush_timer = 0;
     dc4:	10 92 26 01 	sts	0x0126, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     dc8:	8e ef       	ldi	r24, 0xFE	; 254
     dca:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     dce:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     dd0:	21 eb       	ldi	r18, 0xB1	; 177
     dd2:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
     dd4:	c9 ee       	ldi	r28, 0xE9	; 233
     dd6:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
     dd8:	ab ee       	ldi	r26, 0xEB	; 235
     dda:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
     ddc:	0c ee       	ldi	r16, 0xEC	; 236
     dde:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
     de0:	6d ee       	ldi	r22, 0xED	; 237
     de2:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     de4:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
     de6:	a9 01       	movw	r20, r18
     de8:	4f 5f       	subi	r20, 0xFF	; 255
     dea:	5f 4f       	sbci	r21, 0xFF	; 255
     dec:	f9 01       	movw	r30, r18
     dee:	94 91       	lpm	r25, Z
				UECONX = en;
     df0:	9c 93       	st	X, r25
				if (en) {
     df2:	99 23       	and	r25, r25
     df4:	61 f0       	breq	.+24     	; 0xe0e <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
     df6:	fa 01       	movw	r30, r20
     df8:	44 91       	lpm	r20, Z
     dfa:	f8 01       	movw	r30, r16
     dfc:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
     dfe:	f9 01       	movw	r30, r18
     e00:	32 96       	adiw	r30, 0x02	; 2
     e02:	94 91       	lpm	r25, Z
     e04:	2d 5f       	subi	r18, 0xFD	; 253
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	fb 01       	movw	r30, r22
     e0a:	90 83       	st	Z, r25
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
     e0e:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     e10:	8f 5f       	subi	r24, 0xFF	; 255
     e12:	85 30       	cpi	r24, 0x05	; 5
     e14:	39 f7       	brne	.-50     	; 0xde4 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     e16:	ea ee       	ldi	r30, 0xEA	; 234
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	8e e1       	ldi	r24, 0x1E	; 30
     e1c:	80 83       	st	Z, r24
        		UERST = 0;
     e1e:	10 82       	st	Z, r1
			return;
     e20:	a1 c0       	rjmp	.+322    	; 0xf64 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     e22:	88 30       	cpi	r24, 0x08	; 8
     e24:	81 f4       	brne	.+32     	; 0xe46 <__vector_11+0x1be>
     e26:	60 38       	cpi	r22, 0x80	; 128
     e28:	09 f0       	breq	.+2      	; 0xe2c <__vector_11+0x1a4>
     e2a:	95 c0       	rjmp	.+298    	; 0xf56 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     e2c:	e8 ee       	ldi	r30, 0xE8	; 232
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	80 ff       	sbrs	r24, 0
     e34:	fd cf       	rjmp	.-6      	; 0xe30 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     e36:	80 91 27 01 	lds	r24, 0x0127
     e3a:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e3e:	8e ef       	ldi	r24, 0xFE	; 254
     e40:	80 93 e8 00 	sts	0x00E8, r24
     e44:	8f c0       	rjmp	.+286    	; 0xf64 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
     e46:	81 32       	cpi	r24, 0x21	; 33
     e48:	b9 f4       	brne	.+46     	; 0xe78 <__vector_11+0x1f0>
     e4a:	61 3a       	cpi	r22, 0xA1	; 161
     e4c:	09 f0       	breq	.+2      	; 0xe50 <__vector_11+0x1c8>
     e4e:	83 c0       	rjmp	.+262    	; 0xf56 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     e50:	e8 ee       	ldi	r30, 0xE8	; 232
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	80 ff       	sbrs	r24, 0
     e58:	fd cf       	rjmp	.-6      	; 0xe54 <__vector_11+0x1cc>
     e5a:	e4 e0       	ldi	r30, 0x04	; 4
     e5c:	f1 e0       	ldi	r31, 0x01	; 1
     e5e:	2b e0       	ldi	r18, 0x0B	; 11
     e60:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     e62:	a1 ef       	ldi	r26, 0xF1	; 241
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	81 91       	ld	r24, Z+
     e68:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     e6a:	e2 17       	cp	r30, r18
     e6c:	f3 07       	cpc	r31, r19
     e6e:	d9 f7       	brne	.-10     	; 0xe66 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e70:	8e ef       	ldi	r24, 0xFE	; 254
     e72:	80 93 e8 00 	sts	0x00E8, r24
     e76:	76 c0       	rjmp	.+236    	; 0xf64 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
     e78:	80 32       	cpi	r24, 0x20	; 32
     e7a:	d1 f4       	brne	.+52     	; 0xeb0 <__vector_11+0x228>
     e7c:	61 32       	cpi	r22, 0x21	; 33
     e7e:	09 f0       	breq	.+2      	; 0xe82 <__vector_11+0x1fa>
     e80:	6a c0       	rjmp	.+212    	; 0xf56 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     e82:	e8 ee       	ldi	r30, 0xE8	; 232
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	82 ff       	sbrs	r24, 2
     e8a:	fd cf       	rjmp	.-6      	; 0xe86 <__vector_11+0x1fe>
     e8c:	e4 e0       	ldi	r30, 0x04	; 4
     e8e:	f1 e0       	ldi	r31, 0x01	; 1
     e90:	2b e0       	ldi	r18, 0x0B	; 11
     e92:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     e94:	a1 ef       	ldi	r26, 0xF1	; 241
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	8c 91       	ld	r24, X
     e9a:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     e9c:	e2 17       	cp	r30, r18
     e9e:	f3 07       	cpc	r31, r19
     ea0:	d9 f7       	brne	.-10     	; 0xe98 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     ea2:	e8 ee       	ldi	r30, 0xE8	; 232
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	8b ef       	ldi	r24, 0xFB	; 251
     ea8:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     eaa:	8e ef       	ldi	r24, 0xFE	; 254
     eac:	80 83       	st	Z, r24
     eae:	5a c0       	rjmp	.+180    	; 0xf64 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
     eb0:	82 32       	cpi	r24, 0x22	; 34
     eb2:	71 f4       	brne	.+28     	; 0xed0 <__vector_11+0x248>
     eb4:	61 32       	cpi	r22, 0x21	; 33
     eb6:	09 f0       	breq	.+2      	; 0xeba <__vector_11+0x232>
     eb8:	4e c0       	rjmp	.+156    	; 0xf56 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
     eba:	20 93 24 01 	sts	0x0124, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     ebe:	e8 ee       	ldi	r30, 0xE8	; 232
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 ff       	sbrs	r24, 0
     ec6:	fd cf       	rjmp	.-6      	; 0xec2 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     ec8:	8e ef       	ldi	r24, 0xFE	; 254
     eca:	80 93 e8 00 	sts	0x00E8, r24
     ece:	4a c0       	rjmp	.+148    	; 0xf64 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
     ed0:	81 11       	cpse	r24, r1
     ed2:	1a c0       	rjmp	.+52     	; 0xf08 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     ed4:	e8 ee       	ldi	r30, 0xE8	; 232
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 ff       	sbrs	r24, 0
     edc:	fd cf       	rjmp	.-6      	; 0xed8 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
     ede:	62 38       	cpi	r22, 0x82	; 130
     ee0:	51 f4       	brne	.+20     	; 0xef6 <__vector_11+0x26e>
				UENUM = wIndex;
     ee2:	e9 ee       	ldi	r30, 0xE9	; 233
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
     ee8:	80 91 eb 00 	lds	r24, 0x00EB
     eec:	85 fb       	bst	r24, 5
     eee:	88 27       	eor	r24, r24
     ef0:	80 f9       	bld	r24, 0
				UENUM = 0;
     ef2:	10 82       	st	Z, r1
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
     ef6:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
     ef8:	e1 ef       	ldi	r30, 0xF1	; 241
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 83       	st	Z, r24
			UEDATX = 0;
     efe:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f00:	8e ef       	ldi	r24, 0xFE	; 254
     f02:	80 93 e8 00 	sts	0x00E8, r24
     f06:	2e c0       	rjmp	.+92     	; 0xf64 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     f08:	98 2f       	mov	r25, r24
     f0a:	9d 7f       	andi	r25, 0xFD	; 253
     f0c:	91 30       	cpi	r25, 0x01	; 1
     f0e:	19 f5       	brne	.+70     	; 0xf56 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
     f10:	62 30       	cpi	r22, 0x02	; 2
     f12:	09 f5       	brne	.+66     	; 0xf56 <__vector_11+0x2ce>
     f14:	23 2b       	or	r18, r19
     f16:	f9 f4       	brne	.+62     	; 0xf56 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
     f18:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
     f1a:	9f ef       	ldi	r25, 0xFF	; 255
     f1c:	94 0f       	add	r25, r20
     f1e:	94 30       	cpi	r25, 0x04	; 4
     f20:	d0 f4       	brcc	.+52     	; 0xf56 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f22:	9e ef       	ldi	r25, 0xFE	; 254
     f24:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
     f28:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
     f2c:	83 30       	cpi	r24, 0x03	; 3
     f2e:	21 f4       	brne	.+8      	; 0xf38 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
     f30:	81 e2       	ldi	r24, 0x21	; 33
     f32:	80 93 eb 00 	sts	0x00EB, r24
     f36:	16 c0       	rjmp	.+44     	; 0xf64 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
     f38:	89 e1       	ldi	r24, 0x19	; 25
     f3a:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <__vector_11+0x2c0>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	4a 95       	dec	r20
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <__vector_11+0x2bc>
     f4c:	ea ee       	ldi	r30, 0xEA	; 234
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 83       	st	Z, r24
					UERST = 0;
     f52:	10 82       	st	Z, r1
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
     f56:	81 e2       	ldi	r24, 0x21	; 33
     f58:	80 93 eb 00 	sts	0x00EB, r24
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f5e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     f60:	21 11       	cpse	r18, r1
     f62:	f7 ce       	rjmp	.-530    	; 0xd52 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
     f64:	ff 91       	pop	r31
     f66:	ef 91       	pop	r30
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	7f 91       	pop	r23
     f76:	6f 91       	pop	r22
     f78:	5f 91       	pop	r21
     f7a:	4f 91       	pop	r20
     f7c:	3f 91       	pop	r19
     f7e:	2f 91       	pop	r18
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     f94:	8c 01       	movw	r16, r24
     f96:	0f 5f       	subi	r16, 0xFF	; 255
     f98:	1f 4f       	sbci	r17, 0xFF	; 255
     f9a:	fc 01       	movw	r30, r24
     f9c:	c4 91       	lpm	r28, Z
		if (!c) break;
     f9e:	cc 23       	and	r28, r28
     fa0:	71 f0       	breq	.+28     	; 0xfbe <print_P+0x30>
		if (c == '\n') usb_tx_char('\r');
     fa2:	ca 30       	cpi	r28, 0x0A	; 10
     fa4:	19 f4       	brne	.+6      	; 0xfac <print_P+0x1e>
     fa6:	8d e0       	ldi	r24, 0x0D	; 13
     fa8:	0e 94 ab 05 	call	0xb56	; 0xb56 <m_usb_tx_char>
		usb_tx_char(c);
     fac:	8c 2f       	mov	r24, r28
     fae:	0e 94 ab 05 	call	0xb56	; 0xb56 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     fb2:	f8 01       	movw	r30, r16
     fb4:	c4 91       	lpm	r28, Z
     fb6:	0f 5f       	subi	r16, 0xFF	; 255
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
     fba:	c1 11       	cpse	r28, r1
     fbc:	f2 cf       	rjmp	.-28     	; 0xfa2 <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	08 95       	ret

00000fc6 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	27 97       	sbiw	r28, 0x07	; 7
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
     fe2:	8e 01       	movw	r16, r28
     fe4:	0f 5f       	subi	r16, 0xFF	; 255
     fe6:	1f 4f       	sbci	r17, 0xFF	; 255
     fe8:	27 e0       	ldi	r18, 0x07	; 7
     fea:	f8 01       	movw	r30, r16
     fec:	11 92       	st	Z+, r1
     fee:	2a 95       	dec	r18
     ff0:	e9 f7       	brne	.-6      	; 0xfec <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     ff2:	4a e0       	ldi	r20, 0x0A	; 10
     ff4:	b8 01       	movw	r22, r16
     ff6:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__itoa_ncheck>
     ffa:	7e 01       	movw	r14, r28
     ffc:	f8 e0       	ldi	r31, 0x08	; 8
     ffe:	ef 0e       	add	r14, r31
    1000:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    1002:	f8 01       	movw	r30, r16
    1004:	81 91       	ld	r24, Z+
    1006:	8f 01       	movw	r16, r30
    1008:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    100a:	0e 94 ab 05 	call	0xb56	; 0xb56 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    100e:	0e 15       	cp	r16, r14
    1010:	1f 05       	cpc	r17, r15
    1012:	b9 f7       	brne	.-18     	; 0x1002 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1014:	27 96       	adiw	r28, 0x07	; 7
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	08 95       	ret

0000102e <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1032:	ec eb       	ldi	r30, 0xBC	; 188
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	88 23       	and	r24, r24
    103a:	34 f0       	brlt	.+12     	; 0x1048 <twi_wait+0x1a>
    103c:	2f 5f       	subi	r18, 0xFF	; 255
    103e:	3f 4f       	sbci	r19, 0xFF	; 255
    1040:	29 3e       	cpi	r18, 0xE9	; 233
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	38 07       	cpc	r19, r24
    1046:	b9 f7       	brne	.-18     	; 0x1036 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	28 3e       	cpi	r18, 0xE8	; 232
    104c:	33 40       	sbci	r19, 0x03	; 3
    104e:	09 f4       	brne	.+2      	; 0x1052 <twi_wait+0x24>
    1050:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1052:	08 95       	ret

00001054 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1054:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1058:	84 e8       	ldi	r24, 0x84	; 132
    105a:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    105e:	0e 94 17 08 	call	0x102e	; 0x102e <twi_wait>
    1062:	88 23       	and	r24, r24
    1064:	19 f0       	breq	.+6      	; 0x106c <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1066:	80 91 b9 00 	lds	r24, 0x00B9
    106a:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    106c:	08 95       	ret

0000106e <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    106e:	cf 93       	push	r28
    1070:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1072:	94 ea       	ldi	r25, 0xA4	; 164
    1074:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1078:	0e 94 17 08 	call	0x102e	; 0x102e <twi_wait>
    107c:	88 23       	and	r24, r24
    107e:	61 f0       	breq	.+24     	; 0x1098 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1080:	8c 2f       	mov	r24, r28
    1082:	88 0f       	add	r24, r24
    1084:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1088:	80 32       	cpi	r24, 0x20	; 32
    108a:	29 f4       	brne	.+10     	; 0x1096 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    108c:	84 e9       	ldi	r24, 0x94	; 148
    108e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <start_write+0x2a>
	}	
	return 1;	// success
    1096:	81 e0       	ldi	r24, 0x01	; 1
}	
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    109c:	0e 94 81 05 	call	0xb02	; 0xb02 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    10a0:	88 e5       	ldi	r24, 0x58	; 88
    10a2:	0e 94 37 08 	call	0x106e	; 0x106e <start_write>
    10a6:	88 23       	and	r24, r24
    10a8:	09 f4       	brne	.+2      	; 0x10ac <m_wii_open+0x10>
    10aa:	cd c0       	rjmp	.+410    	; 0x1246 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    10ac:	80 e3       	ldi	r24, 0x30	; 48
    10ae:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    10b2:	88 23       	and	r24, r24
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <m_wii_open+0x1c>
    10b6:	c9 c0       	rjmp	.+402    	; 0x124a <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    10be:	88 23       	and	r24, r24
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <m_wii_open+0x28>
    10c2:	c5 c0       	rjmp	.+394    	; 0x124e <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    10c4:	84 e9       	ldi	r24, 0x94	; 148
    10c6:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ca:	83 ec       	ldi	r24, 0xC3	; 195
    10cc:	99 e0       	ldi	r25, 0x09	; 9
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <m_wii_open+0x32>
    10d2:	00 c0       	rjmp	.+0      	; 0x10d4 <m_wii_open+0x38>
    10d4:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    10d6:	88 e5       	ldi	r24, 0x58	; 88
    10d8:	0e 94 37 08 	call	0x106e	; 0x106e <start_write>
    10dc:	88 23       	and	r24, r24
    10de:	09 f4       	brne	.+2      	; 0x10e2 <m_wii_open+0x46>
    10e0:	b8 c0       	rjmp	.+368    	; 0x1252 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    10e8:	88 23       	and	r24, r24
    10ea:	09 f4       	brne	.+2      	; 0x10ee <m_wii_open+0x52>
    10ec:	b4 c0       	rjmp	.+360    	; 0x1256 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    10f4:	88 23       	and	r24, r24
    10f6:	09 f4       	brne	.+2      	; 0x10fa <m_wii_open+0x5e>
    10f8:	b0 c0       	rjmp	.+352    	; 0x125a <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    1100:	88 23       	and	r24, r24
    1102:	09 f4       	brne	.+2      	; 0x1106 <m_wii_open+0x6a>
    1104:	ac c0       	rjmp	.+344    	; 0x125e <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    110c:	88 23       	and	r24, r24
    110e:	09 f4       	brne	.+2      	; 0x1112 <m_wii_open+0x76>
    1110:	a8 c0       	rjmp	.+336    	; 0x1262 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    1118:	88 23       	and	r24, r24
    111a:	09 f4       	brne	.+2      	; 0x111e <m_wii_open+0x82>
    111c:	a4 c0       	rjmp	.+328    	; 0x1266 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    1124:	88 23       	and	r24, r24
    1126:	09 f4       	brne	.+2      	; 0x112a <m_wii_open+0x8e>
    1128:	a0 c0       	rjmp	.+320    	; 0x126a <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    1130:	88 23       	and	r24, r24
    1132:	09 f4       	brne	.+2      	; 0x1136 <m_wii_open+0x9a>
    1134:	9c c0       	rjmp	.+312    	; 0x126e <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    1136:	80 e9       	ldi	r24, 0x90	; 144
    1138:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    113c:	88 23       	and	r24, r24
    113e:	09 f4       	brne	.+2      	; 0x1142 <m_wii_open+0xa6>
    1140:	98 c0       	rjmp	.+304    	; 0x1272 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1142:	84 e9       	ldi	r24, 0x94	; 148
    1144:	80 93 bc 00 	sts	0x00BC, r24
    1148:	83 ec       	ldi	r24, 0xC3	; 195
    114a:	99 e0       	ldi	r25, 0x09	; 9
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	f1 f7       	brne	.-4      	; 0x114c <m_wii_open+0xb0>
    1150:	00 c0       	rjmp	.+0      	; 0x1152 <m_wii_open+0xb6>
    1152:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1154:	88 e5       	ldi	r24, 0x58	; 88
    1156:	0e 94 37 08 	call	0x106e	; 0x106e <start_write>
    115a:	88 23       	and	r24, r24
    115c:	09 f4       	brne	.+2      	; 0x1160 <m_wii_open+0xc4>
    115e:	8b c0       	rjmp	.+278    	; 0x1276 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    1160:	87 e0       	ldi	r24, 0x07	; 7
    1162:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    1166:	88 23       	and	r24, r24
    1168:	09 f4       	brne	.+2      	; 0x116c <m_wii_open+0xd0>
    116a:	87 c0       	rjmp	.+270    	; 0x127a <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    1172:	88 23       	and	r24, r24
    1174:	09 f4       	brne	.+2      	; 0x1178 <m_wii_open+0xdc>
    1176:	83 c0       	rjmp	.+262    	; 0x127e <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    1178:	81 e4       	ldi	r24, 0x41	; 65
    117a:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    117e:	88 23       	and	r24, r24
    1180:	09 f4       	brne	.+2      	; 0x1184 <m_wii_open+0xe8>
    1182:	7f c0       	rjmp	.+254    	; 0x1282 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1184:	84 e9       	ldi	r24, 0x94	; 148
    1186:	80 93 bc 00 	sts	0x00BC, r24
    118a:	83 ec       	ldi	r24, 0xC3	; 195
    118c:	99 e0       	ldi	r25, 0x09	; 9
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	f1 f7       	brne	.-4      	; 0x118e <m_wii_open+0xf2>
    1192:	00 c0       	rjmp	.+0      	; 0x1194 <m_wii_open+0xf8>
    1194:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1196:	88 e5       	ldi	r24, 0x58	; 88
    1198:	0e 94 37 08 	call	0x106e	; 0x106e <start_write>
    119c:	88 23       	and	r24, r24
    119e:	09 f4       	brne	.+2      	; 0x11a2 <m_wii_open+0x106>
    11a0:	72 c0       	rjmp	.+228    	; 0x1286 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    11a2:	8a e1       	ldi	r24, 0x1A	; 26
    11a4:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    11a8:	88 23       	and	r24, r24
    11aa:	09 f4       	brne	.+2      	; 0x11ae <m_wii_open+0x112>
    11ac:	6e c0       	rjmp	.+220    	; 0x128a <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    11ae:	80 e4       	ldi	r24, 0x40	; 64
    11b0:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    11b4:	88 23       	and	r24, r24
    11b6:	09 f4       	brne	.+2      	; 0x11ba <m_wii_open+0x11e>
    11b8:	6a c0       	rjmp	.+212    	; 0x128e <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    11c0:	88 23       	and	r24, r24
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <m_wii_open+0x12a>
    11c4:	66 c0       	rjmp	.+204    	; 0x1292 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    11c6:	84 e9       	ldi	r24, 0x94	; 148
    11c8:	80 93 bc 00 	sts	0x00BC, r24
    11cc:	83 ec       	ldi	r24, 0xC3	; 195
    11ce:	99 e0       	ldi	r25, 0x09	; 9
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <m_wii_open+0x134>
    11d4:	00 c0       	rjmp	.+0      	; 0x11d6 <m_wii_open+0x13a>
    11d6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    11d8:	88 e5       	ldi	r24, 0x58	; 88
    11da:	0e 94 37 08 	call	0x106e	; 0x106e <start_write>
    11de:	88 23       	and	r24, r24
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <m_wii_open+0x148>
    11e2:	59 c0       	rjmp	.+178    	; 0x1296 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    11e4:	83 e3       	ldi	r24, 0x33	; 51
    11e6:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    11ea:	88 23       	and	r24, r24
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <m_wii_open+0x154>
    11ee:	55 c0       	rjmp	.+170    	; 0x129a <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    11f0:	83 e0       	ldi	r24, 0x03	; 3
    11f2:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    11f6:	88 23       	and	r24, r24
    11f8:	09 f4       	brne	.+2      	; 0x11fc <m_wii_open+0x160>
    11fa:	51 c0       	rjmp	.+162    	; 0x129e <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    11fc:	84 e9       	ldi	r24, 0x94	; 148
    11fe:	80 93 bc 00 	sts	0x00BC, r24
    1202:	83 ec       	ldi	r24, 0xC3	; 195
    1204:	99 e0       	ldi	r25, 0x09	; 9
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	f1 f7       	brne	.-4      	; 0x1206 <m_wii_open+0x16a>
    120a:	00 c0       	rjmp	.+0      	; 0x120c <m_wii_open+0x170>
    120c:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    120e:	88 e5       	ldi	r24, 0x58	; 88
    1210:	0e 94 37 08 	call	0x106e	; 0x106e <start_write>
    1214:	88 23       	and	r24, r24
    1216:	09 f4       	brne	.+2      	; 0x121a <m_wii_open+0x17e>
    1218:	44 c0       	rjmp	.+136    	; 0x12a2 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    121a:	80 e3       	ldi	r24, 0x30	; 48
    121c:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    1220:	88 23       	and	r24, r24
    1222:	09 f4       	brne	.+2      	; 0x1226 <m_wii_open+0x18a>
    1224:	40 c0       	rjmp	.+128    	; 0x12a6 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    1226:	88 e0       	ldi	r24, 0x08	; 8
    1228:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    122c:	88 23       	and	r24, r24
    122e:	e9 f1       	breq	.+122    	; 0x12aa <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1230:	84 e9       	ldi	r24, 0x94	; 148
    1232:	80 93 bc 00 	sts	0x00BC, r24
    1236:	83 ec       	ldi	r24, 0xC3	; 195
    1238:	99 e0       	ldi	r25, 0x09	; 9
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <m_wii_open+0x19e>
    123e:	00 c0       	rjmp	.+0      	; 0x1240 <m_wii_open+0x1a4>
    1240:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    12aa:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    12ac:	08 95       	ret

000012ae <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    12ae:	cf 93       	push	r28
    12b0:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    12b2:	84 ea       	ldi	r24, 0xA4	; 164
    12b4:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    12b8:	0e 94 17 08 	call	0x102e	; 0x102e <twi_wait>
    12bc:	88 23       	and	r24, r24
    12be:	69 f0       	breq	.+26     	; 0x12da <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    12c0:	8c 2f       	mov	r24, r28
    12c2:	88 0f       	add	r24, r24
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
    12c6:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    12ca:	88 34       	cpi	r24, 0x48	; 72
    12cc:	29 f4       	brne	.+10     	; 0x12d8 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    12ce:	84 e9       	ldi	r24, 0x94	; 148
    12d0:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <start_read+0x2c>
	}	
	return 1;	// success
    12d8:	81 e0       	ldi	r24, 0x01	; 1
}	
    12da:	cf 91       	pop	r28
    12dc:	08 95       	ret

000012de <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	60 97       	sbiw	r28, 0x10	; 16
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    12f8:	fe 01       	movw	r30, r28
    12fa:	31 96       	adiw	r30, 0x01	; 1
    12fc:	80 e1       	ldi	r24, 0x10	; 16
    12fe:	df 01       	movw	r26, r30
    1300:	1d 92       	st	X+, r1
    1302:	8a 95       	dec	r24
    1304:	e9 f7       	brne	.-6      	; 0x1300 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1306:	88 e5       	ldi	r24, 0x58	; 88
    1308:	0e 94 37 08 	call	0x106e	; 0x106e <start_write>
    130c:	88 23       	and	r24, r24
    130e:	09 f4       	brne	.+2      	; 0x1312 <m_wii_read+0x34>
    1310:	69 c0       	rjmp	.+210    	; 0x13e4 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1312:	86 e3       	ldi	r24, 0x36	; 54
    1314:	0e 94 2a 08 	call	0x1054	; 0x1054 <send_byte>
    1318:	88 23       	and	r24, r24
    131a:	09 f4       	brne	.+2      	; 0x131e <m_wii_read+0x40>
    131c:	65 c0       	rjmp	.+202    	; 0x13e8 <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    131e:	84 e9       	ldi	r24, 0x94	; 148
    1320:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1324:	b8 e0       	ldi	r27, 0x08	; 8
    1326:	ba 95       	dec	r27
    1328:	f1 f7       	brne	.-4      	; 0x1326 <m_wii_read+0x48>
    132a:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    132c:	88 e5       	ldi	r24, 0x58	; 88
    132e:	0e 94 57 09 	call	0x12ae	; 0x12ae <start_read>
    1332:	88 23       	and	r24, r24
    1334:	09 f4       	brne	.+2      	; 0x1338 <m_wii_read+0x5a>
    1336:	5a c0       	rjmp	.+180    	; 0x13ec <m_wii_read+0x10e>
    1338:	be 01       	movw	r22, r28
    133a:	6f 5f       	subi	r22, 0xFF	; 255
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	ae 01       	movw	r20, r28
    1340:	40 5f       	subi	r20, 0xF0	; 240
    1342:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1344:	ec eb       	ldi	r30, 0xBC	; 188
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    134a:	2b eb       	ldi	r18, 0xBB	; 187
    134c:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    134e:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1350:	90 81       	ld	r25, Z
    1352:	99 23       	and	r25, r25
    1354:	ec f7       	brge	.-6      	; 0x1350 <m_wii_read+0x72>
		temp[i] = TWDR;
    1356:	d9 01       	movw	r26, r18
    1358:	9c 91       	ld	r25, X
    135a:	db 01       	movw	r26, r22
    135c:	9d 93       	st	X+, r25
    135e:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1360:	a4 17       	cp	r26, r20
    1362:	b5 07       	cpc	r27, r21
    1364:	a1 f7       	brne	.-24     	; 0x134e <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1366:	84 e8       	ldi	r24, 0x84	; 132
    1368:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    136c:	ec eb       	ldi	r30, 0xBC	; 188
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	88 23       	and	r24, r24
    1374:	ec f7       	brge	.-6      	; 0x1370 <m_wii_read+0x92>
	temp[15] = TWDR;
    1376:	80 91 bb 00 	lds	r24, 0x00BB
    137a:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    137c:	84 e9       	ldi	r24, 0x94	; 148
    137e:	80 93 bc 00 	sts	0x00BC, r24
    1382:	be 01       	movw	r22, r28
    1384:	6c 5f       	subi	r22, 0xFC	; 252
    1386:	7f 4f       	sbci	r23, 0xFF	; 255
    1388:	f8 01       	movw	r30, r16
    138a:	08 5e       	subi	r16, 0xE8	; 232
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    138e:	db 01       	movw	r26, r22
    1390:	2c 91       	ld	r18, X
    1392:	32 2f       	mov	r19, r18
    1394:	30 73       	andi	r19, 0x30	; 48
    1396:	cb 01       	movw	r24, r22
    1398:	02 97       	sbiw	r24, 0x02	; 2
    139a:	dc 01       	movw	r26, r24
    139c:	8c 91       	ld	r24, X
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	b0 e1       	ldi	r27, 0x10	; 16
    13a2:	3b 9f       	mul	r19, r27
    13a4:	80 0d       	add	r24, r0
    13a6:	91 1d       	adc	r25, r1
    13a8:	11 24       	eor	r1, r1
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    13ae:	42 2f       	mov	r20, r18
    13b0:	40 7c       	andi	r20, 0xC0	; 192
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	44 0f       	add	r20, r20
    13b6:	55 1f       	adc	r21, r21
    13b8:	44 0f       	add	r20, r20
    13ba:	55 1f       	adc	r21, r21
    13bc:	cb 01       	movw	r24, r22
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	dc 01       	movw	r26, r24
    13c2:	8c 91       	ld	r24, X
    13c4:	48 0f       	add	r20, r24
    13c6:	51 1d       	adc	r21, r1
    13c8:	53 83       	std	Z+3, r21	; 0x03
    13ca:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    13cc:	2f 70       	andi	r18, 0x0F	; 15
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	35 83       	std	Z+5, r19	; 0x05
    13d2:	24 83       	std	Z+4, r18	; 0x04
    13d4:	6d 5f       	subi	r22, 0xFD	; 253
    13d6:	7f 4f       	sbci	r23, 0xFF	; 255
    13d8:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    13da:	e0 17       	cp	r30, r16
    13dc:	f1 07       	cpc	r31, r17
    13de:	b9 f6       	brne	.-82     	; 0x138e <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	05 c0       	rjmp	.+10     	; 0x13ee <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	03 c0       	rjmp	.+6      	; 0x13ee <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    13ec:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    13ee:	60 96       	adiw	r28, 0x10	; 16
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	08 95       	ret

00001404 <__subsf3>:
    1404:	50 58       	subi	r21, 0x80	; 128

00001406 <__addsf3>:
    1406:	bb 27       	eor	r27, r27
    1408:	aa 27       	eor	r26, r26
    140a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__addsf3x>
    140e:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__fp_round>
    1412:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fp_pscA>
    1416:	38 f0       	brcs	.+14     	; 0x1426 <__addsf3+0x20>
    1418:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_pscB>
    141c:	20 f0       	brcs	.+8      	; 0x1426 <__addsf3+0x20>
    141e:	39 f4       	brne	.+14     	; 0x142e <__addsf3+0x28>
    1420:	9f 3f       	cpi	r25, 0xFF	; 255
    1422:	19 f4       	brne	.+6      	; 0x142a <__addsf3+0x24>
    1424:	26 f4       	brtc	.+8      	; 0x142e <__addsf3+0x28>
    1426:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>
    142a:	0e f4       	brtc	.+2      	; 0x142e <__addsf3+0x28>
    142c:	e0 95       	com	r30
    142e:	e7 fb       	bst	r30, 7
    1430:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>

00001434 <__addsf3x>:
    1434:	e9 2f       	mov	r30, r25
    1436:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fp_split3>
    143a:	58 f3       	brcs	.-42     	; 0x1412 <__addsf3+0xc>
    143c:	ba 17       	cp	r27, r26
    143e:	62 07       	cpc	r22, r18
    1440:	73 07       	cpc	r23, r19
    1442:	84 07       	cpc	r24, r20
    1444:	95 07       	cpc	r25, r21
    1446:	20 f0       	brcs	.+8      	; 0x1450 <__addsf3x+0x1c>
    1448:	79 f4       	brne	.+30     	; 0x1468 <__addsf3x+0x34>
    144a:	a6 f5       	brtc	.+104    	; 0x14b4 <__addsf3x+0x80>
    144c:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__fp_zero>
    1450:	0e f4       	brtc	.+2      	; 0x1454 <__addsf3x+0x20>
    1452:	e0 95       	com	r30
    1454:	0b 2e       	mov	r0, r27
    1456:	ba 2f       	mov	r27, r26
    1458:	a0 2d       	mov	r26, r0
    145a:	0b 01       	movw	r0, r22
    145c:	b9 01       	movw	r22, r18
    145e:	90 01       	movw	r18, r0
    1460:	0c 01       	movw	r0, r24
    1462:	ca 01       	movw	r24, r20
    1464:	a0 01       	movw	r20, r0
    1466:	11 24       	eor	r1, r1
    1468:	ff 27       	eor	r31, r31
    146a:	59 1b       	sub	r21, r25
    146c:	99 f0       	breq	.+38     	; 0x1494 <__addsf3x+0x60>
    146e:	59 3f       	cpi	r21, 0xF9	; 249
    1470:	50 f4       	brcc	.+20     	; 0x1486 <__addsf3x+0x52>
    1472:	50 3e       	cpi	r21, 0xE0	; 224
    1474:	68 f1       	brcs	.+90     	; 0x14d0 <__addsf3x+0x9c>
    1476:	1a 16       	cp	r1, r26
    1478:	f0 40       	sbci	r31, 0x00	; 0
    147a:	a2 2f       	mov	r26, r18
    147c:	23 2f       	mov	r18, r19
    147e:	34 2f       	mov	r19, r20
    1480:	44 27       	eor	r20, r20
    1482:	58 5f       	subi	r21, 0xF8	; 248
    1484:	f3 cf       	rjmp	.-26     	; 0x146c <__addsf3x+0x38>
    1486:	46 95       	lsr	r20
    1488:	37 95       	ror	r19
    148a:	27 95       	ror	r18
    148c:	a7 95       	ror	r26
    148e:	f0 40       	sbci	r31, 0x00	; 0
    1490:	53 95       	inc	r21
    1492:	c9 f7       	brne	.-14     	; 0x1486 <__addsf3x+0x52>
    1494:	7e f4       	brtc	.+30     	; 0x14b4 <__addsf3x+0x80>
    1496:	1f 16       	cp	r1, r31
    1498:	ba 0b       	sbc	r27, r26
    149a:	62 0b       	sbc	r22, r18
    149c:	73 0b       	sbc	r23, r19
    149e:	84 0b       	sbc	r24, r20
    14a0:	ba f0       	brmi	.+46     	; 0x14d0 <__addsf3x+0x9c>
    14a2:	91 50       	subi	r25, 0x01	; 1
    14a4:	a1 f0       	breq	.+40     	; 0x14ce <__addsf3x+0x9a>
    14a6:	ff 0f       	add	r31, r31
    14a8:	bb 1f       	adc	r27, r27
    14aa:	66 1f       	adc	r22, r22
    14ac:	77 1f       	adc	r23, r23
    14ae:	88 1f       	adc	r24, r24
    14b0:	c2 f7       	brpl	.-16     	; 0x14a2 <__addsf3x+0x6e>
    14b2:	0e c0       	rjmp	.+28     	; 0x14d0 <__addsf3x+0x9c>
    14b4:	ba 0f       	add	r27, r26
    14b6:	62 1f       	adc	r22, r18
    14b8:	73 1f       	adc	r23, r19
    14ba:	84 1f       	adc	r24, r20
    14bc:	48 f4       	brcc	.+18     	; 0x14d0 <__addsf3x+0x9c>
    14be:	87 95       	ror	r24
    14c0:	77 95       	ror	r23
    14c2:	67 95       	ror	r22
    14c4:	b7 95       	ror	r27
    14c6:	f7 95       	ror	r31
    14c8:	9e 3f       	cpi	r25, 0xFE	; 254
    14ca:	08 f0       	brcs	.+2      	; 0x14ce <__addsf3x+0x9a>
    14cc:	b0 cf       	rjmp	.-160    	; 0x142e <__addsf3+0x28>
    14ce:	93 95       	inc	r25
    14d0:	88 0f       	add	r24, r24
    14d2:	08 f0       	brcs	.+2      	; 0x14d6 <__addsf3x+0xa2>
    14d4:	99 27       	eor	r25, r25
    14d6:	ee 0f       	add	r30, r30
    14d8:	97 95       	ror	r25
    14da:	87 95       	ror	r24
    14dc:	08 95       	ret
    14de:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fp_pscA>
    14e2:	60 f0       	brcs	.+24     	; 0x14fc <__addsf3x+0xc8>
    14e4:	80 e8       	ldi	r24, 0x80	; 128
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <__addsf3x+0xb8>
    14ea:	9e ef       	ldi	r25, 0xFE	; 254
    14ec:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_pscB>
    14f0:	28 f0       	brcs	.+10     	; 0x14fc <__addsf3x+0xc8>
    14f2:	40 e8       	ldi	r20, 0x80	; 128
    14f4:	51 e0       	ldi	r21, 0x01	; 1
    14f6:	71 f4       	brne	.+28     	; 0x1514 <atan2+0x10>
    14f8:	5e ef       	ldi	r21, 0xFE	; 254
    14fa:	0c c0       	rjmp	.+24     	; 0x1514 <atan2+0x10>
    14fc:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>
    1500:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__fp_zero>

00001504 <atan2>:
    1504:	e9 2f       	mov	r30, r25
    1506:	e0 78       	andi	r30, 0x80	; 128
    1508:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fp_split3>
    150c:	40 f3       	brcs	.-48     	; 0x14de <__addsf3x+0xaa>
    150e:	09 2e       	mov	r0, r25
    1510:	05 2a       	or	r0, r21
    1512:	b1 f3       	breq	.-20     	; 0x1500 <__addsf3x+0xcc>
    1514:	26 17       	cp	r18, r22
    1516:	37 07       	cpc	r19, r23
    1518:	48 07       	cpc	r20, r24
    151a:	59 07       	cpc	r21, r25
    151c:	38 f0       	brcs	.+14     	; 0x152c <atan2+0x28>
    151e:	0e 2e       	mov	r0, r30
    1520:	07 f8       	bld	r0, 7
    1522:	e0 25       	eor	r30, r0
    1524:	69 f0       	breq	.+26     	; 0x1540 <atan2+0x3c>
    1526:	e0 25       	eor	r30, r0
    1528:	e0 64       	ori	r30, 0x40	; 64
    152a:	0a c0       	rjmp	.+20     	; 0x1540 <atan2+0x3c>
    152c:	ef 63       	ori	r30, 0x3F	; 63
    152e:	07 f8       	bld	r0, 7
    1530:	00 94       	com	r0
    1532:	07 fa       	bst	r0, 7
    1534:	db 01       	movw	r26, r22
    1536:	b9 01       	movw	r22, r18
    1538:	9d 01       	movw	r18, r26
    153a:	dc 01       	movw	r26, r24
    153c:	ca 01       	movw	r24, r20
    153e:	ad 01       	movw	r20, r26
    1540:	ef 93       	push	r30
    1542:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__divsf3_pse>
    1546:	0e 94 30 0c 	call	0x1860	; 0x1860 <__fp_round>
    154a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <atan>
    154e:	5f 91       	pop	r21
    1550:	55 23       	and	r21, r21
    1552:	39 f0       	breq	.+14     	; 0x1562 <atan2+0x5e>
    1554:	2b ed       	ldi	r18, 0xDB	; 219
    1556:	3f e0       	ldi	r19, 0x0F	; 15
    1558:	49 e4       	ldi	r20, 0x49	; 73
    155a:	50 fd       	sbrc	r21, 0
    155c:	49 ec       	ldi	r20, 0xC9	; 201
    155e:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__addsf3>
    1562:	08 95       	ret

00001564 <atan>:
    1564:	df 93       	push	r29
    1566:	dd 27       	eor	r29, r29
    1568:	b9 2f       	mov	r27, r25
    156a:	bf 77       	andi	r27, 0x7F	; 127
    156c:	40 e8       	ldi	r20, 0x80	; 128
    156e:	5f e3       	ldi	r21, 0x3F	; 63
    1570:	16 16       	cp	r1, r22
    1572:	17 06       	cpc	r1, r23
    1574:	48 07       	cpc	r20, r24
    1576:	5b 07       	cpc	r21, r27
    1578:	18 f4       	brcc	.+6      	; 0x1580 <atan+0x1c>
    157a:	d9 2f       	mov	r29, r25
    157c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <inverse>
    1580:	9f 93       	push	r25
    1582:	8f 93       	push	r24
    1584:	7f 93       	push	r23
    1586:	6f 93       	push	r22
    1588:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <square>
    158c:	ec ea       	ldi	r30, 0xAC	; 172
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__fp_powser>
    1594:	0e 94 30 0c 	call	0x1860	; 0x1860 <__fp_round>
    1598:	2f 91       	pop	r18
    159a:	3f 91       	pop	r19
    159c:	4f 91       	pop	r20
    159e:	5f 91       	pop	r21
    15a0:	0e 94 99 0c 	call	0x1932	; 0x1932 <__mulsf3x>
    15a4:	dd 23       	and	r29, r29
    15a6:	51 f0       	breq	.+20     	; 0x15bc <atan+0x58>
    15a8:	90 58       	subi	r25, 0x80	; 128
    15aa:	a2 ea       	ldi	r26, 0xA2	; 162
    15ac:	2a ed       	ldi	r18, 0xDA	; 218
    15ae:	3f e0       	ldi	r19, 0x0F	; 15
    15b0:	49 ec       	ldi	r20, 0xC9	; 201
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	d0 78       	andi	r29, 0x80	; 128
    15b6:	5d 27       	eor	r21, r29
    15b8:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__addsf3x>
    15bc:	df 91       	pop	r29
    15be:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__fp_round>

000015c2 <cos>:
    15c2:	0e 94 07 0c 	call	0x180e	; 0x180e <__fp_rempio2>
    15c6:	e3 95       	inc	r30
    15c8:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__fp_sinus>
    15cc:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_pscB>
    15d0:	58 f0       	brcs	.+22     	; 0x15e8 <cos+0x26>
    15d2:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fp_pscA>
    15d6:	40 f0       	brcs	.+16     	; 0x15e8 <cos+0x26>
    15d8:	29 f4       	brne	.+10     	; 0x15e4 <cos+0x22>
    15da:	5f 3f       	cpi	r21, 0xFF	; 255
    15dc:	29 f0       	breq	.+10     	; 0x15e8 <cos+0x26>
    15de:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>
    15e2:	51 11       	cpse	r21, r1
    15e4:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>
    15e8:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>

000015ec <__divsf3x>:
    15ec:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fp_split3>
    15f0:	68 f3       	brcs	.-38     	; 0x15cc <cos+0xa>

000015f2 <__divsf3_pse>:
    15f2:	99 23       	and	r25, r25
    15f4:	b1 f3       	breq	.-20     	; 0x15e2 <cos+0x20>
    15f6:	55 23       	and	r21, r21
    15f8:	91 f3       	breq	.-28     	; 0x15de <cos+0x1c>
    15fa:	95 1b       	sub	r25, r21
    15fc:	55 0b       	sbc	r21, r21
    15fe:	bb 27       	eor	r27, r27
    1600:	aa 27       	eor	r26, r26
    1602:	62 17       	cp	r22, r18
    1604:	73 07       	cpc	r23, r19
    1606:	84 07       	cpc	r24, r20
    1608:	38 f0       	brcs	.+14     	; 0x1618 <__divsf3_pse+0x26>
    160a:	9f 5f       	subi	r25, 0xFF	; 255
    160c:	5f 4f       	sbci	r21, 0xFF	; 255
    160e:	22 0f       	add	r18, r18
    1610:	33 1f       	adc	r19, r19
    1612:	44 1f       	adc	r20, r20
    1614:	aa 1f       	adc	r26, r26
    1616:	a9 f3       	breq	.-22     	; 0x1602 <__divsf3_pse+0x10>
    1618:	35 d0       	rcall	.+106    	; 0x1684 <__divsf3_pse+0x92>
    161a:	0e 2e       	mov	r0, r30
    161c:	3a f0       	brmi	.+14     	; 0x162c <__divsf3_pse+0x3a>
    161e:	e0 e8       	ldi	r30, 0x80	; 128
    1620:	32 d0       	rcall	.+100    	; 0x1686 <__divsf3_pse+0x94>
    1622:	91 50       	subi	r25, 0x01	; 1
    1624:	50 40       	sbci	r21, 0x00	; 0
    1626:	e6 95       	lsr	r30
    1628:	00 1c       	adc	r0, r0
    162a:	ca f7       	brpl	.-14     	; 0x161e <__divsf3_pse+0x2c>
    162c:	2b d0       	rcall	.+86     	; 0x1684 <__divsf3_pse+0x92>
    162e:	fe 2f       	mov	r31, r30
    1630:	29 d0       	rcall	.+82     	; 0x1684 <__divsf3_pse+0x92>
    1632:	66 0f       	add	r22, r22
    1634:	77 1f       	adc	r23, r23
    1636:	88 1f       	adc	r24, r24
    1638:	bb 1f       	adc	r27, r27
    163a:	26 17       	cp	r18, r22
    163c:	37 07       	cpc	r19, r23
    163e:	48 07       	cpc	r20, r24
    1640:	ab 07       	cpc	r26, r27
    1642:	b0 e8       	ldi	r27, 0x80	; 128
    1644:	09 f0       	breq	.+2      	; 0x1648 <__divsf3_pse+0x56>
    1646:	bb 0b       	sbc	r27, r27
    1648:	80 2d       	mov	r24, r0
    164a:	bf 01       	movw	r22, r30
    164c:	ff 27       	eor	r31, r31
    164e:	93 58       	subi	r25, 0x83	; 131
    1650:	5f 4f       	sbci	r21, 0xFF	; 255
    1652:	3a f0       	brmi	.+14     	; 0x1662 <__divsf3_pse+0x70>
    1654:	9e 3f       	cpi	r25, 0xFE	; 254
    1656:	51 05       	cpc	r21, r1
    1658:	78 f0       	brcs	.+30     	; 0x1678 <__divsf3_pse+0x86>
    165a:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>
    165e:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>
    1662:	5f 3f       	cpi	r21, 0xFF	; 255
    1664:	e4 f3       	brlt	.-8      	; 0x165e <__divsf3_pse+0x6c>
    1666:	98 3e       	cpi	r25, 0xE8	; 232
    1668:	d4 f3       	brlt	.-12     	; 0x165e <__divsf3_pse+0x6c>
    166a:	86 95       	lsr	r24
    166c:	77 95       	ror	r23
    166e:	67 95       	ror	r22
    1670:	b7 95       	ror	r27
    1672:	f7 95       	ror	r31
    1674:	9f 5f       	subi	r25, 0xFF	; 255
    1676:	c9 f7       	brne	.-14     	; 0x166a <__divsf3_pse+0x78>
    1678:	88 0f       	add	r24, r24
    167a:	91 1d       	adc	r25, r1
    167c:	96 95       	lsr	r25
    167e:	87 95       	ror	r24
    1680:	97 f9       	bld	r25, 7
    1682:	08 95       	ret
    1684:	e1 e0       	ldi	r30, 0x01	; 1
    1686:	66 0f       	add	r22, r22
    1688:	77 1f       	adc	r23, r23
    168a:	88 1f       	adc	r24, r24
    168c:	bb 1f       	adc	r27, r27
    168e:	62 17       	cp	r22, r18
    1690:	73 07       	cpc	r23, r19
    1692:	84 07       	cpc	r24, r20
    1694:	ba 07       	cpc	r27, r26
    1696:	20 f0       	brcs	.+8      	; 0x16a0 <__divsf3_pse+0xae>
    1698:	62 1b       	sub	r22, r18
    169a:	73 0b       	sbc	r23, r19
    169c:	84 0b       	sbc	r24, r20
    169e:	ba 0b       	sbc	r27, r26
    16a0:	ee 1f       	adc	r30, r30
    16a2:	88 f7       	brcc	.-30     	; 0x1686 <__divsf3_pse+0x94>
    16a4:	e0 95       	com	r30
    16a6:	08 95       	ret

000016a8 <__fixsfsi>:
    16a8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__fixunssfsi>
    16ac:	68 94       	set
    16ae:	b1 11       	cpse	r27, r1
    16b0:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>
    16b4:	08 95       	ret

000016b6 <__fixunssfsi>:
    16b6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__fp_splitA>
    16ba:	88 f0       	brcs	.+34     	; 0x16de <__fixunssfsi+0x28>
    16bc:	9f 57       	subi	r25, 0x7F	; 127
    16be:	98 f0       	brcs	.+38     	; 0x16e6 <__fixunssfsi+0x30>
    16c0:	b9 2f       	mov	r27, r25
    16c2:	99 27       	eor	r25, r25
    16c4:	b7 51       	subi	r27, 0x17	; 23
    16c6:	b0 f0       	brcs	.+44     	; 0x16f4 <__fixunssfsi+0x3e>
    16c8:	e1 f0       	breq	.+56     	; 0x1702 <__fixunssfsi+0x4c>
    16ca:	66 0f       	add	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	88 1f       	adc	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	1a f0       	brmi	.+6      	; 0x16da <__fixunssfsi+0x24>
    16d4:	ba 95       	dec	r27
    16d6:	c9 f7       	brne	.-14     	; 0x16ca <__fixunssfsi+0x14>
    16d8:	14 c0       	rjmp	.+40     	; 0x1702 <__fixunssfsi+0x4c>
    16da:	b1 30       	cpi	r27, 0x01	; 1
    16dc:	91 f0       	breq	.+36     	; 0x1702 <__fixunssfsi+0x4c>
    16de:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__fp_zero>
    16e2:	b1 e0       	ldi	r27, 0x01	; 1
    16e4:	08 95       	ret
    16e6:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__fp_zero>
    16ea:	67 2f       	mov	r22, r23
    16ec:	78 2f       	mov	r23, r24
    16ee:	88 27       	eor	r24, r24
    16f0:	b8 5f       	subi	r27, 0xF8	; 248
    16f2:	39 f0       	breq	.+14     	; 0x1702 <__fixunssfsi+0x4c>
    16f4:	b9 3f       	cpi	r27, 0xF9	; 249
    16f6:	cc f3       	brlt	.-14     	; 0x16ea <__fixunssfsi+0x34>
    16f8:	86 95       	lsr	r24
    16fa:	77 95       	ror	r23
    16fc:	67 95       	ror	r22
    16fe:	b3 95       	inc	r27
    1700:	d9 f7       	brne	.-10     	; 0x16f8 <__fixunssfsi+0x42>
    1702:	3e f4       	brtc	.+14     	; 0x1712 <__fixunssfsi+0x5c>
    1704:	90 95       	com	r25
    1706:	80 95       	com	r24
    1708:	70 95       	com	r23
    170a:	61 95       	neg	r22
    170c:	7f 4f       	sbci	r23, 0xFF	; 255
    170e:	8f 4f       	sbci	r24, 0xFF	; 255
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	08 95       	ret

00001714 <__floatunsisf>:
    1714:	e8 94       	clt
    1716:	09 c0       	rjmp	.+18     	; 0x172a <__floatsisf+0x12>

00001718 <__floatsisf>:
    1718:	97 fb       	bst	r25, 7
    171a:	3e f4       	brtc	.+14     	; 0x172a <__floatsisf+0x12>
    171c:	90 95       	com	r25
    171e:	80 95       	com	r24
    1720:	70 95       	com	r23
    1722:	61 95       	neg	r22
    1724:	7f 4f       	sbci	r23, 0xFF	; 255
    1726:	8f 4f       	sbci	r24, 0xFF	; 255
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	99 23       	and	r25, r25
    172c:	a9 f0       	breq	.+42     	; 0x1758 <__floatsisf+0x40>
    172e:	f9 2f       	mov	r31, r25
    1730:	96 e9       	ldi	r25, 0x96	; 150
    1732:	bb 27       	eor	r27, r27
    1734:	93 95       	inc	r25
    1736:	f6 95       	lsr	r31
    1738:	87 95       	ror	r24
    173a:	77 95       	ror	r23
    173c:	67 95       	ror	r22
    173e:	b7 95       	ror	r27
    1740:	f1 11       	cpse	r31, r1
    1742:	f8 cf       	rjmp	.-16     	; 0x1734 <__floatsisf+0x1c>
    1744:	fa f4       	brpl	.+62     	; 0x1784 <__floatsisf+0x6c>
    1746:	bb 0f       	add	r27, r27
    1748:	11 f4       	brne	.+4      	; 0x174e <__floatsisf+0x36>
    174a:	60 ff       	sbrs	r22, 0
    174c:	1b c0       	rjmp	.+54     	; 0x1784 <__floatsisf+0x6c>
    174e:	6f 5f       	subi	r22, 0xFF	; 255
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	8f 4f       	sbci	r24, 0xFF	; 255
    1754:	9f 4f       	sbci	r25, 0xFF	; 255
    1756:	16 c0       	rjmp	.+44     	; 0x1784 <__floatsisf+0x6c>
    1758:	88 23       	and	r24, r24
    175a:	11 f0       	breq	.+4      	; 0x1760 <__floatsisf+0x48>
    175c:	96 e9       	ldi	r25, 0x96	; 150
    175e:	11 c0       	rjmp	.+34     	; 0x1782 <__floatsisf+0x6a>
    1760:	77 23       	and	r23, r23
    1762:	21 f0       	breq	.+8      	; 0x176c <__floatsisf+0x54>
    1764:	9e e8       	ldi	r25, 0x8E	; 142
    1766:	87 2f       	mov	r24, r23
    1768:	76 2f       	mov	r23, r22
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <__floatsisf+0x5e>
    176c:	66 23       	and	r22, r22
    176e:	71 f0       	breq	.+28     	; 0x178c <__floatsisf+0x74>
    1770:	96 e8       	ldi	r25, 0x86	; 134
    1772:	86 2f       	mov	r24, r22
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	2a f0       	brmi	.+10     	; 0x1784 <__floatsisf+0x6c>
    177a:	9a 95       	dec	r25
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	88 1f       	adc	r24, r24
    1782:	da f7       	brpl	.-10     	; 0x177a <__floatsisf+0x62>
    1784:	88 0f       	add	r24, r24
    1786:	96 95       	lsr	r25
    1788:	87 95       	ror	r24
    178a:	97 f9       	bld	r25, 7
    178c:	08 95       	ret

0000178e <__fp_inf>:
    178e:	97 f9       	bld	r25, 7
    1790:	9f 67       	ori	r25, 0x7F	; 127
    1792:	80 e8       	ldi	r24, 0x80	; 128
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	08 95       	ret

0000179a <__fp_nan>:
    179a:	9f ef       	ldi	r25, 0xFF	; 255
    179c:	80 ec       	ldi	r24, 0xC0	; 192
    179e:	08 95       	ret

000017a0 <__fp_powser>:
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	1f 93       	push	r17
    17a6:	0f 93       	push	r16
    17a8:	ff 92       	push	r15
    17aa:	ef 92       	push	r14
    17ac:	df 92       	push	r13
    17ae:	7b 01       	movw	r14, r22
    17b0:	8c 01       	movw	r16, r24
    17b2:	68 94       	set
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <__fp_powser+0x22>
    17b6:	da 2e       	mov	r13, r26
    17b8:	ef 01       	movw	r28, r30
    17ba:	0e 94 99 0c 	call	0x1932	; 0x1932 <__mulsf3x>
    17be:	fe 01       	movw	r30, r28
    17c0:	e8 94       	clt
    17c2:	a5 91       	lpm	r26, Z+
    17c4:	25 91       	lpm	r18, Z+
    17c6:	35 91       	lpm	r19, Z+
    17c8:	45 91       	lpm	r20, Z+
    17ca:	55 91       	lpm	r21, Z+
    17cc:	a6 f3       	brts	.-24     	; 0x17b6 <__fp_powser+0x16>
    17ce:	ef 01       	movw	r28, r30
    17d0:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__addsf3x>
    17d4:	fe 01       	movw	r30, r28
    17d6:	97 01       	movw	r18, r14
    17d8:	a8 01       	movw	r20, r16
    17da:	da 94       	dec	r13
    17dc:	69 f7       	brne	.-38     	; 0x17b8 <__fp_powser+0x18>
    17de:	df 90       	pop	r13
    17e0:	ef 90       	pop	r14
    17e2:	ff 90       	pop	r15
    17e4:	0f 91       	pop	r16
    17e6:	1f 91       	pop	r17
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <__fp_pscA>:
    17ee:	00 24       	eor	r0, r0
    17f0:	0a 94       	dec	r0
    17f2:	16 16       	cp	r1, r22
    17f4:	17 06       	cpc	r1, r23
    17f6:	18 06       	cpc	r1, r24
    17f8:	09 06       	cpc	r0, r25
    17fa:	08 95       	ret

000017fc <__fp_pscB>:
    17fc:	00 24       	eor	r0, r0
    17fe:	0a 94       	dec	r0
    1800:	12 16       	cp	r1, r18
    1802:	13 06       	cpc	r1, r19
    1804:	14 06       	cpc	r1, r20
    1806:	05 06       	cpc	r0, r21
    1808:	08 95       	ret
    180a:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>

0000180e <__fp_rempio2>:
    180e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__fp_splitA>
    1812:	d8 f3       	brcs	.-10     	; 0x180a <__fp_pscB+0xe>
    1814:	e8 94       	clt
    1816:	e0 e0       	ldi	r30, 0x00	; 0
    1818:	bb 27       	eor	r27, r27
    181a:	9f 57       	subi	r25, 0x7F	; 127
    181c:	f0 f0       	brcs	.+60     	; 0x185a <__fp_rempio2+0x4c>
    181e:	2a ed       	ldi	r18, 0xDA	; 218
    1820:	3f e0       	ldi	r19, 0x0F	; 15
    1822:	49 ec       	ldi	r20, 0xC9	; 201
    1824:	06 c0       	rjmp	.+12     	; 0x1832 <__fp_rempio2+0x24>
    1826:	ee 0f       	add	r30, r30
    1828:	bb 0f       	add	r27, r27
    182a:	66 1f       	adc	r22, r22
    182c:	77 1f       	adc	r23, r23
    182e:	88 1f       	adc	r24, r24
    1830:	28 f0       	brcs	.+10     	; 0x183c <__fp_rempio2+0x2e>
    1832:	b2 3a       	cpi	r27, 0xA2	; 162
    1834:	62 07       	cpc	r22, r18
    1836:	73 07       	cpc	r23, r19
    1838:	84 07       	cpc	r24, r20
    183a:	28 f0       	brcs	.+10     	; 0x1846 <__fp_rempio2+0x38>
    183c:	b2 5a       	subi	r27, 0xA2	; 162
    183e:	62 0b       	sbc	r22, r18
    1840:	73 0b       	sbc	r23, r19
    1842:	84 0b       	sbc	r24, r20
    1844:	e3 95       	inc	r30
    1846:	9a 95       	dec	r25
    1848:	72 f7       	brpl	.-36     	; 0x1826 <__fp_rempio2+0x18>
    184a:	80 38       	cpi	r24, 0x80	; 128
    184c:	30 f4       	brcc	.+12     	; 0x185a <__fp_rempio2+0x4c>
    184e:	9a 95       	dec	r25
    1850:	bb 0f       	add	r27, r27
    1852:	66 1f       	adc	r22, r22
    1854:	77 1f       	adc	r23, r23
    1856:	88 1f       	adc	r24, r24
    1858:	d2 f7       	brpl	.-12     	; 0x184e <__fp_rempio2+0x40>
    185a:	90 48       	sbci	r25, 0x80	; 128
    185c:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__fp_mpack_finite>

00001860 <__fp_round>:
    1860:	09 2e       	mov	r0, r25
    1862:	03 94       	inc	r0
    1864:	00 0c       	add	r0, r0
    1866:	11 f4       	brne	.+4      	; 0x186c <__fp_round+0xc>
    1868:	88 23       	and	r24, r24
    186a:	52 f0       	brmi	.+20     	; 0x1880 <__fp_round+0x20>
    186c:	bb 0f       	add	r27, r27
    186e:	40 f4       	brcc	.+16     	; 0x1880 <__fp_round+0x20>
    1870:	bf 2b       	or	r27, r31
    1872:	11 f4       	brne	.+4      	; 0x1878 <__fp_round+0x18>
    1874:	60 ff       	sbrs	r22, 0
    1876:	04 c0       	rjmp	.+8      	; 0x1880 <__fp_round+0x20>
    1878:	6f 5f       	subi	r22, 0xFF	; 255
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	8f 4f       	sbci	r24, 0xFF	; 255
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	08 95       	ret

00001882 <__fp_sinus>:
    1882:	ef 93       	push	r30
    1884:	e0 ff       	sbrs	r30, 0
    1886:	07 c0       	rjmp	.+14     	; 0x1896 <__fp_sinus+0x14>
    1888:	a2 ea       	ldi	r26, 0xA2	; 162
    188a:	2a ed       	ldi	r18, 0xDA	; 218
    188c:	3f e0       	ldi	r19, 0x0F	; 15
    188e:	49 ec       	ldi	r20, 0xC9	; 201
    1890:	5f eb       	ldi	r21, 0xBF	; 191
    1892:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__addsf3x>
    1896:	0e 94 30 0c 	call	0x1860	; 0x1860 <__fp_round>
    189a:	0f 90       	pop	r0
    189c:	03 94       	inc	r0
    189e:	01 fc       	sbrc	r0, 1
    18a0:	90 58       	subi	r25, 0x80	; 128
    18a2:	e9 ed       	ldi	r30, 0xD9	; 217
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__fp_powsodd>

000018aa <__fp_split3>:
    18aa:	57 fd       	sbrc	r21, 7
    18ac:	90 58       	subi	r25, 0x80	; 128
    18ae:	44 0f       	add	r20, r20
    18b0:	55 1f       	adc	r21, r21
    18b2:	59 f0       	breq	.+22     	; 0x18ca <__fp_splitA+0x10>
    18b4:	5f 3f       	cpi	r21, 0xFF	; 255
    18b6:	71 f0       	breq	.+28     	; 0x18d4 <__fp_splitA+0x1a>
    18b8:	47 95       	ror	r20

000018ba <__fp_splitA>:
    18ba:	88 0f       	add	r24, r24
    18bc:	97 fb       	bst	r25, 7
    18be:	99 1f       	adc	r25, r25
    18c0:	61 f0       	breq	.+24     	; 0x18da <__fp_splitA+0x20>
    18c2:	9f 3f       	cpi	r25, 0xFF	; 255
    18c4:	79 f0       	breq	.+30     	; 0x18e4 <__fp_splitA+0x2a>
    18c6:	87 95       	ror	r24
    18c8:	08 95       	ret
    18ca:	12 16       	cp	r1, r18
    18cc:	13 06       	cpc	r1, r19
    18ce:	14 06       	cpc	r1, r20
    18d0:	55 1f       	adc	r21, r21
    18d2:	f2 cf       	rjmp	.-28     	; 0x18b8 <__fp_split3+0xe>
    18d4:	46 95       	lsr	r20
    18d6:	f1 df       	rcall	.-30     	; 0x18ba <__fp_splitA>
    18d8:	08 c0       	rjmp	.+16     	; 0x18ea <__fp_splitA+0x30>
    18da:	16 16       	cp	r1, r22
    18dc:	17 06       	cpc	r1, r23
    18de:	18 06       	cpc	r1, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	f1 cf       	rjmp	.-30     	; 0x18c6 <__fp_splitA+0xc>
    18e4:	86 95       	lsr	r24
    18e6:	71 05       	cpc	r23, r1
    18e8:	61 05       	cpc	r22, r1
    18ea:	08 94       	sec
    18ec:	08 95       	ret

000018ee <__fp_zero>:
    18ee:	e8 94       	clt

000018f0 <__fp_szero>:
    18f0:	bb 27       	eor	r27, r27
    18f2:	66 27       	eor	r22, r22
    18f4:	77 27       	eor	r23, r23
    18f6:	cb 01       	movw	r24, r22
    18f8:	97 f9       	bld	r25, 7
    18fa:	08 95       	ret

000018fc <inverse>:
    18fc:	9b 01       	movw	r18, r22
    18fe:	ac 01       	movw	r20, r24
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	80 e8       	ldi	r24, 0x80	; 128
    1906:	9f e3       	ldi	r25, 0x3F	; 63
    1908:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__divsf3>

0000190c <__mulsf3>:
    190c:	0e 94 99 0c 	call	0x1932	; 0x1932 <__mulsf3x>
    1910:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__fp_round>
    1914:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fp_pscA>
    1918:	38 f0       	brcs	.+14     	; 0x1928 <__mulsf3+0x1c>
    191a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_pscB>
    191e:	20 f0       	brcs	.+8      	; 0x1928 <__mulsf3+0x1c>
    1920:	95 23       	and	r25, r21
    1922:	11 f0       	breq	.+4      	; 0x1928 <__mulsf3+0x1c>
    1924:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>
    1928:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>
    192c:	11 24       	eor	r1, r1
    192e:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>

00001932 <__mulsf3x>:
    1932:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fp_split3>
    1936:	70 f3       	brcs	.-36     	; 0x1914 <__mulsf3+0x8>

00001938 <__mulsf3_pse>:
    1938:	95 9f       	mul	r25, r21
    193a:	c1 f3       	breq	.-16     	; 0x192c <__mulsf3+0x20>
    193c:	95 0f       	add	r25, r21
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	55 1f       	adc	r21, r21
    1942:	62 9f       	mul	r22, r18
    1944:	f0 01       	movw	r30, r0
    1946:	72 9f       	mul	r23, r18
    1948:	bb 27       	eor	r27, r27
    194a:	f0 0d       	add	r31, r0
    194c:	b1 1d       	adc	r27, r1
    194e:	63 9f       	mul	r22, r19
    1950:	aa 27       	eor	r26, r26
    1952:	f0 0d       	add	r31, r0
    1954:	b1 1d       	adc	r27, r1
    1956:	aa 1f       	adc	r26, r26
    1958:	64 9f       	mul	r22, r20
    195a:	66 27       	eor	r22, r22
    195c:	b0 0d       	add	r27, r0
    195e:	a1 1d       	adc	r26, r1
    1960:	66 1f       	adc	r22, r22
    1962:	82 9f       	mul	r24, r18
    1964:	22 27       	eor	r18, r18
    1966:	b0 0d       	add	r27, r0
    1968:	a1 1d       	adc	r26, r1
    196a:	62 1f       	adc	r22, r18
    196c:	73 9f       	mul	r23, r19
    196e:	b0 0d       	add	r27, r0
    1970:	a1 1d       	adc	r26, r1
    1972:	62 1f       	adc	r22, r18
    1974:	83 9f       	mul	r24, r19
    1976:	a0 0d       	add	r26, r0
    1978:	61 1d       	adc	r22, r1
    197a:	22 1f       	adc	r18, r18
    197c:	74 9f       	mul	r23, r20
    197e:	33 27       	eor	r19, r19
    1980:	a0 0d       	add	r26, r0
    1982:	61 1d       	adc	r22, r1
    1984:	23 1f       	adc	r18, r19
    1986:	84 9f       	mul	r24, r20
    1988:	60 0d       	add	r22, r0
    198a:	21 1d       	adc	r18, r1
    198c:	82 2f       	mov	r24, r18
    198e:	76 2f       	mov	r23, r22
    1990:	6a 2f       	mov	r22, r26
    1992:	11 24       	eor	r1, r1
    1994:	9f 57       	subi	r25, 0x7F	; 127
    1996:	50 40       	sbci	r21, 0x00	; 0
    1998:	9a f0       	brmi	.+38     	; 0x19c0 <__mulsf3_pse+0x88>
    199a:	f1 f0       	breq	.+60     	; 0x19d8 <__mulsf3_pse+0xa0>
    199c:	88 23       	and	r24, r24
    199e:	4a f0       	brmi	.+18     	; 0x19b2 <__mulsf3_pse+0x7a>
    19a0:	ee 0f       	add	r30, r30
    19a2:	ff 1f       	adc	r31, r31
    19a4:	bb 1f       	adc	r27, r27
    19a6:	66 1f       	adc	r22, r22
    19a8:	77 1f       	adc	r23, r23
    19aa:	88 1f       	adc	r24, r24
    19ac:	91 50       	subi	r25, 0x01	; 1
    19ae:	50 40       	sbci	r21, 0x00	; 0
    19b0:	a9 f7       	brne	.-22     	; 0x199c <__mulsf3_pse+0x64>
    19b2:	9e 3f       	cpi	r25, 0xFE	; 254
    19b4:	51 05       	cpc	r21, r1
    19b6:	80 f0       	brcs	.+32     	; 0x19d8 <__mulsf3_pse+0xa0>
    19b8:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>
    19bc:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>
    19c0:	5f 3f       	cpi	r21, 0xFF	; 255
    19c2:	e4 f3       	brlt	.-8      	; 0x19bc <__mulsf3_pse+0x84>
    19c4:	98 3e       	cpi	r25, 0xE8	; 232
    19c6:	d4 f3       	brlt	.-12     	; 0x19bc <__mulsf3_pse+0x84>
    19c8:	86 95       	lsr	r24
    19ca:	77 95       	ror	r23
    19cc:	67 95       	ror	r22
    19ce:	b7 95       	ror	r27
    19d0:	f7 95       	ror	r31
    19d2:	e7 95       	ror	r30
    19d4:	9f 5f       	subi	r25, 0xFF	; 255
    19d6:	c1 f7       	brne	.-16     	; 0x19c8 <__mulsf3_pse+0x90>
    19d8:	fe 2b       	or	r31, r30
    19da:	88 0f       	add	r24, r24
    19dc:	91 1d       	adc	r25, r1
    19de:	96 95       	lsr	r25
    19e0:	87 95       	ror	r24
    19e2:	97 f9       	bld	r25, 7
    19e4:	08 95       	ret

000019e6 <sin>:
    19e6:	9f 93       	push	r25
    19e8:	0e 94 07 0c 	call	0x180e	; 0x180e <__fp_rempio2>
    19ec:	0f 90       	pop	r0
    19ee:	07 fc       	sbrc	r0, 7
    19f0:	ee 5f       	subi	r30, 0xFE	; 254
    19f2:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__fp_sinus>
    19f6:	19 f4       	brne	.+6      	; 0x19fe <sin+0x18>
    19f8:	16 f4       	brtc	.+4      	; 0x19fe <sin+0x18>
    19fa:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>
    19fe:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__fp_mpack>

00001a02 <sqrt>:
    1a02:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__fp_splitA>
    1a06:	b8 f3       	brcs	.-18     	; 0x19f6 <sin+0x10>
    1a08:	99 23       	and	r25, r25
    1a0a:	c9 f3       	breq	.-14     	; 0x19fe <sin+0x18>
    1a0c:	b6 f3       	brts	.-20     	; 0x19fa <sin+0x14>
    1a0e:	9f 57       	subi	r25, 0x7F	; 127
    1a10:	55 0b       	sbc	r21, r21
    1a12:	87 ff       	sbrs	r24, 7
    1a14:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__fp_norm2>
    1a18:	00 24       	eor	r0, r0
    1a1a:	a0 e6       	ldi	r26, 0x60	; 96
    1a1c:	40 ea       	ldi	r20, 0xA0	; 160
    1a1e:	90 01       	movw	r18, r0
    1a20:	80 58       	subi	r24, 0x80	; 128
    1a22:	56 95       	lsr	r21
    1a24:	97 95       	ror	r25
    1a26:	28 f4       	brcc	.+10     	; 0x1a32 <sqrt+0x30>
    1a28:	80 5c       	subi	r24, 0xC0	; 192
    1a2a:	66 0f       	add	r22, r22
    1a2c:	77 1f       	adc	r23, r23
    1a2e:	88 1f       	adc	r24, r24
    1a30:	20 f0       	brcs	.+8      	; 0x1a3a <sqrt+0x38>
    1a32:	26 17       	cp	r18, r22
    1a34:	37 07       	cpc	r19, r23
    1a36:	48 07       	cpc	r20, r24
    1a38:	30 f4       	brcc	.+12     	; 0x1a46 <sqrt+0x44>
    1a3a:	62 1b       	sub	r22, r18
    1a3c:	73 0b       	sbc	r23, r19
    1a3e:	84 0b       	sbc	r24, r20
    1a40:	20 29       	or	r18, r0
    1a42:	31 29       	or	r19, r1
    1a44:	4a 2b       	or	r20, r26
    1a46:	a6 95       	lsr	r26
    1a48:	17 94       	ror	r1
    1a4a:	07 94       	ror	r0
    1a4c:	20 25       	eor	r18, r0
    1a4e:	31 25       	eor	r19, r1
    1a50:	4a 27       	eor	r20, r26
    1a52:	58 f7       	brcc	.-42     	; 0x1a2a <sqrt+0x28>
    1a54:	66 0f       	add	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	88 1f       	adc	r24, r24
    1a5a:	20 f0       	brcs	.+8      	; 0x1a64 <sqrt+0x62>
    1a5c:	26 17       	cp	r18, r22
    1a5e:	37 07       	cpc	r19, r23
    1a60:	48 07       	cpc	r20, r24
    1a62:	30 f4       	brcc	.+12     	; 0x1a70 <sqrt+0x6e>
    1a64:	62 0b       	sbc	r22, r18
    1a66:	73 0b       	sbc	r23, r19
    1a68:	84 0b       	sbc	r24, r20
    1a6a:	20 0d       	add	r18, r0
    1a6c:	31 1d       	adc	r19, r1
    1a6e:	41 1d       	adc	r20, r1
    1a70:	a0 95       	com	r26
    1a72:	81 f7       	brne	.-32     	; 0x1a54 <sqrt+0x52>
    1a74:	b9 01       	movw	r22, r18
    1a76:	84 2f       	mov	r24, r20
    1a78:	91 58       	subi	r25, 0x81	; 129
    1a7a:	88 0f       	add	r24, r24
    1a7c:	96 95       	lsr	r25
    1a7e:	87 95       	ror	r24
    1a80:	08 95       	ret

00001a82 <square>:
    1a82:	9b 01       	movw	r18, r22
    1a84:	ac 01       	movw	r20, r24
    1a86:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__mulsf3>

00001a8a <__divsf3>:
    1a8a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__divsf3x>
    1a8e:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__fp_round>

00001a92 <__fp_mpack>:
    1a92:	9f 3f       	cpi	r25, 0xFF	; 255
    1a94:	31 f0       	breq	.+12     	; 0x1aa2 <__fp_mpack_finite+0xc>

00001a96 <__fp_mpack_finite>:
    1a96:	91 50       	subi	r25, 0x01	; 1
    1a98:	20 f4       	brcc	.+8      	; 0x1aa2 <__fp_mpack_finite+0xc>
    1a9a:	87 95       	ror	r24
    1a9c:	77 95       	ror	r23
    1a9e:	67 95       	ror	r22
    1aa0:	b7 95       	ror	r27
    1aa2:	88 0f       	add	r24, r24
    1aa4:	91 1d       	adc	r25, r1
    1aa6:	96 95       	lsr	r25
    1aa8:	87 95       	ror	r24
    1aaa:	97 f9       	bld	r25, 7
    1aac:	08 95       	ret

00001aae <__fp_norm2>:
    1aae:	91 50       	subi	r25, 0x01	; 1
    1ab0:	50 40       	sbci	r21, 0x00	; 0
    1ab2:	66 0f       	add	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	d2 f7       	brpl	.-12     	; 0x1aae <__fp_norm2>
    1aba:	08 95       	ret

00001abc <__fp_powsodd>:
    1abc:	9f 93       	push	r25
    1abe:	8f 93       	push	r24
    1ac0:	7f 93       	push	r23
    1ac2:	6f 93       	push	r22
    1ac4:	ff 93       	push	r31
    1ac6:	ef 93       	push	r30
    1ac8:	9b 01       	movw	r18, r22
    1aca:	ac 01       	movw	r20, r24
    1acc:	0e 94 86 0c 	call	0x190c	; 0x190c <__mulsf3>
    1ad0:	ef 91       	pop	r30
    1ad2:	ff 91       	pop	r31
    1ad4:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__fp_powser>
    1ad8:	2f 91       	pop	r18
    1ada:	3f 91       	pop	r19
    1adc:	4f 91       	pop	r20
    1ade:	5f 91       	pop	r21
    1ae0:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__mulsf3>

00001ae4 <__itoa_ncheck>:
    1ae4:	bb 27       	eor	r27, r27
    1ae6:	4a 30       	cpi	r20, 0x0A	; 10
    1ae8:	31 f4       	brne	.+12     	; 0x1af6 <__itoa_ncheck+0x12>
    1aea:	99 23       	and	r25, r25
    1aec:	22 f4       	brpl	.+8      	; 0x1af6 <__itoa_ncheck+0x12>
    1aee:	bd e2       	ldi	r27, 0x2D	; 45
    1af0:	90 95       	com	r25
    1af2:	81 95       	neg	r24
    1af4:	9f 4f       	sbci	r25, 0xFF	; 255
    1af6:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__utoa_common>

00001afa <__utoa_ncheck>:
    1afa:	bb 27       	eor	r27, r27

00001afc <__utoa_common>:
    1afc:	fb 01       	movw	r30, r22
    1afe:	55 27       	eor	r21, r21
    1b00:	aa 27       	eor	r26, r26
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	aa 1f       	adc	r26, r26
    1b08:	a4 17       	cp	r26, r20
    1b0a:	10 f0       	brcs	.+4      	; 0x1b10 <__utoa_common+0x14>
    1b0c:	a4 1b       	sub	r26, r20
    1b0e:	83 95       	inc	r24
    1b10:	50 51       	subi	r21, 0x10	; 16
    1b12:	b9 f7       	brne	.-18     	; 0x1b02 <__utoa_common+0x6>
    1b14:	a0 5d       	subi	r26, 0xD0	; 208
    1b16:	aa 33       	cpi	r26, 0x3A	; 58
    1b18:	08 f0       	brcs	.+2      	; 0x1b1c <__utoa_common+0x20>
    1b1a:	a9 5d       	subi	r26, 0xD9	; 217
    1b1c:	a1 93       	st	Z+, r26
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	79 f7       	brne	.-34     	; 0x1b00 <__utoa_common+0x4>
    1b22:	b1 11       	cpse	r27, r1
    1b24:	b1 93       	st	Z+, r27
    1b26:	11 92       	st	Z+, r1
    1b28:	cb 01       	movw	r24, r22
    1b2a:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <strrev>

00001b2e <strrev>:
    1b2e:	dc 01       	movw	r26, r24
    1b30:	fc 01       	movw	r30, r24
    1b32:	67 2f       	mov	r22, r23
    1b34:	71 91       	ld	r23, Z+
    1b36:	77 23       	and	r23, r23
    1b38:	e1 f7       	brne	.-8      	; 0x1b32 <strrev+0x4>
    1b3a:	32 97       	sbiw	r30, 0x02	; 2
    1b3c:	04 c0       	rjmp	.+8      	; 0x1b46 <strrev+0x18>
    1b3e:	7c 91       	ld	r23, X
    1b40:	6d 93       	st	X+, r22
    1b42:	70 83       	st	Z, r23
    1b44:	62 91       	ld	r22, -Z
    1b46:	ae 17       	cp	r26, r30
    1b48:	bf 07       	cpc	r27, r31
    1b4a:	c8 f3       	brcs	.-14     	; 0x1b3e <strrev+0x10>
    1b4c:	08 95       	ret

00001b4e <_exit>:
    1b4e:	f8 94       	cli

00001b50 <__stop_program>:
    1b50:	ff cf       	rjmp	.-2      	; 0x1b50 <__stop_program>
