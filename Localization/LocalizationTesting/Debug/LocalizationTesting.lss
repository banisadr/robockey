
LocalizationTesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001bda  00001c6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080010c  0080010c  00001c7a  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001c7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023a6  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000936  00000000  00000000  000042c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c84  00000000  00000000  00004bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000608  00000000  00000000  0000587c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ba  00000000  00000000  00005e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c22  00000000  00000000  0000673e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00009360  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__ctors_end>
       4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       8:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      10:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      14:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      18:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      1c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      20:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      24:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      28:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__vector_10>
      2c:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__vector_11>
      30:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      34:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      38:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      3c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      40:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      44:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      48:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      4c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      50:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      54:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      58:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      5c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      60:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      64:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      68:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      6c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      70:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      74:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      78:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      7c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      80:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      84:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      88:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      8c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      90:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      94:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      98:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      9c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      a0:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      a4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      a8:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__trampolines_end>:
      f8:	0a 00       	.word	0x000a	; ????

000000fa <__c.2019>:
      fa:	20 00                                                .

000000fc <descriptor_list>:
      fc:	00 01 00 00 93 01 12 00 02 00 00 50 01 43 00 03     ...........P.C..
     10c:	00 00 4c 01 04 01 03 09 04 38 01 12 02 03 09 04     ..L......8......
     11c:	30 01 06 03 03 09 04 26 01 08                       0......&..

00000126 <string3>:
     126:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000130 <string2>:
     130:	06 03 4d 00 32 00 00 00                             ..M.2...

00000138 <string1>:
     138:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     148:	65 00 00 00                                         e...

0000014c <string0>:
     14c:	04 03 09 04                                         ....

00000150 <config1_descriptor>:
     150:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     160:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     170:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     180:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     190:	40 00 00                                            @..

00000193 <device_descriptor>:
     193:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1a3:	03 01                                               ..

000001a5 <endpoint_config_table>:
     1a5:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001b0 <__ctors_end>:
     1b0:	11 24       	eor	r1, r1
     1b2:	1f be       	out	0x3f, r1	; 63
     1b4:	cf ef       	ldi	r28, 0xFF	; 255
     1b6:	da e0       	ldi	r29, 0x0A	; 10
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	cd bf       	out	0x3d, r28	; 61

000001bc <__do_copy_data>:
     1bc:	11 e0       	ldi	r17, 0x01	; 1
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	ea ed       	ldi	r30, 0xDA	; 218
     1c4:	fb e1       	ldi	r31, 0x1B	; 27
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <__do_copy_data+0x10>
     1c8:	05 90       	lpm	r0, Z+
     1ca:	0d 92       	st	X+, r0
     1cc:	ac 30       	cpi	r26, 0x0C	; 12
     1ce:	b1 07       	cpc	r27, r17
     1d0:	d9 f7       	brne	.-10     	; 0x1c8 <__do_copy_data+0xc>

000001d2 <__do_clear_bss>:
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	ac e0       	ldi	r26, 0x0C	; 12
     1d6:	b1 e0       	ldi	r27, 0x01	; 1
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <.do_clear_bss_start>

000001da <.do_clear_bss_loop>:
     1da:	1d 92       	st	X+, r1

000001dc <.do_clear_bss_start>:
     1dc:	a8 32       	cpi	r26, 0x28	; 40
     1de:	b2 07       	cpc	r27, r18
     1e0:	e1 f7       	brne	.-8      	; 0x1da <.do_clear_bss_loop>
     1e2:	0e 94 18 05 	call	0xa30	; 0xa30 <main>
     1e6:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <_exit>

000001ea <__bad_interrupt>:
     1ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ee <distIndex>:
     1ee:	83 30       	cpi	r24, 0x03	; 3
     1f0:	91 05       	cpc	r25, r1
     1f2:	01 f1       	breq	.+64     	; 0x234 <distIndex+0x46>
     1f4:	34 f4       	brge	.+12     	; 0x202 <distIndex+0x14>
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	91 05       	cpc	r25, r1
     1fa:	51 f0       	breq	.+20     	; 0x210 <distIndex+0x22>
     1fc:	02 97       	sbiw	r24, 0x02	; 2
     1fe:	89 f0       	breq	.+34     	; 0x222 <distIndex+0x34>
     200:	42 c0       	rjmp	.+132    	; 0x286 <distIndex+0x98>
     202:	85 30       	cpi	r24, 0x05	; 5
     204:	91 05       	cpc	r25, r1
     206:	51 f1       	breq	.+84     	; 0x25c <distIndex+0x6e>
     208:	f4 f0       	brlt	.+60     	; 0x246 <distIndex+0x58>
     20a:	06 97       	sbiw	r24, 0x06	; 6
     20c:	91 f1       	breq	.+100    	; 0x272 <distIndex+0x84>
     20e:	3b c0       	rjmp	.+118    	; 0x286 <distIndex+0x98>
     210:	ec e0       	ldi	r30, 0x0C	; 12
     212:	f1 e0       	ldi	r31, 0x01	; 1
     214:	11 82       	std	Z+1, r1	; 0x01
     216:	10 82       	st	Z, r1
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	93 83       	std	Z+3, r25	; 0x03
     21e:	82 83       	std	Z+2, r24	; 0x02
     220:	32 c0       	rjmp	.+100    	; 0x286 <distIndex+0x98>
     222:	ec e0       	ldi	r30, 0x0C	; 12
     224:	f1 e0       	ldi	r31, 0x01	; 1
     226:	11 82       	std	Z+1, r1	; 0x01
     228:	10 82       	st	Z, r1
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	93 83       	std	Z+3, r25	; 0x03
     230:	82 83       	std	Z+2, r24	; 0x02
     232:	29 c0       	rjmp	.+82     	; 0x286 <distIndex+0x98>
     234:	ec e0       	ldi	r30, 0x0C	; 12
     236:	f1 e0       	ldi	r31, 0x01	; 1
     238:	11 82       	std	Z+1, r1	; 0x01
     23a:	10 82       	st	Z, r1
     23c:	83 e0       	ldi	r24, 0x03	; 3
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	93 83       	std	Z+3, r25	; 0x03
     242:	82 83       	std	Z+2, r24	; 0x02
     244:	20 c0       	rjmp	.+64     	; 0x286 <distIndex+0x98>
     246:	ec e0       	ldi	r30, 0x0C	; 12
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	91 83       	std	Z+1, r25	; 0x01
     250:	80 83       	st	Z, r24
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	93 83       	std	Z+3, r25	; 0x03
     258:	82 83       	std	Z+2, r24	; 0x02
     25a:	15 c0       	rjmp	.+42     	; 0x286 <distIndex+0x98>
     25c:	ec e0       	ldi	r30, 0x0C	; 12
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	91 83       	std	Z+1, r25	; 0x01
     266:	80 83       	st	Z, r24
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	93 83       	std	Z+3, r25	; 0x03
     26e:	82 83       	std	Z+2, r24	; 0x02
     270:	0a c0       	rjmp	.+20     	; 0x286 <distIndex+0x98>
     272:	ec e0       	ldi	r30, 0x0C	; 12
     274:	f1 e0       	ldi	r31, 0x01	; 1
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	83 e0       	ldi	r24, 0x03	; 3
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	93 83       	std	Z+3, r25	; 0x03
     284:	82 83       	std	Z+2, r24	; 0x02
     286:	8c e0       	ldi	r24, 0x0C	; 12
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	08 95       	ret

0000028c <orientationCalculationFour>:
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
     29a:	7a 01       	movw	r14, r20
     29c:	89 01       	movw	r16, r18
     29e:	e6 2f       	mov	r30, r22
     2a0:	f7 2f       	mov	r31, r23
     2a2:	21 91       	ld	r18, Z+
     2a4:	31 91       	ld	r19, Z+
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	08 c0       	rjmp	.+16     	; 0x2c0 <orientationCalculationFour+0x34>
     2b0:	a1 91       	ld	r26, Z+
     2b2:	b1 91       	ld	r27, Z+
     2b4:	a2 17       	cp	r26, r18
     2b6:	b3 07       	cpc	r27, r19
     2b8:	1c f4       	brge	.+6      	; 0x2c0 <orientationCalculationFour+0x34>
     2ba:	9d 01       	movw	r18, r26
     2bc:	86 2f       	mov	r24, r22
     2be:	97 2f       	mov	r25, r23
     2c0:	6f 5f       	subi	r22, 0xFF	; 255
     2c2:	7f 4f       	sbci	r23, 0xFF	; 255
     2c4:	66 30       	cpi	r22, 0x06	; 6
     2c6:	71 05       	cpc	r23, r1
     2c8:	99 f7       	brne	.-26     	; 0x2b0 <orientationCalculationFour+0x24>
     2ca:	0e 94 f7 00 	call	0x1ee	; 0x1ee <distIndex>
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 81       	ld	r18, Z
     2d2:	31 81       	ldd	r19, Z+1	; 0x01
     2d4:	48 81       	ld	r20, Y
     2d6:	59 81       	ldd	r21, Y+1	; 0x01
     2d8:	24 17       	cp	r18, r20
     2da:	35 07       	cpc	r19, r21
     2dc:	49 f4       	brne	.+18     	; 0x2f0 <orientationCalculationFour+0x64>
     2de:	f7 01       	movw	r30, r14
     2e0:	31 83       	std	Z+1, r19	; 0x01
     2e2:	20 83       	st	Z, r18
     2e4:	8a 81       	ldd	r24, Y+2	; 0x02
     2e6:	9b 81       	ldd	r25, Y+3	; 0x03
     2e8:	f8 01       	movw	r30, r16
     2ea:	91 83       	std	Z+1, r25	; 0x01
     2ec:	80 83       	st	Z, r24
     2ee:	25 c0       	rjmp	.+74     	; 0x33a <orientationCalculationFour+0xae>
     2f0:	6a 81       	ldd	r22, Y+2	; 0x02
     2f2:	7b 81       	ldd	r23, Y+3	; 0x03
     2f4:	26 17       	cp	r18, r22
     2f6:	37 07       	cpc	r19, r23
     2f8:	49 f4       	brne	.+18     	; 0x30c <orientationCalculationFour+0x80>
     2fa:	f7 01       	movw	r30, r14
     2fc:	31 83       	std	Z+1, r19	; 0x01
     2fe:	20 83       	st	Z, r18
     300:	88 81       	ld	r24, Y
     302:	99 81       	ldd	r25, Y+1	; 0x01
     304:	f8 01       	movw	r30, r16
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	80 83       	st	Z, r24
     30a:	17 c0       	rjmp	.+46     	; 0x33a <orientationCalculationFour+0xae>
     30c:	fc 01       	movw	r30, r24
     30e:	82 81       	ldd	r24, Z+2	; 0x02
     310:	93 81       	ldd	r25, Z+3	; 0x03
     312:	48 17       	cp	r20, r24
     314:	59 07       	cpc	r21, r25
     316:	49 f4       	brne	.+18     	; 0x32a <orientationCalculationFour+0x9e>
     318:	f7 01       	movw	r30, r14
     31a:	51 83       	std	Z+1, r21	; 0x01
     31c:	40 83       	st	Z, r20
     31e:	8a 81       	ldd	r24, Y+2	; 0x02
     320:	9b 81       	ldd	r25, Y+3	; 0x03
     322:	f8 01       	movw	r30, r16
     324:	91 83       	std	Z+1, r25	; 0x01
     326:	80 83       	st	Z, r24
     328:	08 c0       	rjmp	.+16     	; 0x33a <orientationCalculationFour+0xae>
     32a:	f7 01       	movw	r30, r14
     32c:	71 83       	std	Z+1, r23	; 0x01
     32e:	60 83       	st	Z, r22
     330:	88 81       	ld	r24, Y
     332:	99 81       	ldd	r25, Y+1	; 0x01
     334:	f8 01       	movw	r30, r16
     336:	91 83       	std	Z+1, r25	; 0x01
     338:	80 83       	st	Z, r24
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	08 95       	ret

00000348 <fourPointCalc>:
     348:	2f 92       	push	r2
     34a:	3f 92       	push	r3
     34c:	4f 92       	push	r4
     34e:	5f 92       	push	r5
     350:	6f 92       	push	r6
     352:	7f 92       	push	r7
     354:	8f 92       	push	r8
     356:	9f 92       	push	r9
     358:	af 92       	push	r10
     35a:	bf 92       	push	r11
     35c:	cf 92       	push	r12
     35e:	df 92       	push	r13
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	a8 97       	sbiw	r28, 0x28	; 40
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	de bf       	out	0x3e, r29	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	1c 01       	movw	r2, r24
     37e:	dc 01       	movw	r26, r24
     380:	14 96       	adiw	r26, 0x04	; 4
     382:	0d 90       	ld	r0, X+
     384:	bc 91       	ld	r27, X
     386:	a0 2d       	mov	r26, r0
     388:	ba 8b       	std	Y+18, r27	; 0x12
     38a:	a9 8b       	std	Y+17, r26	; 0x11
     38c:	fc 01       	movw	r30, r24
     38e:	e0 80       	ld	r14, Z
     390:	f1 80       	ldd	r15, Z+1	; 0x01
     392:	cd 01       	movw	r24, r26
     394:	8e 19       	sub	r24, r14
     396:	9f 09       	sbc	r25, r15
     398:	26 81       	ldd	r18, Z+6	; 0x06
     39a:	37 81       	ldd	r19, Z+7	; 0x07
     39c:	3e 8b       	std	Y+22, r19	; 0x16
     39e:	2d 8b       	std	Y+21, r18	; 0x15
     3a0:	02 81       	ldd	r16, Z+2	; 0x02
     3a2:	13 81       	ldd	r17, Z+3	; 0x03
     3a4:	20 1b       	sub	r18, r16
     3a6:	31 0b       	sbc	r19, r17
     3a8:	88 9f       	mul	r24, r24
     3aa:	40 01       	movw	r8, r0
     3ac:	89 9f       	mul	r24, r25
     3ae:	90 0c       	add	r9, r0
     3b0:	90 0c       	add	r9, r0
     3b2:	11 24       	eor	r1, r1
     3b4:	22 9f       	mul	r18, r18
     3b6:	c0 01       	movw	r24, r0
     3b8:	23 9f       	mul	r18, r19
     3ba:	90 0d       	add	r25, r0
     3bc:	90 0d       	add	r25, r0
     3be:	11 24       	eor	r1, r1
     3c0:	88 0e       	add	r8, r24
     3c2:	99 1e       	adc	r9, r25
     3c4:	09 2c       	mov	r0, r9
     3c6:	00 0c       	add	r0, r0
     3c8:	aa 08       	sbc	r10, r10
     3ca:	bb 08       	sbc	r11, r11
     3cc:	c5 01       	movw	r24, r10
     3ce:	b4 01       	movw	r22, r8
     3d0:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatsisf>
     3d4:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <sqrt>
     3d8:	6d 8f       	std	Y+29, r22	; 0x1d
     3da:	7e 8f       	std	Y+30, r23	; 0x1e
     3dc:	8f 8f       	std	Y+31, r24	; 0x1f
     3de:	98 a3       	std	Y+32, r25	; 0x20
     3e0:	d1 01       	movw	r26, r2
     3e2:	18 96       	adiw	r26, 0x08	; 8
     3e4:	ad 90       	ld	r10, X+
     3e6:	bc 90       	ld	r11, X
     3e8:	19 97       	sbiw	r26, 0x09	; 9
     3ea:	c5 01       	movw	r24, r10
     3ec:	8e 19       	sub	r24, r14
     3ee:	9f 09       	sbc	r25, r15
     3f0:	1a 96       	adiw	r26, 0x0a	; 10
     3f2:	6d 90       	ld	r6, X+
     3f4:	7c 90       	ld	r7, X
     3f6:	1b 97       	sbiw	r26, 0x0b	; 11
     3f8:	93 01       	movw	r18, r6
     3fa:	20 1b       	sub	r18, r16
     3fc:	31 0b       	sbc	r19, r17
     3fe:	88 9f       	mul	r24, r24
     400:	40 01       	movw	r8, r0
     402:	89 9f       	mul	r24, r25
     404:	90 0c       	add	r9, r0
     406:	90 0c       	add	r9, r0
     408:	11 24       	eor	r1, r1
     40a:	22 9f       	mul	r18, r18
     40c:	c0 01       	movw	r24, r0
     40e:	23 9f       	mul	r18, r19
     410:	90 0d       	add	r25, r0
     412:	90 0d       	add	r25, r0
     414:	11 24       	eor	r1, r1
     416:	88 0e       	add	r8, r24
     418:	99 1e       	adc	r9, r25
     41a:	94 01       	movw	r18, r8
     41c:	99 0c       	add	r9, r9
     41e:	44 0b       	sbc	r20, r20
     420:	55 0b       	sbc	r21, r21
     422:	29 8f       	std	Y+25, r18	; 0x19
     424:	3a 8f       	std	Y+26, r19	; 0x1a
     426:	4b 8f       	std	Y+27, r20	; 0x1b
     428:	5c 8f       	std	Y+28, r21	; 0x1c
     42a:	69 8d       	ldd	r22, Y+25	; 0x19
     42c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     42e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     430:	9c 8d       	ldd	r25, Y+28	; 0x1c
     432:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatsisf>
     436:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <sqrt>
     43a:	69 8f       	std	Y+25, r22	; 0x19
     43c:	7a 8f       	std	Y+26, r23	; 0x1a
     43e:	8b 8f       	std	Y+27, r24	; 0x1b
     440:	9c 8f       	std	Y+28, r25	; 0x1c
     442:	d1 01       	movw	r26, r2
     444:	1c 96       	adiw	r26, 0x0c	; 12
     446:	8d 90       	ld	r8, X+
     448:	9c 90       	ld	r9, X
     44a:	1d 97       	sbiw	r26, 0x0d	; 13
     44c:	c4 01       	movw	r24, r8
     44e:	8e 19       	sub	r24, r14
     450:	9f 09       	sbc	r25, r15
     452:	1e 96       	adiw	r26, 0x0e	; 14
     454:	4d 90       	ld	r4, X+
     456:	5c 90       	ld	r5, X
     458:	1f 97       	sbiw	r26, 0x0f	; 15
     45a:	92 01       	movw	r18, r4
     45c:	20 1b       	sub	r18, r16
     45e:	31 0b       	sbc	r19, r17
     460:	88 9f       	mul	r24, r24
     462:	60 01       	movw	r12, r0
     464:	89 9f       	mul	r24, r25
     466:	d0 0c       	add	r13, r0
     468:	d0 0c       	add	r13, r0
     46a:	11 24       	eor	r1, r1
     46c:	22 9f       	mul	r18, r18
     46e:	c0 01       	movw	r24, r0
     470:	23 9f       	mul	r18, r19
     472:	90 0d       	add	r25, r0
     474:	90 0d       	add	r25, r0
     476:	11 24       	eor	r1, r1
     478:	c8 0e       	add	r12, r24
     47a:	d9 1e       	adc	r13, r25
     47c:	0d 2c       	mov	r0, r13
     47e:	00 0c       	add	r0, r0
     480:	ee 08       	sbc	r14, r14
     482:	ff 08       	sbc	r15, r15
     484:	c7 01       	movw	r24, r14
     486:	b6 01       	movw	r22, r12
     488:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatsisf>
     48c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <sqrt>
     490:	69 a3       	std	Y+33, r22	; 0x21
     492:	7a a3       	std	Y+34, r23	; 0x22
     494:	8b a3       	std	Y+35, r24	; 0x23
     496:	9c a3       	std	Y+36, r25	; 0x24
     498:	c5 01       	movw	r24, r10
     49a:	e9 89       	ldd	r30, Y+17	; 0x11
     49c:	fa 89       	ldd	r31, Y+18	; 0x12
     49e:	8e 1b       	sub	r24, r30
     4a0:	9f 0b       	sbc	r25, r31
     4a2:	93 01       	movw	r18, r6
     4a4:	4d 89       	ldd	r20, Y+21	; 0x15
     4a6:	5e 89       	ldd	r21, Y+22	; 0x16
     4a8:	24 1b       	sub	r18, r20
     4aa:	35 0b       	sbc	r19, r21
     4ac:	88 9f       	mul	r24, r24
     4ae:	60 01       	movw	r12, r0
     4b0:	89 9f       	mul	r24, r25
     4b2:	d0 0c       	add	r13, r0
     4b4:	d0 0c       	add	r13, r0
     4b6:	11 24       	eor	r1, r1
     4b8:	22 9f       	mul	r18, r18
     4ba:	c0 01       	movw	r24, r0
     4bc:	23 9f       	mul	r18, r19
     4be:	90 0d       	add	r25, r0
     4c0:	90 0d       	add	r25, r0
     4c2:	11 24       	eor	r1, r1
     4c4:	c8 0e       	add	r12, r24
     4c6:	d9 1e       	adc	r13, r25
     4c8:	0d 2c       	mov	r0, r13
     4ca:	00 0c       	add	r0, r0
     4cc:	ee 08       	sbc	r14, r14
     4ce:	ff 08       	sbc	r15, r15
     4d0:	c7 01       	movw	r24, r14
     4d2:	b6 01       	movw	r22, r12
     4d4:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatsisf>
     4d8:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <sqrt>
     4dc:	6d a3       	std	Y+37, r22	; 0x25
     4de:	7e a3       	std	Y+38, r23	; 0x26
     4e0:	8f a3       	std	Y+39, r24	; 0x27
     4e2:	98 a7       	std	Y+40, r25	; 0x28
     4e4:	c4 01       	movw	r24, r8
     4e6:	a9 89       	ldd	r26, Y+17	; 0x11
     4e8:	ba 89       	ldd	r27, Y+18	; 0x12
     4ea:	8a 1b       	sub	r24, r26
     4ec:	9b 0b       	sbc	r25, r27
     4ee:	92 01       	movw	r18, r4
     4f0:	ed 89       	ldd	r30, Y+21	; 0x15
     4f2:	fe 89       	ldd	r31, Y+22	; 0x16
     4f4:	2e 1b       	sub	r18, r30
     4f6:	3f 0b       	sbc	r19, r31
     4f8:	88 9f       	mul	r24, r24
     4fa:	60 01       	movw	r12, r0
     4fc:	89 9f       	mul	r24, r25
     4fe:	d0 0c       	add	r13, r0
     500:	d0 0c       	add	r13, r0
     502:	11 24       	eor	r1, r1
     504:	22 9f       	mul	r18, r18
     506:	c0 01       	movw	r24, r0
     508:	23 9f       	mul	r18, r19
     50a:	90 0d       	add	r25, r0
     50c:	90 0d       	add	r25, r0
     50e:	11 24       	eor	r1, r1
     510:	c8 0e       	add	r12, r24
     512:	d9 1e       	adc	r13, r25
     514:	0d 2c       	mov	r0, r13
     516:	00 0c       	add	r0, r0
     518:	ee 08       	sbc	r14, r14
     51a:	ff 08       	sbc	r15, r15
     51c:	c7 01       	movw	r24, r14
     51e:	b6 01       	movw	r22, r12
     520:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatsisf>
     524:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <sqrt>
     528:	69 8b       	std	Y+17, r22	; 0x11
     52a:	7a 8b       	std	Y+18, r23	; 0x12
     52c:	8b 8b       	std	Y+19, r24	; 0x13
     52e:	9c 8b       	std	Y+20, r25	; 0x14
     530:	94 01       	movw	r18, r8
     532:	2a 19       	sub	r18, r10
     534:	3b 09       	sbc	r19, r11
     536:	c2 01       	movw	r24, r4
     538:	86 19       	sub	r24, r6
     53a:	97 09       	sbc	r25, r7
     53c:	22 9f       	mul	r18, r18
     53e:	60 01       	movw	r12, r0
     540:	23 9f       	mul	r18, r19
     542:	d0 0c       	add	r13, r0
     544:	d0 0c       	add	r13, r0
     546:	11 24       	eor	r1, r1
     548:	88 9f       	mul	r24, r24
     54a:	90 01       	movw	r18, r0
     54c:	89 9f       	mul	r24, r25
     54e:	30 0d       	add	r19, r0
     550:	30 0d       	add	r19, r0
     552:	11 24       	eor	r1, r1
     554:	c2 0e       	add	r12, r18
     556:	d3 1e       	adc	r13, r19
     558:	0d 2c       	mov	r0, r13
     55a:	00 0c       	add	r0, r0
     55c:	ee 08       	sbc	r14, r14
     55e:	ff 08       	sbc	r15, r15
     560:	c7 01       	movw	r24, r14
     562:	b6 01       	movw	r22, r12
     564:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatsisf>
     568:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <sqrt>
     56c:	6b 01       	movw	r12, r22
     56e:	7c 01       	movw	r14, r24
     570:	6d 8d       	ldd	r22, Y+29	; 0x1d
     572:	7e 8d       	ldd	r23, Y+30	; 0x1e
     574:	8f 8d       	ldd	r24, Y+31	; 0x1f
     576:	98 a1       	ldd	r25, Y+32	; 0x20
     578:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fixsfsi>
     57c:	7a 83       	std	Y+2, r23	; 0x02
     57e:	69 83       	std	Y+1, r22	; 0x01
     580:	69 8d       	ldd	r22, Y+25	; 0x19
     582:	7a 8d       	ldd	r23, Y+26	; 0x1a
     584:	8b 8d       	ldd	r24, Y+27	; 0x1b
     586:	9c 8d       	ldd	r25, Y+28	; 0x1c
     588:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fixsfsi>
     58c:	7c 83       	std	Y+4, r23	; 0x04
     58e:	6b 83       	std	Y+3, r22	; 0x03
     590:	69 a1       	ldd	r22, Y+33	; 0x21
     592:	7a a1       	ldd	r23, Y+34	; 0x22
     594:	8b a1       	ldd	r24, Y+35	; 0x23
     596:	9c a1       	ldd	r25, Y+36	; 0x24
     598:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fixsfsi>
     59c:	7e 83       	std	Y+6, r23	; 0x06
     59e:	6d 83       	std	Y+5, r22	; 0x05
     5a0:	6d a1       	ldd	r22, Y+37	; 0x25
     5a2:	7e a1       	ldd	r23, Y+38	; 0x26
     5a4:	8f a1       	ldd	r24, Y+39	; 0x27
     5a6:	98 a5       	ldd	r25, Y+40	; 0x28
     5a8:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fixsfsi>
     5ac:	78 87       	std	Y+8, r23	; 0x08
     5ae:	6f 83       	std	Y+7, r22	; 0x07
     5b0:	69 89       	ldd	r22, Y+17	; 0x11
     5b2:	7a 89       	ldd	r23, Y+18	; 0x12
     5b4:	8b 89       	ldd	r24, Y+19	; 0x13
     5b6:	9c 89       	ldd	r25, Y+20	; 0x14
     5b8:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fixsfsi>
     5bc:	7a 87       	std	Y+10, r23	; 0x0a
     5be:	69 87       	std	Y+9, r22	; 0x09
     5c0:	c7 01       	movw	r24, r14
     5c2:	b6 01       	movw	r22, r12
     5c4:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fixsfsi>
     5c8:	7c 87       	std	Y+12, r23	; 0x0c
     5ca:	6b 87       	std	Y+11, r22	; 0x0b
     5cc:	fe 01       	movw	r30, r28
     5ce:	31 96       	adiw	r30, 0x01	; 1
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	41 91       	ld	r20, Z+
     5de:	51 91       	ld	r21, Z+
     5e0:	64 17       	cp	r22, r20
     5e2:	75 07       	cpc	r23, r21
     5e4:	1c f4       	brge	.+6      	; 0x5ec <fourPointCalc+0x2a4>
     5e6:	ba 01       	movw	r22, r20
     5e8:	82 2f       	mov	r24, r18
     5ea:	93 2f       	mov	r25, r19
     5ec:	2f 5f       	subi	r18, 0xFF	; 255
     5ee:	3f 4f       	sbci	r19, 0xFF	; 255
     5f0:	26 30       	cpi	r18, 0x06	; 6
     5f2:	31 05       	cpc	r19, r1
     5f4:	99 f7       	brne	.-26     	; 0x5dc <fourPointCalc+0x294>
     5f6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <distIndex>
     5fa:	fc 01       	movw	r30, r24
     5fc:	a0 81       	ld	r26, Z
     5fe:	b1 81       	ldd	r27, Z+1	; 0x01
     600:	aa 0f       	add	r26, r26
     602:	bb 1f       	adc	r27, r27
     604:	aa 0f       	add	r26, r26
     606:	bb 1f       	adc	r27, r27
     608:	a2 0d       	add	r26, r2
     60a:	b3 1d       	adc	r27, r3
     60c:	22 81       	ldd	r18, Z+2	; 0x02
     60e:	33 81       	ldd	r19, Z+3	; 0x03
     610:	f9 01       	movw	r30, r18
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	e2 0d       	add	r30, r2
     61c:	f3 1d       	adc	r31, r3
     61e:	0d 91       	ld	r16, X+
     620:	1c 91       	ld	r17, X
     622:	11 97       	sbiw	r26, 0x01	; 1
     624:	20 81       	ld	r18, Z
     626:	31 81       	ldd	r19, Z+1	; 0x01
     628:	02 0f       	add	r16, r18
     62a:	13 1f       	adc	r17, r19
     62c:	11 23       	and	r17, r17
     62e:	14 f4       	brge	.+4      	; 0x634 <fourPointCalc+0x2ec>
     630:	0f 5f       	subi	r16, 0xFF	; 255
     632:	1f 4f       	sbci	r17, 0xFF	; 255
     634:	15 95       	asr	r17
     636:	07 95       	ror	r16
     638:	12 96       	adiw	r26, 0x02	; 2
     63a:	ad 90       	ld	r10, X+
     63c:	bc 90       	ld	r11, X
     63e:	13 97       	sbiw	r26, 0x03	; 3
     640:	22 81       	ldd	r18, Z+2	; 0x02
     642:	33 81       	ldd	r19, Z+3	; 0x03
     644:	a2 0e       	add	r10, r18
     646:	b3 1e       	adc	r11, r19
     648:	bb 20       	and	r11, r11
     64a:	1c f4       	brge	.+6      	; 0x652 <fourPointCalc+0x30a>
     64c:	ff ef       	ldi	r31, 0xFF	; 255
     64e:	af 1a       	sub	r10, r31
     650:	bf 0a       	sbc	r11, r31
     652:	b5 94       	asr	r11
     654:	a7 94       	ror	r10
     656:	9e 01       	movw	r18, r28
     658:	21 5f       	subi	r18, 0xF1	; 241
     65a:	3f 4f       	sbci	r19, 0xFF	; 255
     65c:	ae 01       	movw	r20, r28
     65e:	43 5f       	subi	r20, 0xF3	; 243
     660:	5f 4f       	sbci	r21, 0xFF	; 255
     662:	be 01       	movw	r22, r28
     664:	6f 5f       	subi	r22, 0xFF	; 255
     666:	7f 4f       	sbci	r23, 0xFF	; 255
     668:	0e 94 46 01 	call	0x28c	; 0x28c <orientationCalculationFour>
     66c:	ed 84       	ldd	r14, Y+13	; 0x0d
     66e:	fe 84       	ldd	r15, Y+14	; 0x0e
     670:	ee 0c       	add	r14, r14
     672:	ff 1c       	adc	r15, r15
     674:	ee 0c       	add	r14, r14
     676:	ff 1c       	adc	r15, r15
     678:	e2 0c       	add	r14, r2
     67a:	f3 1c       	adc	r15, r3
     67c:	8f 85       	ldd	r24, Y+15	; 0x0f
     67e:	98 89       	ldd	r25, Y+16	; 0x10
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	28 0e       	add	r2, r24
     68a:	39 1e       	adc	r3, r25
     68c:	d7 01       	movw	r26, r14
     68e:	6d 91       	ld	r22, X+
     690:	7c 91       	ld	r23, X
     692:	f1 01       	movw	r30, r2
     694:	80 81       	ld	r24, Z
     696:	91 81       	ldd	r25, Z+1	; 0x01
     698:	68 1b       	sub	r22, r24
     69a:	79 0b       	sbc	r23, r25
     69c:	07 2e       	mov	r0, r23
     69e:	00 0c       	add	r0, r0
     6a0:	88 0b       	sbc	r24, r24
     6a2:	99 0b       	sbc	r25, r25
     6a4:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatsisf>
     6a8:	2b 01       	movw	r4, r22
     6aa:	3c 01       	movw	r6, r24
     6ac:	d7 01       	movw	r26, r14
     6ae:	12 96       	adiw	r26, 0x02	; 2
     6b0:	6d 91       	ld	r22, X+
     6b2:	7c 91       	ld	r23, X
     6b4:	13 97       	sbiw	r26, 0x03	; 3
     6b6:	f1 01       	movw	r30, r2
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	68 1b       	sub	r22, r24
     6be:	79 0b       	sbc	r23, r25
     6c0:	07 2e       	mov	r0, r23
     6c2:	00 0c       	add	r0, r0
     6c4:	88 0b       	sbc	r24, r24
     6c6:	99 0b       	sbc	r25, r25
     6c8:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatsisf>
     6cc:	90 58       	subi	r25, 0x80	; 128
     6ce:	a3 01       	movw	r20, r6
     6d0:	92 01       	movw	r18, r4
     6d2:	0e 94 c6 0a 	call	0x158c	; 0x158c <atan2>
     6d6:	2b ed       	ldi	r18, 0xDB	; 219
     6d8:	3f e0       	ldi	r19, 0x0F	; 15
     6da:	49 ec       	ldi	r20, 0xC9	; 201
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	0e 94 47 0a 	call	0x148e	; 0x148e <__addsf3>
     6e2:	2b 01       	movw	r4, r22
     6e4:	3c 01       	movw	r6, r24
     6e6:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <sin>
     6ea:	6b 01       	movw	r12, r22
     6ec:	7c 01       	movw	r14, r24
     6ee:	6e e7       	ldi	r22, 0x7E	; 126
     6f0:	71 e0       	ldi	r23, 0x01	; 1
     6f2:	6a 19       	sub	r22, r10
     6f4:	7b 09       	sbc	r23, r11
     6f6:	07 2e       	mov	r0, r23
     6f8:	00 0c       	add	r0, r0
     6fa:	88 0b       	sbc	r24, r24
     6fc:	99 0b       	sbc	r25, r25
     6fe:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatsisf>
     702:	4b 01       	movw	r8, r22
     704:	5c 01       	movw	r10, r24
     706:	c3 01       	movw	r24, r6
     708:	b2 01       	movw	r22, r4
     70a:	0e 94 25 0b 	call	0x164a	; 0x164a <cos>
     70e:	69 8b       	std	Y+17, r22	; 0x11
     710:	7a 8b       	std	Y+18, r23	; 0x12
     712:	8b 8b       	std	Y+19, r24	; 0x13
     714:	9c 8b       	std	Y+20, r25	; 0x14
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	72 e0       	ldi	r23, 0x02	; 2
     71a:	60 1b       	sub	r22, r16
     71c:	71 0b       	sbc	r23, r17
     71e:	07 2e       	mov	r0, r23
     720:	00 0c       	add	r0, r0
     722:	88 0b       	sbc	r24, r24
     724:	99 0b       	sbc	r25, r25
     726:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatsisf>
     72a:	2b 01       	movw	r4, r22
     72c:	3c 01       	movw	r6, r24
     72e:	0c e1       	ldi	r16, 0x1C	; 28
     730:	11 e0       	ldi	r17, 0x01	; 1
     732:	a5 01       	movw	r20, r10
     734:	94 01       	movw	r18, r8
     736:	c7 01       	movw	r24, r14
     738:	b6 01       	movw	r22, r12
     73a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__mulsf3>
     73e:	6d 8b       	std	Y+21, r22	; 0x15
     740:	7e 8b       	std	Y+22, r23	; 0x16
     742:	8f 8b       	std	Y+23, r24	; 0x17
     744:	98 8f       	std	Y+24, r25	; 0x18
     746:	a3 01       	movw	r20, r6
     748:	92 01       	movw	r18, r4
     74a:	69 89       	ldd	r22, Y+17	; 0x11
     74c:	7a 89       	ldd	r23, Y+18	; 0x12
     74e:	8b 89       	ldd	r24, Y+19	; 0x13
     750:	9c 89       	ldd	r25, Y+20	; 0x14
     752:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__mulsf3>
     756:	9b 01       	movw	r18, r22
     758:	ac 01       	movw	r20, r24
     75a:	6d 89       	ldd	r22, Y+21	; 0x15
     75c:	7e 89       	ldd	r23, Y+22	; 0x16
     75e:	8f 89       	ldd	r24, Y+23	; 0x17
     760:	98 8d       	ldd	r25, Y+24	; 0x18
     762:	0e 94 46 0a 	call	0x148c	; 0x148c <__subsf3>
     766:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fixsfsi>
     76a:	d8 01       	movw	r26, r16
     76c:	6d 93       	st	X+, r22
     76e:	7c 93       	st	X, r23
     770:	29 89       	ldd	r18, Y+17	; 0x11
     772:	3a 89       	ldd	r19, Y+18	; 0x12
     774:	4b 89       	ldd	r20, Y+19	; 0x13
     776:	5c 89       	ldd	r21, Y+20	; 0x14
     778:	c5 01       	movw	r24, r10
     77a:	b4 01       	movw	r22, r8
     77c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__mulsf3>
     780:	4b 01       	movw	r8, r22
     782:	5c 01       	movw	r10, r24
     784:	a3 01       	movw	r20, r6
     786:	92 01       	movw	r18, r4
     788:	c7 01       	movw	r24, r14
     78a:	b6 01       	movw	r22, r12
     78c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__mulsf3>
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
     794:	c5 01       	movw	r24, r10
     796:	b4 01       	movw	r22, r8
     798:	0e 94 47 0a 	call	0x148e	; 0x148e <__addsf3>
     79c:	0e 94 98 0b 	call	0x1730	; 0x1730 <__fixsfsi>
     7a0:	f8 01       	movw	r30, r16
     7a2:	73 83       	std	Z+3, r23	; 0x03
     7a4:	62 83       	std	Z+2, r22	; 0x02
     7a6:	c8 01       	movw	r24, r16
     7a8:	a8 96       	adiw	r28, 0x28	; 40
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	bf 90       	pop	r11
     7c6:	af 90       	pop	r10
     7c8:	9f 90       	pop	r9
     7ca:	8f 90       	pop	r8
     7cc:	7f 90       	pop	r7
     7ce:	6f 90       	pop	r6
     7d0:	5f 90       	pop	r5
     7d2:	4f 90       	pop	r4
     7d4:	3f 90       	pop	r3
     7d6:	2f 90       	pop	r2
     7d8:	08 95       	ret

000007da <localization_calc>:
     7da:	cf 92       	push	r12
     7dc:	df 92       	push	r13
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	68 97       	sbiw	r28, 0x18	; 24
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	fc 01       	movw	r30, r24
     7fc:	0d b7       	in	r16, 0x3d	; 61
     7fe:	1e b7       	in	r17, 0x3e	; 62
     800:	80 81       	ld	r24, Z
     802:	91 81       	ldd	r25, Z+1	; 0x01
     804:	9a 83       	std	Y+2, r25	; 0x02
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	80 85       	ldd	r24, Z+8	; 0x08
     80a:	91 85       	ldd	r25, Z+9	; 0x09
     80c:	9c 83       	std	Y+4, r25	; 0x04
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	82 81       	ldd	r24, Z+2	; 0x02
     812:	93 81       	ldd	r25, Z+3	; 0x03
     814:	9e 83       	std	Y+6, r25	; 0x06
     816:	8d 83       	std	Y+5, r24	; 0x05
     818:	82 85       	ldd	r24, Z+10	; 0x0a
     81a:	93 85       	ldd	r25, Z+11	; 0x0b
     81c:	98 87       	std	Y+8, r25	; 0x08
     81e:	8f 83       	std	Y+7, r24	; 0x07
     820:	84 81       	ldd	r24, Z+4	; 0x04
     822:	95 81       	ldd	r25, Z+5	; 0x05
     824:	9a 87       	std	Y+10, r25	; 0x0a
     826:	89 87       	std	Y+9, r24	; 0x09
     828:	84 85       	ldd	r24, Z+12	; 0x0c
     82a:	95 85       	ldd	r25, Z+13	; 0x0d
     82c:	9c 87       	std	Y+12, r25	; 0x0c
     82e:	8b 87       	std	Y+11, r24	; 0x0b
     830:	86 81       	ldd	r24, Z+6	; 0x06
     832:	97 81       	ldd	r25, Z+7	; 0x07
     834:	9e 87       	std	Y+14, r25	; 0x0e
     836:	8d 87       	std	Y+13, r24	; 0x0d
     838:	86 85       	ldd	r24, Z+14	; 0x0e
     83a:	97 85       	ldd	r25, Z+15	; 0x0f
     83c:	98 8b       	std	Y+16, r25	; 0x10
     83e:	8f 87       	std	Y+15, r24	; 0x0f
     840:	ae 01       	movw	r20, r28
     842:	4f 5f       	subi	r20, 0xFF	; 255
     844:	5f 4f       	sbci	r21, 0xFF	; 255
     846:	7a 01       	movw	r14, r20
     848:	40 5f       	subi	r20, 0xF0	; 240
     84a:	5f 4f       	sbci	r21, 0xFF	; 255
     84c:	f7 01       	movw	r30, r14
     84e:	6f ef       	ldi	r22, 0xFF	; 255
     850:	73 e0       	ldi	r23, 0x03	; 3
     852:	0c c0       	rjmp	.+24     	; 0x86c <localization_calc+0x92>
     854:	d9 01       	movw	r26, r18
     856:	11 96       	adiw	r26, 0x01	; 1
     858:	7c 93       	st	X, r23
     85a:	6e 93       	st	-X, r22
     85c:	13 96       	adiw	r26, 0x03	; 3
     85e:	7c 93       	st	X, r23
     860:	6e 93       	st	-X, r22
     862:	12 97       	sbiw	r26, 0x02	; 2
     864:	34 96       	adiw	r30, 0x04	; 4
     866:	e4 17       	cp	r30, r20
     868:	f5 07       	cpc	r31, r21
     86a:	61 f0       	breq	.+24     	; 0x884 <localization_calc+0xaa>
     86c:	9f 01       	movw	r18, r30
     86e:	80 81       	ld	r24, Z
     870:	91 81       	ldd	r25, Z+1	; 0x01
     872:	8f 3f       	cpi	r24, 0xFF	; 255
     874:	93 40       	sbci	r25, 0x03	; 3
     876:	71 f3       	breq	.-36     	; 0x854 <localization_calc+0x7a>
     878:	82 81       	ldd	r24, Z+2	; 0x02
     87a:	93 81       	ldd	r25, Z+3	; 0x03
     87c:	8f 3f       	cpi	r24, 0xFF	; 255
     87e:	93 40       	sbci	r25, 0x03	; 3
     880:	89 f7       	brne	.-30     	; 0x864 <localization_calc+0x8a>
     882:	e8 cf       	rjmp	.-48     	; 0x854 <localization_calc+0x7a>
     884:	fe 01       	movw	r30, r28
     886:	71 96       	adiw	r30, 0x11	; 17
     888:	88 e0       	ldi	r24, 0x08	; 8
     88a:	df 01       	movw	r26, r30
     88c:	1d 92       	st	X+, r1
     88e:	8a 95       	dec	r24
     890:	e9 f7       	brne	.-6      	; 0x88c <localization_calc+0xb2>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	f7 01       	movw	r30, r14
     89c:	40 81       	ld	r20, Z
     89e:	51 81       	ldd	r21, Z+1	; 0x01
     8a0:	4f 3f       	cpi	r20, 0xFF	; 255
     8a2:	53 40       	sbci	r21, 0x03	; 3
     8a4:	71 f0       	breq	.+28     	; 0x8c2 <localization_calc+0xe8>
     8a6:	f9 01       	movw	r30, r18
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	cc 24       	eor	r12, r12
     8ae:	c3 94       	inc	r12
     8b0:	d1 2c       	mov	r13, r1
     8b2:	cc 0e       	add	r12, r28
     8b4:	dd 1e       	adc	r13, r29
     8b6:	ec 0d       	add	r30, r12
     8b8:	fd 1d       	adc	r31, r13
     8ba:	91 8b       	std	Z+17, r25	; 0x11
     8bc:	80 8b       	std	Z+16, r24	; 0x10
     8be:	2f 5f       	subi	r18, 0xFF	; 255
     8c0:	3f 4f       	sbci	r19, 0xFF	; 255
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	44 e0       	ldi	r20, 0x04	; 4
     8c6:	e4 0e       	add	r14, r20
     8c8:	f1 1c       	adc	r15, r1
     8ca:	84 30       	cpi	r24, 0x04	; 4
     8cc:	91 05       	cpc	r25, r1
     8ce:	29 f7       	brne	.-54     	; 0x89a <localization_calc+0xc0>
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <localization_calc+0xfe>
     8d6:	81 c0       	rjmp	.+258    	; 0x9da <localization_calc+0x200>
     8d8:	ed b6       	in	r14, 0x3d	; 61
     8da:	fe b6       	in	r15, 0x3e	; 62
     8dc:	b9 01       	movw	r22, r18
     8de:	66 0f       	add	r22, r22
     8e0:	77 1f       	adc	r23, r23
     8e2:	66 0f       	add	r22, r22
     8e4:	77 1f       	adc	r23, r23
     8e6:	8d b7       	in	r24, 0x3d	; 61
     8e8:	9e b7       	in	r25, 0x3e	; 62
     8ea:	86 1b       	sub	r24, r22
     8ec:	97 0b       	sbc	r25, r23
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	9e bf       	out	0x3e, r25	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	8d bf       	out	0x3d, r24	; 61
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	12 16       	cp	r1, r18
     8fc:	13 06       	cpc	r1, r19
     8fe:	34 f5       	brge	.+76     	; 0x94c <localization_calc+0x172>
     900:	ae 01       	movw	r20, r28
     902:	4f 5e       	subi	r20, 0xEF	; 239
     904:	5f 4f       	sbci	r21, 0xFF	; 255
     906:	dc 01       	movw	r26, r24
     908:	68 0f       	add	r22, r24
     90a:	79 1f       	adc	r23, r25
     90c:	fa 01       	movw	r30, r20
     90e:	c1 90       	ld	r12, Z+
     910:	d1 90       	ld	r13, Z+
     912:	af 01       	movw	r20, r30
     914:	f6 01       	movw	r30, r12
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	ee 0f       	add	r30, r30
     91c:	ff 1f       	adc	r31, r31
     91e:	cc 24       	eor	r12, r12
     920:	c3 94       	inc	r12
     922:	d1 2c       	mov	r13, r1
     924:	cc 0e       	add	r12, r28
     926:	dd 1e       	adc	r13, r29
     928:	ec 0d       	add	r30, r12
     92a:	fd 1d       	adc	r31, r13
     92c:	c0 80       	ld	r12, Z
     92e:	d1 80       	ldd	r13, Z+1	; 0x01
     930:	11 96       	adiw	r26, 0x01	; 1
     932:	dc 92       	st	X, r13
     934:	ce 92       	st	-X, r12
     936:	02 80       	ldd	r0, Z+2	; 0x02
     938:	f3 81       	ldd	r31, Z+3	; 0x03
     93a:	e0 2d       	mov	r30, r0
     93c:	13 96       	adiw	r26, 0x03	; 3
     93e:	fc 93       	st	X, r31
     940:	ee 93       	st	-X, r30
     942:	12 97       	sbiw	r26, 0x02	; 2
     944:	14 96       	adiw	r26, 0x04	; 4
     946:	a6 17       	cp	r26, r22
     948:	b7 07       	cpc	r27, r23
     94a:	01 f7       	brne	.-64     	; 0x90c <localization_calc+0x132>
     94c:	6e 9a       	sbi	0x0d, 6	; 13
     94e:	76 98       	cbi	0x0e, 6	; 14
     950:	22 30       	cpi	r18, 0x02	; 2
     952:	31 05       	cpc	r19, r1
     954:	c9 f0       	breq	.+50     	; 0x988 <localization_calc+0x1ae>
     956:	24 f4       	brge	.+8      	; 0x960 <localization_calc+0x186>
     958:	21 30       	cpi	r18, 0x01	; 1
     95a:	31 05       	cpc	r19, r1
     95c:	f9 f0       	breq	.+62     	; 0x99c <localization_calc+0x1c2>
     95e:	28 c0       	rjmp	.+80     	; 0x9b0 <localization_calc+0x1d6>
     960:	23 30       	cpi	r18, 0x03	; 3
     962:	31 05       	cpc	r19, r1
     964:	39 f0       	breq	.+14     	; 0x974 <localization_calc+0x19a>
     966:	24 30       	cpi	r18, 0x04	; 4
     968:	31 05       	cpc	r19, r1
     96a:	11 f5       	brne	.+68     	; 0x9b0 <localization_calc+0x1d6>
     96c:	0e 94 a4 01 	call	0x348	; 0x348 <fourPointCalc>
     970:	dc 01       	movw	r26, r24
     972:	20 c0       	rjmp	.+64     	; 0x9b4 <localization_calc+0x1da>
     974:	e8 e1       	ldi	r30, 0x18	; 24
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	93 e0       	ldi	r25, 0x03	; 3
     97c:	91 83       	std	Z+1, r25	; 0x01
     97e:	80 83       	st	Z, r24
     980:	93 83       	std	Z+3, r25	; 0x03
     982:	82 83       	std	Z+2, r24	; 0x02
     984:	df 01       	movw	r26, r30
     986:	16 c0       	rjmp	.+44     	; 0x9b4 <localization_calc+0x1da>
     988:	e4 e1       	ldi	r30, 0x14	; 20
     98a:	f1 e0       	ldi	r31, 0x01	; 1
     98c:	8f ef       	ldi	r24, 0xFF	; 255
     98e:	93 e0       	ldi	r25, 0x03	; 3
     990:	91 83       	std	Z+1, r25	; 0x01
     992:	80 83       	st	Z, r24
     994:	93 83       	std	Z+3, r25	; 0x03
     996:	82 83       	std	Z+2, r24	; 0x02
     998:	df 01       	movw	r26, r30
     99a:	0c c0       	rjmp	.+24     	; 0x9b4 <localization_calc+0x1da>
     99c:	e0 e1       	ldi	r30, 0x10	; 16
     99e:	f1 e0       	ldi	r31, 0x01	; 1
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	91 83       	std	Z+1, r25	; 0x01
     9a6:	80 83       	st	Z, r24
     9a8:	93 83       	std	Z+3, r25	; 0x03
     9aa:	82 83       	std	Z+2, r24	; 0x02
     9ac:	df 01       	movw	r26, r30
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <localization_calc+0x1da>
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b1 e0       	ldi	r27, 0x01	; 1
     9b4:	8d 91       	ld	r24, X+
     9b6:	9c 91       	ld	r25, X
     9b8:	11 97       	sbiw	r26, 0x01	; 1
     9ba:	e0 e2       	ldi	r30, 0x20	; 32
     9bc:	f1 e0       	ldi	r31, 0x01	; 1
     9be:	91 83       	std	Z+1, r25	; 0x01
     9c0:	80 83       	st	Z, r24
     9c2:	12 96       	adiw	r26, 0x02	; 2
     9c4:	8d 91       	ld	r24, X+
     9c6:	9c 91       	ld	r25, X
     9c8:	13 97       	sbiw	r26, 0x03	; 3
     9ca:	93 83       	std	Z+3, r25	; 0x03
     9cc:	82 83       	std	Z+2, r24	; 0x02
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	fe be       	out	0x3e, r15	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	ed be       	out	0x3d, r14	; 61
     9d8:	0a c0       	rjmp	.+20     	; 0x9ee <localization_calc+0x214>
     9da:	e0 e2       	ldi	r30, 0x20	; 32
     9dc:	f1 e0       	ldi	r31, 0x01	; 1
     9de:	8f ef       	ldi	r24, 0xFF	; 255
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	91 83       	std	Z+1, r25	; 0x01
     9e4:	80 83       	st	Z, r24
     9e6:	93 83       	std	Z+3, r25	; 0x03
     9e8:	82 83       	std	Z+2, r24	; 0x02
     9ea:	6e 9a       	sbi	0x0d, 6	; 13
     9ec:	76 9a       	sbi	0x0e, 6	; 14
     9ee:	80 e2       	ldi	r24, 0x20	; 32
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	1e bf       	out	0x3e, r17	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0d bf       	out	0x3d, r16	; 61
     9fc:	68 96       	adiw	r28, 0x18	; 24
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	08 95       	ret

00000a1a <init>:
}


void init() 
{
	m_red(ON);
     a1a:	6e 9a       	sbi	0x0d, 6	; 13
     a1c:	76 98       	cbi	0x0e, 6	; 14
	while(!m_wii_open());
     a1e:	0e 94 92 08 	call	0x1124	; 0x1124 <m_wii_open>
     a22:	88 23       	and	r24, r24
     a24:	e1 f3       	breq	.-8      	; 0xa1e <init+0x4>
	m_red(OFF);
     a26:	6e 9a       	sbi	0x0d, 6	; 13
     a28:	76 9a       	sbi	0x0e, 6	; 14
	
	m_usb_init();
     a2a:	0e 94 93 05 	call	0xb26	; 0xb26 <m_usb_init>
     a2e:	08 95       	ret

00000a30 <main>:
#include "localization_function.h"

void init(); 

int main(void)
{	
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	ac 97       	sbiw	r28, 0x2c	; 44
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
	m_clockdivide(0);
     a44:	e1 e6       	ldi	r30, 0x61	; 97
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	80 83       	st	Z, r24
     a4c:	10 82       	st	Z, r1
	
	init();
     a4e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <init>
	m_green(ON);
     a52:	6a 9a       	sbi	0x0d, 2	; 13
     a54:	72 98       	cbi	0x0e, 2	; 14
	unsigned int blobs[12];
	char rx_buffer;

	int robotCenterPrev[2] = {1023, 1023};
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	93 e0       	ldi	r25, 0x03	; 3
     a5a:	9a 8f       	std	Y+26, r25	; 0x1a
     a5c:	89 8f       	std	Y+25, r24	; 0x19
     a5e:	9c 8f       	std	Y+28, r25	; 0x1c
     a60:	8b 8f       	std	Y+27, r24	; 0x1b
		
		m_usb_rx_flush();  						// Flush the buffer
		
		if(rx_buffer == 1)						// MATLAB is expecting IMU data
		{
			m_red(TOGGLE);
     a62:	68 94       	set
     a64:	ff 24       	eor	r15, r15
     a66:	f6 f8       	bld	r15, 6
	int* robotCenter;
	
    while (1) 
    {
		
		m_wii_read(blobs);
     a68:	ce 01       	movw	r24, r28
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	0e 94 b3 09 	call	0x1366	; 0x1366 <m_wii_read>
		unsigned int x1 = blobs[0];
		unsigned int y1 = blobs[1];
     a70:	6b 81       	ldd	r22, Y+3	; 0x03
     a72:	7c 81       	ldd	r23, Y+4	; 0x04
		unsigned int x2 = blobs[3];
     a74:	0f 81       	ldd	r16, Y+7	; 0x07
     a76:	18 85       	ldd	r17, Y+8	; 0x08
		unsigned int y2 = blobs[4];
     a78:	49 85       	ldd	r20, Y+9	; 0x09
     a7a:	5a 85       	ldd	r21, Y+10	; 0x0a
		unsigned int x3 = blobs[6];
     a7c:	ad 85       	ldd	r26, Y+13	; 0x0d
     a7e:	be 85       	ldd	r27, Y+14	; 0x0e
		unsigned int y3 = blobs[7];
     a80:	2f 85       	ldd	r18, Y+15	; 0x0f
     a82:	38 89       	ldd	r19, Y+16	; 0x10
		unsigned int x4 = blobs[9];
     a84:	eb 89       	ldd	r30, Y+19	; 0x13
     a86:	fc 89       	ldd	r31, Y+20	; 0x14
		unsigned int y4 = blobs[10];
     a88:	8d 89       	ldd	r24, Y+21	; 0x15
     a8a:	9e 89       	ldd	r25, Y+22	; 0x16
		
		int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
     a8c:	c9 80       	ldd	r12, Y+1	; 0x01
     a8e:	da 80       	ldd	r13, Y+2	; 0x02
     a90:	de 8e       	std	Y+30, r13	; 0x1e
     a92:	cd 8e       	std	Y+29, r12	; 0x1d
     a94:	18 a3       	std	Y+32, r17	; 0x20
     a96:	0f 8f       	std	Y+31, r16	; 0x1f
     a98:	ba a3       	std	Y+34, r27	; 0x22
     a9a:	a9 a3       	std	Y+33, r26	; 0x21
     a9c:	fc a3       	std	Y+36, r31	; 0x24
     a9e:	eb a3       	std	Y+35, r30	; 0x23
     aa0:	7e a3       	std	Y+38, r23	; 0x26
     aa2:	6d a3       	std	Y+37, r22	; 0x25
     aa4:	58 a7       	std	Y+40, r21	; 0x28
     aa6:	4f a3       	std	Y+39, r20	; 0x27
     aa8:	3a a7       	std	Y+42, r19	; 0x2a
     aaa:	29 a7       	std	Y+41, r18	; 0x29
     aac:	9c a7       	std	Y+44, r25	; 0x2c
     aae:	8b a7       	std	Y+43, r24	; 0x2b
		robotCenter = localization_calc(rawStarData, robotCenterPrev);
     ab0:	be 01       	movw	r22, r28
     ab2:	67 5e       	subi	r22, 0xE7	; 231
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255
     ab6:	ce 01       	movw	r24, r28
     ab8:	4d 96       	adiw	r24, 0x1d	; 29
     aba:	0e 94 ed 03 	call	0x7da	; 0x7da <localization_calc>
     abe:	6c 01       	movw	r12, r24
		//m_usb_tx_string("Hey Pete!");

		
		
 		while(!m_usb_rx_available());  			// Wait for an indication from the computer
     ac0:	0e 94 ca 05 	call	0xb94	; 0xb94 <m_usb_rx_available>
     ac4:	88 23       	and	r24, r24
     ac6:	e1 f3       	breq	.-8      	; 0xac0 <main+0x90>
		rx_buffer = m_usb_rx_char();  			// Read the packet from the computer
     ac8:	0e 94 ac 05 	call	0xb58	; 0xb58 <m_usb_rx_char>
     acc:	18 2f       	mov	r17, r24
		
		m_usb_rx_flush();  						// Flush the buffer
     ace:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <m_usb_rx_flush>
		
		if(rx_buffer == 1)						// MATLAB is expecting IMU data
     ad2:	11 30       	cpi	r17, 0x01	; 1
     ad4:	49 f6       	brne	.-110    	; 0xa68 <main+0x38>
		{
			m_red(TOGGLE);
     ad6:	6e 9a       	sbi	0x0d, 6	; 13
     ad8:	8e b1       	in	r24, 0x0e	; 14
     ada:	8f 25       	eor	r24, r15
     adc:	8e b9       	out	0x0e, r24	; 14
			m_usb_tx_int((int)robotCenter[0]);
     ade:	f6 01       	movw	r30, r12
     ae0:	80 81       	ld	r24, Z
     ae2:	91 81       	ldd	r25, Z+1	; 0x01
     ae4:	0e 94 27 08 	call	0x104e	; 0x104e <m_usb_tx_int>
			m_usb_tx_string(" ");
     ae8:	8a ef       	ldi	r24, 0xFA	; 250
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 0b 08 	call	0x1016	; 0x1016 <print_P>
			m_usb_tx_int((int)robotCenter[1]);
     af0:	f6 01       	movw	r30, r12
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	0e 94 27 08 	call	0x104e	; 0x104e <m_usb_tx_int>
			m_usb_tx_string("\n");
     afa:	88 ef       	ldi	r24, 0xF8	; 248
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 0b 08 	call	0x1016	; 0x1016 <print_P>

		}
		
		
    }
     b02:	b2 cf       	rjmp	.-156    	; 0xa68 <main+0x38>

00000b04 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     b04:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     b06:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     b08:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     b0a:	8c e0       	ldi	r24, 0x0C	; 12
     b0c:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     b10:	e9 e6       	ldi	r30, 0x69	; 105
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	80 62       	ori	r24, 0x20	; 32
     b18:	80 83       	st	Z, r24
     b1a:	80 81       	ld	r24, Z
     b1c:	8f 7e       	andi	r24, 0xEF	; 239
     b1e:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     b20:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     b22:	78 94       	sei
     b24:	08 95       	ret

00000b26 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     b2c:	80 ea       	ldi	r24, 0xA0	; 160
     b2e:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     b32:	82 e1       	ldi	r24, 0x12	; 18
     b34:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     b36:	09 b4       	in	r0, 0x29	; 41
     b38:	00 fe       	sbrs	r0, 0
     b3a:	fd cf       	rjmp	.-6      	; 0xb36 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     b3c:	80 e9       	ldi	r24, 0x90	; 144
     b3e:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     b42:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     b46:	10 92 27 01 	sts	0x0127, r1
	cdc_line_rtsdtr = 0;
     b4a:	10 92 24 01 	sts	0x0124, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     b4e:	8c e0       	ldi	r24, 0x0C	; 12
     b50:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     b54:	78 94       	sei
     b56:	08 95       	ret

00000b58 <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     b58:	9f b7       	in	r25, 0x3f	; 63
	cli();
     b5a:	f8 94       	cli
	if (!usb_configuration) {
     b5c:	80 91 27 01 	lds	r24, 0x0127
     b60:	81 11       	cpse	r24, r1
     b62:	03 c0       	rjmp	.+6      	; 0xb6a <m_usb_rx_char+0x12>
		SREG = intr_state;
     b64:	9f bf       	out	0x3f, r25	; 63
		return -1;
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
     b70:	80 91 e8 00 	lds	r24, 0x00E8
     b74:	85 fd       	sbrc	r24, 5
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
     b78:	9f bf       	out	0x3f, r25	; 63
		return -1;
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
     b7e:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     b82:	20 91 e8 00 	lds	r18, 0x00E8
     b86:	25 fd       	sbrc	r18, 5
     b88:	03 c0       	rjmp	.+6      	; 0xb90 <m_usb_rx_char+0x38>
     b8a:	2b e6       	ldi	r18, 0x6B	; 107
     b8c:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
     b90:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
     b92:	08 95       	ret

00000b94 <m_usb_rx_available>:
// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;

	intr_state = SREG;
     b94:	9f b7       	in	r25, 0x3f	; 63
	cli();
     b96:	f8 94       	cli
	if (usb_configuration) {
     b98:	80 91 27 01 	lds	r24, 0x0127
     b9c:	88 23       	and	r24, r24
     b9e:	31 f0       	breq	.+12     	; 0xbac <m_usb_rx_available+0x18>
		UENUM = CDC_RX_ENDPOINT;
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
     ba6:	80 91 f2 00 	lds	r24, 0x00F2
     baa:	01 c0       	rjmp	.+2      	; 0xbae <m_usb_rx_available+0x1a>
}

// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;
     bac:	80 e0       	ldi	r24, 0x00	; 0
	cli();
	if (usb_configuration) {
		UENUM = CDC_RX_ENDPOINT;
		n = UEBCLX;
	}
	SREG = intr_state;
     bae:	9f bf       	out	0x3f, r25	; 63
	return (unsigned char)n;
}
     bb0:	08 95       	ret

00000bb2 <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
     bb2:	80 91 27 01 	lds	r24, 0x0127
     bb6:	88 23       	and	r24, r24
     bb8:	89 f0       	breq	.+34     	; 0xbdc <m_usb_rx_flush+0x2a>
		intr_state = SREG;
     bba:	2f b7       	in	r18, 0x3f	; 63
		cli();
     bbc:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
     bc4:	80 91 e8 00 	lds	r24, 0x00E8
     bc8:	85 ff       	sbrs	r24, 5
     bca:	07 c0       	rjmp	.+14     	; 0xbda <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
     bcc:	e8 ee       	ldi	r30, 0xE8	; 232
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	9b e6       	ldi	r25, 0x6B	; 107
     bd2:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     bd4:	80 81       	ld	r24, Z
     bd6:	85 fd       	sbrc	r24, 5
     bd8:	fc cf       	rjmp	.-8      	; 0xbd2 <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     bda:	2f bf       	out	0x3f, r18	; 63
     bdc:	08 95       	ret

00000bde <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     be2:	90 91 27 01 	lds	r25, 0x0127
     be6:	99 23       	and	r25, r25
     be8:	09 f4       	brne	.+2      	; 0xbec <m_usb_tx_char+0xe>
     bea:	4c c0       	rjmp	.+152    	; 0xc84 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     bec:	9f b7       	in	r25, 0x3f	; 63
	cli();
     bee:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     bf0:	24 e0       	ldi	r18, 0x04	; 4
     bf2:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     bf6:	20 91 25 01 	lds	r18, 0x0125
     bfa:	22 23       	and	r18, r18
     bfc:	49 f0       	breq	.+18     	; 0xc10 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
     bfe:	20 91 e8 00 	lds	r18, 0x00E8
     c02:	25 fd       	sbrc	r18, 5
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <m_usb_tx_char+0x2e>
			SREG = intr_state;
     c06:	9f bf       	out	0x3f, r25	; 63
			return -1;
     c08:	8f ef       	ldi	r24, 0xFF	; 255
     c0a:	41 c0       	rjmp	.+130    	; 0xc8e <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
     c0c:	10 92 25 01 	sts	0x0125, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     c10:	30 91 e4 00 	lds	r19, 0x00E4
     c14:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     c16:	20 91 e8 00 	lds	r18, 0x00E8
     c1a:	25 fd       	sbrc	r18, 5
     c1c:	24 c0       	rjmp	.+72     	; 0xc66 <m_usb_tx_char+0x88>
		SREG = intr_state;
     c1e:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     c20:	90 91 e4 00 	lds	r25, 0x00E4
     c24:	93 17       	cp	r25, r19
     c26:	81 f0       	breq	.+32     	; 0xc48 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     c28:	90 91 27 01 	lds	r25, 0x0127
     c2c:	99 23       	and	r25, r25
     c2e:	61 f1       	breq	.+88     	; 0xc88 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     c30:	a9 ee       	ldi	r26, 0xE9	; 233
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     c36:	e8 ee       	ldi	r30, 0xE8	; 232
     c38:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     c3a:	c4 ee       	ldi	r28, 0xE4	; 228
     c3c:	d0 e0       	ldi	r29, 0x00	; 0
     c3e:	0d c0       	rjmp	.+26     	; 0xc5a <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     c40:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     c42:	98 81       	ld	r25, Y
     c44:	93 13       	cpse	r25, r19
     c46:	05 c0       	rjmp	.+10     	; 0xc52 <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	80 93 25 01 	sts	0x0125, r24
			return -1;
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	1e c0       	rjmp	.+60     	; 0xc8e <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     c52:	90 91 27 01 	lds	r25, 0x0127
     c56:	99 23       	and	r25, r25
     c58:	c9 f0       	breq	.+50     	; 0xc8c <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
     c5a:	9f b7       	in	r25, 0x3f	; 63
		cli();
     c5c:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     c5e:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     c60:	20 81       	ld	r18, Z
     c62:	25 ff       	sbrs	r18, 5
     c64:	ed cf       	rjmp	.-38     	; 0xc40 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     c66:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     c6a:	80 91 e8 00 	lds	r24, 0x00E8
     c6e:	85 fd       	sbrc	r24, 5
     c70:	03 c0       	rjmp	.+6      	; 0xc78 <m_usb_tx_char+0x9a>
     c72:	8a e3       	ldi	r24, 0x3A	; 58
     c74:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     c78:	85 e0       	ldi	r24, 0x05	; 5
     c7a:	80 93 26 01 	sts	0x0126, r24
	SREG = intr_state;
     c7e:	9f bf       	out	0x3f, r25	; 63
	return 0;
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	05 c0       	rjmp	.+10     	; 0xc8e <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     c84:	8f ef       	ldi	r24, 0xFF	; 255
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     c88:	8f ef       	ldi	r24, 0xFF	; 255
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <m_usb_tx_char+0xb0>
     c8c:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     c94:	1f 92       	push	r1
     c96:	0f 92       	push	r0
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	8f 93       	push	r24
     ca0:	9f 93       	push	r25
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     ca6:	e1 ee       	ldi	r30, 0xE1	; 225
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
        UDINT = 0;
     cac:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
     cae:	83 ff       	sbrs	r24, 3
     cb0:	11 c0       	rjmp	.+34     	; 0xcd4 <__vector_10+0x40>
		UENUM = 0;
     cb2:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
     cbc:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     cc0:	92 e1       	ldi	r25, 0x12	; 18
     cc2:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
     cc6:	98 e0       	ldi	r25, 0x08	; 8
     cc8:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
     ccc:	10 92 27 01 	sts	0x0127, r1
		cdc_line_rtsdtr = 0;
     cd0:	10 92 24 01 	sts	0x0124, r1
        }
	if (intbits & (1<<SOFI)) {
     cd4:	82 ff       	sbrs	r24, 2
     cd6:	13 c0       	rjmp	.+38     	; 0xcfe <__vector_10+0x6a>
		if (usb_configuration) {
     cd8:	80 91 27 01 	lds	r24, 0x0127
     cdc:	88 23       	and	r24, r24
     cde:	79 f0       	breq	.+30     	; 0xcfe <__vector_10+0x6a>
			t = transmit_flush_timer;
     ce0:	80 91 26 01 	lds	r24, 0x0126
			if (t) {
     ce4:	88 23       	and	r24, r24
     ce6:	59 f0       	breq	.+22     	; 0xcfe <__vector_10+0x6a>
				transmit_flush_timer = --t;
     ce8:	81 50       	subi	r24, 0x01	; 1
     cea:	80 93 26 01 	sts	0x0126, r24
				if (!t) {
     cee:	81 11       	cpse	r24, r1
     cf0:	06 c0       	rjmp	.+12     	; 0xcfe <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
     cf2:	84 e0       	ldi	r24, 0x04	; 4
     cf4:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     cf8:	8a e3       	ldi	r24, 0x3A	; 58
     cfa:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	9f 91       	pop	r25
     d04:	8f 91       	pop	r24
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	5f 93       	push	r21
     d26:	6f 93       	push	r22
     d28:	7f 93       	push	r23
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	af 93       	push	r26
     d30:	bf 93       	push	r27
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	ef 93       	push	r30
     d38:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     d3a:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     d3e:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     d42:	83 ff       	sbrs	r24, 3
     d44:	4c c1       	rjmp	.+664    	; 0xfde <__vector_11+0x2ce>
                bmRequestType = UEDATX;
     d46:	e1 ef       	ldi	r30, 0xF1	; 241
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	60 81       	ld	r22, Z
                bRequest = UEDATX;
     d4c:	80 81       	ld	r24, Z
                wValue = UEDATX;
     d4e:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
     d50:	90 81       	ld	r25, Z
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	39 2b       	or	r19, r25
                wIndex = UEDATX;
     d56:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
     d58:	90 81       	ld	r25, Z
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	59 2b       	or	r21, r25
                wLength = UEDATX;
     d5e:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
     d60:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     d62:	92 ef       	ldi	r25, 0xF2	; 242
     d64:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
     d68:	86 30       	cpi	r24, 0x06	; 6
     d6a:	09 f0       	breq	.+2      	; 0xd6e <__vector_11+0x5e>
     d6c:	58 c0       	rjmp	.+176    	; 0xe1e <__vector_11+0x10e>
     d6e:	04 c0       	rjmp	.+8      	; 0xd78 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
     d70:	81 e2       	ldi	r24, 0x21	; 33
     d72:	80 93 eb 00 	sts	0x00EB, r24
					return;
     d76:	3a c1       	rjmp	.+628    	; 0xfec <__vector_11+0x2dc>
     d78:	66 e0       	ldi	r22, 0x06	; 6
     d7a:	8c ef       	ldi	r24, 0xFC	; 252
     d7c:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
     d7e:	fc 01       	movw	r30, r24
     d80:	a5 91       	lpm	r26, Z+
     d82:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
     d84:	2a 17       	cp	r18, r26
     d86:	3b 07       	cpc	r19, r27
     d88:	11 f0       	breq	.+4      	; 0xd8e <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
     d8a:	07 96       	adiw	r24, 0x07	; 7
					continue;
     d8c:	23 c0       	rjmp	.+70     	; 0xdd4 <__vector_11+0xc4>
				}
				list += 2;
     d8e:	fc 01       	movw	r30, r24
     d90:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
     d92:	a5 91       	lpm	r26, Z+
     d94:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
     d96:	4a 17       	cp	r20, r26
     d98:	5b 07       	cpc	r21, r27
     d9a:	11 f0       	breq	.+4      	; 0xda0 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
     d9c:	07 96       	adiw	r24, 0x07	; 7
					continue;
     d9e:	1a c0       	rjmp	.+52     	; 0xdd4 <__vector_11+0xc4>
				}
				list += 2;
     da0:	fc 01       	movw	r30, r24
     da2:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
     da4:	45 91       	lpm	r20, Z+
     da6:	54 91       	lpm	r21, Z
				list += 2;
     da8:	fc 01       	movw	r30, r24
     daa:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
     dac:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
     dae:	87 2f       	mov	r24, r23
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     db4:	8f 3f       	cpi	r24, 0xFF	; 255
     db6:	91 05       	cpc	r25, r1
     db8:	19 f0       	breq	.+6      	; 0xdc0 <__vector_11+0xb0>
     dba:	10 f0       	brcs	.+4      	; 0xdc0 <__vector_11+0xb0>
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	82 17       	cp	r24, r18
     dc2:	08 f4       	brcc	.+2      	; 0xdc6 <__vector_11+0xb6>
     dc4:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     dc6:	a8 ee       	ldi	r26, 0xE8	; 232
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     dca:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     dcc:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
     dce:	c1 ef       	ldi	r28, 0xF1	; 241
     dd0:	d0 e0       	ldi	r29, 0x00	; 0
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <__vector_11+0xca>
     dd4:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     dd6:	99 f6       	brne	.-90     	; 0xd7e <__vector_11+0x6e>
     dd8:	cb cf       	rjmp	.-106    	; 0xd70 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     dda:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     ddc:	98 2f       	mov	r25, r24
     dde:	95 70       	andi	r25, 0x05	; 5
     de0:	e1 f3       	breq	.-8      	; 0xdda <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
     de2:	82 fd       	sbrc	r24, 2
     de4:	03 c1       	rjmp	.+518    	; 0xfec <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     de6:	32 2f       	mov	r19, r18
     de8:	21 31       	cpi	r18, 0x11	; 17
     dea:	08 f0       	brcs	.+2      	; 0xdee <__vector_11+0xde>
     dec:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
     dee:	33 23       	and	r19, r19
     df0:	09 f4       	brne	.+2      	; 0xdf4 <__vector_11+0xe4>
     df2:	f9 c0       	rjmp	.+498    	; 0xfe6 <__vector_11+0x2d6>
     df4:	fa 01       	movw	r30, r20
     df6:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
     df8:	94 91       	lpm	r25, Z
     dfa:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     dfc:	81 50       	subi	r24, 0x01	; 1
     dfe:	31 96       	adiw	r30, 0x01	; 1
     e00:	81 11       	cpse	r24, r1
     e02:	fa cf       	rjmp	.-12     	; 0xdf8 <__vector_11+0xe8>
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	83 0f       	add	r24, r19
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	48 0f       	add	r20, r24
     e0e:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     e10:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e12:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     e14:	21 11       	cpse	r18, r1
     e16:	e1 cf       	rjmp	.-62     	; 0xdda <__vector_11+0xca>
     e18:	30 31       	cpi	r19, 0x10	; 16
     e1a:	f9 f2       	breq	.-66     	; 0xdda <__vector_11+0xca>
     e1c:	e7 c0       	rjmp	.+462    	; 0xfec <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     e1e:	85 30       	cpi	r24, 0x05	; 5
     e20:	61 f4       	brne	.+24     	; 0xe3a <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e22:	8e ef       	ldi	r24, 0xFE	; 254
     e24:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     e28:	e8 ee       	ldi	r30, 0xE8	; 232
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 ff       	sbrs	r24, 0
     e30:	fd cf       	rjmp	.-6      	; 0xe2c <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     e32:	20 68       	ori	r18, 0x80	; 128
     e34:	20 93 e3 00 	sts	0x00E3, r18
			return;
     e38:	d9 c0       	rjmp	.+434    	; 0xfec <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     e3a:	89 30       	cpi	r24, 0x09	; 9
     e3c:	09 f0       	breq	.+2      	; 0xe40 <__vector_11+0x130>
     e3e:	35 c0       	rjmp	.+106    	; 0xeaa <__vector_11+0x19a>
     e40:	61 11       	cpse	r22, r1
     e42:	cd c0       	rjmp	.+410    	; 0xfde <__vector_11+0x2ce>
			usb_configuration = wValue;
     e44:	20 93 27 01 	sts	0x0127, r18
			cdc_line_rtsdtr = 0;
     e48:	10 92 24 01 	sts	0x0124, r1
			transmit_flush_timer = 0;
     e4c:	10 92 26 01 	sts	0x0126, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e50:	8e ef       	ldi	r24, 0xFE	; 254
     e52:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     e56:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     e58:	25 ea       	ldi	r18, 0xA5	; 165
     e5a:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
     e5c:	c9 ee       	ldi	r28, 0xE9	; 233
     e5e:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
     e60:	ab ee       	ldi	r26, 0xEB	; 235
     e62:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
     e64:	0c ee       	ldi	r16, 0xEC	; 236
     e66:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
     e68:	6d ee       	ldi	r22, 0xED	; 237
     e6a:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     e6c:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
     e6e:	a9 01       	movw	r20, r18
     e70:	4f 5f       	subi	r20, 0xFF	; 255
     e72:	5f 4f       	sbci	r21, 0xFF	; 255
     e74:	f9 01       	movw	r30, r18
     e76:	94 91       	lpm	r25, Z
				UECONX = en;
     e78:	9c 93       	st	X, r25
				if (en) {
     e7a:	99 23       	and	r25, r25
     e7c:	61 f0       	breq	.+24     	; 0xe96 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
     e7e:	fa 01       	movw	r30, r20
     e80:	44 91       	lpm	r20, Z
     e82:	f8 01       	movw	r30, r16
     e84:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
     e86:	f9 01       	movw	r30, r18
     e88:	32 96       	adiw	r30, 0x02	; 2
     e8a:	94 91       	lpm	r25, Z
     e8c:	2d 5f       	subi	r18, 0xFD	; 253
     e8e:	3f 4f       	sbci	r19, 0xFF	; 255
     e90:	fb 01       	movw	r30, r22
     e92:	90 83       	st	Z, r25
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
     e96:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     e98:	8f 5f       	subi	r24, 0xFF	; 255
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	39 f7       	brne	.-50     	; 0xe6c <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     e9e:	ea ee       	ldi	r30, 0xEA	; 234
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	8e e1       	ldi	r24, 0x1E	; 30
     ea4:	80 83       	st	Z, r24
        		UERST = 0;
     ea6:	10 82       	st	Z, r1
			return;
     ea8:	a1 c0       	rjmp	.+322    	; 0xfec <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     eaa:	88 30       	cpi	r24, 0x08	; 8
     eac:	81 f4       	brne	.+32     	; 0xece <__vector_11+0x1be>
     eae:	60 38       	cpi	r22, 0x80	; 128
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <__vector_11+0x1a4>
     eb2:	95 c0       	rjmp	.+298    	; 0xfde <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     eb4:	e8 ee       	ldi	r30, 0xE8	; 232
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	80 ff       	sbrs	r24, 0
     ebc:	fd cf       	rjmp	.-6      	; 0xeb8 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     ebe:	80 91 27 01 	lds	r24, 0x0127
     ec2:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     ec6:	8e ef       	ldi	r24, 0xFE	; 254
     ec8:	80 93 e8 00 	sts	0x00E8, r24
     ecc:	8f c0       	rjmp	.+286    	; 0xfec <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
     ece:	81 32       	cpi	r24, 0x21	; 33
     ed0:	b9 f4       	brne	.+46     	; 0xf00 <__vector_11+0x1f0>
     ed2:	61 3a       	cpi	r22, 0xA1	; 161
     ed4:	09 f0       	breq	.+2      	; 0xed8 <__vector_11+0x1c8>
     ed6:	83 c0       	rjmp	.+262    	; 0xfde <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     ed8:	e8 ee       	ldi	r30, 0xE8	; 232
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	80 ff       	sbrs	r24, 0
     ee0:	fd cf       	rjmp	.-6      	; 0xedc <__vector_11+0x1cc>
     ee2:	e4 e0       	ldi	r30, 0x04	; 4
     ee4:	f1 e0       	ldi	r31, 0x01	; 1
     ee6:	2b e0       	ldi	r18, 0x0B	; 11
     ee8:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     eea:	a1 ef       	ldi	r26, 0xF1	; 241
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	81 91       	ld	r24, Z+
     ef0:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     ef2:	e2 17       	cp	r30, r18
     ef4:	f3 07       	cpc	r31, r19
     ef6:	d9 f7       	brne	.-10     	; 0xeee <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     ef8:	8e ef       	ldi	r24, 0xFE	; 254
     efa:	80 93 e8 00 	sts	0x00E8, r24
     efe:	76 c0       	rjmp	.+236    	; 0xfec <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
     f00:	80 32       	cpi	r24, 0x20	; 32
     f02:	d1 f4       	brne	.+52     	; 0xf38 <__vector_11+0x228>
     f04:	61 32       	cpi	r22, 0x21	; 33
     f06:	09 f0       	breq	.+2      	; 0xf0a <__vector_11+0x1fa>
     f08:	6a c0       	rjmp	.+212    	; 0xfde <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     f0a:	e8 ee       	ldi	r30, 0xE8	; 232
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	82 ff       	sbrs	r24, 2
     f12:	fd cf       	rjmp	.-6      	; 0xf0e <__vector_11+0x1fe>
     f14:	e4 e0       	ldi	r30, 0x04	; 4
     f16:	f1 e0       	ldi	r31, 0x01	; 1
     f18:	2b e0       	ldi	r18, 0x0B	; 11
     f1a:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     f1c:	a1 ef       	ldi	r26, 0xF1	; 241
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	8c 91       	ld	r24, X
     f22:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     f24:	e2 17       	cp	r30, r18
     f26:	f3 07       	cpc	r31, r19
     f28:	d9 f7       	brne	.-10     	; 0xf20 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     f2a:	e8 ee       	ldi	r30, 0xE8	; 232
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	8b ef       	ldi	r24, 0xFB	; 251
     f30:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f32:	8e ef       	ldi	r24, 0xFE	; 254
     f34:	80 83       	st	Z, r24
     f36:	5a c0       	rjmp	.+180    	; 0xfec <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
     f38:	82 32       	cpi	r24, 0x22	; 34
     f3a:	71 f4       	brne	.+28     	; 0xf58 <__vector_11+0x248>
     f3c:	61 32       	cpi	r22, 0x21	; 33
     f3e:	09 f0       	breq	.+2      	; 0xf42 <__vector_11+0x232>
     f40:	4e c0       	rjmp	.+156    	; 0xfde <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
     f42:	20 93 24 01 	sts	0x0124, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     f46:	e8 ee       	ldi	r30, 0xE8	; 232
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 ff       	sbrs	r24, 0
     f4e:	fd cf       	rjmp	.-6      	; 0xf4a <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f50:	8e ef       	ldi	r24, 0xFE	; 254
     f52:	80 93 e8 00 	sts	0x00E8, r24
     f56:	4a c0       	rjmp	.+148    	; 0xfec <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
     f58:	81 11       	cpse	r24, r1
     f5a:	1a c0       	rjmp	.+52     	; 0xf90 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     f5c:	e8 ee       	ldi	r30, 0xE8	; 232
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	80 ff       	sbrs	r24, 0
     f64:	fd cf       	rjmp	.-6      	; 0xf60 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
     f66:	62 38       	cpi	r22, 0x82	; 130
     f68:	51 f4       	brne	.+20     	; 0xf7e <__vector_11+0x26e>
				UENUM = wIndex;
     f6a:	e9 ee       	ldi	r30, 0xE9	; 233
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
     f70:	80 91 eb 00 	lds	r24, 0x00EB
     f74:	85 fb       	bst	r24, 5
     f76:	88 27       	eor	r24, r24
     f78:	80 f9       	bld	r24, 0
				UENUM = 0;
     f7a:	10 82       	st	Z, r1
     f7c:	01 c0       	rjmp	.+2      	; 0xf80 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
     f7e:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
     f80:	e1 ef       	ldi	r30, 0xF1	; 241
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 83       	st	Z, r24
			UEDATX = 0;
     f86:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f88:	8e ef       	ldi	r24, 0xFE	; 254
     f8a:	80 93 e8 00 	sts	0x00E8, r24
     f8e:	2e c0       	rjmp	.+92     	; 0xfec <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     f90:	98 2f       	mov	r25, r24
     f92:	9d 7f       	andi	r25, 0xFD	; 253
     f94:	91 30       	cpi	r25, 0x01	; 1
     f96:	19 f5       	brne	.+70     	; 0xfde <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
     f98:	62 30       	cpi	r22, 0x02	; 2
     f9a:	09 f5       	brne	.+66     	; 0xfde <__vector_11+0x2ce>
     f9c:	23 2b       	or	r18, r19
     f9e:	f9 f4       	brne	.+62     	; 0xfde <__vector_11+0x2ce>
			i = wIndex & 0x7F;
     fa0:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
     fa2:	9f ef       	ldi	r25, 0xFF	; 255
     fa4:	94 0f       	add	r25, r20
     fa6:	94 30       	cpi	r25, 0x04	; 4
     fa8:	d0 f4       	brcc	.+52     	; 0xfde <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     faa:	9e ef       	ldi	r25, 0xFE	; 254
     fac:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
     fb0:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
     fb4:	83 30       	cpi	r24, 0x03	; 3
     fb6:	21 f4       	brne	.+8      	; 0xfc0 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
     fb8:	81 e2       	ldi	r24, 0x21	; 33
     fba:	80 93 eb 00 	sts	0x00EB, r24
     fbe:	16 c0       	rjmp	.+44     	; 0xfec <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
     fc0:	89 e1       	ldi	r24, 0x19	; 25
     fc2:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <__vector_11+0x2c0>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	4a 95       	dec	r20
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <__vector_11+0x2bc>
     fd4:	ea ee       	ldi	r30, 0xEA	; 234
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 83       	st	Z, r24
					UERST = 0;
     fda:	10 82       	st	Z, r1
     fdc:	07 c0       	rjmp	.+14     	; 0xfec <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
     fde:	81 e2       	ldi	r24, 0x21	; 33
     fe0:	80 93 eb 00 	sts	0x00EB, r24
     fe4:	03 c0       	rjmp	.+6      	; 0xfec <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     fe6:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     fe8:	21 11       	cpse	r18, r1
     fea:	f7 ce       	rjmp	.-530    	; 0xdda <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
     fec:	ff 91       	pop	r31
     fee:	ef 91       	pop	r30
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti

00001016 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    101c:	8c 01       	movw	r16, r24
    101e:	0f 5f       	subi	r16, 0xFF	; 255
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	fc 01       	movw	r30, r24
    1024:	c4 91       	lpm	r28, Z
		if (!c) break;
    1026:	cc 23       	and	r28, r28
    1028:	71 f0       	breq	.+28     	; 0x1046 <print_P+0x30>
		if (c == '\n') usb_tx_char('\r');
    102a:	ca 30       	cpi	r28, 0x0A	; 10
    102c:	19 f4       	brne	.+6      	; 0x1034 <print_P+0x1e>
    102e:	8d e0       	ldi	r24, 0x0D	; 13
    1030:	0e 94 ef 05 	call	0xbde	; 0xbde <m_usb_tx_char>
		usb_tx_char(c);
    1034:	8c 2f       	mov	r24, r28
    1036:	0e 94 ef 05 	call	0xbde	; 0xbde <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    103a:	f8 01       	movw	r30, r16
    103c:	c4 91       	lpm	r28, Z
    103e:	0f 5f       	subi	r16, 0xFF	; 255
    1040:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
    1042:	c1 11       	cpse	r28, r1
    1044:	f2 cf       	rjmp	.-28     	; 0x102a <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	08 95       	ret

0000104e <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	27 97       	sbiw	r28, 0x07	; 7
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    106a:	8e 01       	movw	r16, r28
    106c:	0f 5f       	subi	r16, 0xFF	; 255
    106e:	1f 4f       	sbci	r17, 0xFF	; 255
    1070:	27 e0       	ldi	r18, 0x07	; 7
    1072:	f8 01       	movw	r30, r16
    1074:	11 92       	st	Z+, r1
    1076:	2a 95       	dec	r18
    1078:	e9 f7       	brne	.-6      	; 0x1074 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    107a:	4a e0       	ldi	r20, 0x0A	; 10
    107c:	b8 01       	movw	r22, r16
    107e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__itoa_ncheck>
    1082:	7e 01       	movw	r14, r28
    1084:	f8 e0       	ldi	r31, 0x08	; 8
    1086:	ef 0e       	add	r14, r31
    1088:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    108a:	f8 01       	movw	r30, r16
    108c:	81 91       	ld	r24, Z+
    108e:	8f 01       	movw	r16, r30
    1090:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    1092:	0e 94 ef 05 	call	0xbde	; 0xbde <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    1096:	0e 15       	cp	r16, r14
    1098:	1f 05       	cpc	r17, r15
    109a:	b9 f7       	brne	.-18     	; 0x108a <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    109c:	27 96       	adiw	r28, 0x07	; 7
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	08 95       	ret

000010b6 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    10ba:	ec eb       	ldi	r30, 0xBC	; 188
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	88 23       	and	r24, r24
    10c2:	34 f0       	brlt	.+12     	; 0x10d0 <twi_wait+0x1a>
    10c4:	2f 5f       	subi	r18, 0xFF	; 255
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
    10c8:	29 3e       	cpi	r18, 0xE9	; 233
    10ca:	83 e0       	ldi	r24, 0x03	; 3
    10cc:	38 07       	cpc	r19, r24
    10ce:	b9 f7       	brne	.-18     	; 0x10be <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	28 3e       	cpi	r18, 0xE8	; 232
    10d4:	33 40       	sbci	r19, 0x03	; 3
    10d6:	09 f4       	brne	.+2      	; 0x10da <twi_wait+0x24>
    10d8:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    10da:	08 95       	ret

000010dc <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    10dc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    10e0:	84 e8       	ldi	r24, 0x84	; 132
    10e2:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    10e6:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <twi_wait>
    10ea:	88 23       	and	r24, r24
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    10ee:	80 91 b9 00 	lds	r24, 0x00B9
    10f2:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    10f4:	08 95       	ret

000010f6 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    10f6:	cf 93       	push	r28
    10f8:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    10fa:	94 ea       	ldi	r25, 0xA4	; 164
    10fc:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1100:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <twi_wait>
    1104:	88 23       	and	r24, r24
    1106:	61 f0       	breq	.+24     	; 0x1120 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1108:	8c 2f       	mov	r24, r28
    110a:	88 0f       	add	r24, r24
    110c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1110:	80 32       	cpi	r24, 0x20	; 32
    1112:	29 f4       	brne	.+10     	; 0x111e <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1114:	84 e9       	ldi	r24, 0x94	; 148
    1116:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <start_write+0x2a>
	}	
	return 1;	// success
    111e:	81 e0       	ldi	r24, 0x01	; 1
}	
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1124:	0e 94 82 05 	call	0xb04	; 0xb04 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1128:	88 e5       	ldi	r24, 0x58	; 88
    112a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <start_write>
    112e:	88 23       	and	r24, r24
    1130:	09 f4       	brne	.+2      	; 0x1134 <m_wii_open+0x10>
    1132:	cd c0       	rjmp	.+410    	; 0x12ce <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    1134:	80 e3       	ldi	r24, 0x30	; 48
    1136:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    113a:	88 23       	and	r24, r24
    113c:	09 f4       	brne	.+2      	; 0x1140 <m_wii_open+0x1c>
    113e:	c9 c0       	rjmp	.+402    	; 0x12d2 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    1146:	88 23       	and	r24, r24
    1148:	09 f4       	brne	.+2      	; 0x114c <m_wii_open+0x28>
    114a:	c5 c0       	rjmp	.+394    	; 0x12d6 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    114c:	84 e9       	ldi	r24, 0x94	; 148
    114e:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1152:	83 ec       	ldi	r24, 0xC3	; 195
    1154:	99 e0       	ldi	r25, 0x09	; 9
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <m_wii_open+0x32>
    115a:	00 c0       	rjmp	.+0      	; 0x115c <m_wii_open+0x38>
    115c:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    115e:	88 e5       	ldi	r24, 0x58	; 88
    1160:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <start_write>
    1164:	88 23       	and	r24, r24
    1166:	09 f4       	brne	.+2      	; 0x116a <m_wii_open+0x46>
    1168:	b8 c0       	rjmp	.+368    	; 0x12da <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    1170:	88 23       	and	r24, r24
    1172:	09 f4       	brne	.+2      	; 0x1176 <m_wii_open+0x52>
    1174:	b4 c0       	rjmp	.+360    	; 0x12de <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    117c:	88 23       	and	r24, r24
    117e:	09 f4       	brne	.+2      	; 0x1182 <m_wii_open+0x5e>
    1180:	b0 c0       	rjmp	.+352    	; 0x12e2 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    1188:	88 23       	and	r24, r24
    118a:	09 f4       	brne	.+2      	; 0x118e <m_wii_open+0x6a>
    118c:	ac c0       	rjmp	.+344    	; 0x12e6 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    1194:	88 23       	and	r24, r24
    1196:	09 f4       	brne	.+2      	; 0x119a <m_wii_open+0x76>
    1198:	a8 c0       	rjmp	.+336    	; 0x12ea <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    11a0:	88 23       	and	r24, r24
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <m_wii_open+0x82>
    11a4:	a4 c0       	rjmp	.+328    	; 0x12ee <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    11ac:	88 23       	and	r24, r24
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <m_wii_open+0x8e>
    11b0:	a0 c0       	rjmp	.+320    	; 0x12f2 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    11b8:	88 23       	and	r24, r24
    11ba:	09 f4       	brne	.+2      	; 0x11be <m_wii_open+0x9a>
    11bc:	9c c0       	rjmp	.+312    	; 0x12f6 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    11be:	80 e9       	ldi	r24, 0x90	; 144
    11c0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    11c4:	88 23       	and	r24, r24
    11c6:	09 f4       	brne	.+2      	; 0x11ca <m_wii_open+0xa6>
    11c8:	98 c0       	rjmp	.+304    	; 0x12fa <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    11ca:	84 e9       	ldi	r24, 0x94	; 148
    11cc:	80 93 bc 00 	sts	0x00BC, r24
    11d0:	83 ec       	ldi	r24, 0xC3	; 195
    11d2:	99 e0       	ldi	r25, 0x09	; 9
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <m_wii_open+0xb0>
    11d8:	00 c0       	rjmp	.+0      	; 0x11da <m_wii_open+0xb6>
    11da:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    11dc:	88 e5       	ldi	r24, 0x58	; 88
    11de:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <start_write>
    11e2:	88 23       	and	r24, r24
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <m_wii_open+0xc4>
    11e6:	8b c0       	rjmp	.+278    	; 0x12fe <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    11e8:	87 e0       	ldi	r24, 0x07	; 7
    11ea:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    11ee:	88 23       	and	r24, r24
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <m_wii_open+0xd0>
    11f2:	87 c0       	rjmp	.+270    	; 0x1302 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    11fa:	88 23       	and	r24, r24
    11fc:	09 f4       	brne	.+2      	; 0x1200 <m_wii_open+0xdc>
    11fe:	83 c0       	rjmp	.+262    	; 0x1306 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    1200:	81 e4       	ldi	r24, 0x41	; 65
    1202:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    1206:	88 23       	and	r24, r24
    1208:	09 f4       	brne	.+2      	; 0x120c <m_wii_open+0xe8>
    120a:	7f c0       	rjmp	.+254    	; 0x130a <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    120c:	84 e9       	ldi	r24, 0x94	; 148
    120e:	80 93 bc 00 	sts	0x00BC, r24
    1212:	83 ec       	ldi	r24, 0xC3	; 195
    1214:	99 e0       	ldi	r25, 0x09	; 9
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	f1 f7       	brne	.-4      	; 0x1216 <m_wii_open+0xf2>
    121a:	00 c0       	rjmp	.+0      	; 0x121c <m_wii_open+0xf8>
    121c:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    121e:	88 e5       	ldi	r24, 0x58	; 88
    1220:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <start_write>
    1224:	88 23       	and	r24, r24
    1226:	09 f4       	brne	.+2      	; 0x122a <m_wii_open+0x106>
    1228:	72 c0       	rjmp	.+228    	; 0x130e <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    122a:	8a e1       	ldi	r24, 0x1A	; 26
    122c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    1230:	88 23       	and	r24, r24
    1232:	09 f4       	brne	.+2      	; 0x1236 <m_wii_open+0x112>
    1234:	6e c0       	rjmp	.+220    	; 0x1312 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    1236:	80 e4       	ldi	r24, 0x40	; 64
    1238:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    123c:	88 23       	and	r24, r24
    123e:	09 f4       	brne	.+2      	; 0x1242 <m_wii_open+0x11e>
    1240:	6a c0       	rjmp	.+212    	; 0x1316 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    1248:	88 23       	and	r24, r24
    124a:	09 f4       	brne	.+2      	; 0x124e <m_wii_open+0x12a>
    124c:	66 c0       	rjmp	.+204    	; 0x131a <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    124e:	84 e9       	ldi	r24, 0x94	; 148
    1250:	80 93 bc 00 	sts	0x00BC, r24
    1254:	83 ec       	ldi	r24, 0xC3	; 195
    1256:	99 e0       	ldi	r25, 0x09	; 9
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <m_wii_open+0x134>
    125c:	00 c0       	rjmp	.+0      	; 0x125e <m_wii_open+0x13a>
    125e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1260:	88 e5       	ldi	r24, 0x58	; 88
    1262:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <start_write>
    1266:	88 23       	and	r24, r24
    1268:	09 f4       	brne	.+2      	; 0x126c <m_wii_open+0x148>
    126a:	59 c0       	rjmp	.+178    	; 0x131e <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    126c:	83 e3       	ldi	r24, 0x33	; 51
    126e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    1272:	88 23       	and	r24, r24
    1274:	09 f4       	brne	.+2      	; 0x1278 <m_wii_open+0x154>
    1276:	55 c0       	rjmp	.+170    	; 0x1322 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    127e:	88 23       	and	r24, r24
    1280:	09 f4       	brne	.+2      	; 0x1284 <m_wii_open+0x160>
    1282:	51 c0       	rjmp	.+162    	; 0x1326 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1284:	84 e9       	ldi	r24, 0x94	; 148
    1286:	80 93 bc 00 	sts	0x00BC, r24
    128a:	83 ec       	ldi	r24, 0xC3	; 195
    128c:	99 e0       	ldi	r25, 0x09	; 9
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <m_wii_open+0x16a>
    1292:	00 c0       	rjmp	.+0      	; 0x1294 <m_wii_open+0x170>
    1294:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1296:	88 e5       	ldi	r24, 0x58	; 88
    1298:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <start_write>
    129c:	88 23       	and	r24, r24
    129e:	09 f4       	brne	.+2      	; 0x12a2 <m_wii_open+0x17e>
    12a0:	44 c0       	rjmp	.+136    	; 0x132a <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    12a2:	80 e3       	ldi	r24, 0x30	; 48
    12a4:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    12a8:	88 23       	and	r24, r24
    12aa:	09 f4       	brne	.+2      	; 0x12ae <m_wii_open+0x18a>
    12ac:	40 c0       	rjmp	.+128    	; 0x132e <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    12ae:	88 e0       	ldi	r24, 0x08	; 8
    12b0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    12b4:	88 23       	and	r24, r24
    12b6:	e9 f1       	breq	.+122    	; 0x1332 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    12b8:	84 e9       	ldi	r24, 0x94	; 148
    12ba:	80 93 bc 00 	sts	0x00BC, r24
    12be:	83 ec       	ldi	r24, 0xC3	; 195
    12c0:	99 e0       	ldi	r25, 0x09	; 9
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <m_wii_open+0x19e>
    12c6:	00 c0       	rjmp	.+0      	; 0x12c8 <m_wii_open+0x1a4>
    12c8:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    1332:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1334:	08 95       	ret

00001336 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1336:	cf 93       	push	r28
    1338:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    133a:	84 ea       	ldi	r24, 0xA4	; 164
    133c:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    1340:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <twi_wait>
    1344:	88 23       	and	r24, r24
    1346:	69 f0       	breq	.+26     	; 0x1362 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1348:	8c 2f       	mov	r24, r28
    134a:	88 0f       	add	r24, r24
    134c:	8f 5f       	subi	r24, 0xFF	; 255
    134e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1352:	88 34       	cpi	r24, 0x48	; 72
    1354:	29 f4       	brne	.+10     	; 0x1360 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1356:	84 e9       	ldi	r24, 0x94	; 148
    1358:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <start_read+0x2c>
	}	
	return 1;	// success
    1360:	81 e0       	ldi	r24, 0x01	; 1
}	
    1362:	cf 91       	pop	r28
    1364:	08 95       	ret

00001366 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	60 97       	sbiw	r28, 0x10	; 16
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1380:	fe 01       	movw	r30, r28
    1382:	31 96       	adiw	r30, 0x01	; 1
    1384:	80 e1       	ldi	r24, 0x10	; 16
    1386:	df 01       	movw	r26, r30
    1388:	1d 92       	st	X+, r1
    138a:	8a 95       	dec	r24
    138c:	e9 f7       	brne	.-6      	; 0x1388 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    138e:	88 e5       	ldi	r24, 0x58	; 88
    1390:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <start_write>
    1394:	88 23       	and	r24, r24
    1396:	09 f4       	brne	.+2      	; 0x139a <m_wii_read+0x34>
    1398:	69 c0       	rjmp	.+210    	; 0x146c <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    139a:	86 e3       	ldi	r24, 0x36	; 54
    139c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <send_byte>
    13a0:	88 23       	and	r24, r24
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <m_wii_read+0x40>
    13a4:	65 c0       	rjmp	.+202    	; 0x1470 <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    13a6:	84 e9       	ldi	r24, 0x94	; 148
    13a8:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ac:	b8 e0       	ldi	r27, 0x08	; 8
    13ae:	ba 95       	dec	r27
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <m_wii_read+0x48>
    13b2:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    13b4:	88 e5       	ldi	r24, 0x58	; 88
    13b6:	0e 94 9b 09 	call	0x1336	; 0x1336 <start_read>
    13ba:	88 23       	and	r24, r24
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <m_wii_read+0x5a>
    13be:	5a c0       	rjmp	.+180    	; 0x1474 <m_wii_read+0x10e>
    13c0:	be 01       	movw	r22, r28
    13c2:	6f 5f       	subi	r22, 0xFF	; 255
    13c4:	7f 4f       	sbci	r23, 0xFF	; 255
    13c6:	ae 01       	movw	r20, r28
    13c8:	40 5f       	subi	r20, 0xF0	; 240
    13ca:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    13cc:	ec eb       	ldi	r30, 0xBC	; 188
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    13d2:	2b eb       	ldi	r18, 0xBB	; 187
    13d4:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    13d6:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    13d8:	90 81       	ld	r25, Z
    13da:	99 23       	and	r25, r25
    13dc:	ec f7       	brge	.-6      	; 0x13d8 <m_wii_read+0x72>
		temp[i] = TWDR;
    13de:	d9 01       	movw	r26, r18
    13e0:	9c 91       	ld	r25, X
    13e2:	db 01       	movw	r26, r22
    13e4:	9d 93       	st	X+, r25
    13e6:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    13e8:	a4 17       	cp	r26, r20
    13ea:	b5 07       	cpc	r27, r21
    13ec:	a1 f7       	brne	.-24     	; 0x13d6 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    13ee:	84 e8       	ldi	r24, 0x84	; 132
    13f0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    13f4:	ec eb       	ldi	r30, 0xBC	; 188
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	88 23       	and	r24, r24
    13fc:	ec f7       	brge	.-6      	; 0x13f8 <m_wii_read+0x92>
	temp[15] = TWDR;
    13fe:	80 91 bb 00 	lds	r24, 0x00BB
    1402:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1404:	84 e9       	ldi	r24, 0x94	; 148
    1406:	80 93 bc 00 	sts	0x00BC, r24
    140a:	be 01       	movw	r22, r28
    140c:	6c 5f       	subi	r22, 0xFC	; 252
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	f8 01       	movw	r30, r16
    1412:	08 5e       	subi	r16, 0xE8	; 232
    1414:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1416:	db 01       	movw	r26, r22
    1418:	2c 91       	ld	r18, X
    141a:	32 2f       	mov	r19, r18
    141c:	30 73       	andi	r19, 0x30	; 48
    141e:	cb 01       	movw	r24, r22
    1420:	02 97       	sbiw	r24, 0x02	; 2
    1422:	dc 01       	movw	r26, r24
    1424:	8c 91       	ld	r24, X
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	b0 e1       	ldi	r27, 0x10	; 16
    142a:	3b 9f       	mul	r19, r27
    142c:	80 0d       	add	r24, r0
    142e:	91 1d       	adc	r25, r1
    1430:	11 24       	eor	r1, r1
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1436:	42 2f       	mov	r20, r18
    1438:	40 7c       	andi	r20, 0xC0	; 192
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	44 0f       	add	r20, r20
    143e:	55 1f       	adc	r21, r21
    1440:	44 0f       	add	r20, r20
    1442:	55 1f       	adc	r21, r21
    1444:	cb 01       	movw	r24, r22
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	dc 01       	movw	r26, r24
    144a:	8c 91       	ld	r24, X
    144c:	48 0f       	add	r20, r24
    144e:	51 1d       	adc	r21, r1
    1450:	53 83       	std	Z+3, r21	; 0x03
    1452:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1454:	2f 70       	andi	r18, 0x0F	; 15
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	35 83       	std	Z+5, r19	; 0x05
    145a:	24 83       	std	Z+4, r18	; 0x04
    145c:	6d 5f       	subi	r22, 0xFD	; 253
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1462:	e0 17       	cp	r30, r16
    1464:	f1 07       	cpc	r31, r17
    1466:	b9 f6       	brne	.-82     	; 0x1416 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	05 c0       	rjmp	.+10     	; 0x1476 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	03 c0       	rjmp	.+6      	; 0x1476 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1474:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    1476:	60 96       	adiw	r28, 0x10	; 16
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	08 95       	ret

0000148c <__subsf3>:
    148c:	50 58       	subi	r21, 0x80	; 128

0000148e <__addsf3>:
    148e:	bb 27       	eor	r27, r27
    1490:	aa 27       	eor	r26, r26
    1492:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__addsf3x>
    1496:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__fp_round>
    149a:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__fp_pscA>
    149e:	38 f0       	brcs	.+14     	; 0x14ae <__addsf3+0x20>
    14a0:	0e 94 42 0c 	call	0x1884	; 0x1884 <__fp_pscB>
    14a4:	20 f0       	brcs	.+8      	; 0x14ae <__addsf3+0x20>
    14a6:	39 f4       	brne	.+14     	; 0x14b6 <__addsf3+0x28>
    14a8:	9f 3f       	cpi	r25, 0xFF	; 255
    14aa:	19 f4       	brne	.+6      	; 0x14b2 <__addsf3+0x24>
    14ac:	26 f4       	brtc	.+8      	; 0x14b6 <__addsf3+0x28>
    14ae:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__fp_nan>
    14b2:	0e f4       	brtc	.+2      	; 0x14b6 <__addsf3+0x28>
    14b4:	e0 95       	com	r30
    14b6:	e7 fb       	bst	r30, 7
    14b8:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_inf>

000014bc <__addsf3x>:
    14bc:	e9 2f       	mov	r30, r25
    14be:	0e 94 99 0c 	call	0x1932	; 0x1932 <__fp_split3>
    14c2:	58 f3       	brcs	.-42     	; 0x149a <__addsf3+0xc>
    14c4:	ba 17       	cp	r27, r26
    14c6:	62 07       	cpc	r22, r18
    14c8:	73 07       	cpc	r23, r19
    14ca:	84 07       	cpc	r24, r20
    14cc:	95 07       	cpc	r25, r21
    14ce:	20 f0       	brcs	.+8      	; 0x14d8 <__addsf3x+0x1c>
    14d0:	79 f4       	brne	.+30     	; 0x14f0 <__addsf3x+0x34>
    14d2:	a6 f5       	brtc	.+104    	; 0x153c <__addsf3x+0x80>
    14d4:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_zero>
    14d8:	0e f4       	brtc	.+2      	; 0x14dc <__addsf3x+0x20>
    14da:	e0 95       	com	r30
    14dc:	0b 2e       	mov	r0, r27
    14de:	ba 2f       	mov	r27, r26
    14e0:	a0 2d       	mov	r26, r0
    14e2:	0b 01       	movw	r0, r22
    14e4:	b9 01       	movw	r22, r18
    14e6:	90 01       	movw	r18, r0
    14e8:	0c 01       	movw	r0, r24
    14ea:	ca 01       	movw	r24, r20
    14ec:	a0 01       	movw	r20, r0
    14ee:	11 24       	eor	r1, r1
    14f0:	ff 27       	eor	r31, r31
    14f2:	59 1b       	sub	r21, r25
    14f4:	99 f0       	breq	.+38     	; 0x151c <__addsf3x+0x60>
    14f6:	59 3f       	cpi	r21, 0xF9	; 249
    14f8:	50 f4       	brcc	.+20     	; 0x150e <__addsf3x+0x52>
    14fa:	50 3e       	cpi	r21, 0xE0	; 224
    14fc:	68 f1       	brcs	.+90     	; 0x1558 <__addsf3x+0x9c>
    14fe:	1a 16       	cp	r1, r26
    1500:	f0 40       	sbci	r31, 0x00	; 0
    1502:	a2 2f       	mov	r26, r18
    1504:	23 2f       	mov	r18, r19
    1506:	34 2f       	mov	r19, r20
    1508:	44 27       	eor	r20, r20
    150a:	58 5f       	subi	r21, 0xF8	; 248
    150c:	f3 cf       	rjmp	.-26     	; 0x14f4 <__addsf3x+0x38>
    150e:	46 95       	lsr	r20
    1510:	37 95       	ror	r19
    1512:	27 95       	ror	r18
    1514:	a7 95       	ror	r26
    1516:	f0 40       	sbci	r31, 0x00	; 0
    1518:	53 95       	inc	r21
    151a:	c9 f7       	brne	.-14     	; 0x150e <__addsf3x+0x52>
    151c:	7e f4       	brtc	.+30     	; 0x153c <__addsf3x+0x80>
    151e:	1f 16       	cp	r1, r31
    1520:	ba 0b       	sbc	r27, r26
    1522:	62 0b       	sbc	r22, r18
    1524:	73 0b       	sbc	r23, r19
    1526:	84 0b       	sbc	r24, r20
    1528:	ba f0       	brmi	.+46     	; 0x1558 <__addsf3x+0x9c>
    152a:	91 50       	subi	r25, 0x01	; 1
    152c:	a1 f0       	breq	.+40     	; 0x1556 <__addsf3x+0x9a>
    152e:	ff 0f       	add	r31, r31
    1530:	bb 1f       	adc	r27, r27
    1532:	66 1f       	adc	r22, r22
    1534:	77 1f       	adc	r23, r23
    1536:	88 1f       	adc	r24, r24
    1538:	c2 f7       	brpl	.-16     	; 0x152a <__addsf3x+0x6e>
    153a:	0e c0       	rjmp	.+28     	; 0x1558 <__addsf3x+0x9c>
    153c:	ba 0f       	add	r27, r26
    153e:	62 1f       	adc	r22, r18
    1540:	73 1f       	adc	r23, r19
    1542:	84 1f       	adc	r24, r20
    1544:	48 f4       	brcc	.+18     	; 0x1558 <__addsf3x+0x9c>
    1546:	87 95       	ror	r24
    1548:	77 95       	ror	r23
    154a:	67 95       	ror	r22
    154c:	b7 95       	ror	r27
    154e:	f7 95       	ror	r31
    1550:	9e 3f       	cpi	r25, 0xFE	; 254
    1552:	08 f0       	brcs	.+2      	; 0x1556 <__addsf3x+0x9a>
    1554:	b0 cf       	rjmp	.-160    	; 0x14b6 <__addsf3+0x28>
    1556:	93 95       	inc	r25
    1558:	88 0f       	add	r24, r24
    155a:	08 f0       	brcs	.+2      	; 0x155e <__addsf3x+0xa2>
    155c:	99 27       	eor	r25, r25
    155e:	ee 0f       	add	r30, r30
    1560:	97 95       	ror	r25
    1562:	87 95       	ror	r24
    1564:	08 95       	ret
    1566:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__fp_pscA>
    156a:	60 f0       	brcs	.+24     	; 0x1584 <__addsf3x+0xc8>
    156c:	80 e8       	ldi	r24, 0x80	; 128
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	09 f4       	brne	.+2      	; 0x1574 <__addsf3x+0xb8>
    1572:	9e ef       	ldi	r25, 0xFE	; 254
    1574:	0e 94 42 0c 	call	0x1884	; 0x1884 <__fp_pscB>
    1578:	28 f0       	brcs	.+10     	; 0x1584 <__addsf3x+0xc8>
    157a:	40 e8       	ldi	r20, 0x80	; 128
    157c:	51 e0       	ldi	r21, 0x01	; 1
    157e:	71 f4       	brne	.+28     	; 0x159c <atan2+0x10>
    1580:	5e ef       	ldi	r21, 0xFE	; 254
    1582:	0c c0       	rjmp	.+24     	; 0x159c <atan2+0x10>
    1584:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__fp_nan>
    1588:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_zero>

0000158c <atan2>:
    158c:	e9 2f       	mov	r30, r25
    158e:	e0 78       	andi	r30, 0x80	; 128
    1590:	0e 94 99 0c 	call	0x1932	; 0x1932 <__fp_split3>
    1594:	40 f3       	brcs	.-48     	; 0x1566 <__addsf3x+0xaa>
    1596:	09 2e       	mov	r0, r25
    1598:	05 2a       	or	r0, r21
    159a:	b1 f3       	breq	.-20     	; 0x1588 <__addsf3x+0xcc>
    159c:	26 17       	cp	r18, r22
    159e:	37 07       	cpc	r19, r23
    15a0:	48 07       	cpc	r20, r24
    15a2:	59 07       	cpc	r21, r25
    15a4:	38 f0       	brcs	.+14     	; 0x15b4 <atan2+0x28>
    15a6:	0e 2e       	mov	r0, r30
    15a8:	07 f8       	bld	r0, 7
    15aa:	e0 25       	eor	r30, r0
    15ac:	69 f0       	breq	.+26     	; 0x15c8 <atan2+0x3c>
    15ae:	e0 25       	eor	r30, r0
    15b0:	e0 64       	ori	r30, 0x40	; 64
    15b2:	0a c0       	rjmp	.+20     	; 0x15c8 <atan2+0x3c>
    15b4:	ef 63       	ori	r30, 0x3F	; 63
    15b6:	07 f8       	bld	r0, 7
    15b8:	00 94       	com	r0
    15ba:	07 fa       	bst	r0, 7
    15bc:	db 01       	movw	r26, r22
    15be:	b9 01       	movw	r22, r18
    15c0:	9d 01       	movw	r18, r26
    15c2:	dc 01       	movw	r26, r24
    15c4:	ca 01       	movw	r24, r20
    15c6:	ad 01       	movw	r20, r26
    15c8:	ef 93       	push	r30
    15ca:	0e 94 3d 0b 	call	0x167a	; 0x167a <__divsf3_pse>
    15ce:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_round>
    15d2:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <atan>
    15d6:	5f 91       	pop	r21
    15d8:	55 23       	and	r21, r21
    15da:	39 f0       	breq	.+14     	; 0x15ea <atan2+0x5e>
    15dc:	2b ed       	ldi	r18, 0xDB	; 219
    15de:	3f e0       	ldi	r19, 0x0F	; 15
    15e0:	49 e4       	ldi	r20, 0x49	; 73
    15e2:	50 fd       	sbrc	r21, 0
    15e4:	49 ec       	ldi	r20, 0xC9	; 201
    15e6:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__addsf3>
    15ea:	08 95       	ret

000015ec <atan>:
    15ec:	df 93       	push	r29
    15ee:	dd 27       	eor	r29, r29
    15f0:	b9 2f       	mov	r27, r25
    15f2:	bf 77       	andi	r27, 0x7F	; 127
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	16 16       	cp	r1, r22
    15fa:	17 06       	cpc	r1, r23
    15fc:	48 07       	cpc	r20, r24
    15fe:	5b 07       	cpc	r21, r27
    1600:	18 f4       	brcc	.+6      	; 0x1608 <atan+0x1c>
    1602:	d9 2f       	mov	r29, r25
    1604:	0e 94 c2 0c 	call	0x1984	; 0x1984 <inverse>
    1608:	9f 93       	push	r25
    160a:	8f 93       	push	r24
    160c:	7f 93       	push	r23
    160e:	6f 93       	push	r22
    1610:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <square>
    1614:	ec ea       	ldi	r30, 0xAC	; 172
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fp_powser>
    161c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_round>
    1620:	2f 91       	pop	r18
    1622:	3f 91       	pop	r19
    1624:	4f 91       	pop	r20
    1626:	5f 91       	pop	r21
    1628:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__mulsf3x>
    162c:	dd 23       	and	r29, r29
    162e:	51 f0       	breq	.+20     	; 0x1644 <atan+0x58>
    1630:	90 58       	subi	r25, 0x80	; 128
    1632:	a2 ea       	ldi	r26, 0xA2	; 162
    1634:	2a ed       	ldi	r18, 0xDA	; 218
    1636:	3f e0       	ldi	r19, 0x0F	; 15
    1638:	49 ec       	ldi	r20, 0xC9	; 201
    163a:	5f e3       	ldi	r21, 0x3F	; 63
    163c:	d0 78       	andi	r29, 0x80	; 128
    163e:	5d 27       	eor	r21, r29
    1640:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__addsf3x>
    1644:	df 91       	pop	r29
    1646:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__fp_round>

0000164a <cos>:
    164a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_rempio2>
    164e:	e3 95       	inc	r30
    1650:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_sinus>
    1654:	0e 94 42 0c 	call	0x1884	; 0x1884 <__fp_pscB>
    1658:	58 f0       	brcs	.+22     	; 0x1670 <cos+0x26>
    165a:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__fp_pscA>
    165e:	40 f0       	brcs	.+16     	; 0x1670 <cos+0x26>
    1660:	29 f4       	brne	.+10     	; 0x166c <cos+0x22>
    1662:	5f 3f       	cpi	r21, 0xFF	; 255
    1664:	29 f0       	breq	.+10     	; 0x1670 <cos+0x26>
    1666:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_inf>
    166a:	51 11       	cpse	r21, r1
    166c:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__fp_szero>
    1670:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__fp_nan>

00001674 <__divsf3x>:
    1674:	0e 94 99 0c 	call	0x1932	; 0x1932 <__fp_split3>
    1678:	68 f3       	brcs	.-38     	; 0x1654 <cos+0xa>

0000167a <__divsf3_pse>:
    167a:	99 23       	and	r25, r25
    167c:	b1 f3       	breq	.-20     	; 0x166a <cos+0x20>
    167e:	55 23       	and	r21, r21
    1680:	91 f3       	breq	.-28     	; 0x1666 <cos+0x1c>
    1682:	95 1b       	sub	r25, r21
    1684:	55 0b       	sbc	r21, r21
    1686:	bb 27       	eor	r27, r27
    1688:	aa 27       	eor	r26, r26
    168a:	62 17       	cp	r22, r18
    168c:	73 07       	cpc	r23, r19
    168e:	84 07       	cpc	r24, r20
    1690:	38 f0       	brcs	.+14     	; 0x16a0 <__divsf3_pse+0x26>
    1692:	9f 5f       	subi	r25, 0xFF	; 255
    1694:	5f 4f       	sbci	r21, 0xFF	; 255
    1696:	22 0f       	add	r18, r18
    1698:	33 1f       	adc	r19, r19
    169a:	44 1f       	adc	r20, r20
    169c:	aa 1f       	adc	r26, r26
    169e:	a9 f3       	breq	.-22     	; 0x168a <__divsf3_pse+0x10>
    16a0:	35 d0       	rcall	.+106    	; 0x170c <__divsf3_pse+0x92>
    16a2:	0e 2e       	mov	r0, r30
    16a4:	3a f0       	brmi	.+14     	; 0x16b4 <__divsf3_pse+0x3a>
    16a6:	e0 e8       	ldi	r30, 0x80	; 128
    16a8:	32 d0       	rcall	.+100    	; 0x170e <__divsf3_pse+0x94>
    16aa:	91 50       	subi	r25, 0x01	; 1
    16ac:	50 40       	sbci	r21, 0x00	; 0
    16ae:	e6 95       	lsr	r30
    16b0:	00 1c       	adc	r0, r0
    16b2:	ca f7       	brpl	.-14     	; 0x16a6 <__divsf3_pse+0x2c>
    16b4:	2b d0       	rcall	.+86     	; 0x170c <__divsf3_pse+0x92>
    16b6:	fe 2f       	mov	r31, r30
    16b8:	29 d0       	rcall	.+82     	; 0x170c <__divsf3_pse+0x92>
    16ba:	66 0f       	add	r22, r22
    16bc:	77 1f       	adc	r23, r23
    16be:	88 1f       	adc	r24, r24
    16c0:	bb 1f       	adc	r27, r27
    16c2:	26 17       	cp	r18, r22
    16c4:	37 07       	cpc	r19, r23
    16c6:	48 07       	cpc	r20, r24
    16c8:	ab 07       	cpc	r26, r27
    16ca:	b0 e8       	ldi	r27, 0x80	; 128
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <__divsf3_pse+0x56>
    16ce:	bb 0b       	sbc	r27, r27
    16d0:	80 2d       	mov	r24, r0
    16d2:	bf 01       	movw	r22, r30
    16d4:	ff 27       	eor	r31, r31
    16d6:	93 58       	subi	r25, 0x83	; 131
    16d8:	5f 4f       	sbci	r21, 0xFF	; 255
    16da:	3a f0       	brmi	.+14     	; 0x16ea <__divsf3_pse+0x70>
    16dc:	9e 3f       	cpi	r25, 0xFE	; 254
    16de:	51 05       	cpc	r21, r1
    16e0:	78 f0       	brcs	.+30     	; 0x1700 <__divsf3_pse+0x86>
    16e2:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_inf>
    16e6:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__fp_szero>
    16ea:	5f 3f       	cpi	r21, 0xFF	; 255
    16ec:	e4 f3       	brlt	.-8      	; 0x16e6 <__divsf3_pse+0x6c>
    16ee:	98 3e       	cpi	r25, 0xE8	; 232
    16f0:	d4 f3       	brlt	.-12     	; 0x16e6 <__divsf3_pse+0x6c>
    16f2:	86 95       	lsr	r24
    16f4:	77 95       	ror	r23
    16f6:	67 95       	ror	r22
    16f8:	b7 95       	ror	r27
    16fa:	f7 95       	ror	r31
    16fc:	9f 5f       	subi	r25, 0xFF	; 255
    16fe:	c9 f7       	brne	.-14     	; 0x16f2 <__divsf3_pse+0x78>
    1700:	88 0f       	add	r24, r24
    1702:	91 1d       	adc	r25, r1
    1704:	96 95       	lsr	r25
    1706:	87 95       	ror	r24
    1708:	97 f9       	bld	r25, 7
    170a:	08 95       	ret
    170c:	e1 e0       	ldi	r30, 0x01	; 1
    170e:	66 0f       	add	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	88 1f       	adc	r24, r24
    1714:	bb 1f       	adc	r27, r27
    1716:	62 17       	cp	r22, r18
    1718:	73 07       	cpc	r23, r19
    171a:	84 07       	cpc	r24, r20
    171c:	ba 07       	cpc	r27, r26
    171e:	20 f0       	brcs	.+8      	; 0x1728 <__divsf3_pse+0xae>
    1720:	62 1b       	sub	r22, r18
    1722:	73 0b       	sbc	r23, r19
    1724:	84 0b       	sbc	r24, r20
    1726:	ba 0b       	sbc	r27, r26
    1728:	ee 1f       	adc	r30, r30
    172a:	88 f7       	brcc	.-30     	; 0x170e <__divsf3_pse+0x94>
    172c:	e0 95       	com	r30
    172e:	08 95       	ret

00001730 <__fixsfsi>:
    1730:	0e 94 9f 0b 	call	0x173e	; 0x173e <__fixunssfsi>
    1734:	68 94       	set
    1736:	b1 11       	cpse	r27, r1
    1738:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__fp_szero>
    173c:	08 95       	ret

0000173e <__fixunssfsi>:
    173e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__fp_splitA>
    1742:	88 f0       	brcs	.+34     	; 0x1766 <__fixunssfsi+0x28>
    1744:	9f 57       	subi	r25, 0x7F	; 127
    1746:	98 f0       	brcs	.+38     	; 0x176e <__fixunssfsi+0x30>
    1748:	b9 2f       	mov	r27, r25
    174a:	99 27       	eor	r25, r25
    174c:	b7 51       	subi	r27, 0x17	; 23
    174e:	b0 f0       	brcs	.+44     	; 0x177c <__fixunssfsi+0x3e>
    1750:	e1 f0       	breq	.+56     	; 0x178a <__fixunssfsi+0x4c>
    1752:	66 0f       	add	r22, r22
    1754:	77 1f       	adc	r23, r23
    1756:	88 1f       	adc	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	1a f0       	brmi	.+6      	; 0x1762 <__fixunssfsi+0x24>
    175c:	ba 95       	dec	r27
    175e:	c9 f7       	brne	.-14     	; 0x1752 <__fixunssfsi+0x14>
    1760:	14 c0       	rjmp	.+40     	; 0x178a <__fixunssfsi+0x4c>
    1762:	b1 30       	cpi	r27, 0x01	; 1
    1764:	91 f0       	breq	.+36     	; 0x178a <__fixunssfsi+0x4c>
    1766:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__fp_zero>
    176a:	b1 e0       	ldi	r27, 0x01	; 1
    176c:	08 95       	ret
    176e:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_zero>
    1772:	67 2f       	mov	r22, r23
    1774:	78 2f       	mov	r23, r24
    1776:	88 27       	eor	r24, r24
    1778:	b8 5f       	subi	r27, 0xF8	; 248
    177a:	39 f0       	breq	.+14     	; 0x178a <__fixunssfsi+0x4c>
    177c:	b9 3f       	cpi	r27, 0xF9	; 249
    177e:	cc f3       	brlt	.-14     	; 0x1772 <__fixunssfsi+0x34>
    1780:	86 95       	lsr	r24
    1782:	77 95       	ror	r23
    1784:	67 95       	ror	r22
    1786:	b3 95       	inc	r27
    1788:	d9 f7       	brne	.-10     	; 0x1780 <__fixunssfsi+0x42>
    178a:	3e f4       	brtc	.+14     	; 0x179a <__fixunssfsi+0x5c>
    178c:	90 95       	com	r25
    178e:	80 95       	com	r24
    1790:	70 95       	com	r23
    1792:	61 95       	neg	r22
    1794:	7f 4f       	sbci	r23, 0xFF	; 255
    1796:	8f 4f       	sbci	r24, 0xFF	; 255
    1798:	9f 4f       	sbci	r25, 0xFF	; 255
    179a:	08 95       	ret

0000179c <__floatunsisf>:
    179c:	e8 94       	clt
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <__floatsisf+0x12>

000017a0 <__floatsisf>:
    17a0:	97 fb       	bst	r25, 7
    17a2:	3e f4       	brtc	.+14     	; 0x17b2 <__floatsisf+0x12>
    17a4:	90 95       	com	r25
    17a6:	80 95       	com	r24
    17a8:	70 95       	com	r23
    17aa:	61 95       	neg	r22
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	8f 4f       	sbci	r24, 0xFF	; 255
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	99 23       	and	r25, r25
    17b4:	a9 f0       	breq	.+42     	; 0x17e0 <__floatsisf+0x40>
    17b6:	f9 2f       	mov	r31, r25
    17b8:	96 e9       	ldi	r25, 0x96	; 150
    17ba:	bb 27       	eor	r27, r27
    17bc:	93 95       	inc	r25
    17be:	f6 95       	lsr	r31
    17c0:	87 95       	ror	r24
    17c2:	77 95       	ror	r23
    17c4:	67 95       	ror	r22
    17c6:	b7 95       	ror	r27
    17c8:	f1 11       	cpse	r31, r1
    17ca:	f8 cf       	rjmp	.-16     	; 0x17bc <__floatsisf+0x1c>
    17cc:	fa f4       	brpl	.+62     	; 0x180c <__floatsisf+0x6c>
    17ce:	bb 0f       	add	r27, r27
    17d0:	11 f4       	brne	.+4      	; 0x17d6 <__floatsisf+0x36>
    17d2:	60 ff       	sbrs	r22, 0
    17d4:	1b c0       	rjmp	.+54     	; 0x180c <__floatsisf+0x6c>
    17d6:	6f 5f       	subi	r22, 0xFF	; 255
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	8f 4f       	sbci	r24, 0xFF	; 255
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	16 c0       	rjmp	.+44     	; 0x180c <__floatsisf+0x6c>
    17e0:	88 23       	and	r24, r24
    17e2:	11 f0       	breq	.+4      	; 0x17e8 <__floatsisf+0x48>
    17e4:	96 e9       	ldi	r25, 0x96	; 150
    17e6:	11 c0       	rjmp	.+34     	; 0x180a <__floatsisf+0x6a>
    17e8:	77 23       	and	r23, r23
    17ea:	21 f0       	breq	.+8      	; 0x17f4 <__floatsisf+0x54>
    17ec:	9e e8       	ldi	r25, 0x8E	; 142
    17ee:	87 2f       	mov	r24, r23
    17f0:	76 2f       	mov	r23, r22
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <__floatsisf+0x5e>
    17f4:	66 23       	and	r22, r22
    17f6:	71 f0       	breq	.+28     	; 0x1814 <__floatsisf+0x74>
    17f8:	96 e8       	ldi	r25, 0x86	; 134
    17fa:	86 2f       	mov	r24, r22
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	2a f0       	brmi	.+10     	; 0x180c <__floatsisf+0x6c>
    1802:	9a 95       	dec	r25
    1804:	66 0f       	add	r22, r22
    1806:	77 1f       	adc	r23, r23
    1808:	88 1f       	adc	r24, r24
    180a:	da f7       	brpl	.-10     	; 0x1802 <__floatsisf+0x62>
    180c:	88 0f       	add	r24, r24
    180e:	96 95       	lsr	r25
    1810:	87 95       	ror	r24
    1812:	97 f9       	bld	r25, 7
    1814:	08 95       	ret

00001816 <__fp_inf>:
    1816:	97 f9       	bld	r25, 7
    1818:	9f 67       	ori	r25, 0x7F	; 127
    181a:	80 e8       	ldi	r24, 0x80	; 128
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	08 95       	ret

00001822 <__fp_nan>:
    1822:	9f ef       	ldi	r25, 0xFF	; 255
    1824:	80 ec       	ldi	r24, 0xC0	; 192
    1826:	08 95       	ret

00001828 <__fp_powser>:
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	1f 93       	push	r17
    182e:	0f 93       	push	r16
    1830:	ff 92       	push	r15
    1832:	ef 92       	push	r14
    1834:	df 92       	push	r13
    1836:	7b 01       	movw	r14, r22
    1838:	8c 01       	movw	r16, r24
    183a:	68 94       	set
    183c:	06 c0       	rjmp	.+12     	; 0x184a <__fp_powser+0x22>
    183e:	da 2e       	mov	r13, r26
    1840:	ef 01       	movw	r28, r30
    1842:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__mulsf3x>
    1846:	fe 01       	movw	r30, r28
    1848:	e8 94       	clt
    184a:	a5 91       	lpm	r26, Z+
    184c:	25 91       	lpm	r18, Z+
    184e:	35 91       	lpm	r19, Z+
    1850:	45 91       	lpm	r20, Z+
    1852:	55 91       	lpm	r21, Z+
    1854:	a6 f3       	brts	.-24     	; 0x183e <__fp_powser+0x16>
    1856:	ef 01       	movw	r28, r30
    1858:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__addsf3x>
    185c:	fe 01       	movw	r30, r28
    185e:	97 01       	movw	r18, r14
    1860:	a8 01       	movw	r20, r16
    1862:	da 94       	dec	r13
    1864:	69 f7       	brne	.-38     	; 0x1840 <__fp_powser+0x18>
    1866:	df 90       	pop	r13
    1868:	ef 90       	pop	r14
    186a:	ff 90       	pop	r15
    186c:	0f 91       	pop	r16
    186e:	1f 91       	pop	r17
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <__fp_pscA>:
    1876:	00 24       	eor	r0, r0
    1878:	0a 94       	dec	r0
    187a:	16 16       	cp	r1, r22
    187c:	17 06       	cpc	r1, r23
    187e:	18 06       	cpc	r1, r24
    1880:	09 06       	cpc	r0, r25
    1882:	08 95       	ret

00001884 <__fp_pscB>:
    1884:	00 24       	eor	r0, r0
    1886:	0a 94       	dec	r0
    1888:	12 16       	cp	r1, r18
    188a:	13 06       	cpc	r1, r19
    188c:	14 06       	cpc	r1, r20
    188e:	05 06       	cpc	r0, r21
    1890:	08 95       	ret
    1892:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__fp_nan>

00001896 <__fp_rempio2>:
    1896:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__fp_splitA>
    189a:	d8 f3       	brcs	.-10     	; 0x1892 <__fp_pscB+0xe>
    189c:	e8 94       	clt
    189e:	e0 e0       	ldi	r30, 0x00	; 0
    18a0:	bb 27       	eor	r27, r27
    18a2:	9f 57       	subi	r25, 0x7F	; 127
    18a4:	f0 f0       	brcs	.+60     	; 0x18e2 <__fp_rempio2+0x4c>
    18a6:	2a ed       	ldi	r18, 0xDA	; 218
    18a8:	3f e0       	ldi	r19, 0x0F	; 15
    18aa:	49 ec       	ldi	r20, 0xC9	; 201
    18ac:	06 c0       	rjmp	.+12     	; 0x18ba <__fp_rempio2+0x24>
    18ae:	ee 0f       	add	r30, r30
    18b0:	bb 0f       	add	r27, r27
    18b2:	66 1f       	adc	r22, r22
    18b4:	77 1f       	adc	r23, r23
    18b6:	88 1f       	adc	r24, r24
    18b8:	28 f0       	brcs	.+10     	; 0x18c4 <__fp_rempio2+0x2e>
    18ba:	b2 3a       	cpi	r27, 0xA2	; 162
    18bc:	62 07       	cpc	r22, r18
    18be:	73 07       	cpc	r23, r19
    18c0:	84 07       	cpc	r24, r20
    18c2:	28 f0       	brcs	.+10     	; 0x18ce <__fp_rempio2+0x38>
    18c4:	b2 5a       	subi	r27, 0xA2	; 162
    18c6:	62 0b       	sbc	r22, r18
    18c8:	73 0b       	sbc	r23, r19
    18ca:	84 0b       	sbc	r24, r20
    18cc:	e3 95       	inc	r30
    18ce:	9a 95       	dec	r25
    18d0:	72 f7       	brpl	.-36     	; 0x18ae <__fp_rempio2+0x18>
    18d2:	80 38       	cpi	r24, 0x80	; 128
    18d4:	30 f4       	brcc	.+12     	; 0x18e2 <__fp_rempio2+0x4c>
    18d6:	9a 95       	dec	r25
    18d8:	bb 0f       	add	r27, r27
    18da:	66 1f       	adc	r22, r22
    18dc:	77 1f       	adc	r23, r23
    18de:	88 1f       	adc	r24, r24
    18e0:	d2 f7       	brpl	.-12     	; 0x18d6 <__fp_rempio2+0x40>
    18e2:	90 48       	sbci	r25, 0x80	; 128
    18e4:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__fp_mpack_finite>

000018e8 <__fp_round>:
    18e8:	09 2e       	mov	r0, r25
    18ea:	03 94       	inc	r0
    18ec:	00 0c       	add	r0, r0
    18ee:	11 f4       	brne	.+4      	; 0x18f4 <__fp_round+0xc>
    18f0:	88 23       	and	r24, r24
    18f2:	52 f0       	brmi	.+20     	; 0x1908 <__fp_round+0x20>
    18f4:	bb 0f       	add	r27, r27
    18f6:	40 f4       	brcc	.+16     	; 0x1908 <__fp_round+0x20>
    18f8:	bf 2b       	or	r27, r31
    18fa:	11 f4       	brne	.+4      	; 0x1900 <__fp_round+0x18>
    18fc:	60 ff       	sbrs	r22, 0
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <__fp_round+0x20>
    1900:	6f 5f       	subi	r22, 0xFF	; 255
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	8f 4f       	sbci	r24, 0xFF	; 255
    1906:	9f 4f       	sbci	r25, 0xFF	; 255
    1908:	08 95       	ret

0000190a <__fp_sinus>:
    190a:	ef 93       	push	r30
    190c:	e0 ff       	sbrs	r30, 0
    190e:	07 c0       	rjmp	.+14     	; 0x191e <__fp_sinus+0x14>
    1910:	a2 ea       	ldi	r26, 0xA2	; 162
    1912:	2a ed       	ldi	r18, 0xDA	; 218
    1914:	3f e0       	ldi	r19, 0x0F	; 15
    1916:	49 ec       	ldi	r20, 0xC9	; 201
    1918:	5f eb       	ldi	r21, 0xBF	; 191
    191a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__addsf3x>
    191e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_round>
    1922:	0f 90       	pop	r0
    1924:	03 94       	inc	r0
    1926:	01 fc       	sbrc	r0, 1
    1928:	90 58       	subi	r25, 0x80	; 128
    192a:	e9 ed       	ldi	r30, 0xD9	; 217
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__fp_powsodd>

00001932 <__fp_split3>:
    1932:	57 fd       	sbrc	r21, 7
    1934:	90 58       	subi	r25, 0x80	; 128
    1936:	44 0f       	add	r20, r20
    1938:	55 1f       	adc	r21, r21
    193a:	59 f0       	breq	.+22     	; 0x1952 <__fp_splitA+0x10>
    193c:	5f 3f       	cpi	r21, 0xFF	; 255
    193e:	71 f0       	breq	.+28     	; 0x195c <__fp_splitA+0x1a>
    1940:	47 95       	ror	r20

00001942 <__fp_splitA>:
    1942:	88 0f       	add	r24, r24
    1944:	97 fb       	bst	r25, 7
    1946:	99 1f       	adc	r25, r25
    1948:	61 f0       	breq	.+24     	; 0x1962 <__fp_splitA+0x20>
    194a:	9f 3f       	cpi	r25, 0xFF	; 255
    194c:	79 f0       	breq	.+30     	; 0x196c <__fp_splitA+0x2a>
    194e:	87 95       	ror	r24
    1950:	08 95       	ret
    1952:	12 16       	cp	r1, r18
    1954:	13 06       	cpc	r1, r19
    1956:	14 06       	cpc	r1, r20
    1958:	55 1f       	adc	r21, r21
    195a:	f2 cf       	rjmp	.-28     	; 0x1940 <__fp_split3+0xe>
    195c:	46 95       	lsr	r20
    195e:	f1 df       	rcall	.-30     	; 0x1942 <__fp_splitA>
    1960:	08 c0       	rjmp	.+16     	; 0x1972 <__fp_splitA+0x30>
    1962:	16 16       	cp	r1, r22
    1964:	17 06       	cpc	r1, r23
    1966:	18 06       	cpc	r1, r24
    1968:	99 1f       	adc	r25, r25
    196a:	f1 cf       	rjmp	.-30     	; 0x194e <__fp_splitA+0xc>
    196c:	86 95       	lsr	r24
    196e:	71 05       	cpc	r23, r1
    1970:	61 05       	cpc	r22, r1
    1972:	08 94       	sec
    1974:	08 95       	ret

00001976 <__fp_zero>:
    1976:	e8 94       	clt

00001978 <__fp_szero>:
    1978:	bb 27       	eor	r27, r27
    197a:	66 27       	eor	r22, r22
    197c:	77 27       	eor	r23, r23
    197e:	cb 01       	movw	r24, r22
    1980:	97 f9       	bld	r25, 7
    1982:	08 95       	ret

00001984 <inverse>:
    1984:	9b 01       	movw	r18, r22
    1986:	ac 01       	movw	r20, r24
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	80 e8       	ldi	r24, 0x80	; 128
    198e:	9f e3       	ldi	r25, 0x3F	; 63
    1990:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__divsf3>

00001994 <__mulsf3>:
    1994:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__mulsf3x>
    1998:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__fp_round>
    199c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__fp_pscA>
    19a0:	38 f0       	brcs	.+14     	; 0x19b0 <__mulsf3+0x1c>
    19a2:	0e 94 42 0c 	call	0x1884	; 0x1884 <__fp_pscB>
    19a6:	20 f0       	brcs	.+8      	; 0x19b0 <__mulsf3+0x1c>
    19a8:	95 23       	and	r25, r21
    19aa:	11 f0       	breq	.+4      	; 0x19b0 <__mulsf3+0x1c>
    19ac:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_inf>
    19b0:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__fp_nan>
    19b4:	11 24       	eor	r1, r1
    19b6:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__fp_szero>

000019ba <__mulsf3x>:
    19ba:	0e 94 99 0c 	call	0x1932	; 0x1932 <__fp_split3>
    19be:	70 f3       	brcs	.-36     	; 0x199c <__mulsf3+0x8>

000019c0 <__mulsf3_pse>:
    19c0:	95 9f       	mul	r25, r21
    19c2:	c1 f3       	breq	.-16     	; 0x19b4 <__mulsf3+0x20>
    19c4:	95 0f       	add	r25, r21
    19c6:	50 e0       	ldi	r21, 0x00	; 0
    19c8:	55 1f       	adc	r21, r21
    19ca:	62 9f       	mul	r22, r18
    19cc:	f0 01       	movw	r30, r0
    19ce:	72 9f       	mul	r23, r18
    19d0:	bb 27       	eor	r27, r27
    19d2:	f0 0d       	add	r31, r0
    19d4:	b1 1d       	adc	r27, r1
    19d6:	63 9f       	mul	r22, r19
    19d8:	aa 27       	eor	r26, r26
    19da:	f0 0d       	add	r31, r0
    19dc:	b1 1d       	adc	r27, r1
    19de:	aa 1f       	adc	r26, r26
    19e0:	64 9f       	mul	r22, r20
    19e2:	66 27       	eor	r22, r22
    19e4:	b0 0d       	add	r27, r0
    19e6:	a1 1d       	adc	r26, r1
    19e8:	66 1f       	adc	r22, r22
    19ea:	82 9f       	mul	r24, r18
    19ec:	22 27       	eor	r18, r18
    19ee:	b0 0d       	add	r27, r0
    19f0:	a1 1d       	adc	r26, r1
    19f2:	62 1f       	adc	r22, r18
    19f4:	73 9f       	mul	r23, r19
    19f6:	b0 0d       	add	r27, r0
    19f8:	a1 1d       	adc	r26, r1
    19fa:	62 1f       	adc	r22, r18
    19fc:	83 9f       	mul	r24, r19
    19fe:	a0 0d       	add	r26, r0
    1a00:	61 1d       	adc	r22, r1
    1a02:	22 1f       	adc	r18, r18
    1a04:	74 9f       	mul	r23, r20
    1a06:	33 27       	eor	r19, r19
    1a08:	a0 0d       	add	r26, r0
    1a0a:	61 1d       	adc	r22, r1
    1a0c:	23 1f       	adc	r18, r19
    1a0e:	84 9f       	mul	r24, r20
    1a10:	60 0d       	add	r22, r0
    1a12:	21 1d       	adc	r18, r1
    1a14:	82 2f       	mov	r24, r18
    1a16:	76 2f       	mov	r23, r22
    1a18:	6a 2f       	mov	r22, r26
    1a1a:	11 24       	eor	r1, r1
    1a1c:	9f 57       	subi	r25, 0x7F	; 127
    1a1e:	50 40       	sbci	r21, 0x00	; 0
    1a20:	9a f0       	brmi	.+38     	; 0x1a48 <__mulsf3_pse+0x88>
    1a22:	f1 f0       	breq	.+60     	; 0x1a60 <__mulsf3_pse+0xa0>
    1a24:	88 23       	and	r24, r24
    1a26:	4a f0       	brmi	.+18     	; 0x1a3a <__mulsf3_pse+0x7a>
    1a28:	ee 0f       	add	r30, r30
    1a2a:	ff 1f       	adc	r31, r31
    1a2c:	bb 1f       	adc	r27, r27
    1a2e:	66 1f       	adc	r22, r22
    1a30:	77 1f       	adc	r23, r23
    1a32:	88 1f       	adc	r24, r24
    1a34:	91 50       	subi	r25, 0x01	; 1
    1a36:	50 40       	sbci	r21, 0x00	; 0
    1a38:	a9 f7       	brne	.-22     	; 0x1a24 <__mulsf3_pse+0x64>
    1a3a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a3c:	51 05       	cpc	r21, r1
    1a3e:	80 f0       	brcs	.+32     	; 0x1a60 <__mulsf3_pse+0xa0>
    1a40:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__fp_inf>
    1a44:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__fp_szero>
    1a48:	5f 3f       	cpi	r21, 0xFF	; 255
    1a4a:	e4 f3       	brlt	.-8      	; 0x1a44 <__mulsf3_pse+0x84>
    1a4c:	98 3e       	cpi	r25, 0xE8	; 232
    1a4e:	d4 f3       	brlt	.-12     	; 0x1a44 <__mulsf3_pse+0x84>
    1a50:	86 95       	lsr	r24
    1a52:	77 95       	ror	r23
    1a54:	67 95       	ror	r22
    1a56:	b7 95       	ror	r27
    1a58:	f7 95       	ror	r31
    1a5a:	e7 95       	ror	r30
    1a5c:	9f 5f       	subi	r25, 0xFF	; 255
    1a5e:	c1 f7       	brne	.-16     	; 0x1a50 <__mulsf3_pse+0x90>
    1a60:	fe 2b       	or	r31, r30
    1a62:	88 0f       	add	r24, r24
    1a64:	91 1d       	adc	r25, r1
    1a66:	96 95       	lsr	r25
    1a68:	87 95       	ror	r24
    1a6a:	97 f9       	bld	r25, 7
    1a6c:	08 95       	ret

00001a6e <sin>:
    1a6e:	9f 93       	push	r25
    1a70:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_rempio2>
    1a74:	0f 90       	pop	r0
    1a76:	07 fc       	sbrc	r0, 7
    1a78:	ee 5f       	subi	r30, 0xFE	; 254
    1a7a:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_sinus>
    1a7e:	19 f4       	brne	.+6      	; 0x1a86 <sin+0x18>
    1a80:	16 f4       	brtc	.+4      	; 0x1a86 <sin+0x18>
    1a82:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__fp_nan>
    1a86:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__fp_mpack>

00001a8a <sqrt>:
    1a8a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__fp_splitA>
    1a8e:	b8 f3       	brcs	.-18     	; 0x1a7e <sin+0x10>
    1a90:	99 23       	and	r25, r25
    1a92:	c9 f3       	breq	.-14     	; 0x1a86 <sin+0x18>
    1a94:	b6 f3       	brts	.-20     	; 0x1a82 <sin+0x14>
    1a96:	9f 57       	subi	r25, 0x7F	; 127
    1a98:	55 0b       	sbc	r21, r21
    1a9a:	87 ff       	sbrs	r24, 7
    1a9c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fp_norm2>
    1aa0:	00 24       	eor	r0, r0
    1aa2:	a0 e6       	ldi	r26, 0x60	; 96
    1aa4:	40 ea       	ldi	r20, 0xA0	; 160
    1aa6:	90 01       	movw	r18, r0
    1aa8:	80 58       	subi	r24, 0x80	; 128
    1aaa:	56 95       	lsr	r21
    1aac:	97 95       	ror	r25
    1aae:	28 f4       	brcc	.+10     	; 0x1aba <sqrt+0x30>
    1ab0:	80 5c       	subi	r24, 0xC0	; 192
    1ab2:	66 0f       	add	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	20 f0       	brcs	.+8      	; 0x1ac2 <sqrt+0x38>
    1aba:	26 17       	cp	r18, r22
    1abc:	37 07       	cpc	r19, r23
    1abe:	48 07       	cpc	r20, r24
    1ac0:	30 f4       	brcc	.+12     	; 0x1ace <sqrt+0x44>
    1ac2:	62 1b       	sub	r22, r18
    1ac4:	73 0b       	sbc	r23, r19
    1ac6:	84 0b       	sbc	r24, r20
    1ac8:	20 29       	or	r18, r0
    1aca:	31 29       	or	r19, r1
    1acc:	4a 2b       	or	r20, r26
    1ace:	a6 95       	lsr	r26
    1ad0:	17 94       	ror	r1
    1ad2:	07 94       	ror	r0
    1ad4:	20 25       	eor	r18, r0
    1ad6:	31 25       	eor	r19, r1
    1ad8:	4a 27       	eor	r20, r26
    1ada:	58 f7       	brcc	.-42     	; 0x1ab2 <sqrt+0x28>
    1adc:	66 0f       	add	r22, r22
    1ade:	77 1f       	adc	r23, r23
    1ae0:	88 1f       	adc	r24, r24
    1ae2:	20 f0       	brcs	.+8      	; 0x1aec <sqrt+0x62>
    1ae4:	26 17       	cp	r18, r22
    1ae6:	37 07       	cpc	r19, r23
    1ae8:	48 07       	cpc	r20, r24
    1aea:	30 f4       	brcc	.+12     	; 0x1af8 <sqrt+0x6e>
    1aec:	62 0b       	sbc	r22, r18
    1aee:	73 0b       	sbc	r23, r19
    1af0:	84 0b       	sbc	r24, r20
    1af2:	20 0d       	add	r18, r0
    1af4:	31 1d       	adc	r19, r1
    1af6:	41 1d       	adc	r20, r1
    1af8:	a0 95       	com	r26
    1afa:	81 f7       	brne	.-32     	; 0x1adc <sqrt+0x52>
    1afc:	b9 01       	movw	r22, r18
    1afe:	84 2f       	mov	r24, r20
    1b00:	91 58       	subi	r25, 0x81	; 129
    1b02:	88 0f       	add	r24, r24
    1b04:	96 95       	lsr	r25
    1b06:	87 95       	ror	r24
    1b08:	08 95       	ret

00001b0a <square>:
    1b0a:	9b 01       	movw	r18, r22
    1b0c:	ac 01       	movw	r20, r24
    1b0e:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__mulsf3>

00001b12 <__divsf3>:
    1b12:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__divsf3x>
    1b16:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__fp_round>

00001b1a <__fp_mpack>:
    1b1a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b1c:	31 f0       	breq	.+12     	; 0x1b2a <__fp_mpack_finite+0xc>

00001b1e <__fp_mpack_finite>:
    1b1e:	91 50       	subi	r25, 0x01	; 1
    1b20:	20 f4       	brcc	.+8      	; 0x1b2a <__fp_mpack_finite+0xc>
    1b22:	87 95       	ror	r24
    1b24:	77 95       	ror	r23
    1b26:	67 95       	ror	r22
    1b28:	b7 95       	ror	r27
    1b2a:	88 0f       	add	r24, r24
    1b2c:	91 1d       	adc	r25, r1
    1b2e:	96 95       	lsr	r25
    1b30:	87 95       	ror	r24
    1b32:	97 f9       	bld	r25, 7
    1b34:	08 95       	ret

00001b36 <__fp_norm2>:
    1b36:	91 50       	subi	r25, 0x01	; 1
    1b38:	50 40       	sbci	r21, 0x00	; 0
    1b3a:	66 0f       	add	r22, r22
    1b3c:	77 1f       	adc	r23, r23
    1b3e:	88 1f       	adc	r24, r24
    1b40:	d2 f7       	brpl	.-12     	; 0x1b36 <__fp_norm2>
    1b42:	08 95       	ret

00001b44 <__fp_powsodd>:
    1b44:	9f 93       	push	r25
    1b46:	8f 93       	push	r24
    1b48:	7f 93       	push	r23
    1b4a:	6f 93       	push	r22
    1b4c:	ff 93       	push	r31
    1b4e:	ef 93       	push	r30
    1b50:	9b 01       	movw	r18, r22
    1b52:	ac 01       	movw	r20, r24
    1b54:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__mulsf3>
    1b58:	ef 91       	pop	r30
    1b5a:	ff 91       	pop	r31
    1b5c:	0e 94 14 0c 	call	0x1828	; 0x1828 <__fp_powser>
    1b60:	2f 91       	pop	r18
    1b62:	3f 91       	pop	r19
    1b64:	4f 91       	pop	r20
    1b66:	5f 91       	pop	r21
    1b68:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__mulsf3>

00001b6c <__itoa_ncheck>:
    1b6c:	bb 27       	eor	r27, r27
    1b6e:	4a 30       	cpi	r20, 0x0A	; 10
    1b70:	31 f4       	brne	.+12     	; 0x1b7e <__itoa_ncheck+0x12>
    1b72:	99 23       	and	r25, r25
    1b74:	22 f4       	brpl	.+8      	; 0x1b7e <__itoa_ncheck+0x12>
    1b76:	bd e2       	ldi	r27, 0x2D	; 45
    1b78:	90 95       	com	r25
    1b7a:	81 95       	neg	r24
    1b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7e:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__utoa_common>

00001b82 <__utoa_ncheck>:
    1b82:	bb 27       	eor	r27, r27

00001b84 <__utoa_common>:
    1b84:	fb 01       	movw	r30, r22
    1b86:	55 27       	eor	r21, r21
    1b88:	aa 27       	eor	r26, r26
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	aa 1f       	adc	r26, r26
    1b90:	a4 17       	cp	r26, r20
    1b92:	10 f0       	brcs	.+4      	; 0x1b98 <__utoa_common+0x14>
    1b94:	a4 1b       	sub	r26, r20
    1b96:	83 95       	inc	r24
    1b98:	50 51       	subi	r21, 0x10	; 16
    1b9a:	b9 f7       	brne	.-18     	; 0x1b8a <__utoa_common+0x6>
    1b9c:	a0 5d       	subi	r26, 0xD0	; 208
    1b9e:	aa 33       	cpi	r26, 0x3A	; 58
    1ba0:	08 f0       	brcs	.+2      	; 0x1ba4 <__utoa_common+0x20>
    1ba2:	a9 5d       	subi	r26, 0xD9	; 217
    1ba4:	a1 93       	st	Z+, r26
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	79 f7       	brne	.-34     	; 0x1b88 <__utoa_common+0x4>
    1baa:	b1 11       	cpse	r27, r1
    1bac:	b1 93       	st	Z+, r27
    1bae:	11 92       	st	Z+, r1
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <strrev>

00001bb6 <strrev>:
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	fc 01       	movw	r30, r24
    1bba:	67 2f       	mov	r22, r23
    1bbc:	71 91       	ld	r23, Z+
    1bbe:	77 23       	and	r23, r23
    1bc0:	e1 f7       	brne	.-8      	; 0x1bba <strrev+0x4>
    1bc2:	32 97       	sbiw	r30, 0x02	; 2
    1bc4:	04 c0       	rjmp	.+8      	; 0x1bce <strrev+0x18>
    1bc6:	7c 91       	ld	r23, X
    1bc8:	6d 93       	st	X+, r22
    1bca:	70 83       	st	Z, r23
    1bcc:	62 91       	ld	r22, -Z
    1bce:	ae 17       	cp	r26, r30
    1bd0:	bf 07       	cpc	r27, r31
    1bd2:	c8 f3       	brcs	.-14     	; 0x1bc6 <strrev+0x10>
    1bd4:	08 95       	ret

00001bd6 <_exit>:
    1bd6:	f8 94       	cli

00001bd8 <__stop_program>:
    1bd8:	ff cf       	rjmp	.-2      	; 0x1bd8 <__stop_program>
