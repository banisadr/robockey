
LocalizationTesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00001fa2  00002036  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fa2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  00800114  00800114  0000204a  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000204a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002413  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000927  00000000  00000000  000046ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c96  00000000  00000000  00005026  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000664  00000000  00000000  00005cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ba  00000000  00000000  00006320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002eb3  00000000  00000000  00006bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00009a8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__ctors_end>
       4:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
       8:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
       c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      10:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      14:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      18:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      1c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      20:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      24:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      28:	0c 94 05 08 	jmp	0x100a	; 0x100a <__vector_10>
      2c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__vector_11>
      30:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      34:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      38:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      3c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      40:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      44:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      48:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      4c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      50:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      54:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      58:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      5c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      60:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      64:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      68:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      6c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      70:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      74:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      78:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      7c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      80:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      84:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      88:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      8c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      90:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      94:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      98:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      9c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      a0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      a4:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      a8:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__trampolines_end>:
      f8:	0a 00       	.word	0x000a	; ????

000000fa <__c.2021>:
      fa:	20 00                                                .

000000fc <__c.2019>:
      fc:	20 00                                                .

000000fe <descriptor_list>:
      fe:	00 01 00 00 95 01 12 00 02 00 00 52 01 43 00 03     ...........R.C..
     10e:	00 00 4e 01 04 01 03 09 04 3a 01 12 02 03 09 04     ..N......:......
     11e:	32 01 06 03 03 09 04 28 01 08                       2......(..

00000128 <string3>:
     128:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000132 <string2>:
     132:	06 03 4d 00 32 00 00 00                             ..M.2...

0000013a <string1>:
     13a:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     14a:	65 00 00 00                                         e...

0000014e <string0>:
     14e:	04 03 09 04                                         ....

00000152 <config1_descriptor>:
     152:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     162:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     172:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     182:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     192:	40 00 00                                            @..

00000195 <device_descriptor>:
     195:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1a5:	03 01                                               ..

000001a7 <endpoint_config_table>:
     1a7:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001b2 <__ctors_end>:
     1b2:	11 24       	eor	r1, r1
     1b4:	1f be       	out	0x3f, r1	; 63
     1b6:	cf ef       	ldi	r28, 0xFF	; 255
     1b8:	da e0       	ldi	r29, 0x0A	; 10
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	cd bf       	out	0x3d, r28	; 61

000001be <__do_copy_data>:
     1be:	11 e0       	ldi	r17, 0x01	; 1
     1c0:	a0 e0       	ldi	r26, 0x00	; 0
     1c2:	b1 e0       	ldi	r27, 0x01	; 1
     1c4:	e2 ea       	ldi	r30, 0xA2	; 162
     1c6:	ff e1       	ldi	r31, 0x1F	; 31
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <__do_copy_data+0x10>
     1ca:	05 90       	lpm	r0, Z+
     1cc:	0d 92       	st	X+, r0
     1ce:	a4 31       	cpi	r26, 0x14	; 20
     1d0:	b1 07       	cpc	r27, r17
     1d2:	d9 f7       	brne	.-10     	; 0x1ca <__do_copy_data+0xc>

000001d4 <__do_clear_bss>:
     1d4:	21 e0       	ldi	r18, 0x01	; 1
     1d6:	a4 e1       	ldi	r26, 0x14	; 20
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	01 c0       	rjmp	.+2      	; 0x1de <.do_clear_bss_start>

000001dc <.do_clear_bss_loop>:
     1dc:	1d 92       	st	X+, r1

000001de <.do_clear_bss_start>:
     1de:	a8 35       	cpi	r26, 0x58	; 88
     1e0:	b2 07       	cpc	r27, r18
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <.do_clear_bss_loop>
     1e4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <main>
     1e8:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <_exit>

000001ec <__bad_interrupt>:
     1ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f0 <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     1f0:	83 30       	cpi	r24, 0x03	; 3
     1f2:	91 05       	cpc	r25, r1
     1f4:	01 f1       	breq	.+64     	; 0x236 <distIndex+0x46>
     1f6:	34 f4       	brge	.+12     	; 0x204 <distIndex+0x14>
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	91 05       	cpc	r25, r1
     1fc:	51 f0       	breq	.+20     	; 0x212 <distIndex+0x22>
     1fe:	02 97       	sbiw	r24, 0x02	; 2
     200:	89 f0       	breq	.+34     	; 0x224 <distIndex+0x34>
     202:	42 c0       	rjmp	.+132    	; 0x288 <distIndex+0x98>
     204:	85 30       	cpi	r24, 0x05	; 5
     206:	91 05       	cpc	r25, r1
     208:	51 f1       	breq	.+84     	; 0x25e <distIndex+0x6e>
     20a:	f4 f0       	brlt	.+60     	; 0x248 <distIndex+0x58>
     20c:	06 97       	sbiw	r24, 0x06	; 6
     20e:	91 f1       	breq	.+100    	; 0x274 <distIndex+0x84>
     210:	3b c0       	rjmp	.+118    	; 0x288 <distIndex+0x98>
	{
		case 1 : 
			pointsUsed[0] = 0;
     212:	e4 e1       	ldi	r30, 0x14	; 20
     214:	f1 e0       	ldi	r31, 0x01	; 1
     216:	11 82       	std	Z+1, r1	; 0x01
     218:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	93 83       	std	Z+3, r25	; 0x03
     220:	82 83       	std	Z+2, r24	; 0x02
			break;
     222:	32 c0       	rjmp	.+100    	; 0x288 <distIndex+0x98>
			
		case 2 : 
			pointsUsed[0] = 0;
     224:	e4 e1       	ldi	r30, 0x14	; 20
     226:	f1 e0       	ldi	r31, 0x01	; 1
     228:	11 82       	std	Z+1, r1	; 0x01
     22a:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     22c:	82 e0       	ldi	r24, 0x02	; 2
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	93 83       	std	Z+3, r25	; 0x03
     232:	82 83       	std	Z+2, r24	; 0x02
			break;
     234:	29 c0       	rjmp	.+82     	; 0x288 <distIndex+0x98>
			
		case 3 : 
			pointsUsed[0] = 0;
     236:	e4 e1       	ldi	r30, 0x14	; 20
     238:	f1 e0       	ldi	r31, 0x01	; 1
     23a:	11 82       	std	Z+1, r1	; 0x01
     23c:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	93 83       	std	Z+3, r25	; 0x03
     244:	82 83       	std	Z+2, r24	; 0x02
			break;
     246:	20 c0       	rjmp	.+64     	; 0x288 <distIndex+0x98>
			
		case 4 : 
			pointsUsed[0] = 1;
     248:	e4 e1       	ldi	r30, 0x14	; 20
     24a:	f1 e0       	ldi	r31, 0x01	; 1
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	91 83       	std	Z+1, r25	; 0x01
     252:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	93 83       	std	Z+3, r25	; 0x03
     25a:	82 83       	std	Z+2, r24	; 0x02
			break;
     25c:	15 c0       	rjmp	.+42     	; 0x288 <distIndex+0x98>
			
		case 5 : 
			pointsUsed[0] = 1;
     25e:	e4 e1       	ldi	r30, 0x14	; 20
     260:	f1 e0       	ldi	r31, 0x01	; 1
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	91 83       	std	Z+1, r25	; 0x01
     268:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     26a:	83 e0       	ldi	r24, 0x03	; 3
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	93 83       	std	Z+3, r25	; 0x03
     270:	82 83       	std	Z+2, r24	; 0x02
			break;
     272:	0a c0       	rjmp	.+20     	; 0x288 <distIndex+0x98>
			
		case 6 :
			pointsUsed[0] = 2;
     274:	e4 e1       	ldi	r30, 0x14	; 20
     276:	f1 e0       	ldi	r31, 0x01	; 1
     278:	82 e0       	ldi	r24, 0x02	; 2
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	91 83       	std	Z+1, r25	; 0x01
     27e:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	93 83       	std	Z+3, r25	; 0x03
     286:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     288:	84 e1       	ldi	r24, 0x14	; 20
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	08 95       	ret

0000028e <orientationCalculationFour>:


void orientationCalculationFour(int* pointsLong, float distVect[], int* top, int* bottom)
{
     28e:	2f 92       	push	r2
     290:	3f 92       	push	r3
     292:	4f 92       	push	r4
     294:	5f 92       	push	r5
     296:	6f 92       	push	r6
     298:	7f 92       	push	r7
     29a:	8f 92       	push	r8
     29c:	9f 92       	push	r9
     29e:	af 92       	push	r10
     2a0:	bf 92       	push	r11
     2a2:	cf 92       	push	r12
     2a4:	df 92       	push	r13
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <orientationCalculationFour+0x26>
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <orientationCalculationFour+0x28>
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	5c 01       	movw	r10, r24
     2bc:	4a 01       	movw	r8, r20
     2be:	3a 83       	std	Y+2, r19	; 0x02
     2c0:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     2c2:	06 2f       	mov	r16, r22
     2c4:	17 2f       	mov	r17, r23
     2c6:	f8 01       	movw	r30, r16
     2c8:	41 90       	ld	r4, Z+
     2ca:	51 90       	ld	r5, Z+
     2cc:	61 90       	ld	r6, Z+
     2ce:	71 90       	ld	r7, Z+
     2d0:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     2d2:	1c 82       	std	Y+4, r1	; 0x04
     2d4:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int* pointsLong, float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     2d6:	21 2c       	mov	r2, r1
     2d8:	31 2c       	mov	r3, r1
     2da:	12 c0       	rjmp	.+36     	; 0x300 <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     2dc:	f8 01       	movw	r30, r16
     2de:	c1 90       	ld	r12, Z+
     2e0:	d1 90       	ld	r13, Z+
     2e2:	e1 90       	ld	r14, Z+
     2e4:	f1 90       	ld	r15, Z+
     2e6:	8f 01       	movw	r16, r30
     2e8:	a7 01       	movw	r20, r14
     2ea:	96 01       	movw	r18, r12
     2ec:	c3 01       	movw	r24, r6
     2ee:	b2 01       	movw	r22, r4
     2f0:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__gesf2>
     2f4:	18 16       	cp	r1, r24
     2f6:	24 f4       	brge	.+8      	; 0x300 <orientationCalculationFour+0x72>
     2f8:	26 01       	movw	r4, r12
     2fa:	37 01       	movw	r6, r14
void orientationCalculationFour(int* pointsLong, float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     2fc:	2b 80       	ldd	r2, Y+3	; 0x03
     2fe:	3c 80       	ldd	r3, Y+4	; 0x04
     300:	8b 81       	ldd	r24, Y+3	; 0x03
     302:	9c 81       	ldd	r25, Y+4	; 0x04
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	9c 83       	std	Y+4, r25	; 0x04
     308:	8b 83       	std	Y+3, r24	; 0x03
     30a:	06 97       	sbiw	r24, 0x06	; 6
     30c:	39 f7       	brne	.-50     	; 0x2dc <orientationCalculationFour+0x4e>
	}
	
	//Find points used by shortest length
	
	int* pointsShort; 
	pointsShort = distIndex(indexMin);
     30e:	82 2d       	mov	r24, r2
     310:	93 2d       	mov	r25, r3
     312:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <distIndex>
	
	if (pointsShort[0] == pointsLong[0]){
     316:	fc 01       	movw	r30, r24
     318:	20 81       	ld	r18, Z
     31a:	31 81       	ldd	r19, Z+1	; 0x01
     31c:	f5 01       	movw	r30, r10
     31e:	40 81       	ld	r20, Z
     320:	51 81       	ldd	r21, Z+1	; 0x01
     322:	24 17       	cp	r18, r20
     324:	35 07       	cpc	r19, r21
     326:	59 f4       	brne	.+22     	; 0x33e <orientationCalculationFour+0xb0>
		*top = pointsLong[0];
     328:	f4 01       	movw	r30, r8
     32a:	31 83       	std	Z+1, r19	; 0x01
     32c:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     32e:	f5 01       	movw	r30, r10
     330:	82 81       	ldd	r24, Z+2	; 0x02
     332:	93 81       	ldd	r25, Z+3	; 0x03
     334:	e9 81       	ldd	r30, Y+1	; 0x01
     336:	fa 81       	ldd	r31, Y+2	; 0x02
     338:	91 83       	std	Z+1, r25	; 0x01
     33a:	80 83       	st	Z, r24
     33c:	3f c0       	rjmp	.+126    	; 0x3bc <orientationCalculationFour+0x12e>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     33e:	f5 01       	movw	r30, r10
     340:	62 81       	ldd	r22, Z+2	; 0x02
     342:	73 81       	ldd	r23, Z+3	; 0x03
     344:	26 17       	cp	r18, r22
     346:	37 07       	cpc	r19, r23
     348:	59 f4       	brne	.+22     	; 0x360 <orientationCalculationFour+0xd2>
			*top = pointsLong[1];
     34a:	f4 01       	movw	r30, r8
     34c:	31 83       	std	Z+1, r19	; 0x01
     34e:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     350:	f5 01       	movw	r30, r10
     352:	80 81       	ld	r24, Z
     354:	91 81       	ldd	r25, Z+1	; 0x01
     356:	e9 81       	ldd	r30, Y+1	; 0x01
     358:	fa 81       	ldd	r31, Y+2	; 0x02
     35a:	91 83       	std	Z+1, r25	; 0x01
     35c:	80 83       	st	Z, r24
     35e:	2e c0       	rjmp	.+92     	; 0x3bc <orientationCalculationFour+0x12e>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     360:	fc 01       	movw	r30, r24
     362:	82 81       	ldd	r24, Z+2	; 0x02
     364:	93 81       	ldd	r25, Z+3	; 0x03
     366:	48 17       	cp	r20, r24
     368:	59 07       	cpc	r21, r25
     36a:	59 f4       	brne	.+22     	; 0x382 <orientationCalculationFour+0xf4>
				*top = pointsLong[0];
     36c:	f4 01       	movw	r30, r8
     36e:	51 83       	std	Z+1, r21	; 0x01
     370:	40 83       	st	Z, r20
				*bottom = pointsLong[1];
     372:	f5 01       	movw	r30, r10
     374:	82 81       	ldd	r24, Z+2	; 0x02
     376:	93 81       	ldd	r25, Z+3	; 0x03
     378:	e9 81       	ldd	r30, Y+1	; 0x01
     37a:	fa 81       	ldd	r31, Y+2	; 0x02
     37c:	91 83       	std	Z+1, r25	; 0x01
     37e:	80 83       	st	Z, r24
     380:	1d c0       	rjmp	.+58     	; 0x3bc <orientationCalculationFour+0x12e>
			} else {
				if (pointsShort[1] == pointsLong[1])
     382:	68 17       	cp	r22, r24
     384:	79 07       	cpc	r23, r25
     386:	59 f4       	brne	.+22     	; 0x39e <orientationCalculationFour+0x110>
				{
					*top = pointsLong[1];
     388:	f4 01       	movw	r30, r8
     38a:	71 83       	std	Z+1, r23	; 0x01
     38c:	60 83       	st	Z, r22
					*bottom = pointsLong[0];
     38e:	f5 01       	movw	r30, r10
     390:	80 81       	ld	r24, Z
     392:	91 81       	ldd	r25, Z+1	; 0x01
     394:	e9 81       	ldd	r30, Y+1	; 0x01
     396:	fa 81       	ldd	r31, Y+2	; 0x02
     398:	91 83       	std	Z+1, r25	; 0x01
     39a:	80 83       	st	Z, r24
     39c:	0f c0       	rjmp	.+30     	; 0x3bc <orientationCalculationFour+0x12e>
				} else {
						m_green(OFF);
     39e:	6a 9a       	sbi	0x0d, 2	; 13
     3a0:	72 9a       	sbi	0x0e, 2	; 14
						*top = pointsLong[1];
     3a2:	f5 01       	movw	r30, r10
     3a4:	82 81       	ldd	r24, Z+2	; 0x02
     3a6:	93 81       	ldd	r25, Z+3	; 0x03
     3a8:	f4 01       	movw	r30, r8
     3aa:	91 83       	std	Z+1, r25	; 0x01
     3ac:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     3ae:	f5 01       	movw	r30, r10
     3b0:	80 81       	ld	r24, Z
     3b2:	91 81       	ldd	r25, Z+1	; 0x01
     3b4:	e9 81       	ldd	r30, Y+1	; 0x01
     3b6:	fa 81       	ldd	r31, Y+2	; 0x02
     3b8:	91 83       	std	Z+1, r25	; 0x01
     3ba:	80 83       	st	Z, r24
	}
// 	m_usb_tx_int(*top);
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(*bottom);
// 	m_usb_tx_string(" ");
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	bf 90       	pop	r11
     3d6:	af 90       	pop	r10
     3d8:	9f 90       	pop	r9
     3da:	8f 90       	pop	r8
     3dc:	7f 90       	pop	r7
     3de:	6f 90       	pop	r6
     3e0:	5f 90       	pop	r5
     3e2:	4f 90       	pop	r4
     3e4:	3f 90       	pop	r3
     3e6:	2f 90       	pop	r2
     3e8:	08 95       	ret

000003ea <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     3ea:	2f 92       	push	r2
     3ec:	3f 92       	push	r3
     3ee:	4f 92       	push	r4
     3f0:	5f 92       	push	r5
     3f2:	6f 92       	push	r6
     3f4:	7f 92       	push	r7
     3f6:	8f 92       	push	r8
     3f8:	9f 92       	push	r9
     3fa:	af 92       	push	r10
     3fc:	bf 92       	push	r11
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	ee 97       	sbiw	r28, 0x3e	; 62
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	f8 94       	cli
     418:	de bf       	out	0x3e, r29	; 62
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	cd bf       	out	0x3d, r28	; 61
     41e:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     420:	fc 01       	movw	r30, r24
     422:	04 80       	ldd	r0, Z+4	; 0x04
     424:	f5 81       	ldd	r31, Z+5	; 0x05
     426:	e0 2d       	mov	r30, r0
     428:	fe 8f       	std	Y+30, r31	; 0x1e
     42a:	ed 8f       	std	Y+29, r30	; 0x1d
     42c:	fc 01       	movw	r30, r24
     42e:	00 81       	ld	r16, Z
     430:	11 81       	ldd	r17, Z+1	; 0x01
     432:	6d 8d       	ldd	r22, Y+29	; 0x1d
     434:	7e 8d       	ldd	r23, Y+30	; 0x1e
     436:	60 1b       	sub	r22, r16
     438:	71 0b       	sbc	r23, r17
     43a:	07 2e       	mov	r0, r23
     43c:	00 0c       	add	r0, r0
     43e:	88 0b       	sbc	r24, r24
     440:	99 0b       	sbc	r25, r25
     442:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     446:	6b 01       	movw	r12, r22
     448:	7c 01       	movw	r14, r24
     44a:	f2 01       	movw	r30, r4
     44c:	06 80       	ldd	r0, Z+6	; 0x06
     44e:	f7 81       	ldd	r31, Z+7	; 0x07
     450:	e0 2d       	mov	r30, r0
     452:	fa a3       	std	Y+34, r31	; 0x22
     454:	e9 a3       	std	Y+33, r30	; 0x21
     456:	f2 01       	movw	r30, r4
     458:	22 80       	ldd	r2, Z+2	; 0x02
     45a:	33 80       	ldd	r3, Z+3	; 0x03
     45c:	a9 a0       	ldd	r10, Y+33	; 0x21
     45e:	ba a0       	ldd	r11, Y+34	; 0x22
     460:	a2 18       	sub	r10, r2
     462:	b3 08       	sbc	r11, r3
     464:	9b 01       	movw	r18, r22
     466:	ac 01       	movw	r20, r24
     468:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     46c:	6d a3       	std	Y+37, r22	; 0x25
     46e:	7e a3       	std	Y+38, r23	; 0x26
     470:	8f a3       	std	Y+39, r24	; 0x27
     472:	98 a7       	std	Y+40, r25	; 0x28
     474:	aa 9c       	mul	r10, r10
     476:	40 01       	movw	r8, r0
     478:	ab 9c       	mul	r10, r11
     47a:	90 0c       	add	r9, r0
     47c:	90 0c       	add	r9, r0
     47e:	11 24       	eor	r1, r1
     480:	09 2c       	mov	r0, r9
     482:	00 0c       	add	r0, r0
     484:	aa 08       	sbc	r10, r10
     486:	bb 08       	sbc	r11, r11
     488:	a7 01       	movw	r20, r14
     48a:	96 01       	movw	r18, r12
     48c:	c7 01       	movw	r24, r14
     48e:	b6 01       	movw	r22, r12
     490:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     494:	6b 01       	movw	r12, r22
     496:	7c 01       	movw	r14, r24
     498:	c5 01       	movw	r24, r10
     49a:	b4 01       	movw	r22, r8
     49c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     4a0:	9b 01       	movw	r18, r22
     4a2:	ac 01       	movw	r20, r24
     4a4:	c7 01       	movw	r24, r14
     4a6:	b6 01       	movw	r22, r12
     4a8:	0e 94 02 0c 	call	0x1804	; 0x1804 <__addsf3>
     4ac:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <sqrt>
     4b0:	6f ab       	std	Y+55, r22	; 0x37
     4b2:	78 af       	std	Y+56, r23	; 0x38
     4b4:	89 af       	std	Y+57, r24	; 0x39
     4b6:	9a af       	std	Y+58, r25	; 0x3a
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     4b8:	f2 01       	movw	r30, r4
     4ba:	00 84       	ldd	r0, Z+8	; 0x08
     4bc:	f1 85       	ldd	r31, Z+9	; 0x09
     4be:	e0 2d       	mov	r30, r0
     4c0:	fe a3       	std	Y+38, r31	; 0x26
     4c2:	ed a3       	std	Y+37, r30	; 0x25
     4c4:	bf 01       	movw	r22, r30
     4c6:	60 1b       	sub	r22, r16
     4c8:	71 0b       	sbc	r23, r17
     4ca:	07 2e       	mov	r0, r23
     4cc:	00 0c       	add	r0, r0
     4ce:	88 0b       	sbc	r24, r24
     4d0:	99 0b       	sbc	r25, r25
     4d2:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     4d6:	6b 01       	movw	r12, r22
     4d8:	7c 01       	movw	r14, r24
     4da:	f2 01       	movw	r30, r4
     4dc:	62 84       	ldd	r6, Z+10	; 0x0a
     4de:	73 84       	ldd	r7, Z+11	; 0x0b
     4e0:	53 01       	movw	r10, r6
     4e2:	a2 18       	sub	r10, r2
     4e4:	b3 08       	sbc	r11, r3
     4e6:	9b 01       	movw	r18, r22
     4e8:	ac 01       	movw	r20, r24
     4ea:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     4ee:	69 a7       	std	Y+41, r22	; 0x29
     4f0:	7a a7       	std	Y+42, r23	; 0x2a
     4f2:	8b a7       	std	Y+43, r24	; 0x2b
     4f4:	9c a7       	std	Y+44, r25	; 0x2c
     4f6:	aa 9c       	mul	r10, r10
     4f8:	40 01       	movw	r8, r0
     4fa:	ab 9c       	mul	r10, r11
     4fc:	90 0c       	add	r9, r0
     4fe:	90 0c       	add	r9, r0
     500:	11 24       	eor	r1, r1
     502:	09 2c       	mov	r0, r9
     504:	00 0c       	add	r0, r0
     506:	aa 08       	sbc	r10, r10
     508:	bb 08       	sbc	r11, r11
     50a:	a7 01       	movw	r20, r14
     50c:	96 01       	movw	r18, r12
     50e:	c7 01       	movw	r24, r14
     510:	b6 01       	movw	r22, r12
     512:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     516:	6b 01       	movw	r12, r22
     518:	7c 01       	movw	r14, r24
     51a:	c5 01       	movw	r24, r10
     51c:	b4 01       	movw	r22, r8
     51e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     522:	9b 01       	movw	r18, r22
     524:	ac 01       	movw	r20, r24
     526:	c7 01       	movw	r24, r14
     528:	b6 01       	movw	r22, r12
     52a:	0e 94 02 0c 	call	0x1804	; 0x1804 <__addsf3>
     52e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <sqrt>
     532:	6b af       	std	Y+59, r22	; 0x3b
     534:	7c af       	std	Y+60, r23	; 0x3c
     536:	8d af       	std	Y+61, r24	; 0x3d
     538:	9e af       	std	Y+62, r25	; 0x3e
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     53a:	f2 01       	movw	r30, r4
     53c:	04 84       	ldd	r0, Z+12	; 0x0c
     53e:	f5 85       	ldd	r31, Z+13	; 0x0d
     540:	e0 2d       	mov	r30, r0
     542:	fa a7       	std	Y+42, r31	; 0x2a
     544:	e9 a7       	std	Y+41, r30	; 0x29
     546:	bf 01       	movw	r22, r30
     548:	60 1b       	sub	r22, r16
     54a:	71 0b       	sbc	r23, r17
     54c:	07 2e       	mov	r0, r23
     54e:	00 0c       	add	r0, r0
     550:	88 0b       	sbc	r24, r24
     552:	99 0b       	sbc	r25, r25
     554:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     558:	4b 01       	movw	r8, r22
     55a:	5c 01       	movw	r10, r24
     55c:	f2 01       	movw	r30, r4
     55e:	06 84       	ldd	r0, Z+14	; 0x0e
     560:	f7 85       	ldd	r31, Z+15	; 0x0f
     562:	e0 2d       	mov	r30, r0
     564:	fe a7       	std	Y+46, r31	; 0x2e
     566:	ed a7       	std	Y+45, r30	; 0x2d
     568:	8f 01       	movw	r16, r30
     56a:	02 19       	sub	r16, r2
     56c:	13 09       	sbc	r17, r3
     56e:	9b 01       	movw	r18, r22
     570:	ac 01       	movw	r20, r24
     572:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     576:	6f a7       	std	Y+47, r22	; 0x2f
     578:	78 ab       	std	Y+48, r23	; 0x30
     57a:	89 ab       	std	Y+49, r24	; 0x31
     57c:	9a ab       	std	Y+50, r25	; 0x32
     57e:	00 9f       	mul	r16, r16
     580:	60 01       	movw	r12, r0
     582:	01 9f       	mul	r16, r17
     584:	d0 0c       	add	r13, r0
     586:	d0 0c       	add	r13, r0
     588:	11 24       	eor	r1, r1
     58a:	0d 2c       	mov	r0, r13
     58c:	00 0c       	add	r0, r0
     58e:	ee 08       	sbc	r14, r14
     590:	ff 08       	sbc	r15, r15
     592:	a5 01       	movw	r20, r10
     594:	94 01       	movw	r18, r8
     596:	c5 01       	movw	r24, r10
     598:	b4 01       	movw	r22, r8
     59a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     59e:	4b 01       	movw	r8, r22
     5a0:	5c 01       	movw	r10, r24
     5a2:	c7 01       	movw	r24, r14
     5a4:	b6 01       	movw	r22, r12
     5a6:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     5aa:	9b 01       	movw	r18, r22
     5ac:	ac 01       	movw	r20, r24
     5ae:	c5 01       	movw	r24, r10
     5b0:	b4 01       	movw	r22, r8
     5b2:	0e 94 02 0c 	call	0x1804	; 0x1804 <__addsf3>
     5b6:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <sqrt>
     5ba:	6f a7       	std	Y+47, r22	; 0x2f
     5bc:	78 ab       	std	Y+48, r23	; 0x30
     5be:	89 ab       	std	Y+49, r24	; 0x31
     5c0:	9a ab       	std	Y+50, r25	; 0x32
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     5c2:	6d a1       	ldd	r22, Y+37	; 0x25
     5c4:	7e a1       	ldd	r23, Y+38	; 0x26
     5c6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     5c8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     5ca:	62 1b       	sub	r22, r18
     5cc:	73 0b       	sbc	r23, r19
     5ce:	07 2e       	mov	r0, r23
     5d0:	00 0c       	add	r0, r0
     5d2:	88 0b       	sbc	r24, r24
     5d4:	99 0b       	sbc	r25, r25
     5d6:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     5da:	4b 01       	movw	r8, r22
     5dc:	5c 01       	movw	r10, r24
     5de:	83 01       	movw	r16, r6
     5e0:	49 a1       	ldd	r20, Y+33	; 0x21
     5e2:	5a a1       	ldd	r21, Y+34	; 0x22
     5e4:	04 1b       	sub	r16, r20
     5e6:	15 0b       	sbc	r17, r21
     5e8:	9b 01       	movw	r18, r22
     5ea:	ac 01       	movw	r20, r24
     5ec:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     5f0:	6b ab       	std	Y+51, r22	; 0x33
     5f2:	7c ab       	std	Y+52, r23	; 0x34
     5f4:	8d ab       	std	Y+53, r24	; 0x35
     5f6:	9e ab       	std	Y+54, r25	; 0x36
     5f8:	00 9f       	mul	r16, r16
     5fa:	60 01       	movw	r12, r0
     5fc:	01 9f       	mul	r16, r17
     5fe:	d0 0c       	add	r13, r0
     600:	d0 0c       	add	r13, r0
     602:	11 24       	eor	r1, r1
     604:	0d 2c       	mov	r0, r13
     606:	00 0c       	add	r0, r0
     608:	ee 08       	sbc	r14, r14
     60a:	ff 08       	sbc	r15, r15
     60c:	a5 01       	movw	r20, r10
     60e:	94 01       	movw	r18, r8
     610:	c5 01       	movw	r24, r10
     612:	b4 01       	movw	r22, r8
     614:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     618:	4b 01       	movw	r8, r22
     61a:	5c 01       	movw	r10, r24
     61c:	c7 01       	movw	r24, r14
     61e:	b6 01       	movw	r22, r12
     620:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     624:	9b 01       	movw	r18, r22
     626:	ac 01       	movw	r20, r24
     628:	c5 01       	movw	r24, r10
     62a:	b4 01       	movw	r22, r8
     62c:	0e 94 02 0c 	call	0x1804	; 0x1804 <__addsf3>
     630:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <sqrt>
     634:	6b ab       	std	Y+51, r22	; 0x33
     636:	7c ab       	std	Y+52, r23	; 0x34
     638:	8d ab       	std	Y+53, r24	; 0x35
     63a:	9e ab       	std	Y+54, r25	; 0x36
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     63c:	69 a5       	ldd	r22, Y+41	; 0x29
     63e:	7a a5       	ldd	r23, Y+42	; 0x2a
     640:	8d 8d       	ldd	r24, Y+29	; 0x1d
     642:	9e 8d       	ldd	r25, Y+30	; 0x1e
     644:	68 1b       	sub	r22, r24
     646:	79 0b       	sbc	r23, r25
     648:	07 2e       	mov	r0, r23
     64a:	00 0c       	add	r0, r0
     64c:	88 0b       	sbc	r24, r24
     64e:	99 0b       	sbc	r25, r25
     650:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     654:	4b 01       	movw	r8, r22
     656:	5c 01       	movw	r10, r24
     658:	0d a5       	ldd	r16, Y+45	; 0x2d
     65a:	1e a5       	ldd	r17, Y+46	; 0x2e
     65c:	e9 a1       	ldd	r30, Y+33	; 0x21
     65e:	fa a1       	ldd	r31, Y+34	; 0x22
     660:	0e 1b       	sub	r16, r30
     662:	1f 0b       	sbc	r17, r31
     664:	9b 01       	movw	r18, r22
     666:	ac 01       	movw	r20, r24
     668:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     66c:	6d 8f       	std	Y+29, r22	; 0x1d
     66e:	7e 8f       	std	Y+30, r23	; 0x1e
     670:	8f 8f       	std	Y+31, r24	; 0x1f
     672:	98 a3       	std	Y+32, r25	; 0x20
     674:	00 9f       	mul	r16, r16
     676:	60 01       	movw	r12, r0
     678:	01 9f       	mul	r16, r17
     67a:	d0 0c       	add	r13, r0
     67c:	d0 0c       	add	r13, r0
     67e:	11 24       	eor	r1, r1
     680:	0d 2c       	mov	r0, r13
     682:	00 0c       	add	r0, r0
     684:	ee 08       	sbc	r14, r14
     686:	ff 08       	sbc	r15, r15
     688:	a5 01       	movw	r20, r10
     68a:	94 01       	movw	r18, r8
     68c:	c5 01       	movw	r24, r10
     68e:	b4 01       	movw	r22, r8
     690:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     694:	4b 01       	movw	r8, r22
     696:	5c 01       	movw	r10, r24
     698:	c7 01       	movw	r24, r14
     69a:	b6 01       	movw	r22, r12
     69c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     6a0:	9b 01       	movw	r18, r22
     6a2:	ac 01       	movw	r20, r24
     6a4:	c5 01       	movw	r24, r10
     6a6:	b4 01       	movw	r22, r8
     6a8:	0e 94 02 0c 	call	0x1804	; 0x1804 <__addsf3>
     6ac:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <sqrt>
     6b0:	4b 01       	movw	r8, r22
     6b2:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     6b4:	69 a5       	ldd	r22, Y+41	; 0x29
     6b6:	7a a5       	ldd	r23, Y+42	; 0x2a
     6b8:	2d a1       	ldd	r18, Y+37	; 0x25
     6ba:	3e a1       	ldd	r19, Y+38	; 0x26
     6bc:	62 1b       	sub	r22, r18
     6be:	73 0b       	sbc	r23, r19
     6c0:	07 2e       	mov	r0, r23
     6c2:	00 0c       	add	r0, r0
     6c4:	88 0b       	sbc	r24, r24
     6c6:	99 0b       	sbc	r25, r25
     6c8:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     6cc:	6d 8f       	std	Y+29, r22	; 0x1d
     6ce:	7e 8f       	std	Y+30, r23	; 0x1e
     6d0:	8f 8f       	std	Y+31, r24	; 0x1f
     6d2:	98 a3       	std	Y+32, r25	; 0x20
     6d4:	0d a5       	ldd	r16, Y+45	; 0x2d
     6d6:	1e a5       	ldd	r17, Y+46	; 0x2e
     6d8:	06 19       	sub	r16, r6
     6da:	17 09       	sbc	r17, r7
     6dc:	9b 01       	movw	r18, r22
     6de:	ac 01       	movw	r20, r24
     6e0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     6e4:	69 a3       	std	Y+33, r22	; 0x21
     6e6:	7a a3       	std	Y+34, r23	; 0x22
     6e8:	8b a3       	std	Y+35, r24	; 0x23
     6ea:	9c a3       	std	Y+36, r25	; 0x24
     6ec:	00 9f       	mul	r16, r16
     6ee:	60 01       	movw	r12, r0
     6f0:	01 9f       	mul	r16, r17
     6f2:	d0 0c       	add	r13, r0
     6f4:	d0 0c       	add	r13, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	0d 2c       	mov	r0, r13
     6fa:	00 0c       	add	r0, r0
     6fc:	ee 08       	sbc	r14, r14
     6fe:	ff 08       	sbc	r15, r15
     700:	2d 8d       	ldd	r18, Y+29	; 0x1d
     702:	3e 8d       	ldd	r19, Y+30	; 0x1e
     704:	4f 8d       	ldd	r20, Y+31	; 0x1f
     706:	58 a1       	ldd	r21, Y+32	; 0x20
     708:	ca 01       	movw	r24, r20
     70a:	b9 01       	movw	r22, r18
     70c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     710:	6d 8f       	std	Y+29, r22	; 0x1d
     712:	7e 8f       	std	Y+30, r23	; 0x1e
     714:	8f 8f       	std	Y+31, r24	; 0x1f
     716:	98 a3       	std	Y+32, r25	; 0x20
     718:	c7 01       	movw	r24, r14
     71a:	b6 01       	movw	r22, r12
     71c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     720:	9b 01       	movw	r18, r22
     722:	ac 01       	movw	r20, r24
     724:	6d 8d       	ldd	r22, Y+29	; 0x1d
     726:	7e 8d       	ldd	r23, Y+30	; 0x1e
     728:	8f 8d       	ldd	r24, Y+31	; 0x1f
     72a:	98 a1       	ldd	r25, Y+32	; 0x20
     72c:	0e 94 02 0c 	call	0x1804	; 0x1804 <__addsf3>
     730:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     734:	2f a9       	ldd	r18, Y+55	; 0x37
     736:	38 ad       	ldd	r19, Y+56	; 0x38
     738:	49 ad       	ldd	r20, Y+57	; 0x39
     73a:	5a ad       	ldd	r21, Y+58	; 0x3a
     73c:	29 83       	std	Y+1, r18	; 0x01
     73e:	3a 83       	std	Y+2, r19	; 0x02
     740:	4b 83       	std	Y+3, r20	; 0x03
     742:	5c 83       	std	Y+4, r21	; 0x04
     744:	2b ad       	ldd	r18, Y+59	; 0x3b
     746:	3c ad       	ldd	r19, Y+60	; 0x3c
     748:	4d ad       	ldd	r20, Y+61	; 0x3d
     74a:	5e ad       	ldd	r21, Y+62	; 0x3e
     74c:	2d 83       	std	Y+5, r18	; 0x05
     74e:	3e 83       	std	Y+6, r19	; 0x06
     750:	4f 83       	std	Y+7, r20	; 0x07
     752:	58 87       	std	Y+8, r21	; 0x08
     754:	2f a5       	ldd	r18, Y+47	; 0x2f
     756:	38 a9       	ldd	r19, Y+48	; 0x30
     758:	49 a9       	ldd	r20, Y+49	; 0x31
     75a:	5a a9       	ldd	r21, Y+50	; 0x32
     75c:	29 87       	std	Y+9, r18	; 0x09
     75e:	3a 87       	std	Y+10, r19	; 0x0a
     760:	4b 87       	std	Y+11, r20	; 0x0b
     762:	5c 87       	std	Y+12, r21	; 0x0c
     764:	2b a9       	ldd	r18, Y+51	; 0x33
     766:	3c a9       	ldd	r19, Y+52	; 0x34
     768:	4d a9       	ldd	r20, Y+53	; 0x35
     76a:	5e a9       	ldd	r21, Y+54	; 0x36
     76c:	2d 87       	std	Y+13, r18	; 0x0d
     76e:	3e 87       	std	Y+14, r19	; 0x0e
     770:	4f 87       	std	Y+15, r20	; 0x0f
     772:	58 8b       	std	Y+16, r21	; 0x10
     774:	89 8a       	std	Y+17, r8	; 0x11
     776:	9a 8a       	std	Y+18, r9	; 0x12
     778:	ab 8a       	std	Y+19, r10	; 0x13
     77a:	bc 8a       	std	Y+20, r11	; 0x14
     77c:	6d 8b       	std	Y+21, r22	; 0x15
     77e:	7e 8b       	std	Y+22, r23	; 0x16
     780:	8f 8b       	std	Y+23, r24	; 0x17
     782:	98 8f       	std	Y+24, r25	; 0x18
     784:	ae 01       	movw	r20, r28
     786:	4f 5f       	subi	r20, 0xFF	; 255
     788:	5f 4f       	sbci	r21, 0xFF	; 255
     78a:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     78c:	00 e0       	ldi	r16, 0x00	; 0
     78e:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     790:	61 2c       	mov	r6, r1
     792:	71 2c       	mov	r7, r1
     794:	c1 2c       	mov	r12, r1
     796:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     798:	21 2c       	mov	r2, r1
     79a:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     79c:	f7 01       	movw	r30, r14
     79e:	81 90       	ld	r8, Z+
     7a0:	91 90       	ld	r9, Z+
     7a2:	a1 90       	ld	r10, Z+
     7a4:	b1 90       	ld	r11, Z+
     7a6:	7f 01       	movw	r14, r30
     7a8:	26 2d       	mov	r18, r6
     7aa:	37 2d       	mov	r19, r7
     7ac:	4c 2d       	mov	r20, r12
     7ae:	5d 2d       	mov	r21, r13
     7b0:	c5 01       	movw	r24, r10
     7b2:	b4 01       	movw	r22, r8
     7b4:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__gesf2>
     7b8:	18 16       	cp	r1, r24
     7ba:	34 f4       	brge	.+12     	; 0x7c8 <fourPointCalc+0x3de>
			indexMax = i;
			maxVal = distVect[i];
     7bc:	68 2c       	mov	r6, r8
     7be:	79 2c       	mov	r7, r9
     7c0:	ca 2c       	mov	r12, r10
     7c2:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     7c4:	20 2e       	mov	r2, r16
     7c6:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     7c8:	0f 5f       	subi	r16, 0xFF	; 255
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	06 30       	cpi	r16, 0x06	; 6
     7ce:	11 05       	cpc	r17, r1
     7d0:	29 f7       	brne	.-54     	; 0x79c <fourPointCalc+0x3b2>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLong; 
	pointsLong = distIndex(indexMax);
     7d2:	82 2d       	mov	r24, r2
     7d4:	93 2d       	mov	r25, r3
     7d6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <distIndex>
     7da:	7c 01       	movw	r14, r24
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     7dc:	fc 01       	movw	r30, r24
     7de:	c0 80       	ld	r12, Z
     7e0:	d1 80       	ldd	r13, Z+1	; 0x01
     7e2:	cc 0c       	add	r12, r12
     7e4:	dd 1c       	adc	r13, r13
     7e6:	cc 0c       	add	r12, r12
     7e8:	dd 1c       	adc	r13, r13
     7ea:	c4 0c       	add	r12, r4
     7ec:	d5 1c       	adc	r13, r5
     7ee:	62 80       	ldd	r6, Z+2	; 0x02
     7f0:	73 80       	ldd	r7, Z+3	; 0x03
     7f2:	66 0c       	add	r6, r6
     7f4:	77 1c       	adc	r7, r7
     7f6:	66 0c       	add	r6, r6
     7f8:	77 1c       	adc	r7, r7
     7fa:	64 0c       	add	r6, r4
     7fc:	75 1c       	adc	r7, r5
     7fe:	f6 01       	movw	r30, r12
     800:	60 81       	ld	r22, Z
     802:	71 81       	ldd	r23, Z+1	; 0x01
     804:	f3 01       	movw	r30, r6
     806:	80 81       	ld	r24, Z
     808:	91 81       	ldd	r25, Z+1	; 0x01
     80a:	68 0f       	add	r22, r24
     80c:	79 1f       	adc	r23, r25
     80e:	77 23       	and	r23, r23
     810:	14 f4       	brge	.+4      	; 0x816 <fourPointCalc+0x42c>
     812:	6f 5f       	subi	r22, 0xFF	; 255
     814:	7f 4f       	sbci	r23, 0xFF	; 255
     816:	75 95       	asr	r23
     818:	67 95       	ror	r22
     81a:	07 2e       	mov	r0, r23
     81c:	00 0c       	add	r0, r0
     81e:	88 0b       	sbc	r24, r24
     820:	99 0b       	sbc	r25, r25
     822:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     826:	4b 01       	movw	r8, r22
     828:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     82a:	f6 01       	movw	r30, r12
     82c:	62 81       	ldd	r22, Z+2	; 0x02
     82e:	73 81       	ldd	r23, Z+3	; 0x03
     830:	f3 01       	movw	r30, r6
     832:	82 81       	ldd	r24, Z+2	; 0x02
     834:	93 81       	ldd	r25, Z+3	; 0x03
     836:	68 0f       	add	r22, r24
     838:	79 1f       	adc	r23, r25
     83a:	77 23       	and	r23, r23
     83c:	14 f4       	brge	.+4      	; 0x842 <fourPointCalc+0x458>
     83e:	6f 5f       	subi	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	75 95       	asr	r23
     844:	67 95       	ror	r22
     846:	07 2e       	mov	r0, r23
     848:	00 0c       	add	r0, r0
     84a:	88 0b       	sbc	r24, r24
     84c:	99 0b       	sbc	r25, r25
     84e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     852:	6d 8f       	std	Y+29, r22	; 0x1d
     854:	7e 8f       	std	Y+30, r23	; 0x1e
     856:	8f 8f       	std	Y+31, r24	; 0x1f
     858:	98 a3       	std	Y+32, r25	; 0x20
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     85a:	9e 01       	movw	r18, r28
     85c:	25 5e       	subi	r18, 0xE5	; 229
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
     860:	ae 01       	movw	r20, r28
     862:	47 5e       	subi	r20, 0xE7	; 231
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	be 01       	movw	r22, r28
     868:	6f 5f       	subi	r22, 0xFF	; 255
     86a:	7f 4f       	sbci	r23, 0xFF	; 255
     86c:	c7 01       	movw	r24, r14
     86e:	0e 94 47 01 	call	0x28e	; 0x28e <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     872:	09 8d       	ldd	r16, Y+25	; 0x19
     874:	1a 8d       	ldd	r17, Y+26	; 0x1a
     876:	00 0f       	add	r16, r16
     878:	11 1f       	adc	r17, r17
     87a:	00 0f       	add	r16, r16
     87c:	11 1f       	adc	r17, r17
     87e:	04 0d       	add	r16, r4
     880:	15 1d       	adc	r17, r5
     882:	2b 8c       	ldd	r2, Y+27	; 0x1b
     884:	3c 8c       	ldd	r3, Y+28	; 0x1c
     886:	22 0c       	add	r2, r2
     888:	33 1c       	adc	r3, r3
     88a:	22 0c       	add	r2, r2
     88c:	33 1c       	adc	r3, r3
     88e:	24 0c       	add	r2, r4
     890:	35 1c       	adc	r3, r5
     892:	f8 01       	movw	r30, r16
     894:	60 81       	ld	r22, Z
     896:	71 81       	ldd	r23, Z+1	; 0x01
     898:	f1 01       	movw	r30, r2
     89a:	80 81       	ld	r24, Z
     89c:	91 81       	ldd	r25, Z+1	; 0x01
     89e:	68 1b       	sub	r22, r24
     8a0:	79 0b       	sbc	r23, r25
     8a2:	07 2e       	mov	r0, r23
     8a4:	00 0c       	add	r0, r0
     8a6:	88 0b       	sbc	r24, r24
     8a8:	99 0b       	sbc	r25, r25
     8aa:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
     8ae:	6b 01       	movw	r12, r22
     8b0:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     8b2:	f8 01       	movw	r30, r16
     8b4:	62 81       	ldd	r22, Z+2	; 0x02
     8b6:	73 81       	ldd	r23, Z+3	; 0x03
     8b8:	f1 01       	movw	r30, r2
     8ba:	82 81       	ldd	r24, Z+2	; 0x02
     8bc:	93 81       	ldd	r25, Z+3	; 0x03
     8be:	68 1b       	sub	r22, r24
     8c0:	79 0b       	sbc	r23, r25
     8c2:	07 2e       	mov	r0, r23
     8c4:	00 0c       	add	r0, r0
     8c6:	88 0b       	sbc	r24, r24
     8c8:	99 0b       	sbc	r25, r25
     8ca:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     8ce:	90 58       	subi	r25, 0x80	; 128
     8d0:	a7 01       	movw	r20, r14
     8d2:	96 01       	movw	r18, r12
     8d4:	0e 94 81 0c 	call	0x1902	; 0x1902 <atan2>
	theta += M_PI/2.0;
     8d8:	2b ed       	ldi	r18, 0xDB	; 219
     8da:	3f e0       	ldi	r19, 0x0F	; 15
     8dc:	49 ec       	ldi	r20, 0xC9	; 201
     8de:	5f e3       	ldi	r21, 0x3F	; 63
     8e0:	0e 94 02 0c 	call	0x1804	; 0x1804 <__addsf3>
     8e4:	6b 01       	movw	r12, r22
     8e6:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     8e8:	a5 01       	movw	r20, r10
     8ea:	94 01       	movw	r18, r8
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	94 e4       	ldi	r25, 0x44	; 68
     8f4:	0e 94 01 0c 	call	0x1802	; 0x1802 <__subsf3>
     8f8:	4b 01       	movw	r8, r22
     8fa:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     8fc:	2d 8d       	ldd	r18, Y+29	; 0x1d
     8fe:	3e 8d       	ldd	r19, Y+30	; 0x1e
     900:	4f 8d       	ldd	r20, Y+31	; 0x1f
     902:	58 a1       	ldd	r21, Y+32	; 0x20
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	8f eb       	ldi	r24, 0xBF	; 191
     90a:	93 e4       	ldi	r25, 0x43	; 67
     90c:	0e 94 01 0c 	call	0x1802	; 0x1802 <__subsf3>
     910:	2b 01       	movw	r4, r22
     912:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     914:	c7 01       	movw	r24, r14
     916:	b6 01       	movw	r22, r12
     918:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <sin>
     91c:	6d 8f       	std	Y+29, r22	; 0x1d
     91e:	7e 8f       	std	Y+30, r23	; 0x1e
     920:	8f 8f       	std	Y+31, r24	; 0x1f
     922:	98 a3       	std	Y+32, r25	; 0x20
     924:	c7 01       	movw	r24, r14
     926:	b6 01       	movw	r22, r12
     928:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <cos>
     92c:	69 a3       	std	Y+33, r22	; 0x21
     92e:	7a a3       	std	Y+34, r23	; 0x22
     930:	8b a3       	std	Y+35, r24	; 0x23
     932:	9c a3       	std	Y+36, r25	; 0x24
     934:	00 e3       	ldi	r16, 0x30	; 48
     936:	11 e0       	ldi	r17, 0x01	; 1
     938:	2d 8d       	ldd	r18, Y+29	; 0x1d
     93a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     93c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     93e:	58 a1       	ldd	r21, Y+32	; 0x20
     940:	c3 01       	movw	r24, r6
     942:	b2 01       	movw	r22, r4
     944:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     948:	6d a3       	std	Y+37, r22	; 0x25
     94a:	7e a3       	std	Y+38, r23	; 0x26
     94c:	8f a3       	std	Y+39, r24	; 0x27
     94e:	98 a7       	std	Y+40, r25	; 0x28
     950:	29 a1       	ldd	r18, Y+33	; 0x21
     952:	3a a1       	ldd	r19, Y+34	; 0x22
     954:	4b a1       	ldd	r20, Y+35	; 0x23
     956:	5c a1       	ldd	r21, Y+36	; 0x24
     958:	c5 01       	movw	r24, r10
     95a:	b4 01       	movw	r22, r8
     95c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     960:	9b 01       	movw	r18, r22
     962:	ac 01       	movw	r20, r24
     964:	6d a1       	ldd	r22, Y+37	; 0x25
     966:	7e a1       	ldd	r23, Y+38	; 0x26
     968:	8f a1       	ldd	r24, Y+39	; 0x27
     96a:	98 a5       	ldd	r25, Y+40	; 0x28
     96c:	0e 94 01 0c 	call	0x1802	; 0x1802 <__subsf3>
     970:	f8 01       	movw	r30, r16
     972:	60 83       	st	Z, r22
     974:	71 83       	std	Z+1, r23	; 0x01
     976:	82 83       	std	Z+2, r24	; 0x02
     978:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     97a:	29 a1       	ldd	r18, Y+33	; 0x21
     97c:	3a a1       	ldd	r19, Y+34	; 0x22
     97e:	4b a1       	ldd	r20, Y+35	; 0x23
     980:	5c a1       	ldd	r21, Y+36	; 0x24
     982:	c3 01       	movw	r24, r6
     984:	b2 01       	movw	r22, r4
     986:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     98a:	2b 01       	movw	r4, r22
     98c:	3c 01       	movw	r6, r24
     98e:	2d 8d       	ldd	r18, Y+29	; 0x1d
     990:	3e 8d       	ldd	r19, Y+30	; 0x1e
     992:	4f 8d       	ldd	r20, Y+31	; 0x1f
     994:	58 a1       	ldd	r21, Y+32	; 0x20
     996:	c5 01       	movw	r24, r10
     998:	b4 01       	movw	r22, r8
     99a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     99e:	9b 01       	movw	r18, r22
     9a0:	ac 01       	movw	r20, r24
     9a2:	c3 01       	movw	r24, r6
     9a4:	b2 01       	movw	r22, r4
     9a6:	0e 94 02 0c 	call	0x1804	; 0x1804 <__addsf3>
     9aa:	f8 01       	movw	r30, r16
     9ac:	64 83       	std	Z+4, r22	; 0x04
     9ae:	75 83       	std	Z+5, r23	; 0x05
     9b0:	86 83       	std	Z+6, r24	; 0x06
     9b2:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta*180.0/M_PI;
     9b4:	c7 01       	movw	r24, r14
     9b6:	b6 01       	movw	r22, r12
     9b8:	90 58       	subi	r25, 0x80	; 128
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	44 e3       	ldi	r20, 0x34	; 52
     9c0:	53 e4       	ldi	r21, 0x43	; 67
     9c2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
     9c6:	2b ed       	ldi	r18, 0xDB	; 219
     9c8:	3f e0       	ldi	r19, 0x0F	; 15
     9ca:	49 e4       	ldi	r20, 0x49	; 73
     9cc:	50 e4       	ldi	r21, 0x40	; 64
     9ce:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__divsf3>
     9d2:	f8 01       	movw	r30, r16
     9d4:	60 87       	std	Z+8, r22	; 0x08
     9d6:	71 87       	std	Z+9, r23	; 0x09
     9d8:	82 87       	std	Z+10, r24	; 0x0a
     9da:	93 87       	std	Z+11, r25	; 0x0b
	
	return centerFour;
}
     9dc:	c8 01       	movw	r24, r16
     9de:	ee 96       	adiw	r28, 0x3e	; 62
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	df 90       	pop	r13
     9f8:	cf 90       	pop	r12
     9fa:	bf 90       	pop	r11
     9fc:	af 90       	pop	r10
     9fe:	9f 90       	pop	r9
     a00:	8f 90       	pop	r8
     a02:	7f 90       	pop	r7
     a04:	6f 90       	pop	r6
     a06:	5f 90       	pop	r5
     a08:	4f 90       	pop	r4
     a0a:	3f 90       	pop	r3
     a0c:	2f 90       	pop	r2
     a0e:	08 95       	ret

00000a10 <localization_calc>:
void orientationCalculationFour(int* pointsLong, float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{
     a10:	4f 92       	push	r4
     a12:	5f 92       	push	r5
     a14:	6f 92       	push	r6
     a16:	7f 92       	push	r7
     a18:	af 92       	push	r10
     a1a:	bf 92       	push	r11
     a1c:	cf 92       	push	r12
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
     a30:	68 97       	sbiw	r28, 0x18	; 24
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	de bf       	out	0x3e, r29	; 62
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	cd bf       	out	0x3d, r28	; 61
     a3c:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     a3e:	0d b7       	in	r16, 0x3d	; 61
     a40:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     a42:	80 81       	ld	r24, Z
     a44:	91 81       	ldd	r25, Z+1	; 0x01
     a46:	9a 83       	std	Y+2, r25	; 0x02
     a48:	89 83       	std	Y+1, r24	; 0x01
     a4a:	80 85       	ldd	r24, Z+8	; 0x08
     a4c:	91 85       	ldd	r25, Z+9	; 0x09
     a4e:	9c 83       	std	Y+4, r25	; 0x04
     a50:	8b 83       	std	Y+3, r24	; 0x03
     a52:	82 81       	ldd	r24, Z+2	; 0x02
     a54:	93 81       	ldd	r25, Z+3	; 0x03
     a56:	9e 83       	std	Y+6, r25	; 0x06
     a58:	8d 83       	std	Y+5, r24	; 0x05
     a5a:	82 85       	ldd	r24, Z+10	; 0x0a
     a5c:	93 85       	ldd	r25, Z+11	; 0x0b
     a5e:	98 87       	std	Y+8, r25	; 0x08
     a60:	8f 83       	std	Y+7, r24	; 0x07
     a62:	84 81       	ldd	r24, Z+4	; 0x04
     a64:	95 81       	ldd	r25, Z+5	; 0x05
     a66:	9a 87       	std	Y+10, r25	; 0x0a
     a68:	89 87       	std	Y+9, r24	; 0x09
     a6a:	84 85       	ldd	r24, Z+12	; 0x0c
     a6c:	95 85       	ldd	r25, Z+13	; 0x0d
     a6e:	9c 87       	std	Y+12, r25	; 0x0c
     a70:	8b 87       	std	Y+11, r24	; 0x0b
     a72:	86 81       	ldd	r24, Z+6	; 0x06
     a74:	97 81       	ldd	r25, Z+7	; 0x07
     a76:	9e 87       	std	Y+14, r25	; 0x0e
     a78:	8d 87       	std	Y+13, r24	; 0x0d
     a7a:	86 85       	ldd	r24, Z+14	; 0x0e
     a7c:	97 85       	ldd	r25, Z+15	; 0x0f
     a7e:	98 8b       	std	Y+16, r25	; 0x10
     a80:	8f 87       	std	Y+15, r24	; 0x0f
     a82:	9e 01       	movw	r18, r28
     a84:	2f 5f       	subi	r18, 0xFF	; 255
     a86:	3f 4f       	sbci	r19, 0xFF	; 255
     a88:	69 01       	movw	r12, r18
     a8a:	ae 01       	movw	r20, r28
     a8c:	4f 5e       	subi	r20, 0xEF	; 239
     a8e:	5f 4f       	sbci	r21, 0xFF	; 255
     a90:	f9 01       	movw	r30, r18
	
	//If the x or y data is not received, ensure that the whole point is removed (set to 1023)
	for (int i = 0; i < 4; i++ ){
		for (int j = 0; j < 2; j++ ){
			if (pvect[i][j] == 1023){
				pvect[i][0] = 1023;
     a92:	0f 2e       	mov	r0, r31
     a94:	ee 24       	eor	r14, r14
     a96:	ea 94       	dec	r14
     a98:	f3 e0       	ldi	r31, 0x03	; 3
     a9a:	ff 2e       	mov	r15, r31
     a9c:	f0 2d       	mov	r31, r0
     a9e:	0c c0       	rjmp	.+24     	; 0xab8 <localization_calc+0xa8>
     aa0:	d9 01       	movw	r26, r18
     aa2:	11 96       	adiw	r26, 0x01	; 1
     aa4:	fc 92       	st	X, r15
     aa6:	ee 92       	st	-X, r14
				pvect[i][1] = 1023;
     aa8:	13 96       	adiw	r26, 0x03	; 3
     aaa:	fc 92       	st	X, r15
     aac:	ee 92       	st	-X, r14
     aae:	12 97       	sbiw	r26, 0x02	; 2
     ab0:	34 96       	adiw	r30, 0x04	; 4
		{rawStarData[2], rawStarData[6]},
		{rawStarData[3], rawStarData[7]}
	};
	
	//If the x or y data is not received, ensure that the whole point is removed (set to 1023)
	for (int i = 0; i < 4; i++ ){
     ab2:	e4 17       	cp	r30, r20
     ab4:	f5 07       	cpc	r31, r21
     ab6:	61 f0       	breq	.+24     	; 0xad0 <localization_calc+0xc0>
     ab8:	9f 01       	movw	r18, r30
		for (int j = 0; j < 2; j++ ){
			if (pvect[i][j] == 1023){
     aba:	80 81       	ld	r24, Z
     abc:	91 81       	ldd	r25, Z+1	; 0x01
     abe:	8f 3f       	cpi	r24, 0xFF	; 255
     ac0:	93 40       	sbci	r25, 0x03	; 3
     ac2:	71 f3       	breq	.-36     	; 0xaa0 <localization_calc+0x90>
     ac4:	82 81       	ldd	r24, Z+2	; 0x02
     ac6:	93 81       	ldd	r25, Z+3	; 0x03
     ac8:	8f 3f       	cpi	r24, 0xFF	; 255
     aca:	93 40       	sbci	r25, 0x03	; 3
     acc:	89 f7       	brne	.-30     	; 0xab0 <localization_calc+0xa0>
     ace:	e8 cf       	rjmp	.-48     	; 0xaa0 <localization_calc+0x90>
			}
		}
	}
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     ad0:	fe 01       	movw	r30, r28
     ad2:	71 96       	adiw	r30, 0x11	; 17
     ad4:	88 e0       	ldi	r24, 0x08	; 8
     ad6:	df 01       	movw	r26, r30
     ad8:	1d 92       	st	X+, r1
     ada:	8a 95       	dec	r24
     adc:	e9 f7       	brne	.-6      	; 0xad8 <localization_calc+0xc8>
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     ae6:	f6 01       	movw	r30, r12
     ae8:	40 81       	ld	r20, Z
     aea:	51 81       	ldd	r21, Z+1	; 0x01
     aec:	4f 3f       	cpi	r20, 0xFF	; 255
     aee:	53 40       	sbci	r21, 0x03	; 3
     af0:	61 f0       	breq	.+24     	; 0xb0a <__stack+0xb>
			pointIndices[numPoints] = i;
     af2:	fc 01       	movw	r30, r24
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	4c 0f       	add	r20, r28
     afe:	5d 1f       	adc	r21, r29
     b00:	e4 0f       	add	r30, r20
     b02:	f5 1f       	adc	r31, r21
     b04:	31 8b       	std	Z+17, r19	; 0x11
     b06:	20 8b       	std	Z+16, r18	; 0x10
			numPoints++;
     b08:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     b0a:	2f 5f       	subi	r18, 0xFF	; 255
     b0c:	3f 4f       	sbci	r19, 0xFF	; 255
     b0e:	54 e0       	ldi	r21, 0x04	; 4
     b10:	c5 0e       	add	r12, r21
     b12:	d1 1c       	adc	r13, r1
     b14:	24 30       	cpi	r18, 0x04	; 4
     b16:	31 05       	cpc	r19, r1
     b18:	31 f7       	brne	.-52     	; 0xae6 <localization_calc+0xd6>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     b1a:	00 97       	sbiw	r24, 0x00	; 0
     b1c:	09 f4       	brne	.+2      	; 0xb20 <__stack+0x21>
     b1e:	c5 c0       	rjmp	.+394    	; 0xcaa <__stack+0x1ab>
     b20:	ed b6       	in	r14, 0x3d	; 61
     b22:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     b24:	6c 01       	movw	r12, r24
     b26:	cc 0c       	add	r12, r12
     b28:	dd 1c       	adc	r13, r13
     b2a:	cc 0c       	add	r12, r12
     b2c:	dd 1c       	adc	r13, r13
     b2e:	ad b7       	in	r26, 0x3d	; 61
     b30:	be b7       	in	r27, 0x3e	; 62
     b32:	ac 19       	sub	r26, r12
     b34:	bd 09       	sbc	r27, r13
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	be bf       	out	0x3e, r27	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	ad bf       	out	0x3d, r26	; 61
     b40:	ed b7       	in	r30, 0x3d	; 61
     b42:	fe b7       	in	r31, 0x3e	; 62
     b44:	31 96       	adiw	r30, 0x01	; 1
     b46:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     b48:	18 16       	cp	r1, r24
     b4a:	19 06       	cpc	r1, r25
     b4c:	24 f5       	brge	.+72     	; 0xb96 <__stack+0x97>
     b4e:	9e 01       	movw	r18, r28
     b50:	2f 5e       	subi	r18, 0xEF	; 239
     b52:	3f 4f       	sbci	r19, 0xFF	; 255
     b54:	df 01       	movw	r26, r30
     b56:	ce 0e       	add	r12, r30
     b58:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     b5a:	f9 01       	movw	r30, r18
     b5c:	41 91       	ld	r20, Z+
     b5e:	51 91       	ld	r21, Z+
     b60:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     b62:	fa 01       	movw	r30, r20
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	4c 0f       	add	r20, r28
     b72:	5d 1f       	adc	r21, r29
     b74:	e4 0f       	add	r30, r20
     b76:	f5 1f       	adc	r31, r21
     b78:	40 81       	ld	r20, Z
     b7a:	51 81       	ldd	r21, Z+1	; 0x01
     b7c:	11 96       	adiw	r26, 0x01	; 1
     b7e:	5c 93       	st	X, r21
     b80:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     b82:	42 81       	ldd	r20, Z+2	; 0x02
     b84:	53 81       	ldd	r21, Z+3	; 0x03
     b86:	13 96       	adiw	r26, 0x03	; 3
     b88:	5c 93       	st	X, r21
     b8a:	4e 93       	st	-X, r20
     b8c:	12 97       	sbiw	r26, 0x02	; 2
     b8e:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     b90:	ac 15       	cp	r26, r12
     b92:	bd 05       	cpc	r27, r13
     b94:	11 f7       	brne	.-60     	; 0xb5a <__stack+0x5b>
			points[i][0] = pvect[index][0];
			points[i][1] = pvect[index][1];
		}
		
		
		m_red(ON);
     b96:	6e 9a       	sbi	0x0d, 6	; 13
     b98:	76 98       	cbi	0x0e, 6	; 14
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     b9a:	db 01       	movw	r26, r22
     b9c:	4d 90       	ld	r4, X+
     b9e:	5d 90       	ld	r5, X+
     ba0:	6d 90       	ld	r6, X+
     ba2:	7c 90       	ld	r7, X
     ba4:	13 97       	sbiw	r26, 0x03	; 3
     ba6:	e8 e4       	ldi	r30, 0x48	; 72
     ba8:	f1 e0       	ldi	r31, 0x01	; 1
     baa:	40 82       	st	Z, r4
     bac:	51 82       	std	Z+1, r5	; 0x01
     bae:	62 82       	std	Z+2, r6	; 0x02
     bb0:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     bb2:	14 96       	adiw	r26, 0x04	; 4
     bb4:	4d 90       	ld	r4, X+
     bb6:	5d 90       	ld	r5, X+
     bb8:	6d 90       	ld	r6, X+
     bba:	7c 90       	ld	r7, X
     bbc:	17 97       	sbiw	r26, 0x07	; 7
     bbe:	44 82       	std	Z+4, r4	; 0x04
     bc0:	55 82       	std	Z+5, r5	; 0x05
     bc2:	66 82       	std	Z+6, r6	; 0x06
     bc4:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     bc6:	18 96       	adiw	r26, 0x08	; 8
     bc8:	4d 91       	ld	r20, X+
     bca:	5d 91       	ld	r21, X+
     bcc:	6d 91       	ld	r22, X+
     bce:	7c 91       	ld	r23, X
     bd0:	1b 97       	sbiw	r26, 0x0b	; 11
     bd2:	40 87       	std	Z+8, r20	; 0x08
     bd4:	51 87       	std	Z+9, r21	; 0x09
     bd6:	62 87       	std	Z+10, r22	; 0x0a
     bd8:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     bda:	82 30       	cpi	r24, 0x02	; 2
     bdc:	91 05       	cpc	r25, r1
     bde:	f1 f0       	breq	.+60     	; 0xc1c <__stack+0x11d>
     be0:	1c f4       	brge	.+6      	; 0xbe8 <__stack+0xe9>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	59 f1       	breq	.+86     	; 0xc3c <__stack+0x13d>
     be6:	3a c0       	rjmp	.+116    	; 0xc5c <__stack+0x15d>
     be8:	83 30       	cpi	r24, 0x03	; 3
     bea:	91 05       	cpc	r25, r1
     bec:	39 f0       	breq	.+14     	; 0xbfc <__stack+0xfd>
     bee:	04 97       	sbiw	r24, 0x04	; 4
     bf0:	a9 f5       	brne	.+106    	; 0xc5c <__stack+0x15d>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     bf2:	c5 01       	movw	r24, r10
     bf4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <fourPointCalc>
     bf8:	dc 01       	movw	r26, r24
				break;
     bfa:	32 c0       	rjmp	.+100    	; 0xc60 <__stack+0x161>


float* threePointCalc(int pvect[3][2])
{
	static float centerThree[2];	
	centerThree[0] = 1023;
     bfc:	e8 e2       	ldi	r30, 0x28	; 40
     bfe:	f1 e0       	ldi	r31, 0x01	; 1
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 ec       	ldi	r25, 0xC0	; 192
     c04:	af e7       	ldi	r26, 0x7F	; 127
     c06:	b4 e4       	ldi	r27, 0x44	; 68
     c08:	80 83       	st	Z, r24
     c0a:	91 83       	std	Z+1, r25	; 0x01
     c0c:	a2 83       	std	Z+2, r26	; 0x02
     c0e:	b3 83       	std	Z+3, r27	; 0x03
	centerThree[1] = 1023;
     c10:	84 83       	std	Z+4, r24	; 0x04
     c12:	95 83       	std	Z+5, r25	; 0x05
     c14:	a6 83       	std	Z+6, r26	; 0x06
     c16:	b7 83       	std	Z+7, r27	; 0x07
			case 4 :
				calcPointer = fourPointCalc(points);
				break;
				
			case 3 : 
				calcPointer = threePointCalc(points);
     c18:	df 01       	movw	r26, r30
				break;
     c1a:	22 c0       	rjmp	.+68     	; 0xc60 <__stack+0x161>


float* twoPointCalc(int pvect[2][2])
{
	static float centerTwo[2];
	centerTwo[0] = 1023;
     c1c:	e0 e2       	ldi	r30, 0x20	; 32
     c1e:	f1 e0       	ldi	r31, 0x01	; 1
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 ec       	ldi	r25, 0xC0	; 192
     c24:	af e7       	ldi	r26, 0x7F	; 127
     c26:	b4 e4       	ldi	r27, 0x44	; 68
     c28:	80 83       	st	Z, r24
     c2a:	91 83       	std	Z+1, r25	; 0x01
     c2c:	a2 83       	std	Z+2, r26	; 0x02
     c2e:	b3 83       	std	Z+3, r27	; 0x03
	centerTwo[1] = 1023;
     c30:	84 83       	std	Z+4, r24	; 0x04
     c32:	95 83       	std	Z+5, r25	; 0x05
     c34:	a6 83       	std	Z+6, r26	; 0x06
     c36:	b7 83       	std	Z+7, r27	; 0x07
			case 3 : 
				calcPointer = threePointCalc(points);
				break;
				
			case 2 :
				calcPointer = twoPointCalc(points);
     c38:	df 01       	movw	r26, r30
				break; 
     c3a:	12 c0       	rjmp	.+36     	; 0xc60 <__stack+0x161>


float* onePointCalc(int pvect[1][2])
{
	static float centerOne[2];
	centerOne[0] = 1023;
     c3c:	e8 e1       	ldi	r30, 0x18	; 24
     c3e:	f1 e0       	ldi	r31, 0x01	; 1
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 ec       	ldi	r25, 0xC0	; 192
     c44:	af e7       	ldi	r26, 0x7F	; 127
     c46:	b4 e4       	ldi	r27, 0x44	; 68
     c48:	80 83       	st	Z, r24
     c4a:	91 83       	std	Z+1, r25	; 0x01
     c4c:	a2 83       	std	Z+2, r26	; 0x02
     c4e:	b3 83       	std	Z+3, r27	; 0x03
	centerOne[1] = 1023;
     c50:	84 83       	std	Z+4, r24	; 0x04
     c52:	95 83       	std	Z+5, r25	; 0x05
     c54:	a6 83       	std	Z+6, r26	; 0x06
     c56:	b7 83       	std	Z+7, r27	; 0x07
			case 2 :
				calcPointer = twoPointCalc(points);
				break; 
				
			case 1 : 
				calcPointer = onePointCalc(points);
     c58:	df 01       	movw	r26, r30
				break; 
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <__stack+0x161>
				
			default:
				calcPointer = &rc[0];
     c5c:	a8 e4       	ldi	r26, 0x48	; 72
     c5e:	b1 e0       	ldi	r27, 0x01	; 1
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     c60:	4d 91       	ld	r20, X+
     c62:	5d 91       	ld	r21, X+
     c64:	6d 91       	ld	r22, X+
     c66:	7c 91       	ld	r23, X
     c68:	13 97       	sbiw	r26, 0x03	; 3
     c6a:	ec e3       	ldi	r30, 0x3C	; 60
     c6c:	f1 e0       	ldi	r31, 0x01	; 1
     c6e:	40 83       	st	Z, r20
     c70:	51 83       	std	Z+1, r21	; 0x01
     c72:	62 83       	std	Z+2, r22	; 0x02
     c74:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	4d 91       	ld	r20, X+
     c7a:	5d 91       	ld	r21, X+
     c7c:	6d 91       	ld	r22, X+
     c7e:	7c 91       	ld	r23, X
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	44 83       	std	Z+4, r20	; 0x04
     c84:	55 83       	std	Z+5, r21	; 0x05
     c86:	66 83       	std	Z+6, r22	; 0x06
     c88:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     c8a:	18 96       	adiw	r26, 0x08	; 8
     c8c:	8d 91       	ld	r24, X+
     c8e:	9d 91       	ld	r25, X+
     c90:	0d 90       	ld	r0, X+
     c92:	bc 91       	ld	r27, X
     c94:	a0 2d       	mov	r26, r0
     c96:	80 87       	std	Z+8, r24	; 0x08
     c98:	91 87       	std	Z+9, r25	; 0x09
     c9a:	a2 87       	std	Z+10, r26	; 0x0a
     c9c:	b3 87       	std	Z+11, r27	; 0x0b
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	fe be       	out	0x3e, r15	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	ed be       	out	0x3d, r14	; 61
     ca8:	22 c0       	rjmp	.+68     	; 0xcee <__stack+0x1ef>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     caa:	fb 01       	movw	r30, r22
     cac:	80 81       	ld	r24, Z
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	a2 81       	ldd	r26, Z+2	; 0x02
     cb2:	b3 81       	ldd	r27, Z+3	; 0x03
     cb4:	ec e3       	ldi	r30, 0x3C	; 60
     cb6:	f1 e0       	ldi	r31, 0x01	; 1
     cb8:	80 83       	st	Z, r24
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	a2 83       	std	Z+2, r26	; 0x02
     cbe:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     cc0:	db 01       	movw	r26, r22
     cc2:	14 96       	adiw	r26, 0x04	; 4
     cc4:	cd 90       	ld	r12, X+
     cc6:	dd 90       	ld	r13, X+
     cc8:	ed 90       	ld	r14, X+
     cca:	fc 90       	ld	r15, X
     ccc:	17 97       	sbiw	r26, 0x07	; 7
     cce:	c4 82       	std	Z+4, r12	; 0x04
     cd0:	d5 82       	std	Z+5, r13	; 0x05
     cd2:	e6 82       	std	Z+6, r14	; 0x06
     cd4:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];
     cd6:	18 96       	adiw	r26, 0x08	; 8
     cd8:	4d 91       	ld	r20, X+
     cda:	5d 91       	ld	r21, X+
     cdc:	6d 91       	ld	r22, X+
     cde:	7c 91       	ld	r23, X
     ce0:	1b 97       	sbiw	r26, 0x0b	; 11
     ce2:	40 87       	std	Z+8, r20	; 0x08
     ce4:	51 87       	std	Z+9, r21	; 0x09
     ce6:	62 87       	std	Z+10, r22	; 0x0a
     ce8:	73 87       	std	Z+11, r23	; 0x0b
		m_red(OFF);	
     cea:	6e 9a       	sbi	0x0d, 6	; 13
     cec:	76 9a       	sbi	0x0e, 6	; 14
	
	return robotCenter;
	
	
	
}
     cee:	8c e3       	ldi	r24, 0x3C	; 60
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	1e bf       	out	0x3e, r17	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	0d bf       	out	0x3d, r16	; 61
     cfc:	68 96       	adiw	r28, 0x18	; 24
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	df 90       	pop	r13
     d16:	cf 90       	pop	r12
     d18:	bf 90       	pop	r11
     d1a:	af 90       	pop	r10
     d1c:	7f 90       	pop	r7
     d1e:	6f 90       	pop	r6
     d20:	5f 90       	pop	r5
     d22:	4f 90       	pop	r4
     d24:	08 95       	ret

00000d26 <init>:
}


void init() 
{
	m_red(ON);
     d26:	6e 9a       	sbi	0x0d, 6	; 13
     d28:	76 98       	cbi	0x0e, 6	; 14
	while(!m_wii_open());
     d2a:	0e 94 4d 0a 	call	0x149a	; 0x149a <m_wii_open>
     d2e:	88 23       	and	r24, r24
     d30:	e1 f3       	breq	.-8      	; 0xd2a <init+0x4>
	m_red(OFF);
     d32:	6e 9a       	sbi	0x0d, 6	; 13
     d34:	76 9a       	sbi	0x0e, 6	; 14
	
	m_usb_init();
     d36:	0e 94 4e 07 	call	0xe9c	; 0xe9c <m_usb_init>
     d3a:	08 95       	ret

00000d3c <main>:
#include "localization_function.h"

void init(); 

int main(void)
{	
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	e4 97       	sbiw	r28, 0x34	; 52
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
	m_clockdivide(0);
     d50:	e1 e6       	ldi	r30, 0x61	; 97
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 e8       	ldi	r24, 0x80	; 128
     d56:	80 83       	st	Z, r24
     d58:	10 82       	st	Z, r1
	
	init();
     d5a:	0e 94 93 06 	call	0xd26	; 0xd26 <init>
	m_green(ON);
     d5e:	6a 9a       	sbi	0x0d, 2	; 13
     d60:	72 98       	cbi	0x0e, 2	; 14
	unsigned int blobs[12];
	char rx_buffer;

	float robotCenterPrev[3] = {1023, 1023, 360};
     d62:	8c e0       	ldi	r24, 0x0C	; 12
     d64:	e7 e0       	ldi	r30, 0x07	; 7
     d66:	f1 e0       	ldi	r31, 0x01	; 1
     d68:	de 01       	movw	r26, r28
     d6a:	59 96       	adiw	r26, 0x19	; 25
     d6c:	01 90       	ld	r0, Z+
     d6e:	0d 92       	st	X+, r0
     d70:	8a 95       	dec	r24
     d72:	e1 f7       	brne	.-8      	; 0xd6c <main+0x30>
		
		m_usb_rx_flush();  						// Flush the buffer
		
		if(rx_buffer == 1)						// MATLAB is expecting IMU data
		{
			m_red(TOGGLE);
     d74:	68 94       	set
     d76:	ee 24       	eor	r14, r14
     d78:	e6 f8       	bld	r14, 6
	float* robotCenter;
	
    while (1) 
    {
		
		m_wii_read(blobs);
     d7a:	ce 01       	movw	r24, r28
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <m_wii_read>
		unsigned int x1 = blobs[0];
		unsigned int y1 = blobs[1];
     d82:	6b 81       	ldd	r22, Y+3	; 0x03
     d84:	7c 81       	ldd	r23, Y+4	; 0x04
		unsigned int x2 = blobs[3];
     d86:	0f 81       	ldd	r16, Y+7	; 0x07
     d88:	18 85       	ldd	r17, Y+8	; 0x08
		unsigned int y2 = blobs[4];
     d8a:	49 85       	ldd	r20, Y+9	; 0x09
     d8c:	5a 85       	ldd	r21, Y+10	; 0x0a
		unsigned int x3 = blobs[6];
     d8e:	ad 85       	ldd	r26, Y+13	; 0x0d
     d90:	be 85       	ldd	r27, Y+14	; 0x0e
		unsigned int y3 = blobs[7];
     d92:	2f 85       	ldd	r18, Y+15	; 0x0f
     d94:	38 89       	ldd	r19, Y+16	; 0x10
		unsigned int x4 = blobs[9];
     d96:	eb 89       	ldd	r30, Y+19	; 0x13
     d98:	fc 89       	ldd	r31, Y+20	; 0x14
		unsigned int y4 = blobs[10];
     d9a:	8d 89       	ldd	r24, Y+21	; 0x15
     d9c:	9e 89       	ldd	r25, Y+22	; 0x16
		
		int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
     d9e:	c9 80       	ldd	r12, Y+1	; 0x01
     da0:	da 80       	ldd	r13, Y+2	; 0x02
     da2:	de a2       	std	Y+38, r13	; 0x26
     da4:	cd a2       	std	Y+37, r12	; 0x25
     da6:	18 a7       	std	Y+40, r17	; 0x28
     da8:	0f a3       	std	Y+39, r16	; 0x27
     daa:	ba a7       	std	Y+42, r27	; 0x2a
     dac:	a9 a7       	std	Y+41, r26	; 0x29
     dae:	fc a7       	std	Y+44, r31	; 0x2c
     db0:	eb a7       	std	Y+43, r30	; 0x2b
     db2:	7e a7       	std	Y+46, r23	; 0x2e
     db4:	6d a7       	std	Y+45, r22	; 0x2d
     db6:	58 ab       	std	Y+48, r21	; 0x30
     db8:	4f a7       	std	Y+47, r20	; 0x2f
     dba:	3a ab       	std	Y+50, r19	; 0x32
     dbc:	29 ab       	std	Y+49, r18	; 0x31
     dbe:	9c ab       	std	Y+52, r25	; 0x34
     dc0:	8b ab       	std	Y+51, r24	; 0x33
		robotCenter = localization_calc(rawStarData, robotCenterPrev);
     dc2:	be 01       	movw	r22, r28
     dc4:	67 5e       	subi	r22, 0xE7	; 231
     dc6:	7f 4f       	sbci	r23, 0xFF	; 255
     dc8:	ce 01       	movw	r24, r28
     dca:	85 96       	adiw	r24, 0x25	; 37
     dcc:	0e 94 08 05 	call	0xa10	; 0xa10 <localization_calc>
     dd0:	8c 01       	movw	r16, r24
		
		robotCenterPrev[0] = robotCenter[0];
     dd2:	fc 01       	movw	r30, r24
     dd4:	80 81       	ld	r24, Z
     dd6:	91 81       	ldd	r25, Z+1	; 0x01
     dd8:	a2 81       	ldd	r26, Z+2	; 0x02
     dda:	b3 81       	ldd	r27, Z+3	; 0x03
     ddc:	89 8f       	std	Y+25, r24	; 0x19
     dde:	9a 8f       	std	Y+26, r25	; 0x1a
     de0:	ab 8f       	std	Y+27, r26	; 0x1b
     de2:	bc 8f       	std	Y+28, r27	; 0x1c
		robotCenterPrev[1] = robotCenter[1];
     de4:	84 81       	ldd	r24, Z+4	; 0x04
     de6:	95 81       	ldd	r25, Z+5	; 0x05
     de8:	a6 81       	ldd	r26, Z+6	; 0x06
     dea:	b7 81       	ldd	r27, Z+7	; 0x07
     dec:	8d 8f       	std	Y+29, r24	; 0x1d
     dee:	9e 8f       	std	Y+30, r25	; 0x1e
     df0:	af 8f       	std	Y+31, r26	; 0x1f
     df2:	b8 a3       	std	Y+32, r27	; 0x20
		robotCenterPrev[2] = robotCenter[2];
     df4:	80 85       	ldd	r24, Z+8	; 0x08
     df6:	91 85       	ldd	r25, Z+9	; 0x09
     df8:	a2 85       	ldd	r26, Z+10	; 0x0a
     dfa:	b3 85       	ldd	r27, Z+11	; 0x0b
     dfc:	89 a3       	std	Y+33, r24	; 0x21
     dfe:	9a a3       	std	Y+34, r25	; 0x22
     e00:	ab a3       	std	Y+35, r26	; 0x23
     e02:	bc a3       	std	Y+36, r27	; 0x24
		
 		while(!m_usb_rx_available());  			// Wait for an indication from the computer
     e04:	0e 94 85 07 	call	0xf0a	; 0xf0a <m_usb_rx_available>
     e08:	88 23       	and	r24, r24
     e0a:	e1 f3       	breq	.-8      	; 0xe04 <main+0xc8>
		rx_buffer = m_usb_rx_char();  			// Read the packet from the computer
     e0c:	0e 94 67 07 	call	0xece	; 0xece <m_usb_rx_char>
     e10:	f8 2e       	mov	r15, r24
		
		m_usb_rx_flush();  						// Flush the buffer
     e12:	0e 94 94 07 	call	0xf28	; 0xf28 <m_usb_rx_flush>
		
		if(rx_buffer == 1)						// MATLAB is expecting IMU data
     e16:	f1 e0       	ldi	r31, 0x01	; 1
     e18:	ff 12       	cpse	r15, r31
     e1a:	af cf       	rjmp	.-162    	; 0xd7a <main+0x3e>
		{
			m_red(TOGGLE);
     e1c:	6e 9a       	sbi	0x0d, 6	; 13
     e1e:	8e b1       	in	r24, 0x0e	; 14
     e20:	8e 25       	eor	r24, r14
     e22:	8e b9       	out	0x0e, r24	; 14
			m_usb_tx_int((int)robotCenter[0]);
     e24:	f8 01       	movw	r30, r16
     e26:	60 81       	ld	r22, Z
     e28:	71 81       	ldd	r23, Z+1	; 0x01
     e2a:	82 81       	ldd	r24, Z+2	; 0x02
     e2c:	93 81       	ldd	r25, Z+3	; 0x03
     e2e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__fixsfsi>
     e32:	cb 01       	movw	r24, r22
     e34:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <m_usb_tx_int>
			m_usb_tx_string(" ");
     e38:	8c ef       	ldi	r24, 0xFC	; 252
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 c6 09 	call	0x138c	; 0x138c <print_P>
			m_usb_tx_int((int)robotCenter[1]);
     e40:	f8 01       	movw	r30, r16
     e42:	64 81       	ldd	r22, Z+4	; 0x04
     e44:	75 81       	ldd	r23, Z+5	; 0x05
     e46:	86 81       	ldd	r24, Z+6	; 0x06
     e48:	97 81       	ldd	r25, Z+7	; 0x07
     e4a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__fixsfsi>
     e4e:	cb 01       	movw	r24, r22
     e50:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <m_usb_tx_int>
			m_usb_tx_string(" ");
     e54:	8a ef       	ldi	r24, 0xFA	; 250
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 c6 09 	call	0x138c	; 0x138c <print_P>
			m_usb_tx_int((int)robotCenter[2]);
     e5c:	f8 01       	movw	r30, r16
     e5e:	60 85       	ldd	r22, Z+8	; 0x08
     e60:	71 85       	ldd	r23, Z+9	; 0x09
     e62:	82 85       	ldd	r24, Z+10	; 0x0a
     e64:	93 85       	ldd	r25, Z+11	; 0x0b
     e66:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__fixsfsi>
     e6a:	cb 01       	movw	r24, r22
     e6c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <m_usb_tx_int>
			m_usb_tx_string("\n");
     e70:	88 ef       	ldi	r24, 0xF8	; 248
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 c6 09 	call	0x138c	; 0x138c <print_P>

		}
		
		
    }
     e78:	80 cf       	rjmp	.-256    	; 0xd7a <main+0x3e>

00000e7a <m_bus_init>:
     e7a:	58 9a       	sbi	0x0b, 0	; 11
     e7c:	59 9a       	sbi	0x0b, 1	; 11
     e7e:	5a 9a       	sbi	0x0b, 2	; 11
     e80:	8c e0       	ldi	r24, 0x0C	; 12
     e82:	80 93 b8 00 	sts	0x00B8, r24
     e86:	e9 e6       	ldi	r30, 0x69	; 105
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	80 62       	ori	r24, 0x20	; 32
     e8e:	80 83       	st	Z, r24
     e90:	80 81       	ld	r24, Z
     e92:	8f 7e       	andi	r24, 0xEF	; 239
     e94:	80 83       	st	Z, r24
     e96:	ea 9a       	sbi	0x1d, 2	; 29
     e98:	78 94       	sei
     e9a:	08 95       	ret

00000e9c <m_usb_init>:
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	80 93 d7 00 	sts	0x00D7, r24
     ea2:	80 ea       	ldi	r24, 0xA0	; 160
     ea4:	80 93 d8 00 	sts	0x00D8, r24
     ea8:	82 e1       	ldi	r24, 0x12	; 18
     eaa:	89 bd       	out	0x29, r24	; 41
     eac:	09 b4       	in	r0, 0x29	; 41
     eae:	00 fe       	sbrs	r0, 0
     eb0:	fd cf       	rjmp	.-6      	; 0xeac <m_usb_init+0x10>
     eb2:	80 e9       	ldi	r24, 0x90	; 144
     eb4:	80 93 d8 00 	sts	0x00D8, r24
     eb8:	10 92 e0 00 	sts	0x00E0, r1
     ebc:	10 92 57 01 	sts	0x0157, r1
     ec0:	10 92 54 01 	sts	0x0154, r1
     ec4:	8c e0       	ldi	r24, 0x0C	; 12
     ec6:	80 93 e2 00 	sts	0x00E2, r24
     eca:	78 94       	sei
     ecc:	08 95       	ret

00000ece <m_usb_rx_char>:
     ece:	9f b7       	in	r25, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	80 91 57 01 	lds	r24, 0x0157
     ed6:	81 11       	cpse	r24, r1
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <m_usb_rx_char+0x12>
     eda:	9f bf       	out	0x3f, r25	; 63
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	08 95       	ret
     ee0:	83 e0       	ldi	r24, 0x03	; 3
     ee2:	80 93 e9 00 	sts	0x00E9, r24
     ee6:	80 91 e8 00 	lds	r24, 0x00E8
     eea:	85 fd       	sbrc	r24, 5
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <m_usb_rx_char+0x26>
     eee:	9f bf       	out	0x3f, r25	; 63
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	08 95       	ret
     ef4:	80 91 f1 00 	lds	r24, 0x00F1
     ef8:	20 91 e8 00 	lds	r18, 0x00E8
     efc:	25 fd       	sbrc	r18, 5
     efe:	03 c0       	rjmp	.+6      	; 0xf06 <m_usb_rx_char+0x38>
     f00:	2b e6       	ldi	r18, 0x6B	; 107
     f02:	20 93 e8 00 	sts	0x00E8, r18
     f06:	9f bf       	out	0x3f, r25	; 63
     f08:	08 95       	ret

00000f0a <m_usb_rx_available>:
     f0a:	9f b7       	in	r25, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	80 91 57 01 	lds	r24, 0x0157
     f12:	88 23       	and	r24, r24
     f14:	31 f0       	breq	.+12     	; 0xf22 <m_usb_rx_available+0x18>
     f16:	83 e0       	ldi	r24, 0x03	; 3
     f18:	80 93 e9 00 	sts	0x00E9, r24
     f1c:	80 91 f2 00 	lds	r24, 0x00F2
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <m_usb_rx_available+0x1a>
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	9f bf       	out	0x3f, r25	; 63
     f26:	08 95       	ret

00000f28 <m_usb_rx_flush>:
     f28:	80 91 57 01 	lds	r24, 0x0157
     f2c:	88 23       	and	r24, r24
     f2e:	89 f0       	breq	.+34     	; 0xf52 <m_usb_rx_flush+0x2a>
     f30:	2f b7       	in	r18, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	83 e0       	ldi	r24, 0x03	; 3
     f36:	80 93 e9 00 	sts	0x00E9, r24
     f3a:	80 91 e8 00 	lds	r24, 0x00E8
     f3e:	85 ff       	sbrs	r24, 5
     f40:	07 c0       	rjmp	.+14     	; 0xf50 <m_usb_rx_flush+0x28>
     f42:	e8 ee       	ldi	r30, 0xE8	; 232
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	9b e6       	ldi	r25, 0x6B	; 107
     f48:	90 83       	st	Z, r25
     f4a:	80 81       	ld	r24, Z
     f4c:	85 fd       	sbrc	r24, 5
     f4e:	fc cf       	rjmp	.-8      	; 0xf48 <m_usb_rx_flush+0x20>
     f50:	2f bf       	out	0x3f, r18	; 63
     f52:	08 95       	ret

00000f54 <m_usb_tx_char>:
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	90 91 57 01 	lds	r25, 0x0157
     f5c:	99 23       	and	r25, r25
     f5e:	09 f4       	brne	.+2      	; 0xf62 <m_usb_tx_char+0xe>
     f60:	4c c0       	rjmp	.+152    	; 0xffa <m_usb_tx_char+0xa6>
     f62:	9f b7       	in	r25, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	24 e0       	ldi	r18, 0x04	; 4
     f68:	20 93 e9 00 	sts	0x00E9, r18
     f6c:	20 91 55 01 	lds	r18, 0x0155
     f70:	22 23       	and	r18, r18
     f72:	49 f0       	breq	.+18     	; 0xf86 <m_usb_tx_char+0x32>
     f74:	20 91 e8 00 	lds	r18, 0x00E8
     f78:	25 fd       	sbrc	r18, 5
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <m_usb_tx_char+0x2e>
     f7c:	9f bf       	out	0x3f, r25	; 63
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	41 c0       	rjmp	.+130    	; 0x1004 <m_usb_tx_char+0xb0>
     f82:	10 92 55 01 	sts	0x0155, r1
     f86:	30 91 e4 00 	lds	r19, 0x00E4
     f8a:	37 5e       	subi	r19, 0xE7	; 231
     f8c:	20 91 e8 00 	lds	r18, 0x00E8
     f90:	25 fd       	sbrc	r18, 5
     f92:	24 c0       	rjmp	.+72     	; 0xfdc <m_usb_tx_char+0x88>
     f94:	9f bf       	out	0x3f, r25	; 63
     f96:	90 91 e4 00 	lds	r25, 0x00E4
     f9a:	93 17       	cp	r25, r19
     f9c:	81 f0       	breq	.+32     	; 0xfbe <m_usb_tx_char+0x6a>
     f9e:	90 91 57 01 	lds	r25, 0x0157
     fa2:	99 23       	and	r25, r25
     fa4:	61 f1       	breq	.+88     	; 0xffe <m_usb_tx_char+0xaa>
     fa6:	a9 ee       	ldi	r26, 0xE9	; 233
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	44 e0       	ldi	r20, 0x04	; 4
     fac:	e8 ee       	ldi	r30, 0xE8	; 232
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	c4 ee       	ldi	r28, 0xE4	; 228
     fb2:	d0 e0       	ldi	r29, 0x00	; 0
     fb4:	0d c0       	rjmp	.+26     	; 0xfd0 <m_usb_tx_char+0x7c>
     fb6:	9f bf       	out	0x3f, r25	; 63
     fb8:	98 81       	ld	r25, Y
     fba:	93 13       	cpse	r25, r19
     fbc:	05 c0       	rjmp	.+10     	; 0xfc8 <m_usb_tx_char+0x74>
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	80 93 55 01 	sts	0x0155, r24
     fc4:	8f ef       	ldi	r24, 0xFF	; 255
     fc6:	1e c0       	rjmp	.+60     	; 0x1004 <m_usb_tx_char+0xb0>
     fc8:	90 91 57 01 	lds	r25, 0x0157
     fcc:	99 23       	and	r25, r25
     fce:	c9 f0       	breq	.+50     	; 0x1002 <m_usb_tx_char+0xae>
     fd0:	9f b7       	in	r25, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	4c 93       	st	X, r20
     fd6:	20 81       	ld	r18, Z
     fd8:	25 ff       	sbrs	r18, 5
     fda:	ed cf       	rjmp	.-38     	; 0xfb6 <m_usb_tx_char+0x62>
     fdc:	80 93 f1 00 	sts	0x00F1, r24
     fe0:	80 91 e8 00 	lds	r24, 0x00E8
     fe4:	85 fd       	sbrc	r24, 5
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <m_usb_tx_char+0x9a>
     fe8:	8a e3       	ldi	r24, 0x3A	; 58
     fea:	80 93 e8 00 	sts	0x00E8, r24
     fee:	85 e0       	ldi	r24, 0x05	; 5
     ff0:	80 93 56 01 	sts	0x0156, r24
     ff4:	9f bf       	out	0x3f, r25	; 63
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <m_usb_tx_char+0xb0>
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <m_usb_tx_char+0xb0>
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <m_usb_tx_char+0xb0>
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret

0000100a <__vector_10>:
    100a:	1f 92       	push	r1
    100c:	0f 92       	push	r0
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	0f 92       	push	r0
    1012:	11 24       	eor	r1, r1
    1014:	8f 93       	push	r24
    1016:	9f 93       	push	r25
    1018:	ef 93       	push	r30
    101a:	ff 93       	push	r31
    101c:	e1 ee       	ldi	r30, 0xE1	; 225
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	10 82       	st	Z, r1
    1024:	83 ff       	sbrs	r24, 3
    1026:	11 c0       	rjmp	.+34     	; 0x104a <__vector_10+0x40>
    1028:	10 92 e9 00 	sts	0x00E9, r1
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	90 93 eb 00 	sts	0x00EB, r25
    1032:	10 92 ec 00 	sts	0x00EC, r1
    1036:	92 e1       	ldi	r25, 0x12	; 18
    1038:	90 93 ed 00 	sts	0x00ED, r25
    103c:	98 e0       	ldi	r25, 0x08	; 8
    103e:	90 93 f0 00 	sts	0x00F0, r25
    1042:	10 92 57 01 	sts	0x0157, r1
    1046:	10 92 54 01 	sts	0x0154, r1
    104a:	82 ff       	sbrs	r24, 2
    104c:	13 c0       	rjmp	.+38     	; 0x1074 <__vector_10+0x6a>
    104e:	80 91 57 01 	lds	r24, 0x0157
    1052:	88 23       	and	r24, r24
    1054:	79 f0       	breq	.+30     	; 0x1074 <__vector_10+0x6a>
    1056:	80 91 56 01 	lds	r24, 0x0156
    105a:	88 23       	and	r24, r24
    105c:	59 f0       	breq	.+22     	; 0x1074 <__vector_10+0x6a>
    105e:	81 50       	subi	r24, 0x01	; 1
    1060:	80 93 56 01 	sts	0x0156, r24
    1064:	81 11       	cpse	r24, r1
    1066:	06 c0       	rjmp	.+12     	; 0x1074 <__vector_10+0x6a>
    1068:	84 e0       	ldi	r24, 0x04	; 4
    106a:	80 93 e9 00 	sts	0x00E9, r24
    106e:	8a e3       	ldi	r24, 0x3A	; 58
    1070:	80 93 e8 00 	sts	0x00E8, r24
    1074:	ff 91       	pop	r31
    1076:	ef 91       	pop	r30
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	0f 90       	pop	r0
    1082:	1f 90       	pop	r1
    1084:	18 95       	reti

00001086 <__vector_11>:
    1086:	1f 92       	push	r1
    1088:	0f 92       	push	r0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	0f 92       	push	r0
    108e:	11 24       	eor	r1, r1
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	2f 93       	push	r18
    1096:	3f 93       	push	r19
    1098:	4f 93       	push	r20
    109a:	5f 93       	push	r21
    109c:	6f 93       	push	r22
    109e:	7f 93       	push	r23
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
    10b0:	10 92 e9 00 	sts	0x00E9, r1
    10b4:	80 91 e8 00 	lds	r24, 0x00E8
    10b8:	83 ff       	sbrs	r24, 3
    10ba:	4c c1       	rjmp	.+664    	; 0x1354 <__vector_11+0x2ce>
    10bc:	e1 ef       	ldi	r30, 0xF1	; 241
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	60 81       	ld	r22, Z
    10c2:	80 81       	ld	r24, Z
    10c4:	20 81       	ld	r18, Z
    10c6:	90 81       	ld	r25, Z
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	39 2b       	or	r19, r25
    10cc:	40 81       	ld	r20, Z
    10ce:	90 81       	ld	r25, Z
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	59 2b       	or	r21, r25
    10d4:	70 81       	ld	r23, Z
    10d6:	c0 81       	ld	r28, Z
    10d8:	92 ef       	ldi	r25, 0xF2	; 242
    10da:	90 93 e8 00 	sts	0x00E8, r25
    10de:	86 30       	cpi	r24, 0x06	; 6
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <__vector_11+0x5e>
    10e2:	58 c0       	rjmp	.+176    	; 0x1194 <__vector_11+0x10e>
    10e4:	04 c0       	rjmp	.+8      	; 0x10ee <__vector_11+0x68>
    10e6:	81 e2       	ldi	r24, 0x21	; 33
    10e8:	80 93 eb 00 	sts	0x00EB, r24
    10ec:	3a c1       	rjmp	.+628    	; 0x1362 <__vector_11+0x2dc>
    10ee:	66 e0       	ldi	r22, 0x06	; 6
    10f0:	8e ef       	ldi	r24, 0xFE	; 254
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	fc 01       	movw	r30, r24
    10f6:	a5 91       	lpm	r26, Z+
    10f8:	b4 91       	lpm	r27, Z
    10fa:	2a 17       	cp	r18, r26
    10fc:	3b 07       	cpc	r19, r27
    10fe:	11 f0       	breq	.+4      	; 0x1104 <__vector_11+0x7e>
    1100:	07 96       	adiw	r24, 0x07	; 7
    1102:	23 c0       	rjmp	.+70     	; 0x114a <__vector_11+0xc4>
    1104:	fc 01       	movw	r30, r24
    1106:	32 96       	adiw	r30, 0x02	; 2
    1108:	a5 91       	lpm	r26, Z+
    110a:	b4 91       	lpm	r27, Z
    110c:	4a 17       	cp	r20, r26
    110e:	5b 07       	cpc	r21, r27
    1110:	11 f0       	breq	.+4      	; 0x1116 <__vector_11+0x90>
    1112:	07 96       	adiw	r24, 0x07	; 7
    1114:	1a c0       	rjmp	.+52     	; 0x114a <__vector_11+0xc4>
    1116:	fc 01       	movw	r30, r24
    1118:	34 96       	adiw	r30, 0x04	; 4
    111a:	45 91       	lpm	r20, Z+
    111c:	54 91       	lpm	r21, Z
    111e:	fc 01       	movw	r30, r24
    1120:	36 96       	adiw	r30, 0x06	; 6
    1122:	24 91       	lpm	r18, Z
    1124:	87 2f       	mov	r24, r23
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9c 2b       	or	r25, r28
    112a:	8f 3f       	cpi	r24, 0xFF	; 255
    112c:	91 05       	cpc	r25, r1
    112e:	19 f0       	breq	.+6      	; 0x1136 <__vector_11+0xb0>
    1130:	10 f0       	brcs	.+4      	; 0x1136 <__vector_11+0xb0>
    1132:	8f ef       	ldi	r24, 0xFF	; 255
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	82 17       	cp	r24, r18
    1138:	08 f4       	brcc	.+2      	; 0x113c <__vector_11+0xb6>
    113a:	28 2f       	mov	r18, r24
    113c:	a8 ee       	ldi	r26, 0xE8	; 232
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	70 e1       	ldi	r23, 0x10	; 16
    1142:	6e ef       	ldi	r22, 0xFE	; 254
    1144:	c1 ef       	ldi	r28, 0xF1	; 241
    1146:	d0 e0       	ldi	r29, 0x00	; 0
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <__vector_11+0xca>
    114a:	61 50       	subi	r22, 0x01	; 1
    114c:	99 f6       	brne	.-90     	; 0x10f4 <__vector_11+0x6e>
    114e:	cb cf       	rjmp	.-106    	; 0x10e6 <__vector_11+0x60>
    1150:	8c 91       	ld	r24, X
    1152:	98 2f       	mov	r25, r24
    1154:	95 70       	andi	r25, 0x05	; 5
    1156:	e1 f3       	breq	.-8      	; 0x1150 <__vector_11+0xca>
    1158:	82 fd       	sbrc	r24, 2
    115a:	03 c1       	rjmp	.+518    	; 0x1362 <__vector_11+0x2dc>
    115c:	32 2f       	mov	r19, r18
    115e:	21 31       	cpi	r18, 0x11	; 17
    1160:	08 f0       	brcs	.+2      	; 0x1164 <__vector_11+0xde>
    1162:	37 2f       	mov	r19, r23
    1164:	33 23       	and	r19, r19
    1166:	09 f4       	brne	.+2      	; 0x116a <__vector_11+0xe4>
    1168:	f9 c0       	rjmp	.+498    	; 0x135c <__vector_11+0x2d6>
    116a:	fa 01       	movw	r30, r20
    116c:	83 2f       	mov	r24, r19
    116e:	94 91       	lpm	r25, Z
    1170:	98 83       	st	Y, r25
    1172:	81 50       	subi	r24, 0x01	; 1
    1174:	31 96       	adiw	r30, 0x01	; 1
    1176:	81 11       	cpse	r24, r1
    1178:	fa cf       	rjmp	.-12     	; 0x116e <__vector_11+0xe8>
    117a:	8f ef       	ldi	r24, 0xFF	; 255
    117c:	83 0f       	add	r24, r19
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	48 0f       	add	r20, r24
    1184:	59 1f       	adc	r21, r25
    1186:	23 1b       	sub	r18, r19
    1188:	6c 93       	st	X, r22
    118a:	21 11       	cpse	r18, r1
    118c:	e1 cf       	rjmp	.-62     	; 0x1150 <__vector_11+0xca>
    118e:	30 31       	cpi	r19, 0x10	; 16
    1190:	f9 f2       	breq	.-66     	; 0x1150 <__vector_11+0xca>
    1192:	e7 c0       	rjmp	.+462    	; 0x1362 <__vector_11+0x2dc>
    1194:	85 30       	cpi	r24, 0x05	; 5
    1196:	61 f4       	brne	.+24     	; 0x11b0 <__vector_11+0x12a>
    1198:	8e ef       	ldi	r24, 0xFE	; 254
    119a:	80 93 e8 00 	sts	0x00E8, r24
    119e:	e8 ee       	ldi	r30, 0xE8	; 232
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	80 ff       	sbrs	r24, 0
    11a6:	fd cf       	rjmp	.-6      	; 0x11a2 <__vector_11+0x11c>
    11a8:	20 68       	ori	r18, 0x80	; 128
    11aa:	20 93 e3 00 	sts	0x00E3, r18
    11ae:	d9 c0       	rjmp	.+434    	; 0x1362 <__vector_11+0x2dc>
    11b0:	89 30       	cpi	r24, 0x09	; 9
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <__vector_11+0x130>
    11b4:	35 c0       	rjmp	.+106    	; 0x1220 <__vector_11+0x19a>
    11b6:	61 11       	cpse	r22, r1
    11b8:	cd c0       	rjmp	.+410    	; 0x1354 <__vector_11+0x2ce>
    11ba:	20 93 57 01 	sts	0x0157, r18
    11be:	10 92 54 01 	sts	0x0154, r1
    11c2:	10 92 56 01 	sts	0x0156, r1
    11c6:	8e ef       	ldi	r24, 0xFE	; 254
    11c8:	80 93 e8 00 	sts	0x00E8, r24
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	27 ea       	ldi	r18, 0xA7	; 167
    11d0:	31 e0       	ldi	r19, 0x01	; 1
    11d2:	c9 ee       	ldi	r28, 0xE9	; 233
    11d4:	d0 e0       	ldi	r29, 0x00	; 0
    11d6:	ab ee       	ldi	r26, 0xEB	; 235
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	0c ee       	ldi	r16, 0xEC	; 236
    11dc:	10 e0       	ldi	r17, 0x00	; 0
    11de:	6d ee       	ldi	r22, 0xED	; 237
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	88 83       	st	Y, r24
    11e4:	a9 01       	movw	r20, r18
    11e6:	4f 5f       	subi	r20, 0xFF	; 255
    11e8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ea:	f9 01       	movw	r30, r18
    11ec:	94 91       	lpm	r25, Z
    11ee:	9c 93       	st	X, r25
    11f0:	99 23       	and	r25, r25
    11f2:	61 f0       	breq	.+24     	; 0x120c <__vector_11+0x186>
    11f4:	fa 01       	movw	r30, r20
    11f6:	44 91       	lpm	r20, Z
    11f8:	f8 01       	movw	r30, r16
    11fa:	40 83       	st	Z, r20
    11fc:	f9 01       	movw	r30, r18
    11fe:	32 96       	adiw	r30, 0x02	; 2
    1200:	94 91       	lpm	r25, Z
    1202:	2d 5f       	subi	r18, 0xFD	; 253
    1204:	3f 4f       	sbci	r19, 0xFF	; 255
    1206:	fb 01       	movw	r30, r22
    1208:	90 83       	st	Z, r25
    120a:	01 c0       	rjmp	.+2      	; 0x120e <__vector_11+0x188>
    120c:	9a 01       	movw	r18, r20
    120e:	8f 5f       	subi	r24, 0xFF	; 255
    1210:	85 30       	cpi	r24, 0x05	; 5
    1212:	39 f7       	brne	.-50     	; 0x11e2 <__vector_11+0x15c>
    1214:	ea ee       	ldi	r30, 0xEA	; 234
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8e e1       	ldi	r24, 0x1E	; 30
    121a:	80 83       	st	Z, r24
    121c:	10 82       	st	Z, r1
    121e:	a1 c0       	rjmp	.+322    	; 0x1362 <__vector_11+0x2dc>
    1220:	88 30       	cpi	r24, 0x08	; 8
    1222:	81 f4       	brne	.+32     	; 0x1244 <__vector_11+0x1be>
    1224:	60 38       	cpi	r22, 0x80	; 128
    1226:	09 f0       	breq	.+2      	; 0x122a <__vector_11+0x1a4>
    1228:	95 c0       	rjmp	.+298    	; 0x1354 <__vector_11+0x2ce>
    122a:	e8 ee       	ldi	r30, 0xE8	; 232
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	80 ff       	sbrs	r24, 0
    1232:	fd cf       	rjmp	.-6      	; 0x122e <__vector_11+0x1a8>
    1234:	80 91 57 01 	lds	r24, 0x0157
    1238:	80 93 f1 00 	sts	0x00F1, r24
    123c:	8e ef       	ldi	r24, 0xFE	; 254
    123e:	80 93 e8 00 	sts	0x00E8, r24
    1242:	8f c0       	rjmp	.+286    	; 0x1362 <__vector_11+0x2dc>
    1244:	81 32       	cpi	r24, 0x21	; 33
    1246:	b9 f4       	brne	.+46     	; 0x1276 <__vector_11+0x1f0>
    1248:	61 3a       	cpi	r22, 0xA1	; 161
    124a:	09 f0       	breq	.+2      	; 0x124e <__vector_11+0x1c8>
    124c:	83 c0       	rjmp	.+262    	; 0x1354 <__vector_11+0x2ce>
    124e:	e8 ee       	ldi	r30, 0xE8	; 232
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	80 ff       	sbrs	r24, 0
    1256:	fd cf       	rjmp	.-6      	; 0x1252 <__vector_11+0x1cc>
    1258:	e0 e0       	ldi	r30, 0x00	; 0
    125a:	f1 e0       	ldi	r31, 0x01	; 1
    125c:	27 e0       	ldi	r18, 0x07	; 7
    125e:	31 e0       	ldi	r19, 0x01	; 1
    1260:	a1 ef       	ldi	r26, 0xF1	; 241
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	81 91       	ld	r24, Z+
    1266:	8c 93       	st	X, r24
    1268:	e2 17       	cp	r30, r18
    126a:	f3 07       	cpc	r31, r19
    126c:	d9 f7       	brne	.-10     	; 0x1264 <__vector_11+0x1de>
    126e:	8e ef       	ldi	r24, 0xFE	; 254
    1270:	80 93 e8 00 	sts	0x00E8, r24
    1274:	76 c0       	rjmp	.+236    	; 0x1362 <__vector_11+0x2dc>
    1276:	80 32       	cpi	r24, 0x20	; 32
    1278:	d1 f4       	brne	.+52     	; 0x12ae <__vector_11+0x228>
    127a:	61 32       	cpi	r22, 0x21	; 33
    127c:	09 f0       	breq	.+2      	; 0x1280 <__vector_11+0x1fa>
    127e:	6a c0       	rjmp	.+212    	; 0x1354 <__vector_11+0x2ce>
    1280:	e8 ee       	ldi	r30, 0xE8	; 232
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	82 ff       	sbrs	r24, 2
    1288:	fd cf       	rjmp	.-6      	; 0x1284 <__vector_11+0x1fe>
    128a:	e0 e0       	ldi	r30, 0x00	; 0
    128c:	f1 e0       	ldi	r31, 0x01	; 1
    128e:	27 e0       	ldi	r18, 0x07	; 7
    1290:	31 e0       	ldi	r19, 0x01	; 1
    1292:	a1 ef       	ldi	r26, 0xF1	; 241
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	8c 91       	ld	r24, X
    1298:	81 93       	st	Z+, r24
    129a:	e2 17       	cp	r30, r18
    129c:	f3 07       	cpc	r31, r19
    129e:	d9 f7       	brne	.-10     	; 0x1296 <__vector_11+0x210>
    12a0:	e8 ee       	ldi	r30, 0xE8	; 232
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8b ef       	ldi	r24, 0xFB	; 251
    12a6:	80 83       	st	Z, r24
    12a8:	8e ef       	ldi	r24, 0xFE	; 254
    12aa:	80 83       	st	Z, r24
    12ac:	5a c0       	rjmp	.+180    	; 0x1362 <__vector_11+0x2dc>
    12ae:	82 32       	cpi	r24, 0x22	; 34
    12b0:	71 f4       	brne	.+28     	; 0x12ce <__vector_11+0x248>
    12b2:	61 32       	cpi	r22, 0x21	; 33
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <__vector_11+0x232>
    12b6:	4e c0       	rjmp	.+156    	; 0x1354 <__vector_11+0x2ce>
    12b8:	20 93 54 01 	sts	0x0154, r18
    12bc:	e8 ee       	ldi	r30, 0xE8	; 232
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	80 ff       	sbrs	r24, 0
    12c4:	fd cf       	rjmp	.-6      	; 0x12c0 <__vector_11+0x23a>
    12c6:	8e ef       	ldi	r24, 0xFE	; 254
    12c8:	80 93 e8 00 	sts	0x00E8, r24
    12cc:	4a c0       	rjmp	.+148    	; 0x1362 <__vector_11+0x2dc>
    12ce:	81 11       	cpse	r24, r1
    12d0:	1a c0       	rjmp	.+52     	; 0x1306 <__vector_11+0x280>
    12d2:	e8 ee       	ldi	r30, 0xE8	; 232
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 ff       	sbrs	r24, 0
    12da:	fd cf       	rjmp	.-6      	; 0x12d6 <__vector_11+0x250>
    12dc:	62 38       	cpi	r22, 0x82	; 130
    12de:	51 f4       	brne	.+20     	; 0x12f4 <__vector_11+0x26e>
    12e0:	e9 ee       	ldi	r30, 0xE9	; 233
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	40 83       	st	Z, r20
    12e6:	80 91 eb 00 	lds	r24, 0x00EB
    12ea:	85 fb       	bst	r24, 5
    12ec:	88 27       	eor	r24, r24
    12ee:	80 f9       	bld	r24, 0
    12f0:	10 82       	st	Z, r1
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <__vector_11+0x270>
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	e1 ef       	ldi	r30, 0xF1	; 241
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 83       	st	Z, r24
    12fc:	10 82       	st	Z, r1
    12fe:	8e ef       	ldi	r24, 0xFE	; 254
    1300:	80 93 e8 00 	sts	0x00E8, r24
    1304:	2e c0       	rjmp	.+92     	; 0x1362 <__vector_11+0x2dc>
    1306:	98 2f       	mov	r25, r24
    1308:	9d 7f       	andi	r25, 0xFD	; 253
    130a:	91 30       	cpi	r25, 0x01	; 1
    130c:	19 f5       	brne	.+70     	; 0x1354 <__vector_11+0x2ce>
    130e:	62 30       	cpi	r22, 0x02	; 2
    1310:	09 f5       	brne	.+66     	; 0x1354 <__vector_11+0x2ce>
    1312:	23 2b       	or	r18, r19
    1314:	f9 f4       	brne	.+62     	; 0x1354 <__vector_11+0x2ce>
    1316:	4f 77       	andi	r20, 0x7F	; 127
    1318:	9f ef       	ldi	r25, 0xFF	; 255
    131a:	94 0f       	add	r25, r20
    131c:	94 30       	cpi	r25, 0x04	; 4
    131e:	d0 f4       	brcc	.+52     	; 0x1354 <__vector_11+0x2ce>
    1320:	9e ef       	ldi	r25, 0xFE	; 254
    1322:	90 93 e8 00 	sts	0x00E8, r25
    1326:	40 93 e9 00 	sts	0x00E9, r20
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	21 f4       	brne	.+8      	; 0x1336 <__vector_11+0x2b0>
    132e:	81 e2       	ldi	r24, 0x21	; 33
    1330:	80 93 eb 00 	sts	0x00EB, r24
    1334:	16 c0       	rjmp	.+44     	; 0x1362 <__vector_11+0x2dc>
    1336:	89 e1       	ldi	r24, 0x19	; 25
    1338:	80 93 eb 00 	sts	0x00EB, r24
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <__vector_11+0x2c0>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	4a 95       	dec	r20
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <__vector_11+0x2bc>
    134a:	ea ee       	ldi	r30, 0xEA	; 234
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 83       	st	Z, r24
    1350:	10 82       	st	Z, r1
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <__vector_11+0x2dc>
    1354:	81 e2       	ldi	r24, 0x21	; 33
    1356:	80 93 eb 00 	sts	0x00EB, r24
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <__vector_11+0x2dc>
    135c:	6c 93       	st	X, r22
    135e:	21 11       	cpse	r18, r1
    1360:	f7 ce       	rjmp	.-530    	; 0x1150 <__vector_11+0xca>
    1362:	ff 91       	pop	r31
    1364:	ef 91       	pop	r30
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	bf 91       	pop	r27
    136c:	af 91       	pop	r26
    136e:	9f 91       	pop	r25
    1370:	8f 91       	pop	r24
    1372:	7f 91       	pop	r23
    1374:	6f 91       	pop	r22
    1376:	5f 91       	pop	r21
    1378:	4f 91       	pop	r20
    137a:	3f 91       	pop	r19
    137c:	2f 91       	pop	r18
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	0f 90       	pop	r0
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	0f 90       	pop	r0
    1388:	1f 90       	pop	r1
    138a:	18 95       	reti

0000138c <print_P>:
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	8c 01       	movw	r16, r24
    1394:	0f 5f       	subi	r16, 0xFF	; 255
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
    1398:	fc 01       	movw	r30, r24
    139a:	c4 91       	lpm	r28, Z
    139c:	cc 23       	and	r28, r28
    139e:	71 f0       	breq	.+28     	; 0x13bc <print_P+0x30>
    13a0:	ca 30       	cpi	r28, 0x0A	; 10
    13a2:	19 f4       	brne	.+6      	; 0x13aa <print_P+0x1e>
    13a4:	8d e0       	ldi	r24, 0x0D	; 13
    13a6:	0e 94 aa 07 	call	0xf54	; 0xf54 <m_usb_tx_char>
    13aa:	8c 2f       	mov	r24, r28
    13ac:	0e 94 aa 07 	call	0xf54	; 0xf54 <m_usb_tx_char>
    13b0:	f8 01       	movw	r30, r16
    13b2:	c4 91       	lpm	r28, Z
    13b4:	0f 5f       	subi	r16, 0xFF	; 255
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
    13b8:	c1 11       	cpse	r28, r1
    13ba:	f2 cf       	rjmp	.-28     	; 0x13a0 <print_P+0x14>
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	08 95       	ret

000013c4 <m_usb_tx_int>:
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	27 97       	sbiw	r28, 0x07	; 7
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	8e 01       	movw	r16, r28
    13e2:	0f 5f       	subi	r16, 0xFF	; 255
    13e4:	1f 4f       	sbci	r17, 0xFF	; 255
    13e6:	27 e0       	ldi	r18, 0x07	; 7
    13e8:	f8 01       	movw	r30, r16
    13ea:	11 92       	st	Z+, r1
    13ec:	2a 95       	dec	r18
    13ee:	e9 f7       	brne	.-6      	; 0x13ea <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    13f0:	4a e0       	ldi	r20, 0x0A	; 10
    13f2:	b8 01       	movw	r22, r16
    13f4:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__itoa_ncheck>
    13f8:	7e 01       	movw	r14, r28
    13fa:	f8 e0       	ldi	r31, 0x08	; 8
    13fc:	ef 0e       	add	r14, r31
    13fe:	f1 1c       	adc	r15, r1
    1400:	f8 01       	movw	r30, r16
    1402:	81 91       	ld	r24, Z+
    1404:	8f 01       	movw	r16, r30
    1406:	81 11       	cpse	r24, r1
    1408:	0e 94 aa 07 	call	0xf54	; 0xf54 <m_usb_tx_char>
    140c:	0e 15       	cp	r16, r14
    140e:	1f 05       	cpc	r17, r15
    1410:	b9 f7       	brne	.-18     	; 0x1400 <m_usb_tx_int+0x3c>
    1412:	27 96       	adiw	r28, 0x07	; 7
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	ff 90       	pop	r15
    1428:	ef 90       	pop	r14
    142a:	08 95       	ret

0000142c <twi_wait>:
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	ec eb       	ldi	r30, 0xBC	; 188
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	88 23       	and	r24, r24
    1438:	34 f0       	brlt	.+12     	; 0x1446 <twi_wait+0x1a>
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	29 3e       	cpi	r18, 0xE9	; 233
    1440:	83 e0       	ldi	r24, 0x03	; 3
    1442:	38 07       	cpc	r19, r24
    1444:	b9 f7       	brne	.-18     	; 0x1434 <twi_wait+0x8>
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	28 3e       	cpi	r18, 0xE8	; 232
    144a:	33 40       	sbci	r19, 0x03	; 3
    144c:	09 f4       	brne	.+2      	; 0x1450 <twi_wait+0x24>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	08 95       	ret

00001452 <send_byte>:
    1452:	80 93 bb 00 	sts	0x00BB, r24
    1456:	84 e8       	ldi	r24, 0x84	; 132
    1458:	80 93 bc 00 	sts	0x00BC, r24
    145c:	0e 94 16 0a 	call	0x142c	; 0x142c <twi_wait>
    1460:	88 23       	and	r24, r24
    1462:	19 f0       	breq	.+6      	; 0x146a <send_byte+0x18>
    1464:	80 91 b9 00 	lds	r24, 0x00B9
    1468:	88 7f       	andi	r24, 0xF8	; 248
    146a:	08 95       	ret

0000146c <start_write>:
    146c:	cf 93       	push	r28
    146e:	c8 2f       	mov	r28, r24
    1470:	94 ea       	ldi	r25, 0xA4	; 164
    1472:	90 93 bc 00 	sts	0x00BC, r25
    1476:	0e 94 16 0a 	call	0x142c	; 0x142c <twi_wait>
    147a:	88 23       	and	r24, r24
    147c:	61 f0       	breq	.+24     	; 0x1496 <start_write+0x2a>
    147e:	8c 2f       	mov	r24, r28
    1480:	88 0f       	add	r24, r24
    1482:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    1486:	80 32       	cpi	r24, 0x20	; 32
    1488:	29 f4       	brne	.+10     	; 0x1494 <start_write+0x28>
    148a:	84 e9       	ldi	r24, 0x94	; 148
    148c:	80 93 bc 00 	sts	0x00BC, r24
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <start_write+0x2a>
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <m_wii_open>:
    149a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <m_bus_init>
    149e:	88 e5       	ldi	r24, 0x58	; 88
    14a0:	0e 94 36 0a 	call	0x146c	; 0x146c <start_write>
    14a4:	88 23       	and	r24, r24
    14a6:	09 f4       	brne	.+2      	; 0x14aa <m_wii_open+0x10>
    14a8:	cd c0       	rjmp	.+410    	; 0x1644 <m_wii_open+0x1aa>
    14aa:	80 e3       	ldi	r24, 0x30	; 48
    14ac:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    14b0:	88 23       	and	r24, r24
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <m_wii_open+0x1c>
    14b4:	c9 c0       	rjmp	.+402    	; 0x1648 <m_wii_open+0x1ae>
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    14bc:	88 23       	and	r24, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <m_wii_open+0x28>
    14c0:	c5 c0       	rjmp	.+394    	; 0x164c <m_wii_open+0x1b2>
    14c2:	84 e9       	ldi	r24, 0x94	; 148
    14c4:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14c8:	83 ec       	ldi	r24, 0xC3	; 195
    14ca:	99 e0       	ldi	r25, 0x09	; 9
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <m_wii_open+0x32>
    14d0:	00 c0       	rjmp	.+0      	; 0x14d2 <m_wii_open+0x38>
    14d2:	00 00       	nop
    14d4:	88 e5       	ldi	r24, 0x58	; 88
    14d6:	0e 94 36 0a 	call	0x146c	; 0x146c <start_write>
    14da:	88 23       	and	r24, r24
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <m_wii_open+0x46>
    14de:	b8 c0       	rjmp	.+368    	; 0x1650 <m_wii_open+0x1b6>
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    14e6:	88 23       	and	r24, r24
    14e8:	09 f4       	brne	.+2      	; 0x14ec <m_wii_open+0x52>
    14ea:	b4 c0       	rjmp	.+360    	; 0x1654 <m_wii_open+0x1ba>
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    14f2:	88 23       	and	r24, r24
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <m_wii_open+0x5e>
    14f6:	b0 c0       	rjmp	.+352    	; 0x1658 <m_wii_open+0x1be>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    14fe:	88 23       	and	r24, r24
    1500:	09 f4       	brne	.+2      	; 0x1504 <m_wii_open+0x6a>
    1502:	ac c0       	rjmp	.+344    	; 0x165c <m_wii_open+0x1c2>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    150a:	88 23       	and	r24, r24
    150c:	09 f4       	brne	.+2      	; 0x1510 <m_wii_open+0x76>
    150e:	a8 c0       	rjmp	.+336    	; 0x1660 <m_wii_open+0x1c6>
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    1516:	88 23       	and	r24, r24
    1518:	09 f4       	brne	.+2      	; 0x151c <m_wii_open+0x82>
    151a:	a4 c0       	rjmp	.+328    	; 0x1664 <m_wii_open+0x1ca>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    1522:	88 23       	and	r24, r24
    1524:	09 f4       	brne	.+2      	; 0x1528 <m_wii_open+0x8e>
    1526:	a0 c0       	rjmp	.+320    	; 0x1668 <m_wii_open+0x1ce>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    152e:	88 23       	and	r24, r24
    1530:	09 f4       	brne	.+2      	; 0x1534 <m_wii_open+0x9a>
    1532:	9c c0       	rjmp	.+312    	; 0x166c <m_wii_open+0x1d2>
    1534:	80 e9       	ldi	r24, 0x90	; 144
    1536:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    153a:	88 23       	and	r24, r24
    153c:	09 f4       	brne	.+2      	; 0x1540 <m_wii_open+0xa6>
    153e:	98 c0       	rjmp	.+304    	; 0x1670 <m_wii_open+0x1d6>
    1540:	84 e9       	ldi	r24, 0x94	; 148
    1542:	80 93 bc 00 	sts	0x00BC, r24
    1546:	83 ec       	ldi	r24, 0xC3	; 195
    1548:	99 e0       	ldi	r25, 0x09	; 9
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <m_wii_open+0xb0>
    154e:	00 c0       	rjmp	.+0      	; 0x1550 <m_wii_open+0xb6>
    1550:	00 00       	nop
    1552:	88 e5       	ldi	r24, 0x58	; 88
    1554:	0e 94 36 0a 	call	0x146c	; 0x146c <start_write>
    1558:	88 23       	and	r24, r24
    155a:	09 f4       	brne	.+2      	; 0x155e <m_wii_open+0xc4>
    155c:	8b c0       	rjmp	.+278    	; 0x1674 <m_wii_open+0x1da>
    155e:	87 e0       	ldi	r24, 0x07	; 7
    1560:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    1564:	88 23       	and	r24, r24
    1566:	09 f4       	brne	.+2      	; 0x156a <m_wii_open+0xd0>
    1568:	87 c0       	rjmp	.+270    	; 0x1678 <m_wii_open+0x1de>
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    1570:	88 23       	and	r24, r24
    1572:	09 f4       	brne	.+2      	; 0x1576 <m_wii_open+0xdc>
    1574:	83 c0       	rjmp	.+262    	; 0x167c <m_wii_open+0x1e2>
    1576:	81 e4       	ldi	r24, 0x41	; 65
    1578:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    157c:	88 23       	and	r24, r24
    157e:	09 f4       	brne	.+2      	; 0x1582 <m_wii_open+0xe8>
    1580:	7f c0       	rjmp	.+254    	; 0x1680 <m_wii_open+0x1e6>
    1582:	84 e9       	ldi	r24, 0x94	; 148
    1584:	80 93 bc 00 	sts	0x00BC, r24
    1588:	83 ec       	ldi	r24, 0xC3	; 195
    158a:	99 e0       	ldi	r25, 0x09	; 9
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <m_wii_open+0xf2>
    1590:	00 c0       	rjmp	.+0      	; 0x1592 <m_wii_open+0xf8>
    1592:	00 00       	nop
    1594:	88 e5       	ldi	r24, 0x58	; 88
    1596:	0e 94 36 0a 	call	0x146c	; 0x146c <start_write>
    159a:	88 23       	and	r24, r24
    159c:	09 f4       	brne	.+2      	; 0x15a0 <m_wii_open+0x106>
    159e:	72 c0       	rjmp	.+228    	; 0x1684 <m_wii_open+0x1ea>
    15a0:	8a e1       	ldi	r24, 0x1A	; 26
    15a2:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    15a6:	88 23       	and	r24, r24
    15a8:	09 f4       	brne	.+2      	; 0x15ac <m_wii_open+0x112>
    15aa:	6e c0       	rjmp	.+220    	; 0x1688 <m_wii_open+0x1ee>
    15ac:	80 e4       	ldi	r24, 0x40	; 64
    15ae:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    15b2:	88 23       	and	r24, r24
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <m_wii_open+0x11e>
    15b6:	6a c0       	rjmp	.+212    	; 0x168c <m_wii_open+0x1f2>
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    15be:	88 23       	and	r24, r24
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <m_wii_open+0x12a>
    15c2:	66 c0       	rjmp	.+204    	; 0x1690 <m_wii_open+0x1f6>
    15c4:	84 e9       	ldi	r24, 0x94	; 148
    15c6:	80 93 bc 00 	sts	0x00BC, r24
    15ca:	83 ec       	ldi	r24, 0xC3	; 195
    15cc:	99 e0       	ldi	r25, 0x09	; 9
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <m_wii_open+0x134>
    15d2:	00 c0       	rjmp	.+0      	; 0x15d4 <m_wii_open+0x13a>
    15d4:	00 00       	nop
    15d6:	88 e5       	ldi	r24, 0x58	; 88
    15d8:	0e 94 36 0a 	call	0x146c	; 0x146c <start_write>
    15dc:	88 23       	and	r24, r24
    15de:	09 f4       	brne	.+2      	; 0x15e2 <m_wii_open+0x148>
    15e0:	59 c0       	rjmp	.+178    	; 0x1694 <m_wii_open+0x1fa>
    15e2:	83 e3       	ldi	r24, 0x33	; 51
    15e4:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    15e8:	88 23       	and	r24, r24
    15ea:	09 f4       	brne	.+2      	; 0x15ee <m_wii_open+0x154>
    15ec:	55 c0       	rjmp	.+170    	; 0x1698 <m_wii_open+0x1fe>
    15ee:	83 e0       	ldi	r24, 0x03	; 3
    15f0:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    15f4:	88 23       	and	r24, r24
    15f6:	09 f4       	brne	.+2      	; 0x15fa <m_wii_open+0x160>
    15f8:	51 c0       	rjmp	.+162    	; 0x169c <m_wii_open+0x202>
    15fa:	84 e9       	ldi	r24, 0x94	; 148
    15fc:	80 93 bc 00 	sts	0x00BC, r24
    1600:	83 ec       	ldi	r24, 0xC3	; 195
    1602:	99 e0       	ldi	r25, 0x09	; 9
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <m_wii_open+0x16a>
    1608:	00 c0       	rjmp	.+0      	; 0x160a <m_wii_open+0x170>
    160a:	00 00       	nop
    160c:	88 e5       	ldi	r24, 0x58	; 88
    160e:	0e 94 36 0a 	call	0x146c	; 0x146c <start_write>
    1612:	88 23       	and	r24, r24
    1614:	09 f4       	brne	.+2      	; 0x1618 <m_wii_open+0x17e>
    1616:	44 c0       	rjmp	.+136    	; 0x16a0 <m_wii_open+0x206>
    1618:	80 e3       	ldi	r24, 0x30	; 48
    161a:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    161e:	88 23       	and	r24, r24
    1620:	09 f4       	brne	.+2      	; 0x1624 <m_wii_open+0x18a>
    1622:	40 c0       	rjmp	.+128    	; 0x16a4 <m_wii_open+0x20a>
    1624:	88 e0       	ldi	r24, 0x08	; 8
    1626:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    162a:	88 23       	and	r24, r24
    162c:	e9 f1       	breq	.+122    	; 0x16a8 <m_wii_open+0x20e>
    162e:	84 e9       	ldi	r24, 0x94	; 148
    1630:	80 93 bc 00 	sts	0x00BC, r24
    1634:	83 ec       	ldi	r24, 0xC3	; 195
    1636:	99 e0       	ldi	r25, 0x09	; 9
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <m_wii_open+0x19e>
    163c:	00 c0       	rjmp	.+0      	; 0x163e <m_wii_open+0x1a4>
    163e:	00 00       	nop
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	08 95       	ret
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	08 95       	ret
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	08 95       	ret
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	08 95       	ret
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	08 95       	ret
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	08 95       	ret
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	08 95       	ret
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	08 95       	ret
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	08 95       	ret
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	08 95       	ret
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	08 95       	ret
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	08 95       	ret
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	08 95       	ret
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	08 95       	ret
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	08 95       	ret
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	08 95       	ret
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	08 95       	ret
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	08 95       	ret
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	08 95       	ret
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	08 95       	ret
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	08 95       	ret
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	08 95       	ret
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	08 95       	ret
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	08 95       	ret
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	08 95       	ret
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	08 95       	ret
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	08 95       	ret

000016ac <start_read>:
    16ac:	cf 93       	push	r28
    16ae:	c8 2f       	mov	r28, r24
    16b0:	84 ea       	ldi	r24, 0xA4	; 164
    16b2:	80 93 bc 00 	sts	0x00BC, r24
    16b6:	0e 94 16 0a 	call	0x142c	; 0x142c <twi_wait>
    16ba:	88 23       	and	r24, r24
    16bc:	69 f0       	breq	.+26     	; 0x16d8 <start_read+0x2c>
    16be:	8c 2f       	mov	r24, r28
    16c0:	88 0f       	add	r24, r24
    16c2:	8f 5f       	subi	r24, 0xFF	; 255
    16c4:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    16c8:	88 34       	cpi	r24, 0x48	; 72
    16ca:	29 f4       	brne	.+10     	; 0x16d6 <start_read+0x2a>
    16cc:	84 e9       	ldi	r24, 0x94	; 148
    16ce:	80 93 bc 00 	sts	0x00BC, r24
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <start_read+0x2c>
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	cf 91       	pop	r28
    16da:	08 95       	ret

000016dc <m_wii_read>:
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	60 97       	sbiw	r28, 0x10	; 16
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	8c 01       	movw	r16, r24
    16f6:	fe 01       	movw	r30, r28
    16f8:	31 96       	adiw	r30, 0x01	; 1
    16fa:	80 e1       	ldi	r24, 0x10	; 16
    16fc:	df 01       	movw	r26, r30
    16fe:	1d 92       	st	X+, r1
    1700:	8a 95       	dec	r24
    1702:	e9 f7       	brne	.-6      	; 0x16fe <m_wii_read+0x22>
    1704:	88 e5       	ldi	r24, 0x58	; 88
    1706:	0e 94 36 0a 	call	0x146c	; 0x146c <start_write>
    170a:	88 23       	and	r24, r24
    170c:	09 f4       	brne	.+2      	; 0x1710 <m_wii_read+0x34>
    170e:	69 c0       	rjmp	.+210    	; 0x17e2 <m_wii_read+0x106>
    1710:	86 e3       	ldi	r24, 0x36	; 54
    1712:	0e 94 29 0a 	call	0x1452	; 0x1452 <send_byte>
    1716:	88 23       	and	r24, r24
    1718:	09 f4       	brne	.+2      	; 0x171c <m_wii_read+0x40>
    171a:	65 c0       	rjmp	.+202    	; 0x17e6 <m_wii_read+0x10a>
    171c:	84 e9       	ldi	r24, 0x94	; 148
    171e:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1722:	b8 e0       	ldi	r27, 0x08	; 8
    1724:	ba 95       	dec	r27
    1726:	f1 f7       	brne	.-4      	; 0x1724 <m_wii_read+0x48>
    1728:	00 00       	nop
    172a:	88 e5       	ldi	r24, 0x58	; 88
    172c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <start_read>
    1730:	88 23       	and	r24, r24
    1732:	09 f4       	brne	.+2      	; 0x1736 <m_wii_read+0x5a>
    1734:	5a c0       	rjmp	.+180    	; 0x17ea <m_wii_read+0x10e>
    1736:	be 01       	movw	r22, r28
    1738:	6f 5f       	subi	r22, 0xFF	; 255
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	ae 01       	movw	r20, r28
    173e:	40 5f       	subi	r20, 0xF0	; 240
    1740:	5f 4f       	sbci	r21, 0xFF	; 255
    1742:	ec eb       	ldi	r30, 0xBC	; 188
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	84 ec       	ldi	r24, 0xC4	; 196
    1748:	2b eb       	ldi	r18, 0xBB	; 187
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	80 83       	st	Z, r24
    174e:	90 81       	ld	r25, Z
    1750:	99 23       	and	r25, r25
    1752:	ec f7       	brge	.-6      	; 0x174e <m_wii_read+0x72>
    1754:	d9 01       	movw	r26, r18
    1756:	9c 91       	ld	r25, X
    1758:	db 01       	movw	r26, r22
    175a:	9d 93       	st	X+, r25
    175c:	bd 01       	movw	r22, r26
    175e:	a4 17       	cp	r26, r20
    1760:	b5 07       	cpc	r27, r21
    1762:	a1 f7       	brne	.-24     	; 0x174c <m_wii_read+0x70>
    1764:	84 e8       	ldi	r24, 0x84	; 132
    1766:	80 93 bc 00 	sts	0x00BC, r24
    176a:	ec eb       	ldi	r30, 0xBC	; 188
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	88 23       	and	r24, r24
    1772:	ec f7       	brge	.-6      	; 0x176e <m_wii_read+0x92>
    1774:	80 91 bb 00 	lds	r24, 0x00BB
    1778:	88 8b       	std	Y+16, r24	; 0x10
    177a:	84 e9       	ldi	r24, 0x94	; 148
    177c:	80 93 bc 00 	sts	0x00BC, r24
    1780:	be 01       	movw	r22, r28
    1782:	6c 5f       	subi	r22, 0xFC	; 252
    1784:	7f 4f       	sbci	r23, 0xFF	; 255
    1786:	f8 01       	movw	r30, r16
    1788:	08 5e       	subi	r16, 0xE8	; 232
    178a:	1f 4f       	sbci	r17, 0xFF	; 255
    178c:	db 01       	movw	r26, r22
    178e:	2c 91       	ld	r18, X
    1790:	32 2f       	mov	r19, r18
    1792:	30 73       	andi	r19, 0x30	; 48
    1794:	cb 01       	movw	r24, r22
    1796:	02 97       	sbiw	r24, 0x02	; 2
    1798:	dc 01       	movw	r26, r24
    179a:	8c 91       	ld	r24, X
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	b0 e1       	ldi	r27, 0x10	; 16
    17a0:	3b 9f       	mul	r19, r27
    17a2:	80 0d       	add	r24, r0
    17a4:	91 1d       	adc	r25, r1
    17a6:	11 24       	eor	r1, r1
    17a8:	91 83       	std	Z+1, r25	; 0x01
    17aa:	80 83       	st	Z, r24
    17ac:	42 2f       	mov	r20, r18
    17ae:	40 7c       	andi	r20, 0xC0	; 192
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	44 0f       	add	r20, r20
    17b4:	55 1f       	adc	r21, r21
    17b6:	44 0f       	add	r20, r20
    17b8:	55 1f       	adc	r21, r21
    17ba:	cb 01       	movw	r24, r22
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	dc 01       	movw	r26, r24
    17c0:	8c 91       	ld	r24, X
    17c2:	48 0f       	add	r20, r24
    17c4:	51 1d       	adc	r21, r1
    17c6:	53 83       	std	Z+3, r21	; 0x03
    17c8:	42 83       	std	Z+2, r20	; 0x02
    17ca:	2f 70       	andi	r18, 0x0F	; 15
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	35 83       	std	Z+5, r19	; 0x05
    17d0:	24 83       	std	Z+4, r18	; 0x04
    17d2:	6d 5f       	subi	r22, 0xFD	; 253
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255
    17d6:	36 96       	adiw	r30, 0x06	; 6
    17d8:	e0 17       	cp	r30, r16
    17da:	f1 07       	cpc	r31, r17
    17dc:	b9 f6       	brne	.-82     	; 0x178c <m_wii_read+0xb0>
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	05 c0       	rjmp	.+10     	; 0x17ec <m_wii_read+0x110>
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <m_wii_read+0x110>
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	01 c0       	rjmp	.+2      	; 0x17ec <m_wii_read+0x110>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	60 96       	adiw	r28, 0x10	; 16
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	08 95       	ret

00001802 <__subsf3>:
    1802:	50 58       	subi	r21, 0x80	; 128

00001804 <__addsf3>:
    1804:	bb 27       	eor	r27, r27
    1806:	aa 27       	eor	r26, r26
    1808:	0e 94 19 0c 	call	0x1832	; 0x1832 <__addsf3x>
    180c:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__fp_round>
    1810:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__fp_pscA>
    1814:	38 f0       	brcs	.+14     	; 0x1824 <__addsf3+0x20>
    1816:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__fp_pscB>
    181a:	20 f0       	brcs	.+8      	; 0x1824 <__addsf3+0x20>
    181c:	39 f4       	brne	.+14     	; 0x182c <__addsf3+0x28>
    181e:	9f 3f       	cpi	r25, 0xFF	; 255
    1820:	19 f4       	brne	.+6      	; 0x1828 <__addsf3+0x24>
    1822:	26 f4       	brtc	.+8      	; 0x182c <__addsf3+0x28>
    1824:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_nan>
    1828:	0e f4       	brtc	.+2      	; 0x182c <__addsf3+0x28>
    182a:	e0 95       	com	r30
    182c:	e7 fb       	bst	r30, 7
    182e:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__fp_inf>

00001832 <__addsf3x>:
    1832:	e9 2f       	mov	r30, r25
    1834:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__fp_split3>
    1838:	58 f3       	brcs	.-42     	; 0x1810 <__addsf3+0xc>
    183a:	ba 17       	cp	r27, r26
    183c:	62 07       	cpc	r22, r18
    183e:	73 07       	cpc	r23, r19
    1840:	84 07       	cpc	r24, r20
    1842:	95 07       	cpc	r25, r21
    1844:	20 f0       	brcs	.+8      	; 0x184e <__addsf3x+0x1c>
    1846:	79 f4       	brne	.+30     	; 0x1866 <__addsf3x+0x34>
    1848:	a6 f5       	brtc	.+104    	; 0x18b2 <__addsf3x+0x80>
    184a:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__fp_zero>
    184e:	0e f4       	brtc	.+2      	; 0x1852 <__addsf3x+0x20>
    1850:	e0 95       	com	r30
    1852:	0b 2e       	mov	r0, r27
    1854:	ba 2f       	mov	r27, r26
    1856:	a0 2d       	mov	r26, r0
    1858:	0b 01       	movw	r0, r22
    185a:	b9 01       	movw	r22, r18
    185c:	90 01       	movw	r18, r0
    185e:	0c 01       	movw	r0, r24
    1860:	ca 01       	movw	r24, r20
    1862:	a0 01       	movw	r20, r0
    1864:	11 24       	eor	r1, r1
    1866:	ff 27       	eor	r31, r31
    1868:	59 1b       	sub	r21, r25
    186a:	99 f0       	breq	.+38     	; 0x1892 <__addsf3x+0x60>
    186c:	59 3f       	cpi	r21, 0xF9	; 249
    186e:	50 f4       	brcc	.+20     	; 0x1884 <__addsf3x+0x52>
    1870:	50 3e       	cpi	r21, 0xE0	; 224
    1872:	68 f1       	brcs	.+90     	; 0x18ce <__addsf3x+0x9c>
    1874:	1a 16       	cp	r1, r26
    1876:	f0 40       	sbci	r31, 0x00	; 0
    1878:	a2 2f       	mov	r26, r18
    187a:	23 2f       	mov	r18, r19
    187c:	34 2f       	mov	r19, r20
    187e:	44 27       	eor	r20, r20
    1880:	58 5f       	subi	r21, 0xF8	; 248
    1882:	f3 cf       	rjmp	.-26     	; 0x186a <__addsf3x+0x38>
    1884:	46 95       	lsr	r20
    1886:	37 95       	ror	r19
    1888:	27 95       	ror	r18
    188a:	a7 95       	ror	r26
    188c:	f0 40       	sbci	r31, 0x00	; 0
    188e:	53 95       	inc	r21
    1890:	c9 f7       	brne	.-14     	; 0x1884 <__addsf3x+0x52>
    1892:	7e f4       	brtc	.+30     	; 0x18b2 <__addsf3x+0x80>
    1894:	1f 16       	cp	r1, r31
    1896:	ba 0b       	sbc	r27, r26
    1898:	62 0b       	sbc	r22, r18
    189a:	73 0b       	sbc	r23, r19
    189c:	84 0b       	sbc	r24, r20
    189e:	ba f0       	brmi	.+46     	; 0x18ce <__addsf3x+0x9c>
    18a0:	91 50       	subi	r25, 0x01	; 1
    18a2:	a1 f0       	breq	.+40     	; 0x18cc <__addsf3x+0x9a>
    18a4:	ff 0f       	add	r31, r31
    18a6:	bb 1f       	adc	r27, r27
    18a8:	66 1f       	adc	r22, r22
    18aa:	77 1f       	adc	r23, r23
    18ac:	88 1f       	adc	r24, r24
    18ae:	c2 f7       	brpl	.-16     	; 0x18a0 <__addsf3x+0x6e>
    18b0:	0e c0       	rjmp	.+28     	; 0x18ce <__addsf3x+0x9c>
    18b2:	ba 0f       	add	r27, r26
    18b4:	62 1f       	adc	r22, r18
    18b6:	73 1f       	adc	r23, r19
    18b8:	84 1f       	adc	r24, r20
    18ba:	48 f4       	brcc	.+18     	; 0x18ce <__addsf3x+0x9c>
    18bc:	87 95       	ror	r24
    18be:	77 95       	ror	r23
    18c0:	67 95       	ror	r22
    18c2:	b7 95       	ror	r27
    18c4:	f7 95       	ror	r31
    18c6:	9e 3f       	cpi	r25, 0xFE	; 254
    18c8:	08 f0       	brcs	.+2      	; 0x18cc <__addsf3x+0x9a>
    18ca:	b0 cf       	rjmp	.-160    	; 0x182c <__addsf3+0x28>
    18cc:	93 95       	inc	r25
    18ce:	88 0f       	add	r24, r24
    18d0:	08 f0       	brcs	.+2      	; 0x18d4 <__addsf3x+0xa2>
    18d2:	99 27       	eor	r25, r25
    18d4:	ee 0f       	add	r30, r30
    18d6:	97 95       	ror	r25
    18d8:	87 95       	ror	r24
    18da:	08 95       	ret
    18dc:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__fp_pscA>
    18e0:	60 f0       	brcs	.+24     	; 0x18fa <__addsf3x+0xc8>
    18e2:	80 e8       	ldi	r24, 0x80	; 128
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	09 f4       	brne	.+2      	; 0x18ea <__addsf3x+0xb8>
    18e8:	9e ef       	ldi	r25, 0xFE	; 254
    18ea:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__fp_pscB>
    18ee:	28 f0       	brcs	.+10     	; 0x18fa <__addsf3x+0xc8>
    18f0:	40 e8       	ldi	r20, 0x80	; 128
    18f2:	51 e0       	ldi	r21, 0x01	; 1
    18f4:	71 f4       	brne	.+28     	; 0x1912 <atan2+0x10>
    18f6:	5e ef       	ldi	r21, 0xFE	; 254
    18f8:	0c c0       	rjmp	.+24     	; 0x1912 <atan2+0x10>
    18fa:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_nan>
    18fe:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__fp_zero>

00001902 <atan2>:
    1902:	e9 2f       	mov	r30, r25
    1904:	e0 78       	andi	r30, 0x80	; 128
    1906:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__fp_split3>
    190a:	40 f3       	brcs	.-48     	; 0x18dc <__addsf3x+0xaa>
    190c:	09 2e       	mov	r0, r25
    190e:	05 2a       	or	r0, r21
    1910:	b1 f3       	breq	.-20     	; 0x18fe <__addsf3x+0xcc>
    1912:	26 17       	cp	r18, r22
    1914:	37 07       	cpc	r19, r23
    1916:	48 07       	cpc	r20, r24
    1918:	59 07       	cpc	r21, r25
    191a:	38 f0       	brcs	.+14     	; 0x192a <atan2+0x28>
    191c:	0e 2e       	mov	r0, r30
    191e:	07 f8       	bld	r0, 7
    1920:	e0 25       	eor	r30, r0
    1922:	69 f0       	breq	.+26     	; 0x193e <atan2+0x3c>
    1924:	e0 25       	eor	r30, r0
    1926:	e0 64       	ori	r30, 0x40	; 64
    1928:	0a c0       	rjmp	.+20     	; 0x193e <atan2+0x3c>
    192a:	ef 63       	ori	r30, 0x3F	; 63
    192c:	07 f8       	bld	r0, 7
    192e:	00 94       	com	r0
    1930:	07 fa       	bst	r0, 7
    1932:	db 01       	movw	r26, r22
    1934:	b9 01       	movw	r22, r18
    1936:	9d 01       	movw	r18, r26
    1938:	dc 01       	movw	r26, r24
    193a:	ca 01       	movw	r24, r20
    193c:	ad 01       	movw	r20, r26
    193e:	ef 93       	push	r30
    1940:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__divsf3_pse>
    1944:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__fp_round>
    1948:	0e 94 b1 0c 	call	0x1962	; 0x1962 <atan>
    194c:	5f 91       	pop	r21
    194e:	55 23       	and	r21, r21
    1950:	39 f0       	breq	.+14     	; 0x1960 <atan2+0x5e>
    1952:	2b ed       	ldi	r18, 0xDB	; 219
    1954:	3f e0       	ldi	r19, 0x0F	; 15
    1956:	49 e4       	ldi	r20, 0x49	; 73
    1958:	50 fd       	sbrc	r21, 0
    195a:	49 ec       	ldi	r20, 0xC9	; 201
    195c:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__addsf3>
    1960:	08 95       	ret

00001962 <atan>:
    1962:	df 93       	push	r29
    1964:	dd 27       	eor	r29, r29
    1966:	b9 2f       	mov	r27, r25
    1968:	bf 77       	andi	r27, 0x7F	; 127
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	16 16       	cp	r1, r22
    1970:	17 06       	cpc	r1, r23
    1972:	48 07       	cpc	r20, r24
    1974:	5b 07       	cpc	r21, r27
    1976:	18 f4       	brcc	.+6      	; 0x197e <atan+0x1c>
    1978:	d9 2f       	mov	r29, r25
    197a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <inverse>
    197e:	9f 93       	push	r25
    1980:	8f 93       	push	r24
    1982:	7f 93       	push	r23
    1984:	6f 93       	push	r22
    1986:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <square>
    198a:	ec ea       	ldi	r30, 0xAC	; 172
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fp_powser>
    1992:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__fp_round>
    1996:	2f 91       	pop	r18
    1998:	3f 91       	pop	r19
    199a:	4f 91       	pop	r20
    199c:	5f 91       	pop	r21
    199e:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3x>
    19a2:	dd 23       	and	r29, r29
    19a4:	51 f0       	breq	.+20     	; 0x19ba <atan+0x58>
    19a6:	90 58       	subi	r25, 0x80	; 128
    19a8:	a2 ea       	ldi	r26, 0xA2	; 162
    19aa:	2a ed       	ldi	r18, 0xDA	; 218
    19ac:	3f e0       	ldi	r19, 0x0F	; 15
    19ae:	49 ec       	ldi	r20, 0xC9	; 201
    19b0:	5f e3       	ldi	r21, 0x3F	; 63
    19b2:	d0 78       	andi	r29, 0x80	; 128
    19b4:	5d 27       	eor	r21, r29
    19b6:	0e 94 19 0c 	call	0x1832	; 0x1832 <__addsf3x>
    19ba:	df 91       	pop	r29
    19bc:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__fp_round>

000019c0 <cos>:
    19c0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fp_rempio2>
    19c4:	e3 95       	inc	r30
    19c6:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__fp_sinus>

000019ca <__divsf3>:
    19ca:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__divsf3x>
    19ce:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__fp_round>
    19d2:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__fp_pscB>
    19d6:	58 f0       	brcs	.+22     	; 0x19ee <__divsf3+0x24>
    19d8:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__fp_pscA>
    19dc:	40 f0       	brcs	.+16     	; 0x19ee <__divsf3+0x24>
    19de:	29 f4       	brne	.+10     	; 0x19ea <__divsf3+0x20>
    19e0:	5f 3f       	cpi	r21, 0xFF	; 255
    19e2:	29 f0       	breq	.+10     	; 0x19ee <__divsf3+0x24>
    19e4:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__fp_inf>
    19e8:	51 11       	cpse	r21, r1
    19ea:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__fp_szero>
    19ee:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_nan>

000019f2 <__divsf3x>:
    19f2:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__fp_split3>
    19f6:	68 f3       	brcs	.-38     	; 0x19d2 <__divsf3+0x8>

000019f8 <__divsf3_pse>:
    19f8:	99 23       	and	r25, r25
    19fa:	b1 f3       	breq	.-20     	; 0x19e8 <__divsf3+0x1e>
    19fc:	55 23       	and	r21, r21
    19fe:	91 f3       	breq	.-28     	; 0x19e4 <__divsf3+0x1a>
    1a00:	95 1b       	sub	r25, r21
    1a02:	55 0b       	sbc	r21, r21
    1a04:	bb 27       	eor	r27, r27
    1a06:	aa 27       	eor	r26, r26
    1a08:	62 17       	cp	r22, r18
    1a0a:	73 07       	cpc	r23, r19
    1a0c:	84 07       	cpc	r24, r20
    1a0e:	38 f0       	brcs	.+14     	; 0x1a1e <__divsf3_pse+0x26>
    1a10:	9f 5f       	subi	r25, 0xFF	; 255
    1a12:	5f 4f       	sbci	r21, 0xFF	; 255
    1a14:	22 0f       	add	r18, r18
    1a16:	33 1f       	adc	r19, r19
    1a18:	44 1f       	adc	r20, r20
    1a1a:	aa 1f       	adc	r26, r26
    1a1c:	a9 f3       	breq	.-22     	; 0x1a08 <__divsf3_pse+0x10>
    1a1e:	35 d0       	rcall	.+106    	; 0x1a8a <__divsf3_pse+0x92>
    1a20:	0e 2e       	mov	r0, r30
    1a22:	3a f0       	brmi	.+14     	; 0x1a32 <__divsf3_pse+0x3a>
    1a24:	e0 e8       	ldi	r30, 0x80	; 128
    1a26:	32 d0       	rcall	.+100    	; 0x1a8c <__divsf3_pse+0x94>
    1a28:	91 50       	subi	r25, 0x01	; 1
    1a2a:	50 40       	sbci	r21, 0x00	; 0
    1a2c:	e6 95       	lsr	r30
    1a2e:	00 1c       	adc	r0, r0
    1a30:	ca f7       	brpl	.-14     	; 0x1a24 <__divsf3_pse+0x2c>
    1a32:	2b d0       	rcall	.+86     	; 0x1a8a <__divsf3_pse+0x92>
    1a34:	fe 2f       	mov	r31, r30
    1a36:	29 d0       	rcall	.+82     	; 0x1a8a <__divsf3_pse+0x92>
    1a38:	66 0f       	add	r22, r22
    1a3a:	77 1f       	adc	r23, r23
    1a3c:	88 1f       	adc	r24, r24
    1a3e:	bb 1f       	adc	r27, r27
    1a40:	26 17       	cp	r18, r22
    1a42:	37 07       	cpc	r19, r23
    1a44:	48 07       	cpc	r20, r24
    1a46:	ab 07       	cpc	r26, r27
    1a48:	b0 e8       	ldi	r27, 0x80	; 128
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <__divsf3_pse+0x56>
    1a4c:	bb 0b       	sbc	r27, r27
    1a4e:	80 2d       	mov	r24, r0
    1a50:	bf 01       	movw	r22, r30
    1a52:	ff 27       	eor	r31, r31
    1a54:	93 58       	subi	r25, 0x83	; 131
    1a56:	5f 4f       	sbci	r21, 0xFF	; 255
    1a58:	3a f0       	brmi	.+14     	; 0x1a68 <__divsf3_pse+0x70>
    1a5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a5c:	51 05       	cpc	r21, r1
    1a5e:	78 f0       	brcs	.+30     	; 0x1a7e <__divsf3_pse+0x86>
    1a60:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__fp_inf>
    1a64:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__fp_szero>
    1a68:	5f 3f       	cpi	r21, 0xFF	; 255
    1a6a:	e4 f3       	brlt	.-8      	; 0x1a64 <__divsf3_pse+0x6c>
    1a6c:	98 3e       	cpi	r25, 0xE8	; 232
    1a6e:	d4 f3       	brlt	.-12     	; 0x1a64 <__divsf3_pse+0x6c>
    1a70:	86 95       	lsr	r24
    1a72:	77 95       	ror	r23
    1a74:	67 95       	ror	r22
    1a76:	b7 95       	ror	r27
    1a78:	f7 95       	ror	r31
    1a7a:	9f 5f       	subi	r25, 0xFF	; 255
    1a7c:	c9 f7       	brne	.-14     	; 0x1a70 <__divsf3_pse+0x78>
    1a7e:	88 0f       	add	r24, r24
    1a80:	91 1d       	adc	r25, r1
    1a82:	96 95       	lsr	r25
    1a84:	87 95       	ror	r24
    1a86:	97 f9       	bld	r25, 7
    1a88:	08 95       	ret
    1a8a:	e1 e0       	ldi	r30, 0x01	; 1
    1a8c:	66 0f       	add	r22, r22
    1a8e:	77 1f       	adc	r23, r23
    1a90:	88 1f       	adc	r24, r24
    1a92:	bb 1f       	adc	r27, r27
    1a94:	62 17       	cp	r22, r18
    1a96:	73 07       	cpc	r23, r19
    1a98:	84 07       	cpc	r24, r20
    1a9a:	ba 07       	cpc	r27, r26
    1a9c:	20 f0       	brcs	.+8      	; 0x1aa6 <__divsf3_pse+0xae>
    1a9e:	62 1b       	sub	r22, r18
    1aa0:	73 0b       	sbc	r23, r19
    1aa2:	84 0b       	sbc	r24, r20
    1aa4:	ba 0b       	sbc	r27, r26
    1aa6:	ee 1f       	adc	r30, r30
    1aa8:	88 f7       	brcc	.-30     	; 0x1a8c <__divsf3_pse+0x94>
    1aaa:	e0 95       	com	r30
    1aac:	08 95       	ret

00001aae <__fixsfsi>:
    1aae:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__fixunssfsi>
    1ab2:	68 94       	set
    1ab4:	b1 11       	cpse	r27, r1
    1ab6:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__fp_szero>
    1aba:	08 95       	ret

00001abc <__fixunssfsi>:
    1abc:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__fp_splitA>
    1ac0:	88 f0       	brcs	.+34     	; 0x1ae4 <__fixunssfsi+0x28>
    1ac2:	9f 57       	subi	r25, 0x7F	; 127
    1ac4:	98 f0       	brcs	.+38     	; 0x1aec <__fixunssfsi+0x30>
    1ac6:	b9 2f       	mov	r27, r25
    1ac8:	99 27       	eor	r25, r25
    1aca:	b7 51       	subi	r27, 0x17	; 23
    1acc:	b0 f0       	brcs	.+44     	; 0x1afa <__fixunssfsi+0x3e>
    1ace:	e1 f0       	breq	.+56     	; 0x1b08 <__fixunssfsi+0x4c>
    1ad0:	66 0f       	add	r22, r22
    1ad2:	77 1f       	adc	r23, r23
    1ad4:	88 1f       	adc	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	1a f0       	brmi	.+6      	; 0x1ae0 <__fixunssfsi+0x24>
    1ada:	ba 95       	dec	r27
    1adc:	c9 f7       	brne	.-14     	; 0x1ad0 <__fixunssfsi+0x14>
    1ade:	14 c0       	rjmp	.+40     	; 0x1b08 <__fixunssfsi+0x4c>
    1ae0:	b1 30       	cpi	r27, 0x01	; 1
    1ae2:	91 f0       	breq	.+36     	; 0x1b08 <__fixunssfsi+0x4c>
    1ae4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__fp_zero>
    1ae8:	b1 e0       	ldi	r27, 0x01	; 1
    1aea:	08 95       	ret
    1aec:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__fp_zero>
    1af0:	67 2f       	mov	r22, r23
    1af2:	78 2f       	mov	r23, r24
    1af4:	88 27       	eor	r24, r24
    1af6:	b8 5f       	subi	r27, 0xF8	; 248
    1af8:	39 f0       	breq	.+14     	; 0x1b08 <__fixunssfsi+0x4c>
    1afa:	b9 3f       	cpi	r27, 0xF9	; 249
    1afc:	cc f3       	brlt	.-14     	; 0x1af0 <__fixunssfsi+0x34>
    1afe:	86 95       	lsr	r24
    1b00:	77 95       	ror	r23
    1b02:	67 95       	ror	r22
    1b04:	b3 95       	inc	r27
    1b06:	d9 f7       	brne	.-10     	; 0x1afe <__fixunssfsi+0x42>
    1b08:	3e f4       	brtc	.+14     	; 0x1b18 <__fixunssfsi+0x5c>
    1b0a:	90 95       	com	r25
    1b0c:	80 95       	com	r24
    1b0e:	70 95       	com	r23
    1b10:	61 95       	neg	r22
    1b12:	7f 4f       	sbci	r23, 0xFF	; 255
    1b14:	8f 4f       	sbci	r24, 0xFF	; 255
    1b16:	9f 4f       	sbci	r25, 0xFF	; 255
    1b18:	08 95       	ret

00001b1a <__floatunsisf>:
    1b1a:	e8 94       	clt
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <__floatsisf+0x12>

00001b1e <__floatsisf>:
    1b1e:	97 fb       	bst	r25, 7
    1b20:	3e f4       	brtc	.+14     	; 0x1b30 <__floatsisf+0x12>
    1b22:	90 95       	com	r25
    1b24:	80 95       	com	r24
    1b26:	70 95       	com	r23
    1b28:	61 95       	neg	r22
    1b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b30:	99 23       	and	r25, r25
    1b32:	a9 f0       	breq	.+42     	; 0x1b5e <__floatsisf+0x40>
    1b34:	f9 2f       	mov	r31, r25
    1b36:	96 e9       	ldi	r25, 0x96	; 150
    1b38:	bb 27       	eor	r27, r27
    1b3a:	93 95       	inc	r25
    1b3c:	f6 95       	lsr	r31
    1b3e:	87 95       	ror	r24
    1b40:	77 95       	ror	r23
    1b42:	67 95       	ror	r22
    1b44:	b7 95       	ror	r27
    1b46:	f1 11       	cpse	r31, r1
    1b48:	f8 cf       	rjmp	.-16     	; 0x1b3a <__floatsisf+0x1c>
    1b4a:	fa f4       	brpl	.+62     	; 0x1b8a <__floatsisf+0x6c>
    1b4c:	bb 0f       	add	r27, r27
    1b4e:	11 f4       	brne	.+4      	; 0x1b54 <__floatsisf+0x36>
    1b50:	60 ff       	sbrs	r22, 0
    1b52:	1b c0       	rjmp	.+54     	; 0x1b8a <__floatsisf+0x6c>
    1b54:	6f 5f       	subi	r22, 0xFF	; 255
    1b56:	7f 4f       	sbci	r23, 0xFF	; 255
    1b58:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5c:	16 c0       	rjmp	.+44     	; 0x1b8a <__floatsisf+0x6c>
    1b5e:	88 23       	and	r24, r24
    1b60:	11 f0       	breq	.+4      	; 0x1b66 <__floatsisf+0x48>
    1b62:	96 e9       	ldi	r25, 0x96	; 150
    1b64:	11 c0       	rjmp	.+34     	; 0x1b88 <__floatsisf+0x6a>
    1b66:	77 23       	and	r23, r23
    1b68:	21 f0       	breq	.+8      	; 0x1b72 <__floatsisf+0x54>
    1b6a:	9e e8       	ldi	r25, 0x8E	; 142
    1b6c:	87 2f       	mov	r24, r23
    1b6e:	76 2f       	mov	r23, r22
    1b70:	05 c0       	rjmp	.+10     	; 0x1b7c <__floatsisf+0x5e>
    1b72:	66 23       	and	r22, r22
    1b74:	71 f0       	breq	.+28     	; 0x1b92 <__floatsisf+0x74>
    1b76:	96 e8       	ldi	r25, 0x86	; 134
    1b78:	86 2f       	mov	r24, r22
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	2a f0       	brmi	.+10     	; 0x1b8a <__floatsisf+0x6c>
    1b80:	9a 95       	dec	r25
    1b82:	66 0f       	add	r22, r22
    1b84:	77 1f       	adc	r23, r23
    1b86:	88 1f       	adc	r24, r24
    1b88:	da f7       	brpl	.-10     	; 0x1b80 <__floatsisf+0x62>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	96 95       	lsr	r25
    1b8e:	87 95       	ror	r24
    1b90:	97 f9       	bld	r25, 7
    1b92:	08 95       	ret

00001b94 <__fp_inf>:
    1b94:	97 f9       	bld	r25, 7
    1b96:	9f 67       	ori	r25, 0x7F	; 127
    1b98:	80 e8       	ldi	r24, 0x80	; 128
    1b9a:	70 e0       	ldi	r23, 0x00	; 0
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	08 95       	ret

00001ba0 <__fp_nan>:
    1ba0:	9f ef       	ldi	r25, 0xFF	; 255
    1ba2:	80 ec       	ldi	r24, 0xC0	; 192
    1ba4:	08 95       	ret

00001ba6 <__fp_powser>:
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	1f 93       	push	r17
    1bac:	0f 93       	push	r16
    1bae:	ff 92       	push	r15
    1bb0:	ef 92       	push	r14
    1bb2:	df 92       	push	r13
    1bb4:	7b 01       	movw	r14, r22
    1bb6:	8c 01       	movw	r16, r24
    1bb8:	68 94       	set
    1bba:	06 c0       	rjmp	.+12     	; 0x1bc8 <__fp_powser+0x22>
    1bbc:	da 2e       	mov	r13, r26
    1bbe:	ef 01       	movw	r28, r30
    1bc0:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3x>
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e8 94       	clt
    1bc8:	a5 91       	lpm	r26, Z+
    1bca:	25 91       	lpm	r18, Z+
    1bcc:	35 91       	lpm	r19, Z+
    1bce:	45 91       	lpm	r20, Z+
    1bd0:	55 91       	lpm	r21, Z+
    1bd2:	a6 f3       	brts	.-24     	; 0x1bbc <__fp_powser+0x16>
    1bd4:	ef 01       	movw	r28, r30
    1bd6:	0e 94 19 0c 	call	0x1832	; 0x1832 <__addsf3x>
    1bda:	fe 01       	movw	r30, r28
    1bdc:	97 01       	movw	r18, r14
    1bde:	a8 01       	movw	r20, r16
    1be0:	da 94       	dec	r13
    1be2:	69 f7       	brne	.-38     	; 0x1bbe <__fp_powser+0x18>
    1be4:	df 90       	pop	r13
    1be6:	ef 90       	pop	r14
    1be8:	ff 90       	pop	r15
    1bea:	0f 91       	pop	r16
    1bec:	1f 91       	pop	r17
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <__fp_pscA>:
    1bf4:	00 24       	eor	r0, r0
    1bf6:	0a 94       	dec	r0
    1bf8:	16 16       	cp	r1, r22
    1bfa:	17 06       	cpc	r1, r23
    1bfc:	18 06       	cpc	r1, r24
    1bfe:	09 06       	cpc	r0, r25
    1c00:	08 95       	ret

00001c02 <__fp_pscB>:
    1c02:	00 24       	eor	r0, r0
    1c04:	0a 94       	dec	r0
    1c06:	12 16       	cp	r1, r18
    1c08:	13 06       	cpc	r1, r19
    1c0a:	14 06       	cpc	r1, r20
    1c0c:	05 06       	cpc	r0, r21
    1c0e:	08 95       	ret
    1c10:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_nan>

00001c14 <__fp_rempio2>:
    1c14:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__fp_splitA>
    1c18:	d8 f3       	brcs	.-10     	; 0x1c10 <__fp_pscB+0xe>
    1c1a:	e8 94       	clt
    1c1c:	e0 e0       	ldi	r30, 0x00	; 0
    1c1e:	bb 27       	eor	r27, r27
    1c20:	9f 57       	subi	r25, 0x7F	; 127
    1c22:	f0 f0       	brcs	.+60     	; 0x1c60 <__fp_rempio2+0x4c>
    1c24:	2a ed       	ldi	r18, 0xDA	; 218
    1c26:	3f e0       	ldi	r19, 0x0F	; 15
    1c28:	49 ec       	ldi	r20, 0xC9	; 201
    1c2a:	06 c0       	rjmp	.+12     	; 0x1c38 <__fp_rempio2+0x24>
    1c2c:	ee 0f       	add	r30, r30
    1c2e:	bb 0f       	add	r27, r27
    1c30:	66 1f       	adc	r22, r22
    1c32:	77 1f       	adc	r23, r23
    1c34:	88 1f       	adc	r24, r24
    1c36:	28 f0       	brcs	.+10     	; 0x1c42 <__fp_rempio2+0x2e>
    1c38:	b2 3a       	cpi	r27, 0xA2	; 162
    1c3a:	62 07       	cpc	r22, r18
    1c3c:	73 07       	cpc	r23, r19
    1c3e:	84 07       	cpc	r24, r20
    1c40:	28 f0       	brcs	.+10     	; 0x1c4c <__fp_rempio2+0x38>
    1c42:	b2 5a       	subi	r27, 0xA2	; 162
    1c44:	62 0b       	sbc	r22, r18
    1c46:	73 0b       	sbc	r23, r19
    1c48:	84 0b       	sbc	r24, r20
    1c4a:	e3 95       	inc	r30
    1c4c:	9a 95       	dec	r25
    1c4e:	72 f7       	brpl	.-36     	; 0x1c2c <__fp_rempio2+0x18>
    1c50:	80 38       	cpi	r24, 0x80	; 128
    1c52:	30 f4       	brcc	.+12     	; 0x1c60 <__fp_rempio2+0x4c>
    1c54:	9a 95       	dec	r25
    1c56:	bb 0f       	add	r27, r27
    1c58:	66 1f       	adc	r22, r22
    1c5a:	77 1f       	adc	r23, r23
    1c5c:	88 1f       	adc	r24, r24
    1c5e:	d2 f7       	brpl	.-12     	; 0x1c54 <__fp_rempio2+0x40>
    1c60:	90 48       	sbci	r25, 0x80	; 128
    1c62:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__fp_mpack_finite>

00001c66 <__fp_round>:
    1c66:	09 2e       	mov	r0, r25
    1c68:	03 94       	inc	r0
    1c6a:	00 0c       	add	r0, r0
    1c6c:	11 f4       	brne	.+4      	; 0x1c72 <__fp_round+0xc>
    1c6e:	88 23       	and	r24, r24
    1c70:	52 f0       	brmi	.+20     	; 0x1c86 <__fp_round+0x20>
    1c72:	bb 0f       	add	r27, r27
    1c74:	40 f4       	brcc	.+16     	; 0x1c86 <__fp_round+0x20>
    1c76:	bf 2b       	or	r27, r31
    1c78:	11 f4       	brne	.+4      	; 0x1c7e <__fp_round+0x18>
    1c7a:	60 ff       	sbrs	r22, 0
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <__fp_round+0x20>
    1c7e:	6f 5f       	subi	r22, 0xFF	; 255
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	8f 4f       	sbci	r24, 0xFF	; 255
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	08 95       	ret

00001c88 <__fp_sinus>:
    1c88:	ef 93       	push	r30
    1c8a:	e0 ff       	sbrs	r30, 0
    1c8c:	07 c0       	rjmp	.+14     	; 0x1c9c <__fp_sinus+0x14>
    1c8e:	a2 ea       	ldi	r26, 0xA2	; 162
    1c90:	2a ed       	ldi	r18, 0xDA	; 218
    1c92:	3f e0       	ldi	r19, 0x0F	; 15
    1c94:	49 ec       	ldi	r20, 0xC9	; 201
    1c96:	5f eb       	ldi	r21, 0xBF	; 191
    1c98:	0e 94 19 0c 	call	0x1832	; 0x1832 <__addsf3x>
    1c9c:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__fp_round>
    1ca0:	0f 90       	pop	r0
    1ca2:	03 94       	inc	r0
    1ca4:	01 fc       	sbrc	r0, 1
    1ca6:	90 58       	subi	r25, 0x80	; 128
    1ca8:	e9 ed       	ldi	r30, 0xD9	; 217
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__fp_powsodd>

00001cb0 <__fp_split3>:
    1cb0:	57 fd       	sbrc	r21, 7
    1cb2:	90 58       	subi	r25, 0x80	; 128
    1cb4:	44 0f       	add	r20, r20
    1cb6:	55 1f       	adc	r21, r21
    1cb8:	59 f0       	breq	.+22     	; 0x1cd0 <__fp_splitA+0x10>
    1cba:	5f 3f       	cpi	r21, 0xFF	; 255
    1cbc:	71 f0       	breq	.+28     	; 0x1cda <__fp_splitA+0x1a>
    1cbe:	47 95       	ror	r20

00001cc0 <__fp_splitA>:
    1cc0:	88 0f       	add	r24, r24
    1cc2:	97 fb       	bst	r25, 7
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	61 f0       	breq	.+24     	; 0x1ce0 <__fp_splitA+0x20>
    1cc8:	9f 3f       	cpi	r25, 0xFF	; 255
    1cca:	79 f0       	breq	.+30     	; 0x1cea <__fp_splitA+0x2a>
    1ccc:	87 95       	ror	r24
    1cce:	08 95       	ret
    1cd0:	12 16       	cp	r1, r18
    1cd2:	13 06       	cpc	r1, r19
    1cd4:	14 06       	cpc	r1, r20
    1cd6:	55 1f       	adc	r21, r21
    1cd8:	f2 cf       	rjmp	.-28     	; 0x1cbe <__fp_split3+0xe>
    1cda:	46 95       	lsr	r20
    1cdc:	f1 df       	rcall	.-30     	; 0x1cc0 <__fp_splitA>
    1cde:	08 c0       	rjmp	.+16     	; 0x1cf0 <__fp_splitA+0x30>
    1ce0:	16 16       	cp	r1, r22
    1ce2:	17 06       	cpc	r1, r23
    1ce4:	18 06       	cpc	r1, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	f1 cf       	rjmp	.-30     	; 0x1ccc <__fp_splitA+0xc>
    1cea:	86 95       	lsr	r24
    1cec:	71 05       	cpc	r23, r1
    1cee:	61 05       	cpc	r22, r1
    1cf0:	08 94       	sec
    1cf2:	08 95       	ret

00001cf4 <__fp_zero>:
    1cf4:	e8 94       	clt

00001cf6 <__fp_szero>:
    1cf6:	bb 27       	eor	r27, r27
    1cf8:	66 27       	eor	r22, r22
    1cfa:	77 27       	eor	r23, r23
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	97 f9       	bld	r25, 7
    1d00:	08 95       	ret

00001d02 <__gesf2>:
    1d02:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fp_cmp>
    1d06:	08 f4       	brcc	.+2      	; 0x1d0a <__gesf2+0x8>
    1d08:	8f ef       	ldi	r24, 0xFF	; 255
    1d0a:	08 95       	ret

00001d0c <inverse>:
    1d0c:	9b 01       	movw	r18, r22
    1d0e:	ac 01       	movw	r20, r24
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	80 e8       	ldi	r24, 0x80	; 128
    1d16:	9f e3       	ldi	r25, 0x3F	; 63
    1d18:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__divsf3>

00001d1c <__mulsf3>:
    1d1c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__mulsf3x>
    1d20:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__fp_round>
    1d24:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__fp_pscA>
    1d28:	38 f0       	brcs	.+14     	; 0x1d38 <__mulsf3+0x1c>
    1d2a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__fp_pscB>
    1d2e:	20 f0       	brcs	.+8      	; 0x1d38 <__mulsf3+0x1c>
    1d30:	95 23       	and	r25, r21
    1d32:	11 f0       	breq	.+4      	; 0x1d38 <__mulsf3+0x1c>
    1d34:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__fp_inf>
    1d38:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_nan>
    1d3c:	11 24       	eor	r1, r1
    1d3e:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__fp_szero>

00001d42 <__mulsf3x>:
    1d42:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__fp_split3>
    1d46:	70 f3       	brcs	.-36     	; 0x1d24 <__mulsf3+0x8>

00001d48 <__mulsf3_pse>:
    1d48:	95 9f       	mul	r25, r21
    1d4a:	c1 f3       	breq	.-16     	; 0x1d3c <__mulsf3+0x20>
    1d4c:	95 0f       	add	r25, r21
    1d4e:	50 e0       	ldi	r21, 0x00	; 0
    1d50:	55 1f       	adc	r21, r21
    1d52:	62 9f       	mul	r22, r18
    1d54:	f0 01       	movw	r30, r0
    1d56:	72 9f       	mul	r23, r18
    1d58:	bb 27       	eor	r27, r27
    1d5a:	f0 0d       	add	r31, r0
    1d5c:	b1 1d       	adc	r27, r1
    1d5e:	63 9f       	mul	r22, r19
    1d60:	aa 27       	eor	r26, r26
    1d62:	f0 0d       	add	r31, r0
    1d64:	b1 1d       	adc	r27, r1
    1d66:	aa 1f       	adc	r26, r26
    1d68:	64 9f       	mul	r22, r20
    1d6a:	66 27       	eor	r22, r22
    1d6c:	b0 0d       	add	r27, r0
    1d6e:	a1 1d       	adc	r26, r1
    1d70:	66 1f       	adc	r22, r22
    1d72:	82 9f       	mul	r24, r18
    1d74:	22 27       	eor	r18, r18
    1d76:	b0 0d       	add	r27, r0
    1d78:	a1 1d       	adc	r26, r1
    1d7a:	62 1f       	adc	r22, r18
    1d7c:	73 9f       	mul	r23, r19
    1d7e:	b0 0d       	add	r27, r0
    1d80:	a1 1d       	adc	r26, r1
    1d82:	62 1f       	adc	r22, r18
    1d84:	83 9f       	mul	r24, r19
    1d86:	a0 0d       	add	r26, r0
    1d88:	61 1d       	adc	r22, r1
    1d8a:	22 1f       	adc	r18, r18
    1d8c:	74 9f       	mul	r23, r20
    1d8e:	33 27       	eor	r19, r19
    1d90:	a0 0d       	add	r26, r0
    1d92:	61 1d       	adc	r22, r1
    1d94:	23 1f       	adc	r18, r19
    1d96:	84 9f       	mul	r24, r20
    1d98:	60 0d       	add	r22, r0
    1d9a:	21 1d       	adc	r18, r1
    1d9c:	82 2f       	mov	r24, r18
    1d9e:	76 2f       	mov	r23, r22
    1da0:	6a 2f       	mov	r22, r26
    1da2:	11 24       	eor	r1, r1
    1da4:	9f 57       	subi	r25, 0x7F	; 127
    1da6:	50 40       	sbci	r21, 0x00	; 0
    1da8:	9a f0       	brmi	.+38     	; 0x1dd0 <__mulsf3_pse+0x88>
    1daa:	f1 f0       	breq	.+60     	; 0x1de8 <__mulsf3_pse+0xa0>
    1dac:	88 23       	and	r24, r24
    1dae:	4a f0       	brmi	.+18     	; 0x1dc2 <__mulsf3_pse+0x7a>
    1db0:	ee 0f       	add	r30, r30
    1db2:	ff 1f       	adc	r31, r31
    1db4:	bb 1f       	adc	r27, r27
    1db6:	66 1f       	adc	r22, r22
    1db8:	77 1f       	adc	r23, r23
    1dba:	88 1f       	adc	r24, r24
    1dbc:	91 50       	subi	r25, 0x01	; 1
    1dbe:	50 40       	sbci	r21, 0x00	; 0
    1dc0:	a9 f7       	brne	.-22     	; 0x1dac <__mulsf3_pse+0x64>
    1dc2:	9e 3f       	cpi	r25, 0xFE	; 254
    1dc4:	51 05       	cpc	r21, r1
    1dc6:	80 f0       	brcs	.+32     	; 0x1de8 <__mulsf3_pse+0xa0>
    1dc8:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__fp_inf>
    1dcc:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__fp_szero>
    1dd0:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd2:	e4 f3       	brlt	.-8      	; 0x1dcc <__mulsf3_pse+0x84>
    1dd4:	98 3e       	cpi	r25, 0xE8	; 232
    1dd6:	d4 f3       	brlt	.-12     	; 0x1dcc <__mulsf3_pse+0x84>
    1dd8:	86 95       	lsr	r24
    1dda:	77 95       	ror	r23
    1ddc:	67 95       	ror	r22
    1dde:	b7 95       	ror	r27
    1de0:	f7 95       	ror	r31
    1de2:	e7 95       	ror	r30
    1de4:	9f 5f       	subi	r25, 0xFF	; 255
    1de6:	c1 f7       	brne	.-16     	; 0x1dd8 <__mulsf3_pse+0x90>
    1de8:	fe 2b       	or	r31, r30
    1dea:	88 0f       	add	r24, r24
    1dec:	91 1d       	adc	r25, r1
    1dee:	96 95       	lsr	r25
    1df0:	87 95       	ror	r24
    1df2:	97 f9       	bld	r25, 7
    1df4:	08 95       	ret

00001df6 <sin>:
    1df6:	9f 93       	push	r25
    1df8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fp_rempio2>
    1dfc:	0f 90       	pop	r0
    1dfe:	07 fc       	sbrc	r0, 7
    1e00:	ee 5f       	subi	r30, 0xFE	; 254
    1e02:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__fp_sinus>
    1e06:	19 f4       	brne	.+6      	; 0x1e0e <sin+0x18>
    1e08:	16 f4       	brtc	.+4      	; 0x1e0e <sin+0x18>
    1e0a:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_nan>
    1e0e:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_mpack>

00001e12 <sqrt>:
    1e12:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__fp_splitA>
    1e16:	b8 f3       	brcs	.-18     	; 0x1e06 <sin+0x10>
    1e18:	99 23       	and	r25, r25
    1e1a:	c9 f3       	breq	.-14     	; 0x1e0e <sin+0x18>
    1e1c:	b6 f3       	brts	.-20     	; 0x1e0a <sin+0x14>
    1e1e:	9f 57       	subi	r25, 0x7F	; 127
    1e20:	55 0b       	sbc	r21, r21
    1e22:	87 ff       	sbrs	r24, 7
    1e24:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__fp_norm2>
    1e28:	00 24       	eor	r0, r0
    1e2a:	a0 e6       	ldi	r26, 0x60	; 96
    1e2c:	40 ea       	ldi	r20, 0xA0	; 160
    1e2e:	90 01       	movw	r18, r0
    1e30:	80 58       	subi	r24, 0x80	; 128
    1e32:	56 95       	lsr	r21
    1e34:	97 95       	ror	r25
    1e36:	28 f4       	brcc	.+10     	; 0x1e42 <sqrt+0x30>
    1e38:	80 5c       	subi	r24, 0xC0	; 192
    1e3a:	66 0f       	add	r22, r22
    1e3c:	77 1f       	adc	r23, r23
    1e3e:	88 1f       	adc	r24, r24
    1e40:	20 f0       	brcs	.+8      	; 0x1e4a <sqrt+0x38>
    1e42:	26 17       	cp	r18, r22
    1e44:	37 07       	cpc	r19, r23
    1e46:	48 07       	cpc	r20, r24
    1e48:	30 f4       	brcc	.+12     	; 0x1e56 <sqrt+0x44>
    1e4a:	62 1b       	sub	r22, r18
    1e4c:	73 0b       	sbc	r23, r19
    1e4e:	84 0b       	sbc	r24, r20
    1e50:	20 29       	or	r18, r0
    1e52:	31 29       	or	r19, r1
    1e54:	4a 2b       	or	r20, r26
    1e56:	a6 95       	lsr	r26
    1e58:	17 94       	ror	r1
    1e5a:	07 94       	ror	r0
    1e5c:	20 25       	eor	r18, r0
    1e5e:	31 25       	eor	r19, r1
    1e60:	4a 27       	eor	r20, r26
    1e62:	58 f7       	brcc	.-42     	; 0x1e3a <sqrt+0x28>
    1e64:	66 0f       	add	r22, r22
    1e66:	77 1f       	adc	r23, r23
    1e68:	88 1f       	adc	r24, r24
    1e6a:	20 f0       	brcs	.+8      	; 0x1e74 <sqrt+0x62>
    1e6c:	26 17       	cp	r18, r22
    1e6e:	37 07       	cpc	r19, r23
    1e70:	48 07       	cpc	r20, r24
    1e72:	30 f4       	brcc	.+12     	; 0x1e80 <sqrt+0x6e>
    1e74:	62 0b       	sbc	r22, r18
    1e76:	73 0b       	sbc	r23, r19
    1e78:	84 0b       	sbc	r24, r20
    1e7a:	20 0d       	add	r18, r0
    1e7c:	31 1d       	adc	r19, r1
    1e7e:	41 1d       	adc	r20, r1
    1e80:	a0 95       	com	r26
    1e82:	81 f7       	brne	.-32     	; 0x1e64 <sqrt+0x52>
    1e84:	b9 01       	movw	r22, r18
    1e86:	84 2f       	mov	r24, r20
    1e88:	91 58       	subi	r25, 0x81	; 129
    1e8a:	88 0f       	add	r24, r24
    1e8c:	96 95       	lsr	r25
    1e8e:	87 95       	ror	r24
    1e90:	08 95       	ret

00001e92 <square>:
    1e92:	9b 01       	movw	r18, r22
    1e94:	ac 01       	movw	r20, r24
    1e96:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__mulsf3>

00001e9a <__fp_cmp>:
    1e9a:	99 0f       	add	r25, r25
    1e9c:	00 08       	sbc	r0, r0
    1e9e:	55 0f       	add	r21, r21
    1ea0:	aa 0b       	sbc	r26, r26
    1ea2:	e0 e8       	ldi	r30, 0x80	; 128
    1ea4:	fe ef       	ldi	r31, 0xFE	; 254
    1ea6:	16 16       	cp	r1, r22
    1ea8:	17 06       	cpc	r1, r23
    1eaa:	e8 07       	cpc	r30, r24
    1eac:	f9 07       	cpc	r31, r25
    1eae:	c0 f0       	brcs	.+48     	; 0x1ee0 <__fp_cmp+0x46>
    1eb0:	12 16       	cp	r1, r18
    1eb2:	13 06       	cpc	r1, r19
    1eb4:	e4 07       	cpc	r30, r20
    1eb6:	f5 07       	cpc	r31, r21
    1eb8:	98 f0       	brcs	.+38     	; 0x1ee0 <__fp_cmp+0x46>
    1eba:	62 1b       	sub	r22, r18
    1ebc:	73 0b       	sbc	r23, r19
    1ebe:	84 0b       	sbc	r24, r20
    1ec0:	95 0b       	sbc	r25, r21
    1ec2:	39 f4       	brne	.+14     	; 0x1ed2 <__fp_cmp+0x38>
    1ec4:	0a 26       	eor	r0, r26
    1ec6:	61 f0       	breq	.+24     	; 0x1ee0 <__fp_cmp+0x46>
    1ec8:	23 2b       	or	r18, r19
    1eca:	24 2b       	or	r18, r20
    1ecc:	25 2b       	or	r18, r21
    1ece:	21 f4       	brne	.+8      	; 0x1ed8 <__fp_cmp+0x3e>
    1ed0:	08 95       	ret
    1ed2:	0a 26       	eor	r0, r26
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <__fp_cmp+0x3e>
    1ed6:	a1 40       	sbci	r26, 0x01	; 1
    1ed8:	a6 95       	lsr	r26
    1eda:	8f ef       	ldi	r24, 0xFF	; 255
    1edc:	81 1d       	adc	r24, r1
    1ede:	81 1d       	adc	r24, r1
    1ee0:	08 95       	ret

00001ee2 <__fp_mpack>:
    1ee2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ee4:	31 f0       	breq	.+12     	; 0x1ef2 <__fp_mpack_finite+0xc>

00001ee6 <__fp_mpack_finite>:
    1ee6:	91 50       	subi	r25, 0x01	; 1
    1ee8:	20 f4       	brcc	.+8      	; 0x1ef2 <__fp_mpack_finite+0xc>
    1eea:	87 95       	ror	r24
    1eec:	77 95       	ror	r23
    1eee:	67 95       	ror	r22
    1ef0:	b7 95       	ror	r27
    1ef2:	88 0f       	add	r24, r24
    1ef4:	91 1d       	adc	r25, r1
    1ef6:	96 95       	lsr	r25
    1ef8:	87 95       	ror	r24
    1efa:	97 f9       	bld	r25, 7
    1efc:	08 95       	ret

00001efe <__fp_norm2>:
    1efe:	91 50       	subi	r25, 0x01	; 1
    1f00:	50 40       	sbci	r21, 0x00	; 0
    1f02:	66 0f       	add	r22, r22
    1f04:	77 1f       	adc	r23, r23
    1f06:	88 1f       	adc	r24, r24
    1f08:	d2 f7       	brpl	.-12     	; 0x1efe <__fp_norm2>
    1f0a:	08 95       	ret

00001f0c <__fp_powsodd>:
    1f0c:	9f 93       	push	r25
    1f0e:	8f 93       	push	r24
    1f10:	7f 93       	push	r23
    1f12:	6f 93       	push	r22
    1f14:	ff 93       	push	r31
    1f16:	ef 93       	push	r30
    1f18:	9b 01       	movw	r18, r22
    1f1a:	ac 01       	movw	r20, r24
    1f1c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__mulsf3>
    1f20:	ef 91       	pop	r30
    1f22:	ff 91       	pop	r31
    1f24:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fp_powser>
    1f28:	2f 91       	pop	r18
    1f2a:	3f 91       	pop	r19
    1f2c:	4f 91       	pop	r20
    1f2e:	5f 91       	pop	r21
    1f30:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__mulsf3>

00001f34 <__itoa_ncheck>:
    1f34:	bb 27       	eor	r27, r27
    1f36:	4a 30       	cpi	r20, 0x0A	; 10
    1f38:	31 f4       	brne	.+12     	; 0x1f46 <__itoa_ncheck+0x12>
    1f3a:	99 23       	and	r25, r25
    1f3c:	22 f4       	brpl	.+8      	; 0x1f46 <__itoa_ncheck+0x12>
    1f3e:	bd e2       	ldi	r27, 0x2D	; 45
    1f40:	90 95       	com	r25
    1f42:	81 95       	neg	r24
    1f44:	9f 4f       	sbci	r25, 0xFF	; 255
    1f46:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__utoa_common>

00001f4a <__utoa_ncheck>:
    1f4a:	bb 27       	eor	r27, r27

00001f4c <__utoa_common>:
    1f4c:	fb 01       	movw	r30, r22
    1f4e:	55 27       	eor	r21, r21
    1f50:	aa 27       	eor	r26, r26
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	aa 1f       	adc	r26, r26
    1f58:	a4 17       	cp	r26, r20
    1f5a:	10 f0       	brcs	.+4      	; 0x1f60 <__utoa_common+0x14>
    1f5c:	a4 1b       	sub	r26, r20
    1f5e:	83 95       	inc	r24
    1f60:	50 51       	subi	r21, 0x10	; 16
    1f62:	b9 f7       	brne	.-18     	; 0x1f52 <__utoa_common+0x6>
    1f64:	a0 5d       	subi	r26, 0xD0	; 208
    1f66:	aa 33       	cpi	r26, 0x3A	; 58
    1f68:	08 f0       	brcs	.+2      	; 0x1f6c <__utoa_common+0x20>
    1f6a:	a9 5d       	subi	r26, 0xD9	; 217
    1f6c:	a1 93       	st	Z+, r26
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	79 f7       	brne	.-34     	; 0x1f50 <__utoa_common+0x4>
    1f72:	b1 11       	cpse	r27, r1
    1f74:	b1 93       	st	Z+, r27
    1f76:	11 92       	st	Z+, r1
    1f78:	cb 01       	movw	r24, r22
    1f7a:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <strrev>

00001f7e <strrev>:
    1f7e:	dc 01       	movw	r26, r24
    1f80:	fc 01       	movw	r30, r24
    1f82:	67 2f       	mov	r22, r23
    1f84:	71 91       	ld	r23, Z+
    1f86:	77 23       	and	r23, r23
    1f88:	e1 f7       	brne	.-8      	; 0x1f82 <strrev+0x4>
    1f8a:	32 97       	sbiw	r30, 0x02	; 2
    1f8c:	04 c0       	rjmp	.+8      	; 0x1f96 <strrev+0x18>
    1f8e:	7c 91       	ld	r23, X
    1f90:	6d 93       	st	X+, r22
    1f92:	70 83       	st	Z, r23
    1f94:	62 91       	ld	r22, -Z
    1f96:	ae 17       	cp	r26, r30
    1f98:	bf 07       	cpc	r27, r31
    1f9a:	c8 f3       	brcs	.-14     	; 0x1f8e <strrev+0x10>
    1f9c:	08 95       	ret

00001f9e <_exit>:
    1f9e:	f8 94       	cli

00001fa0 <__stop_program>:
    1fa0:	ff cf       	rjmp	.-2      	; 0x1fa0 <__stop_program>
