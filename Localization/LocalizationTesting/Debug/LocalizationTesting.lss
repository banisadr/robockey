
LocalizationTesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001bee  00001c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080010c  0080010c  00001c8e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023a1  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000934  00000000  00000000  000042a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c85  00000000  00000000  00004bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000610  00000000  00000000  0000585c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084c  00000000  00000000  00005e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c54  00000000  00000000  000066b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000930c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__ctors_end>
       4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       8:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      10:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      14:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      18:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      1c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      20:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      24:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      28:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__vector_10>
      2c:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__vector_11>
      30:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      34:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      38:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      3c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      40:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      44:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      48:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      4c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      50:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      54:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      58:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      5c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      60:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      64:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      68:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      6c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      70:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      74:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      78:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      7c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      80:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      84:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      88:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      8c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      90:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      94:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      98:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      9c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      a0:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      a4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      a8:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__trampolines_end>:
      f8:	0a 00       	.word	0x000a	; ????

000000fa <__c.2019>:
      fa:	20 00                                                .

000000fc <descriptor_list>:
      fc:	00 01 00 00 93 01 12 00 02 00 00 50 01 43 00 03     ...........P.C..
     10c:	00 00 4c 01 04 01 03 09 04 38 01 12 02 03 09 04     ..L......8......
     11c:	30 01 06 03 03 09 04 26 01 08                       0......&..

00000126 <string3>:
     126:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000130 <string2>:
     130:	06 03 4d 00 32 00 00 00                             ..M.2...

00000138 <string1>:
     138:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     148:	65 00 00 00                                         e...

0000014c <string0>:
     14c:	04 03 09 04                                         ....

00000150 <config1_descriptor>:
     150:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     160:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     170:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     180:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     190:	40 00 00                                            @..

00000193 <device_descriptor>:
     193:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1a3:	03 01                                               ..

000001a5 <endpoint_config_table>:
     1a5:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001b0 <__ctors_end>:
     1b0:	11 24       	eor	r1, r1
     1b2:	1f be       	out	0x3f, r1	; 63
     1b4:	cf ef       	ldi	r28, 0xFF	; 255
     1b6:	da e0       	ldi	r29, 0x0A	; 10
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	cd bf       	out	0x3d, r28	; 61

000001bc <__do_copy_data>:
     1bc:	11 e0       	ldi	r17, 0x01	; 1
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	ee ee       	ldi	r30, 0xEE	; 238
     1c4:	fb e1       	ldi	r31, 0x1B	; 27
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <__do_copy_data+0x10>
     1c8:	05 90       	lpm	r0, Z+
     1ca:	0d 92       	st	X+, r0
     1cc:	ac 30       	cpi	r26, 0x0C	; 12
     1ce:	b1 07       	cpc	r27, r17
     1d0:	d9 f7       	brne	.-10     	; 0x1c8 <__do_copy_data+0xc>

000001d2 <__do_clear_bss>:
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	ac e0       	ldi	r26, 0x0C	; 12
     1d6:	b1 e0       	ldi	r27, 0x01	; 1
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <.do_clear_bss_start>

000001da <.do_clear_bss_loop>:
     1da:	1d 92       	st	X+, r1

000001dc <.do_clear_bss_start>:
     1dc:	a8 32       	cpi	r26, 0x28	; 40
     1de:	b2 07       	cpc	r27, r18
     1e0:	e1 f7       	brne	.-8      	; 0x1da <.do_clear_bss_loop>
     1e2:	0e 94 25 05 	call	0xa4a	; 0xa4a <main>
     1e6:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <_exit>

000001ea <__bad_interrupt>:
     1ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ee <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     1ee:	83 30       	cpi	r24, 0x03	; 3
     1f0:	91 05       	cpc	r25, r1
     1f2:	01 f1       	breq	.+64     	; 0x234 <distIndex+0x46>
     1f4:	34 f4       	brge	.+12     	; 0x202 <distIndex+0x14>
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	91 05       	cpc	r25, r1
     1fa:	51 f0       	breq	.+20     	; 0x210 <distIndex+0x22>
     1fc:	02 97       	sbiw	r24, 0x02	; 2
     1fe:	89 f0       	breq	.+34     	; 0x222 <distIndex+0x34>
     200:	42 c0       	rjmp	.+132    	; 0x286 <distIndex+0x98>
     202:	85 30       	cpi	r24, 0x05	; 5
     204:	91 05       	cpc	r25, r1
     206:	51 f1       	breq	.+84     	; 0x25c <distIndex+0x6e>
     208:	f4 f0       	brlt	.+60     	; 0x246 <distIndex+0x58>
     20a:	06 97       	sbiw	r24, 0x06	; 6
     20c:	91 f1       	breq	.+100    	; 0x272 <distIndex+0x84>
     20e:	3b c0       	rjmp	.+118    	; 0x286 <distIndex+0x98>
	{
		case 1 : 
			pointsUsed[0] = 0;
     210:	ec e0       	ldi	r30, 0x0C	; 12
     212:	f1 e0       	ldi	r31, 0x01	; 1
     214:	11 82       	std	Z+1, r1	; 0x01
     216:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	93 83       	std	Z+3, r25	; 0x03
     21e:	82 83       	std	Z+2, r24	; 0x02
			break;
     220:	32 c0       	rjmp	.+100    	; 0x286 <distIndex+0x98>
			
		case 2 : 
			pointsUsed[0] = 0;
     222:	ec e0       	ldi	r30, 0x0C	; 12
     224:	f1 e0       	ldi	r31, 0x01	; 1
     226:	11 82       	std	Z+1, r1	; 0x01
     228:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	93 83       	std	Z+3, r25	; 0x03
     230:	82 83       	std	Z+2, r24	; 0x02
			break;
     232:	29 c0       	rjmp	.+82     	; 0x286 <distIndex+0x98>
			
		case 3 : 
			pointsUsed[0] = 0;
     234:	ec e0       	ldi	r30, 0x0C	; 12
     236:	f1 e0       	ldi	r31, 0x01	; 1
     238:	11 82       	std	Z+1, r1	; 0x01
     23a:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     23c:	83 e0       	ldi	r24, 0x03	; 3
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	93 83       	std	Z+3, r25	; 0x03
     242:	82 83       	std	Z+2, r24	; 0x02
			break;
     244:	20 c0       	rjmp	.+64     	; 0x286 <distIndex+0x98>
			
		case 4 : 
			pointsUsed[0] = 1;
     246:	ec e0       	ldi	r30, 0x0C	; 12
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	91 83       	std	Z+1, r25	; 0x01
     250:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	93 83       	std	Z+3, r25	; 0x03
     258:	82 83       	std	Z+2, r24	; 0x02
			break;
     25a:	15 c0       	rjmp	.+42     	; 0x286 <distIndex+0x98>
			
		case 5 : 
			pointsUsed[0] = 1;
     25c:	ec e0       	ldi	r30, 0x0C	; 12
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	91 83       	std	Z+1, r25	; 0x01
     266:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	93 83       	std	Z+3, r25	; 0x03
     26e:	82 83       	std	Z+2, r24	; 0x02
			break;
     270:	0a c0       	rjmp	.+20     	; 0x286 <distIndex+0x98>
			
		case 6 :
			pointsUsed[0] = 2;
     272:	ec e0       	ldi	r30, 0x0C	; 12
     274:	f1 e0       	ldi	r31, 0x01	; 1
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     27e:	83 e0       	ldi	r24, 0x03	; 3
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	93 83       	std	Z+3, r25	; 0x03
     284:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     286:	8c e0       	ldi	r24, 0x0C	; 12
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	08 95       	ret

0000028c <orientationCalculationFour>:


void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom)
{
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
     29a:	7a 01       	movw	r14, r20
     29c:	89 01       	movw	r16, r18
	//Find index of shortest length
	int indexMin = 0;
	int minVal = distVect[0];
     29e:	e6 2f       	mov	r30, r22
     2a0:	f7 2f       	mov	r31, r23
     2a2:	21 91       	ld	r18, Z+
     2a4:	31 91       	ld	r19, Z+
	for (int i = 0; i < 6; i++){
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	70 e0       	ldi	r23, 0x00	; 0


void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	08 c0       	rjmp	.+16     	; 0x2c0 <orientationCalculationFour+0x34>
	int minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     2b0:	a1 91       	ld	r26, Z+
     2b2:	b1 91       	ld	r27, Z+
     2b4:	a2 17       	cp	r26, r18
     2b6:	b3 07       	cpc	r27, r19
     2b8:	1c f4       	brge	.+6      	; 0x2c0 <orientationCalculationFour+0x34>
     2ba:	9d 01       	movw	r18, r26
void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	int minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     2bc:	86 2f       	mov	r24, r22
     2be:	97 2f       	mov	r25, r23
     2c0:	6f 5f       	subi	r22, 0xFF	; 255
     2c2:	7f 4f       	sbci	r23, 0xFF	; 255
     2c4:	66 30       	cpi	r22, 0x06	; 6
     2c6:	71 05       	cpc	r23, r1
     2c8:	99 f7       	brne	.-26     	; 0x2b0 <orientationCalculationFour+0x24>
	}
	
	//Find points used by shortest length
	
	int* pointsShort; 
	pointsShort = distIndex(indexMin);
     2ca:	0e 94 f7 00 	call	0x1ee	; 0x1ee <distIndex>
	
	if (pointsShort[0] == pointsLong[0]){
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 81       	ld	r18, Z
     2d2:	31 81       	ldd	r19, Z+1	; 0x01
     2d4:	48 81       	ld	r20, Y
     2d6:	59 81       	ldd	r21, Y+1	; 0x01
     2d8:	24 17       	cp	r18, r20
     2da:	35 07       	cpc	r19, r21
     2dc:	49 f4       	brne	.+18     	; 0x2f0 <orientationCalculationFour+0x64>
		*top = pointsLong[0];
     2de:	f7 01       	movw	r30, r14
     2e0:	31 83       	std	Z+1, r19	; 0x01
     2e2:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     2e4:	8a 81       	ldd	r24, Y+2	; 0x02
     2e6:	9b 81       	ldd	r25, Y+3	; 0x03
     2e8:	f8 01       	movw	r30, r16
     2ea:	91 83       	std	Z+1, r25	; 0x01
     2ec:	80 83       	st	Z, r24
     2ee:	25 c0       	rjmp	.+74     	; 0x33a <orientationCalculationFour+0xae>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     2f0:	6a 81       	ldd	r22, Y+2	; 0x02
     2f2:	7b 81       	ldd	r23, Y+3	; 0x03
     2f4:	26 17       	cp	r18, r22
     2f6:	37 07       	cpc	r19, r23
     2f8:	49 f4       	brne	.+18     	; 0x30c <orientationCalculationFour+0x80>
			*top = pointsLong[1];
     2fa:	f7 01       	movw	r30, r14
     2fc:	31 83       	std	Z+1, r19	; 0x01
     2fe:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     300:	88 81       	ld	r24, Y
     302:	99 81       	ldd	r25, Y+1	; 0x01
     304:	f8 01       	movw	r30, r16
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	80 83       	st	Z, r24
     30a:	17 c0       	rjmp	.+46     	; 0x33a <orientationCalculationFour+0xae>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     30c:	fc 01       	movw	r30, r24
     30e:	82 81       	ldd	r24, Z+2	; 0x02
     310:	93 81       	ldd	r25, Z+3	; 0x03
     312:	48 17       	cp	r20, r24
     314:	59 07       	cpc	r21, r25
     316:	49 f4       	brne	.+18     	; 0x32a <orientationCalculationFour+0x9e>
				*top = pointsLong[0];
     318:	f7 01       	movw	r30, r14
     31a:	51 83       	std	Z+1, r21	; 0x01
     31c:	40 83       	st	Z, r20
				*bottom = pointsLong[1];
     31e:	8a 81       	ldd	r24, Y+2	; 0x02
     320:	9b 81       	ldd	r25, Y+3	; 0x03
     322:	f8 01       	movw	r30, r16
     324:	91 83       	std	Z+1, r25	; 0x01
     326:	80 83       	st	Z, r24
     328:	08 c0       	rjmp	.+16     	; 0x33a <orientationCalculationFour+0xae>
			} else {
				*top = pointsLong[1];
     32a:	f7 01       	movw	r30, r14
     32c:	71 83       	std	Z+1, r23	; 0x01
     32e:	60 83       	st	Z, r22
				*bottom = pointsLong[0];
     330:	88 81       	ld	r24, Y
     332:	99 81       	ldd	r25, Y+1	; 0x01
     334:	f8 01       	movw	r30, r16
     336:	91 83       	std	Z+1, r25	; 0x01
     338:	80 83       	st	Z, r24
			}
		}
	}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	08 95       	ret

00000348 <fourPointCalc>:
	
}


int* fourPointCalc(int pvect[4][2])
{
     348:	2f 92       	push	r2
     34a:	3f 92       	push	r3
     34c:	4f 92       	push	r4
     34e:	5f 92       	push	r5
     350:	6f 92       	push	r6
     352:	7f 92       	push	r7
     354:	8f 92       	push	r8
     356:	9f 92       	push	r9
     358:	af 92       	push	r10
     35a:	bf 92       	push	r11
     35c:	cf 92       	push	r12
     35e:	df 92       	push	r13
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	a8 97       	sbiw	r28, 0x28	; 40
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	de bf       	out	0x3e, r29	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	1c 01       	movw	r2, r24
	static int centerFour[2];
	
	int dist01 = sqrt((pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     37e:	dc 01       	movw	r26, r24
     380:	14 96       	adiw	r26, 0x04	; 4
     382:	0d 90       	ld	r0, X+
     384:	bc 91       	ld	r27, X
     386:	a0 2d       	mov	r26, r0
     388:	ba 8b       	std	Y+18, r27	; 0x12
     38a:	a9 8b       	std	Y+17, r26	; 0x11
     38c:	fc 01       	movw	r30, r24
     38e:	e0 80       	ld	r14, Z
     390:	f1 80       	ldd	r15, Z+1	; 0x01
     392:	cd 01       	movw	r24, r26
     394:	8e 19       	sub	r24, r14
     396:	9f 09       	sbc	r25, r15
     398:	26 81       	ldd	r18, Z+6	; 0x06
     39a:	37 81       	ldd	r19, Z+7	; 0x07
     39c:	3e 8b       	std	Y+22, r19	; 0x16
     39e:	2d 8b       	std	Y+21, r18	; 0x15
     3a0:	02 81       	ldd	r16, Z+2	; 0x02
     3a2:	13 81       	ldd	r17, Z+3	; 0x03
     3a4:	20 1b       	sub	r18, r16
     3a6:	31 0b       	sbc	r19, r17
     3a8:	88 9f       	mul	r24, r24
     3aa:	40 01       	movw	r8, r0
     3ac:	89 9f       	mul	r24, r25
     3ae:	90 0c       	add	r9, r0
     3b0:	90 0c       	add	r9, r0
     3b2:	11 24       	eor	r1, r1
     3b4:	22 9f       	mul	r18, r18
     3b6:	c0 01       	movw	r24, r0
     3b8:	23 9f       	mul	r18, r19
     3ba:	90 0d       	add	r25, r0
     3bc:	90 0d       	add	r25, r0
     3be:	11 24       	eor	r1, r1
     3c0:	88 0e       	add	r8, r24
     3c2:	99 1e       	adc	r9, r25
     3c4:	09 2c       	mov	r0, r9
     3c6:	00 0c       	add	r0, r0
     3c8:	aa 08       	sbc	r10, r10
     3ca:	bb 08       	sbc	r11, r11
     3cc:	c5 01       	movw	r24, r10
     3ce:	b4 01       	movw	r22, r8
     3d0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__floatsisf>
     3d4:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <sqrt>
     3d8:	6d 8f       	std	Y+29, r22	; 0x1d
     3da:	7e 8f       	std	Y+30, r23	; 0x1e
     3dc:	8f 8f       	std	Y+31, r24	; 0x1f
     3de:	98 a3       	std	Y+32, r25	; 0x20
	int dist02 = sqrt((pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     3e0:	d1 01       	movw	r26, r2
     3e2:	18 96       	adiw	r26, 0x08	; 8
     3e4:	ad 90       	ld	r10, X+
     3e6:	bc 90       	ld	r11, X
     3e8:	19 97       	sbiw	r26, 0x09	; 9
     3ea:	c5 01       	movw	r24, r10
     3ec:	8e 19       	sub	r24, r14
     3ee:	9f 09       	sbc	r25, r15
     3f0:	1a 96       	adiw	r26, 0x0a	; 10
     3f2:	6d 90       	ld	r6, X+
     3f4:	7c 90       	ld	r7, X
     3f6:	1b 97       	sbiw	r26, 0x0b	; 11
     3f8:	93 01       	movw	r18, r6
     3fa:	20 1b       	sub	r18, r16
     3fc:	31 0b       	sbc	r19, r17
     3fe:	88 9f       	mul	r24, r24
     400:	40 01       	movw	r8, r0
     402:	89 9f       	mul	r24, r25
     404:	90 0c       	add	r9, r0
     406:	90 0c       	add	r9, r0
     408:	11 24       	eor	r1, r1
     40a:	22 9f       	mul	r18, r18
     40c:	c0 01       	movw	r24, r0
     40e:	23 9f       	mul	r18, r19
     410:	90 0d       	add	r25, r0
     412:	90 0d       	add	r25, r0
     414:	11 24       	eor	r1, r1
     416:	88 0e       	add	r8, r24
     418:	99 1e       	adc	r9, r25
     41a:	94 01       	movw	r18, r8
     41c:	99 0c       	add	r9, r9
     41e:	44 0b       	sbc	r20, r20
     420:	55 0b       	sbc	r21, r21
     422:	29 8f       	std	Y+25, r18	; 0x19
     424:	3a 8f       	std	Y+26, r19	; 0x1a
     426:	4b 8f       	std	Y+27, r20	; 0x1b
     428:	5c 8f       	std	Y+28, r21	; 0x1c
     42a:	69 8d       	ldd	r22, Y+25	; 0x19
     42c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     42e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     430:	9c 8d       	ldd	r25, Y+28	; 0x1c
     432:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__floatsisf>
     436:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <sqrt>
     43a:	69 8f       	std	Y+25, r22	; 0x19
     43c:	7a 8f       	std	Y+26, r23	; 0x1a
     43e:	8b 8f       	std	Y+27, r24	; 0x1b
     440:	9c 8f       	std	Y+28, r25	; 0x1c
	int dist03 = sqrt((pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     442:	d1 01       	movw	r26, r2
     444:	1c 96       	adiw	r26, 0x0c	; 12
     446:	8d 90       	ld	r8, X+
     448:	9c 90       	ld	r9, X
     44a:	1d 97       	sbiw	r26, 0x0d	; 13
     44c:	c4 01       	movw	r24, r8
     44e:	8e 19       	sub	r24, r14
     450:	9f 09       	sbc	r25, r15
     452:	1e 96       	adiw	r26, 0x0e	; 14
     454:	4d 90       	ld	r4, X+
     456:	5c 90       	ld	r5, X
     458:	1f 97       	sbiw	r26, 0x0f	; 15
     45a:	92 01       	movw	r18, r4
     45c:	20 1b       	sub	r18, r16
     45e:	31 0b       	sbc	r19, r17
     460:	88 9f       	mul	r24, r24
     462:	60 01       	movw	r12, r0
     464:	89 9f       	mul	r24, r25
     466:	d0 0c       	add	r13, r0
     468:	d0 0c       	add	r13, r0
     46a:	11 24       	eor	r1, r1
     46c:	22 9f       	mul	r18, r18
     46e:	c0 01       	movw	r24, r0
     470:	23 9f       	mul	r18, r19
     472:	90 0d       	add	r25, r0
     474:	90 0d       	add	r25, r0
     476:	11 24       	eor	r1, r1
     478:	c8 0e       	add	r12, r24
     47a:	d9 1e       	adc	r13, r25
     47c:	0d 2c       	mov	r0, r13
     47e:	00 0c       	add	r0, r0
     480:	ee 08       	sbc	r14, r14
     482:	ff 08       	sbc	r15, r15
     484:	c7 01       	movw	r24, r14
     486:	b6 01       	movw	r22, r12
     488:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__floatsisf>
     48c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <sqrt>
     490:	69 a3       	std	Y+33, r22	; 0x21
     492:	7a a3       	std	Y+34, r23	; 0x22
     494:	8b a3       	std	Y+35, r24	; 0x23
     496:	9c a3       	std	Y+36, r25	; 0x24
	int dist12 = sqrt((pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     498:	c5 01       	movw	r24, r10
     49a:	e9 89       	ldd	r30, Y+17	; 0x11
     49c:	fa 89       	ldd	r31, Y+18	; 0x12
     49e:	8e 1b       	sub	r24, r30
     4a0:	9f 0b       	sbc	r25, r31
     4a2:	93 01       	movw	r18, r6
     4a4:	4d 89       	ldd	r20, Y+21	; 0x15
     4a6:	5e 89       	ldd	r21, Y+22	; 0x16
     4a8:	24 1b       	sub	r18, r20
     4aa:	35 0b       	sbc	r19, r21
     4ac:	88 9f       	mul	r24, r24
     4ae:	60 01       	movw	r12, r0
     4b0:	89 9f       	mul	r24, r25
     4b2:	d0 0c       	add	r13, r0
     4b4:	d0 0c       	add	r13, r0
     4b6:	11 24       	eor	r1, r1
     4b8:	22 9f       	mul	r18, r18
     4ba:	c0 01       	movw	r24, r0
     4bc:	23 9f       	mul	r18, r19
     4be:	90 0d       	add	r25, r0
     4c0:	90 0d       	add	r25, r0
     4c2:	11 24       	eor	r1, r1
     4c4:	c8 0e       	add	r12, r24
     4c6:	d9 1e       	adc	r13, r25
     4c8:	0d 2c       	mov	r0, r13
     4ca:	00 0c       	add	r0, r0
     4cc:	ee 08       	sbc	r14, r14
     4ce:	ff 08       	sbc	r15, r15
     4d0:	c7 01       	movw	r24, r14
     4d2:	b6 01       	movw	r22, r12
     4d4:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__floatsisf>
     4d8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <sqrt>
     4dc:	6d a3       	std	Y+37, r22	; 0x25
     4de:	7e a3       	std	Y+38, r23	; 0x26
     4e0:	8f a3       	std	Y+39, r24	; 0x27
     4e2:	98 a7       	std	Y+40, r25	; 0x28
	int dist13 = sqrt((pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     4e4:	c4 01       	movw	r24, r8
     4e6:	a9 89       	ldd	r26, Y+17	; 0x11
     4e8:	ba 89       	ldd	r27, Y+18	; 0x12
     4ea:	8a 1b       	sub	r24, r26
     4ec:	9b 0b       	sbc	r25, r27
     4ee:	92 01       	movw	r18, r4
     4f0:	ed 89       	ldd	r30, Y+21	; 0x15
     4f2:	fe 89       	ldd	r31, Y+22	; 0x16
     4f4:	2e 1b       	sub	r18, r30
     4f6:	3f 0b       	sbc	r19, r31
     4f8:	88 9f       	mul	r24, r24
     4fa:	60 01       	movw	r12, r0
     4fc:	89 9f       	mul	r24, r25
     4fe:	d0 0c       	add	r13, r0
     500:	d0 0c       	add	r13, r0
     502:	11 24       	eor	r1, r1
     504:	22 9f       	mul	r18, r18
     506:	c0 01       	movw	r24, r0
     508:	23 9f       	mul	r18, r19
     50a:	90 0d       	add	r25, r0
     50c:	90 0d       	add	r25, r0
     50e:	11 24       	eor	r1, r1
     510:	c8 0e       	add	r12, r24
     512:	d9 1e       	adc	r13, r25
     514:	0d 2c       	mov	r0, r13
     516:	00 0c       	add	r0, r0
     518:	ee 08       	sbc	r14, r14
     51a:	ff 08       	sbc	r15, r15
     51c:	c7 01       	movw	r24, r14
     51e:	b6 01       	movw	r22, r12
     520:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__floatsisf>
     524:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <sqrt>
     528:	69 8b       	std	Y+17, r22	; 0x11
     52a:	7a 8b       	std	Y+18, r23	; 0x12
     52c:	8b 8b       	std	Y+19, r24	; 0x13
     52e:	9c 8b       	std	Y+20, r25	; 0x14
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     530:	94 01       	movw	r18, r8
     532:	2a 19       	sub	r18, r10
     534:	3b 09       	sbc	r19, r11
     536:	c2 01       	movw	r24, r4
     538:	86 19       	sub	r24, r6
     53a:	97 09       	sbc	r25, r7
     53c:	22 9f       	mul	r18, r18
     53e:	60 01       	movw	r12, r0
     540:	23 9f       	mul	r18, r19
     542:	d0 0c       	add	r13, r0
     544:	d0 0c       	add	r13, r0
     546:	11 24       	eor	r1, r1
     548:	88 9f       	mul	r24, r24
     54a:	90 01       	movw	r18, r0
     54c:	89 9f       	mul	r24, r25
     54e:	30 0d       	add	r19, r0
     550:	30 0d       	add	r19, r0
     552:	11 24       	eor	r1, r1
     554:	c2 0e       	add	r12, r18
     556:	d3 1e       	adc	r13, r19
     558:	0d 2c       	mov	r0, r13
     55a:	00 0c       	add	r0, r0
     55c:	ee 08       	sbc	r14, r14
     55e:	ff 08       	sbc	r15, r15
     560:	c7 01       	movw	r24, r14
     562:	b6 01       	movw	r22, r12
     564:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__floatsisf>
     568:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <sqrt>
     56c:	6b 01       	movw	r12, r22
     56e:	7c 01       	movw	r14, r24

int* fourPointCalc(int pvect[4][2])
{
	static int centerFour[2];
	
	int dist01 = sqrt((pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     570:	6d 8d       	ldd	r22, Y+29	; 0x1d
     572:	7e 8d       	ldd	r23, Y+30	; 0x1e
     574:	8f 8d       	ldd	r24, Y+31	; 0x1f
     576:	98 a1       	ldd	r25, Y+32	; 0x20
     578:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__fixsfsi>
     57c:	7a 83       	std	Y+2, r23	; 0x02
     57e:	69 83       	std	Y+1, r22	; 0x01
	int dist02 = sqrt((pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     580:	69 8d       	ldd	r22, Y+25	; 0x19
     582:	7a 8d       	ldd	r23, Y+26	; 0x1a
     584:	8b 8d       	ldd	r24, Y+27	; 0x1b
     586:	9c 8d       	ldd	r25, Y+28	; 0x1c
     588:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__fixsfsi>
     58c:	7c 83       	std	Y+4, r23	; 0x04
     58e:	6b 83       	std	Y+3, r22	; 0x03
	int dist03 = sqrt((pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     590:	69 a1       	ldd	r22, Y+33	; 0x21
     592:	7a a1       	ldd	r23, Y+34	; 0x22
     594:	8b a1       	ldd	r24, Y+35	; 0x23
     596:	9c a1       	ldd	r25, Y+36	; 0x24
     598:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__fixsfsi>
     59c:	7e 83       	std	Y+6, r23	; 0x06
     59e:	6d 83       	std	Y+5, r22	; 0x05
	int dist12 = sqrt((pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     5a0:	6d a1       	ldd	r22, Y+37	; 0x25
     5a2:	7e a1       	ldd	r23, Y+38	; 0x26
     5a4:	8f a1       	ldd	r24, Y+39	; 0x27
     5a6:	98 a5       	ldd	r25, Y+40	; 0x28
     5a8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__fixsfsi>
     5ac:	78 87       	std	Y+8, r23	; 0x08
     5ae:	6f 83       	std	Y+7, r22	; 0x07
	int dist13 = sqrt((pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     5b0:	69 89       	ldd	r22, Y+17	; 0x11
     5b2:	7a 89       	ldd	r23, Y+18	; 0x12
     5b4:	8b 89       	ldd	r24, Y+19	; 0x13
     5b6:	9c 89       	ldd	r25, Y+20	; 0x14
     5b8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__fixsfsi>
     5bc:	7a 87       	std	Y+10, r23	; 0x0a
     5be:	69 87       	std	Y+9, r22	; 0x09
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     5c0:	c7 01       	movw	r24, r14
     5c2:	b6 01       	movw	r22, r12
     5c4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__fixsfsi>
     5c8:	7c 87       	std	Y+12, r23	; 0x0c
     5ca:	6b 87       	std	Y+11, r22	; 0x0b
     5cc:	fe 01       	movw	r30, r28
     5ce:	31 96       	adiw	r30, 0x01	; 1
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
	int dist13 = sqrt((pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     5dc:	41 91       	ld	r20, Z+
     5de:	51 91       	ld	r21, Z+
     5e0:	64 17       	cp	r22, r20
     5e2:	75 07       	cpc	r23, r21
     5e4:	1c f4       	brge	.+6      	; 0x5ec <fourPointCalc+0x2a4>
			indexMax = i;
			maxVal = distVect[i];
     5e6:	ba 01       	movw	r22, r20
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     5e8:	82 2f       	mov	r24, r18
     5ea:	93 2f       	mov	r25, r19
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
     5ec:	2f 5f       	subi	r18, 0xFF	; 255
     5ee:	3f 4f       	sbci	r19, 0xFF	; 255
     5f0:	26 30       	cpi	r18, 0x06	; 6
     5f2:	31 05       	cpc	r19, r1
     5f4:	99 f7       	brne	.-26     	; 0x5dc <fourPointCalc+0x294>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLong; 
	pointsLong = distIndex(indexMax);
     5f6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <distIndex>
	int center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     5fa:	fc 01       	movw	r30, r24
     5fc:	a0 81       	ld	r26, Z
     5fe:	b1 81       	ldd	r27, Z+1	; 0x01
     600:	aa 0f       	add	r26, r26
     602:	bb 1f       	adc	r27, r27
     604:	aa 0f       	add	r26, r26
     606:	bb 1f       	adc	r27, r27
     608:	a2 0d       	add	r26, r2
     60a:	b3 1d       	adc	r27, r3
     60c:	22 81       	ldd	r18, Z+2	; 0x02
     60e:	33 81       	ldd	r19, Z+3	; 0x03
     610:	f9 01       	movw	r30, r18
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	e2 0d       	add	r30, r2
     61c:	f3 1d       	adc	r31, r3
     61e:	0d 91       	ld	r16, X+
     620:	1c 91       	ld	r17, X
     622:	11 97       	sbiw	r26, 0x01	; 1
     624:	20 81       	ld	r18, Z
     626:	31 81       	ldd	r19, Z+1	; 0x01
     628:	02 0f       	add	r16, r18
     62a:	13 1f       	adc	r17, r19
     62c:	11 23       	and	r17, r17
     62e:	14 f4       	brge	.+4      	; 0x634 <fourPointCalc+0x2ec>
     630:	0f 5f       	subi	r16, 0xFF	; 255
     632:	1f 4f       	sbci	r17, 0xFF	; 255
     634:	15 95       	asr	r17
     636:	07 95       	ror	r16
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     638:	12 96       	adiw	r26, 0x02	; 2
     63a:	ad 90       	ld	r10, X+
     63c:	bc 90       	ld	r11, X
     63e:	13 97       	sbiw	r26, 0x03	; 3
     640:	22 81       	ldd	r18, Z+2	; 0x02
     642:	33 81       	ldd	r19, Z+3	; 0x03
     644:	a2 0e       	add	r10, r18
     646:	b3 1e       	adc	r11, r19
     648:	bb 20       	and	r11, r11
     64a:	1c f4       	brge	.+6      	; 0x652 <fourPointCalc+0x30a>
     64c:	ff ef       	ldi	r31, 0xFF	; 255
     64e:	af 1a       	sub	r10, r31
     650:	bf 0a       	sbc	r11, r31
     652:	b5 94       	asr	r11
     654:	a7 94       	ror	r10
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     656:	9e 01       	movw	r18, r28
     658:	21 5f       	subi	r18, 0xF1	; 241
     65a:	3f 4f       	sbci	r19, 0xFF	; 255
     65c:	ae 01       	movw	r20, r28
     65e:	43 5f       	subi	r20, 0xF3	; 243
     660:	5f 4f       	sbci	r21, 0xFF	; 255
     662:	be 01       	movw	r22, r28
     664:	6f 5f       	subi	r22, 0xFF	; 255
     666:	7f 4f       	sbci	r23, 0xFF	; 255
     668:	0e 94 46 01 	call	0x28c	; 0x28c <orientationCalculationFour>
	
	int centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     66c:	ed 84       	ldd	r14, Y+13	; 0x0d
     66e:	fe 84       	ldd	r15, Y+14	; 0x0e
     670:	ee 0c       	add	r14, r14
     672:	ff 1c       	adc	r15, r15
     674:	ee 0c       	add	r14, r14
     676:	ff 1c       	adc	r15, r15
     678:	e2 0c       	add	r14, r2
     67a:	f3 1c       	adc	r15, r3
     67c:	8f 85       	ldd	r24, Y+15	; 0x0f
     67e:	98 89       	ldd	r25, Y+16	; 0x10
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	28 0e       	add	r2, r24
     68a:	39 1e       	adc	r3, r25
     68c:	d7 01       	movw	r26, r14
     68e:	6d 91       	ld	r22, X+
     690:	7c 91       	ld	r23, X
     692:	f1 01       	movw	r30, r2
     694:	80 81       	ld	r24, Z
     696:	91 81       	ldd	r25, Z+1	; 0x01
     698:	68 1b       	sub	r22, r24
     69a:	79 0b       	sbc	r23, r25
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
	
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
     69c:	07 2e       	mov	r0, r23
     69e:	00 0c       	add	r0, r0
     6a0:	88 0b       	sbc	r24, r24
     6a2:	99 0b       	sbc	r25, r25
     6a4:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__floatsisf>
     6a8:	2b 01       	movw	r4, r22
     6aa:	3c 01       	movw	r6, r24
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
	
	int centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     6ac:	d7 01       	movw	r26, r14
     6ae:	12 96       	adiw	r26, 0x02	; 2
     6b0:	6d 91       	ld	r22, X+
     6b2:	7c 91       	ld	r23, X
     6b4:	13 97       	sbiw	r26, 0x03	; 3
     6b6:	f1 01       	movw	r30, r2
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	68 1b       	sub	r22, r24
     6be:	79 0b       	sbc	r23, r25
	
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
     6c0:	07 2e       	mov	r0, r23
     6c2:	00 0c       	add	r0, r0
     6c4:	88 0b       	sbc	r24, r24
     6c6:	99 0b       	sbc	r25, r25
     6c8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__floatsisf>
     6cc:	90 58       	subi	r25, 0x80	; 128
     6ce:	a3 01       	movw	r20, r6
     6d0:	92 01       	movw	r18, r4
     6d2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <atan2>
	theta += M_PI/2;
     6d6:	2b ed       	ldi	r18, 0xDB	; 219
     6d8:	3f e0       	ldi	r19, 0x0F	; 15
     6da:	49 ec       	ldi	r20, 0xC9	; 201
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     6e2:	2b 01       	movw	r4, r22
     6e4:	3c 01       	movw	r6, r24
	int t[2];
	t[0] = -1*center[0] + 512;
	t[1] = -1*center[1] + 382;
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     6e6:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <sin>
     6ea:	6b 01       	movw	r12, r22
     6ec:	7c 01       	movw	r14, r24
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
	theta += M_PI/2;
	
	int t[2];
	t[0] = -1*center[0] + 512;
	t[1] = -1*center[1] + 382;
     6ee:	6e e7       	ldi	r22, 0x7E	; 126
     6f0:	71 e0       	ldi	r23, 0x01	; 1
     6f2:	6a 19       	sub	r22, r10
     6f4:	7b 09       	sbc	r23, r11
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     6f6:	07 2e       	mov	r0, r23
     6f8:	00 0c       	add	r0, r0
     6fa:	88 0b       	sbc	r24, r24
     6fc:	99 0b       	sbc	r25, r25
     6fe:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__floatsisf>
     702:	4b 01       	movw	r8, r22
     704:	5c 01       	movw	r10, r24
     706:	c3 01       	movw	r24, r6
     708:	b2 01       	movw	r22, r4
     70a:	0e 94 2f 0b 	call	0x165e	; 0x165e <cos>
     70e:	69 8b       	std	Y+17, r22	; 0x11
     710:	7a 8b       	std	Y+18, r23	; 0x12
     712:	8b 8b       	std	Y+19, r24	; 0x13
     714:	9c 8b       	std	Y+20, r25	; 0x14
	
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
	theta += M_PI/2;
	
	int t[2];
	t[0] = -1*center[0] + 512;
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	72 e0       	ldi	r23, 0x02	; 2
     71a:	60 1b       	sub	r22, r16
     71c:	71 0b       	sbc	r23, r17
	t[1] = -1*center[1] + 382;
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     71e:	07 2e       	mov	r0, r23
     720:	00 0c       	add	r0, r0
     722:	88 0b       	sbc	r24, r24
     724:	99 0b       	sbc	r25, r25
     726:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__floatsisf>
     72a:	2b 01       	movw	r4, r22
     72c:	3c 01       	movw	r6, r24
     72e:	0c e1       	ldi	r16, 0x1C	; 28
     730:	11 e0       	ldi	r17, 0x01	; 1
     732:	a5 01       	movw	r20, r10
     734:	94 01       	movw	r18, r8
     736:	c7 01       	movw	r24, r14
     738:	b6 01       	movw	r22, r12
     73a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__mulsf3>
     73e:	6d 8b       	std	Y+21, r22	; 0x15
     740:	7e 8b       	std	Y+22, r23	; 0x16
     742:	8f 8b       	std	Y+23, r24	; 0x17
     744:	98 8f       	std	Y+24, r25	; 0x18
     746:	a3 01       	movw	r20, r6
     748:	92 01       	movw	r18, r4
     74a:	69 89       	ldd	r22, Y+17	; 0x11
     74c:	7a 89       	ldd	r23, Y+18	; 0x12
     74e:	8b 89       	ldd	r24, Y+19	; 0x13
     750:	9c 89       	ldd	r25, Y+20	; 0x14
     752:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__mulsf3>
     756:	9b 01       	movw	r18, r22
     758:	ac 01       	movw	r20, r24
     75a:	6d 89       	ldd	r22, Y+21	; 0x15
     75c:	7e 89       	ldd	r23, Y+22	; 0x16
     75e:	8f 89       	ldd	r24, Y+23	; 0x17
     760:	98 8d       	ldd	r25, Y+24	; 0x18
     762:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     766:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__fixsfsi>
     76a:	d8 01       	movw	r26, r16
     76c:	6d 93       	st	X+, r22
     76e:	7c 93       	st	X, r23
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     770:	29 89       	ldd	r18, Y+17	; 0x11
     772:	3a 89       	ldd	r19, Y+18	; 0x12
     774:	4b 89       	ldd	r20, Y+19	; 0x13
     776:	5c 89       	ldd	r21, Y+20	; 0x14
     778:	c5 01       	movw	r24, r10
     77a:	b4 01       	movw	r22, r8
     77c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__mulsf3>
     780:	4b 01       	movw	r8, r22
     782:	5c 01       	movw	r10, r24
     784:	a3 01       	movw	r20, r6
     786:	92 01       	movw	r18, r4
     788:	c7 01       	movw	r24, r14
     78a:	b6 01       	movw	r22, r12
     78c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__mulsf3>
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
     794:	c5 01       	movw	r24, r10
     796:	b4 01       	movw	r22, r8
     798:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     79c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__fixsfsi>
     7a0:	f8 01       	movw	r30, r16
     7a2:	73 83       	std	Z+3, r23	; 0x03
     7a4:	62 83       	std	Z+2, r22	; 0x02
	
	return centerFour;
}
     7a6:	c8 01       	movw	r24, r16
     7a8:	a8 96       	adiw	r28, 0x28	; 40
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	bf 90       	pop	r11
     7c6:	af 90       	pop	r10
     7c8:	9f 90       	pop	r9
     7ca:	8f 90       	pop	r8
     7cc:	7f 90       	pop	r7
     7ce:	6f 90       	pop	r6
     7d0:	5f 90       	pop	r5
     7d2:	4f 90       	pop	r4
     7d4:	3f 90       	pop	r3
     7d6:	2f 90       	pop	r2
     7d8:	08 95       	ret

000007da <localization_calc>:
void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom);


//Public function declarations 
int* localization_calc(int rawStarData[8], int robotCenterPrev[2])
{
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	68 97       	sbiw	r28, 0x18	; 24
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     800:	0d b7       	in	r16, 0x3d	; 61
     802:	1e b7       	in	r17, 0x3e	; 62
int* localization_calc(int rawStarData[8], int robotCenterPrev[2])
{
	static int robotCenter[2];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     804:	80 81       	ld	r24, Z
     806:	91 81       	ldd	r25, Z+1	; 0x01
     808:	9a 83       	std	Y+2, r25	; 0x02
     80a:	89 83       	std	Y+1, r24	; 0x01
     80c:	80 85       	ldd	r24, Z+8	; 0x08
     80e:	91 85       	ldd	r25, Z+9	; 0x09
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	8b 83       	std	Y+3, r24	; 0x03
     814:	82 81       	ldd	r24, Z+2	; 0x02
     816:	93 81       	ldd	r25, Z+3	; 0x03
     818:	9e 83       	std	Y+6, r25	; 0x06
     81a:	8d 83       	std	Y+5, r24	; 0x05
     81c:	82 85       	ldd	r24, Z+10	; 0x0a
     81e:	93 85       	ldd	r25, Z+11	; 0x0b
     820:	98 87       	std	Y+8, r25	; 0x08
     822:	8f 83       	std	Y+7, r24	; 0x07
     824:	84 81       	ldd	r24, Z+4	; 0x04
     826:	95 81       	ldd	r25, Z+5	; 0x05
     828:	9a 87       	std	Y+10, r25	; 0x0a
     82a:	89 87       	std	Y+9, r24	; 0x09
     82c:	84 85       	ldd	r24, Z+12	; 0x0c
     82e:	95 85       	ldd	r25, Z+13	; 0x0d
     830:	9c 87       	std	Y+12, r25	; 0x0c
     832:	8b 87       	std	Y+11, r24	; 0x0b
     834:	86 81       	ldd	r24, Z+6	; 0x06
     836:	97 81       	ldd	r25, Z+7	; 0x07
     838:	9e 87       	std	Y+14, r25	; 0x0e
     83a:	8d 87       	std	Y+13, r24	; 0x0d
     83c:	86 85       	ldd	r24, Z+14	; 0x0e
     83e:	97 85       	ldd	r25, Z+15	; 0x0f
     840:	98 8b       	std	Y+16, r25	; 0x10
     842:	8f 87       	std	Y+15, r24	; 0x0f
     844:	ae 01       	movw	r20, r28
     846:	4f 5f       	subi	r20, 0xFF	; 255
     848:	5f 4f       	sbci	r21, 0xFF	; 255
     84a:	7a 01       	movw	r14, r20
     84c:	40 5f       	subi	r20, 0xF0	; 240
     84e:	5f 4f       	sbci	r21, 0xFF	; 255
     850:	f7 01       	movw	r30, r14
	
	//If the x or y data is not received, ensure that the whole point is removed (set to 1023)
	for (int i = 0; i < 4; i++ ){
		for (int j = 0; j < 2; j++ ){
			if (pvect[i][j] == 1023){
				pvect[i][0] = 1023;
     852:	6f ef       	ldi	r22, 0xFF	; 255
     854:	73 e0       	ldi	r23, 0x03	; 3
     856:	0c c0       	rjmp	.+24     	; 0x870 <localization_calc+0x96>
     858:	d9 01       	movw	r26, r18
     85a:	11 96       	adiw	r26, 0x01	; 1
     85c:	7c 93       	st	X, r23
     85e:	6e 93       	st	-X, r22
				pvect[i][1] = 1023;
     860:	13 96       	adiw	r26, 0x03	; 3
     862:	7c 93       	st	X, r23
     864:	6e 93       	st	-X, r22
     866:	12 97       	sbiw	r26, 0x02	; 2
     868:	34 96       	adiw	r30, 0x04	; 4
		{rawStarData[2], rawStarData[6]},
		{rawStarData[3], rawStarData[7]}
	};
	
	//If the x or y data is not received, ensure that the whole point is removed (set to 1023)
	for (int i = 0; i < 4; i++ ){
     86a:	e4 17       	cp	r30, r20
     86c:	f5 07       	cpc	r31, r21
     86e:	61 f0       	breq	.+24     	; 0x888 <localization_calc+0xae>
     870:	9f 01       	movw	r18, r30
		for (int j = 0; j < 2; j++ ){
			if (pvect[i][j] == 1023){
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	8f 3f       	cpi	r24, 0xFF	; 255
     878:	93 40       	sbci	r25, 0x03	; 3
     87a:	71 f3       	breq	.-36     	; 0x858 <localization_calc+0x7e>
     87c:	82 81       	ldd	r24, Z+2	; 0x02
     87e:	93 81       	ldd	r25, Z+3	; 0x03
     880:	8f 3f       	cpi	r24, 0xFF	; 255
     882:	93 40       	sbci	r25, 0x03	; 3
     884:	89 f7       	brne	.-30     	; 0x868 <localization_calc+0x8e>
     886:	e8 cf       	rjmp	.-48     	; 0x858 <localization_calc+0x7e>
			}
		}
	}
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     888:	fe 01       	movw	r30, r28
     88a:	71 96       	adiw	r30, 0x11	; 17
     88c:	88 e0       	ldi	r24, 0x08	; 8
     88e:	df 01       	movw	r26, r30
     890:	1d 92       	st	X+, r1
     892:	8a 95       	dec	r24
     894:	e9 f7       	brne	.-6      	; 0x890 <localization_calc+0xb6>
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     89e:	f7 01       	movw	r30, r14
     8a0:	40 81       	ld	r20, Z
     8a2:	51 81       	ldd	r21, Z+1	; 0x01
     8a4:	4f 3f       	cpi	r20, 0xFF	; 255
     8a6:	53 40       	sbci	r21, 0x03	; 3
     8a8:	71 f0       	breq	.+28     	; 0x8c6 <localization_calc+0xec>
			numPoints++;
     8aa:	2f 5f       	subi	r18, 0xFF	; 255
     8ac:	3f 4f       	sbci	r19, 0xFF	; 255
			pointIndices[numPoints] = i;
     8ae:	f9 01       	movw	r30, r18
     8b0:	ee 0f       	add	r30, r30
     8b2:	ff 1f       	adc	r31, r31
     8b4:	aa 24       	eor	r10, r10
     8b6:	a3 94       	inc	r10
     8b8:	b1 2c       	mov	r11, r1
     8ba:	ac 0e       	add	r10, r28
     8bc:	bd 1e       	adc	r11, r29
     8be:	ea 0d       	add	r30, r10
     8c0:	fb 1d       	adc	r31, r11
     8c2:	91 8b       	std	Z+17, r25	; 0x11
     8c4:	80 8b       	std	Z+16, r24	; 0x10
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	44 e0       	ldi	r20, 0x04	; 4
     8ca:	e4 0e       	add	r14, r20
     8cc:	f1 1c       	adc	r15, r1
     8ce:	84 30       	cpi	r24, 0x04	; 4
     8d0:	91 05       	cpc	r25, r1
     8d2:	29 f7       	brne	.-54     	; 0x89e <localization_calc+0xc4>
			pointIndices[numPoints] = i;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     8d4:	21 15       	cp	r18, r1
     8d6:	31 05       	cpc	r19, r1
     8d8:	09 f4       	brne	.+2      	; 0x8dc <localization_calc+0x102>
     8da:	8a c0       	rjmp	.+276    	; 0x9f0 <localization_calc+0x216>
     8dc:	ed b6       	in	r14, 0x3d	; 61
     8de:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     8e0:	69 01       	movw	r12, r18
     8e2:	cc 0c       	add	r12, r12
     8e4:	dd 1c       	adc	r13, r13
     8e6:	cc 0c       	add	r12, r12
     8e8:	dd 1c       	adc	r13, r13
     8ea:	8d b7       	in	r24, 0x3d	; 61
     8ec:	9e b7       	in	r25, 0x3e	; 62
     8ee:	8c 19       	sub	r24, r12
     8f0:	9d 09       	sbc	r25, r13
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	9e bf       	out	0x3e, r25	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	8d bf       	out	0x3d, r24	; 61
     8fc:	01 96       	adiw	r24, 0x01	; 1
		for (int i = 0; i < numPoints; i++) {
     8fe:	12 16       	cp	r1, r18
     900:	13 06       	cpc	r1, r19
     902:	7c f5       	brge	.+94     	; 0x962 <localization_calc+0x188>
     904:	be 01       	movw	r22, r28
     906:	6f 5e       	subi	r22, 0xEF	; 239
     908:	7f 4f       	sbci	r23, 0xFF	; 255
     90a:	dc 01       	movw	r26, r24
     90c:	c8 0e       	add	r12, r24
     90e:	d9 1e       	adc	r13, r25
			int index = pointIndices[i];
     910:	fb 01       	movw	r30, r22
     912:	41 91       	ld	r20, Z+
     914:	51 91       	ld	r21, Z+
     916:	bf 01       	movw	r22, r30
			points[i][1] = pvect[index][1];
     918:	fa 01       	movw	r30, r20
     91a:	ee 0f       	add	r30, r30
     91c:	ff 1f       	adc	r31, r31
     91e:	ee 0f       	add	r30, r30
     920:	ff 1f       	adc	r31, r31
     922:	aa 24       	eor	r10, r10
     924:	a3 94       	inc	r10
     926:	b1 2c       	mov	r11, r1
     928:	ac 0e       	add	r10, r28
     92a:	bd 1e       	adc	r11, r29
     92c:	ea 0d       	add	r30, r10
     92e:	fb 1d       	adc	r31, r11
     930:	02 80       	ldd	r0, Z+2	; 0x02
     932:	f3 81       	ldd	r31, Z+3	; 0x03
     934:	e0 2d       	mov	r30, r0
     936:	13 96       	adiw	r26, 0x03	; 3
     938:	fc 93       	st	X, r31
     93a:	ee 93       	st	-X, r30
     93c:	12 97       	sbiw	r26, 0x02	; 2
			points[i][2] = pvect[index][2];
     93e:	fa 01       	movw	r30, r20
     940:	31 96       	adiw	r30, 0x01	; 1
     942:	ee 0f       	add	r30, r30
     944:	ff 1f       	adc	r31, r31
     946:	ee 0f       	add	r30, r30
     948:	ff 1f       	adc	r31, r31
     94a:	ea 0d       	add	r30, r10
     94c:	fb 1d       	adc	r31, r11
     94e:	40 81       	ld	r20, Z
     950:	51 81       	ldd	r21, Z+1	; 0x01
     952:	15 96       	adiw	r26, 0x05	; 5
     954:	5c 93       	st	X, r21
     956:	4e 93       	st	-X, r20
     958:	14 97       	sbiw	r26, 0x04	; 4
     95a:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     95c:	ac 15       	cp	r26, r12
     95e:	bd 05       	cpc	r27, r13
     960:	b9 f6       	brne	.-82     	; 0x910 <localization_calc+0x136>
			points[i][1] = pvect[index][1];
			points[i][2] = pvect[index][2];
		}
		
		
		m_red(ON);
     962:	6e 9a       	sbi	0x0d, 6	; 13
     964:	76 98       	cbi	0x0e, 6	; 14
		
		int* calcPointer; 
		static int rc[2] = {1023, 1023};
		switch (numPoints)
     966:	22 30       	cpi	r18, 0x02	; 2
     968:	31 05       	cpc	r19, r1
     96a:	c9 f0       	breq	.+50     	; 0x99e <localization_calc+0x1c4>
     96c:	24 f4       	brge	.+8      	; 0x976 <localization_calc+0x19c>
     96e:	21 30       	cpi	r18, 0x01	; 1
     970:	31 05       	cpc	r19, r1
     972:	f9 f0       	breq	.+62     	; 0x9b2 <localization_calc+0x1d8>
     974:	28 c0       	rjmp	.+80     	; 0x9c6 <localization_calc+0x1ec>
     976:	23 30       	cpi	r18, 0x03	; 3
     978:	31 05       	cpc	r19, r1
     97a:	39 f0       	breq	.+14     	; 0x98a <localization_calc+0x1b0>
     97c:	24 30       	cpi	r18, 0x04	; 4
     97e:	31 05       	cpc	r19, r1
     980:	11 f5       	brne	.+68     	; 0x9c6 <localization_calc+0x1ec>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     982:	0e 94 a4 01 	call	0x348	; 0x348 <fourPointCalc>
     986:	dc 01       	movw	r26, r24
				break;
     988:	20 c0       	rjmp	.+64     	; 0x9ca <localization_calc+0x1f0>


int* threePointCalc(int pvect[3][2])
{
	static int centerThree[2];	
	centerThree[0] = 1023;
     98a:	e8 e1       	ldi	r30, 0x18	; 24
     98c:	f1 e0       	ldi	r31, 0x01	; 1
     98e:	8f ef       	ldi	r24, 0xFF	; 255
     990:	93 e0       	ldi	r25, 0x03	; 3
     992:	91 83       	std	Z+1, r25	; 0x01
     994:	80 83       	st	Z, r24
	centerThree[1] = 1023;
     996:	93 83       	std	Z+3, r25	; 0x03
     998:	82 83       	std	Z+2, r24	; 0x02
			case 4 :
				calcPointer = fourPointCalc(points);
				break;
				
			case 3 : 
				calcPointer = threePointCalc(points);
     99a:	df 01       	movw	r26, r30
				break;
     99c:	16 c0       	rjmp	.+44     	; 0x9ca <localization_calc+0x1f0>


int* twoPointCalc(int pvect[2][2])
{
	static int centerTwo[2];
	centerTwo[0] = 1023;
     99e:	e4 e1       	ldi	r30, 0x14	; 20
     9a0:	f1 e0       	ldi	r31, 0x01	; 1
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	93 e0       	ldi	r25, 0x03	; 3
     9a6:	91 83       	std	Z+1, r25	; 0x01
     9a8:	80 83       	st	Z, r24
	centerTwo[1] = 1023;
     9aa:	93 83       	std	Z+3, r25	; 0x03
     9ac:	82 83       	std	Z+2, r24	; 0x02
			case 3 : 
				calcPointer = threePointCalc(points);
				break;
				
			case 2 :
				calcPointer = twoPointCalc(points);
     9ae:	df 01       	movw	r26, r30
				break; 
     9b0:	0c c0       	rjmp	.+24     	; 0x9ca <localization_calc+0x1f0>


int* onePointCalc(int pvect[1][2])
{
	static int centerOne[2];
	centerOne[0] = 1023;
     9b2:	e0 e1       	ldi	r30, 0x10	; 16
     9b4:	f1 e0       	ldi	r31, 0x01	; 1
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	93 e0       	ldi	r25, 0x03	; 3
     9ba:	91 83       	std	Z+1, r25	; 0x01
     9bc:	80 83       	st	Z, r24
	centerOne[1] = 1023;
     9be:	93 83       	std	Z+3, r25	; 0x03
     9c0:	82 83       	std	Z+2, r24	; 0x02
			case 2 :
				calcPointer = twoPointCalc(points);
				break; 
				
			case 1 : 
				calcPointer = onePointCalc(points);
     9c2:	df 01       	movw	r26, r30
				break; 
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <localization_calc+0x1f0>
				
			default:
				calcPointer = &rc[0];
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
     9c8:	b1 e0       	ldi	r27, 0x01	; 1
				
		}
		
		robotCenter[0] = (int)calcPointer[0];
     9ca:	8d 91       	ld	r24, X+
     9cc:	9c 91       	ld	r25, X
     9ce:	11 97       	sbiw	r26, 0x01	; 1
     9d0:	e0 e2       	ldi	r30, 0x20	; 32
     9d2:	f1 e0       	ldi	r31, 0x01	; 1
     9d4:	91 83       	std	Z+1, r25	; 0x01
     9d6:	80 83       	st	Z, r24
		robotCenter[1] = (int)calcPointer[1];
     9d8:	12 96       	adiw	r26, 0x02	; 2
     9da:	8d 91       	ld	r24, X+
     9dc:	9c 91       	ld	r25, X
     9de:	13 97       	sbiw	r26, 0x03	; 3
     9e0:	93 83       	std	Z+3, r25	; 0x03
     9e2:	82 83       	std	Z+2, r24	; 0x02
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	fe be       	out	0x3e, r15	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	ed be       	out	0x3d, r14	; 61
     9ee:	0a c0       	rjmp	.+20     	; 0xa04 <localization_calc+0x22a>
		
	
	} else { 
		robotCenter[0] = 1023; 
     9f0:	e0 e2       	ldi	r30, 0x20	; 32
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
     9f4:	8f ef       	ldi	r24, 0xFF	; 255
     9f6:	93 e0       	ldi	r25, 0x03	; 3
     9f8:	91 83       	std	Z+1, r25	; 0x01
     9fa:	80 83       	st	Z, r24
		robotCenter[1] = 1023; 
     9fc:	93 83       	std	Z+3, r25	; 0x03
     9fe:	82 83       	std	Z+2, r24	; 0x02
		m_red(OFF);	
     a00:	6e 9a       	sbi	0x0d, 6	; 13
     a02:	76 9a       	sbi	0x0e, 6	; 14
	
	return robotCenter;
	
	
	
}
     a04:	80 e2       	ldi	r24, 0x20	; 32
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	1e bf       	out	0x3e, r17	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0d bf       	out	0x3d, r16	; 61
     a12:	68 96       	adiw	r28, 0x18	; 24
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	cd bf       	out	0x3d, r28	; 61
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	df 90       	pop	r13
     a2c:	cf 90       	pop	r12
     a2e:	bf 90       	pop	r11
     a30:	af 90       	pop	r10
     a32:	08 95       	ret

00000a34 <init>:
}


void init() 
{
	m_red(ON);
     a34:	6e 9a       	sbi	0x0d, 6	; 13
     a36:	76 98       	cbi	0x0e, 6	; 14
	while(!m_wii_open());
     a38:	0e 94 9c 08 	call	0x1138	; 0x1138 <m_wii_open>
     a3c:	88 23       	and	r24, r24
     a3e:	e1 f3       	breq	.-8      	; 0xa38 <init+0x4>
	m_red(OFF);
     a40:	6e 9a       	sbi	0x0d, 6	; 13
     a42:	76 9a       	sbi	0x0e, 6	; 14
	
	m_usb_init();
     a44:	0e 94 9d 05 	call	0xb3a	; 0xb3a <m_usb_init>
     a48:	08 95       	ret

00000a4a <main>:
#include "localization_function.h"

void init(); 

int main(void)
{	
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	ac 97       	sbiw	r28, 0x2c	; 44
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
	m_clockdivide(0);
     a5e:	e1 e6       	ldi	r30, 0x61	; 97
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	80 e8       	ldi	r24, 0x80	; 128
     a64:	80 83       	st	Z, r24
     a66:	10 82       	st	Z, r1
	
	init();
     a68:	0e 94 1a 05 	call	0xa34	; 0xa34 <init>
	m_green(ON);
     a6c:	6a 9a       	sbi	0x0d, 2	; 13
     a6e:	72 98       	cbi	0x0e, 2	; 14
	unsigned int blobs[12];
	char rx_buffer;

	int robotCenterPrev[2] = {1023, 1023};
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	93 e0       	ldi	r25, 0x03	; 3
     a74:	9a 8f       	std	Y+26, r25	; 0x1a
     a76:	89 8f       	std	Y+25, r24	; 0x19
     a78:	9c 8f       	std	Y+28, r25	; 0x1c
     a7a:	8b 8f       	std	Y+27, r24	; 0x1b
		
		m_usb_rx_flush();  						// Flush the buffer
		
//		if(rx_buffer == 1)						// MATLAB is expecting IMU data
//		{
			m_red(TOGGLE);
     a7c:	68 94       	set
     a7e:	ff 24       	eor	r15, r15
     a80:	f6 f8       	bld	r15, 6
	int* robotCenter;
	
    while (1) 
    {
		
		m_wii_read(blobs);
     a82:	ce 01       	movw	r24, r28
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	0e 94 bd 09 	call	0x137a	; 0x137a <m_wii_read>
		unsigned int x1 = blobs[0];
		unsigned int y1 = blobs[1];
     a8a:	6b 81       	ldd	r22, Y+3	; 0x03
     a8c:	7c 81       	ldd	r23, Y+4	; 0x04
		unsigned int x2 = blobs[3];
     a8e:	0f 81       	ldd	r16, Y+7	; 0x07
     a90:	18 85       	ldd	r17, Y+8	; 0x08
		unsigned int y2 = blobs[4];
     a92:	49 85       	ldd	r20, Y+9	; 0x09
     a94:	5a 85       	ldd	r21, Y+10	; 0x0a
		unsigned int x3 = blobs[6];
     a96:	ad 85       	ldd	r26, Y+13	; 0x0d
     a98:	be 85       	ldd	r27, Y+14	; 0x0e
		unsigned int y3 = blobs[7];
     a9a:	2f 85       	ldd	r18, Y+15	; 0x0f
     a9c:	38 89       	ldd	r19, Y+16	; 0x10
		unsigned int x4 = blobs[9];
     a9e:	eb 89       	ldd	r30, Y+19	; 0x13
     aa0:	fc 89       	ldd	r31, Y+20	; 0x14
		unsigned int y4 = blobs[10];
     aa2:	8d 89       	ldd	r24, Y+21	; 0x15
     aa4:	9e 89       	ldd	r25, Y+22	; 0x16
		
		int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
     aa6:	c9 80       	ldd	r12, Y+1	; 0x01
     aa8:	da 80       	ldd	r13, Y+2	; 0x02
     aaa:	de 8e       	std	Y+30, r13	; 0x1e
     aac:	cd 8e       	std	Y+29, r12	; 0x1d
     aae:	18 a3       	std	Y+32, r17	; 0x20
     ab0:	0f 8f       	std	Y+31, r16	; 0x1f
     ab2:	ba a3       	std	Y+34, r27	; 0x22
     ab4:	a9 a3       	std	Y+33, r26	; 0x21
     ab6:	fc a3       	std	Y+36, r31	; 0x24
     ab8:	eb a3       	std	Y+35, r30	; 0x23
     aba:	7e a3       	std	Y+38, r23	; 0x26
     abc:	6d a3       	std	Y+37, r22	; 0x25
     abe:	58 a7       	std	Y+40, r21	; 0x28
     ac0:	4f a3       	std	Y+39, r20	; 0x27
     ac2:	3a a7       	std	Y+42, r19	; 0x2a
     ac4:	29 a7       	std	Y+41, r18	; 0x29
     ac6:	9c a7       	std	Y+44, r25	; 0x2c
     ac8:	8b a7       	std	Y+43, r24	; 0x2b
		robotCenter = localization_calc(rawStarData, robotCenterPrev); 
     aca:	be 01       	movw	r22, r28
     acc:	67 5e       	subi	r22, 0xE7	; 231
     ace:	7f 4f       	sbci	r23, 0xFF	; 255
     ad0:	ce 01       	movw	r24, r28
     ad2:	4d 96       	adiw	r24, 0x1d	; 29
     ad4:	0e 94 ed 03 	call	0x7da	; 0x7da <localization_calc>
     ad8:	8c 01       	movw	r16, r24

		
		
 		while(!m_usb_rx_available());  			// Wait for an indication from the computer
     ada:	0e 94 d4 05 	call	0xba8	; 0xba8 <m_usb_rx_available>
     ade:	88 23       	and	r24, r24
     ae0:	e1 f3       	breq	.-8      	; 0xada <main+0x90>
		rx_buffer = m_usb_rx_char();  			// Read the packet from the computer
     ae2:	0e 94 b6 05 	call	0xb6c	; 0xb6c <m_usb_rx_char>
		
		m_usb_rx_flush();  						// Flush the buffer
     ae6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <m_usb_rx_flush>
		
//		if(rx_buffer == 1)						// MATLAB is expecting IMU data
//		{
			m_red(TOGGLE);
     aea:	6e 9a       	sbi	0x0d, 6	; 13
     aec:	9e b1       	in	r25, 0x0e	; 14
     aee:	9f 25       	eor	r25, r15
     af0:	9e b9       	out	0x0e, r25	; 14
			m_usb_tx_int((int)robotCenter[0]);
     af2:	f8 01       	movw	r30, r16
     af4:	80 81       	ld	r24, Z
     af6:	91 81       	ldd	r25, Z+1	; 0x01
     af8:	0e 94 31 08 	call	0x1062	; 0x1062 <m_usb_tx_int>
			m_usb_tx_string(" ");
     afc:	8a ef       	ldi	r24, 0xFA	; 250
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 15 08 	call	0x102a	; 0x102a <print_P>
			m_usb_tx_int((int)robotCenter[1]);
     b04:	f8 01       	movw	r30, r16
     b06:	82 81       	ldd	r24, Z+2	; 0x02
     b08:	93 81       	ldd	r25, Z+3	; 0x03
     b0a:	0e 94 31 08 	call	0x1062	; 0x1062 <m_usb_tx_int>
			m_usb_tx_string("\n");
     b0e:	88 ef       	ldi	r24, 0xF8	; 248
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 15 08 	call	0x102a	; 0x102a <print_P>

//		}
		
		
    }
     b16:	b5 cf       	rjmp	.-150    	; 0xa82 <main+0x38>

00000b18 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     b18:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     b1a:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     b1c:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     b1e:	8c e0       	ldi	r24, 0x0C	; 12
     b20:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     b24:	e9 e6       	ldi	r30, 0x69	; 105
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
     b2a:	80 62       	ori	r24, 0x20	; 32
     b2c:	80 83       	st	Z, r24
     b2e:	80 81       	ld	r24, Z
     b30:	8f 7e       	andi	r24, 0xEF	; 239
     b32:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     b34:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     b36:	78 94       	sei
     b38:	08 95       	ret

00000b3a <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     b40:	80 ea       	ldi	r24, 0xA0	; 160
     b42:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     b46:	82 e1       	ldi	r24, 0x12	; 18
     b48:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     b4a:	09 b4       	in	r0, 0x29	; 41
     b4c:	00 fe       	sbrs	r0, 0
     b4e:	fd cf       	rjmp	.-6      	; 0xb4a <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     b50:	80 e9       	ldi	r24, 0x90	; 144
     b52:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     b56:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     b5a:	10 92 27 01 	sts	0x0127, r1
	cdc_line_rtsdtr = 0;
     b5e:	10 92 24 01 	sts	0x0124, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     b62:	8c e0       	ldi	r24, 0x0C	; 12
     b64:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     b68:	78 94       	sei
     b6a:	08 95       	ret

00000b6c <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     b6c:	9f b7       	in	r25, 0x3f	; 63
	cli();
     b6e:	f8 94       	cli
	if (!usb_configuration) {
     b70:	80 91 27 01 	lds	r24, 0x0127
     b74:	81 11       	cpse	r24, r1
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <m_usb_rx_char+0x12>
		SREG = intr_state;
     b78:	9f bf       	out	0x3f, r25	; 63
		return -1;
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
     b84:	80 91 e8 00 	lds	r24, 0x00E8
     b88:	85 fd       	sbrc	r24, 5
     b8a:	03 c0       	rjmp	.+6      	; 0xb92 <m_usb_rx_char+0x26>
		// no data in buffer
		SREG = intr_state;
     b8c:	9f bf       	out	0x3f, r25	; 63
		return -1;
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
     b92:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     b96:	20 91 e8 00 	lds	r18, 0x00E8
     b9a:	25 fd       	sbrc	r18, 5
     b9c:	03 c0       	rjmp	.+6      	; 0xba4 <m_usb_rx_char+0x38>
     b9e:	2b e6       	ldi	r18, 0x6B	; 107
     ba0:	20 93 e8 00 	sts	0x00E8, r18
	SREG = intr_state;
     ba4:	9f bf       	out	0x3f, r25	; 63
	return (char)c;
}
     ba6:	08 95       	ret

00000ba8 <m_usb_rx_available>:
// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;

	intr_state = SREG;
     ba8:	9f b7       	in	r25, 0x3f	; 63
	cli();
     baa:	f8 94       	cli
	if (usb_configuration) {
     bac:	80 91 27 01 	lds	r24, 0x0127
     bb0:	88 23       	and	r24, r24
     bb2:	31 f0       	breq	.+12     	; 0xbc0 <m_usb_rx_available+0x18>
		UENUM = CDC_RX_ENDPOINT;
     bb4:	83 e0       	ldi	r24, 0x03	; 3
     bb6:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
     bba:	80 91 f2 00 	lds	r24, 0x00F2
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <m_usb_rx_available+0x1a>
}

// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;
     bc0:	80 e0       	ldi	r24, 0x00	; 0
	cli();
	if (usb_configuration) {
		UENUM = CDC_RX_ENDPOINT;
		n = UEBCLX;
	}
	SREG = intr_state;
     bc2:	9f bf       	out	0x3f, r25	; 63
	return (unsigned char)n;
}
     bc4:	08 95       	ret

00000bc6 <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
     bc6:	80 91 27 01 	lds	r24, 0x0127
     bca:	88 23       	and	r24, r24
     bcc:	89 f0       	breq	.+34     	; 0xbf0 <m_usb_rx_flush+0x2a>
		intr_state = SREG;
     bce:	2f b7       	in	r18, 0x3f	; 63
		cli();
     bd0:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
     bd8:	80 91 e8 00 	lds	r24, 0x00E8
     bdc:	85 ff       	sbrs	r24, 5
     bde:	07 c0       	rjmp	.+14     	; 0xbee <m_usb_rx_flush+0x28>
			UEINTX = 0x6B; 
     be0:	e8 ee       	ldi	r30, 0xE8	; 232
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	9b e6       	ldi	r25, 0x6B	; 107
     be6:	90 83       	st	Z, r25

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     be8:	80 81       	ld	r24, Z
     bea:	85 fd       	sbrc	r24, 5
     bec:	fc cf       	rjmp	.-8      	; 0xbe6 <m_usb_rx_flush+0x20>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     bee:	2f bf       	out	0x3f, r18	; 63
     bf0:	08 95       	ret

00000bf2 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     bf6:	90 91 27 01 	lds	r25, 0x0127
     bfa:	99 23       	and	r25, r25
     bfc:	09 f4       	brne	.+2      	; 0xc00 <m_usb_tx_char+0xe>
     bfe:	4c c0       	rjmp	.+152    	; 0xc98 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     c00:	9f b7       	in	r25, 0x3f	; 63
	cli();
     c02:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     c04:	24 e0       	ldi	r18, 0x04	; 4
     c06:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     c0a:	20 91 25 01 	lds	r18, 0x0125
     c0e:	22 23       	and	r18, r18
     c10:	49 f0       	breq	.+18     	; 0xc24 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
     c12:	20 91 e8 00 	lds	r18, 0x00E8
     c16:	25 fd       	sbrc	r18, 5
     c18:	03 c0       	rjmp	.+6      	; 0xc20 <m_usb_tx_char+0x2e>
			SREG = intr_state;
     c1a:	9f bf       	out	0x3f, r25	; 63
			return -1;
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	41 c0       	rjmp	.+130    	; 0xca2 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
     c20:	10 92 25 01 	sts	0x0125, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     c24:	30 91 e4 00 	lds	r19, 0x00E4
     c28:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     c2a:	20 91 e8 00 	lds	r18, 0x00E8
     c2e:	25 fd       	sbrc	r18, 5
     c30:	24 c0       	rjmp	.+72     	; 0xc7a <m_usb_tx_char+0x88>
		SREG = intr_state;
     c32:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     c34:	90 91 e4 00 	lds	r25, 0x00E4
     c38:	93 17       	cp	r25, r19
     c3a:	81 f0       	breq	.+32     	; 0xc5c <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     c3c:	90 91 27 01 	lds	r25, 0x0127
     c40:	99 23       	and	r25, r25
     c42:	61 f1       	breq	.+88     	; 0xc9c <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     c44:	a9 ee       	ldi	r26, 0xE9	; 233
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     c4a:	e8 ee       	ldi	r30, 0xE8	; 232
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     c4e:	c4 ee       	ldi	r28, 0xE4	; 228
     c50:	d0 e0       	ldi	r29, 0x00	; 0
     c52:	0d c0       	rjmp	.+26     	; 0xc6e <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     c54:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     c56:	98 81       	ld	r25, Y
     c58:	93 13       	cpse	r25, r19
     c5a:	05 c0       	rjmp	.+10     	; 0xc66 <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 25 01 	sts	0x0125, r24
			return -1;
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	1e c0       	rjmp	.+60     	; 0xca2 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     c66:	90 91 27 01 	lds	r25, 0x0127
     c6a:	99 23       	and	r25, r25
     c6c:	c9 f0       	breq	.+50     	; 0xca0 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
     c6e:	9f b7       	in	r25, 0x3f	; 63
		cli();
     c70:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     c72:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     c74:	20 81       	ld	r18, Z
     c76:	25 ff       	sbrs	r18, 5
     c78:	ed cf       	rjmp	.-38     	; 0xc54 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     c7a:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     c7e:	80 91 e8 00 	lds	r24, 0x00E8
     c82:	85 fd       	sbrc	r24, 5
     c84:	03 c0       	rjmp	.+6      	; 0xc8c <m_usb_tx_char+0x9a>
     c86:	8a e3       	ldi	r24, 0x3A	; 58
     c88:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     c8c:	85 e0       	ldi	r24, 0x05	; 5
     c8e:	80 93 26 01 	sts	0x0126, r24
	SREG = intr_state;
     c92:	9f bf       	out	0x3f, r25	; 63
	return 0;
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	05 c0       	rjmp	.+10     	; 0xca2 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	03 c0       	rjmp	.+6      	; 0xca2 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     c9c:	8f ef       	ldi	r24, 0xFF	; 255
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <m_usb_tx_char+0xb0>
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	8f 93       	push	r24
     cb4:	9f 93       	push	r25
     cb6:	ef 93       	push	r30
     cb8:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     cba:	e1 ee       	ldi	r30, 0xE1	; 225
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
        UDINT = 0;
     cc0:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
     cc2:	83 ff       	sbrs	r24, 3
     cc4:	11 c0       	rjmp	.+34     	; 0xce8 <__vector_10+0x40>
		UENUM = 0;
     cc6:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
     cd0:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     cd4:	92 e1       	ldi	r25, 0x12	; 18
     cd6:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
     cda:	98 e0       	ldi	r25, 0x08	; 8
     cdc:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
     ce0:	10 92 27 01 	sts	0x0127, r1
		cdc_line_rtsdtr = 0;
     ce4:	10 92 24 01 	sts	0x0124, r1
        }
	if (intbits & (1<<SOFI)) {
     ce8:	82 ff       	sbrs	r24, 2
     cea:	13 c0       	rjmp	.+38     	; 0xd12 <__vector_10+0x6a>
		if (usb_configuration) {
     cec:	80 91 27 01 	lds	r24, 0x0127
     cf0:	88 23       	and	r24, r24
     cf2:	79 f0       	breq	.+30     	; 0xd12 <__vector_10+0x6a>
			t = transmit_flush_timer;
     cf4:	80 91 26 01 	lds	r24, 0x0126
			if (t) {
     cf8:	88 23       	and	r24, r24
     cfa:	59 f0       	breq	.+22     	; 0xd12 <__vector_10+0x6a>
				transmit_flush_timer = --t;
     cfc:	81 50       	subi	r24, 0x01	; 1
     cfe:	80 93 26 01 	sts	0x0126, r24
				if (!t) {
     d02:	81 11       	cpse	r24, r1
     d04:	06 c0       	rjmp	.+12     	; 0xd12 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
     d06:	84 e0       	ldi	r24, 0x04	; 4
     d08:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     d0c:	8a e3       	ldi	r24, 0x3A	; 58
     d0e:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     d12:	ff 91       	pop	r31
     d14:	ef 91       	pop	r30
     d16:	9f 91       	pop	r25
     d18:	8f 91       	pop	r24
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	ef 93       	push	r30
     d4c:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     d4e:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     d52:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     d56:	83 ff       	sbrs	r24, 3
     d58:	4c c1       	rjmp	.+664    	; 0xff2 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
     d5a:	e1 ef       	ldi	r30, 0xF1	; 241
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	60 81       	ld	r22, Z
                bRequest = UEDATX;
     d60:	80 81       	ld	r24, Z
                wValue = UEDATX;
     d62:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
     d64:	90 81       	ld	r25, Z
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	39 2b       	or	r19, r25
                wIndex = UEDATX;
     d6a:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
     d6c:	90 81       	ld	r25, Z
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	59 2b       	or	r21, r25
                wLength = UEDATX;
     d72:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
     d74:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     d76:	92 ef       	ldi	r25, 0xF2	; 242
     d78:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
     d7c:	86 30       	cpi	r24, 0x06	; 6
     d7e:	09 f0       	breq	.+2      	; 0xd82 <__vector_11+0x5e>
     d80:	58 c0       	rjmp	.+176    	; 0xe32 <__vector_11+0x10e>
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
     d84:	81 e2       	ldi	r24, 0x21	; 33
     d86:	80 93 eb 00 	sts	0x00EB, r24
					return;
     d8a:	3a c1       	rjmp	.+628    	; 0x1000 <__vector_11+0x2dc>
     d8c:	66 e0       	ldi	r22, 0x06	; 6
     d8e:	8c ef       	ldi	r24, 0xFC	; 252
     d90:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
     d92:	fc 01       	movw	r30, r24
     d94:	a5 91       	lpm	r26, Z+
     d96:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
     d98:	2a 17       	cp	r18, r26
     d9a:	3b 07       	cpc	r19, r27
     d9c:	11 f0       	breq	.+4      	; 0xda2 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
     d9e:	07 96       	adiw	r24, 0x07	; 7
					continue;
     da0:	23 c0       	rjmp	.+70     	; 0xde8 <__vector_11+0xc4>
				}
				list += 2;
     da2:	fc 01       	movw	r30, r24
     da4:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
     da6:	a5 91       	lpm	r26, Z+
     da8:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
     daa:	4a 17       	cp	r20, r26
     dac:	5b 07       	cpc	r21, r27
     dae:	11 f0       	breq	.+4      	; 0xdb4 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
     db0:	07 96       	adiw	r24, 0x07	; 7
					continue;
     db2:	1a c0       	rjmp	.+52     	; 0xde8 <__vector_11+0xc4>
				}
				list += 2;
     db4:	fc 01       	movw	r30, r24
     db6:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
     db8:	45 91       	lpm	r20, Z+
     dba:	54 91       	lpm	r21, Z
				list += 2;
     dbc:	fc 01       	movw	r30, r24
     dbe:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
     dc0:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
     dc2:	87 2f       	mov	r24, r23
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     dc8:	8f 3f       	cpi	r24, 0xFF	; 255
     dca:	91 05       	cpc	r25, r1
     dcc:	19 f0       	breq	.+6      	; 0xdd4 <__vector_11+0xb0>
     dce:	10 f0       	brcs	.+4      	; 0xdd4 <__vector_11+0xb0>
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	82 17       	cp	r24, r18
     dd6:	08 f4       	brcc	.+2      	; 0xdda <__vector_11+0xb6>
     dd8:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     dda:	a8 ee       	ldi	r26, 0xE8	; 232
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     dde:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     de0:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
     de2:	c1 ef       	ldi	r28, 0xF1	; 241
     de4:	d0 e0       	ldi	r29, 0x00	; 0
     de6:	03 c0       	rjmp	.+6      	; 0xdee <__vector_11+0xca>
     de8:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     dea:	99 f6       	brne	.-90     	; 0xd92 <__vector_11+0x6e>
     dec:	cb cf       	rjmp	.-106    	; 0xd84 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     dee:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     df0:	98 2f       	mov	r25, r24
     df2:	95 70       	andi	r25, 0x05	; 5
     df4:	e1 f3       	breq	.-8      	; 0xdee <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
     df6:	82 fd       	sbrc	r24, 2
     df8:	03 c1       	rjmp	.+518    	; 0x1000 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     dfa:	32 2f       	mov	r19, r18
     dfc:	21 31       	cpi	r18, 0x11	; 17
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <__vector_11+0xde>
     e00:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
     e02:	33 23       	and	r19, r19
     e04:	09 f4       	brne	.+2      	; 0xe08 <__vector_11+0xe4>
     e06:	f9 c0       	rjmp	.+498    	; 0xffa <__vector_11+0x2d6>
     e08:	fa 01       	movw	r30, r20
     e0a:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
     e0c:	94 91       	lpm	r25, Z
     e0e:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     e10:	81 50       	subi	r24, 0x01	; 1
     e12:	31 96       	adiw	r30, 0x01	; 1
     e14:	81 11       	cpse	r24, r1
     e16:	fa cf       	rjmp	.-12     	; 0xe0c <__vector_11+0xe8>
     e18:	8f ef       	ldi	r24, 0xFF	; 255
     e1a:	83 0f       	add	r24, r19
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	48 0f       	add	r20, r24
     e22:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     e24:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e26:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     e28:	21 11       	cpse	r18, r1
     e2a:	e1 cf       	rjmp	.-62     	; 0xdee <__vector_11+0xca>
     e2c:	30 31       	cpi	r19, 0x10	; 16
     e2e:	f9 f2       	breq	.-66     	; 0xdee <__vector_11+0xca>
     e30:	e7 c0       	rjmp	.+462    	; 0x1000 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     e32:	85 30       	cpi	r24, 0x05	; 5
     e34:	61 f4       	brne	.+24     	; 0xe4e <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e36:	8e ef       	ldi	r24, 0xFE	; 254
     e38:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     e3c:	e8 ee       	ldi	r30, 0xE8	; 232
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 ff       	sbrs	r24, 0
     e44:	fd cf       	rjmp	.-6      	; 0xe40 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     e46:	20 68       	ori	r18, 0x80	; 128
     e48:	20 93 e3 00 	sts	0x00E3, r18
			return;
     e4c:	d9 c0       	rjmp	.+434    	; 0x1000 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     e4e:	89 30       	cpi	r24, 0x09	; 9
     e50:	09 f0       	breq	.+2      	; 0xe54 <__vector_11+0x130>
     e52:	35 c0       	rjmp	.+106    	; 0xebe <__vector_11+0x19a>
     e54:	61 11       	cpse	r22, r1
     e56:	cd c0       	rjmp	.+410    	; 0xff2 <__vector_11+0x2ce>
			usb_configuration = wValue;
     e58:	20 93 27 01 	sts	0x0127, r18
			cdc_line_rtsdtr = 0;
     e5c:	10 92 24 01 	sts	0x0124, r1
			transmit_flush_timer = 0;
     e60:	10 92 26 01 	sts	0x0126, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e64:	8e ef       	ldi	r24, 0xFE	; 254
     e66:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     e6a:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     e6c:	25 ea       	ldi	r18, 0xA5	; 165
     e6e:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
     e70:	c9 ee       	ldi	r28, 0xE9	; 233
     e72:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
     e74:	ab ee       	ldi	r26, 0xEB	; 235
     e76:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
     e78:	0c ee       	ldi	r16, 0xEC	; 236
     e7a:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
     e7c:	6d ee       	ldi	r22, 0xED	; 237
     e7e:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     e80:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
     e82:	a9 01       	movw	r20, r18
     e84:	4f 5f       	subi	r20, 0xFF	; 255
     e86:	5f 4f       	sbci	r21, 0xFF	; 255
     e88:	f9 01       	movw	r30, r18
     e8a:	94 91       	lpm	r25, Z
				UECONX = en;
     e8c:	9c 93       	st	X, r25
				if (en) {
     e8e:	99 23       	and	r25, r25
     e90:	61 f0       	breq	.+24     	; 0xeaa <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
     e92:	fa 01       	movw	r30, r20
     e94:	44 91       	lpm	r20, Z
     e96:	f8 01       	movw	r30, r16
     e98:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
     e9a:	f9 01       	movw	r30, r18
     e9c:	32 96       	adiw	r30, 0x02	; 2
     e9e:	94 91       	lpm	r25, Z
     ea0:	2d 5f       	subi	r18, 0xFD	; 253
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	fb 01       	movw	r30, r22
     ea6:	90 83       	st	Z, r25
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
     eaa:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     eac:	8f 5f       	subi	r24, 0xFF	; 255
     eae:	85 30       	cpi	r24, 0x05	; 5
     eb0:	39 f7       	brne	.-50     	; 0xe80 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     eb2:	ea ee       	ldi	r30, 0xEA	; 234
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	8e e1       	ldi	r24, 0x1E	; 30
     eb8:	80 83       	st	Z, r24
        		UERST = 0;
     eba:	10 82       	st	Z, r1
			return;
     ebc:	a1 c0       	rjmp	.+322    	; 0x1000 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     ebe:	88 30       	cpi	r24, 0x08	; 8
     ec0:	81 f4       	brne	.+32     	; 0xee2 <__vector_11+0x1be>
     ec2:	60 38       	cpi	r22, 0x80	; 128
     ec4:	09 f0       	breq	.+2      	; 0xec8 <__vector_11+0x1a4>
     ec6:	95 c0       	rjmp	.+298    	; 0xff2 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     ec8:	e8 ee       	ldi	r30, 0xE8	; 232
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 ff       	sbrs	r24, 0
     ed0:	fd cf       	rjmp	.-6      	; 0xecc <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     ed2:	80 91 27 01 	lds	r24, 0x0127
     ed6:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     eda:	8e ef       	ldi	r24, 0xFE	; 254
     edc:	80 93 e8 00 	sts	0x00E8, r24
     ee0:	8f c0       	rjmp	.+286    	; 0x1000 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
     ee2:	81 32       	cpi	r24, 0x21	; 33
     ee4:	b9 f4       	brne	.+46     	; 0xf14 <__vector_11+0x1f0>
     ee6:	61 3a       	cpi	r22, 0xA1	; 161
     ee8:	09 f0       	breq	.+2      	; 0xeec <__vector_11+0x1c8>
     eea:	83 c0       	rjmp	.+262    	; 0xff2 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     eec:	e8 ee       	ldi	r30, 0xE8	; 232
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 ff       	sbrs	r24, 0
     ef4:	fd cf       	rjmp	.-6      	; 0xef0 <__vector_11+0x1cc>
     ef6:	e4 e0       	ldi	r30, 0x04	; 4
     ef8:	f1 e0       	ldi	r31, 0x01	; 1
     efa:	2b e0       	ldi	r18, 0x0B	; 11
     efc:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     efe:	a1 ef       	ldi	r26, 0xF1	; 241
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	81 91       	ld	r24, Z+
     f04:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     f06:	e2 17       	cp	r30, r18
     f08:	f3 07       	cpc	r31, r19
     f0a:	d9 f7       	brne	.-10     	; 0xf02 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f0c:	8e ef       	ldi	r24, 0xFE	; 254
     f0e:	80 93 e8 00 	sts	0x00E8, r24
     f12:	76 c0       	rjmp	.+236    	; 0x1000 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
     f14:	80 32       	cpi	r24, 0x20	; 32
     f16:	d1 f4       	brne	.+52     	; 0xf4c <__vector_11+0x228>
     f18:	61 32       	cpi	r22, 0x21	; 33
     f1a:	09 f0       	breq	.+2      	; 0xf1e <__vector_11+0x1fa>
     f1c:	6a c0       	rjmp	.+212    	; 0xff2 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     f1e:	e8 ee       	ldi	r30, 0xE8	; 232
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	82 ff       	sbrs	r24, 2
     f26:	fd cf       	rjmp	.-6      	; 0xf22 <__vector_11+0x1fe>
     f28:	e4 e0       	ldi	r30, 0x04	; 4
     f2a:	f1 e0       	ldi	r31, 0x01	; 1
     f2c:	2b e0       	ldi	r18, 0x0B	; 11
     f2e:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     f30:	a1 ef       	ldi	r26, 0xF1	; 241
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	8c 91       	ld	r24, X
     f36:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     f38:	e2 17       	cp	r30, r18
     f3a:	f3 07       	cpc	r31, r19
     f3c:	d9 f7       	brne	.-10     	; 0xf34 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     f3e:	e8 ee       	ldi	r30, 0xE8	; 232
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	8b ef       	ldi	r24, 0xFB	; 251
     f44:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f46:	8e ef       	ldi	r24, 0xFE	; 254
     f48:	80 83       	st	Z, r24
     f4a:	5a c0       	rjmp	.+180    	; 0x1000 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
     f4c:	82 32       	cpi	r24, 0x22	; 34
     f4e:	71 f4       	brne	.+28     	; 0xf6c <__vector_11+0x248>
     f50:	61 32       	cpi	r22, 0x21	; 33
     f52:	09 f0       	breq	.+2      	; 0xf56 <__vector_11+0x232>
     f54:	4e c0       	rjmp	.+156    	; 0xff2 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
     f56:	20 93 24 01 	sts	0x0124, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     f5a:	e8 ee       	ldi	r30, 0xE8	; 232
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	80 ff       	sbrs	r24, 0
     f62:	fd cf       	rjmp	.-6      	; 0xf5e <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f64:	8e ef       	ldi	r24, 0xFE	; 254
     f66:	80 93 e8 00 	sts	0x00E8, r24
     f6a:	4a c0       	rjmp	.+148    	; 0x1000 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
     f6c:	81 11       	cpse	r24, r1
     f6e:	1a c0       	rjmp	.+52     	; 0xfa4 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     f70:	e8 ee       	ldi	r30, 0xE8	; 232
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	80 ff       	sbrs	r24, 0
     f78:	fd cf       	rjmp	.-6      	; 0xf74 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
     f7a:	62 38       	cpi	r22, 0x82	; 130
     f7c:	51 f4       	brne	.+20     	; 0xf92 <__vector_11+0x26e>
				UENUM = wIndex;
     f7e:	e9 ee       	ldi	r30, 0xE9	; 233
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
     f84:	80 91 eb 00 	lds	r24, 0x00EB
     f88:	85 fb       	bst	r24, 5
     f8a:	88 27       	eor	r24, r24
     f8c:	80 f9       	bld	r24, 0
				UENUM = 0;
     f8e:	10 82       	st	Z, r1
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
     f92:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
     f94:	e1 ef       	ldi	r30, 0xF1	; 241
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 83       	st	Z, r24
			UEDATX = 0;
     f9a:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f9c:	8e ef       	ldi	r24, 0xFE	; 254
     f9e:	80 93 e8 00 	sts	0x00E8, r24
     fa2:	2e c0       	rjmp	.+92     	; 0x1000 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     fa4:	98 2f       	mov	r25, r24
     fa6:	9d 7f       	andi	r25, 0xFD	; 253
     fa8:	91 30       	cpi	r25, 0x01	; 1
     faa:	19 f5       	brne	.+70     	; 0xff2 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
     fac:	62 30       	cpi	r22, 0x02	; 2
     fae:	09 f5       	brne	.+66     	; 0xff2 <__vector_11+0x2ce>
     fb0:	23 2b       	or	r18, r19
     fb2:	f9 f4       	brne	.+62     	; 0xff2 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
     fb4:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
     fb6:	9f ef       	ldi	r25, 0xFF	; 255
     fb8:	94 0f       	add	r25, r20
     fba:	94 30       	cpi	r25, 0x04	; 4
     fbc:	d0 f4       	brcc	.+52     	; 0xff2 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     fbe:	9e ef       	ldi	r25, 0xFE	; 254
     fc0:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
     fc4:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	21 f4       	brne	.+8      	; 0xfd4 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
     fcc:	81 e2       	ldi	r24, 0x21	; 33
     fce:	80 93 eb 00 	sts	0x00EB, r24
     fd2:	16 c0       	rjmp	.+44     	; 0x1000 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
     fd4:	89 e1       	ldi	r24, 0x19	; 25
     fd6:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <__vector_11+0x2c0>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	4a 95       	dec	r20
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <__vector_11+0x2bc>
     fe8:	ea ee       	ldi	r30, 0xEA	; 234
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 83       	st	Z, r24
					UERST = 0;
     fee:	10 82       	st	Z, r1
     ff0:	07 c0       	rjmp	.+14     	; 0x1000 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
     ff2:	81 e2       	ldi	r24, 0x21	; 33
     ff4:	80 93 eb 00 	sts	0x00EB, r24
     ff8:	03 c0       	rjmp	.+6      	; 0x1000 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     ffa:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     ffc:	21 11       	cpse	r18, r1
     ffe:	f7 ce       	rjmp	.-530    	; 0xdee <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	bf 91       	pop	r27
    100a:	af 91       	pop	r26
    100c:	9f 91       	pop	r25
    100e:	8f 91       	pop	r24
    1010:	7f 91       	pop	r23
    1012:	6f 91       	pop	r22
    1014:	5f 91       	pop	r21
    1016:	4f 91       	pop	r20
    1018:	3f 91       	pop	r19
    101a:	2f 91       	pop	r18
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	0f 90       	pop	r0
    1026:	1f 90       	pop	r1
    1028:	18 95       	reti

0000102a <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1030:	8c 01       	movw	r16, r24
    1032:	0f 5f       	subi	r16, 0xFF	; 255
    1034:	1f 4f       	sbci	r17, 0xFF	; 255
    1036:	fc 01       	movw	r30, r24
    1038:	c4 91       	lpm	r28, Z
		if (!c) break;
    103a:	cc 23       	and	r28, r28
    103c:	71 f0       	breq	.+28     	; 0x105a <print_P+0x30>
		if (c == '\n') usb_tx_char('\r');
    103e:	ca 30       	cpi	r28, 0x0A	; 10
    1040:	19 f4       	brne	.+6      	; 0x1048 <print_P+0x1e>
    1042:	8d e0       	ldi	r24, 0x0D	; 13
    1044:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <m_usb_tx_char>
		usb_tx_char(c);
    1048:	8c 2f       	mov	r24, r28
    104a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    104e:	f8 01       	movw	r30, r16
    1050:	c4 91       	lpm	r28, Z
    1052:	0f 5f       	subi	r16, 0xFF	; 255
    1054:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
    1056:	c1 11       	cpse	r28, r1
    1058:	f2 cf       	rjmp	.-28     	; 0x103e <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	08 95       	ret

00001062 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	27 97       	sbiw	r28, 0x07	; 7
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    107e:	8e 01       	movw	r16, r28
    1080:	0f 5f       	subi	r16, 0xFF	; 255
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	27 e0       	ldi	r18, 0x07	; 7
    1086:	f8 01       	movw	r30, r16
    1088:	11 92       	st	Z+, r1
    108a:	2a 95       	dec	r18
    108c:	e9 f7       	brne	.-6      	; 0x1088 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    108e:	4a e0       	ldi	r20, 0x0A	; 10
    1090:	b8 01       	movw	r22, r16
    1092:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__itoa_ncheck>
    1096:	7e 01       	movw	r14, r28
    1098:	f8 e0       	ldi	r31, 0x08	; 8
    109a:	ef 0e       	add	r14, r31
    109c:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    109e:	f8 01       	movw	r30, r16
    10a0:	81 91       	ld	r24, Z+
    10a2:	8f 01       	movw	r16, r30
    10a4:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    10a6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    10aa:	0e 15       	cp	r16, r14
    10ac:	1f 05       	cpc	r17, r15
    10ae:	b9 f7       	brne	.-18     	; 0x109e <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    10b0:	27 96       	adiw	r28, 0x07	; 7
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	08 95       	ret

000010ca <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    10ce:	ec eb       	ldi	r30, 0xBC	; 188
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	88 23       	and	r24, r24
    10d6:	34 f0       	brlt	.+12     	; 0x10e4 <twi_wait+0x1a>
    10d8:	2f 5f       	subi	r18, 0xFF	; 255
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	29 3e       	cpi	r18, 0xE9	; 233
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	38 07       	cpc	r19, r24
    10e2:	b9 f7       	brne	.-18     	; 0x10d2 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	28 3e       	cpi	r18, 0xE8	; 232
    10e8:	33 40       	sbci	r19, 0x03	; 3
    10ea:	09 f4       	brne	.+2      	; 0x10ee <twi_wait+0x24>
    10ec:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    10ee:	08 95       	ret

000010f0 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    10f0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    10f4:	84 e8       	ldi	r24, 0x84	; 132
    10f6:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    10fa:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_wait>
    10fe:	88 23       	and	r24, r24
    1100:	19 f0       	breq	.+6      	; 0x1108 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1102:	80 91 b9 00 	lds	r24, 0x00B9
    1106:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    1108:	08 95       	ret

0000110a <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    110a:	cf 93       	push	r28
    110c:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    110e:	94 ea       	ldi	r25, 0xA4	; 164
    1110:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1114:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_wait>
    1118:	88 23       	and	r24, r24
    111a:	61 f0       	breq	.+24     	; 0x1134 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    111c:	8c 2f       	mov	r24, r28
    111e:	88 0f       	add	r24, r24
    1120:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1124:	80 32       	cpi	r24, 0x20	; 32
    1126:	29 f4       	brne	.+10     	; 0x1132 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1128:	84 e9       	ldi	r24, 0x94	; 148
    112a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <start_write+0x2a>
	}	
	return 1;	// success
    1132:	81 e0       	ldi	r24, 0x01	; 1
}	
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1138:	0e 94 8c 05 	call	0xb18	; 0xb18 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    113c:	88 e5       	ldi	r24, 0x58	; 88
    113e:	0e 94 85 08 	call	0x110a	; 0x110a <start_write>
    1142:	88 23       	and	r24, r24
    1144:	09 f4       	brne	.+2      	; 0x1148 <m_wii_open+0x10>
    1146:	cd c0       	rjmp	.+410    	; 0x12e2 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    1148:	80 e3       	ldi	r24, 0x30	; 48
    114a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    114e:	88 23       	and	r24, r24
    1150:	09 f4       	brne	.+2      	; 0x1154 <m_wii_open+0x1c>
    1152:	c9 c0       	rjmp	.+402    	; 0x12e6 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    115a:	88 23       	and	r24, r24
    115c:	09 f4       	brne	.+2      	; 0x1160 <m_wii_open+0x28>
    115e:	c5 c0       	rjmp	.+394    	; 0x12ea <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1160:	84 e9       	ldi	r24, 0x94	; 148
    1162:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1166:	83 ec       	ldi	r24, 0xC3	; 195
    1168:	99 e0       	ldi	r25, 0x09	; 9
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	f1 f7       	brne	.-4      	; 0x116a <m_wii_open+0x32>
    116e:	00 c0       	rjmp	.+0      	; 0x1170 <m_wii_open+0x38>
    1170:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1172:	88 e5       	ldi	r24, 0x58	; 88
    1174:	0e 94 85 08 	call	0x110a	; 0x110a <start_write>
    1178:	88 23       	and	r24, r24
    117a:	09 f4       	brne	.+2      	; 0x117e <m_wii_open+0x46>
    117c:	b8 c0       	rjmp	.+368    	; 0x12ee <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    1184:	88 23       	and	r24, r24
    1186:	09 f4       	brne	.+2      	; 0x118a <m_wii_open+0x52>
    1188:	b4 c0       	rjmp	.+360    	; 0x12f2 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    1190:	88 23       	and	r24, r24
    1192:	09 f4       	brne	.+2      	; 0x1196 <m_wii_open+0x5e>
    1194:	b0 c0       	rjmp	.+352    	; 0x12f6 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    119c:	88 23       	and	r24, r24
    119e:	09 f4       	brne	.+2      	; 0x11a2 <m_wii_open+0x6a>
    11a0:	ac c0       	rjmp	.+344    	; 0x12fa <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    11a8:	88 23       	and	r24, r24
    11aa:	09 f4       	brne	.+2      	; 0x11ae <m_wii_open+0x76>
    11ac:	a8 c0       	rjmp	.+336    	; 0x12fe <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    11b4:	88 23       	and	r24, r24
    11b6:	09 f4       	brne	.+2      	; 0x11ba <m_wii_open+0x82>
    11b8:	a4 c0       	rjmp	.+328    	; 0x1302 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    11c0:	88 23       	and	r24, r24
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <m_wii_open+0x8e>
    11c4:	a0 c0       	rjmp	.+320    	; 0x1306 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    11cc:	88 23       	and	r24, r24
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <m_wii_open+0x9a>
    11d0:	9c c0       	rjmp	.+312    	; 0x130a <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    11d2:	80 e9       	ldi	r24, 0x90	; 144
    11d4:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    11d8:	88 23       	and	r24, r24
    11da:	09 f4       	brne	.+2      	; 0x11de <m_wii_open+0xa6>
    11dc:	98 c0       	rjmp	.+304    	; 0x130e <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    11de:	84 e9       	ldi	r24, 0x94	; 148
    11e0:	80 93 bc 00 	sts	0x00BC, r24
    11e4:	83 ec       	ldi	r24, 0xC3	; 195
    11e6:	99 e0       	ldi	r25, 0x09	; 9
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <m_wii_open+0xb0>
    11ec:	00 c0       	rjmp	.+0      	; 0x11ee <m_wii_open+0xb6>
    11ee:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    11f0:	88 e5       	ldi	r24, 0x58	; 88
    11f2:	0e 94 85 08 	call	0x110a	; 0x110a <start_write>
    11f6:	88 23       	and	r24, r24
    11f8:	09 f4       	brne	.+2      	; 0x11fc <m_wii_open+0xc4>
    11fa:	8b c0       	rjmp	.+278    	; 0x1312 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    11fc:	87 e0       	ldi	r24, 0x07	; 7
    11fe:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    1202:	88 23       	and	r24, r24
    1204:	09 f4       	brne	.+2      	; 0x1208 <m_wii_open+0xd0>
    1206:	87 c0       	rjmp	.+270    	; 0x1316 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    120e:	88 23       	and	r24, r24
    1210:	09 f4       	brne	.+2      	; 0x1214 <m_wii_open+0xdc>
    1212:	83 c0       	rjmp	.+262    	; 0x131a <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    1214:	81 e4       	ldi	r24, 0x41	; 65
    1216:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    121a:	88 23       	and	r24, r24
    121c:	09 f4       	brne	.+2      	; 0x1220 <m_wii_open+0xe8>
    121e:	7f c0       	rjmp	.+254    	; 0x131e <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1220:	84 e9       	ldi	r24, 0x94	; 148
    1222:	80 93 bc 00 	sts	0x00BC, r24
    1226:	83 ec       	ldi	r24, 0xC3	; 195
    1228:	99 e0       	ldi	r25, 0x09	; 9
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <m_wii_open+0xf2>
    122e:	00 c0       	rjmp	.+0      	; 0x1230 <m_wii_open+0xf8>
    1230:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1232:	88 e5       	ldi	r24, 0x58	; 88
    1234:	0e 94 85 08 	call	0x110a	; 0x110a <start_write>
    1238:	88 23       	and	r24, r24
    123a:	09 f4       	brne	.+2      	; 0x123e <m_wii_open+0x106>
    123c:	72 c0       	rjmp	.+228    	; 0x1322 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    123e:	8a e1       	ldi	r24, 0x1A	; 26
    1240:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    1244:	88 23       	and	r24, r24
    1246:	09 f4       	brne	.+2      	; 0x124a <m_wii_open+0x112>
    1248:	6e c0       	rjmp	.+220    	; 0x1326 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    124a:	80 e4       	ldi	r24, 0x40	; 64
    124c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    1250:	88 23       	and	r24, r24
    1252:	09 f4       	brne	.+2      	; 0x1256 <m_wii_open+0x11e>
    1254:	6a c0       	rjmp	.+212    	; 0x132a <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    125c:	88 23       	and	r24, r24
    125e:	09 f4       	brne	.+2      	; 0x1262 <m_wii_open+0x12a>
    1260:	66 c0       	rjmp	.+204    	; 0x132e <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1262:	84 e9       	ldi	r24, 0x94	; 148
    1264:	80 93 bc 00 	sts	0x00BC, r24
    1268:	83 ec       	ldi	r24, 0xC3	; 195
    126a:	99 e0       	ldi	r25, 0x09	; 9
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	f1 f7       	brne	.-4      	; 0x126c <m_wii_open+0x134>
    1270:	00 c0       	rjmp	.+0      	; 0x1272 <m_wii_open+0x13a>
    1272:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1274:	88 e5       	ldi	r24, 0x58	; 88
    1276:	0e 94 85 08 	call	0x110a	; 0x110a <start_write>
    127a:	88 23       	and	r24, r24
    127c:	09 f4       	brne	.+2      	; 0x1280 <m_wii_open+0x148>
    127e:	59 c0       	rjmp	.+178    	; 0x1332 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    1280:	83 e3       	ldi	r24, 0x33	; 51
    1282:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    1286:	88 23       	and	r24, r24
    1288:	09 f4       	brne	.+2      	; 0x128c <m_wii_open+0x154>
    128a:	55 c0       	rjmp	.+170    	; 0x1336 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    128c:	83 e0       	ldi	r24, 0x03	; 3
    128e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    1292:	88 23       	and	r24, r24
    1294:	09 f4       	brne	.+2      	; 0x1298 <m_wii_open+0x160>
    1296:	51 c0       	rjmp	.+162    	; 0x133a <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1298:	84 e9       	ldi	r24, 0x94	; 148
    129a:	80 93 bc 00 	sts	0x00BC, r24
    129e:	83 ec       	ldi	r24, 0xC3	; 195
    12a0:	99 e0       	ldi	r25, 0x09	; 9
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <m_wii_open+0x16a>
    12a6:	00 c0       	rjmp	.+0      	; 0x12a8 <m_wii_open+0x170>
    12a8:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    12aa:	88 e5       	ldi	r24, 0x58	; 88
    12ac:	0e 94 85 08 	call	0x110a	; 0x110a <start_write>
    12b0:	88 23       	and	r24, r24
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <m_wii_open+0x17e>
    12b4:	44 c0       	rjmp	.+136    	; 0x133e <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    12b6:	80 e3       	ldi	r24, 0x30	; 48
    12b8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    12bc:	88 23       	and	r24, r24
    12be:	09 f4       	brne	.+2      	; 0x12c2 <m_wii_open+0x18a>
    12c0:	40 c0       	rjmp	.+128    	; 0x1342 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    12c2:	88 e0       	ldi	r24, 0x08	; 8
    12c4:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    12c8:	88 23       	and	r24, r24
    12ca:	e9 f1       	breq	.+122    	; 0x1346 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    12cc:	84 e9       	ldi	r24, 0x94	; 148
    12ce:	80 93 bc 00 	sts	0x00BC, r24
    12d2:	83 ec       	ldi	r24, 0xC3	; 195
    12d4:	99 e0       	ldi	r25, 0x09	; 9
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <m_wii_open+0x19e>
    12da:	00 c0       	rjmp	.+0      	; 0x12dc <m_wii_open+0x1a4>
    12dc:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    1346:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1348:	08 95       	ret

0000134a <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    134a:	cf 93       	push	r28
    134c:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    134e:	84 ea       	ldi	r24, 0xA4	; 164
    1350:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    1354:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_wait>
    1358:	88 23       	and	r24, r24
    135a:	69 f0       	breq	.+26     	; 0x1376 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    135c:	8c 2f       	mov	r24, r28
    135e:	88 0f       	add	r24, r24
    1360:	8f 5f       	subi	r24, 0xFF	; 255
    1362:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1366:	88 34       	cpi	r24, 0x48	; 72
    1368:	29 f4       	brne	.+10     	; 0x1374 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    136a:	84 e9       	ldi	r24, 0x94	; 148
    136c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <start_read+0x2c>
	}	
	return 1;	// success
    1374:	81 e0       	ldi	r24, 0x01	; 1
}	
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	60 97       	sbiw	r28, 0x10	; 16
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1394:	fe 01       	movw	r30, r28
    1396:	31 96       	adiw	r30, 0x01	; 1
    1398:	80 e1       	ldi	r24, 0x10	; 16
    139a:	df 01       	movw	r26, r30
    139c:	1d 92       	st	X+, r1
    139e:	8a 95       	dec	r24
    13a0:	e9 f7       	brne	.-6      	; 0x139c <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    13a2:	88 e5       	ldi	r24, 0x58	; 88
    13a4:	0e 94 85 08 	call	0x110a	; 0x110a <start_write>
    13a8:	88 23       	and	r24, r24
    13aa:	09 f4       	brne	.+2      	; 0x13ae <m_wii_read+0x34>
    13ac:	69 c0       	rjmp	.+210    	; 0x1480 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    13ae:	86 e3       	ldi	r24, 0x36	; 54
    13b0:	0e 94 78 08 	call	0x10f0	; 0x10f0 <send_byte>
    13b4:	88 23       	and	r24, r24
    13b6:	09 f4       	brne	.+2      	; 0x13ba <m_wii_read+0x40>
    13b8:	65 c0       	rjmp	.+202    	; 0x1484 <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    13ba:	84 e9       	ldi	r24, 0x94	; 148
    13bc:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13c0:	b8 e0       	ldi	r27, 0x08	; 8
    13c2:	ba 95       	dec	r27
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <m_wii_read+0x48>
    13c6:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    13c8:	88 e5       	ldi	r24, 0x58	; 88
    13ca:	0e 94 a5 09 	call	0x134a	; 0x134a <start_read>
    13ce:	88 23       	and	r24, r24
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <m_wii_read+0x5a>
    13d2:	5a c0       	rjmp	.+180    	; 0x1488 <m_wii_read+0x10e>
    13d4:	be 01       	movw	r22, r28
    13d6:	6f 5f       	subi	r22, 0xFF	; 255
    13d8:	7f 4f       	sbci	r23, 0xFF	; 255
    13da:	ae 01       	movw	r20, r28
    13dc:	40 5f       	subi	r20, 0xF0	; 240
    13de:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    13e0:	ec eb       	ldi	r30, 0xBC	; 188
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    13e6:	2b eb       	ldi	r18, 0xBB	; 187
    13e8:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    13ea:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    13ec:	90 81       	ld	r25, Z
    13ee:	99 23       	and	r25, r25
    13f0:	ec f7       	brge	.-6      	; 0x13ec <m_wii_read+0x72>
		temp[i] = TWDR;
    13f2:	d9 01       	movw	r26, r18
    13f4:	9c 91       	ld	r25, X
    13f6:	db 01       	movw	r26, r22
    13f8:	9d 93       	st	X+, r25
    13fa:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    13fc:	a4 17       	cp	r26, r20
    13fe:	b5 07       	cpc	r27, r21
    1400:	a1 f7       	brne	.-24     	; 0x13ea <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1402:	84 e8       	ldi	r24, 0x84	; 132
    1404:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1408:	ec eb       	ldi	r30, 0xBC	; 188
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	88 23       	and	r24, r24
    1410:	ec f7       	brge	.-6      	; 0x140c <m_wii_read+0x92>
	temp[15] = TWDR;
    1412:	80 91 bb 00 	lds	r24, 0x00BB
    1416:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1418:	84 e9       	ldi	r24, 0x94	; 148
    141a:	80 93 bc 00 	sts	0x00BC, r24
    141e:	be 01       	movw	r22, r28
    1420:	6c 5f       	subi	r22, 0xFC	; 252
    1422:	7f 4f       	sbci	r23, 0xFF	; 255
    1424:	f8 01       	movw	r30, r16
    1426:	08 5e       	subi	r16, 0xE8	; 232
    1428:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    142a:	db 01       	movw	r26, r22
    142c:	2c 91       	ld	r18, X
    142e:	32 2f       	mov	r19, r18
    1430:	30 73       	andi	r19, 0x30	; 48
    1432:	cb 01       	movw	r24, r22
    1434:	02 97       	sbiw	r24, 0x02	; 2
    1436:	dc 01       	movw	r26, r24
    1438:	8c 91       	ld	r24, X
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	b0 e1       	ldi	r27, 0x10	; 16
    143e:	3b 9f       	mul	r19, r27
    1440:	80 0d       	add	r24, r0
    1442:	91 1d       	adc	r25, r1
    1444:	11 24       	eor	r1, r1
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    144a:	42 2f       	mov	r20, r18
    144c:	40 7c       	andi	r20, 0xC0	; 192
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	44 0f       	add	r20, r20
    1452:	55 1f       	adc	r21, r21
    1454:	44 0f       	add	r20, r20
    1456:	55 1f       	adc	r21, r21
    1458:	cb 01       	movw	r24, r22
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	dc 01       	movw	r26, r24
    145e:	8c 91       	ld	r24, X
    1460:	48 0f       	add	r20, r24
    1462:	51 1d       	adc	r21, r1
    1464:	53 83       	std	Z+3, r21	; 0x03
    1466:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1468:	2f 70       	andi	r18, 0x0F	; 15
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	35 83       	std	Z+5, r19	; 0x05
    146e:	24 83       	std	Z+4, r18	; 0x04
    1470:	6d 5f       	subi	r22, 0xFD	; 253
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1476:	e0 17       	cp	r30, r16
    1478:	f1 07       	cpc	r31, r17
    147a:	b9 f6       	brne	.-82     	; 0x142a <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	05 c0       	rjmp	.+10     	; 0x148a <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	03 c0       	rjmp	.+6      	; 0x148a <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	01 c0       	rjmp	.+2      	; 0x148a <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1488:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    148a:	60 96       	adiw	r28, 0x10	; 16
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	08 95       	ret

000014a0 <__subsf3>:
    14a0:	50 58       	subi	r21, 0x80	; 128

000014a2 <__addsf3>:
    14a2:	bb 27       	eor	r27, r27
    14a4:	aa 27       	eor	r26, r26
    14a6:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3x>
    14aa:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__fp_round>
    14ae:	0e 94 45 0c 	call	0x188a	; 0x188a <__fp_pscA>
    14b2:	38 f0       	brcs	.+14     	; 0x14c2 <__addsf3+0x20>
    14b4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__fp_pscB>
    14b8:	20 f0       	brcs	.+8      	; 0x14c2 <__addsf3+0x20>
    14ba:	39 f4       	brne	.+14     	; 0x14ca <__addsf3+0x28>
    14bc:	9f 3f       	cpi	r25, 0xFF	; 255
    14be:	19 f4       	brne	.+6      	; 0x14c6 <__addsf3+0x24>
    14c0:	26 f4       	brtc	.+8      	; 0x14ca <__addsf3+0x28>
    14c2:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__fp_nan>
    14c6:	0e f4       	brtc	.+2      	; 0x14ca <__addsf3+0x28>
    14c8:	e0 95       	com	r30
    14ca:	e7 fb       	bst	r30, 7
    14cc:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__fp_inf>

000014d0 <__addsf3x>:
    14d0:	e9 2f       	mov	r30, r25
    14d2:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__fp_split3>
    14d6:	58 f3       	brcs	.-42     	; 0x14ae <__addsf3+0xc>
    14d8:	ba 17       	cp	r27, r26
    14da:	62 07       	cpc	r22, r18
    14dc:	73 07       	cpc	r23, r19
    14de:	84 07       	cpc	r24, r20
    14e0:	95 07       	cpc	r25, r21
    14e2:	20 f0       	brcs	.+8      	; 0x14ec <__addsf3x+0x1c>
    14e4:	79 f4       	brne	.+30     	; 0x1504 <__addsf3x+0x34>
    14e6:	a6 f5       	brtc	.+104    	; 0x1550 <__addsf3x+0x80>
    14e8:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__fp_zero>
    14ec:	0e f4       	brtc	.+2      	; 0x14f0 <__addsf3x+0x20>
    14ee:	e0 95       	com	r30
    14f0:	0b 2e       	mov	r0, r27
    14f2:	ba 2f       	mov	r27, r26
    14f4:	a0 2d       	mov	r26, r0
    14f6:	0b 01       	movw	r0, r22
    14f8:	b9 01       	movw	r22, r18
    14fa:	90 01       	movw	r18, r0
    14fc:	0c 01       	movw	r0, r24
    14fe:	ca 01       	movw	r24, r20
    1500:	a0 01       	movw	r20, r0
    1502:	11 24       	eor	r1, r1
    1504:	ff 27       	eor	r31, r31
    1506:	59 1b       	sub	r21, r25
    1508:	99 f0       	breq	.+38     	; 0x1530 <__addsf3x+0x60>
    150a:	59 3f       	cpi	r21, 0xF9	; 249
    150c:	50 f4       	brcc	.+20     	; 0x1522 <__addsf3x+0x52>
    150e:	50 3e       	cpi	r21, 0xE0	; 224
    1510:	68 f1       	brcs	.+90     	; 0x156c <__addsf3x+0x9c>
    1512:	1a 16       	cp	r1, r26
    1514:	f0 40       	sbci	r31, 0x00	; 0
    1516:	a2 2f       	mov	r26, r18
    1518:	23 2f       	mov	r18, r19
    151a:	34 2f       	mov	r19, r20
    151c:	44 27       	eor	r20, r20
    151e:	58 5f       	subi	r21, 0xF8	; 248
    1520:	f3 cf       	rjmp	.-26     	; 0x1508 <__addsf3x+0x38>
    1522:	46 95       	lsr	r20
    1524:	37 95       	ror	r19
    1526:	27 95       	ror	r18
    1528:	a7 95       	ror	r26
    152a:	f0 40       	sbci	r31, 0x00	; 0
    152c:	53 95       	inc	r21
    152e:	c9 f7       	brne	.-14     	; 0x1522 <__addsf3x+0x52>
    1530:	7e f4       	brtc	.+30     	; 0x1550 <__addsf3x+0x80>
    1532:	1f 16       	cp	r1, r31
    1534:	ba 0b       	sbc	r27, r26
    1536:	62 0b       	sbc	r22, r18
    1538:	73 0b       	sbc	r23, r19
    153a:	84 0b       	sbc	r24, r20
    153c:	ba f0       	brmi	.+46     	; 0x156c <__addsf3x+0x9c>
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	a1 f0       	breq	.+40     	; 0x156a <__addsf3x+0x9a>
    1542:	ff 0f       	add	r31, r31
    1544:	bb 1f       	adc	r27, r27
    1546:	66 1f       	adc	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	c2 f7       	brpl	.-16     	; 0x153e <__addsf3x+0x6e>
    154e:	0e c0       	rjmp	.+28     	; 0x156c <__addsf3x+0x9c>
    1550:	ba 0f       	add	r27, r26
    1552:	62 1f       	adc	r22, r18
    1554:	73 1f       	adc	r23, r19
    1556:	84 1f       	adc	r24, r20
    1558:	48 f4       	brcc	.+18     	; 0x156c <__addsf3x+0x9c>
    155a:	87 95       	ror	r24
    155c:	77 95       	ror	r23
    155e:	67 95       	ror	r22
    1560:	b7 95       	ror	r27
    1562:	f7 95       	ror	r31
    1564:	9e 3f       	cpi	r25, 0xFE	; 254
    1566:	08 f0       	brcs	.+2      	; 0x156a <__addsf3x+0x9a>
    1568:	b0 cf       	rjmp	.-160    	; 0x14ca <__addsf3+0x28>
    156a:	93 95       	inc	r25
    156c:	88 0f       	add	r24, r24
    156e:	08 f0       	brcs	.+2      	; 0x1572 <__addsf3x+0xa2>
    1570:	99 27       	eor	r25, r25
    1572:	ee 0f       	add	r30, r30
    1574:	97 95       	ror	r25
    1576:	87 95       	ror	r24
    1578:	08 95       	ret
    157a:	0e 94 45 0c 	call	0x188a	; 0x188a <__fp_pscA>
    157e:	60 f0       	brcs	.+24     	; 0x1598 <__addsf3x+0xc8>
    1580:	80 e8       	ldi	r24, 0x80	; 128
    1582:	91 e0       	ldi	r25, 0x01	; 1
    1584:	09 f4       	brne	.+2      	; 0x1588 <__addsf3x+0xb8>
    1586:	9e ef       	ldi	r25, 0xFE	; 254
    1588:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__fp_pscB>
    158c:	28 f0       	brcs	.+10     	; 0x1598 <__addsf3x+0xc8>
    158e:	40 e8       	ldi	r20, 0x80	; 128
    1590:	51 e0       	ldi	r21, 0x01	; 1
    1592:	71 f4       	brne	.+28     	; 0x15b0 <atan2+0x10>
    1594:	5e ef       	ldi	r21, 0xFE	; 254
    1596:	0c c0       	rjmp	.+24     	; 0x15b0 <atan2+0x10>
    1598:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__fp_nan>
    159c:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__fp_zero>

000015a0 <atan2>:
    15a0:	e9 2f       	mov	r30, r25
    15a2:	e0 78       	andi	r30, 0x80	; 128
    15a4:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__fp_split3>
    15a8:	40 f3       	brcs	.-48     	; 0x157a <__addsf3x+0xaa>
    15aa:	09 2e       	mov	r0, r25
    15ac:	05 2a       	or	r0, r21
    15ae:	b1 f3       	breq	.-20     	; 0x159c <__addsf3x+0xcc>
    15b0:	26 17       	cp	r18, r22
    15b2:	37 07       	cpc	r19, r23
    15b4:	48 07       	cpc	r20, r24
    15b6:	59 07       	cpc	r21, r25
    15b8:	38 f0       	brcs	.+14     	; 0x15c8 <atan2+0x28>
    15ba:	0e 2e       	mov	r0, r30
    15bc:	07 f8       	bld	r0, 7
    15be:	e0 25       	eor	r30, r0
    15c0:	69 f0       	breq	.+26     	; 0x15dc <atan2+0x3c>
    15c2:	e0 25       	eor	r30, r0
    15c4:	e0 64       	ori	r30, 0x40	; 64
    15c6:	0a c0       	rjmp	.+20     	; 0x15dc <atan2+0x3c>
    15c8:	ef 63       	ori	r30, 0x3F	; 63
    15ca:	07 f8       	bld	r0, 7
    15cc:	00 94       	com	r0
    15ce:	07 fa       	bst	r0, 7
    15d0:	db 01       	movw	r26, r22
    15d2:	b9 01       	movw	r22, r18
    15d4:	9d 01       	movw	r18, r26
    15d6:	dc 01       	movw	r26, r24
    15d8:	ca 01       	movw	r24, r20
    15da:	ad 01       	movw	r20, r26
    15dc:	ef 93       	push	r30
    15de:	0e 94 47 0b 	call	0x168e	; 0x168e <__divsf3_pse>
    15e2:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fp_round>
    15e6:	0e 94 00 0b 	call	0x1600	; 0x1600 <atan>
    15ea:	5f 91       	pop	r21
    15ec:	55 23       	and	r21, r21
    15ee:	39 f0       	breq	.+14     	; 0x15fe <atan2+0x5e>
    15f0:	2b ed       	ldi	r18, 0xDB	; 219
    15f2:	3f e0       	ldi	r19, 0x0F	; 15
    15f4:	49 e4       	ldi	r20, 0x49	; 73
    15f6:	50 fd       	sbrc	r21, 0
    15f8:	49 ec       	ldi	r20, 0xC9	; 201
    15fa:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__addsf3>
    15fe:	08 95       	ret

00001600 <atan>:
    1600:	df 93       	push	r29
    1602:	dd 27       	eor	r29, r29
    1604:	b9 2f       	mov	r27, r25
    1606:	bf 77       	andi	r27, 0x7F	; 127
    1608:	40 e8       	ldi	r20, 0x80	; 128
    160a:	5f e3       	ldi	r21, 0x3F	; 63
    160c:	16 16       	cp	r1, r22
    160e:	17 06       	cpc	r1, r23
    1610:	48 07       	cpc	r20, r24
    1612:	5b 07       	cpc	r21, r27
    1614:	18 f4       	brcc	.+6      	; 0x161c <atan+0x1c>
    1616:	d9 2f       	mov	r29, r25
    1618:	0e 94 cc 0c 	call	0x1998	; 0x1998 <inverse>
    161c:	9f 93       	push	r25
    161e:	8f 93       	push	r24
    1620:	7f 93       	push	r23
    1622:	6f 93       	push	r22
    1624:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <square>
    1628:	ec ea       	ldi	r30, 0xAC	; 172
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	0e 94 1e 0c 	call	0x183c	; 0x183c <__fp_powser>
    1630:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fp_round>
    1634:	2f 91       	pop	r18
    1636:	3f 91       	pop	r19
    1638:	4f 91       	pop	r20
    163a:	5f 91       	pop	r21
    163c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__mulsf3x>
    1640:	dd 23       	and	r29, r29
    1642:	51 f0       	breq	.+20     	; 0x1658 <atan+0x58>
    1644:	90 58       	subi	r25, 0x80	; 128
    1646:	a2 ea       	ldi	r26, 0xA2	; 162
    1648:	2a ed       	ldi	r18, 0xDA	; 218
    164a:	3f e0       	ldi	r19, 0x0F	; 15
    164c:	49 ec       	ldi	r20, 0xC9	; 201
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	d0 78       	andi	r29, 0x80	; 128
    1652:	5d 27       	eor	r21, r29
    1654:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3x>
    1658:	df 91       	pop	r29
    165a:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__fp_round>

0000165e <cos>:
    165e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fp_rempio2>
    1662:	e3 95       	inc	r30
    1664:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_sinus>
    1668:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__fp_pscB>
    166c:	58 f0       	brcs	.+22     	; 0x1684 <cos+0x26>
    166e:	0e 94 45 0c 	call	0x188a	; 0x188a <__fp_pscA>
    1672:	40 f0       	brcs	.+16     	; 0x1684 <cos+0x26>
    1674:	29 f4       	brne	.+10     	; 0x1680 <cos+0x22>
    1676:	5f 3f       	cpi	r21, 0xFF	; 255
    1678:	29 f0       	breq	.+10     	; 0x1684 <cos+0x26>
    167a:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__fp_inf>
    167e:	51 11       	cpse	r21, r1
    1680:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__fp_szero>
    1684:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__fp_nan>

00001688 <__divsf3x>:
    1688:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__fp_split3>
    168c:	68 f3       	brcs	.-38     	; 0x1668 <cos+0xa>

0000168e <__divsf3_pse>:
    168e:	99 23       	and	r25, r25
    1690:	b1 f3       	breq	.-20     	; 0x167e <cos+0x20>
    1692:	55 23       	and	r21, r21
    1694:	91 f3       	breq	.-28     	; 0x167a <cos+0x1c>
    1696:	95 1b       	sub	r25, r21
    1698:	55 0b       	sbc	r21, r21
    169a:	bb 27       	eor	r27, r27
    169c:	aa 27       	eor	r26, r26
    169e:	62 17       	cp	r22, r18
    16a0:	73 07       	cpc	r23, r19
    16a2:	84 07       	cpc	r24, r20
    16a4:	38 f0       	brcs	.+14     	; 0x16b4 <__divsf3_pse+0x26>
    16a6:	9f 5f       	subi	r25, 0xFF	; 255
    16a8:	5f 4f       	sbci	r21, 0xFF	; 255
    16aa:	22 0f       	add	r18, r18
    16ac:	33 1f       	adc	r19, r19
    16ae:	44 1f       	adc	r20, r20
    16b0:	aa 1f       	adc	r26, r26
    16b2:	a9 f3       	breq	.-22     	; 0x169e <__divsf3_pse+0x10>
    16b4:	35 d0       	rcall	.+106    	; 0x1720 <__divsf3_pse+0x92>
    16b6:	0e 2e       	mov	r0, r30
    16b8:	3a f0       	brmi	.+14     	; 0x16c8 <__divsf3_pse+0x3a>
    16ba:	e0 e8       	ldi	r30, 0x80	; 128
    16bc:	32 d0       	rcall	.+100    	; 0x1722 <__divsf3_pse+0x94>
    16be:	91 50       	subi	r25, 0x01	; 1
    16c0:	50 40       	sbci	r21, 0x00	; 0
    16c2:	e6 95       	lsr	r30
    16c4:	00 1c       	adc	r0, r0
    16c6:	ca f7       	brpl	.-14     	; 0x16ba <__divsf3_pse+0x2c>
    16c8:	2b d0       	rcall	.+86     	; 0x1720 <__divsf3_pse+0x92>
    16ca:	fe 2f       	mov	r31, r30
    16cc:	29 d0       	rcall	.+82     	; 0x1720 <__divsf3_pse+0x92>
    16ce:	66 0f       	add	r22, r22
    16d0:	77 1f       	adc	r23, r23
    16d2:	88 1f       	adc	r24, r24
    16d4:	bb 1f       	adc	r27, r27
    16d6:	26 17       	cp	r18, r22
    16d8:	37 07       	cpc	r19, r23
    16da:	48 07       	cpc	r20, r24
    16dc:	ab 07       	cpc	r26, r27
    16de:	b0 e8       	ldi	r27, 0x80	; 128
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <__divsf3_pse+0x56>
    16e2:	bb 0b       	sbc	r27, r27
    16e4:	80 2d       	mov	r24, r0
    16e6:	bf 01       	movw	r22, r30
    16e8:	ff 27       	eor	r31, r31
    16ea:	93 58       	subi	r25, 0x83	; 131
    16ec:	5f 4f       	sbci	r21, 0xFF	; 255
    16ee:	3a f0       	brmi	.+14     	; 0x16fe <__divsf3_pse+0x70>
    16f0:	9e 3f       	cpi	r25, 0xFE	; 254
    16f2:	51 05       	cpc	r21, r1
    16f4:	78 f0       	brcs	.+30     	; 0x1714 <__divsf3_pse+0x86>
    16f6:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__fp_inf>
    16fa:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__fp_szero>
    16fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1700:	e4 f3       	brlt	.-8      	; 0x16fa <__divsf3_pse+0x6c>
    1702:	98 3e       	cpi	r25, 0xE8	; 232
    1704:	d4 f3       	brlt	.-12     	; 0x16fa <__divsf3_pse+0x6c>
    1706:	86 95       	lsr	r24
    1708:	77 95       	ror	r23
    170a:	67 95       	ror	r22
    170c:	b7 95       	ror	r27
    170e:	f7 95       	ror	r31
    1710:	9f 5f       	subi	r25, 0xFF	; 255
    1712:	c9 f7       	brne	.-14     	; 0x1706 <__divsf3_pse+0x78>
    1714:	88 0f       	add	r24, r24
    1716:	91 1d       	adc	r25, r1
    1718:	96 95       	lsr	r25
    171a:	87 95       	ror	r24
    171c:	97 f9       	bld	r25, 7
    171e:	08 95       	ret
    1720:	e1 e0       	ldi	r30, 0x01	; 1
    1722:	66 0f       	add	r22, r22
    1724:	77 1f       	adc	r23, r23
    1726:	88 1f       	adc	r24, r24
    1728:	bb 1f       	adc	r27, r27
    172a:	62 17       	cp	r22, r18
    172c:	73 07       	cpc	r23, r19
    172e:	84 07       	cpc	r24, r20
    1730:	ba 07       	cpc	r27, r26
    1732:	20 f0       	brcs	.+8      	; 0x173c <__divsf3_pse+0xae>
    1734:	62 1b       	sub	r22, r18
    1736:	73 0b       	sbc	r23, r19
    1738:	84 0b       	sbc	r24, r20
    173a:	ba 0b       	sbc	r27, r26
    173c:	ee 1f       	adc	r30, r30
    173e:	88 f7       	brcc	.-30     	; 0x1722 <__divsf3_pse+0x94>
    1740:	e0 95       	com	r30
    1742:	08 95       	ret

00001744 <__fixsfsi>:
    1744:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__fixunssfsi>
    1748:	68 94       	set
    174a:	b1 11       	cpse	r27, r1
    174c:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__fp_szero>
    1750:	08 95       	ret

00001752 <__fixunssfsi>:
    1752:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__fp_splitA>
    1756:	88 f0       	brcs	.+34     	; 0x177a <__fixunssfsi+0x28>
    1758:	9f 57       	subi	r25, 0x7F	; 127
    175a:	98 f0       	brcs	.+38     	; 0x1782 <__fixunssfsi+0x30>
    175c:	b9 2f       	mov	r27, r25
    175e:	99 27       	eor	r25, r25
    1760:	b7 51       	subi	r27, 0x17	; 23
    1762:	b0 f0       	brcs	.+44     	; 0x1790 <__fixunssfsi+0x3e>
    1764:	e1 f0       	breq	.+56     	; 0x179e <__fixunssfsi+0x4c>
    1766:	66 0f       	add	r22, r22
    1768:	77 1f       	adc	r23, r23
    176a:	88 1f       	adc	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	1a f0       	brmi	.+6      	; 0x1776 <__fixunssfsi+0x24>
    1770:	ba 95       	dec	r27
    1772:	c9 f7       	brne	.-14     	; 0x1766 <__fixunssfsi+0x14>
    1774:	14 c0       	rjmp	.+40     	; 0x179e <__fixunssfsi+0x4c>
    1776:	b1 30       	cpi	r27, 0x01	; 1
    1778:	91 f0       	breq	.+36     	; 0x179e <__fixunssfsi+0x4c>
    177a:	0e 94 c5 0c 	call	0x198a	; 0x198a <__fp_zero>
    177e:	b1 e0       	ldi	r27, 0x01	; 1
    1780:	08 95       	ret
    1782:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__fp_zero>
    1786:	67 2f       	mov	r22, r23
    1788:	78 2f       	mov	r23, r24
    178a:	88 27       	eor	r24, r24
    178c:	b8 5f       	subi	r27, 0xF8	; 248
    178e:	39 f0       	breq	.+14     	; 0x179e <__fixunssfsi+0x4c>
    1790:	b9 3f       	cpi	r27, 0xF9	; 249
    1792:	cc f3       	brlt	.-14     	; 0x1786 <__fixunssfsi+0x34>
    1794:	86 95       	lsr	r24
    1796:	77 95       	ror	r23
    1798:	67 95       	ror	r22
    179a:	b3 95       	inc	r27
    179c:	d9 f7       	brne	.-10     	; 0x1794 <__fixunssfsi+0x42>
    179e:	3e f4       	brtc	.+14     	; 0x17ae <__fixunssfsi+0x5c>
    17a0:	90 95       	com	r25
    17a2:	80 95       	com	r24
    17a4:	70 95       	com	r23
    17a6:	61 95       	neg	r22
    17a8:	7f 4f       	sbci	r23, 0xFF	; 255
    17aa:	8f 4f       	sbci	r24, 0xFF	; 255
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	08 95       	ret

000017b0 <__floatunsisf>:
    17b0:	e8 94       	clt
    17b2:	09 c0       	rjmp	.+18     	; 0x17c6 <__floatsisf+0x12>

000017b4 <__floatsisf>:
    17b4:	97 fb       	bst	r25, 7
    17b6:	3e f4       	brtc	.+14     	; 0x17c6 <__floatsisf+0x12>
    17b8:	90 95       	com	r25
    17ba:	80 95       	com	r24
    17bc:	70 95       	com	r23
    17be:	61 95       	neg	r22
    17c0:	7f 4f       	sbci	r23, 0xFF	; 255
    17c2:	8f 4f       	sbci	r24, 0xFF	; 255
    17c4:	9f 4f       	sbci	r25, 0xFF	; 255
    17c6:	99 23       	and	r25, r25
    17c8:	a9 f0       	breq	.+42     	; 0x17f4 <__floatsisf+0x40>
    17ca:	f9 2f       	mov	r31, r25
    17cc:	96 e9       	ldi	r25, 0x96	; 150
    17ce:	bb 27       	eor	r27, r27
    17d0:	93 95       	inc	r25
    17d2:	f6 95       	lsr	r31
    17d4:	87 95       	ror	r24
    17d6:	77 95       	ror	r23
    17d8:	67 95       	ror	r22
    17da:	b7 95       	ror	r27
    17dc:	f1 11       	cpse	r31, r1
    17de:	f8 cf       	rjmp	.-16     	; 0x17d0 <__floatsisf+0x1c>
    17e0:	fa f4       	brpl	.+62     	; 0x1820 <__floatsisf+0x6c>
    17e2:	bb 0f       	add	r27, r27
    17e4:	11 f4       	brne	.+4      	; 0x17ea <__floatsisf+0x36>
    17e6:	60 ff       	sbrs	r22, 0
    17e8:	1b c0       	rjmp	.+54     	; 0x1820 <__floatsisf+0x6c>
    17ea:	6f 5f       	subi	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	8f 4f       	sbci	r24, 0xFF	; 255
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	16 c0       	rjmp	.+44     	; 0x1820 <__floatsisf+0x6c>
    17f4:	88 23       	and	r24, r24
    17f6:	11 f0       	breq	.+4      	; 0x17fc <__floatsisf+0x48>
    17f8:	96 e9       	ldi	r25, 0x96	; 150
    17fa:	11 c0       	rjmp	.+34     	; 0x181e <__floatsisf+0x6a>
    17fc:	77 23       	and	r23, r23
    17fe:	21 f0       	breq	.+8      	; 0x1808 <__floatsisf+0x54>
    1800:	9e e8       	ldi	r25, 0x8E	; 142
    1802:	87 2f       	mov	r24, r23
    1804:	76 2f       	mov	r23, r22
    1806:	05 c0       	rjmp	.+10     	; 0x1812 <__floatsisf+0x5e>
    1808:	66 23       	and	r22, r22
    180a:	71 f0       	breq	.+28     	; 0x1828 <__floatsisf+0x74>
    180c:	96 e8       	ldi	r25, 0x86	; 134
    180e:	86 2f       	mov	r24, r22
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	2a f0       	brmi	.+10     	; 0x1820 <__floatsisf+0x6c>
    1816:	9a 95       	dec	r25
    1818:	66 0f       	add	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	88 1f       	adc	r24, r24
    181e:	da f7       	brpl	.-10     	; 0x1816 <__floatsisf+0x62>
    1820:	88 0f       	add	r24, r24
    1822:	96 95       	lsr	r25
    1824:	87 95       	ror	r24
    1826:	97 f9       	bld	r25, 7
    1828:	08 95       	ret

0000182a <__fp_inf>:
    182a:	97 f9       	bld	r25, 7
    182c:	9f 67       	ori	r25, 0x7F	; 127
    182e:	80 e8       	ldi	r24, 0x80	; 128
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	08 95       	ret

00001836 <__fp_nan>:
    1836:	9f ef       	ldi	r25, 0xFF	; 255
    1838:	80 ec       	ldi	r24, 0xC0	; 192
    183a:	08 95       	ret

0000183c <__fp_powser>:
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	1f 93       	push	r17
    1842:	0f 93       	push	r16
    1844:	ff 92       	push	r15
    1846:	ef 92       	push	r14
    1848:	df 92       	push	r13
    184a:	7b 01       	movw	r14, r22
    184c:	8c 01       	movw	r16, r24
    184e:	68 94       	set
    1850:	06 c0       	rjmp	.+12     	; 0x185e <__fp_powser+0x22>
    1852:	da 2e       	mov	r13, r26
    1854:	ef 01       	movw	r28, r30
    1856:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__mulsf3x>
    185a:	fe 01       	movw	r30, r28
    185c:	e8 94       	clt
    185e:	a5 91       	lpm	r26, Z+
    1860:	25 91       	lpm	r18, Z+
    1862:	35 91       	lpm	r19, Z+
    1864:	45 91       	lpm	r20, Z+
    1866:	55 91       	lpm	r21, Z+
    1868:	a6 f3       	brts	.-24     	; 0x1852 <__fp_powser+0x16>
    186a:	ef 01       	movw	r28, r30
    186c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3x>
    1870:	fe 01       	movw	r30, r28
    1872:	97 01       	movw	r18, r14
    1874:	a8 01       	movw	r20, r16
    1876:	da 94       	dec	r13
    1878:	69 f7       	brne	.-38     	; 0x1854 <__fp_powser+0x18>
    187a:	df 90       	pop	r13
    187c:	ef 90       	pop	r14
    187e:	ff 90       	pop	r15
    1880:	0f 91       	pop	r16
    1882:	1f 91       	pop	r17
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <__fp_pscA>:
    188a:	00 24       	eor	r0, r0
    188c:	0a 94       	dec	r0
    188e:	16 16       	cp	r1, r22
    1890:	17 06       	cpc	r1, r23
    1892:	18 06       	cpc	r1, r24
    1894:	09 06       	cpc	r0, r25
    1896:	08 95       	ret

00001898 <__fp_pscB>:
    1898:	00 24       	eor	r0, r0
    189a:	0a 94       	dec	r0
    189c:	12 16       	cp	r1, r18
    189e:	13 06       	cpc	r1, r19
    18a0:	14 06       	cpc	r1, r20
    18a2:	05 06       	cpc	r0, r21
    18a4:	08 95       	ret
    18a6:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__fp_nan>

000018aa <__fp_rempio2>:
    18aa:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__fp_splitA>
    18ae:	d8 f3       	brcs	.-10     	; 0x18a6 <__fp_pscB+0xe>
    18b0:	e8 94       	clt
    18b2:	e0 e0       	ldi	r30, 0x00	; 0
    18b4:	bb 27       	eor	r27, r27
    18b6:	9f 57       	subi	r25, 0x7F	; 127
    18b8:	f0 f0       	brcs	.+60     	; 0x18f6 <__fp_rempio2+0x4c>
    18ba:	2a ed       	ldi	r18, 0xDA	; 218
    18bc:	3f e0       	ldi	r19, 0x0F	; 15
    18be:	49 ec       	ldi	r20, 0xC9	; 201
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <__fp_rempio2+0x24>
    18c2:	ee 0f       	add	r30, r30
    18c4:	bb 0f       	add	r27, r27
    18c6:	66 1f       	adc	r22, r22
    18c8:	77 1f       	adc	r23, r23
    18ca:	88 1f       	adc	r24, r24
    18cc:	28 f0       	brcs	.+10     	; 0x18d8 <__fp_rempio2+0x2e>
    18ce:	b2 3a       	cpi	r27, 0xA2	; 162
    18d0:	62 07       	cpc	r22, r18
    18d2:	73 07       	cpc	r23, r19
    18d4:	84 07       	cpc	r24, r20
    18d6:	28 f0       	brcs	.+10     	; 0x18e2 <__fp_rempio2+0x38>
    18d8:	b2 5a       	subi	r27, 0xA2	; 162
    18da:	62 0b       	sbc	r22, r18
    18dc:	73 0b       	sbc	r23, r19
    18de:	84 0b       	sbc	r24, r20
    18e0:	e3 95       	inc	r30
    18e2:	9a 95       	dec	r25
    18e4:	72 f7       	brpl	.-36     	; 0x18c2 <__fp_rempio2+0x18>
    18e6:	80 38       	cpi	r24, 0x80	; 128
    18e8:	30 f4       	brcc	.+12     	; 0x18f6 <__fp_rempio2+0x4c>
    18ea:	9a 95       	dec	r25
    18ec:	bb 0f       	add	r27, r27
    18ee:	66 1f       	adc	r22, r22
    18f0:	77 1f       	adc	r23, r23
    18f2:	88 1f       	adc	r24, r24
    18f4:	d2 f7       	brpl	.-12     	; 0x18ea <__fp_rempio2+0x40>
    18f6:	90 48       	sbci	r25, 0x80	; 128
    18f8:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__fp_mpack_finite>

000018fc <__fp_round>:
    18fc:	09 2e       	mov	r0, r25
    18fe:	03 94       	inc	r0
    1900:	00 0c       	add	r0, r0
    1902:	11 f4       	brne	.+4      	; 0x1908 <__fp_round+0xc>
    1904:	88 23       	and	r24, r24
    1906:	52 f0       	brmi	.+20     	; 0x191c <__fp_round+0x20>
    1908:	bb 0f       	add	r27, r27
    190a:	40 f4       	brcc	.+16     	; 0x191c <__fp_round+0x20>
    190c:	bf 2b       	or	r27, r31
    190e:	11 f4       	brne	.+4      	; 0x1914 <__fp_round+0x18>
    1910:	60 ff       	sbrs	r22, 0
    1912:	04 c0       	rjmp	.+8      	; 0x191c <__fp_round+0x20>
    1914:	6f 5f       	subi	r22, 0xFF	; 255
    1916:	7f 4f       	sbci	r23, 0xFF	; 255
    1918:	8f 4f       	sbci	r24, 0xFF	; 255
    191a:	9f 4f       	sbci	r25, 0xFF	; 255
    191c:	08 95       	ret

0000191e <__fp_sinus>:
    191e:	ef 93       	push	r30
    1920:	e0 ff       	sbrs	r30, 0
    1922:	07 c0       	rjmp	.+14     	; 0x1932 <__fp_sinus+0x14>
    1924:	a2 ea       	ldi	r26, 0xA2	; 162
    1926:	2a ed       	ldi	r18, 0xDA	; 218
    1928:	3f e0       	ldi	r19, 0x0F	; 15
    192a:	49 ec       	ldi	r20, 0xC9	; 201
    192c:	5f eb       	ldi	r21, 0xBF	; 191
    192e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3x>
    1932:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fp_round>
    1936:	0f 90       	pop	r0
    1938:	03 94       	inc	r0
    193a:	01 fc       	sbrc	r0, 1
    193c:	90 58       	subi	r25, 0x80	; 128
    193e:	e9 ed       	ldi	r30, 0xD9	; 217
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_powsodd>

00001946 <__fp_split3>:
    1946:	57 fd       	sbrc	r21, 7
    1948:	90 58       	subi	r25, 0x80	; 128
    194a:	44 0f       	add	r20, r20
    194c:	55 1f       	adc	r21, r21
    194e:	59 f0       	breq	.+22     	; 0x1966 <__fp_splitA+0x10>
    1950:	5f 3f       	cpi	r21, 0xFF	; 255
    1952:	71 f0       	breq	.+28     	; 0x1970 <__fp_splitA+0x1a>
    1954:	47 95       	ror	r20

00001956 <__fp_splitA>:
    1956:	88 0f       	add	r24, r24
    1958:	97 fb       	bst	r25, 7
    195a:	99 1f       	adc	r25, r25
    195c:	61 f0       	breq	.+24     	; 0x1976 <__fp_splitA+0x20>
    195e:	9f 3f       	cpi	r25, 0xFF	; 255
    1960:	79 f0       	breq	.+30     	; 0x1980 <__fp_splitA+0x2a>
    1962:	87 95       	ror	r24
    1964:	08 95       	ret
    1966:	12 16       	cp	r1, r18
    1968:	13 06       	cpc	r1, r19
    196a:	14 06       	cpc	r1, r20
    196c:	55 1f       	adc	r21, r21
    196e:	f2 cf       	rjmp	.-28     	; 0x1954 <__fp_split3+0xe>
    1970:	46 95       	lsr	r20
    1972:	f1 df       	rcall	.-30     	; 0x1956 <__fp_splitA>
    1974:	08 c0       	rjmp	.+16     	; 0x1986 <__fp_splitA+0x30>
    1976:	16 16       	cp	r1, r22
    1978:	17 06       	cpc	r1, r23
    197a:	18 06       	cpc	r1, r24
    197c:	99 1f       	adc	r25, r25
    197e:	f1 cf       	rjmp	.-30     	; 0x1962 <__fp_splitA+0xc>
    1980:	86 95       	lsr	r24
    1982:	71 05       	cpc	r23, r1
    1984:	61 05       	cpc	r22, r1
    1986:	08 94       	sec
    1988:	08 95       	ret

0000198a <__fp_zero>:
    198a:	e8 94       	clt

0000198c <__fp_szero>:
    198c:	bb 27       	eor	r27, r27
    198e:	66 27       	eor	r22, r22
    1990:	77 27       	eor	r23, r23
    1992:	cb 01       	movw	r24, r22
    1994:	97 f9       	bld	r25, 7
    1996:	08 95       	ret

00001998 <inverse>:
    1998:	9b 01       	movw	r18, r22
    199a:	ac 01       	movw	r20, r24
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	80 e8       	ldi	r24, 0x80	; 128
    19a2:	9f e3       	ldi	r25, 0x3F	; 63
    19a4:	0c 94 93 0d 	jmp	0x1b26	; 0x1b26 <__divsf3>

000019a8 <__mulsf3>:
    19a8:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__mulsf3x>
    19ac:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__fp_round>
    19b0:	0e 94 45 0c 	call	0x188a	; 0x188a <__fp_pscA>
    19b4:	38 f0       	brcs	.+14     	; 0x19c4 <__mulsf3+0x1c>
    19b6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__fp_pscB>
    19ba:	20 f0       	brcs	.+8      	; 0x19c4 <__mulsf3+0x1c>
    19bc:	95 23       	and	r25, r21
    19be:	11 f0       	breq	.+4      	; 0x19c4 <__mulsf3+0x1c>
    19c0:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__fp_inf>
    19c4:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__fp_nan>
    19c8:	11 24       	eor	r1, r1
    19ca:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__fp_szero>

000019ce <__mulsf3x>:
    19ce:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__fp_split3>
    19d2:	70 f3       	brcs	.-36     	; 0x19b0 <__mulsf3+0x8>

000019d4 <__mulsf3_pse>:
    19d4:	95 9f       	mul	r25, r21
    19d6:	c1 f3       	breq	.-16     	; 0x19c8 <__mulsf3+0x20>
    19d8:	95 0f       	add	r25, r21
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	55 1f       	adc	r21, r21
    19de:	62 9f       	mul	r22, r18
    19e0:	f0 01       	movw	r30, r0
    19e2:	72 9f       	mul	r23, r18
    19e4:	bb 27       	eor	r27, r27
    19e6:	f0 0d       	add	r31, r0
    19e8:	b1 1d       	adc	r27, r1
    19ea:	63 9f       	mul	r22, r19
    19ec:	aa 27       	eor	r26, r26
    19ee:	f0 0d       	add	r31, r0
    19f0:	b1 1d       	adc	r27, r1
    19f2:	aa 1f       	adc	r26, r26
    19f4:	64 9f       	mul	r22, r20
    19f6:	66 27       	eor	r22, r22
    19f8:	b0 0d       	add	r27, r0
    19fa:	a1 1d       	adc	r26, r1
    19fc:	66 1f       	adc	r22, r22
    19fe:	82 9f       	mul	r24, r18
    1a00:	22 27       	eor	r18, r18
    1a02:	b0 0d       	add	r27, r0
    1a04:	a1 1d       	adc	r26, r1
    1a06:	62 1f       	adc	r22, r18
    1a08:	73 9f       	mul	r23, r19
    1a0a:	b0 0d       	add	r27, r0
    1a0c:	a1 1d       	adc	r26, r1
    1a0e:	62 1f       	adc	r22, r18
    1a10:	83 9f       	mul	r24, r19
    1a12:	a0 0d       	add	r26, r0
    1a14:	61 1d       	adc	r22, r1
    1a16:	22 1f       	adc	r18, r18
    1a18:	74 9f       	mul	r23, r20
    1a1a:	33 27       	eor	r19, r19
    1a1c:	a0 0d       	add	r26, r0
    1a1e:	61 1d       	adc	r22, r1
    1a20:	23 1f       	adc	r18, r19
    1a22:	84 9f       	mul	r24, r20
    1a24:	60 0d       	add	r22, r0
    1a26:	21 1d       	adc	r18, r1
    1a28:	82 2f       	mov	r24, r18
    1a2a:	76 2f       	mov	r23, r22
    1a2c:	6a 2f       	mov	r22, r26
    1a2e:	11 24       	eor	r1, r1
    1a30:	9f 57       	subi	r25, 0x7F	; 127
    1a32:	50 40       	sbci	r21, 0x00	; 0
    1a34:	9a f0       	brmi	.+38     	; 0x1a5c <__mulsf3_pse+0x88>
    1a36:	f1 f0       	breq	.+60     	; 0x1a74 <__mulsf3_pse+0xa0>
    1a38:	88 23       	and	r24, r24
    1a3a:	4a f0       	brmi	.+18     	; 0x1a4e <__mulsf3_pse+0x7a>
    1a3c:	ee 0f       	add	r30, r30
    1a3e:	ff 1f       	adc	r31, r31
    1a40:	bb 1f       	adc	r27, r27
    1a42:	66 1f       	adc	r22, r22
    1a44:	77 1f       	adc	r23, r23
    1a46:	88 1f       	adc	r24, r24
    1a48:	91 50       	subi	r25, 0x01	; 1
    1a4a:	50 40       	sbci	r21, 0x00	; 0
    1a4c:	a9 f7       	brne	.-22     	; 0x1a38 <__mulsf3_pse+0x64>
    1a4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a50:	51 05       	cpc	r21, r1
    1a52:	80 f0       	brcs	.+32     	; 0x1a74 <__mulsf3_pse+0xa0>
    1a54:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__fp_inf>
    1a58:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__fp_szero>
    1a5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a5e:	e4 f3       	brlt	.-8      	; 0x1a58 <__mulsf3_pse+0x84>
    1a60:	98 3e       	cpi	r25, 0xE8	; 232
    1a62:	d4 f3       	brlt	.-12     	; 0x1a58 <__mulsf3_pse+0x84>
    1a64:	86 95       	lsr	r24
    1a66:	77 95       	ror	r23
    1a68:	67 95       	ror	r22
    1a6a:	b7 95       	ror	r27
    1a6c:	f7 95       	ror	r31
    1a6e:	e7 95       	ror	r30
    1a70:	9f 5f       	subi	r25, 0xFF	; 255
    1a72:	c1 f7       	brne	.-16     	; 0x1a64 <__mulsf3_pse+0x90>
    1a74:	fe 2b       	or	r31, r30
    1a76:	88 0f       	add	r24, r24
    1a78:	91 1d       	adc	r25, r1
    1a7a:	96 95       	lsr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	97 f9       	bld	r25, 7
    1a80:	08 95       	ret

00001a82 <sin>:
    1a82:	9f 93       	push	r25
    1a84:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fp_rempio2>
    1a88:	0f 90       	pop	r0
    1a8a:	07 fc       	sbrc	r0, 7
    1a8c:	ee 5f       	subi	r30, 0xFE	; 254
    1a8e:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_sinus>
    1a92:	19 f4       	brne	.+6      	; 0x1a9a <sin+0x18>
    1a94:	16 f4       	brtc	.+4      	; 0x1a9a <sin+0x18>
    1a96:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__fp_nan>
    1a9a:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__fp_mpack>

00001a9e <sqrt>:
    1a9e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__fp_splitA>
    1aa2:	b8 f3       	brcs	.-18     	; 0x1a92 <sin+0x10>
    1aa4:	99 23       	and	r25, r25
    1aa6:	c9 f3       	breq	.-14     	; 0x1a9a <sin+0x18>
    1aa8:	b6 f3       	brts	.-20     	; 0x1a96 <sin+0x14>
    1aaa:	9f 57       	subi	r25, 0x7F	; 127
    1aac:	55 0b       	sbc	r21, r21
    1aae:	87 ff       	sbrs	r24, 7
    1ab0:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__fp_norm2>
    1ab4:	00 24       	eor	r0, r0
    1ab6:	a0 e6       	ldi	r26, 0x60	; 96
    1ab8:	40 ea       	ldi	r20, 0xA0	; 160
    1aba:	90 01       	movw	r18, r0
    1abc:	80 58       	subi	r24, 0x80	; 128
    1abe:	56 95       	lsr	r21
    1ac0:	97 95       	ror	r25
    1ac2:	28 f4       	brcc	.+10     	; 0x1ace <sqrt+0x30>
    1ac4:	80 5c       	subi	r24, 0xC0	; 192
    1ac6:	66 0f       	add	r22, r22
    1ac8:	77 1f       	adc	r23, r23
    1aca:	88 1f       	adc	r24, r24
    1acc:	20 f0       	brcs	.+8      	; 0x1ad6 <sqrt+0x38>
    1ace:	26 17       	cp	r18, r22
    1ad0:	37 07       	cpc	r19, r23
    1ad2:	48 07       	cpc	r20, r24
    1ad4:	30 f4       	brcc	.+12     	; 0x1ae2 <sqrt+0x44>
    1ad6:	62 1b       	sub	r22, r18
    1ad8:	73 0b       	sbc	r23, r19
    1ada:	84 0b       	sbc	r24, r20
    1adc:	20 29       	or	r18, r0
    1ade:	31 29       	or	r19, r1
    1ae0:	4a 2b       	or	r20, r26
    1ae2:	a6 95       	lsr	r26
    1ae4:	17 94       	ror	r1
    1ae6:	07 94       	ror	r0
    1ae8:	20 25       	eor	r18, r0
    1aea:	31 25       	eor	r19, r1
    1aec:	4a 27       	eor	r20, r26
    1aee:	58 f7       	brcc	.-42     	; 0x1ac6 <sqrt+0x28>
    1af0:	66 0f       	add	r22, r22
    1af2:	77 1f       	adc	r23, r23
    1af4:	88 1f       	adc	r24, r24
    1af6:	20 f0       	brcs	.+8      	; 0x1b00 <sqrt+0x62>
    1af8:	26 17       	cp	r18, r22
    1afa:	37 07       	cpc	r19, r23
    1afc:	48 07       	cpc	r20, r24
    1afe:	30 f4       	brcc	.+12     	; 0x1b0c <sqrt+0x6e>
    1b00:	62 0b       	sbc	r22, r18
    1b02:	73 0b       	sbc	r23, r19
    1b04:	84 0b       	sbc	r24, r20
    1b06:	20 0d       	add	r18, r0
    1b08:	31 1d       	adc	r19, r1
    1b0a:	41 1d       	adc	r20, r1
    1b0c:	a0 95       	com	r26
    1b0e:	81 f7       	brne	.-32     	; 0x1af0 <sqrt+0x52>
    1b10:	b9 01       	movw	r22, r18
    1b12:	84 2f       	mov	r24, r20
    1b14:	91 58       	subi	r25, 0x81	; 129
    1b16:	88 0f       	add	r24, r24
    1b18:	96 95       	lsr	r25
    1b1a:	87 95       	ror	r24
    1b1c:	08 95       	ret

00001b1e <square>:
    1b1e:	9b 01       	movw	r18, r22
    1b20:	ac 01       	movw	r20, r24
    1b22:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__mulsf3>

00001b26 <__divsf3>:
    1b26:	0e 94 44 0b 	call	0x1688	; 0x1688 <__divsf3x>
    1b2a:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__fp_round>

00001b2e <__fp_mpack>:
    1b2e:	9f 3f       	cpi	r25, 0xFF	; 255
    1b30:	31 f0       	breq	.+12     	; 0x1b3e <__fp_mpack_finite+0xc>

00001b32 <__fp_mpack_finite>:
    1b32:	91 50       	subi	r25, 0x01	; 1
    1b34:	20 f4       	brcc	.+8      	; 0x1b3e <__fp_mpack_finite+0xc>
    1b36:	87 95       	ror	r24
    1b38:	77 95       	ror	r23
    1b3a:	67 95       	ror	r22
    1b3c:	b7 95       	ror	r27
    1b3e:	88 0f       	add	r24, r24
    1b40:	91 1d       	adc	r25, r1
    1b42:	96 95       	lsr	r25
    1b44:	87 95       	ror	r24
    1b46:	97 f9       	bld	r25, 7
    1b48:	08 95       	ret

00001b4a <__fp_norm2>:
    1b4a:	91 50       	subi	r25, 0x01	; 1
    1b4c:	50 40       	sbci	r21, 0x00	; 0
    1b4e:	66 0f       	add	r22, r22
    1b50:	77 1f       	adc	r23, r23
    1b52:	88 1f       	adc	r24, r24
    1b54:	d2 f7       	brpl	.-12     	; 0x1b4a <__fp_norm2>
    1b56:	08 95       	ret

00001b58 <__fp_powsodd>:
    1b58:	9f 93       	push	r25
    1b5a:	8f 93       	push	r24
    1b5c:	7f 93       	push	r23
    1b5e:	6f 93       	push	r22
    1b60:	ff 93       	push	r31
    1b62:	ef 93       	push	r30
    1b64:	9b 01       	movw	r18, r22
    1b66:	ac 01       	movw	r20, r24
    1b68:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__mulsf3>
    1b6c:	ef 91       	pop	r30
    1b6e:	ff 91       	pop	r31
    1b70:	0e 94 1e 0c 	call	0x183c	; 0x183c <__fp_powser>
    1b74:	2f 91       	pop	r18
    1b76:	3f 91       	pop	r19
    1b78:	4f 91       	pop	r20
    1b7a:	5f 91       	pop	r21
    1b7c:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__mulsf3>

00001b80 <__itoa_ncheck>:
    1b80:	bb 27       	eor	r27, r27
    1b82:	4a 30       	cpi	r20, 0x0A	; 10
    1b84:	31 f4       	brne	.+12     	; 0x1b92 <__itoa_ncheck+0x12>
    1b86:	99 23       	and	r25, r25
    1b88:	22 f4       	brpl	.+8      	; 0x1b92 <__itoa_ncheck+0x12>
    1b8a:	bd e2       	ldi	r27, 0x2D	; 45
    1b8c:	90 95       	com	r25
    1b8e:	81 95       	neg	r24
    1b90:	9f 4f       	sbci	r25, 0xFF	; 255
    1b92:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__utoa_common>

00001b96 <__utoa_ncheck>:
    1b96:	bb 27       	eor	r27, r27

00001b98 <__utoa_common>:
    1b98:	fb 01       	movw	r30, r22
    1b9a:	55 27       	eor	r21, r21
    1b9c:	aa 27       	eor	r26, r26
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	aa 1f       	adc	r26, r26
    1ba4:	a4 17       	cp	r26, r20
    1ba6:	10 f0       	brcs	.+4      	; 0x1bac <__utoa_common+0x14>
    1ba8:	a4 1b       	sub	r26, r20
    1baa:	83 95       	inc	r24
    1bac:	50 51       	subi	r21, 0x10	; 16
    1bae:	b9 f7       	brne	.-18     	; 0x1b9e <__utoa_common+0x6>
    1bb0:	a0 5d       	subi	r26, 0xD0	; 208
    1bb2:	aa 33       	cpi	r26, 0x3A	; 58
    1bb4:	08 f0       	brcs	.+2      	; 0x1bb8 <__utoa_common+0x20>
    1bb6:	a9 5d       	subi	r26, 0xD9	; 217
    1bb8:	a1 93       	st	Z+, r26
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	79 f7       	brne	.-34     	; 0x1b9c <__utoa_common+0x4>
    1bbe:	b1 11       	cpse	r27, r1
    1bc0:	b1 93       	st	Z+, r27
    1bc2:	11 92       	st	Z+, r1
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <strrev>

00001bca <strrev>:
    1bca:	dc 01       	movw	r26, r24
    1bcc:	fc 01       	movw	r30, r24
    1bce:	67 2f       	mov	r22, r23
    1bd0:	71 91       	ld	r23, Z+
    1bd2:	77 23       	and	r23, r23
    1bd4:	e1 f7       	brne	.-8      	; 0x1bce <strrev+0x4>
    1bd6:	32 97       	sbiw	r30, 0x02	; 2
    1bd8:	04 c0       	rjmp	.+8      	; 0x1be2 <strrev+0x18>
    1bda:	7c 91       	ld	r23, X
    1bdc:	6d 93       	st	X+, r22
    1bde:	70 83       	st	Z, r23
    1be0:	62 91       	ld	r22, -Z
    1be2:	ae 17       	cp	r26, r30
    1be4:	bf 07       	cpc	r27, r31
    1be6:	c8 f3       	brcs	.-14     	; 0x1bda <strrev+0x10>
    1be8:	08 95       	ret

00001bea <_exit>:
    1bea:	f8 94       	cli

00001bec <__stop_program>:
    1bec:	ff cf       	rjmp	.-2      	; 0x1bec <__stop_program>
