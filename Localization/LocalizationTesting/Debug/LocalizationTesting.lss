
LocalizationTesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001b3e  00001bd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080010c  0080010c  00001bde  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001bde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002355  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000927  00000000  00000000  000041d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c7e  00000000  00000000  00004afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000608  00000000  00000000  0000577c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b7  00000000  00000000  00005d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c3a  00000000  00000000  0000663b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00009275  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__ctors_end>
       4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       8:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      10:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      14:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      18:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      1c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      20:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      24:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      28:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__vector_10>
      2c:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__vector_11>
      30:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      34:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      38:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      3c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      40:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      44:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      48:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      4c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      50:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      54:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      58:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      5c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      60:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      64:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      68:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      6c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      70:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      74:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      78:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      7c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      80:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      84:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      88:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      8c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      90:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      94:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      98:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      9c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      a0:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      a4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      a8:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__trampolines_end>:
      f8:	0a 00       	.word	0x000a	; ????

000000fa <__c.2015>:
      fa:	20 00                                                .

000000fc <descriptor_list>:
      fc:	00 01 00 00 93 01 12 00 02 00 00 50 01 43 00 03     ...........P.C..
     10c:	00 00 4c 01 04 01 03 09 04 38 01 12 02 03 09 04     ..L......8......
     11c:	30 01 06 03 03 09 04 26 01 08                       0......&..

00000126 <string3>:
     126:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000130 <string2>:
     130:	06 03 4d 00 32 00 00 00                             ..M.2...

00000138 <string1>:
     138:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     148:	65 00 00 00                                         e...

0000014c <string0>:
     14c:	04 03 09 04                                         ....

00000150 <config1_descriptor>:
     150:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     160:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     170:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     180:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     190:	40 00 00                                            @..

00000193 <device_descriptor>:
     193:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1a3:	03 01                                               ..

000001a5 <endpoint_config_table>:
     1a5:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001b0 <__ctors_end>:
     1b0:	11 24       	eor	r1, r1
     1b2:	1f be       	out	0x3f, r1	; 63
     1b4:	cf ef       	ldi	r28, 0xFF	; 255
     1b6:	da e0       	ldi	r29, 0x0A	; 10
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	cd bf       	out	0x3d, r28	; 61

000001bc <__do_copy_data>:
     1bc:	11 e0       	ldi	r17, 0x01	; 1
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	ee e3       	ldi	r30, 0x3E	; 62
     1c4:	fb e1       	ldi	r31, 0x1B	; 27
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <__do_copy_data+0x10>
     1c8:	05 90       	lpm	r0, Z+
     1ca:	0d 92       	st	X+, r0
     1cc:	ac 30       	cpi	r26, 0x0C	; 12
     1ce:	b1 07       	cpc	r27, r17
     1d0:	d9 f7       	brne	.-10     	; 0x1c8 <__do_copy_data+0xc>

000001d2 <__do_clear_bss>:
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	ac e0       	ldi	r26, 0x0C	; 12
     1d6:	b1 e0       	ldi	r27, 0x01	; 1
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <.do_clear_bss_start>

000001da <.do_clear_bss_loop>:
     1da:	1d 92       	st	X+, r1

000001dc <.do_clear_bss_start>:
     1dc:	a8 32       	cpi	r26, 0x28	; 40
     1de:	b2 07       	cpc	r27, r18
     1e0:	e1 f7       	brne	.-8      	; 0x1da <.do_clear_bss_loop>
     1e2:	0e 94 18 05 	call	0xa30	; 0xa30 <main>
     1e6:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <_exit>

000001ea <__bad_interrupt>:
     1ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ee <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     1ee:	83 30       	cpi	r24, 0x03	; 3
     1f0:	91 05       	cpc	r25, r1
     1f2:	01 f1       	breq	.+64     	; 0x234 <distIndex+0x46>
     1f4:	34 f4       	brge	.+12     	; 0x202 <distIndex+0x14>
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	91 05       	cpc	r25, r1
     1fa:	51 f0       	breq	.+20     	; 0x210 <distIndex+0x22>
     1fc:	02 97       	sbiw	r24, 0x02	; 2
     1fe:	89 f0       	breq	.+34     	; 0x222 <distIndex+0x34>
     200:	42 c0       	rjmp	.+132    	; 0x286 <distIndex+0x98>
     202:	85 30       	cpi	r24, 0x05	; 5
     204:	91 05       	cpc	r25, r1
     206:	51 f1       	breq	.+84     	; 0x25c <distIndex+0x6e>
     208:	f4 f0       	brlt	.+60     	; 0x246 <distIndex+0x58>
     20a:	06 97       	sbiw	r24, 0x06	; 6
     20c:	91 f1       	breq	.+100    	; 0x272 <distIndex+0x84>
     20e:	3b c0       	rjmp	.+118    	; 0x286 <distIndex+0x98>
	{
		case 1 : 
			pointsUsed[0] = 0;
     210:	ec e0       	ldi	r30, 0x0C	; 12
     212:	f1 e0       	ldi	r31, 0x01	; 1
     214:	11 82       	std	Z+1, r1	; 0x01
     216:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	93 83       	std	Z+3, r25	; 0x03
     21e:	82 83       	std	Z+2, r24	; 0x02
			break;
     220:	32 c0       	rjmp	.+100    	; 0x286 <distIndex+0x98>
			
		case 2 : 
			pointsUsed[0] = 0;
     222:	ec e0       	ldi	r30, 0x0C	; 12
     224:	f1 e0       	ldi	r31, 0x01	; 1
     226:	11 82       	std	Z+1, r1	; 0x01
     228:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	93 83       	std	Z+3, r25	; 0x03
     230:	82 83       	std	Z+2, r24	; 0x02
			break;
     232:	29 c0       	rjmp	.+82     	; 0x286 <distIndex+0x98>
			
		case 3 : 
			pointsUsed[0] = 0;
     234:	ec e0       	ldi	r30, 0x0C	; 12
     236:	f1 e0       	ldi	r31, 0x01	; 1
     238:	11 82       	std	Z+1, r1	; 0x01
     23a:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     23c:	83 e0       	ldi	r24, 0x03	; 3
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	93 83       	std	Z+3, r25	; 0x03
     242:	82 83       	std	Z+2, r24	; 0x02
			break;
     244:	20 c0       	rjmp	.+64     	; 0x286 <distIndex+0x98>
			
		case 4 : 
			pointsUsed[0] = 1;
     246:	ec e0       	ldi	r30, 0x0C	; 12
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	91 83       	std	Z+1, r25	; 0x01
     250:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	93 83       	std	Z+3, r25	; 0x03
     258:	82 83       	std	Z+2, r24	; 0x02
			break;
     25a:	15 c0       	rjmp	.+42     	; 0x286 <distIndex+0x98>
			
		case 5 : 
			pointsUsed[0] = 1;
     25c:	ec e0       	ldi	r30, 0x0C	; 12
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	91 83       	std	Z+1, r25	; 0x01
     266:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	93 83       	std	Z+3, r25	; 0x03
     26e:	82 83       	std	Z+2, r24	; 0x02
			break;
     270:	0a c0       	rjmp	.+20     	; 0x286 <distIndex+0x98>
			
		case 6 :
			pointsUsed[0] = 2;
     272:	ec e0       	ldi	r30, 0x0C	; 12
     274:	f1 e0       	ldi	r31, 0x01	; 1
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     27e:	83 e0       	ldi	r24, 0x03	; 3
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	93 83       	std	Z+3, r25	; 0x03
     284:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     286:	8c e0       	ldi	r24, 0x0C	; 12
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	08 95       	ret

0000028c <orientationCalculationFour>:


void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom)
{
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
     29a:	7a 01       	movw	r14, r20
     29c:	89 01       	movw	r16, r18
	//Find index of shortest length
	int indexMin = 0;
	int minVal = distVect[0];
     29e:	e6 2f       	mov	r30, r22
     2a0:	f7 2f       	mov	r31, r23
     2a2:	21 91       	ld	r18, Z+
     2a4:	31 91       	ld	r19, Z+
	for (int i = 0; i < 6; i++){
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	70 e0       	ldi	r23, 0x00	; 0


void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	08 c0       	rjmp	.+16     	; 0x2c0 <orientationCalculationFour+0x34>
	int minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     2b0:	a1 91       	ld	r26, Z+
     2b2:	b1 91       	ld	r27, Z+
     2b4:	a2 17       	cp	r26, r18
     2b6:	b3 07       	cpc	r27, r19
     2b8:	1c f4       	brge	.+6      	; 0x2c0 <orientationCalculationFour+0x34>
     2ba:	9d 01       	movw	r18, r26
void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	int minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     2bc:	86 2f       	mov	r24, r22
     2be:	97 2f       	mov	r25, r23
     2c0:	6f 5f       	subi	r22, 0xFF	; 255
     2c2:	7f 4f       	sbci	r23, 0xFF	; 255
     2c4:	66 30       	cpi	r22, 0x06	; 6
     2c6:	71 05       	cpc	r23, r1
     2c8:	99 f7       	brne	.-26     	; 0x2b0 <orientationCalculationFour+0x24>
	}
	
	//Find points used by shortest length
	
	int* pointsShort; 
	pointsShort = distIndex(indexMin);
     2ca:	0e 94 f7 00 	call	0x1ee	; 0x1ee <distIndex>
	
	if (pointsShort[0] == pointsLong[0]){
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 81       	ld	r18, Z
     2d2:	31 81       	ldd	r19, Z+1	; 0x01
     2d4:	48 81       	ld	r20, Y
     2d6:	59 81       	ldd	r21, Y+1	; 0x01
     2d8:	24 17       	cp	r18, r20
     2da:	35 07       	cpc	r19, r21
     2dc:	49 f4       	brne	.+18     	; 0x2f0 <orientationCalculationFour+0x64>
		*top = pointsLong[0];
     2de:	f7 01       	movw	r30, r14
     2e0:	31 83       	std	Z+1, r19	; 0x01
     2e2:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     2e4:	8a 81       	ldd	r24, Y+2	; 0x02
     2e6:	9b 81       	ldd	r25, Y+3	; 0x03
     2e8:	f8 01       	movw	r30, r16
     2ea:	91 83       	std	Z+1, r25	; 0x01
     2ec:	80 83       	st	Z, r24
     2ee:	25 c0       	rjmp	.+74     	; 0x33a <orientationCalculationFour+0xae>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     2f0:	6a 81       	ldd	r22, Y+2	; 0x02
     2f2:	7b 81       	ldd	r23, Y+3	; 0x03
     2f4:	26 17       	cp	r18, r22
     2f6:	37 07       	cpc	r19, r23
     2f8:	49 f4       	brne	.+18     	; 0x30c <orientationCalculationFour+0x80>
			*top = pointsLong[1];
     2fa:	f7 01       	movw	r30, r14
     2fc:	31 83       	std	Z+1, r19	; 0x01
     2fe:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     300:	88 81       	ld	r24, Y
     302:	99 81       	ldd	r25, Y+1	; 0x01
     304:	f8 01       	movw	r30, r16
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	80 83       	st	Z, r24
     30a:	17 c0       	rjmp	.+46     	; 0x33a <orientationCalculationFour+0xae>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     30c:	fc 01       	movw	r30, r24
     30e:	82 81       	ldd	r24, Z+2	; 0x02
     310:	93 81       	ldd	r25, Z+3	; 0x03
     312:	48 17       	cp	r20, r24
     314:	59 07       	cpc	r21, r25
     316:	49 f4       	brne	.+18     	; 0x32a <orientationCalculationFour+0x9e>
				*top = pointsLong[0];
     318:	f7 01       	movw	r30, r14
     31a:	51 83       	std	Z+1, r21	; 0x01
     31c:	40 83       	st	Z, r20
				*bottom = pointsLong[1];
     31e:	8a 81       	ldd	r24, Y+2	; 0x02
     320:	9b 81       	ldd	r25, Y+3	; 0x03
     322:	f8 01       	movw	r30, r16
     324:	91 83       	std	Z+1, r25	; 0x01
     326:	80 83       	st	Z, r24
     328:	08 c0       	rjmp	.+16     	; 0x33a <orientationCalculationFour+0xae>
			} else {
				*top = pointsLong[1];
     32a:	f7 01       	movw	r30, r14
     32c:	71 83       	std	Z+1, r23	; 0x01
     32e:	60 83       	st	Z, r22
				*bottom = pointsLong[0];
     330:	88 81       	ld	r24, Y
     332:	99 81       	ldd	r25, Y+1	; 0x01
     334:	f8 01       	movw	r30, r16
     336:	91 83       	std	Z+1, r25	; 0x01
     338:	80 83       	st	Z, r24
			}
		}
	}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	08 95       	ret

00000348 <fourPointCalc>:
	
}


int* fourPointCalc(int pvect[4][2])
{
     348:	2f 92       	push	r2
     34a:	3f 92       	push	r3
     34c:	4f 92       	push	r4
     34e:	5f 92       	push	r5
     350:	6f 92       	push	r6
     352:	7f 92       	push	r7
     354:	8f 92       	push	r8
     356:	9f 92       	push	r9
     358:	af 92       	push	r10
     35a:	bf 92       	push	r11
     35c:	cf 92       	push	r12
     35e:	df 92       	push	r13
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	a8 97       	sbiw	r28, 0x28	; 40
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	de bf       	out	0x3e, r29	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	1c 01       	movw	r2, r24
	static int centerFour[2];
	
	int dist01 = sqrt((pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     37e:	dc 01       	movw	r26, r24
     380:	14 96       	adiw	r26, 0x04	; 4
     382:	0d 90       	ld	r0, X+
     384:	bc 91       	ld	r27, X
     386:	a0 2d       	mov	r26, r0
     388:	ba 8b       	std	Y+18, r27	; 0x12
     38a:	a9 8b       	std	Y+17, r26	; 0x11
     38c:	fc 01       	movw	r30, r24
     38e:	e0 80       	ld	r14, Z
     390:	f1 80       	ldd	r15, Z+1	; 0x01
     392:	cd 01       	movw	r24, r26
     394:	8e 19       	sub	r24, r14
     396:	9f 09       	sbc	r25, r15
     398:	26 81       	ldd	r18, Z+6	; 0x06
     39a:	37 81       	ldd	r19, Z+7	; 0x07
     39c:	3e 8b       	std	Y+22, r19	; 0x16
     39e:	2d 8b       	std	Y+21, r18	; 0x15
     3a0:	02 81       	ldd	r16, Z+2	; 0x02
     3a2:	13 81       	ldd	r17, Z+3	; 0x03
     3a4:	20 1b       	sub	r18, r16
     3a6:	31 0b       	sbc	r19, r17
     3a8:	88 9f       	mul	r24, r24
     3aa:	40 01       	movw	r8, r0
     3ac:	89 9f       	mul	r24, r25
     3ae:	90 0c       	add	r9, r0
     3b0:	90 0c       	add	r9, r0
     3b2:	11 24       	eor	r1, r1
     3b4:	22 9f       	mul	r18, r18
     3b6:	c0 01       	movw	r24, r0
     3b8:	23 9f       	mul	r18, r19
     3ba:	90 0d       	add	r25, r0
     3bc:	90 0d       	add	r25, r0
     3be:	11 24       	eor	r1, r1
     3c0:	88 0e       	add	r8, r24
     3c2:	99 1e       	adc	r9, r25
     3c4:	09 2c       	mov	r0, r9
     3c6:	00 0c       	add	r0, r0
     3c8:	aa 08       	sbc	r10, r10
     3ca:	bb 08       	sbc	r11, r11
     3cc:	c5 01       	movw	r24, r10
     3ce:	b4 01       	movw	r22, r8
     3d0:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     3d4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <sqrt>
     3d8:	6d 8f       	std	Y+29, r22	; 0x1d
     3da:	7e 8f       	std	Y+30, r23	; 0x1e
     3dc:	8f 8f       	std	Y+31, r24	; 0x1f
     3de:	98 a3       	std	Y+32, r25	; 0x20
	int dist02 = sqrt((pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     3e0:	d1 01       	movw	r26, r2
     3e2:	18 96       	adiw	r26, 0x08	; 8
     3e4:	ad 90       	ld	r10, X+
     3e6:	bc 90       	ld	r11, X
     3e8:	19 97       	sbiw	r26, 0x09	; 9
     3ea:	c5 01       	movw	r24, r10
     3ec:	8e 19       	sub	r24, r14
     3ee:	9f 09       	sbc	r25, r15
     3f0:	1a 96       	adiw	r26, 0x0a	; 10
     3f2:	6d 90       	ld	r6, X+
     3f4:	7c 90       	ld	r7, X
     3f6:	1b 97       	sbiw	r26, 0x0b	; 11
     3f8:	93 01       	movw	r18, r6
     3fa:	20 1b       	sub	r18, r16
     3fc:	31 0b       	sbc	r19, r17
     3fe:	88 9f       	mul	r24, r24
     400:	40 01       	movw	r8, r0
     402:	89 9f       	mul	r24, r25
     404:	90 0c       	add	r9, r0
     406:	90 0c       	add	r9, r0
     408:	11 24       	eor	r1, r1
     40a:	22 9f       	mul	r18, r18
     40c:	c0 01       	movw	r24, r0
     40e:	23 9f       	mul	r18, r19
     410:	90 0d       	add	r25, r0
     412:	90 0d       	add	r25, r0
     414:	11 24       	eor	r1, r1
     416:	88 0e       	add	r8, r24
     418:	99 1e       	adc	r9, r25
     41a:	94 01       	movw	r18, r8
     41c:	99 0c       	add	r9, r9
     41e:	44 0b       	sbc	r20, r20
     420:	55 0b       	sbc	r21, r21
     422:	29 8f       	std	Y+25, r18	; 0x19
     424:	3a 8f       	std	Y+26, r19	; 0x1a
     426:	4b 8f       	std	Y+27, r20	; 0x1b
     428:	5c 8f       	std	Y+28, r21	; 0x1c
     42a:	69 8d       	ldd	r22, Y+25	; 0x19
     42c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     42e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     430:	9c 8d       	ldd	r25, Y+28	; 0x1c
     432:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     436:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <sqrt>
     43a:	69 8f       	std	Y+25, r22	; 0x19
     43c:	7a 8f       	std	Y+26, r23	; 0x1a
     43e:	8b 8f       	std	Y+27, r24	; 0x1b
     440:	9c 8f       	std	Y+28, r25	; 0x1c
	int dist03 = sqrt((pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     442:	d1 01       	movw	r26, r2
     444:	1c 96       	adiw	r26, 0x0c	; 12
     446:	8d 90       	ld	r8, X+
     448:	9c 90       	ld	r9, X
     44a:	1d 97       	sbiw	r26, 0x0d	; 13
     44c:	c4 01       	movw	r24, r8
     44e:	8e 19       	sub	r24, r14
     450:	9f 09       	sbc	r25, r15
     452:	1e 96       	adiw	r26, 0x0e	; 14
     454:	4d 90       	ld	r4, X+
     456:	5c 90       	ld	r5, X
     458:	1f 97       	sbiw	r26, 0x0f	; 15
     45a:	92 01       	movw	r18, r4
     45c:	20 1b       	sub	r18, r16
     45e:	31 0b       	sbc	r19, r17
     460:	88 9f       	mul	r24, r24
     462:	60 01       	movw	r12, r0
     464:	89 9f       	mul	r24, r25
     466:	d0 0c       	add	r13, r0
     468:	d0 0c       	add	r13, r0
     46a:	11 24       	eor	r1, r1
     46c:	22 9f       	mul	r18, r18
     46e:	c0 01       	movw	r24, r0
     470:	23 9f       	mul	r18, r19
     472:	90 0d       	add	r25, r0
     474:	90 0d       	add	r25, r0
     476:	11 24       	eor	r1, r1
     478:	c8 0e       	add	r12, r24
     47a:	d9 1e       	adc	r13, r25
     47c:	0d 2c       	mov	r0, r13
     47e:	00 0c       	add	r0, r0
     480:	ee 08       	sbc	r14, r14
     482:	ff 08       	sbc	r15, r15
     484:	c7 01       	movw	r24, r14
     486:	b6 01       	movw	r22, r12
     488:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     48c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <sqrt>
     490:	69 a3       	std	Y+33, r22	; 0x21
     492:	7a a3       	std	Y+34, r23	; 0x22
     494:	8b a3       	std	Y+35, r24	; 0x23
     496:	9c a3       	std	Y+36, r25	; 0x24
	int dist12 = sqrt((pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     498:	c5 01       	movw	r24, r10
     49a:	e9 89       	ldd	r30, Y+17	; 0x11
     49c:	fa 89       	ldd	r31, Y+18	; 0x12
     49e:	8e 1b       	sub	r24, r30
     4a0:	9f 0b       	sbc	r25, r31
     4a2:	93 01       	movw	r18, r6
     4a4:	4d 89       	ldd	r20, Y+21	; 0x15
     4a6:	5e 89       	ldd	r21, Y+22	; 0x16
     4a8:	24 1b       	sub	r18, r20
     4aa:	35 0b       	sbc	r19, r21
     4ac:	88 9f       	mul	r24, r24
     4ae:	60 01       	movw	r12, r0
     4b0:	89 9f       	mul	r24, r25
     4b2:	d0 0c       	add	r13, r0
     4b4:	d0 0c       	add	r13, r0
     4b6:	11 24       	eor	r1, r1
     4b8:	22 9f       	mul	r18, r18
     4ba:	c0 01       	movw	r24, r0
     4bc:	23 9f       	mul	r18, r19
     4be:	90 0d       	add	r25, r0
     4c0:	90 0d       	add	r25, r0
     4c2:	11 24       	eor	r1, r1
     4c4:	c8 0e       	add	r12, r24
     4c6:	d9 1e       	adc	r13, r25
     4c8:	0d 2c       	mov	r0, r13
     4ca:	00 0c       	add	r0, r0
     4cc:	ee 08       	sbc	r14, r14
     4ce:	ff 08       	sbc	r15, r15
     4d0:	c7 01       	movw	r24, r14
     4d2:	b6 01       	movw	r22, r12
     4d4:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     4d8:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <sqrt>
     4dc:	6d a3       	std	Y+37, r22	; 0x25
     4de:	7e a3       	std	Y+38, r23	; 0x26
     4e0:	8f a3       	std	Y+39, r24	; 0x27
     4e2:	98 a7       	std	Y+40, r25	; 0x28
	int dist13 = sqrt((pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     4e4:	c4 01       	movw	r24, r8
     4e6:	a9 89       	ldd	r26, Y+17	; 0x11
     4e8:	ba 89       	ldd	r27, Y+18	; 0x12
     4ea:	8a 1b       	sub	r24, r26
     4ec:	9b 0b       	sbc	r25, r27
     4ee:	92 01       	movw	r18, r4
     4f0:	ed 89       	ldd	r30, Y+21	; 0x15
     4f2:	fe 89       	ldd	r31, Y+22	; 0x16
     4f4:	2e 1b       	sub	r18, r30
     4f6:	3f 0b       	sbc	r19, r31
     4f8:	88 9f       	mul	r24, r24
     4fa:	60 01       	movw	r12, r0
     4fc:	89 9f       	mul	r24, r25
     4fe:	d0 0c       	add	r13, r0
     500:	d0 0c       	add	r13, r0
     502:	11 24       	eor	r1, r1
     504:	22 9f       	mul	r18, r18
     506:	c0 01       	movw	r24, r0
     508:	23 9f       	mul	r18, r19
     50a:	90 0d       	add	r25, r0
     50c:	90 0d       	add	r25, r0
     50e:	11 24       	eor	r1, r1
     510:	c8 0e       	add	r12, r24
     512:	d9 1e       	adc	r13, r25
     514:	0d 2c       	mov	r0, r13
     516:	00 0c       	add	r0, r0
     518:	ee 08       	sbc	r14, r14
     51a:	ff 08       	sbc	r15, r15
     51c:	c7 01       	movw	r24, r14
     51e:	b6 01       	movw	r22, r12
     520:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     524:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <sqrt>
     528:	69 8b       	std	Y+17, r22	; 0x11
     52a:	7a 8b       	std	Y+18, r23	; 0x12
     52c:	8b 8b       	std	Y+19, r24	; 0x13
     52e:	9c 8b       	std	Y+20, r25	; 0x14
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     530:	94 01       	movw	r18, r8
     532:	2a 19       	sub	r18, r10
     534:	3b 09       	sbc	r19, r11
     536:	c2 01       	movw	r24, r4
     538:	86 19       	sub	r24, r6
     53a:	97 09       	sbc	r25, r7
     53c:	22 9f       	mul	r18, r18
     53e:	60 01       	movw	r12, r0
     540:	23 9f       	mul	r18, r19
     542:	d0 0c       	add	r13, r0
     544:	d0 0c       	add	r13, r0
     546:	11 24       	eor	r1, r1
     548:	88 9f       	mul	r24, r24
     54a:	90 01       	movw	r18, r0
     54c:	89 9f       	mul	r24, r25
     54e:	30 0d       	add	r19, r0
     550:	30 0d       	add	r19, r0
     552:	11 24       	eor	r1, r1
     554:	c2 0e       	add	r12, r18
     556:	d3 1e       	adc	r13, r19
     558:	0d 2c       	mov	r0, r13
     55a:	00 0c       	add	r0, r0
     55c:	ee 08       	sbc	r14, r14
     55e:	ff 08       	sbc	r15, r15
     560:	c7 01       	movw	r24, r14
     562:	b6 01       	movw	r22, r12
     564:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     568:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <sqrt>
     56c:	6b 01       	movw	r12, r22
     56e:	7c 01       	movw	r14, r24

int* fourPointCalc(int pvect[4][2])
{
	static int centerFour[2];
	
	int dist01 = sqrt((pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     570:	6d 8d       	ldd	r22, Y+29	; 0x1d
     572:	7e 8d       	ldd	r23, Y+30	; 0x1e
     574:	8f 8d       	ldd	r24, Y+31	; 0x1f
     576:	98 a1       	ldd	r25, Y+32	; 0x20
     578:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixsfsi>
     57c:	7a 83       	std	Y+2, r23	; 0x02
     57e:	69 83       	std	Y+1, r22	; 0x01
	int dist02 = sqrt((pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     580:	69 8d       	ldd	r22, Y+25	; 0x19
     582:	7a 8d       	ldd	r23, Y+26	; 0x1a
     584:	8b 8d       	ldd	r24, Y+27	; 0x1b
     586:	9c 8d       	ldd	r25, Y+28	; 0x1c
     588:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixsfsi>
     58c:	7c 83       	std	Y+4, r23	; 0x04
     58e:	6b 83       	std	Y+3, r22	; 0x03
	int dist03 = sqrt((pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     590:	69 a1       	ldd	r22, Y+33	; 0x21
     592:	7a a1       	ldd	r23, Y+34	; 0x22
     594:	8b a1       	ldd	r24, Y+35	; 0x23
     596:	9c a1       	ldd	r25, Y+36	; 0x24
     598:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixsfsi>
     59c:	7e 83       	std	Y+6, r23	; 0x06
     59e:	6d 83       	std	Y+5, r22	; 0x05
	int dist12 = sqrt((pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     5a0:	6d a1       	ldd	r22, Y+37	; 0x25
     5a2:	7e a1       	ldd	r23, Y+38	; 0x26
     5a4:	8f a1       	ldd	r24, Y+39	; 0x27
     5a6:	98 a5       	ldd	r25, Y+40	; 0x28
     5a8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixsfsi>
     5ac:	78 87       	std	Y+8, r23	; 0x08
     5ae:	6f 83       	std	Y+7, r22	; 0x07
	int dist13 = sqrt((pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     5b0:	69 89       	ldd	r22, Y+17	; 0x11
     5b2:	7a 89       	ldd	r23, Y+18	; 0x12
     5b4:	8b 89       	ldd	r24, Y+19	; 0x13
     5b6:	9c 89       	ldd	r25, Y+20	; 0x14
     5b8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixsfsi>
     5bc:	7a 87       	std	Y+10, r23	; 0x0a
     5be:	69 87       	std	Y+9, r22	; 0x09
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     5c0:	c7 01       	movw	r24, r14
     5c2:	b6 01       	movw	r22, r12
     5c4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixsfsi>
     5c8:	7c 87       	std	Y+12, r23	; 0x0c
     5ca:	6b 87       	std	Y+11, r22	; 0x0b
     5cc:	fe 01       	movw	r30, r28
     5ce:	31 96       	adiw	r30, 0x01	; 1
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
	int dist13 = sqrt((pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     5dc:	41 91       	ld	r20, Z+
     5de:	51 91       	ld	r21, Z+
     5e0:	64 17       	cp	r22, r20
     5e2:	75 07       	cpc	r23, r21
     5e4:	1c f4       	brge	.+6      	; 0x5ec <fourPointCalc+0x2a4>
			indexMax = i;
			maxVal = distVect[i];
     5e6:	ba 01       	movw	r22, r20
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     5e8:	82 2f       	mov	r24, r18
     5ea:	93 2f       	mov	r25, r19
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
     5ec:	2f 5f       	subi	r18, 0xFF	; 255
     5ee:	3f 4f       	sbci	r19, 0xFF	; 255
     5f0:	26 30       	cpi	r18, 0x06	; 6
     5f2:	31 05       	cpc	r19, r1
     5f4:	99 f7       	brne	.-26     	; 0x5dc <fourPointCalc+0x294>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLong; 
	pointsLong = distIndex(indexMax);
     5f6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <distIndex>
	int center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     5fa:	fc 01       	movw	r30, r24
     5fc:	a0 81       	ld	r26, Z
     5fe:	b1 81       	ldd	r27, Z+1	; 0x01
     600:	aa 0f       	add	r26, r26
     602:	bb 1f       	adc	r27, r27
     604:	aa 0f       	add	r26, r26
     606:	bb 1f       	adc	r27, r27
     608:	a2 0d       	add	r26, r2
     60a:	b3 1d       	adc	r27, r3
     60c:	22 81       	ldd	r18, Z+2	; 0x02
     60e:	33 81       	ldd	r19, Z+3	; 0x03
     610:	f9 01       	movw	r30, r18
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	e2 0d       	add	r30, r2
     61c:	f3 1d       	adc	r31, r3
     61e:	0d 91       	ld	r16, X+
     620:	1c 91       	ld	r17, X
     622:	11 97       	sbiw	r26, 0x01	; 1
     624:	20 81       	ld	r18, Z
     626:	31 81       	ldd	r19, Z+1	; 0x01
     628:	02 0f       	add	r16, r18
     62a:	13 1f       	adc	r17, r19
     62c:	11 23       	and	r17, r17
     62e:	14 f4       	brge	.+4      	; 0x634 <fourPointCalc+0x2ec>
     630:	0f 5f       	subi	r16, 0xFF	; 255
     632:	1f 4f       	sbci	r17, 0xFF	; 255
     634:	15 95       	asr	r17
     636:	07 95       	ror	r16
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     638:	12 96       	adiw	r26, 0x02	; 2
     63a:	ad 90       	ld	r10, X+
     63c:	bc 90       	ld	r11, X
     63e:	13 97       	sbiw	r26, 0x03	; 3
     640:	22 81       	ldd	r18, Z+2	; 0x02
     642:	33 81       	ldd	r19, Z+3	; 0x03
     644:	a2 0e       	add	r10, r18
     646:	b3 1e       	adc	r11, r19
     648:	bb 20       	and	r11, r11
     64a:	1c f4       	brge	.+6      	; 0x652 <fourPointCalc+0x30a>
     64c:	ff ef       	ldi	r31, 0xFF	; 255
     64e:	af 1a       	sub	r10, r31
     650:	bf 0a       	sbc	r11, r31
     652:	b5 94       	asr	r11
     654:	a7 94       	ror	r10
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     656:	9e 01       	movw	r18, r28
     658:	21 5f       	subi	r18, 0xF1	; 241
     65a:	3f 4f       	sbci	r19, 0xFF	; 255
     65c:	ae 01       	movw	r20, r28
     65e:	43 5f       	subi	r20, 0xF3	; 243
     660:	5f 4f       	sbci	r21, 0xFF	; 255
     662:	be 01       	movw	r22, r28
     664:	6f 5f       	subi	r22, 0xFF	; 255
     666:	7f 4f       	sbci	r23, 0xFF	; 255
     668:	0e 94 46 01 	call	0x28c	; 0x28c <orientationCalculationFour>
	
	int centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     66c:	ed 84       	ldd	r14, Y+13	; 0x0d
     66e:	fe 84       	ldd	r15, Y+14	; 0x0e
     670:	ee 0c       	add	r14, r14
     672:	ff 1c       	adc	r15, r15
     674:	ee 0c       	add	r14, r14
     676:	ff 1c       	adc	r15, r15
     678:	e2 0c       	add	r14, r2
     67a:	f3 1c       	adc	r15, r3
     67c:	8f 85       	ldd	r24, Y+15	; 0x0f
     67e:	98 89       	ldd	r25, Y+16	; 0x10
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	28 0e       	add	r2, r24
     68a:	39 1e       	adc	r3, r25
     68c:	d7 01       	movw	r26, r14
     68e:	6d 91       	ld	r22, X+
     690:	7c 91       	ld	r23, X
     692:	f1 01       	movw	r30, r2
     694:	80 81       	ld	r24, Z
     696:	91 81       	ldd	r25, Z+1	; 0x01
     698:	68 1b       	sub	r22, r24
     69a:	79 0b       	sbc	r23, r25
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
	
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
     69c:	07 2e       	mov	r0, r23
     69e:	00 0c       	add	r0, r0
     6a0:	88 0b       	sbc	r24, r24
     6a2:	99 0b       	sbc	r25, r25
     6a4:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     6a8:	2b 01       	movw	r4, r22
     6aa:	3c 01       	movw	r6, r24
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
	
	int centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     6ac:	d7 01       	movw	r26, r14
     6ae:	12 96       	adiw	r26, 0x02	; 2
     6b0:	6d 91       	ld	r22, X+
     6b2:	7c 91       	ld	r23, X
     6b4:	13 97       	sbiw	r26, 0x03	; 3
     6b6:	f1 01       	movw	r30, r2
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	68 1b       	sub	r22, r24
     6be:	79 0b       	sbc	r23, r25
	
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
     6c0:	07 2e       	mov	r0, r23
     6c2:	00 0c       	add	r0, r0
     6c4:	88 0b       	sbc	r24, r24
     6c6:	99 0b       	sbc	r25, r25
     6c8:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     6cc:	90 58       	subi	r25, 0x80	; 128
     6ce:	a3 01       	movw	r20, r6
     6d0:	92 01       	movw	r18, r4
     6d2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <atan2>
	theta += M_PI/2;
     6d6:	2b ed       	ldi	r18, 0xDB	; 219
     6d8:	3f e0       	ldi	r19, 0x0F	; 15
     6da:	49 ec       	ldi	r20, 0xC9	; 201
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__addsf3>
     6e2:	2b 01       	movw	r4, r22
     6e4:	3c 01       	movw	r6, r24
	int t[2];
	t[0] = -1*center[0] + 512;
	t[1] = -1*center[1] + 382;
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     6e6:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <sin>
     6ea:	6b 01       	movw	r12, r22
     6ec:	7c 01       	movw	r14, r24
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
	theta += M_PI/2;
	
	int t[2];
	t[0] = -1*center[0] + 512;
	t[1] = -1*center[1] + 382;
     6ee:	6e e7       	ldi	r22, 0x7E	; 126
     6f0:	71 e0       	ldi	r23, 0x01	; 1
     6f2:	6a 19       	sub	r22, r10
     6f4:	7b 09       	sbc	r23, r11
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     6f6:	07 2e       	mov	r0, r23
     6f8:	00 0c       	add	r0, r0
     6fa:	88 0b       	sbc	r24, r24
     6fc:	99 0b       	sbc	r25, r25
     6fe:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     702:	4b 01       	movw	r8, r22
     704:	5c 01       	movw	r10, r24
     706:	c3 01       	movw	r24, r6
     708:	b2 01       	movw	r22, r4
     70a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <cos>
     70e:	69 8b       	std	Y+17, r22	; 0x11
     710:	7a 8b       	std	Y+18, r23	; 0x12
     712:	8b 8b       	std	Y+19, r24	; 0x13
     714:	9c 8b       	std	Y+20, r25	; 0x14
	
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
	theta += M_PI/2;
	
	int t[2];
	t[0] = -1*center[0] + 512;
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	72 e0       	ldi	r23, 0x02	; 2
     71a:	60 1b       	sub	r22, r16
     71c:	71 0b       	sbc	r23, r17
	t[1] = -1*center[1] + 382;
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     71e:	07 2e       	mov	r0, r23
     720:	00 0c       	add	r0, r0
     722:	88 0b       	sbc	r24, r24
     724:	99 0b       	sbc	r25, r25
     726:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     72a:	2b 01       	movw	r4, r22
     72c:	3c 01       	movw	r6, r24
     72e:	0c e1       	ldi	r16, 0x1C	; 28
     730:	11 e0       	ldi	r17, 0x01	; 1
     732:	a5 01       	movw	r20, r10
     734:	94 01       	movw	r18, r8
     736:	c7 01       	movw	r24, r14
     738:	b6 01       	movw	r22, r12
     73a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__mulsf3>
     73e:	6d 8b       	std	Y+21, r22	; 0x15
     740:	7e 8b       	std	Y+22, r23	; 0x16
     742:	8f 8b       	std	Y+23, r24	; 0x17
     744:	98 8f       	std	Y+24, r25	; 0x18
     746:	a3 01       	movw	r20, r6
     748:	92 01       	movw	r18, r4
     74a:	69 89       	ldd	r22, Y+17	; 0x11
     74c:	7a 89       	ldd	r23, Y+18	; 0x12
     74e:	8b 89       	ldd	r24, Y+19	; 0x13
     750:	9c 89       	ldd	r25, Y+20	; 0x14
     752:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__mulsf3>
     756:	9b 01       	movw	r18, r22
     758:	ac 01       	movw	r20, r24
     75a:	6d 89       	ldd	r22, Y+21	; 0x15
     75c:	7e 89       	ldd	r23, Y+22	; 0x16
     75e:	8f 89       	ldd	r24, Y+23	; 0x17
     760:	98 8d       	ldd	r25, Y+24	; 0x18
     762:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__subsf3>
     766:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixsfsi>
     76a:	d8 01       	movw	r26, r16
     76c:	6d 93       	st	X+, r22
     76e:	7c 93       	st	X, r23
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     770:	29 89       	ldd	r18, Y+17	; 0x11
     772:	3a 89       	ldd	r19, Y+18	; 0x12
     774:	4b 89       	ldd	r20, Y+19	; 0x13
     776:	5c 89       	ldd	r21, Y+20	; 0x14
     778:	c5 01       	movw	r24, r10
     77a:	b4 01       	movw	r22, r8
     77c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__mulsf3>
     780:	4b 01       	movw	r8, r22
     782:	5c 01       	movw	r10, r24
     784:	a3 01       	movw	r20, r6
     786:	92 01       	movw	r18, r4
     788:	c7 01       	movw	r24, r14
     78a:	b6 01       	movw	r22, r12
     78c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__mulsf3>
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
     794:	c5 01       	movw	r24, r10
     796:	b4 01       	movw	r22, r8
     798:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__addsf3>
     79c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixsfsi>
     7a0:	f8 01       	movw	r30, r16
     7a2:	73 83       	std	Z+3, r23	; 0x03
     7a4:	62 83       	std	Z+2, r22	; 0x02
	
	return centerFour;
}
     7a6:	c8 01       	movw	r24, r16
     7a8:	a8 96       	adiw	r28, 0x28	; 40
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	bf 90       	pop	r11
     7c6:	af 90       	pop	r10
     7c8:	9f 90       	pop	r9
     7ca:	8f 90       	pop	r8
     7cc:	7f 90       	pop	r7
     7ce:	6f 90       	pop	r6
     7d0:	5f 90       	pop	r5
     7d2:	4f 90       	pop	r4
     7d4:	3f 90       	pop	r3
     7d6:	2f 90       	pop	r2
     7d8:	08 95       	ret

000007da <localization_calc>:
void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom);


//Public function declarations 
int* localization_calc(int rawStarData[8], int robotCenterPrev[2])
{
     7da:	cf 92       	push	r12
     7dc:	df 92       	push	r13
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	68 97       	sbiw	r28, 0x18	; 24
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     7fc:	0d b7       	in	r16, 0x3d	; 61
     7fe:	1e b7       	in	r17, 0x3e	; 62
int* localization_calc(int rawStarData[8], int robotCenterPrev[2])
{
	static int robotCenter[2];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     800:	80 81       	ld	r24, Z
     802:	91 81       	ldd	r25, Z+1	; 0x01
     804:	9a 83       	std	Y+2, r25	; 0x02
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	80 85       	ldd	r24, Z+8	; 0x08
     80a:	91 85       	ldd	r25, Z+9	; 0x09
     80c:	9c 83       	std	Y+4, r25	; 0x04
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	82 81       	ldd	r24, Z+2	; 0x02
     812:	93 81       	ldd	r25, Z+3	; 0x03
     814:	9e 83       	std	Y+6, r25	; 0x06
     816:	8d 83       	std	Y+5, r24	; 0x05
     818:	82 85       	ldd	r24, Z+10	; 0x0a
     81a:	93 85       	ldd	r25, Z+11	; 0x0b
     81c:	98 87       	std	Y+8, r25	; 0x08
     81e:	8f 83       	std	Y+7, r24	; 0x07
     820:	84 81       	ldd	r24, Z+4	; 0x04
     822:	95 81       	ldd	r25, Z+5	; 0x05
     824:	9a 87       	std	Y+10, r25	; 0x0a
     826:	89 87       	std	Y+9, r24	; 0x09
     828:	84 85       	ldd	r24, Z+12	; 0x0c
     82a:	95 85       	ldd	r25, Z+13	; 0x0d
     82c:	9c 87       	std	Y+12, r25	; 0x0c
     82e:	8b 87       	std	Y+11, r24	; 0x0b
     830:	86 81       	ldd	r24, Z+6	; 0x06
     832:	97 81       	ldd	r25, Z+7	; 0x07
     834:	9e 87       	std	Y+14, r25	; 0x0e
     836:	8d 87       	std	Y+13, r24	; 0x0d
     838:	86 85       	ldd	r24, Z+14	; 0x0e
     83a:	97 85       	ldd	r25, Z+15	; 0x0f
     83c:	98 8b       	std	Y+16, r25	; 0x10
     83e:	8f 87       	std	Y+15, r24	; 0x0f
     840:	ae 01       	movw	r20, r28
     842:	4f 5f       	subi	r20, 0xFF	; 255
     844:	5f 4f       	sbci	r21, 0xFF	; 255
     846:	7a 01       	movw	r14, r20
     848:	40 5f       	subi	r20, 0xF0	; 240
     84a:	5f 4f       	sbci	r21, 0xFF	; 255
     84c:	f7 01       	movw	r30, r14
	
	//If the x or y data is not received, ensure that the whole point is removed (set to 1023)
	for (int i = 0; i < 4; i++ ){
		for (int j = 0; j < 2; j++ ){
			if (pvect[i][j] == 1023){
				pvect[i][0] = 1023;
     84e:	6f ef       	ldi	r22, 0xFF	; 255
     850:	73 e0       	ldi	r23, 0x03	; 3
     852:	0c c0       	rjmp	.+24     	; 0x86c <localization_calc+0x92>
     854:	d9 01       	movw	r26, r18
     856:	11 96       	adiw	r26, 0x01	; 1
     858:	7c 93       	st	X, r23
     85a:	6e 93       	st	-X, r22
				pvect[i][1] = 1023;
     85c:	13 96       	adiw	r26, 0x03	; 3
     85e:	7c 93       	st	X, r23
     860:	6e 93       	st	-X, r22
     862:	12 97       	sbiw	r26, 0x02	; 2
     864:	34 96       	adiw	r30, 0x04	; 4
		{rawStarData[2], rawStarData[6]},
		{rawStarData[3], rawStarData[7]}
	};
	
	//If the x or y data is not received, ensure that the whole point is removed (set to 1023)
	for (int i = 0; i < 4; i++ ){
     866:	e4 17       	cp	r30, r20
     868:	f5 07       	cpc	r31, r21
     86a:	61 f0       	breq	.+24     	; 0x884 <localization_calc+0xaa>
     86c:	9f 01       	movw	r18, r30
		for (int j = 0; j < 2; j++ ){
			if (pvect[i][j] == 1023){
     86e:	80 81       	ld	r24, Z
     870:	91 81       	ldd	r25, Z+1	; 0x01
     872:	8f 3f       	cpi	r24, 0xFF	; 255
     874:	93 40       	sbci	r25, 0x03	; 3
     876:	71 f3       	breq	.-36     	; 0x854 <localization_calc+0x7a>
     878:	82 81       	ldd	r24, Z+2	; 0x02
     87a:	93 81       	ldd	r25, Z+3	; 0x03
     87c:	8f 3f       	cpi	r24, 0xFF	; 255
     87e:	93 40       	sbci	r25, 0x03	; 3
     880:	89 f7       	brne	.-30     	; 0x864 <localization_calc+0x8a>
     882:	e8 cf       	rjmp	.-48     	; 0x854 <localization_calc+0x7a>
			}
		}
	}
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     884:	fe 01       	movw	r30, r28
     886:	71 96       	adiw	r30, 0x11	; 17
     888:	88 e0       	ldi	r24, 0x08	; 8
     88a:	df 01       	movw	r26, r30
     88c:	1d 92       	st	X+, r1
     88e:	8a 95       	dec	r24
     890:	e9 f7       	brne	.-6      	; 0x88c <localization_calc+0xb2>
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     89a:	f7 01       	movw	r30, r14
     89c:	40 81       	ld	r20, Z
     89e:	51 81       	ldd	r21, Z+1	; 0x01
     8a0:	4f 3f       	cpi	r20, 0xFF	; 255
     8a2:	53 40       	sbci	r21, 0x03	; 3
     8a4:	71 f0       	breq	.+28     	; 0x8c2 <localization_calc+0xe8>
			pointIndices[numPoints] = i;
     8a6:	f9 01       	movw	r30, r18
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	cc 24       	eor	r12, r12
     8ae:	c3 94       	inc	r12
     8b0:	d1 2c       	mov	r13, r1
     8b2:	cc 0e       	add	r12, r28
     8b4:	dd 1e       	adc	r13, r29
     8b6:	ec 0d       	add	r30, r12
     8b8:	fd 1d       	adc	r31, r13
     8ba:	91 8b       	std	Z+17, r25	; 0x11
     8bc:	80 8b       	std	Z+16, r24	; 0x10
			numPoints++;
     8be:	2f 5f       	subi	r18, 0xFF	; 255
     8c0:	3f 4f       	sbci	r19, 0xFF	; 255
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	44 e0       	ldi	r20, 0x04	; 4
     8c6:	e4 0e       	add	r14, r20
     8c8:	f1 1c       	adc	r15, r1
     8ca:	84 30       	cpi	r24, 0x04	; 4
     8cc:	91 05       	cpc	r25, r1
     8ce:	29 f7       	brne	.-54     	; 0x89a <localization_calc+0xc0>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <localization_calc+0xfe>
     8d6:	81 c0       	rjmp	.+258    	; 0x9da <localization_calc+0x200>
     8d8:	ed b6       	in	r14, 0x3d	; 61
     8da:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     8dc:	b9 01       	movw	r22, r18
     8de:	66 0f       	add	r22, r22
     8e0:	77 1f       	adc	r23, r23
     8e2:	66 0f       	add	r22, r22
     8e4:	77 1f       	adc	r23, r23
     8e6:	8d b7       	in	r24, 0x3d	; 61
     8e8:	9e b7       	in	r25, 0x3e	; 62
     8ea:	86 1b       	sub	r24, r22
     8ec:	97 0b       	sbc	r25, r23
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	9e bf       	out	0x3e, r25	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	8d bf       	out	0x3d, r24	; 61
     8f8:	01 96       	adiw	r24, 0x01	; 1
		for (int i = 0; i < numPoints; i++) {
     8fa:	12 16       	cp	r1, r18
     8fc:	13 06       	cpc	r1, r19
     8fe:	34 f5       	brge	.+76     	; 0x94c <localization_calc+0x172>
     900:	ae 01       	movw	r20, r28
     902:	4f 5e       	subi	r20, 0xEF	; 239
     904:	5f 4f       	sbci	r21, 0xFF	; 255
     906:	dc 01       	movw	r26, r24
     908:	68 0f       	add	r22, r24
     90a:	79 1f       	adc	r23, r25
			int index = pointIndices[i];
     90c:	fa 01       	movw	r30, r20
     90e:	c1 90       	ld	r12, Z+
     910:	d1 90       	ld	r13, Z+
     912:	af 01       	movw	r20, r30
			points[i][0] = pvect[index][0];
     914:	f6 01       	movw	r30, r12
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	ee 0f       	add	r30, r30
     91c:	ff 1f       	adc	r31, r31
     91e:	cc 24       	eor	r12, r12
     920:	c3 94       	inc	r12
     922:	d1 2c       	mov	r13, r1
     924:	cc 0e       	add	r12, r28
     926:	dd 1e       	adc	r13, r29
     928:	ec 0d       	add	r30, r12
     92a:	fd 1d       	adc	r31, r13
     92c:	c0 80       	ld	r12, Z
     92e:	d1 80       	ldd	r13, Z+1	; 0x01
     930:	11 96       	adiw	r26, 0x01	; 1
     932:	dc 92       	st	X, r13
     934:	ce 92       	st	-X, r12
			points[i][1] = pvect[index][1];
     936:	02 80       	ldd	r0, Z+2	; 0x02
     938:	f3 81       	ldd	r31, Z+3	; 0x03
     93a:	e0 2d       	mov	r30, r0
     93c:	13 96       	adiw	r26, 0x03	; 3
     93e:	fc 93       	st	X, r31
     940:	ee 93       	st	-X, r30
     942:	12 97       	sbiw	r26, 0x02	; 2
     944:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     946:	a6 17       	cp	r26, r22
     948:	b7 07       	cpc	r27, r23
     94a:	01 f7       	brne	.-64     	; 0x90c <localization_calc+0x132>
			points[i][0] = pvect[index][0];
			points[i][1] = pvect[index][1];
		}
		
		
		m_red(ON);
     94c:	6e 9a       	sbi	0x0d, 6	; 13
     94e:	76 98       	cbi	0x0e, 6	; 14
		
		int* calcPointer; 
		static int rc[2] = {1023, 1023};
		switch (numPoints)
     950:	22 30       	cpi	r18, 0x02	; 2
     952:	31 05       	cpc	r19, r1
     954:	c9 f0       	breq	.+50     	; 0x988 <localization_calc+0x1ae>
     956:	24 f4       	brge	.+8      	; 0x960 <localization_calc+0x186>
     958:	21 30       	cpi	r18, 0x01	; 1
     95a:	31 05       	cpc	r19, r1
     95c:	f9 f0       	breq	.+62     	; 0x99c <localization_calc+0x1c2>
     95e:	28 c0       	rjmp	.+80     	; 0x9b0 <localization_calc+0x1d6>
     960:	23 30       	cpi	r18, 0x03	; 3
     962:	31 05       	cpc	r19, r1
     964:	39 f0       	breq	.+14     	; 0x974 <localization_calc+0x19a>
     966:	24 30       	cpi	r18, 0x04	; 4
     968:	31 05       	cpc	r19, r1
     96a:	11 f5       	brne	.+68     	; 0x9b0 <localization_calc+0x1d6>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     96c:	0e 94 a4 01 	call	0x348	; 0x348 <fourPointCalc>
     970:	dc 01       	movw	r26, r24
				break;
     972:	20 c0       	rjmp	.+64     	; 0x9b4 <localization_calc+0x1da>


int* threePointCalc(int pvect[3][2])
{
	static int centerThree[2];	
	centerThree[0] = 1023;
     974:	e8 e1       	ldi	r30, 0x18	; 24
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	93 e0       	ldi	r25, 0x03	; 3
     97c:	91 83       	std	Z+1, r25	; 0x01
     97e:	80 83       	st	Z, r24
	centerThree[1] = 1023;
     980:	93 83       	std	Z+3, r25	; 0x03
     982:	82 83       	std	Z+2, r24	; 0x02
			case 4 :
				calcPointer = fourPointCalc(points);
				break;
				
			case 3 : 
				calcPointer = threePointCalc(points);
     984:	df 01       	movw	r26, r30
				break;
     986:	16 c0       	rjmp	.+44     	; 0x9b4 <localization_calc+0x1da>


int* twoPointCalc(int pvect[2][2])
{
	static int centerTwo[2];
	centerTwo[0] = 1023;
     988:	e4 e1       	ldi	r30, 0x14	; 20
     98a:	f1 e0       	ldi	r31, 0x01	; 1
     98c:	8f ef       	ldi	r24, 0xFF	; 255
     98e:	93 e0       	ldi	r25, 0x03	; 3
     990:	91 83       	std	Z+1, r25	; 0x01
     992:	80 83       	st	Z, r24
	centerTwo[1] = 1023;
     994:	93 83       	std	Z+3, r25	; 0x03
     996:	82 83       	std	Z+2, r24	; 0x02
			case 3 : 
				calcPointer = threePointCalc(points);
				break;
				
			case 2 :
				calcPointer = twoPointCalc(points);
     998:	df 01       	movw	r26, r30
				break; 
     99a:	0c c0       	rjmp	.+24     	; 0x9b4 <localization_calc+0x1da>


int* onePointCalc(int pvect[1][2])
{
	static int centerOne[2];
	centerOne[0] = 1023;
     99c:	e0 e1       	ldi	r30, 0x10	; 16
     99e:	f1 e0       	ldi	r31, 0x01	; 1
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	91 83       	std	Z+1, r25	; 0x01
     9a6:	80 83       	st	Z, r24
	centerOne[1] = 1023;
     9a8:	93 83       	std	Z+3, r25	; 0x03
     9aa:	82 83       	std	Z+2, r24	; 0x02
			case 2 :
				calcPointer = twoPointCalc(points);
				break; 
				
			case 1 : 
				calcPointer = onePointCalc(points);
     9ac:	df 01       	movw	r26, r30
				break; 
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <localization_calc+0x1da>
				
			default:
				calcPointer = &rc[0];
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b1 e0       	ldi	r27, 0x01	; 1
				
		}
		
		robotCenter[0] = (int)calcPointer[0];
     9b4:	8d 91       	ld	r24, X+
     9b6:	9c 91       	ld	r25, X
     9b8:	11 97       	sbiw	r26, 0x01	; 1
     9ba:	e0 e2       	ldi	r30, 0x20	; 32
     9bc:	f1 e0       	ldi	r31, 0x01	; 1
     9be:	91 83       	std	Z+1, r25	; 0x01
     9c0:	80 83       	st	Z, r24
		robotCenter[1] = (int)calcPointer[1];
     9c2:	12 96       	adiw	r26, 0x02	; 2
     9c4:	8d 91       	ld	r24, X+
     9c6:	9c 91       	ld	r25, X
     9c8:	13 97       	sbiw	r26, 0x03	; 3
     9ca:	93 83       	std	Z+3, r25	; 0x03
     9cc:	82 83       	std	Z+2, r24	; 0x02
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	fe be       	out	0x3e, r15	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	ed be       	out	0x3d, r14	; 61
     9d8:	0a c0       	rjmp	.+20     	; 0x9ee <localization_calc+0x214>
		
	
	} else { 
		robotCenter[0] = 1023; 
     9da:	e0 e2       	ldi	r30, 0x20	; 32
     9dc:	f1 e0       	ldi	r31, 0x01	; 1
     9de:	8f ef       	ldi	r24, 0xFF	; 255
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	91 83       	std	Z+1, r25	; 0x01
     9e4:	80 83       	st	Z, r24
		robotCenter[1] = 1023; 
     9e6:	93 83       	std	Z+3, r25	; 0x03
     9e8:	82 83       	std	Z+2, r24	; 0x02
		m_red(OFF);	
     9ea:	6e 9a       	sbi	0x0d, 6	; 13
     9ec:	76 9a       	sbi	0x0e, 6	; 14
	
	return robotCenter;
	
	
	
}
     9ee:	80 e2       	ldi	r24, 0x20	; 32
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	1e bf       	out	0x3e, r17	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0d bf       	out	0x3d, r16	; 61
     9fc:	68 96       	adiw	r28, 0x18	; 24
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	08 95       	ret

00000a1a <init>:
}


void init() 
{
	m_red(ON);
     a1a:	6e 9a       	sbi	0x0d, 6	; 13
     a1c:	76 98       	cbi	0x0e, 6	; 14
	while(!m_wii_open());
     a1e:	0e 94 44 08 	call	0x1088	; 0x1088 <m_wii_open>
     a22:	88 23       	and	r24, r24
     a24:	e1 f3       	breq	.-8      	; 0xa1e <init+0x4>
	m_red(OFF);
     a26:	6e 9a       	sbi	0x0d, 6	; 13
     a28:	76 9a       	sbi	0x0e, 6	; 14
	
	m_usb_init();
     a2a:	0e 94 88 05 	call	0xb10	; 0xb10 <m_usb_init>
     a2e:	08 95       	ret

00000a30 <main>:
#include "localization_function.h"

void init(); 

int main(void)
{	
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	ac 97       	sbiw	r28, 0x2c	; 44
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
	m_clockdivide(0);
     a44:	e1 e6       	ldi	r30, 0x61	; 97
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	80 83       	st	Z, r24
     a4c:	10 82       	st	Z, r1
	
	init();
     a4e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <init>
	m_green(ON);
     a52:	6a 9a       	sbi	0x0d, 2	; 13
     a54:	72 98       	cbi	0x0e, 2	; 14
	unsigned int blobs[12];
	//char rx_buffer;

	int robotCenterPrev[2] = {1023, 1023};
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	93 e0       	ldi	r25, 0x03	; 3
     a5a:	9a 8f       	std	Y+26, r25	; 0x1a
     a5c:	89 8f       	std	Y+25, r24	; 0x19
     a5e:	9c 8f       	std	Y+28, r25	; 0x1c
     a60:	8b 8f       	std	Y+27, r24	; 0x1b
		
		//m_usb_rx_flush();  						// Flush the buffer
		
//		if(rx_buffer == 1)						// MATLAB is expecting IMU data
//		{
			m_red(TOGGLE);
     a62:	68 94       	set
     a64:	ff 24       	eor	r15, r15
     a66:	f6 f8       	bld	r15, 6
	int* robotCenter;
	
    while (1) 
    {
		
		m_wii_read(blobs);
     a68:	ce 01       	movw	r24, r28
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	0e 94 65 09 	call	0x12ca	; 0x12ca <m_wii_read>
		unsigned int x1 = blobs[0];
		unsigned int y1 = blobs[1];
     a70:	6b 81       	ldd	r22, Y+3	; 0x03
     a72:	7c 81       	ldd	r23, Y+4	; 0x04
		unsigned int x2 = blobs[3];
     a74:	0f 81       	ldd	r16, Y+7	; 0x07
     a76:	18 85       	ldd	r17, Y+8	; 0x08
		unsigned int y2 = blobs[4];
     a78:	49 85       	ldd	r20, Y+9	; 0x09
     a7a:	5a 85       	ldd	r21, Y+10	; 0x0a
		unsigned int x3 = blobs[6];
     a7c:	ad 85       	ldd	r26, Y+13	; 0x0d
     a7e:	be 85       	ldd	r27, Y+14	; 0x0e
		unsigned int y3 = blobs[7];
     a80:	2f 85       	ldd	r18, Y+15	; 0x0f
     a82:	38 89       	ldd	r19, Y+16	; 0x10
		unsigned int x4 = blobs[9];
     a84:	eb 89       	ldd	r30, Y+19	; 0x13
     a86:	fc 89       	ldd	r31, Y+20	; 0x14
		unsigned int y4 = blobs[10];
     a88:	8d 89       	ldd	r24, Y+21	; 0x15
     a8a:	9e 89       	ldd	r25, Y+22	; 0x16
		
		int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
     a8c:	c9 80       	ldd	r12, Y+1	; 0x01
     a8e:	da 80       	ldd	r13, Y+2	; 0x02
     a90:	de 8e       	std	Y+30, r13	; 0x1e
     a92:	cd 8e       	std	Y+29, r12	; 0x1d
     a94:	18 a3       	std	Y+32, r17	; 0x20
     a96:	0f 8f       	std	Y+31, r16	; 0x1f
     a98:	ba a3       	std	Y+34, r27	; 0x22
     a9a:	a9 a3       	std	Y+33, r26	; 0x21
     a9c:	fc a3       	std	Y+36, r31	; 0x24
     a9e:	eb a3       	std	Y+35, r30	; 0x23
     aa0:	7e a3       	std	Y+38, r23	; 0x26
     aa2:	6d a3       	std	Y+37, r22	; 0x25
     aa4:	58 a7       	std	Y+40, r21	; 0x28
     aa6:	4f a3       	std	Y+39, r20	; 0x27
     aa8:	3a a7       	std	Y+42, r19	; 0x2a
     aaa:	29 a7       	std	Y+41, r18	; 0x29
     aac:	9c a7       	std	Y+44, r25	; 0x2c
     aae:	8b a7       	std	Y+43, r24	; 0x2b
		robotCenter = localization_calc(rawStarData, robotCenterPrev);
     ab0:	be 01       	movw	r22, r28
     ab2:	67 5e       	subi	r22, 0xE7	; 231
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255
     ab6:	ce 01       	movw	r24, r28
     ab8:	4d 96       	adiw	r24, 0x1d	; 29
     aba:	0e 94 ed 03 	call	0x7da	; 0x7da <localization_calc>
     abe:	8c 01       	movw	r16, r24
		
		//m_usb_rx_flush();  						// Flush the buffer
		
//		if(rx_buffer == 1)						// MATLAB is expecting IMU data
//		{
			m_red(TOGGLE);
     ac0:	6e 9a       	sbi	0x0d, 6	; 13
     ac2:	9e b1       	in	r25, 0x0e	; 14
     ac4:	9f 25       	eor	r25, r15
     ac6:	9e b9       	out	0x0e, r25	; 14
			m_usb_tx_int((int)robotCenter[0]);
     ac8:	f8 01       	movw	r30, r16
     aca:	80 81       	ld	r24, Z
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <m_usb_tx_int>
			m_usb_tx_string(" ");
     ad2:	8a ef       	ldi	r24, 0xFA	; 250
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 bd 07 	call	0xf7a	; 0xf7a <print_P>
			m_usb_tx_int((int)robotCenter[1]);
     ada:	f8 01       	movw	r30, r16
     adc:	82 81       	ldd	r24, Z+2	; 0x02
     ade:	93 81       	ldd	r25, Z+3	; 0x03
     ae0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <m_usb_tx_int>
			m_usb_tx_string("\n");
     ae4:	88 ef       	ldi	r24, 0xF8	; 248
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <print_P>

//		}
		
		
    }
     aec:	bd cf       	rjmp	.-134    	; 0xa68 <main+0x38>

00000aee <m_bus_init>:
     aee:	58 9a       	sbi	0x0b, 0	; 11
     af0:	59 9a       	sbi	0x0b, 1	; 11
     af2:	5a 9a       	sbi	0x0b, 2	; 11
     af4:	8c e0       	ldi	r24, 0x0C	; 12
     af6:	80 93 b8 00 	sts	0x00B8, r24
     afa:	e9 e6       	ldi	r30, 0x69	; 105
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	80 62       	ori	r24, 0x20	; 32
     b02:	80 83       	st	Z, r24
     b04:	80 81       	ld	r24, Z
     b06:	8f 7e       	andi	r24, 0xEF	; 239
     b08:	80 83       	st	Z, r24
     b0a:	ea 9a       	sbi	0x1d, 2	; 29
     b0c:	78 94       	sei
     b0e:	08 95       	ret

00000b10 <m_usb_init>:
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	80 93 d7 00 	sts	0x00D7, r24
     b16:	80 ea       	ldi	r24, 0xA0	; 160
     b18:	80 93 d8 00 	sts	0x00D8, r24
     b1c:	82 e1       	ldi	r24, 0x12	; 18
     b1e:	89 bd       	out	0x29, r24	; 41
     b20:	09 b4       	in	r0, 0x29	; 41
     b22:	00 fe       	sbrs	r0, 0
     b24:	fd cf       	rjmp	.-6      	; 0xb20 <m_usb_init+0x10>
     b26:	80 e9       	ldi	r24, 0x90	; 144
     b28:	80 93 d8 00 	sts	0x00D8, r24
     b2c:	10 92 e0 00 	sts	0x00E0, r1
     b30:	10 92 27 01 	sts	0x0127, r1
     b34:	10 92 24 01 	sts	0x0124, r1
     b38:	8c e0       	ldi	r24, 0x0C	; 12
     b3a:	80 93 e2 00 	sts	0x00E2, r24
     b3e:	78 94       	sei
     b40:	08 95       	ret

00000b42 <m_usb_tx_char>:
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	90 91 27 01 	lds	r25, 0x0127
     b4a:	99 23       	and	r25, r25
     b4c:	09 f4       	brne	.+2      	; 0xb50 <m_usb_tx_char+0xe>
     b4e:	4c c0       	rjmp	.+152    	; 0xbe8 <m_usb_tx_char+0xa6>
     b50:	9f b7       	in	r25, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	24 e0       	ldi	r18, 0x04	; 4
     b56:	20 93 e9 00 	sts	0x00E9, r18
     b5a:	20 91 25 01 	lds	r18, 0x0125
     b5e:	22 23       	and	r18, r18
     b60:	49 f0       	breq	.+18     	; 0xb74 <m_usb_tx_char+0x32>
     b62:	20 91 e8 00 	lds	r18, 0x00E8
     b66:	25 fd       	sbrc	r18, 5
     b68:	03 c0       	rjmp	.+6      	; 0xb70 <m_usb_tx_char+0x2e>
     b6a:	9f bf       	out	0x3f, r25	; 63
     b6c:	8f ef       	ldi	r24, 0xFF	; 255
     b6e:	41 c0       	rjmp	.+130    	; 0xbf2 <m_usb_tx_char+0xb0>
     b70:	10 92 25 01 	sts	0x0125, r1
     b74:	30 91 e4 00 	lds	r19, 0x00E4
     b78:	37 5e       	subi	r19, 0xE7	; 231
     b7a:	20 91 e8 00 	lds	r18, 0x00E8
     b7e:	25 fd       	sbrc	r18, 5
     b80:	24 c0       	rjmp	.+72     	; 0xbca <m_usb_tx_char+0x88>
     b82:	9f bf       	out	0x3f, r25	; 63
     b84:	90 91 e4 00 	lds	r25, 0x00E4
     b88:	93 17       	cp	r25, r19
     b8a:	81 f0       	breq	.+32     	; 0xbac <m_usb_tx_char+0x6a>
     b8c:	90 91 27 01 	lds	r25, 0x0127
     b90:	99 23       	and	r25, r25
     b92:	61 f1       	breq	.+88     	; 0xbec <m_usb_tx_char+0xaa>
     b94:	a9 ee       	ldi	r26, 0xE9	; 233
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	44 e0       	ldi	r20, 0x04	; 4
     b9a:	e8 ee       	ldi	r30, 0xE8	; 232
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	c4 ee       	ldi	r28, 0xE4	; 228
     ba0:	d0 e0       	ldi	r29, 0x00	; 0
     ba2:	0d c0       	rjmp	.+26     	; 0xbbe <m_usb_tx_char+0x7c>
     ba4:	9f bf       	out	0x3f, r25	; 63
     ba6:	98 81       	ld	r25, Y
     ba8:	93 13       	cpse	r25, r19
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <m_usb_tx_char+0x74>
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	80 93 25 01 	sts	0x0125, r24
     bb2:	8f ef       	ldi	r24, 0xFF	; 255
     bb4:	1e c0       	rjmp	.+60     	; 0xbf2 <m_usb_tx_char+0xb0>
     bb6:	90 91 27 01 	lds	r25, 0x0127
     bba:	99 23       	and	r25, r25
     bbc:	c9 f0       	breq	.+50     	; 0xbf0 <m_usb_tx_char+0xae>
     bbe:	9f b7       	in	r25, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	4c 93       	st	X, r20
     bc4:	20 81       	ld	r18, Z
     bc6:	25 ff       	sbrs	r18, 5
     bc8:	ed cf       	rjmp	.-38     	; 0xba4 <m_usb_tx_char+0x62>
     bca:	80 93 f1 00 	sts	0x00F1, r24
     bce:	80 91 e8 00 	lds	r24, 0x00E8
     bd2:	85 fd       	sbrc	r24, 5
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <m_usb_tx_char+0x9a>
     bd6:	8a e3       	ldi	r24, 0x3A	; 58
     bd8:	80 93 e8 00 	sts	0x00E8, r24
     bdc:	85 e0       	ldi	r24, 0x05	; 5
     bde:	80 93 26 01 	sts	0x0126, r24
     be2:	9f bf       	out	0x3f, r25	; 63
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	05 c0       	rjmp	.+10     	; 0xbf2 <m_usb_tx_char+0xb0>
     be8:	8f ef       	ldi	r24, 0xFF	; 255
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <m_usb_tx_char+0xb0>
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <m_usb_tx_char+0xb0>
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <__vector_10>:
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	8f 93       	push	r24
     c04:	9f 93       	push	r25
     c06:	ef 93       	push	r30
     c08:	ff 93       	push	r31
     c0a:	e1 ee       	ldi	r30, 0xE1	; 225
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	10 82       	st	Z, r1
     c12:	83 ff       	sbrs	r24, 3
     c14:	11 c0       	rjmp	.+34     	; 0xc38 <__vector_10+0x40>
     c16:	10 92 e9 00 	sts	0x00E9, r1
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	90 93 eb 00 	sts	0x00EB, r25
     c20:	10 92 ec 00 	sts	0x00EC, r1
     c24:	92 e1       	ldi	r25, 0x12	; 18
     c26:	90 93 ed 00 	sts	0x00ED, r25
     c2a:	98 e0       	ldi	r25, 0x08	; 8
     c2c:	90 93 f0 00 	sts	0x00F0, r25
     c30:	10 92 27 01 	sts	0x0127, r1
     c34:	10 92 24 01 	sts	0x0124, r1
     c38:	82 ff       	sbrs	r24, 2
     c3a:	13 c0       	rjmp	.+38     	; 0xc62 <__vector_10+0x6a>
     c3c:	80 91 27 01 	lds	r24, 0x0127
     c40:	88 23       	and	r24, r24
     c42:	79 f0       	breq	.+30     	; 0xc62 <__vector_10+0x6a>
     c44:	80 91 26 01 	lds	r24, 0x0126
     c48:	88 23       	and	r24, r24
     c4a:	59 f0       	breq	.+22     	; 0xc62 <__vector_10+0x6a>
     c4c:	81 50       	subi	r24, 0x01	; 1
     c4e:	80 93 26 01 	sts	0x0126, r24
     c52:	81 11       	cpse	r24, r1
     c54:	06 c0       	rjmp	.+12     	; 0xc62 <__vector_10+0x6a>
     c56:	84 e0       	ldi	r24, 0x04	; 4
     c58:	80 93 e9 00 	sts	0x00E9, r24
     c5c:	8a e3       	ldi	r24, 0x3A	; 58
     c5e:	80 93 e8 00 	sts	0x00E8, r24
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <__vector_11>:
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	2f 93       	push	r18
     c84:	3f 93       	push	r19
     c86:	4f 93       	push	r20
     c88:	5f 93       	push	r21
     c8a:	6f 93       	push	r22
     c8c:	7f 93       	push	r23
     c8e:	8f 93       	push	r24
     c90:	9f 93       	push	r25
     c92:	af 93       	push	r26
     c94:	bf 93       	push	r27
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	ef 93       	push	r30
     c9c:	ff 93       	push	r31
     c9e:	10 92 e9 00 	sts	0x00E9, r1
     ca2:	80 91 e8 00 	lds	r24, 0x00E8
     ca6:	83 ff       	sbrs	r24, 3
     ca8:	4c c1       	rjmp	.+664    	; 0xf42 <__vector_11+0x2ce>
     caa:	e1 ef       	ldi	r30, 0xF1	; 241
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	60 81       	ld	r22, Z
     cb0:	80 81       	ld	r24, Z
     cb2:	20 81       	ld	r18, Z
     cb4:	90 81       	ld	r25, Z
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	39 2b       	or	r19, r25
     cba:	40 81       	ld	r20, Z
     cbc:	90 81       	ld	r25, Z
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	59 2b       	or	r21, r25
     cc2:	70 81       	ld	r23, Z
     cc4:	c0 81       	ld	r28, Z
     cc6:	92 ef       	ldi	r25, 0xF2	; 242
     cc8:	90 93 e8 00 	sts	0x00E8, r25
     ccc:	86 30       	cpi	r24, 0x06	; 6
     cce:	09 f0       	breq	.+2      	; 0xcd2 <__vector_11+0x5e>
     cd0:	58 c0       	rjmp	.+176    	; 0xd82 <__vector_11+0x10e>
     cd2:	04 c0       	rjmp	.+8      	; 0xcdc <__vector_11+0x68>
     cd4:	81 e2       	ldi	r24, 0x21	; 33
     cd6:	80 93 eb 00 	sts	0x00EB, r24
     cda:	3a c1       	rjmp	.+628    	; 0xf50 <__vector_11+0x2dc>
     cdc:	66 e0       	ldi	r22, 0x06	; 6
     cde:	8c ef       	ldi	r24, 0xFC	; 252
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	fc 01       	movw	r30, r24
     ce4:	a5 91       	lpm	r26, Z+
     ce6:	b4 91       	lpm	r27, Z
     ce8:	2a 17       	cp	r18, r26
     cea:	3b 07       	cpc	r19, r27
     cec:	11 f0       	breq	.+4      	; 0xcf2 <__vector_11+0x7e>
     cee:	07 96       	adiw	r24, 0x07	; 7
     cf0:	23 c0       	rjmp	.+70     	; 0xd38 <__vector_11+0xc4>
     cf2:	fc 01       	movw	r30, r24
     cf4:	32 96       	adiw	r30, 0x02	; 2
     cf6:	a5 91       	lpm	r26, Z+
     cf8:	b4 91       	lpm	r27, Z
     cfa:	4a 17       	cp	r20, r26
     cfc:	5b 07       	cpc	r21, r27
     cfe:	11 f0       	breq	.+4      	; 0xd04 <__vector_11+0x90>
     d00:	07 96       	adiw	r24, 0x07	; 7
     d02:	1a c0       	rjmp	.+52     	; 0xd38 <__vector_11+0xc4>
     d04:	fc 01       	movw	r30, r24
     d06:	34 96       	adiw	r30, 0x04	; 4
     d08:	45 91       	lpm	r20, Z+
     d0a:	54 91       	lpm	r21, Z
     d0c:	fc 01       	movw	r30, r24
     d0e:	36 96       	adiw	r30, 0x06	; 6
     d10:	24 91       	lpm	r18, Z
     d12:	87 2f       	mov	r24, r23
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	9c 2b       	or	r25, r28
     d18:	8f 3f       	cpi	r24, 0xFF	; 255
     d1a:	91 05       	cpc	r25, r1
     d1c:	19 f0       	breq	.+6      	; 0xd24 <__vector_11+0xb0>
     d1e:	10 f0       	brcs	.+4      	; 0xd24 <__vector_11+0xb0>
     d20:	8f ef       	ldi	r24, 0xFF	; 255
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	82 17       	cp	r24, r18
     d26:	08 f4       	brcc	.+2      	; 0xd2a <__vector_11+0xb6>
     d28:	28 2f       	mov	r18, r24
     d2a:	a8 ee       	ldi	r26, 0xE8	; 232
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	70 e1       	ldi	r23, 0x10	; 16
     d30:	6e ef       	ldi	r22, 0xFE	; 254
     d32:	c1 ef       	ldi	r28, 0xF1	; 241
     d34:	d0 e0       	ldi	r29, 0x00	; 0
     d36:	03 c0       	rjmp	.+6      	; 0xd3e <__vector_11+0xca>
     d38:	61 50       	subi	r22, 0x01	; 1
     d3a:	99 f6       	brne	.-90     	; 0xce2 <__vector_11+0x6e>
     d3c:	cb cf       	rjmp	.-106    	; 0xcd4 <__vector_11+0x60>
     d3e:	8c 91       	ld	r24, X
     d40:	98 2f       	mov	r25, r24
     d42:	95 70       	andi	r25, 0x05	; 5
     d44:	e1 f3       	breq	.-8      	; 0xd3e <__vector_11+0xca>
     d46:	82 fd       	sbrc	r24, 2
     d48:	03 c1       	rjmp	.+518    	; 0xf50 <__vector_11+0x2dc>
     d4a:	32 2f       	mov	r19, r18
     d4c:	21 31       	cpi	r18, 0x11	; 17
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <__vector_11+0xde>
     d50:	37 2f       	mov	r19, r23
     d52:	33 23       	and	r19, r19
     d54:	09 f4       	brne	.+2      	; 0xd58 <__vector_11+0xe4>
     d56:	f9 c0       	rjmp	.+498    	; 0xf4a <__vector_11+0x2d6>
     d58:	fa 01       	movw	r30, r20
     d5a:	83 2f       	mov	r24, r19
     d5c:	94 91       	lpm	r25, Z
     d5e:	98 83       	st	Y, r25
     d60:	81 50       	subi	r24, 0x01	; 1
     d62:	31 96       	adiw	r30, 0x01	; 1
     d64:	81 11       	cpse	r24, r1
     d66:	fa cf       	rjmp	.-12     	; 0xd5c <__vector_11+0xe8>
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	83 0f       	add	r24, r19
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	48 0f       	add	r20, r24
     d72:	59 1f       	adc	r21, r25
     d74:	23 1b       	sub	r18, r19
     d76:	6c 93       	st	X, r22
     d78:	21 11       	cpse	r18, r1
     d7a:	e1 cf       	rjmp	.-62     	; 0xd3e <__vector_11+0xca>
     d7c:	30 31       	cpi	r19, 0x10	; 16
     d7e:	f9 f2       	breq	.-66     	; 0xd3e <__vector_11+0xca>
     d80:	e7 c0       	rjmp	.+462    	; 0xf50 <__vector_11+0x2dc>
     d82:	85 30       	cpi	r24, 0x05	; 5
     d84:	61 f4       	brne	.+24     	; 0xd9e <__vector_11+0x12a>
     d86:	8e ef       	ldi	r24, 0xFE	; 254
     d88:	80 93 e8 00 	sts	0x00E8, r24
     d8c:	e8 ee       	ldi	r30, 0xE8	; 232
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	80 ff       	sbrs	r24, 0
     d94:	fd cf       	rjmp	.-6      	; 0xd90 <__vector_11+0x11c>
     d96:	20 68       	ori	r18, 0x80	; 128
     d98:	20 93 e3 00 	sts	0x00E3, r18
     d9c:	d9 c0       	rjmp	.+434    	; 0xf50 <__vector_11+0x2dc>
     d9e:	89 30       	cpi	r24, 0x09	; 9
     da0:	09 f0       	breq	.+2      	; 0xda4 <__vector_11+0x130>
     da2:	35 c0       	rjmp	.+106    	; 0xe0e <__vector_11+0x19a>
     da4:	61 11       	cpse	r22, r1
     da6:	cd c0       	rjmp	.+410    	; 0xf42 <__vector_11+0x2ce>
     da8:	20 93 27 01 	sts	0x0127, r18
     dac:	10 92 24 01 	sts	0x0124, r1
     db0:	10 92 26 01 	sts	0x0126, r1
     db4:	8e ef       	ldi	r24, 0xFE	; 254
     db6:	80 93 e8 00 	sts	0x00E8, r24
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	25 ea       	ldi	r18, 0xA5	; 165
     dbe:	31 e0       	ldi	r19, 0x01	; 1
     dc0:	c9 ee       	ldi	r28, 0xE9	; 233
     dc2:	d0 e0       	ldi	r29, 0x00	; 0
     dc4:	ab ee       	ldi	r26, 0xEB	; 235
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	0c ee       	ldi	r16, 0xEC	; 236
     dca:	10 e0       	ldi	r17, 0x00	; 0
     dcc:	6d ee       	ldi	r22, 0xED	; 237
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	88 83       	st	Y, r24
     dd2:	a9 01       	movw	r20, r18
     dd4:	4f 5f       	subi	r20, 0xFF	; 255
     dd6:	5f 4f       	sbci	r21, 0xFF	; 255
     dd8:	f9 01       	movw	r30, r18
     dda:	94 91       	lpm	r25, Z
     ddc:	9c 93       	st	X, r25
     dde:	99 23       	and	r25, r25
     de0:	61 f0       	breq	.+24     	; 0xdfa <__vector_11+0x186>
     de2:	fa 01       	movw	r30, r20
     de4:	44 91       	lpm	r20, Z
     de6:	f8 01       	movw	r30, r16
     de8:	40 83       	st	Z, r20
     dea:	f9 01       	movw	r30, r18
     dec:	32 96       	adiw	r30, 0x02	; 2
     dee:	94 91       	lpm	r25, Z
     df0:	2d 5f       	subi	r18, 0xFD	; 253
     df2:	3f 4f       	sbci	r19, 0xFF	; 255
     df4:	fb 01       	movw	r30, r22
     df6:	90 83       	st	Z, r25
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <__vector_11+0x188>
     dfa:	9a 01       	movw	r18, r20
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	85 30       	cpi	r24, 0x05	; 5
     e00:	39 f7       	brne	.-50     	; 0xdd0 <__vector_11+0x15c>
     e02:	ea ee       	ldi	r30, 0xEA	; 234
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	8e e1       	ldi	r24, 0x1E	; 30
     e08:	80 83       	st	Z, r24
     e0a:	10 82       	st	Z, r1
     e0c:	a1 c0       	rjmp	.+322    	; 0xf50 <__vector_11+0x2dc>
     e0e:	88 30       	cpi	r24, 0x08	; 8
     e10:	81 f4       	brne	.+32     	; 0xe32 <__vector_11+0x1be>
     e12:	60 38       	cpi	r22, 0x80	; 128
     e14:	09 f0       	breq	.+2      	; 0xe18 <__vector_11+0x1a4>
     e16:	95 c0       	rjmp	.+298    	; 0xf42 <__vector_11+0x2ce>
     e18:	e8 ee       	ldi	r30, 0xE8	; 232
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 ff       	sbrs	r24, 0
     e20:	fd cf       	rjmp	.-6      	; 0xe1c <__vector_11+0x1a8>
     e22:	80 91 27 01 	lds	r24, 0x0127
     e26:	80 93 f1 00 	sts	0x00F1, r24
     e2a:	8e ef       	ldi	r24, 0xFE	; 254
     e2c:	80 93 e8 00 	sts	0x00E8, r24
     e30:	8f c0       	rjmp	.+286    	; 0xf50 <__vector_11+0x2dc>
     e32:	81 32       	cpi	r24, 0x21	; 33
     e34:	b9 f4       	brne	.+46     	; 0xe64 <__vector_11+0x1f0>
     e36:	61 3a       	cpi	r22, 0xA1	; 161
     e38:	09 f0       	breq	.+2      	; 0xe3c <__vector_11+0x1c8>
     e3a:	83 c0       	rjmp	.+262    	; 0xf42 <__vector_11+0x2ce>
     e3c:	e8 ee       	ldi	r30, 0xE8	; 232
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 ff       	sbrs	r24, 0
     e44:	fd cf       	rjmp	.-6      	; 0xe40 <__vector_11+0x1cc>
     e46:	e4 e0       	ldi	r30, 0x04	; 4
     e48:	f1 e0       	ldi	r31, 0x01	; 1
     e4a:	2b e0       	ldi	r18, 0x0B	; 11
     e4c:	31 e0       	ldi	r19, 0x01	; 1
     e4e:	a1 ef       	ldi	r26, 0xF1	; 241
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	81 91       	ld	r24, Z+
     e54:	8c 93       	st	X, r24
     e56:	e2 17       	cp	r30, r18
     e58:	f3 07       	cpc	r31, r19
     e5a:	d9 f7       	brne	.-10     	; 0xe52 <__vector_11+0x1de>
     e5c:	8e ef       	ldi	r24, 0xFE	; 254
     e5e:	80 93 e8 00 	sts	0x00E8, r24
     e62:	76 c0       	rjmp	.+236    	; 0xf50 <__vector_11+0x2dc>
     e64:	80 32       	cpi	r24, 0x20	; 32
     e66:	d1 f4       	brne	.+52     	; 0xe9c <__vector_11+0x228>
     e68:	61 32       	cpi	r22, 0x21	; 33
     e6a:	09 f0       	breq	.+2      	; 0xe6e <__vector_11+0x1fa>
     e6c:	6a c0       	rjmp	.+212    	; 0xf42 <__vector_11+0x2ce>
     e6e:	e8 ee       	ldi	r30, 0xE8	; 232
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	82 ff       	sbrs	r24, 2
     e76:	fd cf       	rjmp	.-6      	; 0xe72 <__vector_11+0x1fe>
     e78:	e4 e0       	ldi	r30, 0x04	; 4
     e7a:	f1 e0       	ldi	r31, 0x01	; 1
     e7c:	2b e0       	ldi	r18, 0x0B	; 11
     e7e:	31 e0       	ldi	r19, 0x01	; 1
     e80:	a1 ef       	ldi	r26, 0xF1	; 241
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	8c 91       	ld	r24, X
     e86:	81 93       	st	Z+, r24
     e88:	e2 17       	cp	r30, r18
     e8a:	f3 07       	cpc	r31, r19
     e8c:	d9 f7       	brne	.-10     	; 0xe84 <__vector_11+0x210>
     e8e:	e8 ee       	ldi	r30, 0xE8	; 232
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	8b ef       	ldi	r24, 0xFB	; 251
     e94:	80 83       	st	Z, r24
     e96:	8e ef       	ldi	r24, 0xFE	; 254
     e98:	80 83       	st	Z, r24
     e9a:	5a c0       	rjmp	.+180    	; 0xf50 <__vector_11+0x2dc>
     e9c:	82 32       	cpi	r24, 0x22	; 34
     e9e:	71 f4       	brne	.+28     	; 0xebc <__vector_11+0x248>
     ea0:	61 32       	cpi	r22, 0x21	; 33
     ea2:	09 f0       	breq	.+2      	; 0xea6 <__vector_11+0x232>
     ea4:	4e c0       	rjmp	.+156    	; 0xf42 <__vector_11+0x2ce>
     ea6:	20 93 24 01 	sts	0x0124, r18
     eaa:	e8 ee       	ldi	r30, 0xE8	; 232
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	80 ff       	sbrs	r24, 0
     eb2:	fd cf       	rjmp	.-6      	; 0xeae <__vector_11+0x23a>
     eb4:	8e ef       	ldi	r24, 0xFE	; 254
     eb6:	80 93 e8 00 	sts	0x00E8, r24
     eba:	4a c0       	rjmp	.+148    	; 0xf50 <__vector_11+0x2dc>
     ebc:	81 11       	cpse	r24, r1
     ebe:	1a c0       	rjmp	.+52     	; 0xef4 <__vector_11+0x280>
     ec0:	e8 ee       	ldi	r30, 0xE8	; 232
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 ff       	sbrs	r24, 0
     ec8:	fd cf       	rjmp	.-6      	; 0xec4 <__vector_11+0x250>
     eca:	62 38       	cpi	r22, 0x82	; 130
     ecc:	51 f4       	brne	.+20     	; 0xee2 <__vector_11+0x26e>
     ece:	e9 ee       	ldi	r30, 0xE9	; 233
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	40 83       	st	Z, r20
     ed4:	80 91 eb 00 	lds	r24, 0x00EB
     ed8:	85 fb       	bst	r24, 5
     eda:	88 27       	eor	r24, r24
     edc:	80 f9       	bld	r24, 0
     ede:	10 82       	st	Z, r1
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <__vector_11+0x270>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	e1 ef       	ldi	r30, 0xF1	; 241
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 83       	st	Z, r24
     eea:	10 82       	st	Z, r1
     eec:	8e ef       	ldi	r24, 0xFE	; 254
     eee:	80 93 e8 00 	sts	0x00E8, r24
     ef2:	2e c0       	rjmp	.+92     	; 0xf50 <__vector_11+0x2dc>
     ef4:	98 2f       	mov	r25, r24
     ef6:	9d 7f       	andi	r25, 0xFD	; 253
     ef8:	91 30       	cpi	r25, 0x01	; 1
     efa:	19 f5       	brne	.+70     	; 0xf42 <__vector_11+0x2ce>
     efc:	62 30       	cpi	r22, 0x02	; 2
     efe:	09 f5       	brne	.+66     	; 0xf42 <__vector_11+0x2ce>
     f00:	23 2b       	or	r18, r19
     f02:	f9 f4       	brne	.+62     	; 0xf42 <__vector_11+0x2ce>
     f04:	4f 77       	andi	r20, 0x7F	; 127
     f06:	9f ef       	ldi	r25, 0xFF	; 255
     f08:	94 0f       	add	r25, r20
     f0a:	94 30       	cpi	r25, 0x04	; 4
     f0c:	d0 f4       	brcc	.+52     	; 0xf42 <__vector_11+0x2ce>
     f0e:	9e ef       	ldi	r25, 0xFE	; 254
     f10:	90 93 e8 00 	sts	0x00E8, r25
     f14:	40 93 e9 00 	sts	0x00E9, r20
     f18:	83 30       	cpi	r24, 0x03	; 3
     f1a:	21 f4       	brne	.+8      	; 0xf24 <__vector_11+0x2b0>
     f1c:	81 e2       	ldi	r24, 0x21	; 33
     f1e:	80 93 eb 00 	sts	0x00EB, r24
     f22:	16 c0       	rjmp	.+44     	; 0xf50 <__vector_11+0x2dc>
     f24:	89 e1       	ldi	r24, 0x19	; 25
     f26:	80 93 eb 00 	sts	0x00EB, r24
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <__vector_11+0x2c0>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	4a 95       	dec	r20
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <__vector_11+0x2bc>
     f38:	ea ee       	ldi	r30, 0xEA	; 234
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 83       	st	Z, r24
     f3e:	10 82       	st	Z, r1
     f40:	07 c0       	rjmp	.+14     	; 0xf50 <__vector_11+0x2dc>
     f42:	81 e2       	ldi	r24, 0x21	; 33
     f44:	80 93 eb 00 	sts	0x00EB, r24
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <__vector_11+0x2dc>
     f4a:	6c 93       	st	X, r22
     f4c:	21 11       	cpse	r18, r1
     f4e:	f7 ce       	rjmp	.-530    	; 0xd3e <__vector_11+0xca>
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <print_P>:
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	8c 01       	movw	r16, r24
     f82:	0f 5f       	subi	r16, 0xFF	; 255
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	fc 01       	movw	r30, r24
     f88:	c4 91       	lpm	r28, Z
     f8a:	cc 23       	and	r28, r28
     f8c:	71 f0       	breq	.+28     	; 0xfaa <print_P+0x30>
     f8e:	ca 30       	cpi	r28, 0x0A	; 10
     f90:	19 f4       	brne	.+6      	; 0xf98 <print_P+0x1e>
     f92:	8d e0       	ldi	r24, 0x0D	; 13
     f94:	0e 94 a1 05 	call	0xb42	; 0xb42 <m_usb_tx_char>
     f98:	8c 2f       	mov	r24, r28
     f9a:	0e 94 a1 05 	call	0xb42	; 0xb42 <m_usb_tx_char>
     f9e:	f8 01       	movw	r30, r16
     fa0:	c4 91       	lpm	r28, Z
     fa2:	0f 5f       	subi	r16, 0xFF	; 255
     fa4:	1f 4f       	sbci	r17, 0xFF	; 255
     fa6:	c1 11       	cpse	r28, r1
     fa8:	f2 cf       	rjmp	.-28     	; 0xf8e <print_P+0x14>
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	08 95       	ret

00000fb2 <m_usb_tx_int>:
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	27 97       	sbiw	r28, 0x07	; 7
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	8e 01       	movw	r16, r28
     fd0:	0f 5f       	subi	r16, 0xFF	; 255
     fd2:	1f 4f       	sbci	r17, 0xFF	; 255
     fd4:	27 e0       	ldi	r18, 0x07	; 7
     fd6:	f8 01       	movw	r30, r16
     fd8:	11 92       	st	Z+, r1
     fda:	2a 95       	dec	r18
     fdc:	e9 f7       	brne	.-6      	; 0xfd8 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     fde:	4a e0       	ldi	r20, 0x0A	; 10
     fe0:	b8 01       	movw	r22, r16
     fe2:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__itoa_ncheck>
     fe6:	7e 01       	movw	r14, r28
     fe8:	f8 e0       	ldi	r31, 0x08	; 8
     fea:	ef 0e       	add	r14, r31
     fec:	f1 1c       	adc	r15, r1
     fee:	f8 01       	movw	r30, r16
     ff0:	81 91       	ld	r24, Z+
     ff2:	8f 01       	movw	r16, r30
     ff4:	81 11       	cpse	r24, r1
     ff6:	0e 94 a1 05 	call	0xb42	; 0xb42 <m_usb_tx_char>
     ffa:	0e 15       	cp	r16, r14
     ffc:	1f 05       	cpc	r17, r15
     ffe:	b9 f7       	brne	.-18     	; 0xfee <m_usb_tx_int+0x3c>
    1000:	27 96       	adiw	r28, 0x07	; 7
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	08 95       	ret

0000101a <twi_wait>:
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	ec eb       	ldi	r30, 0xBC	; 188
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	88 23       	and	r24, r24
    1026:	34 f0       	brlt	.+12     	; 0x1034 <twi_wait+0x1a>
    1028:	2f 5f       	subi	r18, 0xFF	; 255
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	29 3e       	cpi	r18, 0xE9	; 233
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	38 07       	cpc	r19, r24
    1032:	b9 f7       	brne	.-18     	; 0x1022 <twi_wait+0x8>
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	28 3e       	cpi	r18, 0xE8	; 232
    1038:	33 40       	sbci	r19, 0x03	; 3
    103a:	09 f4       	brne	.+2      	; 0x103e <twi_wait+0x24>
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	08 95       	ret

00001040 <send_byte>:
    1040:	80 93 bb 00 	sts	0x00BB, r24
    1044:	84 e8       	ldi	r24, 0x84	; 132
    1046:	80 93 bc 00 	sts	0x00BC, r24
    104a:	0e 94 0d 08 	call	0x101a	; 0x101a <twi_wait>
    104e:	88 23       	and	r24, r24
    1050:	19 f0       	breq	.+6      	; 0x1058 <send_byte+0x18>
    1052:	80 91 b9 00 	lds	r24, 0x00B9
    1056:	88 7f       	andi	r24, 0xF8	; 248
    1058:	08 95       	ret

0000105a <start_write>:
    105a:	cf 93       	push	r28
    105c:	c8 2f       	mov	r28, r24
    105e:	94 ea       	ldi	r25, 0xA4	; 164
    1060:	90 93 bc 00 	sts	0x00BC, r25
    1064:	0e 94 0d 08 	call	0x101a	; 0x101a <twi_wait>
    1068:	88 23       	and	r24, r24
    106a:	61 f0       	breq	.+24     	; 0x1084 <start_write+0x2a>
    106c:	8c 2f       	mov	r24, r28
    106e:	88 0f       	add	r24, r24
    1070:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    1074:	80 32       	cpi	r24, 0x20	; 32
    1076:	29 f4       	brne	.+10     	; 0x1082 <start_write+0x28>
    1078:	84 e9       	ldi	r24, 0x94	; 148
    107a:	80 93 bc 00 	sts	0x00BC, r24
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <start_write+0x2a>
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <m_wii_open>:
    1088:	0e 94 77 05 	call	0xaee	; 0xaee <m_bus_init>
    108c:	88 e5       	ldi	r24, 0x58	; 88
    108e:	0e 94 2d 08 	call	0x105a	; 0x105a <start_write>
    1092:	88 23       	and	r24, r24
    1094:	09 f4       	brne	.+2      	; 0x1098 <m_wii_open+0x10>
    1096:	cd c0       	rjmp	.+410    	; 0x1232 <m_wii_open+0x1aa>
    1098:	80 e3       	ldi	r24, 0x30	; 48
    109a:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    109e:	88 23       	and	r24, r24
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <m_wii_open+0x1c>
    10a2:	c9 c0       	rjmp	.+402    	; 0x1236 <m_wii_open+0x1ae>
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    10aa:	88 23       	and	r24, r24
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <m_wii_open+0x28>
    10ae:	c5 c0       	rjmp	.+394    	; 0x123a <m_wii_open+0x1b2>
    10b0:	84 e9       	ldi	r24, 0x94	; 148
    10b2:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10b6:	83 ec       	ldi	r24, 0xC3	; 195
    10b8:	99 e0       	ldi	r25, 0x09	; 9
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <m_wii_open+0x32>
    10be:	00 c0       	rjmp	.+0      	; 0x10c0 <m_wii_open+0x38>
    10c0:	00 00       	nop
    10c2:	88 e5       	ldi	r24, 0x58	; 88
    10c4:	0e 94 2d 08 	call	0x105a	; 0x105a <start_write>
    10c8:	88 23       	and	r24, r24
    10ca:	09 f4       	brne	.+2      	; 0x10ce <m_wii_open+0x46>
    10cc:	b8 c0       	rjmp	.+368    	; 0x123e <m_wii_open+0x1b6>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    10d4:	88 23       	and	r24, r24
    10d6:	09 f4       	brne	.+2      	; 0x10da <m_wii_open+0x52>
    10d8:	b4 c0       	rjmp	.+360    	; 0x1242 <m_wii_open+0x1ba>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    10e0:	88 23       	and	r24, r24
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <m_wii_open+0x5e>
    10e4:	b0 c0       	rjmp	.+352    	; 0x1246 <m_wii_open+0x1be>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    10ec:	88 23       	and	r24, r24
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <m_wii_open+0x6a>
    10f0:	ac c0       	rjmp	.+344    	; 0x124a <m_wii_open+0x1c2>
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    10f8:	88 23       	and	r24, r24
    10fa:	09 f4       	brne	.+2      	; 0x10fe <m_wii_open+0x76>
    10fc:	a8 c0       	rjmp	.+336    	; 0x124e <m_wii_open+0x1c6>
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    1104:	88 23       	and	r24, r24
    1106:	09 f4       	brne	.+2      	; 0x110a <m_wii_open+0x82>
    1108:	a4 c0       	rjmp	.+328    	; 0x1252 <m_wii_open+0x1ca>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    1110:	88 23       	and	r24, r24
    1112:	09 f4       	brne	.+2      	; 0x1116 <m_wii_open+0x8e>
    1114:	a0 c0       	rjmp	.+320    	; 0x1256 <m_wii_open+0x1ce>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    111c:	88 23       	and	r24, r24
    111e:	09 f4       	brne	.+2      	; 0x1122 <m_wii_open+0x9a>
    1120:	9c c0       	rjmp	.+312    	; 0x125a <m_wii_open+0x1d2>
    1122:	80 e9       	ldi	r24, 0x90	; 144
    1124:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    1128:	88 23       	and	r24, r24
    112a:	09 f4       	brne	.+2      	; 0x112e <m_wii_open+0xa6>
    112c:	98 c0       	rjmp	.+304    	; 0x125e <m_wii_open+0x1d6>
    112e:	84 e9       	ldi	r24, 0x94	; 148
    1130:	80 93 bc 00 	sts	0x00BC, r24
    1134:	83 ec       	ldi	r24, 0xC3	; 195
    1136:	99 e0       	ldi	r25, 0x09	; 9
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <m_wii_open+0xb0>
    113c:	00 c0       	rjmp	.+0      	; 0x113e <m_wii_open+0xb6>
    113e:	00 00       	nop
    1140:	88 e5       	ldi	r24, 0x58	; 88
    1142:	0e 94 2d 08 	call	0x105a	; 0x105a <start_write>
    1146:	88 23       	and	r24, r24
    1148:	09 f4       	brne	.+2      	; 0x114c <m_wii_open+0xc4>
    114a:	8b c0       	rjmp	.+278    	; 0x1262 <m_wii_open+0x1da>
    114c:	87 e0       	ldi	r24, 0x07	; 7
    114e:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    1152:	88 23       	and	r24, r24
    1154:	09 f4       	brne	.+2      	; 0x1158 <m_wii_open+0xd0>
    1156:	87 c0       	rjmp	.+270    	; 0x1266 <m_wii_open+0x1de>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    115e:	88 23       	and	r24, r24
    1160:	09 f4       	brne	.+2      	; 0x1164 <m_wii_open+0xdc>
    1162:	83 c0       	rjmp	.+262    	; 0x126a <m_wii_open+0x1e2>
    1164:	81 e4       	ldi	r24, 0x41	; 65
    1166:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    116a:	88 23       	and	r24, r24
    116c:	09 f4       	brne	.+2      	; 0x1170 <m_wii_open+0xe8>
    116e:	7f c0       	rjmp	.+254    	; 0x126e <m_wii_open+0x1e6>
    1170:	84 e9       	ldi	r24, 0x94	; 148
    1172:	80 93 bc 00 	sts	0x00BC, r24
    1176:	83 ec       	ldi	r24, 0xC3	; 195
    1178:	99 e0       	ldi	r25, 0x09	; 9
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <m_wii_open+0xf2>
    117e:	00 c0       	rjmp	.+0      	; 0x1180 <m_wii_open+0xf8>
    1180:	00 00       	nop
    1182:	88 e5       	ldi	r24, 0x58	; 88
    1184:	0e 94 2d 08 	call	0x105a	; 0x105a <start_write>
    1188:	88 23       	and	r24, r24
    118a:	09 f4       	brne	.+2      	; 0x118e <m_wii_open+0x106>
    118c:	72 c0       	rjmp	.+228    	; 0x1272 <m_wii_open+0x1ea>
    118e:	8a e1       	ldi	r24, 0x1A	; 26
    1190:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    1194:	88 23       	and	r24, r24
    1196:	09 f4       	brne	.+2      	; 0x119a <m_wii_open+0x112>
    1198:	6e c0       	rjmp	.+220    	; 0x1276 <m_wii_open+0x1ee>
    119a:	80 e4       	ldi	r24, 0x40	; 64
    119c:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    11a0:	88 23       	and	r24, r24
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <m_wii_open+0x11e>
    11a4:	6a c0       	rjmp	.+212    	; 0x127a <m_wii_open+0x1f2>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    11ac:	88 23       	and	r24, r24
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <m_wii_open+0x12a>
    11b0:	66 c0       	rjmp	.+204    	; 0x127e <m_wii_open+0x1f6>
    11b2:	84 e9       	ldi	r24, 0x94	; 148
    11b4:	80 93 bc 00 	sts	0x00BC, r24
    11b8:	83 ec       	ldi	r24, 0xC3	; 195
    11ba:	99 e0       	ldi	r25, 0x09	; 9
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <m_wii_open+0x134>
    11c0:	00 c0       	rjmp	.+0      	; 0x11c2 <m_wii_open+0x13a>
    11c2:	00 00       	nop
    11c4:	88 e5       	ldi	r24, 0x58	; 88
    11c6:	0e 94 2d 08 	call	0x105a	; 0x105a <start_write>
    11ca:	88 23       	and	r24, r24
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <m_wii_open+0x148>
    11ce:	59 c0       	rjmp	.+178    	; 0x1282 <m_wii_open+0x1fa>
    11d0:	83 e3       	ldi	r24, 0x33	; 51
    11d2:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    11d6:	88 23       	and	r24, r24
    11d8:	09 f4       	brne	.+2      	; 0x11dc <m_wii_open+0x154>
    11da:	55 c0       	rjmp	.+170    	; 0x1286 <m_wii_open+0x1fe>
    11dc:	83 e0       	ldi	r24, 0x03	; 3
    11de:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    11e2:	88 23       	and	r24, r24
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <m_wii_open+0x160>
    11e6:	51 c0       	rjmp	.+162    	; 0x128a <m_wii_open+0x202>
    11e8:	84 e9       	ldi	r24, 0x94	; 148
    11ea:	80 93 bc 00 	sts	0x00BC, r24
    11ee:	83 ec       	ldi	r24, 0xC3	; 195
    11f0:	99 e0       	ldi	r25, 0x09	; 9
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <m_wii_open+0x16a>
    11f6:	00 c0       	rjmp	.+0      	; 0x11f8 <m_wii_open+0x170>
    11f8:	00 00       	nop
    11fa:	88 e5       	ldi	r24, 0x58	; 88
    11fc:	0e 94 2d 08 	call	0x105a	; 0x105a <start_write>
    1200:	88 23       	and	r24, r24
    1202:	09 f4       	brne	.+2      	; 0x1206 <m_wii_open+0x17e>
    1204:	44 c0       	rjmp	.+136    	; 0x128e <m_wii_open+0x206>
    1206:	80 e3       	ldi	r24, 0x30	; 48
    1208:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    120c:	88 23       	and	r24, r24
    120e:	09 f4       	brne	.+2      	; 0x1212 <m_wii_open+0x18a>
    1210:	40 c0       	rjmp	.+128    	; 0x1292 <m_wii_open+0x20a>
    1212:	88 e0       	ldi	r24, 0x08	; 8
    1214:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    1218:	88 23       	and	r24, r24
    121a:	e9 f1       	breq	.+122    	; 0x1296 <m_wii_open+0x20e>
    121c:	84 e9       	ldi	r24, 0x94	; 148
    121e:	80 93 bc 00 	sts	0x00BC, r24
    1222:	83 ec       	ldi	r24, 0xC3	; 195
    1224:	99 e0       	ldi	r25, 0x09	; 9
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <m_wii_open+0x19e>
    122a:	00 c0       	rjmp	.+0      	; 0x122c <m_wii_open+0x1a4>
    122c:	00 00       	nop
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	08 95       	ret
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	08 95       	ret
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	08 95       	ret
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	08 95       	ret
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	08 95       	ret
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	08 95       	ret
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	08 95       	ret
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	08 95       	ret
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	08 95       	ret
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	08 95       	ret
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	08 95       	ret
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	08 95       	ret
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	08 95       	ret
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	08 95       	ret
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	08 95       	ret
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	08 95       	ret
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	08 95       	ret
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	08 95       	ret
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	08 95       	ret
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	08 95       	ret
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	08 95       	ret
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	08 95       	ret
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	08 95       	ret
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	08 95       	ret
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	08 95       	ret
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	08 95       	ret
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	08 95       	ret

0000129a <start_read>:
    129a:	cf 93       	push	r28
    129c:	c8 2f       	mov	r28, r24
    129e:	84 ea       	ldi	r24, 0xA4	; 164
    12a0:	80 93 bc 00 	sts	0x00BC, r24
    12a4:	0e 94 0d 08 	call	0x101a	; 0x101a <twi_wait>
    12a8:	88 23       	and	r24, r24
    12aa:	69 f0       	breq	.+26     	; 0x12c6 <start_read+0x2c>
    12ac:	8c 2f       	mov	r24, r28
    12ae:	88 0f       	add	r24, r24
    12b0:	8f 5f       	subi	r24, 0xFF	; 255
    12b2:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    12b6:	88 34       	cpi	r24, 0x48	; 72
    12b8:	29 f4       	brne	.+10     	; 0x12c4 <start_read+0x2a>
    12ba:	84 e9       	ldi	r24, 0x94	; 148
    12bc:	80 93 bc 00 	sts	0x00BC, r24
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <start_read+0x2c>
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	cf 91       	pop	r28
    12c8:	08 95       	ret

000012ca <m_wii_read>:
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	60 97       	sbiw	r28, 0x10	; 16
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	8c 01       	movw	r16, r24
    12e4:	fe 01       	movw	r30, r28
    12e6:	31 96       	adiw	r30, 0x01	; 1
    12e8:	80 e1       	ldi	r24, 0x10	; 16
    12ea:	df 01       	movw	r26, r30
    12ec:	1d 92       	st	X+, r1
    12ee:	8a 95       	dec	r24
    12f0:	e9 f7       	brne	.-6      	; 0x12ec <m_wii_read+0x22>
    12f2:	88 e5       	ldi	r24, 0x58	; 88
    12f4:	0e 94 2d 08 	call	0x105a	; 0x105a <start_write>
    12f8:	88 23       	and	r24, r24
    12fa:	09 f4       	brne	.+2      	; 0x12fe <m_wii_read+0x34>
    12fc:	69 c0       	rjmp	.+210    	; 0x13d0 <m_wii_read+0x106>
    12fe:	86 e3       	ldi	r24, 0x36	; 54
    1300:	0e 94 20 08 	call	0x1040	; 0x1040 <send_byte>
    1304:	88 23       	and	r24, r24
    1306:	09 f4       	brne	.+2      	; 0x130a <m_wii_read+0x40>
    1308:	65 c0       	rjmp	.+202    	; 0x13d4 <m_wii_read+0x10a>
    130a:	84 e9       	ldi	r24, 0x94	; 148
    130c:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1310:	b8 e0       	ldi	r27, 0x08	; 8
    1312:	ba 95       	dec	r27
    1314:	f1 f7       	brne	.-4      	; 0x1312 <m_wii_read+0x48>
    1316:	00 00       	nop
    1318:	88 e5       	ldi	r24, 0x58	; 88
    131a:	0e 94 4d 09 	call	0x129a	; 0x129a <start_read>
    131e:	88 23       	and	r24, r24
    1320:	09 f4       	brne	.+2      	; 0x1324 <m_wii_read+0x5a>
    1322:	5a c0       	rjmp	.+180    	; 0x13d8 <m_wii_read+0x10e>
    1324:	be 01       	movw	r22, r28
    1326:	6f 5f       	subi	r22, 0xFF	; 255
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	ae 01       	movw	r20, r28
    132c:	40 5f       	subi	r20, 0xF0	; 240
    132e:	5f 4f       	sbci	r21, 0xFF	; 255
    1330:	ec eb       	ldi	r30, 0xBC	; 188
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	84 ec       	ldi	r24, 0xC4	; 196
    1336:	2b eb       	ldi	r18, 0xBB	; 187
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	80 83       	st	Z, r24
    133c:	90 81       	ld	r25, Z
    133e:	99 23       	and	r25, r25
    1340:	ec f7       	brge	.-6      	; 0x133c <m_wii_read+0x72>
    1342:	d9 01       	movw	r26, r18
    1344:	9c 91       	ld	r25, X
    1346:	db 01       	movw	r26, r22
    1348:	9d 93       	st	X+, r25
    134a:	bd 01       	movw	r22, r26
    134c:	a4 17       	cp	r26, r20
    134e:	b5 07       	cpc	r27, r21
    1350:	a1 f7       	brne	.-24     	; 0x133a <m_wii_read+0x70>
    1352:	84 e8       	ldi	r24, 0x84	; 132
    1354:	80 93 bc 00 	sts	0x00BC, r24
    1358:	ec eb       	ldi	r30, 0xBC	; 188
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	88 23       	and	r24, r24
    1360:	ec f7       	brge	.-6      	; 0x135c <m_wii_read+0x92>
    1362:	80 91 bb 00 	lds	r24, 0x00BB
    1366:	88 8b       	std	Y+16, r24	; 0x10
    1368:	84 e9       	ldi	r24, 0x94	; 148
    136a:	80 93 bc 00 	sts	0x00BC, r24
    136e:	be 01       	movw	r22, r28
    1370:	6c 5f       	subi	r22, 0xFC	; 252
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	f8 01       	movw	r30, r16
    1376:	08 5e       	subi	r16, 0xE8	; 232
    1378:	1f 4f       	sbci	r17, 0xFF	; 255
    137a:	db 01       	movw	r26, r22
    137c:	2c 91       	ld	r18, X
    137e:	32 2f       	mov	r19, r18
    1380:	30 73       	andi	r19, 0x30	; 48
    1382:	cb 01       	movw	r24, r22
    1384:	02 97       	sbiw	r24, 0x02	; 2
    1386:	dc 01       	movw	r26, r24
    1388:	8c 91       	ld	r24, X
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	b0 e1       	ldi	r27, 0x10	; 16
    138e:	3b 9f       	mul	r19, r27
    1390:	80 0d       	add	r24, r0
    1392:	91 1d       	adc	r25, r1
    1394:	11 24       	eor	r1, r1
    1396:	91 83       	std	Z+1, r25	; 0x01
    1398:	80 83       	st	Z, r24
    139a:	42 2f       	mov	r20, r18
    139c:	40 7c       	andi	r20, 0xC0	; 192
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	44 0f       	add	r20, r20
    13a2:	55 1f       	adc	r21, r21
    13a4:	44 0f       	add	r20, r20
    13a6:	55 1f       	adc	r21, r21
    13a8:	cb 01       	movw	r24, r22
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	dc 01       	movw	r26, r24
    13ae:	8c 91       	ld	r24, X
    13b0:	48 0f       	add	r20, r24
    13b2:	51 1d       	adc	r21, r1
    13b4:	53 83       	std	Z+3, r21	; 0x03
    13b6:	42 83       	std	Z+2, r20	; 0x02
    13b8:	2f 70       	andi	r18, 0x0F	; 15
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	35 83       	std	Z+5, r19	; 0x05
    13be:	24 83       	std	Z+4, r18	; 0x04
    13c0:	6d 5f       	subi	r22, 0xFD	; 253
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	36 96       	adiw	r30, 0x06	; 6
    13c6:	e0 17       	cp	r30, r16
    13c8:	f1 07       	cpc	r31, r17
    13ca:	b9 f6       	brne	.-82     	; 0x137a <m_wii_read+0xb0>
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	05 c0       	rjmp	.+10     	; 0x13da <m_wii_read+0x110>
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	03 c0       	rjmp	.+6      	; 0x13da <m_wii_read+0x110>
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <m_wii_read+0x110>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	60 96       	adiw	r28, 0x10	; 16
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	08 95       	ret

000013f0 <__subsf3>:
    13f0:	50 58       	subi	r21, 0x80	; 128

000013f2 <__addsf3>:
    13f2:	bb 27       	eor	r27, r27
    13f4:	aa 27       	eor	r26, r26
    13f6:	0e 94 10 0a 	call	0x1420	; 0x1420 <__addsf3x>
    13fa:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__fp_round>
    13fe:	0e 94 ed 0b 	call	0x17da	; 0x17da <__fp_pscA>
    1402:	38 f0       	brcs	.+14     	; 0x1412 <__addsf3+0x20>
    1404:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__fp_pscB>
    1408:	20 f0       	brcs	.+8      	; 0x1412 <__addsf3+0x20>
    140a:	39 f4       	brne	.+14     	; 0x141a <__addsf3+0x28>
    140c:	9f 3f       	cpi	r25, 0xFF	; 255
    140e:	19 f4       	brne	.+6      	; 0x1416 <__addsf3+0x24>
    1410:	26 f4       	brtc	.+8      	; 0x141a <__addsf3+0x28>
    1412:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_nan>
    1416:	0e f4       	brtc	.+2      	; 0x141a <__addsf3+0x28>
    1418:	e0 95       	com	r30
    141a:	e7 fb       	bst	r30, 7
    141c:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__fp_inf>

00001420 <__addsf3x>:
    1420:	e9 2f       	mov	r30, r25
    1422:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_split3>
    1426:	58 f3       	brcs	.-42     	; 0x13fe <__addsf3+0xc>
    1428:	ba 17       	cp	r27, r26
    142a:	62 07       	cpc	r22, r18
    142c:	73 07       	cpc	r23, r19
    142e:	84 07       	cpc	r24, r20
    1430:	95 07       	cpc	r25, r21
    1432:	20 f0       	brcs	.+8      	; 0x143c <__addsf3x+0x1c>
    1434:	79 f4       	brne	.+30     	; 0x1454 <__addsf3x+0x34>
    1436:	a6 f5       	brtc	.+104    	; 0x14a0 <__addsf3x+0x80>
    1438:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_zero>
    143c:	0e f4       	brtc	.+2      	; 0x1440 <__addsf3x+0x20>
    143e:	e0 95       	com	r30
    1440:	0b 2e       	mov	r0, r27
    1442:	ba 2f       	mov	r27, r26
    1444:	a0 2d       	mov	r26, r0
    1446:	0b 01       	movw	r0, r22
    1448:	b9 01       	movw	r22, r18
    144a:	90 01       	movw	r18, r0
    144c:	0c 01       	movw	r0, r24
    144e:	ca 01       	movw	r24, r20
    1450:	a0 01       	movw	r20, r0
    1452:	11 24       	eor	r1, r1
    1454:	ff 27       	eor	r31, r31
    1456:	59 1b       	sub	r21, r25
    1458:	99 f0       	breq	.+38     	; 0x1480 <__addsf3x+0x60>
    145a:	59 3f       	cpi	r21, 0xF9	; 249
    145c:	50 f4       	brcc	.+20     	; 0x1472 <__addsf3x+0x52>
    145e:	50 3e       	cpi	r21, 0xE0	; 224
    1460:	68 f1       	brcs	.+90     	; 0x14bc <__addsf3x+0x9c>
    1462:	1a 16       	cp	r1, r26
    1464:	f0 40       	sbci	r31, 0x00	; 0
    1466:	a2 2f       	mov	r26, r18
    1468:	23 2f       	mov	r18, r19
    146a:	34 2f       	mov	r19, r20
    146c:	44 27       	eor	r20, r20
    146e:	58 5f       	subi	r21, 0xF8	; 248
    1470:	f3 cf       	rjmp	.-26     	; 0x1458 <__addsf3x+0x38>
    1472:	46 95       	lsr	r20
    1474:	37 95       	ror	r19
    1476:	27 95       	ror	r18
    1478:	a7 95       	ror	r26
    147a:	f0 40       	sbci	r31, 0x00	; 0
    147c:	53 95       	inc	r21
    147e:	c9 f7       	brne	.-14     	; 0x1472 <__addsf3x+0x52>
    1480:	7e f4       	brtc	.+30     	; 0x14a0 <__addsf3x+0x80>
    1482:	1f 16       	cp	r1, r31
    1484:	ba 0b       	sbc	r27, r26
    1486:	62 0b       	sbc	r22, r18
    1488:	73 0b       	sbc	r23, r19
    148a:	84 0b       	sbc	r24, r20
    148c:	ba f0       	brmi	.+46     	; 0x14bc <__addsf3x+0x9c>
    148e:	91 50       	subi	r25, 0x01	; 1
    1490:	a1 f0       	breq	.+40     	; 0x14ba <__addsf3x+0x9a>
    1492:	ff 0f       	add	r31, r31
    1494:	bb 1f       	adc	r27, r27
    1496:	66 1f       	adc	r22, r22
    1498:	77 1f       	adc	r23, r23
    149a:	88 1f       	adc	r24, r24
    149c:	c2 f7       	brpl	.-16     	; 0x148e <__addsf3x+0x6e>
    149e:	0e c0       	rjmp	.+28     	; 0x14bc <__addsf3x+0x9c>
    14a0:	ba 0f       	add	r27, r26
    14a2:	62 1f       	adc	r22, r18
    14a4:	73 1f       	adc	r23, r19
    14a6:	84 1f       	adc	r24, r20
    14a8:	48 f4       	brcc	.+18     	; 0x14bc <__addsf3x+0x9c>
    14aa:	87 95       	ror	r24
    14ac:	77 95       	ror	r23
    14ae:	67 95       	ror	r22
    14b0:	b7 95       	ror	r27
    14b2:	f7 95       	ror	r31
    14b4:	9e 3f       	cpi	r25, 0xFE	; 254
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <__addsf3x+0x9a>
    14b8:	b0 cf       	rjmp	.-160    	; 0x141a <__addsf3+0x28>
    14ba:	93 95       	inc	r25
    14bc:	88 0f       	add	r24, r24
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <__addsf3x+0xa2>
    14c0:	99 27       	eor	r25, r25
    14c2:	ee 0f       	add	r30, r30
    14c4:	97 95       	ror	r25
    14c6:	87 95       	ror	r24
    14c8:	08 95       	ret
    14ca:	0e 94 ed 0b 	call	0x17da	; 0x17da <__fp_pscA>
    14ce:	60 f0       	brcs	.+24     	; 0x14e8 <__addsf3x+0xc8>
    14d0:	80 e8       	ldi	r24, 0x80	; 128
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <__addsf3x+0xb8>
    14d6:	9e ef       	ldi	r25, 0xFE	; 254
    14d8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__fp_pscB>
    14dc:	28 f0       	brcs	.+10     	; 0x14e8 <__addsf3x+0xc8>
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	51 e0       	ldi	r21, 0x01	; 1
    14e2:	71 f4       	brne	.+28     	; 0x1500 <atan2+0x10>
    14e4:	5e ef       	ldi	r21, 0xFE	; 254
    14e6:	0c c0       	rjmp	.+24     	; 0x1500 <atan2+0x10>
    14e8:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_nan>
    14ec:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_zero>

000014f0 <atan2>:
    14f0:	e9 2f       	mov	r30, r25
    14f2:	e0 78       	andi	r30, 0x80	; 128
    14f4:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_split3>
    14f8:	40 f3       	brcs	.-48     	; 0x14ca <__addsf3x+0xaa>
    14fa:	09 2e       	mov	r0, r25
    14fc:	05 2a       	or	r0, r21
    14fe:	b1 f3       	breq	.-20     	; 0x14ec <__addsf3x+0xcc>
    1500:	26 17       	cp	r18, r22
    1502:	37 07       	cpc	r19, r23
    1504:	48 07       	cpc	r20, r24
    1506:	59 07       	cpc	r21, r25
    1508:	38 f0       	brcs	.+14     	; 0x1518 <atan2+0x28>
    150a:	0e 2e       	mov	r0, r30
    150c:	07 f8       	bld	r0, 7
    150e:	e0 25       	eor	r30, r0
    1510:	69 f0       	breq	.+26     	; 0x152c <atan2+0x3c>
    1512:	e0 25       	eor	r30, r0
    1514:	e0 64       	ori	r30, 0x40	; 64
    1516:	0a c0       	rjmp	.+20     	; 0x152c <atan2+0x3c>
    1518:	ef 63       	ori	r30, 0x3F	; 63
    151a:	07 f8       	bld	r0, 7
    151c:	00 94       	com	r0
    151e:	07 fa       	bst	r0, 7
    1520:	db 01       	movw	r26, r22
    1522:	b9 01       	movw	r22, r18
    1524:	9d 01       	movw	r18, r26
    1526:	dc 01       	movw	r26, r24
    1528:	ca 01       	movw	r24, r20
    152a:	ad 01       	movw	r20, r26
    152c:	ef 93       	push	r30
    152e:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3_pse>
    1532:	0e 94 26 0c 	call	0x184c	; 0x184c <__fp_round>
    1536:	0e 94 a8 0a 	call	0x1550	; 0x1550 <atan>
    153a:	5f 91       	pop	r21
    153c:	55 23       	and	r21, r21
    153e:	39 f0       	breq	.+14     	; 0x154e <atan2+0x5e>
    1540:	2b ed       	ldi	r18, 0xDB	; 219
    1542:	3f e0       	ldi	r19, 0x0F	; 15
    1544:	49 e4       	ldi	r20, 0x49	; 73
    1546:	50 fd       	sbrc	r21, 0
    1548:	49 ec       	ldi	r20, 0xC9	; 201
    154a:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__addsf3>
    154e:	08 95       	ret

00001550 <atan>:
    1550:	df 93       	push	r29
    1552:	dd 27       	eor	r29, r29
    1554:	b9 2f       	mov	r27, r25
    1556:	bf 77       	andi	r27, 0x7F	; 127
    1558:	40 e8       	ldi	r20, 0x80	; 128
    155a:	5f e3       	ldi	r21, 0x3F	; 63
    155c:	16 16       	cp	r1, r22
    155e:	17 06       	cpc	r1, r23
    1560:	48 07       	cpc	r20, r24
    1562:	5b 07       	cpc	r21, r27
    1564:	18 f4       	brcc	.+6      	; 0x156c <atan+0x1c>
    1566:	d9 2f       	mov	r29, r25
    1568:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <inverse>
    156c:	9f 93       	push	r25
    156e:	8f 93       	push	r24
    1570:	7f 93       	push	r23
    1572:	6f 93       	push	r22
    1574:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <square>
    1578:	ec ea       	ldi	r30, 0xAC	; 172
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	0e 94 c6 0b 	call	0x178c	; 0x178c <__fp_powser>
    1580:	0e 94 26 0c 	call	0x184c	; 0x184c <__fp_round>
    1584:	2f 91       	pop	r18
    1586:	3f 91       	pop	r19
    1588:	4f 91       	pop	r20
    158a:	5f 91       	pop	r21
    158c:	0e 94 8f 0c 	call	0x191e	; 0x191e <__mulsf3x>
    1590:	dd 23       	and	r29, r29
    1592:	51 f0       	breq	.+20     	; 0x15a8 <atan+0x58>
    1594:	90 58       	subi	r25, 0x80	; 128
    1596:	a2 ea       	ldi	r26, 0xA2	; 162
    1598:	2a ed       	ldi	r18, 0xDA	; 218
    159a:	3f e0       	ldi	r19, 0x0F	; 15
    159c:	49 ec       	ldi	r20, 0xC9	; 201
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	d0 78       	andi	r29, 0x80	; 128
    15a2:	5d 27       	eor	r21, r29
    15a4:	0e 94 10 0a 	call	0x1420	; 0x1420 <__addsf3x>
    15a8:	df 91       	pop	r29
    15aa:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__fp_round>

000015ae <cos>:
    15ae:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fp_rempio2>
    15b2:	e3 95       	inc	r30
    15b4:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__fp_sinus>
    15b8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__fp_pscB>
    15bc:	58 f0       	brcs	.+22     	; 0x15d4 <cos+0x26>
    15be:	0e 94 ed 0b 	call	0x17da	; 0x17da <__fp_pscA>
    15c2:	40 f0       	brcs	.+16     	; 0x15d4 <cos+0x26>
    15c4:	29 f4       	brne	.+10     	; 0x15d0 <cos+0x22>
    15c6:	5f 3f       	cpi	r21, 0xFF	; 255
    15c8:	29 f0       	breq	.+10     	; 0x15d4 <cos+0x26>
    15ca:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__fp_inf>
    15ce:	51 11       	cpse	r21, r1
    15d0:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_szero>
    15d4:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_nan>

000015d8 <__divsf3x>:
    15d8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_split3>
    15dc:	68 f3       	brcs	.-38     	; 0x15b8 <cos+0xa>

000015de <__divsf3_pse>:
    15de:	99 23       	and	r25, r25
    15e0:	b1 f3       	breq	.-20     	; 0x15ce <cos+0x20>
    15e2:	55 23       	and	r21, r21
    15e4:	91 f3       	breq	.-28     	; 0x15ca <cos+0x1c>
    15e6:	95 1b       	sub	r25, r21
    15e8:	55 0b       	sbc	r21, r21
    15ea:	bb 27       	eor	r27, r27
    15ec:	aa 27       	eor	r26, r26
    15ee:	62 17       	cp	r22, r18
    15f0:	73 07       	cpc	r23, r19
    15f2:	84 07       	cpc	r24, r20
    15f4:	38 f0       	brcs	.+14     	; 0x1604 <__divsf3_pse+0x26>
    15f6:	9f 5f       	subi	r25, 0xFF	; 255
    15f8:	5f 4f       	sbci	r21, 0xFF	; 255
    15fa:	22 0f       	add	r18, r18
    15fc:	33 1f       	adc	r19, r19
    15fe:	44 1f       	adc	r20, r20
    1600:	aa 1f       	adc	r26, r26
    1602:	a9 f3       	breq	.-22     	; 0x15ee <__divsf3_pse+0x10>
    1604:	35 d0       	rcall	.+106    	; 0x1670 <__divsf3_pse+0x92>
    1606:	0e 2e       	mov	r0, r30
    1608:	3a f0       	brmi	.+14     	; 0x1618 <__divsf3_pse+0x3a>
    160a:	e0 e8       	ldi	r30, 0x80	; 128
    160c:	32 d0       	rcall	.+100    	; 0x1672 <__divsf3_pse+0x94>
    160e:	91 50       	subi	r25, 0x01	; 1
    1610:	50 40       	sbci	r21, 0x00	; 0
    1612:	e6 95       	lsr	r30
    1614:	00 1c       	adc	r0, r0
    1616:	ca f7       	brpl	.-14     	; 0x160a <__divsf3_pse+0x2c>
    1618:	2b d0       	rcall	.+86     	; 0x1670 <__divsf3_pse+0x92>
    161a:	fe 2f       	mov	r31, r30
    161c:	29 d0       	rcall	.+82     	; 0x1670 <__divsf3_pse+0x92>
    161e:	66 0f       	add	r22, r22
    1620:	77 1f       	adc	r23, r23
    1622:	88 1f       	adc	r24, r24
    1624:	bb 1f       	adc	r27, r27
    1626:	26 17       	cp	r18, r22
    1628:	37 07       	cpc	r19, r23
    162a:	48 07       	cpc	r20, r24
    162c:	ab 07       	cpc	r26, r27
    162e:	b0 e8       	ldi	r27, 0x80	; 128
    1630:	09 f0       	breq	.+2      	; 0x1634 <__divsf3_pse+0x56>
    1632:	bb 0b       	sbc	r27, r27
    1634:	80 2d       	mov	r24, r0
    1636:	bf 01       	movw	r22, r30
    1638:	ff 27       	eor	r31, r31
    163a:	93 58       	subi	r25, 0x83	; 131
    163c:	5f 4f       	sbci	r21, 0xFF	; 255
    163e:	3a f0       	brmi	.+14     	; 0x164e <__divsf3_pse+0x70>
    1640:	9e 3f       	cpi	r25, 0xFE	; 254
    1642:	51 05       	cpc	r21, r1
    1644:	78 f0       	brcs	.+30     	; 0x1664 <__divsf3_pse+0x86>
    1646:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__fp_inf>
    164a:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_szero>
    164e:	5f 3f       	cpi	r21, 0xFF	; 255
    1650:	e4 f3       	brlt	.-8      	; 0x164a <__divsf3_pse+0x6c>
    1652:	98 3e       	cpi	r25, 0xE8	; 232
    1654:	d4 f3       	brlt	.-12     	; 0x164a <__divsf3_pse+0x6c>
    1656:	86 95       	lsr	r24
    1658:	77 95       	ror	r23
    165a:	67 95       	ror	r22
    165c:	b7 95       	ror	r27
    165e:	f7 95       	ror	r31
    1660:	9f 5f       	subi	r25, 0xFF	; 255
    1662:	c9 f7       	brne	.-14     	; 0x1656 <__divsf3_pse+0x78>
    1664:	88 0f       	add	r24, r24
    1666:	91 1d       	adc	r25, r1
    1668:	96 95       	lsr	r25
    166a:	87 95       	ror	r24
    166c:	97 f9       	bld	r25, 7
    166e:	08 95       	ret
    1670:	e1 e0       	ldi	r30, 0x01	; 1
    1672:	66 0f       	add	r22, r22
    1674:	77 1f       	adc	r23, r23
    1676:	88 1f       	adc	r24, r24
    1678:	bb 1f       	adc	r27, r27
    167a:	62 17       	cp	r22, r18
    167c:	73 07       	cpc	r23, r19
    167e:	84 07       	cpc	r24, r20
    1680:	ba 07       	cpc	r27, r26
    1682:	20 f0       	brcs	.+8      	; 0x168c <__divsf3_pse+0xae>
    1684:	62 1b       	sub	r22, r18
    1686:	73 0b       	sbc	r23, r19
    1688:	84 0b       	sbc	r24, r20
    168a:	ba 0b       	sbc	r27, r26
    168c:	ee 1f       	adc	r30, r30
    168e:	88 f7       	brcc	.-30     	; 0x1672 <__divsf3_pse+0x94>
    1690:	e0 95       	com	r30
    1692:	08 95       	ret

00001694 <__fixsfsi>:
    1694:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fixunssfsi>
    1698:	68 94       	set
    169a:	b1 11       	cpse	r27, r1
    169c:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_szero>
    16a0:	08 95       	ret

000016a2 <__fixunssfsi>:
    16a2:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__fp_splitA>
    16a6:	88 f0       	brcs	.+34     	; 0x16ca <__fixunssfsi+0x28>
    16a8:	9f 57       	subi	r25, 0x7F	; 127
    16aa:	98 f0       	brcs	.+38     	; 0x16d2 <__fixunssfsi+0x30>
    16ac:	b9 2f       	mov	r27, r25
    16ae:	99 27       	eor	r25, r25
    16b0:	b7 51       	subi	r27, 0x17	; 23
    16b2:	b0 f0       	brcs	.+44     	; 0x16e0 <__fixunssfsi+0x3e>
    16b4:	e1 f0       	breq	.+56     	; 0x16ee <__fixunssfsi+0x4c>
    16b6:	66 0f       	add	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	88 1f       	adc	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	1a f0       	brmi	.+6      	; 0x16c6 <__fixunssfsi+0x24>
    16c0:	ba 95       	dec	r27
    16c2:	c9 f7       	brne	.-14     	; 0x16b6 <__fixunssfsi+0x14>
    16c4:	14 c0       	rjmp	.+40     	; 0x16ee <__fixunssfsi+0x4c>
    16c6:	b1 30       	cpi	r27, 0x01	; 1
    16c8:	91 f0       	breq	.+36     	; 0x16ee <__fixunssfsi+0x4c>
    16ca:	0e 94 6d 0c 	call	0x18da	; 0x18da <__fp_zero>
    16ce:	b1 e0       	ldi	r27, 0x01	; 1
    16d0:	08 95       	ret
    16d2:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_zero>
    16d6:	67 2f       	mov	r22, r23
    16d8:	78 2f       	mov	r23, r24
    16da:	88 27       	eor	r24, r24
    16dc:	b8 5f       	subi	r27, 0xF8	; 248
    16de:	39 f0       	breq	.+14     	; 0x16ee <__fixunssfsi+0x4c>
    16e0:	b9 3f       	cpi	r27, 0xF9	; 249
    16e2:	cc f3       	brlt	.-14     	; 0x16d6 <__fixunssfsi+0x34>
    16e4:	86 95       	lsr	r24
    16e6:	77 95       	ror	r23
    16e8:	67 95       	ror	r22
    16ea:	b3 95       	inc	r27
    16ec:	d9 f7       	brne	.-10     	; 0x16e4 <__fixunssfsi+0x42>
    16ee:	3e f4       	brtc	.+14     	; 0x16fe <__fixunssfsi+0x5c>
    16f0:	90 95       	com	r25
    16f2:	80 95       	com	r24
    16f4:	70 95       	com	r23
    16f6:	61 95       	neg	r22
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	8f 4f       	sbci	r24, 0xFF	; 255
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	08 95       	ret

00001700 <__floatunsisf>:
    1700:	e8 94       	clt
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <__floatsisf+0x12>

00001704 <__floatsisf>:
    1704:	97 fb       	bst	r25, 7
    1706:	3e f4       	brtc	.+14     	; 0x1716 <__floatsisf+0x12>
    1708:	90 95       	com	r25
    170a:	80 95       	com	r24
    170c:	70 95       	com	r23
    170e:	61 95       	neg	r22
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	8f 4f       	sbci	r24, 0xFF	; 255
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	99 23       	and	r25, r25
    1718:	a9 f0       	breq	.+42     	; 0x1744 <__floatsisf+0x40>
    171a:	f9 2f       	mov	r31, r25
    171c:	96 e9       	ldi	r25, 0x96	; 150
    171e:	bb 27       	eor	r27, r27
    1720:	93 95       	inc	r25
    1722:	f6 95       	lsr	r31
    1724:	87 95       	ror	r24
    1726:	77 95       	ror	r23
    1728:	67 95       	ror	r22
    172a:	b7 95       	ror	r27
    172c:	f1 11       	cpse	r31, r1
    172e:	f8 cf       	rjmp	.-16     	; 0x1720 <__floatsisf+0x1c>
    1730:	fa f4       	brpl	.+62     	; 0x1770 <__floatsisf+0x6c>
    1732:	bb 0f       	add	r27, r27
    1734:	11 f4       	brne	.+4      	; 0x173a <__floatsisf+0x36>
    1736:	60 ff       	sbrs	r22, 0
    1738:	1b c0       	rjmp	.+54     	; 0x1770 <__floatsisf+0x6c>
    173a:	6f 5f       	subi	r22, 0xFF	; 255
    173c:	7f 4f       	sbci	r23, 0xFF	; 255
    173e:	8f 4f       	sbci	r24, 0xFF	; 255
    1740:	9f 4f       	sbci	r25, 0xFF	; 255
    1742:	16 c0       	rjmp	.+44     	; 0x1770 <__floatsisf+0x6c>
    1744:	88 23       	and	r24, r24
    1746:	11 f0       	breq	.+4      	; 0x174c <__floatsisf+0x48>
    1748:	96 e9       	ldi	r25, 0x96	; 150
    174a:	11 c0       	rjmp	.+34     	; 0x176e <__floatsisf+0x6a>
    174c:	77 23       	and	r23, r23
    174e:	21 f0       	breq	.+8      	; 0x1758 <__floatsisf+0x54>
    1750:	9e e8       	ldi	r25, 0x8E	; 142
    1752:	87 2f       	mov	r24, r23
    1754:	76 2f       	mov	r23, r22
    1756:	05 c0       	rjmp	.+10     	; 0x1762 <__floatsisf+0x5e>
    1758:	66 23       	and	r22, r22
    175a:	71 f0       	breq	.+28     	; 0x1778 <__floatsisf+0x74>
    175c:	96 e8       	ldi	r25, 0x86	; 134
    175e:	86 2f       	mov	r24, r22
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	2a f0       	brmi	.+10     	; 0x1770 <__floatsisf+0x6c>
    1766:	9a 95       	dec	r25
    1768:	66 0f       	add	r22, r22
    176a:	77 1f       	adc	r23, r23
    176c:	88 1f       	adc	r24, r24
    176e:	da f7       	brpl	.-10     	; 0x1766 <__floatsisf+0x62>
    1770:	88 0f       	add	r24, r24
    1772:	96 95       	lsr	r25
    1774:	87 95       	ror	r24
    1776:	97 f9       	bld	r25, 7
    1778:	08 95       	ret

0000177a <__fp_inf>:
    177a:	97 f9       	bld	r25, 7
    177c:	9f 67       	ori	r25, 0x7F	; 127
    177e:	80 e8       	ldi	r24, 0x80	; 128
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	08 95       	ret

00001786 <__fp_nan>:
    1786:	9f ef       	ldi	r25, 0xFF	; 255
    1788:	80 ec       	ldi	r24, 0xC0	; 192
    178a:	08 95       	ret

0000178c <__fp_powser>:
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	1f 93       	push	r17
    1792:	0f 93       	push	r16
    1794:	ff 92       	push	r15
    1796:	ef 92       	push	r14
    1798:	df 92       	push	r13
    179a:	7b 01       	movw	r14, r22
    179c:	8c 01       	movw	r16, r24
    179e:	68 94       	set
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <__fp_powser+0x22>
    17a2:	da 2e       	mov	r13, r26
    17a4:	ef 01       	movw	r28, r30
    17a6:	0e 94 8f 0c 	call	0x191e	; 0x191e <__mulsf3x>
    17aa:	fe 01       	movw	r30, r28
    17ac:	e8 94       	clt
    17ae:	a5 91       	lpm	r26, Z+
    17b0:	25 91       	lpm	r18, Z+
    17b2:	35 91       	lpm	r19, Z+
    17b4:	45 91       	lpm	r20, Z+
    17b6:	55 91       	lpm	r21, Z+
    17b8:	a6 f3       	brts	.-24     	; 0x17a2 <__fp_powser+0x16>
    17ba:	ef 01       	movw	r28, r30
    17bc:	0e 94 10 0a 	call	0x1420	; 0x1420 <__addsf3x>
    17c0:	fe 01       	movw	r30, r28
    17c2:	97 01       	movw	r18, r14
    17c4:	a8 01       	movw	r20, r16
    17c6:	da 94       	dec	r13
    17c8:	69 f7       	brne	.-38     	; 0x17a4 <__fp_powser+0x18>
    17ca:	df 90       	pop	r13
    17cc:	ef 90       	pop	r14
    17ce:	ff 90       	pop	r15
    17d0:	0f 91       	pop	r16
    17d2:	1f 91       	pop	r17
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <__fp_pscA>:
    17da:	00 24       	eor	r0, r0
    17dc:	0a 94       	dec	r0
    17de:	16 16       	cp	r1, r22
    17e0:	17 06       	cpc	r1, r23
    17e2:	18 06       	cpc	r1, r24
    17e4:	09 06       	cpc	r0, r25
    17e6:	08 95       	ret

000017e8 <__fp_pscB>:
    17e8:	00 24       	eor	r0, r0
    17ea:	0a 94       	dec	r0
    17ec:	12 16       	cp	r1, r18
    17ee:	13 06       	cpc	r1, r19
    17f0:	14 06       	cpc	r1, r20
    17f2:	05 06       	cpc	r0, r21
    17f4:	08 95       	ret
    17f6:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_nan>

000017fa <__fp_rempio2>:
    17fa:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__fp_splitA>
    17fe:	d8 f3       	brcs	.-10     	; 0x17f6 <__fp_pscB+0xe>
    1800:	e8 94       	clt
    1802:	e0 e0       	ldi	r30, 0x00	; 0
    1804:	bb 27       	eor	r27, r27
    1806:	9f 57       	subi	r25, 0x7F	; 127
    1808:	f0 f0       	brcs	.+60     	; 0x1846 <__fp_rempio2+0x4c>
    180a:	2a ed       	ldi	r18, 0xDA	; 218
    180c:	3f e0       	ldi	r19, 0x0F	; 15
    180e:	49 ec       	ldi	r20, 0xC9	; 201
    1810:	06 c0       	rjmp	.+12     	; 0x181e <__fp_rempio2+0x24>
    1812:	ee 0f       	add	r30, r30
    1814:	bb 0f       	add	r27, r27
    1816:	66 1f       	adc	r22, r22
    1818:	77 1f       	adc	r23, r23
    181a:	88 1f       	adc	r24, r24
    181c:	28 f0       	brcs	.+10     	; 0x1828 <__fp_rempio2+0x2e>
    181e:	b2 3a       	cpi	r27, 0xA2	; 162
    1820:	62 07       	cpc	r22, r18
    1822:	73 07       	cpc	r23, r19
    1824:	84 07       	cpc	r24, r20
    1826:	28 f0       	brcs	.+10     	; 0x1832 <__fp_rempio2+0x38>
    1828:	b2 5a       	subi	r27, 0xA2	; 162
    182a:	62 0b       	sbc	r22, r18
    182c:	73 0b       	sbc	r23, r19
    182e:	84 0b       	sbc	r24, r20
    1830:	e3 95       	inc	r30
    1832:	9a 95       	dec	r25
    1834:	72 f7       	brpl	.-36     	; 0x1812 <__fp_rempio2+0x18>
    1836:	80 38       	cpi	r24, 0x80	; 128
    1838:	30 f4       	brcc	.+12     	; 0x1846 <__fp_rempio2+0x4c>
    183a:	9a 95       	dec	r25
    183c:	bb 0f       	add	r27, r27
    183e:	66 1f       	adc	r22, r22
    1840:	77 1f       	adc	r23, r23
    1842:	88 1f       	adc	r24, r24
    1844:	d2 f7       	brpl	.-12     	; 0x183a <__fp_rempio2+0x40>
    1846:	90 48       	sbci	r25, 0x80	; 128
    1848:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__fp_mpack_finite>

0000184c <__fp_round>:
    184c:	09 2e       	mov	r0, r25
    184e:	03 94       	inc	r0
    1850:	00 0c       	add	r0, r0
    1852:	11 f4       	brne	.+4      	; 0x1858 <__fp_round+0xc>
    1854:	88 23       	and	r24, r24
    1856:	52 f0       	brmi	.+20     	; 0x186c <__fp_round+0x20>
    1858:	bb 0f       	add	r27, r27
    185a:	40 f4       	brcc	.+16     	; 0x186c <__fp_round+0x20>
    185c:	bf 2b       	or	r27, r31
    185e:	11 f4       	brne	.+4      	; 0x1864 <__fp_round+0x18>
    1860:	60 ff       	sbrs	r22, 0
    1862:	04 c0       	rjmp	.+8      	; 0x186c <__fp_round+0x20>
    1864:	6f 5f       	subi	r22, 0xFF	; 255
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	8f 4f       	sbci	r24, 0xFF	; 255
    186a:	9f 4f       	sbci	r25, 0xFF	; 255
    186c:	08 95       	ret

0000186e <__fp_sinus>:
    186e:	ef 93       	push	r30
    1870:	e0 ff       	sbrs	r30, 0
    1872:	07 c0       	rjmp	.+14     	; 0x1882 <__fp_sinus+0x14>
    1874:	a2 ea       	ldi	r26, 0xA2	; 162
    1876:	2a ed       	ldi	r18, 0xDA	; 218
    1878:	3f e0       	ldi	r19, 0x0F	; 15
    187a:	49 ec       	ldi	r20, 0xC9	; 201
    187c:	5f eb       	ldi	r21, 0xBF	; 191
    187e:	0e 94 10 0a 	call	0x1420	; 0x1420 <__addsf3x>
    1882:	0e 94 26 0c 	call	0x184c	; 0x184c <__fp_round>
    1886:	0f 90       	pop	r0
    1888:	03 94       	inc	r0
    188a:	01 fc       	sbrc	r0, 1
    188c:	90 58       	subi	r25, 0x80	; 128
    188e:	e9 ed       	ldi	r30, 0xD9	; 217
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__fp_powsodd>

00001896 <__fp_split3>:
    1896:	57 fd       	sbrc	r21, 7
    1898:	90 58       	subi	r25, 0x80	; 128
    189a:	44 0f       	add	r20, r20
    189c:	55 1f       	adc	r21, r21
    189e:	59 f0       	breq	.+22     	; 0x18b6 <__fp_splitA+0x10>
    18a0:	5f 3f       	cpi	r21, 0xFF	; 255
    18a2:	71 f0       	breq	.+28     	; 0x18c0 <__fp_splitA+0x1a>
    18a4:	47 95       	ror	r20

000018a6 <__fp_splitA>:
    18a6:	88 0f       	add	r24, r24
    18a8:	97 fb       	bst	r25, 7
    18aa:	99 1f       	adc	r25, r25
    18ac:	61 f0       	breq	.+24     	; 0x18c6 <__fp_splitA+0x20>
    18ae:	9f 3f       	cpi	r25, 0xFF	; 255
    18b0:	79 f0       	breq	.+30     	; 0x18d0 <__fp_splitA+0x2a>
    18b2:	87 95       	ror	r24
    18b4:	08 95       	ret
    18b6:	12 16       	cp	r1, r18
    18b8:	13 06       	cpc	r1, r19
    18ba:	14 06       	cpc	r1, r20
    18bc:	55 1f       	adc	r21, r21
    18be:	f2 cf       	rjmp	.-28     	; 0x18a4 <__fp_split3+0xe>
    18c0:	46 95       	lsr	r20
    18c2:	f1 df       	rcall	.-30     	; 0x18a6 <__fp_splitA>
    18c4:	08 c0       	rjmp	.+16     	; 0x18d6 <__fp_splitA+0x30>
    18c6:	16 16       	cp	r1, r22
    18c8:	17 06       	cpc	r1, r23
    18ca:	18 06       	cpc	r1, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	f1 cf       	rjmp	.-30     	; 0x18b2 <__fp_splitA+0xc>
    18d0:	86 95       	lsr	r24
    18d2:	71 05       	cpc	r23, r1
    18d4:	61 05       	cpc	r22, r1
    18d6:	08 94       	sec
    18d8:	08 95       	ret

000018da <__fp_zero>:
    18da:	e8 94       	clt

000018dc <__fp_szero>:
    18dc:	bb 27       	eor	r27, r27
    18de:	66 27       	eor	r22, r22
    18e0:	77 27       	eor	r23, r23
    18e2:	cb 01       	movw	r24, r22
    18e4:	97 f9       	bld	r25, 7
    18e6:	08 95       	ret

000018e8 <inverse>:
    18e8:	9b 01       	movw	r18, r22
    18ea:	ac 01       	movw	r20, r24
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	80 e8       	ldi	r24, 0x80	; 128
    18f2:	9f e3       	ldi	r25, 0x3F	; 63
    18f4:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <__divsf3>

000018f8 <__mulsf3>:
    18f8:	0e 94 8f 0c 	call	0x191e	; 0x191e <__mulsf3x>
    18fc:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__fp_round>
    1900:	0e 94 ed 0b 	call	0x17da	; 0x17da <__fp_pscA>
    1904:	38 f0       	brcs	.+14     	; 0x1914 <__mulsf3+0x1c>
    1906:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__fp_pscB>
    190a:	20 f0       	brcs	.+8      	; 0x1914 <__mulsf3+0x1c>
    190c:	95 23       	and	r25, r21
    190e:	11 f0       	breq	.+4      	; 0x1914 <__mulsf3+0x1c>
    1910:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__fp_inf>
    1914:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_nan>
    1918:	11 24       	eor	r1, r1
    191a:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_szero>

0000191e <__mulsf3x>:
    191e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_split3>
    1922:	70 f3       	brcs	.-36     	; 0x1900 <__mulsf3+0x8>

00001924 <__mulsf3_pse>:
    1924:	95 9f       	mul	r25, r21
    1926:	c1 f3       	breq	.-16     	; 0x1918 <__mulsf3+0x20>
    1928:	95 0f       	add	r25, r21
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	55 1f       	adc	r21, r21
    192e:	62 9f       	mul	r22, r18
    1930:	f0 01       	movw	r30, r0
    1932:	72 9f       	mul	r23, r18
    1934:	bb 27       	eor	r27, r27
    1936:	f0 0d       	add	r31, r0
    1938:	b1 1d       	adc	r27, r1
    193a:	63 9f       	mul	r22, r19
    193c:	aa 27       	eor	r26, r26
    193e:	f0 0d       	add	r31, r0
    1940:	b1 1d       	adc	r27, r1
    1942:	aa 1f       	adc	r26, r26
    1944:	64 9f       	mul	r22, r20
    1946:	66 27       	eor	r22, r22
    1948:	b0 0d       	add	r27, r0
    194a:	a1 1d       	adc	r26, r1
    194c:	66 1f       	adc	r22, r22
    194e:	82 9f       	mul	r24, r18
    1950:	22 27       	eor	r18, r18
    1952:	b0 0d       	add	r27, r0
    1954:	a1 1d       	adc	r26, r1
    1956:	62 1f       	adc	r22, r18
    1958:	73 9f       	mul	r23, r19
    195a:	b0 0d       	add	r27, r0
    195c:	a1 1d       	adc	r26, r1
    195e:	62 1f       	adc	r22, r18
    1960:	83 9f       	mul	r24, r19
    1962:	a0 0d       	add	r26, r0
    1964:	61 1d       	adc	r22, r1
    1966:	22 1f       	adc	r18, r18
    1968:	74 9f       	mul	r23, r20
    196a:	33 27       	eor	r19, r19
    196c:	a0 0d       	add	r26, r0
    196e:	61 1d       	adc	r22, r1
    1970:	23 1f       	adc	r18, r19
    1972:	84 9f       	mul	r24, r20
    1974:	60 0d       	add	r22, r0
    1976:	21 1d       	adc	r18, r1
    1978:	82 2f       	mov	r24, r18
    197a:	76 2f       	mov	r23, r22
    197c:	6a 2f       	mov	r22, r26
    197e:	11 24       	eor	r1, r1
    1980:	9f 57       	subi	r25, 0x7F	; 127
    1982:	50 40       	sbci	r21, 0x00	; 0
    1984:	9a f0       	brmi	.+38     	; 0x19ac <__mulsf3_pse+0x88>
    1986:	f1 f0       	breq	.+60     	; 0x19c4 <__mulsf3_pse+0xa0>
    1988:	88 23       	and	r24, r24
    198a:	4a f0       	brmi	.+18     	; 0x199e <__mulsf3_pse+0x7a>
    198c:	ee 0f       	add	r30, r30
    198e:	ff 1f       	adc	r31, r31
    1990:	bb 1f       	adc	r27, r27
    1992:	66 1f       	adc	r22, r22
    1994:	77 1f       	adc	r23, r23
    1996:	88 1f       	adc	r24, r24
    1998:	91 50       	subi	r25, 0x01	; 1
    199a:	50 40       	sbci	r21, 0x00	; 0
    199c:	a9 f7       	brne	.-22     	; 0x1988 <__mulsf3_pse+0x64>
    199e:	9e 3f       	cpi	r25, 0xFE	; 254
    19a0:	51 05       	cpc	r21, r1
    19a2:	80 f0       	brcs	.+32     	; 0x19c4 <__mulsf3_pse+0xa0>
    19a4:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__fp_inf>
    19a8:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_szero>
    19ac:	5f 3f       	cpi	r21, 0xFF	; 255
    19ae:	e4 f3       	brlt	.-8      	; 0x19a8 <__mulsf3_pse+0x84>
    19b0:	98 3e       	cpi	r25, 0xE8	; 232
    19b2:	d4 f3       	brlt	.-12     	; 0x19a8 <__mulsf3_pse+0x84>
    19b4:	86 95       	lsr	r24
    19b6:	77 95       	ror	r23
    19b8:	67 95       	ror	r22
    19ba:	b7 95       	ror	r27
    19bc:	f7 95       	ror	r31
    19be:	e7 95       	ror	r30
    19c0:	9f 5f       	subi	r25, 0xFF	; 255
    19c2:	c1 f7       	brne	.-16     	; 0x19b4 <__mulsf3_pse+0x90>
    19c4:	fe 2b       	or	r31, r30
    19c6:	88 0f       	add	r24, r24
    19c8:	91 1d       	adc	r25, r1
    19ca:	96 95       	lsr	r25
    19cc:	87 95       	ror	r24
    19ce:	97 f9       	bld	r25, 7
    19d0:	08 95       	ret

000019d2 <sin>:
    19d2:	9f 93       	push	r25
    19d4:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fp_rempio2>
    19d8:	0f 90       	pop	r0
    19da:	07 fc       	sbrc	r0, 7
    19dc:	ee 5f       	subi	r30, 0xFE	; 254
    19de:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__fp_sinus>
    19e2:	19 f4       	brne	.+6      	; 0x19ea <sin+0x18>
    19e4:	16 f4       	brtc	.+4      	; 0x19ea <sin+0x18>
    19e6:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_nan>
    19ea:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_mpack>

000019ee <sqrt>:
    19ee:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__fp_splitA>
    19f2:	b8 f3       	brcs	.-18     	; 0x19e2 <sin+0x10>
    19f4:	99 23       	and	r25, r25
    19f6:	c9 f3       	breq	.-14     	; 0x19ea <sin+0x18>
    19f8:	b6 f3       	brts	.-20     	; 0x19e6 <sin+0x14>
    19fa:	9f 57       	subi	r25, 0x7F	; 127
    19fc:	55 0b       	sbc	r21, r21
    19fe:	87 ff       	sbrs	r24, 7
    1a00:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__fp_norm2>
    1a04:	00 24       	eor	r0, r0
    1a06:	a0 e6       	ldi	r26, 0x60	; 96
    1a08:	40 ea       	ldi	r20, 0xA0	; 160
    1a0a:	90 01       	movw	r18, r0
    1a0c:	80 58       	subi	r24, 0x80	; 128
    1a0e:	56 95       	lsr	r21
    1a10:	97 95       	ror	r25
    1a12:	28 f4       	brcc	.+10     	; 0x1a1e <sqrt+0x30>
    1a14:	80 5c       	subi	r24, 0xC0	; 192
    1a16:	66 0f       	add	r22, r22
    1a18:	77 1f       	adc	r23, r23
    1a1a:	88 1f       	adc	r24, r24
    1a1c:	20 f0       	brcs	.+8      	; 0x1a26 <sqrt+0x38>
    1a1e:	26 17       	cp	r18, r22
    1a20:	37 07       	cpc	r19, r23
    1a22:	48 07       	cpc	r20, r24
    1a24:	30 f4       	brcc	.+12     	; 0x1a32 <sqrt+0x44>
    1a26:	62 1b       	sub	r22, r18
    1a28:	73 0b       	sbc	r23, r19
    1a2a:	84 0b       	sbc	r24, r20
    1a2c:	20 29       	or	r18, r0
    1a2e:	31 29       	or	r19, r1
    1a30:	4a 2b       	or	r20, r26
    1a32:	a6 95       	lsr	r26
    1a34:	17 94       	ror	r1
    1a36:	07 94       	ror	r0
    1a38:	20 25       	eor	r18, r0
    1a3a:	31 25       	eor	r19, r1
    1a3c:	4a 27       	eor	r20, r26
    1a3e:	58 f7       	brcc	.-42     	; 0x1a16 <sqrt+0x28>
    1a40:	66 0f       	add	r22, r22
    1a42:	77 1f       	adc	r23, r23
    1a44:	88 1f       	adc	r24, r24
    1a46:	20 f0       	brcs	.+8      	; 0x1a50 <sqrt+0x62>
    1a48:	26 17       	cp	r18, r22
    1a4a:	37 07       	cpc	r19, r23
    1a4c:	48 07       	cpc	r20, r24
    1a4e:	30 f4       	brcc	.+12     	; 0x1a5c <sqrt+0x6e>
    1a50:	62 0b       	sbc	r22, r18
    1a52:	73 0b       	sbc	r23, r19
    1a54:	84 0b       	sbc	r24, r20
    1a56:	20 0d       	add	r18, r0
    1a58:	31 1d       	adc	r19, r1
    1a5a:	41 1d       	adc	r20, r1
    1a5c:	a0 95       	com	r26
    1a5e:	81 f7       	brne	.-32     	; 0x1a40 <sqrt+0x52>
    1a60:	b9 01       	movw	r22, r18
    1a62:	84 2f       	mov	r24, r20
    1a64:	91 58       	subi	r25, 0x81	; 129
    1a66:	88 0f       	add	r24, r24
    1a68:	96 95       	lsr	r25
    1a6a:	87 95       	ror	r24
    1a6c:	08 95       	ret

00001a6e <square>:
    1a6e:	9b 01       	movw	r18, r22
    1a70:	ac 01       	movw	r20, r24
    1a72:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__mulsf3>

00001a76 <__divsf3>:
    1a76:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__divsf3x>
    1a7a:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__fp_round>

00001a7e <__fp_mpack>:
    1a7e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a80:	31 f0       	breq	.+12     	; 0x1a8e <__fp_mpack_finite+0xc>

00001a82 <__fp_mpack_finite>:
    1a82:	91 50       	subi	r25, 0x01	; 1
    1a84:	20 f4       	brcc	.+8      	; 0x1a8e <__fp_mpack_finite+0xc>
    1a86:	87 95       	ror	r24
    1a88:	77 95       	ror	r23
    1a8a:	67 95       	ror	r22
    1a8c:	b7 95       	ror	r27
    1a8e:	88 0f       	add	r24, r24
    1a90:	91 1d       	adc	r25, r1
    1a92:	96 95       	lsr	r25
    1a94:	87 95       	ror	r24
    1a96:	97 f9       	bld	r25, 7
    1a98:	08 95       	ret

00001a9a <__fp_norm2>:
    1a9a:	91 50       	subi	r25, 0x01	; 1
    1a9c:	50 40       	sbci	r21, 0x00	; 0
    1a9e:	66 0f       	add	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	d2 f7       	brpl	.-12     	; 0x1a9a <__fp_norm2>
    1aa6:	08 95       	ret

00001aa8 <__fp_powsodd>:
    1aa8:	9f 93       	push	r25
    1aaa:	8f 93       	push	r24
    1aac:	7f 93       	push	r23
    1aae:	6f 93       	push	r22
    1ab0:	ff 93       	push	r31
    1ab2:	ef 93       	push	r30
    1ab4:	9b 01       	movw	r18, r22
    1ab6:	ac 01       	movw	r20, r24
    1ab8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__mulsf3>
    1abc:	ef 91       	pop	r30
    1abe:	ff 91       	pop	r31
    1ac0:	0e 94 c6 0b 	call	0x178c	; 0x178c <__fp_powser>
    1ac4:	2f 91       	pop	r18
    1ac6:	3f 91       	pop	r19
    1ac8:	4f 91       	pop	r20
    1aca:	5f 91       	pop	r21
    1acc:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__mulsf3>

00001ad0 <__itoa_ncheck>:
    1ad0:	bb 27       	eor	r27, r27
    1ad2:	4a 30       	cpi	r20, 0x0A	; 10
    1ad4:	31 f4       	brne	.+12     	; 0x1ae2 <__itoa_ncheck+0x12>
    1ad6:	99 23       	and	r25, r25
    1ad8:	22 f4       	brpl	.+8      	; 0x1ae2 <__itoa_ncheck+0x12>
    1ada:	bd e2       	ldi	r27, 0x2D	; 45
    1adc:	90 95       	com	r25
    1ade:	81 95       	neg	r24
    1ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae2:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__utoa_common>

00001ae6 <__utoa_ncheck>:
    1ae6:	bb 27       	eor	r27, r27

00001ae8 <__utoa_common>:
    1ae8:	fb 01       	movw	r30, r22
    1aea:	55 27       	eor	r21, r21
    1aec:	aa 27       	eor	r26, r26
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	aa 1f       	adc	r26, r26
    1af4:	a4 17       	cp	r26, r20
    1af6:	10 f0       	brcs	.+4      	; 0x1afc <__utoa_common+0x14>
    1af8:	a4 1b       	sub	r26, r20
    1afa:	83 95       	inc	r24
    1afc:	50 51       	subi	r21, 0x10	; 16
    1afe:	b9 f7       	brne	.-18     	; 0x1aee <__utoa_common+0x6>
    1b00:	a0 5d       	subi	r26, 0xD0	; 208
    1b02:	aa 33       	cpi	r26, 0x3A	; 58
    1b04:	08 f0       	brcs	.+2      	; 0x1b08 <__utoa_common+0x20>
    1b06:	a9 5d       	subi	r26, 0xD9	; 217
    1b08:	a1 93       	st	Z+, r26
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	79 f7       	brne	.-34     	; 0x1aec <__utoa_common+0x4>
    1b0e:	b1 11       	cpse	r27, r1
    1b10:	b1 93       	st	Z+, r27
    1b12:	11 92       	st	Z+, r1
    1b14:	cb 01       	movw	r24, r22
    1b16:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <strrev>

00001b1a <strrev>:
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	67 2f       	mov	r22, r23
    1b20:	71 91       	ld	r23, Z+
    1b22:	77 23       	and	r23, r23
    1b24:	e1 f7       	brne	.-8      	; 0x1b1e <strrev+0x4>
    1b26:	32 97       	sbiw	r30, 0x02	; 2
    1b28:	04 c0       	rjmp	.+8      	; 0x1b32 <strrev+0x18>
    1b2a:	7c 91       	ld	r23, X
    1b2c:	6d 93       	st	X+, r22
    1b2e:	70 83       	st	Z, r23
    1b30:	62 91       	ld	r22, -Z
    1b32:	ae 17       	cp	r26, r30
    1b34:	bf 07       	cpc	r27, r31
    1b36:	c8 f3       	brcs	.-14     	; 0x1b2a <strrev+0x10>
    1b38:	08 95       	ret

00001b3a <_exit>:
    1b3a:	f8 94       	cli

00001b3c <__stop_program>:
    1b3c:	ff cf       	rjmp	.-2      	; 0x1b3c <__stop_program>
