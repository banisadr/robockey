
LocalizationTesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000bb0  00000c44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000c4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c91  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f1  00000000  00000000  00002afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac1  00000000  00000000  000031ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d4  00000000  00000000  00003cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000687  00000000  00000000  00004184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002063  00000000  00000000  0000480b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000686e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
   4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
   8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
   c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  28:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_10>
  2c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_11>
  30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  48:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  68:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  6c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  70:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  74:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  78:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  7c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  80:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  84:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  88:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  8c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  90:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  94:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  98:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  9c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  a0:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  a4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  a8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	20 2c       	mov	r2, r0
  ae:	20 00       	.word	0x0020	; ????

000000b0 <__c.2015>:
  b0:	20 2c 20 00                                          , .

000000b4 <__c.2013>:
  b4:	20 2c 20 00                                          , .

000000b8 <__c.2011>:
  b8:	20 2c 20 00                                          , .

000000bc <__c.2009>:
  bc:	20 2c 20 00                                          , .

000000c0 <__c.2007>:
  c0:	0a 00                                               ..

000000c2 <descriptor_list>:
  c2:	00 01 00 00 59 01 12 00 02 00 00 16 01 43 00 03     ....Y........C..
  d2:	00 00 12 01 04 01 03 09 04 fe 00 12 02 03 09 04     ................
  e2:	f6 00 06 03 03 09 04 ec 00 08                       ..........

000000ec <string3>:
  ec:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000f6 <string2>:
  f6:	06 03 4d 00 32 00 00 00                             ..M.2...

000000fe <string1>:
  fe:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
 10e:	65 00 00 00                                         e...

00000112 <string0>:
 112:	04 03 09 04                                         ....

00000116 <config1_descriptor>:
 116:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 126:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 136:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 146:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 156:	40 00 00                                            @..

00000159 <device_descriptor>:
 159:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 169:	03 01                                               ..

0000016b <endpoint_config_table>:
 16b:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000176 <__ctors_end>:
 176:	11 24       	eor	r1, r1
 178:	1f be       	out	0x3f, r1	; 63
 17a:	cf ef       	ldi	r28, 0xFF	; 255
 17c:	da e0       	ldi	r29, 0x0A	; 10
 17e:	de bf       	out	0x3e, r29	; 62
 180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
 182:	11 e0       	ldi	r17, 0x01	; 1
 184:	a0 e0       	ldi	r26, 0x00	; 0
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	e0 eb       	ldi	r30, 0xB0	; 176
 18a:	fb e0       	ldi	r31, 0x0B	; 11
 18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
 18e:	05 90       	lpm	r0, Z+
 190:	0d 92       	st	X+, r0
 192:	a8 30       	cpi	r26, 0x08	; 8
 194:	b1 07       	cpc	r27, r17
 196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	a8 e0       	ldi	r26, 0x08	; 8
 19c:	b1 e0       	ldi	r27, 0x01	; 1
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
 1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
 1a2:	ac 30       	cpi	r26, 0x0C	; 12
 1a4:	b2 07       	cpc	r27, r18
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
 1a8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
 1ac:	0c 94 d6 05 	jmp	0xbac	; 0xbac <_exit>

000001b0 <__bad_interrupt>:
 1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b4 <init>:
}


void init() 
{
	m_red(ON);
 1b4:	6e 9a       	sbi	0x0d, 6	; 13
 1b6:	76 98       	cbi	0x0e, 6	; 14
	while(!m_wii_open());
 1b8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <m_wii_open>
 1bc:	88 23       	and	r24, r24
 1be:	e1 f3       	breq	.-8      	; 0x1b8 <init+0x4>
	m_red(OFF);
 1c0:	6e 9a       	sbi	0x0d, 6	; 13
 1c2:	76 9a       	sbi	0x0e, 6	; 14
	
	m_usb_init();
 1c4:	0e 94 3f 01 	call	0x27e	; 0x27e <m_usb_init>
 1c8:	08 95       	ret

000001ca <main>:
#include "m_rf.h"

void init(); 

int main(void)
{
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	68 97       	sbiw	r28, 0x18	; 24
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
	init();
 1de:	0e 94 da 00 	call	0x1b4	; 0x1b4 <init>
	m_green(ON);
 1e2:	6a 9a       	sbi	0x0d, 2	; 13
 1e4:	72 98       	cbi	0x0e, 2	; 14
	unsigned int blobs[12];
	
    while (1) 
    {
		m_wii_read(blobs);
 1e6:	ce 01       	movw	r24, r28
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	0e 94 19 05 	call	0xa32	; 0xa32 <m_wii_read>
		unsigned int x1 = blobs[0];
 1ee:	89 80       	ldd	r8, Y+1	; 0x01
 1f0:	9a 80       	ldd	r9, Y+2	; 0x02
		unsigned int y1 = blobs[1];
 1f2:	ab 80       	ldd	r10, Y+3	; 0x03
 1f4:	bc 80       	ldd	r11, Y+4	; 0x04
		unsigned int x2 = blobs[3];
 1f6:	cf 80       	ldd	r12, Y+7	; 0x07
 1f8:	d8 84       	ldd	r13, Y+8	; 0x08
		unsigned int y2 = blobs[4];
 1fa:	e9 84       	ldd	r14, Y+9	; 0x09
 1fc:	fa 84       	ldd	r15, Y+10	; 0x0a
		unsigned int x3 = blobs[6];
 1fe:	0d 85       	ldd	r16, Y+13	; 0x0d
 200:	1e 85       	ldd	r17, Y+14	; 0x0e
		unsigned int y3 = blobs[7];
 202:	6f 84       	ldd	r6, Y+15	; 0x0f
 204:	78 88       	ldd	r7, Y+16	; 0x10
		
		m_usb_tx_string("\n");
 206:	80 ec       	ldi	r24, 0xC0	; 192
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <print_P>
		m_usb_tx_uint(x1);
 20e:	c4 01       	movw	r24, r8
 210:	0e 94 90 03 	call	0x720	; 0x720 <m_usb_tx_uint>
		m_usb_tx_string(" , ");
 214:	8c eb       	ldi	r24, 0xBC	; 188
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 74 03 	call	0x6e8	; 0x6e8 <print_P>
		m_usb_tx_uint(y1);
 21c:	c5 01       	movw	r24, r10
 21e:	0e 94 90 03 	call	0x720	; 0x720 <m_usb_tx_uint>
		m_usb_tx_string(" , ");
 222:	88 eb       	ldi	r24, 0xB8	; 184
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 74 03 	call	0x6e8	; 0x6e8 <print_P>
		m_usb_tx_uint(x2);
 22a:	c6 01       	movw	r24, r12
 22c:	0e 94 90 03 	call	0x720	; 0x720 <m_usb_tx_uint>
		m_usb_tx_string(" , ");
 230:	84 eb       	ldi	r24, 0xB4	; 180
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 74 03 	call	0x6e8	; 0x6e8 <print_P>
		m_usb_tx_uint(y2);
 238:	c7 01       	movw	r24, r14
 23a:	0e 94 90 03 	call	0x720	; 0x720 <m_usb_tx_uint>
		m_usb_tx_string(" , ");
 23e:	80 eb       	ldi	r24, 0xB0	; 176
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 74 03 	call	0x6e8	; 0x6e8 <print_P>
		m_usb_tx_uint(x3);
 246:	c8 01       	movw	r24, r16
 248:	0e 94 90 03 	call	0x720	; 0x720 <m_usb_tx_uint>
		m_usb_tx_string(" , ");
 24c:	8c ea       	ldi	r24, 0xAC	; 172
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 74 03 	call	0x6e8	; 0x6e8 <print_P>
		m_usb_tx_uint(y3);
 254:	c3 01       	movw	r24, r6
 256:	0e 94 90 03 	call	0x720	; 0x720 <m_usb_tx_uint>
    }
 25a:	c5 cf       	rjmp	.-118    	; 0x1e6 <main+0x1c>

0000025c <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 25c:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 25e:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 260:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 262:	8c e0       	ldi	r24, 0x0C	; 12
 264:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 268:	e9 e6       	ldi	r30, 0x69	; 105
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	80 62       	ori	r24, 0x20	; 32
 270:	80 83       	st	Z, r24
 272:	80 81       	ld	r24, Z
 274:	8f 7e       	andi	r24, 0xEF	; 239
 276:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 278:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 27a:	78 94       	sei
 27c:	08 95       	ret

0000027e <m_usb_init>:
			case 38: UEDATX = *buffer++;
			case 37: UEDATX = *buffer++;
			case 36: UEDATX = *buffer++;
			case 35: UEDATX = *buffer++;
			case 34: UEDATX = *buffer++;
			case 33: UEDATX = *buffer++;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 d7 00 	sts	0x00D7, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
 284:	80 ea       	ldi	r24, 0xA0	; 160
 286:	80 93 d8 00 	sts	0x00D8, r24
 28a:	82 e1       	ldi	r24, 0x12	; 18
 28c:	89 bd       	out	0x29, r24	; 41
 28e:	09 b4       	in	r0, 0x29	; 41
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 290:	00 fe       	sbrs	r0, 0
			case 34: UEDATX = *buffer++;
			case 33: UEDATX = *buffer++;
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
			case 31: UEDATX = *buffer++;
 292:	fd cf       	rjmp	.-6      	; 0x28e <m_usb_init+0x10>
 294:	80 e9       	ldi	r24, 0x90	; 144
 296:	80 93 d8 00 	sts	0x00D8, r24
 29a:	10 92 e0 00 	sts	0x00E0, r1
			case 30: UEDATX = *buffer++;
 29e:	10 92 0b 01 	sts	0x010B, r1
 2a2:	10 92 08 01 	sts	0x0108, r1
 2a6:	8c e0       	ldi	r24, 0x0C	; 12
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 2a8:	80 93 e2 00 	sts	0x00E2, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
			case 31: UEDATX = *buffer++;
			case 30: UEDATX = *buffer++;
			case 29: UEDATX = *buffer++;
 2ac:	78 94       	sei
 2ae:	08 95       	ret

000002b0 <m_usb_tx_char>:
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
			case 28: UEDATX = *buffer++;
 2b4:	90 91 0b 01 	lds	r25, 0x010B
 2b8:	99 23       	and	r25, r25
 2ba:	09 f4       	brne	.+2      	; 0x2be <m_usb_tx_char+0xe>
 2bc:	4c c0       	rjmp	.+152    	; 0x356 <m_usb_tx_char+0xa6>
 2be:	9f b7       	in	r25, 0x3f	; 63
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 2c0:	f8 94       	cli
			case 32: UEDATX = *buffer++;
			case 31: UEDATX = *buffer++;
			case 30: UEDATX = *buffer++;
			case 29: UEDATX = *buffer++;
			case 28: UEDATX = *buffer++;
			case 27: UEDATX = *buffer++;
 2c2:	24 e0       	ldi	r18, 0x04	; 4
 2c4:	20 93 e9 00 	sts	0x00E9, r18
 2c8:	20 91 09 01 	lds	r18, 0x0109
			case 26: UEDATX = *buffer++;
 2cc:	22 23       	and	r18, r18
 2ce:	49 f0       	breq	.+18     	; 0x2e2 <m_usb_tx_char+0x32>
 2d0:	20 91 e8 00 	lds	r18, 0x00E8
 2d4:	25 fd       	sbrc	r18, 5
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <m_usb_tx_char+0x2e>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 2d8:	9f bf       	out	0x3f, r25	; 63
			case 30: UEDATX = *buffer++;
			case 29: UEDATX = *buffer++;
			case 28: UEDATX = *buffer++;
			case 27: UEDATX = *buffer++;
			case 26: UEDATX = *buffer++;
			case 25: UEDATX = *buffer++;
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	41 c0       	rjmp	.+130    	; 0x360 <m_usb_tx_char+0xb0>
 2de:	10 92 09 01 	sts	0x0109, r1
 2e2:	30 91 e4 00 	lds	r19, 0x00E4
			case 24: UEDATX = *buffer++;
 2e6:	37 5e       	subi	r19, 0xE7	; 231
 2e8:	20 91 e8 00 	lds	r18, 0x00E8
 2ec:	25 fd       	sbrc	r18, 5
 2ee:	24 c0       	rjmp	.+72     	; 0x338 <m_usb_tx_char+0x88>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 2f0:	9f bf       	out	0x3f, r25	; 63
			case 28: UEDATX = *buffer++;
			case 27: UEDATX = *buffer++;
			case 26: UEDATX = *buffer++;
			case 25: UEDATX = *buffer++;
			case 24: UEDATX = *buffer++;
			case 23: UEDATX = *buffer++;
 2f2:	90 91 e4 00 	lds	r25, 0x00E4
 2f6:	93 17       	cp	r25, r19
 2f8:	81 f0       	breq	.+32     	; 0x31a <m_usb_tx_char+0x6a>
 2fa:	90 91 0b 01 	lds	r25, 0x010B
			case 22: UEDATX = *buffer++;
 2fe:	99 23       	and	r25, r25
 300:	61 f1       	breq	.+88     	; 0x35a <m_usb_tx_char+0xaa>
 302:	a9 ee       	ldi	r26, 0xE9	; 233
 304:	b0 e0       	ldi	r27, 0x00	; 0
 306:	44 e0       	ldi	r20, 0x04	; 4
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 308:	e8 ee       	ldi	r30, 0xE8	; 232
			case 26: UEDATX = *buffer++;
			case 25: UEDATX = *buffer++;
			case 24: UEDATX = *buffer++;
			case 23: UEDATX = *buffer++;
			case 22: UEDATX = *buffer++;
			case 21: UEDATX = *buffer++;
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	c4 ee       	ldi	r28, 0xE4	; 228
 30e:	d0 e0       	ldi	r29, 0x00	; 0
 310:	0d c0       	rjmp	.+26     	; 0x32c <m_usb_tx_char+0x7c>
 312:	9f bf       	out	0x3f, r25	; 63
			case 20: UEDATX = *buffer++;
 314:	98 81       	ld	r25, Y
 316:	93 13       	cpse	r25, r19
 318:	05 c0       	rjmp	.+10     	; 0x324 <m_usb_tx_char+0x74>
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 09 01 	sts	0x0109, r24
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 320:	8f ef       	ldi	r24, 0xFF	; 255
			case 24: UEDATX = *buffer++;
			case 23: UEDATX = *buffer++;
			case 22: UEDATX = *buffer++;
			case 21: UEDATX = *buffer++;
			case 20: UEDATX = *buffer++;
			case 19: UEDATX = *buffer++;
 322:	1e c0       	rjmp	.+60     	; 0x360 <m_usb_tx_char+0xb0>
 324:	90 91 0b 01 	lds	r25, 0x010B
 328:	99 23       	and	r25, r25
 32a:	c9 f0       	breq	.+50     	; 0x35e <m_usb_tx_char+0xae>
			case 18: UEDATX = *buffer++;
 32c:	9f b7       	in	r25, 0x3f	; 63
 32e:	f8 94       	cli
 330:	4c 93       	st	X, r20
 332:	20 81       	ld	r18, Z
 334:	25 ff       	sbrs	r18, 5
 336:	ed cf       	rjmp	.-38     	; 0x312 <m_usb_tx_char+0x62>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 338:	80 93 f1 00 	sts	0x00F1, r24
			case 22: UEDATX = *buffer++;
			case 21: UEDATX = *buffer++;
			case 20: UEDATX = *buffer++;
			case 19: UEDATX = *buffer++;
			case 18: UEDATX = *buffer++;
			case 17: UEDATX = *buffer++;
 33c:	80 91 e8 00 	lds	r24, 0x00E8
 340:	85 fd       	sbrc	r24, 5
 342:	03 c0       	rjmp	.+6      	; 0x34a <m_usb_tx_char+0x9a>
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
 344:	8a e3       	ldi	r24, 0x3A	; 58
 346:	80 93 e8 00 	sts	0x00E8, r24
 34a:	85 e0       	ldi	r24, 0x05	; 5
 34c:	80 93 0a 01 	sts	0x010A, r24
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 350:	9f bf       	out	0x3f, r25	; 63
			case 18: UEDATX = *buffer++;
			case 17: UEDATX = *buffer++;
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	05 c0       	rjmp	.+10     	; 0x360 <m_usb_tx_char+0xb0>
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	03 c0       	rjmp	.+6      	; 0x360 <m_usb_tx_char+0xb0>
 35a:	8f ef       	ldi	r24, 0xFF	; 255
			case 14: UEDATX = *buffer++;
 35c:	01 c0       	rjmp	.+2      	; 0x360 <m_usb_tx_char+0xb0>
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <__vector_10>:
 366:	1f 92       	push	r1
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 368:	0f 92       	push	r0
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	0f 92       	push	r0
 36e:	11 24       	eor	r1, r1
 370:	8f 93       	push	r24
 372:	9f 93       	push	r25
			case 12: UEDATX = *buffer++;
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
 378:	e1 ee       	ldi	r30, 0xE1	; 225
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	10 82       	st	Z, r1
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 380:	83 ff       	sbrs	r24, 3
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
 382:	11 c0       	rjmp	.+34     	; 0x3a6 <__vector_10+0x40>
 384:	10 92 e9 00 	sts	0x00E9, r1
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	90 93 eb 00 	sts	0x00EB, r25
			case 10: UEDATX = *buffer++;
 38e:	10 92 ec 00 	sts	0x00EC, r1
 392:	92 e1       	ldi	r25, 0x12	; 18
 394:	90 93 ed 00 	sts	0x00ED, r25
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 398:	98 e0       	ldi	r25, 0x08	; 8
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
 39a:	90 93 f0 00 	sts	0x00F0, r25
 39e:	10 92 0b 01 	sts	0x010B, r1
 3a2:	10 92 08 01 	sts	0x0108, r1
			#endif
			case  8: UEDATX = *buffer++;
 3a6:	82 ff       	sbrs	r24, 2
 3a8:	13 c0       	rjmp	.+38     	; 0x3d0 <__vector_10+0x6a>
 3aa:	80 91 0b 01 	lds	r24, 0x010B
 3ae:	88 23       	and	r24, r24
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3b0:	79 f0       	breq	.+30     	; 0x3d0 <__vector_10+0x6a>
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
 3b2:	80 91 0a 01 	lds	r24, 0x010A
 3b6:	88 23       	and	r24, r24
 3b8:	59 f0       	breq	.+22     	; 0x3d0 <__vector_10+0x6a>
 3ba:	81 50       	subi	r24, 0x01	; 1
			case  6: UEDATX = *buffer++;
 3bc:	80 93 0a 01 	sts	0x010A, r24
 3c0:	81 11       	cpse	r24, r1
 3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <__vector_10+0x6a>
 3c4:	84 e0       	ldi	r24, 0x04	; 4
 3c6:	80 93 e9 00 	sts	0x00E9, r24
			case  5: UEDATX = *buffer++;
 3ca:	8a e3       	ldi	r24, 0x3A	; 58
 3cc:	80 93 e8 00 	sts	0x00E8, r24
 3d0:	ff 91       	pop	r31
 3d2:	ef 91       	pop	r30
			case  4: UEDATX = *buffer++;
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3e0:	18 95       	reti

000003e2 <__vector_11>:
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
			case  2: UEDATX = *buffer++;
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	2f 93       	push	r18
 3f2:	3f 93       	push	r19
 3f4:	4f 93       	push	r20
 3f6:	5f 93       	push	r21
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3f8:	6f 93       	push	r22
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
			case  2: UEDATX = *buffer++;
			default:
			case  1: UEDATX = *buffer++;
 3fa:	7f 93       	push	r23
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
 400:	af 93       	push	r26
 402:	bf 93       	push	r27
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 40c:	10 92 e9 00 	sts	0x00E9, r1
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
 410:	80 91 e8 00 	lds	r24, 0x00E8
 414:	83 ff       	sbrs	r24, 3
 416:	4c c1       	rjmp	.+664    	; 0x6b0 <__vector_11+0x2ce>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
 418:	e1 ef       	ldi	r30, 0xF1	; 241
	return 0;
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	60 81       	ld	r22, Z
int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 41e:	80 81       	ld	r24, Z
 420:	20 81       	ld	r18, Z
			if (UDFNUML == timeout) {
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 422:	90 81       	ld	r25, Z
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	39 2b       	or	r19, r25
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
	return 0;
}
 428:	40 81       	ld	r20, Z
 42a:	90 81       	ld	r25, Z
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	59 2b       	or	r21, r25
 430:	70 81       	ld	r23, Z
 432:	c0 81       	ld	r28, Z
 434:	92 ef       	ldi	r25, 0xF2	; 242
 436:	90 93 e8 00 	sts	0x00E8, r25
 43a:	86 30       	cpi	r24, 0x06	; 6
 43c:	09 f0       	breq	.+2      	; 0x440 <__vector_11+0x5e>
 43e:	58 c0       	rjmp	.+176    	; 0x4f0 <__vector_11+0x10e>
 440:	04 c0       	rjmp	.+8      	; 0x44a <__vector_11+0x68>
 442:	81 e2       	ldi	r24, 0x21	; 33
 444:	80 93 eb 00 	sts	0x00EB, r24
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 448:	3a c1       	rjmp	.+628    	; 0x6be <__vector_11+0x2dc>
 44a:	66 e0       	ldi	r22, 0x06	; 6
 44c:	82 ec       	ldi	r24, 0xC2	; 194
 44e:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
 450:	fc 01       	movw	r30, r24
 452:	a5 91       	lpm	r26, Z+
 454:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 456:	2a 17       	cp	r18, r26
 458:	3b 07       	cpc	r19, r27
 45a:	11 f0       	breq	.+4      	; 0x460 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 45c:	07 96       	adiw	r24, 0x07	; 7
					continue;
 45e:	23 c0       	rjmp	.+70     	; 0x4a6 <__vector_11+0xc4>
				}
				list += 2;
 460:	fc 01       	movw	r30, r24
 462:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 464:	a5 91       	lpm	r26, Z+
 466:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 468:	4a 17       	cp	r20, r26
 46a:	5b 07       	cpc	r21, r27
 46c:	11 f0       	breq	.+4      	; 0x472 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 46e:	07 96       	adiw	r24, 0x07	; 7
					continue;
 470:	1a c0       	rjmp	.+52     	; 0x4a6 <__vector_11+0xc4>
				}
				list += 2;
 472:	fc 01       	movw	r30, r24
 474:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 476:	45 91       	lpm	r20, Z+
 478:	54 91       	lpm	r21, Z
				list += 2;
 47a:	fc 01       	movw	r30, r24
 47c:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 47e:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 480:	87 2f       	mov	r24, r23
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 486:	8f 3f       	cpi	r24, 0xFF	; 255
 488:	91 05       	cpc	r25, r1
 48a:	19 f0       	breq	.+6      	; 0x492 <__vector_11+0xb0>
 48c:	10 f0       	brcs	.+4      	; 0x492 <__vector_11+0xb0>
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	82 17       	cp	r24, r18
 494:	08 f4       	brcc	.+2      	; 0x498 <__vector_11+0xb6>
 496:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 498:	a8 ee       	ldi	r26, 0xE8	; 232
 49a:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 49c:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 49e:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 4a0:	c1 ef       	ldi	r28, 0xF1	; 241
 4a2:	d0 e0       	ldi	r29, 0x00	; 0
 4a4:	03 c0       	rjmp	.+6      	; 0x4ac <__vector_11+0xca>
 4a6:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 4a8:	99 f6       	brne	.-90     	; 0x450 <__vector_11+0x6e>
 4aa:	cb cf       	rjmp	.-106    	; 0x442 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 4ac:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 4ae:	98 2f       	mov	r25, r24
 4b0:	95 70       	andi	r25, 0x05	; 5
 4b2:	e1 f3       	breq	.-8      	; 0x4ac <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 4b4:	82 fd       	sbrc	r24, 2
 4b6:	03 c1       	rjmp	.+518    	; 0x6be <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 4b8:	32 2f       	mov	r19, r18
 4ba:	21 31       	cpi	r18, 0x11	; 17
 4bc:	08 f0       	brcs	.+2      	; 0x4c0 <__vector_11+0xde>
 4be:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 4c0:	33 23       	and	r19, r19
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <__vector_11+0xe4>
 4c4:	f9 c0       	rjmp	.+498    	; 0x6b8 <__vector_11+0x2d6>
 4c6:	fa 01       	movw	r30, r20
 4c8:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 4ca:	94 91       	lpm	r25, Z
 4cc:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 4ce:	81 50       	subi	r24, 0x01	; 1
 4d0:	31 96       	adiw	r30, 0x01	; 1
 4d2:	81 11       	cpse	r24, r1
 4d4:	fa cf       	rjmp	.-12     	; 0x4ca <__vector_11+0xe8>
 4d6:	8f ef       	ldi	r24, 0xFF	; 255
 4d8:	83 0f       	add	r24, r19
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	48 0f       	add	r20, r24
 4e0:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 4e2:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4e4:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 4e6:	21 11       	cpse	r18, r1
 4e8:	e1 cf       	rjmp	.-62     	; 0x4ac <__vector_11+0xca>
 4ea:	30 31       	cpi	r19, 0x10	; 16
 4ec:	f9 f2       	breq	.-66     	; 0x4ac <__vector_11+0xca>
 4ee:	e7 c0       	rjmp	.+462    	; 0x6be <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 4f0:	85 30       	cpi	r24, 0x05	; 5
 4f2:	61 f4       	brne	.+24     	; 0x50c <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4f4:	8e ef       	ldi	r24, 0xFE	; 254
 4f6:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 4fa:	e8 ee       	ldi	r30, 0xE8	; 232
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	80 ff       	sbrs	r24, 0
 502:	fd cf       	rjmp	.-6      	; 0x4fe <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 504:	20 68       	ori	r18, 0x80	; 128
 506:	20 93 e3 00 	sts	0x00E3, r18
			return;
 50a:	d9 c0       	rjmp	.+434    	; 0x6be <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 50c:	89 30       	cpi	r24, 0x09	; 9
 50e:	09 f0       	breq	.+2      	; 0x512 <__vector_11+0x130>
 510:	35 c0       	rjmp	.+106    	; 0x57c <__vector_11+0x19a>
 512:	61 11       	cpse	r22, r1
 514:	cd c0       	rjmp	.+410    	; 0x6b0 <__vector_11+0x2ce>
			usb_configuration = wValue;
 516:	20 93 0b 01 	sts	0x010B, r18
			cdc_line_rtsdtr = 0;
 51a:	10 92 08 01 	sts	0x0108, r1
			transmit_flush_timer = 0;
 51e:	10 92 0a 01 	sts	0x010A, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 522:	8e ef       	ldi	r24, 0xFE	; 254
 524:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 528:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 52a:	2b e6       	ldi	r18, 0x6B	; 107
 52c:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 52e:	c9 ee       	ldi	r28, 0xE9	; 233
 530:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 532:	ab ee       	ldi	r26, 0xEB	; 235
 534:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 536:	0c ee       	ldi	r16, 0xEC	; 236
 538:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 53a:	6d ee       	ldi	r22, 0xED	; 237
 53c:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 53e:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 540:	a9 01       	movw	r20, r18
 542:	4f 5f       	subi	r20, 0xFF	; 255
 544:	5f 4f       	sbci	r21, 0xFF	; 255
 546:	f9 01       	movw	r30, r18
 548:	94 91       	lpm	r25, Z
				UECONX = en;
 54a:	9c 93       	st	X, r25
				if (en) {
 54c:	99 23       	and	r25, r25
 54e:	61 f0       	breq	.+24     	; 0x568 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 550:	fa 01       	movw	r30, r20
 552:	44 91       	lpm	r20, Z
 554:	f8 01       	movw	r30, r16
 556:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 558:	f9 01       	movw	r30, r18
 55a:	32 96       	adiw	r30, 0x02	; 2
 55c:	94 91       	lpm	r25, Z
 55e:	2d 5f       	subi	r18, 0xFD	; 253
 560:	3f 4f       	sbci	r19, 0xFF	; 255
 562:	fb 01       	movw	r30, r22
 564:	90 83       	st	Z, r25
 566:	01 c0       	rjmp	.+2      	; 0x56a <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 568:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 56a:	8f 5f       	subi	r24, 0xFF	; 255
 56c:	85 30       	cpi	r24, 0x05	; 5
 56e:	39 f7       	brne	.-50     	; 0x53e <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 570:	ea ee       	ldi	r30, 0xEA	; 234
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	8e e1       	ldi	r24, 0x1E	; 30
 576:	80 83       	st	Z, r24
        		UERST = 0;
 578:	10 82       	st	Z, r1
			return;
 57a:	a1 c0       	rjmp	.+322    	; 0x6be <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 57c:	88 30       	cpi	r24, 0x08	; 8
 57e:	81 f4       	brne	.+32     	; 0x5a0 <__vector_11+0x1be>
 580:	60 38       	cpi	r22, 0x80	; 128
 582:	09 f0       	breq	.+2      	; 0x586 <__vector_11+0x1a4>
 584:	95 c0       	rjmp	.+298    	; 0x6b0 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 586:	e8 ee       	ldi	r30, 0xE8	; 232
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	80 ff       	sbrs	r24, 0
 58e:	fd cf       	rjmp	.-6      	; 0x58a <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 590:	80 91 0b 01 	lds	r24, 0x010B
 594:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 598:	8e ef       	ldi	r24, 0xFE	; 254
 59a:	80 93 e8 00 	sts	0x00E8, r24
 59e:	8f c0       	rjmp	.+286    	; 0x6be <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 5a0:	81 32       	cpi	r24, 0x21	; 33
 5a2:	b9 f4       	brne	.+46     	; 0x5d2 <__vector_11+0x1f0>
 5a4:	61 3a       	cpi	r22, 0xA1	; 161
 5a6:	09 f0       	breq	.+2      	; 0x5aa <__vector_11+0x1c8>
 5a8:	83 c0       	rjmp	.+262    	; 0x6b0 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5aa:	e8 ee       	ldi	r30, 0xE8	; 232
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	80 81       	ld	r24, Z
 5b0:	80 ff       	sbrs	r24, 0
 5b2:	fd cf       	rjmp	.-6      	; 0x5ae <__vector_11+0x1cc>
 5b4:	e0 e0       	ldi	r30, 0x00	; 0
 5b6:	f1 e0       	ldi	r31, 0x01	; 1
 5b8:	27 e0       	ldi	r18, 0x07	; 7
 5ba:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 5bc:	a1 ef       	ldi	r26, 0xF1	; 241
 5be:	b0 e0       	ldi	r27, 0x00	; 0
 5c0:	81 91       	ld	r24, Z+
 5c2:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 5c4:	e2 17       	cp	r30, r18
 5c6:	f3 07       	cpc	r31, r19
 5c8:	d9 f7       	brne	.-10     	; 0x5c0 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5ca:	8e ef       	ldi	r24, 0xFE	; 254
 5cc:	80 93 e8 00 	sts	0x00E8, r24
 5d0:	76 c0       	rjmp	.+236    	; 0x6be <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 5d2:	80 32       	cpi	r24, 0x20	; 32
 5d4:	d1 f4       	brne	.+52     	; 0x60a <__vector_11+0x228>
 5d6:	61 32       	cpi	r22, 0x21	; 33
 5d8:	09 f0       	breq	.+2      	; 0x5dc <__vector_11+0x1fa>
 5da:	6a c0       	rjmp	.+212    	; 0x6b0 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 5dc:	e8 ee       	ldi	r30, 0xE8	; 232
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	82 ff       	sbrs	r24, 2
 5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <__vector_11+0x1fe>
 5e6:	e0 e0       	ldi	r30, 0x00	; 0
 5e8:	f1 e0       	ldi	r31, 0x01	; 1
 5ea:	27 e0       	ldi	r18, 0x07	; 7
 5ec:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 5ee:	a1 ef       	ldi	r26, 0xF1	; 241
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	8c 91       	ld	r24, X
 5f4:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 5f6:	e2 17       	cp	r30, r18
 5f8:	f3 07       	cpc	r31, r19
 5fa:	d9 f7       	brne	.-10     	; 0x5f2 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 5fc:	e8 ee       	ldi	r30, 0xE8	; 232
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	8b ef       	ldi	r24, 0xFB	; 251
 602:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 604:	8e ef       	ldi	r24, 0xFE	; 254
 606:	80 83       	st	Z, r24
 608:	5a c0       	rjmp	.+180    	; 0x6be <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 60a:	82 32       	cpi	r24, 0x22	; 34
 60c:	71 f4       	brne	.+28     	; 0x62a <__vector_11+0x248>
 60e:	61 32       	cpi	r22, 0x21	; 33
 610:	09 f0       	breq	.+2      	; 0x614 <__vector_11+0x232>
 612:	4e c0       	rjmp	.+156    	; 0x6b0 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 614:	20 93 08 01 	sts	0x0108, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 618:	e8 ee       	ldi	r30, 0xE8	; 232
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	80 ff       	sbrs	r24, 0
 620:	fd cf       	rjmp	.-6      	; 0x61c <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 622:	8e ef       	ldi	r24, 0xFE	; 254
 624:	80 93 e8 00 	sts	0x00E8, r24
 628:	4a c0       	rjmp	.+148    	; 0x6be <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 62a:	81 11       	cpse	r24, r1
 62c:	1a c0       	rjmp	.+52     	; 0x662 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 62e:	e8 ee       	ldi	r30, 0xE8	; 232
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	80 ff       	sbrs	r24, 0
 636:	fd cf       	rjmp	.-6      	; 0x632 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 638:	62 38       	cpi	r22, 0x82	; 130
 63a:	51 f4       	brne	.+20     	; 0x650 <__vector_11+0x26e>
				UENUM = wIndex;
 63c:	e9 ee       	ldi	r30, 0xE9	; 233
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 642:	80 91 eb 00 	lds	r24, 0x00EB
 646:	85 fb       	bst	r24, 5
 648:	88 27       	eor	r24, r24
 64a:	80 f9       	bld	r24, 0
				UENUM = 0;
 64c:	10 82       	st	Z, r1
 64e:	01 c0       	rjmp	.+2      	; 0x652 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 650:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 652:	e1 ef       	ldi	r30, 0xF1	; 241
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 83       	st	Z, r24
			UEDATX = 0;
 658:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 65a:	8e ef       	ldi	r24, 0xFE	; 254
 65c:	80 93 e8 00 	sts	0x00E8, r24
 660:	2e c0       	rjmp	.+92     	; 0x6be <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 662:	98 2f       	mov	r25, r24
 664:	9d 7f       	andi	r25, 0xFD	; 253
 666:	91 30       	cpi	r25, 0x01	; 1
 668:	19 f5       	brne	.+70     	; 0x6b0 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 66a:	62 30       	cpi	r22, 0x02	; 2
 66c:	09 f5       	brne	.+66     	; 0x6b0 <__vector_11+0x2ce>
 66e:	23 2b       	or	r18, r19
 670:	f9 f4       	brne	.+62     	; 0x6b0 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 672:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 674:	9f ef       	ldi	r25, 0xFF	; 255
 676:	94 0f       	add	r25, r20
 678:	94 30       	cpi	r25, 0x04	; 4
 67a:	d0 f4       	brcc	.+52     	; 0x6b0 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 67c:	9e ef       	ldi	r25, 0xFE	; 254
 67e:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 682:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 686:	83 30       	cpi	r24, 0x03	; 3
 688:	21 f4       	brne	.+8      	; 0x692 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 68a:	81 e2       	ldi	r24, 0x21	; 33
 68c:	80 93 eb 00 	sts	0x00EB, r24
 690:	16 c0       	rjmp	.+44     	; 0x6be <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 692:	89 e1       	ldi	r24, 0x19	; 25
 694:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <__vector_11+0x2c0>
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	4a 95       	dec	r20
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <__vector_11+0x2bc>
 6a6:	ea ee       	ldi	r30, 0xEA	; 234
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 83       	st	Z, r24
					UERST = 0;
 6ac:	10 82       	st	Z, r1
 6ae:	07 c0       	rjmp	.+14     	; 0x6be <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 6b0:	81 e2       	ldi	r24, 0x21	; 33
 6b2:	80 93 eb 00 	sts	0x00EB, r24
 6b6:	03 c0       	rjmp	.+6      	; 0x6be <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6b8:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 6ba:	21 11       	cpse	r18, r1
 6bc:	f7 ce       	rjmp	.-530    	; 0x4ac <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 6be:	ff 91       	pop	r31
 6c0:	ef 91       	pop	r30
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	bf 91       	pop	r27
 6c8:	af 91       	pop	r26
 6ca:	9f 91       	pop	r25
 6cc:	8f 91       	pop	r24
 6ce:	7f 91       	pop	r23
 6d0:	6f 91       	pop	r22
 6d2:	5f 91       	pop	r21
 6d4:	4f 91       	pop	r20
 6d6:	3f 91       	pop	r19
 6d8:	2f 91       	pop	r18
 6da:	1f 91       	pop	r17
 6dc:	0f 91       	pop	r16
 6de:	0f 90       	pop	r0
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	0f 90       	pop	r0
 6e4:	1f 90       	pop	r1
 6e6:	18 95       	reti

000006e8 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
 6e8:	0f 93       	push	r16
 6ea:	1f 93       	push	r17
 6ec:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 6ee:	8c 01       	movw	r16, r24
 6f0:	0f 5f       	subi	r16, 0xFF	; 255
 6f2:	1f 4f       	sbci	r17, 0xFF	; 255
 6f4:	fc 01       	movw	r30, r24
 6f6:	c4 91       	lpm	r28, Z
		if (!c) break;
 6f8:	cc 23       	and	r28, r28
 6fa:	71 f0       	breq	.+28     	; 0x718 <print_P+0x30>
		if (c == '\n') usb_tx_char('\r');
 6fc:	ca 30       	cpi	r28, 0x0A	; 10
 6fe:	19 f4       	brne	.+6      	; 0x706 <print_P+0x1e>
 700:	8d e0       	ldi	r24, 0x0D	; 13
 702:	0e 94 58 01 	call	0x2b0	; 0x2b0 <m_usb_tx_char>
		usb_tx_char(c);
 706:	8c 2f       	mov	r24, r28
 708:	0e 94 58 01 	call	0x2b0	; 0x2b0 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 70c:	f8 01       	movw	r30, r16
 70e:	c4 91       	lpm	r28, Z
 710:	0f 5f       	subi	r16, 0xFF	; 255
 712:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
 714:	c1 11       	cpse	r28, r1
 716:	f2 cf       	rjmp	.-28     	; 0x6fc <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	08 95       	ret

00000720 <m_usb_tx_uint>:
        }
	}
}

void m_usb_tx_uint(unsigned int i)
{
 720:	ef 92       	push	r14
 722:	ff 92       	push	r15
 724:	0f 93       	push	r16
 726:	1f 93       	push	r17
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	00 d0       	rcall	.+0      	; 0x72e <m_usb_tx_uint+0xe>
 72e:	00 d0       	rcall	.+0      	; 0x730 <m_usb_tx_uint+0x10>
 730:	00 d0       	rcall	.+0      	; 0x732 <m_usb_tx_uint+0x12>
 732:	cd b7       	in	r28, 0x3d	; 61
 734:	de b7       	in	r29, 0x3e	; 62
	char string[6] = {0,0,0,0,0,0};
 736:	8e 01       	movw	r16, r28
 738:	0f 5f       	subi	r16, 0xFF	; 255
 73a:	1f 4f       	sbci	r17, 0xFF	; 255
 73c:	26 e0       	ldi	r18, 0x06	; 6
 73e:	f8 01       	movw	r30, r16
 740:	11 92       	st	Z+, r1
 742:	2a 95       	dec	r18
 744:	e9 f7       	brne	.-6      	; 0x740 <m_usb_tx_uint+0x20>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 746:	4a e0       	ldi	r20, 0x0A	; 10
 748:	b8 01       	movw	r22, r16
 74a:	0e 94 ac 05 	call	0xb58	; 0xb58 <__utoa_ncheck>
 74e:	7e 01       	movw	r14, r28
 750:	f6 e0       	ldi	r31, 0x06	; 6
 752:	ef 0e       	add	r14, r31
 754:	f1 1c       	adc	r15, r1
	utoa(i,string,10);
	for(i=0;i<5;i++){
        if(string[i]){
 756:	f8 01       	movw	r30, r16
 758:	81 91       	ld	r24, Z+
 75a:	8f 01       	movw	r16, r30
 75c:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
 75e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <m_usb_tx_char>

void m_usb_tx_uint(unsigned int i)
{
	char string[6] = {0,0,0,0,0,0};
	utoa(i,string,10);
	for(i=0;i<5;i++){
 762:	0e 15       	cp	r16, r14
 764:	1f 05       	cpc	r17, r15
 766:	b9 f7       	brne	.-18     	; 0x756 <m_usb_tx_uint+0x36>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
 768:	26 96       	adiw	r28, 0x06	; 6
 76a:	0f b6       	in	r0, 0x3f	; 63
 76c:	f8 94       	cli
 76e:	de bf       	out	0x3e, r29	; 62
 770:	0f be       	out	0x3f, r0	; 63
 772:	cd bf       	out	0x3d, r28	; 61
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	1f 91       	pop	r17
 77a:	0f 91       	pop	r16
 77c:	ff 90       	pop	r15
 77e:	ef 90       	pop	r14
 780:	08 95       	ret

00000782 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
 782:	20 e0       	ldi	r18, 0x00	; 0
 784:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
 786:	ec eb       	ldi	r30, 0xBC	; 188
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	88 23       	and	r24, r24
 78e:	34 f0       	brlt	.+12     	; 0x79c <twi_wait+0x1a>
 790:	2f 5f       	subi	r18, 0xFF	; 255
 792:	3f 4f       	sbci	r19, 0xFF	; 255
 794:	29 3e       	cpi	r18, 0xE9	; 233
 796:	83 e0       	ldi	r24, 0x03	; 3
 798:	38 07       	cpc	r19, r24
 79a:	b9 f7       	brne	.-18     	; 0x78a <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	28 3e       	cpi	r18, 0xE8	; 232
 7a0:	33 40       	sbci	r19, 0x03	; 3
 7a2:	09 f4       	brne	.+2      	; 0x7a6 <twi_wait+0x24>
 7a4:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
 7a6:	08 95       	ret

000007a8 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
 7a8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
 7ac:	84 e8       	ldi	r24, 0x84	; 132
 7ae:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
 7b2:	0e 94 c1 03 	call	0x782	; 0x782 <twi_wait>
 7b6:	88 23       	and	r24, r24
 7b8:	19 f0       	breq	.+6      	; 0x7c0 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
 7ba:	80 91 b9 00 	lds	r24, 0x00B9
 7be:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
 7c0:	08 95       	ret

000007c2 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
 7c2:	cf 93       	push	r28
 7c4:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 7c6:	94 ea       	ldi	r25, 0xA4	; 164
 7c8:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
 7cc:	0e 94 c1 03 	call	0x782	; 0x782 <twi_wait>
 7d0:	88 23       	and	r24, r24
 7d2:	61 f0       	breq	.+24     	; 0x7ec <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
 7d4:	8c 2f       	mov	r24, r28
 7d6:	88 0f       	add	r24, r24
 7d8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
 7dc:	80 32       	cpi	r24, 0x20	; 32
 7de:	29 f4       	brne	.+10     	; 0x7ea <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 7e0:	84 e9       	ldi	r24, 0x94	; 148
 7e2:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	01 c0       	rjmp	.+2      	; 0x7ec <start_write+0x2a>
	}	
	return 1;	// success
 7ea:	81 e0       	ldi	r24, 0x01	; 1
}	
 7ec:	cf 91       	pop	r28
 7ee:	08 95       	ret

000007f0 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
 7f0:	0e 94 2e 01 	call	0x25c	; 0x25c <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
 7f4:	88 e5       	ldi	r24, 0x58	; 88
 7f6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <start_write>
 7fa:	88 23       	and	r24, r24
 7fc:	09 f4       	brne	.+2      	; 0x800 <m_wii_open+0x10>
 7fe:	cd c0       	rjmp	.+410    	; 0x99a <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
 800:	80 e3       	ldi	r24, 0x30	; 48
 802:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 806:	88 23       	and	r24, r24
 808:	09 f4       	brne	.+2      	; 0x80c <m_wii_open+0x1c>
 80a:	c9 c0       	rjmp	.+402    	; 0x99e <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 812:	88 23       	and	r24, r24
 814:	09 f4       	brne	.+2      	; 0x818 <m_wii_open+0x28>
 816:	c5 c0       	rjmp	.+394    	; 0x9a2 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 818:	84 e9       	ldi	r24, 0x94	; 148
 81a:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 81e:	83 ec       	ldi	r24, 0xC3	; 195
 820:	99 e0       	ldi	r25, 0x09	; 9
 822:	01 97       	sbiw	r24, 0x01	; 1
 824:	f1 f7       	brne	.-4      	; 0x822 <m_wii_open+0x32>
 826:	00 c0       	rjmp	.+0      	; 0x828 <m_wii_open+0x38>
 828:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
 82a:	88 e5       	ldi	r24, 0x58	; 88
 82c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <start_write>
 830:	88 23       	and	r24, r24
 832:	09 f4       	brne	.+2      	; 0x836 <m_wii_open+0x46>
 834:	b8 c0       	rjmp	.+368    	; 0x9a6 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 83c:	88 23       	and	r24, r24
 83e:	09 f4       	brne	.+2      	; 0x842 <m_wii_open+0x52>
 840:	b4 c0       	rjmp	.+360    	; 0x9aa <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 848:	88 23       	and	r24, r24
 84a:	09 f4       	brne	.+2      	; 0x84e <m_wii_open+0x5e>
 84c:	b0 c0       	rjmp	.+352    	; 0x9ae <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 854:	88 23       	and	r24, r24
 856:	09 f4       	brne	.+2      	; 0x85a <m_wii_open+0x6a>
 858:	ac c0       	rjmp	.+344    	; 0x9b2 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 860:	88 23       	and	r24, r24
 862:	09 f4       	brne	.+2      	; 0x866 <m_wii_open+0x76>
 864:	a8 c0       	rjmp	.+336    	; 0x9b6 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 86c:	88 23       	and	r24, r24
 86e:	09 f4       	brne	.+2      	; 0x872 <m_wii_open+0x82>
 870:	a4 c0       	rjmp	.+328    	; 0x9ba <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 878:	88 23       	and	r24, r24
 87a:	09 f4       	brne	.+2      	; 0x87e <m_wii_open+0x8e>
 87c:	a0 c0       	rjmp	.+320    	; 0x9be <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 884:	88 23       	and	r24, r24
 886:	09 f4       	brne	.+2      	; 0x88a <m_wii_open+0x9a>
 888:	9c c0       	rjmp	.+312    	; 0x9c2 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
 88a:	80 e9       	ldi	r24, 0x90	; 144
 88c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 890:	88 23       	and	r24, r24
 892:	09 f4       	brne	.+2      	; 0x896 <m_wii_open+0xa6>
 894:	98 c0       	rjmp	.+304    	; 0x9c6 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 896:	84 e9       	ldi	r24, 0x94	; 148
 898:	80 93 bc 00 	sts	0x00BC, r24
 89c:	83 ec       	ldi	r24, 0xC3	; 195
 89e:	99 e0       	ldi	r25, 0x09	; 9
 8a0:	01 97       	sbiw	r24, 0x01	; 1
 8a2:	f1 f7       	brne	.-4      	; 0x8a0 <m_wii_open+0xb0>
 8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <m_wii_open+0xb6>
 8a6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
 8a8:	88 e5       	ldi	r24, 0x58	; 88
 8aa:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <start_write>
 8ae:	88 23       	and	r24, r24
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <m_wii_open+0xc4>
 8b2:	8b c0       	rjmp	.+278    	; 0x9ca <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
 8b4:	87 e0       	ldi	r24, 0x07	; 7
 8b6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 8ba:	88 23       	and	r24, r24
 8bc:	09 f4       	brne	.+2      	; 0x8c0 <m_wii_open+0xd0>
 8be:	87 c0       	rjmp	.+270    	; 0x9ce <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 8c6:	88 23       	and	r24, r24
 8c8:	09 f4       	brne	.+2      	; 0x8cc <m_wii_open+0xdc>
 8ca:	83 c0       	rjmp	.+262    	; 0x9d2 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
 8cc:	81 e4       	ldi	r24, 0x41	; 65
 8ce:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 8d2:	88 23       	and	r24, r24
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <m_wii_open+0xe8>
 8d6:	7f c0       	rjmp	.+254    	; 0x9d6 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 8d8:	84 e9       	ldi	r24, 0x94	; 148
 8da:	80 93 bc 00 	sts	0x00BC, r24
 8de:	83 ec       	ldi	r24, 0xC3	; 195
 8e0:	99 e0       	ldi	r25, 0x09	; 9
 8e2:	01 97       	sbiw	r24, 0x01	; 1
 8e4:	f1 f7       	brne	.-4      	; 0x8e2 <m_wii_open+0xf2>
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <m_wii_open+0xf8>
 8e8:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
 8ea:	88 e5       	ldi	r24, 0x58	; 88
 8ec:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <start_write>
 8f0:	88 23       	and	r24, r24
 8f2:	09 f4       	brne	.+2      	; 0x8f6 <m_wii_open+0x106>
 8f4:	72 c0       	rjmp	.+228    	; 0x9da <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
 8f6:	8a e1       	ldi	r24, 0x1A	; 26
 8f8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 8fc:	88 23       	and	r24, r24
 8fe:	09 f4       	brne	.+2      	; 0x902 <m_wii_open+0x112>
 900:	6e c0       	rjmp	.+220    	; 0x9de <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
 902:	80 e4       	ldi	r24, 0x40	; 64
 904:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 908:	88 23       	and	r24, r24
 90a:	09 f4       	brne	.+2      	; 0x90e <m_wii_open+0x11e>
 90c:	6a c0       	rjmp	.+212    	; 0x9e2 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 914:	88 23       	and	r24, r24
 916:	09 f4       	brne	.+2      	; 0x91a <m_wii_open+0x12a>
 918:	66 c0       	rjmp	.+204    	; 0x9e6 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 91a:	84 e9       	ldi	r24, 0x94	; 148
 91c:	80 93 bc 00 	sts	0x00BC, r24
 920:	83 ec       	ldi	r24, 0xC3	; 195
 922:	99 e0       	ldi	r25, 0x09	; 9
 924:	01 97       	sbiw	r24, 0x01	; 1
 926:	f1 f7       	brne	.-4      	; 0x924 <m_wii_open+0x134>
 928:	00 c0       	rjmp	.+0      	; 0x92a <m_wii_open+0x13a>
 92a:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 92c:	88 e5       	ldi	r24, 0x58	; 88
 92e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <start_write>
 932:	88 23       	and	r24, r24
 934:	09 f4       	brne	.+2      	; 0x938 <m_wii_open+0x148>
 936:	59 c0       	rjmp	.+178    	; 0x9ea <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
 938:	83 e3       	ldi	r24, 0x33	; 51
 93a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 93e:	88 23       	and	r24, r24
 940:	09 f4       	brne	.+2      	; 0x944 <m_wii_open+0x154>
 942:	55 c0       	rjmp	.+170    	; 0x9ee <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
 944:	83 e0       	ldi	r24, 0x03	; 3
 946:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 94a:	88 23       	and	r24, r24
 94c:	09 f4       	brne	.+2      	; 0x950 <m_wii_open+0x160>
 94e:	51 c0       	rjmp	.+162    	; 0x9f2 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 950:	84 e9       	ldi	r24, 0x94	; 148
 952:	80 93 bc 00 	sts	0x00BC, r24
 956:	83 ec       	ldi	r24, 0xC3	; 195
 958:	99 e0       	ldi	r25, 0x09	; 9
 95a:	01 97       	sbiw	r24, 0x01	; 1
 95c:	f1 f7       	brne	.-4      	; 0x95a <m_wii_open+0x16a>
 95e:	00 c0       	rjmp	.+0      	; 0x960 <m_wii_open+0x170>
 960:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 962:	88 e5       	ldi	r24, 0x58	; 88
 964:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <start_write>
 968:	88 23       	and	r24, r24
 96a:	09 f4       	brne	.+2      	; 0x96e <m_wii_open+0x17e>
 96c:	44 c0       	rjmp	.+136    	; 0x9f6 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
 96e:	80 e3       	ldi	r24, 0x30	; 48
 970:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 974:	88 23       	and	r24, r24
 976:	09 f4       	brne	.+2      	; 0x97a <m_wii_open+0x18a>
 978:	40 c0       	rjmp	.+128    	; 0x9fa <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
 97a:	88 e0       	ldi	r24, 0x08	; 8
 97c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 980:	88 23       	and	r24, r24
 982:	e9 f1       	breq	.+122    	; 0x9fe <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 984:	84 e9       	ldi	r24, 0x94	; 148
 986:	80 93 bc 00 	sts	0x00BC, r24
 98a:	83 ec       	ldi	r24, 0xC3	; 195
 98c:	99 e0       	ldi	r25, 0x09	; 9
 98e:	01 97       	sbiw	r24, 0x01	; 1
 990:	f1 f7       	brne	.-4      	; 0x98e <m_wii_open+0x19e>
 992:	00 c0       	rjmp	.+0      	; 0x994 <m_wii_open+0x1a4>
 994:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
 996:	81 e0       	ldi	r24, 0x01	; 1
 998:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
 9a2:	80 e0       	ldi	r24, 0x00	; 0
 9a4:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 9ae:	80 e0       	ldi	r24, 0x00	; 0
 9b0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 9b6:	80 e0       	ldi	r24, 0x00	; 0
 9b8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 9ba:	80 e0       	ldi	r24, 0x00	; 0
 9bc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 9be:	80 e0       	ldi	r24, 0x00	; 0
 9c0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 9c2:	80 e0       	ldi	r24, 0x00	; 0
 9c4:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
 9c6:	80 e0       	ldi	r24, 0x00	; 0
 9c8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
 9ce:	80 e0       	ldi	r24, 0x00	; 0
 9d0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
 9d6:	80 e0       	ldi	r24, 0x00	; 0
 9d8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
 9de:	80 e0       	ldi	r24, 0x00	; 0
 9e0:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
 9e6:	80 e0       	ldi	r24, 0x00	; 0
 9e8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
 9f6:	80 e0       	ldi	r24, 0x00	; 0
 9f8:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
 9fe:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
 a00:	08 95       	ret

00000a02 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
 a02:	cf 93       	push	r28
 a04:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 a06:	84 ea       	ldi	r24, 0xA4	; 164
 a08:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
 a0c:	0e 94 c1 03 	call	0x782	; 0x782 <twi_wait>
 a10:	88 23       	and	r24, r24
 a12:	69 f0       	breq	.+26     	; 0xa2e <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
 a14:	8c 2f       	mov	r24, r28
 a16:	88 0f       	add	r24, r24
 a18:	8f 5f       	subi	r24, 0xFF	; 255
 a1a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
 a1e:	88 34       	cpi	r24, 0x48	; 72
 a20:	29 f4       	brne	.+10     	; 0xa2c <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 a22:	84 e9       	ldi	r24, 0x94	; 148
 a24:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
 a28:	80 e0       	ldi	r24, 0x00	; 0
 a2a:	01 c0       	rjmp	.+2      	; 0xa2e <start_read+0x2c>
	}	
	return 1;	// success
 a2c:	81 e0       	ldi	r24, 0x01	; 1
}	
 a2e:	cf 91       	pop	r28
 a30:	08 95       	ret

00000a32 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
 a32:	0f 93       	push	r16
 a34:	1f 93       	push	r17
 a36:	cf 93       	push	r28
 a38:	df 93       	push	r29
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
 a3e:	60 97       	sbiw	r28, 0x10	; 16
 a40:	0f b6       	in	r0, 0x3f	; 63
 a42:	f8 94       	cli
 a44:	de bf       	out	0x3e, r29	; 62
 a46:	0f be       	out	0x3f, r0	; 63
 a48:	cd bf       	out	0x3d, r28	; 61
 a4a:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 a4c:	fe 01       	movw	r30, r28
 a4e:	31 96       	adiw	r30, 0x01	; 1
 a50:	80 e1       	ldi	r24, 0x10	; 16
 a52:	df 01       	movw	r26, r30
 a54:	1d 92       	st	X+, r1
 a56:	8a 95       	dec	r24
 a58:	e9 f7       	brne	.-6      	; 0xa54 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
 a5a:	88 e5       	ldi	r24, 0x58	; 88
 a5c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <start_write>
 a60:	88 23       	and	r24, r24
 a62:	09 f4       	brne	.+2      	; 0xa66 <m_wii_read+0x34>
 a64:	69 c0       	rjmp	.+210    	; 0xb38 <__stack+0x39>
	if(!send_byte(0x36)){return 0;}
 a66:	86 e3       	ldi	r24, 0x36	; 54
 a68:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <send_byte>
 a6c:	88 23       	and	r24, r24
 a6e:	09 f4       	brne	.+2      	; 0xa72 <m_wii_read+0x40>
 a70:	65 c0       	rjmp	.+202    	; 0xb3c <__stack+0x3d>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 a72:	84 e9       	ldi	r24, 0x94	; 148
 a74:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a78:	b8 e0       	ldi	r27, 0x08	; 8
 a7a:	ba 95       	dec	r27
 a7c:	f1 f7       	brne	.-4      	; 0xa7a <m_wii_read+0x48>
 a7e:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
 a80:	88 e5       	ldi	r24, 0x58	; 88
 a82:	0e 94 01 05 	call	0xa02	; 0xa02 <start_read>
 a86:	88 23       	and	r24, r24
 a88:	09 f4       	brne	.+2      	; 0xa8c <m_wii_read+0x5a>
 a8a:	5a c0       	rjmp	.+180    	; 0xb40 <__stack+0x41>
 a8c:	be 01       	movw	r22, r28
 a8e:	6f 5f       	subi	r22, 0xFF	; 255
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	ae 01       	movw	r20, r28
 a94:	40 5f       	subi	r20, 0xF0	; 240
 a96:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 a98:	ec eb       	ldi	r30, 0xBC	; 188
 a9a:	f0 e0       	ldi	r31, 0x00	; 0
 a9c:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
 a9e:	2b eb       	ldi	r18, 0xBB	; 187
 aa0:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 aa2:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 aa4:	90 81       	ld	r25, Z
 aa6:	99 23       	and	r25, r25
 aa8:	ec f7       	brge	.-6      	; 0xaa4 <m_wii_read+0x72>
		temp[i] = TWDR;
 aaa:	d9 01       	movw	r26, r18
 aac:	9c 91       	ld	r25, X
 aae:	db 01       	movw	r26, r22
 ab0:	9d 93       	st	X+, r25
 ab2:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
 ab4:	a4 17       	cp	r26, r20
 ab6:	b5 07       	cpc	r27, r21
 ab8:	a1 f7       	brne	.-24     	; 0xaa2 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
 aba:	84 e8       	ldi	r24, 0x84	; 132
 abc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 ac0:	ec eb       	ldi	r30, 0xBC	; 188
 ac2:	f0 e0       	ldi	r31, 0x00	; 0
 ac4:	80 81       	ld	r24, Z
 ac6:	88 23       	and	r24, r24
 ac8:	ec f7       	brge	.-6      	; 0xac4 <m_wii_read+0x92>
	temp[15] = TWDR;
 aca:	80 91 bb 00 	lds	r24, 0x00BB
 ace:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 ad0:	84 e9       	ldi	r24, 0x94	; 148
 ad2:	80 93 bc 00 	sts	0x00BC, r24
 ad6:	be 01       	movw	r22, r28
 ad8:	6c 5f       	subi	r22, 0xFC	; 252
 ada:	7f 4f       	sbci	r23, 0xFF	; 255
 adc:	f8 01       	movw	r30, r16
 ade:	08 5e       	subi	r16, 0xE8	; 232
 ae0:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
 ae2:	db 01       	movw	r26, r22
 ae4:	2c 91       	ld	r18, X
 ae6:	32 2f       	mov	r19, r18
 ae8:	30 73       	andi	r19, 0x30	; 48
 aea:	cb 01       	movw	r24, r22
 aec:	02 97       	sbiw	r24, 0x02	; 2
 aee:	dc 01       	movw	r26, r24
 af0:	8c 91       	ld	r24, X
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	b0 e1       	ldi	r27, 0x10	; 16
 af6:	3b 9f       	mul	r19, r27
 af8:	80 0d       	add	r24, r0
 afa:	91 1d       	adc	r25, r1
 afc:	11 24       	eor	r1, r1
 afe:	91 83       	std	Z+1, r25	; 0x01
 b00:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
 b02:	42 2f       	mov	r20, r18
 b04:	40 7c       	andi	r20, 0xC0	; 192
 b06:	50 e0       	ldi	r21, 0x00	; 0
 b08:	44 0f       	add	r20, r20
 b0a:	55 1f       	adc	r21, r21
 b0c:	44 0f       	add	r20, r20
 b0e:	55 1f       	adc	r21, r21
 b10:	cb 01       	movw	r24, r22
 b12:	01 97       	sbiw	r24, 0x01	; 1
 b14:	dc 01       	movw	r26, r24
 b16:	8c 91       	ld	r24, X
 b18:	48 0f       	add	r20, r24
 b1a:	51 1d       	adc	r21, r1
 b1c:	53 83       	std	Z+3, r21	; 0x03
 b1e:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
 b20:	2f 70       	andi	r18, 0x0F	; 15
 b22:	30 e0       	ldi	r19, 0x00	; 0
 b24:	35 83       	std	Z+5, r19	; 0x05
 b26:	24 83       	std	Z+4, r18	; 0x04
 b28:	6d 5f       	subi	r22, 0xFD	; 253
 b2a:	7f 4f       	sbci	r23, 0xFF	; 255
 b2c:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
 b2e:	e0 17       	cp	r30, r16
 b30:	f1 07       	cpc	r31, r17
 b32:	b9 f6       	brne	.-82     	; 0xae2 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	05 c0       	rjmp	.+10     	; 0xb42 <__stack+0x43>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
 b38:	80 e0       	ldi	r24, 0x00	; 0
 b3a:	03 c0       	rjmp	.+6      	; 0xb42 <__stack+0x43>
	if(!send_byte(0x36)){return 0;}
 b3c:	80 e0       	ldi	r24, 0x00	; 0
 b3e:	01 c0       	rjmp	.+2      	; 0xb42 <__stack+0x43>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
 b40:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
 b42:	60 96       	adiw	r28, 0x10	; 16
 b44:	0f b6       	in	r0, 0x3f	; 63
 b46:	f8 94       	cli
 b48:	de bf       	out	0x3e, r29	; 62
 b4a:	0f be       	out	0x3f, r0	; 63
 b4c:	cd bf       	out	0x3d, r28	; 61
 b4e:	df 91       	pop	r29
 b50:	cf 91       	pop	r28
 b52:	1f 91       	pop	r17
 b54:	0f 91       	pop	r16
 b56:	08 95       	ret

00000b58 <__utoa_ncheck>:
 b58:	bb 27       	eor	r27, r27

00000b5a <__utoa_common>:
 b5a:	fb 01       	movw	r30, r22
 b5c:	55 27       	eor	r21, r21
 b5e:	aa 27       	eor	r26, r26
 b60:	88 0f       	add	r24, r24
 b62:	99 1f       	adc	r25, r25
 b64:	aa 1f       	adc	r26, r26
 b66:	a4 17       	cp	r26, r20
 b68:	10 f0       	brcs	.+4      	; 0xb6e <__utoa_common+0x14>
 b6a:	a4 1b       	sub	r26, r20
 b6c:	83 95       	inc	r24
 b6e:	50 51       	subi	r21, 0x10	; 16
 b70:	b9 f7       	brne	.-18     	; 0xb60 <__utoa_common+0x6>
 b72:	a0 5d       	subi	r26, 0xD0	; 208
 b74:	aa 33       	cpi	r26, 0x3A	; 58
 b76:	08 f0       	brcs	.+2      	; 0xb7a <__utoa_common+0x20>
 b78:	a9 5d       	subi	r26, 0xD9	; 217
 b7a:	a1 93       	st	Z+, r26
 b7c:	00 97       	sbiw	r24, 0x00	; 0
 b7e:	79 f7       	brne	.-34     	; 0xb5e <__utoa_common+0x4>
 b80:	b1 11       	cpse	r27, r1
 b82:	b1 93       	st	Z+, r27
 b84:	11 92       	st	Z+, r1
 b86:	cb 01       	movw	r24, r22
 b88:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <strrev>

00000b8c <strrev>:
 b8c:	dc 01       	movw	r26, r24
 b8e:	fc 01       	movw	r30, r24
 b90:	67 2f       	mov	r22, r23
 b92:	71 91       	ld	r23, Z+
 b94:	77 23       	and	r23, r23
 b96:	e1 f7       	brne	.-8      	; 0xb90 <strrev+0x4>
 b98:	32 97       	sbiw	r30, 0x02	; 2
 b9a:	04 c0       	rjmp	.+8      	; 0xba4 <strrev+0x18>
 b9c:	7c 91       	ld	r23, X
 b9e:	6d 93       	st	X+, r22
 ba0:	70 83       	st	Z, r23
 ba2:	62 91       	ld	r22, -Z
 ba4:	ae 17       	cp	r26, r30
 ba6:	bf 07       	cpc	r27, r31
 ba8:	c8 f3       	brcs	.-14     	; 0xb9c <strrev+0x10>
 baa:	08 95       	ret

00000bac <_exit>:
 bac:	f8 94       	cli

00000bae <__stop_program>:
 bae:	ff cf       	rjmp	.-2      	; 0xbae <__stop_program>
