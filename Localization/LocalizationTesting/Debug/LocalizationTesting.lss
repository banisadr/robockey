
LocalizationTesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00001ede  00001f72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ede  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800114  00800114  00001f86  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001f86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002310  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008bc  00000000  00000000  00004538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c69  00000000  00000000  00004df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000664  00000000  00000000  00005a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ba  00000000  00000000  000060c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002dbc  00000000  00000000  0000697e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  0000973a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__ctors_end>
       4:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
       8:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
       c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      10:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      14:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      18:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      1c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      20:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      24:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      28:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_10>
      2c:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__vector_11>
      30:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      34:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      38:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      3c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      40:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      44:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      48:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      4c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      50:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      54:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      58:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      5c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      60:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      64:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      68:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      6c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      70:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      74:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      78:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      7c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      80:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      84:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      88:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      8c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      90:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      94:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      98:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      9c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      a0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      a4:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      a8:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__trampolines_end>:
      f8:	0a 00       	.word	0x000a	; ????

000000fa <__c.2021>:
      fa:	20 00                                                .

000000fc <__c.2019>:
      fc:	20 00                                                .

000000fe <descriptor_list>:
      fe:	00 01 00 00 95 01 12 00 02 00 00 52 01 43 00 03     ...........R.C..
     10e:	00 00 4e 01 04 01 03 09 04 3a 01 12 02 03 09 04     ..N......:......
     11e:	32 01 06 03 03 09 04 28 01 08                       2......(..

00000128 <string3>:
     128:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000132 <string2>:
     132:	06 03 4d 00 32 00 00 00                             ..M.2...

0000013a <string1>:
     13a:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     14a:	65 00 00 00                                         e...

0000014e <string0>:
     14e:	04 03 09 04                                         ....

00000152 <config1_descriptor>:
     152:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     162:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     172:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     182:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     192:	40 00 00                                            @..

00000195 <device_descriptor>:
     195:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1a5:	03 01                                               ..

000001a7 <endpoint_config_table>:
     1a7:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001b2 <__ctors_end>:
     1b2:	11 24       	eor	r1, r1
     1b4:	1f be       	out	0x3f, r1	; 63
     1b6:	cf ef       	ldi	r28, 0xFF	; 255
     1b8:	da e0       	ldi	r29, 0x0A	; 10
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	cd bf       	out	0x3d, r28	; 61

000001be <__do_copy_data>:
     1be:	11 e0       	ldi	r17, 0x01	; 1
     1c0:	a0 e0       	ldi	r26, 0x00	; 0
     1c2:	b1 e0       	ldi	r27, 0x01	; 1
     1c4:	ee ed       	ldi	r30, 0xDE	; 222
     1c6:	fe e1       	ldi	r31, 0x1E	; 30
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <__do_copy_data+0x10>
     1ca:	05 90       	lpm	r0, Z+
     1cc:	0d 92       	st	X+, r0
     1ce:	a4 31       	cpi	r26, 0x14	; 20
     1d0:	b1 07       	cpc	r27, r17
     1d2:	d9 f7       	brne	.-10     	; 0x1ca <__do_copy_data+0xc>

000001d4 <__do_clear_bss>:
     1d4:	21 e0       	ldi	r18, 0x01	; 1
     1d6:	a4 e1       	ldi	r26, 0x14	; 20
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	01 c0       	rjmp	.+2      	; 0x1de <.do_clear_bss_start>

000001dc <.do_clear_bss_loop>:
     1dc:	1d 92       	st	X+, r1

000001de <.do_clear_bss_start>:
     1de:	a0 34       	cpi	r26, 0x40	; 64
     1e0:	b2 07       	cpc	r27, r18
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <.do_clear_bss_loop>
     1e4:	0e 94 3c 06 	call	0xc78	; 0xc78 <main>
     1e8:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <_exit>

000001ec <__bad_interrupt>:
     1ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f0 <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	91 05       	cpc	r25, r1
     1f4:	f9 f0       	breq	.+62     	; 0x234 <distIndex+0x44>
     1f6:	2c f4       	brge	.+10     	; 0x202 <distIndex+0x12>
     1f8:	00 97       	sbiw	r24, 0x00	; 0
     1fa:	51 f0       	breq	.+20     	; 0x210 <distIndex+0x20>
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	89 f0       	breq	.+34     	; 0x222 <distIndex+0x32>
     200:	42 c0       	rjmp	.+132    	; 0x286 <distIndex+0x96>
     202:	84 30       	cpi	r24, 0x04	; 4
     204:	91 05       	cpc	r25, r1
     206:	51 f1       	breq	.+84     	; 0x25c <distIndex+0x6c>
     208:	f4 f0       	brlt	.+60     	; 0x246 <distIndex+0x56>
     20a:	05 97       	sbiw	r24, 0x05	; 5
     20c:	91 f1       	breq	.+100    	; 0x272 <distIndex+0x82>
     20e:	3b c0       	rjmp	.+118    	; 0x286 <distIndex+0x96>
	{
		case 0 : 
			pointsUsed[0] = 0;
     210:	e4 e1       	ldi	r30, 0x14	; 20
     212:	f1 e0       	ldi	r31, 0x01	; 1
     214:	11 82       	std	Z+1, r1	; 0x01
     216:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	93 83       	std	Z+3, r25	; 0x03
     21e:	82 83       	std	Z+2, r24	; 0x02
			break;
     220:	32 c0       	rjmp	.+100    	; 0x286 <distIndex+0x96>
			
		case 1 : 
			pointsUsed[0] = 0;
     222:	e4 e1       	ldi	r30, 0x14	; 20
     224:	f1 e0       	ldi	r31, 0x01	; 1
     226:	11 82       	std	Z+1, r1	; 0x01
     228:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	93 83       	std	Z+3, r25	; 0x03
     230:	82 83       	std	Z+2, r24	; 0x02
			break;
     232:	29 c0       	rjmp	.+82     	; 0x286 <distIndex+0x96>
			
		case 2 : 
			pointsUsed[0] = 0;
     234:	e4 e1       	ldi	r30, 0x14	; 20
     236:	f1 e0       	ldi	r31, 0x01	; 1
     238:	11 82       	std	Z+1, r1	; 0x01
     23a:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     23c:	83 e0       	ldi	r24, 0x03	; 3
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	93 83       	std	Z+3, r25	; 0x03
     242:	82 83       	std	Z+2, r24	; 0x02
			break;
     244:	20 c0       	rjmp	.+64     	; 0x286 <distIndex+0x96>
			
		case 3 : 
			pointsUsed[0] = 1;
     246:	e4 e1       	ldi	r30, 0x14	; 20
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	91 83       	std	Z+1, r25	; 0x01
     250:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	93 83       	std	Z+3, r25	; 0x03
     258:	82 83       	std	Z+2, r24	; 0x02
			break;
     25a:	15 c0       	rjmp	.+42     	; 0x286 <distIndex+0x96>
			
		case 4 : 
			pointsUsed[0] = 1;
     25c:	e4 e1       	ldi	r30, 0x14	; 20
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	91 83       	std	Z+1, r25	; 0x01
     266:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	93 83       	std	Z+3, r25	; 0x03
     26e:	82 83       	std	Z+2, r24	; 0x02
			break;
     270:	0a c0       	rjmp	.+20     	; 0x286 <distIndex+0x96>
			
		case 5 :
			pointsUsed[0] = 2;
     272:	e4 e1       	ldi	r30, 0x14	; 20
     274:	f1 e0       	ldi	r31, 0x01	; 1
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     27e:	83 e0       	ldi	r24, 0x03	; 3
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	93 83       	std	Z+3, r25	; 0x03
     284:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     286:	84 e1       	ldi	r24, 0x14	; 20
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	08 95       	ret

0000028c <orientationCalculationFour>:


void orientationCalculationFour(int* pointsLong, float distVect[], int* top, int* bottom)
{
     28c:	2f 92       	push	r2
     28e:	3f 92       	push	r3
     290:	4f 92       	push	r4
     292:	5f 92       	push	r5
     294:	6f 92       	push	r6
     296:	7f 92       	push	r7
     298:	8f 92       	push	r8
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	00 d0       	rcall	.+0      	; 0x2b2 <orientationCalculationFour+0x26>
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <orientationCalculationFour+0x28>
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	5c 01       	movw	r10, r24
     2ba:	4a 01       	movw	r8, r20
     2bc:	3a 83       	std	Y+2, r19	; 0x02
     2be:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     2c0:	06 2f       	mov	r16, r22
     2c2:	17 2f       	mov	r17, r23
     2c4:	f8 01       	movw	r30, r16
     2c6:	41 90       	ld	r4, Z+
     2c8:	51 90       	ld	r5, Z+
     2ca:	61 90       	ld	r6, Z+
     2cc:	71 90       	ld	r7, Z+
     2ce:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     2d0:	1c 82       	std	Y+4, r1	; 0x04
     2d2:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int* pointsLong, float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     2d4:	21 2c       	mov	r2, r1
     2d6:	31 2c       	mov	r3, r1
     2d8:	12 c0       	rjmp	.+36     	; 0x2fe <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     2da:	f8 01       	movw	r30, r16
     2dc:	c1 90       	ld	r12, Z+
     2de:	d1 90       	ld	r13, Z+
     2e0:	e1 90       	ld	r14, Z+
     2e2:	f1 90       	ld	r15, Z+
     2e4:	8f 01       	movw	r16, r30
     2e6:	a7 01       	movw	r20, r14
     2e8:	96 01       	movw	r18, r12
     2ea:	c3 01       	movw	r24, r6
     2ec:	b2 01       	movw	r22, r4
     2ee:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__gesf2>
     2f2:	18 16       	cp	r1, r24
     2f4:	24 f4       	brge	.+8      	; 0x2fe <orientationCalculationFour+0x72>
     2f6:	26 01       	movw	r4, r12
     2f8:	37 01       	movw	r6, r14
void orientationCalculationFour(int* pointsLong, float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     2fa:	2b 80       	ldd	r2, Y+3	; 0x03
     2fc:	3c 80       	ldd	r3, Y+4	; 0x04
     2fe:	8b 81       	ldd	r24, Y+3	; 0x03
     300:	9c 81       	ldd	r25, Y+4	; 0x04
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	9c 83       	std	Y+4, r25	; 0x04
     306:	8b 83       	std	Y+3, r24	; 0x03
     308:	06 97       	sbiw	r24, 0x06	; 6
     30a:	39 f7       	brne	.-50     	; 0x2da <orientationCalculationFour+0x4e>
	}
	
	//Find points used by shortest length
	
	int* pointsShort; 
	pointsShort = distIndex(indexMin);
     30c:	82 2d       	mov	r24, r2
     30e:	93 2d       	mov	r25, r3
     310:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <distIndex>
	
	if (pointsShort[0] == pointsLong[0]){
     314:	fc 01       	movw	r30, r24
     316:	20 81       	ld	r18, Z
     318:	31 81       	ldd	r19, Z+1	; 0x01
     31a:	f5 01       	movw	r30, r10
     31c:	40 81       	ld	r20, Z
     31e:	51 81       	ldd	r21, Z+1	; 0x01
     320:	24 17       	cp	r18, r20
     322:	35 07       	cpc	r19, r21
     324:	59 f4       	brne	.+22     	; 0x33c <orientationCalculationFour+0xb0>
		*top = pointsLong[0];
     326:	f4 01       	movw	r30, r8
     328:	31 83       	std	Z+1, r19	; 0x01
     32a:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     32c:	f5 01       	movw	r30, r10
     32e:	82 81       	ldd	r24, Z+2	; 0x02
     330:	93 81       	ldd	r25, Z+3	; 0x03
     332:	e9 81       	ldd	r30, Y+1	; 0x01
     334:	fa 81       	ldd	r31, Y+2	; 0x02
     336:	91 83       	std	Z+1, r25	; 0x01
     338:	80 83       	st	Z, r24
     33a:	3f c0       	rjmp	.+126    	; 0x3ba <orientationCalculationFour+0x12e>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     33c:	f5 01       	movw	r30, r10
     33e:	62 81       	ldd	r22, Z+2	; 0x02
     340:	73 81       	ldd	r23, Z+3	; 0x03
     342:	26 17       	cp	r18, r22
     344:	37 07       	cpc	r19, r23
     346:	59 f4       	brne	.+22     	; 0x35e <orientationCalculationFour+0xd2>
			*top = pointsLong[1];
     348:	f4 01       	movw	r30, r8
     34a:	31 83       	std	Z+1, r19	; 0x01
     34c:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     34e:	f5 01       	movw	r30, r10
     350:	80 81       	ld	r24, Z
     352:	91 81       	ldd	r25, Z+1	; 0x01
     354:	e9 81       	ldd	r30, Y+1	; 0x01
     356:	fa 81       	ldd	r31, Y+2	; 0x02
     358:	91 83       	std	Z+1, r25	; 0x01
     35a:	80 83       	st	Z, r24
     35c:	2e c0       	rjmp	.+92     	; 0x3ba <orientationCalculationFour+0x12e>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     35e:	fc 01       	movw	r30, r24
     360:	82 81       	ldd	r24, Z+2	; 0x02
     362:	93 81       	ldd	r25, Z+3	; 0x03
     364:	48 17       	cp	r20, r24
     366:	59 07       	cpc	r21, r25
     368:	59 f4       	brne	.+22     	; 0x380 <orientationCalculationFour+0xf4>
				*top = pointsLong[0];
     36a:	f4 01       	movw	r30, r8
     36c:	51 83       	std	Z+1, r21	; 0x01
     36e:	40 83       	st	Z, r20
				*bottom = pointsLong[1];
     370:	f5 01       	movw	r30, r10
     372:	82 81       	ldd	r24, Z+2	; 0x02
     374:	93 81       	ldd	r25, Z+3	; 0x03
     376:	e9 81       	ldd	r30, Y+1	; 0x01
     378:	fa 81       	ldd	r31, Y+2	; 0x02
     37a:	91 83       	std	Z+1, r25	; 0x01
     37c:	80 83       	st	Z, r24
     37e:	1d c0       	rjmp	.+58     	; 0x3ba <orientationCalculationFour+0x12e>
			} else {
				if (pointsShort[1] == pointsLong[1])
     380:	68 17       	cp	r22, r24
     382:	79 07       	cpc	r23, r25
     384:	59 f4       	brne	.+22     	; 0x39c <orientationCalculationFour+0x110>
				{
					*top = pointsLong[1];
     386:	f4 01       	movw	r30, r8
     388:	71 83       	std	Z+1, r23	; 0x01
     38a:	60 83       	st	Z, r22
					*bottom = pointsLong[0];
     38c:	f5 01       	movw	r30, r10
     38e:	80 81       	ld	r24, Z
     390:	91 81       	ldd	r25, Z+1	; 0x01
     392:	e9 81       	ldd	r30, Y+1	; 0x01
     394:	fa 81       	ldd	r31, Y+2	; 0x02
     396:	91 83       	std	Z+1, r25	; 0x01
     398:	80 83       	st	Z, r24
     39a:	0f c0       	rjmp	.+30     	; 0x3ba <orientationCalculationFour+0x12e>
				} else {
						m_green(OFF);
     39c:	6a 9a       	sbi	0x0d, 2	; 13
     39e:	72 9a       	sbi	0x0e, 2	; 14
						*top = pointsLong[1];
     3a0:	f5 01       	movw	r30, r10
     3a2:	82 81       	ldd	r24, Z+2	; 0x02
     3a4:	93 81       	ldd	r25, Z+3	; 0x03
     3a6:	f4 01       	movw	r30, r8
     3a8:	91 83       	std	Z+1, r25	; 0x01
     3aa:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     3ac:	f5 01       	movw	r30, r10
     3ae:	80 81       	ld	r24, Z
     3b0:	91 81       	ldd	r25, Z+1	; 0x01
     3b2:	e9 81       	ldd	r30, Y+1	; 0x01
     3b4:	fa 81       	ldd	r31, Y+2	; 0x02
     3b6:	91 83       	std	Z+1, r25	; 0x01
     3b8:	80 83       	st	Z, r24
	}
// 	m_usb_tx_int(*top);
// 	m_usb_tx_string(" ");
// 	m_usb_tx_int(*bottom);
// 	m_usb_tx_string(" ");
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	ff 90       	pop	r15
     3cc:	ef 90       	pop	r14
     3ce:	df 90       	pop	r13
     3d0:	cf 90       	pop	r12
     3d2:	bf 90       	pop	r11
     3d4:	af 90       	pop	r10
     3d6:	9f 90       	pop	r9
     3d8:	8f 90       	pop	r8
     3da:	7f 90       	pop	r7
     3dc:	6f 90       	pop	r6
     3de:	5f 90       	pop	r5
     3e0:	4f 90       	pop	r4
     3e2:	3f 90       	pop	r3
     3e4:	2f 90       	pop	r2
     3e6:	08 95       	ret

000003e8 <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     3e8:	2f 92       	push	r2
     3ea:	3f 92       	push	r3
     3ec:	4f 92       	push	r4
     3ee:	5f 92       	push	r5
     3f0:	6f 92       	push	r6
     3f2:	7f 92       	push	r7
     3f4:	8f 92       	push	r8
     3f6:	9f 92       	push	r9
     3f8:	af 92       	push	r10
     3fa:	bf 92       	push	r11
     3fc:	cf 92       	push	r12
     3fe:	df 92       	push	r13
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	ee 97       	sbiw	r28, 0x3e	; 62
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     41e:	fc 01       	movw	r30, r24
     420:	04 80       	ldd	r0, Z+4	; 0x04
     422:	f5 81       	ldd	r31, Z+5	; 0x05
     424:	e0 2d       	mov	r30, r0
     426:	fe 8f       	std	Y+30, r31	; 0x1e
     428:	ed 8f       	std	Y+29, r30	; 0x1d
     42a:	fc 01       	movw	r30, r24
     42c:	00 81       	ld	r16, Z
     42e:	11 81       	ldd	r17, Z+1	; 0x01
     430:	6d 8d       	ldd	r22, Y+29	; 0x1d
     432:	7e 8d       	ldd	r23, Y+30	; 0x1e
     434:	60 1b       	sub	r22, r16
     436:	71 0b       	sbc	r23, r17
     438:	07 2e       	mov	r0, r23
     43a:	00 0c       	add	r0, r0
     43c:	88 0b       	sbc	r24, r24
     43e:	99 0b       	sbc	r25, r25
     440:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     444:	6b 01       	movw	r12, r22
     446:	7c 01       	movw	r14, r24
     448:	f2 01       	movw	r30, r4
     44a:	06 80       	ldd	r0, Z+6	; 0x06
     44c:	f7 81       	ldd	r31, Z+7	; 0x07
     44e:	e0 2d       	mov	r30, r0
     450:	fa a3       	std	Y+34, r31	; 0x22
     452:	e9 a3       	std	Y+33, r30	; 0x21
     454:	f2 01       	movw	r30, r4
     456:	22 80       	ldd	r2, Z+2	; 0x02
     458:	33 80       	ldd	r3, Z+3	; 0x03
     45a:	a9 a0       	ldd	r10, Y+33	; 0x21
     45c:	ba a0       	ldd	r11, Y+34	; 0x22
     45e:	a2 18       	sub	r10, r2
     460:	b3 08       	sbc	r11, r3
     462:	9b 01       	movw	r18, r22
     464:	ac 01       	movw	r20, r24
     466:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     46a:	6d a3       	std	Y+37, r22	; 0x25
     46c:	7e a3       	std	Y+38, r23	; 0x26
     46e:	8f a3       	std	Y+39, r24	; 0x27
     470:	98 a7       	std	Y+40, r25	; 0x28
     472:	aa 9c       	mul	r10, r10
     474:	40 01       	movw	r8, r0
     476:	ab 9c       	mul	r10, r11
     478:	90 0c       	add	r9, r0
     47a:	90 0c       	add	r9, r0
     47c:	11 24       	eor	r1, r1
     47e:	09 2c       	mov	r0, r9
     480:	00 0c       	add	r0, r0
     482:	aa 08       	sbc	r10, r10
     484:	bb 08       	sbc	r11, r11
     486:	a7 01       	movw	r20, r14
     488:	96 01       	movw	r18, r12
     48a:	c7 01       	movw	r24, r14
     48c:	b6 01       	movw	r22, r12
     48e:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     492:	6b 01       	movw	r12, r22
     494:	7c 01       	movw	r14, r24
     496:	c5 01       	movw	r24, r10
     498:	b4 01       	movw	r22, r8
     49a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     49e:	9b 01       	movw	r18, r22
     4a0:	ac 01       	movw	r20, r24
     4a2:	c7 01       	movw	r24, r14
     4a4:	b6 01       	movw	r22, r12
     4a6:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__addsf3>
     4aa:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <sqrt>
     4ae:	6f ab       	std	Y+55, r22	; 0x37
     4b0:	78 af       	std	Y+56, r23	; 0x38
     4b2:	89 af       	std	Y+57, r24	; 0x39
     4b4:	9a af       	std	Y+58, r25	; 0x3a
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     4b6:	f2 01       	movw	r30, r4
     4b8:	00 84       	ldd	r0, Z+8	; 0x08
     4ba:	f1 85       	ldd	r31, Z+9	; 0x09
     4bc:	e0 2d       	mov	r30, r0
     4be:	fe a3       	std	Y+38, r31	; 0x26
     4c0:	ed a3       	std	Y+37, r30	; 0x25
     4c2:	bf 01       	movw	r22, r30
     4c4:	60 1b       	sub	r22, r16
     4c6:	71 0b       	sbc	r23, r17
     4c8:	07 2e       	mov	r0, r23
     4ca:	00 0c       	add	r0, r0
     4cc:	88 0b       	sbc	r24, r24
     4ce:	99 0b       	sbc	r25, r25
     4d0:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     4d4:	6b 01       	movw	r12, r22
     4d6:	7c 01       	movw	r14, r24
     4d8:	f2 01       	movw	r30, r4
     4da:	62 84       	ldd	r6, Z+10	; 0x0a
     4dc:	73 84       	ldd	r7, Z+11	; 0x0b
     4de:	53 01       	movw	r10, r6
     4e0:	a2 18       	sub	r10, r2
     4e2:	b3 08       	sbc	r11, r3
     4e4:	9b 01       	movw	r18, r22
     4e6:	ac 01       	movw	r20, r24
     4e8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     4ec:	69 a7       	std	Y+41, r22	; 0x29
     4ee:	7a a7       	std	Y+42, r23	; 0x2a
     4f0:	8b a7       	std	Y+43, r24	; 0x2b
     4f2:	9c a7       	std	Y+44, r25	; 0x2c
     4f4:	aa 9c       	mul	r10, r10
     4f6:	40 01       	movw	r8, r0
     4f8:	ab 9c       	mul	r10, r11
     4fa:	90 0c       	add	r9, r0
     4fc:	90 0c       	add	r9, r0
     4fe:	11 24       	eor	r1, r1
     500:	09 2c       	mov	r0, r9
     502:	00 0c       	add	r0, r0
     504:	aa 08       	sbc	r10, r10
     506:	bb 08       	sbc	r11, r11
     508:	a7 01       	movw	r20, r14
     50a:	96 01       	movw	r18, r12
     50c:	c7 01       	movw	r24, r14
     50e:	b6 01       	movw	r22, r12
     510:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     514:	6b 01       	movw	r12, r22
     516:	7c 01       	movw	r14, r24
     518:	c5 01       	movw	r24, r10
     51a:	b4 01       	movw	r22, r8
     51c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     520:	9b 01       	movw	r18, r22
     522:	ac 01       	movw	r20, r24
     524:	c7 01       	movw	r24, r14
     526:	b6 01       	movw	r22, r12
     528:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__addsf3>
     52c:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <sqrt>
     530:	6b af       	std	Y+59, r22	; 0x3b
     532:	7c af       	std	Y+60, r23	; 0x3c
     534:	8d af       	std	Y+61, r24	; 0x3d
     536:	9e af       	std	Y+62, r25	; 0x3e
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     538:	f2 01       	movw	r30, r4
     53a:	04 84       	ldd	r0, Z+12	; 0x0c
     53c:	f5 85       	ldd	r31, Z+13	; 0x0d
     53e:	e0 2d       	mov	r30, r0
     540:	fa a7       	std	Y+42, r31	; 0x2a
     542:	e9 a7       	std	Y+41, r30	; 0x29
     544:	bf 01       	movw	r22, r30
     546:	60 1b       	sub	r22, r16
     548:	71 0b       	sbc	r23, r17
     54a:	07 2e       	mov	r0, r23
     54c:	00 0c       	add	r0, r0
     54e:	88 0b       	sbc	r24, r24
     550:	99 0b       	sbc	r25, r25
     552:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     556:	4b 01       	movw	r8, r22
     558:	5c 01       	movw	r10, r24
     55a:	f2 01       	movw	r30, r4
     55c:	06 84       	ldd	r0, Z+14	; 0x0e
     55e:	f7 85       	ldd	r31, Z+15	; 0x0f
     560:	e0 2d       	mov	r30, r0
     562:	fe a7       	std	Y+46, r31	; 0x2e
     564:	ed a7       	std	Y+45, r30	; 0x2d
     566:	8f 01       	movw	r16, r30
     568:	02 19       	sub	r16, r2
     56a:	13 09       	sbc	r17, r3
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24
     570:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     574:	6f a7       	std	Y+47, r22	; 0x2f
     576:	78 ab       	std	Y+48, r23	; 0x30
     578:	89 ab       	std	Y+49, r24	; 0x31
     57a:	9a ab       	std	Y+50, r25	; 0x32
     57c:	00 9f       	mul	r16, r16
     57e:	60 01       	movw	r12, r0
     580:	01 9f       	mul	r16, r17
     582:	d0 0c       	add	r13, r0
     584:	d0 0c       	add	r13, r0
     586:	11 24       	eor	r1, r1
     588:	0d 2c       	mov	r0, r13
     58a:	00 0c       	add	r0, r0
     58c:	ee 08       	sbc	r14, r14
     58e:	ff 08       	sbc	r15, r15
     590:	a5 01       	movw	r20, r10
     592:	94 01       	movw	r18, r8
     594:	c5 01       	movw	r24, r10
     596:	b4 01       	movw	r22, r8
     598:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     59c:	4b 01       	movw	r8, r22
     59e:	5c 01       	movw	r10, r24
     5a0:	c7 01       	movw	r24, r14
     5a2:	b6 01       	movw	r22, r12
     5a4:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     5a8:	9b 01       	movw	r18, r22
     5aa:	ac 01       	movw	r20, r24
     5ac:	c5 01       	movw	r24, r10
     5ae:	b4 01       	movw	r22, r8
     5b0:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__addsf3>
     5b4:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <sqrt>
     5b8:	6f a7       	std	Y+47, r22	; 0x2f
     5ba:	78 ab       	std	Y+48, r23	; 0x30
     5bc:	89 ab       	std	Y+49, r24	; 0x31
     5be:	9a ab       	std	Y+50, r25	; 0x32
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     5c0:	6d a1       	ldd	r22, Y+37	; 0x25
     5c2:	7e a1       	ldd	r23, Y+38	; 0x26
     5c4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     5c6:	3e 8d       	ldd	r19, Y+30	; 0x1e
     5c8:	62 1b       	sub	r22, r18
     5ca:	73 0b       	sbc	r23, r19
     5cc:	07 2e       	mov	r0, r23
     5ce:	00 0c       	add	r0, r0
     5d0:	88 0b       	sbc	r24, r24
     5d2:	99 0b       	sbc	r25, r25
     5d4:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     5d8:	4b 01       	movw	r8, r22
     5da:	5c 01       	movw	r10, r24
     5dc:	83 01       	movw	r16, r6
     5de:	49 a1       	ldd	r20, Y+33	; 0x21
     5e0:	5a a1       	ldd	r21, Y+34	; 0x22
     5e2:	04 1b       	sub	r16, r20
     5e4:	15 0b       	sbc	r17, r21
     5e6:	9b 01       	movw	r18, r22
     5e8:	ac 01       	movw	r20, r24
     5ea:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     5ee:	6b ab       	std	Y+51, r22	; 0x33
     5f0:	7c ab       	std	Y+52, r23	; 0x34
     5f2:	8d ab       	std	Y+53, r24	; 0x35
     5f4:	9e ab       	std	Y+54, r25	; 0x36
     5f6:	00 9f       	mul	r16, r16
     5f8:	60 01       	movw	r12, r0
     5fa:	01 9f       	mul	r16, r17
     5fc:	d0 0c       	add	r13, r0
     5fe:	d0 0c       	add	r13, r0
     600:	11 24       	eor	r1, r1
     602:	0d 2c       	mov	r0, r13
     604:	00 0c       	add	r0, r0
     606:	ee 08       	sbc	r14, r14
     608:	ff 08       	sbc	r15, r15
     60a:	a5 01       	movw	r20, r10
     60c:	94 01       	movw	r18, r8
     60e:	c5 01       	movw	r24, r10
     610:	b4 01       	movw	r22, r8
     612:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     616:	4b 01       	movw	r8, r22
     618:	5c 01       	movw	r10, r24
     61a:	c7 01       	movw	r24, r14
     61c:	b6 01       	movw	r22, r12
     61e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     622:	9b 01       	movw	r18, r22
     624:	ac 01       	movw	r20, r24
     626:	c5 01       	movw	r24, r10
     628:	b4 01       	movw	r22, r8
     62a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__addsf3>
     62e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <sqrt>
     632:	6b ab       	std	Y+51, r22	; 0x33
     634:	7c ab       	std	Y+52, r23	; 0x34
     636:	8d ab       	std	Y+53, r24	; 0x35
     638:	9e ab       	std	Y+54, r25	; 0x36
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     63a:	69 a5       	ldd	r22, Y+41	; 0x29
     63c:	7a a5       	ldd	r23, Y+42	; 0x2a
     63e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     640:	9e 8d       	ldd	r25, Y+30	; 0x1e
     642:	68 1b       	sub	r22, r24
     644:	79 0b       	sbc	r23, r25
     646:	07 2e       	mov	r0, r23
     648:	00 0c       	add	r0, r0
     64a:	88 0b       	sbc	r24, r24
     64c:	99 0b       	sbc	r25, r25
     64e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     652:	4b 01       	movw	r8, r22
     654:	5c 01       	movw	r10, r24
     656:	0d a5       	ldd	r16, Y+45	; 0x2d
     658:	1e a5       	ldd	r17, Y+46	; 0x2e
     65a:	e9 a1       	ldd	r30, Y+33	; 0x21
     65c:	fa a1       	ldd	r31, Y+34	; 0x22
     65e:	0e 1b       	sub	r16, r30
     660:	1f 0b       	sbc	r17, r31
     662:	9b 01       	movw	r18, r22
     664:	ac 01       	movw	r20, r24
     666:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     66a:	6d 8f       	std	Y+29, r22	; 0x1d
     66c:	7e 8f       	std	Y+30, r23	; 0x1e
     66e:	8f 8f       	std	Y+31, r24	; 0x1f
     670:	98 a3       	std	Y+32, r25	; 0x20
     672:	00 9f       	mul	r16, r16
     674:	60 01       	movw	r12, r0
     676:	01 9f       	mul	r16, r17
     678:	d0 0c       	add	r13, r0
     67a:	d0 0c       	add	r13, r0
     67c:	11 24       	eor	r1, r1
     67e:	0d 2c       	mov	r0, r13
     680:	00 0c       	add	r0, r0
     682:	ee 08       	sbc	r14, r14
     684:	ff 08       	sbc	r15, r15
     686:	a5 01       	movw	r20, r10
     688:	94 01       	movw	r18, r8
     68a:	c5 01       	movw	r24, r10
     68c:	b4 01       	movw	r22, r8
     68e:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     692:	4b 01       	movw	r8, r22
     694:	5c 01       	movw	r10, r24
     696:	c7 01       	movw	r24, r14
     698:	b6 01       	movw	r22, r12
     69a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     69e:	9b 01       	movw	r18, r22
     6a0:	ac 01       	movw	r20, r24
     6a2:	c5 01       	movw	r24, r10
     6a4:	b4 01       	movw	r22, r8
     6a6:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__addsf3>
     6aa:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <sqrt>
     6ae:	4b 01       	movw	r8, r22
     6b0:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     6b2:	69 a5       	ldd	r22, Y+41	; 0x29
     6b4:	7a a5       	ldd	r23, Y+42	; 0x2a
     6b6:	2d a1       	ldd	r18, Y+37	; 0x25
     6b8:	3e a1       	ldd	r19, Y+38	; 0x26
     6ba:	62 1b       	sub	r22, r18
     6bc:	73 0b       	sbc	r23, r19
     6be:	07 2e       	mov	r0, r23
     6c0:	00 0c       	add	r0, r0
     6c2:	88 0b       	sbc	r24, r24
     6c4:	99 0b       	sbc	r25, r25
     6c6:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     6ca:	6d 8f       	std	Y+29, r22	; 0x1d
     6cc:	7e 8f       	std	Y+30, r23	; 0x1e
     6ce:	8f 8f       	std	Y+31, r24	; 0x1f
     6d0:	98 a3       	std	Y+32, r25	; 0x20
     6d2:	0d a5       	ldd	r16, Y+45	; 0x2d
     6d4:	1e a5       	ldd	r17, Y+46	; 0x2e
     6d6:	06 19       	sub	r16, r6
     6d8:	17 09       	sbc	r17, r7
     6da:	9b 01       	movw	r18, r22
     6dc:	ac 01       	movw	r20, r24
     6de:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     6e2:	69 a3       	std	Y+33, r22	; 0x21
     6e4:	7a a3       	std	Y+34, r23	; 0x22
     6e6:	8b a3       	std	Y+35, r24	; 0x23
     6e8:	9c a3       	std	Y+36, r25	; 0x24
     6ea:	00 9f       	mul	r16, r16
     6ec:	60 01       	movw	r12, r0
     6ee:	01 9f       	mul	r16, r17
     6f0:	d0 0c       	add	r13, r0
     6f2:	d0 0c       	add	r13, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	0d 2c       	mov	r0, r13
     6f8:	00 0c       	add	r0, r0
     6fa:	ee 08       	sbc	r14, r14
     6fc:	ff 08       	sbc	r15, r15
     6fe:	2d 8d       	ldd	r18, Y+29	; 0x1d
     700:	3e 8d       	ldd	r19, Y+30	; 0x1e
     702:	4f 8d       	ldd	r20, Y+31	; 0x1f
     704:	58 a1       	ldd	r21, Y+32	; 0x20
     706:	ca 01       	movw	r24, r20
     708:	b9 01       	movw	r22, r18
     70a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     70e:	6d 8f       	std	Y+29, r22	; 0x1d
     710:	7e 8f       	std	Y+30, r23	; 0x1e
     712:	8f 8f       	std	Y+31, r24	; 0x1f
     714:	98 a3       	std	Y+32, r25	; 0x20
     716:	c7 01       	movw	r24, r14
     718:	b6 01       	movw	r22, r12
     71a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     71e:	9b 01       	movw	r18, r22
     720:	ac 01       	movw	r20, r24
     722:	6d 8d       	ldd	r22, Y+29	; 0x1d
     724:	7e 8d       	ldd	r23, Y+30	; 0x1e
     726:	8f 8d       	ldd	r24, Y+31	; 0x1f
     728:	98 a1       	ldd	r25, Y+32	; 0x20
     72a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__addsf3>
     72e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     732:	2f a9       	ldd	r18, Y+55	; 0x37
     734:	38 ad       	ldd	r19, Y+56	; 0x38
     736:	49 ad       	ldd	r20, Y+57	; 0x39
     738:	5a ad       	ldd	r21, Y+58	; 0x3a
     73a:	29 83       	std	Y+1, r18	; 0x01
     73c:	3a 83       	std	Y+2, r19	; 0x02
     73e:	4b 83       	std	Y+3, r20	; 0x03
     740:	5c 83       	std	Y+4, r21	; 0x04
     742:	2b ad       	ldd	r18, Y+59	; 0x3b
     744:	3c ad       	ldd	r19, Y+60	; 0x3c
     746:	4d ad       	ldd	r20, Y+61	; 0x3d
     748:	5e ad       	ldd	r21, Y+62	; 0x3e
     74a:	2d 83       	std	Y+5, r18	; 0x05
     74c:	3e 83       	std	Y+6, r19	; 0x06
     74e:	4f 83       	std	Y+7, r20	; 0x07
     750:	58 87       	std	Y+8, r21	; 0x08
     752:	2f a5       	ldd	r18, Y+47	; 0x2f
     754:	38 a9       	ldd	r19, Y+48	; 0x30
     756:	49 a9       	ldd	r20, Y+49	; 0x31
     758:	5a a9       	ldd	r21, Y+50	; 0x32
     75a:	29 87       	std	Y+9, r18	; 0x09
     75c:	3a 87       	std	Y+10, r19	; 0x0a
     75e:	4b 87       	std	Y+11, r20	; 0x0b
     760:	5c 87       	std	Y+12, r21	; 0x0c
     762:	2b a9       	ldd	r18, Y+51	; 0x33
     764:	3c a9       	ldd	r19, Y+52	; 0x34
     766:	4d a9       	ldd	r20, Y+53	; 0x35
     768:	5e a9       	ldd	r21, Y+54	; 0x36
     76a:	2d 87       	std	Y+13, r18	; 0x0d
     76c:	3e 87       	std	Y+14, r19	; 0x0e
     76e:	4f 87       	std	Y+15, r20	; 0x0f
     770:	58 8b       	std	Y+16, r21	; 0x10
     772:	89 8a       	std	Y+17, r8	; 0x11
     774:	9a 8a       	std	Y+18, r9	; 0x12
     776:	ab 8a       	std	Y+19, r10	; 0x13
     778:	bc 8a       	std	Y+20, r11	; 0x14
     77a:	6d 8b       	std	Y+21, r22	; 0x15
     77c:	7e 8b       	std	Y+22, r23	; 0x16
     77e:	8f 8b       	std	Y+23, r24	; 0x17
     780:	98 8f       	std	Y+24, r25	; 0x18
     782:	ae 01       	movw	r20, r28
     784:	4f 5f       	subi	r20, 0xFF	; 255
     786:	5f 4f       	sbci	r21, 0xFF	; 255
     788:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     78a:	00 e0       	ldi	r16, 0x00	; 0
     78c:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     78e:	61 2c       	mov	r6, r1
     790:	71 2c       	mov	r7, r1
     792:	c1 2c       	mov	r12, r1
     794:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     796:	21 2c       	mov	r2, r1
     798:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     79a:	f7 01       	movw	r30, r14
     79c:	81 90       	ld	r8, Z+
     79e:	91 90       	ld	r9, Z+
     7a0:	a1 90       	ld	r10, Z+
     7a2:	b1 90       	ld	r11, Z+
     7a4:	7f 01       	movw	r14, r30
     7a6:	26 2d       	mov	r18, r6
     7a8:	37 2d       	mov	r19, r7
     7aa:	4c 2d       	mov	r20, r12
     7ac:	5d 2d       	mov	r21, r13
     7ae:	c5 01       	movw	r24, r10
     7b0:	b4 01       	movw	r22, r8
     7b2:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__gesf2>
     7b6:	18 16       	cp	r1, r24
     7b8:	34 f4       	brge	.+12     	; 0x7c6 <fourPointCalc+0x3de>
			indexMax = i;
			maxVal = distVect[i];
     7ba:	68 2c       	mov	r6, r8
     7bc:	79 2c       	mov	r7, r9
     7be:	ca 2c       	mov	r12, r10
     7c0:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     7c2:	20 2e       	mov	r2, r16
     7c4:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     7c6:	0f 5f       	subi	r16, 0xFF	; 255
     7c8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ca:	06 30       	cpi	r16, 0x06	; 6
     7cc:	11 05       	cpc	r17, r1
     7ce:	29 f7       	brne	.-54     	; 0x79a <fourPointCalc+0x3b2>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLong; 
	pointsLong = distIndex(indexMax);
     7d0:	82 2d       	mov	r24, r2
     7d2:	93 2d       	mov	r25, r3
     7d4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <distIndex>
     7d8:	7c 01       	movw	r14, r24
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     7da:	fc 01       	movw	r30, r24
     7dc:	c0 80       	ld	r12, Z
     7de:	d1 80       	ldd	r13, Z+1	; 0x01
     7e0:	cc 0c       	add	r12, r12
     7e2:	dd 1c       	adc	r13, r13
     7e4:	cc 0c       	add	r12, r12
     7e6:	dd 1c       	adc	r13, r13
     7e8:	c4 0c       	add	r12, r4
     7ea:	d5 1c       	adc	r13, r5
     7ec:	62 80       	ldd	r6, Z+2	; 0x02
     7ee:	73 80       	ldd	r7, Z+3	; 0x03
     7f0:	66 0c       	add	r6, r6
     7f2:	77 1c       	adc	r7, r7
     7f4:	66 0c       	add	r6, r6
     7f6:	77 1c       	adc	r7, r7
     7f8:	64 0c       	add	r6, r4
     7fa:	75 1c       	adc	r7, r5
     7fc:	f6 01       	movw	r30, r12
     7fe:	60 81       	ld	r22, Z
     800:	71 81       	ldd	r23, Z+1	; 0x01
     802:	f3 01       	movw	r30, r6
     804:	80 81       	ld	r24, Z
     806:	91 81       	ldd	r25, Z+1	; 0x01
     808:	68 0f       	add	r22, r24
     80a:	79 1f       	adc	r23, r25
     80c:	77 23       	and	r23, r23
     80e:	14 f4       	brge	.+4      	; 0x814 <fourPointCalc+0x42c>
     810:	6f 5f       	subi	r22, 0xFF	; 255
     812:	7f 4f       	sbci	r23, 0xFF	; 255
     814:	75 95       	asr	r23
     816:	67 95       	ror	r22
     818:	07 2e       	mov	r0, r23
     81a:	00 0c       	add	r0, r0
     81c:	88 0b       	sbc	r24, r24
     81e:	99 0b       	sbc	r25, r25
     820:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     824:	4b 01       	movw	r8, r22
     826:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     828:	f6 01       	movw	r30, r12
     82a:	62 81       	ldd	r22, Z+2	; 0x02
     82c:	73 81       	ldd	r23, Z+3	; 0x03
     82e:	f3 01       	movw	r30, r6
     830:	82 81       	ldd	r24, Z+2	; 0x02
     832:	93 81       	ldd	r25, Z+3	; 0x03
     834:	68 0f       	add	r22, r24
     836:	79 1f       	adc	r23, r25
     838:	77 23       	and	r23, r23
     83a:	14 f4       	brge	.+4      	; 0x840 <fourPointCalc+0x458>
     83c:	6f 5f       	subi	r22, 0xFF	; 255
     83e:	7f 4f       	sbci	r23, 0xFF	; 255
     840:	75 95       	asr	r23
     842:	67 95       	ror	r22
     844:	07 2e       	mov	r0, r23
     846:	00 0c       	add	r0, r0
     848:	88 0b       	sbc	r24, r24
     84a:	99 0b       	sbc	r25, r25
     84c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     850:	6d 8f       	std	Y+29, r22	; 0x1d
     852:	7e 8f       	std	Y+30, r23	; 0x1e
     854:	8f 8f       	std	Y+31, r24	; 0x1f
     856:	98 a3       	std	Y+32, r25	; 0x20
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     858:	9e 01       	movw	r18, r28
     85a:	25 5e       	subi	r18, 0xE5	; 229
     85c:	3f 4f       	sbci	r19, 0xFF	; 255
     85e:	ae 01       	movw	r20, r28
     860:	47 5e       	subi	r20, 0xE7	; 231
     862:	5f 4f       	sbci	r21, 0xFF	; 255
     864:	be 01       	movw	r22, r28
     866:	6f 5f       	subi	r22, 0xFF	; 255
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	c7 01       	movw	r24, r14
     86c:	0e 94 46 01 	call	0x28c	; 0x28c <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     870:	09 8d       	ldd	r16, Y+25	; 0x19
     872:	1a 8d       	ldd	r17, Y+26	; 0x1a
     874:	00 0f       	add	r16, r16
     876:	11 1f       	adc	r17, r17
     878:	00 0f       	add	r16, r16
     87a:	11 1f       	adc	r17, r17
     87c:	04 0d       	add	r16, r4
     87e:	15 1d       	adc	r17, r5
     880:	2b 8c       	ldd	r2, Y+27	; 0x1b
     882:	3c 8c       	ldd	r3, Y+28	; 0x1c
     884:	22 0c       	add	r2, r2
     886:	33 1c       	adc	r3, r3
     888:	22 0c       	add	r2, r2
     88a:	33 1c       	adc	r3, r3
     88c:	24 0c       	add	r2, r4
     88e:	35 1c       	adc	r3, r5
     890:	f8 01       	movw	r30, r16
     892:	60 81       	ld	r22, Z
     894:	71 81       	ldd	r23, Z+1	; 0x01
     896:	f1 01       	movw	r30, r2
     898:	80 81       	ld	r24, Z
     89a:	91 81       	ldd	r25, Z+1	; 0x01
     89c:	68 1b       	sub	r22, r24
     89e:	79 0b       	sbc	r23, r25
     8a0:	07 2e       	mov	r0, r23
     8a2:	00 0c       	add	r0, r0
     8a4:	88 0b       	sbc	r24, r24
     8a6:	99 0b       	sbc	r25, r25
     8a8:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
     8ac:	6b 01       	movw	r12, r22
     8ae:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     8b0:	f8 01       	movw	r30, r16
     8b2:	62 81       	ldd	r22, Z+2	; 0x02
     8b4:	73 81       	ldd	r23, Z+3	; 0x03
     8b6:	f1 01       	movw	r30, r2
     8b8:	82 81       	ldd	r24, Z+2	; 0x02
     8ba:	93 81       	ldd	r25, Z+3	; 0x03
     8bc:	68 1b       	sub	r22, r24
     8be:	79 0b       	sbc	r23, r25
     8c0:	07 2e       	mov	r0, r23
     8c2:	00 0c       	add	r0, r0
     8c4:	88 0b       	sbc	r24, r24
     8c6:	99 0b       	sbc	r25, r25
     8c8:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     8cc:	90 58       	subi	r25, 0x80	; 128
     8ce:	a7 01       	movw	r20, r14
     8d0:	96 01       	movw	r18, r12
     8d2:	0e 94 1f 0c 	call	0x183e	; 0x183e <atan2>
	theta += M_PI/2.0;
     8d6:	2b ed       	ldi	r18, 0xDB	; 219
     8d8:	3f e0       	ldi	r19, 0x0F	; 15
     8da:	49 ec       	ldi	r20, 0xC9	; 201
     8dc:	5f e3       	ldi	r21, 0x3F	; 63
     8de:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__addsf3>
     8e2:	6b 01       	movw	r12, r22
     8e4:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     8e6:	a5 01       	movw	r20, r10
     8e8:	94 01       	movw	r18, r8
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	94 e4       	ldi	r25, 0x44	; 68
     8f2:	0e 94 9f 0b 	call	0x173e	; 0x173e <__subsf3>
     8f6:	4b 01       	movw	r8, r22
     8f8:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     8fa:	2d 8d       	ldd	r18, Y+29	; 0x1d
     8fc:	3e 8d       	ldd	r19, Y+30	; 0x1e
     8fe:	4f 8d       	ldd	r20, Y+31	; 0x1f
     900:	58 a1       	ldd	r21, Y+32	; 0x20
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	8f eb       	ldi	r24, 0xBF	; 191
     908:	93 e4       	ldi	r25, 0x43	; 67
     90a:	0e 94 9f 0b 	call	0x173e	; 0x173e <__subsf3>
     90e:	2b 01       	movw	r4, r22
     910:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     912:	c7 01       	movw	r24, r14
     914:	b6 01       	movw	r22, r12
     916:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <sin>
     91a:	6d 8f       	std	Y+29, r22	; 0x1d
     91c:	7e 8f       	std	Y+30, r23	; 0x1e
     91e:	8f 8f       	std	Y+31, r24	; 0x1f
     920:	98 a3       	std	Y+32, r25	; 0x20
     922:	c7 01       	movw	r24, r14
     924:	b6 01       	movw	r22, r12
     926:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <cos>
     92a:	69 a3       	std	Y+33, r22	; 0x21
     92c:	7a a3       	std	Y+34, r23	; 0x22
     92e:	8b a3       	std	Y+35, r24	; 0x23
     930:	9c a3       	std	Y+36, r25	; 0x24
     932:	08 e1       	ldi	r16, 0x18	; 24
     934:	11 e0       	ldi	r17, 0x01	; 1
     936:	2d 8d       	ldd	r18, Y+29	; 0x1d
     938:	3e 8d       	ldd	r19, Y+30	; 0x1e
     93a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     93c:	58 a1       	ldd	r21, Y+32	; 0x20
     93e:	c3 01       	movw	r24, r6
     940:	b2 01       	movw	r22, r4
     942:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     946:	6d a3       	std	Y+37, r22	; 0x25
     948:	7e a3       	std	Y+38, r23	; 0x26
     94a:	8f a3       	std	Y+39, r24	; 0x27
     94c:	98 a7       	std	Y+40, r25	; 0x28
     94e:	29 a1       	ldd	r18, Y+33	; 0x21
     950:	3a a1       	ldd	r19, Y+34	; 0x22
     952:	4b a1       	ldd	r20, Y+35	; 0x23
     954:	5c a1       	ldd	r21, Y+36	; 0x24
     956:	c5 01       	movw	r24, r10
     958:	b4 01       	movw	r22, r8
     95a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     95e:	9b 01       	movw	r18, r22
     960:	ac 01       	movw	r20, r24
     962:	6d a1       	ldd	r22, Y+37	; 0x25
     964:	7e a1       	ldd	r23, Y+38	; 0x26
     966:	8f a1       	ldd	r24, Y+39	; 0x27
     968:	98 a5       	ldd	r25, Y+40	; 0x28
     96a:	0e 94 9f 0b 	call	0x173e	; 0x173e <__subsf3>
     96e:	f8 01       	movw	r30, r16
     970:	60 83       	st	Z, r22
     972:	71 83       	std	Z+1, r23	; 0x01
     974:	82 83       	std	Z+2, r24	; 0x02
     976:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     978:	29 a1       	ldd	r18, Y+33	; 0x21
     97a:	3a a1       	ldd	r19, Y+34	; 0x22
     97c:	4b a1       	ldd	r20, Y+35	; 0x23
     97e:	5c a1       	ldd	r21, Y+36	; 0x24
     980:	c3 01       	movw	r24, r6
     982:	b2 01       	movw	r22, r4
     984:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     988:	2b 01       	movw	r4, r22
     98a:	3c 01       	movw	r6, r24
     98c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     98e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     990:	4f 8d       	ldd	r20, Y+31	; 0x1f
     992:	58 a1       	ldd	r21, Y+32	; 0x20
     994:	c5 01       	movw	r24, r10
     996:	b4 01       	movw	r22, r8
     998:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     99c:	9b 01       	movw	r18, r22
     99e:	ac 01       	movw	r20, r24
     9a0:	c3 01       	movw	r24, r6
     9a2:	b2 01       	movw	r22, r4
     9a4:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__addsf3>
     9a8:	f8 01       	movw	r30, r16
     9aa:	64 83       	std	Z+4, r22	; 0x04
     9ac:	75 83       	std	Z+5, r23	; 0x05
     9ae:	86 83       	std	Z+6, r24	; 0x06
     9b0:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta*180.0/M_PI;
     9b2:	c7 01       	movw	r24, r14
     9b4:	b6 01       	movw	r22, r12
     9b6:	90 58       	subi	r25, 0x80	; 128
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	44 e3       	ldi	r20, 0x34	; 52
     9be:	53 e4       	ldi	r21, 0x43	; 67
     9c0:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     9c4:	2b ed       	ldi	r18, 0xDB	; 219
     9c6:	3f e0       	ldi	r19, 0x0F	; 15
     9c8:	49 e4       	ldi	r20, 0x49	; 73
     9ca:	50 e4       	ldi	r21, 0x40	; 64
     9cc:	0e 94 83 0c 	call	0x1906	; 0x1906 <__divsf3>
     9d0:	f8 01       	movw	r30, r16
     9d2:	60 87       	std	Z+8, r22	; 0x08
     9d4:	71 87       	std	Z+9, r23	; 0x09
     9d6:	82 87       	std	Z+10, r24	; 0x0a
     9d8:	93 87       	std	Z+11, r25	; 0x0b
	
	return centerFour;
}
     9da:	c8 01       	movw	r24, r16
     9dc:	ee 96       	adiw	r28, 0x3e	; 62
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	df 90       	pop	r13
     9f6:	cf 90       	pop	r12
     9f8:	bf 90       	pop	r11
     9fa:	af 90       	pop	r10
     9fc:	9f 90       	pop	r9
     9fe:	8f 90       	pop	r8
     a00:	7f 90       	pop	r7
     a02:	6f 90       	pop	r6
     a04:	5f 90       	pop	r5
     a06:	4f 90       	pop	r4
     a08:	3f 90       	pop	r3
     a0a:	2f 90       	pop	r2
     a0c:	08 95       	ret

00000a0e <localization_calc>:
void orientationCalculationFour(int* pointsLong, float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{
     a0e:	4f 92       	push	r4
     a10:	5f 92       	push	r5
     a12:	6f 92       	push	r6
     a14:	7f 92       	push	r7
     a16:	af 92       	push	r10
     a18:	bf 92       	push	r11
     a1a:	cf 92       	push	r12
     a1c:	df 92       	push	r13
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	68 97       	sbiw	r28, 0x18	; 24
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     a3c:	0d b7       	in	r16, 0x3d	; 61
     a3e:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     a40:	80 81       	ld	r24, Z
     a42:	91 81       	ldd	r25, Z+1	; 0x01
     a44:	9a 83       	std	Y+2, r25	; 0x02
     a46:	89 83       	std	Y+1, r24	; 0x01
     a48:	80 85       	ldd	r24, Z+8	; 0x08
     a4a:	91 85       	ldd	r25, Z+9	; 0x09
     a4c:	9c 83       	std	Y+4, r25	; 0x04
     a4e:	8b 83       	std	Y+3, r24	; 0x03
     a50:	82 81       	ldd	r24, Z+2	; 0x02
     a52:	93 81       	ldd	r25, Z+3	; 0x03
     a54:	9e 83       	std	Y+6, r25	; 0x06
     a56:	8d 83       	std	Y+5, r24	; 0x05
     a58:	82 85       	ldd	r24, Z+10	; 0x0a
     a5a:	93 85       	ldd	r25, Z+11	; 0x0b
     a5c:	98 87       	std	Y+8, r25	; 0x08
     a5e:	8f 83       	std	Y+7, r24	; 0x07
     a60:	84 81       	ldd	r24, Z+4	; 0x04
     a62:	95 81       	ldd	r25, Z+5	; 0x05
     a64:	9a 87       	std	Y+10, r25	; 0x0a
     a66:	89 87       	std	Y+9, r24	; 0x09
     a68:	84 85       	ldd	r24, Z+12	; 0x0c
     a6a:	95 85       	ldd	r25, Z+13	; 0x0d
     a6c:	9c 87       	std	Y+12, r25	; 0x0c
     a6e:	8b 87       	std	Y+11, r24	; 0x0b
     a70:	86 81       	ldd	r24, Z+6	; 0x06
     a72:	97 81       	ldd	r25, Z+7	; 0x07
     a74:	9e 87       	std	Y+14, r25	; 0x0e
     a76:	8d 87       	std	Y+13, r24	; 0x0d
     a78:	86 85       	ldd	r24, Z+14	; 0x0e
     a7a:	97 85       	ldd	r25, Z+15	; 0x0f
     a7c:	98 8b       	std	Y+16, r25	; 0x10
     a7e:	8f 87       	std	Y+15, r24	; 0x0f
		{rawStarData[3], rawStarData[7]}
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     a80:	fe 01       	movw	r30, r28
     a82:	71 96       	adiw	r30, 0x11	; 17
     a84:	88 e0       	ldi	r24, 0x08	; 8
     a86:	df 01       	movw	r26, r30
     a88:	1d 92       	st	X+, r1
     a8a:	8a 95       	dec	r24
     a8c:	e9 f7       	brne	.-6      	; 0xa88 <localization_calc+0x7a>
     a8e:	70 97       	sbiw	r30, 0x10	; 16
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     a98:	40 81       	ld	r20, Z
     a9a:	51 81       	ldd	r21, Z+1	; 0x01
     a9c:	4f 3f       	cpi	r20, 0xFF	; 255
     a9e:	53 40       	sbci	r21, 0x03	; 3
     aa0:	71 f0       	breq	.+28     	; 0xabe <localization_calc+0xb0>
			pointIndices[numPoints] = i;
     aa2:	dc 01       	movw	r26, r24
     aa4:	aa 0f       	add	r26, r26
     aa6:	bb 1f       	adc	r27, r27
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	4c 0f       	add	r20, r28
     aae:	5d 1f       	adc	r21, r29
     ab0:	a4 0f       	add	r26, r20
     ab2:	b5 1f       	adc	r27, r21
     ab4:	51 96       	adiw	r26, 0x11	; 17
     ab6:	3c 93       	st	X, r19
     ab8:	2e 93       	st	-X, r18
     aba:	50 97       	sbiw	r26, 0x10	; 16
			numPoints++;
     abc:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     abe:	2f 5f       	subi	r18, 0xFF	; 255
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	34 96       	adiw	r30, 0x04	; 4
     ac4:	24 30       	cpi	r18, 0x04	; 4
     ac6:	31 05       	cpc	r19, r1
     ac8:	39 f7       	brne	.-50     	; 0xa98 <localization_calc+0x8a>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     aca:	00 97       	sbiw	r24, 0x00	; 0
     acc:	09 f4       	brne	.+2      	; 0xad0 <localization_calc+0xc2>
     ace:	8b c0       	rjmp	.+278    	; 0xbe6 <__stack+0xe7>
     ad0:	ed b6       	in	r14, 0x3d	; 61
     ad2:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     ad4:	6c 01       	movw	r12, r24
     ad6:	cc 0c       	add	r12, r12
     ad8:	dd 1c       	adc	r13, r13
     ada:	cc 0c       	add	r12, r12
     adc:	dd 1c       	adc	r13, r13
     ade:	ad b7       	in	r26, 0x3d	; 61
     ae0:	be b7       	in	r27, 0x3e	; 62
     ae2:	ac 19       	sub	r26, r12
     ae4:	bd 09       	sbc	r27, r13
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	be bf       	out	0x3e, r27	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	ad bf       	out	0x3d, r26	; 61
     af0:	ed b7       	in	r30, 0x3d	; 61
     af2:	fe b7       	in	r31, 0x3e	; 62
     af4:	31 96       	adiw	r30, 0x01	; 1
     af6:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     af8:	18 16       	cp	r1, r24
     afa:	19 06       	cpc	r1, r25
     afc:	24 f5       	brge	.+72     	; 0xb46 <__stack+0x47>
     afe:	9e 01       	movw	r18, r28
     b00:	2f 5e       	subi	r18, 0xEF	; 239
     b02:	3f 4f       	sbci	r19, 0xFF	; 255
     b04:	df 01       	movw	r26, r30
     b06:	ce 0e       	add	r12, r30
     b08:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     b0a:	f9 01       	movw	r30, r18
     b0c:	41 91       	ld	r20, Z+
     b0e:	51 91       	ld	r21, Z+
     b10:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     b12:	fa 01       	movw	r30, r20
     b14:	ee 0f       	add	r30, r30
     b16:	ff 1f       	adc	r31, r31
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	41 e0       	ldi	r20, 0x01	; 1
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	4c 0f       	add	r20, r28
     b22:	5d 1f       	adc	r21, r29
     b24:	e4 0f       	add	r30, r20
     b26:	f5 1f       	adc	r31, r21
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	11 96       	adiw	r26, 0x01	; 1
     b2e:	5c 93       	st	X, r21
     b30:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     b32:	42 81       	ldd	r20, Z+2	; 0x02
     b34:	53 81       	ldd	r21, Z+3	; 0x03
     b36:	13 96       	adiw	r26, 0x03	; 3
     b38:	5c 93       	st	X, r21
     b3a:	4e 93       	st	-X, r20
     b3c:	12 97       	sbiw	r26, 0x02	; 2
     b3e:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     b40:	ac 15       	cp	r26, r12
     b42:	bd 05       	cpc	r27, r13
     b44:	11 f7       	brne	.-60     	; 0xb0a <__stack+0xb>
			points[i][0] = pvect[index][0];
			points[i][1] = pvect[index][1];
		}
		
		
		m_red(ON);
     b46:	6e 9a       	sbi	0x0d, 6	; 13
     b48:	76 98       	cbi	0x0e, 6	; 14
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     b4a:	db 01       	movw	r26, r22
     b4c:	4d 90       	ld	r4, X+
     b4e:	5d 90       	ld	r5, X+
     b50:	6d 90       	ld	r6, X+
     b52:	7c 90       	ld	r7, X
     b54:	13 97       	sbiw	r26, 0x03	; 3
     b56:	e0 e3       	ldi	r30, 0x30	; 48
     b58:	f1 e0       	ldi	r31, 0x01	; 1
     b5a:	40 82       	st	Z, r4
     b5c:	51 82       	std	Z+1, r5	; 0x01
     b5e:	62 82       	std	Z+2, r6	; 0x02
     b60:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     b62:	14 96       	adiw	r26, 0x04	; 4
     b64:	4d 90       	ld	r4, X+
     b66:	5d 90       	ld	r5, X+
     b68:	6d 90       	ld	r6, X+
     b6a:	7c 90       	ld	r7, X
     b6c:	17 97       	sbiw	r26, 0x07	; 7
     b6e:	44 82       	std	Z+4, r4	; 0x04
     b70:	55 82       	std	Z+5, r5	; 0x05
     b72:	66 82       	std	Z+6, r6	; 0x06
     b74:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     b76:	18 96       	adiw	r26, 0x08	; 8
     b78:	4d 91       	ld	r20, X+
     b7a:	5d 91       	ld	r21, X+
     b7c:	6d 91       	ld	r22, X+
     b7e:	7c 91       	ld	r23, X
     b80:	1b 97       	sbiw	r26, 0x0b	; 11
     b82:	40 87       	std	Z+8, r20	; 0x08
     b84:	51 87       	std	Z+9, r21	; 0x09
     b86:	62 87       	std	Z+10, r22	; 0x0a
     b88:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     b8a:	04 97       	sbiw	r24, 0x04	; 4
     b8c:	29 f4       	brne	.+10     	; 0xb98 <__stack+0x99>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     b8e:	c5 01       	movw	r24, r10
     b90:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <fourPointCalc>
     b94:	dc 01       	movw	r26, r24
				break;
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <__stack+0x9d>
				
			case 3 : 
				//calcPointer = threePointCalc(points);
				calcPointer = &rc[0];
     b98:	a0 e3       	ldi	r26, 0x30	; 48
     b9a:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				calcPointer = &rc[0];
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     b9c:	4d 91       	ld	r20, X+
     b9e:	5d 91       	ld	r21, X+
     ba0:	6d 91       	ld	r22, X+
     ba2:	7c 91       	ld	r23, X
     ba4:	13 97       	sbiw	r26, 0x03	; 3
     ba6:	e4 e2       	ldi	r30, 0x24	; 36
     ba8:	f1 e0       	ldi	r31, 0x01	; 1
     baa:	40 83       	st	Z, r20
     bac:	51 83       	std	Z+1, r21	; 0x01
     bae:	62 83       	std	Z+2, r22	; 0x02
     bb0:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     bb2:	14 96       	adiw	r26, 0x04	; 4
     bb4:	4d 91       	ld	r20, X+
     bb6:	5d 91       	ld	r21, X+
     bb8:	6d 91       	ld	r22, X+
     bba:	7c 91       	ld	r23, X
     bbc:	17 97       	sbiw	r26, 0x07	; 7
     bbe:	44 83       	std	Z+4, r20	; 0x04
     bc0:	55 83       	std	Z+5, r21	; 0x05
     bc2:	66 83       	std	Z+6, r22	; 0x06
     bc4:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     bc6:	18 96       	adiw	r26, 0x08	; 8
     bc8:	8d 91       	ld	r24, X+
     bca:	9d 91       	ld	r25, X+
     bcc:	0d 90       	ld	r0, X+
     bce:	bc 91       	ld	r27, X
     bd0:	a0 2d       	mov	r26, r0
     bd2:	80 87       	std	Z+8, r24	; 0x08
     bd4:	91 87       	std	Z+9, r25	; 0x09
     bd6:	a2 87       	std	Z+10, r26	; 0x0a
     bd8:	b3 87       	std	Z+11, r27	; 0x0b
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	fe be       	out	0x3e, r15	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	ed be       	out	0x3d, r14	; 61
     be4:	22 c0       	rjmp	.+68     	; 0xc2a <__stack+0x12b>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     be6:	fb 01       	movw	r30, r22
     be8:	80 81       	ld	r24, Z
     bea:	91 81       	ldd	r25, Z+1	; 0x01
     bec:	a2 81       	ldd	r26, Z+2	; 0x02
     bee:	b3 81       	ldd	r27, Z+3	; 0x03
     bf0:	e4 e2       	ldi	r30, 0x24	; 36
     bf2:	f1 e0       	ldi	r31, 0x01	; 1
     bf4:	80 83       	st	Z, r24
     bf6:	91 83       	std	Z+1, r25	; 0x01
     bf8:	a2 83       	std	Z+2, r26	; 0x02
     bfa:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     bfc:	db 01       	movw	r26, r22
     bfe:	14 96       	adiw	r26, 0x04	; 4
     c00:	cd 90       	ld	r12, X+
     c02:	dd 90       	ld	r13, X+
     c04:	ed 90       	ld	r14, X+
     c06:	fc 90       	ld	r15, X
     c08:	17 97       	sbiw	r26, 0x07	; 7
     c0a:	c4 82       	std	Z+4, r12	; 0x04
     c0c:	d5 82       	std	Z+5, r13	; 0x05
     c0e:	e6 82       	std	Z+6, r14	; 0x06
     c10:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];
     c12:	18 96       	adiw	r26, 0x08	; 8
     c14:	4d 91       	ld	r20, X+
     c16:	5d 91       	ld	r21, X+
     c18:	6d 91       	ld	r22, X+
     c1a:	7c 91       	ld	r23, X
     c1c:	1b 97       	sbiw	r26, 0x0b	; 11
     c1e:	40 87       	std	Z+8, r20	; 0x08
     c20:	51 87       	std	Z+9, r21	; 0x09
     c22:	62 87       	std	Z+10, r22	; 0x0a
     c24:	73 87       	std	Z+11, r23	; 0x0b
		m_red(OFF);	
     c26:	6e 9a       	sbi	0x0d, 6	; 13
     c28:	76 9a       	sbi	0x0e, 6	; 14
	
	return robotCenter;
	
	
	
}
     c2a:	84 e2       	ldi	r24, 0x24	; 36
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	1e bf       	out	0x3e, r17	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0d bf       	out	0x3d, r16	; 61
     c38:	68 96       	adiw	r28, 0x18	; 24
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	bf 90       	pop	r11
     c56:	af 90       	pop	r10
     c58:	7f 90       	pop	r7
     c5a:	6f 90       	pop	r6
     c5c:	5f 90       	pop	r5
     c5e:	4f 90       	pop	r4
     c60:	08 95       	ret

00000c62 <init>:
}


void init() 
{
	m_red(ON);
     c62:	6e 9a       	sbi	0x0d, 6	; 13
     c64:	76 98       	cbi	0x0e, 6	; 14
	while(!m_wii_open());
     c66:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <m_wii_open>
     c6a:	88 23       	and	r24, r24
     c6c:	e1 f3       	breq	.-8      	; 0xc66 <init+0x4>
	m_red(OFF);
     c6e:	6e 9a       	sbi	0x0d, 6	; 13
     c70:	76 9a       	sbi	0x0e, 6	; 14
	
	m_usb_init();
     c72:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <m_usb_init>
     c76:	08 95       	ret

00000c78 <main>:
#include "localization_function.h"

void init(); 

int main(void)
{	
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	e4 97       	sbiw	r28, 0x34	; 52
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
	m_clockdivide(0);
     c8c:	e1 e6       	ldi	r30, 0x61	; 97
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 e8       	ldi	r24, 0x80	; 128
     c92:	80 83       	st	Z, r24
     c94:	10 82       	st	Z, r1
	
	init();
     c96:	0e 94 31 06 	call	0xc62	; 0xc62 <init>
	m_green(ON);
     c9a:	6a 9a       	sbi	0x0d, 2	; 13
     c9c:	72 98       	cbi	0x0e, 2	; 14
	unsigned int blobs[12];
	char rx_buffer;

	float robotCenterPrev[3] = {1023, 1023, 360};
     c9e:	8c e0       	ldi	r24, 0x0C	; 12
     ca0:	e7 e0       	ldi	r30, 0x07	; 7
     ca2:	f1 e0       	ldi	r31, 0x01	; 1
     ca4:	de 01       	movw	r26, r28
     ca6:	59 96       	adiw	r26, 0x19	; 25
     ca8:	01 90       	ld	r0, Z+
     caa:	0d 92       	st	X+, r0
     cac:	8a 95       	dec	r24
     cae:	e1 f7       	brne	.-8      	; 0xca8 <main+0x30>
		
		m_usb_rx_flush();  						// Flush the buffer
		
		if(rx_buffer == 1)						// MATLAB is expecting IMU data
		{
			m_red(TOGGLE);
     cb0:	68 94       	set
     cb2:	ee 24       	eor	r14, r14
     cb4:	e6 f8       	bld	r14, 6
	float* robotCenter;
	
    while (1) 
    {
		
		m_wii_read(blobs);
     cb6:	ce 01       	movw	r24, r28
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	0e 94 0c 0b 	call	0x1618	; 0x1618 <m_wii_read>
		unsigned int x1 = blobs[0];
		unsigned int y1 = blobs[1];
     cbe:	6b 81       	ldd	r22, Y+3	; 0x03
     cc0:	7c 81       	ldd	r23, Y+4	; 0x04
		unsigned int x2 = blobs[3];
     cc2:	0f 81       	ldd	r16, Y+7	; 0x07
     cc4:	18 85       	ldd	r17, Y+8	; 0x08
		unsigned int y2 = blobs[4];
     cc6:	49 85       	ldd	r20, Y+9	; 0x09
     cc8:	5a 85       	ldd	r21, Y+10	; 0x0a
		unsigned int x3 = blobs[6];
     cca:	ad 85       	ldd	r26, Y+13	; 0x0d
     ccc:	be 85       	ldd	r27, Y+14	; 0x0e
		unsigned int y3 = blobs[7];
     cce:	2f 85       	ldd	r18, Y+15	; 0x0f
     cd0:	38 89       	ldd	r19, Y+16	; 0x10
		unsigned int x4 = blobs[9];
     cd2:	eb 89       	ldd	r30, Y+19	; 0x13
     cd4:	fc 89       	ldd	r31, Y+20	; 0x14
		unsigned int y4 = blobs[10];
     cd6:	8d 89       	ldd	r24, Y+21	; 0x15
     cd8:	9e 89       	ldd	r25, Y+22	; 0x16
		
		int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
     cda:	c9 80       	ldd	r12, Y+1	; 0x01
     cdc:	da 80       	ldd	r13, Y+2	; 0x02
     cde:	de a2       	std	Y+38, r13	; 0x26
     ce0:	cd a2       	std	Y+37, r12	; 0x25
     ce2:	18 a7       	std	Y+40, r17	; 0x28
     ce4:	0f a3       	std	Y+39, r16	; 0x27
     ce6:	ba a7       	std	Y+42, r27	; 0x2a
     ce8:	a9 a7       	std	Y+41, r26	; 0x29
     cea:	fc a7       	std	Y+44, r31	; 0x2c
     cec:	eb a7       	std	Y+43, r30	; 0x2b
     cee:	7e a7       	std	Y+46, r23	; 0x2e
     cf0:	6d a7       	std	Y+45, r22	; 0x2d
     cf2:	58 ab       	std	Y+48, r21	; 0x30
     cf4:	4f a7       	std	Y+47, r20	; 0x2f
     cf6:	3a ab       	std	Y+50, r19	; 0x32
     cf8:	29 ab       	std	Y+49, r18	; 0x31
     cfa:	9c ab       	std	Y+52, r25	; 0x34
     cfc:	8b ab       	std	Y+51, r24	; 0x33
		robotCenter = localization_calc(rawStarData, robotCenterPrev);
     cfe:	be 01       	movw	r22, r28
     d00:	67 5e       	subi	r22, 0xE7	; 231
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	ce 01       	movw	r24, r28
     d06:	85 96       	adiw	r24, 0x25	; 37
     d08:	0e 94 07 05 	call	0xa0e	; 0xa0e <localization_calc>
     d0c:	8c 01       	movw	r16, r24
		
		robotCenterPrev[0] = robotCenter[0];
     d0e:	fc 01       	movw	r30, r24
     d10:	80 81       	ld	r24, Z
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	a2 81       	ldd	r26, Z+2	; 0x02
     d16:	b3 81       	ldd	r27, Z+3	; 0x03
     d18:	89 8f       	std	Y+25, r24	; 0x19
     d1a:	9a 8f       	std	Y+26, r25	; 0x1a
     d1c:	ab 8f       	std	Y+27, r26	; 0x1b
     d1e:	bc 8f       	std	Y+28, r27	; 0x1c
		robotCenterPrev[1] = robotCenter[1];
     d20:	84 81       	ldd	r24, Z+4	; 0x04
     d22:	95 81       	ldd	r25, Z+5	; 0x05
     d24:	a6 81       	ldd	r26, Z+6	; 0x06
     d26:	b7 81       	ldd	r27, Z+7	; 0x07
     d28:	8d 8f       	std	Y+29, r24	; 0x1d
     d2a:	9e 8f       	std	Y+30, r25	; 0x1e
     d2c:	af 8f       	std	Y+31, r26	; 0x1f
     d2e:	b8 a3       	std	Y+32, r27	; 0x20
		robotCenterPrev[2] = robotCenter[2];
     d30:	80 85       	ldd	r24, Z+8	; 0x08
     d32:	91 85       	ldd	r25, Z+9	; 0x09
     d34:	a2 85       	ldd	r26, Z+10	; 0x0a
     d36:	b3 85       	ldd	r27, Z+11	; 0x0b
     d38:	89 a3       	std	Y+33, r24	; 0x21
     d3a:	9a a3       	std	Y+34, r25	; 0x22
     d3c:	ab a3       	std	Y+35, r26	; 0x23
     d3e:	bc a3       	std	Y+36, r27	; 0x24
		
 		while(!m_usb_rx_available());  			// Wait for an indication from the computer
     d40:	0e 94 23 07 	call	0xe46	; 0xe46 <m_usb_rx_available>
     d44:	88 23       	and	r24, r24
     d46:	e1 f3       	breq	.-8      	; 0xd40 <main+0xc8>
		rx_buffer = m_usb_rx_char();  			// Read the packet from the computer
     d48:	0e 94 05 07 	call	0xe0a	; 0xe0a <m_usb_rx_char>
     d4c:	f8 2e       	mov	r15, r24
		
		m_usb_rx_flush();  						// Flush the buffer
     d4e:	0e 94 32 07 	call	0xe64	; 0xe64 <m_usb_rx_flush>
		
		if(rx_buffer == 1)						// MATLAB is expecting IMU data
     d52:	f1 e0       	ldi	r31, 0x01	; 1
     d54:	ff 12       	cpse	r15, r31
     d56:	af cf       	rjmp	.-162    	; 0xcb6 <main+0x3e>
		{
			m_red(TOGGLE);
     d58:	6e 9a       	sbi	0x0d, 6	; 13
     d5a:	8e b1       	in	r24, 0x0e	; 14
     d5c:	8e 25       	eor	r24, r14
     d5e:	8e b9       	out	0x0e, r24	; 14
			m_usb_tx_int((int)robotCenter[0]);
     d60:	f8 01       	movw	r30, r16
     d62:	60 81       	ld	r22, Z
     d64:	71 81       	ldd	r23, Z+1	; 0x01
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__fixsfsi>
     d6e:	cb 01       	movw	r24, r22
     d70:	0e 94 80 09 	call	0x1300	; 0x1300 <m_usb_tx_int>
			m_usb_tx_string(" ");
     d74:	8c ef       	ldi	r24, 0xFC	; 252
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 64 09 	call	0x12c8	; 0x12c8 <print_P>
			m_usb_tx_int((int)robotCenter[1]);
     d7c:	f8 01       	movw	r30, r16
     d7e:	64 81       	ldd	r22, Z+4	; 0x04
     d80:	75 81       	ldd	r23, Z+5	; 0x05
     d82:	86 81       	ldd	r24, Z+6	; 0x06
     d84:	97 81       	ldd	r25, Z+7	; 0x07
     d86:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__fixsfsi>
     d8a:	cb 01       	movw	r24, r22
     d8c:	0e 94 80 09 	call	0x1300	; 0x1300 <m_usb_tx_int>
			m_usb_tx_string(" ");
     d90:	8a ef       	ldi	r24, 0xFA	; 250
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 64 09 	call	0x12c8	; 0x12c8 <print_P>
			m_usb_tx_int((int)robotCenter[2]);
     d98:	f8 01       	movw	r30, r16
     d9a:	60 85       	ldd	r22, Z+8	; 0x08
     d9c:	71 85       	ldd	r23, Z+9	; 0x09
     d9e:	82 85       	ldd	r24, Z+10	; 0x0a
     da0:	93 85       	ldd	r25, Z+11	; 0x0b
     da2:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__fixsfsi>
     da6:	cb 01       	movw	r24, r22
     da8:	0e 94 80 09 	call	0x1300	; 0x1300 <m_usb_tx_int>
			m_usb_tx_string("\n");
     dac:	88 ef       	ldi	r24, 0xF8	; 248
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <print_P>

		}
		
		
    }
     db4:	80 cf       	rjmp	.-256    	; 0xcb6 <main+0x3e>

00000db6 <m_bus_init>:
     db6:	58 9a       	sbi	0x0b, 0	; 11
     db8:	59 9a       	sbi	0x0b, 1	; 11
     dba:	5a 9a       	sbi	0x0b, 2	; 11
     dbc:	8c e0       	ldi	r24, 0x0C	; 12
     dbe:	80 93 b8 00 	sts	0x00B8, r24
     dc2:	e9 e6       	ldi	r30, 0x69	; 105
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	80 62       	ori	r24, 0x20	; 32
     dca:	80 83       	st	Z, r24
     dcc:	80 81       	ld	r24, Z
     dce:	8f 7e       	andi	r24, 0xEF	; 239
     dd0:	80 83       	st	Z, r24
     dd2:	ea 9a       	sbi	0x1d, 2	; 29
     dd4:	78 94       	sei
     dd6:	08 95       	ret

00000dd8 <m_usb_init>:
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	80 93 d7 00 	sts	0x00D7, r24
     dde:	80 ea       	ldi	r24, 0xA0	; 160
     de0:	80 93 d8 00 	sts	0x00D8, r24
     de4:	82 e1       	ldi	r24, 0x12	; 18
     de6:	89 bd       	out	0x29, r24	; 41
     de8:	09 b4       	in	r0, 0x29	; 41
     dea:	00 fe       	sbrs	r0, 0
     dec:	fd cf       	rjmp	.-6      	; 0xde8 <m_usb_init+0x10>
     dee:	80 e9       	ldi	r24, 0x90	; 144
     df0:	80 93 d8 00 	sts	0x00D8, r24
     df4:	10 92 e0 00 	sts	0x00E0, r1
     df8:	10 92 3f 01 	sts	0x013F, r1
     dfc:	10 92 3c 01 	sts	0x013C, r1
     e00:	8c e0       	ldi	r24, 0x0C	; 12
     e02:	80 93 e2 00 	sts	0x00E2, r24
     e06:	78 94       	sei
     e08:	08 95       	ret

00000e0a <m_usb_rx_char>:
     e0a:	9f b7       	in	r25, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	80 91 3f 01 	lds	r24, 0x013F
     e12:	81 11       	cpse	r24, r1
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <m_usb_rx_char+0x12>
     e16:	9f bf       	out	0x3f, r25	; 63
     e18:	8f ef       	ldi	r24, 0xFF	; 255
     e1a:	08 95       	ret
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	80 93 e9 00 	sts	0x00E9, r24
     e22:	80 91 e8 00 	lds	r24, 0x00E8
     e26:	85 fd       	sbrc	r24, 5
     e28:	03 c0       	rjmp	.+6      	; 0xe30 <m_usb_rx_char+0x26>
     e2a:	9f bf       	out	0x3f, r25	; 63
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	08 95       	ret
     e30:	80 91 f1 00 	lds	r24, 0x00F1
     e34:	20 91 e8 00 	lds	r18, 0x00E8
     e38:	25 fd       	sbrc	r18, 5
     e3a:	03 c0       	rjmp	.+6      	; 0xe42 <m_usb_rx_char+0x38>
     e3c:	2b e6       	ldi	r18, 0x6B	; 107
     e3e:	20 93 e8 00 	sts	0x00E8, r18
     e42:	9f bf       	out	0x3f, r25	; 63
     e44:	08 95       	ret

00000e46 <m_usb_rx_available>:
     e46:	9f b7       	in	r25, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	80 91 3f 01 	lds	r24, 0x013F
     e4e:	88 23       	and	r24, r24
     e50:	31 f0       	breq	.+12     	; 0xe5e <m_usb_rx_available+0x18>
     e52:	83 e0       	ldi	r24, 0x03	; 3
     e54:	80 93 e9 00 	sts	0x00E9, r24
     e58:	80 91 f2 00 	lds	r24, 0x00F2
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <m_usb_rx_available+0x1a>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	9f bf       	out	0x3f, r25	; 63
     e62:	08 95       	ret

00000e64 <m_usb_rx_flush>:
     e64:	80 91 3f 01 	lds	r24, 0x013F
     e68:	88 23       	and	r24, r24
     e6a:	89 f0       	breq	.+34     	; 0xe8e <m_usb_rx_flush+0x2a>
     e6c:	2f b7       	in	r18, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	80 93 e9 00 	sts	0x00E9, r24
     e76:	80 91 e8 00 	lds	r24, 0x00E8
     e7a:	85 ff       	sbrs	r24, 5
     e7c:	07 c0       	rjmp	.+14     	; 0xe8c <m_usb_rx_flush+0x28>
     e7e:	e8 ee       	ldi	r30, 0xE8	; 232
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	9b e6       	ldi	r25, 0x6B	; 107
     e84:	90 83       	st	Z, r25
     e86:	80 81       	ld	r24, Z
     e88:	85 fd       	sbrc	r24, 5
     e8a:	fc cf       	rjmp	.-8      	; 0xe84 <m_usb_rx_flush+0x20>
     e8c:	2f bf       	out	0x3f, r18	; 63
     e8e:	08 95       	ret

00000e90 <m_usb_tx_char>:
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	90 91 3f 01 	lds	r25, 0x013F
     e98:	99 23       	and	r25, r25
     e9a:	09 f4       	brne	.+2      	; 0xe9e <m_usb_tx_char+0xe>
     e9c:	4c c0       	rjmp	.+152    	; 0xf36 <m_usb_tx_char+0xa6>
     e9e:	9f b7       	in	r25, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	24 e0       	ldi	r18, 0x04	; 4
     ea4:	20 93 e9 00 	sts	0x00E9, r18
     ea8:	20 91 3d 01 	lds	r18, 0x013D
     eac:	22 23       	and	r18, r18
     eae:	49 f0       	breq	.+18     	; 0xec2 <m_usb_tx_char+0x32>
     eb0:	20 91 e8 00 	lds	r18, 0x00E8
     eb4:	25 fd       	sbrc	r18, 5
     eb6:	03 c0       	rjmp	.+6      	; 0xebe <m_usb_tx_char+0x2e>
     eb8:	9f bf       	out	0x3f, r25	; 63
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	41 c0       	rjmp	.+130    	; 0xf40 <m_usb_tx_char+0xb0>
     ebe:	10 92 3d 01 	sts	0x013D, r1
     ec2:	30 91 e4 00 	lds	r19, 0x00E4
     ec6:	37 5e       	subi	r19, 0xE7	; 231
     ec8:	20 91 e8 00 	lds	r18, 0x00E8
     ecc:	25 fd       	sbrc	r18, 5
     ece:	24 c0       	rjmp	.+72     	; 0xf18 <m_usb_tx_char+0x88>
     ed0:	9f bf       	out	0x3f, r25	; 63
     ed2:	90 91 e4 00 	lds	r25, 0x00E4
     ed6:	93 17       	cp	r25, r19
     ed8:	81 f0       	breq	.+32     	; 0xefa <m_usb_tx_char+0x6a>
     eda:	90 91 3f 01 	lds	r25, 0x013F
     ede:	99 23       	and	r25, r25
     ee0:	61 f1       	breq	.+88     	; 0xf3a <m_usb_tx_char+0xaa>
     ee2:	a9 ee       	ldi	r26, 0xE9	; 233
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	44 e0       	ldi	r20, 0x04	; 4
     ee8:	e8 ee       	ldi	r30, 0xE8	; 232
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	c4 ee       	ldi	r28, 0xE4	; 228
     eee:	d0 e0       	ldi	r29, 0x00	; 0
     ef0:	0d c0       	rjmp	.+26     	; 0xf0c <m_usb_tx_char+0x7c>
     ef2:	9f bf       	out	0x3f, r25	; 63
     ef4:	98 81       	ld	r25, Y
     ef6:	93 13       	cpse	r25, r19
     ef8:	05 c0       	rjmp	.+10     	; 0xf04 <m_usb_tx_char+0x74>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 3d 01 	sts	0x013D, r24
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	1e c0       	rjmp	.+60     	; 0xf40 <m_usb_tx_char+0xb0>
     f04:	90 91 3f 01 	lds	r25, 0x013F
     f08:	99 23       	and	r25, r25
     f0a:	c9 f0       	breq	.+50     	; 0xf3e <m_usb_tx_char+0xae>
     f0c:	9f b7       	in	r25, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	4c 93       	st	X, r20
     f12:	20 81       	ld	r18, Z
     f14:	25 ff       	sbrs	r18, 5
     f16:	ed cf       	rjmp	.-38     	; 0xef2 <m_usb_tx_char+0x62>
     f18:	80 93 f1 00 	sts	0x00F1, r24
     f1c:	80 91 e8 00 	lds	r24, 0x00E8
     f20:	85 fd       	sbrc	r24, 5
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <m_usb_tx_char+0x9a>
     f24:	8a e3       	ldi	r24, 0x3A	; 58
     f26:	80 93 e8 00 	sts	0x00E8, r24
     f2a:	85 e0       	ldi	r24, 0x05	; 5
     f2c:	80 93 3e 01 	sts	0x013E, r24
     f30:	9f bf       	out	0x3f, r25	; 63
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	05 c0       	rjmp	.+10     	; 0xf40 <m_usb_tx_char+0xb0>
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <m_usb_tx_char+0xb0>
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <m_usb_tx_char+0xb0>
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <__vector_10>:
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	ef 93       	push	r30
     f56:	ff 93       	push	r31
     f58:	e1 ee       	ldi	r30, 0xE1	; 225
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	10 82       	st	Z, r1
     f60:	83 ff       	sbrs	r24, 3
     f62:	11 c0       	rjmp	.+34     	; 0xf86 <__vector_10+0x40>
     f64:	10 92 e9 00 	sts	0x00E9, r1
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	90 93 eb 00 	sts	0x00EB, r25
     f6e:	10 92 ec 00 	sts	0x00EC, r1
     f72:	92 e1       	ldi	r25, 0x12	; 18
     f74:	90 93 ed 00 	sts	0x00ED, r25
     f78:	98 e0       	ldi	r25, 0x08	; 8
     f7a:	90 93 f0 00 	sts	0x00F0, r25
     f7e:	10 92 3f 01 	sts	0x013F, r1
     f82:	10 92 3c 01 	sts	0x013C, r1
     f86:	82 ff       	sbrs	r24, 2
     f88:	13 c0       	rjmp	.+38     	; 0xfb0 <__vector_10+0x6a>
     f8a:	80 91 3f 01 	lds	r24, 0x013F
     f8e:	88 23       	and	r24, r24
     f90:	79 f0       	breq	.+30     	; 0xfb0 <__vector_10+0x6a>
     f92:	80 91 3e 01 	lds	r24, 0x013E
     f96:	88 23       	and	r24, r24
     f98:	59 f0       	breq	.+22     	; 0xfb0 <__vector_10+0x6a>
     f9a:	81 50       	subi	r24, 0x01	; 1
     f9c:	80 93 3e 01 	sts	0x013E, r24
     fa0:	81 11       	cpse	r24, r1
     fa2:	06 c0       	rjmp	.+12     	; 0xfb0 <__vector_10+0x6a>
     fa4:	84 e0       	ldi	r24, 0x04	; 4
     fa6:	80 93 e9 00 	sts	0x00E9, r24
     faa:	8a e3       	ldi	r24, 0x3A	; 58
     fac:	80 93 e8 00 	sts	0x00E8, r24
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	9f 91       	pop	r25
     fb6:	8f 91       	pop	r24
     fb8:	0f 90       	pop	r0
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	0f 90       	pop	r0
     fbe:	1f 90       	pop	r1
     fc0:	18 95       	reti

00000fc2 <__vector_11>:
     fc2:	1f 92       	push	r1
     fc4:	0f 92       	push	r0
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	0f 92       	push	r0
     fca:	11 24       	eor	r1, r1
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	ef 93       	push	r30
     fea:	ff 93       	push	r31
     fec:	10 92 e9 00 	sts	0x00E9, r1
     ff0:	80 91 e8 00 	lds	r24, 0x00E8
     ff4:	83 ff       	sbrs	r24, 3
     ff6:	4c c1       	rjmp	.+664    	; 0x1290 <__vector_11+0x2ce>
     ff8:	e1 ef       	ldi	r30, 0xF1	; 241
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	60 81       	ld	r22, Z
     ffe:	80 81       	ld	r24, Z
    1000:	20 81       	ld	r18, Z
    1002:	90 81       	ld	r25, Z
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	39 2b       	or	r19, r25
    1008:	40 81       	ld	r20, Z
    100a:	90 81       	ld	r25, Z
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	59 2b       	or	r21, r25
    1010:	70 81       	ld	r23, Z
    1012:	c0 81       	ld	r28, Z
    1014:	92 ef       	ldi	r25, 0xF2	; 242
    1016:	90 93 e8 00 	sts	0x00E8, r25
    101a:	86 30       	cpi	r24, 0x06	; 6
    101c:	09 f0       	breq	.+2      	; 0x1020 <__vector_11+0x5e>
    101e:	58 c0       	rjmp	.+176    	; 0x10d0 <__vector_11+0x10e>
    1020:	04 c0       	rjmp	.+8      	; 0x102a <__vector_11+0x68>
    1022:	81 e2       	ldi	r24, 0x21	; 33
    1024:	80 93 eb 00 	sts	0x00EB, r24
    1028:	3a c1       	rjmp	.+628    	; 0x129e <__vector_11+0x2dc>
    102a:	66 e0       	ldi	r22, 0x06	; 6
    102c:	8e ef       	ldi	r24, 0xFE	; 254
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	fc 01       	movw	r30, r24
    1032:	a5 91       	lpm	r26, Z+
    1034:	b4 91       	lpm	r27, Z
    1036:	2a 17       	cp	r18, r26
    1038:	3b 07       	cpc	r19, r27
    103a:	11 f0       	breq	.+4      	; 0x1040 <__vector_11+0x7e>
    103c:	07 96       	adiw	r24, 0x07	; 7
    103e:	23 c0       	rjmp	.+70     	; 0x1086 <__vector_11+0xc4>
    1040:	fc 01       	movw	r30, r24
    1042:	32 96       	adiw	r30, 0x02	; 2
    1044:	a5 91       	lpm	r26, Z+
    1046:	b4 91       	lpm	r27, Z
    1048:	4a 17       	cp	r20, r26
    104a:	5b 07       	cpc	r21, r27
    104c:	11 f0       	breq	.+4      	; 0x1052 <__vector_11+0x90>
    104e:	07 96       	adiw	r24, 0x07	; 7
    1050:	1a c0       	rjmp	.+52     	; 0x1086 <__vector_11+0xc4>
    1052:	fc 01       	movw	r30, r24
    1054:	34 96       	adiw	r30, 0x04	; 4
    1056:	45 91       	lpm	r20, Z+
    1058:	54 91       	lpm	r21, Z
    105a:	fc 01       	movw	r30, r24
    105c:	36 96       	adiw	r30, 0x06	; 6
    105e:	24 91       	lpm	r18, Z
    1060:	87 2f       	mov	r24, r23
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9c 2b       	or	r25, r28
    1066:	8f 3f       	cpi	r24, 0xFF	; 255
    1068:	91 05       	cpc	r25, r1
    106a:	19 f0       	breq	.+6      	; 0x1072 <__vector_11+0xb0>
    106c:	10 f0       	brcs	.+4      	; 0x1072 <__vector_11+0xb0>
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	82 17       	cp	r24, r18
    1074:	08 f4       	brcc	.+2      	; 0x1078 <__vector_11+0xb6>
    1076:	28 2f       	mov	r18, r24
    1078:	a8 ee       	ldi	r26, 0xE8	; 232
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	70 e1       	ldi	r23, 0x10	; 16
    107e:	6e ef       	ldi	r22, 0xFE	; 254
    1080:	c1 ef       	ldi	r28, 0xF1	; 241
    1082:	d0 e0       	ldi	r29, 0x00	; 0
    1084:	03 c0       	rjmp	.+6      	; 0x108c <__vector_11+0xca>
    1086:	61 50       	subi	r22, 0x01	; 1
    1088:	99 f6       	brne	.-90     	; 0x1030 <__vector_11+0x6e>
    108a:	cb cf       	rjmp	.-106    	; 0x1022 <__vector_11+0x60>
    108c:	8c 91       	ld	r24, X
    108e:	98 2f       	mov	r25, r24
    1090:	95 70       	andi	r25, 0x05	; 5
    1092:	e1 f3       	breq	.-8      	; 0x108c <__vector_11+0xca>
    1094:	82 fd       	sbrc	r24, 2
    1096:	03 c1       	rjmp	.+518    	; 0x129e <__vector_11+0x2dc>
    1098:	32 2f       	mov	r19, r18
    109a:	21 31       	cpi	r18, 0x11	; 17
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <__vector_11+0xde>
    109e:	37 2f       	mov	r19, r23
    10a0:	33 23       	and	r19, r19
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <__vector_11+0xe4>
    10a4:	f9 c0       	rjmp	.+498    	; 0x1298 <__vector_11+0x2d6>
    10a6:	fa 01       	movw	r30, r20
    10a8:	83 2f       	mov	r24, r19
    10aa:	94 91       	lpm	r25, Z
    10ac:	98 83       	st	Y, r25
    10ae:	81 50       	subi	r24, 0x01	; 1
    10b0:	31 96       	adiw	r30, 0x01	; 1
    10b2:	81 11       	cpse	r24, r1
    10b4:	fa cf       	rjmp	.-12     	; 0x10aa <__vector_11+0xe8>
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	83 0f       	add	r24, r19
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	48 0f       	add	r20, r24
    10c0:	59 1f       	adc	r21, r25
    10c2:	23 1b       	sub	r18, r19
    10c4:	6c 93       	st	X, r22
    10c6:	21 11       	cpse	r18, r1
    10c8:	e1 cf       	rjmp	.-62     	; 0x108c <__vector_11+0xca>
    10ca:	30 31       	cpi	r19, 0x10	; 16
    10cc:	f9 f2       	breq	.-66     	; 0x108c <__vector_11+0xca>
    10ce:	e7 c0       	rjmp	.+462    	; 0x129e <__vector_11+0x2dc>
    10d0:	85 30       	cpi	r24, 0x05	; 5
    10d2:	61 f4       	brne	.+24     	; 0x10ec <__vector_11+0x12a>
    10d4:	8e ef       	ldi	r24, 0xFE	; 254
    10d6:	80 93 e8 00 	sts	0x00E8, r24
    10da:	e8 ee       	ldi	r30, 0xE8	; 232
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	80 ff       	sbrs	r24, 0
    10e2:	fd cf       	rjmp	.-6      	; 0x10de <__vector_11+0x11c>
    10e4:	20 68       	ori	r18, 0x80	; 128
    10e6:	20 93 e3 00 	sts	0x00E3, r18
    10ea:	d9 c0       	rjmp	.+434    	; 0x129e <__vector_11+0x2dc>
    10ec:	89 30       	cpi	r24, 0x09	; 9
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <__vector_11+0x130>
    10f0:	35 c0       	rjmp	.+106    	; 0x115c <__vector_11+0x19a>
    10f2:	61 11       	cpse	r22, r1
    10f4:	cd c0       	rjmp	.+410    	; 0x1290 <__vector_11+0x2ce>
    10f6:	20 93 3f 01 	sts	0x013F, r18
    10fa:	10 92 3c 01 	sts	0x013C, r1
    10fe:	10 92 3e 01 	sts	0x013E, r1
    1102:	8e ef       	ldi	r24, 0xFE	; 254
    1104:	80 93 e8 00 	sts	0x00E8, r24
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	27 ea       	ldi	r18, 0xA7	; 167
    110c:	31 e0       	ldi	r19, 0x01	; 1
    110e:	c9 ee       	ldi	r28, 0xE9	; 233
    1110:	d0 e0       	ldi	r29, 0x00	; 0
    1112:	ab ee       	ldi	r26, 0xEB	; 235
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	0c ee       	ldi	r16, 0xEC	; 236
    1118:	10 e0       	ldi	r17, 0x00	; 0
    111a:	6d ee       	ldi	r22, 0xED	; 237
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	88 83       	st	Y, r24
    1120:	a9 01       	movw	r20, r18
    1122:	4f 5f       	subi	r20, 0xFF	; 255
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	f9 01       	movw	r30, r18
    1128:	94 91       	lpm	r25, Z
    112a:	9c 93       	st	X, r25
    112c:	99 23       	and	r25, r25
    112e:	61 f0       	breq	.+24     	; 0x1148 <__vector_11+0x186>
    1130:	fa 01       	movw	r30, r20
    1132:	44 91       	lpm	r20, Z
    1134:	f8 01       	movw	r30, r16
    1136:	40 83       	st	Z, r20
    1138:	f9 01       	movw	r30, r18
    113a:	32 96       	adiw	r30, 0x02	; 2
    113c:	94 91       	lpm	r25, Z
    113e:	2d 5f       	subi	r18, 0xFD	; 253
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	fb 01       	movw	r30, r22
    1144:	90 83       	st	Z, r25
    1146:	01 c0       	rjmp	.+2      	; 0x114a <__vector_11+0x188>
    1148:	9a 01       	movw	r18, r20
    114a:	8f 5f       	subi	r24, 0xFF	; 255
    114c:	85 30       	cpi	r24, 0x05	; 5
    114e:	39 f7       	brne	.-50     	; 0x111e <__vector_11+0x15c>
    1150:	ea ee       	ldi	r30, 0xEA	; 234
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	8e e1       	ldi	r24, 0x1E	; 30
    1156:	80 83       	st	Z, r24
    1158:	10 82       	st	Z, r1
    115a:	a1 c0       	rjmp	.+322    	; 0x129e <__vector_11+0x2dc>
    115c:	88 30       	cpi	r24, 0x08	; 8
    115e:	81 f4       	brne	.+32     	; 0x1180 <__vector_11+0x1be>
    1160:	60 38       	cpi	r22, 0x80	; 128
    1162:	09 f0       	breq	.+2      	; 0x1166 <__vector_11+0x1a4>
    1164:	95 c0       	rjmp	.+298    	; 0x1290 <__vector_11+0x2ce>
    1166:	e8 ee       	ldi	r30, 0xE8	; 232
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	80 ff       	sbrs	r24, 0
    116e:	fd cf       	rjmp	.-6      	; 0x116a <__vector_11+0x1a8>
    1170:	80 91 3f 01 	lds	r24, 0x013F
    1174:	80 93 f1 00 	sts	0x00F1, r24
    1178:	8e ef       	ldi	r24, 0xFE	; 254
    117a:	80 93 e8 00 	sts	0x00E8, r24
    117e:	8f c0       	rjmp	.+286    	; 0x129e <__vector_11+0x2dc>
    1180:	81 32       	cpi	r24, 0x21	; 33
    1182:	b9 f4       	brne	.+46     	; 0x11b2 <__vector_11+0x1f0>
    1184:	61 3a       	cpi	r22, 0xA1	; 161
    1186:	09 f0       	breq	.+2      	; 0x118a <__vector_11+0x1c8>
    1188:	83 c0       	rjmp	.+262    	; 0x1290 <__vector_11+0x2ce>
    118a:	e8 ee       	ldi	r30, 0xE8	; 232
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 ff       	sbrs	r24, 0
    1192:	fd cf       	rjmp	.-6      	; 0x118e <__vector_11+0x1cc>
    1194:	e0 e0       	ldi	r30, 0x00	; 0
    1196:	f1 e0       	ldi	r31, 0x01	; 1
    1198:	27 e0       	ldi	r18, 0x07	; 7
    119a:	31 e0       	ldi	r19, 0x01	; 1
    119c:	a1 ef       	ldi	r26, 0xF1	; 241
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	81 91       	ld	r24, Z+
    11a2:	8c 93       	st	X, r24
    11a4:	e2 17       	cp	r30, r18
    11a6:	f3 07       	cpc	r31, r19
    11a8:	d9 f7       	brne	.-10     	; 0x11a0 <__vector_11+0x1de>
    11aa:	8e ef       	ldi	r24, 0xFE	; 254
    11ac:	80 93 e8 00 	sts	0x00E8, r24
    11b0:	76 c0       	rjmp	.+236    	; 0x129e <__vector_11+0x2dc>
    11b2:	80 32       	cpi	r24, 0x20	; 32
    11b4:	d1 f4       	brne	.+52     	; 0x11ea <__vector_11+0x228>
    11b6:	61 32       	cpi	r22, 0x21	; 33
    11b8:	09 f0       	breq	.+2      	; 0x11bc <__vector_11+0x1fa>
    11ba:	6a c0       	rjmp	.+212    	; 0x1290 <__vector_11+0x2ce>
    11bc:	e8 ee       	ldi	r30, 0xE8	; 232
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	82 ff       	sbrs	r24, 2
    11c4:	fd cf       	rjmp	.-6      	; 0x11c0 <__vector_11+0x1fe>
    11c6:	e0 e0       	ldi	r30, 0x00	; 0
    11c8:	f1 e0       	ldi	r31, 0x01	; 1
    11ca:	27 e0       	ldi	r18, 0x07	; 7
    11cc:	31 e0       	ldi	r19, 0x01	; 1
    11ce:	a1 ef       	ldi	r26, 0xF1	; 241
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	8c 91       	ld	r24, X
    11d4:	81 93       	st	Z+, r24
    11d6:	e2 17       	cp	r30, r18
    11d8:	f3 07       	cpc	r31, r19
    11da:	d9 f7       	brne	.-10     	; 0x11d2 <__vector_11+0x210>
    11dc:	e8 ee       	ldi	r30, 0xE8	; 232
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	8b ef       	ldi	r24, 0xFB	; 251
    11e2:	80 83       	st	Z, r24
    11e4:	8e ef       	ldi	r24, 0xFE	; 254
    11e6:	80 83       	st	Z, r24
    11e8:	5a c0       	rjmp	.+180    	; 0x129e <__vector_11+0x2dc>
    11ea:	82 32       	cpi	r24, 0x22	; 34
    11ec:	71 f4       	brne	.+28     	; 0x120a <__vector_11+0x248>
    11ee:	61 32       	cpi	r22, 0x21	; 33
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <__vector_11+0x232>
    11f2:	4e c0       	rjmp	.+156    	; 0x1290 <__vector_11+0x2ce>
    11f4:	20 93 3c 01 	sts	0x013C, r18
    11f8:	e8 ee       	ldi	r30, 0xE8	; 232
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	80 ff       	sbrs	r24, 0
    1200:	fd cf       	rjmp	.-6      	; 0x11fc <__vector_11+0x23a>
    1202:	8e ef       	ldi	r24, 0xFE	; 254
    1204:	80 93 e8 00 	sts	0x00E8, r24
    1208:	4a c0       	rjmp	.+148    	; 0x129e <__vector_11+0x2dc>
    120a:	81 11       	cpse	r24, r1
    120c:	1a c0       	rjmp	.+52     	; 0x1242 <__vector_11+0x280>
    120e:	e8 ee       	ldi	r30, 0xE8	; 232
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	80 ff       	sbrs	r24, 0
    1216:	fd cf       	rjmp	.-6      	; 0x1212 <__vector_11+0x250>
    1218:	62 38       	cpi	r22, 0x82	; 130
    121a:	51 f4       	brne	.+20     	; 0x1230 <__vector_11+0x26e>
    121c:	e9 ee       	ldi	r30, 0xE9	; 233
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	40 83       	st	Z, r20
    1222:	80 91 eb 00 	lds	r24, 0x00EB
    1226:	85 fb       	bst	r24, 5
    1228:	88 27       	eor	r24, r24
    122a:	80 f9       	bld	r24, 0
    122c:	10 82       	st	Z, r1
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <__vector_11+0x270>
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	e1 ef       	ldi	r30, 0xF1	; 241
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 83       	st	Z, r24
    1238:	10 82       	st	Z, r1
    123a:	8e ef       	ldi	r24, 0xFE	; 254
    123c:	80 93 e8 00 	sts	0x00E8, r24
    1240:	2e c0       	rjmp	.+92     	; 0x129e <__vector_11+0x2dc>
    1242:	98 2f       	mov	r25, r24
    1244:	9d 7f       	andi	r25, 0xFD	; 253
    1246:	91 30       	cpi	r25, 0x01	; 1
    1248:	19 f5       	brne	.+70     	; 0x1290 <__vector_11+0x2ce>
    124a:	62 30       	cpi	r22, 0x02	; 2
    124c:	09 f5       	brne	.+66     	; 0x1290 <__vector_11+0x2ce>
    124e:	23 2b       	or	r18, r19
    1250:	f9 f4       	brne	.+62     	; 0x1290 <__vector_11+0x2ce>
    1252:	4f 77       	andi	r20, 0x7F	; 127
    1254:	9f ef       	ldi	r25, 0xFF	; 255
    1256:	94 0f       	add	r25, r20
    1258:	94 30       	cpi	r25, 0x04	; 4
    125a:	d0 f4       	brcc	.+52     	; 0x1290 <__vector_11+0x2ce>
    125c:	9e ef       	ldi	r25, 0xFE	; 254
    125e:	90 93 e8 00 	sts	0x00E8, r25
    1262:	40 93 e9 00 	sts	0x00E9, r20
    1266:	83 30       	cpi	r24, 0x03	; 3
    1268:	21 f4       	brne	.+8      	; 0x1272 <__vector_11+0x2b0>
    126a:	81 e2       	ldi	r24, 0x21	; 33
    126c:	80 93 eb 00 	sts	0x00EB, r24
    1270:	16 c0       	rjmp	.+44     	; 0x129e <__vector_11+0x2dc>
    1272:	89 e1       	ldi	r24, 0x19	; 25
    1274:	80 93 eb 00 	sts	0x00EB, r24
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <__vector_11+0x2c0>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	4a 95       	dec	r20
    1284:	e2 f7       	brpl	.-8      	; 0x127e <__vector_11+0x2bc>
    1286:	ea ee       	ldi	r30, 0xEA	; 234
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 83       	st	Z, r24
    128c:	10 82       	st	Z, r1
    128e:	07 c0       	rjmp	.+14     	; 0x129e <__vector_11+0x2dc>
    1290:	81 e2       	ldi	r24, 0x21	; 33
    1292:	80 93 eb 00 	sts	0x00EB, r24
    1296:	03 c0       	rjmp	.+6      	; 0x129e <__vector_11+0x2dc>
    1298:	6c 93       	st	X, r22
    129a:	21 11       	cpse	r18, r1
    129c:	f7 ce       	rjmp	.-530    	; 0x108c <__vector_11+0xca>
    129e:	ff 91       	pop	r31
    12a0:	ef 91       	pop	r30
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	bf 91       	pop	r27
    12a8:	af 91       	pop	r26
    12aa:	9f 91       	pop	r25
    12ac:	8f 91       	pop	r24
    12ae:	7f 91       	pop	r23
    12b0:	6f 91       	pop	r22
    12b2:	5f 91       	pop	r21
    12b4:	4f 91       	pop	r20
    12b6:	3f 91       	pop	r19
    12b8:	2f 91       	pop	r18
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	0f 90       	pop	r0
    12c4:	1f 90       	pop	r1
    12c6:	18 95       	reti

000012c8 <print_P>:
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	8c 01       	movw	r16, r24
    12d0:	0f 5f       	subi	r16, 0xFF	; 255
    12d2:	1f 4f       	sbci	r17, 0xFF	; 255
    12d4:	fc 01       	movw	r30, r24
    12d6:	c4 91       	lpm	r28, Z
    12d8:	cc 23       	and	r28, r28
    12da:	71 f0       	breq	.+28     	; 0x12f8 <print_P+0x30>
    12dc:	ca 30       	cpi	r28, 0x0A	; 10
    12de:	19 f4       	brne	.+6      	; 0x12e6 <print_P+0x1e>
    12e0:	8d e0       	ldi	r24, 0x0D	; 13
    12e2:	0e 94 48 07 	call	0xe90	; 0xe90 <m_usb_tx_char>
    12e6:	8c 2f       	mov	r24, r28
    12e8:	0e 94 48 07 	call	0xe90	; 0xe90 <m_usb_tx_char>
    12ec:	f8 01       	movw	r30, r16
    12ee:	c4 91       	lpm	r28, Z
    12f0:	0f 5f       	subi	r16, 0xFF	; 255
    12f2:	1f 4f       	sbci	r17, 0xFF	; 255
    12f4:	c1 11       	cpse	r28, r1
    12f6:	f2 cf       	rjmp	.-28     	; 0x12dc <print_P+0x14>
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	08 95       	ret

00001300 <m_usb_tx_int>:
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	27 97       	sbiw	r28, 0x07	; 7
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	8e 01       	movw	r16, r28
    131e:	0f 5f       	subi	r16, 0xFF	; 255
    1320:	1f 4f       	sbci	r17, 0xFF	; 255
    1322:	27 e0       	ldi	r18, 0x07	; 7
    1324:	f8 01       	movw	r30, r16
    1326:	11 92       	st	Z+, r1
    1328:	2a 95       	dec	r18
    132a:	e9 f7       	brne	.-6      	; 0x1326 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    132c:	4a e0       	ldi	r20, 0x0A	; 10
    132e:	b8 01       	movw	r22, r16
    1330:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__itoa_ncheck>
    1334:	7e 01       	movw	r14, r28
    1336:	f8 e0       	ldi	r31, 0x08	; 8
    1338:	ef 0e       	add	r14, r31
    133a:	f1 1c       	adc	r15, r1
    133c:	f8 01       	movw	r30, r16
    133e:	81 91       	ld	r24, Z+
    1340:	8f 01       	movw	r16, r30
    1342:	81 11       	cpse	r24, r1
    1344:	0e 94 48 07 	call	0xe90	; 0xe90 <m_usb_tx_char>
    1348:	0e 15       	cp	r16, r14
    134a:	1f 05       	cpc	r17, r15
    134c:	b9 f7       	brne	.-18     	; 0x133c <m_usb_tx_int+0x3c>
    134e:	27 96       	adiw	r28, 0x07	; 7
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	ff 90       	pop	r15
    1364:	ef 90       	pop	r14
    1366:	08 95       	ret

00001368 <twi_wait>:
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	ec eb       	ldi	r30, 0xBC	; 188
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	88 23       	and	r24, r24
    1374:	34 f0       	brlt	.+12     	; 0x1382 <twi_wait+0x1a>
    1376:	2f 5f       	subi	r18, 0xFF	; 255
    1378:	3f 4f       	sbci	r19, 0xFF	; 255
    137a:	29 3e       	cpi	r18, 0xE9	; 233
    137c:	83 e0       	ldi	r24, 0x03	; 3
    137e:	38 07       	cpc	r19, r24
    1380:	b9 f7       	brne	.-18     	; 0x1370 <twi_wait+0x8>
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	28 3e       	cpi	r18, 0xE8	; 232
    1386:	33 40       	sbci	r19, 0x03	; 3
    1388:	09 f4       	brne	.+2      	; 0x138c <twi_wait+0x24>
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	08 95       	ret

0000138e <send_byte>:
    138e:	80 93 bb 00 	sts	0x00BB, r24
    1392:	84 e8       	ldi	r24, 0x84	; 132
    1394:	80 93 bc 00 	sts	0x00BC, r24
    1398:	0e 94 b4 09 	call	0x1368	; 0x1368 <twi_wait>
    139c:	88 23       	and	r24, r24
    139e:	19 f0       	breq	.+6      	; 0x13a6 <send_byte+0x18>
    13a0:	80 91 b9 00 	lds	r24, 0x00B9
    13a4:	88 7f       	andi	r24, 0xF8	; 248
    13a6:	08 95       	ret

000013a8 <start_write>:
    13a8:	cf 93       	push	r28
    13aa:	c8 2f       	mov	r28, r24
    13ac:	94 ea       	ldi	r25, 0xA4	; 164
    13ae:	90 93 bc 00 	sts	0x00BC, r25
    13b2:	0e 94 b4 09 	call	0x1368	; 0x1368 <twi_wait>
    13b6:	88 23       	and	r24, r24
    13b8:	61 f0       	breq	.+24     	; 0x13d2 <start_write+0x2a>
    13ba:	8c 2f       	mov	r24, r28
    13bc:	88 0f       	add	r24, r24
    13be:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    13c2:	80 32       	cpi	r24, 0x20	; 32
    13c4:	29 f4       	brne	.+10     	; 0x13d0 <start_write+0x28>
    13c6:	84 e9       	ldi	r24, 0x94	; 148
    13c8:	80 93 bc 00 	sts	0x00BC, r24
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <start_write+0x2a>
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <m_wii_open>:
    13d6:	0e 94 db 06 	call	0xdb6	; 0xdb6 <m_bus_init>
    13da:	88 e5       	ldi	r24, 0x58	; 88
    13dc:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <start_write>
    13e0:	88 23       	and	r24, r24
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <m_wii_open+0x10>
    13e4:	cd c0       	rjmp	.+410    	; 0x1580 <m_wii_open+0x1aa>
    13e6:	80 e3       	ldi	r24, 0x30	; 48
    13e8:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    13ec:	88 23       	and	r24, r24
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <m_wii_open+0x1c>
    13f0:	c9 c0       	rjmp	.+402    	; 0x1584 <m_wii_open+0x1ae>
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    13f8:	88 23       	and	r24, r24
    13fa:	09 f4       	brne	.+2      	; 0x13fe <m_wii_open+0x28>
    13fc:	c5 c0       	rjmp	.+394    	; 0x1588 <m_wii_open+0x1b2>
    13fe:	84 e9       	ldi	r24, 0x94	; 148
    1400:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1404:	83 ec       	ldi	r24, 0xC3	; 195
    1406:	99 e0       	ldi	r25, 0x09	; 9
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <m_wii_open+0x32>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <m_wii_open+0x38>
    140e:	00 00       	nop
    1410:	88 e5       	ldi	r24, 0x58	; 88
    1412:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <start_write>
    1416:	88 23       	and	r24, r24
    1418:	09 f4       	brne	.+2      	; 0x141c <m_wii_open+0x46>
    141a:	b8 c0       	rjmp	.+368    	; 0x158c <m_wii_open+0x1b6>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    1422:	88 23       	and	r24, r24
    1424:	09 f4       	brne	.+2      	; 0x1428 <m_wii_open+0x52>
    1426:	b4 c0       	rjmp	.+360    	; 0x1590 <m_wii_open+0x1ba>
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    142e:	88 23       	and	r24, r24
    1430:	09 f4       	brne	.+2      	; 0x1434 <m_wii_open+0x5e>
    1432:	b0 c0       	rjmp	.+352    	; 0x1594 <m_wii_open+0x1be>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    143a:	88 23       	and	r24, r24
    143c:	09 f4       	brne	.+2      	; 0x1440 <m_wii_open+0x6a>
    143e:	ac c0       	rjmp	.+344    	; 0x1598 <m_wii_open+0x1c2>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    1446:	88 23       	and	r24, r24
    1448:	09 f4       	brne	.+2      	; 0x144c <m_wii_open+0x76>
    144a:	a8 c0       	rjmp	.+336    	; 0x159c <m_wii_open+0x1c6>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    1452:	88 23       	and	r24, r24
    1454:	09 f4       	brne	.+2      	; 0x1458 <m_wii_open+0x82>
    1456:	a4 c0       	rjmp	.+328    	; 0x15a0 <m_wii_open+0x1ca>
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    145e:	88 23       	and	r24, r24
    1460:	09 f4       	brne	.+2      	; 0x1464 <m_wii_open+0x8e>
    1462:	a0 c0       	rjmp	.+320    	; 0x15a4 <m_wii_open+0x1ce>
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    146a:	88 23       	and	r24, r24
    146c:	09 f4       	brne	.+2      	; 0x1470 <m_wii_open+0x9a>
    146e:	9c c0       	rjmp	.+312    	; 0x15a8 <m_wii_open+0x1d2>
    1470:	80 e9       	ldi	r24, 0x90	; 144
    1472:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    1476:	88 23       	and	r24, r24
    1478:	09 f4       	brne	.+2      	; 0x147c <m_wii_open+0xa6>
    147a:	98 c0       	rjmp	.+304    	; 0x15ac <m_wii_open+0x1d6>
    147c:	84 e9       	ldi	r24, 0x94	; 148
    147e:	80 93 bc 00 	sts	0x00BC, r24
    1482:	83 ec       	ldi	r24, 0xC3	; 195
    1484:	99 e0       	ldi	r25, 0x09	; 9
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <m_wii_open+0xb0>
    148a:	00 c0       	rjmp	.+0      	; 0x148c <m_wii_open+0xb6>
    148c:	00 00       	nop
    148e:	88 e5       	ldi	r24, 0x58	; 88
    1490:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <start_write>
    1494:	88 23       	and	r24, r24
    1496:	09 f4       	brne	.+2      	; 0x149a <m_wii_open+0xc4>
    1498:	8b c0       	rjmp	.+278    	; 0x15b0 <m_wii_open+0x1da>
    149a:	87 e0       	ldi	r24, 0x07	; 7
    149c:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    14a0:	88 23       	and	r24, r24
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <m_wii_open+0xd0>
    14a4:	87 c0       	rjmp	.+270    	; 0x15b4 <m_wii_open+0x1de>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    14ac:	88 23       	and	r24, r24
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <m_wii_open+0xdc>
    14b0:	83 c0       	rjmp	.+262    	; 0x15b8 <m_wii_open+0x1e2>
    14b2:	81 e4       	ldi	r24, 0x41	; 65
    14b4:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    14b8:	88 23       	and	r24, r24
    14ba:	09 f4       	brne	.+2      	; 0x14be <m_wii_open+0xe8>
    14bc:	7f c0       	rjmp	.+254    	; 0x15bc <m_wii_open+0x1e6>
    14be:	84 e9       	ldi	r24, 0x94	; 148
    14c0:	80 93 bc 00 	sts	0x00BC, r24
    14c4:	83 ec       	ldi	r24, 0xC3	; 195
    14c6:	99 e0       	ldi	r25, 0x09	; 9
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <m_wii_open+0xf2>
    14cc:	00 c0       	rjmp	.+0      	; 0x14ce <m_wii_open+0xf8>
    14ce:	00 00       	nop
    14d0:	88 e5       	ldi	r24, 0x58	; 88
    14d2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <start_write>
    14d6:	88 23       	and	r24, r24
    14d8:	09 f4       	brne	.+2      	; 0x14dc <m_wii_open+0x106>
    14da:	72 c0       	rjmp	.+228    	; 0x15c0 <m_wii_open+0x1ea>
    14dc:	8a e1       	ldi	r24, 0x1A	; 26
    14de:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    14e2:	88 23       	and	r24, r24
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <m_wii_open+0x112>
    14e6:	6e c0       	rjmp	.+220    	; 0x15c4 <m_wii_open+0x1ee>
    14e8:	80 e4       	ldi	r24, 0x40	; 64
    14ea:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    14ee:	88 23       	and	r24, r24
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <m_wii_open+0x11e>
    14f2:	6a c0       	rjmp	.+212    	; 0x15c8 <m_wii_open+0x1f2>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    14fa:	88 23       	and	r24, r24
    14fc:	09 f4       	brne	.+2      	; 0x1500 <m_wii_open+0x12a>
    14fe:	66 c0       	rjmp	.+204    	; 0x15cc <m_wii_open+0x1f6>
    1500:	84 e9       	ldi	r24, 0x94	; 148
    1502:	80 93 bc 00 	sts	0x00BC, r24
    1506:	83 ec       	ldi	r24, 0xC3	; 195
    1508:	99 e0       	ldi	r25, 0x09	; 9
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <m_wii_open+0x134>
    150e:	00 c0       	rjmp	.+0      	; 0x1510 <m_wii_open+0x13a>
    1510:	00 00       	nop
    1512:	88 e5       	ldi	r24, 0x58	; 88
    1514:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <start_write>
    1518:	88 23       	and	r24, r24
    151a:	09 f4       	brne	.+2      	; 0x151e <m_wii_open+0x148>
    151c:	59 c0       	rjmp	.+178    	; 0x15d0 <m_wii_open+0x1fa>
    151e:	83 e3       	ldi	r24, 0x33	; 51
    1520:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    1524:	88 23       	and	r24, r24
    1526:	09 f4       	brne	.+2      	; 0x152a <m_wii_open+0x154>
    1528:	55 c0       	rjmp	.+170    	; 0x15d4 <m_wii_open+0x1fe>
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    1530:	88 23       	and	r24, r24
    1532:	09 f4       	brne	.+2      	; 0x1536 <m_wii_open+0x160>
    1534:	51 c0       	rjmp	.+162    	; 0x15d8 <m_wii_open+0x202>
    1536:	84 e9       	ldi	r24, 0x94	; 148
    1538:	80 93 bc 00 	sts	0x00BC, r24
    153c:	83 ec       	ldi	r24, 0xC3	; 195
    153e:	99 e0       	ldi	r25, 0x09	; 9
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	f1 f7       	brne	.-4      	; 0x1540 <m_wii_open+0x16a>
    1544:	00 c0       	rjmp	.+0      	; 0x1546 <m_wii_open+0x170>
    1546:	00 00       	nop
    1548:	88 e5       	ldi	r24, 0x58	; 88
    154a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <start_write>
    154e:	88 23       	and	r24, r24
    1550:	09 f4       	brne	.+2      	; 0x1554 <m_wii_open+0x17e>
    1552:	44 c0       	rjmp	.+136    	; 0x15dc <m_wii_open+0x206>
    1554:	80 e3       	ldi	r24, 0x30	; 48
    1556:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    155a:	88 23       	and	r24, r24
    155c:	09 f4       	brne	.+2      	; 0x1560 <m_wii_open+0x18a>
    155e:	40 c0       	rjmp	.+128    	; 0x15e0 <m_wii_open+0x20a>
    1560:	88 e0       	ldi	r24, 0x08	; 8
    1562:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    1566:	88 23       	and	r24, r24
    1568:	e9 f1       	breq	.+122    	; 0x15e4 <m_wii_open+0x20e>
    156a:	84 e9       	ldi	r24, 0x94	; 148
    156c:	80 93 bc 00 	sts	0x00BC, r24
    1570:	83 ec       	ldi	r24, 0xC3	; 195
    1572:	99 e0       	ldi	r25, 0x09	; 9
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <m_wii_open+0x19e>
    1578:	00 c0       	rjmp	.+0      	; 0x157a <m_wii_open+0x1a4>
    157a:	00 00       	nop
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	08 95       	ret
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	08 95       	ret
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	08 95       	ret
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	08 95       	ret
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	08 95       	ret
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	08 95       	ret
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	08 95       	ret
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	08 95       	ret
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	08 95       	ret
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	08 95       	ret
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	08 95       	ret
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	08 95       	ret
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	08 95       	ret
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	08 95       	ret
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	08 95       	ret
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	08 95       	ret
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	08 95       	ret
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	08 95       	ret
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	08 95       	ret
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	08 95       	ret
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	08 95       	ret
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	08 95       	ret
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	08 95       	ret
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	08 95       	ret
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	08 95       	ret
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	08 95       	ret
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	08 95       	ret

000015e8 <start_read>:
    15e8:	cf 93       	push	r28
    15ea:	c8 2f       	mov	r28, r24
    15ec:	84 ea       	ldi	r24, 0xA4	; 164
    15ee:	80 93 bc 00 	sts	0x00BC, r24
    15f2:	0e 94 b4 09 	call	0x1368	; 0x1368 <twi_wait>
    15f6:	88 23       	and	r24, r24
    15f8:	69 f0       	breq	.+26     	; 0x1614 <start_read+0x2c>
    15fa:	8c 2f       	mov	r24, r28
    15fc:	88 0f       	add	r24, r24
    15fe:	8f 5f       	subi	r24, 0xFF	; 255
    1600:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    1604:	88 34       	cpi	r24, 0x48	; 72
    1606:	29 f4       	brne	.+10     	; 0x1612 <start_read+0x2a>
    1608:	84 e9       	ldi	r24, 0x94	; 148
    160a:	80 93 bc 00 	sts	0x00BC, r24
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <start_read+0x2c>
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	cf 91       	pop	r28
    1616:	08 95       	ret

00001618 <m_wii_read>:
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	60 97       	sbiw	r28, 0x10	; 16
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	8c 01       	movw	r16, r24
    1632:	fe 01       	movw	r30, r28
    1634:	31 96       	adiw	r30, 0x01	; 1
    1636:	80 e1       	ldi	r24, 0x10	; 16
    1638:	df 01       	movw	r26, r30
    163a:	1d 92       	st	X+, r1
    163c:	8a 95       	dec	r24
    163e:	e9 f7       	brne	.-6      	; 0x163a <m_wii_read+0x22>
    1640:	88 e5       	ldi	r24, 0x58	; 88
    1642:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <start_write>
    1646:	88 23       	and	r24, r24
    1648:	09 f4       	brne	.+2      	; 0x164c <m_wii_read+0x34>
    164a:	69 c0       	rjmp	.+210    	; 0x171e <m_wii_read+0x106>
    164c:	86 e3       	ldi	r24, 0x36	; 54
    164e:	0e 94 c7 09 	call	0x138e	; 0x138e <send_byte>
    1652:	88 23       	and	r24, r24
    1654:	09 f4       	brne	.+2      	; 0x1658 <m_wii_read+0x40>
    1656:	65 c0       	rjmp	.+202    	; 0x1722 <m_wii_read+0x10a>
    1658:	84 e9       	ldi	r24, 0x94	; 148
    165a:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    165e:	b8 e0       	ldi	r27, 0x08	; 8
    1660:	ba 95       	dec	r27
    1662:	f1 f7       	brne	.-4      	; 0x1660 <m_wii_read+0x48>
    1664:	00 00       	nop
    1666:	88 e5       	ldi	r24, 0x58	; 88
    1668:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <start_read>
    166c:	88 23       	and	r24, r24
    166e:	09 f4       	brne	.+2      	; 0x1672 <m_wii_read+0x5a>
    1670:	5a c0       	rjmp	.+180    	; 0x1726 <m_wii_read+0x10e>
    1672:	be 01       	movw	r22, r28
    1674:	6f 5f       	subi	r22, 0xFF	; 255
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	ae 01       	movw	r20, r28
    167a:	40 5f       	subi	r20, 0xF0	; 240
    167c:	5f 4f       	sbci	r21, 0xFF	; 255
    167e:	ec eb       	ldi	r30, 0xBC	; 188
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	84 ec       	ldi	r24, 0xC4	; 196
    1684:	2b eb       	ldi	r18, 0xBB	; 187
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	80 83       	st	Z, r24
    168a:	90 81       	ld	r25, Z
    168c:	99 23       	and	r25, r25
    168e:	ec f7       	brge	.-6      	; 0x168a <m_wii_read+0x72>
    1690:	d9 01       	movw	r26, r18
    1692:	9c 91       	ld	r25, X
    1694:	db 01       	movw	r26, r22
    1696:	9d 93       	st	X+, r25
    1698:	bd 01       	movw	r22, r26
    169a:	a4 17       	cp	r26, r20
    169c:	b5 07       	cpc	r27, r21
    169e:	a1 f7       	brne	.-24     	; 0x1688 <m_wii_read+0x70>
    16a0:	84 e8       	ldi	r24, 0x84	; 132
    16a2:	80 93 bc 00 	sts	0x00BC, r24
    16a6:	ec eb       	ldi	r30, 0xBC	; 188
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	88 23       	and	r24, r24
    16ae:	ec f7       	brge	.-6      	; 0x16aa <m_wii_read+0x92>
    16b0:	80 91 bb 00 	lds	r24, 0x00BB
    16b4:	88 8b       	std	Y+16, r24	; 0x10
    16b6:	84 e9       	ldi	r24, 0x94	; 148
    16b8:	80 93 bc 00 	sts	0x00BC, r24
    16bc:	be 01       	movw	r22, r28
    16be:	6c 5f       	subi	r22, 0xFC	; 252
    16c0:	7f 4f       	sbci	r23, 0xFF	; 255
    16c2:	f8 01       	movw	r30, r16
    16c4:	08 5e       	subi	r16, 0xE8	; 232
    16c6:	1f 4f       	sbci	r17, 0xFF	; 255
    16c8:	db 01       	movw	r26, r22
    16ca:	2c 91       	ld	r18, X
    16cc:	32 2f       	mov	r19, r18
    16ce:	30 73       	andi	r19, 0x30	; 48
    16d0:	cb 01       	movw	r24, r22
    16d2:	02 97       	sbiw	r24, 0x02	; 2
    16d4:	dc 01       	movw	r26, r24
    16d6:	8c 91       	ld	r24, X
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	b0 e1       	ldi	r27, 0x10	; 16
    16dc:	3b 9f       	mul	r19, r27
    16de:	80 0d       	add	r24, r0
    16e0:	91 1d       	adc	r25, r1
    16e2:	11 24       	eor	r1, r1
    16e4:	91 83       	std	Z+1, r25	; 0x01
    16e6:	80 83       	st	Z, r24
    16e8:	42 2f       	mov	r20, r18
    16ea:	40 7c       	andi	r20, 0xC0	; 192
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	44 0f       	add	r20, r20
    16f0:	55 1f       	adc	r21, r21
    16f2:	44 0f       	add	r20, r20
    16f4:	55 1f       	adc	r21, r21
    16f6:	cb 01       	movw	r24, r22
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	dc 01       	movw	r26, r24
    16fc:	8c 91       	ld	r24, X
    16fe:	48 0f       	add	r20, r24
    1700:	51 1d       	adc	r21, r1
    1702:	53 83       	std	Z+3, r21	; 0x03
    1704:	42 83       	std	Z+2, r20	; 0x02
    1706:	2f 70       	andi	r18, 0x0F	; 15
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	35 83       	std	Z+5, r19	; 0x05
    170c:	24 83       	std	Z+4, r18	; 0x04
    170e:	6d 5f       	subi	r22, 0xFD	; 253
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	36 96       	adiw	r30, 0x06	; 6
    1714:	e0 17       	cp	r30, r16
    1716:	f1 07       	cpc	r31, r17
    1718:	b9 f6       	brne	.-82     	; 0x16c8 <m_wii_read+0xb0>
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	05 c0       	rjmp	.+10     	; 0x1728 <m_wii_read+0x110>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	03 c0       	rjmp	.+6      	; 0x1728 <m_wii_read+0x110>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <m_wii_read+0x110>
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	60 96       	adiw	r28, 0x10	; 16
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	08 95       	ret

0000173e <__subsf3>:
    173e:	50 58       	subi	r21, 0x80	; 128

00001740 <__addsf3>:
    1740:	bb 27       	eor	r27, r27
    1742:	aa 27       	eor	r26, r26
    1744:	0e 94 b7 0b 	call	0x176e	; 0x176e <__addsf3x>
    1748:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_round>
    174c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__fp_pscA>
    1750:	38 f0       	brcs	.+14     	; 0x1760 <__addsf3+0x20>
    1752:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__fp_pscB>
    1756:	20 f0       	brcs	.+8      	; 0x1760 <__addsf3+0x20>
    1758:	39 f4       	brne	.+14     	; 0x1768 <__addsf3+0x28>
    175a:	9f 3f       	cpi	r25, 0xFF	; 255
    175c:	19 f4       	brne	.+6      	; 0x1764 <__addsf3+0x24>
    175e:	26 f4       	brtc	.+8      	; 0x1768 <__addsf3+0x28>
    1760:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_nan>
    1764:	0e f4       	brtc	.+2      	; 0x1768 <__addsf3+0x28>
    1766:	e0 95       	com	r30
    1768:	e7 fb       	bst	r30, 7
    176a:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__fp_inf>

0000176e <__addsf3x>:
    176e:	e9 2f       	mov	r30, r25
    1770:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fp_split3>
    1774:	58 f3       	brcs	.-42     	; 0x174c <__addsf3+0xc>
    1776:	ba 17       	cp	r27, r26
    1778:	62 07       	cpc	r22, r18
    177a:	73 07       	cpc	r23, r19
    177c:	84 07       	cpc	r24, r20
    177e:	95 07       	cpc	r25, r21
    1780:	20 f0       	brcs	.+8      	; 0x178a <__addsf3x+0x1c>
    1782:	79 f4       	brne	.+30     	; 0x17a2 <__addsf3x+0x34>
    1784:	a6 f5       	brtc	.+104    	; 0x17ee <__addsf3x+0x80>
    1786:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__fp_zero>
    178a:	0e f4       	brtc	.+2      	; 0x178e <__addsf3x+0x20>
    178c:	e0 95       	com	r30
    178e:	0b 2e       	mov	r0, r27
    1790:	ba 2f       	mov	r27, r26
    1792:	a0 2d       	mov	r26, r0
    1794:	0b 01       	movw	r0, r22
    1796:	b9 01       	movw	r22, r18
    1798:	90 01       	movw	r18, r0
    179a:	0c 01       	movw	r0, r24
    179c:	ca 01       	movw	r24, r20
    179e:	a0 01       	movw	r20, r0
    17a0:	11 24       	eor	r1, r1
    17a2:	ff 27       	eor	r31, r31
    17a4:	59 1b       	sub	r21, r25
    17a6:	99 f0       	breq	.+38     	; 0x17ce <__addsf3x+0x60>
    17a8:	59 3f       	cpi	r21, 0xF9	; 249
    17aa:	50 f4       	brcc	.+20     	; 0x17c0 <__addsf3x+0x52>
    17ac:	50 3e       	cpi	r21, 0xE0	; 224
    17ae:	68 f1       	brcs	.+90     	; 0x180a <__addsf3x+0x9c>
    17b0:	1a 16       	cp	r1, r26
    17b2:	f0 40       	sbci	r31, 0x00	; 0
    17b4:	a2 2f       	mov	r26, r18
    17b6:	23 2f       	mov	r18, r19
    17b8:	34 2f       	mov	r19, r20
    17ba:	44 27       	eor	r20, r20
    17bc:	58 5f       	subi	r21, 0xF8	; 248
    17be:	f3 cf       	rjmp	.-26     	; 0x17a6 <__addsf3x+0x38>
    17c0:	46 95       	lsr	r20
    17c2:	37 95       	ror	r19
    17c4:	27 95       	ror	r18
    17c6:	a7 95       	ror	r26
    17c8:	f0 40       	sbci	r31, 0x00	; 0
    17ca:	53 95       	inc	r21
    17cc:	c9 f7       	brne	.-14     	; 0x17c0 <__addsf3x+0x52>
    17ce:	7e f4       	brtc	.+30     	; 0x17ee <__addsf3x+0x80>
    17d0:	1f 16       	cp	r1, r31
    17d2:	ba 0b       	sbc	r27, r26
    17d4:	62 0b       	sbc	r22, r18
    17d6:	73 0b       	sbc	r23, r19
    17d8:	84 0b       	sbc	r24, r20
    17da:	ba f0       	brmi	.+46     	; 0x180a <__addsf3x+0x9c>
    17dc:	91 50       	subi	r25, 0x01	; 1
    17de:	a1 f0       	breq	.+40     	; 0x1808 <__addsf3x+0x9a>
    17e0:	ff 0f       	add	r31, r31
    17e2:	bb 1f       	adc	r27, r27
    17e4:	66 1f       	adc	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	88 1f       	adc	r24, r24
    17ea:	c2 f7       	brpl	.-16     	; 0x17dc <__addsf3x+0x6e>
    17ec:	0e c0       	rjmp	.+28     	; 0x180a <__addsf3x+0x9c>
    17ee:	ba 0f       	add	r27, r26
    17f0:	62 1f       	adc	r22, r18
    17f2:	73 1f       	adc	r23, r19
    17f4:	84 1f       	adc	r24, r20
    17f6:	48 f4       	brcc	.+18     	; 0x180a <__addsf3x+0x9c>
    17f8:	87 95       	ror	r24
    17fa:	77 95       	ror	r23
    17fc:	67 95       	ror	r22
    17fe:	b7 95       	ror	r27
    1800:	f7 95       	ror	r31
    1802:	9e 3f       	cpi	r25, 0xFE	; 254
    1804:	08 f0       	brcs	.+2      	; 0x1808 <__addsf3x+0x9a>
    1806:	b0 cf       	rjmp	.-160    	; 0x1768 <__addsf3+0x28>
    1808:	93 95       	inc	r25
    180a:	88 0f       	add	r24, r24
    180c:	08 f0       	brcs	.+2      	; 0x1810 <__addsf3x+0xa2>
    180e:	99 27       	eor	r25, r25
    1810:	ee 0f       	add	r30, r30
    1812:	97 95       	ror	r25
    1814:	87 95       	ror	r24
    1816:	08 95       	ret
    1818:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__fp_pscA>
    181c:	60 f0       	brcs	.+24     	; 0x1836 <__addsf3x+0xc8>
    181e:	80 e8       	ldi	r24, 0x80	; 128
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	09 f4       	brne	.+2      	; 0x1826 <__addsf3x+0xb8>
    1824:	9e ef       	ldi	r25, 0xFE	; 254
    1826:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__fp_pscB>
    182a:	28 f0       	brcs	.+10     	; 0x1836 <__addsf3x+0xc8>
    182c:	40 e8       	ldi	r20, 0x80	; 128
    182e:	51 e0       	ldi	r21, 0x01	; 1
    1830:	71 f4       	brne	.+28     	; 0x184e <atan2+0x10>
    1832:	5e ef       	ldi	r21, 0xFE	; 254
    1834:	0c c0       	rjmp	.+24     	; 0x184e <atan2+0x10>
    1836:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_nan>
    183a:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__fp_zero>

0000183e <atan2>:
    183e:	e9 2f       	mov	r30, r25
    1840:	e0 78       	andi	r30, 0x80	; 128
    1842:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fp_split3>
    1846:	40 f3       	brcs	.-48     	; 0x1818 <__addsf3x+0xaa>
    1848:	09 2e       	mov	r0, r25
    184a:	05 2a       	or	r0, r21
    184c:	b1 f3       	breq	.-20     	; 0x183a <__addsf3x+0xcc>
    184e:	26 17       	cp	r18, r22
    1850:	37 07       	cpc	r19, r23
    1852:	48 07       	cpc	r20, r24
    1854:	59 07       	cpc	r21, r25
    1856:	38 f0       	brcs	.+14     	; 0x1866 <atan2+0x28>
    1858:	0e 2e       	mov	r0, r30
    185a:	07 f8       	bld	r0, 7
    185c:	e0 25       	eor	r30, r0
    185e:	69 f0       	breq	.+26     	; 0x187a <atan2+0x3c>
    1860:	e0 25       	eor	r30, r0
    1862:	e0 64       	ori	r30, 0x40	; 64
    1864:	0a c0       	rjmp	.+20     	; 0x187a <atan2+0x3c>
    1866:	ef 63       	ori	r30, 0x3F	; 63
    1868:	07 f8       	bld	r0, 7
    186a:	00 94       	com	r0
    186c:	07 fa       	bst	r0, 7
    186e:	db 01       	movw	r26, r22
    1870:	b9 01       	movw	r22, r18
    1872:	9d 01       	movw	r18, r26
    1874:	dc 01       	movw	r26, r24
    1876:	ca 01       	movw	r24, r20
    1878:	ad 01       	movw	r20, r26
    187a:	ef 93       	push	r30
    187c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__divsf3_pse>
    1880:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fp_round>
    1884:	0e 94 4f 0c 	call	0x189e	; 0x189e <atan>
    1888:	5f 91       	pop	r21
    188a:	55 23       	and	r21, r21
    188c:	39 f0       	breq	.+14     	; 0x189c <atan2+0x5e>
    188e:	2b ed       	ldi	r18, 0xDB	; 219
    1890:	3f e0       	ldi	r19, 0x0F	; 15
    1892:	49 e4       	ldi	r20, 0x49	; 73
    1894:	50 fd       	sbrc	r21, 0
    1896:	49 ec       	ldi	r20, 0xC9	; 201
    1898:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__addsf3>
    189c:	08 95       	ret

0000189e <atan>:
    189e:	df 93       	push	r29
    18a0:	dd 27       	eor	r29, r29
    18a2:	b9 2f       	mov	r27, r25
    18a4:	bf 77       	andi	r27, 0x7F	; 127
    18a6:	40 e8       	ldi	r20, 0x80	; 128
    18a8:	5f e3       	ldi	r21, 0x3F	; 63
    18aa:	16 16       	cp	r1, r22
    18ac:	17 06       	cpc	r1, r23
    18ae:	48 07       	cpc	r20, r24
    18b0:	5b 07       	cpc	r21, r27
    18b2:	18 f4       	brcc	.+6      	; 0x18ba <atan+0x1c>
    18b4:	d9 2f       	mov	r29, r25
    18b6:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <inverse>
    18ba:	9f 93       	push	r25
    18bc:	8f 93       	push	r24
    18be:	7f 93       	push	r23
    18c0:	6f 93       	push	r22
    18c2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <square>
    18c6:	ec ea       	ldi	r30, 0xAC	; 172
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__fp_powser>
    18ce:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fp_round>
    18d2:	2f 91       	pop	r18
    18d4:	3f 91       	pop	r19
    18d6:	4f 91       	pop	r20
    18d8:	5f 91       	pop	r21
    18da:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__mulsf3x>
    18de:	dd 23       	and	r29, r29
    18e0:	51 f0       	breq	.+20     	; 0x18f6 <atan+0x58>
    18e2:	90 58       	subi	r25, 0x80	; 128
    18e4:	a2 ea       	ldi	r26, 0xA2	; 162
    18e6:	2a ed       	ldi	r18, 0xDA	; 218
    18e8:	3f e0       	ldi	r19, 0x0F	; 15
    18ea:	49 ec       	ldi	r20, 0xC9	; 201
    18ec:	5f e3       	ldi	r21, 0x3F	; 63
    18ee:	d0 78       	andi	r29, 0x80	; 128
    18f0:	5d 27       	eor	r21, r29
    18f2:	0e 94 b7 0b 	call	0x176e	; 0x176e <__addsf3x>
    18f6:	df 91       	pop	r29
    18f8:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_round>

000018fc <cos>:
    18fc:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__fp_rempio2>
    1900:	e3 95       	inc	r30
    1902:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__fp_sinus>

00001906 <__divsf3>:
    1906:	0e 94 97 0c 	call	0x192e	; 0x192e <__divsf3x>
    190a:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_round>
    190e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__fp_pscB>
    1912:	58 f0       	brcs	.+22     	; 0x192a <__divsf3+0x24>
    1914:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__fp_pscA>
    1918:	40 f0       	brcs	.+16     	; 0x192a <__divsf3+0x24>
    191a:	29 f4       	brne	.+10     	; 0x1926 <__divsf3+0x20>
    191c:	5f 3f       	cpi	r21, 0xFF	; 255
    191e:	29 f0       	breq	.+10     	; 0x192a <__divsf3+0x24>
    1920:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__fp_inf>
    1924:	51 11       	cpse	r21, r1
    1926:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_szero>
    192a:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_nan>

0000192e <__divsf3x>:
    192e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fp_split3>
    1932:	68 f3       	brcs	.-38     	; 0x190e <__divsf3+0x8>

00001934 <__divsf3_pse>:
    1934:	99 23       	and	r25, r25
    1936:	b1 f3       	breq	.-20     	; 0x1924 <__divsf3+0x1e>
    1938:	55 23       	and	r21, r21
    193a:	91 f3       	breq	.-28     	; 0x1920 <__divsf3+0x1a>
    193c:	95 1b       	sub	r25, r21
    193e:	55 0b       	sbc	r21, r21
    1940:	bb 27       	eor	r27, r27
    1942:	aa 27       	eor	r26, r26
    1944:	62 17       	cp	r22, r18
    1946:	73 07       	cpc	r23, r19
    1948:	84 07       	cpc	r24, r20
    194a:	38 f0       	brcs	.+14     	; 0x195a <__divsf3_pse+0x26>
    194c:	9f 5f       	subi	r25, 0xFF	; 255
    194e:	5f 4f       	sbci	r21, 0xFF	; 255
    1950:	22 0f       	add	r18, r18
    1952:	33 1f       	adc	r19, r19
    1954:	44 1f       	adc	r20, r20
    1956:	aa 1f       	adc	r26, r26
    1958:	a9 f3       	breq	.-22     	; 0x1944 <__divsf3_pse+0x10>
    195a:	35 d0       	rcall	.+106    	; 0x19c6 <__divsf3_pse+0x92>
    195c:	0e 2e       	mov	r0, r30
    195e:	3a f0       	brmi	.+14     	; 0x196e <__divsf3_pse+0x3a>
    1960:	e0 e8       	ldi	r30, 0x80	; 128
    1962:	32 d0       	rcall	.+100    	; 0x19c8 <__divsf3_pse+0x94>
    1964:	91 50       	subi	r25, 0x01	; 1
    1966:	50 40       	sbci	r21, 0x00	; 0
    1968:	e6 95       	lsr	r30
    196a:	00 1c       	adc	r0, r0
    196c:	ca f7       	brpl	.-14     	; 0x1960 <__divsf3_pse+0x2c>
    196e:	2b d0       	rcall	.+86     	; 0x19c6 <__divsf3_pse+0x92>
    1970:	fe 2f       	mov	r31, r30
    1972:	29 d0       	rcall	.+82     	; 0x19c6 <__divsf3_pse+0x92>
    1974:	66 0f       	add	r22, r22
    1976:	77 1f       	adc	r23, r23
    1978:	88 1f       	adc	r24, r24
    197a:	bb 1f       	adc	r27, r27
    197c:	26 17       	cp	r18, r22
    197e:	37 07       	cpc	r19, r23
    1980:	48 07       	cpc	r20, r24
    1982:	ab 07       	cpc	r26, r27
    1984:	b0 e8       	ldi	r27, 0x80	; 128
    1986:	09 f0       	breq	.+2      	; 0x198a <__divsf3_pse+0x56>
    1988:	bb 0b       	sbc	r27, r27
    198a:	80 2d       	mov	r24, r0
    198c:	bf 01       	movw	r22, r30
    198e:	ff 27       	eor	r31, r31
    1990:	93 58       	subi	r25, 0x83	; 131
    1992:	5f 4f       	sbci	r21, 0xFF	; 255
    1994:	3a f0       	brmi	.+14     	; 0x19a4 <__divsf3_pse+0x70>
    1996:	9e 3f       	cpi	r25, 0xFE	; 254
    1998:	51 05       	cpc	r21, r1
    199a:	78 f0       	brcs	.+30     	; 0x19ba <__divsf3_pse+0x86>
    199c:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__fp_inf>
    19a0:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_szero>
    19a4:	5f 3f       	cpi	r21, 0xFF	; 255
    19a6:	e4 f3       	brlt	.-8      	; 0x19a0 <__divsf3_pse+0x6c>
    19a8:	98 3e       	cpi	r25, 0xE8	; 232
    19aa:	d4 f3       	brlt	.-12     	; 0x19a0 <__divsf3_pse+0x6c>
    19ac:	86 95       	lsr	r24
    19ae:	77 95       	ror	r23
    19b0:	67 95       	ror	r22
    19b2:	b7 95       	ror	r27
    19b4:	f7 95       	ror	r31
    19b6:	9f 5f       	subi	r25, 0xFF	; 255
    19b8:	c9 f7       	brne	.-14     	; 0x19ac <__divsf3_pse+0x78>
    19ba:	88 0f       	add	r24, r24
    19bc:	91 1d       	adc	r25, r1
    19be:	96 95       	lsr	r25
    19c0:	87 95       	ror	r24
    19c2:	97 f9       	bld	r25, 7
    19c4:	08 95       	ret
    19c6:	e1 e0       	ldi	r30, 0x01	; 1
    19c8:	66 0f       	add	r22, r22
    19ca:	77 1f       	adc	r23, r23
    19cc:	88 1f       	adc	r24, r24
    19ce:	bb 1f       	adc	r27, r27
    19d0:	62 17       	cp	r22, r18
    19d2:	73 07       	cpc	r23, r19
    19d4:	84 07       	cpc	r24, r20
    19d6:	ba 07       	cpc	r27, r26
    19d8:	20 f0       	brcs	.+8      	; 0x19e2 <__divsf3_pse+0xae>
    19da:	62 1b       	sub	r22, r18
    19dc:	73 0b       	sbc	r23, r19
    19de:	84 0b       	sbc	r24, r20
    19e0:	ba 0b       	sbc	r27, r26
    19e2:	ee 1f       	adc	r30, r30
    19e4:	88 f7       	brcc	.-30     	; 0x19c8 <__divsf3_pse+0x94>
    19e6:	e0 95       	com	r30
    19e8:	08 95       	ret

000019ea <__fixsfsi>:
    19ea:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__fixunssfsi>
    19ee:	68 94       	set
    19f0:	b1 11       	cpse	r27, r1
    19f2:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_szero>
    19f6:	08 95       	ret

000019f8 <__fixunssfsi>:
    19f8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__fp_splitA>
    19fc:	88 f0       	brcs	.+34     	; 0x1a20 <__fixunssfsi+0x28>
    19fe:	9f 57       	subi	r25, 0x7F	; 127
    1a00:	98 f0       	brcs	.+38     	; 0x1a28 <__fixunssfsi+0x30>
    1a02:	b9 2f       	mov	r27, r25
    1a04:	99 27       	eor	r25, r25
    1a06:	b7 51       	subi	r27, 0x17	; 23
    1a08:	b0 f0       	brcs	.+44     	; 0x1a36 <__fixunssfsi+0x3e>
    1a0a:	e1 f0       	breq	.+56     	; 0x1a44 <__fixunssfsi+0x4c>
    1a0c:	66 0f       	add	r22, r22
    1a0e:	77 1f       	adc	r23, r23
    1a10:	88 1f       	adc	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	1a f0       	brmi	.+6      	; 0x1a1c <__fixunssfsi+0x24>
    1a16:	ba 95       	dec	r27
    1a18:	c9 f7       	brne	.-14     	; 0x1a0c <__fixunssfsi+0x14>
    1a1a:	14 c0       	rjmp	.+40     	; 0x1a44 <__fixunssfsi+0x4c>
    1a1c:	b1 30       	cpi	r27, 0x01	; 1
    1a1e:	91 f0       	breq	.+36     	; 0x1a44 <__fixunssfsi+0x4c>
    1a20:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_zero>
    1a24:	b1 e0       	ldi	r27, 0x01	; 1
    1a26:	08 95       	ret
    1a28:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__fp_zero>
    1a2c:	67 2f       	mov	r22, r23
    1a2e:	78 2f       	mov	r23, r24
    1a30:	88 27       	eor	r24, r24
    1a32:	b8 5f       	subi	r27, 0xF8	; 248
    1a34:	39 f0       	breq	.+14     	; 0x1a44 <__fixunssfsi+0x4c>
    1a36:	b9 3f       	cpi	r27, 0xF9	; 249
    1a38:	cc f3       	brlt	.-14     	; 0x1a2c <__fixunssfsi+0x34>
    1a3a:	86 95       	lsr	r24
    1a3c:	77 95       	ror	r23
    1a3e:	67 95       	ror	r22
    1a40:	b3 95       	inc	r27
    1a42:	d9 f7       	brne	.-10     	; 0x1a3a <__fixunssfsi+0x42>
    1a44:	3e f4       	brtc	.+14     	; 0x1a54 <__fixunssfsi+0x5c>
    1a46:	90 95       	com	r25
    1a48:	80 95       	com	r24
    1a4a:	70 95       	com	r23
    1a4c:	61 95       	neg	r22
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a50:	8f 4f       	sbci	r24, 0xFF	; 255
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	08 95       	ret

00001a56 <__floatunsisf>:
    1a56:	e8 94       	clt
    1a58:	09 c0       	rjmp	.+18     	; 0x1a6c <__floatsisf+0x12>

00001a5a <__floatsisf>:
    1a5a:	97 fb       	bst	r25, 7
    1a5c:	3e f4       	brtc	.+14     	; 0x1a6c <__floatsisf+0x12>
    1a5e:	90 95       	com	r25
    1a60:	80 95       	com	r24
    1a62:	70 95       	com	r23
    1a64:	61 95       	neg	r22
    1a66:	7f 4f       	sbci	r23, 0xFF	; 255
    1a68:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6c:	99 23       	and	r25, r25
    1a6e:	a9 f0       	breq	.+42     	; 0x1a9a <__floatsisf+0x40>
    1a70:	f9 2f       	mov	r31, r25
    1a72:	96 e9       	ldi	r25, 0x96	; 150
    1a74:	bb 27       	eor	r27, r27
    1a76:	93 95       	inc	r25
    1a78:	f6 95       	lsr	r31
    1a7a:	87 95       	ror	r24
    1a7c:	77 95       	ror	r23
    1a7e:	67 95       	ror	r22
    1a80:	b7 95       	ror	r27
    1a82:	f1 11       	cpse	r31, r1
    1a84:	f8 cf       	rjmp	.-16     	; 0x1a76 <__floatsisf+0x1c>
    1a86:	fa f4       	brpl	.+62     	; 0x1ac6 <__floatsisf+0x6c>
    1a88:	bb 0f       	add	r27, r27
    1a8a:	11 f4       	brne	.+4      	; 0x1a90 <__floatsisf+0x36>
    1a8c:	60 ff       	sbrs	r22, 0
    1a8e:	1b c0       	rjmp	.+54     	; 0x1ac6 <__floatsisf+0x6c>
    1a90:	6f 5f       	subi	r22, 0xFF	; 255
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	8f 4f       	sbci	r24, 0xFF	; 255
    1a96:	9f 4f       	sbci	r25, 0xFF	; 255
    1a98:	16 c0       	rjmp	.+44     	; 0x1ac6 <__floatsisf+0x6c>
    1a9a:	88 23       	and	r24, r24
    1a9c:	11 f0       	breq	.+4      	; 0x1aa2 <__floatsisf+0x48>
    1a9e:	96 e9       	ldi	r25, 0x96	; 150
    1aa0:	11 c0       	rjmp	.+34     	; 0x1ac4 <__floatsisf+0x6a>
    1aa2:	77 23       	and	r23, r23
    1aa4:	21 f0       	breq	.+8      	; 0x1aae <__floatsisf+0x54>
    1aa6:	9e e8       	ldi	r25, 0x8E	; 142
    1aa8:	87 2f       	mov	r24, r23
    1aaa:	76 2f       	mov	r23, r22
    1aac:	05 c0       	rjmp	.+10     	; 0x1ab8 <__floatsisf+0x5e>
    1aae:	66 23       	and	r22, r22
    1ab0:	71 f0       	breq	.+28     	; 0x1ace <__floatsisf+0x74>
    1ab2:	96 e8       	ldi	r25, 0x86	; 134
    1ab4:	86 2f       	mov	r24, r22
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	2a f0       	brmi	.+10     	; 0x1ac6 <__floatsisf+0x6c>
    1abc:	9a 95       	dec	r25
    1abe:	66 0f       	add	r22, r22
    1ac0:	77 1f       	adc	r23, r23
    1ac2:	88 1f       	adc	r24, r24
    1ac4:	da f7       	brpl	.-10     	; 0x1abc <__floatsisf+0x62>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	96 95       	lsr	r25
    1aca:	87 95       	ror	r24
    1acc:	97 f9       	bld	r25, 7
    1ace:	08 95       	ret

00001ad0 <__fp_inf>:
    1ad0:	97 f9       	bld	r25, 7
    1ad2:	9f 67       	ori	r25, 0x7F	; 127
    1ad4:	80 e8       	ldi	r24, 0x80	; 128
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	08 95       	ret

00001adc <__fp_nan>:
    1adc:	9f ef       	ldi	r25, 0xFF	; 255
    1ade:	80 ec       	ldi	r24, 0xC0	; 192
    1ae0:	08 95       	ret

00001ae2 <__fp_powser>:
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	1f 93       	push	r17
    1ae8:	0f 93       	push	r16
    1aea:	ff 92       	push	r15
    1aec:	ef 92       	push	r14
    1aee:	df 92       	push	r13
    1af0:	7b 01       	movw	r14, r22
    1af2:	8c 01       	movw	r16, r24
    1af4:	68 94       	set
    1af6:	06 c0       	rjmp	.+12     	; 0x1b04 <__fp_powser+0x22>
    1af8:	da 2e       	mov	r13, r26
    1afa:	ef 01       	movw	r28, r30
    1afc:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__mulsf3x>
    1b00:	fe 01       	movw	r30, r28
    1b02:	e8 94       	clt
    1b04:	a5 91       	lpm	r26, Z+
    1b06:	25 91       	lpm	r18, Z+
    1b08:	35 91       	lpm	r19, Z+
    1b0a:	45 91       	lpm	r20, Z+
    1b0c:	55 91       	lpm	r21, Z+
    1b0e:	a6 f3       	brts	.-24     	; 0x1af8 <__fp_powser+0x16>
    1b10:	ef 01       	movw	r28, r30
    1b12:	0e 94 b7 0b 	call	0x176e	; 0x176e <__addsf3x>
    1b16:	fe 01       	movw	r30, r28
    1b18:	97 01       	movw	r18, r14
    1b1a:	a8 01       	movw	r20, r16
    1b1c:	da 94       	dec	r13
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <__fp_powser+0x18>
    1b20:	df 90       	pop	r13
    1b22:	ef 90       	pop	r14
    1b24:	ff 90       	pop	r15
    1b26:	0f 91       	pop	r16
    1b28:	1f 91       	pop	r17
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <__fp_pscA>:
    1b30:	00 24       	eor	r0, r0
    1b32:	0a 94       	dec	r0
    1b34:	16 16       	cp	r1, r22
    1b36:	17 06       	cpc	r1, r23
    1b38:	18 06       	cpc	r1, r24
    1b3a:	09 06       	cpc	r0, r25
    1b3c:	08 95       	ret

00001b3e <__fp_pscB>:
    1b3e:	00 24       	eor	r0, r0
    1b40:	0a 94       	dec	r0
    1b42:	12 16       	cp	r1, r18
    1b44:	13 06       	cpc	r1, r19
    1b46:	14 06       	cpc	r1, r20
    1b48:	05 06       	cpc	r0, r21
    1b4a:	08 95       	ret
    1b4c:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_nan>

00001b50 <__fp_rempio2>:
    1b50:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__fp_splitA>
    1b54:	d8 f3       	brcs	.-10     	; 0x1b4c <__fp_pscB+0xe>
    1b56:	e8 94       	clt
    1b58:	e0 e0       	ldi	r30, 0x00	; 0
    1b5a:	bb 27       	eor	r27, r27
    1b5c:	9f 57       	subi	r25, 0x7F	; 127
    1b5e:	f0 f0       	brcs	.+60     	; 0x1b9c <__fp_rempio2+0x4c>
    1b60:	2a ed       	ldi	r18, 0xDA	; 218
    1b62:	3f e0       	ldi	r19, 0x0F	; 15
    1b64:	49 ec       	ldi	r20, 0xC9	; 201
    1b66:	06 c0       	rjmp	.+12     	; 0x1b74 <__fp_rempio2+0x24>
    1b68:	ee 0f       	add	r30, r30
    1b6a:	bb 0f       	add	r27, r27
    1b6c:	66 1f       	adc	r22, r22
    1b6e:	77 1f       	adc	r23, r23
    1b70:	88 1f       	adc	r24, r24
    1b72:	28 f0       	brcs	.+10     	; 0x1b7e <__fp_rempio2+0x2e>
    1b74:	b2 3a       	cpi	r27, 0xA2	; 162
    1b76:	62 07       	cpc	r22, r18
    1b78:	73 07       	cpc	r23, r19
    1b7a:	84 07       	cpc	r24, r20
    1b7c:	28 f0       	brcs	.+10     	; 0x1b88 <__fp_rempio2+0x38>
    1b7e:	b2 5a       	subi	r27, 0xA2	; 162
    1b80:	62 0b       	sbc	r22, r18
    1b82:	73 0b       	sbc	r23, r19
    1b84:	84 0b       	sbc	r24, r20
    1b86:	e3 95       	inc	r30
    1b88:	9a 95       	dec	r25
    1b8a:	72 f7       	brpl	.-36     	; 0x1b68 <__fp_rempio2+0x18>
    1b8c:	80 38       	cpi	r24, 0x80	; 128
    1b8e:	30 f4       	brcc	.+12     	; 0x1b9c <__fp_rempio2+0x4c>
    1b90:	9a 95       	dec	r25
    1b92:	bb 0f       	add	r27, r27
    1b94:	66 1f       	adc	r22, r22
    1b96:	77 1f       	adc	r23, r23
    1b98:	88 1f       	adc	r24, r24
    1b9a:	d2 f7       	brpl	.-12     	; 0x1b90 <__fp_rempio2+0x40>
    1b9c:	90 48       	sbci	r25, 0x80	; 128
    1b9e:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__fp_mpack_finite>

00001ba2 <__fp_round>:
    1ba2:	09 2e       	mov	r0, r25
    1ba4:	03 94       	inc	r0
    1ba6:	00 0c       	add	r0, r0
    1ba8:	11 f4       	brne	.+4      	; 0x1bae <__fp_round+0xc>
    1baa:	88 23       	and	r24, r24
    1bac:	52 f0       	brmi	.+20     	; 0x1bc2 <__fp_round+0x20>
    1bae:	bb 0f       	add	r27, r27
    1bb0:	40 f4       	brcc	.+16     	; 0x1bc2 <__fp_round+0x20>
    1bb2:	bf 2b       	or	r27, r31
    1bb4:	11 f4       	brne	.+4      	; 0x1bba <__fp_round+0x18>
    1bb6:	60 ff       	sbrs	r22, 0
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <__fp_round+0x20>
    1bba:	6f 5f       	subi	r22, 0xFF	; 255
    1bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc2:	08 95       	ret

00001bc4 <__fp_sinus>:
    1bc4:	ef 93       	push	r30
    1bc6:	e0 ff       	sbrs	r30, 0
    1bc8:	07 c0       	rjmp	.+14     	; 0x1bd8 <__fp_sinus+0x14>
    1bca:	a2 ea       	ldi	r26, 0xA2	; 162
    1bcc:	2a ed       	ldi	r18, 0xDA	; 218
    1bce:	3f e0       	ldi	r19, 0x0F	; 15
    1bd0:	49 ec       	ldi	r20, 0xC9	; 201
    1bd2:	5f eb       	ldi	r21, 0xBF	; 191
    1bd4:	0e 94 b7 0b 	call	0x176e	; 0x176e <__addsf3x>
    1bd8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fp_round>
    1bdc:	0f 90       	pop	r0
    1bde:	03 94       	inc	r0
    1be0:	01 fc       	sbrc	r0, 1
    1be2:	90 58       	subi	r25, 0x80	; 128
    1be4:	e9 ed       	ldi	r30, 0xD9	; 217
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__fp_powsodd>

00001bec <__fp_split3>:
    1bec:	57 fd       	sbrc	r21, 7
    1bee:	90 58       	subi	r25, 0x80	; 128
    1bf0:	44 0f       	add	r20, r20
    1bf2:	55 1f       	adc	r21, r21
    1bf4:	59 f0       	breq	.+22     	; 0x1c0c <__fp_splitA+0x10>
    1bf6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bf8:	71 f0       	breq	.+28     	; 0x1c16 <__fp_splitA+0x1a>
    1bfa:	47 95       	ror	r20

00001bfc <__fp_splitA>:
    1bfc:	88 0f       	add	r24, r24
    1bfe:	97 fb       	bst	r25, 7
    1c00:	99 1f       	adc	r25, r25
    1c02:	61 f0       	breq	.+24     	; 0x1c1c <__fp_splitA+0x20>
    1c04:	9f 3f       	cpi	r25, 0xFF	; 255
    1c06:	79 f0       	breq	.+30     	; 0x1c26 <__fp_splitA+0x2a>
    1c08:	87 95       	ror	r24
    1c0a:	08 95       	ret
    1c0c:	12 16       	cp	r1, r18
    1c0e:	13 06       	cpc	r1, r19
    1c10:	14 06       	cpc	r1, r20
    1c12:	55 1f       	adc	r21, r21
    1c14:	f2 cf       	rjmp	.-28     	; 0x1bfa <__fp_split3+0xe>
    1c16:	46 95       	lsr	r20
    1c18:	f1 df       	rcall	.-30     	; 0x1bfc <__fp_splitA>
    1c1a:	08 c0       	rjmp	.+16     	; 0x1c2c <__fp_splitA+0x30>
    1c1c:	16 16       	cp	r1, r22
    1c1e:	17 06       	cpc	r1, r23
    1c20:	18 06       	cpc	r1, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	f1 cf       	rjmp	.-30     	; 0x1c08 <__fp_splitA+0xc>
    1c26:	86 95       	lsr	r24
    1c28:	71 05       	cpc	r23, r1
    1c2a:	61 05       	cpc	r22, r1
    1c2c:	08 94       	sec
    1c2e:	08 95       	ret

00001c30 <__fp_zero>:
    1c30:	e8 94       	clt

00001c32 <__fp_szero>:
    1c32:	bb 27       	eor	r27, r27
    1c34:	66 27       	eor	r22, r22
    1c36:	77 27       	eor	r23, r23
    1c38:	cb 01       	movw	r24, r22
    1c3a:	97 f9       	bld	r25, 7
    1c3c:	08 95       	ret

00001c3e <__gesf2>:
    1c3e:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__fp_cmp>
    1c42:	08 f4       	brcc	.+2      	; 0x1c46 <__gesf2+0x8>
    1c44:	8f ef       	ldi	r24, 0xFF	; 255
    1c46:	08 95       	ret

00001c48 <inverse>:
    1c48:	9b 01       	movw	r18, r22
    1c4a:	ac 01       	movw	r20, r24
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	80 e8       	ldi	r24, 0x80	; 128
    1c52:	9f e3       	ldi	r25, 0x3F	; 63
    1c54:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <__divsf3>

00001c58 <__mulsf3>:
    1c58:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__mulsf3x>
    1c5c:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_round>
    1c60:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__fp_pscA>
    1c64:	38 f0       	brcs	.+14     	; 0x1c74 <__mulsf3+0x1c>
    1c66:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__fp_pscB>
    1c6a:	20 f0       	brcs	.+8      	; 0x1c74 <__mulsf3+0x1c>
    1c6c:	95 23       	and	r25, r21
    1c6e:	11 f0       	breq	.+4      	; 0x1c74 <__mulsf3+0x1c>
    1c70:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__fp_inf>
    1c74:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_nan>
    1c78:	11 24       	eor	r1, r1
    1c7a:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_szero>

00001c7e <__mulsf3x>:
    1c7e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fp_split3>
    1c82:	70 f3       	brcs	.-36     	; 0x1c60 <__mulsf3+0x8>

00001c84 <__mulsf3_pse>:
    1c84:	95 9f       	mul	r25, r21
    1c86:	c1 f3       	breq	.-16     	; 0x1c78 <__mulsf3+0x20>
    1c88:	95 0f       	add	r25, r21
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	55 1f       	adc	r21, r21
    1c8e:	62 9f       	mul	r22, r18
    1c90:	f0 01       	movw	r30, r0
    1c92:	72 9f       	mul	r23, r18
    1c94:	bb 27       	eor	r27, r27
    1c96:	f0 0d       	add	r31, r0
    1c98:	b1 1d       	adc	r27, r1
    1c9a:	63 9f       	mul	r22, r19
    1c9c:	aa 27       	eor	r26, r26
    1c9e:	f0 0d       	add	r31, r0
    1ca0:	b1 1d       	adc	r27, r1
    1ca2:	aa 1f       	adc	r26, r26
    1ca4:	64 9f       	mul	r22, r20
    1ca6:	66 27       	eor	r22, r22
    1ca8:	b0 0d       	add	r27, r0
    1caa:	a1 1d       	adc	r26, r1
    1cac:	66 1f       	adc	r22, r22
    1cae:	82 9f       	mul	r24, r18
    1cb0:	22 27       	eor	r18, r18
    1cb2:	b0 0d       	add	r27, r0
    1cb4:	a1 1d       	adc	r26, r1
    1cb6:	62 1f       	adc	r22, r18
    1cb8:	73 9f       	mul	r23, r19
    1cba:	b0 0d       	add	r27, r0
    1cbc:	a1 1d       	adc	r26, r1
    1cbe:	62 1f       	adc	r22, r18
    1cc0:	83 9f       	mul	r24, r19
    1cc2:	a0 0d       	add	r26, r0
    1cc4:	61 1d       	adc	r22, r1
    1cc6:	22 1f       	adc	r18, r18
    1cc8:	74 9f       	mul	r23, r20
    1cca:	33 27       	eor	r19, r19
    1ccc:	a0 0d       	add	r26, r0
    1cce:	61 1d       	adc	r22, r1
    1cd0:	23 1f       	adc	r18, r19
    1cd2:	84 9f       	mul	r24, r20
    1cd4:	60 0d       	add	r22, r0
    1cd6:	21 1d       	adc	r18, r1
    1cd8:	82 2f       	mov	r24, r18
    1cda:	76 2f       	mov	r23, r22
    1cdc:	6a 2f       	mov	r22, r26
    1cde:	11 24       	eor	r1, r1
    1ce0:	9f 57       	subi	r25, 0x7F	; 127
    1ce2:	50 40       	sbci	r21, 0x00	; 0
    1ce4:	9a f0       	brmi	.+38     	; 0x1d0c <__mulsf3_pse+0x88>
    1ce6:	f1 f0       	breq	.+60     	; 0x1d24 <__mulsf3_pse+0xa0>
    1ce8:	88 23       	and	r24, r24
    1cea:	4a f0       	brmi	.+18     	; 0x1cfe <__mulsf3_pse+0x7a>
    1cec:	ee 0f       	add	r30, r30
    1cee:	ff 1f       	adc	r31, r31
    1cf0:	bb 1f       	adc	r27, r27
    1cf2:	66 1f       	adc	r22, r22
    1cf4:	77 1f       	adc	r23, r23
    1cf6:	88 1f       	adc	r24, r24
    1cf8:	91 50       	subi	r25, 0x01	; 1
    1cfa:	50 40       	sbci	r21, 0x00	; 0
    1cfc:	a9 f7       	brne	.-22     	; 0x1ce8 <__mulsf3_pse+0x64>
    1cfe:	9e 3f       	cpi	r25, 0xFE	; 254
    1d00:	51 05       	cpc	r21, r1
    1d02:	80 f0       	brcs	.+32     	; 0x1d24 <__mulsf3_pse+0xa0>
    1d04:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__fp_inf>
    1d08:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_szero>
    1d0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d0e:	e4 f3       	brlt	.-8      	; 0x1d08 <__mulsf3_pse+0x84>
    1d10:	98 3e       	cpi	r25, 0xE8	; 232
    1d12:	d4 f3       	brlt	.-12     	; 0x1d08 <__mulsf3_pse+0x84>
    1d14:	86 95       	lsr	r24
    1d16:	77 95       	ror	r23
    1d18:	67 95       	ror	r22
    1d1a:	b7 95       	ror	r27
    1d1c:	f7 95       	ror	r31
    1d1e:	e7 95       	ror	r30
    1d20:	9f 5f       	subi	r25, 0xFF	; 255
    1d22:	c1 f7       	brne	.-16     	; 0x1d14 <__mulsf3_pse+0x90>
    1d24:	fe 2b       	or	r31, r30
    1d26:	88 0f       	add	r24, r24
    1d28:	91 1d       	adc	r25, r1
    1d2a:	96 95       	lsr	r25
    1d2c:	87 95       	ror	r24
    1d2e:	97 f9       	bld	r25, 7
    1d30:	08 95       	ret

00001d32 <sin>:
    1d32:	9f 93       	push	r25
    1d34:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__fp_rempio2>
    1d38:	0f 90       	pop	r0
    1d3a:	07 fc       	sbrc	r0, 7
    1d3c:	ee 5f       	subi	r30, 0xFE	; 254
    1d3e:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__fp_sinus>
    1d42:	19 f4       	brne	.+6      	; 0x1d4a <sin+0x18>
    1d44:	16 f4       	brtc	.+4      	; 0x1d4a <sin+0x18>
    1d46:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_nan>
    1d4a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__fp_mpack>

00001d4e <sqrt>:
    1d4e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__fp_splitA>
    1d52:	b8 f3       	brcs	.-18     	; 0x1d42 <sin+0x10>
    1d54:	99 23       	and	r25, r25
    1d56:	c9 f3       	breq	.-14     	; 0x1d4a <sin+0x18>
    1d58:	b6 f3       	brts	.-20     	; 0x1d46 <sin+0x14>
    1d5a:	9f 57       	subi	r25, 0x7F	; 127
    1d5c:	55 0b       	sbc	r21, r21
    1d5e:	87 ff       	sbrs	r24, 7
    1d60:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__fp_norm2>
    1d64:	00 24       	eor	r0, r0
    1d66:	a0 e6       	ldi	r26, 0x60	; 96
    1d68:	40 ea       	ldi	r20, 0xA0	; 160
    1d6a:	90 01       	movw	r18, r0
    1d6c:	80 58       	subi	r24, 0x80	; 128
    1d6e:	56 95       	lsr	r21
    1d70:	97 95       	ror	r25
    1d72:	28 f4       	brcc	.+10     	; 0x1d7e <sqrt+0x30>
    1d74:	80 5c       	subi	r24, 0xC0	; 192
    1d76:	66 0f       	add	r22, r22
    1d78:	77 1f       	adc	r23, r23
    1d7a:	88 1f       	adc	r24, r24
    1d7c:	20 f0       	brcs	.+8      	; 0x1d86 <sqrt+0x38>
    1d7e:	26 17       	cp	r18, r22
    1d80:	37 07       	cpc	r19, r23
    1d82:	48 07       	cpc	r20, r24
    1d84:	30 f4       	brcc	.+12     	; 0x1d92 <sqrt+0x44>
    1d86:	62 1b       	sub	r22, r18
    1d88:	73 0b       	sbc	r23, r19
    1d8a:	84 0b       	sbc	r24, r20
    1d8c:	20 29       	or	r18, r0
    1d8e:	31 29       	or	r19, r1
    1d90:	4a 2b       	or	r20, r26
    1d92:	a6 95       	lsr	r26
    1d94:	17 94       	ror	r1
    1d96:	07 94       	ror	r0
    1d98:	20 25       	eor	r18, r0
    1d9a:	31 25       	eor	r19, r1
    1d9c:	4a 27       	eor	r20, r26
    1d9e:	58 f7       	brcc	.-42     	; 0x1d76 <sqrt+0x28>
    1da0:	66 0f       	add	r22, r22
    1da2:	77 1f       	adc	r23, r23
    1da4:	88 1f       	adc	r24, r24
    1da6:	20 f0       	brcs	.+8      	; 0x1db0 <sqrt+0x62>
    1da8:	26 17       	cp	r18, r22
    1daa:	37 07       	cpc	r19, r23
    1dac:	48 07       	cpc	r20, r24
    1dae:	30 f4       	brcc	.+12     	; 0x1dbc <sqrt+0x6e>
    1db0:	62 0b       	sbc	r22, r18
    1db2:	73 0b       	sbc	r23, r19
    1db4:	84 0b       	sbc	r24, r20
    1db6:	20 0d       	add	r18, r0
    1db8:	31 1d       	adc	r19, r1
    1dba:	41 1d       	adc	r20, r1
    1dbc:	a0 95       	com	r26
    1dbe:	81 f7       	brne	.-32     	; 0x1da0 <sqrt+0x52>
    1dc0:	b9 01       	movw	r22, r18
    1dc2:	84 2f       	mov	r24, r20
    1dc4:	91 58       	subi	r25, 0x81	; 129
    1dc6:	88 0f       	add	r24, r24
    1dc8:	96 95       	lsr	r25
    1dca:	87 95       	ror	r24
    1dcc:	08 95       	ret

00001dce <square>:
    1dce:	9b 01       	movw	r18, r22
    1dd0:	ac 01       	movw	r20, r24
    1dd2:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__mulsf3>

00001dd6 <__fp_cmp>:
    1dd6:	99 0f       	add	r25, r25
    1dd8:	00 08       	sbc	r0, r0
    1dda:	55 0f       	add	r21, r21
    1ddc:	aa 0b       	sbc	r26, r26
    1dde:	e0 e8       	ldi	r30, 0x80	; 128
    1de0:	fe ef       	ldi	r31, 0xFE	; 254
    1de2:	16 16       	cp	r1, r22
    1de4:	17 06       	cpc	r1, r23
    1de6:	e8 07       	cpc	r30, r24
    1de8:	f9 07       	cpc	r31, r25
    1dea:	c0 f0       	brcs	.+48     	; 0x1e1c <__fp_cmp+0x46>
    1dec:	12 16       	cp	r1, r18
    1dee:	13 06       	cpc	r1, r19
    1df0:	e4 07       	cpc	r30, r20
    1df2:	f5 07       	cpc	r31, r21
    1df4:	98 f0       	brcs	.+38     	; 0x1e1c <__fp_cmp+0x46>
    1df6:	62 1b       	sub	r22, r18
    1df8:	73 0b       	sbc	r23, r19
    1dfa:	84 0b       	sbc	r24, r20
    1dfc:	95 0b       	sbc	r25, r21
    1dfe:	39 f4       	brne	.+14     	; 0x1e0e <__fp_cmp+0x38>
    1e00:	0a 26       	eor	r0, r26
    1e02:	61 f0       	breq	.+24     	; 0x1e1c <__fp_cmp+0x46>
    1e04:	23 2b       	or	r18, r19
    1e06:	24 2b       	or	r18, r20
    1e08:	25 2b       	or	r18, r21
    1e0a:	21 f4       	brne	.+8      	; 0x1e14 <__fp_cmp+0x3e>
    1e0c:	08 95       	ret
    1e0e:	0a 26       	eor	r0, r26
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <__fp_cmp+0x3e>
    1e12:	a1 40       	sbci	r26, 0x01	; 1
    1e14:	a6 95       	lsr	r26
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	81 1d       	adc	r24, r1
    1e1a:	81 1d       	adc	r24, r1
    1e1c:	08 95       	ret

00001e1e <__fp_mpack>:
    1e1e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e20:	31 f0       	breq	.+12     	; 0x1e2e <__fp_mpack_finite+0xc>

00001e22 <__fp_mpack_finite>:
    1e22:	91 50       	subi	r25, 0x01	; 1
    1e24:	20 f4       	brcc	.+8      	; 0x1e2e <__fp_mpack_finite+0xc>
    1e26:	87 95       	ror	r24
    1e28:	77 95       	ror	r23
    1e2a:	67 95       	ror	r22
    1e2c:	b7 95       	ror	r27
    1e2e:	88 0f       	add	r24, r24
    1e30:	91 1d       	adc	r25, r1
    1e32:	96 95       	lsr	r25
    1e34:	87 95       	ror	r24
    1e36:	97 f9       	bld	r25, 7
    1e38:	08 95       	ret

00001e3a <__fp_norm2>:
    1e3a:	91 50       	subi	r25, 0x01	; 1
    1e3c:	50 40       	sbci	r21, 0x00	; 0
    1e3e:	66 0f       	add	r22, r22
    1e40:	77 1f       	adc	r23, r23
    1e42:	88 1f       	adc	r24, r24
    1e44:	d2 f7       	brpl	.-12     	; 0x1e3a <__fp_norm2>
    1e46:	08 95       	ret

00001e48 <__fp_powsodd>:
    1e48:	9f 93       	push	r25
    1e4a:	8f 93       	push	r24
    1e4c:	7f 93       	push	r23
    1e4e:	6f 93       	push	r22
    1e50:	ff 93       	push	r31
    1e52:	ef 93       	push	r30
    1e54:	9b 01       	movw	r18, r22
    1e56:	ac 01       	movw	r20, r24
    1e58:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
    1e5c:	ef 91       	pop	r30
    1e5e:	ff 91       	pop	r31
    1e60:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__fp_powser>
    1e64:	2f 91       	pop	r18
    1e66:	3f 91       	pop	r19
    1e68:	4f 91       	pop	r20
    1e6a:	5f 91       	pop	r21
    1e6c:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__mulsf3>

00001e70 <__itoa_ncheck>:
    1e70:	bb 27       	eor	r27, r27
    1e72:	4a 30       	cpi	r20, 0x0A	; 10
    1e74:	31 f4       	brne	.+12     	; 0x1e82 <__itoa_ncheck+0x12>
    1e76:	99 23       	and	r25, r25
    1e78:	22 f4       	brpl	.+8      	; 0x1e82 <__itoa_ncheck+0x12>
    1e7a:	bd e2       	ldi	r27, 0x2D	; 45
    1e7c:	90 95       	com	r25
    1e7e:	81 95       	neg	r24
    1e80:	9f 4f       	sbci	r25, 0xFF	; 255
    1e82:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__utoa_common>

00001e86 <__utoa_ncheck>:
    1e86:	bb 27       	eor	r27, r27

00001e88 <__utoa_common>:
    1e88:	fb 01       	movw	r30, r22
    1e8a:	55 27       	eor	r21, r21
    1e8c:	aa 27       	eor	r26, r26
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	aa 1f       	adc	r26, r26
    1e94:	a4 17       	cp	r26, r20
    1e96:	10 f0       	brcs	.+4      	; 0x1e9c <__utoa_common+0x14>
    1e98:	a4 1b       	sub	r26, r20
    1e9a:	83 95       	inc	r24
    1e9c:	50 51       	subi	r21, 0x10	; 16
    1e9e:	b9 f7       	brne	.-18     	; 0x1e8e <__utoa_common+0x6>
    1ea0:	a0 5d       	subi	r26, 0xD0	; 208
    1ea2:	aa 33       	cpi	r26, 0x3A	; 58
    1ea4:	08 f0       	brcs	.+2      	; 0x1ea8 <__utoa_common+0x20>
    1ea6:	a9 5d       	subi	r26, 0xD9	; 217
    1ea8:	a1 93       	st	Z+, r26
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	79 f7       	brne	.-34     	; 0x1e8c <__utoa_common+0x4>
    1eae:	b1 11       	cpse	r27, r1
    1eb0:	b1 93       	st	Z+, r27
    1eb2:	11 92       	st	Z+, r1
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	0c 94 5d 0f 	jmp	0x1eba	; 0x1eba <strrev>

00001eba <strrev>:
    1eba:	dc 01       	movw	r26, r24
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	67 2f       	mov	r22, r23
    1ec0:	71 91       	ld	r23, Z+
    1ec2:	77 23       	and	r23, r23
    1ec4:	e1 f7       	brne	.-8      	; 0x1ebe <strrev+0x4>
    1ec6:	32 97       	sbiw	r30, 0x02	; 2
    1ec8:	04 c0       	rjmp	.+8      	; 0x1ed2 <strrev+0x18>
    1eca:	7c 91       	ld	r23, X
    1ecc:	6d 93       	st	X+, r22
    1ece:	70 83       	st	Z, r23
    1ed0:	62 91       	ld	r22, -Z
    1ed2:	ae 17       	cp	r26, r30
    1ed4:	bf 07       	cpc	r27, r31
    1ed6:	c8 f3       	brcs	.-14     	; 0x1eca <strrev+0x10>
    1ed8:	08 95       	ret

00001eda <_exit>:
    1eda:	f8 94       	cli

00001edc <__stop_program>:
    1edc:	ff cf       	rjmp	.-2      	; 0x1edc <__stop_program>
