
LocalizationTesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00001ca6  00001d3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ca6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080010e  0080010e  00001d48  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023e4  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000927  00000000  00000000  000043cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c93  00000000  00000000  00004cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000610  00000000  00000000  00005988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ba  00000000  00000000  00005f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c4c  00000000  00000000  00006852  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000949e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__ctors_end>
       4:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
       8:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
       c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      10:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      14:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      18:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      1c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      20:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      24:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      28:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__vector_10>
      2c:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__vector_11>
      30:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      34:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      38:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      3c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      40:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      44:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      48:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      4c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      50:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      54:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      58:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      5c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      60:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      64:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      68:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      6c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      70:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      74:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      78:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      7c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      80:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      84:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      88:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      8c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      90:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      94:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      98:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      9c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      a0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      a4:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      a8:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__trampolines_end>:
      f8:	0a 00       	.word	0x000a	; ????

000000fa <__c.2021>:
      fa:	20 00                                                .

000000fc <__c.2019>:
      fc:	20 00                                                .

000000fe <descriptor_list>:
      fe:	00 01 00 00 95 01 12 00 02 00 00 52 01 43 00 03     ...........R.C..
     10e:	00 00 4e 01 04 01 03 09 04 3a 01 12 02 03 09 04     ..N......:......
     11e:	32 01 06 03 03 09 04 28 01 08                       2......(..

00000128 <string3>:
     128:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000132 <string2>:
     132:	06 03 4d 00 32 00 00 00                             ..M.2...

0000013a <string1>:
     13a:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     14a:	65 00 00 00                                         e...

0000014e <string0>:
     14e:	04 03 09 04                                         ....

00000152 <config1_descriptor>:
     152:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     162:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     172:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     182:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     192:	40 00 00                                            @..

00000195 <device_descriptor>:
     195:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1a5:	03 01                                               ..

000001a7 <endpoint_config_table>:
     1a7:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001b2 <__ctors_end>:
     1b2:	11 24       	eor	r1, r1
     1b4:	1f be       	out	0x3f, r1	; 63
     1b6:	cf ef       	ldi	r28, 0xFF	; 255
     1b8:	da e0       	ldi	r29, 0x0A	; 10
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	cd bf       	out	0x3d, r28	; 61

000001be <__do_copy_data>:
     1be:	11 e0       	ldi	r17, 0x01	; 1
     1c0:	a0 e0       	ldi	r26, 0x00	; 0
     1c2:	b1 e0       	ldi	r27, 0x01	; 1
     1c4:	e6 ea       	ldi	r30, 0xA6	; 166
     1c6:	fc e1       	ldi	r31, 0x1C	; 28
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <__do_copy_data+0x10>
     1ca:	05 90       	lpm	r0, Z+
     1cc:	0d 92       	st	X+, r0
     1ce:	ae 30       	cpi	r26, 0x0E	; 14
     1d0:	b1 07       	cpc	r27, r17
     1d2:	d9 f7       	brne	.-10     	; 0x1ca <__do_copy_data+0xc>

000001d4 <__do_clear_bss>:
     1d4:	21 e0       	ldi	r18, 0x01	; 1
     1d6:	ae e0       	ldi	r26, 0x0E	; 14
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	01 c0       	rjmp	.+2      	; 0x1de <.do_clear_bss_start>

000001dc <.do_clear_bss_loop>:
     1dc:	1d 92       	st	X+, r1

000001de <.do_clear_bss_start>:
     1de:	a4 33       	cpi	r26, 0x34	; 52
     1e0:	b2 07       	cpc	r27, r18
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <.do_clear_bss_loop>
     1e4:	0e 94 64 05 	call	0xac8	; 0xac8 <main>
     1e8:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <_exit>

000001ec <__bad_interrupt>:
     1ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f0 <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     1f0:	83 30       	cpi	r24, 0x03	; 3
     1f2:	91 05       	cpc	r25, r1
     1f4:	01 f1       	breq	.+64     	; 0x236 <distIndex+0x46>
     1f6:	34 f4       	brge	.+12     	; 0x204 <distIndex+0x14>
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	91 05       	cpc	r25, r1
     1fc:	51 f0       	breq	.+20     	; 0x212 <distIndex+0x22>
     1fe:	02 97       	sbiw	r24, 0x02	; 2
     200:	89 f0       	breq	.+34     	; 0x224 <distIndex+0x34>
     202:	42 c0       	rjmp	.+132    	; 0x288 <distIndex+0x98>
     204:	85 30       	cpi	r24, 0x05	; 5
     206:	91 05       	cpc	r25, r1
     208:	51 f1       	breq	.+84     	; 0x25e <distIndex+0x6e>
     20a:	f4 f0       	brlt	.+60     	; 0x248 <distIndex+0x58>
     20c:	06 97       	sbiw	r24, 0x06	; 6
     20e:	91 f1       	breq	.+100    	; 0x274 <distIndex+0x84>
     210:	3b c0       	rjmp	.+118    	; 0x288 <distIndex+0x98>
	{
		case 1 : 
			pointsUsed[0] = 0;
     212:	ee e0       	ldi	r30, 0x0E	; 14
     214:	f1 e0       	ldi	r31, 0x01	; 1
     216:	11 82       	std	Z+1, r1	; 0x01
     218:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	93 83       	std	Z+3, r25	; 0x03
     220:	82 83       	std	Z+2, r24	; 0x02
			break;
     222:	32 c0       	rjmp	.+100    	; 0x288 <distIndex+0x98>
			
		case 2 : 
			pointsUsed[0] = 0;
     224:	ee e0       	ldi	r30, 0x0E	; 14
     226:	f1 e0       	ldi	r31, 0x01	; 1
     228:	11 82       	std	Z+1, r1	; 0x01
     22a:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     22c:	82 e0       	ldi	r24, 0x02	; 2
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	93 83       	std	Z+3, r25	; 0x03
     232:	82 83       	std	Z+2, r24	; 0x02
			break;
     234:	29 c0       	rjmp	.+82     	; 0x288 <distIndex+0x98>
			
		case 3 : 
			pointsUsed[0] = 0;
     236:	ee e0       	ldi	r30, 0x0E	; 14
     238:	f1 e0       	ldi	r31, 0x01	; 1
     23a:	11 82       	std	Z+1, r1	; 0x01
     23c:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	93 83       	std	Z+3, r25	; 0x03
     244:	82 83       	std	Z+2, r24	; 0x02
			break;
     246:	20 c0       	rjmp	.+64     	; 0x288 <distIndex+0x98>
			
		case 4 : 
			pointsUsed[0] = 1;
     248:	ee e0       	ldi	r30, 0x0E	; 14
     24a:	f1 e0       	ldi	r31, 0x01	; 1
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	91 83       	std	Z+1, r25	; 0x01
     252:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	93 83       	std	Z+3, r25	; 0x03
     25a:	82 83       	std	Z+2, r24	; 0x02
			break;
     25c:	15 c0       	rjmp	.+42     	; 0x288 <distIndex+0x98>
			
		case 5 : 
			pointsUsed[0] = 1;
     25e:	ee e0       	ldi	r30, 0x0E	; 14
     260:	f1 e0       	ldi	r31, 0x01	; 1
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	91 83       	std	Z+1, r25	; 0x01
     268:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     26a:	83 e0       	ldi	r24, 0x03	; 3
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	93 83       	std	Z+3, r25	; 0x03
     270:	82 83       	std	Z+2, r24	; 0x02
			break;
     272:	0a c0       	rjmp	.+20     	; 0x288 <distIndex+0x98>
			
		case 6 :
			pointsUsed[0] = 2;
     274:	ee e0       	ldi	r30, 0x0E	; 14
     276:	f1 e0       	ldi	r31, 0x01	; 1
     278:	82 e0       	ldi	r24, 0x02	; 2
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	91 83       	std	Z+1, r25	; 0x01
     27e:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	93 83       	std	Z+3, r25	; 0x03
     286:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     288:	8e e0       	ldi	r24, 0x0E	; 14
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	08 95       	ret

0000028e <orientationCalculationFour>:


void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom)
{
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	ec 01       	movw	r28, r24
     29c:	7a 01       	movw	r14, r20
     29e:	89 01       	movw	r16, r18
	//Find index of shortest length
	int indexMin = 0;
	int minVal = distVect[0];
     2a0:	e6 2f       	mov	r30, r22
     2a2:	f7 2f       	mov	r31, r23
     2a4:	21 91       	ld	r18, Z+
     2a6:	31 91       	ld	r19, Z+
	for (int i = 0; i < 6; i++){
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	70 e0       	ldi	r23, 0x00	; 0


void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <orientationCalculationFour+0x34>
	int minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     2b2:	a1 91       	ld	r26, Z+
     2b4:	b1 91       	ld	r27, Z+
     2b6:	a2 17       	cp	r26, r18
     2b8:	b3 07       	cpc	r27, r19
     2ba:	1c f4       	brge	.+6      	; 0x2c2 <orientationCalculationFour+0x34>
     2bc:	9d 01       	movw	r18, r26
void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	int minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     2be:	86 2f       	mov	r24, r22
     2c0:	97 2f       	mov	r25, r23
     2c2:	6f 5f       	subi	r22, 0xFF	; 255
     2c4:	7f 4f       	sbci	r23, 0xFF	; 255
     2c6:	66 30       	cpi	r22, 0x06	; 6
     2c8:	71 05       	cpc	r23, r1
     2ca:	99 f7       	brne	.-26     	; 0x2b2 <orientationCalculationFour+0x24>
	}
	
	//Find points used by shortest length
	
	int* pointsShort; 
	pointsShort = distIndex(indexMin);
     2cc:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <distIndex>
	
	if (pointsShort[0] == pointsLong[0]){
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 81       	ld	r18, Z
     2d4:	31 81       	ldd	r19, Z+1	; 0x01
     2d6:	48 81       	ld	r20, Y
     2d8:	59 81       	ldd	r21, Y+1	; 0x01
     2da:	24 17       	cp	r18, r20
     2dc:	35 07       	cpc	r19, r21
     2de:	49 f4       	brne	.+18     	; 0x2f2 <orientationCalculationFour+0x64>
		*top = pointsLong[0];
     2e0:	f7 01       	movw	r30, r14
     2e2:	31 83       	std	Z+1, r19	; 0x01
     2e4:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	9b 81       	ldd	r25, Y+3	; 0x03
     2ea:	f8 01       	movw	r30, r16
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	80 83       	st	Z, r24
     2f0:	25 c0       	rjmp	.+74     	; 0x33c <orientationCalculationFour+0xae>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     2f2:	6a 81       	ldd	r22, Y+2	; 0x02
     2f4:	7b 81       	ldd	r23, Y+3	; 0x03
     2f6:	26 17       	cp	r18, r22
     2f8:	37 07       	cpc	r19, r23
     2fa:	49 f4       	brne	.+18     	; 0x30e <orientationCalculationFour+0x80>
			*top = pointsLong[1];
     2fc:	f7 01       	movw	r30, r14
     2fe:	31 83       	std	Z+1, r19	; 0x01
     300:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     302:	88 81       	ld	r24, Y
     304:	99 81       	ldd	r25, Y+1	; 0x01
     306:	f8 01       	movw	r30, r16
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	80 83       	st	Z, r24
     30c:	17 c0       	rjmp	.+46     	; 0x33c <orientationCalculationFour+0xae>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     30e:	fc 01       	movw	r30, r24
     310:	82 81       	ldd	r24, Z+2	; 0x02
     312:	93 81       	ldd	r25, Z+3	; 0x03
     314:	48 17       	cp	r20, r24
     316:	59 07       	cpc	r21, r25
     318:	49 f4       	brne	.+18     	; 0x32c <orientationCalculationFour+0x9e>
				*top = pointsLong[0];
     31a:	f7 01       	movw	r30, r14
     31c:	51 83       	std	Z+1, r21	; 0x01
     31e:	40 83       	st	Z, r20
				*bottom = pointsLong[1];
     320:	8a 81       	ldd	r24, Y+2	; 0x02
     322:	9b 81       	ldd	r25, Y+3	; 0x03
     324:	f8 01       	movw	r30, r16
     326:	91 83       	std	Z+1, r25	; 0x01
     328:	80 83       	st	Z, r24
     32a:	08 c0       	rjmp	.+16     	; 0x33c <orientationCalculationFour+0xae>
			} else {
				*top = pointsLong[1];
     32c:	f7 01       	movw	r30, r14
     32e:	71 83       	std	Z+1, r23	; 0x01
     330:	60 83       	st	Z, r22
				*bottom = pointsLong[0];
     332:	88 81       	ld	r24, Y
     334:	99 81       	ldd	r25, Y+1	; 0x01
     336:	f8 01       	movw	r30, r16
     338:	91 83       	std	Z+1, r25	; 0x01
     33a:	80 83       	st	Z, r24
			}
		}
	}
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	ff 90       	pop	r15
     346:	ef 90       	pop	r14
     348:	08 95       	ret

0000034a <fourPointCalc>:
	
}


int* fourPointCalc(int pvect[4][2])
{
     34a:	2f 92       	push	r2
     34c:	3f 92       	push	r3
     34e:	4f 92       	push	r4
     350:	5f 92       	push	r5
     352:	6f 92       	push	r6
     354:	7f 92       	push	r7
     356:	8f 92       	push	r8
     358:	9f 92       	push	r9
     35a:	af 92       	push	r10
     35c:	bf 92       	push	r11
     35e:	cf 92       	push	r12
     360:	df 92       	push	r13
     362:	ef 92       	push	r14
     364:	ff 92       	push	r15
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	a4 97       	sbiw	r28, 0x24	; 36
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	8c 01       	movw	r16, r24
	static int centerFour[3];
	
	int dist01 = sqrt((pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     380:	dc 01       	movw	r26, r24
     382:	14 96       	adiw	r26, 0x04	; 4
     384:	2d 90       	ld	r2, X+
     386:	3c 90       	ld	r3, X
     388:	15 97       	sbiw	r26, 0x05	; 5
     38a:	cd 90       	ld	r12, X+
     38c:	dc 90       	ld	r13, X
     38e:	11 97       	sbiw	r26, 0x01	; 1
     390:	c1 01       	movw	r24, r2
     392:	8c 19       	sub	r24, r12
     394:	9d 09       	sbc	r25, r13
     396:	16 96       	adiw	r26, 0x06	; 6
     398:	ed 91       	ld	r30, X+
     39a:	fc 91       	ld	r31, X
     39c:	17 97       	sbiw	r26, 0x07	; 7
     39e:	fa 8b       	std	Y+18, r31	; 0x12
     3a0:	e9 8b       	std	Y+17, r30	; 0x11
     3a2:	12 96       	adiw	r26, 0x02	; 2
     3a4:	ed 90       	ld	r14, X+
     3a6:	fc 90       	ld	r15, X
     3a8:	13 97       	sbiw	r26, 0x03	; 3
     3aa:	9f 01       	movw	r18, r30
     3ac:	2e 19       	sub	r18, r14
     3ae:	3f 09       	sbc	r19, r15
     3b0:	88 9f       	mul	r24, r24
     3b2:	40 01       	movw	r8, r0
     3b4:	89 9f       	mul	r24, r25
     3b6:	90 0c       	add	r9, r0
     3b8:	90 0c       	add	r9, r0
     3ba:	11 24       	eor	r1, r1
     3bc:	22 9f       	mul	r18, r18
     3be:	c0 01       	movw	r24, r0
     3c0:	23 9f       	mul	r18, r19
     3c2:	90 0d       	add	r25, r0
     3c4:	90 0d       	add	r25, r0
     3c6:	11 24       	eor	r1, r1
     3c8:	88 0e       	add	r8, r24
     3ca:	99 1e       	adc	r9, r25
     3cc:	09 2c       	mov	r0, r9
     3ce:	00 0c       	add	r0, r0
     3d0:	aa 08       	sbc	r10, r10
     3d2:	bb 08       	sbc	r11, r11
     3d4:	c5 01       	movw	r24, r10
     3d6:	b4 01       	movw	r22, r8
     3d8:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__floatsisf>
     3dc:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <sqrt>
     3e0:	69 8f       	std	Y+25, r22	; 0x19
     3e2:	7a 8f       	std	Y+26, r23	; 0x1a
     3e4:	8b 8f       	std	Y+27, r24	; 0x1b
     3e6:	9c 8f       	std	Y+28, r25	; 0x1c
	int dist02 = sqrt((pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     3e8:	d8 01       	movw	r26, r16
     3ea:	18 96       	adiw	r26, 0x08	; 8
     3ec:	ad 90       	ld	r10, X+
     3ee:	bc 90       	ld	r11, X
     3f0:	19 97       	sbiw	r26, 0x09	; 9
     3f2:	c5 01       	movw	r24, r10
     3f4:	8c 19       	sub	r24, r12
     3f6:	9d 09       	sbc	r25, r13
     3f8:	1a 96       	adiw	r26, 0x0a	; 10
     3fa:	6d 90       	ld	r6, X+
     3fc:	7c 90       	ld	r7, X
     3fe:	1b 97       	sbiw	r26, 0x0b	; 11
     400:	93 01       	movw	r18, r6
     402:	2e 19       	sub	r18, r14
     404:	3f 09       	sbc	r19, r15
     406:	88 9f       	mul	r24, r24
     408:	40 01       	movw	r8, r0
     40a:	89 9f       	mul	r24, r25
     40c:	90 0c       	add	r9, r0
     40e:	90 0c       	add	r9, r0
     410:	11 24       	eor	r1, r1
     412:	22 9f       	mul	r18, r18
     414:	c0 01       	movw	r24, r0
     416:	23 9f       	mul	r18, r19
     418:	90 0d       	add	r25, r0
     41a:	90 0d       	add	r25, r0
     41c:	11 24       	eor	r1, r1
     41e:	88 0e       	add	r8, r24
     420:	99 1e       	adc	r9, r25
     422:	94 01       	movw	r18, r8
     424:	99 0c       	add	r9, r9
     426:	44 0b       	sbc	r20, r20
     428:	55 0b       	sbc	r21, r21
     42a:	2d 8b       	std	Y+21, r18	; 0x15
     42c:	3e 8b       	std	Y+22, r19	; 0x16
     42e:	4f 8b       	std	Y+23, r20	; 0x17
     430:	58 8f       	std	Y+24, r21	; 0x18
     432:	6d 89       	ldd	r22, Y+21	; 0x15
     434:	7e 89       	ldd	r23, Y+22	; 0x16
     436:	8f 89       	ldd	r24, Y+23	; 0x17
     438:	98 8d       	ldd	r25, Y+24	; 0x18
     43a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__floatsisf>
     43e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <sqrt>
     442:	6d 8b       	std	Y+21, r22	; 0x15
     444:	7e 8b       	std	Y+22, r23	; 0x16
     446:	8f 8b       	std	Y+23, r24	; 0x17
     448:	98 8f       	std	Y+24, r25	; 0x18
	int dist03 = sqrt((pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     44a:	d8 01       	movw	r26, r16
     44c:	1c 96       	adiw	r26, 0x0c	; 12
     44e:	8d 90       	ld	r8, X+
     450:	9c 90       	ld	r9, X
     452:	1d 97       	sbiw	r26, 0x0d	; 13
     454:	c4 01       	movw	r24, r8
     456:	8c 19       	sub	r24, r12
     458:	9d 09       	sbc	r25, r13
     45a:	1e 96       	adiw	r26, 0x0e	; 14
     45c:	4d 90       	ld	r4, X+
     45e:	5c 90       	ld	r5, X
     460:	1f 97       	sbiw	r26, 0x0f	; 15
     462:	92 01       	movw	r18, r4
     464:	2e 19       	sub	r18, r14
     466:	3f 09       	sbc	r19, r15
     468:	88 9f       	mul	r24, r24
     46a:	60 01       	movw	r12, r0
     46c:	89 9f       	mul	r24, r25
     46e:	d0 0c       	add	r13, r0
     470:	d0 0c       	add	r13, r0
     472:	11 24       	eor	r1, r1
     474:	22 9f       	mul	r18, r18
     476:	c0 01       	movw	r24, r0
     478:	23 9f       	mul	r18, r19
     47a:	90 0d       	add	r25, r0
     47c:	90 0d       	add	r25, r0
     47e:	11 24       	eor	r1, r1
     480:	c8 0e       	add	r12, r24
     482:	d9 1e       	adc	r13, r25
     484:	0d 2c       	mov	r0, r13
     486:	00 0c       	add	r0, r0
     488:	ee 08       	sbc	r14, r14
     48a:	ff 08       	sbc	r15, r15
     48c:	c7 01       	movw	r24, r14
     48e:	b6 01       	movw	r22, r12
     490:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__floatsisf>
     494:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <sqrt>
     498:	6d 8f       	std	Y+29, r22	; 0x1d
     49a:	7e 8f       	std	Y+30, r23	; 0x1e
     49c:	8f 8f       	std	Y+31, r24	; 0x1f
     49e:	98 a3       	std	Y+32, r25	; 0x20
	int dist12 = sqrt((pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     4a0:	c5 01       	movw	r24, r10
     4a2:	82 19       	sub	r24, r2
     4a4:	93 09       	sbc	r25, r3
     4a6:	93 01       	movw	r18, r6
     4a8:	e9 89       	ldd	r30, Y+17	; 0x11
     4aa:	fa 89       	ldd	r31, Y+18	; 0x12
     4ac:	2e 1b       	sub	r18, r30
     4ae:	3f 0b       	sbc	r19, r31
     4b0:	88 9f       	mul	r24, r24
     4b2:	60 01       	movw	r12, r0
     4b4:	89 9f       	mul	r24, r25
     4b6:	d0 0c       	add	r13, r0
     4b8:	d0 0c       	add	r13, r0
     4ba:	11 24       	eor	r1, r1
     4bc:	22 9f       	mul	r18, r18
     4be:	c0 01       	movw	r24, r0
     4c0:	23 9f       	mul	r18, r19
     4c2:	90 0d       	add	r25, r0
     4c4:	90 0d       	add	r25, r0
     4c6:	11 24       	eor	r1, r1
     4c8:	c8 0e       	add	r12, r24
     4ca:	d9 1e       	adc	r13, r25
     4cc:	0d 2c       	mov	r0, r13
     4ce:	00 0c       	add	r0, r0
     4d0:	ee 08       	sbc	r14, r14
     4d2:	ff 08       	sbc	r15, r15
     4d4:	c7 01       	movw	r24, r14
     4d6:	b6 01       	movw	r22, r12
     4d8:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__floatsisf>
     4dc:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <sqrt>
     4e0:	69 a3       	std	Y+33, r22	; 0x21
     4e2:	7a a3       	std	Y+34, r23	; 0x22
     4e4:	8b a3       	std	Y+35, r24	; 0x23
     4e6:	9c a3       	std	Y+36, r25	; 0x24
	int dist13 = sqrt((pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     4e8:	c4 01       	movw	r24, r8
     4ea:	82 19       	sub	r24, r2
     4ec:	93 09       	sbc	r25, r3
     4ee:	92 01       	movw	r18, r4
     4f0:	49 89       	ldd	r20, Y+17	; 0x11
     4f2:	5a 89       	ldd	r21, Y+18	; 0x12
     4f4:	24 1b       	sub	r18, r20
     4f6:	35 0b       	sbc	r19, r21
     4f8:	88 9f       	mul	r24, r24
     4fa:	60 01       	movw	r12, r0
     4fc:	89 9f       	mul	r24, r25
     4fe:	d0 0c       	add	r13, r0
     500:	d0 0c       	add	r13, r0
     502:	11 24       	eor	r1, r1
     504:	22 9f       	mul	r18, r18
     506:	c0 01       	movw	r24, r0
     508:	23 9f       	mul	r18, r19
     50a:	90 0d       	add	r25, r0
     50c:	90 0d       	add	r25, r0
     50e:	11 24       	eor	r1, r1
     510:	c8 0e       	add	r12, r24
     512:	d9 1e       	adc	r13, r25
     514:	0d 2c       	mov	r0, r13
     516:	00 0c       	add	r0, r0
     518:	ee 08       	sbc	r14, r14
     51a:	ff 08       	sbc	r15, r15
     51c:	c7 01       	movw	r24, r14
     51e:	b6 01       	movw	r22, r12
     520:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__floatsisf>
     524:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <sqrt>
     528:	69 8b       	std	Y+17, r22	; 0x11
     52a:	7a 8b       	std	Y+18, r23	; 0x12
     52c:	8b 8b       	std	Y+19, r24	; 0x13
     52e:	9c 8b       	std	Y+20, r25	; 0x14
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     530:	94 01       	movw	r18, r8
     532:	2a 19       	sub	r18, r10
     534:	3b 09       	sbc	r19, r11
     536:	c2 01       	movw	r24, r4
     538:	86 19       	sub	r24, r6
     53a:	97 09       	sbc	r25, r7
     53c:	22 9f       	mul	r18, r18
     53e:	60 01       	movw	r12, r0
     540:	23 9f       	mul	r18, r19
     542:	d0 0c       	add	r13, r0
     544:	d0 0c       	add	r13, r0
     546:	11 24       	eor	r1, r1
     548:	88 9f       	mul	r24, r24
     54a:	90 01       	movw	r18, r0
     54c:	89 9f       	mul	r24, r25
     54e:	30 0d       	add	r19, r0
     550:	30 0d       	add	r19, r0
     552:	11 24       	eor	r1, r1
     554:	c2 0e       	add	r12, r18
     556:	d3 1e       	adc	r13, r19
     558:	0d 2c       	mov	r0, r13
     55a:	00 0c       	add	r0, r0
     55c:	ee 08       	sbc	r14, r14
     55e:	ff 08       	sbc	r15, r15
     560:	c7 01       	movw	r24, r14
     562:	b6 01       	movw	r22, r12
     564:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__floatsisf>
     568:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <sqrt>
     56c:	6b 01       	movw	r12, r22
     56e:	7c 01       	movw	r14, r24

int* fourPointCalc(int pvect[4][2])
{
	static int centerFour[3];
	
	int dist01 = sqrt((pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     570:	69 8d       	ldd	r22, Y+25	; 0x19
     572:	7a 8d       	ldd	r23, Y+26	; 0x1a
     574:	8b 8d       	ldd	r24, Y+27	; 0x1b
     576:	9c 8d       	ldd	r25, Y+28	; 0x1c
     578:	0e 94 02 0c 	call	0x1804	; 0x1804 <__fixsfsi>
     57c:	7a 83       	std	Y+2, r23	; 0x02
     57e:	69 83       	std	Y+1, r22	; 0x01
	int dist02 = sqrt((pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     580:	6d 89       	ldd	r22, Y+21	; 0x15
     582:	7e 89       	ldd	r23, Y+22	; 0x16
     584:	8f 89       	ldd	r24, Y+23	; 0x17
     586:	98 8d       	ldd	r25, Y+24	; 0x18
     588:	0e 94 02 0c 	call	0x1804	; 0x1804 <__fixsfsi>
     58c:	7c 83       	std	Y+4, r23	; 0x04
     58e:	6b 83       	std	Y+3, r22	; 0x03
	int dist03 = sqrt((pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     590:	6d 8d       	ldd	r22, Y+29	; 0x1d
     592:	7e 8d       	ldd	r23, Y+30	; 0x1e
     594:	8f 8d       	ldd	r24, Y+31	; 0x1f
     596:	98 a1       	ldd	r25, Y+32	; 0x20
     598:	0e 94 02 0c 	call	0x1804	; 0x1804 <__fixsfsi>
     59c:	7e 83       	std	Y+6, r23	; 0x06
     59e:	6d 83       	std	Y+5, r22	; 0x05
	int dist12 = sqrt((pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     5a0:	69 a1       	ldd	r22, Y+33	; 0x21
     5a2:	7a a1       	ldd	r23, Y+34	; 0x22
     5a4:	8b a1       	ldd	r24, Y+35	; 0x23
     5a6:	9c a1       	ldd	r25, Y+36	; 0x24
     5a8:	0e 94 02 0c 	call	0x1804	; 0x1804 <__fixsfsi>
     5ac:	78 87       	std	Y+8, r23	; 0x08
     5ae:	6f 83       	std	Y+7, r22	; 0x07
	int dist13 = sqrt((pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     5b0:	69 89       	ldd	r22, Y+17	; 0x11
     5b2:	7a 89       	ldd	r23, Y+18	; 0x12
     5b4:	8b 89       	ldd	r24, Y+19	; 0x13
     5b6:	9c 89       	ldd	r25, Y+20	; 0x14
     5b8:	0e 94 02 0c 	call	0x1804	; 0x1804 <__fixsfsi>
     5bc:	7a 87       	std	Y+10, r23	; 0x0a
     5be:	69 87       	std	Y+9, r22	; 0x09
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     5c0:	c7 01       	movw	r24, r14
     5c2:	b6 01       	movw	r22, r12
     5c4:	0e 94 02 0c 	call	0x1804	; 0x1804 <__fixsfsi>
     5c8:	7c 87       	std	Y+12, r23	; 0x0c
     5ca:	6b 87       	std	Y+11, r22	; 0x0b
     5cc:	fe 01       	movw	r30, r28
     5ce:	31 96       	adiw	r30, 0x01	; 1
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
	int dist13 = sqrt((pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	int dist23 = sqrt((pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     5dc:	41 91       	ld	r20, Z+
     5de:	51 91       	ld	r21, Z+
     5e0:	64 17       	cp	r22, r20
     5e2:	75 07       	cpc	r23, r21
     5e4:	1c f4       	brge	.+6      	; 0x5ec <fourPointCalc+0x2a2>
			indexMax = i;
			maxVal = distVect[i];
     5e6:	ba 01       	movw	r22, r20
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     5e8:	82 2f       	mov	r24, r18
     5ea:	93 2f       	mov	r25, r19
	
	int distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	int maxVal = 0;
	for (int i = 0; i < 6; i++){
     5ec:	2f 5f       	subi	r18, 0xFF	; 255
     5ee:	3f 4f       	sbci	r19, 0xFF	; 255
     5f0:	26 30       	cpi	r18, 0x06	; 6
     5f2:	31 05       	cpc	r19, r1
     5f4:	99 f7       	brne	.-26     	; 0x5dc <fourPointCalc+0x292>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLong; 
	pointsLong = distIndex(indexMax);
     5f6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <distIndex>
	int center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     5fa:	fc 01       	movw	r30, r24
     5fc:	a0 81       	ld	r26, Z
     5fe:	b1 81       	ldd	r27, Z+1	; 0x01
     600:	aa 0f       	add	r26, r26
     602:	bb 1f       	adc	r27, r27
     604:	aa 0f       	add	r26, r26
     606:	bb 1f       	adc	r27, r27
     608:	a0 0f       	add	r26, r16
     60a:	b1 1f       	adc	r27, r17
     60c:	22 81       	ldd	r18, Z+2	; 0x02
     60e:	33 81       	ldd	r19, Z+3	; 0x03
     610:	f9 01       	movw	r30, r18
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	e0 0f       	add	r30, r16
     61c:	f1 1f       	adc	r31, r17
     61e:	4d 90       	ld	r4, X+
     620:	5c 90       	ld	r5, X
     622:	11 97       	sbiw	r26, 0x01	; 1
     624:	20 81       	ld	r18, Z
     626:	31 81       	ldd	r19, Z+1	; 0x01
     628:	42 0e       	add	r4, r18
     62a:	53 1e       	adc	r5, r19
     62c:	55 20       	and	r5, r5
     62e:	1c f4       	brge	.+6      	; 0x636 <fourPointCalc+0x2ec>
     630:	2f ef       	ldi	r18, 0xFF	; 255
     632:	42 1a       	sub	r4, r18
     634:	52 0a       	sbc	r5, r18
     636:	55 94       	asr	r5
     638:	47 94       	ror	r4
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     63a:	12 96       	adiw	r26, 0x02	; 2
     63c:	6d 90       	ld	r6, X+
     63e:	7c 90       	ld	r7, X
     640:	13 97       	sbiw	r26, 0x03	; 3
     642:	22 81       	ldd	r18, Z+2	; 0x02
     644:	33 81       	ldd	r19, Z+3	; 0x03
     646:	62 0e       	add	r6, r18
     648:	73 1e       	adc	r7, r19
     64a:	77 20       	and	r7, r7
     64c:	1c f4       	brge	.+6      	; 0x654 <fourPointCalc+0x30a>
     64e:	3f ef       	ldi	r19, 0xFF	; 255
     650:	63 1a       	sub	r6, r19
     652:	73 0a       	sbc	r7, r19
     654:	75 94       	asr	r7
     656:	67 94       	ror	r6
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     658:	9e 01       	movw	r18, r28
     65a:	21 5f       	subi	r18, 0xF1	; 241
     65c:	3f 4f       	sbci	r19, 0xFF	; 255
     65e:	ae 01       	movw	r20, r28
     660:	43 5f       	subi	r20, 0xF3	; 243
     662:	5f 4f       	sbci	r21, 0xFF	; 255
     664:	be 01       	movw	r22, r28
     666:	6f 5f       	subi	r22, 0xFF	; 255
     668:	7f 4f       	sbci	r23, 0xFF	; 255
     66a:	0e 94 47 01 	call	0x28e	; 0x28e <orientationCalculationFour>
	
	int centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     66e:	ed 84       	ldd	r14, Y+13	; 0x0d
     670:	fe 84       	ldd	r15, Y+14	; 0x0e
     672:	ee 0c       	add	r14, r14
     674:	ff 1c       	adc	r15, r15
     676:	ee 0c       	add	r14, r14
     678:	ff 1c       	adc	r15, r15
     67a:	e0 0e       	add	r14, r16
     67c:	f1 1e       	adc	r15, r17
     67e:	8f 85       	ldd	r24, Y+15	; 0x0f
     680:	98 89       	ldd	r25, Y+16	; 0x10
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	08 0f       	add	r16, r24
     68c:	19 1f       	adc	r17, r25
     68e:	d7 01       	movw	r26, r14
     690:	6d 91       	ld	r22, X+
     692:	7c 91       	ld	r23, X
     694:	f8 01       	movw	r30, r16
     696:	80 81       	ld	r24, Z
     698:	91 81       	ldd	r25, Z+1	; 0x01
     69a:	68 1b       	sub	r22, r24
     69c:	79 0b       	sbc	r23, r25
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
	
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
     69e:	07 2e       	mov	r0, r23
     6a0:	00 0c       	add	r0, r0
     6a2:	88 0b       	sbc	r24, r24
     6a4:	99 0b       	sbc	r25, r25
     6a6:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__floatsisf>
     6aa:	4b 01       	movw	r8, r22
     6ac:	5c 01       	movw	r10, r24
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
	
	int centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     6ae:	d7 01       	movw	r26, r14
     6b0:	12 96       	adiw	r26, 0x02	; 2
     6b2:	6d 91       	ld	r22, X+
     6b4:	7c 91       	ld	r23, X
     6b6:	13 97       	sbiw	r26, 0x03	; 3
     6b8:	f8 01       	movw	r30, r16
     6ba:	82 81       	ldd	r24, Z+2	; 0x02
     6bc:	93 81       	ldd	r25, Z+3	; 0x03
     6be:	68 1b       	sub	r22, r24
     6c0:	79 0b       	sbc	r23, r25
	
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
     6c2:	07 2e       	mov	r0, r23
     6c4:	00 0c       	add	r0, r0
     6c6:	88 0b       	sbc	r24, r24
     6c8:	99 0b       	sbc	r25, r25
     6ca:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__floatsisf>
     6ce:	90 58       	subi	r25, 0x80	; 128
     6d0:	a5 01       	movw	r20, r10
     6d2:	94 01       	movw	r18, r8
     6d4:	0e 94 2c 0b 	call	0x1658	; 0x1658 <atan2>
	theta += M_PI/2;
     6d8:	2b ed       	ldi	r18, 0xDB	; 219
     6da:	3f e0       	ldi	r19, 0x0F	; 15
     6dc:	49 ec       	ldi	r20, 0xC9	; 201
     6de:	5f e3       	ldi	r21, 0x3F	; 63
     6e0:	0e 94 ad 0a 	call	0x155a	; 0x155a <__addsf3>
     6e4:	6b 01       	movw	r12, r22
     6e6:	7c 01       	movw	r14, r24
	int t[2];
	t[0] = -1*center[0] + 512;
	t[1] = -1*center[1] + 382;
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     6e8:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <sin>
     6ec:	4b 01       	movw	r8, r22
     6ee:	5c 01       	movw	r10, r24
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
	theta += M_PI/2;
	
	int t[2];
	t[0] = -1*center[0] + 512;
	t[1] = -1*center[1] + 382;
     6f0:	6e e7       	ldi	r22, 0x7E	; 126
     6f2:	71 e0       	ldi	r23, 0x01	; 1
     6f4:	66 19       	sub	r22, r6
     6f6:	77 09       	sbc	r23, r7
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     6f8:	07 2e       	mov	r0, r23
     6fa:	00 0c       	add	r0, r0
     6fc:	88 0b       	sbc	r24, r24
     6fe:	99 0b       	sbc	r25, r25
     700:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__floatsisf>
     704:	69 8b       	std	Y+17, r22	; 0x11
     706:	7a 8b       	std	Y+18, r23	; 0x12
     708:	8b 8b       	std	Y+19, r24	; 0x13
     70a:	9c 8b       	std	Y+20, r25	; 0x14
     70c:	c7 01       	movw	r24, r14
     70e:	b6 01       	movw	r22, r12
     710:	0e 94 8b 0b 	call	0x1716	; 0x1716 <cos>
     714:	6d 8b       	std	Y+21, r22	; 0x15
     716:	7e 8b       	std	Y+22, r23	; 0x16
     718:	8f 8b       	std	Y+23, r24	; 0x17
     71a:	98 8f       	std	Y+24, r25	; 0x18
	
	float theta = atan2((float)-1*centerLine[1], (float)centerLine[0]); 
	theta += M_PI/2;
	
	int t[2];
	t[0] = -1*center[0] + 512;
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	72 e0       	ldi	r23, 0x02	; 2
     720:	64 19       	sub	r22, r4
     722:	75 09       	sbc	r23, r5
	t[1] = -1*center[1] + 382;
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     724:	07 2e       	mov	r0, r23
     726:	00 0c       	add	r0, r0
     728:	88 0b       	sbc	r24, r24
     72a:	99 0b       	sbc	r25, r25
     72c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__floatsisf>
     730:	69 8f       	std	Y+25, r22	; 0x19
     732:	7a 8f       	std	Y+26, r23	; 0x1a
     734:	8b 8f       	std	Y+27, r24	; 0x1b
     736:	9c 8f       	std	Y+28, r25	; 0x1c
     738:	0e e1       	ldi	r16, 0x1E	; 30
     73a:	11 e0       	ldi	r17, 0x01	; 1
     73c:	29 89       	ldd	r18, Y+17	; 0x11
     73e:	3a 89       	ldd	r19, Y+18	; 0x12
     740:	4b 89       	ldd	r20, Y+19	; 0x13
     742:	5c 89       	ldd	r21, Y+20	; 0x14
     744:	c5 01       	movw	r24, r10
     746:	b4 01       	movw	r22, r8
     748:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsf3>
     74c:	2b 01       	movw	r4, r22
     74e:	3c 01       	movw	r6, r24
     750:	29 8d       	ldd	r18, Y+25	; 0x19
     752:	3a 8d       	ldd	r19, Y+26	; 0x1a
     754:	4b 8d       	ldd	r20, Y+27	; 0x1b
     756:	5c 8d       	ldd	r21, Y+28	; 0x1c
     758:	6d 89       	ldd	r22, Y+21	; 0x15
     75a:	7e 89       	ldd	r23, Y+22	; 0x16
     75c:	8f 89       	ldd	r24, Y+23	; 0x17
     75e:	98 8d       	ldd	r25, Y+24	; 0x18
     760:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsf3>
     764:	9b 01       	movw	r18, r22
     766:	ac 01       	movw	r20, r24
     768:	c3 01       	movw	r24, r6
     76a:	b2 01       	movw	r22, r4
     76c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__subsf3>
     770:	0e 94 02 0c 	call	0x1804	; 0x1804 <__fixsfsi>
     774:	d8 01       	movw	r26, r16
     776:	6d 93       	st	X+, r22
     778:	7c 93       	st	X, r23
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     77a:	2d 89       	ldd	r18, Y+21	; 0x15
     77c:	3e 89       	ldd	r19, Y+22	; 0x16
     77e:	4f 89       	ldd	r20, Y+23	; 0x17
     780:	58 8d       	ldd	r21, Y+24	; 0x18
     782:	69 89       	ldd	r22, Y+17	; 0x11
     784:	7a 89       	ldd	r23, Y+18	; 0x12
     786:	8b 89       	ldd	r24, Y+19	; 0x13
     788:	9c 89       	ldd	r25, Y+20	; 0x14
     78a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsf3>
     78e:	2b 01       	movw	r4, r22
     790:	3c 01       	movw	r6, r24
     792:	29 8d       	ldd	r18, Y+25	; 0x19
     794:	3a 8d       	ldd	r19, Y+26	; 0x1a
     796:	4b 8d       	ldd	r20, Y+27	; 0x1b
     798:	5c 8d       	ldd	r21, Y+28	; 0x1c
     79a:	c5 01       	movw	r24, r10
     79c:	b4 01       	movw	r22, r8
     79e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsf3>
     7a2:	9b 01       	movw	r18, r22
     7a4:	ac 01       	movw	r20, r24
     7a6:	c3 01       	movw	r24, r6
     7a8:	b2 01       	movw	r22, r4
     7aa:	0e 94 ad 0a 	call	0x155a	; 0x155a <__addsf3>
     7ae:	0e 94 02 0c 	call	0x1804	; 0x1804 <__fixsfsi>
     7b2:	f8 01       	movw	r30, r16
     7b4:	73 83       	std	Z+3, r23	; 0x03
     7b6:	62 83       	std	Z+2, r22	; 0x02
	centerFour[2] = -theta*180.0/M_PI;
     7b8:	c7 01       	movw	r24, r14
     7ba:	b6 01       	movw	r22, r12
     7bc:	90 58       	subi	r25, 0x80	; 128
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	44 e3       	ldi	r20, 0x34	; 52
     7c4:	53 e4       	ldi	r21, 0x43	; 67
     7c6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsf3>
     7ca:	2b ed       	ldi	r18, 0xDB	; 219
     7cc:	3f e0       	ldi	r19, 0x0F	; 15
     7ce:	49 e4       	ldi	r20, 0x49	; 73
     7d0:	50 e4       	ldi	r21, 0x40	; 64
     7d2:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divsf3>
     7d6:	0e 94 02 0c 	call	0x1804	; 0x1804 <__fixsfsi>
     7da:	d8 01       	movw	r26, r16
     7dc:	15 96       	adiw	r26, 0x05	; 5
     7de:	7c 93       	st	X, r23
     7e0:	6e 93       	st	-X, r22
     7e2:	14 97       	sbiw	r26, 0x04	; 4
	
	return centerFour;
}
     7e4:	c8 01       	movw	r24, r16
     7e6:	a4 96       	adiw	r28, 0x24	; 36
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	cd bf       	out	0x3d, r28	; 61
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	bf 90       	pop	r11
     804:	af 90       	pop	r10
     806:	9f 90       	pop	r9
     808:	8f 90       	pop	r8
     80a:	7f 90       	pop	r7
     80c:	6f 90       	pop	r6
     80e:	5f 90       	pop	r5
     810:	4f 90       	pop	r4
     812:	3f 90       	pop	r3
     814:	2f 90       	pop	r2
     816:	08 95       	ret

00000818 <localization_calc>:
void orientationCalculationFour(int* pointsLong, int distVect[], int* top, int* bottom);


//Public function declarations 
int* localization_calc(int rawStarData[8], int robotCenterPrev[3])
{
     818:	af 92       	push	r10
     81a:	bf 92       	push	r11
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	68 97       	sbiw	r28, 0x18	; 24
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     83e:	0d b7       	in	r16, 0x3d	; 61
     840:	1e b7       	in	r17, 0x3e	; 62
int* localization_calc(int rawStarData[8], int robotCenterPrev[3])
{
	static int robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     842:	80 81       	ld	r24, Z
     844:	91 81       	ldd	r25, Z+1	; 0x01
     846:	9a 83       	std	Y+2, r25	; 0x02
     848:	89 83       	std	Y+1, r24	; 0x01
     84a:	80 85       	ldd	r24, Z+8	; 0x08
     84c:	91 85       	ldd	r25, Z+9	; 0x09
     84e:	9c 83       	std	Y+4, r25	; 0x04
     850:	8b 83       	std	Y+3, r24	; 0x03
     852:	82 81       	ldd	r24, Z+2	; 0x02
     854:	93 81       	ldd	r25, Z+3	; 0x03
     856:	9e 83       	std	Y+6, r25	; 0x06
     858:	8d 83       	std	Y+5, r24	; 0x05
     85a:	82 85       	ldd	r24, Z+10	; 0x0a
     85c:	93 85       	ldd	r25, Z+11	; 0x0b
     85e:	98 87       	std	Y+8, r25	; 0x08
     860:	8f 83       	std	Y+7, r24	; 0x07
     862:	84 81       	ldd	r24, Z+4	; 0x04
     864:	95 81       	ldd	r25, Z+5	; 0x05
     866:	9a 87       	std	Y+10, r25	; 0x0a
     868:	89 87       	std	Y+9, r24	; 0x09
     86a:	84 85       	ldd	r24, Z+12	; 0x0c
     86c:	95 85       	ldd	r25, Z+13	; 0x0d
     86e:	9c 87       	std	Y+12, r25	; 0x0c
     870:	8b 87       	std	Y+11, r24	; 0x0b
     872:	86 81       	ldd	r24, Z+6	; 0x06
     874:	97 81       	ldd	r25, Z+7	; 0x07
     876:	9e 87       	std	Y+14, r25	; 0x0e
     878:	8d 87       	std	Y+13, r24	; 0x0d
     87a:	86 85       	ldd	r24, Z+14	; 0x0e
     87c:	97 85       	ldd	r25, Z+15	; 0x0f
     87e:	98 8b       	std	Y+16, r25	; 0x10
     880:	8f 87       	std	Y+15, r24	; 0x0f
     882:	9e 01       	movw	r18, r28
     884:	2f 5f       	subi	r18, 0xFF	; 255
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	69 01       	movw	r12, r18
     88a:	ae 01       	movw	r20, r28
     88c:	4f 5e       	subi	r20, 0xEF	; 239
     88e:	5f 4f       	sbci	r21, 0xFF	; 255
     890:	f9 01       	movw	r30, r18
	
	//If the x or y data is not received, ensure that the whole point is removed (set to 1023)
	for (int i = 0; i < 4; i++ ){
		for (int j = 0; j < 2; j++ ){
			if (pvect[i][j] == 1023){
				pvect[i][0] = 1023;
     892:	0f 2e       	mov	r0, r31
     894:	ee 24       	eor	r14, r14
     896:	ea 94       	dec	r14
     898:	f3 e0       	ldi	r31, 0x03	; 3
     89a:	ff 2e       	mov	r15, r31
     89c:	f0 2d       	mov	r31, r0
     89e:	0c c0       	rjmp	.+24     	; 0x8b8 <localization_calc+0xa0>
     8a0:	d9 01       	movw	r26, r18
     8a2:	11 96       	adiw	r26, 0x01	; 1
     8a4:	fc 92       	st	X, r15
     8a6:	ee 92       	st	-X, r14
				pvect[i][1] = 1023;
     8a8:	13 96       	adiw	r26, 0x03	; 3
     8aa:	fc 92       	st	X, r15
     8ac:	ee 92       	st	-X, r14
     8ae:	12 97       	sbiw	r26, 0x02	; 2
     8b0:	34 96       	adiw	r30, 0x04	; 4
		{rawStarData[2], rawStarData[6]},
		{rawStarData[3], rawStarData[7]}
	};
	
	//If the x or y data is not received, ensure that the whole point is removed (set to 1023)
	for (int i = 0; i < 4; i++ ){
     8b2:	e4 17       	cp	r30, r20
     8b4:	f5 07       	cpc	r31, r21
     8b6:	61 f0       	breq	.+24     	; 0x8d0 <localization_calc+0xb8>
     8b8:	9f 01       	movw	r18, r30
		for (int j = 0; j < 2; j++ ){
			if (pvect[i][j] == 1023){
     8ba:	80 81       	ld	r24, Z
     8bc:	91 81       	ldd	r25, Z+1	; 0x01
     8be:	8f 3f       	cpi	r24, 0xFF	; 255
     8c0:	93 40       	sbci	r25, 0x03	; 3
     8c2:	71 f3       	breq	.-36     	; 0x8a0 <localization_calc+0x88>
     8c4:	82 81       	ldd	r24, Z+2	; 0x02
     8c6:	93 81       	ldd	r25, Z+3	; 0x03
     8c8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ca:	93 40       	sbci	r25, 0x03	; 3
     8cc:	89 f7       	brne	.-30     	; 0x8b0 <localization_calc+0x98>
     8ce:	e8 cf       	rjmp	.-48     	; 0x8a0 <localization_calc+0x88>
			}
		}
	}
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     8d0:	fe 01       	movw	r30, r28
     8d2:	71 96       	adiw	r30, 0x11	; 17
     8d4:	88 e0       	ldi	r24, 0x08	; 8
     8d6:	df 01       	movw	r26, r30
     8d8:	1d 92       	st	X+, r1
     8da:	8a 95       	dec	r24
     8dc:	e9 f7       	brne	.-6      	; 0x8d8 <localization_calc+0xc0>
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     8e6:	f6 01       	movw	r30, r12
     8e8:	40 81       	ld	r20, Z
     8ea:	51 81       	ldd	r21, Z+1	; 0x01
     8ec:	4f 3f       	cpi	r20, 0xFF	; 255
     8ee:	53 40       	sbci	r21, 0x03	; 3
     8f0:	61 f0       	breq	.+24     	; 0x90a <localization_calc+0xf2>
			pointIndices[numPoints] = i;
     8f2:	fc 01       	movw	r30, r24
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	41 e0       	ldi	r20, 0x01	; 1
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	4c 0f       	add	r20, r28
     8fe:	5d 1f       	adc	r21, r29
     900:	e4 0f       	add	r30, r20
     902:	f5 1f       	adc	r31, r21
     904:	31 8b       	std	Z+17, r19	; 0x11
     906:	20 8b       	std	Z+16, r18	; 0x10
			numPoints++;
     908:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     90a:	2f 5f       	subi	r18, 0xFF	; 255
     90c:	3f 4f       	sbci	r19, 0xFF	; 255
     90e:	54 e0       	ldi	r21, 0x04	; 4
     910:	c5 0e       	add	r12, r21
     912:	d1 1c       	adc	r13, r1
     914:	24 30       	cpi	r18, 0x04	; 4
     916:	31 05       	cpc	r19, r1
     918:	31 f7       	brne	.-52     	; 0x8e6 <localization_calc+0xce>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	09 f4       	brne	.+2      	; 0x920 <localization_calc+0x108>
     91e:	9b c0       	rjmp	.+310    	; 0xa56 <localization_calc+0x23e>
     920:	ed b6       	in	r14, 0x3d	; 61
     922:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     924:	6c 01       	movw	r12, r24
     926:	cc 0c       	add	r12, r12
     928:	dd 1c       	adc	r13, r13
     92a:	cc 0c       	add	r12, r12
     92c:	dd 1c       	adc	r13, r13
     92e:	ad b7       	in	r26, 0x3d	; 61
     930:	be b7       	in	r27, 0x3e	; 62
     932:	ac 19       	sub	r26, r12
     934:	bd 09       	sbc	r27, r13
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	be bf       	out	0x3e, r27	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	ad bf       	out	0x3d, r26	; 61
     940:	ed b7       	in	r30, 0x3d	; 61
     942:	fe b7       	in	r31, 0x3e	; 62
     944:	31 96       	adiw	r30, 0x01	; 1
     946:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     948:	18 16       	cp	r1, r24
     94a:	19 06       	cpc	r1, r25
     94c:	24 f5       	brge	.+72     	; 0x996 <localization_calc+0x17e>
     94e:	9e 01       	movw	r18, r28
     950:	2f 5e       	subi	r18, 0xEF	; 239
     952:	3f 4f       	sbci	r19, 0xFF	; 255
     954:	df 01       	movw	r26, r30
     956:	ce 0e       	add	r12, r30
     958:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     95a:	f9 01       	movw	r30, r18
     95c:	41 91       	ld	r20, Z+
     95e:	51 91       	ld	r21, Z+
     960:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     962:	fa 01       	movw	r30, r20
     964:	ee 0f       	add	r30, r30
     966:	ff 1f       	adc	r31, r31
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	41 e0       	ldi	r20, 0x01	; 1
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	4c 0f       	add	r20, r28
     972:	5d 1f       	adc	r21, r29
     974:	e4 0f       	add	r30, r20
     976:	f5 1f       	adc	r31, r21
     978:	40 81       	ld	r20, Z
     97a:	51 81       	ldd	r21, Z+1	; 0x01
     97c:	11 96       	adiw	r26, 0x01	; 1
     97e:	5c 93       	st	X, r21
     980:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     982:	42 81       	ldd	r20, Z+2	; 0x02
     984:	53 81       	ldd	r21, Z+3	; 0x03
     986:	13 96       	adiw	r26, 0x03	; 3
     988:	5c 93       	st	X, r21
     98a:	4e 93       	st	-X, r20
     98c:	12 97       	sbiw	r26, 0x02	; 2
     98e:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     990:	ac 15       	cp	r26, r12
     992:	bd 05       	cpc	r27, r13
     994:	11 f7       	brne	.-60     	; 0x95a <localization_calc+0x142>
			points[i][0] = pvect[index][0];
			points[i][1] = pvect[index][1];
		}
		
		
		m_red(ON);
     996:	6e 9a       	sbi	0x0d, 6	; 13
     998:	76 98       	cbi	0x0e, 6	; 14
		
		int* calcPointer; 
		static int rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     99a:	db 01       	movw	r26, r22
     99c:	2d 91       	ld	r18, X+
     99e:	3c 91       	ld	r19, X
     9a0:	11 97       	sbiw	r26, 0x01	; 1
     9a2:	ea e2       	ldi	r30, 0x2A	; 42
     9a4:	f1 e0       	ldi	r31, 0x01	; 1
     9a6:	31 83       	std	Z+1, r19	; 0x01
     9a8:	20 83       	st	Z, r18
		rc[1] = robotCenterPrev[1];
     9aa:	12 96       	adiw	r26, 0x02	; 2
     9ac:	2d 91       	ld	r18, X+
     9ae:	3c 91       	ld	r19, X
     9b0:	13 97       	sbiw	r26, 0x03	; 3
     9b2:	33 83       	std	Z+3, r19	; 0x03
     9b4:	22 83       	std	Z+2, r18	; 0x02
		rc[2] = robotCenterPrev[2];
     9b6:	14 96       	adiw	r26, 0x04	; 4
     9b8:	2d 91       	ld	r18, X+
     9ba:	3c 91       	ld	r19, X
     9bc:	15 97       	sbiw	r26, 0x05	; 5
     9be:	35 83       	std	Z+5, r19	; 0x05
     9c0:	24 83       	std	Z+4, r18	; 0x04
		switch (numPoints)
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	91 05       	cpc	r25, r1
     9c6:	c1 f0       	breq	.+48     	; 0x9f8 <localization_calc+0x1e0>
     9c8:	1c f4       	brge	.+6      	; 0x9d0 <localization_calc+0x1b8>
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	f9 f0       	breq	.+62     	; 0xa0c <localization_calc+0x1f4>
     9ce:	28 c0       	rjmp	.+80     	; 0xa20 <localization_calc+0x208>
     9d0:	83 30       	cpi	r24, 0x03	; 3
     9d2:	91 05       	cpc	r25, r1
     9d4:	39 f0       	breq	.+14     	; 0x9e4 <localization_calc+0x1cc>
     9d6:	04 97       	sbiw	r24, 0x04	; 4
     9d8:	19 f5       	brne	.+70     	; 0xa20 <localization_calc+0x208>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     9da:	c5 01       	movw	r24, r10
     9dc:	0e 94 a5 01 	call	0x34a	; 0x34a <fourPointCalc>
     9e0:	dc 01       	movw	r26, r24
				break;
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <localization_calc+0x20c>


int* threePointCalc(int pvect[3][2])
{
	static int centerThree[2];	
	centerThree[0] = 1023;
     9e4:	ea e1       	ldi	r30, 0x1A	; 26
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	8f ef       	ldi	r24, 0xFF	; 255
     9ea:	93 e0       	ldi	r25, 0x03	; 3
     9ec:	91 83       	std	Z+1, r25	; 0x01
     9ee:	80 83       	st	Z, r24
	centerThree[1] = 1023;
     9f0:	93 83       	std	Z+3, r25	; 0x03
     9f2:	82 83       	std	Z+2, r24	; 0x02
			case 4 :
				calcPointer = fourPointCalc(points);
				break;
				
			case 3 : 
				calcPointer = threePointCalc(points);
     9f4:	df 01       	movw	r26, r30
				break;
     9f6:	16 c0       	rjmp	.+44     	; 0xa24 <localization_calc+0x20c>


int* twoPointCalc(int pvect[2][2])
{
	static int centerTwo[2];
	centerTwo[0] = 1023;
     9f8:	e6 e1       	ldi	r30, 0x16	; 22
     9fa:	f1 e0       	ldi	r31, 0x01	; 1
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	93 e0       	ldi	r25, 0x03	; 3
     a00:	91 83       	std	Z+1, r25	; 0x01
     a02:	80 83       	st	Z, r24
	centerTwo[1] = 1023;
     a04:	93 83       	std	Z+3, r25	; 0x03
     a06:	82 83       	std	Z+2, r24	; 0x02
			case 3 : 
				calcPointer = threePointCalc(points);
				break;
				
			case 2 :
				calcPointer = twoPointCalc(points);
     a08:	df 01       	movw	r26, r30
				break; 
     a0a:	0c c0       	rjmp	.+24     	; 0xa24 <localization_calc+0x20c>


int* onePointCalc(int pvect[1][2])
{
	static int centerOne[2];
	centerOne[0] = 1023;
     a0c:	e2 e1       	ldi	r30, 0x12	; 18
     a0e:	f1 e0       	ldi	r31, 0x01	; 1
     a10:	8f ef       	ldi	r24, 0xFF	; 255
     a12:	93 e0       	ldi	r25, 0x03	; 3
     a14:	91 83       	std	Z+1, r25	; 0x01
     a16:	80 83       	st	Z, r24
	centerOne[1] = 1023;
     a18:	93 83       	std	Z+3, r25	; 0x03
     a1a:	82 83       	std	Z+2, r24	; 0x02
			case 2 :
				calcPointer = twoPointCalc(points);
				break; 
				
			case 1 : 
				calcPointer = onePointCalc(points);
     a1c:	df 01       	movw	r26, r30
				break; 
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <localization_calc+0x20c>
				
			default:
				calcPointer = &rc[0];
     a20:	aa e2       	ldi	r26, 0x2A	; 42
     a22:	b1 e0       	ldi	r27, 0x01	; 1
				
		}
		
		robotCenter[0] = (int)calcPointer[0];
     a24:	8d 91       	ld	r24, X+
     a26:	9c 91       	ld	r25, X
     a28:	11 97       	sbiw	r26, 0x01	; 1
     a2a:	e4 e2       	ldi	r30, 0x24	; 36
     a2c:	f1 e0       	ldi	r31, 0x01	; 1
     a2e:	91 83       	std	Z+1, r25	; 0x01
     a30:	80 83       	st	Z, r24
		robotCenter[1] = (int)calcPointer[1];
     a32:	12 96       	adiw	r26, 0x02	; 2
     a34:	8d 91       	ld	r24, X+
     a36:	9c 91       	ld	r25, X
     a38:	13 97       	sbiw	r26, 0x03	; 3
     a3a:	93 83       	std	Z+3, r25	; 0x03
     a3c:	82 83       	std	Z+2, r24	; 0x02
		robotCenter[2] = (int)calcPointer[2];
     a3e:	14 96       	adiw	r26, 0x04	; 4
     a40:	8d 91       	ld	r24, X+
     a42:	9c 91       	ld	r25, X
     a44:	15 97       	sbiw	r26, 0x05	; 5
     a46:	95 83       	std	Z+5, r25	; 0x05
     a48:	84 83       	std	Z+4, r24	; 0x04
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	fe be       	out	0x3e, r15	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	ed be       	out	0x3d, r14	; 61
     a54:	16 c0       	rjmp	.+44     	; 0xa82 <localization_calc+0x26a>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     a56:	fb 01       	movw	r30, r22
     a58:	80 81       	ld	r24, Z
     a5a:	91 81       	ldd	r25, Z+1	; 0x01
     a5c:	e4 e2       	ldi	r30, 0x24	; 36
     a5e:	f1 e0       	ldi	r31, 0x01	; 1
     a60:	91 83       	std	Z+1, r25	; 0x01
     a62:	80 83       	st	Z, r24
		robotCenter[1] = robotCenterPrev[1];
     a64:	db 01       	movw	r26, r22
     a66:	12 96       	adiw	r26, 0x02	; 2
     a68:	8d 91       	ld	r24, X+
     a6a:	9c 91       	ld	r25, X
     a6c:	13 97       	sbiw	r26, 0x03	; 3
     a6e:	93 83       	std	Z+3, r25	; 0x03
     a70:	82 83       	std	Z+2, r24	; 0x02
		robotCenter[2] = robotCenterPrev[2];
     a72:	14 96       	adiw	r26, 0x04	; 4
     a74:	8d 91       	ld	r24, X+
     a76:	9c 91       	ld	r25, X
     a78:	15 97       	sbiw	r26, 0x05	; 5
     a7a:	95 83       	std	Z+5, r25	; 0x05
     a7c:	84 83       	std	Z+4, r24	; 0x04
		m_red(OFF);	
     a7e:	6e 9a       	sbi	0x0d, 6	; 13
     a80:	76 9a       	sbi	0x0e, 6	; 14
	
	return robotCenter;
	
	
	
}
     a82:	84 e2       	ldi	r24, 0x24	; 36
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	1e bf       	out	0x3e, r17	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	0d bf       	out	0x3d, r16	; 61
     a90:	68 96       	adiw	r28, 0x18	; 24
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	df 90       	pop	r13
     aaa:	cf 90       	pop	r12
     aac:	bf 90       	pop	r11
     aae:	af 90       	pop	r10
     ab0:	08 95       	ret

00000ab2 <init>:
}


void init() 
{
	m_red(ON);
     ab2:	6e 9a       	sbi	0x0d, 6	; 13
     ab4:	76 98       	cbi	0x0e, 6	; 14
	while(!m_wii_open());
     ab6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <m_wii_open>
     aba:	88 23       	and	r24, r24
     abc:	e1 f3       	breq	.-8      	; 0xab6 <init+0x4>
	m_red(OFF);
     abe:	6e 9a       	sbi	0x0d, 6	; 13
     ac0:	76 9a       	sbi	0x0e, 6	; 14
	
	m_usb_init();
     ac2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <m_usb_init>
     ac6:	08 95       	ret

00000ac8 <main>:
#include "localization_function.h"

void init(); 

int main(void)
{	
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	ae 97       	sbiw	r28, 0x2e	; 46
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
	m_clockdivide(0);
     adc:	e1 e6       	ldi	r30, 0x61	; 97
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	80 e8       	ldi	r24, 0x80	; 128
     ae2:	80 83       	st	Z, r24
     ae4:	10 82       	st	Z, r1
	
	init();
     ae6:	0e 94 59 05 	call	0xab2	; 0xab2 <init>
	m_green(ON);
     aea:	6a 9a       	sbi	0x0d, 2	; 13
     aec:	72 98       	cbi	0x0e, 2	; 14
	unsigned int blobs[12];
	char rx_buffer;

	int robotCenterPrev[3] = {1023, 1023, 360};
     aee:	86 e0       	ldi	r24, 0x06	; 6
     af0:	e7 e0       	ldi	r30, 0x07	; 7
     af2:	f1 e0       	ldi	r31, 0x01	; 1
     af4:	de 01       	movw	r26, r28
     af6:	59 96       	adiw	r26, 0x19	; 25
     af8:	01 90       	ld	r0, Z+
     afa:	0d 92       	st	X+, r0
     afc:	8a 95       	dec	r24
     afe:	e1 f7       	brne	.-8      	; 0xaf8 <main+0x30>
		
		m_usb_rx_flush();  						// Flush the buffer
		
		if(rx_buffer == 1)						// MATLAB is expecting IMU data
		{
			m_red(TOGGLE);
     b00:	68 94       	set
     b02:	ee 24       	eor	r14, r14
     b04:	e6 f8       	bld	r14, 6
	int* robotCenter;
	
    while (1) 
    {
		
		m_wii_read(blobs);
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	0e 94 19 0a 	call	0x1432	; 0x1432 <m_wii_read>
		unsigned int x1 = blobs[0];
		unsigned int y1 = blobs[1];
     b0e:	6b 81       	ldd	r22, Y+3	; 0x03
     b10:	7c 81       	ldd	r23, Y+4	; 0x04
		unsigned int x2 = blobs[3];
     b12:	0f 81       	ldd	r16, Y+7	; 0x07
     b14:	18 85       	ldd	r17, Y+8	; 0x08
		unsigned int y2 = blobs[4];
     b16:	49 85       	ldd	r20, Y+9	; 0x09
     b18:	5a 85       	ldd	r21, Y+10	; 0x0a
		unsigned int x3 = blobs[6];
     b1a:	ad 85       	ldd	r26, Y+13	; 0x0d
     b1c:	be 85       	ldd	r27, Y+14	; 0x0e
		unsigned int y3 = blobs[7];
     b1e:	2f 85       	ldd	r18, Y+15	; 0x0f
     b20:	38 89       	ldd	r19, Y+16	; 0x10
		unsigned int x4 = blobs[9];
     b22:	eb 89       	ldd	r30, Y+19	; 0x13
     b24:	fc 89       	ldd	r31, Y+20	; 0x14
		unsigned int y4 = blobs[10];
     b26:	8d 89       	ldd	r24, Y+21	; 0x15
     b28:	9e 89       	ldd	r25, Y+22	; 0x16
		
		int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
     b2a:	c9 80       	ldd	r12, Y+1	; 0x01
     b2c:	da 80       	ldd	r13, Y+2	; 0x02
     b2e:	d8 a2       	std	Y+32, r13	; 0x20
     b30:	cf 8e       	std	Y+31, r12	; 0x1f
     b32:	1a a3       	std	Y+34, r17	; 0x22
     b34:	09 a3       	std	Y+33, r16	; 0x21
     b36:	bc a3       	std	Y+36, r27	; 0x24
     b38:	ab a3       	std	Y+35, r26	; 0x23
     b3a:	fe a3       	std	Y+38, r31	; 0x26
     b3c:	ed a3       	std	Y+37, r30	; 0x25
     b3e:	78 a7       	std	Y+40, r23	; 0x28
     b40:	6f a3       	std	Y+39, r22	; 0x27
     b42:	5a a7       	std	Y+42, r21	; 0x2a
     b44:	49 a7       	std	Y+41, r20	; 0x29
     b46:	3c a7       	std	Y+44, r19	; 0x2c
     b48:	2b a7       	std	Y+43, r18	; 0x2b
     b4a:	9e a7       	std	Y+46, r25	; 0x2e
     b4c:	8d a7       	std	Y+45, r24	; 0x2d
		robotCenter = localization_calc(rawStarData, robotCenterPrev);
     b4e:	be 01       	movw	r22, r28
     b50:	67 5e       	subi	r22, 0xE7	; 231
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	ce 01       	movw	r24, r28
     b56:	4f 96       	adiw	r24, 0x1f	; 31
     b58:	0e 94 0c 04 	call	0x818	; 0x818 <localization_calc>
     b5c:	8c 01       	movw	r16, r24
		
		robotCenterPrev[0] = robotCenter[0];
     b5e:	fc 01       	movw	r30, r24
     b60:	80 81       	ld	r24, Z
     b62:	91 81       	ldd	r25, Z+1	; 0x01
     b64:	9a 8f       	std	Y+26, r25	; 0x1a
     b66:	89 8f       	std	Y+25, r24	; 0x19
		robotCenterPrev[1] = robotCenter[1];
     b68:	82 81       	ldd	r24, Z+2	; 0x02
     b6a:	93 81       	ldd	r25, Z+3	; 0x03
     b6c:	9c 8f       	std	Y+28, r25	; 0x1c
     b6e:	8b 8f       	std	Y+27, r24	; 0x1b
		robotCenterPrev[2] = robotCenter[2];
     b70:	84 81       	ldd	r24, Z+4	; 0x04
     b72:	95 81       	ldd	r25, Z+5	; 0x05
     b74:	9e 8f       	std	Y+30, r25	; 0x1e
     b76:	8d 8f       	std	Y+29, r24	; 0x1d
		
 		while(!m_usb_rx_available());  			// Wait for an indication from the computer
     b78:	0e 94 30 06 	call	0xc60	; 0xc60 <m_usb_rx_available>
     b7c:	88 23       	and	r24, r24
     b7e:	e1 f3       	breq	.-8      	; 0xb78 <__stack+0x79>
		rx_buffer = m_usb_rx_char();  			// Read the packet from the computer
     b80:	0e 94 12 06 	call	0xc24	; 0xc24 <m_usb_rx_char>
     b84:	f8 2e       	mov	r15, r24
		
		m_usb_rx_flush();  						// Flush the buffer
     b86:	0e 94 3f 06 	call	0xc7e	; 0xc7e <m_usb_rx_flush>
		
		if(rx_buffer == 1)						// MATLAB is expecting IMU data
     b8a:	f1 e0       	ldi	r31, 0x01	; 1
     b8c:	ff 12       	cpse	r15, r31
     b8e:	bb cf       	rjmp	.-138    	; 0xb06 <__stack+0x7>
		{
			m_red(TOGGLE);
     b90:	6e 9a       	sbi	0x0d, 6	; 13
     b92:	8e b1       	in	r24, 0x0e	; 14
     b94:	8e 25       	eor	r24, r14
     b96:	8e b9       	out	0x0e, r24	; 14
			m_usb_tx_int((int)robotCenter[0]);
     b98:	f8 01       	movw	r30, r16
     b9a:	80 81       	ld	r24, Z
     b9c:	91 81       	ldd	r25, Z+1	; 0x01
     b9e:	0e 94 8d 08 	call	0x111a	; 0x111a <m_usb_tx_int>
			m_usb_tx_string(" ");
     ba2:	8c ef       	ldi	r24, 0xFC	; 252
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 71 08 	call	0x10e2	; 0x10e2 <print_P>
			m_usb_tx_int((int)robotCenter[1]);
     baa:	f8 01       	movw	r30, r16
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	0e 94 8d 08 	call	0x111a	; 0x111a <m_usb_tx_int>
			m_usb_tx_string(" ");
     bb4:	8a ef       	ldi	r24, 0xFA	; 250
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 71 08 	call	0x10e2	; 0x10e2 <print_P>
			m_usb_tx_int((int)robotCenter[2]);
     bbc:	f8 01       	movw	r30, r16
     bbe:	84 81       	ldd	r24, Z+4	; 0x04
     bc0:	95 81       	ldd	r25, Z+5	; 0x05
     bc2:	0e 94 8d 08 	call	0x111a	; 0x111a <m_usb_tx_int>
			m_usb_tx_string("\n");
     bc6:	88 ef       	ldi	r24, 0xF8	; 248
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 71 08 	call	0x10e2	; 0x10e2 <print_P>

		}
		
		
    }
     bce:	9b cf       	rjmp	.-202    	; 0xb06 <__stack+0x7>

00000bd0 <m_bus_init>:
     bd0:	58 9a       	sbi	0x0b, 0	; 11
     bd2:	59 9a       	sbi	0x0b, 1	; 11
     bd4:	5a 9a       	sbi	0x0b, 2	; 11
     bd6:	8c e0       	ldi	r24, 0x0C	; 12
     bd8:	80 93 b8 00 	sts	0x00B8, r24
     bdc:	e9 e6       	ldi	r30, 0x69	; 105
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	80 62       	ori	r24, 0x20	; 32
     be4:	80 83       	st	Z, r24
     be6:	80 81       	ld	r24, Z
     be8:	8f 7e       	andi	r24, 0xEF	; 239
     bea:	80 83       	st	Z, r24
     bec:	ea 9a       	sbi	0x1d, 2	; 29
     bee:	78 94       	sei
     bf0:	08 95       	ret

00000bf2 <m_usb_init>:
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 d7 00 	sts	0x00D7, r24
     bf8:	80 ea       	ldi	r24, 0xA0	; 160
     bfa:	80 93 d8 00 	sts	0x00D8, r24
     bfe:	82 e1       	ldi	r24, 0x12	; 18
     c00:	89 bd       	out	0x29, r24	; 41
     c02:	09 b4       	in	r0, 0x29	; 41
     c04:	00 fe       	sbrs	r0, 0
     c06:	fd cf       	rjmp	.-6      	; 0xc02 <m_usb_init+0x10>
     c08:	80 e9       	ldi	r24, 0x90	; 144
     c0a:	80 93 d8 00 	sts	0x00D8, r24
     c0e:	10 92 e0 00 	sts	0x00E0, r1
     c12:	10 92 33 01 	sts	0x0133, r1
     c16:	10 92 30 01 	sts	0x0130, r1
     c1a:	8c e0       	ldi	r24, 0x0C	; 12
     c1c:	80 93 e2 00 	sts	0x00E2, r24
     c20:	78 94       	sei
     c22:	08 95       	ret

00000c24 <m_usb_rx_char>:
     c24:	9f b7       	in	r25, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	80 91 33 01 	lds	r24, 0x0133
     c2c:	81 11       	cpse	r24, r1
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <m_usb_rx_char+0x12>
     c30:	9f bf       	out	0x3f, r25	; 63
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	08 95       	ret
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	80 93 e9 00 	sts	0x00E9, r24
     c3c:	80 91 e8 00 	lds	r24, 0x00E8
     c40:	85 fd       	sbrc	r24, 5
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <m_usb_rx_char+0x26>
     c44:	9f bf       	out	0x3f, r25	; 63
     c46:	8f ef       	ldi	r24, 0xFF	; 255
     c48:	08 95       	ret
     c4a:	80 91 f1 00 	lds	r24, 0x00F1
     c4e:	20 91 e8 00 	lds	r18, 0x00E8
     c52:	25 fd       	sbrc	r18, 5
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <m_usb_rx_char+0x38>
     c56:	2b e6       	ldi	r18, 0x6B	; 107
     c58:	20 93 e8 00 	sts	0x00E8, r18
     c5c:	9f bf       	out	0x3f, r25	; 63
     c5e:	08 95       	ret

00000c60 <m_usb_rx_available>:
     c60:	9f b7       	in	r25, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	80 91 33 01 	lds	r24, 0x0133
     c68:	88 23       	and	r24, r24
     c6a:	31 f0       	breq	.+12     	; 0xc78 <m_usb_rx_available+0x18>
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	80 93 e9 00 	sts	0x00E9, r24
     c72:	80 91 f2 00 	lds	r24, 0x00F2
     c76:	01 c0       	rjmp	.+2      	; 0xc7a <m_usb_rx_available+0x1a>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	9f bf       	out	0x3f, r25	; 63
     c7c:	08 95       	ret

00000c7e <m_usb_rx_flush>:
     c7e:	80 91 33 01 	lds	r24, 0x0133
     c82:	88 23       	and	r24, r24
     c84:	89 f0       	breq	.+34     	; 0xca8 <m_usb_rx_flush+0x2a>
     c86:	2f b7       	in	r18, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	80 93 e9 00 	sts	0x00E9, r24
     c90:	80 91 e8 00 	lds	r24, 0x00E8
     c94:	85 ff       	sbrs	r24, 5
     c96:	07 c0       	rjmp	.+14     	; 0xca6 <m_usb_rx_flush+0x28>
     c98:	e8 ee       	ldi	r30, 0xE8	; 232
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	9b e6       	ldi	r25, 0x6B	; 107
     c9e:	90 83       	st	Z, r25
     ca0:	80 81       	ld	r24, Z
     ca2:	85 fd       	sbrc	r24, 5
     ca4:	fc cf       	rjmp	.-8      	; 0xc9e <m_usb_rx_flush+0x20>
     ca6:	2f bf       	out	0x3f, r18	; 63
     ca8:	08 95       	ret

00000caa <m_usb_tx_char>:
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	90 91 33 01 	lds	r25, 0x0133
     cb2:	99 23       	and	r25, r25
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <m_usb_tx_char+0xe>
     cb6:	4c c0       	rjmp	.+152    	; 0xd50 <m_usb_tx_char+0xa6>
     cb8:	9f b7       	in	r25, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	24 e0       	ldi	r18, 0x04	; 4
     cbe:	20 93 e9 00 	sts	0x00E9, r18
     cc2:	20 91 31 01 	lds	r18, 0x0131
     cc6:	22 23       	and	r18, r18
     cc8:	49 f0       	breq	.+18     	; 0xcdc <m_usb_tx_char+0x32>
     cca:	20 91 e8 00 	lds	r18, 0x00E8
     cce:	25 fd       	sbrc	r18, 5
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <m_usb_tx_char+0x2e>
     cd2:	9f bf       	out	0x3f, r25	; 63
     cd4:	8f ef       	ldi	r24, 0xFF	; 255
     cd6:	41 c0       	rjmp	.+130    	; 0xd5a <m_usb_tx_char+0xb0>
     cd8:	10 92 31 01 	sts	0x0131, r1
     cdc:	30 91 e4 00 	lds	r19, 0x00E4
     ce0:	37 5e       	subi	r19, 0xE7	; 231
     ce2:	20 91 e8 00 	lds	r18, 0x00E8
     ce6:	25 fd       	sbrc	r18, 5
     ce8:	24 c0       	rjmp	.+72     	; 0xd32 <m_usb_tx_char+0x88>
     cea:	9f bf       	out	0x3f, r25	; 63
     cec:	90 91 e4 00 	lds	r25, 0x00E4
     cf0:	93 17       	cp	r25, r19
     cf2:	81 f0       	breq	.+32     	; 0xd14 <m_usb_tx_char+0x6a>
     cf4:	90 91 33 01 	lds	r25, 0x0133
     cf8:	99 23       	and	r25, r25
     cfa:	61 f1       	breq	.+88     	; 0xd54 <m_usb_tx_char+0xaa>
     cfc:	a9 ee       	ldi	r26, 0xE9	; 233
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	44 e0       	ldi	r20, 0x04	; 4
     d02:	e8 ee       	ldi	r30, 0xE8	; 232
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	c4 ee       	ldi	r28, 0xE4	; 228
     d08:	d0 e0       	ldi	r29, 0x00	; 0
     d0a:	0d c0       	rjmp	.+26     	; 0xd26 <m_usb_tx_char+0x7c>
     d0c:	9f bf       	out	0x3f, r25	; 63
     d0e:	98 81       	ld	r25, Y
     d10:	93 13       	cpse	r25, r19
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <m_usb_tx_char+0x74>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	80 93 31 01 	sts	0x0131, r24
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	1e c0       	rjmp	.+60     	; 0xd5a <m_usb_tx_char+0xb0>
     d1e:	90 91 33 01 	lds	r25, 0x0133
     d22:	99 23       	and	r25, r25
     d24:	c9 f0       	breq	.+50     	; 0xd58 <m_usb_tx_char+0xae>
     d26:	9f b7       	in	r25, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	4c 93       	st	X, r20
     d2c:	20 81       	ld	r18, Z
     d2e:	25 ff       	sbrs	r18, 5
     d30:	ed cf       	rjmp	.-38     	; 0xd0c <m_usb_tx_char+0x62>
     d32:	80 93 f1 00 	sts	0x00F1, r24
     d36:	80 91 e8 00 	lds	r24, 0x00E8
     d3a:	85 fd       	sbrc	r24, 5
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <m_usb_tx_char+0x9a>
     d3e:	8a e3       	ldi	r24, 0x3A	; 58
     d40:	80 93 e8 00 	sts	0x00E8, r24
     d44:	85 e0       	ldi	r24, 0x05	; 5
     d46:	80 93 32 01 	sts	0x0132, r24
     d4a:	9f bf       	out	0x3f, r25	; 63
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	05 c0       	rjmp	.+10     	; 0xd5a <m_usb_tx_char+0xb0>
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	03 c0       	rjmp	.+6      	; 0xd5a <m_usb_tx_char+0xb0>
     d54:	8f ef       	ldi	r24, 0xFF	; 255
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <m_usb_tx_char+0xb0>
     d58:	8f ef       	ldi	r24, 0xFF	; 255
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret

00000d60 <__vector_10>:
     d60:	1f 92       	push	r1
     d62:	0f 92       	push	r0
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	0f 92       	push	r0
     d68:	11 24       	eor	r1, r1
     d6a:	8f 93       	push	r24
     d6c:	9f 93       	push	r25
     d6e:	ef 93       	push	r30
     d70:	ff 93       	push	r31
     d72:	e1 ee       	ldi	r30, 0xE1	; 225
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	10 82       	st	Z, r1
     d7a:	83 ff       	sbrs	r24, 3
     d7c:	11 c0       	rjmp	.+34     	; 0xda0 <__vector_10+0x40>
     d7e:	10 92 e9 00 	sts	0x00E9, r1
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	90 93 eb 00 	sts	0x00EB, r25
     d88:	10 92 ec 00 	sts	0x00EC, r1
     d8c:	92 e1       	ldi	r25, 0x12	; 18
     d8e:	90 93 ed 00 	sts	0x00ED, r25
     d92:	98 e0       	ldi	r25, 0x08	; 8
     d94:	90 93 f0 00 	sts	0x00F0, r25
     d98:	10 92 33 01 	sts	0x0133, r1
     d9c:	10 92 30 01 	sts	0x0130, r1
     da0:	82 ff       	sbrs	r24, 2
     da2:	13 c0       	rjmp	.+38     	; 0xdca <__vector_10+0x6a>
     da4:	80 91 33 01 	lds	r24, 0x0133
     da8:	88 23       	and	r24, r24
     daa:	79 f0       	breq	.+30     	; 0xdca <__vector_10+0x6a>
     dac:	80 91 32 01 	lds	r24, 0x0132
     db0:	88 23       	and	r24, r24
     db2:	59 f0       	breq	.+22     	; 0xdca <__vector_10+0x6a>
     db4:	81 50       	subi	r24, 0x01	; 1
     db6:	80 93 32 01 	sts	0x0132, r24
     dba:	81 11       	cpse	r24, r1
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <__vector_10+0x6a>
     dbe:	84 e0       	ldi	r24, 0x04	; 4
     dc0:	80 93 e9 00 	sts	0x00E9, r24
     dc4:	8a e3       	ldi	r24, 0x3A	; 58
     dc6:	80 93 e8 00 	sts	0x00E8, r24
     dca:	ff 91       	pop	r31
     dcc:	ef 91       	pop	r30
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <__vector_11>:
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	ef 93       	push	r30
     e04:	ff 93       	push	r31
     e06:	10 92 e9 00 	sts	0x00E9, r1
     e0a:	80 91 e8 00 	lds	r24, 0x00E8
     e0e:	83 ff       	sbrs	r24, 3
     e10:	4c c1       	rjmp	.+664    	; 0x10aa <__vector_11+0x2ce>
     e12:	e1 ef       	ldi	r30, 0xF1	; 241
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	60 81       	ld	r22, Z
     e18:	80 81       	ld	r24, Z
     e1a:	20 81       	ld	r18, Z
     e1c:	90 81       	ld	r25, Z
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	39 2b       	or	r19, r25
     e22:	40 81       	ld	r20, Z
     e24:	90 81       	ld	r25, Z
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	59 2b       	or	r21, r25
     e2a:	70 81       	ld	r23, Z
     e2c:	c0 81       	ld	r28, Z
     e2e:	92 ef       	ldi	r25, 0xF2	; 242
     e30:	90 93 e8 00 	sts	0x00E8, r25
     e34:	86 30       	cpi	r24, 0x06	; 6
     e36:	09 f0       	breq	.+2      	; 0xe3a <__vector_11+0x5e>
     e38:	58 c0       	rjmp	.+176    	; 0xeea <__vector_11+0x10e>
     e3a:	04 c0       	rjmp	.+8      	; 0xe44 <__vector_11+0x68>
     e3c:	81 e2       	ldi	r24, 0x21	; 33
     e3e:	80 93 eb 00 	sts	0x00EB, r24
     e42:	3a c1       	rjmp	.+628    	; 0x10b8 <__vector_11+0x2dc>
     e44:	66 e0       	ldi	r22, 0x06	; 6
     e46:	8e ef       	ldi	r24, 0xFE	; 254
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	fc 01       	movw	r30, r24
     e4c:	a5 91       	lpm	r26, Z+
     e4e:	b4 91       	lpm	r27, Z
     e50:	2a 17       	cp	r18, r26
     e52:	3b 07       	cpc	r19, r27
     e54:	11 f0       	breq	.+4      	; 0xe5a <__vector_11+0x7e>
     e56:	07 96       	adiw	r24, 0x07	; 7
     e58:	23 c0       	rjmp	.+70     	; 0xea0 <__vector_11+0xc4>
     e5a:	fc 01       	movw	r30, r24
     e5c:	32 96       	adiw	r30, 0x02	; 2
     e5e:	a5 91       	lpm	r26, Z+
     e60:	b4 91       	lpm	r27, Z
     e62:	4a 17       	cp	r20, r26
     e64:	5b 07       	cpc	r21, r27
     e66:	11 f0       	breq	.+4      	; 0xe6c <__vector_11+0x90>
     e68:	07 96       	adiw	r24, 0x07	; 7
     e6a:	1a c0       	rjmp	.+52     	; 0xea0 <__vector_11+0xc4>
     e6c:	fc 01       	movw	r30, r24
     e6e:	34 96       	adiw	r30, 0x04	; 4
     e70:	45 91       	lpm	r20, Z+
     e72:	54 91       	lpm	r21, Z
     e74:	fc 01       	movw	r30, r24
     e76:	36 96       	adiw	r30, 0x06	; 6
     e78:	24 91       	lpm	r18, Z
     e7a:	87 2f       	mov	r24, r23
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9c 2b       	or	r25, r28
     e80:	8f 3f       	cpi	r24, 0xFF	; 255
     e82:	91 05       	cpc	r25, r1
     e84:	19 f0       	breq	.+6      	; 0xe8c <__vector_11+0xb0>
     e86:	10 f0       	brcs	.+4      	; 0xe8c <__vector_11+0xb0>
     e88:	8f ef       	ldi	r24, 0xFF	; 255
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	82 17       	cp	r24, r18
     e8e:	08 f4       	brcc	.+2      	; 0xe92 <__vector_11+0xb6>
     e90:	28 2f       	mov	r18, r24
     e92:	a8 ee       	ldi	r26, 0xE8	; 232
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	70 e1       	ldi	r23, 0x10	; 16
     e98:	6e ef       	ldi	r22, 0xFE	; 254
     e9a:	c1 ef       	ldi	r28, 0xF1	; 241
     e9c:	d0 e0       	ldi	r29, 0x00	; 0
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <__vector_11+0xca>
     ea0:	61 50       	subi	r22, 0x01	; 1
     ea2:	99 f6       	brne	.-90     	; 0xe4a <__vector_11+0x6e>
     ea4:	cb cf       	rjmp	.-106    	; 0xe3c <__vector_11+0x60>
     ea6:	8c 91       	ld	r24, X
     ea8:	98 2f       	mov	r25, r24
     eaa:	95 70       	andi	r25, 0x05	; 5
     eac:	e1 f3       	breq	.-8      	; 0xea6 <__vector_11+0xca>
     eae:	82 fd       	sbrc	r24, 2
     eb0:	03 c1       	rjmp	.+518    	; 0x10b8 <__vector_11+0x2dc>
     eb2:	32 2f       	mov	r19, r18
     eb4:	21 31       	cpi	r18, 0x11	; 17
     eb6:	08 f0       	brcs	.+2      	; 0xeba <__vector_11+0xde>
     eb8:	37 2f       	mov	r19, r23
     eba:	33 23       	and	r19, r19
     ebc:	09 f4       	brne	.+2      	; 0xec0 <__vector_11+0xe4>
     ebe:	f9 c0       	rjmp	.+498    	; 0x10b2 <__vector_11+0x2d6>
     ec0:	fa 01       	movw	r30, r20
     ec2:	83 2f       	mov	r24, r19
     ec4:	94 91       	lpm	r25, Z
     ec6:	98 83       	st	Y, r25
     ec8:	81 50       	subi	r24, 0x01	; 1
     eca:	31 96       	adiw	r30, 0x01	; 1
     ecc:	81 11       	cpse	r24, r1
     ece:	fa cf       	rjmp	.-12     	; 0xec4 <__vector_11+0xe8>
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	83 0f       	add	r24, r19
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	48 0f       	add	r20, r24
     eda:	59 1f       	adc	r21, r25
     edc:	23 1b       	sub	r18, r19
     ede:	6c 93       	st	X, r22
     ee0:	21 11       	cpse	r18, r1
     ee2:	e1 cf       	rjmp	.-62     	; 0xea6 <__vector_11+0xca>
     ee4:	30 31       	cpi	r19, 0x10	; 16
     ee6:	f9 f2       	breq	.-66     	; 0xea6 <__vector_11+0xca>
     ee8:	e7 c0       	rjmp	.+462    	; 0x10b8 <__vector_11+0x2dc>
     eea:	85 30       	cpi	r24, 0x05	; 5
     eec:	61 f4       	brne	.+24     	; 0xf06 <__vector_11+0x12a>
     eee:	8e ef       	ldi	r24, 0xFE	; 254
     ef0:	80 93 e8 00 	sts	0x00E8, r24
     ef4:	e8 ee       	ldi	r30, 0xE8	; 232
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 ff       	sbrs	r24, 0
     efc:	fd cf       	rjmp	.-6      	; 0xef8 <__vector_11+0x11c>
     efe:	20 68       	ori	r18, 0x80	; 128
     f00:	20 93 e3 00 	sts	0x00E3, r18
     f04:	d9 c0       	rjmp	.+434    	; 0x10b8 <__vector_11+0x2dc>
     f06:	89 30       	cpi	r24, 0x09	; 9
     f08:	09 f0       	breq	.+2      	; 0xf0c <__vector_11+0x130>
     f0a:	35 c0       	rjmp	.+106    	; 0xf76 <__vector_11+0x19a>
     f0c:	61 11       	cpse	r22, r1
     f0e:	cd c0       	rjmp	.+410    	; 0x10aa <__vector_11+0x2ce>
     f10:	20 93 33 01 	sts	0x0133, r18
     f14:	10 92 30 01 	sts	0x0130, r1
     f18:	10 92 32 01 	sts	0x0132, r1
     f1c:	8e ef       	ldi	r24, 0xFE	; 254
     f1e:	80 93 e8 00 	sts	0x00E8, r24
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	27 ea       	ldi	r18, 0xA7	; 167
     f26:	31 e0       	ldi	r19, 0x01	; 1
     f28:	c9 ee       	ldi	r28, 0xE9	; 233
     f2a:	d0 e0       	ldi	r29, 0x00	; 0
     f2c:	ab ee       	ldi	r26, 0xEB	; 235
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	0c ee       	ldi	r16, 0xEC	; 236
     f32:	10 e0       	ldi	r17, 0x00	; 0
     f34:	6d ee       	ldi	r22, 0xED	; 237
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	88 83       	st	Y, r24
     f3a:	a9 01       	movw	r20, r18
     f3c:	4f 5f       	subi	r20, 0xFF	; 255
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	f9 01       	movw	r30, r18
     f42:	94 91       	lpm	r25, Z
     f44:	9c 93       	st	X, r25
     f46:	99 23       	and	r25, r25
     f48:	61 f0       	breq	.+24     	; 0xf62 <__vector_11+0x186>
     f4a:	fa 01       	movw	r30, r20
     f4c:	44 91       	lpm	r20, Z
     f4e:	f8 01       	movw	r30, r16
     f50:	40 83       	st	Z, r20
     f52:	f9 01       	movw	r30, r18
     f54:	32 96       	adiw	r30, 0x02	; 2
     f56:	94 91       	lpm	r25, Z
     f58:	2d 5f       	subi	r18, 0xFD	; 253
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	fb 01       	movw	r30, r22
     f5e:	90 83       	st	Z, r25
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <__vector_11+0x188>
     f62:	9a 01       	movw	r18, r20
     f64:	8f 5f       	subi	r24, 0xFF	; 255
     f66:	85 30       	cpi	r24, 0x05	; 5
     f68:	39 f7       	brne	.-50     	; 0xf38 <__vector_11+0x15c>
     f6a:	ea ee       	ldi	r30, 0xEA	; 234
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	8e e1       	ldi	r24, 0x1E	; 30
     f70:	80 83       	st	Z, r24
     f72:	10 82       	st	Z, r1
     f74:	a1 c0       	rjmp	.+322    	; 0x10b8 <__vector_11+0x2dc>
     f76:	88 30       	cpi	r24, 0x08	; 8
     f78:	81 f4       	brne	.+32     	; 0xf9a <__vector_11+0x1be>
     f7a:	60 38       	cpi	r22, 0x80	; 128
     f7c:	09 f0       	breq	.+2      	; 0xf80 <__vector_11+0x1a4>
     f7e:	95 c0       	rjmp	.+298    	; 0x10aa <__vector_11+0x2ce>
     f80:	e8 ee       	ldi	r30, 0xE8	; 232
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 ff       	sbrs	r24, 0
     f88:	fd cf       	rjmp	.-6      	; 0xf84 <__vector_11+0x1a8>
     f8a:	80 91 33 01 	lds	r24, 0x0133
     f8e:	80 93 f1 00 	sts	0x00F1, r24
     f92:	8e ef       	ldi	r24, 0xFE	; 254
     f94:	80 93 e8 00 	sts	0x00E8, r24
     f98:	8f c0       	rjmp	.+286    	; 0x10b8 <__vector_11+0x2dc>
     f9a:	81 32       	cpi	r24, 0x21	; 33
     f9c:	b9 f4       	brne	.+46     	; 0xfcc <__vector_11+0x1f0>
     f9e:	61 3a       	cpi	r22, 0xA1	; 161
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <__vector_11+0x1c8>
     fa2:	83 c0       	rjmp	.+262    	; 0x10aa <__vector_11+0x2ce>
     fa4:	e8 ee       	ldi	r30, 0xE8	; 232
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	80 ff       	sbrs	r24, 0
     fac:	fd cf       	rjmp	.-6      	; 0xfa8 <__vector_11+0x1cc>
     fae:	e0 e0       	ldi	r30, 0x00	; 0
     fb0:	f1 e0       	ldi	r31, 0x01	; 1
     fb2:	27 e0       	ldi	r18, 0x07	; 7
     fb4:	31 e0       	ldi	r19, 0x01	; 1
     fb6:	a1 ef       	ldi	r26, 0xF1	; 241
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	81 91       	ld	r24, Z+
     fbc:	8c 93       	st	X, r24
     fbe:	e2 17       	cp	r30, r18
     fc0:	f3 07       	cpc	r31, r19
     fc2:	d9 f7       	brne	.-10     	; 0xfba <__vector_11+0x1de>
     fc4:	8e ef       	ldi	r24, 0xFE	; 254
     fc6:	80 93 e8 00 	sts	0x00E8, r24
     fca:	76 c0       	rjmp	.+236    	; 0x10b8 <__vector_11+0x2dc>
     fcc:	80 32       	cpi	r24, 0x20	; 32
     fce:	d1 f4       	brne	.+52     	; 0x1004 <__vector_11+0x228>
     fd0:	61 32       	cpi	r22, 0x21	; 33
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <__vector_11+0x1fa>
     fd4:	6a c0       	rjmp	.+212    	; 0x10aa <__vector_11+0x2ce>
     fd6:	e8 ee       	ldi	r30, 0xE8	; 232
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	82 ff       	sbrs	r24, 2
     fde:	fd cf       	rjmp	.-6      	; 0xfda <__vector_11+0x1fe>
     fe0:	e0 e0       	ldi	r30, 0x00	; 0
     fe2:	f1 e0       	ldi	r31, 0x01	; 1
     fe4:	27 e0       	ldi	r18, 0x07	; 7
     fe6:	31 e0       	ldi	r19, 0x01	; 1
     fe8:	a1 ef       	ldi	r26, 0xF1	; 241
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	8c 91       	ld	r24, X
     fee:	81 93       	st	Z+, r24
     ff0:	e2 17       	cp	r30, r18
     ff2:	f3 07       	cpc	r31, r19
     ff4:	d9 f7       	brne	.-10     	; 0xfec <__vector_11+0x210>
     ff6:	e8 ee       	ldi	r30, 0xE8	; 232
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	8b ef       	ldi	r24, 0xFB	; 251
     ffc:	80 83       	st	Z, r24
     ffe:	8e ef       	ldi	r24, 0xFE	; 254
    1000:	80 83       	st	Z, r24
    1002:	5a c0       	rjmp	.+180    	; 0x10b8 <__vector_11+0x2dc>
    1004:	82 32       	cpi	r24, 0x22	; 34
    1006:	71 f4       	brne	.+28     	; 0x1024 <__vector_11+0x248>
    1008:	61 32       	cpi	r22, 0x21	; 33
    100a:	09 f0       	breq	.+2      	; 0x100e <__vector_11+0x232>
    100c:	4e c0       	rjmp	.+156    	; 0x10aa <__vector_11+0x2ce>
    100e:	20 93 30 01 	sts	0x0130, r18
    1012:	e8 ee       	ldi	r30, 0xE8	; 232
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	80 ff       	sbrs	r24, 0
    101a:	fd cf       	rjmp	.-6      	; 0x1016 <__vector_11+0x23a>
    101c:	8e ef       	ldi	r24, 0xFE	; 254
    101e:	80 93 e8 00 	sts	0x00E8, r24
    1022:	4a c0       	rjmp	.+148    	; 0x10b8 <__vector_11+0x2dc>
    1024:	81 11       	cpse	r24, r1
    1026:	1a c0       	rjmp	.+52     	; 0x105c <__vector_11+0x280>
    1028:	e8 ee       	ldi	r30, 0xE8	; 232
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	80 ff       	sbrs	r24, 0
    1030:	fd cf       	rjmp	.-6      	; 0x102c <__vector_11+0x250>
    1032:	62 38       	cpi	r22, 0x82	; 130
    1034:	51 f4       	brne	.+20     	; 0x104a <__vector_11+0x26e>
    1036:	e9 ee       	ldi	r30, 0xE9	; 233
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	40 83       	st	Z, r20
    103c:	80 91 eb 00 	lds	r24, 0x00EB
    1040:	85 fb       	bst	r24, 5
    1042:	88 27       	eor	r24, r24
    1044:	80 f9       	bld	r24, 0
    1046:	10 82       	st	Z, r1
    1048:	01 c0       	rjmp	.+2      	; 0x104c <__vector_11+0x270>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	e1 ef       	ldi	r30, 0xF1	; 241
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 83       	st	Z, r24
    1052:	10 82       	st	Z, r1
    1054:	8e ef       	ldi	r24, 0xFE	; 254
    1056:	80 93 e8 00 	sts	0x00E8, r24
    105a:	2e c0       	rjmp	.+92     	; 0x10b8 <__vector_11+0x2dc>
    105c:	98 2f       	mov	r25, r24
    105e:	9d 7f       	andi	r25, 0xFD	; 253
    1060:	91 30       	cpi	r25, 0x01	; 1
    1062:	19 f5       	brne	.+70     	; 0x10aa <__vector_11+0x2ce>
    1064:	62 30       	cpi	r22, 0x02	; 2
    1066:	09 f5       	brne	.+66     	; 0x10aa <__vector_11+0x2ce>
    1068:	23 2b       	or	r18, r19
    106a:	f9 f4       	brne	.+62     	; 0x10aa <__vector_11+0x2ce>
    106c:	4f 77       	andi	r20, 0x7F	; 127
    106e:	9f ef       	ldi	r25, 0xFF	; 255
    1070:	94 0f       	add	r25, r20
    1072:	94 30       	cpi	r25, 0x04	; 4
    1074:	d0 f4       	brcc	.+52     	; 0x10aa <__vector_11+0x2ce>
    1076:	9e ef       	ldi	r25, 0xFE	; 254
    1078:	90 93 e8 00 	sts	0x00E8, r25
    107c:	40 93 e9 00 	sts	0x00E9, r20
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	21 f4       	brne	.+8      	; 0x108c <__vector_11+0x2b0>
    1084:	81 e2       	ldi	r24, 0x21	; 33
    1086:	80 93 eb 00 	sts	0x00EB, r24
    108a:	16 c0       	rjmp	.+44     	; 0x10b8 <__vector_11+0x2dc>
    108c:	89 e1       	ldi	r24, 0x19	; 25
    108e:	80 93 eb 00 	sts	0x00EB, r24
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 c0       	rjmp	.+4      	; 0x109c <__vector_11+0x2c0>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	4a 95       	dec	r20
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <__vector_11+0x2bc>
    10a0:	ea ee       	ldi	r30, 0xEA	; 234
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 83       	st	Z, r24
    10a6:	10 82       	st	Z, r1
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <__vector_11+0x2dc>
    10aa:	81 e2       	ldi	r24, 0x21	; 33
    10ac:	80 93 eb 00 	sts	0x00EB, r24
    10b0:	03 c0       	rjmp	.+6      	; 0x10b8 <__vector_11+0x2dc>
    10b2:	6c 93       	st	X, r22
    10b4:	21 11       	cpse	r18, r1
    10b6:	f7 ce       	rjmp	.-530    	; 0xea6 <__vector_11+0xca>
    10b8:	ff 91       	pop	r31
    10ba:	ef 91       	pop	r30
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	0f 90       	pop	r0
    10de:	1f 90       	pop	r1
    10e0:	18 95       	reti

000010e2 <print_P>:
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	8c 01       	movw	r16, r24
    10ea:	0f 5f       	subi	r16, 0xFF	; 255
    10ec:	1f 4f       	sbci	r17, 0xFF	; 255
    10ee:	fc 01       	movw	r30, r24
    10f0:	c4 91       	lpm	r28, Z
    10f2:	cc 23       	and	r28, r28
    10f4:	71 f0       	breq	.+28     	; 0x1112 <print_P+0x30>
    10f6:	ca 30       	cpi	r28, 0x0A	; 10
    10f8:	19 f4       	brne	.+6      	; 0x1100 <print_P+0x1e>
    10fa:	8d e0       	ldi	r24, 0x0D	; 13
    10fc:	0e 94 55 06 	call	0xcaa	; 0xcaa <m_usb_tx_char>
    1100:	8c 2f       	mov	r24, r28
    1102:	0e 94 55 06 	call	0xcaa	; 0xcaa <m_usb_tx_char>
    1106:	f8 01       	movw	r30, r16
    1108:	c4 91       	lpm	r28, Z
    110a:	0f 5f       	subi	r16, 0xFF	; 255
    110c:	1f 4f       	sbci	r17, 0xFF	; 255
    110e:	c1 11       	cpse	r28, r1
    1110:	f2 cf       	rjmp	.-28     	; 0x10f6 <print_P+0x14>
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <m_usb_tx_int>:
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	27 97       	sbiw	r28, 0x07	; 7
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	8e 01       	movw	r16, r28
    1138:	0f 5f       	subi	r16, 0xFF	; 255
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	27 e0       	ldi	r18, 0x07	; 7
    113e:	f8 01       	movw	r30, r16
    1140:	11 92       	st	Z+, r1
    1142:	2a 95       	dec	r18
    1144:	e9 f7       	brne	.-6      	; 0x1140 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1146:	4a e0       	ldi	r20, 0x0A	; 10
    1148:	b8 01       	movw	r22, r16
    114a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__itoa_ncheck>
    114e:	7e 01       	movw	r14, r28
    1150:	f8 e0       	ldi	r31, 0x08	; 8
    1152:	ef 0e       	add	r14, r31
    1154:	f1 1c       	adc	r15, r1
    1156:	f8 01       	movw	r30, r16
    1158:	81 91       	ld	r24, Z+
    115a:	8f 01       	movw	r16, r30
    115c:	81 11       	cpse	r24, r1
    115e:	0e 94 55 06 	call	0xcaa	; 0xcaa <m_usb_tx_char>
    1162:	0e 15       	cp	r16, r14
    1164:	1f 05       	cpc	r17, r15
    1166:	b9 f7       	brne	.-18     	; 0x1156 <m_usb_tx_int+0x3c>
    1168:	27 96       	adiw	r28, 0x07	; 7
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	08 95       	ret

00001182 <twi_wait>:
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	ec eb       	ldi	r30, 0xBC	; 188
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	88 23       	and	r24, r24
    118e:	34 f0       	brlt	.+12     	; 0x119c <twi_wait+0x1a>
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	29 3e       	cpi	r18, 0xE9	; 233
    1196:	83 e0       	ldi	r24, 0x03	; 3
    1198:	38 07       	cpc	r19, r24
    119a:	b9 f7       	brne	.-18     	; 0x118a <twi_wait+0x8>
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	28 3e       	cpi	r18, 0xE8	; 232
    11a0:	33 40       	sbci	r19, 0x03	; 3
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <twi_wait+0x24>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	08 95       	ret

000011a8 <send_byte>:
    11a8:	80 93 bb 00 	sts	0x00BB, r24
    11ac:	84 e8       	ldi	r24, 0x84	; 132
    11ae:	80 93 bc 00 	sts	0x00BC, r24
    11b2:	0e 94 c1 08 	call	0x1182	; 0x1182 <twi_wait>
    11b6:	88 23       	and	r24, r24
    11b8:	19 f0       	breq	.+6      	; 0x11c0 <send_byte+0x18>
    11ba:	80 91 b9 00 	lds	r24, 0x00B9
    11be:	88 7f       	andi	r24, 0xF8	; 248
    11c0:	08 95       	ret

000011c2 <start_write>:
    11c2:	cf 93       	push	r28
    11c4:	c8 2f       	mov	r28, r24
    11c6:	94 ea       	ldi	r25, 0xA4	; 164
    11c8:	90 93 bc 00 	sts	0x00BC, r25
    11cc:	0e 94 c1 08 	call	0x1182	; 0x1182 <twi_wait>
    11d0:	88 23       	and	r24, r24
    11d2:	61 f0       	breq	.+24     	; 0x11ec <start_write+0x2a>
    11d4:	8c 2f       	mov	r24, r28
    11d6:	88 0f       	add	r24, r24
    11d8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    11dc:	80 32       	cpi	r24, 0x20	; 32
    11de:	29 f4       	brne	.+10     	; 0x11ea <start_write+0x28>
    11e0:	84 e9       	ldi	r24, 0x94	; 148
    11e2:	80 93 bc 00 	sts	0x00BC, r24
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <start_write+0x2a>
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <m_wii_open>:
    11f0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <m_bus_init>
    11f4:	88 e5       	ldi	r24, 0x58	; 88
    11f6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <start_write>
    11fa:	88 23       	and	r24, r24
    11fc:	09 f4       	brne	.+2      	; 0x1200 <m_wii_open+0x10>
    11fe:	cd c0       	rjmp	.+410    	; 0x139a <m_wii_open+0x1aa>
    1200:	80 e3       	ldi	r24, 0x30	; 48
    1202:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    1206:	88 23       	and	r24, r24
    1208:	09 f4       	brne	.+2      	; 0x120c <m_wii_open+0x1c>
    120a:	c9 c0       	rjmp	.+402    	; 0x139e <m_wii_open+0x1ae>
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    1212:	88 23       	and	r24, r24
    1214:	09 f4       	brne	.+2      	; 0x1218 <m_wii_open+0x28>
    1216:	c5 c0       	rjmp	.+394    	; 0x13a2 <m_wii_open+0x1b2>
    1218:	84 e9       	ldi	r24, 0x94	; 148
    121a:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    121e:	83 ec       	ldi	r24, 0xC3	; 195
    1220:	99 e0       	ldi	r25, 0x09	; 9
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <m_wii_open+0x32>
    1226:	00 c0       	rjmp	.+0      	; 0x1228 <m_wii_open+0x38>
    1228:	00 00       	nop
    122a:	88 e5       	ldi	r24, 0x58	; 88
    122c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <start_write>
    1230:	88 23       	and	r24, r24
    1232:	09 f4       	brne	.+2      	; 0x1236 <m_wii_open+0x46>
    1234:	b8 c0       	rjmp	.+368    	; 0x13a6 <m_wii_open+0x1b6>
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    123c:	88 23       	and	r24, r24
    123e:	09 f4       	brne	.+2      	; 0x1242 <m_wii_open+0x52>
    1240:	b4 c0       	rjmp	.+360    	; 0x13aa <m_wii_open+0x1ba>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    1248:	88 23       	and	r24, r24
    124a:	09 f4       	brne	.+2      	; 0x124e <m_wii_open+0x5e>
    124c:	b0 c0       	rjmp	.+352    	; 0x13ae <m_wii_open+0x1be>
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    1254:	88 23       	and	r24, r24
    1256:	09 f4       	brne	.+2      	; 0x125a <m_wii_open+0x6a>
    1258:	ac c0       	rjmp	.+344    	; 0x13b2 <m_wii_open+0x1c2>
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    1260:	88 23       	and	r24, r24
    1262:	09 f4       	brne	.+2      	; 0x1266 <m_wii_open+0x76>
    1264:	a8 c0       	rjmp	.+336    	; 0x13b6 <m_wii_open+0x1c6>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    126c:	88 23       	and	r24, r24
    126e:	09 f4       	brne	.+2      	; 0x1272 <m_wii_open+0x82>
    1270:	a4 c0       	rjmp	.+328    	; 0x13ba <m_wii_open+0x1ca>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    1278:	88 23       	and	r24, r24
    127a:	09 f4       	brne	.+2      	; 0x127e <m_wii_open+0x8e>
    127c:	a0 c0       	rjmp	.+320    	; 0x13be <m_wii_open+0x1ce>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    1284:	88 23       	and	r24, r24
    1286:	09 f4       	brne	.+2      	; 0x128a <m_wii_open+0x9a>
    1288:	9c c0       	rjmp	.+312    	; 0x13c2 <m_wii_open+0x1d2>
    128a:	80 e9       	ldi	r24, 0x90	; 144
    128c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    1290:	88 23       	and	r24, r24
    1292:	09 f4       	brne	.+2      	; 0x1296 <m_wii_open+0xa6>
    1294:	98 c0       	rjmp	.+304    	; 0x13c6 <m_wii_open+0x1d6>
    1296:	84 e9       	ldi	r24, 0x94	; 148
    1298:	80 93 bc 00 	sts	0x00BC, r24
    129c:	83 ec       	ldi	r24, 0xC3	; 195
    129e:	99 e0       	ldi	r25, 0x09	; 9
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <m_wii_open+0xb0>
    12a4:	00 c0       	rjmp	.+0      	; 0x12a6 <m_wii_open+0xb6>
    12a6:	00 00       	nop
    12a8:	88 e5       	ldi	r24, 0x58	; 88
    12aa:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <start_write>
    12ae:	88 23       	and	r24, r24
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <m_wii_open+0xc4>
    12b2:	8b c0       	rjmp	.+278    	; 0x13ca <m_wii_open+0x1da>
    12b4:	87 e0       	ldi	r24, 0x07	; 7
    12b6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    12ba:	88 23       	and	r24, r24
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <m_wii_open+0xd0>
    12be:	87 c0       	rjmp	.+270    	; 0x13ce <m_wii_open+0x1de>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    12c6:	88 23       	and	r24, r24
    12c8:	09 f4       	brne	.+2      	; 0x12cc <m_wii_open+0xdc>
    12ca:	83 c0       	rjmp	.+262    	; 0x13d2 <m_wii_open+0x1e2>
    12cc:	81 e4       	ldi	r24, 0x41	; 65
    12ce:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    12d2:	88 23       	and	r24, r24
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <m_wii_open+0xe8>
    12d6:	7f c0       	rjmp	.+254    	; 0x13d6 <m_wii_open+0x1e6>
    12d8:	84 e9       	ldi	r24, 0x94	; 148
    12da:	80 93 bc 00 	sts	0x00BC, r24
    12de:	83 ec       	ldi	r24, 0xC3	; 195
    12e0:	99 e0       	ldi	r25, 0x09	; 9
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <m_wii_open+0xf2>
    12e6:	00 c0       	rjmp	.+0      	; 0x12e8 <m_wii_open+0xf8>
    12e8:	00 00       	nop
    12ea:	88 e5       	ldi	r24, 0x58	; 88
    12ec:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <start_write>
    12f0:	88 23       	and	r24, r24
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <m_wii_open+0x106>
    12f4:	72 c0       	rjmp	.+228    	; 0x13da <m_wii_open+0x1ea>
    12f6:	8a e1       	ldi	r24, 0x1A	; 26
    12f8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    12fc:	88 23       	and	r24, r24
    12fe:	09 f4       	brne	.+2      	; 0x1302 <m_wii_open+0x112>
    1300:	6e c0       	rjmp	.+220    	; 0x13de <m_wii_open+0x1ee>
    1302:	80 e4       	ldi	r24, 0x40	; 64
    1304:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    1308:	88 23       	and	r24, r24
    130a:	09 f4       	brne	.+2      	; 0x130e <m_wii_open+0x11e>
    130c:	6a c0       	rjmp	.+212    	; 0x13e2 <m_wii_open+0x1f2>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    1314:	88 23       	and	r24, r24
    1316:	09 f4       	brne	.+2      	; 0x131a <m_wii_open+0x12a>
    1318:	66 c0       	rjmp	.+204    	; 0x13e6 <m_wii_open+0x1f6>
    131a:	84 e9       	ldi	r24, 0x94	; 148
    131c:	80 93 bc 00 	sts	0x00BC, r24
    1320:	83 ec       	ldi	r24, 0xC3	; 195
    1322:	99 e0       	ldi	r25, 0x09	; 9
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <m_wii_open+0x134>
    1328:	00 c0       	rjmp	.+0      	; 0x132a <m_wii_open+0x13a>
    132a:	00 00       	nop
    132c:	88 e5       	ldi	r24, 0x58	; 88
    132e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <start_write>
    1332:	88 23       	and	r24, r24
    1334:	09 f4       	brne	.+2      	; 0x1338 <m_wii_open+0x148>
    1336:	59 c0       	rjmp	.+178    	; 0x13ea <m_wii_open+0x1fa>
    1338:	83 e3       	ldi	r24, 0x33	; 51
    133a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    133e:	88 23       	and	r24, r24
    1340:	09 f4       	brne	.+2      	; 0x1344 <m_wii_open+0x154>
    1342:	55 c0       	rjmp	.+170    	; 0x13ee <m_wii_open+0x1fe>
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    134a:	88 23       	and	r24, r24
    134c:	09 f4       	brne	.+2      	; 0x1350 <m_wii_open+0x160>
    134e:	51 c0       	rjmp	.+162    	; 0x13f2 <m_wii_open+0x202>
    1350:	84 e9       	ldi	r24, 0x94	; 148
    1352:	80 93 bc 00 	sts	0x00BC, r24
    1356:	83 ec       	ldi	r24, 0xC3	; 195
    1358:	99 e0       	ldi	r25, 0x09	; 9
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <m_wii_open+0x16a>
    135e:	00 c0       	rjmp	.+0      	; 0x1360 <m_wii_open+0x170>
    1360:	00 00       	nop
    1362:	88 e5       	ldi	r24, 0x58	; 88
    1364:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <start_write>
    1368:	88 23       	and	r24, r24
    136a:	09 f4       	brne	.+2      	; 0x136e <m_wii_open+0x17e>
    136c:	44 c0       	rjmp	.+136    	; 0x13f6 <m_wii_open+0x206>
    136e:	80 e3       	ldi	r24, 0x30	; 48
    1370:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    1374:	88 23       	and	r24, r24
    1376:	09 f4       	brne	.+2      	; 0x137a <m_wii_open+0x18a>
    1378:	40 c0       	rjmp	.+128    	; 0x13fa <m_wii_open+0x20a>
    137a:	88 e0       	ldi	r24, 0x08	; 8
    137c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    1380:	88 23       	and	r24, r24
    1382:	e9 f1       	breq	.+122    	; 0x13fe <m_wii_open+0x20e>
    1384:	84 e9       	ldi	r24, 0x94	; 148
    1386:	80 93 bc 00 	sts	0x00BC, r24
    138a:	83 ec       	ldi	r24, 0xC3	; 195
    138c:	99 e0       	ldi	r25, 0x09	; 9
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <m_wii_open+0x19e>
    1392:	00 c0       	rjmp	.+0      	; 0x1394 <m_wii_open+0x1a4>
    1394:	00 00       	nop
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	08 95       	ret
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	08 95       	ret
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	08 95       	ret
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	08 95       	ret
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	08 95       	ret
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	08 95       	ret
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	08 95       	ret
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	08 95       	ret
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	08 95       	ret
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	08 95       	ret
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	08 95       	ret
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	08 95       	ret
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	08 95       	ret
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	08 95       	ret
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	08 95       	ret
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	08 95       	ret
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	08 95       	ret
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	08 95       	ret
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	08 95       	ret
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	08 95       	ret
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	08 95       	ret
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	08 95       	ret
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	08 95       	ret
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	08 95       	ret
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	08 95       	ret
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	08 95       	ret
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	08 95       	ret

00001402 <start_read>:
    1402:	cf 93       	push	r28
    1404:	c8 2f       	mov	r28, r24
    1406:	84 ea       	ldi	r24, 0xA4	; 164
    1408:	80 93 bc 00 	sts	0x00BC, r24
    140c:	0e 94 c1 08 	call	0x1182	; 0x1182 <twi_wait>
    1410:	88 23       	and	r24, r24
    1412:	69 f0       	breq	.+26     	; 0x142e <start_read+0x2c>
    1414:	8c 2f       	mov	r24, r28
    1416:	88 0f       	add	r24, r24
    1418:	8f 5f       	subi	r24, 0xFF	; 255
    141a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    141e:	88 34       	cpi	r24, 0x48	; 72
    1420:	29 f4       	brne	.+10     	; 0x142c <start_read+0x2a>
    1422:	84 e9       	ldi	r24, 0x94	; 148
    1424:	80 93 bc 00 	sts	0x00BC, r24
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	01 c0       	rjmp	.+2      	; 0x142e <start_read+0x2c>
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	cf 91       	pop	r28
    1430:	08 95       	ret

00001432 <m_wii_read>:
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	60 97       	sbiw	r28, 0x10	; 16
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	8c 01       	movw	r16, r24
    144c:	fe 01       	movw	r30, r28
    144e:	31 96       	adiw	r30, 0x01	; 1
    1450:	80 e1       	ldi	r24, 0x10	; 16
    1452:	df 01       	movw	r26, r30
    1454:	1d 92       	st	X+, r1
    1456:	8a 95       	dec	r24
    1458:	e9 f7       	brne	.-6      	; 0x1454 <m_wii_read+0x22>
    145a:	88 e5       	ldi	r24, 0x58	; 88
    145c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <start_write>
    1460:	88 23       	and	r24, r24
    1462:	09 f4       	brne	.+2      	; 0x1466 <m_wii_read+0x34>
    1464:	69 c0       	rjmp	.+210    	; 0x1538 <m_wii_read+0x106>
    1466:	86 e3       	ldi	r24, 0x36	; 54
    1468:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <send_byte>
    146c:	88 23       	and	r24, r24
    146e:	09 f4       	brne	.+2      	; 0x1472 <m_wii_read+0x40>
    1470:	65 c0       	rjmp	.+202    	; 0x153c <m_wii_read+0x10a>
    1472:	84 e9       	ldi	r24, 0x94	; 148
    1474:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1478:	b8 e0       	ldi	r27, 0x08	; 8
    147a:	ba 95       	dec	r27
    147c:	f1 f7       	brne	.-4      	; 0x147a <m_wii_read+0x48>
    147e:	00 00       	nop
    1480:	88 e5       	ldi	r24, 0x58	; 88
    1482:	0e 94 01 0a 	call	0x1402	; 0x1402 <start_read>
    1486:	88 23       	and	r24, r24
    1488:	09 f4       	brne	.+2      	; 0x148c <m_wii_read+0x5a>
    148a:	5a c0       	rjmp	.+180    	; 0x1540 <m_wii_read+0x10e>
    148c:	be 01       	movw	r22, r28
    148e:	6f 5f       	subi	r22, 0xFF	; 255
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	ae 01       	movw	r20, r28
    1494:	40 5f       	subi	r20, 0xF0	; 240
    1496:	5f 4f       	sbci	r21, 0xFF	; 255
    1498:	ec eb       	ldi	r30, 0xBC	; 188
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	84 ec       	ldi	r24, 0xC4	; 196
    149e:	2b eb       	ldi	r18, 0xBB	; 187
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	80 83       	st	Z, r24
    14a4:	90 81       	ld	r25, Z
    14a6:	99 23       	and	r25, r25
    14a8:	ec f7       	brge	.-6      	; 0x14a4 <m_wii_read+0x72>
    14aa:	d9 01       	movw	r26, r18
    14ac:	9c 91       	ld	r25, X
    14ae:	db 01       	movw	r26, r22
    14b0:	9d 93       	st	X+, r25
    14b2:	bd 01       	movw	r22, r26
    14b4:	a4 17       	cp	r26, r20
    14b6:	b5 07       	cpc	r27, r21
    14b8:	a1 f7       	brne	.-24     	; 0x14a2 <m_wii_read+0x70>
    14ba:	84 e8       	ldi	r24, 0x84	; 132
    14bc:	80 93 bc 00 	sts	0x00BC, r24
    14c0:	ec eb       	ldi	r30, 0xBC	; 188
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	88 23       	and	r24, r24
    14c8:	ec f7       	brge	.-6      	; 0x14c4 <m_wii_read+0x92>
    14ca:	80 91 bb 00 	lds	r24, 0x00BB
    14ce:	88 8b       	std	Y+16, r24	; 0x10
    14d0:	84 e9       	ldi	r24, 0x94	; 148
    14d2:	80 93 bc 00 	sts	0x00BC, r24
    14d6:	be 01       	movw	r22, r28
    14d8:	6c 5f       	subi	r22, 0xFC	; 252
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	f8 01       	movw	r30, r16
    14de:	08 5e       	subi	r16, 0xE8	; 232
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
    14e2:	db 01       	movw	r26, r22
    14e4:	2c 91       	ld	r18, X
    14e6:	32 2f       	mov	r19, r18
    14e8:	30 73       	andi	r19, 0x30	; 48
    14ea:	cb 01       	movw	r24, r22
    14ec:	02 97       	sbiw	r24, 0x02	; 2
    14ee:	dc 01       	movw	r26, r24
    14f0:	8c 91       	ld	r24, X
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	b0 e1       	ldi	r27, 0x10	; 16
    14f6:	3b 9f       	mul	r19, r27
    14f8:	80 0d       	add	r24, r0
    14fa:	91 1d       	adc	r25, r1
    14fc:	11 24       	eor	r1, r1
    14fe:	91 83       	std	Z+1, r25	; 0x01
    1500:	80 83       	st	Z, r24
    1502:	42 2f       	mov	r20, r18
    1504:	40 7c       	andi	r20, 0xC0	; 192
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	44 0f       	add	r20, r20
    150a:	55 1f       	adc	r21, r21
    150c:	44 0f       	add	r20, r20
    150e:	55 1f       	adc	r21, r21
    1510:	cb 01       	movw	r24, r22
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	dc 01       	movw	r26, r24
    1516:	8c 91       	ld	r24, X
    1518:	48 0f       	add	r20, r24
    151a:	51 1d       	adc	r21, r1
    151c:	53 83       	std	Z+3, r21	; 0x03
    151e:	42 83       	std	Z+2, r20	; 0x02
    1520:	2f 70       	andi	r18, 0x0F	; 15
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	35 83       	std	Z+5, r19	; 0x05
    1526:	24 83       	std	Z+4, r18	; 0x04
    1528:	6d 5f       	subi	r22, 0xFD	; 253
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	36 96       	adiw	r30, 0x06	; 6
    152e:	e0 17       	cp	r30, r16
    1530:	f1 07       	cpc	r31, r17
    1532:	b9 f6       	brne	.-82     	; 0x14e2 <m_wii_read+0xb0>
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	05 c0       	rjmp	.+10     	; 0x1542 <m_wii_read+0x110>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <m_wii_read+0x110>
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <m_wii_read+0x110>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	60 96       	adiw	r28, 0x10	; 16
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	08 95       	ret

00001558 <__subsf3>:
    1558:	50 58       	subi	r21, 0x80	; 128

0000155a <__addsf3>:
    155a:	bb 27       	eor	r27, r27
    155c:	aa 27       	eor	r26, r26
    155e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__addsf3x>
    1562:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__fp_round>
    1566:	0e 94 a5 0c 	call	0x194a	; 0x194a <__fp_pscA>
    156a:	38 f0       	brcs	.+14     	; 0x157a <__addsf3+0x20>
    156c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fp_pscB>
    1570:	20 f0       	brcs	.+8      	; 0x157a <__addsf3+0x20>
    1572:	39 f4       	brne	.+14     	; 0x1582 <__addsf3+0x28>
    1574:	9f 3f       	cpi	r25, 0xFF	; 255
    1576:	19 f4       	brne	.+6      	; 0x157e <__addsf3+0x24>
    1578:	26 f4       	brtc	.+8      	; 0x1582 <__addsf3+0x28>
    157a:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__fp_nan>
    157e:	0e f4       	brtc	.+2      	; 0x1582 <__addsf3+0x28>
    1580:	e0 95       	com	r30
    1582:	e7 fb       	bst	r30, 7
    1584:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__fp_inf>

00001588 <__addsf3x>:
    1588:	e9 2f       	mov	r30, r25
    158a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fp_split3>
    158e:	58 f3       	brcs	.-42     	; 0x1566 <__addsf3+0xc>
    1590:	ba 17       	cp	r27, r26
    1592:	62 07       	cpc	r22, r18
    1594:	73 07       	cpc	r23, r19
    1596:	84 07       	cpc	r24, r20
    1598:	95 07       	cpc	r25, r21
    159a:	20 f0       	brcs	.+8      	; 0x15a4 <__addsf3x+0x1c>
    159c:	79 f4       	brne	.+30     	; 0x15bc <__addsf3x+0x34>
    159e:	a6 f5       	brtc	.+104    	; 0x1608 <__addsf3x+0x80>
    15a0:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__fp_zero>
    15a4:	0e f4       	brtc	.+2      	; 0x15a8 <__addsf3x+0x20>
    15a6:	e0 95       	com	r30
    15a8:	0b 2e       	mov	r0, r27
    15aa:	ba 2f       	mov	r27, r26
    15ac:	a0 2d       	mov	r26, r0
    15ae:	0b 01       	movw	r0, r22
    15b0:	b9 01       	movw	r22, r18
    15b2:	90 01       	movw	r18, r0
    15b4:	0c 01       	movw	r0, r24
    15b6:	ca 01       	movw	r24, r20
    15b8:	a0 01       	movw	r20, r0
    15ba:	11 24       	eor	r1, r1
    15bc:	ff 27       	eor	r31, r31
    15be:	59 1b       	sub	r21, r25
    15c0:	99 f0       	breq	.+38     	; 0x15e8 <__addsf3x+0x60>
    15c2:	59 3f       	cpi	r21, 0xF9	; 249
    15c4:	50 f4       	brcc	.+20     	; 0x15da <__addsf3x+0x52>
    15c6:	50 3e       	cpi	r21, 0xE0	; 224
    15c8:	68 f1       	brcs	.+90     	; 0x1624 <__addsf3x+0x9c>
    15ca:	1a 16       	cp	r1, r26
    15cc:	f0 40       	sbci	r31, 0x00	; 0
    15ce:	a2 2f       	mov	r26, r18
    15d0:	23 2f       	mov	r18, r19
    15d2:	34 2f       	mov	r19, r20
    15d4:	44 27       	eor	r20, r20
    15d6:	58 5f       	subi	r21, 0xF8	; 248
    15d8:	f3 cf       	rjmp	.-26     	; 0x15c0 <__addsf3x+0x38>
    15da:	46 95       	lsr	r20
    15dc:	37 95       	ror	r19
    15de:	27 95       	ror	r18
    15e0:	a7 95       	ror	r26
    15e2:	f0 40       	sbci	r31, 0x00	; 0
    15e4:	53 95       	inc	r21
    15e6:	c9 f7       	brne	.-14     	; 0x15da <__addsf3x+0x52>
    15e8:	7e f4       	brtc	.+30     	; 0x1608 <__addsf3x+0x80>
    15ea:	1f 16       	cp	r1, r31
    15ec:	ba 0b       	sbc	r27, r26
    15ee:	62 0b       	sbc	r22, r18
    15f0:	73 0b       	sbc	r23, r19
    15f2:	84 0b       	sbc	r24, r20
    15f4:	ba f0       	brmi	.+46     	; 0x1624 <__addsf3x+0x9c>
    15f6:	91 50       	subi	r25, 0x01	; 1
    15f8:	a1 f0       	breq	.+40     	; 0x1622 <__addsf3x+0x9a>
    15fa:	ff 0f       	add	r31, r31
    15fc:	bb 1f       	adc	r27, r27
    15fe:	66 1f       	adc	r22, r22
    1600:	77 1f       	adc	r23, r23
    1602:	88 1f       	adc	r24, r24
    1604:	c2 f7       	brpl	.-16     	; 0x15f6 <__addsf3x+0x6e>
    1606:	0e c0       	rjmp	.+28     	; 0x1624 <__addsf3x+0x9c>
    1608:	ba 0f       	add	r27, r26
    160a:	62 1f       	adc	r22, r18
    160c:	73 1f       	adc	r23, r19
    160e:	84 1f       	adc	r24, r20
    1610:	48 f4       	brcc	.+18     	; 0x1624 <__addsf3x+0x9c>
    1612:	87 95       	ror	r24
    1614:	77 95       	ror	r23
    1616:	67 95       	ror	r22
    1618:	b7 95       	ror	r27
    161a:	f7 95       	ror	r31
    161c:	9e 3f       	cpi	r25, 0xFE	; 254
    161e:	08 f0       	brcs	.+2      	; 0x1622 <__addsf3x+0x9a>
    1620:	b0 cf       	rjmp	.-160    	; 0x1582 <__addsf3+0x28>
    1622:	93 95       	inc	r25
    1624:	88 0f       	add	r24, r24
    1626:	08 f0       	brcs	.+2      	; 0x162a <__addsf3x+0xa2>
    1628:	99 27       	eor	r25, r25
    162a:	ee 0f       	add	r30, r30
    162c:	97 95       	ror	r25
    162e:	87 95       	ror	r24
    1630:	08 95       	ret
    1632:	0e 94 a5 0c 	call	0x194a	; 0x194a <__fp_pscA>
    1636:	60 f0       	brcs	.+24     	; 0x1650 <__addsf3x+0xc8>
    1638:	80 e8       	ldi	r24, 0x80	; 128
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	09 f4       	brne	.+2      	; 0x1640 <__addsf3x+0xb8>
    163e:	9e ef       	ldi	r25, 0xFE	; 254
    1640:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fp_pscB>
    1644:	28 f0       	brcs	.+10     	; 0x1650 <__addsf3x+0xc8>
    1646:	40 e8       	ldi	r20, 0x80	; 128
    1648:	51 e0       	ldi	r21, 0x01	; 1
    164a:	71 f4       	brne	.+28     	; 0x1668 <atan2+0x10>
    164c:	5e ef       	ldi	r21, 0xFE	; 254
    164e:	0c c0       	rjmp	.+24     	; 0x1668 <atan2+0x10>
    1650:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__fp_nan>
    1654:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__fp_zero>

00001658 <atan2>:
    1658:	e9 2f       	mov	r30, r25
    165a:	e0 78       	andi	r30, 0x80	; 128
    165c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fp_split3>
    1660:	40 f3       	brcs	.-48     	; 0x1632 <__addsf3x+0xaa>
    1662:	09 2e       	mov	r0, r25
    1664:	05 2a       	or	r0, r21
    1666:	b1 f3       	breq	.-20     	; 0x1654 <__addsf3x+0xcc>
    1668:	26 17       	cp	r18, r22
    166a:	37 07       	cpc	r19, r23
    166c:	48 07       	cpc	r20, r24
    166e:	59 07       	cpc	r21, r25
    1670:	38 f0       	brcs	.+14     	; 0x1680 <atan2+0x28>
    1672:	0e 2e       	mov	r0, r30
    1674:	07 f8       	bld	r0, 7
    1676:	e0 25       	eor	r30, r0
    1678:	69 f0       	breq	.+26     	; 0x1694 <atan2+0x3c>
    167a:	e0 25       	eor	r30, r0
    167c:	e0 64       	ori	r30, 0x40	; 64
    167e:	0a c0       	rjmp	.+20     	; 0x1694 <atan2+0x3c>
    1680:	ef 63       	ori	r30, 0x3F	; 63
    1682:	07 f8       	bld	r0, 7
    1684:	00 94       	com	r0
    1686:	07 fa       	bst	r0, 7
    1688:	db 01       	movw	r26, r22
    168a:	b9 01       	movw	r22, r18
    168c:	9d 01       	movw	r18, r26
    168e:	dc 01       	movw	r26, r24
    1690:	ca 01       	movw	r24, r20
    1692:	ad 01       	movw	r20, r26
    1694:	ef 93       	push	r30
    1696:	0e 94 a7 0b 	call	0x174e	; 0x174e <__divsf3_pse>
    169a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fp_round>
    169e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <atan>
    16a2:	5f 91       	pop	r21
    16a4:	55 23       	and	r21, r21
    16a6:	39 f0       	breq	.+14     	; 0x16b6 <atan2+0x5e>
    16a8:	2b ed       	ldi	r18, 0xDB	; 219
    16aa:	3f e0       	ldi	r19, 0x0F	; 15
    16ac:	49 e4       	ldi	r20, 0x49	; 73
    16ae:	50 fd       	sbrc	r21, 0
    16b0:	49 ec       	ldi	r20, 0xC9	; 201
    16b2:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <__addsf3>
    16b6:	08 95       	ret

000016b8 <atan>:
    16b8:	df 93       	push	r29
    16ba:	dd 27       	eor	r29, r29
    16bc:	b9 2f       	mov	r27, r25
    16be:	bf 77       	andi	r27, 0x7F	; 127
    16c0:	40 e8       	ldi	r20, 0x80	; 128
    16c2:	5f e3       	ldi	r21, 0x3F	; 63
    16c4:	16 16       	cp	r1, r22
    16c6:	17 06       	cpc	r1, r23
    16c8:	48 07       	cpc	r20, r24
    16ca:	5b 07       	cpc	r21, r27
    16cc:	18 f4       	brcc	.+6      	; 0x16d4 <atan+0x1c>
    16ce:	d9 2f       	mov	r29, r25
    16d0:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <inverse>
    16d4:	9f 93       	push	r25
    16d6:	8f 93       	push	r24
    16d8:	7f 93       	push	r23
    16da:	6f 93       	push	r22
    16dc:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <square>
    16e0:	ec ea       	ldi	r30, 0xAC	; 172
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fp_powser>
    16e8:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fp_round>
    16ec:	2f 91       	pop	r18
    16ee:	3f 91       	pop	r19
    16f0:	4f 91       	pop	r20
    16f2:	5f 91       	pop	r21
    16f4:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3x>
    16f8:	dd 23       	and	r29, r29
    16fa:	51 f0       	breq	.+20     	; 0x1710 <atan+0x58>
    16fc:	90 58       	subi	r25, 0x80	; 128
    16fe:	a2 ea       	ldi	r26, 0xA2	; 162
    1700:	2a ed       	ldi	r18, 0xDA	; 218
    1702:	3f e0       	ldi	r19, 0x0F	; 15
    1704:	49 ec       	ldi	r20, 0xC9	; 201
    1706:	5f e3       	ldi	r21, 0x3F	; 63
    1708:	d0 78       	andi	r29, 0x80	; 128
    170a:	5d 27       	eor	r21, r29
    170c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__addsf3x>
    1710:	df 91       	pop	r29
    1712:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__fp_round>

00001716 <cos>:
    1716:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_rempio2>
    171a:	e3 95       	inc	r30
    171c:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__fp_sinus>

00001720 <__divsf3>:
    1720:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3x>
    1724:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__fp_round>
    1728:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fp_pscB>
    172c:	58 f0       	brcs	.+22     	; 0x1744 <__divsf3+0x24>
    172e:	0e 94 a5 0c 	call	0x194a	; 0x194a <__fp_pscA>
    1732:	40 f0       	brcs	.+16     	; 0x1744 <__divsf3+0x24>
    1734:	29 f4       	brne	.+10     	; 0x1740 <__divsf3+0x20>
    1736:	5f 3f       	cpi	r21, 0xFF	; 255
    1738:	29 f0       	breq	.+10     	; 0x1744 <__divsf3+0x24>
    173a:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__fp_inf>
    173e:	51 11       	cpse	r21, r1
    1740:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__fp_szero>
    1744:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__fp_nan>

00001748 <__divsf3x>:
    1748:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fp_split3>
    174c:	68 f3       	brcs	.-38     	; 0x1728 <__divsf3+0x8>

0000174e <__divsf3_pse>:
    174e:	99 23       	and	r25, r25
    1750:	b1 f3       	breq	.-20     	; 0x173e <__divsf3+0x1e>
    1752:	55 23       	and	r21, r21
    1754:	91 f3       	breq	.-28     	; 0x173a <__divsf3+0x1a>
    1756:	95 1b       	sub	r25, r21
    1758:	55 0b       	sbc	r21, r21
    175a:	bb 27       	eor	r27, r27
    175c:	aa 27       	eor	r26, r26
    175e:	62 17       	cp	r22, r18
    1760:	73 07       	cpc	r23, r19
    1762:	84 07       	cpc	r24, r20
    1764:	38 f0       	brcs	.+14     	; 0x1774 <__divsf3_pse+0x26>
    1766:	9f 5f       	subi	r25, 0xFF	; 255
    1768:	5f 4f       	sbci	r21, 0xFF	; 255
    176a:	22 0f       	add	r18, r18
    176c:	33 1f       	adc	r19, r19
    176e:	44 1f       	adc	r20, r20
    1770:	aa 1f       	adc	r26, r26
    1772:	a9 f3       	breq	.-22     	; 0x175e <__divsf3_pse+0x10>
    1774:	35 d0       	rcall	.+106    	; 0x17e0 <__divsf3_pse+0x92>
    1776:	0e 2e       	mov	r0, r30
    1778:	3a f0       	brmi	.+14     	; 0x1788 <__divsf3_pse+0x3a>
    177a:	e0 e8       	ldi	r30, 0x80	; 128
    177c:	32 d0       	rcall	.+100    	; 0x17e2 <__divsf3_pse+0x94>
    177e:	91 50       	subi	r25, 0x01	; 1
    1780:	50 40       	sbci	r21, 0x00	; 0
    1782:	e6 95       	lsr	r30
    1784:	00 1c       	adc	r0, r0
    1786:	ca f7       	brpl	.-14     	; 0x177a <__divsf3_pse+0x2c>
    1788:	2b d0       	rcall	.+86     	; 0x17e0 <__divsf3_pse+0x92>
    178a:	fe 2f       	mov	r31, r30
    178c:	29 d0       	rcall	.+82     	; 0x17e0 <__divsf3_pse+0x92>
    178e:	66 0f       	add	r22, r22
    1790:	77 1f       	adc	r23, r23
    1792:	88 1f       	adc	r24, r24
    1794:	bb 1f       	adc	r27, r27
    1796:	26 17       	cp	r18, r22
    1798:	37 07       	cpc	r19, r23
    179a:	48 07       	cpc	r20, r24
    179c:	ab 07       	cpc	r26, r27
    179e:	b0 e8       	ldi	r27, 0x80	; 128
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <__divsf3_pse+0x56>
    17a2:	bb 0b       	sbc	r27, r27
    17a4:	80 2d       	mov	r24, r0
    17a6:	bf 01       	movw	r22, r30
    17a8:	ff 27       	eor	r31, r31
    17aa:	93 58       	subi	r25, 0x83	; 131
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255
    17ae:	3a f0       	brmi	.+14     	; 0x17be <__divsf3_pse+0x70>
    17b0:	9e 3f       	cpi	r25, 0xFE	; 254
    17b2:	51 05       	cpc	r21, r1
    17b4:	78 f0       	brcs	.+30     	; 0x17d4 <__divsf3_pse+0x86>
    17b6:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__fp_inf>
    17ba:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__fp_szero>
    17be:	5f 3f       	cpi	r21, 0xFF	; 255
    17c0:	e4 f3       	brlt	.-8      	; 0x17ba <__divsf3_pse+0x6c>
    17c2:	98 3e       	cpi	r25, 0xE8	; 232
    17c4:	d4 f3       	brlt	.-12     	; 0x17ba <__divsf3_pse+0x6c>
    17c6:	86 95       	lsr	r24
    17c8:	77 95       	ror	r23
    17ca:	67 95       	ror	r22
    17cc:	b7 95       	ror	r27
    17ce:	f7 95       	ror	r31
    17d0:	9f 5f       	subi	r25, 0xFF	; 255
    17d2:	c9 f7       	brne	.-14     	; 0x17c6 <__divsf3_pse+0x78>
    17d4:	88 0f       	add	r24, r24
    17d6:	91 1d       	adc	r25, r1
    17d8:	96 95       	lsr	r25
    17da:	87 95       	ror	r24
    17dc:	97 f9       	bld	r25, 7
    17de:	08 95       	ret
    17e0:	e1 e0       	ldi	r30, 0x01	; 1
    17e2:	66 0f       	add	r22, r22
    17e4:	77 1f       	adc	r23, r23
    17e6:	88 1f       	adc	r24, r24
    17e8:	bb 1f       	adc	r27, r27
    17ea:	62 17       	cp	r22, r18
    17ec:	73 07       	cpc	r23, r19
    17ee:	84 07       	cpc	r24, r20
    17f0:	ba 07       	cpc	r27, r26
    17f2:	20 f0       	brcs	.+8      	; 0x17fc <__divsf3_pse+0xae>
    17f4:	62 1b       	sub	r22, r18
    17f6:	73 0b       	sbc	r23, r19
    17f8:	84 0b       	sbc	r24, r20
    17fa:	ba 0b       	sbc	r27, r26
    17fc:	ee 1f       	adc	r30, r30
    17fe:	88 f7       	brcc	.-30     	; 0x17e2 <__divsf3_pse+0x94>
    1800:	e0 95       	com	r30
    1802:	08 95       	ret

00001804 <__fixsfsi>:
    1804:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fixunssfsi>
    1808:	68 94       	set
    180a:	b1 11       	cpse	r27, r1
    180c:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__fp_szero>
    1810:	08 95       	ret

00001812 <__fixunssfsi>:
    1812:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fp_splitA>
    1816:	88 f0       	brcs	.+34     	; 0x183a <__fixunssfsi+0x28>
    1818:	9f 57       	subi	r25, 0x7F	; 127
    181a:	98 f0       	brcs	.+38     	; 0x1842 <__fixunssfsi+0x30>
    181c:	b9 2f       	mov	r27, r25
    181e:	99 27       	eor	r25, r25
    1820:	b7 51       	subi	r27, 0x17	; 23
    1822:	b0 f0       	brcs	.+44     	; 0x1850 <__fixunssfsi+0x3e>
    1824:	e1 f0       	breq	.+56     	; 0x185e <__fixunssfsi+0x4c>
    1826:	66 0f       	add	r22, r22
    1828:	77 1f       	adc	r23, r23
    182a:	88 1f       	adc	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	1a f0       	brmi	.+6      	; 0x1836 <__fixunssfsi+0x24>
    1830:	ba 95       	dec	r27
    1832:	c9 f7       	brne	.-14     	; 0x1826 <__fixunssfsi+0x14>
    1834:	14 c0       	rjmp	.+40     	; 0x185e <__fixunssfsi+0x4c>
    1836:	b1 30       	cpi	r27, 0x01	; 1
    1838:	91 f0       	breq	.+36     	; 0x185e <__fixunssfsi+0x4c>
    183a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__fp_zero>
    183e:	b1 e0       	ldi	r27, 0x01	; 1
    1840:	08 95       	ret
    1842:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__fp_zero>
    1846:	67 2f       	mov	r22, r23
    1848:	78 2f       	mov	r23, r24
    184a:	88 27       	eor	r24, r24
    184c:	b8 5f       	subi	r27, 0xF8	; 248
    184e:	39 f0       	breq	.+14     	; 0x185e <__fixunssfsi+0x4c>
    1850:	b9 3f       	cpi	r27, 0xF9	; 249
    1852:	cc f3       	brlt	.-14     	; 0x1846 <__fixunssfsi+0x34>
    1854:	86 95       	lsr	r24
    1856:	77 95       	ror	r23
    1858:	67 95       	ror	r22
    185a:	b3 95       	inc	r27
    185c:	d9 f7       	brne	.-10     	; 0x1854 <__fixunssfsi+0x42>
    185e:	3e f4       	brtc	.+14     	; 0x186e <__fixunssfsi+0x5c>
    1860:	90 95       	com	r25
    1862:	80 95       	com	r24
    1864:	70 95       	com	r23
    1866:	61 95       	neg	r22
    1868:	7f 4f       	sbci	r23, 0xFF	; 255
    186a:	8f 4f       	sbci	r24, 0xFF	; 255
    186c:	9f 4f       	sbci	r25, 0xFF	; 255
    186e:	08 95       	ret

00001870 <__floatunsisf>:
    1870:	e8 94       	clt
    1872:	09 c0       	rjmp	.+18     	; 0x1886 <__floatsisf+0x12>

00001874 <__floatsisf>:
    1874:	97 fb       	bst	r25, 7
    1876:	3e f4       	brtc	.+14     	; 0x1886 <__floatsisf+0x12>
    1878:	90 95       	com	r25
    187a:	80 95       	com	r24
    187c:	70 95       	com	r23
    187e:	61 95       	neg	r22
    1880:	7f 4f       	sbci	r23, 0xFF	; 255
    1882:	8f 4f       	sbci	r24, 0xFF	; 255
    1884:	9f 4f       	sbci	r25, 0xFF	; 255
    1886:	99 23       	and	r25, r25
    1888:	a9 f0       	breq	.+42     	; 0x18b4 <__floatsisf+0x40>
    188a:	f9 2f       	mov	r31, r25
    188c:	96 e9       	ldi	r25, 0x96	; 150
    188e:	bb 27       	eor	r27, r27
    1890:	93 95       	inc	r25
    1892:	f6 95       	lsr	r31
    1894:	87 95       	ror	r24
    1896:	77 95       	ror	r23
    1898:	67 95       	ror	r22
    189a:	b7 95       	ror	r27
    189c:	f1 11       	cpse	r31, r1
    189e:	f8 cf       	rjmp	.-16     	; 0x1890 <__floatsisf+0x1c>
    18a0:	fa f4       	brpl	.+62     	; 0x18e0 <__floatsisf+0x6c>
    18a2:	bb 0f       	add	r27, r27
    18a4:	11 f4       	brne	.+4      	; 0x18aa <__floatsisf+0x36>
    18a6:	60 ff       	sbrs	r22, 0
    18a8:	1b c0       	rjmp	.+54     	; 0x18e0 <__floatsisf+0x6c>
    18aa:	6f 5f       	subi	r22, 0xFF	; 255
    18ac:	7f 4f       	sbci	r23, 0xFF	; 255
    18ae:	8f 4f       	sbci	r24, 0xFF	; 255
    18b0:	9f 4f       	sbci	r25, 0xFF	; 255
    18b2:	16 c0       	rjmp	.+44     	; 0x18e0 <__floatsisf+0x6c>
    18b4:	88 23       	and	r24, r24
    18b6:	11 f0       	breq	.+4      	; 0x18bc <__floatsisf+0x48>
    18b8:	96 e9       	ldi	r25, 0x96	; 150
    18ba:	11 c0       	rjmp	.+34     	; 0x18de <__floatsisf+0x6a>
    18bc:	77 23       	and	r23, r23
    18be:	21 f0       	breq	.+8      	; 0x18c8 <__floatsisf+0x54>
    18c0:	9e e8       	ldi	r25, 0x8E	; 142
    18c2:	87 2f       	mov	r24, r23
    18c4:	76 2f       	mov	r23, r22
    18c6:	05 c0       	rjmp	.+10     	; 0x18d2 <__floatsisf+0x5e>
    18c8:	66 23       	and	r22, r22
    18ca:	71 f0       	breq	.+28     	; 0x18e8 <__floatsisf+0x74>
    18cc:	96 e8       	ldi	r25, 0x86	; 134
    18ce:	86 2f       	mov	r24, r22
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	2a f0       	brmi	.+10     	; 0x18e0 <__floatsisf+0x6c>
    18d6:	9a 95       	dec	r25
    18d8:	66 0f       	add	r22, r22
    18da:	77 1f       	adc	r23, r23
    18dc:	88 1f       	adc	r24, r24
    18de:	da f7       	brpl	.-10     	; 0x18d6 <__floatsisf+0x62>
    18e0:	88 0f       	add	r24, r24
    18e2:	96 95       	lsr	r25
    18e4:	87 95       	ror	r24
    18e6:	97 f9       	bld	r25, 7
    18e8:	08 95       	ret

000018ea <__fp_inf>:
    18ea:	97 f9       	bld	r25, 7
    18ec:	9f 67       	ori	r25, 0x7F	; 127
    18ee:	80 e8       	ldi	r24, 0x80	; 128
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	08 95       	ret

000018f6 <__fp_nan>:
    18f6:	9f ef       	ldi	r25, 0xFF	; 255
    18f8:	80 ec       	ldi	r24, 0xC0	; 192
    18fa:	08 95       	ret

000018fc <__fp_powser>:
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	1f 93       	push	r17
    1902:	0f 93       	push	r16
    1904:	ff 92       	push	r15
    1906:	ef 92       	push	r14
    1908:	df 92       	push	r13
    190a:	7b 01       	movw	r14, r22
    190c:	8c 01       	movw	r16, r24
    190e:	68 94       	set
    1910:	06 c0       	rjmp	.+12     	; 0x191e <__fp_powser+0x22>
    1912:	da 2e       	mov	r13, r26
    1914:	ef 01       	movw	r28, r30
    1916:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3x>
    191a:	fe 01       	movw	r30, r28
    191c:	e8 94       	clt
    191e:	a5 91       	lpm	r26, Z+
    1920:	25 91       	lpm	r18, Z+
    1922:	35 91       	lpm	r19, Z+
    1924:	45 91       	lpm	r20, Z+
    1926:	55 91       	lpm	r21, Z+
    1928:	a6 f3       	brts	.-24     	; 0x1912 <__fp_powser+0x16>
    192a:	ef 01       	movw	r28, r30
    192c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__addsf3x>
    1930:	fe 01       	movw	r30, r28
    1932:	97 01       	movw	r18, r14
    1934:	a8 01       	movw	r20, r16
    1936:	da 94       	dec	r13
    1938:	69 f7       	brne	.-38     	; 0x1914 <__fp_powser+0x18>
    193a:	df 90       	pop	r13
    193c:	ef 90       	pop	r14
    193e:	ff 90       	pop	r15
    1940:	0f 91       	pop	r16
    1942:	1f 91       	pop	r17
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <__fp_pscA>:
    194a:	00 24       	eor	r0, r0
    194c:	0a 94       	dec	r0
    194e:	16 16       	cp	r1, r22
    1950:	17 06       	cpc	r1, r23
    1952:	18 06       	cpc	r1, r24
    1954:	09 06       	cpc	r0, r25
    1956:	08 95       	ret

00001958 <__fp_pscB>:
    1958:	00 24       	eor	r0, r0
    195a:	0a 94       	dec	r0
    195c:	12 16       	cp	r1, r18
    195e:	13 06       	cpc	r1, r19
    1960:	14 06       	cpc	r1, r20
    1962:	05 06       	cpc	r0, r21
    1964:	08 95       	ret
    1966:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__fp_nan>

0000196a <__fp_rempio2>:
    196a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fp_splitA>
    196e:	d8 f3       	brcs	.-10     	; 0x1966 <__fp_pscB+0xe>
    1970:	e8 94       	clt
    1972:	e0 e0       	ldi	r30, 0x00	; 0
    1974:	bb 27       	eor	r27, r27
    1976:	9f 57       	subi	r25, 0x7F	; 127
    1978:	f0 f0       	brcs	.+60     	; 0x19b6 <__fp_rempio2+0x4c>
    197a:	2a ed       	ldi	r18, 0xDA	; 218
    197c:	3f e0       	ldi	r19, 0x0F	; 15
    197e:	49 ec       	ldi	r20, 0xC9	; 201
    1980:	06 c0       	rjmp	.+12     	; 0x198e <__fp_rempio2+0x24>
    1982:	ee 0f       	add	r30, r30
    1984:	bb 0f       	add	r27, r27
    1986:	66 1f       	adc	r22, r22
    1988:	77 1f       	adc	r23, r23
    198a:	88 1f       	adc	r24, r24
    198c:	28 f0       	brcs	.+10     	; 0x1998 <__fp_rempio2+0x2e>
    198e:	b2 3a       	cpi	r27, 0xA2	; 162
    1990:	62 07       	cpc	r22, r18
    1992:	73 07       	cpc	r23, r19
    1994:	84 07       	cpc	r24, r20
    1996:	28 f0       	brcs	.+10     	; 0x19a2 <__fp_rempio2+0x38>
    1998:	b2 5a       	subi	r27, 0xA2	; 162
    199a:	62 0b       	sbc	r22, r18
    199c:	73 0b       	sbc	r23, r19
    199e:	84 0b       	sbc	r24, r20
    19a0:	e3 95       	inc	r30
    19a2:	9a 95       	dec	r25
    19a4:	72 f7       	brpl	.-36     	; 0x1982 <__fp_rempio2+0x18>
    19a6:	80 38       	cpi	r24, 0x80	; 128
    19a8:	30 f4       	brcc	.+12     	; 0x19b6 <__fp_rempio2+0x4c>
    19aa:	9a 95       	dec	r25
    19ac:	bb 0f       	add	r27, r27
    19ae:	66 1f       	adc	r22, r22
    19b0:	77 1f       	adc	r23, r23
    19b2:	88 1f       	adc	r24, r24
    19b4:	d2 f7       	brpl	.-12     	; 0x19aa <__fp_rempio2+0x40>
    19b6:	90 48       	sbci	r25, 0x80	; 128
    19b8:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__fp_mpack_finite>

000019bc <__fp_round>:
    19bc:	09 2e       	mov	r0, r25
    19be:	03 94       	inc	r0
    19c0:	00 0c       	add	r0, r0
    19c2:	11 f4       	brne	.+4      	; 0x19c8 <__fp_round+0xc>
    19c4:	88 23       	and	r24, r24
    19c6:	52 f0       	brmi	.+20     	; 0x19dc <__fp_round+0x20>
    19c8:	bb 0f       	add	r27, r27
    19ca:	40 f4       	brcc	.+16     	; 0x19dc <__fp_round+0x20>
    19cc:	bf 2b       	or	r27, r31
    19ce:	11 f4       	brne	.+4      	; 0x19d4 <__fp_round+0x18>
    19d0:	60 ff       	sbrs	r22, 0
    19d2:	04 c0       	rjmp	.+8      	; 0x19dc <__fp_round+0x20>
    19d4:	6f 5f       	subi	r22, 0xFF	; 255
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	8f 4f       	sbci	r24, 0xFF	; 255
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	08 95       	ret

000019de <__fp_sinus>:
    19de:	ef 93       	push	r30
    19e0:	e0 ff       	sbrs	r30, 0
    19e2:	07 c0       	rjmp	.+14     	; 0x19f2 <__fp_sinus+0x14>
    19e4:	a2 ea       	ldi	r26, 0xA2	; 162
    19e6:	2a ed       	ldi	r18, 0xDA	; 218
    19e8:	3f e0       	ldi	r19, 0x0F	; 15
    19ea:	49 ec       	ldi	r20, 0xC9	; 201
    19ec:	5f eb       	ldi	r21, 0xBF	; 191
    19ee:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__addsf3x>
    19f2:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fp_round>
    19f6:	0f 90       	pop	r0
    19f8:	03 94       	inc	r0
    19fa:	01 fc       	sbrc	r0, 1
    19fc:	90 58       	subi	r25, 0x80	; 128
    19fe:	e9 ed       	ldi	r30, 0xD9	; 217
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__fp_powsodd>

00001a06 <__fp_split3>:
    1a06:	57 fd       	sbrc	r21, 7
    1a08:	90 58       	subi	r25, 0x80	; 128
    1a0a:	44 0f       	add	r20, r20
    1a0c:	55 1f       	adc	r21, r21
    1a0e:	59 f0       	breq	.+22     	; 0x1a26 <__fp_splitA+0x10>
    1a10:	5f 3f       	cpi	r21, 0xFF	; 255
    1a12:	71 f0       	breq	.+28     	; 0x1a30 <__fp_splitA+0x1a>
    1a14:	47 95       	ror	r20

00001a16 <__fp_splitA>:
    1a16:	88 0f       	add	r24, r24
    1a18:	97 fb       	bst	r25, 7
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	61 f0       	breq	.+24     	; 0x1a36 <__fp_splitA+0x20>
    1a1e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a20:	79 f0       	breq	.+30     	; 0x1a40 <__fp_splitA+0x2a>
    1a22:	87 95       	ror	r24
    1a24:	08 95       	ret
    1a26:	12 16       	cp	r1, r18
    1a28:	13 06       	cpc	r1, r19
    1a2a:	14 06       	cpc	r1, r20
    1a2c:	55 1f       	adc	r21, r21
    1a2e:	f2 cf       	rjmp	.-28     	; 0x1a14 <__fp_split3+0xe>
    1a30:	46 95       	lsr	r20
    1a32:	f1 df       	rcall	.-30     	; 0x1a16 <__fp_splitA>
    1a34:	08 c0       	rjmp	.+16     	; 0x1a46 <__fp_splitA+0x30>
    1a36:	16 16       	cp	r1, r22
    1a38:	17 06       	cpc	r1, r23
    1a3a:	18 06       	cpc	r1, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	f1 cf       	rjmp	.-30     	; 0x1a22 <__fp_splitA+0xc>
    1a40:	86 95       	lsr	r24
    1a42:	71 05       	cpc	r23, r1
    1a44:	61 05       	cpc	r22, r1
    1a46:	08 94       	sec
    1a48:	08 95       	ret

00001a4a <__fp_zero>:
    1a4a:	e8 94       	clt

00001a4c <__fp_szero>:
    1a4c:	bb 27       	eor	r27, r27
    1a4e:	66 27       	eor	r22, r22
    1a50:	77 27       	eor	r23, r23
    1a52:	cb 01       	movw	r24, r22
    1a54:	97 f9       	bld	r25, 7
    1a56:	08 95       	ret

00001a58 <inverse>:
    1a58:	9b 01       	movw	r18, r22
    1a5a:	ac 01       	movw	r20, r24
    1a5c:	60 e0       	ldi	r22, 0x00	; 0
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	80 e8       	ldi	r24, 0x80	; 128
    1a62:	9f e3       	ldi	r25, 0x3F	; 63
    1a64:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__divsf3>

00001a68 <__mulsf3>:
    1a68:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3x>
    1a6c:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__fp_round>
    1a70:	0e 94 a5 0c 	call	0x194a	; 0x194a <__fp_pscA>
    1a74:	38 f0       	brcs	.+14     	; 0x1a84 <__mulsf3+0x1c>
    1a76:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fp_pscB>
    1a7a:	20 f0       	brcs	.+8      	; 0x1a84 <__mulsf3+0x1c>
    1a7c:	95 23       	and	r25, r21
    1a7e:	11 f0       	breq	.+4      	; 0x1a84 <__mulsf3+0x1c>
    1a80:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__fp_inf>
    1a84:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__fp_nan>
    1a88:	11 24       	eor	r1, r1
    1a8a:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__fp_szero>

00001a8e <__mulsf3x>:
    1a8e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fp_split3>
    1a92:	70 f3       	brcs	.-36     	; 0x1a70 <__mulsf3+0x8>

00001a94 <__mulsf3_pse>:
    1a94:	95 9f       	mul	r25, r21
    1a96:	c1 f3       	breq	.-16     	; 0x1a88 <__mulsf3+0x20>
    1a98:	95 0f       	add	r25, r21
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	55 1f       	adc	r21, r21
    1a9e:	62 9f       	mul	r22, r18
    1aa0:	f0 01       	movw	r30, r0
    1aa2:	72 9f       	mul	r23, r18
    1aa4:	bb 27       	eor	r27, r27
    1aa6:	f0 0d       	add	r31, r0
    1aa8:	b1 1d       	adc	r27, r1
    1aaa:	63 9f       	mul	r22, r19
    1aac:	aa 27       	eor	r26, r26
    1aae:	f0 0d       	add	r31, r0
    1ab0:	b1 1d       	adc	r27, r1
    1ab2:	aa 1f       	adc	r26, r26
    1ab4:	64 9f       	mul	r22, r20
    1ab6:	66 27       	eor	r22, r22
    1ab8:	b0 0d       	add	r27, r0
    1aba:	a1 1d       	adc	r26, r1
    1abc:	66 1f       	adc	r22, r22
    1abe:	82 9f       	mul	r24, r18
    1ac0:	22 27       	eor	r18, r18
    1ac2:	b0 0d       	add	r27, r0
    1ac4:	a1 1d       	adc	r26, r1
    1ac6:	62 1f       	adc	r22, r18
    1ac8:	73 9f       	mul	r23, r19
    1aca:	b0 0d       	add	r27, r0
    1acc:	a1 1d       	adc	r26, r1
    1ace:	62 1f       	adc	r22, r18
    1ad0:	83 9f       	mul	r24, r19
    1ad2:	a0 0d       	add	r26, r0
    1ad4:	61 1d       	adc	r22, r1
    1ad6:	22 1f       	adc	r18, r18
    1ad8:	74 9f       	mul	r23, r20
    1ada:	33 27       	eor	r19, r19
    1adc:	a0 0d       	add	r26, r0
    1ade:	61 1d       	adc	r22, r1
    1ae0:	23 1f       	adc	r18, r19
    1ae2:	84 9f       	mul	r24, r20
    1ae4:	60 0d       	add	r22, r0
    1ae6:	21 1d       	adc	r18, r1
    1ae8:	82 2f       	mov	r24, r18
    1aea:	76 2f       	mov	r23, r22
    1aec:	6a 2f       	mov	r22, r26
    1aee:	11 24       	eor	r1, r1
    1af0:	9f 57       	subi	r25, 0x7F	; 127
    1af2:	50 40       	sbci	r21, 0x00	; 0
    1af4:	9a f0       	brmi	.+38     	; 0x1b1c <__mulsf3_pse+0x88>
    1af6:	f1 f0       	breq	.+60     	; 0x1b34 <__mulsf3_pse+0xa0>
    1af8:	88 23       	and	r24, r24
    1afa:	4a f0       	brmi	.+18     	; 0x1b0e <__mulsf3_pse+0x7a>
    1afc:	ee 0f       	add	r30, r30
    1afe:	ff 1f       	adc	r31, r31
    1b00:	bb 1f       	adc	r27, r27
    1b02:	66 1f       	adc	r22, r22
    1b04:	77 1f       	adc	r23, r23
    1b06:	88 1f       	adc	r24, r24
    1b08:	91 50       	subi	r25, 0x01	; 1
    1b0a:	50 40       	sbci	r21, 0x00	; 0
    1b0c:	a9 f7       	brne	.-22     	; 0x1af8 <__mulsf3_pse+0x64>
    1b0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b10:	51 05       	cpc	r21, r1
    1b12:	80 f0       	brcs	.+32     	; 0x1b34 <__mulsf3_pse+0xa0>
    1b14:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__fp_inf>
    1b18:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__fp_szero>
    1b1c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b1e:	e4 f3       	brlt	.-8      	; 0x1b18 <__mulsf3_pse+0x84>
    1b20:	98 3e       	cpi	r25, 0xE8	; 232
    1b22:	d4 f3       	brlt	.-12     	; 0x1b18 <__mulsf3_pse+0x84>
    1b24:	86 95       	lsr	r24
    1b26:	77 95       	ror	r23
    1b28:	67 95       	ror	r22
    1b2a:	b7 95       	ror	r27
    1b2c:	f7 95       	ror	r31
    1b2e:	e7 95       	ror	r30
    1b30:	9f 5f       	subi	r25, 0xFF	; 255
    1b32:	c1 f7       	brne	.-16     	; 0x1b24 <__mulsf3_pse+0x90>
    1b34:	fe 2b       	or	r31, r30
    1b36:	88 0f       	add	r24, r24
    1b38:	91 1d       	adc	r25, r1
    1b3a:	96 95       	lsr	r25
    1b3c:	87 95       	ror	r24
    1b3e:	97 f9       	bld	r25, 7
    1b40:	08 95       	ret

00001b42 <sin>:
    1b42:	9f 93       	push	r25
    1b44:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_rempio2>
    1b48:	0f 90       	pop	r0
    1b4a:	07 fc       	sbrc	r0, 7
    1b4c:	ee 5f       	subi	r30, 0xFE	; 254
    1b4e:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__fp_sinus>
    1b52:	19 f4       	brne	.+6      	; 0x1b5a <sin+0x18>
    1b54:	16 f4       	brtc	.+4      	; 0x1b5a <sin+0x18>
    1b56:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__fp_nan>
    1b5a:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__fp_mpack>

00001b5e <sqrt>:
    1b5e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fp_splitA>
    1b62:	b8 f3       	brcs	.-18     	; 0x1b52 <sin+0x10>
    1b64:	99 23       	and	r25, r25
    1b66:	c9 f3       	breq	.-14     	; 0x1b5a <sin+0x18>
    1b68:	b6 f3       	brts	.-20     	; 0x1b56 <sin+0x14>
    1b6a:	9f 57       	subi	r25, 0x7F	; 127
    1b6c:	55 0b       	sbc	r21, r21
    1b6e:	87 ff       	sbrs	r24, 7
    1b70:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__fp_norm2>
    1b74:	00 24       	eor	r0, r0
    1b76:	a0 e6       	ldi	r26, 0x60	; 96
    1b78:	40 ea       	ldi	r20, 0xA0	; 160
    1b7a:	90 01       	movw	r18, r0
    1b7c:	80 58       	subi	r24, 0x80	; 128
    1b7e:	56 95       	lsr	r21
    1b80:	97 95       	ror	r25
    1b82:	28 f4       	brcc	.+10     	; 0x1b8e <sqrt+0x30>
    1b84:	80 5c       	subi	r24, 0xC0	; 192
    1b86:	66 0f       	add	r22, r22
    1b88:	77 1f       	adc	r23, r23
    1b8a:	88 1f       	adc	r24, r24
    1b8c:	20 f0       	brcs	.+8      	; 0x1b96 <sqrt+0x38>
    1b8e:	26 17       	cp	r18, r22
    1b90:	37 07       	cpc	r19, r23
    1b92:	48 07       	cpc	r20, r24
    1b94:	30 f4       	brcc	.+12     	; 0x1ba2 <sqrt+0x44>
    1b96:	62 1b       	sub	r22, r18
    1b98:	73 0b       	sbc	r23, r19
    1b9a:	84 0b       	sbc	r24, r20
    1b9c:	20 29       	or	r18, r0
    1b9e:	31 29       	or	r19, r1
    1ba0:	4a 2b       	or	r20, r26
    1ba2:	a6 95       	lsr	r26
    1ba4:	17 94       	ror	r1
    1ba6:	07 94       	ror	r0
    1ba8:	20 25       	eor	r18, r0
    1baa:	31 25       	eor	r19, r1
    1bac:	4a 27       	eor	r20, r26
    1bae:	58 f7       	brcc	.-42     	; 0x1b86 <sqrt+0x28>
    1bb0:	66 0f       	add	r22, r22
    1bb2:	77 1f       	adc	r23, r23
    1bb4:	88 1f       	adc	r24, r24
    1bb6:	20 f0       	brcs	.+8      	; 0x1bc0 <sqrt+0x62>
    1bb8:	26 17       	cp	r18, r22
    1bba:	37 07       	cpc	r19, r23
    1bbc:	48 07       	cpc	r20, r24
    1bbe:	30 f4       	brcc	.+12     	; 0x1bcc <sqrt+0x6e>
    1bc0:	62 0b       	sbc	r22, r18
    1bc2:	73 0b       	sbc	r23, r19
    1bc4:	84 0b       	sbc	r24, r20
    1bc6:	20 0d       	add	r18, r0
    1bc8:	31 1d       	adc	r19, r1
    1bca:	41 1d       	adc	r20, r1
    1bcc:	a0 95       	com	r26
    1bce:	81 f7       	brne	.-32     	; 0x1bb0 <sqrt+0x52>
    1bd0:	b9 01       	movw	r22, r18
    1bd2:	84 2f       	mov	r24, r20
    1bd4:	91 58       	subi	r25, 0x81	; 129
    1bd6:	88 0f       	add	r24, r24
    1bd8:	96 95       	lsr	r25
    1bda:	87 95       	ror	r24
    1bdc:	08 95       	ret

00001bde <square>:
    1bde:	9b 01       	movw	r18, r22
    1be0:	ac 01       	movw	r20, r24
    1be2:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__mulsf3>

00001be6 <__fp_mpack>:
    1be6:	9f 3f       	cpi	r25, 0xFF	; 255
    1be8:	31 f0       	breq	.+12     	; 0x1bf6 <__fp_mpack_finite+0xc>

00001bea <__fp_mpack_finite>:
    1bea:	91 50       	subi	r25, 0x01	; 1
    1bec:	20 f4       	brcc	.+8      	; 0x1bf6 <__fp_mpack_finite+0xc>
    1bee:	87 95       	ror	r24
    1bf0:	77 95       	ror	r23
    1bf2:	67 95       	ror	r22
    1bf4:	b7 95       	ror	r27
    1bf6:	88 0f       	add	r24, r24
    1bf8:	91 1d       	adc	r25, r1
    1bfa:	96 95       	lsr	r25
    1bfc:	87 95       	ror	r24
    1bfe:	97 f9       	bld	r25, 7
    1c00:	08 95       	ret

00001c02 <__fp_norm2>:
    1c02:	91 50       	subi	r25, 0x01	; 1
    1c04:	50 40       	sbci	r21, 0x00	; 0
    1c06:	66 0f       	add	r22, r22
    1c08:	77 1f       	adc	r23, r23
    1c0a:	88 1f       	adc	r24, r24
    1c0c:	d2 f7       	brpl	.-12     	; 0x1c02 <__fp_norm2>
    1c0e:	08 95       	ret

00001c10 <__fp_powsodd>:
    1c10:	9f 93       	push	r25
    1c12:	8f 93       	push	r24
    1c14:	7f 93       	push	r23
    1c16:	6f 93       	push	r22
    1c18:	ff 93       	push	r31
    1c1a:	ef 93       	push	r30
    1c1c:	9b 01       	movw	r18, r22
    1c1e:	ac 01       	movw	r20, r24
    1c20:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsf3>
    1c24:	ef 91       	pop	r30
    1c26:	ff 91       	pop	r31
    1c28:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fp_powser>
    1c2c:	2f 91       	pop	r18
    1c2e:	3f 91       	pop	r19
    1c30:	4f 91       	pop	r20
    1c32:	5f 91       	pop	r21
    1c34:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__mulsf3>

00001c38 <__itoa_ncheck>:
    1c38:	bb 27       	eor	r27, r27
    1c3a:	4a 30       	cpi	r20, 0x0A	; 10
    1c3c:	31 f4       	brne	.+12     	; 0x1c4a <__itoa_ncheck+0x12>
    1c3e:	99 23       	and	r25, r25
    1c40:	22 f4       	brpl	.+8      	; 0x1c4a <__itoa_ncheck+0x12>
    1c42:	bd e2       	ldi	r27, 0x2D	; 45
    1c44:	90 95       	com	r25
    1c46:	81 95       	neg	r24
    1c48:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4a:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__utoa_common>

00001c4e <__utoa_ncheck>:
    1c4e:	bb 27       	eor	r27, r27

00001c50 <__utoa_common>:
    1c50:	fb 01       	movw	r30, r22
    1c52:	55 27       	eor	r21, r21
    1c54:	aa 27       	eor	r26, r26
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	aa 1f       	adc	r26, r26
    1c5c:	a4 17       	cp	r26, r20
    1c5e:	10 f0       	brcs	.+4      	; 0x1c64 <__utoa_common+0x14>
    1c60:	a4 1b       	sub	r26, r20
    1c62:	83 95       	inc	r24
    1c64:	50 51       	subi	r21, 0x10	; 16
    1c66:	b9 f7       	brne	.-18     	; 0x1c56 <__utoa_common+0x6>
    1c68:	a0 5d       	subi	r26, 0xD0	; 208
    1c6a:	aa 33       	cpi	r26, 0x3A	; 58
    1c6c:	08 f0       	brcs	.+2      	; 0x1c70 <__utoa_common+0x20>
    1c6e:	a9 5d       	subi	r26, 0xD9	; 217
    1c70:	a1 93       	st	Z+, r26
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	79 f7       	brne	.-34     	; 0x1c54 <__utoa_common+0x4>
    1c76:	b1 11       	cpse	r27, r1
    1c78:	b1 93       	st	Z+, r27
    1c7a:	11 92       	st	Z+, r1
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <strrev>

00001c82 <strrev>:
    1c82:	dc 01       	movw	r26, r24
    1c84:	fc 01       	movw	r30, r24
    1c86:	67 2f       	mov	r22, r23
    1c88:	71 91       	ld	r23, Z+
    1c8a:	77 23       	and	r23, r23
    1c8c:	e1 f7       	brne	.-8      	; 0x1c86 <strrev+0x4>
    1c8e:	32 97       	sbiw	r30, 0x02	; 2
    1c90:	04 c0       	rjmp	.+8      	; 0x1c9a <strrev+0x18>
    1c92:	7c 91       	ld	r23, X
    1c94:	6d 93       	st	X+, r22
    1c96:	70 83       	st	Z, r23
    1c98:	62 91       	ld	r22, -Z
    1c9a:	ae 17       	cp	r26, r30
    1c9c:	bf 07       	cpc	r27, r31
    1c9e:	c8 f3       	brcs	.-14     	; 0x1c92 <strrev+0x10>
    1ca0:	08 95       	ret

00001ca2 <_exit>:
    1ca2:	f8 94       	cli

00001ca4 <__stop_program>:
    1ca4:	ff cf       	rjmp	.-2      	; 0x1ca4 <__stop_program>
