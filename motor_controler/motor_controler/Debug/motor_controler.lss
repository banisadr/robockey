
motor_controler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00002918  000029ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002918  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  00800122  00800122  000029ce  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000029ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b0e  00000000  00000000  00002d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9b  00000000  00000000  00005846  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001009  00000000  00000000  000063e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000974  00000000  00000000  000073ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ad7  00000000  00000000  00007d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037f8  00000000  00000000  00008837  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000c02f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__ctors_end>
       4:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
       8:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
       c:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__vector_3>
      10:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      14:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      18:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      1c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      20:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      24:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      28:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <__vector_10>
      2c:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__vector_11>
      30:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      34:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      38:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      3c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      40:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      44:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__vector_17>
      48:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__vector_18>
      4c:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__vector_19>
      50:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      54:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      58:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      5c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      60:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      64:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      68:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      6c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      70:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      74:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      78:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      7c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      80:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      84:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      88:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      8c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      90:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      94:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      98:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      9c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      a0:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      a4:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      a8:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__trampolines_end>:
      f8:	20 20       	and	r2, r0
      fa:	4f 43       	sbci	r20, 0x3F	; 63
      fc:	52 31       	cpi	r21, 0x12	; 18
      fe:	63 3a       	cpi	r22, 0xA3	; 163
     100:	20 00       	.word	0x0020	; ????

00000102 <__c.2089>:
     102:	20 20 4f 43 52 31 42 3a 20 00                         OCR1B: .

0000010c <__c.2087>:
     10c:	0a 4f 43 52 31 41 3a 20 00                          .OCR1A: .

00000115 <descriptor_list>:
     115:	00 01 00 00 ac 01 12 00 02 00 00 69 01 43 00 03     ...........i.C..
     125:	00 00 65 01 04 01 03 09 04 51 01 12 02 03 09 04     ..e......Q......
     135:	49 01 06 03 03 09 04 3f 01 08                       I......?..

0000013f <string3>:
     13f:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000149 <string2>:
     149:	06 03 4d 00 32 00 00 00                             ..M.2...

00000151 <string1>:
     151:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     161:	65 00 00 00                                         e...

00000165 <string0>:
     165:	04 03 09 04                                         ....

00000169 <config1_descriptor>:
     169:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     179:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     189:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     199:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1a9:	40 00 00                                            @..

000001ac <device_descriptor>:
     1ac:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1bc:	03 01                                               ..

000001be <endpoint_config_table>:
     1be:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000001c8 <__ctors_end>:
     1c8:	11 24       	eor	r1, r1
     1ca:	1f be       	out	0x3f, r1	; 63
     1cc:	cf ef       	ldi	r28, 0xFF	; 255
     1ce:	da e0       	ldi	r29, 0x0A	; 10
     1d0:	de bf       	out	0x3e, r29	; 62
     1d2:	cd bf       	out	0x3d, r28	; 61

000001d4 <__do_copy_data>:
     1d4:	11 e0       	ldi	r17, 0x01	; 1
     1d6:	a0 e0       	ldi	r26, 0x00	; 0
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	e8 e1       	ldi	r30, 0x18	; 24
     1dc:	f9 e2       	ldi	r31, 0x29	; 41
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <__do_copy_data+0x10>
     1e0:	05 90       	lpm	r0, Z+
     1e2:	0d 92       	st	X+, r0
     1e4:	a2 32       	cpi	r26, 0x22	; 34
     1e6:	b1 07       	cpc	r27, r17
     1e8:	d9 f7       	brne	.-10     	; 0x1e0 <__do_copy_data+0xc>

000001ea <__do_clear_bss>:
     1ea:	21 e0       	ldi	r18, 0x01	; 1
     1ec:	a2 e2       	ldi	r26, 0x22	; 34
     1ee:	b1 e0       	ldi	r27, 0x01	; 1
     1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <.do_clear_bss_start>

000001f2 <.do_clear_bss_loop>:
     1f2:	1d 92       	st	X+, r1

000001f4 <.do_clear_bss_start>:
     1f4:	a1 39       	cpi	r26, 0x91	; 145
     1f6:	b2 07       	cpc	r27, r18
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <.do_clear_bss_loop>
     1fa:	0e 94 b7 0a 	call	0x156e	; 0x156e <main>
     1fe:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <_exit>

00000202 <__bad_interrupt>:
     202:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000206 <distIndex>:
     206:	82 30       	cpi	r24, 0x02	; 2
     208:	91 05       	cpc	r25, r1
     20a:	f9 f0       	breq	.+62     	; 0x24a <distIndex+0x44>
     20c:	2c f4       	brge	.+10     	; 0x218 <distIndex+0x12>
     20e:	00 97       	sbiw	r24, 0x00	; 0
     210:	51 f0       	breq	.+20     	; 0x226 <distIndex+0x20>
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	89 f0       	breq	.+34     	; 0x238 <distIndex+0x32>
     216:	42 c0       	rjmp	.+132    	; 0x29c <distIndex+0x96>
     218:	84 30       	cpi	r24, 0x04	; 4
     21a:	91 05       	cpc	r25, r1
     21c:	51 f1       	breq	.+84     	; 0x272 <distIndex+0x6c>
     21e:	f4 f0       	brlt	.+60     	; 0x25c <distIndex+0x56>
     220:	05 97       	sbiw	r24, 0x05	; 5
     222:	91 f1       	breq	.+100    	; 0x288 <distIndex+0x82>
     224:	3b c0       	rjmp	.+118    	; 0x29c <distIndex+0x96>
     226:	e2 e2       	ldi	r30, 0x22	; 34
     228:	f1 e0       	ldi	r31, 0x01	; 1
     22a:	11 82       	std	Z+1, r1	; 0x01
     22c:	10 82       	st	Z, r1
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	93 83       	std	Z+3, r25	; 0x03
     234:	82 83       	std	Z+2, r24	; 0x02
     236:	32 c0       	rjmp	.+100    	; 0x29c <distIndex+0x96>
     238:	e2 e2       	ldi	r30, 0x22	; 34
     23a:	f1 e0       	ldi	r31, 0x01	; 1
     23c:	11 82       	std	Z+1, r1	; 0x01
     23e:	10 82       	st	Z, r1
     240:	82 e0       	ldi	r24, 0x02	; 2
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	93 83       	std	Z+3, r25	; 0x03
     246:	82 83       	std	Z+2, r24	; 0x02
     248:	29 c0       	rjmp	.+82     	; 0x29c <distIndex+0x96>
     24a:	e2 e2       	ldi	r30, 0x22	; 34
     24c:	f1 e0       	ldi	r31, 0x01	; 1
     24e:	11 82       	std	Z+1, r1	; 0x01
     250:	10 82       	st	Z, r1
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	93 83       	std	Z+3, r25	; 0x03
     258:	82 83       	std	Z+2, r24	; 0x02
     25a:	20 c0       	rjmp	.+64     	; 0x29c <distIndex+0x96>
     25c:	e2 e2       	ldi	r30, 0x22	; 34
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	91 83       	std	Z+1, r25	; 0x01
     266:	80 83       	st	Z, r24
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	93 83       	std	Z+3, r25	; 0x03
     26e:	82 83       	std	Z+2, r24	; 0x02
     270:	15 c0       	rjmp	.+42     	; 0x29c <distIndex+0x96>
     272:	e2 e2       	ldi	r30, 0x22	; 34
     274:	f1 e0       	ldi	r31, 0x01	; 1
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	83 e0       	ldi	r24, 0x03	; 3
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	93 83       	std	Z+3, r25	; 0x03
     284:	82 83       	std	Z+2, r24	; 0x02
     286:	0a c0       	rjmp	.+20     	; 0x29c <distIndex+0x96>
     288:	e2 e2       	ldi	r30, 0x22	; 34
     28a:	f1 e0       	ldi	r31, 0x01	; 1
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	91 83       	std	Z+1, r25	; 0x01
     292:	80 83       	st	Z, r24
     294:	83 e0       	ldi	r24, 0x03	; 3
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	93 83       	std	Z+3, r25	; 0x03
     29a:	82 83       	std	Z+2, r24	; 0x02
     29c:	82 e2       	ldi	r24, 0x22	; 34
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	08 95       	ret

000002a2 <orientationCalculationFour>:
     2a2:	2f 92       	push	r2
     2a4:	3f 92       	push	r3
     2a6:	4f 92       	push	r4
     2a8:	5f 92       	push	r5
     2aa:	6f 92       	push	r6
     2ac:	7f 92       	push	r7
     2ae:	8f 92       	push	r8
     2b0:	9f 92       	push	r9
     2b2:	af 92       	push	r10
     2b4:	bf 92       	push	r11
     2b6:	cf 92       	push	r12
     2b8:	df 92       	push	r13
     2ba:	ef 92       	push	r14
     2bc:	ff 92       	push	r15
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <orientationCalculationFour+0x26>
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <orientationCalculationFour+0x28>
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	5c 01       	movw	r10, r24
     2d0:	4a 01       	movw	r8, r20
     2d2:	3a 83       	std	Y+2, r19	; 0x02
     2d4:	29 83       	std	Y+1, r18	; 0x01
     2d6:	06 2f       	mov	r16, r22
     2d8:	17 2f       	mov	r17, r23
     2da:	f8 01       	movw	r30, r16
     2dc:	41 90       	ld	r4, Z+
     2de:	51 90       	ld	r5, Z+
     2e0:	61 90       	ld	r6, Z+
     2e2:	71 90       	ld	r7, Z+
     2e4:	8f 01       	movw	r16, r30
     2e6:	1c 82       	std	Y+4, r1	; 0x04
     2e8:	1b 82       	std	Y+3, r1	; 0x03
     2ea:	21 2c       	mov	r2, r1
     2ec:	31 2c       	mov	r3, r1
     2ee:	12 c0       	rjmp	.+36     	; 0x314 <orientationCalculationFour+0x72>
     2f0:	f8 01       	movw	r30, r16
     2f2:	c1 90       	ld	r12, Z+
     2f4:	d1 90       	ld	r13, Z+
     2f6:	e1 90       	ld	r14, Z+
     2f8:	f1 90       	ld	r15, Z+
     2fa:	8f 01       	movw	r16, r30
     2fc:	a7 01       	movw	r20, r14
     2fe:	96 01       	movw	r18, r12
     300:	c3 01       	movw	r24, r6
     302:	b2 01       	movw	r22, r4
     304:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__gesf2>
     308:	18 16       	cp	r1, r24
     30a:	24 f4       	brge	.+8      	; 0x314 <orientationCalculationFour+0x72>
     30c:	26 01       	movw	r4, r12
     30e:	37 01       	movw	r6, r14
     310:	2b 80       	ldd	r2, Y+3	; 0x03
     312:	3c 80       	ldd	r3, Y+4	; 0x04
     314:	8b 81       	ldd	r24, Y+3	; 0x03
     316:	9c 81       	ldd	r25, Y+4	; 0x04
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	9c 83       	std	Y+4, r25	; 0x04
     31c:	8b 83       	std	Y+3, r24	; 0x03
     31e:	06 97       	sbiw	r24, 0x06	; 6
     320:	39 f7       	brne	.-50     	; 0x2f0 <orientationCalculationFour+0x4e>
     322:	82 2d       	mov	r24, r2
     324:	93 2d       	mov	r25, r3
     326:	0e 94 03 01 	call	0x206	; 0x206 <distIndex>
     32a:	fc 01       	movw	r30, r24
     32c:	20 81       	ld	r18, Z
     32e:	31 81       	ldd	r19, Z+1	; 0x01
     330:	62 81       	ldd	r22, Z+2	; 0x02
     332:	73 81       	ldd	r23, Z+3	; 0x03
     334:	f5 01       	movw	r30, r10
     336:	40 81       	ld	r20, Z
     338:	51 81       	ldd	r21, Z+1	; 0x01
     33a:	24 17       	cp	r18, r20
     33c:	35 07       	cpc	r19, r21
     33e:	59 f4       	brne	.+22     	; 0x356 <orientationCalculationFour+0xb4>
     340:	f4 01       	movw	r30, r8
     342:	31 83       	std	Z+1, r19	; 0x01
     344:	20 83       	st	Z, r18
     346:	f5 01       	movw	r30, r10
     348:	82 81       	ldd	r24, Z+2	; 0x02
     34a:	93 81       	ldd	r25, Z+3	; 0x03
     34c:	e9 81       	ldd	r30, Y+1	; 0x01
     34e:	fa 81       	ldd	r31, Y+2	; 0x02
     350:	91 83       	std	Z+1, r25	; 0x01
     352:	80 83       	st	Z, r24
     354:	37 c0       	rjmp	.+110    	; 0x3c4 <orientationCalculationFour+0x122>
     356:	f5 01       	movw	r30, r10
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	28 17       	cp	r18, r24
     35e:	39 07       	cpc	r19, r25
     360:	59 f4       	brne	.+22     	; 0x378 <orientationCalculationFour+0xd6>
     362:	f4 01       	movw	r30, r8
     364:	31 83       	std	Z+1, r19	; 0x01
     366:	20 83       	st	Z, r18
     368:	f5 01       	movw	r30, r10
     36a:	80 81       	ld	r24, Z
     36c:	91 81       	ldd	r25, Z+1	; 0x01
     36e:	e9 81       	ldd	r30, Y+1	; 0x01
     370:	fa 81       	ldd	r31, Y+2	; 0x02
     372:	91 83       	std	Z+1, r25	; 0x01
     374:	80 83       	st	Z, r24
     376:	26 c0       	rjmp	.+76     	; 0x3c4 <orientationCalculationFour+0x122>
     378:	64 17       	cp	r22, r20
     37a:	75 07       	cpc	r23, r21
     37c:	59 f4       	brne	.+22     	; 0x394 <orientationCalculationFour+0xf2>
     37e:	f4 01       	movw	r30, r8
     380:	71 83       	std	Z+1, r23	; 0x01
     382:	60 83       	st	Z, r22
     384:	f5 01       	movw	r30, r10
     386:	82 81       	ldd	r24, Z+2	; 0x02
     388:	93 81       	ldd	r25, Z+3	; 0x03
     38a:	e9 81       	ldd	r30, Y+1	; 0x01
     38c:	fa 81       	ldd	r31, Y+2	; 0x02
     38e:	91 83       	std	Z+1, r25	; 0x01
     390:	80 83       	st	Z, r24
     392:	18 c0       	rjmp	.+48     	; 0x3c4 <orientationCalculationFour+0x122>
     394:	68 17       	cp	r22, r24
     396:	79 07       	cpc	r23, r25
     398:	59 f4       	brne	.+22     	; 0x3b0 <orientationCalculationFour+0x10e>
     39a:	f4 01       	movw	r30, r8
     39c:	71 83       	std	Z+1, r23	; 0x01
     39e:	60 83       	st	Z, r22
     3a0:	f5 01       	movw	r30, r10
     3a2:	80 81       	ld	r24, Z
     3a4:	91 81       	ldd	r25, Z+1	; 0x01
     3a6:	e9 81       	ldd	r30, Y+1	; 0x01
     3a8:	fa 81       	ldd	r31, Y+2	; 0x02
     3aa:	91 83       	std	Z+1, r25	; 0x01
     3ac:	80 83       	st	Z, r24
     3ae:	0a c0       	rjmp	.+20     	; 0x3c4 <orientationCalculationFour+0x122>
     3b0:	f4 01       	movw	r30, r8
     3b2:	91 83       	std	Z+1, r25	; 0x01
     3b4:	80 83       	st	Z, r24
     3b6:	f5 01       	movw	r30, r10
     3b8:	80 81       	ld	r24, Z
     3ba:	91 81       	ldd	r25, Z+1	; 0x01
     3bc:	e9 81       	ldd	r30, Y+1	; 0x01
     3be:	fa 81       	ldd	r31, Y+2	; 0x02
     3c0:	91 83       	std	Z+1, r25	; 0x01
     3c2:	80 83       	st	Z, r24
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	bf 90       	pop	r11
     3de:	af 90       	pop	r10
     3e0:	9f 90       	pop	r9
     3e2:	8f 90       	pop	r8
     3e4:	7f 90       	pop	r7
     3e6:	6f 90       	pop	r6
     3e8:	5f 90       	pop	r5
     3ea:	4f 90       	pop	r4
     3ec:	3f 90       	pop	r3
     3ee:	2f 90       	pop	r2
     3f0:	08 95       	ret

000003f2 <fourPointCalc>:
     3f2:	2f 92       	push	r2
     3f4:	3f 92       	push	r3
     3f6:	4f 92       	push	r4
     3f8:	5f 92       	push	r5
     3fa:	6f 92       	push	r6
     3fc:	7f 92       	push	r7
     3fe:	8f 92       	push	r8
     400:	9f 92       	push	r9
     402:	af 92       	push	r10
     404:	bf 92       	push	r11
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	c2 54       	subi	r28, 0x42	; 66
     41c:	d1 09       	sbc	r29, r1
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
     428:	2c 01       	movw	r4, r24
     42a:	fc 01       	movw	r30, r24
     42c:	04 80       	ldd	r0, Z+4	; 0x04
     42e:	f5 81       	ldd	r31, Z+5	; 0x05
     430:	e0 2d       	mov	r30, r0
     432:	fa a3       	std	Y+34, r31	; 0x22
     434:	e9 a3       	std	Y+33, r30	; 0x21
     436:	fc 01       	movw	r30, r24
     438:	00 81       	ld	r16, Z
     43a:	11 81       	ldd	r17, Z+1	; 0x01
     43c:	69 a1       	ldd	r22, Y+33	; 0x21
     43e:	7a a1       	ldd	r23, Y+34	; 0x22
     440:	60 1b       	sub	r22, r16
     442:	71 0b       	sbc	r23, r17
     444:	07 2e       	mov	r0, r23
     446:	00 0c       	add	r0, r0
     448:	88 0b       	sbc	r24, r24
     44a:	99 0b       	sbc	r25, r25
     44c:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     450:	6b 01       	movw	r12, r22
     452:	7c 01       	movw	r14, r24
     454:	f2 01       	movw	r30, r4
     456:	06 80       	ldd	r0, Z+6	; 0x06
     458:	f7 81       	ldd	r31, Z+7	; 0x07
     45a:	e0 2d       	mov	r30, r0
     45c:	fe a3       	std	Y+38, r31	; 0x26
     45e:	ed a3       	std	Y+37, r30	; 0x25
     460:	f2 01       	movw	r30, r4
     462:	22 80       	ldd	r2, Z+2	; 0x02
     464:	33 80       	ldd	r3, Z+3	; 0x03
     466:	ad a0       	ldd	r10, Y+37	; 0x25
     468:	be a0       	ldd	r11, Y+38	; 0x26
     46a:	a2 18       	sub	r10, r2
     46c:	b3 08       	sbc	r11, r3
     46e:	9b 01       	movw	r18, r22
     470:	ac 01       	movw	r20, r24
     472:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     476:	69 a7       	std	Y+41, r22	; 0x29
     478:	7a a7       	std	Y+42, r23	; 0x2a
     47a:	8b a7       	std	Y+43, r24	; 0x2b
     47c:	9c a7       	std	Y+44, r25	; 0x2c
     47e:	aa 9c       	mul	r10, r10
     480:	40 01       	movw	r8, r0
     482:	ab 9c       	mul	r10, r11
     484:	90 0c       	add	r9, r0
     486:	90 0c       	add	r9, r0
     488:	11 24       	eor	r1, r1
     48a:	09 2c       	mov	r0, r9
     48c:	00 0c       	add	r0, r0
     48e:	aa 08       	sbc	r10, r10
     490:	bb 08       	sbc	r11, r11
     492:	a7 01       	movw	r20, r14
     494:	96 01       	movw	r18, r12
     496:	c7 01       	movw	r24, r14
     498:	b6 01       	movw	r22, r12
     49a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     49e:	6b 01       	movw	r12, r22
     4a0:	7c 01       	movw	r14, r24
     4a2:	c5 01       	movw	r24, r10
     4a4:	b4 01       	movw	r22, r8
     4a6:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     4aa:	9b 01       	movw	r18, r22
     4ac:	ac 01       	movw	r20, r24
     4ae:	c7 01       	movw	r24, r14
     4b0:	b6 01       	movw	r22, r12
     4b2:	0e 94 ca 10 	call	0x2194	; 0x2194 <__addsf3>
     4b6:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <sqrt>
     4ba:	6b af       	std	Y+59, r22	; 0x3b
     4bc:	7c af       	std	Y+60, r23	; 0x3c
     4be:	8d af       	std	Y+61, r24	; 0x3d
     4c0:	9e af       	std	Y+62, r25	; 0x3e
     4c2:	f2 01       	movw	r30, r4
     4c4:	00 84       	ldd	r0, Z+8	; 0x08
     4c6:	f1 85       	ldd	r31, Z+9	; 0x09
     4c8:	e0 2d       	mov	r30, r0
     4ca:	fa a7       	std	Y+42, r31	; 0x2a
     4cc:	e9 a7       	std	Y+41, r30	; 0x29
     4ce:	bf 01       	movw	r22, r30
     4d0:	60 1b       	sub	r22, r16
     4d2:	71 0b       	sbc	r23, r17
     4d4:	07 2e       	mov	r0, r23
     4d6:	00 0c       	add	r0, r0
     4d8:	88 0b       	sbc	r24, r24
     4da:	99 0b       	sbc	r25, r25
     4dc:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     4e0:	6b 01       	movw	r12, r22
     4e2:	7c 01       	movw	r14, r24
     4e4:	f2 01       	movw	r30, r4
     4e6:	62 84       	ldd	r6, Z+10	; 0x0a
     4e8:	73 84       	ldd	r7, Z+11	; 0x0b
     4ea:	53 01       	movw	r10, r6
     4ec:	a2 18       	sub	r10, r2
     4ee:	b3 08       	sbc	r11, r3
     4f0:	9b 01       	movw	r18, r22
     4f2:	ac 01       	movw	r20, r24
     4f4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     4f8:	6d a7       	std	Y+45, r22	; 0x2d
     4fa:	7e a7       	std	Y+46, r23	; 0x2e
     4fc:	8f a7       	std	Y+47, r24	; 0x2f
     4fe:	98 ab       	std	Y+48, r25	; 0x30
     500:	aa 9c       	mul	r10, r10
     502:	40 01       	movw	r8, r0
     504:	ab 9c       	mul	r10, r11
     506:	90 0c       	add	r9, r0
     508:	90 0c       	add	r9, r0
     50a:	11 24       	eor	r1, r1
     50c:	09 2c       	mov	r0, r9
     50e:	00 0c       	add	r0, r0
     510:	aa 08       	sbc	r10, r10
     512:	bb 08       	sbc	r11, r11
     514:	a7 01       	movw	r20, r14
     516:	96 01       	movw	r18, r12
     518:	c7 01       	movw	r24, r14
     51a:	b6 01       	movw	r22, r12
     51c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     520:	6b 01       	movw	r12, r22
     522:	7c 01       	movw	r14, r24
     524:	c5 01       	movw	r24, r10
     526:	b4 01       	movw	r22, r8
     528:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     52c:	9b 01       	movw	r18, r22
     52e:	ac 01       	movw	r20, r24
     530:	c7 01       	movw	r24, r14
     532:	b6 01       	movw	r22, r12
     534:	0e 94 ca 10 	call	0x2194	; 0x2194 <__addsf3>
     538:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <sqrt>
     53c:	23 96       	adiw	r28, 0x03	; 3
     53e:	6c af       	std	Y+60, r22	; 0x3c
     540:	7d af       	std	Y+61, r23	; 0x3d
     542:	8e af       	std	Y+62, r24	; 0x3e
     544:	9f af       	std	Y+63, r25	; 0x3f
     546:	23 97       	sbiw	r28, 0x03	; 3
     548:	f2 01       	movw	r30, r4
     54a:	04 84       	ldd	r0, Z+12	; 0x0c
     54c:	f5 85       	ldd	r31, Z+13	; 0x0d
     54e:	e0 2d       	mov	r30, r0
     550:	fe a7       	std	Y+46, r31	; 0x2e
     552:	ed a7       	std	Y+45, r30	; 0x2d
     554:	bf 01       	movw	r22, r30
     556:	60 1b       	sub	r22, r16
     558:	71 0b       	sbc	r23, r17
     55a:	07 2e       	mov	r0, r23
     55c:	00 0c       	add	r0, r0
     55e:	88 0b       	sbc	r24, r24
     560:	99 0b       	sbc	r25, r25
     562:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     566:	4b 01       	movw	r8, r22
     568:	5c 01       	movw	r10, r24
     56a:	f2 01       	movw	r30, r4
     56c:	06 84       	ldd	r0, Z+14	; 0x0e
     56e:	f7 85       	ldd	r31, Z+15	; 0x0f
     570:	e0 2d       	mov	r30, r0
     572:	fa ab       	std	Y+50, r31	; 0x32
     574:	e9 ab       	std	Y+49, r30	; 0x31
     576:	8f 01       	movw	r16, r30
     578:	02 19       	sub	r16, r2
     57a:	13 09       	sbc	r17, r3
     57c:	9b 01       	movw	r18, r22
     57e:	ac 01       	movw	r20, r24
     580:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     584:	6b ab       	std	Y+51, r22	; 0x33
     586:	7c ab       	std	Y+52, r23	; 0x34
     588:	8d ab       	std	Y+53, r24	; 0x35
     58a:	9e ab       	std	Y+54, r25	; 0x36
     58c:	00 9f       	mul	r16, r16
     58e:	60 01       	movw	r12, r0
     590:	01 9f       	mul	r16, r17
     592:	d0 0c       	add	r13, r0
     594:	d0 0c       	add	r13, r0
     596:	11 24       	eor	r1, r1
     598:	0d 2c       	mov	r0, r13
     59a:	00 0c       	add	r0, r0
     59c:	ee 08       	sbc	r14, r14
     59e:	ff 08       	sbc	r15, r15
     5a0:	a5 01       	movw	r20, r10
     5a2:	94 01       	movw	r18, r8
     5a4:	c5 01       	movw	r24, r10
     5a6:	b4 01       	movw	r22, r8
     5a8:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     5ac:	4b 01       	movw	r8, r22
     5ae:	5c 01       	movw	r10, r24
     5b0:	c7 01       	movw	r24, r14
     5b2:	b6 01       	movw	r22, r12
     5b4:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     5b8:	9b 01       	movw	r18, r22
     5ba:	ac 01       	movw	r20, r24
     5bc:	c5 01       	movw	r24, r10
     5be:	b4 01       	movw	r22, r8
     5c0:	0e 94 ca 10 	call	0x2194	; 0x2194 <__addsf3>
     5c4:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <sqrt>
     5c8:	6b ab       	std	Y+51, r22	; 0x33
     5ca:	7c ab       	std	Y+52, r23	; 0x34
     5cc:	8d ab       	std	Y+53, r24	; 0x35
     5ce:	9e ab       	std	Y+54, r25	; 0x36
     5d0:	69 a5       	ldd	r22, Y+41	; 0x29
     5d2:	7a a5       	ldd	r23, Y+42	; 0x2a
     5d4:	29 a1       	ldd	r18, Y+33	; 0x21
     5d6:	3a a1       	ldd	r19, Y+34	; 0x22
     5d8:	62 1b       	sub	r22, r18
     5da:	73 0b       	sbc	r23, r19
     5dc:	07 2e       	mov	r0, r23
     5de:	00 0c       	add	r0, r0
     5e0:	88 0b       	sbc	r24, r24
     5e2:	99 0b       	sbc	r25, r25
     5e4:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     5e8:	4b 01       	movw	r8, r22
     5ea:	5c 01       	movw	r10, r24
     5ec:	83 01       	movw	r16, r6
     5ee:	4d a1       	ldd	r20, Y+37	; 0x25
     5f0:	5e a1       	ldd	r21, Y+38	; 0x26
     5f2:	04 1b       	sub	r16, r20
     5f4:	15 0b       	sbc	r17, r21
     5f6:	9b 01       	movw	r18, r22
     5f8:	ac 01       	movw	r20, r24
     5fa:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     5fe:	6f ab       	std	Y+55, r22	; 0x37
     600:	78 af       	std	Y+56, r23	; 0x38
     602:	89 af       	std	Y+57, r24	; 0x39
     604:	9a af       	std	Y+58, r25	; 0x3a
     606:	00 9f       	mul	r16, r16
     608:	60 01       	movw	r12, r0
     60a:	01 9f       	mul	r16, r17
     60c:	d0 0c       	add	r13, r0
     60e:	d0 0c       	add	r13, r0
     610:	11 24       	eor	r1, r1
     612:	0d 2c       	mov	r0, r13
     614:	00 0c       	add	r0, r0
     616:	ee 08       	sbc	r14, r14
     618:	ff 08       	sbc	r15, r15
     61a:	a5 01       	movw	r20, r10
     61c:	94 01       	movw	r18, r8
     61e:	c5 01       	movw	r24, r10
     620:	b4 01       	movw	r22, r8
     622:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     626:	4b 01       	movw	r8, r22
     628:	5c 01       	movw	r10, r24
     62a:	c7 01       	movw	r24, r14
     62c:	b6 01       	movw	r22, r12
     62e:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     632:	9b 01       	movw	r18, r22
     634:	ac 01       	movw	r20, r24
     636:	c5 01       	movw	r24, r10
     638:	b4 01       	movw	r22, r8
     63a:	0e 94 ca 10 	call	0x2194	; 0x2194 <__addsf3>
     63e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <sqrt>
     642:	6f ab       	std	Y+55, r22	; 0x37
     644:	78 af       	std	Y+56, r23	; 0x38
     646:	89 af       	std	Y+57, r24	; 0x39
     648:	9a af       	std	Y+58, r25	; 0x3a
     64a:	6d a5       	ldd	r22, Y+45	; 0x2d
     64c:	7e a5       	ldd	r23, Y+46	; 0x2e
     64e:	89 a1       	ldd	r24, Y+33	; 0x21
     650:	9a a1       	ldd	r25, Y+34	; 0x22
     652:	68 1b       	sub	r22, r24
     654:	79 0b       	sbc	r23, r25
     656:	07 2e       	mov	r0, r23
     658:	00 0c       	add	r0, r0
     65a:	88 0b       	sbc	r24, r24
     65c:	99 0b       	sbc	r25, r25
     65e:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     662:	4b 01       	movw	r8, r22
     664:	5c 01       	movw	r10, r24
     666:	09 a9       	ldd	r16, Y+49	; 0x31
     668:	1a a9       	ldd	r17, Y+50	; 0x32
     66a:	ed a1       	ldd	r30, Y+37	; 0x25
     66c:	fe a1       	ldd	r31, Y+38	; 0x26
     66e:	0e 1b       	sub	r16, r30
     670:	1f 0b       	sbc	r17, r31
     672:	9b 01       	movw	r18, r22
     674:	ac 01       	movw	r20, r24
     676:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     67a:	69 a3       	std	Y+33, r22	; 0x21
     67c:	7a a3       	std	Y+34, r23	; 0x22
     67e:	8b a3       	std	Y+35, r24	; 0x23
     680:	9c a3       	std	Y+36, r25	; 0x24
     682:	00 9f       	mul	r16, r16
     684:	60 01       	movw	r12, r0
     686:	01 9f       	mul	r16, r17
     688:	d0 0c       	add	r13, r0
     68a:	d0 0c       	add	r13, r0
     68c:	11 24       	eor	r1, r1
     68e:	0d 2c       	mov	r0, r13
     690:	00 0c       	add	r0, r0
     692:	ee 08       	sbc	r14, r14
     694:	ff 08       	sbc	r15, r15
     696:	a5 01       	movw	r20, r10
     698:	94 01       	movw	r18, r8
     69a:	c5 01       	movw	r24, r10
     69c:	b4 01       	movw	r22, r8
     69e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     6a2:	4b 01       	movw	r8, r22
     6a4:	5c 01       	movw	r10, r24
     6a6:	c7 01       	movw	r24, r14
     6a8:	b6 01       	movw	r22, r12
     6aa:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     6ae:	9b 01       	movw	r18, r22
     6b0:	ac 01       	movw	r20, r24
     6b2:	c5 01       	movw	r24, r10
     6b4:	b4 01       	movw	r22, r8
     6b6:	0e 94 ca 10 	call	0x2194	; 0x2194 <__addsf3>
     6ba:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <sqrt>
     6be:	4b 01       	movw	r8, r22
     6c0:	5c 01       	movw	r10, r24
     6c2:	6d a5       	ldd	r22, Y+45	; 0x2d
     6c4:	7e a5       	ldd	r23, Y+46	; 0x2e
     6c6:	29 a5       	ldd	r18, Y+41	; 0x29
     6c8:	3a a5       	ldd	r19, Y+42	; 0x2a
     6ca:	62 1b       	sub	r22, r18
     6cc:	73 0b       	sbc	r23, r19
     6ce:	07 2e       	mov	r0, r23
     6d0:	00 0c       	add	r0, r0
     6d2:	88 0b       	sbc	r24, r24
     6d4:	99 0b       	sbc	r25, r25
     6d6:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     6da:	69 a3       	std	Y+33, r22	; 0x21
     6dc:	7a a3       	std	Y+34, r23	; 0x22
     6de:	8b a3       	std	Y+35, r24	; 0x23
     6e0:	9c a3       	std	Y+36, r25	; 0x24
     6e2:	09 a9       	ldd	r16, Y+49	; 0x31
     6e4:	1a a9       	ldd	r17, Y+50	; 0x32
     6e6:	06 19       	sub	r16, r6
     6e8:	17 09       	sbc	r17, r7
     6ea:	9b 01       	movw	r18, r22
     6ec:	ac 01       	movw	r20, r24
     6ee:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     6f2:	6d a3       	std	Y+37, r22	; 0x25
     6f4:	7e a3       	std	Y+38, r23	; 0x26
     6f6:	8f a3       	std	Y+39, r24	; 0x27
     6f8:	98 a7       	std	Y+40, r25	; 0x28
     6fa:	00 9f       	mul	r16, r16
     6fc:	60 01       	movw	r12, r0
     6fe:	01 9f       	mul	r16, r17
     700:	d0 0c       	add	r13, r0
     702:	d0 0c       	add	r13, r0
     704:	11 24       	eor	r1, r1
     706:	0d 2c       	mov	r0, r13
     708:	00 0c       	add	r0, r0
     70a:	ee 08       	sbc	r14, r14
     70c:	ff 08       	sbc	r15, r15
     70e:	29 a1       	ldd	r18, Y+33	; 0x21
     710:	3a a1       	ldd	r19, Y+34	; 0x22
     712:	4b a1       	ldd	r20, Y+35	; 0x23
     714:	5c a1       	ldd	r21, Y+36	; 0x24
     716:	ca 01       	movw	r24, r20
     718:	b9 01       	movw	r22, r18
     71a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     71e:	69 a3       	std	Y+33, r22	; 0x21
     720:	7a a3       	std	Y+34, r23	; 0x22
     722:	8b a3       	std	Y+35, r24	; 0x23
     724:	9c a3       	std	Y+36, r25	; 0x24
     726:	c7 01       	movw	r24, r14
     728:	b6 01       	movw	r22, r12
     72a:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     72e:	9b 01       	movw	r18, r22
     730:	ac 01       	movw	r20, r24
     732:	69 a1       	ldd	r22, Y+33	; 0x21
     734:	7a a1       	ldd	r23, Y+34	; 0x22
     736:	8b a1       	ldd	r24, Y+35	; 0x23
     738:	9c a1       	ldd	r25, Y+36	; 0x24
     73a:	0e 94 ca 10 	call	0x2194	; 0x2194 <__addsf3>
     73e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <sqrt>
     742:	2b ad       	ldd	r18, Y+59	; 0x3b
     744:	3c ad       	ldd	r19, Y+60	; 0x3c
     746:	4d ad       	ldd	r20, Y+61	; 0x3d
     748:	5e ad       	ldd	r21, Y+62	; 0x3e
     74a:	29 83       	std	Y+1, r18	; 0x01
     74c:	3a 83       	std	Y+2, r19	; 0x02
     74e:	4b 83       	std	Y+3, r20	; 0x03
     750:	5c 83       	std	Y+4, r21	; 0x04
     752:	23 96       	adiw	r28, 0x03	; 3
     754:	2c ad       	ldd	r18, Y+60	; 0x3c
     756:	3d ad       	ldd	r19, Y+61	; 0x3d
     758:	4e ad       	ldd	r20, Y+62	; 0x3e
     75a:	5f ad       	ldd	r21, Y+63	; 0x3f
     75c:	23 97       	sbiw	r28, 0x03	; 3
     75e:	2d 83       	std	Y+5, r18	; 0x05
     760:	3e 83       	std	Y+6, r19	; 0x06
     762:	4f 83       	std	Y+7, r20	; 0x07
     764:	58 87       	std	Y+8, r21	; 0x08
     766:	2b a9       	ldd	r18, Y+51	; 0x33
     768:	3c a9       	ldd	r19, Y+52	; 0x34
     76a:	4d a9       	ldd	r20, Y+53	; 0x35
     76c:	5e a9       	ldd	r21, Y+54	; 0x36
     76e:	29 87       	std	Y+9, r18	; 0x09
     770:	3a 87       	std	Y+10, r19	; 0x0a
     772:	4b 87       	std	Y+11, r20	; 0x0b
     774:	5c 87       	std	Y+12, r21	; 0x0c
     776:	2f a9       	ldd	r18, Y+55	; 0x37
     778:	38 ad       	ldd	r19, Y+56	; 0x38
     77a:	49 ad       	ldd	r20, Y+57	; 0x39
     77c:	5a ad       	ldd	r21, Y+58	; 0x3a
     77e:	2d 87       	std	Y+13, r18	; 0x0d
     780:	3e 87       	std	Y+14, r19	; 0x0e
     782:	4f 87       	std	Y+15, r20	; 0x0f
     784:	58 8b       	std	Y+16, r21	; 0x10
     786:	89 8a       	std	Y+17, r8	; 0x11
     788:	9a 8a       	std	Y+18, r9	; 0x12
     78a:	ab 8a       	std	Y+19, r10	; 0x13
     78c:	bc 8a       	std	Y+20, r11	; 0x14
     78e:	6d 8b       	std	Y+21, r22	; 0x15
     790:	7e 8b       	std	Y+22, r23	; 0x16
     792:	8f 8b       	std	Y+23, r24	; 0x17
     794:	98 8f       	std	Y+24, r25	; 0x18
     796:	ae 01       	movw	r20, r28
     798:	4f 5f       	subi	r20, 0xFF	; 255
     79a:	5f 4f       	sbci	r21, 0xFF	; 255
     79c:	7a 01       	movw	r14, r20
     79e:	00 e0       	ldi	r16, 0x00	; 0
     7a0:	10 e0       	ldi	r17, 0x00	; 0
     7a2:	61 2c       	mov	r6, r1
     7a4:	71 2c       	mov	r7, r1
     7a6:	c1 2c       	mov	r12, r1
     7a8:	d1 2c       	mov	r13, r1
     7aa:	21 2c       	mov	r2, r1
     7ac:	31 2c       	mov	r3, r1
     7ae:	f7 01       	movw	r30, r14
     7b0:	81 90       	ld	r8, Z+
     7b2:	91 90       	ld	r9, Z+
     7b4:	a1 90       	ld	r10, Z+
     7b6:	b1 90       	ld	r11, Z+
     7b8:	7f 01       	movw	r14, r30
     7ba:	26 2d       	mov	r18, r6
     7bc:	37 2d       	mov	r19, r7
     7be:	4c 2d       	mov	r20, r12
     7c0:	5d 2d       	mov	r21, r13
     7c2:	c5 01       	movw	r24, r10
     7c4:	b4 01       	movw	r22, r8
     7c6:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__gesf2>
     7ca:	18 16       	cp	r1, r24
     7cc:	34 f4       	brge	.+12     	; 0x7da <fourPointCalc+0x3e8>
     7ce:	68 2c       	mov	r6, r8
     7d0:	79 2c       	mov	r7, r9
     7d2:	ca 2c       	mov	r12, r10
     7d4:	db 2c       	mov	r13, r11
     7d6:	20 2e       	mov	r2, r16
     7d8:	31 2e       	mov	r3, r17
     7da:	0f 5f       	subi	r16, 0xFF	; 255
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	06 30       	cpi	r16, 0x06	; 6
     7e0:	11 05       	cpc	r17, r1
     7e2:	29 f7       	brne	.-54     	; 0x7ae <fourPointCalc+0x3bc>
     7e4:	82 2d       	mov	r24, r2
     7e6:	93 2d       	mov	r25, r3
     7e8:	0e 94 03 01 	call	0x206	; 0x206 <distIndex>
     7ec:	fc 01       	movw	r30, r24
     7ee:	e0 80       	ld	r14, Z
     7f0:	f1 80       	ldd	r15, Z+1	; 0x01
     7f2:	fa 8e       	std	Y+26, r15	; 0x1a
     7f4:	e9 8e       	std	Y+25, r14	; 0x19
     7f6:	02 81       	ldd	r16, Z+2	; 0x02
     7f8:	13 81       	ldd	r17, Z+3	; 0x03
     7fa:	1c 8f       	std	Y+28, r17	; 0x1c
     7fc:	0b 8f       	std	Y+27, r16	; 0x1b
     7fe:	ee 0c       	add	r14, r14
     800:	ff 1c       	adc	r15, r15
     802:	ee 0c       	add	r14, r14
     804:	ff 1c       	adc	r15, r15
     806:	e4 0c       	add	r14, r4
     808:	f5 1c       	adc	r15, r5
     80a:	00 0f       	add	r16, r16
     80c:	11 1f       	adc	r17, r17
     80e:	00 0f       	add	r16, r16
     810:	11 1f       	adc	r17, r17
     812:	04 0d       	add	r16, r4
     814:	15 1d       	adc	r17, r5
     816:	f7 01       	movw	r30, r14
     818:	60 81       	ld	r22, Z
     81a:	71 81       	ldd	r23, Z+1	; 0x01
     81c:	f8 01       	movw	r30, r16
     81e:	80 81       	ld	r24, Z
     820:	91 81       	ldd	r25, Z+1	; 0x01
     822:	68 0f       	add	r22, r24
     824:	79 1f       	adc	r23, r25
     826:	77 23       	and	r23, r23
     828:	14 f4       	brge	.+4      	; 0x82e <fourPointCalc+0x43c>
     82a:	6f 5f       	subi	r22, 0xFF	; 255
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	75 95       	asr	r23
     830:	67 95       	ror	r22
     832:	07 2e       	mov	r0, r23
     834:	00 0c       	add	r0, r0
     836:	88 0b       	sbc	r24, r24
     838:	99 0b       	sbc	r25, r25
     83a:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     83e:	4b 01       	movw	r8, r22
     840:	5c 01       	movw	r10, r24
     842:	f7 01       	movw	r30, r14
     844:	62 81       	ldd	r22, Z+2	; 0x02
     846:	73 81       	ldd	r23, Z+3	; 0x03
     848:	f8 01       	movw	r30, r16
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	93 81       	ldd	r25, Z+3	; 0x03
     84e:	68 0f       	add	r22, r24
     850:	79 1f       	adc	r23, r25
     852:	77 23       	and	r23, r23
     854:	14 f4       	brge	.+4      	; 0x85a <fourPointCalc+0x468>
     856:	6f 5f       	subi	r22, 0xFF	; 255
     858:	7f 4f       	sbci	r23, 0xFF	; 255
     85a:	75 95       	asr	r23
     85c:	67 95       	ror	r22
     85e:	07 2e       	mov	r0, r23
     860:	00 0c       	add	r0, r0
     862:	88 0b       	sbc	r24, r24
     864:	99 0b       	sbc	r25, r25
     866:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     86a:	69 a3       	std	Y+33, r22	; 0x21
     86c:	7a a3       	std	Y+34, r23	; 0x22
     86e:	8b a3       	std	Y+35, r24	; 0x23
     870:	9c a3       	std	Y+36, r25	; 0x24
     872:	9e 01       	movw	r18, r28
     874:	21 5e       	subi	r18, 0xE1	; 225
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	ae 01       	movw	r20, r28
     87a:	43 5e       	subi	r20, 0xE3	; 227
     87c:	5f 4f       	sbci	r21, 0xFF	; 255
     87e:	be 01       	movw	r22, r28
     880:	6f 5f       	subi	r22, 0xFF	; 255
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	ce 01       	movw	r24, r28
     886:	49 96       	adiw	r24, 0x19	; 25
     888:	0e 94 51 01 	call	0x2a2	; 0x2a2 <orientationCalculationFour>
     88c:	0d 8d       	ldd	r16, Y+29	; 0x1d
     88e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     890:	00 0f       	add	r16, r16
     892:	11 1f       	adc	r17, r17
     894:	00 0f       	add	r16, r16
     896:	11 1f       	adc	r17, r17
     898:	04 0d       	add	r16, r4
     89a:	15 1d       	adc	r17, r5
     89c:	2f 8c       	ldd	r2, Y+31	; 0x1f
     89e:	38 a0       	ldd	r3, Y+32	; 0x20
     8a0:	22 0c       	add	r2, r2
     8a2:	33 1c       	adc	r3, r3
     8a4:	22 0c       	add	r2, r2
     8a6:	33 1c       	adc	r3, r3
     8a8:	24 0c       	add	r2, r4
     8aa:	35 1c       	adc	r3, r5
     8ac:	f8 01       	movw	r30, r16
     8ae:	60 81       	ld	r22, Z
     8b0:	71 81       	ldd	r23, Z+1	; 0x01
     8b2:	f1 01       	movw	r30, r2
     8b4:	80 81       	ld	r24, Z
     8b6:	91 81       	ldd	r25, Z+1	; 0x01
     8b8:	68 1b       	sub	r22, r24
     8ba:	79 0b       	sbc	r23, r25
     8bc:	07 2e       	mov	r0, r23
     8be:	00 0c       	add	r0, r0
     8c0:	88 0b       	sbc	r24, r24
     8c2:	99 0b       	sbc	r25, r25
     8c4:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     8c8:	6b 01       	movw	r12, r22
     8ca:	7c 01       	movw	r14, r24
     8cc:	f8 01       	movw	r30, r16
     8ce:	62 81       	ldd	r22, Z+2	; 0x02
     8d0:	73 81       	ldd	r23, Z+3	; 0x03
     8d2:	f1 01       	movw	r30, r2
     8d4:	82 81       	ldd	r24, Z+2	; 0x02
     8d6:	93 81       	ldd	r25, Z+3	; 0x03
     8d8:	68 1b       	sub	r22, r24
     8da:	79 0b       	sbc	r23, r25
     8dc:	07 2e       	mov	r0, r23
     8de:	00 0c       	add	r0, r0
     8e0:	88 0b       	sbc	r24, r24
     8e2:	99 0b       	sbc	r25, r25
     8e4:	0e 94 55 12 	call	0x24aa	; 0x24aa <__floatsisf>
     8e8:	90 58       	subi	r25, 0x80	; 128
     8ea:	a7 01       	movw	r20, r14
     8ec:	96 01       	movw	r18, r12
     8ee:	0e 94 49 11 	call	0x2292	; 0x2292 <atan2>
     8f2:	2b ed       	ldi	r18, 0xDB	; 219
     8f4:	3f e0       	ldi	r19, 0x0F	; 15
     8f6:	49 ec       	ldi	r20, 0xC9	; 201
     8f8:	5f e3       	ldi	r21, 0x3F	; 63
     8fa:	0e 94 ca 10 	call	0x2194	; 0x2194 <__addsf3>
     8fe:	6b 01       	movw	r12, r22
     900:	7c 01       	movw	r14, r24
     902:	a5 01       	movw	r20, r10
     904:	94 01       	movw	r18, r8
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	94 e4       	ldi	r25, 0x44	; 68
     90e:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
     912:	4b 01       	movw	r8, r22
     914:	5c 01       	movw	r10, r24
     916:	29 a1       	ldd	r18, Y+33	; 0x21
     918:	3a a1       	ldd	r19, Y+34	; 0x22
     91a:	4b a1       	ldd	r20, Y+35	; 0x23
     91c:	5c a1       	ldd	r21, Y+36	; 0x24
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	8f eb       	ldi	r24, 0xBF	; 191
     924:	93 e4       	ldi	r25, 0x43	; 67
     926:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
     92a:	2b 01       	movw	r4, r22
     92c:	3c 01       	movw	r6, r24
     92e:	c7 01       	movw	r24, r14
     930:	b6 01       	movw	r22, r12
     932:	0e 94 e5 13 	call	0x27ca	; 0x27ca <sin>
     936:	69 a3       	std	Y+33, r22	; 0x21
     938:	7a a3       	std	Y+34, r23	; 0x22
     93a:	8b a3       	std	Y+35, r24	; 0x23
     93c:	9c a3       	std	Y+36, r25	; 0x24
     93e:	c7 01       	movw	r24, r14
     940:	b6 01       	movw	r22, r12
     942:	0e 94 ad 11 	call	0x235a	; 0x235a <cos>
     946:	6d a3       	std	Y+37, r22	; 0x25
     948:	7e a3       	std	Y+38, r23	; 0x26
     94a:	8f a3       	std	Y+39, r24	; 0x27
     94c:	98 a7       	std	Y+40, r25	; 0x28
     94e:	06 e2       	ldi	r16, 0x26	; 38
     950:	11 e0       	ldi	r17, 0x01	; 1
     952:	29 a1       	ldd	r18, Y+33	; 0x21
     954:	3a a1       	ldd	r19, Y+34	; 0x22
     956:	4b a1       	ldd	r20, Y+35	; 0x23
     958:	5c a1       	ldd	r21, Y+36	; 0x24
     95a:	c3 01       	movw	r24, r6
     95c:	b2 01       	movw	r22, r4
     95e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     962:	69 a7       	std	Y+41, r22	; 0x29
     964:	7a a7       	std	Y+42, r23	; 0x2a
     966:	8b a7       	std	Y+43, r24	; 0x2b
     968:	9c a7       	std	Y+44, r25	; 0x2c
     96a:	2d a1       	ldd	r18, Y+37	; 0x25
     96c:	3e a1       	ldd	r19, Y+38	; 0x26
     96e:	4f a1       	ldd	r20, Y+39	; 0x27
     970:	58 a5       	ldd	r21, Y+40	; 0x28
     972:	c5 01       	movw	r24, r10
     974:	b4 01       	movw	r22, r8
     976:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     97a:	9b 01       	movw	r18, r22
     97c:	ac 01       	movw	r20, r24
     97e:	69 a5       	ldd	r22, Y+41	; 0x29
     980:	7a a5       	ldd	r23, Y+42	; 0x2a
     982:	8b a5       	ldd	r24, Y+43	; 0x2b
     984:	9c a5       	ldd	r25, Y+44	; 0x2c
     986:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
     98a:	f8 01       	movw	r30, r16
     98c:	60 83       	st	Z, r22
     98e:	71 83       	std	Z+1, r23	; 0x01
     990:	82 83       	std	Z+2, r24	; 0x02
     992:	93 83       	std	Z+3, r25	; 0x03
     994:	2d a1       	ldd	r18, Y+37	; 0x25
     996:	3e a1       	ldd	r19, Y+38	; 0x26
     998:	4f a1       	ldd	r20, Y+39	; 0x27
     99a:	58 a5       	ldd	r21, Y+40	; 0x28
     99c:	c3 01       	movw	r24, r6
     99e:	b2 01       	movw	r22, r4
     9a0:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     9a4:	2b 01       	movw	r4, r22
     9a6:	3c 01       	movw	r6, r24
     9a8:	29 a1       	ldd	r18, Y+33	; 0x21
     9aa:	3a a1       	ldd	r19, Y+34	; 0x22
     9ac:	4b a1       	ldd	r20, Y+35	; 0x23
     9ae:	5c a1       	ldd	r21, Y+36	; 0x24
     9b0:	c5 01       	movw	r24, r10
     9b2:	b4 01       	movw	r22, r8
     9b4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     9b8:	9b 01       	movw	r18, r22
     9ba:	ac 01       	movw	r20, r24
     9bc:	c3 01       	movw	r24, r6
     9be:	b2 01       	movw	r22, r4
     9c0:	0e 94 ca 10 	call	0x2194	; 0x2194 <__addsf3>
     9c4:	f8 01       	movw	r30, r16
     9c6:	64 83       	std	Z+4, r22	; 0x04
     9c8:	75 83       	std	Z+5, r23	; 0x05
     9ca:	86 83       	std	Z+6, r24	; 0x06
     9cc:	97 83       	std	Z+7, r25	; 0x07
     9ce:	f7 fa       	bst	r15, 7
     9d0:	f0 94       	com	r15
     9d2:	f7 f8       	bld	r15, 7
     9d4:	f0 94       	com	r15
     9d6:	c0 86       	std	Z+8, r12	; 0x08
     9d8:	d1 86       	std	Z+9, r13	; 0x09
     9da:	e2 86       	std	Z+10, r14	; 0x0a
     9dc:	f3 86       	std	Z+11, r15	; 0x0b
     9de:	c8 01       	movw	r24, r16
     9e0:	ce 5b       	subi	r28, 0xBE	; 190
     9e2:	df 4f       	sbci	r29, 0xFF	; 255
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	bf 90       	pop	r11
     a00:	af 90       	pop	r10
     a02:	9f 90       	pop	r9
     a04:	8f 90       	pop	r8
     a06:	7f 90       	pop	r7
     a08:	6f 90       	pop	r6
     a0a:	5f 90       	pop	r5
     a0c:	4f 90       	pop	r4
     a0e:	3f 90       	pop	r3
     a10:	2f 90       	pop	r2
     a12:	08 95       	ret

00000a14 <localization_calc>:
     a14:	4f 92       	push	r4
     a16:	5f 92       	push	r5
     a18:	6f 92       	push	r6
     a1a:	7f 92       	push	r7
     a1c:	af 92       	push	r10
     a1e:	bf 92       	push	r11
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	68 97       	sbiw	r28, 0x18	; 24
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	fc 01       	movw	r30, r24
     a42:	0d b7       	in	r16, 0x3d	; 61
     a44:	1e b7       	in	r17, 0x3e	; 62
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	80 85       	ldd	r24, Z+8	; 0x08
     a50:	91 85       	ldd	r25, Z+9	; 0x09
     a52:	9c 83       	std	Y+4, r25	; 0x04
     a54:	8b 83       	std	Y+3, r24	; 0x03
     a56:	82 81       	ldd	r24, Z+2	; 0x02
     a58:	93 81       	ldd	r25, Z+3	; 0x03
     a5a:	9e 83       	std	Y+6, r25	; 0x06
     a5c:	8d 83       	std	Y+5, r24	; 0x05
     a5e:	82 85       	ldd	r24, Z+10	; 0x0a
     a60:	93 85       	ldd	r25, Z+11	; 0x0b
     a62:	98 87       	std	Y+8, r25	; 0x08
     a64:	8f 83       	std	Y+7, r24	; 0x07
     a66:	84 81       	ldd	r24, Z+4	; 0x04
     a68:	95 81       	ldd	r25, Z+5	; 0x05
     a6a:	9a 87       	std	Y+10, r25	; 0x0a
     a6c:	89 87       	std	Y+9, r24	; 0x09
     a6e:	84 85       	ldd	r24, Z+12	; 0x0c
     a70:	95 85       	ldd	r25, Z+13	; 0x0d
     a72:	9c 87       	std	Y+12, r25	; 0x0c
     a74:	8b 87       	std	Y+11, r24	; 0x0b
     a76:	86 81       	ldd	r24, Z+6	; 0x06
     a78:	97 81       	ldd	r25, Z+7	; 0x07
     a7a:	9e 87       	std	Y+14, r25	; 0x0e
     a7c:	8d 87       	std	Y+13, r24	; 0x0d
     a7e:	86 85       	ldd	r24, Z+14	; 0x0e
     a80:	97 85       	ldd	r25, Z+15	; 0x0f
     a82:	98 8b       	std	Y+16, r25	; 0x10
     a84:	8f 87       	std	Y+15, r24	; 0x0f
     a86:	fe 01       	movw	r30, r28
     a88:	71 96       	adiw	r30, 0x11	; 17
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	df 01       	movw	r26, r30
     a8e:	1d 92       	st	X+, r1
     a90:	8a 95       	dec	r24
     a92:	e9 f7       	brne	.-6      	; 0xa8e <localization_calc+0x7a>
     a94:	70 97       	sbiw	r30, 0x10	; 16
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	40 81       	ld	r20, Z
     aa0:	51 81       	ldd	r21, Z+1	; 0x01
     aa2:	4f 3f       	cpi	r20, 0xFF	; 255
     aa4:	53 40       	sbci	r21, 0x03	; 3
     aa6:	71 f0       	breq	.+28     	; 0xac4 <localization_calc+0xb0>
     aa8:	dc 01       	movw	r26, r24
     aaa:	aa 0f       	add	r26, r26
     aac:	bb 1f       	adc	r27, r27
     aae:	41 e0       	ldi	r20, 0x01	; 1
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	4c 0f       	add	r20, r28
     ab4:	5d 1f       	adc	r21, r29
     ab6:	a4 0f       	add	r26, r20
     ab8:	b5 1f       	adc	r27, r21
     aba:	51 96       	adiw	r26, 0x11	; 17
     abc:	3c 93       	st	X, r19
     abe:	2e 93       	st	-X, r18
     ac0:	50 97       	sbiw	r26, 0x10	; 16
     ac2:	01 96       	adiw	r24, 0x01	; 1
     ac4:	2f 5f       	subi	r18, 0xFF	; 255
     ac6:	3f 4f       	sbci	r19, 0xFF	; 255
     ac8:	34 96       	adiw	r30, 0x04	; 4
     aca:	24 30       	cpi	r18, 0x04	; 4
     acc:	31 05       	cpc	r19, r1
     ace:	39 f7       	brne	.-50     	; 0xa9e <localization_calc+0x8a>
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	09 f4       	brne	.+2      	; 0xad6 <localization_calc+0xc2>
     ad4:	8b c0       	rjmp	.+278    	; 0xbec <__stack+0xed>
     ad6:	ed b6       	in	r14, 0x3d	; 61
     ad8:	fe b6       	in	r15, 0x3e	; 62
     ada:	6c 01       	movw	r12, r24
     adc:	cc 0c       	add	r12, r12
     ade:	dd 1c       	adc	r13, r13
     ae0:	cc 0c       	add	r12, r12
     ae2:	dd 1c       	adc	r13, r13
     ae4:	ad b7       	in	r26, 0x3d	; 61
     ae6:	be b7       	in	r27, 0x3e	; 62
     ae8:	ac 19       	sub	r26, r12
     aea:	bd 09       	sbc	r27, r13
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	be bf       	out	0x3e, r27	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	ad bf       	out	0x3d, r26	; 61
     af6:	ed b7       	in	r30, 0x3d	; 61
     af8:	fe b7       	in	r31, 0x3e	; 62
     afa:	31 96       	adiw	r30, 0x01	; 1
     afc:	5f 01       	movw	r10, r30
     afe:	18 16       	cp	r1, r24
     b00:	19 06       	cpc	r1, r25
     b02:	24 f5       	brge	.+72     	; 0xb4c <__stack+0x4d>
     b04:	9e 01       	movw	r18, r28
     b06:	2f 5e       	subi	r18, 0xEF	; 239
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	df 01       	movw	r26, r30
     b0c:	ce 0e       	add	r12, r30
     b0e:	df 1e       	adc	r13, r31
     b10:	f9 01       	movw	r30, r18
     b12:	41 91       	ld	r20, Z+
     b14:	51 91       	ld	r21, Z+
     b16:	9f 01       	movw	r18, r30
     b18:	fa 01       	movw	r30, r20
     b1a:	ee 0f       	add	r30, r30
     b1c:	ff 1f       	adc	r31, r31
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	41 e0       	ldi	r20, 0x01	; 1
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	4c 0f       	add	r20, r28
     b28:	5d 1f       	adc	r21, r29
     b2a:	e4 0f       	add	r30, r20
     b2c:	f5 1f       	adc	r31, r21
     b2e:	40 81       	ld	r20, Z
     b30:	51 81       	ldd	r21, Z+1	; 0x01
     b32:	11 96       	adiw	r26, 0x01	; 1
     b34:	5c 93       	st	X, r21
     b36:	4e 93       	st	-X, r20
     b38:	42 81       	ldd	r20, Z+2	; 0x02
     b3a:	53 81       	ldd	r21, Z+3	; 0x03
     b3c:	13 96       	adiw	r26, 0x03	; 3
     b3e:	5c 93       	st	X, r21
     b40:	4e 93       	st	-X, r20
     b42:	12 97       	sbiw	r26, 0x02	; 2
     b44:	14 96       	adiw	r26, 0x04	; 4
     b46:	ac 15       	cp	r26, r12
     b48:	bd 05       	cpc	r27, r13
     b4a:	11 f7       	brne	.-60     	; 0xb10 <__stack+0x11>
     b4c:	6e 9a       	sbi	0x0d, 6	; 13
     b4e:	76 98       	cbi	0x0e, 6	; 14
     b50:	db 01       	movw	r26, r22
     b52:	4d 90       	ld	r4, X+
     b54:	5d 90       	ld	r5, X+
     b56:	6d 90       	ld	r6, X+
     b58:	7c 90       	ld	r7, X
     b5a:	13 97       	sbiw	r26, 0x03	; 3
     b5c:	ee e3       	ldi	r30, 0x3E	; 62
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	40 82       	st	Z, r4
     b62:	51 82       	std	Z+1, r5	; 0x01
     b64:	62 82       	std	Z+2, r6	; 0x02
     b66:	73 82       	std	Z+3, r7	; 0x03
     b68:	14 96       	adiw	r26, 0x04	; 4
     b6a:	4d 90       	ld	r4, X+
     b6c:	5d 90       	ld	r5, X+
     b6e:	6d 90       	ld	r6, X+
     b70:	7c 90       	ld	r7, X
     b72:	17 97       	sbiw	r26, 0x07	; 7
     b74:	44 82       	std	Z+4, r4	; 0x04
     b76:	55 82       	std	Z+5, r5	; 0x05
     b78:	66 82       	std	Z+6, r6	; 0x06
     b7a:	77 82       	std	Z+7, r7	; 0x07
     b7c:	18 96       	adiw	r26, 0x08	; 8
     b7e:	4d 91       	ld	r20, X+
     b80:	5d 91       	ld	r21, X+
     b82:	6d 91       	ld	r22, X+
     b84:	7c 91       	ld	r23, X
     b86:	1b 97       	sbiw	r26, 0x0b	; 11
     b88:	40 87       	std	Z+8, r20	; 0x08
     b8a:	51 87       	std	Z+9, r21	; 0x09
     b8c:	62 87       	std	Z+10, r22	; 0x0a
     b8e:	73 87       	std	Z+11, r23	; 0x0b
     b90:	04 97       	sbiw	r24, 0x04	; 4
     b92:	29 f4       	brne	.+10     	; 0xb9e <__stack+0x9f>
     b94:	c5 01       	movw	r24, r10
     b96:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <fourPointCalc>
     b9a:	dc 01       	movw	r26, r24
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <__stack+0xa3>
     b9e:	ae e3       	ldi	r26, 0x3E	; 62
     ba0:	b1 e0       	ldi	r27, 0x01	; 1
     ba2:	4d 91       	ld	r20, X+
     ba4:	5d 91       	ld	r21, X+
     ba6:	6d 91       	ld	r22, X+
     ba8:	7c 91       	ld	r23, X
     baa:	13 97       	sbiw	r26, 0x03	; 3
     bac:	e2 e3       	ldi	r30, 0x32	; 50
     bae:	f1 e0       	ldi	r31, 0x01	; 1
     bb0:	40 83       	st	Z, r20
     bb2:	51 83       	std	Z+1, r21	; 0x01
     bb4:	62 83       	std	Z+2, r22	; 0x02
     bb6:	73 83       	std	Z+3, r23	; 0x03
     bb8:	14 96       	adiw	r26, 0x04	; 4
     bba:	4d 91       	ld	r20, X+
     bbc:	5d 91       	ld	r21, X+
     bbe:	6d 91       	ld	r22, X+
     bc0:	7c 91       	ld	r23, X
     bc2:	17 97       	sbiw	r26, 0x07	; 7
     bc4:	44 83       	std	Z+4, r20	; 0x04
     bc6:	55 83       	std	Z+5, r21	; 0x05
     bc8:	66 83       	std	Z+6, r22	; 0x06
     bca:	77 83       	std	Z+7, r23	; 0x07
     bcc:	18 96       	adiw	r26, 0x08	; 8
     bce:	8d 91       	ld	r24, X+
     bd0:	9d 91       	ld	r25, X+
     bd2:	0d 90       	ld	r0, X+
     bd4:	bc 91       	ld	r27, X
     bd6:	a0 2d       	mov	r26, r0
     bd8:	80 87       	std	Z+8, r24	; 0x08
     bda:	91 87       	std	Z+9, r25	; 0x09
     bdc:	a2 87       	std	Z+10, r26	; 0x0a
     bde:	b3 87       	std	Z+11, r27	; 0x0b
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	fe be       	out	0x3e, r15	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	ed be       	out	0x3d, r14	; 61
     bea:	22 c0       	rjmp	.+68     	; 0xc30 <__stack+0x131>
     bec:	fb 01       	movw	r30, r22
     bee:	80 81       	ld	r24, Z
     bf0:	91 81       	ldd	r25, Z+1	; 0x01
     bf2:	a2 81       	ldd	r26, Z+2	; 0x02
     bf4:	b3 81       	ldd	r27, Z+3	; 0x03
     bf6:	e2 e3       	ldi	r30, 0x32	; 50
     bf8:	f1 e0       	ldi	r31, 0x01	; 1
     bfa:	80 83       	st	Z, r24
     bfc:	91 83       	std	Z+1, r25	; 0x01
     bfe:	a2 83       	std	Z+2, r26	; 0x02
     c00:	b3 83       	std	Z+3, r27	; 0x03
     c02:	db 01       	movw	r26, r22
     c04:	14 96       	adiw	r26, 0x04	; 4
     c06:	cd 90       	ld	r12, X+
     c08:	dd 90       	ld	r13, X+
     c0a:	ed 90       	ld	r14, X+
     c0c:	fc 90       	ld	r15, X
     c0e:	17 97       	sbiw	r26, 0x07	; 7
     c10:	c4 82       	std	Z+4, r12	; 0x04
     c12:	d5 82       	std	Z+5, r13	; 0x05
     c14:	e6 82       	std	Z+6, r14	; 0x06
     c16:	f7 82       	std	Z+7, r15	; 0x07
     c18:	18 96       	adiw	r26, 0x08	; 8
     c1a:	4d 91       	ld	r20, X+
     c1c:	5d 91       	ld	r21, X+
     c1e:	6d 91       	ld	r22, X+
     c20:	7c 91       	ld	r23, X
     c22:	1b 97       	sbiw	r26, 0x0b	; 11
     c24:	40 87       	std	Z+8, r20	; 0x08
     c26:	51 87       	std	Z+9, r21	; 0x09
     c28:	62 87       	std	Z+10, r22	; 0x0a
     c2a:	73 87       	std	Z+11, r23	; 0x0b
     c2c:	6e 9a       	sbi	0x0d, 6	; 13
     c2e:	76 9a       	sbi	0x0e, 6	; 14
     c30:	82 e3       	ldi	r24, 0x32	; 50
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	1e bf       	out	0x3e, r17	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	0d bf       	out	0x3d, r16	; 61
     c3e:	68 96       	adiw	r28, 0x18	; 24
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	df 90       	pop	r13
     c58:	cf 90       	pop	r12
     c5a:	bf 90       	pop	r11
     c5c:	af 90       	pop	r10
     c5e:	7f 90       	pop	r7
     c60:	6f 90       	pop	r6
     c62:	5f 90       	pop	r5
     c64:	4f 90       	pop	r4
     c66:	08 95       	ret

00000c68 <init>:
************************************************************/

/* Initialization of Pins and System Clock */
void init(void){
	
	m_clockdivide(CLOCK_DIVIDE); // Set to 2 MHz
     c68:	e1 e6       	ldi	r30, 0x61	; 97
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 e8       	ldi	r24, 0x80	; 128
     c6e:	80 83       	st	Z, r24
     c70:	10 82       	st	Z, r1
	
	//Set to Input
	clear(DDRD,0); // D0
     c72:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     c74:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     c76:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     c78:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     c7a:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     c7c:	23 9a       	sbi	0x04, 3	; 4
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     c7e:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     c80:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     c82:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     c84:	2b 98       	cbi	0x05, 3	; 5
	
	m_bus_init();
     c86:	0e 94 91 0b 	call	0x1722	; 0x1722 <m_bus_init>
	while(!m_wii_open());
     c8a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <m_wii_open>
     c8e:	88 23       	and	r24, r24
     c90:	e1 f3       	breq	.-8      	; 0xc8a <init+0x22>
	sei();
     c92:	78 94       	sei
     c94:	08 95       	ret

00000c96 <timer1_init>:
	//while(!m_usb_isconnected());
}

/* Timer1 Initialization for PWM Motor Control */
void timer1_init(void)
{
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     c9a:	e1 e8       	ldi	r30, 0x81	; 129
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	8b 7f       	andi	r24, 0xFB	; 251
     ca2:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	80 83       	st	Z, r24
	set(TCCR1B,CS10);
     caa:	80 81       	ld	r24, Z
     cac:	81 60       	ori	r24, 0x01	; 1
     cae:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     cb0:	80 81       	ld	r24, Z
     cb2:	8f 7e       	andi	r24, 0xEF	; 239
     cb4:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     cb6:	80 81       	ld	r24, Z
     cb8:	88 60       	ori	r24, 0x08	; 8
     cba:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     cbc:	e0 e8       	ldi	r30, 0x80	; 128
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8d 7f       	andi	r24, 0xFD	; 253
     cc4:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     cc6:	80 81       	ld	r24, Z
     cc8:	8e 7f       	andi	r24, 0xFE	; 254
     cca:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     ccc:	80 81       	ld	r24, Z
     cce:	8f 7d       	andi	r24, 0xDF	; 223
     cd0:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     cd2:	80 81       	ld	r24, Z
     cd4:	8f 7e       	andi	r24, 0xEF	; 239
     cd6:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     cd8:	c8 e8       	ldi	r28, 0x88	; 136
     cda:	d0 e0       	ldi	r29, 0x00	; 0
     cdc:	80 e8       	ldi	r24, 0x80	; 128
     cde:	9e e3       	ldi	r25, 0x3E	; 62
     ce0:	99 83       	std	Y+1, r25	; 0x01
     ce2:	88 83       	st	Y, r24
	OCR1B = (float)OCR1A*left_duty_cycle;
     ce4:	68 81       	ld	r22, Y
     ce6:	79 81       	ldd	r23, Y+1	; 0x01
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__floatunsisf>
     cf0:	20 91 16 01 	lds	r18, 0x0116
     cf4:	30 91 17 01 	lds	r19, 0x0117
     cf8:	40 91 18 01 	lds	r20, 0x0118
     cfc:	50 91 19 01 	lds	r21, 0x0119
     d00:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     d04:	0e 94 24 12 	call	0x2448	; 0x2448 <__fixunssfsi>
     d08:	70 93 8b 00 	sts	0x008B, r23
     d0c:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*right_duty_cycle;
     d10:	68 81       	ld	r22, Y
     d12:	79 81       	ldd	r23, Y+1	; 0x01
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__floatunsisf>
     d1c:	20 91 12 01 	lds	r18, 0x0112
     d20:	30 91 13 01 	lds	r19, 0x0113
     d24:	40 91 14 01 	lds	r20, 0x0114
     d28:	50 91 15 01 	lds	r21, 0x0115
     d2c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     d30:	0e 94 24 12 	call	0x2448	; 0x2448 <__fixunssfsi>
     d34:	70 93 8d 00 	sts	0x008D, r23
     d38:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     d3c:	ef e6       	ldi	r30, 0x6F	; 111
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	82 60       	ori	r24, 0x02	; 2
     d44:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     d46:	80 81       	ld	r24, Z
     d48:	84 60       	ori	r24, 0x04	; 4
     d4a:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     d4c:	80 81       	ld	r24, Z
     d4e:	88 60       	ori	r24, 0x08	; 8
     d50:	80 83       	st	Z, r24
}
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <timer3_init>:

/* Timer3 Initialization for fixed timestep calculations */
void timer3_init(void)
{
	clear(TCCR3B,CS32); // prescale /1
     d58:	e1 e9       	ldi	r30, 0x91	; 145
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	8b 7f       	andi	r24, 0xFB	; 251
     d60:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     d62:	80 81       	ld	r24, Z
     d64:	8d 7f       	andi	r24, 0xFD	; 253
     d66:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     d68:	80 81       	ld	r24, Z
     d6a:	81 60       	ori	r24, 0x01	; 1
     d6c:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     d6e:	80 81       	ld	r24, Z
     d70:	8f 7e       	andi	r24, 0xEF	; 239
     d72:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     d74:	80 81       	ld	r24, Z
     d76:	88 60       	ori	r24, 0x08	; 8
     d78:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     d7a:	e0 e9       	ldi	r30, 0x90	; 144
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	8d 7f       	andi	r24, 0xFD	; 253
     d82:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     d84:	80 81       	ld	r24, Z
     d86:	8e 7f       	andi	r24, 0xFE	; 254
     d88:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     d8a:	80 e8       	ldi	r24, 0x80	; 128
     d8c:	9e e3       	ldi	r25, 0x3E	; 62
     d8e:	90 93 99 00 	sts	0x0099, r25
     d92:	80 93 98 00 	sts	0x0098, r24
     d96:	08 95       	ret

00000d98 <theta_error_correction>:

}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
     d98:	8f 92       	push	r8
     d9a:	9f 92       	push	r9
     d9c:	af 92       	push	r10
     d9e:	bf 92       	push	r11
     da0:	cf 92       	push	r12
     da2:	df 92       	push	r13
     da4:	ef 92       	push	r14
     da6:	ff 92       	push	r15
     da8:	6b 01       	movw	r12, r22
     daa:	7c 01       	movw	r14, r24
	if(fabs(error)>PI){return error-2.0*PI*error/fabs(error);}
     dac:	4b 01       	movw	r8, r22
     dae:	5c 01       	movw	r10, r24
     db0:	e8 94       	clt
     db2:	b7 f8       	bld	r11, 7
     db4:	2b ed       	ldi	r18, 0xDB	; 219
     db6:	3f e0       	ldi	r19, 0x0F	; 15
     db8:	49 e4       	ldi	r20, 0x49	; 73
     dba:	50 e4       	ldi	r21, 0x40	; 64
     dbc:	c5 01       	movw	r24, r10
     dbe:	b4 01       	movw	r22, r8
     dc0:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__gesf2>
     dc4:	18 16       	cp	r1, r24
     dc6:	bc f4       	brge	.+46     	; 0xdf6 <theta_error_correction+0x5e>
     dc8:	2b ed       	ldi	r18, 0xDB	; 219
     dca:	3f e0       	ldi	r19, 0x0F	; 15
     dcc:	49 ec       	ldi	r20, 0xC9	; 201
     dce:	50 e4       	ldi	r21, 0x40	; 64
     dd0:	c7 01       	movw	r24, r14
     dd2:	b6 01       	movw	r22, r12
     dd4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     dd8:	a5 01       	movw	r20, r10
     dda:	94 01       	movw	r18, r8
     ddc:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
     de0:	9b 01       	movw	r18, r22
     de2:	ac 01       	movw	r20, r24
     de4:	c7 01       	movw	r24, r14
     de6:	b6 01       	movw	r22, r12
     de8:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
     dec:	56 2f       	mov	r21, r22
     dee:	47 2f       	mov	r20, r23
     df0:	38 2f       	mov	r19, r24
     df2:	29 2f       	mov	r18, r25
     df4:	04 c0       	rjmp	.+8      	; 0xdfe <theta_error_correction+0x66>
	else{return error;}
     df6:	5c 2d       	mov	r21, r12
     df8:	4d 2d       	mov	r20, r13
     dfa:	3e 2d       	mov	r19, r14
     dfc:	2f 2d       	mov	r18, r15
}
     dfe:	65 2f       	mov	r22, r21
     e00:	74 2f       	mov	r23, r20
     e02:	83 2f       	mov	r24, r19
     e04:	92 2f       	mov	r25, r18
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	df 90       	pop	r13
     e0c:	cf 90       	pop	r12
     e0e:	bf 90       	pop	r11
     e10:	af 90       	pop	r10
     e12:	9f 90       	pop	r9
     e14:	8f 90       	pop	r8
     e16:	08 95       	ret

00000e18 <run_control_loop>:
	robotCenterPrev[1] = y;
}

/* PID Control (Currently only for theta) */
void run_control_loop(void)
{
     e18:	4f 92       	push	r4
     e1a:	5f 92       	push	r5
     e1c:	6f 92       	push	r6
     e1e:	7f 92       	push	r7
     e20:	8f 92       	push	r8
     e22:	9f 92       	push	r9
     e24:	af 92       	push	r10
     e26:	bf 92       	push	r11
     e28:	cf 92       	push	r12
     e2a:	df 92       	push	r13
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	60 97       	sbiw	r28, 0x10	; 16
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
	// Get theta error based output
	float theta_error = theta_target - theta;
     e48:	20 91 67 01 	lds	r18, 0x0167
     e4c:	30 91 68 01 	lds	r19, 0x0168
     e50:	40 91 69 01 	lds	r20, 0x0169
     e54:	50 91 6a 01 	lds	r21, 0x016A
     e58:	60 91 5f 01 	lds	r22, 0x015F
     e5c:	70 91 60 01 	lds	r23, 0x0160
     e60:	80 91 61 01 	lds	r24, 0x0161
     e64:	90 91 62 01 	lds	r25, 0x0162
     e68:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
	theta_error = theta_error_correction(theta_error);
     e6c:	0e 94 cc 06 	call	0xd98	; 0xd98 <theta_error_correction>
     e70:	6b 01       	movw	r12, r22
     e72:	7c 01       	movw	r14, r24
	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
     e74:	20 91 5b 01 	lds	r18, 0x015B
     e78:	30 91 5c 01 	lds	r19, 0x015C
     e7c:	40 91 5d 01 	lds	r20, 0x015D
     e80:	50 91 5e 01 	lds	r21, 0x015E
     e84:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
     e88:	2f e6       	ldi	r18, 0x6F	; 111
     e8a:	32 e1       	ldi	r19, 0x12	; 18
     e8c:	43 e8       	ldi	r20, 0x83	; 131
     e8e:	5a e3       	ldi	r21, 0x3A	; 58
     e90:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
	float angular_output = THETA_Kp*theta_error - THETA_Kd*derivative; //If output > 0, turn left
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	a9 01       	movw	r20, r18
     e9a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     e9e:	9b 01       	movw	r18, r22
     ea0:	ac 01       	movw	r20, r24
     ea2:	c7 01       	movw	r24, r14
     ea4:	b6 01       	movw	r22, r12
     ea6:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
	previous_theta_error = theta_error;
     eaa:	c0 92 5b 01 	sts	0x015B, r12
     eae:	d0 92 5c 01 	sts	0x015C, r13
     eb2:	e0 92 5d 01 	sts	0x015D, r14
     eb6:	f0 92 5e 01 	sts	0x015E, r15
	angular_output = angular_output/PI; //Normalize to max value of 1 given Kp gain of 1
     eba:	2b ed       	ldi	r18, 0xDB	; 219
     ebc:	3f e0       	ldi	r19, 0x0F	; 15
     ebe:	49 e4       	ldi	r20, 0x49	; 73
     ec0:	50 e4       	ldi	r21, 0x40	; 64
     ec2:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
     ec6:	2b 01       	movw	r4, r22
     ec8:	3c 01       	movw	r6, r24
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	b0 58       	subi	r27, 0x80	; 128
     ed0:	8d 87       	std	Y+13, r24	; 0x0d
     ed2:	9e 87       	std	Y+14, r25	; 0x0e
     ed4:	af 87       	std	Y+15, r26	; 0x0f
     ed6:	b8 8b       	std	Y+16, r27	; 0x10
	right_duty_cycle = angular_output;
	
	// Get linear error based output
	float y_delta = y_target-y;
     ed8:	20 91 6b 01 	lds	r18, 0x016B
     edc:	30 91 6c 01 	lds	r19, 0x016C
     ee0:	40 91 6d 01 	lds	r20, 0x016D
     ee4:	50 91 6e 01 	lds	r21, 0x016E
     ee8:	60 91 63 01 	lds	r22, 0x0163
     eec:	70 91 64 01 	lds	r23, 0x0164
     ef0:	80 91 65 01 	lds	r24, 0x0165
     ef4:	90 91 66 01 	lds	r25, 0x0166
     ef8:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
     efc:	69 83       	std	Y+1, r22	; 0x01
     efe:	7a 83       	std	Y+2, r23	; 0x02
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	9c 83       	std	Y+4, r25	; 0x04
	float x_delta = x_target-x;
     f04:	20 91 6f 01 	lds	r18, 0x016F
     f08:	30 91 70 01 	lds	r19, 0x0170
     f0c:	40 91 71 01 	lds	r20, 0x0171
     f10:	50 91 72 01 	lds	r21, 0x0172
     f14:	60 91 0e 01 	lds	r22, 0x010E
     f18:	70 91 0f 01 	lds	r23, 0x010F
     f1c:	80 91 10 01 	lds	r24, 0x0110
     f20:	90 91 11 01 	lds	r25, 0x0111
     f24:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
     f28:	6d 83       	std	Y+5, r22	; 0x05
     f2a:	7e 83       	std	Y+6, r23	; 0x06
     f2c:	8f 83       	std	Y+7, r24	; 0x07
     f2e:	98 87       	std	Y+8, r25	; 0x08
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
     f30:	c7 01       	movw	r24, r14
     f32:	b6 01       	movw	r22, r12
     f34:	0e 94 ad 11 	call	0x235a	; 0x235a <cos>
     f38:	4b 01       	movw	r8, r22
     f3a:	5c 01       	movw	r10, r24
     f3c:	29 81       	ldd	r18, Y+1	; 0x01
     f3e:	3a 81       	ldd	r19, Y+2	; 0x02
     f40:	4b 81       	ldd	r20, Y+3	; 0x03
     f42:	5c 81       	ldd	r21, Y+4	; 0x04
     f44:	ca 01       	movw	r24, r20
     f46:	b9 01       	movw	r22, r18
     f48:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     f4c:	69 87       	std	Y+9, r22	; 0x09
     f4e:	7a 87       	std	Y+10, r23	; 0x0a
     f50:	8b 87       	std	Y+11, r24	; 0x0b
     f52:	9c 87       	std	Y+12, r25	; 0x0c
     f54:	29 81       	ldd	r18, Y+1	; 0x01
     f56:	3a 81       	ldd	r19, Y+2	; 0x02
     f58:	4b 81       	ldd	r20, Y+3	; 0x03
     f5a:	5c 81       	ldd	r21, Y+4	; 0x04
     f5c:	ca 01       	movw	r24, r20
     f5e:	b9 01       	movw	r22, r18
     f60:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     f64:	69 83       	std	Y+1, r22	; 0x01
     f66:	7a 83       	std	Y+2, r23	; 0x02
     f68:	8b 83       	std	Y+3, r24	; 0x03
     f6a:	9c 83       	std	Y+4, r25	; 0x04
     f6c:	2d 81       	ldd	r18, Y+5	; 0x05
     f6e:	3e 81       	ldd	r19, Y+6	; 0x06
     f70:	4f 81       	ldd	r20, Y+7	; 0x07
     f72:	58 85       	ldd	r21, Y+8	; 0x08
     f74:	ca 01       	movw	r24, r20
     f76:	b9 01       	movw	r22, r18
     f78:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     f7c:	9b 01       	movw	r18, r22
     f7e:	ac 01       	movw	r20, r24
     f80:	69 81       	ldd	r22, Y+1	; 0x01
     f82:	7a 81       	ldd	r23, Y+2	; 0x02
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	0e 94 ca 10 	call	0x2194	; 0x2194 <__addsf3>
     f8c:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <sqrt>
     f90:	9b 01       	movw	r18, r22
     f92:	ac 01       	movw	r20, r24
     f94:	c5 01       	movw	r24, r10
     f96:	b4 01       	movw	r22, r8
     f98:	9f 77       	andi	r25, 0x7F	; 127
     f9a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     f9e:	4b 01       	movw	r8, r22
     fa0:	5c 01       	movw	r10, r24
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
	float linear_output = LINEAR_Kp*linear_error - LINEAR_Kd*derivative;
     fa2:	2d ec       	ldi	r18, 0xCD	; 205
     fa4:	3c ec       	ldi	r19, 0xCC	; 204
     fa6:	4c e4       	ldi	r20, 0x4C	; 76
     fa8:	5e e3       	ldi	r21, 0x3E	; 62
     faa:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     fae:	69 83       	std	Y+1, r22	; 0x01
     fb0:	7a 83       	std	Y+2, r23	; 0x02
     fb2:	8b 83       	std	Y+3, r24	; 0x03
     fb4:	9c 83       	std	Y+4, r25	; 0x04
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
     fb6:	20 91 57 01 	lds	r18, 0x0157
     fba:	30 91 58 01 	lds	r19, 0x0158
     fbe:	40 91 59 01 	lds	r20, 0x0159
     fc2:	50 91 5a 01 	lds	r21, 0x015A
     fc6:	c5 01       	movw	r24, r10
     fc8:	b4 01       	movw	r22, r8
     fca:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
     fce:	2f e6       	ldi	r18, 0x6F	; 111
     fd0:	32 e1       	ldi	r19, 0x12	; 18
     fd2:	43 e8       	ldi	r20, 0x83	; 131
     fd4:	5a e3       	ldi	r21, 0x3A	; 58
     fd6:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
	float linear_output = LINEAR_Kp*linear_error - LINEAR_Kd*derivative;
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	a9 01       	movw	r20, r18
     fe0:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
     fe4:	9b 01       	movw	r18, r22
     fe6:	ac 01       	movw	r20, r24
     fe8:	69 81       	ldd	r22, Y+1	; 0x01
     fea:	7a 81       	ldd	r23, Y+2	; 0x02
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
     ff4:	69 83       	std	Y+1, r22	; 0x01
     ff6:	7a 83       	std	Y+2, r23	; 0x02
     ff8:	8b 83       	std	Y+3, r24	; 0x03
     ffa:	9c 83       	std	Y+4, r25	; 0x04
	previous_linear_error = linear_error;
     ffc:	80 92 57 01 	sts	0x0157, r8
    1000:	90 92 58 01 	sts	0x0158, r9
    1004:	a0 92 59 01 	sts	0x0159, r10
    1008:	b0 92 5a 01 	sts	0x015A, r11
	if(linear_output>40.0){linear_output=40.0;}
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e2       	ldi	r20, 0x20	; 32
    1012:	52 e4       	ldi	r21, 0x42	; 66
    1014:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__gesf2>
    1018:	18 16       	cp	r1, r24
    101a:	44 f4       	brge	.+16     	; 0x102c <run_control_loop+0x214>
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a0 e2       	ldi	r26, 0x20	; 32
    1022:	b2 e4       	ldi	r27, 0x42	; 66
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	ab 83       	std	Y+3, r26	; 0x03
    102a:	bc 83       	std	Y+4, r27	; 0x04
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e2       	ldi	r20, 0x20	; 32
    1032:	52 e4       	ldi	r21, 0x42	; 66
    1034:	69 81       	ldd	r22, Y+1	; 0x01
    1036:	7a 81       	ldd	r23, Y+2	; 0x02
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
    1040:	4b 01       	movw	r8, r22
    1042:	5c 01       	movw	r10, r24
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < PI/2){
    1044:	c7 01       	movw	r24, r14
    1046:	b6 01       	movw	r22, r12
    1048:	9f 77       	andi	r25, 0x7F	; 127
    104a:	2b ed       	ldi	r18, 0xDB	; 219
    104c:	3f e0       	ldi	r19, 0x0F	; 15
    104e:	49 ec       	ldi	r20, 0xC9	; 201
    1050:	5f e3       	ldi	r21, 0x3F	; 63
    1052:	0e 94 a8 11 	call	0x2350	; 0x2350 <__cmpsf2>
    1056:	88 23       	and	r24, r24
    1058:	ec f4       	brge	.+58     	; 0x1094 <run_control_loop+0x27c>
		left_duty_cycle += linear_output;
    105a:	a3 01       	movw	r20, r6
    105c:	92 01       	movw	r18, r4
    105e:	c5 01       	movw	r24, r10
    1060:	b4 01       	movw	r22, r8
    1062:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
    1066:	60 93 16 01 	sts	0x0116, r22
    106a:	70 93 17 01 	sts	0x0117, r23
    106e:	80 93 18 01 	sts	0x0118, r24
    1072:	90 93 19 01 	sts	0x0119, r25
		right_duty_cycle += linear_output;
    1076:	a5 01       	movw	r20, r10
    1078:	94 01       	movw	r18, r8
    107a:	c3 01       	movw	r24, r6
    107c:	b2 01       	movw	r22, r4
    107e:	0e 94 ca 10 	call	0x2194	; 0x2194 <__addsf3>
    1082:	60 93 12 01 	sts	0x0112, r22
    1086:	70 93 13 01 	sts	0x0113, r23
    108a:	80 93 14 01 	sts	0x0114, r24
    108e:	90 93 15 01 	sts	0x0115, r25
    1092:	1e c0       	rjmp	.+60     	; 0x10d0 <run_control_loop+0x2b8>
		} else{
		left_duty_cycle -= linear_output;
    1094:	a5 01       	movw	r20, r10
    1096:	94 01       	movw	r18, r8
    1098:	6d 85       	ldd	r22, Y+13	; 0x0d
    109a:	7e 85       	ldd	r23, Y+14	; 0x0e
    109c:	8f 85       	ldd	r24, Y+15	; 0x0f
    109e:	98 89       	ldd	r25, Y+16	; 0x10
    10a0:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
    10a4:	60 93 16 01 	sts	0x0116, r22
    10a8:	70 93 17 01 	sts	0x0117, r23
    10ac:	80 93 18 01 	sts	0x0118, r24
    10b0:	90 93 19 01 	sts	0x0119, r25
		right_duty_cycle -= linear_output;
    10b4:	a5 01       	movw	r20, r10
    10b6:	94 01       	movw	r18, r8
    10b8:	c3 01       	movw	r24, r6
    10ba:	b2 01       	movw	r22, r4
    10bc:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
    10c0:	60 93 12 01 	sts	0x0112, r22
    10c4:	70 93 13 01 	sts	0x0113, r23
    10c8:	80 93 14 01 	sts	0x0114, r24
    10cc:	90 93 15 01 	sts	0x0115, r25
	}
	
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	a9 01       	movw	r20, r18
    10d6:	60 91 16 01 	lds	r22, 0x0116
    10da:	70 91 17 01 	lds	r23, 0x0117
    10de:	80 91 18 01 	lds	r24, 0x0118
    10e2:	90 91 19 01 	lds	r25, 0x0119
    10e6:	0e 94 a8 11 	call	0x2350	; 0x2350 <__cmpsf2>
    10ea:	88 23       	and	r24, r24
    10ec:	14 f4       	brge	.+4      	; 0x10f2 <run_control_loop+0x2da>
    10ee:	29 98       	cbi	0x05, 1	; 5
    10f0:	01 c0       	rjmp	.+2      	; 0x10f4 <run_control_loop+0x2dc>
	else{set(PORTB,1);}
    10f2:	29 9a       	sbi	0x05, 1	; 5
		
	if (right_duty_cycle<0){clear(PORTB,3);}
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	a9 01       	movw	r20, r18
    10fa:	60 91 12 01 	lds	r22, 0x0112
    10fe:	70 91 13 01 	lds	r23, 0x0113
    1102:	80 91 14 01 	lds	r24, 0x0114
    1106:	90 91 15 01 	lds	r25, 0x0115
    110a:	0e 94 a8 11 	call	0x2350	; 0x2350 <__cmpsf2>
    110e:	88 23       	and	r24, r24
    1110:	14 f4       	brge	.+4      	; 0x1116 <run_control_loop+0x2fe>
    1112:	2b 98       	cbi	0x05, 3	; 5
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <run_control_loop+0x300>
	else{set(PORTB,3);}
    1116:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    1118:	80 90 16 01 	lds	r8, 0x0116
    111c:	90 90 17 01 	lds	r9, 0x0117
    1120:	a0 90 18 01 	lds	r10, 0x0118
    1124:	b0 90 19 01 	lds	r11, 0x0119
    1128:	e8 94       	clt
    112a:	b7 f8       	bld	r11, 7
    112c:	80 92 16 01 	sts	0x0116, r8
    1130:	90 92 17 01 	sts	0x0117, r9
    1134:	a0 92 18 01 	sts	0x0118, r10
    1138:	b0 92 19 01 	sts	0x0119, r11
	right_duty_cycle = fabs(right_duty_cycle);
    113c:	c0 90 12 01 	lds	r12, 0x0112
    1140:	d0 90 13 01 	lds	r13, 0x0113
    1144:	e0 90 14 01 	lds	r14, 0x0114
    1148:	f0 90 15 01 	lds	r15, 0x0115
    114c:	e8 94       	clt
    114e:	f7 f8       	bld	r15, 7
    1150:	c0 92 12 01 	sts	0x0112, r12
    1154:	d0 92 13 01 	sts	0x0113, r13
    1158:	e0 92 14 01 	sts	0x0114, r14
    115c:	f0 92 15 01 	sts	0x0115, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    1160:	a7 01       	movw	r20, r14
    1162:	96 01       	movw	r18, r12
    1164:	c5 01       	movw	r24, r10
    1166:	b4 01       	movw	r22, r8
    1168:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__gesf2>
    116c:	18 16       	cp	r1, r24
    116e:	2c f0       	brlt	.+10     	; 0x117a <run_control_loop+0x362>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    1170:	6c 2c       	mov	r6, r12
    1172:	7d 2c       	mov	r7, r13
    1174:	1e 2d       	mov	r17, r14
    1176:	0f 2d       	mov	r16, r15
    1178:	04 c0       	rjmp	.+8      	; 0x1182 <run_control_loop+0x36a>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    117a:	68 2c       	mov	r6, r8
    117c:	79 2c       	mov	r7, r9
    117e:	1a 2d       	mov	r17, r10
    1180:	0b 2d       	mov	r16, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > MAX_DUTY_CYCLE)
    1182:	2d ec       	ldi	r18, 0xCD	; 205
    1184:	3c ec       	ldi	r19, 0xCC	; 204
    1186:	4c ec       	ldi	r20, 0xCC	; 204
    1188:	5e e3       	ldi	r21, 0x3E	; 62
    118a:	66 2d       	mov	r22, r6
    118c:	77 2d       	mov	r23, r7
    118e:	81 2f       	mov	r24, r17
    1190:	90 2f       	mov	r25, r16
    1192:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__gesf2>
    1196:	18 16       	cp	r1, r24
    1198:	64 f5       	brge	.+88     	; 0x11f2 <run_control_loop+0x3da>
	{
		left_duty_cycle = left_duty_cycle/max*MAX_DUTY_CYCLE;
    119a:	26 2d       	mov	r18, r6
    119c:	37 2d       	mov	r19, r7
    119e:	41 2f       	mov	r20, r17
    11a0:	50 2f       	mov	r21, r16
    11a2:	c5 01       	movw	r24, r10
    11a4:	b4 01       	movw	r22, r8
    11a6:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
    11aa:	2d ec       	ldi	r18, 0xCD	; 205
    11ac:	3c ec       	ldi	r19, 0xCC	; 204
    11ae:	4c ec       	ldi	r20, 0xCC	; 204
    11b0:	5e e3       	ldi	r21, 0x3E	; 62
    11b2:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    11b6:	60 93 16 01 	sts	0x0116, r22
    11ba:	70 93 17 01 	sts	0x0117, r23
    11be:	80 93 18 01 	sts	0x0118, r24
    11c2:	90 93 19 01 	sts	0x0119, r25
		right_duty_cycle = right_duty_cycle/max*MAX_DUTY_CYCLE;
    11c6:	26 2d       	mov	r18, r6
    11c8:	37 2d       	mov	r19, r7
    11ca:	41 2f       	mov	r20, r17
    11cc:	50 2f       	mov	r21, r16
    11ce:	c7 01       	movw	r24, r14
    11d0:	b6 01       	movw	r22, r12
    11d2:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
    11d6:	2d ec       	ldi	r18, 0xCD	; 205
    11d8:	3c ec       	ldi	r19, 0xCC	; 204
    11da:	4c ec       	ldi	r20, 0xCC	; 204
    11dc:	5e e3       	ldi	r21, 0x3E	; 62
    11de:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    11e2:	60 93 12 01 	sts	0x0112, r22
    11e6:	70 93 13 01 	sts	0x0113, r23
    11ea:	80 93 14 01 	sts	0x0114, r24
    11ee:	90 93 15 01 	sts	0x0115, r25
	}
	
	// Check game state
	if (game_pause)
    11f2:	80 91 00 01 	lds	r24, 0x0100
    11f6:	90 91 01 01 	lds	r25, 0x0101
    11fa:	89 2b       	or	r24, r25
    11fc:	81 f0       	breq	.+32     	; 0x121e <run_control_loop+0x406>
	{
		left_duty_cycle = 0;
    11fe:	10 92 16 01 	sts	0x0116, r1
    1202:	10 92 17 01 	sts	0x0117, r1
    1206:	10 92 18 01 	sts	0x0118, r1
    120a:	10 92 19 01 	sts	0x0119, r1
		right_duty_cycle = 0;
    120e:	10 92 12 01 	sts	0x0112, r1
    1212:	10 92 13 01 	sts	0x0113, r1
    1216:	10 92 14 01 	sts	0x0114, r1
    121a:	10 92 15 01 	sts	0x0115, r1
	}
	
	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    121e:	08 e8       	ldi	r16, 0x88	; 136
    1220:	10 e0       	ldi	r17, 0x00	; 0
    1222:	d8 01       	movw	r26, r16
    1224:	6d 91       	ld	r22, X+
    1226:	7c 91       	ld	r23, X
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__floatunsisf>
    1230:	20 91 16 01 	lds	r18, 0x0116
    1234:	30 91 17 01 	lds	r19, 0x0117
    1238:	40 91 18 01 	lds	r20, 0x0118
    123c:	50 91 19 01 	lds	r21, 0x0119
    1240:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    1244:	0e 94 24 12 	call	0x2448	; 0x2448 <__fixunssfsi>
    1248:	70 93 8b 00 	sts	0x008B, r23
    124c:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    1250:	f8 01       	movw	r30, r16
    1252:	60 81       	ld	r22, Z
    1254:	71 81       	ldd	r23, Z+1	; 0x01
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__floatunsisf>
    125e:	20 91 12 01 	lds	r18, 0x0112
    1262:	30 91 13 01 	lds	r19, 0x0113
    1266:	40 91 14 01 	lds	r20, 0x0114
    126a:	50 91 15 01 	lds	r21, 0x0115
    126e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    1272:	0e 94 24 12 	call	0x2448	; 0x2448 <__fixunssfsi>
    1276:	70 93 8d 00 	sts	0x008D, r23
    127a:	60 93 8c 00 	sts	0x008C, r22

}
    127e:	60 96       	adiw	r28, 0x10	; 16
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	ef 90       	pop	r14
    1296:	df 90       	pop	r13
    1298:	cf 90       	pop	r12
    129a:	bf 90       	pop	r11
    129c:	af 90       	pop	r10
    129e:	9f 90       	pop	r9
    12a0:	8f 90       	pop	r8
    12a2:	7f 90       	pop	r7
    12a4:	6f 90       	pop	r6
    12a6:	5f 90       	pop	r5
    12a8:	4f 90       	pop	r4
    12aa:	08 95       	ret

000012ac <update_position>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    12ac:	8f 92       	push	r8
    12ae:	9f 92       	push	r9
    12b0:	af 92       	push	r10
    12b2:	bf 92       	push	r11
    12b4:	cf 92       	push	r12
    12b6:	df 92       	push	r13
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	60 97       	sbiw	r28, 0x10	; 16
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
	// Read in Locations
	m_wii_read(blobs);
    12d4:	89 e7       	ldi	r24, 0x79	; 121
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	0e 94 36 10 	call	0x206c	; 0x206c <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    12dc:	e9 e7       	ldi	r30, 0x79	; 121
    12de:	f1 e0       	ldi	r31, 0x01	; 1
    12e0:	62 81       	ldd	r22, Z+2	; 0x02
    12e2:	73 81       	ldd	r23, Z+3	; 0x03
	unsigned int x2 = blobs[3];
    12e4:	e6 80       	ldd	r14, Z+6	; 0x06
    12e6:	f7 80       	ldd	r15, Z+7	; 0x07
	unsigned int y2 = blobs[4];
    12e8:	40 85       	ldd	r20, Z+8	; 0x08
    12ea:	51 85       	ldd	r21, Z+9	; 0x09
	unsigned int x3 = blobs[6];
    12ec:	04 85       	ldd	r16, Z+12	; 0x0c
    12ee:	15 85       	ldd	r17, Z+13	; 0x0d
	unsigned int y3 = blobs[7];
    12f0:	26 85       	ldd	r18, Z+14	; 0x0e
    12f2:	37 85       	ldd	r19, Z+15	; 0x0f
	unsigned int x4 = blobs[9];
    12f4:	a2 89       	ldd	r26, Z+18	; 0x12
    12f6:	b3 89       	ldd	r27, Z+19	; 0x13
	unsigned int y4 = blobs[10];
    12f8:	84 89       	ldd	r24, Z+20	; 0x14
    12fa:	95 89       	ldd	r25, Z+21	; 0x15
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    12fc:	01 90       	ld	r0, Z+
    12fe:	f0 81       	ld	r31, Z
    1300:	e0 2d       	mov	r30, r0
    1302:	fa 83       	std	Y+2, r31	; 0x02
    1304:	e9 83       	std	Y+1, r30	; 0x01
    1306:	fc 82       	std	Y+4, r15	; 0x04
    1308:	eb 82       	std	Y+3, r14	; 0x03
    130a:	1e 83       	std	Y+6, r17	; 0x06
    130c:	0d 83       	std	Y+5, r16	; 0x05
    130e:	b8 87       	std	Y+8, r27	; 0x08
    1310:	af 83       	std	Y+7, r26	; 0x07
    1312:	7a 87       	std	Y+10, r23	; 0x0a
    1314:	69 87       	std	Y+9, r22	; 0x09
    1316:	5c 87       	std	Y+12, r21	; 0x0c
    1318:	4b 87       	std	Y+11, r20	; 0x0b
    131a:	3e 87       	std	Y+14, r19	; 0x0e
    131c:	2d 87       	std	Y+13, r18	; 0x0d
    131e:	98 8b       	std	Y+16, r25	; 0x10
    1320:	8f 87       	std	Y+15, r24	; 0x0f
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    1322:	62 e0       	ldi	r22, 0x02	; 2
    1324:	71 e0       	ldi	r23, 0x01	; 1
    1326:	ce 01       	movw	r24, r28
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	0e 94 0a 05 	call	0xa14	; 0xa14 <localization_calc>
    132e:	8c 01       	movw	r16, r24
    1330:	90 93 78 01 	sts	0x0178, r25
    1334:	80 93 77 01 	sts	0x0177, r24
	
	robotCenterPrev[2] = robotCenter[2];
    1338:	fc 01       	movw	r30, r24
    133a:	80 85       	ldd	r24, Z+8	; 0x08
    133c:	91 85       	ldd	r25, Z+9	; 0x09
    133e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1340:	b3 85       	ldd	r27, Z+11	; 0x0b
    1342:	80 93 0a 01 	sts	0x010A, r24
    1346:	90 93 0b 01 	sts	0x010B, r25
    134a:	a0 93 0c 01 	sts	0x010C, r26
    134e:	b0 93 0d 01 	sts	0x010D, r27
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    1352:	60 85       	ldd	r22, Z+8	; 0x08
    1354:	71 85       	ldd	r23, Z+9	; 0x09
    1356:	82 85       	ldd	r24, Z+10	; 0x0a
    1358:	93 85       	ldd	r25, Z+11	; 0x0b
    135a:	0e 94 cc 06 	call	0xd98	; 0xd98 <theta_error_correction>
    135e:	6b 01       	movw	r12, r22
    1360:	7c 01       	movw	r14, r24
    1362:	f8 01       	movw	r30, r16
    1364:	60 87       	std	Z+8, r22	; 0x08
    1366:	71 87       	std	Z+9, r23	; 0x09
    1368:	82 87       	std	Z+10, r24	; 0x0a
    136a:	93 87       	std	Z+11, r25	; 0x0b


/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    136c:	24 ea       	ldi	r18, 0xA4	; 164
    136e:	30 e7       	ldi	r19, 0x70	; 112
    1370:	4d e7       	ldi	r20, 0x7D	; 125
    1372:	5f e3       	ldi	r21, 0x3F	; 63
    1374:	60 81       	ld	r22, Z
    1376:	71 81       	ldd	r23, Z+1	; 0x01
    1378:	82 81       	ldd	r24, Z+2	; 0x02
    137a:	93 81       	ldd	r25, Z+3	; 0x03
    137c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    1380:	4b 01       	movw	r8, r22
    1382:	5c 01       	movw	r10, r24
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	37 ed       	ldi	r19, 0xD7	; 215
    1388:	43 e2       	ldi	r20, 0x23	; 35
    138a:	5c e3       	ldi	r21, 0x3C	; 60
    138c:	60 91 6f 01 	lds	r22, 0x016F
    1390:	70 91 70 01 	lds	r23, 0x0170
    1394:	80 91 71 01 	lds	r24, 0x0171
    1398:	90 91 72 01 	lds	r25, 0x0172
    139c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    13a0:	9b 01       	movw	r18, r22
    13a2:	ac 01       	movw	r20, r24
    13a4:	c5 01       	movw	r24, r10
    13a6:	b4 01       	movw	r22, r8
    13a8:	0e 94 ca 10 	call	0x2194	; 0x2194 <__addsf3>
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    13ac:	60 93 6f 01 	sts	0x016F, r22
    13b0:	70 93 70 01 	sts	0x0170, r23
    13b4:	80 93 71 01 	sts	0x0171, r24
    13b8:	90 93 72 01 	sts	0x0172, r25


/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    13bc:	24 ea       	ldi	r18, 0xA4	; 164
    13be:	30 e7       	ldi	r19, 0x70	; 112
    13c0:	4d e7       	ldi	r20, 0x7D	; 125
    13c2:	5f e3       	ldi	r21, 0x3F	; 63
    13c4:	f8 01       	movw	r30, r16
    13c6:	64 81       	ldd	r22, Z+4	; 0x04
    13c8:	75 81       	ldd	r23, Z+5	; 0x05
    13ca:	86 81       	ldd	r24, Z+6	; 0x06
    13cc:	97 81       	ldd	r25, Z+7	; 0x07
    13ce:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    13d2:	4b 01       	movw	r8, r22
    13d4:	5c 01       	movw	r10, r24
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	37 ed       	ldi	r19, 0xD7	; 215
    13da:	43 e2       	ldi	r20, 0x23	; 35
    13dc:	5c e3       	ldi	r21, 0x3C	; 60
    13de:	60 91 6b 01 	lds	r22, 0x016B
    13e2:	70 91 6c 01 	lds	r23, 0x016C
    13e6:	80 91 6d 01 	lds	r24, 0x016D
    13ea:	90 91 6e 01 	lds	r25, 0x016E
    13ee:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    13f2:	9b 01       	movw	r18, r22
    13f4:	ac 01       	movw	r20, r24
    13f6:	c5 01       	movw	r24, r10
    13f8:	b4 01       	movw	r22, r8
    13fa:	0e 94 ca 10 	call	0x2194	; 0x2194 <__addsf3>
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    13fe:	60 93 6b 01 	sts	0x016B, r22
    1402:	70 93 6c 01 	sts	0x016C, r23
    1406:	80 93 6d 01 	sts	0x016D, r24
    140a:	90 93 6e 01 	sts	0x016E, r25


/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    140e:	24 ea       	ldi	r18, 0xA4	; 164
    1410:	30 e7       	ldi	r19, 0x70	; 112
    1412:	4d e7       	ldi	r20, 0x7D	; 125
    1414:	5f e3       	ldi	r21, 0x3F	; 63
    1416:	c7 01       	movw	r24, r14
    1418:	b6 01       	movw	r22, r12
    141a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    141e:	6b 01       	movw	r12, r22
    1420:	7c 01       	movw	r14, r24
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	37 ed       	ldi	r19, 0xD7	; 215
    1426:	43 e2       	ldi	r20, 0x23	; 35
    1428:	5c e3       	ldi	r21, 0x3C	; 60
    142a:	60 91 67 01 	lds	r22, 0x0167
    142e:	70 91 68 01 	lds	r23, 0x0168
    1432:	80 91 69 01 	lds	r24, 0x0169
    1436:	90 91 6a 01 	lds	r25, 0x016A
    143a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    143e:	9b 01       	movw	r18, r22
    1440:	ac 01       	movw	r20, r24
    1442:	c7 01       	movw	r24, r14
    1444:	b6 01       	movw	r22, r12
    1446:	0e 94 ca 10 	call	0x2194	; 0x2194 <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    144a:	60 93 67 01 	sts	0x0167, r22
    144e:	70 93 68 01 	sts	0x0168, r23
    1452:	80 93 69 01 	sts	0x0169, r24
    1456:	90 93 6a 01 	sts	0x016A, r25
	
	if (check(TIFR3,OCF3A)){	// Check if timestep has completed
    145a:	c1 9b       	sbis	0x18, 1	; 24
    145c:	53 c0       	rjmp	.+166    	; 0x1504 <update_position+0x258>
		set(TIFR3,OCF3A);		// Reset flag
    145e:	c1 9a       	sbi	0x18, 1	; 24
		theta_target = atan2(y_target-y,x_target-x); // Update theta target
    1460:	20 91 6f 01 	lds	r18, 0x016F
    1464:	30 91 70 01 	lds	r19, 0x0170
    1468:	40 91 71 01 	lds	r20, 0x0171
    146c:	50 91 72 01 	lds	r21, 0x0172
    1470:	60 91 0e 01 	lds	r22, 0x010E
    1474:	70 91 0f 01 	lds	r23, 0x010F
    1478:	80 91 10 01 	lds	r24, 0x0110
    147c:	90 91 11 01 	lds	r25, 0x0111
    1480:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
    1484:	6b 01       	movw	r12, r22
    1486:	7c 01       	movw	r14, r24
    1488:	20 91 6b 01 	lds	r18, 0x016B
    148c:	30 91 6c 01 	lds	r19, 0x016C
    1490:	40 91 6d 01 	lds	r20, 0x016D
    1494:	50 91 6e 01 	lds	r21, 0x016E
    1498:	60 91 63 01 	lds	r22, 0x0163
    149c:	70 91 64 01 	lds	r23, 0x0164
    14a0:	80 91 65 01 	lds	r24, 0x0165
    14a4:	90 91 66 01 	lds	r25, 0x0166
    14a8:	0e 94 c9 10 	call	0x2192	; 0x2192 <__subsf3>
    14ac:	a7 01       	movw	r20, r14
    14ae:	96 01       	movw	r18, r12
    14b0:	0e 94 49 11 	call	0x2292	; 0x2292 <atan2>
    14b4:	60 93 5f 01 	sts	0x015F, r22
    14b8:	70 93 60 01 	sts	0x0160, r23
    14bc:	80 93 61 01 	sts	0x0161, r24
    14c0:	90 93 62 01 	sts	0x0162, r25
		run_control_loop(); // Update control
    14c4:	0e 94 0c 07 	call	0xe18	; 0xe18 <run_control_loop>
		m_usb_tx_string("\nOCR1A: ");
    14c8:	8c e0       	ldi	r24, 0x0C	; 12
    14ca:	91 e0       	ldi	r25, 0x01	; 1
    14cc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <print_P>
		m_usb_tx_uint(OCR1A);
    14d0:	80 91 88 00 	lds	r24, 0x0088
    14d4:	90 91 89 00 	lds	r25, 0x0089
    14d8:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <m_usb_tx_uint>
		m_usb_tx_string("  OCR1B: ");
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	91 e0       	ldi	r25, 0x01	; 1
    14e0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <print_P>
		m_usb_tx_uint(OCR1B);
    14e4:	80 91 8a 00 	lds	r24, 0x008A
    14e8:	90 91 8b 00 	lds	r25, 0x008B
    14ec:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <m_usb_tx_uint>
		m_usb_tx_string("  OCR1c: ");
    14f0:	88 ef       	ldi	r24, 0xF8	; 248
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <print_P>
		m_usb_tx_uint(OCR1C);
    14f8:	80 91 8c 00 	lds	r24, 0x008C
    14fc:	90 91 8d 00 	lds	r25, 0x008D
    1500:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <m_usb_tx_uint>
	}
	
	robotCenterPrev[0] = x;
    1504:	e2 e0       	ldi	r30, 0x02	; 2
    1506:	f1 e0       	ldi	r31, 0x01	; 1
    1508:	80 91 6f 01 	lds	r24, 0x016F
    150c:	90 91 70 01 	lds	r25, 0x0170
    1510:	a0 91 71 01 	lds	r26, 0x0171
    1514:	b0 91 72 01 	lds	r27, 0x0172
    1518:	80 83       	st	Z, r24
    151a:	91 83       	std	Z+1, r25	; 0x01
    151c:	a2 83       	std	Z+2, r26	; 0x02
    151e:	b3 83       	std	Z+3, r27	; 0x03
	robotCenterPrev[1] = y;
    1520:	80 91 6b 01 	lds	r24, 0x016B
    1524:	90 91 6c 01 	lds	r25, 0x016C
    1528:	a0 91 6d 01 	lds	r26, 0x016D
    152c:	b0 91 6e 01 	lds	r27, 0x016E
    1530:	84 83       	std	Z+4, r24	; 0x04
    1532:	95 83       	std	Z+5, r25	; 0x05
    1534:	a6 83       	std	Z+6, r26	; 0x06
    1536:	b7 83       	std	Z+7, r27	; 0x07
}
    1538:	60 96       	adiw	r28, 0x10	; 16
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	bf 90       	pop	r11
    1556:	af 90       	pop	r10
    1558:	9f 90       	pop	r9
    155a:	8f 90       	pop	r8
    155c:	08 95       	ret

0000155e <wireless_enable>:
}

/* Initialize the Wireless System */
void wireless_enable(void)
{
	m_bus_init(); // Enable mBUS
    155e:	0e 94 91 0b 	call	0x1722	; 0x1722 <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS_1,PACKET_LENGTH); // Configure mRF
    1562:	4a e0       	ldi	r20, 0x0A	; 10
    1564:	60 e2       	ldi	r22, 0x20	; 32
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	0e 94 a2 0b 	call	0x1744	; 0x1744 <m_rf_open>
    156c:	08 95       	ret

0000156e <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_green(ON);
    156e:	6a 9a       	sbi	0x0d, 2	; 13
    1570:	72 98       	cbi	0x0e, 2	; 14
	m_red(ON);
    1572:	6e 9a       	sbi	0x0d, 6	; 13
    1574:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	init();
    1576:	0e 94 34 06 	call	0xc68	; 0xc68 <init>
}

/* Setup USB */
void usb_enable(void)
{
	m_usb_init();
    157a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <m_usb_init>
	m_red(ON);

	/* Initializations */
	init();
	usb_enable();
	wireless_enable();
    157e:	0e 94 af 0a 	call	0x155e	; 0x155e <wireless_enable>
	timer1_init();
    1582:	0e 94 4b 06 	call	0xc96	; 0xc96 <timer1_init>
	timer3_init();
    1586:	0e 94 ac 06 	call	0xd58	; 0xd58 <timer3_init>
	/* Confirm successful initialization(s) */
//	m_green(ON);

	/* Run */
	while (1){
		update_position();
    158a:	0e 94 56 09 	call	0x12ac	; 0x12ac <update_position>
	}
    158e:	fd cf       	rjmp	.-6      	; 0x158a <main+0x1c>

00001590 <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
    1590:	80 91 4c 01 	lds	r24, 0x014C
    1594:	83 3a       	cpi	r24, 0xA3	; 163
    1596:	09 f4       	brne	.+2      	; 0x159a <update_game_state+0xa>
    1598:	4e c0       	rjmp	.+156    	; 0x1636 <update_game_state+0xa6>
    159a:	28 f4       	brcc	.+10     	; 0x15a6 <update_game_state+0x16>
    159c:	81 3a       	cpi	r24, 0xA1	; 161
    159e:	69 f0       	breq	.+26     	; 0x15ba <update_game_state+0x2a>
    15a0:	82 3a       	cpi	r24, 0xA2	; 162
    15a2:	d1 f1       	breq	.+116    	; 0x1618 <update_game_state+0x88>
    15a4:	08 95       	ret
    15a6:	86 3a       	cpi	r24, 0xA6	; 166
    15a8:	09 f4       	brne	.+2      	; 0x15ac <update_game_state+0x1c>
    15aa:	5b c0       	rjmp	.+182    	; 0x1662 <update_game_state+0xd2>
    15ac:	87 3a       	cpi	r24, 0xA7	; 167
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <update_game_state+0x22>
    15b0:	5f c0       	rjmp	.+190    	; 0x1670 <update_game_state+0xe0>
    15b2:	84 3a       	cpi	r24, 0xA4	; 164
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <update_game_state+0x28>
    15b6:	62 c0       	rjmp	.+196    	; 0x167c <update_game_state+0xec>
    15b8:	4d c0       	rjmp	.+154    	; 0x1654 <update_game_state+0xc4>

void play(void)
{
	// Light LED of defending goal
	// Play
	game_pause = 0;
    15ba:	10 92 01 01 	sts	0x0101, r1
    15be:	10 92 00 01 	sts	0x0100, r1
		comm_test();
		break;
		case 0xA1: // Play
	//		m_green(TOGGLE);
			play();
			update_position();
    15c2:	0e 94 56 09 	call	0x12ac	; 0x12ac <update_position>
			if (x>0) {
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	a9 01       	movw	r20, r18
    15cc:	60 91 6f 01 	lds	r22, 0x016F
    15d0:	70 91 70 01 	lds	r23, 0x0170
    15d4:	80 91 71 01 	lds	r24, 0x0171
    15d8:	90 91 72 01 	lds	r25, 0x0172
    15dc:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__gesf2>
    15e0:	18 16       	cp	r1, r24
    15e2:	6c f4       	brge	.+26     	; 0x15fe <update_game_state+0x6e>
				x_target = -350;
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	af ea       	ldi	r26, 0xAF	; 175
    15ea:	b3 ec       	ldi	r27, 0xC3	; 195
    15ec:	80 93 0e 01 	sts	0x010E, r24
    15f0:	90 93 0f 01 	sts	0x010F, r25
    15f4:	a0 93 10 01 	sts	0x0110, r26
    15f8:	b0 93 11 01 	sts	0x0111, r27
    15fc:	08 95       	ret
			} else {
				x_target = 350;
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	af ea       	ldi	r26, 0xAF	; 175
    1604:	b3 e4       	ldi	r27, 0x43	; 67
    1606:	80 93 0e 01 	sts	0x010E, r24
    160a:	90 93 0f 01 	sts	0x010F, r25
    160e:	a0 93 10 01 	sts	0x0110, r26
    1612:	b0 93 11 01 	sts	0x0111, r27
    1616:	08 95       	ret
			}
			break;
		case 0xA2: // Goal R
		SR = buffer[1];
    1618:	ed e4       	ldi	r30, 0x4D	; 77
    161a:	f1 e0       	ldi	r31, 0x01	; 1
    161c:	81 81       	ldd	r24, Z+1	; 0x01
    161e:	80 93 4b 01 	sts	0x014B, r24
		SB = buffer[2];
    1622:	82 81       	ldd	r24, Z+2	; 0x02
    1624:	80 93 4a 01 	sts	0x014A, r24
}

void pause(void)
{
	// Stop within 3  seconds
	game_pause = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	90 93 01 01 	sts	0x0101, r25
    1630:	80 93 00 01 	sts	0x0100, r24
    1634:	08 95       	ret
		SR = buffer[1];
		SB = buffer[2];
		pause();
		break;
		case 0xA3: // Goal B
		SR = buffer[1];
    1636:	ed e4       	ldi	r30, 0x4D	; 77
    1638:	f1 e0       	ldi	r31, 0x01	; 1
    163a:	81 81       	ldd	r24, Z+1	; 0x01
    163c:	80 93 4b 01 	sts	0x014B, r24
		SB = buffer[2];
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	80 93 4a 01 	sts	0x014A, r24
}

void pause(void)
{
	// Stop within 3  seconds
	game_pause = 1;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	90 93 01 01 	sts	0x0101, r25
    164e:	80 93 00 01 	sts	0x0100, r24
    1652:	08 95       	ret
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	90 93 01 01 	sts	0x0101, r25
    165c:	80 93 00 01 	sts	0x0100, r24
    1660:	08 95       	ret

void halftime(void)
{
	// Stop play
	// Switch assigned goal
	game_pause = 1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	90 93 01 01 	sts	0x0101, r25
    166a:	80 93 00 01 	sts	0x0100, r24
    166e:	08 95       	ret

void game_over(void)
{
	// Stop play
	// Do a victory dance based on score?
	game_pause = 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	90 93 01 01 	sts	0x0101, r25
    1678:	80 93 00 01 	sts	0x0100, r24
    167c:	08 95       	ret

0000167e <wireless_recieve>:
}

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    167e:	6a e0       	ldi	r22, 0x0A	; 10
    1680:	8d e4       	ldi	r24, 0x4D	; 77
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <m_rf_read>
// 	m_usb_tx_string("\n Game state: ");
// 	m_usb_tx_char(buffer[0]);
	game_state = buffer[0];
    1688:	80 91 4d 01 	lds	r24, 0x014D
    168c:	80 93 4c 01 	sts	0x014C, r24
	
	
	update_game_state();
    1690:	0e 94 c8 0a 	call	0x1590	; 0x1590 <update_game_state>
    1694:	08 95       	ret

00001696 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    1696:	1f 92       	push	r1
    1698:	0f 92       	push	r0
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	0f 92       	push	r0
    169e:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    16a0:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable	
    16a2:	2a 9a       	sbi	0x05, 2	; 5
}
    16a4:	0f 90       	pop	r0
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	0f 90       	pop	r0
    16aa:	1f 90       	pop	r1
    16ac:	18 95       	reti

000016ae <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    16ae:	1f 92       	push	r1
    16b0:	0f 92       	push	r0
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	0f 92       	push	r0
    16b6:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    16b8:	28 98       	cbi	0x05, 0	; 5
}
    16ba:	0f 90       	pop	r0
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	0f 90       	pop	r0
    16c0:	1f 90       	pop	r1
    16c2:	18 95       	reti

000016c4 <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    16c4:	1f 92       	push	r1
    16c6:	0f 92       	push	r0
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	0f 92       	push	r0
    16cc:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    16ce:	2a 98       	cbi	0x05, 2	; 5
}
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	0f 90       	pop	r0
    16d6:	1f 90       	pop	r1
    16d8:	18 95       	reti

000016da <__vector_3>:

/* Recieve Wireless Comm */
ISR(INT2_vect){
    16da:	1f 92       	push	r1
    16dc:	0f 92       	push	r0
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	0f 92       	push	r0
    16e2:	11 24       	eor	r1, r1
    16e4:	2f 93       	push	r18
    16e6:	3f 93       	push	r19
    16e8:	4f 93       	push	r20
    16ea:	5f 93       	push	r21
    16ec:	6f 93       	push	r22
    16ee:	7f 93       	push	r23
    16f0:	8f 93       	push	r24
    16f2:	9f 93       	push	r25
    16f4:	af 93       	push	r26
    16f6:	bf 93       	push	r27
    16f8:	ef 93       	push	r30
    16fa:	ff 93       	push	r31
	wireless_recieve();
    16fc:	0e 94 3f 0b 	call	0x167e	; 0x167e <wireless_recieve>
}
    1700:	ff 91       	pop	r31
    1702:	ef 91       	pop	r30
    1704:	bf 91       	pop	r27
    1706:	af 91       	pop	r26
    1708:	9f 91       	pop	r25
    170a:	8f 91       	pop	r24
    170c:	7f 91       	pop	r23
    170e:	6f 91       	pop	r22
    1710:	5f 91       	pop	r21
    1712:	4f 91       	pop	r20
    1714:	3f 91       	pop	r19
    1716:	2f 91       	pop	r18
    1718:	0f 90       	pop	r0
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	0f 90       	pop	r0
    171e:	1f 90       	pop	r1
    1720:	18 95       	reti

00001722 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    1722:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1724:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1726:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1728:	8c e0       	ldi	r24, 0x0C	; 12
    172a:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    172e:	e9 e6       	ldi	r30, 0x69	; 105
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	80 62       	ori	r24, 0x20	; 32
    1736:	80 83       	st	Z, r24
    1738:	80 81       	ld	r24, Z
    173a:	8f 7e       	andi	r24, 0xEF	; 239
    173c:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    173e:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    1740:	78 94       	sei
    1742:	08 95       	ret

00001744 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	18 2f       	mov	r17, r24
    174c:	d6 2f       	mov	r29, r22
    174e:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1750:	0e 94 91 0b 	call	0x1722	; 0x1722 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1754:	94 ea       	ldi	r25, 0xA4	; 164
    1756:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    175a:	ec eb       	ldi	r30, 0xBC	; 188
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	90 81       	ld	r25, Z
    1760:	99 23       	and	r25, r25
    1762:	ec f7       	brge	.-6      	; 0x175e <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1764:	90 e5       	ldi	r25, 0x50	; 80
    1766:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    176a:	94 e8       	ldi	r25, 0x84	; 132
    176c:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1770:	ec eb       	ldi	r30, 0xBC	; 188
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	90 81       	ld	r25, Z
    1776:	99 23       	and	r25, r25
    1778:	ec f7       	brge	.-6      	; 0x1774 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    177a:	90 91 b9 00 	lds	r25, 0x00B9
    177e:	98 7f       	andi	r25, 0xF8	; 248
    1780:	90 32       	cpi	r25, 0x20	; 32
    1782:	29 f4       	brne	.+10     	; 0x178e <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1784:	84 e9       	ldi	r24, 0x94	; 148
    1786:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	2d c0       	rjmp	.+90     	; 0x17e8 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1794:	84 e8       	ldi	r24, 0x84	; 132
    1796:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    179a:	ec eb       	ldi	r30, 0xBC	; 188
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	90 81       	ld	r25, Z
    17a0:	99 23       	and	r25, r25
    17a2:	ec f7       	brge	.-6      	; 0x179e <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    17a4:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    17a8:	84 e8       	ldi	r24, 0x84	; 132
    17aa:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    17ae:	ec eb       	ldi	r30, 0xBC	; 188
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	88 23       	and	r24, r24
    17b6:	ec f7       	brge	.-6      	; 0x17b2 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    17b8:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    17bc:	84 e8       	ldi	r24, 0x84	; 132
    17be:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    17c2:	ec eb       	ldi	r30, 0xBC	; 188
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	88 23       	and	r24, r24
    17ca:	ec f7       	brge	.-6      	; 0x17c6 <m_rf_open+0x82>
	
	TWDR = packet_length;
    17cc:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    17d0:	84 e8       	ldi	r24, 0x84	; 132
    17d2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    17d6:	ec eb       	ldi	r30, 0xBC	; 188
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	88 23       	and	r24, r24
    17de:	ec f7       	brge	.-6      	; 0x17da <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    17e0:	84 e9       	ldi	r24, 0x94	; 148
    17e2:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
}
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	08 95       	ret

000017f0 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    17f6:	84 ea       	ldi	r24, 0xA4	; 164
    17f8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    17fc:	ec eb       	ldi	r30, 0xBC	; 188
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	90 81       	ld	r25, Z
    1802:	99 23       	and	r25, r25
    1804:	ec f7       	brge	.-6      	; 0x1800 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1806:	81 e5       	ldi	r24, 0x51	; 81
    1808:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    180c:	84 e8       	ldi	r24, 0x84	; 132
    180e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1812:	ec eb       	ldi	r30, 0xBC	; 188
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	90 81       	ld	r25, Z
    1818:	99 23       	and	r25, r25
    181a:	ec f7       	brge	.-6      	; 0x1816 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    181c:	80 91 b9 00 	lds	r24, 0x00B9
    1820:	88 7f       	andi	r24, 0xF8	; 248
    1822:	88 34       	cpi	r24, 0x48	; 72
    1824:	29 f4       	brne	.+10     	; 0x1830 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1826:	84 e9       	ldi	r24, 0x94	; 148
    1828:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	41 c0       	rjmp	.+130    	; 0x18b2 <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1830:	84 ec       	ldi	r24, 0xC4	; 196
    1832:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1836:	ec eb       	ldi	r30, 0xBC	; 188
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	90 81       	ld	r25, Z
    183c:	99 23       	and	r25, r25
    183e:	ec f7       	brge	.-6      	; 0x183a <m_rf_read+0x4a>
	bytes = TWDR;
    1840:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1844:	46 13       	cpse	r20, r22
    1846:	09 c0       	rjmp	.+18     	; 0x185a <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1848:	84 2f       	mov	r24, r20
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	18 16       	cp	r1, r24
    1850:	19 06       	cpc	r1, r25
    1852:	44 f0       	brlt	.+16     	; 0x1864 <m_rf_read+0x74>
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	1a c0       	rjmp	.+52     	; 0x188e <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    185a:	84 e9       	ldi	r24, 0x94	; 148
    185c:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	27 c0       	rjmp	.+78     	; 0x18b2 <m_rf_read+0xc2>
    1864:	d9 01       	movw	r26, r18
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	41 50       	subi	r20, 0x01	; 1
    186a:	51 09       	sbc	r21, r1
    186c:	b9 01       	movw	r22, r18
    186e:	64 0f       	add	r22, r20
    1870:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1872:	ec eb       	ldi	r30, 0xBC	; 188
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1878:	cb eb       	ldi	r28, 0xBB	; 187
    187a:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    187c:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    187e:	90 81       	ld	r25, Z
    1880:	99 23       	and	r25, r25
    1882:	ec f7       	brge	.-6      	; 0x187e <m_rf_read+0x8e>
		buffer[i] = TWDR;
    1884:	98 81       	ld	r25, Y
    1886:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1888:	a6 17       	cp	r26, r22
    188a:	b7 07       	cpc	r27, r23
    188c:	b9 f7       	brne	.-18     	; 0x187c <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    188e:	84 e8       	ldi	r24, 0x84	; 132
    1890:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1894:	ec eb       	ldi	r30, 0xBC	; 188
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	90 81       	ld	r25, Z
    189a:	99 23       	and	r25, r25
    189c:	ec f7       	brge	.-6      	; 0x1898 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
    189e:	80 91 bb 00 	lds	r24, 0x00BB
    18a2:	f9 01       	movw	r30, r18
    18a4:	e4 0f       	add	r30, r20
    18a6:	f5 1f       	adc	r31, r21
    18a8:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    18aa:	84 e9       	ldi	r24, 0x94	; 148
    18ac:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
}
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    18be:	80 ea       	ldi	r24, 0xA0	; 160
    18c0:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    18c4:	82 e1       	ldi	r24, 0x12	; 18
    18c6:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    18c8:	09 b4       	in	r0, 0x29	; 41
    18ca:	00 fe       	sbrs	r0, 0
    18cc:	fd cf       	rjmp	.-6      	; 0x18c8 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    18ce:	80 e9       	ldi	r24, 0x90	; 144
    18d0:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    18d4:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    18d8:	10 92 76 01 	sts	0x0176, r1
	cdc_line_rtsdtr = 0;
    18dc:	10 92 73 01 	sts	0x0173, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    18e0:	8c e0       	ldi	r24, 0x0C	; 12
    18e2:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    18e6:	78 94       	sei
    18e8:	08 95       	ret

000018ea <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    18ee:	90 91 76 01 	lds	r25, 0x0176
    18f2:	99 23       	and	r25, r25
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <m_usb_tx_char+0xe>
    18f6:	4c c0       	rjmp	.+152    	; 0x1990 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    18f8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    18fa:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    18fc:	24 e0       	ldi	r18, 0x04	; 4
    18fe:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    1902:	20 91 74 01 	lds	r18, 0x0174
    1906:	22 23       	and	r18, r18
    1908:	49 f0       	breq	.+18     	; 0x191c <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    190a:	20 91 e8 00 	lds	r18, 0x00E8
    190e:	25 fd       	sbrc	r18, 5
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    1912:	9f bf       	out	0x3f, r25	; 63
			return -1;
    1914:	8f ef       	ldi	r24, 0xFF	; 255
    1916:	41 c0       	rjmp	.+130    	; 0x199a <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    1918:	10 92 74 01 	sts	0x0174, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    191c:	30 91 e4 00 	lds	r19, 0x00E4
    1920:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1922:	20 91 e8 00 	lds	r18, 0x00E8
    1926:	25 fd       	sbrc	r18, 5
    1928:	24 c0       	rjmp	.+72     	; 0x1972 <m_usb_tx_char+0x88>
		SREG = intr_state;
    192a:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    192c:	90 91 e4 00 	lds	r25, 0x00E4
    1930:	93 17       	cp	r25, r19
    1932:	81 f0       	breq	.+32     	; 0x1954 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1934:	90 91 76 01 	lds	r25, 0x0176
    1938:	99 23       	and	r25, r25
    193a:	61 f1       	breq	.+88     	; 0x1994 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    193c:	a9 ee       	ldi	r26, 0xE9	; 233
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1942:	e8 ee       	ldi	r30, 0xE8	; 232
    1944:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1946:	c4 ee       	ldi	r28, 0xE4	; 228
    1948:	d0 e0       	ldi	r29, 0x00	; 0
    194a:	0d c0       	rjmp	.+26     	; 0x1966 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    194c:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    194e:	98 81       	ld	r25, Y
    1950:	93 13       	cpse	r25, r19
    1952:	05 c0       	rjmp	.+10     	; 0x195e <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	80 93 74 01 	sts	0x0174, r24
			return -1;
    195a:	8f ef       	ldi	r24, 0xFF	; 255
    195c:	1e c0       	rjmp	.+60     	; 0x199a <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    195e:	90 91 76 01 	lds	r25, 0x0176
    1962:	99 23       	and	r25, r25
    1964:	c9 f0       	breq	.+50     	; 0x1998 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    1966:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1968:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    196a:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    196c:	20 81       	ld	r18, Z
    196e:	25 ff       	sbrs	r18, 5
    1970:	ed cf       	rjmp	.-38     	; 0x194c <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    1972:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    1976:	80 91 e8 00 	lds	r24, 0x00E8
    197a:	85 fd       	sbrc	r24, 5
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <m_usb_tx_char+0x9a>
    197e:	8a e3       	ldi	r24, 0x3A	; 58
    1980:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1984:	85 e0       	ldi	r24, 0x05	; 5
    1986:	80 93 75 01 	sts	0x0175, r24
	SREG = intr_state;
    198a:	9f bf       	out	0x3f, r25	; 63
	return 0;
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	05 c0       	rjmp	.+10     	; 0x199a <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1990:	8f ef       	ldi	r24, 0xFF	; 255
    1992:	03 c0       	rjmp	.+6      	; 0x199a <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1994:	8f ef       	ldi	r24, 0xFF	; 255
    1996:	01 c0       	rjmp	.+2      	; 0x199a <m_usb_tx_char+0xb0>
    1998:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    19a0:	1f 92       	push	r1
    19a2:	0f 92       	push	r0
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	0f 92       	push	r0
    19a8:	11 24       	eor	r1, r1
    19aa:	8f 93       	push	r24
    19ac:	9f 93       	push	r25
    19ae:	ef 93       	push	r30
    19b0:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    19b2:	e1 ee       	ldi	r30, 0xE1	; 225
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
        UDINT = 0;
    19b8:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    19ba:	83 ff       	sbrs	r24, 3
    19bc:	11 c0       	rjmp	.+34     	; 0x19e0 <__vector_10+0x40>
		UENUM = 0;
    19be:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    19c8:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    19cc:	92 e1       	ldi	r25, 0x12	; 18
    19ce:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    19d2:	98 e0       	ldi	r25, 0x08	; 8
    19d4:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    19d8:	10 92 76 01 	sts	0x0176, r1
		cdc_line_rtsdtr = 0;
    19dc:	10 92 73 01 	sts	0x0173, r1
        }
	if (intbits & (1<<SOFI)) {
    19e0:	82 ff       	sbrs	r24, 2
    19e2:	13 c0       	rjmp	.+38     	; 0x1a0a <__vector_10+0x6a>
		if (usb_configuration) {
    19e4:	80 91 76 01 	lds	r24, 0x0176
    19e8:	88 23       	and	r24, r24
    19ea:	79 f0       	breq	.+30     	; 0x1a0a <__vector_10+0x6a>
			t = transmit_flush_timer;
    19ec:	80 91 75 01 	lds	r24, 0x0175
			if (t) {
    19f0:	88 23       	and	r24, r24
    19f2:	59 f0       	breq	.+22     	; 0x1a0a <__vector_10+0x6a>
				transmit_flush_timer = --t;
    19f4:	81 50       	subi	r24, 0x01	; 1
    19f6:	80 93 75 01 	sts	0x0175, r24
				if (!t) {
    19fa:	81 11       	cpse	r24, r1
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    19fe:	84 e0       	ldi	r24, 0x04	; 4
    1a00:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1a04:	8a e3       	ldi	r24, 0x3A	; 58
    1a06:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1a0a:	ff 91       	pop	r31
    1a0c:	ef 91       	pop	r30
    1a0e:	9f 91       	pop	r25
    1a10:	8f 91       	pop	r24
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	0f 90       	pop	r0
    1a18:	1f 90       	pop	r1
    1a1a:	18 95       	reti

00001a1c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1a1c:	1f 92       	push	r1
    1a1e:	0f 92       	push	r0
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	0f 92       	push	r0
    1a24:	11 24       	eor	r1, r1
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	2f 93       	push	r18
    1a2c:	3f 93       	push	r19
    1a2e:	4f 93       	push	r20
    1a30:	5f 93       	push	r21
    1a32:	6f 93       	push	r22
    1a34:	7f 93       	push	r23
    1a36:	8f 93       	push	r24
    1a38:	9f 93       	push	r25
    1a3a:	af 93       	push	r26
    1a3c:	bf 93       	push	r27
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	ef 93       	push	r30
    1a44:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1a46:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1a4a:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1a4e:	83 ff       	sbrs	r24, 3
    1a50:	4c c1       	rjmp	.+664    	; 0x1cea <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    1a52:	e1 ef       	ldi	r30, 0xF1	; 241
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    1a58:	80 81       	ld	r24, Z
                wValue = UEDATX;
    1a5a:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1a5c:	90 81       	ld	r25, Z
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    1a62:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    1a64:	90 81       	ld	r25, Z
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	59 2b       	or	r21, r25
                wLength = UEDATX;
    1a6a:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    1a6c:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1a6e:	92 ef       	ldi	r25, 0xF2	; 242
    1a70:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    1a74:	86 30       	cpi	r24, 0x06	; 6
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <__vector_11+0x5e>
    1a78:	58 c0       	rjmp	.+176    	; 0x1b2a <__vector_11+0x10e>
    1a7a:	04 c0       	rjmp	.+8      	; 0x1a84 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1a7c:	81 e2       	ldi	r24, 0x21	; 33
    1a7e:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1a82:	3a c1       	rjmp	.+628    	; 0x1cf8 <__vector_11+0x2dc>
    1a84:	66 e0       	ldi	r22, 0x06	; 6
    1a86:	85 e1       	ldi	r24, 0x15	; 21
    1a88:	91 e0       	ldi	r25, 0x01	; 1
				}
				desc_val = pgm_read_word(list);
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	a5 91       	lpm	r26, Z+
    1a8e:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    1a90:	2a 17       	cp	r18, r26
    1a92:	3b 07       	cpc	r19, r27
    1a94:	11 f0       	breq	.+4      	; 0x1a9a <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    1a96:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1a98:	23 c0       	rjmp	.+70     	; 0x1ae0 <__vector_11+0xc4>
				}
				list += 2;
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1a9e:	a5 91       	lpm	r26, Z+
    1aa0:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    1aa2:	4a 17       	cp	r20, r26
    1aa4:	5b 07       	cpc	r21, r27
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    1aa8:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1aaa:	1a c0       	rjmp	.+52     	; 0x1ae0 <__vector_11+0xc4>
				}
				list += 2;
    1aac:	fc 01       	movw	r30, r24
    1aae:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1ab0:	45 91       	lpm	r20, Z+
    1ab2:	54 91       	lpm	r21, Z
				list += 2;
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1ab8:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1aba:	87 2f       	mov	r24, r23
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1ac0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	19 f0       	breq	.+6      	; 0x1acc <__vector_11+0xb0>
    1ac6:	10 f0       	brcs	.+4      	; 0x1acc <__vector_11+0xb0>
    1ac8:	8f ef       	ldi	r24, 0xFF	; 255
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	82 17       	cp	r24, r18
    1ace:	08 f4       	brcc	.+2      	; 0x1ad2 <__vector_11+0xb6>
    1ad0:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1ad2:	a8 ee       	ldi	r26, 0xE8	; 232
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1ad6:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ad8:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1ada:	c1 ef       	ldi	r28, 0xF1	; 241
    1adc:	d0 e0       	ldi	r29, 0x00	; 0
    1ade:	03 c0       	rjmp	.+6      	; 0x1ae6 <__vector_11+0xca>
    1ae0:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1ae2:	99 f6       	brne	.-90     	; 0x1a8a <__vector_11+0x6e>
    1ae4:	cb cf       	rjmp	.-106    	; 0x1a7c <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1ae6:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1ae8:	98 2f       	mov	r25, r24
    1aea:	95 70       	andi	r25, 0x05	; 5
    1aec:	e1 f3       	breq	.-8      	; 0x1ae6 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    1aee:	82 fd       	sbrc	r24, 2
    1af0:	03 c1       	rjmp	.+518    	; 0x1cf8 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1af2:	32 2f       	mov	r19, r18
    1af4:	21 31       	cpi	r18, 0x11	; 17
    1af6:	08 f0       	brcs	.+2      	; 0x1afa <__vector_11+0xde>
    1af8:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    1afa:	33 23       	and	r19, r19
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <__vector_11+0xe4>
    1afe:	f9 c0       	rjmp	.+498    	; 0x1cf2 <__vector_11+0x2d6>
    1b00:	fa 01       	movw	r30, r20
    1b02:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    1b04:	94 91       	lpm	r25, Z
    1b06:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1b08:	81 50       	subi	r24, 0x01	; 1
    1b0a:	31 96       	adiw	r30, 0x01	; 1
    1b0c:	81 11       	cpse	r24, r1
    1b0e:	fa cf       	rjmp	.-12     	; 0x1b04 <__vector_11+0xe8>
    1b10:	8f ef       	ldi	r24, 0xFF	; 255
    1b12:	83 0f       	add	r24, r19
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	48 0f       	add	r20, r24
    1b1a:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1b1c:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b1e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1b20:	21 11       	cpse	r18, r1
    1b22:	e1 cf       	rjmp	.-62     	; 0x1ae6 <__vector_11+0xca>
    1b24:	30 31       	cpi	r19, 0x10	; 16
    1b26:	f9 f2       	breq	.-66     	; 0x1ae6 <__vector_11+0xca>
    1b28:	e7 c0       	rjmp	.+462    	; 0x1cf8 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1b2a:	85 30       	cpi	r24, 0x05	; 5
    1b2c:	61 f4       	brne	.+24     	; 0x1b46 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b2e:	8e ef       	ldi	r24, 0xFE	; 254
    1b30:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1b34:	e8 ee       	ldi	r30, 0xE8	; 232
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 ff       	sbrs	r24, 0
    1b3c:	fd cf       	rjmp	.-6      	; 0x1b38 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1b3e:	20 68       	ori	r18, 0x80	; 128
    1b40:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1b44:	d9 c0       	rjmp	.+434    	; 0x1cf8 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1b46:	89 30       	cpi	r24, 0x09	; 9
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <__vector_11+0x130>
    1b4a:	35 c0       	rjmp	.+106    	; 0x1bb6 <__vector_11+0x19a>
    1b4c:	61 11       	cpse	r22, r1
    1b4e:	cd c0       	rjmp	.+410    	; 0x1cea <__vector_11+0x2ce>
			usb_configuration = wValue;
    1b50:	20 93 76 01 	sts	0x0176, r18
			cdc_line_rtsdtr = 0;
    1b54:	10 92 73 01 	sts	0x0173, r1
			transmit_flush_timer = 0;
    1b58:	10 92 75 01 	sts	0x0175, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b5c:	8e ef       	ldi	r24, 0xFE	; 254
    1b5e:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1b62:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1b64:	2e eb       	ldi	r18, 0xBE	; 190
    1b66:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1b68:	c9 ee       	ldi	r28, 0xE9	; 233
    1b6a:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1b6c:	ab ee       	ldi	r26, 0xEB	; 235
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1b70:	0c ee       	ldi	r16, 0xEC	; 236
    1b72:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1b74:	6d ee       	ldi	r22, 0xED	; 237
    1b76:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1b78:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    1b7a:	a9 01       	movw	r20, r18
    1b7c:	4f 5f       	subi	r20, 0xFF	; 255
    1b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b80:	f9 01       	movw	r30, r18
    1b82:	94 91       	lpm	r25, Z
				UECONX = en;
    1b84:	9c 93       	st	X, r25
				if (en) {
    1b86:	99 23       	and	r25, r25
    1b88:	61 f0       	breq	.+24     	; 0x1ba2 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    1b8a:	fa 01       	movw	r30, r20
    1b8c:	44 91       	lpm	r20, Z
    1b8e:	f8 01       	movw	r30, r16
    1b90:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    1b92:	f9 01       	movw	r30, r18
    1b94:	32 96       	adiw	r30, 0x02	; 2
    1b96:	94 91       	lpm	r25, Z
    1b98:	2d 5f       	subi	r18, 0xFD	; 253
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	fb 01       	movw	r30, r22
    1b9e:	90 83       	st	Z, r25
    1ba0:	01 c0       	rjmp	.+2      	; 0x1ba4 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1ba2:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1ba4:	8f 5f       	subi	r24, 0xFF	; 255
    1ba6:	85 30       	cpi	r24, 0x05	; 5
    1ba8:	39 f7       	brne	.-50     	; 0x1b78 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1baa:	ea ee       	ldi	r30, 0xEA	; 234
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	8e e1       	ldi	r24, 0x1E	; 30
    1bb0:	80 83       	st	Z, r24
        		UERST = 0;
    1bb2:	10 82       	st	Z, r1
			return;
    1bb4:	a1 c0       	rjmp	.+322    	; 0x1cf8 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1bb6:	88 30       	cpi	r24, 0x08	; 8
    1bb8:	81 f4       	brne	.+32     	; 0x1bda <__vector_11+0x1be>
    1bba:	60 38       	cpi	r22, 0x80	; 128
    1bbc:	09 f0       	breq	.+2      	; 0x1bc0 <__vector_11+0x1a4>
    1bbe:	95 c0       	rjmp	.+298    	; 0x1cea <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1bc0:	e8 ee       	ldi	r30, 0xE8	; 232
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	80 ff       	sbrs	r24, 0
    1bc8:	fd cf       	rjmp	.-6      	; 0x1bc4 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1bca:	80 91 76 01 	lds	r24, 0x0176
    1bce:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1bd2:	8e ef       	ldi	r24, 0xFE	; 254
    1bd4:	80 93 e8 00 	sts	0x00E8, r24
    1bd8:	8f c0       	rjmp	.+286    	; 0x1cf8 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1bda:	81 32       	cpi	r24, 0x21	; 33
    1bdc:	b9 f4       	brne	.+46     	; 0x1c0c <__vector_11+0x1f0>
    1bde:	61 3a       	cpi	r22, 0xA1	; 161
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <__vector_11+0x1c8>
    1be2:	83 c0       	rjmp	.+262    	; 0x1cea <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1be4:	e8 ee       	ldi	r30, 0xE8	; 232
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	80 ff       	sbrs	r24, 0
    1bec:	fd cf       	rjmp	.-6      	; 0x1be8 <__vector_11+0x1cc>
    1bee:	ea e1       	ldi	r30, 0x1A	; 26
    1bf0:	f1 e0       	ldi	r31, 0x01	; 1
    1bf2:	21 e2       	ldi	r18, 0x21	; 33
    1bf4:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1bf6:	a1 ef       	ldi	r26, 0xF1	; 241
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	81 91       	ld	r24, Z+
    1bfc:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1bfe:	e2 17       	cp	r30, r18
    1c00:	f3 07       	cpc	r31, r19
    1c02:	d9 f7       	brne	.-10     	; 0x1bfa <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c04:	8e ef       	ldi	r24, 0xFE	; 254
    1c06:	80 93 e8 00 	sts	0x00E8, r24
    1c0a:	76 c0       	rjmp	.+236    	; 0x1cf8 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1c0c:	80 32       	cpi	r24, 0x20	; 32
    1c0e:	d1 f4       	brne	.+52     	; 0x1c44 <__vector_11+0x228>
    1c10:	61 32       	cpi	r22, 0x21	; 33
    1c12:	09 f0       	breq	.+2      	; 0x1c16 <__vector_11+0x1fa>
    1c14:	6a c0       	rjmp	.+212    	; 0x1cea <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1c16:	e8 ee       	ldi	r30, 0xE8	; 232
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	82 ff       	sbrs	r24, 2
    1c1e:	fd cf       	rjmp	.-6      	; 0x1c1a <__vector_11+0x1fe>
    1c20:	ea e1       	ldi	r30, 0x1A	; 26
    1c22:	f1 e0       	ldi	r31, 0x01	; 1
    1c24:	21 e2       	ldi	r18, 0x21	; 33
    1c26:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1c28:	a1 ef       	ldi	r26, 0xF1	; 241
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	8c 91       	ld	r24, X
    1c2e:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1c30:	e2 17       	cp	r30, r18
    1c32:	f3 07       	cpc	r31, r19
    1c34:	d9 f7       	brne	.-10     	; 0x1c2c <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1c36:	e8 ee       	ldi	r30, 0xE8	; 232
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	8b ef       	ldi	r24, 0xFB	; 251
    1c3c:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c3e:	8e ef       	ldi	r24, 0xFE	; 254
    1c40:	80 83       	st	Z, r24
    1c42:	5a c0       	rjmp	.+180    	; 0x1cf8 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1c44:	82 32       	cpi	r24, 0x22	; 34
    1c46:	71 f4       	brne	.+28     	; 0x1c64 <__vector_11+0x248>
    1c48:	61 32       	cpi	r22, 0x21	; 33
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <__vector_11+0x232>
    1c4c:	4e c0       	rjmp	.+156    	; 0x1cea <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    1c4e:	20 93 73 01 	sts	0x0173, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c52:	e8 ee       	ldi	r30, 0xE8	; 232
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	80 ff       	sbrs	r24, 0
    1c5a:	fd cf       	rjmp	.-6      	; 0x1c56 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c5c:	8e ef       	ldi	r24, 0xFE	; 254
    1c5e:	80 93 e8 00 	sts	0x00E8, r24
    1c62:	4a c0       	rjmp	.+148    	; 0x1cf8 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1c64:	81 11       	cpse	r24, r1
    1c66:	1a c0       	rjmp	.+52     	; 0x1c9c <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c68:	e8 ee       	ldi	r30, 0xE8	; 232
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 ff       	sbrs	r24, 0
    1c70:	fd cf       	rjmp	.-6      	; 0x1c6c <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1c72:	62 38       	cpi	r22, 0x82	; 130
    1c74:	51 f4       	brne	.+20     	; 0x1c8a <__vector_11+0x26e>
				UENUM = wIndex;
    1c76:	e9 ee       	ldi	r30, 0xE9	; 233
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    1c7c:	80 91 eb 00 	lds	r24, 0x00EB
    1c80:	85 fb       	bst	r24, 5
    1c82:	88 27       	eor	r24, r24
    1c84:	80 f9       	bld	r24, 0
				UENUM = 0;
    1c86:	10 82       	st	Z, r1
    1c88:	01 c0       	rjmp	.+2      	; 0x1c8c <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1c8c:	e1 ef       	ldi	r30, 0xF1	; 241
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 83       	st	Z, r24
			UEDATX = 0;
    1c92:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c94:	8e ef       	ldi	r24, 0xFE	; 254
    1c96:	80 93 e8 00 	sts	0x00E8, r24
    1c9a:	2e c0       	rjmp	.+92     	; 0x1cf8 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1c9c:	98 2f       	mov	r25, r24
    1c9e:	9d 7f       	andi	r25, 0xFD	; 253
    1ca0:	91 30       	cpi	r25, 0x01	; 1
    1ca2:	19 f5       	brne	.+70     	; 0x1cea <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    1ca4:	62 30       	cpi	r22, 0x02	; 2
    1ca6:	09 f5       	brne	.+66     	; 0x1cea <__vector_11+0x2ce>
    1ca8:	23 2b       	or	r18, r19
    1caa:	f9 f4       	brne	.+62     	; 0x1cea <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    1cac:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1cae:	9f ef       	ldi	r25, 0xFF	; 255
    1cb0:	94 0f       	add	r25, r20
    1cb2:	94 30       	cpi	r25, 0x04	; 4
    1cb4:	d0 f4       	brcc	.+52     	; 0x1cea <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1cb6:	9e ef       	ldi	r25, 0xFE	; 254
    1cb8:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1cbc:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    1cc0:	83 30       	cpi	r24, 0x03	; 3
    1cc2:	21 f4       	brne	.+8      	; 0x1ccc <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1cc4:	81 e2       	ldi	r24, 0x21	; 33
    1cc6:	80 93 eb 00 	sts	0x00EB, r24
    1cca:	16 c0       	rjmp	.+44     	; 0x1cf8 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1ccc:	89 e1       	ldi	r24, 0x19	; 25
    1cce:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <__vector_11+0x2c0>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	4a 95       	dec	r20
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <__vector_11+0x2bc>
    1ce0:	ea ee       	ldi	r30, 0xEA	; 234
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 83       	st	Z, r24
					UERST = 0;
    1ce6:	10 82       	st	Z, r1
    1ce8:	07 c0       	rjmp	.+14     	; 0x1cf8 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1cea:	81 e2       	ldi	r24, 0x21	; 33
    1cec:	80 93 eb 00 	sts	0x00EB, r24
    1cf0:	03 c0       	rjmp	.+6      	; 0x1cf8 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1cf2:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1cf4:	21 11       	cpse	r18, r1
    1cf6:	f7 ce       	rjmp	.-530    	; 0x1ae6 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1cf8:	ff 91       	pop	r31
    1cfa:	ef 91       	pop	r30
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	bf 91       	pop	r27
    1d02:	af 91       	pop	r26
    1d04:	9f 91       	pop	r25
    1d06:	8f 91       	pop	r24
    1d08:	7f 91       	pop	r23
    1d0a:	6f 91       	pop	r22
    1d0c:	5f 91       	pop	r21
    1d0e:	4f 91       	pop	r20
    1d10:	3f 91       	pop	r19
    1d12:	2f 91       	pop	r18
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	0f 90       	pop	r0
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	0f 90       	pop	r0
    1d1e:	1f 90       	pop	r1
    1d20:	18 95       	reti

00001d22 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    1d22:	0f 93       	push	r16
    1d24:	1f 93       	push	r17
    1d26:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1d28:	8c 01       	movw	r16, r24
    1d2a:	0f 5f       	subi	r16, 0xFF	; 255
    1d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2e:	fc 01       	movw	r30, r24
    1d30:	c4 91       	lpm	r28, Z
		if (!c) break;
    1d32:	cc 23       	and	r28, r28
    1d34:	71 f0       	breq	.+28     	; 0x1d52 <print_P+0x30>
		if (c == '\n') usb_tx_char('\r');
    1d36:	ca 30       	cpi	r28, 0x0A	; 10
    1d38:	19 f4       	brne	.+6      	; 0x1d40 <print_P+0x1e>
    1d3a:	8d e0       	ldi	r24, 0x0D	; 13
    1d3c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <m_usb_tx_char>
		usb_tx_char(c);
    1d40:	8c 2f       	mov	r24, r28
    1d42:	0e 94 75 0c 	call	0x18ea	; 0x18ea <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1d46:	f8 01       	movw	r30, r16
    1d48:	c4 91       	lpm	r28, Z
    1d4a:	0f 5f       	subi	r16, 0xFF	; 255
    1d4c:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
    1d4e:	c1 11       	cpse	r28, r1
    1d50:	f2 cf       	rjmp	.-28     	; 0x1d36 <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    1d52:	cf 91       	pop	r28
    1d54:	1f 91       	pop	r17
    1d56:	0f 91       	pop	r16
    1d58:	08 95       	ret

00001d5a <m_usb_tx_uint>:
        }
	}
}

void m_usb_tx_uint(unsigned int i)
{
    1d5a:	ef 92       	push	r14
    1d5c:	ff 92       	push	r15
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <m_usb_tx_uint+0xe>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <m_usb_tx_uint+0x10>
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <m_usb_tx_uint+0x12>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
	char string[6] = {0,0,0,0,0,0};
    1d70:	8e 01       	movw	r16, r28
    1d72:	0f 5f       	subi	r16, 0xFF	; 255
    1d74:	1f 4f       	sbci	r17, 0xFF	; 255
    1d76:	26 e0       	ldi	r18, 0x06	; 6
    1d78:	f8 01       	movw	r30, r16
    1d7a:	11 92       	st	Z+, r1
    1d7c:	2a 95       	dec	r18
    1d7e:	e9 f7       	brne	.-6      	; 0x1d7a <m_usb_tx_uint+0x20>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    1d80:	4a e0       	ldi	r20, 0x0A	; 10
    1d82:	b8 01       	movw	r22, r16
    1d84:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__utoa_ncheck>
    1d88:	7e 01       	movw	r14, r28
    1d8a:	f6 e0       	ldi	r31, 0x06	; 6
    1d8c:	ef 0e       	add	r14, r31
    1d8e:	f1 1c       	adc	r15, r1
	utoa(i,string,10);
	for(i=0;i<5;i++){
        if(string[i]){
    1d90:	f8 01       	movw	r30, r16
    1d92:	81 91       	ld	r24, Z+
    1d94:	8f 01       	movw	r16, r30
    1d96:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    1d98:	0e 94 75 0c 	call	0x18ea	; 0x18ea <m_usb_tx_char>

void m_usb_tx_uint(unsigned int i)
{
	char string[6] = {0,0,0,0,0,0};
	utoa(i,string,10);
	for(i=0;i<5;i++){
    1d9c:	0e 15       	cp	r16, r14
    1d9e:	1f 05       	cpc	r17, r15
    1da0:	b9 f7       	brne	.-18     	; 0x1d90 <m_usb_tx_uint+0x36>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1da2:	26 96       	adiw	r28, 0x06	; 6
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	ff 90       	pop	r15
    1db8:	ef 90       	pop	r14
    1dba:	08 95       	ret

00001dbc <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1dc0:	ec eb       	ldi	r30, 0xBC	; 188
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	88 23       	and	r24, r24
    1dc8:	34 f0       	brlt	.+12     	; 0x1dd6 <twi_wait+0x1a>
    1dca:	2f 5f       	subi	r18, 0xFF	; 255
    1dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dce:	29 3e       	cpi	r18, 0xE9	; 233
    1dd0:	83 e0       	ldi	r24, 0x03	; 3
    1dd2:	38 07       	cpc	r19, r24
    1dd4:	b9 f7       	brne	.-18     	; 0x1dc4 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	28 3e       	cpi	r18, 0xE8	; 232
    1dda:	33 40       	sbci	r19, 0x03	; 3
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <twi_wait+0x24>
    1dde:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1de0:	08 95       	ret

00001de2 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1de2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1de6:	84 e8       	ldi	r24, 0x84	; 132
    1de8:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1dec:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_wait>
    1df0:	88 23       	and	r24, r24
    1df2:	19 f0       	breq	.+6      	; 0x1dfa <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1df4:	80 91 b9 00 	lds	r24, 0x00B9
    1df8:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    1dfa:	08 95       	ret

00001dfc <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1dfc:	cf 93       	push	r28
    1dfe:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1e00:	94 ea       	ldi	r25, 0xA4	; 164
    1e02:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1e06:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_wait>
    1e0a:	88 23       	and	r24, r24
    1e0c:	61 f0       	breq	.+24     	; 0x1e26 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1e0e:	8c 2f       	mov	r24, r28
    1e10:	88 0f       	add	r24, r24
    1e12:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1e16:	80 32       	cpi	r24, 0x20	; 32
    1e18:	29 f4       	brne	.+10     	; 0x1e24 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1e1a:	84 e9       	ldi	r24, 0x94	; 148
    1e1c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <start_write+0x2a>
	}	
	return 1;	// success
    1e24:	81 e0       	ldi	r24, 0x01	; 1
}	
    1e26:	cf 91       	pop	r28
    1e28:	08 95       	ret

00001e2a <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1e2a:	0e 94 91 0b 	call	0x1722	; 0x1722 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1e2e:	88 e5       	ldi	r24, 0x58	; 88
    1e30:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <start_write>
    1e34:	88 23       	and	r24, r24
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <m_wii_open+0x10>
    1e38:	cd c0       	rjmp	.+410    	; 0x1fd4 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    1e3a:	80 e3       	ldi	r24, 0x30	; 48
    1e3c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1e40:	88 23       	and	r24, r24
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <m_wii_open+0x1c>
    1e44:	c9 c0       	rjmp	.+402    	; 0x1fd8 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1e4c:	88 23       	and	r24, r24
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <m_wii_open+0x28>
    1e50:	c5 c0       	rjmp	.+394    	; 0x1fdc <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1e52:	84 e9       	ldi	r24, 0x94	; 148
    1e54:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e58:	83 ec       	ldi	r24, 0xC3	; 195
    1e5a:	99 e0       	ldi	r25, 0x09	; 9
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <m_wii_open+0x32>
    1e60:	00 c0       	rjmp	.+0      	; 0x1e62 <m_wii_open+0x38>
    1e62:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1e64:	88 e5       	ldi	r24, 0x58	; 88
    1e66:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <start_write>
    1e6a:	88 23       	and	r24, r24
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <m_wii_open+0x46>
    1e6e:	b8 c0       	rjmp	.+368    	; 0x1fe0 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1e76:	88 23       	and	r24, r24
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <m_wii_open+0x52>
    1e7a:	b4 c0       	rjmp	.+360    	; 0x1fe4 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1e82:	88 23       	and	r24, r24
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <m_wii_open+0x5e>
    1e86:	b0 c0       	rjmp	.+352    	; 0x1fe8 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1e8e:	88 23       	and	r24, r24
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <m_wii_open+0x6a>
    1e92:	ac c0       	rjmp	.+344    	; 0x1fec <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1e9a:	88 23       	and	r24, r24
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <m_wii_open+0x76>
    1e9e:	a8 c0       	rjmp	.+336    	; 0x1ff0 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1ea6:	88 23       	and	r24, r24
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <m_wii_open+0x82>
    1eaa:	a4 c0       	rjmp	.+328    	; 0x1ff4 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1eb2:	88 23       	and	r24, r24
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <m_wii_open+0x8e>
    1eb6:	a0 c0       	rjmp	.+320    	; 0x1ff8 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1ebe:	88 23       	and	r24, r24
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <m_wii_open+0x9a>
    1ec2:	9c c0       	rjmp	.+312    	; 0x1ffc <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    1ec4:	80 e9       	ldi	r24, 0x90	; 144
    1ec6:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1eca:	88 23       	and	r24, r24
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <m_wii_open+0xa6>
    1ece:	98 c0       	rjmp	.+304    	; 0x2000 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1ed0:	84 e9       	ldi	r24, 0x94	; 148
    1ed2:	80 93 bc 00 	sts	0x00BC, r24
    1ed6:	83 ec       	ldi	r24, 0xC3	; 195
    1ed8:	99 e0       	ldi	r25, 0x09	; 9
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <m_wii_open+0xb0>
    1ede:	00 c0       	rjmp	.+0      	; 0x1ee0 <m_wii_open+0xb6>
    1ee0:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1ee2:	88 e5       	ldi	r24, 0x58	; 88
    1ee4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <start_write>
    1ee8:	88 23       	and	r24, r24
    1eea:	09 f4       	brne	.+2      	; 0x1eee <m_wii_open+0xc4>
    1eec:	8b c0       	rjmp	.+278    	; 0x2004 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    1eee:	87 e0       	ldi	r24, 0x07	; 7
    1ef0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1ef4:	88 23       	and	r24, r24
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <m_wii_open+0xd0>
    1ef8:	87 c0       	rjmp	.+270    	; 0x2008 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1f00:	88 23       	and	r24, r24
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <m_wii_open+0xdc>
    1f04:	83 c0       	rjmp	.+262    	; 0x200c <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    1f06:	81 e4       	ldi	r24, 0x41	; 65
    1f08:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1f0c:	88 23       	and	r24, r24
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <m_wii_open+0xe8>
    1f10:	7f c0       	rjmp	.+254    	; 0x2010 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1f12:	84 e9       	ldi	r24, 0x94	; 148
    1f14:	80 93 bc 00 	sts	0x00BC, r24
    1f18:	83 ec       	ldi	r24, 0xC3	; 195
    1f1a:	99 e0       	ldi	r25, 0x09	; 9
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <m_wii_open+0xf2>
    1f20:	00 c0       	rjmp	.+0      	; 0x1f22 <m_wii_open+0xf8>
    1f22:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1f24:	88 e5       	ldi	r24, 0x58	; 88
    1f26:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <start_write>
    1f2a:	88 23       	and	r24, r24
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <m_wii_open+0x106>
    1f2e:	72 c0       	rjmp	.+228    	; 0x2014 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    1f30:	8a e1       	ldi	r24, 0x1A	; 26
    1f32:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1f36:	88 23       	and	r24, r24
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <m_wii_open+0x112>
    1f3a:	6e c0       	rjmp	.+220    	; 0x2018 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    1f3c:	80 e4       	ldi	r24, 0x40	; 64
    1f3e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1f42:	88 23       	and	r24, r24
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <m_wii_open+0x11e>
    1f46:	6a c0       	rjmp	.+212    	; 0x201c <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1f4e:	88 23       	and	r24, r24
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <m_wii_open+0x12a>
    1f52:	66 c0       	rjmp	.+204    	; 0x2020 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1f54:	84 e9       	ldi	r24, 0x94	; 148
    1f56:	80 93 bc 00 	sts	0x00BC, r24
    1f5a:	83 ec       	ldi	r24, 0xC3	; 195
    1f5c:	99 e0       	ldi	r25, 0x09	; 9
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <m_wii_open+0x134>
    1f62:	00 c0       	rjmp	.+0      	; 0x1f64 <m_wii_open+0x13a>
    1f64:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1f66:	88 e5       	ldi	r24, 0x58	; 88
    1f68:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <start_write>
    1f6c:	88 23       	and	r24, r24
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <m_wii_open+0x148>
    1f70:	59 c0       	rjmp	.+178    	; 0x2024 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    1f72:	83 e3       	ldi	r24, 0x33	; 51
    1f74:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1f78:	88 23       	and	r24, r24
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <m_wii_open+0x154>
    1f7c:	55 c0       	rjmp	.+170    	; 0x2028 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    1f7e:	83 e0       	ldi	r24, 0x03	; 3
    1f80:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1f84:	88 23       	and	r24, r24
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <m_wii_open+0x160>
    1f88:	51 c0       	rjmp	.+162    	; 0x202c <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1f8a:	84 e9       	ldi	r24, 0x94	; 148
    1f8c:	80 93 bc 00 	sts	0x00BC, r24
    1f90:	83 ec       	ldi	r24, 0xC3	; 195
    1f92:	99 e0       	ldi	r25, 0x09	; 9
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <m_wii_open+0x16a>
    1f98:	00 c0       	rjmp	.+0      	; 0x1f9a <m_wii_open+0x170>
    1f9a:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1f9c:	88 e5       	ldi	r24, 0x58	; 88
    1f9e:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <start_write>
    1fa2:	88 23       	and	r24, r24
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <m_wii_open+0x17e>
    1fa6:	44 c0       	rjmp	.+136    	; 0x2030 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    1fa8:	80 e3       	ldi	r24, 0x30	; 48
    1faa:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1fae:	88 23       	and	r24, r24
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <m_wii_open+0x18a>
    1fb2:	40 c0       	rjmp	.+128    	; 0x2034 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    1fb4:	88 e0       	ldi	r24, 0x08	; 8
    1fb6:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    1fba:	88 23       	and	r24, r24
    1fbc:	e9 f1       	breq	.+122    	; 0x2038 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1fbe:	84 e9       	ldi	r24, 0x94	; 148
    1fc0:	80 93 bc 00 	sts	0x00BC, r24
    1fc4:	83 ec       	ldi	r24, 0xC3	; 195
    1fc6:	99 e0       	ldi	r25, 0x09	; 9
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <m_wii_open+0x19e>
    1fcc:	00 c0       	rjmp	.+0      	; 0x1fce <m_wii_open+0x1a4>
    1fce:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2038:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    203a:	08 95       	ret

0000203c <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    203c:	cf 93       	push	r28
    203e:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2040:	84 ea       	ldi	r24, 0xA4	; 164
    2042:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    2046:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <twi_wait>
    204a:	88 23       	and	r24, r24
    204c:	69 f0       	breq	.+26     	; 0x2068 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    204e:	8c 2f       	mov	r24, r28
    2050:	88 0f       	add	r24, r24
    2052:	8f 5f       	subi	r24, 0xFF	; 255
    2054:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2058:	88 34       	cpi	r24, 0x48	; 72
    205a:	29 f4       	brne	.+10     	; 0x2066 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    205c:	84 e9       	ldi	r24, 0x94	; 148
    205e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	01 c0       	rjmp	.+2      	; 0x2068 <start_read+0x2c>
	}	
	return 1;	// success
    2066:	81 e0       	ldi	r24, 0x01	; 1
}	
    2068:	cf 91       	pop	r28
    206a:	08 95       	ret

0000206c <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    206c:	0f 93       	push	r16
    206e:	1f 93       	push	r17
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	60 97       	sbiw	r28, 0x10	; 16
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2086:	fe 01       	movw	r30, r28
    2088:	31 96       	adiw	r30, 0x01	; 1
    208a:	80 e1       	ldi	r24, 0x10	; 16
    208c:	df 01       	movw	r26, r30
    208e:	1d 92       	st	X+, r1
    2090:	8a 95       	dec	r24
    2092:	e9 f7       	brne	.-6      	; 0x208e <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2094:	88 e5       	ldi	r24, 0x58	; 88
    2096:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <start_write>
    209a:	88 23       	and	r24, r24
    209c:	09 f4       	brne	.+2      	; 0x20a0 <m_wii_read+0x34>
    209e:	69 c0       	rjmp	.+210    	; 0x2172 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    20a0:	86 e3       	ldi	r24, 0x36	; 54
    20a2:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <send_byte>
    20a6:	88 23       	and	r24, r24
    20a8:	09 f4       	brne	.+2      	; 0x20ac <m_wii_read+0x40>
    20aa:	65 c0       	rjmp	.+202    	; 0x2176 <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    20ac:	84 e9       	ldi	r24, 0x94	; 148
    20ae:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20b2:	b8 e0       	ldi	r27, 0x08	; 8
    20b4:	ba 95       	dec	r27
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <m_wii_read+0x48>
    20b8:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    20ba:	88 e5       	ldi	r24, 0x58	; 88
    20bc:	0e 94 1e 10 	call	0x203c	; 0x203c <start_read>
    20c0:	88 23       	and	r24, r24
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <m_wii_read+0x5a>
    20c4:	5a c0       	rjmp	.+180    	; 0x217a <m_wii_read+0x10e>
    20c6:	be 01       	movw	r22, r28
    20c8:	6f 5f       	subi	r22, 0xFF	; 255
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	ae 01       	movw	r20, r28
    20ce:	40 5f       	subi	r20, 0xF0	; 240
    20d0:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    20d2:	ec eb       	ldi	r30, 0xBC	; 188
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    20d8:	2b eb       	ldi	r18, 0xBB	; 187
    20da:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    20dc:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    20de:	90 81       	ld	r25, Z
    20e0:	99 23       	and	r25, r25
    20e2:	ec f7       	brge	.-6      	; 0x20de <m_wii_read+0x72>
		temp[i] = TWDR;
    20e4:	d9 01       	movw	r26, r18
    20e6:	9c 91       	ld	r25, X
    20e8:	db 01       	movw	r26, r22
    20ea:	9d 93       	st	X+, r25
    20ec:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    20ee:	a4 17       	cp	r26, r20
    20f0:	b5 07       	cpc	r27, r21
    20f2:	a1 f7       	brne	.-24     	; 0x20dc <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    20f4:	84 e8       	ldi	r24, 0x84	; 132
    20f6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    20fa:	ec eb       	ldi	r30, 0xBC	; 188
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	88 23       	and	r24, r24
    2102:	ec f7       	brge	.-6      	; 0x20fe <m_wii_read+0x92>
	temp[15] = TWDR;
    2104:	80 91 bb 00 	lds	r24, 0x00BB
    2108:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    210a:	84 e9       	ldi	r24, 0x94	; 148
    210c:	80 93 bc 00 	sts	0x00BC, r24
    2110:	be 01       	movw	r22, r28
    2112:	6c 5f       	subi	r22, 0xFC	; 252
    2114:	7f 4f       	sbci	r23, 0xFF	; 255
    2116:	f8 01       	movw	r30, r16
    2118:	08 5e       	subi	r16, 0xE8	; 232
    211a:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    211c:	db 01       	movw	r26, r22
    211e:	2c 91       	ld	r18, X
    2120:	32 2f       	mov	r19, r18
    2122:	30 73       	andi	r19, 0x30	; 48
    2124:	cb 01       	movw	r24, r22
    2126:	02 97       	sbiw	r24, 0x02	; 2
    2128:	dc 01       	movw	r26, r24
    212a:	8c 91       	ld	r24, X
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	b0 e1       	ldi	r27, 0x10	; 16
    2130:	3b 9f       	mul	r19, r27
    2132:	80 0d       	add	r24, r0
    2134:	91 1d       	adc	r25, r1
    2136:	11 24       	eor	r1, r1
    2138:	91 83       	std	Z+1, r25	; 0x01
    213a:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    213c:	42 2f       	mov	r20, r18
    213e:	40 7c       	andi	r20, 0xC0	; 192
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	44 0f       	add	r20, r20
    2144:	55 1f       	adc	r21, r21
    2146:	44 0f       	add	r20, r20
    2148:	55 1f       	adc	r21, r21
    214a:	cb 01       	movw	r24, r22
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	dc 01       	movw	r26, r24
    2150:	8c 91       	ld	r24, X
    2152:	48 0f       	add	r20, r24
    2154:	51 1d       	adc	r21, r1
    2156:	53 83       	std	Z+3, r21	; 0x03
    2158:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    215a:	2f 70       	andi	r18, 0x0F	; 15
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	35 83       	std	Z+5, r19	; 0x05
    2160:	24 83       	std	Z+4, r18	; 0x04
    2162:	6d 5f       	subi	r22, 0xFD	; 253
    2164:	7f 4f       	sbci	r23, 0xFF	; 255
    2166:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2168:	e0 17       	cp	r30, r16
    216a:	f1 07       	cpc	r31, r17
    216c:	b9 f6       	brne	.-82     	; 0x211c <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	05 c0       	rjmp	.+10     	; 0x217c <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	03 c0       	rjmp	.+6      	; 0x217c <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	01 c0       	rjmp	.+2      	; 0x217c <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    217a:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    217c:	60 96       	adiw	r28, 0x10	; 16
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	08 95       	ret

00002192 <__subsf3>:
    2192:	50 58       	subi	r21, 0x80	; 128

00002194 <__addsf3>:
    2194:	bb 27       	eor	r27, r27
    2196:	aa 27       	eor	r26, r26
    2198:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__addsf3x>
    219c:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__fp_round>
    21a0:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__fp_pscA>
    21a4:	38 f0       	brcs	.+14     	; 0x21b4 <__addsf3+0x20>
    21a6:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__fp_pscB>
    21aa:	20 f0       	brcs	.+8      	; 0x21b4 <__addsf3+0x20>
    21ac:	39 f4       	brne	.+14     	; 0x21bc <__addsf3+0x28>
    21ae:	9f 3f       	cpi	r25, 0xFF	; 255
    21b0:	19 f4       	brne	.+6      	; 0x21b8 <__addsf3+0x24>
    21b2:	26 f4       	brtc	.+8      	; 0x21bc <__addsf3+0x28>
    21b4:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__fp_nan>
    21b8:	0e f4       	brtc	.+2      	; 0x21bc <__addsf3+0x28>
    21ba:	e0 95       	com	r30
    21bc:	e7 fb       	bst	r30, 7
    21be:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_inf>

000021c2 <__addsf3x>:
    21c2:	e9 2f       	mov	r30, r25
    21c4:	0e 94 42 13 	call	0x2684	; 0x2684 <__fp_split3>
    21c8:	58 f3       	brcs	.-42     	; 0x21a0 <__addsf3+0xc>
    21ca:	ba 17       	cp	r27, r26
    21cc:	62 07       	cpc	r22, r18
    21ce:	73 07       	cpc	r23, r19
    21d0:	84 07       	cpc	r24, r20
    21d2:	95 07       	cpc	r25, r21
    21d4:	20 f0       	brcs	.+8      	; 0x21de <__addsf3x+0x1c>
    21d6:	79 f4       	brne	.+30     	; 0x21f6 <__addsf3x+0x34>
    21d8:	a6 f5       	brtc	.+104    	; 0x2242 <__addsf3x+0x80>
    21da:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__fp_zero>
    21de:	0e f4       	brtc	.+2      	; 0x21e2 <__addsf3x+0x20>
    21e0:	e0 95       	com	r30
    21e2:	0b 2e       	mov	r0, r27
    21e4:	ba 2f       	mov	r27, r26
    21e6:	a0 2d       	mov	r26, r0
    21e8:	0b 01       	movw	r0, r22
    21ea:	b9 01       	movw	r22, r18
    21ec:	90 01       	movw	r18, r0
    21ee:	0c 01       	movw	r0, r24
    21f0:	ca 01       	movw	r24, r20
    21f2:	a0 01       	movw	r20, r0
    21f4:	11 24       	eor	r1, r1
    21f6:	ff 27       	eor	r31, r31
    21f8:	59 1b       	sub	r21, r25
    21fa:	99 f0       	breq	.+38     	; 0x2222 <__addsf3x+0x60>
    21fc:	59 3f       	cpi	r21, 0xF9	; 249
    21fe:	50 f4       	brcc	.+20     	; 0x2214 <__addsf3x+0x52>
    2200:	50 3e       	cpi	r21, 0xE0	; 224
    2202:	68 f1       	brcs	.+90     	; 0x225e <__addsf3x+0x9c>
    2204:	1a 16       	cp	r1, r26
    2206:	f0 40       	sbci	r31, 0x00	; 0
    2208:	a2 2f       	mov	r26, r18
    220a:	23 2f       	mov	r18, r19
    220c:	34 2f       	mov	r19, r20
    220e:	44 27       	eor	r20, r20
    2210:	58 5f       	subi	r21, 0xF8	; 248
    2212:	f3 cf       	rjmp	.-26     	; 0x21fa <__addsf3x+0x38>
    2214:	46 95       	lsr	r20
    2216:	37 95       	ror	r19
    2218:	27 95       	ror	r18
    221a:	a7 95       	ror	r26
    221c:	f0 40       	sbci	r31, 0x00	; 0
    221e:	53 95       	inc	r21
    2220:	c9 f7       	brne	.-14     	; 0x2214 <__addsf3x+0x52>
    2222:	7e f4       	brtc	.+30     	; 0x2242 <__addsf3x+0x80>
    2224:	1f 16       	cp	r1, r31
    2226:	ba 0b       	sbc	r27, r26
    2228:	62 0b       	sbc	r22, r18
    222a:	73 0b       	sbc	r23, r19
    222c:	84 0b       	sbc	r24, r20
    222e:	ba f0       	brmi	.+46     	; 0x225e <__addsf3x+0x9c>
    2230:	91 50       	subi	r25, 0x01	; 1
    2232:	a1 f0       	breq	.+40     	; 0x225c <__addsf3x+0x9a>
    2234:	ff 0f       	add	r31, r31
    2236:	bb 1f       	adc	r27, r27
    2238:	66 1f       	adc	r22, r22
    223a:	77 1f       	adc	r23, r23
    223c:	88 1f       	adc	r24, r24
    223e:	c2 f7       	brpl	.-16     	; 0x2230 <__addsf3x+0x6e>
    2240:	0e c0       	rjmp	.+28     	; 0x225e <__addsf3x+0x9c>
    2242:	ba 0f       	add	r27, r26
    2244:	62 1f       	adc	r22, r18
    2246:	73 1f       	adc	r23, r19
    2248:	84 1f       	adc	r24, r20
    224a:	48 f4       	brcc	.+18     	; 0x225e <__addsf3x+0x9c>
    224c:	87 95       	ror	r24
    224e:	77 95       	ror	r23
    2250:	67 95       	ror	r22
    2252:	b7 95       	ror	r27
    2254:	f7 95       	ror	r31
    2256:	9e 3f       	cpi	r25, 0xFE	; 254
    2258:	08 f0       	brcs	.+2      	; 0x225c <__addsf3x+0x9a>
    225a:	b0 cf       	rjmp	.-160    	; 0x21bc <__addsf3+0x28>
    225c:	93 95       	inc	r25
    225e:	88 0f       	add	r24, r24
    2260:	08 f0       	brcs	.+2      	; 0x2264 <__addsf3x+0xa2>
    2262:	99 27       	eor	r25, r25
    2264:	ee 0f       	add	r30, r30
    2266:	97 95       	ror	r25
    2268:	87 95       	ror	r24
    226a:	08 95       	ret
    226c:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__fp_pscA>
    2270:	60 f0       	brcs	.+24     	; 0x228a <__addsf3x+0xc8>
    2272:	80 e8       	ldi	r24, 0x80	; 128
    2274:	91 e0       	ldi	r25, 0x01	; 1
    2276:	09 f4       	brne	.+2      	; 0x227a <__addsf3x+0xb8>
    2278:	9e ef       	ldi	r25, 0xFE	; 254
    227a:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__fp_pscB>
    227e:	28 f0       	brcs	.+10     	; 0x228a <__addsf3x+0xc8>
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	51 e0       	ldi	r21, 0x01	; 1
    2284:	71 f4       	brne	.+28     	; 0x22a2 <atan2+0x10>
    2286:	5e ef       	ldi	r21, 0xFE	; 254
    2288:	0c c0       	rjmp	.+24     	; 0x22a2 <atan2+0x10>
    228a:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__fp_nan>
    228e:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__fp_zero>

00002292 <atan2>:
    2292:	e9 2f       	mov	r30, r25
    2294:	e0 78       	andi	r30, 0x80	; 128
    2296:	0e 94 42 13 	call	0x2684	; 0x2684 <__fp_split3>
    229a:	40 f3       	brcs	.-48     	; 0x226c <__addsf3x+0xaa>
    229c:	09 2e       	mov	r0, r25
    229e:	05 2a       	or	r0, r21
    22a0:	b1 f3       	breq	.-20     	; 0x228e <__addsf3x+0xcc>
    22a2:	26 17       	cp	r18, r22
    22a4:	37 07       	cpc	r19, r23
    22a6:	48 07       	cpc	r20, r24
    22a8:	59 07       	cpc	r21, r25
    22aa:	38 f0       	brcs	.+14     	; 0x22ba <atan2+0x28>
    22ac:	0e 2e       	mov	r0, r30
    22ae:	07 f8       	bld	r0, 7
    22b0:	e0 25       	eor	r30, r0
    22b2:	69 f0       	breq	.+26     	; 0x22ce <atan2+0x3c>
    22b4:	e0 25       	eor	r30, r0
    22b6:	e0 64       	ori	r30, 0x40	; 64
    22b8:	0a c0       	rjmp	.+20     	; 0x22ce <atan2+0x3c>
    22ba:	ef 63       	ori	r30, 0x3F	; 63
    22bc:	07 f8       	bld	r0, 7
    22be:	00 94       	com	r0
    22c0:	07 fa       	bst	r0, 7
    22c2:	db 01       	movw	r26, r22
    22c4:	b9 01       	movw	r22, r18
    22c6:	9d 01       	movw	r18, r26
    22c8:	dc 01       	movw	r26, r24
    22ca:	ca 01       	movw	r24, r20
    22cc:	ad 01       	movw	r20, r26
    22ce:	ef 93       	push	r30
    22d0:	0e 94 c9 11 	call	0x2392	; 0x2392 <__divsf3_pse>
    22d4:	0e 94 1d 13 	call	0x263a	; 0x263a <__fp_round>
    22d8:	0e 94 79 11 	call	0x22f2	; 0x22f2 <atan>
    22dc:	5f 91       	pop	r21
    22de:	55 23       	and	r21, r21
    22e0:	39 f0       	breq	.+14     	; 0x22f0 <atan2+0x5e>
    22e2:	2b ed       	ldi	r18, 0xDB	; 219
    22e4:	3f e0       	ldi	r19, 0x0F	; 15
    22e6:	49 e4       	ldi	r20, 0x49	; 73
    22e8:	50 fd       	sbrc	r21, 0
    22ea:	49 ec       	ldi	r20, 0xC9	; 201
    22ec:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__addsf3>
    22f0:	08 95       	ret

000022f2 <atan>:
    22f2:	df 93       	push	r29
    22f4:	dd 27       	eor	r29, r29
    22f6:	b9 2f       	mov	r27, r25
    22f8:	bf 77       	andi	r27, 0x7F	; 127
    22fa:	40 e8       	ldi	r20, 0x80	; 128
    22fc:	5f e3       	ldi	r21, 0x3F	; 63
    22fe:	16 16       	cp	r1, r22
    2300:	17 06       	cpc	r1, r23
    2302:	48 07       	cpc	r20, r24
    2304:	5b 07       	cpc	r21, r27
    2306:	18 f4       	brcc	.+6      	; 0x230e <atan+0x1c>
    2308:	d9 2f       	mov	r29, r25
    230a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <inverse>
    230e:	9f 93       	push	r25
    2310:	8f 93       	push	r24
    2312:	7f 93       	push	r23
    2314:	6f 93       	push	r22
    2316:	0e 94 33 14 	call	0x2866	; 0x2866 <square>
    231a:	ec ea       	ldi	r30, 0xAC	; 172
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	0e 94 bd 12 	call	0x257a	; 0x257a <__fp_powser>
    2322:	0e 94 1d 13 	call	0x263a	; 0x263a <__fp_round>
    2326:	2f 91       	pop	r18
    2328:	3f 91       	pop	r19
    232a:	4f 91       	pop	r20
    232c:	5f 91       	pop	r21
    232e:	0e 94 8b 13 	call	0x2716	; 0x2716 <__mulsf3x>
    2332:	dd 23       	and	r29, r29
    2334:	51 f0       	breq	.+20     	; 0x234a <atan+0x58>
    2336:	90 58       	subi	r25, 0x80	; 128
    2338:	a2 ea       	ldi	r26, 0xA2	; 162
    233a:	2a ed       	ldi	r18, 0xDA	; 218
    233c:	3f e0       	ldi	r19, 0x0F	; 15
    233e:	49 ec       	ldi	r20, 0xC9	; 201
    2340:	5f e3       	ldi	r21, 0x3F	; 63
    2342:	d0 78       	andi	r29, 0x80	; 128
    2344:	5d 27       	eor	r21, r29
    2346:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__addsf3x>
    234a:	df 91       	pop	r29
    234c:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__fp_round>

00002350 <__cmpsf2>:
    2350:	0e 94 90 12 	call	0x2520	; 0x2520 <__fp_cmp>
    2354:	08 f4       	brcc	.+2      	; 0x2358 <__cmpsf2+0x8>
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	08 95       	ret

0000235a <cos>:
    235a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fp_rempio2>
    235e:	e3 95       	inc	r30
    2360:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__fp_sinus>

00002364 <__divsf3>:
    2364:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3x>
    2368:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__fp_round>
    236c:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__fp_pscB>
    2370:	58 f0       	brcs	.+22     	; 0x2388 <__divsf3+0x24>
    2372:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__fp_pscA>
    2376:	40 f0       	brcs	.+16     	; 0x2388 <__divsf3+0x24>
    2378:	29 f4       	brne	.+10     	; 0x2384 <__divsf3+0x20>
    237a:	5f 3f       	cpi	r21, 0xFF	; 255
    237c:	29 f0       	breq	.+10     	; 0x2388 <__divsf3+0x24>
    237e:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_inf>
    2382:	51 11       	cpse	r21, r1
    2384:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__fp_szero>
    2388:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__fp_nan>

0000238c <__divsf3x>:
    238c:	0e 94 42 13 	call	0x2684	; 0x2684 <__fp_split3>
    2390:	68 f3       	brcs	.-38     	; 0x236c <__divsf3+0x8>

00002392 <__divsf3_pse>:
    2392:	99 23       	and	r25, r25
    2394:	b1 f3       	breq	.-20     	; 0x2382 <__divsf3+0x1e>
    2396:	55 23       	and	r21, r21
    2398:	91 f3       	breq	.-28     	; 0x237e <__divsf3+0x1a>
    239a:	95 1b       	sub	r25, r21
    239c:	55 0b       	sbc	r21, r21
    239e:	bb 27       	eor	r27, r27
    23a0:	aa 27       	eor	r26, r26
    23a2:	62 17       	cp	r22, r18
    23a4:	73 07       	cpc	r23, r19
    23a6:	84 07       	cpc	r24, r20
    23a8:	38 f0       	brcs	.+14     	; 0x23b8 <__divsf3_pse+0x26>
    23aa:	9f 5f       	subi	r25, 0xFF	; 255
    23ac:	5f 4f       	sbci	r21, 0xFF	; 255
    23ae:	22 0f       	add	r18, r18
    23b0:	33 1f       	adc	r19, r19
    23b2:	44 1f       	adc	r20, r20
    23b4:	aa 1f       	adc	r26, r26
    23b6:	a9 f3       	breq	.-22     	; 0x23a2 <__divsf3_pse+0x10>
    23b8:	35 d0       	rcall	.+106    	; 0x2424 <__divsf3_pse+0x92>
    23ba:	0e 2e       	mov	r0, r30
    23bc:	3a f0       	brmi	.+14     	; 0x23cc <__divsf3_pse+0x3a>
    23be:	e0 e8       	ldi	r30, 0x80	; 128
    23c0:	32 d0       	rcall	.+100    	; 0x2426 <__divsf3_pse+0x94>
    23c2:	91 50       	subi	r25, 0x01	; 1
    23c4:	50 40       	sbci	r21, 0x00	; 0
    23c6:	e6 95       	lsr	r30
    23c8:	00 1c       	adc	r0, r0
    23ca:	ca f7       	brpl	.-14     	; 0x23be <__divsf3_pse+0x2c>
    23cc:	2b d0       	rcall	.+86     	; 0x2424 <__divsf3_pse+0x92>
    23ce:	fe 2f       	mov	r31, r30
    23d0:	29 d0       	rcall	.+82     	; 0x2424 <__divsf3_pse+0x92>
    23d2:	66 0f       	add	r22, r22
    23d4:	77 1f       	adc	r23, r23
    23d6:	88 1f       	adc	r24, r24
    23d8:	bb 1f       	adc	r27, r27
    23da:	26 17       	cp	r18, r22
    23dc:	37 07       	cpc	r19, r23
    23de:	48 07       	cpc	r20, r24
    23e0:	ab 07       	cpc	r26, r27
    23e2:	b0 e8       	ldi	r27, 0x80	; 128
    23e4:	09 f0       	breq	.+2      	; 0x23e8 <__divsf3_pse+0x56>
    23e6:	bb 0b       	sbc	r27, r27
    23e8:	80 2d       	mov	r24, r0
    23ea:	bf 01       	movw	r22, r30
    23ec:	ff 27       	eor	r31, r31
    23ee:	93 58       	subi	r25, 0x83	; 131
    23f0:	5f 4f       	sbci	r21, 0xFF	; 255
    23f2:	3a f0       	brmi	.+14     	; 0x2402 <__divsf3_pse+0x70>
    23f4:	9e 3f       	cpi	r25, 0xFE	; 254
    23f6:	51 05       	cpc	r21, r1
    23f8:	78 f0       	brcs	.+30     	; 0x2418 <__divsf3_pse+0x86>
    23fa:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_inf>
    23fe:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__fp_szero>
    2402:	5f 3f       	cpi	r21, 0xFF	; 255
    2404:	e4 f3       	brlt	.-8      	; 0x23fe <__divsf3_pse+0x6c>
    2406:	98 3e       	cpi	r25, 0xE8	; 232
    2408:	d4 f3       	brlt	.-12     	; 0x23fe <__divsf3_pse+0x6c>
    240a:	86 95       	lsr	r24
    240c:	77 95       	ror	r23
    240e:	67 95       	ror	r22
    2410:	b7 95       	ror	r27
    2412:	f7 95       	ror	r31
    2414:	9f 5f       	subi	r25, 0xFF	; 255
    2416:	c9 f7       	brne	.-14     	; 0x240a <__divsf3_pse+0x78>
    2418:	88 0f       	add	r24, r24
    241a:	91 1d       	adc	r25, r1
    241c:	96 95       	lsr	r25
    241e:	87 95       	ror	r24
    2420:	97 f9       	bld	r25, 7
    2422:	08 95       	ret
    2424:	e1 e0       	ldi	r30, 0x01	; 1
    2426:	66 0f       	add	r22, r22
    2428:	77 1f       	adc	r23, r23
    242a:	88 1f       	adc	r24, r24
    242c:	bb 1f       	adc	r27, r27
    242e:	62 17       	cp	r22, r18
    2430:	73 07       	cpc	r23, r19
    2432:	84 07       	cpc	r24, r20
    2434:	ba 07       	cpc	r27, r26
    2436:	20 f0       	brcs	.+8      	; 0x2440 <__divsf3_pse+0xae>
    2438:	62 1b       	sub	r22, r18
    243a:	73 0b       	sbc	r23, r19
    243c:	84 0b       	sbc	r24, r20
    243e:	ba 0b       	sbc	r27, r26
    2440:	ee 1f       	adc	r30, r30
    2442:	88 f7       	brcc	.-30     	; 0x2426 <__divsf3_pse+0x94>
    2444:	e0 95       	com	r30
    2446:	08 95       	ret

00002448 <__fixunssfsi>:
    2448:	0e 94 4a 13 	call	0x2694	; 0x2694 <__fp_splitA>
    244c:	88 f0       	brcs	.+34     	; 0x2470 <__fixunssfsi+0x28>
    244e:	9f 57       	subi	r25, 0x7F	; 127
    2450:	98 f0       	brcs	.+38     	; 0x2478 <__fixunssfsi+0x30>
    2452:	b9 2f       	mov	r27, r25
    2454:	99 27       	eor	r25, r25
    2456:	b7 51       	subi	r27, 0x17	; 23
    2458:	b0 f0       	brcs	.+44     	; 0x2486 <__fixunssfsi+0x3e>
    245a:	e1 f0       	breq	.+56     	; 0x2494 <__fixunssfsi+0x4c>
    245c:	66 0f       	add	r22, r22
    245e:	77 1f       	adc	r23, r23
    2460:	88 1f       	adc	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	1a f0       	brmi	.+6      	; 0x246c <__fixunssfsi+0x24>
    2466:	ba 95       	dec	r27
    2468:	c9 f7       	brne	.-14     	; 0x245c <__fixunssfsi+0x14>
    246a:	14 c0       	rjmp	.+40     	; 0x2494 <__fixunssfsi+0x4c>
    246c:	b1 30       	cpi	r27, 0x01	; 1
    246e:	91 f0       	breq	.+36     	; 0x2494 <__fixunssfsi+0x4c>
    2470:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fp_zero>
    2474:	b1 e0       	ldi	r27, 0x01	; 1
    2476:	08 95       	ret
    2478:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__fp_zero>
    247c:	67 2f       	mov	r22, r23
    247e:	78 2f       	mov	r23, r24
    2480:	88 27       	eor	r24, r24
    2482:	b8 5f       	subi	r27, 0xF8	; 248
    2484:	39 f0       	breq	.+14     	; 0x2494 <__fixunssfsi+0x4c>
    2486:	b9 3f       	cpi	r27, 0xF9	; 249
    2488:	cc f3       	brlt	.-14     	; 0x247c <__fixunssfsi+0x34>
    248a:	86 95       	lsr	r24
    248c:	77 95       	ror	r23
    248e:	67 95       	ror	r22
    2490:	b3 95       	inc	r27
    2492:	d9 f7       	brne	.-10     	; 0x248a <__fixunssfsi+0x42>
    2494:	3e f4       	brtc	.+14     	; 0x24a4 <__fixunssfsi+0x5c>
    2496:	90 95       	com	r25
    2498:	80 95       	com	r24
    249a:	70 95       	com	r23
    249c:	61 95       	neg	r22
    249e:	7f 4f       	sbci	r23, 0xFF	; 255
    24a0:	8f 4f       	sbci	r24, 0xFF	; 255
    24a2:	9f 4f       	sbci	r25, 0xFF	; 255
    24a4:	08 95       	ret

000024a6 <__floatunsisf>:
    24a6:	e8 94       	clt
    24a8:	09 c0       	rjmp	.+18     	; 0x24bc <__floatsisf+0x12>

000024aa <__floatsisf>:
    24aa:	97 fb       	bst	r25, 7
    24ac:	3e f4       	brtc	.+14     	; 0x24bc <__floatsisf+0x12>
    24ae:	90 95       	com	r25
    24b0:	80 95       	com	r24
    24b2:	70 95       	com	r23
    24b4:	61 95       	neg	r22
    24b6:	7f 4f       	sbci	r23, 0xFF	; 255
    24b8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ba:	9f 4f       	sbci	r25, 0xFF	; 255
    24bc:	99 23       	and	r25, r25
    24be:	a9 f0       	breq	.+42     	; 0x24ea <__floatsisf+0x40>
    24c0:	f9 2f       	mov	r31, r25
    24c2:	96 e9       	ldi	r25, 0x96	; 150
    24c4:	bb 27       	eor	r27, r27
    24c6:	93 95       	inc	r25
    24c8:	f6 95       	lsr	r31
    24ca:	87 95       	ror	r24
    24cc:	77 95       	ror	r23
    24ce:	67 95       	ror	r22
    24d0:	b7 95       	ror	r27
    24d2:	f1 11       	cpse	r31, r1
    24d4:	f8 cf       	rjmp	.-16     	; 0x24c6 <__floatsisf+0x1c>
    24d6:	fa f4       	brpl	.+62     	; 0x2516 <__floatsisf+0x6c>
    24d8:	bb 0f       	add	r27, r27
    24da:	11 f4       	brne	.+4      	; 0x24e0 <__floatsisf+0x36>
    24dc:	60 ff       	sbrs	r22, 0
    24de:	1b c0       	rjmp	.+54     	; 0x2516 <__floatsisf+0x6c>
    24e0:	6f 5f       	subi	r22, 0xFF	; 255
    24e2:	7f 4f       	sbci	r23, 0xFF	; 255
    24e4:	8f 4f       	sbci	r24, 0xFF	; 255
    24e6:	9f 4f       	sbci	r25, 0xFF	; 255
    24e8:	16 c0       	rjmp	.+44     	; 0x2516 <__floatsisf+0x6c>
    24ea:	88 23       	and	r24, r24
    24ec:	11 f0       	breq	.+4      	; 0x24f2 <__floatsisf+0x48>
    24ee:	96 e9       	ldi	r25, 0x96	; 150
    24f0:	11 c0       	rjmp	.+34     	; 0x2514 <__floatsisf+0x6a>
    24f2:	77 23       	and	r23, r23
    24f4:	21 f0       	breq	.+8      	; 0x24fe <__floatsisf+0x54>
    24f6:	9e e8       	ldi	r25, 0x8E	; 142
    24f8:	87 2f       	mov	r24, r23
    24fa:	76 2f       	mov	r23, r22
    24fc:	05 c0       	rjmp	.+10     	; 0x2508 <__floatsisf+0x5e>
    24fe:	66 23       	and	r22, r22
    2500:	71 f0       	breq	.+28     	; 0x251e <__floatsisf+0x74>
    2502:	96 e8       	ldi	r25, 0x86	; 134
    2504:	86 2f       	mov	r24, r22
    2506:	70 e0       	ldi	r23, 0x00	; 0
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	2a f0       	brmi	.+10     	; 0x2516 <__floatsisf+0x6c>
    250c:	9a 95       	dec	r25
    250e:	66 0f       	add	r22, r22
    2510:	77 1f       	adc	r23, r23
    2512:	88 1f       	adc	r24, r24
    2514:	da f7       	brpl	.-10     	; 0x250c <__floatsisf+0x62>
    2516:	88 0f       	add	r24, r24
    2518:	96 95       	lsr	r25
    251a:	87 95       	ror	r24
    251c:	97 f9       	bld	r25, 7
    251e:	08 95       	ret

00002520 <__fp_cmp>:
    2520:	99 0f       	add	r25, r25
    2522:	00 08       	sbc	r0, r0
    2524:	55 0f       	add	r21, r21
    2526:	aa 0b       	sbc	r26, r26
    2528:	e0 e8       	ldi	r30, 0x80	; 128
    252a:	fe ef       	ldi	r31, 0xFE	; 254
    252c:	16 16       	cp	r1, r22
    252e:	17 06       	cpc	r1, r23
    2530:	e8 07       	cpc	r30, r24
    2532:	f9 07       	cpc	r31, r25
    2534:	c0 f0       	brcs	.+48     	; 0x2566 <__fp_cmp+0x46>
    2536:	12 16       	cp	r1, r18
    2538:	13 06       	cpc	r1, r19
    253a:	e4 07       	cpc	r30, r20
    253c:	f5 07       	cpc	r31, r21
    253e:	98 f0       	brcs	.+38     	; 0x2566 <__fp_cmp+0x46>
    2540:	62 1b       	sub	r22, r18
    2542:	73 0b       	sbc	r23, r19
    2544:	84 0b       	sbc	r24, r20
    2546:	95 0b       	sbc	r25, r21
    2548:	39 f4       	brne	.+14     	; 0x2558 <__fp_cmp+0x38>
    254a:	0a 26       	eor	r0, r26
    254c:	61 f0       	breq	.+24     	; 0x2566 <__fp_cmp+0x46>
    254e:	23 2b       	or	r18, r19
    2550:	24 2b       	or	r18, r20
    2552:	25 2b       	or	r18, r21
    2554:	21 f4       	brne	.+8      	; 0x255e <__fp_cmp+0x3e>
    2556:	08 95       	ret
    2558:	0a 26       	eor	r0, r26
    255a:	09 f4       	brne	.+2      	; 0x255e <__fp_cmp+0x3e>
    255c:	a1 40       	sbci	r26, 0x01	; 1
    255e:	a6 95       	lsr	r26
    2560:	8f ef       	ldi	r24, 0xFF	; 255
    2562:	81 1d       	adc	r24, r1
    2564:	81 1d       	adc	r24, r1
    2566:	08 95       	ret

00002568 <__fp_inf>:
    2568:	97 f9       	bld	r25, 7
    256a:	9f 67       	ori	r25, 0x7F	; 127
    256c:	80 e8       	ldi	r24, 0x80	; 128
    256e:	70 e0       	ldi	r23, 0x00	; 0
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	08 95       	ret

00002574 <__fp_nan>:
    2574:	9f ef       	ldi	r25, 0xFF	; 255
    2576:	80 ec       	ldi	r24, 0xC0	; 192
    2578:	08 95       	ret

0000257a <__fp_powser>:
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	1f 93       	push	r17
    2580:	0f 93       	push	r16
    2582:	ff 92       	push	r15
    2584:	ef 92       	push	r14
    2586:	df 92       	push	r13
    2588:	7b 01       	movw	r14, r22
    258a:	8c 01       	movw	r16, r24
    258c:	68 94       	set
    258e:	06 c0       	rjmp	.+12     	; 0x259c <__fp_powser+0x22>
    2590:	da 2e       	mov	r13, r26
    2592:	ef 01       	movw	r28, r30
    2594:	0e 94 8b 13 	call	0x2716	; 0x2716 <__mulsf3x>
    2598:	fe 01       	movw	r30, r28
    259a:	e8 94       	clt
    259c:	a5 91       	lpm	r26, Z+
    259e:	25 91       	lpm	r18, Z+
    25a0:	35 91       	lpm	r19, Z+
    25a2:	45 91       	lpm	r20, Z+
    25a4:	55 91       	lpm	r21, Z+
    25a6:	a6 f3       	brts	.-24     	; 0x2590 <__fp_powser+0x16>
    25a8:	ef 01       	movw	r28, r30
    25aa:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__addsf3x>
    25ae:	fe 01       	movw	r30, r28
    25b0:	97 01       	movw	r18, r14
    25b2:	a8 01       	movw	r20, r16
    25b4:	da 94       	dec	r13
    25b6:	69 f7       	brne	.-38     	; 0x2592 <__fp_powser+0x18>
    25b8:	df 90       	pop	r13
    25ba:	ef 90       	pop	r14
    25bc:	ff 90       	pop	r15
    25be:	0f 91       	pop	r16
    25c0:	1f 91       	pop	r17
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <__fp_pscA>:
    25c8:	00 24       	eor	r0, r0
    25ca:	0a 94       	dec	r0
    25cc:	16 16       	cp	r1, r22
    25ce:	17 06       	cpc	r1, r23
    25d0:	18 06       	cpc	r1, r24
    25d2:	09 06       	cpc	r0, r25
    25d4:	08 95       	ret

000025d6 <__fp_pscB>:
    25d6:	00 24       	eor	r0, r0
    25d8:	0a 94       	dec	r0
    25da:	12 16       	cp	r1, r18
    25dc:	13 06       	cpc	r1, r19
    25de:	14 06       	cpc	r1, r20
    25e0:	05 06       	cpc	r0, r21
    25e2:	08 95       	ret
    25e4:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__fp_nan>

000025e8 <__fp_rempio2>:
    25e8:	0e 94 4a 13 	call	0x2694	; 0x2694 <__fp_splitA>
    25ec:	d8 f3       	brcs	.-10     	; 0x25e4 <__fp_pscB+0xe>
    25ee:	e8 94       	clt
    25f0:	e0 e0       	ldi	r30, 0x00	; 0
    25f2:	bb 27       	eor	r27, r27
    25f4:	9f 57       	subi	r25, 0x7F	; 127
    25f6:	f0 f0       	brcs	.+60     	; 0x2634 <__fp_rempio2+0x4c>
    25f8:	2a ed       	ldi	r18, 0xDA	; 218
    25fa:	3f e0       	ldi	r19, 0x0F	; 15
    25fc:	49 ec       	ldi	r20, 0xC9	; 201
    25fe:	06 c0       	rjmp	.+12     	; 0x260c <__fp_rempio2+0x24>
    2600:	ee 0f       	add	r30, r30
    2602:	bb 0f       	add	r27, r27
    2604:	66 1f       	adc	r22, r22
    2606:	77 1f       	adc	r23, r23
    2608:	88 1f       	adc	r24, r24
    260a:	28 f0       	brcs	.+10     	; 0x2616 <__fp_rempio2+0x2e>
    260c:	b2 3a       	cpi	r27, 0xA2	; 162
    260e:	62 07       	cpc	r22, r18
    2610:	73 07       	cpc	r23, r19
    2612:	84 07       	cpc	r24, r20
    2614:	28 f0       	brcs	.+10     	; 0x2620 <__fp_rempio2+0x38>
    2616:	b2 5a       	subi	r27, 0xA2	; 162
    2618:	62 0b       	sbc	r22, r18
    261a:	73 0b       	sbc	r23, r19
    261c:	84 0b       	sbc	r24, r20
    261e:	e3 95       	inc	r30
    2620:	9a 95       	dec	r25
    2622:	72 f7       	brpl	.-36     	; 0x2600 <__fp_rempio2+0x18>
    2624:	80 38       	cpi	r24, 0x80	; 128
    2626:	30 f4       	brcc	.+12     	; 0x2634 <__fp_rempio2+0x4c>
    2628:	9a 95       	dec	r25
    262a:	bb 0f       	add	r27, r27
    262c:	66 1f       	adc	r22, r22
    262e:	77 1f       	adc	r23, r23
    2630:	88 1f       	adc	r24, r24
    2632:	d2 f7       	brpl	.-12     	; 0x2628 <__fp_rempio2+0x40>
    2634:	90 48       	sbci	r25, 0x80	; 128
    2636:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__fp_mpack_finite>

0000263a <__fp_round>:
    263a:	09 2e       	mov	r0, r25
    263c:	03 94       	inc	r0
    263e:	00 0c       	add	r0, r0
    2640:	11 f4       	brne	.+4      	; 0x2646 <__fp_round+0xc>
    2642:	88 23       	and	r24, r24
    2644:	52 f0       	brmi	.+20     	; 0x265a <__fp_round+0x20>
    2646:	bb 0f       	add	r27, r27
    2648:	40 f4       	brcc	.+16     	; 0x265a <__fp_round+0x20>
    264a:	bf 2b       	or	r27, r31
    264c:	11 f4       	brne	.+4      	; 0x2652 <__fp_round+0x18>
    264e:	60 ff       	sbrs	r22, 0
    2650:	04 c0       	rjmp	.+8      	; 0x265a <__fp_round+0x20>
    2652:	6f 5f       	subi	r22, 0xFF	; 255
    2654:	7f 4f       	sbci	r23, 0xFF	; 255
    2656:	8f 4f       	sbci	r24, 0xFF	; 255
    2658:	9f 4f       	sbci	r25, 0xFF	; 255
    265a:	08 95       	ret

0000265c <__fp_sinus>:
    265c:	ef 93       	push	r30
    265e:	e0 ff       	sbrs	r30, 0
    2660:	07 c0       	rjmp	.+14     	; 0x2670 <__fp_sinus+0x14>
    2662:	a2 ea       	ldi	r26, 0xA2	; 162
    2664:	2a ed       	ldi	r18, 0xDA	; 218
    2666:	3f e0       	ldi	r19, 0x0F	; 15
    2668:	49 ec       	ldi	r20, 0xC9	; 201
    266a:	5f eb       	ldi	r21, 0xBF	; 191
    266c:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__addsf3x>
    2670:	0e 94 1d 13 	call	0x263a	; 0x263a <__fp_round>
    2674:	0f 90       	pop	r0
    2676:	03 94       	inc	r0
    2678:	01 fc       	sbrc	r0, 1
    267a:	90 58       	subi	r25, 0x80	; 128
    267c:	e9 ed       	ldi	r30, 0xD9	; 217
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__fp_powsodd>

00002684 <__fp_split3>:
    2684:	57 fd       	sbrc	r21, 7
    2686:	90 58       	subi	r25, 0x80	; 128
    2688:	44 0f       	add	r20, r20
    268a:	55 1f       	adc	r21, r21
    268c:	59 f0       	breq	.+22     	; 0x26a4 <__fp_splitA+0x10>
    268e:	5f 3f       	cpi	r21, 0xFF	; 255
    2690:	71 f0       	breq	.+28     	; 0x26ae <__fp_splitA+0x1a>
    2692:	47 95       	ror	r20

00002694 <__fp_splitA>:
    2694:	88 0f       	add	r24, r24
    2696:	97 fb       	bst	r25, 7
    2698:	99 1f       	adc	r25, r25
    269a:	61 f0       	breq	.+24     	; 0x26b4 <__fp_splitA+0x20>
    269c:	9f 3f       	cpi	r25, 0xFF	; 255
    269e:	79 f0       	breq	.+30     	; 0x26be <__fp_splitA+0x2a>
    26a0:	87 95       	ror	r24
    26a2:	08 95       	ret
    26a4:	12 16       	cp	r1, r18
    26a6:	13 06       	cpc	r1, r19
    26a8:	14 06       	cpc	r1, r20
    26aa:	55 1f       	adc	r21, r21
    26ac:	f2 cf       	rjmp	.-28     	; 0x2692 <__fp_split3+0xe>
    26ae:	46 95       	lsr	r20
    26b0:	f1 df       	rcall	.-30     	; 0x2694 <__fp_splitA>
    26b2:	08 c0       	rjmp	.+16     	; 0x26c4 <__fp_splitA+0x30>
    26b4:	16 16       	cp	r1, r22
    26b6:	17 06       	cpc	r1, r23
    26b8:	18 06       	cpc	r1, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	f1 cf       	rjmp	.-30     	; 0x26a0 <__fp_splitA+0xc>
    26be:	86 95       	lsr	r24
    26c0:	71 05       	cpc	r23, r1
    26c2:	61 05       	cpc	r22, r1
    26c4:	08 94       	sec
    26c6:	08 95       	ret

000026c8 <__fp_zero>:
    26c8:	e8 94       	clt

000026ca <__fp_szero>:
    26ca:	bb 27       	eor	r27, r27
    26cc:	66 27       	eor	r22, r22
    26ce:	77 27       	eor	r23, r23
    26d0:	cb 01       	movw	r24, r22
    26d2:	97 f9       	bld	r25, 7
    26d4:	08 95       	ret

000026d6 <__gesf2>:
    26d6:	0e 94 90 12 	call	0x2520	; 0x2520 <__fp_cmp>
    26da:	08 f4       	brcc	.+2      	; 0x26de <__gesf2+0x8>
    26dc:	8f ef       	ldi	r24, 0xFF	; 255
    26de:	08 95       	ret

000026e0 <inverse>:
    26e0:	9b 01       	movw	r18, r22
    26e2:	ac 01       	movw	r20, r24
    26e4:	60 e0       	ldi	r22, 0x00	; 0
    26e6:	70 e0       	ldi	r23, 0x00	; 0
    26e8:	80 e8       	ldi	r24, 0x80	; 128
    26ea:	9f e3       	ldi	r25, 0x3F	; 63
    26ec:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__divsf3>

000026f0 <__mulsf3>:
    26f0:	0e 94 8b 13 	call	0x2716	; 0x2716 <__mulsf3x>
    26f4:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__fp_round>
    26f8:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__fp_pscA>
    26fc:	38 f0       	brcs	.+14     	; 0x270c <__mulsf3+0x1c>
    26fe:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__fp_pscB>
    2702:	20 f0       	brcs	.+8      	; 0x270c <__mulsf3+0x1c>
    2704:	95 23       	and	r25, r21
    2706:	11 f0       	breq	.+4      	; 0x270c <__mulsf3+0x1c>
    2708:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_inf>
    270c:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__fp_nan>
    2710:	11 24       	eor	r1, r1
    2712:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__fp_szero>

00002716 <__mulsf3x>:
    2716:	0e 94 42 13 	call	0x2684	; 0x2684 <__fp_split3>
    271a:	70 f3       	brcs	.-36     	; 0x26f8 <__mulsf3+0x8>

0000271c <__mulsf3_pse>:
    271c:	95 9f       	mul	r25, r21
    271e:	c1 f3       	breq	.-16     	; 0x2710 <__mulsf3+0x20>
    2720:	95 0f       	add	r25, r21
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	55 1f       	adc	r21, r21
    2726:	62 9f       	mul	r22, r18
    2728:	f0 01       	movw	r30, r0
    272a:	72 9f       	mul	r23, r18
    272c:	bb 27       	eor	r27, r27
    272e:	f0 0d       	add	r31, r0
    2730:	b1 1d       	adc	r27, r1
    2732:	63 9f       	mul	r22, r19
    2734:	aa 27       	eor	r26, r26
    2736:	f0 0d       	add	r31, r0
    2738:	b1 1d       	adc	r27, r1
    273a:	aa 1f       	adc	r26, r26
    273c:	64 9f       	mul	r22, r20
    273e:	66 27       	eor	r22, r22
    2740:	b0 0d       	add	r27, r0
    2742:	a1 1d       	adc	r26, r1
    2744:	66 1f       	adc	r22, r22
    2746:	82 9f       	mul	r24, r18
    2748:	22 27       	eor	r18, r18
    274a:	b0 0d       	add	r27, r0
    274c:	a1 1d       	adc	r26, r1
    274e:	62 1f       	adc	r22, r18
    2750:	73 9f       	mul	r23, r19
    2752:	b0 0d       	add	r27, r0
    2754:	a1 1d       	adc	r26, r1
    2756:	62 1f       	adc	r22, r18
    2758:	83 9f       	mul	r24, r19
    275a:	a0 0d       	add	r26, r0
    275c:	61 1d       	adc	r22, r1
    275e:	22 1f       	adc	r18, r18
    2760:	74 9f       	mul	r23, r20
    2762:	33 27       	eor	r19, r19
    2764:	a0 0d       	add	r26, r0
    2766:	61 1d       	adc	r22, r1
    2768:	23 1f       	adc	r18, r19
    276a:	84 9f       	mul	r24, r20
    276c:	60 0d       	add	r22, r0
    276e:	21 1d       	adc	r18, r1
    2770:	82 2f       	mov	r24, r18
    2772:	76 2f       	mov	r23, r22
    2774:	6a 2f       	mov	r22, r26
    2776:	11 24       	eor	r1, r1
    2778:	9f 57       	subi	r25, 0x7F	; 127
    277a:	50 40       	sbci	r21, 0x00	; 0
    277c:	9a f0       	brmi	.+38     	; 0x27a4 <__mulsf3_pse+0x88>
    277e:	f1 f0       	breq	.+60     	; 0x27bc <__mulsf3_pse+0xa0>
    2780:	88 23       	and	r24, r24
    2782:	4a f0       	brmi	.+18     	; 0x2796 <__mulsf3_pse+0x7a>
    2784:	ee 0f       	add	r30, r30
    2786:	ff 1f       	adc	r31, r31
    2788:	bb 1f       	adc	r27, r27
    278a:	66 1f       	adc	r22, r22
    278c:	77 1f       	adc	r23, r23
    278e:	88 1f       	adc	r24, r24
    2790:	91 50       	subi	r25, 0x01	; 1
    2792:	50 40       	sbci	r21, 0x00	; 0
    2794:	a9 f7       	brne	.-22     	; 0x2780 <__mulsf3_pse+0x64>
    2796:	9e 3f       	cpi	r25, 0xFE	; 254
    2798:	51 05       	cpc	r21, r1
    279a:	80 f0       	brcs	.+32     	; 0x27bc <__mulsf3_pse+0xa0>
    279c:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_inf>
    27a0:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__fp_szero>
    27a4:	5f 3f       	cpi	r21, 0xFF	; 255
    27a6:	e4 f3       	brlt	.-8      	; 0x27a0 <__mulsf3_pse+0x84>
    27a8:	98 3e       	cpi	r25, 0xE8	; 232
    27aa:	d4 f3       	brlt	.-12     	; 0x27a0 <__mulsf3_pse+0x84>
    27ac:	86 95       	lsr	r24
    27ae:	77 95       	ror	r23
    27b0:	67 95       	ror	r22
    27b2:	b7 95       	ror	r27
    27b4:	f7 95       	ror	r31
    27b6:	e7 95       	ror	r30
    27b8:	9f 5f       	subi	r25, 0xFF	; 255
    27ba:	c1 f7       	brne	.-16     	; 0x27ac <__mulsf3_pse+0x90>
    27bc:	fe 2b       	or	r31, r30
    27be:	88 0f       	add	r24, r24
    27c0:	91 1d       	adc	r25, r1
    27c2:	96 95       	lsr	r25
    27c4:	87 95       	ror	r24
    27c6:	97 f9       	bld	r25, 7
    27c8:	08 95       	ret

000027ca <sin>:
    27ca:	9f 93       	push	r25
    27cc:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fp_rempio2>
    27d0:	0f 90       	pop	r0
    27d2:	07 fc       	sbrc	r0, 7
    27d4:	ee 5f       	subi	r30, 0xFE	; 254
    27d6:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__fp_sinus>
    27da:	19 f4       	brne	.+6      	; 0x27e2 <sin+0x18>
    27dc:	16 f4       	brtc	.+4      	; 0x27e2 <sin+0x18>
    27de:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__fp_nan>
    27e2:	0c 94 37 14 	jmp	0x286e	; 0x286e <__fp_mpack>

000027e6 <sqrt>:
    27e6:	0e 94 4a 13 	call	0x2694	; 0x2694 <__fp_splitA>
    27ea:	b8 f3       	brcs	.-18     	; 0x27da <sin+0x10>
    27ec:	99 23       	and	r25, r25
    27ee:	c9 f3       	breq	.-14     	; 0x27e2 <sin+0x18>
    27f0:	b6 f3       	brts	.-20     	; 0x27de <sin+0x14>
    27f2:	9f 57       	subi	r25, 0x7F	; 127
    27f4:	55 0b       	sbc	r21, r21
    27f6:	87 ff       	sbrs	r24, 7
    27f8:	0e 94 45 14 	call	0x288a	; 0x288a <__fp_norm2>
    27fc:	00 24       	eor	r0, r0
    27fe:	a0 e6       	ldi	r26, 0x60	; 96
    2800:	40 ea       	ldi	r20, 0xA0	; 160
    2802:	90 01       	movw	r18, r0
    2804:	80 58       	subi	r24, 0x80	; 128
    2806:	56 95       	lsr	r21
    2808:	97 95       	ror	r25
    280a:	28 f4       	brcc	.+10     	; 0x2816 <sqrt+0x30>
    280c:	80 5c       	subi	r24, 0xC0	; 192
    280e:	66 0f       	add	r22, r22
    2810:	77 1f       	adc	r23, r23
    2812:	88 1f       	adc	r24, r24
    2814:	20 f0       	brcs	.+8      	; 0x281e <sqrt+0x38>
    2816:	26 17       	cp	r18, r22
    2818:	37 07       	cpc	r19, r23
    281a:	48 07       	cpc	r20, r24
    281c:	30 f4       	brcc	.+12     	; 0x282a <sqrt+0x44>
    281e:	62 1b       	sub	r22, r18
    2820:	73 0b       	sbc	r23, r19
    2822:	84 0b       	sbc	r24, r20
    2824:	20 29       	or	r18, r0
    2826:	31 29       	or	r19, r1
    2828:	4a 2b       	or	r20, r26
    282a:	a6 95       	lsr	r26
    282c:	17 94       	ror	r1
    282e:	07 94       	ror	r0
    2830:	20 25       	eor	r18, r0
    2832:	31 25       	eor	r19, r1
    2834:	4a 27       	eor	r20, r26
    2836:	58 f7       	brcc	.-42     	; 0x280e <sqrt+0x28>
    2838:	66 0f       	add	r22, r22
    283a:	77 1f       	adc	r23, r23
    283c:	88 1f       	adc	r24, r24
    283e:	20 f0       	brcs	.+8      	; 0x2848 <sqrt+0x62>
    2840:	26 17       	cp	r18, r22
    2842:	37 07       	cpc	r19, r23
    2844:	48 07       	cpc	r20, r24
    2846:	30 f4       	brcc	.+12     	; 0x2854 <sqrt+0x6e>
    2848:	62 0b       	sbc	r22, r18
    284a:	73 0b       	sbc	r23, r19
    284c:	84 0b       	sbc	r24, r20
    284e:	20 0d       	add	r18, r0
    2850:	31 1d       	adc	r19, r1
    2852:	41 1d       	adc	r20, r1
    2854:	a0 95       	com	r26
    2856:	81 f7       	brne	.-32     	; 0x2838 <sqrt+0x52>
    2858:	b9 01       	movw	r22, r18
    285a:	84 2f       	mov	r24, r20
    285c:	91 58       	subi	r25, 0x81	; 129
    285e:	88 0f       	add	r24, r24
    2860:	96 95       	lsr	r25
    2862:	87 95       	ror	r24
    2864:	08 95       	ret

00002866 <square>:
    2866:	9b 01       	movw	r18, r22
    2868:	ac 01       	movw	r20, r24
    286a:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__mulsf3>

0000286e <__fp_mpack>:
    286e:	9f 3f       	cpi	r25, 0xFF	; 255
    2870:	31 f0       	breq	.+12     	; 0x287e <__fp_mpack_finite+0xc>

00002872 <__fp_mpack_finite>:
    2872:	91 50       	subi	r25, 0x01	; 1
    2874:	20 f4       	brcc	.+8      	; 0x287e <__fp_mpack_finite+0xc>
    2876:	87 95       	ror	r24
    2878:	77 95       	ror	r23
    287a:	67 95       	ror	r22
    287c:	b7 95       	ror	r27
    287e:	88 0f       	add	r24, r24
    2880:	91 1d       	adc	r25, r1
    2882:	96 95       	lsr	r25
    2884:	87 95       	ror	r24
    2886:	97 f9       	bld	r25, 7
    2888:	08 95       	ret

0000288a <__fp_norm2>:
    288a:	91 50       	subi	r25, 0x01	; 1
    288c:	50 40       	sbci	r21, 0x00	; 0
    288e:	66 0f       	add	r22, r22
    2890:	77 1f       	adc	r23, r23
    2892:	88 1f       	adc	r24, r24
    2894:	d2 f7       	brpl	.-12     	; 0x288a <__fp_norm2>
    2896:	08 95       	ret

00002898 <__fp_powsodd>:
    2898:	9f 93       	push	r25
    289a:	8f 93       	push	r24
    289c:	7f 93       	push	r23
    289e:	6f 93       	push	r22
    28a0:	ff 93       	push	r31
    28a2:	ef 93       	push	r30
    28a4:	9b 01       	movw	r18, r22
    28a6:	ac 01       	movw	r20, r24
    28a8:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    28ac:	ef 91       	pop	r30
    28ae:	ff 91       	pop	r31
    28b0:	0e 94 bd 12 	call	0x257a	; 0x257a <__fp_powser>
    28b4:	2f 91       	pop	r18
    28b6:	3f 91       	pop	r19
    28b8:	4f 91       	pop	r20
    28ba:	5f 91       	pop	r21
    28bc:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__mulsf3>

000028c0 <__utoa_ncheck>:
    28c0:	bb 27       	eor	r27, r27

000028c2 <__utoa_common>:
    28c2:	fb 01       	movw	r30, r22
    28c4:	55 27       	eor	r21, r21
    28c6:	aa 27       	eor	r26, r26
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	aa 1f       	adc	r26, r26
    28ce:	a4 17       	cp	r26, r20
    28d0:	10 f0       	brcs	.+4      	; 0x28d6 <__utoa_common+0x14>
    28d2:	a4 1b       	sub	r26, r20
    28d4:	83 95       	inc	r24
    28d6:	50 51       	subi	r21, 0x10	; 16
    28d8:	b9 f7       	brne	.-18     	; 0x28c8 <__utoa_common+0x6>
    28da:	a0 5d       	subi	r26, 0xD0	; 208
    28dc:	aa 33       	cpi	r26, 0x3A	; 58
    28de:	08 f0       	brcs	.+2      	; 0x28e2 <__utoa_common+0x20>
    28e0:	a9 5d       	subi	r26, 0xD9	; 217
    28e2:	a1 93       	st	Z+, r26
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	79 f7       	brne	.-34     	; 0x28c6 <__utoa_common+0x4>
    28e8:	b1 11       	cpse	r27, r1
    28ea:	b1 93       	st	Z+, r27
    28ec:	11 92       	st	Z+, r1
    28ee:	cb 01       	movw	r24, r22
    28f0:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <strrev>

000028f4 <strrev>:
    28f4:	dc 01       	movw	r26, r24
    28f6:	fc 01       	movw	r30, r24
    28f8:	67 2f       	mov	r22, r23
    28fa:	71 91       	ld	r23, Z+
    28fc:	77 23       	and	r23, r23
    28fe:	e1 f7       	brne	.-8      	; 0x28f8 <strrev+0x4>
    2900:	32 97       	sbiw	r30, 0x02	; 2
    2902:	04 c0       	rjmp	.+8      	; 0x290c <strrev+0x18>
    2904:	7c 91       	ld	r23, X
    2906:	6d 93       	st	X+, r22
    2908:	70 83       	st	Z, r23
    290a:	62 91       	ld	r22, -Z
    290c:	ae 17       	cp	r26, r30
    290e:	bf 07       	cpc	r27, r31
    2910:	c8 f3       	brcs	.-14     	; 0x2904 <strrev+0x10>
    2912:	08 95       	ret

00002914 <_exit>:
    2914:	f8 94       	cli

00002916 <__stop_program>:
    2916:	ff cf       	rjmp	.-2      	; 0x2916 <__stop_program>
