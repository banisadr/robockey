
motor_controler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00002464  000024f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  0080011c  0080011c  00002514  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000263b  00000000  00000000  000027d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e2  00000000  00000000  00004e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da2  00000000  00000000  000057f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000081c  00000000  00000000  00006594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d3  00000000  00000000  00006db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000333a  00000000  00000000  00007783  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000aabd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__ctors_end>
       4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      10:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      14:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      18:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      1c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      20:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      24:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      28:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__vector_10>
      2c:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__vector_11>
      30:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      34:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      38:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      3c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      40:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      44:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__vector_17>
      48:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_18>
      4c:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__vector_19>
      50:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      54:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      58:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      5c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      60:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      64:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      68:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      6c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      70:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      74:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      78:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      7c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      80:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      84:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      8c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      90:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      94:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      98:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      9c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__trampolines_end>:
      f8:	00 01       	movw	r0, r0
      fa:	00 00       	nop
      fc:	8f 01       	movw	r16, r30
      fe:	12 00       	.word	0x0012	; ????
     100:	02 00       	.word	0x0002	; ????
     102:	00 4c       	sbci	r16, 0xC0	; 192
     104:	01 43       	sbci	r16, 0x31	; 49
     106:	00 03       	mulsu	r16, r16
     108:	00 00       	nop
     10a:	48 01       	movw	r8, r16
     10c:	04 01       	movw	r0, r8
     10e:	03 09       	sbc	r16, r3
     110:	04 34       	cpi	r16, 0x44	; 68
     112:	01 12       	cpse	r0, r17
     114:	02 03       	mulsu	r16, r18
     116:	09 04       	cpc	r0, r9
     118:	2c 01       	movw	r4, r24
     11a:	06 03       	mulsu	r16, r22
     11c:	03 09       	sbc	r16, r3
     11e:	04 22       	and	r0, r20
     120:	01 08       	sbc	r0, r1

00000122 <string3>:
     122:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000012c <string2>:
     12c:	06 03 4d 00 32 00 00 00                             ..M.2...

00000134 <string1>:
     134:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     144:	65 00 00 00                                         e...

00000148 <string0>:
     148:	04 03 09 04                                         ....

0000014c <config1_descriptor>:
     14c:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     15c:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     16c:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     17c:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     18c:	40 00 00                                            @..

0000018f <device_descriptor>:
     18f:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     19f:	03 01                                               ..

000001a1 <endpoint_config_table>:
     1a1:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001ac <__ctors_end>:
     1ac:	11 24       	eor	r1, r1
     1ae:	1f be       	out	0x3f, r1	; 63
     1b0:	cf ef       	ldi	r28, 0xFF	; 255
     1b2:	da e0       	ldi	r29, 0x0A	; 10
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	cd bf       	out	0x3d, r28	; 61

000001b8 <__do_copy_data>:
     1b8:	11 e0       	ldi	r17, 0x01	; 1
     1ba:	a0 e0       	ldi	r26, 0x00	; 0
     1bc:	b1 e0       	ldi	r27, 0x01	; 1
     1be:	e4 e6       	ldi	r30, 0x64	; 100
     1c0:	f4 e2       	ldi	r31, 0x24	; 36
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__do_copy_data+0x10>
     1c4:	05 90       	lpm	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	ac 31       	cpi	r26, 0x1C	; 28
     1ca:	b1 07       	cpc	r27, r17
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <__do_copy_data+0xc>

000001ce <__do_clear_bss>:
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	ac e1       	ldi	r26, 0x1C	; 28
     1d2:	b1 e0       	ldi	r27, 0x01	; 1
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <.do_clear_bss_start>

000001d6 <.do_clear_bss_loop>:
     1d6:	1d 92       	st	X+, r1

000001d8 <.do_clear_bss_start>:
     1d8:	a1 38       	cpi	r26, 0x81	; 129
     1da:	b2 07       	cpc	r27, r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <.do_clear_bss_loop>
     1de:	0e 94 8b 0a 	call	0x1516	; 0x1516 <main>
     1e2:	0c 94 30 12 	jmp	0x2460	; 0x2460 <_exit>

000001e6 <__bad_interrupt>:
     1e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ea <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     1ea:	82 30       	cpi	r24, 0x02	; 2
     1ec:	91 05       	cpc	r25, r1
     1ee:	f9 f0       	breq	.+62     	; 0x22e <distIndex+0x44>
     1f0:	2c f4       	brge	.+10     	; 0x1fc <distIndex+0x12>
     1f2:	00 97       	sbiw	r24, 0x00	; 0
     1f4:	51 f0       	breq	.+20     	; 0x20a <distIndex+0x20>
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	89 f0       	breq	.+34     	; 0x21c <distIndex+0x32>
     1fa:	42 c0       	rjmp	.+132    	; 0x280 <distIndex+0x96>
     1fc:	84 30       	cpi	r24, 0x04	; 4
     1fe:	91 05       	cpc	r25, r1
     200:	51 f1       	breq	.+84     	; 0x256 <distIndex+0x6c>
     202:	f4 f0       	brlt	.+60     	; 0x240 <distIndex+0x56>
     204:	05 97       	sbiw	r24, 0x05	; 5
     206:	91 f1       	breq	.+100    	; 0x26c <distIndex+0x82>
     208:	3b c0       	rjmp	.+118    	; 0x280 <distIndex+0x96>
	{
		case 0 : 
			pointsUsed[0] = 0;
     20a:	ec e1       	ldi	r30, 0x1C	; 28
     20c:	f1 e0       	ldi	r31, 0x01	; 1
     20e:	11 82       	std	Z+1, r1	; 0x01
     210:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	93 83       	std	Z+3, r25	; 0x03
     218:	82 83       	std	Z+2, r24	; 0x02
			break;
     21a:	32 c0       	rjmp	.+100    	; 0x280 <distIndex+0x96>
			
		case 1 : 
			pointsUsed[0] = 0;
     21c:	ec e1       	ldi	r30, 0x1C	; 28
     21e:	f1 e0       	ldi	r31, 0x01	; 1
     220:	11 82       	std	Z+1, r1	; 0x01
     222:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	93 83       	std	Z+3, r25	; 0x03
     22a:	82 83       	std	Z+2, r24	; 0x02
			break;
     22c:	29 c0       	rjmp	.+82     	; 0x280 <distIndex+0x96>
			
		case 2 : 
			pointsUsed[0] = 0;
     22e:	ec e1       	ldi	r30, 0x1C	; 28
     230:	f1 e0       	ldi	r31, 0x01	; 1
     232:	11 82       	std	Z+1, r1	; 0x01
     234:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     236:	83 e0       	ldi	r24, 0x03	; 3
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	93 83       	std	Z+3, r25	; 0x03
     23c:	82 83       	std	Z+2, r24	; 0x02
			break;
     23e:	20 c0       	rjmp	.+64     	; 0x280 <distIndex+0x96>
			
		case 3 : 
			pointsUsed[0] = 1;
     240:	ec e1       	ldi	r30, 0x1C	; 28
     242:	f1 e0       	ldi	r31, 0x01	; 1
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	91 83       	std	Z+1, r25	; 0x01
     24a:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	93 83       	std	Z+3, r25	; 0x03
     252:	82 83       	std	Z+2, r24	; 0x02
			break;
     254:	15 c0       	rjmp	.+42     	; 0x280 <distIndex+0x96>
			
		case 4 : 
			pointsUsed[0] = 1;
     256:	ec e1       	ldi	r30, 0x1C	; 28
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	91 83       	std	Z+1, r25	; 0x01
     260:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     262:	83 e0       	ldi	r24, 0x03	; 3
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	93 83       	std	Z+3, r25	; 0x03
     268:	82 83       	std	Z+2, r24	; 0x02
			break;
     26a:	0a c0       	rjmp	.+20     	; 0x280 <distIndex+0x96>
			
		case 5 :
			pointsUsed[0] = 2;
     26c:	ec e1       	ldi	r30, 0x1C	; 28
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	91 83       	std	Z+1, r25	; 0x01
     276:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     278:	83 e0       	ldi	r24, 0x03	; 3
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	93 83       	std	Z+3, r25	; 0x03
     27e:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     280:	8c e1       	ldi	r24, 0x1C	; 28
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	08 95       	ret

00000286 <orientationCalculationFour>:


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
     286:	2f 92       	push	r2
     288:	3f 92       	push	r3
     28a:	4f 92       	push	r4
     28c:	5f 92       	push	r5
     28e:	6f 92       	push	r6
     290:	7f 92       	push	r7
     292:	8f 92       	push	r8
     294:	9f 92       	push	r9
     296:	af 92       	push	r10
     298:	bf 92       	push	r11
     29a:	cf 92       	push	r12
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <orientationCalculationFour+0x26>
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <orientationCalculationFour+0x28>
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	5c 01       	movw	r10, r24
     2b4:	4a 01       	movw	r8, r20
     2b6:	3a 83       	std	Y+2, r19	; 0x02
     2b8:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     2ba:	06 2f       	mov	r16, r22
     2bc:	17 2f       	mov	r17, r23
     2be:	f8 01       	movw	r30, r16
     2c0:	41 90       	ld	r4, Z+
     2c2:	51 90       	ld	r5, Z+
     2c4:	61 90       	ld	r6, Z+
     2c6:	71 90       	ld	r7, Z+
     2c8:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     2ca:	1c 82       	std	Y+4, r1	; 0x04
     2cc:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     2ce:	21 2c       	mov	r2, r1
     2d0:	31 2c       	mov	r3, r1
     2d2:	12 c0       	rjmp	.+36     	; 0x2f8 <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     2d4:	f8 01       	movw	r30, r16
     2d6:	c1 90       	ld	r12, Z+
     2d8:	d1 90       	ld	r13, Z+
     2da:	e1 90       	ld	r14, Z+
     2dc:	f1 90       	ld	r15, Z+
     2de:	8f 01       	movw	r16, r30
     2e0:	a7 01       	movw	r20, r14
     2e2:	96 01       	movw	r18, r12
     2e4:	c3 01       	movw	r24, r6
     2e6:	b2 01       	movw	r22, r4
     2e8:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gesf2>
     2ec:	18 16       	cp	r1, r24
     2ee:	24 f4       	brge	.+8      	; 0x2f8 <orientationCalculationFour+0x72>
     2f0:	26 01       	movw	r4, r12
     2f2:	37 01       	movw	r6, r14
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     2f4:	2b 80       	ldd	r2, Y+3	; 0x03
     2f6:	3c 80       	ldd	r3, Y+4	; 0x04
     2f8:	8b 81       	ldd	r24, Y+3	; 0x03
     2fa:	9c 81       	ldd	r25, Y+4	; 0x04
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	9c 83       	std	Y+4, r25	; 0x04
     300:	8b 83       	std	Y+3, r24	; 0x03
     302:	06 97       	sbiw	r24, 0x06	; 6
     304:	39 f7       	brne	.-50     	; 0x2d4 <orientationCalculationFour+0x4e>
		}
	}
	
	//Find points used by shortest length	
	int* pointsShortRef;
	pointsShortRef = distIndex(indexMin);	
     306:	82 2d       	mov	r24, r2
     308:	93 2d       	mov	r25, r3
     30a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <distIndex>
	int pointsShort[2] = {pointsShortRef[0], pointsShortRef[1]};	
     30e:	fc 01       	movw	r30, r24
     310:	20 81       	ld	r18, Z
     312:	31 81       	ldd	r19, Z+1	; 0x01
     314:	42 81       	ldd	r20, Z+2	; 0x02
     316:	53 81       	ldd	r21, Z+3	; 0x03
	if (pointsShort[0] == pointsLong[0]){
     318:	f5 01       	movw	r30, r10
     31a:	80 81       	ld	r24, Z
     31c:	91 81       	ldd	r25, Z+1	; 0x01
     31e:	28 17       	cp	r18, r24
     320:	39 07       	cpc	r19, r25
     322:	59 f4       	brne	.+22     	; 0x33a <orientationCalculationFour+0xb4>
		*top = pointsLong[0];
     324:	f4 01       	movw	r30, r8
     326:	31 83       	std	Z+1, r19	; 0x01
     328:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     32a:	f5 01       	movw	r30, r10
     32c:	82 81       	ldd	r24, Z+2	; 0x02
     32e:	93 81       	ldd	r25, Z+3	; 0x03
     330:	e9 81       	ldd	r30, Y+1	; 0x01
     332:	fa 81       	ldd	r31, Y+2	; 0x02
     334:	91 83       	std	Z+1, r25	; 0x01
     336:	80 83       	st	Z, r24
     338:	3c c0       	rjmp	.+120    	; 0x3b2 <orientationCalculationFour+0x12c>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     33a:	f5 01       	movw	r30, r10
     33c:	62 81       	ldd	r22, Z+2	; 0x02
     33e:	73 81       	ldd	r23, Z+3	; 0x03
     340:	26 17       	cp	r18, r22
     342:	37 07       	cpc	r19, r23
     344:	59 f4       	brne	.+22     	; 0x35c <orientationCalculationFour+0xd6>
			*top = pointsLong[1];
     346:	f4 01       	movw	r30, r8
     348:	31 83       	std	Z+1, r19	; 0x01
     34a:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     34c:	f5 01       	movw	r30, r10
     34e:	80 81       	ld	r24, Z
     350:	91 81       	ldd	r25, Z+1	; 0x01
     352:	e9 81       	ldd	r30, Y+1	; 0x01
     354:	fa 81       	ldd	r31, Y+2	; 0x02
     356:	91 83       	std	Z+1, r25	; 0x01
     358:	80 83       	st	Z, r24
     35a:	2b c0       	rjmp	.+86     	; 0x3b2 <orientationCalculationFour+0x12c>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     35c:	48 17       	cp	r20, r24
     35e:	59 07       	cpc	r21, r25
     360:	59 f4       	brne	.+22     	; 0x378 <orientationCalculationFour+0xf2>
				*top = pointsLong[0];
     362:	f4 01       	movw	r30, r8
     364:	51 83       	std	Z+1, r21	; 0x01
     366:	40 83       	st	Z, r20
				*bottom = pointsLong[1];
     368:	f5 01       	movw	r30, r10
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	e9 81       	ldd	r30, Y+1	; 0x01
     370:	fa 81       	ldd	r31, Y+2	; 0x02
     372:	91 83       	std	Z+1, r25	; 0x01
     374:	80 83       	st	Z, r24
     376:	1d c0       	rjmp	.+58     	; 0x3b2 <orientationCalculationFour+0x12c>
			} else {
				if (pointsShort[1] == pointsLong[1])
     378:	46 17       	cp	r20, r22
     37a:	57 07       	cpc	r21, r23
     37c:	59 f4       	brne	.+22     	; 0x394 <orientationCalculationFour+0x10e>
				{
					*top = pointsLong[1];
     37e:	f4 01       	movw	r30, r8
     380:	51 83       	std	Z+1, r21	; 0x01
     382:	40 83       	st	Z, r20
					*bottom = pointsLong[0];
     384:	f5 01       	movw	r30, r10
     386:	80 81       	ld	r24, Z
     388:	91 81       	ldd	r25, Z+1	; 0x01
     38a:	e9 81       	ldd	r30, Y+1	; 0x01
     38c:	fa 81       	ldd	r31, Y+2	; 0x02
     38e:	91 83       	std	Z+1, r25	; 0x01
     390:	80 83       	st	Z, r24
     392:	0f c0       	rjmp	.+30     	; 0x3b2 <orientationCalculationFour+0x12c>
				} else {
						m_green(OFF);
     394:	6a 9a       	sbi	0x0d, 2	; 13
     396:	72 9a       	sbi	0x0e, 2	; 14
						*top = pointsLong[1];
     398:	f5 01       	movw	r30, r10
     39a:	82 81       	ldd	r24, Z+2	; 0x02
     39c:	93 81       	ldd	r25, Z+3	; 0x03
     39e:	f4 01       	movw	r30, r8
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     3a4:	f5 01       	movw	r30, r10
     3a6:	80 81       	ld	r24, Z
     3a8:	91 81       	ldd	r25, Z+1	; 0x01
     3aa:	e9 81       	ldd	r30, Y+1	; 0x01
     3ac:	fa 81       	ldd	r31, Y+2	; 0x02
     3ae:	91 83       	std	Z+1, r25	; 0x01
     3b0:	80 83       	st	Z, r24
				}
			}
		}
	}
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	df 90       	pop	r13
     3c8:	cf 90       	pop	r12
     3ca:	bf 90       	pop	r11
     3cc:	af 90       	pop	r10
     3ce:	9f 90       	pop	r9
     3d0:	8f 90       	pop	r8
     3d2:	7f 90       	pop	r7
     3d4:	6f 90       	pop	r6
     3d6:	5f 90       	pop	r5
     3d8:	4f 90       	pop	r4
     3da:	3f 90       	pop	r3
     3dc:	2f 90       	pop	r2
     3de:	08 95       	ret

000003e0 <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     3e0:	2f 92       	push	r2
     3e2:	3f 92       	push	r3
     3e4:	4f 92       	push	r4
     3e6:	5f 92       	push	r5
     3e8:	6f 92       	push	r6
     3ea:	7f 92       	push	r7
     3ec:	8f 92       	push	r8
     3ee:	9f 92       	push	r9
     3f0:	af 92       	push	r10
     3f2:	bf 92       	push	r11
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	c2 54       	subi	r28, 0x42	; 66
     40a:	d1 09       	sbc	r29, r1
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     418:	fc 01       	movw	r30, r24
     41a:	04 80       	ldd	r0, Z+4	; 0x04
     41c:	f5 81       	ldd	r31, Z+5	; 0x05
     41e:	e0 2d       	mov	r30, r0
     420:	fa a3       	std	Y+34, r31	; 0x22
     422:	e9 a3       	std	Y+33, r30	; 0x21
     424:	fc 01       	movw	r30, r24
     426:	00 81       	ld	r16, Z
     428:	11 81       	ldd	r17, Z+1	; 0x01
     42a:	69 a1       	ldd	r22, Y+33	; 0x21
     42c:	7a a1       	ldd	r23, Y+34	; 0x22
     42e:	60 1b       	sub	r22, r16
     430:	71 0b       	sbc	r23, r17
     432:	07 2e       	mov	r0, r23
     434:	00 0c       	add	r0, r0
     436:	88 0b       	sbc	r24, r24
     438:	99 0b       	sbc	r25, r25
     43a:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     43e:	6b 01       	movw	r12, r22
     440:	7c 01       	movw	r14, r24
     442:	f2 01       	movw	r30, r4
     444:	06 80       	ldd	r0, Z+6	; 0x06
     446:	f7 81       	ldd	r31, Z+7	; 0x07
     448:	e0 2d       	mov	r30, r0
     44a:	fe a3       	std	Y+38, r31	; 0x26
     44c:	ed a3       	std	Y+37, r30	; 0x25
     44e:	f2 01       	movw	r30, r4
     450:	22 80       	ldd	r2, Z+2	; 0x02
     452:	33 80       	ldd	r3, Z+3	; 0x03
     454:	ad a0       	ldd	r10, Y+37	; 0x25
     456:	be a0       	ldd	r11, Y+38	; 0x26
     458:	a2 18       	sub	r10, r2
     45a:	b3 08       	sbc	r11, r3
     45c:	9b 01       	movw	r18, r22
     45e:	ac 01       	movw	r20, r24
     460:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     464:	69 a7       	std	Y+41, r22	; 0x29
     466:	7a a7       	std	Y+42, r23	; 0x2a
     468:	8b a7       	std	Y+43, r24	; 0x2b
     46a:	9c a7       	std	Y+44, r25	; 0x2c
     46c:	aa 9c       	mul	r10, r10
     46e:	40 01       	movw	r8, r0
     470:	ab 9c       	mul	r10, r11
     472:	90 0c       	add	r9, r0
     474:	90 0c       	add	r9, r0
     476:	11 24       	eor	r1, r1
     478:	09 2c       	mov	r0, r9
     47a:	00 0c       	add	r0, r0
     47c:	aa 08       	sbc	r10, r10
     47e:	bb 08       	sbc	r11, r11
     480:	a7 01       	movw	r20, r14
     482:	96 01       	movw	r18, r12
     484:	c7 01       	movw	r24, r14
     486:	b6 01       	movw	r22, r12
     488:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     48c:	6b 01       	movw	r12, r22
     48e:	7c 01       	movw	r14, r24
     490:	c5 01       	movw	r24, r10
     492:	b4 01       	movw	r22, r8
     494:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     498:	9b 01       	movw	r18, r22
     49a:	ac 01       	movw	r20, r24
     49c:	c7 01       	movw	r24, r14
     49e:	b6 01       	movw	r22, r12
     4a0:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__addsf3>
     4a4:	0e 94 c3 11 	call	0x2386	; 0x2386 <sqrt>
     4a8:	6b af       	std	Y+59, r22	; 0x3b
     4aa:	7c af       	std	Y+60, r23	; 0x3c
     4ac:	8d af       	std	Y+61, r24	; 0x3d
     4ae:	9e af       	std	Y+62, r25	; 0x3e
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     4b0:	f2 01       	movw	r30, r4
     4b2:	00 84       	ldd	r0, Z+8	; 0x08
     4b4:	f1 85       	ldd	r31, Z+9	; 0x09
     4b6:	e0 2d       	mov	r30, r0
     4b8:	fa a7       	std	Y+42, r31	; 0x2a
     4ba:	e9 a7       	std	Y+41, r30	; 0x29
     4bc:	bf 01       	movw	r22, r30
     4be:	60 1b       	sub	r22, r16
     4c0:	71 0b       	sbc	r23, r17
     4c2:	07 2e       	mov	r0, r23
     4c4:	00 0c       	add	r0, r0
     4c6:	88 0b       	sbc	r24, r24
     4c8:	99 0b       	sbc	r25, r25
     4ca:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     4ce:	6b 01       	movw	r12, r22
     4d0:	7c 01       	movw	r14, r24
     4d2:	f2 01       	movw	r30, r4
     4d4:	62 84       	ldd	r6, Z+10	; 0x0a
     4d6:	73 84       	ldd	r7, Z+11	; 0x0b
     4d8:	53 01       	movw	r10, r6
     4da:	a2 18       	sub	r10, r2
     4dc:	b3 08       	sbc	r11, r3
     4de:	9b 01       	movw	r18, r22
     4e0:	ac 01       	movw	r20, r24
     4e2:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     4e6:	6d a7       	std	Y+45, r22	; 0x2d
     4e8:	7e a7       	std	Y+46, r23	; 0x2e
     4ea:	8f a7       	std	Y+47, r24	; 0x2f
     4ec:	98 ab       	std	Y+48, r25	; 0x30
     4ee:	aa 9c       	mul	r10, r10
     4f0:	40 01       	movw	r8, r0
     4f2:	ab 9c       	mul	r10, r11
     4f4:	90 0c       	add	r9, r0
     4f6:	90 0c       	add	r9, r0
     4f8:	11 24       	eor	r1, r1
     4fa:	09 2c       	mov	r0, r9
     4fc:	00 0c       	add	r0, r0
     4fe:	aa 08       	sbc	r10, r10
     500:	bb 08       	sbc	r11, r11
     502:	a7 01       	movw	r20, r14
     504:	96 01       	movw	r18, r12
     506:	c7 01       	movw	r24, r14
     508:	b6 01       	movw	r22, r12
     50a:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     50e:	6b 01       	movw	r12, r22
     510:	7c 01       	movw	r14, r24
     512:	c5 01       	movw	r24, r10
     514:	b4 01       	movw	r22, r8
     516:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     51a:	9b 01       	movw	r18, r22
     51c:	ac 01       	movw	r20, r24
     51e:	c7 01       	movw	r24, r14
     520:	b6 01       	movw	r22, r12
     522:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__addsf3>
     526:	0e 94 c3 11 	call	0x2386	; 0x2386 <sqrt>
     52a:	23 96       	adiw	r28, 0x03	; 3
     52c:	6c af       	std	Y+60, r22	; 0x3c
     52e:	7d af       	std	Y+61, r23	; 0x3d
     530:	8e af       	std	Y+62, r24	; 0x3e
     532:	9f af       	std	Y+63, r25	; 0x3f
     534:	23 97       	sbiw	r28, 0x03	; 3
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     536:	f2 01       	movw	r30, r4
     538:	04 84       	ldd	r0, Z+12	; 0x0c
     53a:	f5 85       	ldd	r31, Z+13	; 0x0d
     53c:	e0 2d       	mov	r30, r0
     53e:	fe a7       	std	Y+46, r31	; 0x2e
     540:	ed a7       	std	Y+45, r30	; 0x2d
     542:	bf 01       	movw	r22, r30
     544:	60 1b       	sub	r22, r16
     546:	71 0b       	sbc	r23, r17
     548:	07 2e       	mov	r0, r23
     54a:	00 0c       	add	r0, r0
     54c:	88 0b       	sbc	r24, r24
     54e:	99 0b       	sbc	r25, r25
     550:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     554:	4b 01       	movw	r8, r22
     556:	5c 01       	movw	r10, r24
     558:	f2 01       	movw	r30, r4
     55a:	06 84       	ldd	r0, Z+14	; 0x0e
     55c:	f7 85       	ldd	r31, Z+15	; 0x0f
     55e:	e0 2d       	mov	r30, r0
     560:	fa ab       	std	Y+50, r31	; 0x32
     562:	e9 ab       	std	Y+49, r30	; 0x31
     564:	8f 01       	movw	r16, r30
     566:	02 19       	sub	r16, r2
     568:	13 09       	sbc	r17, r3
     56a:	9b 01       	movw	r18, r22
     56c:	ac 01       	movw	r20, r24
     56e:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     572:	6b ab       	std	Y+51, r22	; 0x33
     574:	7c ab       	std	Y+52, r23	; 0x34
     576:	8d ab       	std	Y+53, r24	; 0x35
     578:	9e ab       	std	Y+54, r25	; 0x36
     57a:	00 9f       	mul	r16, r16
     57c:	60 01       	movw	r12, r0
     57e:	01 9f       	mul	r16, r17
     580:	d0 0c       	add	r13, r0
     582:	d0 0c       	add	r13, r0
     584:	11 24       	eor	r1, r1
     586:	0d 2c       	mov	r0, r13
     588:	00 0c       	add	r0, r0
     58a:	ee 08       	sbc	r14, r14
     58c:	ff 08       	sbc	r15, r15
     58e:	a5 01       	movw	r20, r10
     590:	94 01       	movw	r18, r8
     592:	c5 01       	movw	r24, r10
     594:	b4 01       	movw	r22, r8
     596:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     59a:	4b 01       	movw	r8, r22
     59c:	5c 01       	movw	r10, r24
     59e:	c7 01       	movw	r24, r14
     5a0:	b6 01       	movw	r22, r12
     5a2:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     5a6:	9b 01       	movw	r18, r22
     5a8:	ac 01       	movw	r20, r24
     5aa:	c5 01       	movw	r24, r10
     5ac:	b4 01       	movw	r22, r8
     5ae:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__addsf3>
     5b2:	0e 94 c3 11 	call	0x2386	; 0x2386 <sqrt>
     5b6:	6b ab       	std	Y+51, r22	; 0x33
     5b8:	7c ab       	std	Y+52, r23	; 0x34
     5ba:	8d ab       	std	Y+53, r24	; 0x35
     5bc:	9e ab       	std	Y+54, r25	; 0x36
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     5be:	69 a5       	ldd	r22, Y+41	; 0x29
     5c0:	7a a5       	ldd	r23, Y+42	; 0x2a
     5c2:	29 a1       	ldd	r18, Y+33	; 0x21
     5c4:	3a a1       	ldd	r19, Y+34	; 0x22
     5c6:	62 1b       	sub	r22, r18
     5c8:	73 0b       	sbc	r23, r19
     5ca:	07 2e       	mov	r0, r23
     5cc:	00 0c       	add	r0, r0
     5ce:	88 0b       	sbc	r24, r24
     5d0:	99 0b       	sbc	r25, r25
     5d2:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     5d6:	4b 01       	movw	r8, r22
     5d8:	5c 01       	movw	r10, r24
     5da:	83 01       	movw	r16, r6
     5dc:	4d a1       	ldd	r20, Y+37	; 0x25
     5de:	5e a1       	ldd	r21, Y+38	; 0x26
     5e0:	04 1b       	sub	r16, r20
     5e2:	15 0b       	sbc	r17, r21
     5e4:	9b 01       	movw	r18, r22
     5e6:	ac 01       	movw	r20, r24
     5e8:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     5ec:	6f ab       	std	Y+55, r22	; 0x37
     5ee:	78 af       	std	Y+56, r23	; 0x38
     5f0:	89 af       	std	Y+57, r24	; 0x39
     5f2:	9a af       	std	Y+58, r25	; 0x3a
     5f4:	00 9f       	mul	r16, r16
     5f6:	60 01       	movw	r12, r0
     5f8:	01 9f       	mul	r16, r17
     5fa:	d0 0c       	add	r13, r0
     5fc:	d0 0c       	add	r13, r0
     5fe:	11 24       	eor	r1, r1
     600:	0d 2c       	mov	r0, r13
     602:	00 0c       	add	r0, r0
     604:	ee 08       	sbc	r14, r14
     606:	ff 08       	sbc	r15, r15
     608:	a5 01       	movw	r20, r10
     60a:	94 01       	movw	r18, r8
     60c:	c5 01       	movw	r24, r10
     60e:	b4 01       	movw	r22, r8
     610:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     614:	4b 01       	movw	r8, r22
     616:	5c 01       	movw	r10, r24
     618:	c7 01       	movw	r24, r14
     61a:	b6 01       	movw	r22, r12
     61c:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     620:	9b 01       	movw	r18, r22
     622:	ac 01       	movw	r20, r24
     624:	c5 01       	movw	r24, r10
     626:	b4 01       	movw	r22, r8
     628:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__addsf3>
     62c:	0e 94 c3 11 	call	0x2386	; 0x2386 <sqrt>
     630:	6f ab       	std	Y+55, r22	; 0x37
     632:	78 af       	std	Y+56, r23	; 0x38
     634:	89 af       	std	Y+57, r24	; 0x39
     636:	9a af       	std	Y+58, r25	; 0x3a
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     638:	6d a5       	ldd	r22, Y+45	; 0x2d
     63a:	7e a5       	ldd	r23, Y+46	; 0x2e
     63c:	89 a1       	ldd	r24, Y+33	; 0x21
     63e:	9a a1       	ldd	r25, Y+34	; 0x22
     640:	68 1b       	sub	r22, r24
     642:	79 0b       	sbc	r23, r25
     644:	07 2e       	mov	r0, r23
     646:	00 0c       	add	r0, r0
     648:	88 0b       	sbc	r24, r24
     64a:	99 0b       	sbc	r25, r25
     64c:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     650:	4b 01       	movw	r8, r22
     652:	5c 01       	movw	r10, r24
     654:	09 a9       	ldd	r16, Y+49	; 0x31
     656:	1a a9       	ldd	r17, Y+50	; 0x32
     658:	ed a1       	ldd	r30, Y+37	; 0x25
     65a:	fe a1       	ldd	r31, Y+38	; 0x26
     65c:	0e 1b       	sub	r16, r30
     65e:	1f 0b       	sbc	r17, r31
     660:	9b 01       	movw	r18, r22
     662:	ac 01       	movw	r20, r24
     664:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     668:	69 a3       	std	Y+33, r22	; 0x21
     66a:	7a a3       	std	Y+34, r23	; 0x22
     66c:	8b a3       	std	Y+35, r24	; 0x23
     66e:	9c a3       	std	Y+36, r25	; 0x24
     670:	00 9f       	mul	r16, r16
     672:	60 01       	movw	r12, r0
     674:	01 9f       	mul	r16, r17
     676:	d0 0c       	add	r13, r0
     678:	d0 0c       	add	r13, r0
     67a:	11 24       	eor	r1, r1
     67c:	0d 2c       	mov	r0, r13
     67e:	00 0c       	add	r0, r0
     680:	ee 08       	sbc	r14, r14
     682:	ff 08       	sbc	r15, r15
     684:	a5 01       	movw	r20, r10
     686:	94 01       	movw	r18, r8
     688:	c5 01       	movw	r24, r10
     68a:	b4 01       	movw	r22, r8
     68c:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     690:	4b 01       	movw	r8, r22
     692:	5c 01       	movw	r10, r24
     694:	c7 01       	movw	r24, r14
     696:	b6 01       	movw	r22, r12
     698:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     69c:	9b 01       	movw	r18, r22
     69e:	ac 01       	movw	r20, r24
     6a0:	c5 01       	movw	r24, r10
     6a2:	b4 01       	movw	r22, r8
     6a4:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__addsf3>
     6a8:	0e 94 c3 11 	call	0x2386	; 0x2386 <sqrt>
     6ac:	4b 01       	movw	r8, r22
     6ae:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     6b0:	6d a5       	ldd	r22, Y+45	; 0x2d
     6b2:	7e a5       	ldd	r23, Y+46	; 0x2e
     6b4:	29 a5       	ldd	r18, Y+41	; 0x29
     6b6:	3a a5       	ldd	r19, Y+42	; 0x2a
     6b8:	62 1b       	sub	r22, r18
     6ba:	73 0b       	sbc	r23, r19
     6bc:	07 2e       	mov	r0, r23
     6be:	00 0c       	add	r0, r0
     6c0:	88 0b       	sbc	r24, r24
     6c2:	99 0b       	sbc	r25, r25
     6c4:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     6c8:	69 a3       	std	Y+33, r22	; 0x21
     6ca:	7a a3       	std	Y+34, r23	; 0x22
     6cc:	8b a3       	std	Y+35, r24	; 0x23
     6ce:	9c a3       	std	Y+36, r25	; 0x24
     6d0:	09 a9       	ldd	r16, Y+49	; 0x31
     6d2:	1a a9       	ldd	r17, Y+50	; 0x32
     6d4:	06 19       	sub	r16, r6
     6d6:	17 09       	sbc	r17, r7
     6d8:	9b 01       	movw	r18, r22
     6da:	ac 01       	movw	r20, r24
     6dc:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     6e0:	6d a3       	std	Y+37, r22	; 0x25
     6e2:	7e a3       	std	Y+38, r23	; 0x26
     6e4:	8f a3       	std	Y+39, r24	; 0x27
     6e6:	98 a7       	std	Y+40, r25	; 0x28
     6e8:	00 9f       	mul	r16, r16
     6ea:	60 01       	movw	r12, r0
     6ec:	01 9f       	mul	r16, r17
     6ee:	d0 0c       	add	r13, r0
     6f0:	d0 0c       	add	r13, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	0d 2c       	mov	r0, r13
     6f6:	00 0c       	add	r0, r0
     6f8:	ee 08       	sbc	r14, r14
     6fa:	ff 08       	sbc	r15, r15
     6fc:	29 a1       	ldd	r18, Y+33	; 0x21
     6fe:	3a a1       	ldd	r19, Y+34	; 0x22
     700:	4b a1       	ldd	r20, Y+35	; 0x23
     702:	5c a1       	ldd	r21, Y+36	; 0x24
     704:	ca 01       	movw	r24, r20
     706:	b9 01       	movw	r22, r18
     708:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     70c:	69 a3       	std	Y+33, r22	; 0x21
     70e:	7a a3       	std	Y+34, r23	; 0x22
     710:	8b a3       	std	Y+35, r24	; 0x23
     712:	9c a3       	std	Y+36, r25	; 0x24
     714:	c7 01       	movw	r24, r14
     716:	b6 01       	movw	r22, r12
     718:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     71c:	9b 01       	movw	r18, r22
     71e:	ac 01       	movw	r20, r24
     720:	69 a1       	ldd	r22, Y+33	; 0x21
     722:	7a a1       	ldd	r23, Y+34	; 0x22
     724:	8b a1       	ldd	r24, Y+35	; 0x23
     726:	9c a1       	ldd	r25, Y+36	; 0x24
     728:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__addsf3>
     72c:	0e 94 c3 11 	call	0x2386	; 0x2386 <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     730:	2b ad       	ldd	r18, Y+59	; 0x3b
     732:	3c ad       	ldd	r19, Y+60	; 0x3c
     734:	4d ad       	ldd	r20, Y+61	; 0x3d
     736:	5e ad       	ldd	r21, Y+62	; 0x3e
     738:	29 83       	std	Y+1, r18	; 0x01
     73a:	3a 83       	std	Y+2, r19	; 0x02
     73c:	4b 83       	std	Y+3, r20	; 0x03
     73e:	5c 83       	std	Y+4, r21	; 0x04
     740:	23 96       	adiw	r28, 0x03	; 3
     742:	2c ad       	ldd	r18, Y+60	; 0x3c
     744:	3d ad       	ldd	r19, Y+61	; 0x3d
     746:	4e ad       	ldd	r20, Y+62	; 0x3e
     748:	5f ad       	ldd	r21, Y+63	; 0x3f
     74a:	23 97       	sbiw	r28, 0x03	; 3
     74c:	2d 83       	std	Y+5, r18	; 0x05
     74e:	3e 83       	std	Y+6, r19	; 0x06
     750:	4f 83       	std	Y+7, r20	; 0x07
     752:	58 87       	std	Y+8, r21	; 0x08
     754:	2b a9       	ldd	r18, Y+51	; 0x33
     756:	3c a9       	ldd	r19, Y+52	; 0x34
     758:	4d a9       	ldd	r20, Y+53	; 0x35
     75a:	5e a9       	ldd	r21, Y+54	; 0x36
     75c:	29 87       	std	Y+9, r18	; 0x09
     75e:	3a 87       	std	Y+10, r19	; 0x0a
     760:	4b 87       	std	Y+11, r20	; 0x0b
     762:	5c 87       	std	Y+12, r21	; 0x0c
     764:	2f a9       	ldd	r18, Y+55	; 0x37
     766:	38 ad       	ldd	r19, Y+56	; 0x38
     768:	49 ad       	ldd	r20, Y+57	; 0x39
     76a:	5a ad       	ldd	r21, Y+58	; 0x3a
     76c:	2d 87       	std	Y+13, r18	; 0x0d
     76e:	3e 87       	std	Y+14, r19	; 0x0e
     770:	4f 87       	std	Y+15, r20	; 0x0f
     772:	58 8b       	std	Y+16, r21	; 0x10
     774:	89 8a       	std	Y+17, r8	; 0x11
     776:	9a 8a       	std	Y+18, r9	; 0x12
     778:	ab 8a       	std	Y+19, r10	; 0x13
     77a:	bc 8a       	std	Y+20, r11	; 0x14
     77c:	6d 8b       	std	Y+21, r22	; 0x15
     77e:	7e 8b       	std	Y+22, r23	; 0x16
     780:	8f 8b       	std	Y+23, r24	; 0x17
     782:	98 8f       	std	Y+24, r25	; 0x18
     784:	ae 01       	movw	r20, r28
     786:	4f 5f       	subi	r20, 0xFF	; 255
     788:	5f 4f       	sbci	r21, 0xFF	; 255
     78a:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     78c:	00 e0       	ldi	r16, 0x00	; 0
     78e:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     790:	61 2c       	mov	r6, r1
     792:	71 2c       	mov	r7, r1
     794:	c1 2c       	mov	r12, r1
     796:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     798:	21 2c       	mov	r2, r1
     79a:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     79c:	f7 01       	movw	r30, r14
     79e:	81 90       	ld	r8, Z+
     7a0:	91 90       	ld	r9, Z+
     7a2:	a1 90       	ld	r10, Z+
     7a4:	b1 90       	ld	r11, Z+
     7a6:	7f 01       	movw	r14, r30
     7a8:	26 2d       	mov	r18, r6
     7aa:	37 2d       	mov	r19, r7
     7ac:	4c 2d       	mov	r20, r12
     7ae:	5d 2d       	mov	r21, r13
     7b0:	c5 01       	movw	r24, r10
     7b2:	b4 01       	movw	r22, r8
     7b4:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gesf2>
     7b8:	18 16       	cp	r1, r24
     7ba:	34 f4       	brge	.+12     	; 0x7c8 <fourPointCalc+0x3e8>
			indexMax = i;
			maxVal = distVect[i];
     7bc:	68 2c       	mov	r6, r8
     7be:	79 2c       	mov	r7, r9
     7c0:	ca 2c       	mov	r12, r10
     7c2:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     7c4:	20 2e       	mov	r2, r16
     7c6:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     7c8:	0f 5f       	subi	r16, 0xFF	; 255
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	06 30       	cpi	r16, 0x06	; 6
     7ce:	11 05       	cpc	r17, r1
     7d0:	29 f7       	brne	.-54     	; 0x79c <fourPointCalc+0x3bc>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLongRef; 
	pointsLongRef = distIndex(indexMax);
     7d2:	82 2d       	mov	r24, r2
     7d4:	93 2d       	mov	r25, r3
     7d6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <distIndex>
	
	int pointsLong[2] = {(pointsLongRef[0]), (pointsLongRef[1])};
     7da:	fc 01       	movw	r30, r24
     7dc:	e0 80       	ld	r14, Z
     7de:	f1 80       	ldd	r15, Z+1	; 0x01
     7e0:	fa 8e       	std	Y+26, r15	; 0x1a
     7e2:	e9 8e       	std	Y+25, r14	; 0x19
     7e4:	02 81       	ldd	r16, Z+2	; 0x02
     7e6:	13 81       	ldd	r17, Z+3	; 0x03
     7e8:	1c 8f       	std	Y+28, r17	; 0x1c
     7ea:	0b 8f       	std	Y+27, r16	; 0x1b
	
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     7ec:	ee 0c       	add	r14, r14
     7ee:	ff 1c       	adc	r15, r15
     7f0:	ee 0c       	add	r14, r14
     7f2:	ff 1c       	adc	r15, r15
     7f4:	e4 0c       	add	r14, r4
     7f6:	f5 1c       	adc	r15, r5
     7f8:	00 0f       	add	r16, r16
     7fa:	11 1f       	adc	r17, r17
     7fc:	00 0f       	add	r16, r16
     7fe:	11 1f       	adc	r17, r17
     800:	04 0d       	add	r16, r4
     802:	15 1d       	adc	r17, r5
     804:	f7 01       	movw	r30, r14
     806:	60 81       	ld	r22, Z
     808:	71 81       	ldd	r23, Z+1	; 0x01
     80a:	f8 01       	movw	r30, r16
     80c:	80 81       	ld	r24, Z
     80e:	91 81       	ldd	r25, Z+1	; 0x01
     810:	68 0f       	add	r22, r24
     812:	79 1f       	adc	r23, r25
     814:	77 23       	and	r23, r23
     816:	14 f4       	brge	.+4      	; 0x81c <fourPointCalc+0x43c>
     818:	6f 5f       	subi	r22, 0xFF	; 255
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	75 95       	asr	r23
     81e:	67 95       	ror	r22
     820:	07 2e       	mov	r0, r23
     822:	00 0c       	add	r0, r0
     824:	88 0b       	sbc	r24, r24
     826:	99 0b       	sbc	r25, r25
     828:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     82c:	4b 01       	movw	r8, r22
     82e:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     830:	f7 01       	movw	r30, r14
     832:	62 81       	ldd	r22, Z+2	; 0x02
     834:	73 81       	ldd	r23, Z+3	; 0x03
     836:	f8 01       	movw	r30, r16
     838:	82 81       	ldd	r24, Z+2	; 0x02
     83a:	93 81       	ldd	r25, Z+3	; 0x03
     83c:	68 0f       	add	r22, r24
     83e:	79 1f       	adc	r23, r25
     840:	77 23       	and	r23, r23
     842:	14 f4       	brge	.+4      	; 0x848 <fourPointCalc+0x468>
     844:	6f 5f       	subi	r22, 0xFF	; 255
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	75 95       	asr	r23
     84a:	67 95       	ror	r22
     84c:	07 2e       	mov	r0, r23
     84e:	00 0c       	add	r0, r0
     850:	88 0b       	sbc	r24, r24
     852:	99 0b       	sbc	r25, r25
     854:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     858:	69 a3       	std	Y+33, r22	; 0x21
     85a:	7a a3       	std	Y+34, r23	; 0x22
     85c:	8b a3       	std	Y+35, r24	; 0x23
     85e:	9c a3       	std	Y+36, r25	; 0x24
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     860:	9e 01       	movw	r18, r28
     862:	21 5e       	subi	r18, 0xE1	; 225
     864:	3f 4f       	sbci	r19, 0xFF	; 255
     866:	ae 01       	movw	r20, r28
     868:	43 5e       	subi	r20, 0xE3	; 227
     86a:	5f 4f       	sbci	r21, 0xFF	; 255
     86c:	be 01       	movw	r22, r28
     86e:	6f 5f       	subi	r22, 0xFF	; 255
     870:	7f 4f       	sbci	r23, 0xFF	; 255
     872:	ce 01       	movw	r24, r28
     874:	49 96       	adiw	r24, 0x19	; 25
     876:	0e 94 43 01 	call	0x286	; 0x286 <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     87a:	0d 8d       	ldd	r16, Y+29	; 0x1d
     87c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     87e:	00 0f       	add	r16, r16
     880:	11 1f       	adc	r17, r17
     882:	00 0f       	add	r16, r16
     884:	11 1f       	adc	r17, r17
     886:	04 0d       	add	r16, r4
     888:	15 1d       	adc	r17, r5
     88a:	2f 8c       	ldd	r2, Y+31	; 0x1f
     88c:	38 a0       	ldd	r3, Y+32	; 0x20
     88e:	22 0c       	add	r2, r2
     890:	33 1c       	adc	r3, r3
     892:	22 0c       	add	r2, r2
     894:	33 1c       	adc	r3, r3
     896:	24 0c       	add	r2, r4
     898:	35 1c       	adc	r3, r5
     89a:	f8 01       	movw	r30, r16
     89c:	60 81       	ld	r22, Z
     89e:	71 81       	ldd	r23, Z+1	; 0x01
     8a0:	f1 01       	movw	r30, r2
     8a2:	80 81       	ld	r24, Z
     8a4:	91 81       	ldd	r25, Z+1	; 0x01
     8a6:	68 1b       	sub	r22, r24
     8a8:	79 0b       	sbc	r23, r25
     8aa:	07 2e       	mov	r0, r23
     8ac:	00 0c       	add	r0, r0
     8ae:	88 0b       	sbc	r24, r24
     8b0:	99 0b       	sbc	r25, r25
     8b2:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     8b6:	6b 01       	movw	r12, r22
     8b8:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     8ba:	f8 01       	movw	r30, r16
     8bc:	62 81       	ldd	r22, Z+2	; 0x02
     8be:	73 81       	ldd	r23, Z+3	; 0x03
     8c0:	f1 01       	movw	r30, r2
     8c2:	82 81       	ldd	r24, Z+2	; 0x02
     8c4:	93 81       	ldd	r25, Z+3	; 0x03
     8c6:	68 1b       	sub	r22, r24
     8c8:	79 0b       	sbc	r23, r25
     8ca:	07 2e       	mov	r0, r23
     8cc:	00 0c       	add	r0, r0
     8ce:	88 0b       	sbc	r24, r24
     8d0:	99 0b       	sbc	r25, r25
     8d2:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     8d6:	90 58       	subi	r25, 0x80	; 128
     8d8:	a7 01       	movw	r20, r14
     8da:	96 01       	movw	r18, r12
     8dc:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <atan2>
	theta += M_PI/2.0;
     8e0:	2b ed       	ldi	r18, 0xDB	; 219
     8e2:	3f e0       	ldi	r19, 0x0F	; 15
     8e4:	49 ec       	ldi	r20, 0xC9	; 201
     8e6:	5f e3       	ldi	r21, 0x3F	; 63
     8e8:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__addsf3>
     8ec:	6b 01       	movw	r12, r22
     8ee:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     8f0:	a5 01       	movw	r20, r10
     8f2:	94 01       	movw	r18, r8
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	94 e4       	ldi	r25, 0x44	; 68
     8fc:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     900:	4b 01       	movw	r8, r22
     902:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     904:	29 a1       	ldd	r18, Y+33	; 0x21
     906:	3a a1       	ldd	r19, Y+34	; 0x22
     908:	4b a1       	ldd	r20, Y+35	; 0x23
     90a:	5c a1       	ldd	r21, Y+36	; 0x24
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	8f eb       	ldi	r24, 0xBF	; 191
     912:	93 e4       	ldi	r25, 0x43	; 67
     914:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     918:	2b 01       	movw	r4, r22
     91a:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     91c:	c7 01       	movw	r24, r14
     91e:	b6 01       	movw	r22, r12
     920:	0e 94 b5 11 	call	0x236a	; 0x236a <sin>
     924:	69 a3       	std	Y+33, r22	; 0x21
     926:	7a a3       	std	Y+34, r23	; 0x22
     928:	8b a3       	std	Y+35, r24	; 0x23
     92a:	9c a3       	std	Y+36, r25	; 0x24
     92c:	c7 01       	movw	r24, r14
     92e:	b6 01       	movw	r22, r12
     930:	0e 94 76 0f 	call	0x1eec	; 0x1eec <cos>
     934:	6d a3       	std	Y+37, r22	; 0x25
     936:	7e a3       	std	Y+38, r23	; 0x26
     938:	8f a3       	std	Y+39, r24	; 0x27
     93a:	98 a7       	std	Y+40, r25	; 0x28
     93c:	00 e2       	ldi	r16, 0x20	; 32
     93e:	11 e0       	ldi	r17, 0x01	; 1
     940:	29 a1       	ldd	r18, Y+33	; 0x21
     942:	3a a1       	ldd	r19, Y+34	; 0x22
     944:	4b a1       	ldd	r20, Y+35	; 0x23
     946:	5c a1       	ldd	r21, Y+36	; 0x24
     948:	c3 01       	movw	r24, r6
     94a:	b2 01       	movw	r22, r4
     94c:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     950:	69 a7       	std	Y+41, r22	; 0x29
     952:	7a a7       	std	Y+42, r23	; 0x2a
     954:	8b a7       	std	Y+43, r24	; 0x2b
     956:	9c a7       	std	Y+44, r25	; 0x2c
     958:	2d a1       	ldd	r18, Y+37	; 0x25
     95a:	3e a1       	ldd	r19, Y+38	; 0x26
     95c:	4f a1       	ldd	r20, Y+39	; 0x27
     95e:	58 a5       	ldd	r21, Y+40	; 0x28
     960:	c5 01       	movw	r24, r10
     962:	b4 01       	movw	r22, r8
     964:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     968:	9b 01       	movw	r18, r22
     96a:	ac 01       	movw	r20, r24
     96c:	69 a5       	ldd	r22, Y+41	; 0x29
     96e:	7a a5       	ldd	r23, Y+42	; 0x2a
     970:	8b a5       	ldd	r24, Y+43	; 0x2b
     972:	9c a5       	ldd	r25, Y+44	; 0x2c
     974:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     978:	f8 01       	movw	r30, r16
     97a:	60 83       	st	Z, r22
     97c:	71 83       	std	Z+1, r23	; 0x01
     97e:	82 83       	std	Z+2, r24	; 0x02
     980:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     982:	2d a1       	ldd	r18, Y+37	; 0x25
     984:	3e a1       	ldd	r19, Y+38	; 0x26
     986:	4f a1       	ldd	r20, Y+39	; 0x27
     988:	58 a5       	ldd	r21, Y+40	; 0x28
     98a:	c3 01       	movw	r24, r6
     98c:	b2 01       	movw	r22, r4
     98e:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     992:	2b 01       	movw	r4, r22
     994:	3c 01       	movw	r6, r24
     996:	29 a1       	ldd	r18, Y+33	; 0x21
     998:	3a a1       	ldd	r19, Y+34	; 0x22
     99a:	4b a1       	ldd	r20, Y+35	; 0x23
     99c:	5c a1       	ldd	r21, Y+36	; 0x24
     99e:	c5 01       	movw	r24, r10
     9a0:	b4 01       	movw	r22, r8
     9a2:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     9a6:	9b 01       	movw	r18, r22
     9a8:	ac 01       	movw	r20, r24
     9aa:	c3 01       	movw	r24, r6
     9ac:	b2 01       	movw	r22, r4
     9ae:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__addsf3>
     9b2:	f8 01       	movw	r30, r16
     9b4:	64 83       	std	Z+4, r22	; 0x04
     9b6:	75 83       	std	Z+5, r23	; 0x05
     9b8:	86 83       	std	Z+6, r24	; 0x06
     9ba:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta;
     9bc:	f7 fa       	bst	r15, 7
     9be:	f0 94       	com	r15
     9c0:	f7 f8       	bld	r15, 7
     9c2:	f0 94       	com	r15
     9c4:	c0 86       	std	Z+8, r12	; 0x08
     9c6:	d1 86       	std	Z+9, r13	; 0x09
     9c8:	e2 86       	std	Z+10, r14	; 0x0a
     9ca:	f3 86       	std	Z+11, r15	; 0x0b
	
	return centerFour;
}
     9cc:	c8 01       	movw	r24, r16
     9ce:	ce 5b       	subi	r28, 0xBE	; 190
     9d0:	df 4f       	sbci	r29, 0xFF	; 255
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	bf 90       	pop	r11
     9ee:	af 90       	pop	r10
     9f0:	9f 90       	pop	r9
     9f2:	8f 90       	pop	r8
     9f4:	7f 90       	pop	r7
     9f6:	6f 90       	pop	r6
     9f8:	5f 90       	pop	r5
     9fa:	4f 90       	pop	r4
     9fc:	3f 90       	pop	r3
     9fe:	2f 90       	pop	r2
     a00:	08 95       	ret

00000a02 <localization_calc>:
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
     a02:	4f 92       	push	r4
     a04:	5f 92       	push	r5
     a06:	6f 92       	push	r6
     a08:	7f 92       	push	r7
     a0a:	af 92       	push	r10
     a0c:	bf 92       	push	r11
     a0e:	cf 92       	push	r12
     a10:	df 92       	push	r13
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	68 97       	sbiw	r28, 0x18	; 24
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     a30:	0d b7       	in	r16, 0x3d	; 61
     a32:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     a34:	80 81       	ld	r24, Z
     a36:	91 81       	ldd	r25, Z+1	; 0x01
     a38:	9a 83       	std	Y+2, r25	; 0x02
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	80 85       	ldd	r24, Z+8	; 0x08
     a3e:	91 85       	ldd	r25, Z+9	; 0x09
     a40:	9c 83       	std	Y+4, r25	; 0x04
     a42:	8b 83       	std	Y+3, r24	; 0x03
     a44:	82 81       	ldd	r24, Z+2	; 0x02
     a46:	93 81       	ldd	r25, Z+3	; 0x03
     a48:	9e 83       	std	Y+6, r25	; 0x06
     a4a:	8d 83       	std	Y+5, r24	; 0x05
     a4c:	82 85       	ldd	r24, Z+10	; 0x0a
     a4e:	93 85       	ldd	r25, Z+11	; 0x0b
     a50:	98 87       	std	Y+8, r25	; 0x08
     a52:	8f 83       	std	Y+7, r24	; 0x07
     a54:	84 81       	ldd	r24, Z+4	; 0x04
     a56:	95 81       	ldd	r25, Z+5	; 0x05
     a58:	9a 87       	std	Y+10, r25	; 0x0a
     a5a:	89 87       	std	Y+9, r24	; 0x09
     a5c:	84 85       	ldd	r24, Z+12	; 0x0c
     a5e:	95 85       	ldd	r25, Z+13	; 0x0d
     a60:	9c 87       	std	Y+12, r25	; 0x0c
     a62:	8b 87       	std	Y+11, r24	; 0x0b
     a64:	86 81       	ldd	r24, Z+6	; 0x06
     a66:	97 81       	ldd	r25, Z+7	; 0x07
     a68:	9e 87       	std	Y+14, r25	; 0x0e
     a6a:	8d 87       	std	Y+13, r24	; 0x0d
     a6c:	86 85       	ldd	r24, Z+14	; 0x0e
     a6e:	97 85       	ldd	r25, Z+15	; 0x0f
     a70:	98 8b       	std	Y+16, r25	; 0x10
     a72:	8f 87       	std	Y+15, r24	; 0x0f
		{rawStarData[3], rawStarData[7]}
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     a74:	fe 01       	movw	r30, r28
     a76:	71 96       	adiw	r30, 0x11	; 17
     a78:	88 e0       	ldi	r24, 0x08	; 8
     a7a:	df 01       	movw	r26, r30
     a7c:	1d 92       	st	X+, r1
     a7e:	8a 95       	dec	r24
     a80:	e9 f7       	brne	.-6      	; 0xa7c <localization_calc+0x7a>
     a82:	70 97       	sbiw	r30, 0x10	; 16
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     a8c:	40 81       	ld	r20, Z
     a8e:	51 81       	ldd	r21, Z+1	; 0x01
     a90:	4f 3f       	cpi	r20, 0xFF	; 255
     a92:	53 40       	sbci	r21, 0x03	; 3
     a94:	71 f0       	breq	.+28     	; 0xab2 <localization_calc+0xb0>
			pointIndices[numPoints] = i;
     a96:	dc 01       	movw	r26, r24
     a98:	aa 0f       	add	r26, r26
     a9a:	bb 1f       	adc	r27, r27
     a9c:	41 e0       	ldi	r20, 0x01	; 1
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	4c 0f       	add	r20, r28
     aa2:	5d 1f       	adc	r21, r29
     aa4:	a4 0f       	add	r26, r20
     aa6:	b5 1f       	adc	r27, r21
     aa8:	51 96       	adiw	r26, 0x11	; 17
     aaa:	3c 93       	st	X, r19
     aac:	2e 93       	st	-X, r18
     aae:	50 97       	sbiw	r26, 0x10	; 16
			numPoints++;
     ab0:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     ab2:	2f 5f       	subi	r18, 0xFF	; 255
     ab4:	3f 4f       	sbci	r19, 0xFF	; 255
     ab6:	34 96       	adiw	r30, 0x04	; 4
     ab8:	24 30       	cpi	r18, 0x04	; 4
     aba:	31 05       	cpc	r19, r1
     abc:	39 f7       	brne	.-50     	; 0xa8c <localization_calc+0x8a>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     abe:	00 97       	sbiw	r24, 0x00	; 0
     ac0:	09 f4       	brne	.+2      	; 0xac4 <localization_calc+0xc2>
     ac2:	8b c0       	rjmp	.+278    	; 0xbda <__stack+0xdb>
     ac4:	ed b6       	in	r14, 0x3d	; 61
     ac6:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     ac8:	6c 01       	movw	r12, r24
     aca:	cc 0c       	add	r12, r12
     acc:	dd 1c       	adc	r13, r13
     ace:	cc 0c       	add	r12, r12
     ad0:	dd 1c       	adc	r13, r13
     ad2:	ad b7       	in	r26, 0x3d	; 61
     ad4:	be b7       	in	r27, 0x3e	; 62
     ad6:	ac 19       	sub	r26, r12
     ad8:	bd 09       	sbc	r27, r13
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	be bf       	out	0x3e, r27	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	ad bf       	out	0x3d, r26	; 61
     ae4:	ed b7       	in	r30, 0x3d	; 61
     ae6:	fe b7       	in	r31, 0x3e	; 62
     ae8:	31 96       	adiw	r30, 0x01	; 1
     aea:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     aec:	18 16       	cp	r1, r24
     aee:	19 06       	cpc	r1, r25
     af0:	24 f5       	brge	.+72     	; 0xb3a <__stack+0x3b>
     af2:	9e 01       	movw	r18, r28
     af4:	2f 5e       	subi	r18, 0xEF	; 239
     af6:	3f 4f       	sbci	r19, 0xFF	; 255
     af8:	df 01       	movw	r26, r30
     afa:	ce 0e       	add	r12, r30
     afc:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     afe:	f9 01       	movw	r30, r18
     b00:	41 91       	ld	r20, Z+
     b02:	51 91       	ld	r21, Z+
     b04:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     b06:	fa 01       	movw	r30, r20
     b08:	ee 0f       	add	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	ee 0f       	add	r30, r30
     b0e:	ff 1f       	adc	r31, r31
     b10:	41 e0       	ldi	r20, 0x01	; 1
     b12:	50 e0       	ldi	r21, 0x00	; 0
     b14:	4c 0f       	add	r20, r28
     b16:	5d 1f       	adc	r21, r29
     b18:	e4 0f       	add	r30, r20
     b1a:	f5 1f       	adc	r31, r21
     b1c:	40 81       	ld	r20, Z
     b1e:	51 81       	ldd	r21, Z+1	; 0x01
     b20:	11 96       	adiw	r26, 0x01	; 1
     b22:	5c 93       	st	X, r21
     b24:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     b26:	42 81       	ldd	r20, Z+2	; 0x02
     b28:	53 81       	ldd	r21, Z+3	; 0x03
     b2a:	13 96       	adiw	r26, 0x03	; 3
     b2c:	5c 93       	st	X, r21
     b2e:	4e 93       	st	-X, r20
     b30:	12 97       	sbiw	r26, 0x02	; 2
     b32:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     b34:	ac 15       	cp	r26, r12
     b36:	bd 05       	cpc	r27, r13
     b38:	11 f7       	brne	.-60     	; 0xafe <localization_calc+0xfc>
			points[i][0] = pvect[index][0];
			points[i][1] = pvect[index][1];
		}
		
		
		m_red(ON);
     b3a:	6e 9a       	sbi	0x0d, 6	; 13
     b3c:	76 98       	cbi	0x0e, 6	; 14
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     b3e:	db 01       	movw	r26, r22
     b40:	4d 90       	ld	r4, X+
     b42:	5d 90       	ld	r5, X+
     b44:	6d 90       	ld	r6, X+
     b46:	7c 90       	ld	r7, X
     b48:	13 97       	sbiw	r26, 0x03	; 3
     b4a:	e8 e3       	ldi	r30, 0x38	; 56
     b4c:	f1 e0       	ldi	r31, 0x01	; 1
     b4e:	40 82       	st	Z, r4
     b50:	51 82       	std	Z+1, r5	; 0x01
     b52:	62 82       	std	Z+2, r6	; 0x02
     b54:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     b56:	14 96       	adiw	r26, 0x04	; 4
     b58:	4d 90       	ld	r4, X+
     b5a:	5d 90       	ld	r5, X+
     b5c:	6d 90       	ld	r6, X+
     b5e:	7c 90       	ld	r7, X
     b60:	17 97       	sbiw	r26, 0x07	; 7
     b62:	44 82       	std	Z+4, r4	; 0x04
     b64:	55 82       	std	Z+5, r5	; 0x05
     b66:	66 82       	std	Z+6, r6	; 0x06
     b68:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     b6a:	18 96       	adiw	r26, 0x08	; 8
     b6c:	4d 91       	ld	r20, X+
     b6e:	5d 91       	ld	r21, X+
     b70:	6d 91       	ld	r22, X+
     b72:	7c 91       	ld	r23, X
     b74:	1b 97       	sbiw	r26, 0x0b	; 11
     b76:	40 87       	std	Z+8, r20	; 0x08
     b78:	51 87       	std	Z+9, r21	; 0x09
     b7a:	62 87       	std	Z+10, r22	; 0x0a
     b7c:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     b7e:	04 97       	sbiw	r24, 0x04	; 4
     b80:	29 f4       	brne	.+10     	; 0xb8c <__stack+0x8d>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     b82:	c5 01       	movw	r24, r10
     b84:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <fourPointCalc>
     b88:	dc 01       	movw	r26, r24
				break;
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <__stack+0x91>
				
			case 3 : 
				//calcPointer = threePointCalc(points);
				calcPointer = &rc[0];
     b8c:	a8 e3       	ldi	r26, 0x38	; 56
     b8e:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				calcPointer = &rc[0];
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     b90:	4d 91       	ld	r20, X+
     b92:	5d 91       	ld	r21, X+
     b94:	6d 91       	ld	r22, X+
     b96:	7c 91       	ld	r23, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	ec e2       	ldi	r30, 0x2C	; 44
     b9c:	f1 e0       	ldi	r31, 0x01	; 1
     b9e:	40 83       	st	Z, r20
     ba0:	51 83       	std	Z+1, r21	; 0x01
     ba2:	62 83       	std	Z+2, r22	; 0x02
     ba4:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     ba6:	14 96       	adiw	r26, 0x04	; 4
     ba8:	4d 91       	ld	r20, X+
     baa:	5d 91       	ld	r21, X+
     bac:	6d 91       	ld	r22, X+
     bae:	7c 91       	ld	r23, X
     bb0:	17 97       	sbiw	r26, 0x07	; 7
     bb2:	44 83       	std	Z+4, r20	; 0x04
     bb4:	55 83       	std	Z+5, r21	; 0x05
     bb6:	66 83       	std	Z+6, r22	; 0x06
     bb8:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     bba:	18 96       	adiw	r26, 0x08	; 8
     bbc:	8d 91       	ld	r24, X+
     bbe:	9d 91       	ld	r25, X+
     bc0:	0d 90       	ld	r0, X+
     bc2:	bc 91       	ld	r27, X
     bc4:	a0 2d       	mov	r26, r0
     bc6:	80 87       	std	Z+8, r24	; 0x08
     bc8:	91 87       	std	Z+9, r25	; 0x09
     bca:	a2 87       	std	Z+10, r26	; 0x0a
     bcc:	b3 87       	std	Z+11, r27	; 0x0b
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	fe be       	out	0x3e, r15	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	ed be       	out	0x3d, r14	; 61
     bd8:	22 c0       	rjmp	.+68     	; 0xc1e <__stack+0x11f>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     bda:	fb 01       	movw	r30, r22
     bdc:	80 81       	ld	r24, Z
     bde:	91 81       	ldd	r25, Z+1	; 0x01
     be0:	a2 81       	ldd	r26, Z+2	; 0x02
     be2:	b3 81       	ldd	r27, Z+3	; 0x03
     be4:	ec e2       	ldi	r30, 0x2C	; 44
     be6:	f1 e0       	ldi	r31, 0x01	; 1
     be8:	80 83       	st	Z, r24
     bea:	91 83       	std	Z+1, r25	; 0x01
     bec:	a2 83       	std	Z+2, r26	; 0x02
     bee:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     bf0:	db 01       	movw	r26, r22
     bf2:	14 96       	adiw	r26, 0x04	; 4
     bf4:	cd 90       	ld	r12, X+
     bf6:	dd 90       	ld	r13, X+
     bf8:	ed 90       	ld	r14, X+
     bfa:	fc 90       	ld	r15, X
     bfc:	17 97       	sbiw	r26, 0x07	; 7
     bfe:	c4 82       	std	Z+4, r12	; 0x04
     c00:	d5 82       	std	Z+5, r13	; 0x05
     c02:	e6 82       	std	Z+6, r14	; 0x06
     c04:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];
     c06:	18 96       	adiw	r26, 0x08	; 8
     c08:	4d 91       	ld	r20, X+
     c0a:	5d 91       	ld	r21, X+
     c0c:	6d 91       	ld	r22, X+
     c0e:	7c 91       	ld	r23, X
     c10:	1b 97       	sbiw	r26, 0x0b	; 11
     c12:	40 87       	std	Z+8, r20	; 0x08
     c14:	51 87       	std	Z+9, r21	; 0x09
     c16:	62 87       	std	Z+10, r22	; 0x0a
     c18:	73 87       	std	Z+11, r23	; 0x0b
		m_red(OFF);	
     c1a:	6e 9a       	sbi	0x0d, 6	; 13
     c1c:	76 9a       	sbi	0x0e, 6	; 14
	
	return robotCenter;
	
	
	
}
     c1e:	8c e2       	ldi	r24, 0x2C	; 44
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	1e bf       	out	0x3e, r17	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	0d bf       	out	0x3d, r16	; 61
     c2c:	68 96       	adiw	r28, 0x18	; 24
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	df 90       	pop	r13
     c46:	cf 90       	pop	r12
     c48:	bf 90       	pop	r11
     c4a:	af 90       	pop	r10
     c4c:	7f 90       	pop	r7
     c4e:	6f 90       	pop	r6
     c50:	5f 90       	pop	r5
     c52:	4f 90       	pop	r4
     c54:	08 95       	ret

00000c56 <init>:
************************************************************/

/* Initialization of Pins and System Clock */
void init(void){
	
	m_clockdivide(CLOCK_DIVIDE); // Set to 2 MHz
     c56:	e1 e6       	ldi	r30, 0x61	; 97
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 e8       	ldi	r24, 0x80	; 128
     c5c:	80 83       	st	Z, r24
     c5e:	10 82       	st	Z, r1
	
	//Set to Input
	clear(DDRD,0); // D0
     c60:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     c62:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     c64:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     c66:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     c68:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     c6a:	23 9a       	sbi	0x04, 3	; 4
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     c6c:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     c6e:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     c70:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     c72:	2b 98       	cbi	0x05, 3	; 5
	
	m_bus_init();
     c74:	0e 94 bc 0a 	call	0x1578	; 0x1578 <m_bus_init>
	while(!m_wii_open());
     c78:	0e 94 de 0c 	call	0x19bc	; 0x19bc <m_wii_open>
     c7c:	88 23       	and	r24, r24
     c7e:	e1 f3       	breq	.-8      	; 0xc78 <init+0x22>
	sei();
     c80:	78 94       	sei
     c82:	08 95       	ret

00000c84 <timer1_init>:
	//while(!m_usb_isconnected());
}

/* Timer1 Initialization for PWM Motor Control */
void timer1_init(void)
{
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     c88:	e1 e8       	ldi	r30, 0x81	; 129
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	8b 7f       	andi	r24, 0xFB	; 251
     c90:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     c92:	80 81       	ld	r24, Z
     c94:	8d 7f       	andi	r24, 0xFD	; 253
     c96:	80 83       	st	Z, r24
	set(TCCR1B,CS10);
     c98:	80 81       	ld	r24, Z
     c9a:	81 60       	ori	r24, 0x01	; 1
     c9c:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     c9e:	80 81       	ld	r24, Z
     ca0:	8f 7e       	andi	r24, 0xEF	; 239
     ca2:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     ca4:	80 81       	ld	r24, Z
     ca6:	88 60       	ori	r24, 0x08	; 8
     ca8:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     caa:	e0 e8       	ldi	r30, 0x80	; 128
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8d 7f       	andi	r24, 0xFD	; 253
     cb2:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     cb4:	80 81       	ld	r24, Z
     cb6:	8e 7f       	andi	r24, 0xFE	; 254
     cb8:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     cba:	80 81       	ld	r24, Z
     cbc:	8f 7d       	andi	r24, 0xDF	; 223
     cbe:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     cc0:	80 81       	ld	r24, Z
     cc2:	8f 7e       	andi	r24, 0xEF	; 239
     cc4:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     cc6:	c8 e8       	ldi	r28, 0x88	; 136
     cc8:	d0 e0       	ldi	r29, 0x00	; 0
     cca:	80 e8       	ldi	r24, 0x80	; 128
     ccc:	9e e3       	ldi	r25, 0x3E	; 62
     cce:	99 83       	std	Y+1, r25	; 0x01
     cd0:	88 83       	st	Y, r24
	OCR1B = (float)OCR1A*left_duty_cycle;
     cd2:	68 81       	ld	r22, Y
     cd4:	79 81       	ldd	r23, Y+1	; 0x01
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 23 10 	call	0x2046	; 0x2046 <__floatunsisf>
     cde:	20 91 10 01 	lds	r18, 0x0110
     ce2:	30 91 11 01 	lds	r19, 0x0111
     ce6:	40 91 12 01 	lds	r20, 0x0112
     cea:	50 91 13 01 	lds	r21, 0x0113
     cee:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     cf2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__fixunssfsi>
     cf6:	70 93 8b 00 	sts	0x008B, r23
     cfa:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*right_duty_cycle;
     cfe:	68 81       	ld	r22, Y
     d00:	79 81       	ldd	r23, Y+1	; 0x01
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 23 10 	call	0x2046	; 0x2046 <__floatunsisf>
     d0a:	20 91 0c 01 	lds	r18, 0x010C
     d0e:	30 91 0d 01 	lds	r19, 0x010D
     d12:	40 91 0e 01 	lds	r20, 0x010E
     d16:	50 91 0f 01 	lds	r21, 0x010F
     d1a:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     d1e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__fixunssfsi>
     d22:	70 93 8d 00 	sts	0x008D, r23
     d26:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     d2a:	ef e6       	ldi	r30, 0x6F	; 111
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	82 60       	ori	r24, 0x02	; 2
     d32:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     d34:	80 81       	ld	r24, Z
     d36:	84 60       	ori	r24, 0x04	; 4
     d38:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     d3a:	80 81       	ld	r24, Z
     d3c:	88 60       	ori	r24, 0x08	; 8
     d3e:	80 83       	st	Z, r24
}
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <timer3_init>:

/* Timer3 Initialization for fixed timestep calculations */
void timer3_init(void)
{
	clear(TCCR3B,CS32); // prescale /1
     d46:	e1 e9       	ldi	r30, 0x91	; 145
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8b 7f       	andi	r24, 0xFB	; 251
     d4e:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     d50:	80 81       	ld	r24, Z
     d52:	8d 7f       	andi	r24, 0xFD	; 253
     d54:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     d56:	80 81       	ld	r24, Z
     d58:	81 60       	ori	r24, 0x01	; 1
     d5a:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     d5c:	80 81       	ld	r24, Z
     d5e:	8f 7e       	andi	r24, 0xEF	; 239
     d60:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     d62:	80 81       	ld	r24, Z
     d64:	88 60       	ori	r24, 0x08	; 8
     d66:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     d68:	e0 e9       	ldi	r30, 0x90	; 144
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8d 7f       	andi	r24, 0xFD	; 253
     d70:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     d72:	80 81       	ld	r24, Z
     d74:	8e 7f       	andi	r24, 0xFE	; 254
     d76:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     d78:	80 e8       	ldi	r24, 0x80	; 128
     d7a:	9e e3       	ldi	r25, 0x3E	; 62
     d7c:	90 93 99 00 	sts	0x0099, r25
     d80:	80 93 98 00 	sts	0x0098, r24
     d84:	08 95       	ret

00000d86 <lowpass>:
}


/* Lowpass Filter using Alpha_low */
int lowpass(float alpha, int previous_output, int reading)
{
     d86:	8f 92       	push	r8
     d88:	9f 92       	push	r9
     d8a:	af 92       	push	r10
     d8c:	bf 92       	push	r11
     d8e:	cf 92       	push	r12
     d90:	df 92       	push	r13
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	6b 01       	movw	r12, r22
     d9c:	7c 01       	movw	r14, r24
     d9e:	ea 01       	movw	r28, r20
	return (int)((float)reading*alpha +(1-alpha)*(float)previous_output);
     da0:	b9 01       	movw	r22, r18
     da2:	33 0f       	add	r19, r19
     da4:	88 0b       	sbc	r24, r24
     da6:	99 0b       	sbc	r25, r25
     da8:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     dac:	a7 01       	movw	r20, r14
     dae:	96 01       	movw	r18, r12
     db0:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     db4:	4b 01       	movw	r8, r22
     db6:	5c 01       	movw	r10, r24
     db8:	a7 01       	movw	r20, r14
     dba:	96 01       	movw	r18, r12
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	80 e8       	ldi	r24, 0x80	; 128
     dc2:	9f e3       	ldi	r25, 0x3F	; 63
     dc4:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     dc8:	6b 01       	movw	r12, r22
     dca:	7c 01       	movw	r14, r24
     dcc:	be 01       	movw	r22, r28
     dce:	dd 0f       	add	r29, r29
     dd0:	88 0b       	sbc	r24, r24
     dd2:	99 0b       	sbc	r25, r25
     dd4:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24
     ddc:	c7 01       	movw	r24, r14
     dde:	b6 01       	movw	r22, r12
     de0:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     de4:	9b 01       	movw	r18, r22
     de6:	ac 01       	movw	r20, r24
     de8:	c5 01       	movw	r24, r10
     dea:	b4 01       	movw	r22, r8
     dec:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__addsf3>
     df0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__fixsfsi>
}
     df4:	cb 01       	movw	r24, r22
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	df 90       	pop	r13
     e00:	cf 90       	pop	r12
     e02:	bf 90       	pop	r11
     e04:	af 90       	pop	r10
     e06:	9f 90       	pop	r9
     e08:	8f 90       	pop	r8
     e0a:	08 95       	ret

00000e0c <theta_error_correction>:

}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
     e0c:	8f 92       	push	r8
     e0e:	9f 92       	push	r9
     e10:	af 92       	push	r10
     e12:	bf 92       	push	r11
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	6b 01       	movw	r12, r22
     e1e:	7c 01       	movw	r14, r24
	if(fabs(error)>PI){return error-2.0*PI*error/fabs(error);}
     e20:	4b 01       	movw	r8, r22
     e22:	5c 01       	movw	r10, r24
     e24:	e8 94       	clt
     e26:	b7 f8       	bld	r11, 7
     e28:	2b ed       	ldi	r18, 0xDB	; 219
     e2a:	3f e0       	ldi	r19, 0x0F	; 15
     e2c:	49 e4       	ldi	r20, 0x49	; 73
     e2e:	50 e4       	ldi	r21, 0x40	; 64
     e30:	c5 01       	movw	r24, r10
     e32:	b4 01       	movw	r22, r8
     e34:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gesf2>
     e38:	18 16       	cp	r1, r24
     e3a:	bc f4       	brge	.+46     	; 0xe6a <theta_error_correction+0x5e>
     e3c:	2b ed       	ldi	r18, 0xDB	; 219
     e3e:	3f e0       	ldi	r19, 0x0F	; 15
     e40:	49 ec       	ldi	r20, 0xC9	; 201
     e42:	50 e4       	ldi	r21, 0x40	; 64
     e44:	c7 01       	movw	r24, r14
     e46:	b6 01       	movw	r22, r12
     e48:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     e4c:	a5 01       	movw	r20, r10
     e4e:	94 01       	movw	r18, r8
     e50:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__divsf3>
     e54:	9b 01       	movw	r18, r22
     e56:	ac 01       	movw	r20, r24
     e58:	c7 01       	movw	r24, r14
     e5a:	b6 01       	movw	r22, r12
     e5c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     e60:	56 2f       	mov	r21, r22
     e62:	47 2f       	mov	r20, r23
     e64:	38 2f       	mov	r19, r24
     e66:	29 2f       	mov	r18, r25
     e68:	04 c0       	rjmp	.+8      	; 0xe72 <theta_error_correction+0x66>
	else{return error;}
     e6a:	5c 2d       	mov	r21, r12
     e6c:	4d 2d       	mov	r20, r13
     e6e:	3e 2d       	mov	r19, r14
     e70:	2f 2d       	mov	r18, r15
}
     e72:	65 2f       	mov	r22, r21
     e74:	74 2f       	mov	r23, r20
     e76:	83 2f       	mov	r24, r19
     e78:	92 2f       	mov	r25, r18
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	df 90       	pop	r13
     e80:	cf 90       	pop	r12
     e82:	bf 90       	pop	r11
     e84:	af 90       	pop	r10
     e86:	9f 90       	pop	r9
     e88:	8f 90       	pop	r8
     e8a:	08 95       	ret

00000e8c <run_control_loop>:
	robotCenterPrev[1] = y;
}

/* PID Control (Currently only for theta) */
void run_control_loop(void)
{
     e8c:	4f 92       	push	r4
     e8e:	5f 92       	push	r5
     e90:	6f 92       	push	r6
     e92:	7f 92       	push	r7
     e94:	8f 92       	push	r8
     e96:	9f 92       	push	r9
     e98:	af 92       	push	r10
     e9a:	bf 92       	push	r11
     e9c:	cf 92       	push	r12
     e9e:	df 92       	push	r13
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	28 97       	sbiw	r28, 0x08	; 8
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
	// Get theta error based output
	float theta_error = theta_target - theta;
     ebc:	20 91 58 01 	lds	r18, 0x0158
     ec0:	30 91 59 01 	lds	r19, 0x0159
     ec4:	40 91 5a 01 	lds	r20, 0x015A
     ec8:	50 91 5b 01 	lds	r21, 0x015B
     ecc:	60 91 4c 01 	lds	r22, 0x014C
     ed0:	70 91 4d 01 	lds	r23, 0x014D
     ed4:	80 91 4e 01 	lds	r24, 0x014E
     ed8:	90 91 4f 01 	lds	r25, 0x014F
     edc:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
	theta_error = theta_error_correction(theta_error);
     ee0:	0e 94 06 07 	call	0xe0c	; 0xe0c <theta_error_correction>
     ee4:	2b 01       	movw	r4, r22
     ee6:	3c 01       	movw	r6, r24
	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
     ee8:	20 91 48 01 	lds	r18, 0x0148
     eec:	30 91 49 01 	lds	r19, 0x0149
     ef0:	40 91 4a 01 	lds	r20, 0x014A
     ef4:	50 91 4b 01 	lds	r21, 0x014B
     ef8:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     efc:	2f e6       	ldi	r18, 0x6F	; 111
     efe:	32 e1       	ldi	r19, 0x12	; 18
     f00:	43 e8       	ldi	r20, 0x83	; 131
     f02:	5a e3       	ldi	r21, 0x3A	; 58
     f04:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__divsf3>
	float angular_output = THETA_Kp*theta_error - THETA_Kd*derivative; //If output > 0, turn left
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	a9 01       	movw	r20, r18
     f0e:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     f12:	9b 01       	movw	r18, r22
     f14:	ac 01       	movw	r20, r24
     f16:	c3 01       	movw	r24, r6
     f18:	b2 01       	movw	r22, r4
     f1a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
	previous_theta_error = theta_error;
     f1e:	40 92 48 01 	sts	0x0148, r4
     f22:	50 92 49 01 	sts	0x0149, r5
     f26:	60 92 4a 01 	sts	0x014A, r6
     f2a:	70 92 4b 01 	sts	0x014B, r7
	angular_output = angular_output/PI; //Normalize to max value of 1 given Kp gain of 1
     f2e:	2b ed       	ldi	r18, 0xDB	; 219
     f30:	3f e0       	ldi	r19, 0x0F	; 15
     f32:	49 e4       	ldi	r20, 0x49	; 73
     f34:	50 e4       	ldi	r21, 0x40	; 64
     f36:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__divsf3>
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
     f3a:	6b 01       	movw	r12, r22
     f3c:	7c 01       	movw	r14, r24
     f3e:	f7 fa       	bst	r15, 7
     f40:	f0 94       	com	r15
     f42:	f7 f8       	bld	r15, 7
     f44:	f0 94       	com	r15
     f46:	c0 92 10 01 	sts	0x0110, r12
     f4a:	d0 92 11 01 	sts	0x0111, r13
     f4e:	e0 92 12 01 	sts	0x0112, r14
     f52:	f0 92 13 01 	sts	0x0113, r15
	right_duty_cycle = angular_output;
     f56:	60 93 0c 01 	sts	0x010C, r22
     f5a:	70 93 0d 01 	sts	0x010D, r23
     f5e:	80 93 0e 01 	sts	0x010E, r24
     f62:	90 93 0f 01 	sts	0x010F, r25
	
	// Get linear error based output
	float y_delta = y_target-y;
     f66:	20 91 5c 01 	lds	r18, 0x015C
     f6a:	30 91 5d 01 	lds	r19, 0x015D
     f6e:	40 91 5e 01 	lds	r20, 0x015E
     f72:	50 91 5f 01 	lds	r21, 0x015F
     f76:	60 91 50 01 	lds	r22, 0x0150
     f7a:	70 91 51 01 	lds	r23, 0x0151
     f7e:	80 91 52 01 	lds	r24, 0x0152
     f82:	90 91 53 01 	lds	r25, 0x0153
     f86:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     f8a:	4b 01       	movw	r8, r22
     f8c:	5c 01       	movw	r10, r24
	float x_delta = x_target-x;
     f8e:	20 91 60 01 	lds	r18, 0x0160
     f92:	30 91 61 01 	lds	r19, 0x0161
     f96:	40 91 62 01 	lds	r20, 0x0162
     f9a:	50 91 63 01 	lds	r21, 0x0163
     f9e:	60 91 54 01 	lds	r22, 0x0154
     fa2:	70 91 55 01 	lds	r23, 0x0155
     fa6:	80 91 56 01 	lds	r24, 0x0156
     faa:	90 91 57 01 	lds	r25, 0x0157
     fae:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     fb2:	69 83       	std	Y+1, r22	; 0x01
     fb4:	7a 83       	std	Y+2, r23	; 0x02
     fb6:	8b 83       	std	Y+3, r24	; 0x03
     fb8:	9c 83       	std	Y+4, r25	; 0x04
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
     fba:	c3 01       	movw	r24, r6
     fbc:	b2 01       	movw	r22, r4
     fbe:	0e 94 76 0f 	call	0x1eec	; 0x1eec <cos>
     fc2:	2b 01       	movw	r4, r22
     fc4:	3c 01       	movw	r6, r24
     fc6:	a5 01       	movw	r20, r10
     fc8:	94 01       	movw	r18, r8
     fca:	c5 01       	movw	r24, r10
     fcc:	b4 01       	movw	r22, r8
     fce:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     fd2:	6d 83       	std	Y+5, r22	; 0x05
     fd4:	7e 83       	std	Y+6, r23	; 0x06
     fd6:	8f 83       	std	Y+7, r24	; 0x07
     fd8:	98 87       	std	Y+8, r25	; 0x08
     fda:	a5 01       	movw	r20, r10
     fdc:	94 01       	movw	r18, r8
     fde:	c5 01       	movw	r24, r10
     fe0:	b4 01       	movw	r22, r8
     fe2:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     fe6:	4b 01       	movw	r8, r22
     fe8:	5c 01       	movw	r10, r24
     fea:	29 81       	ldd	r18, Y+1	; 0x01
     fec:	3a 81       	ldd	r19, Y+2	; 0x02
     fee:	4b 81       	ldd	r20, Y+3	; 0x03
     ff0:	5c 81       	ldd	r21, Y+4	; 0x04
     ff2:	ca 01       	movw	r24, r20
     ff4:	b9 01       	movw	r22, r18
     ff6:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     ffa:	9b 01       	movw	r18, r22
     ffc:	ac 01       	movw	r20, r24
     ffe:	c5 01       	movw	r24, r10
    1000:	b4 01       	movw	r22, r8
    1002:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__addsf3>
    1006:	0e 94 c3 11 	call	0x2386	; 0x2386 <sqrt>
    100a:	9b 01       	movw	r18, r22
    100c:	ac 01       	movw	r20, r24
    100e:	c3 01       	movw	r24, r6
    1010:	b2 01       	movw	r22, r4
    1012:	9f 77       	andi	r25, 0x7F	; 127
    1014:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
	float linear_output = LINEAR_Kp*linear_error - LINEAR_Kd*derivative;
	previous_linear_error = linear_error;
    1018:	60 93 44 01 	sts	0x0144, r22
    101c:	70 93 45 01 	sts	0x0145, r23
    1020:	80 93 46 01 	sts	0x0146, r24
    1024:	90 93 47 01 	sts	0x0147, r25
// 		left_duty_cycle -= linear_output;
// 		right_duty_cycle -= linear_output;
// 	}
	
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	a9 01       	movw	r20, r18
    102e:	c7 01       	movw	r24, r14
    1030:	b6 01       	movw	r22, r12
    1032:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__cmpsf2>
    1036:	88 23       	and	r24, r24
    1038:	14 f4       	brge	.+4      	; 0x103e <run_control_loop+0x1b2>
    103a:	29 98       	cbi	0x05, 1	; 5
    103c:	01 c0       	rjmp	.+2      	; 0x1040 <run_control_loop+0x1b4>
	else{set(PORTB,1);}
    103e:	29 9a       	sbi	0x05, 1	; 5
		
	if (right_duty_cycle<0){clear(PORTB,3);}
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	a9 01       	movw	r20, r18
    1046:	60 91 0c 01 	lds	r22, 0x010C
    104a:	70 91 0d 01 	lds	r23, 0x010D
    104e:	80 91 0e 01 	lds	r24, 0x010E
    1052:	90 91 0f 01 	lds	r25, 0x010F
    1056:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__cmpsf2>
    105a:	88 23       	and	r24, r24
    105c:	14 f4       	brge	.+4      	; 0x1062 <run_control_loop+0x1d6>
    105e:	2b 98       	cbi	0x05, 3	; 5
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <run_control_loop+0x1d8>
	else{set(PORTB,3);}
    1062:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    1064:	80 91 10 01 	lds	r24, 0x0110
    1068:	90 91 11 01 	lds	r25, 0x0111
    106c:	a0 91 12 01 	lds	r26, 0x0112
    1070:	b0 91 13 01 	lds	r27, 0x0113
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	9f 77       	andi	r25, 0x7F	; 127
    107a:	60 93 10 01 	sts	0x0110, r22
    107e:	70 93 11 01 	sts	0x0111, r23
    1082:	80 93 12 01 	sts	0x0112, r24
    1086:	90 93 13 01 	sts	0x0113, r25
	right_duty_cycle = fabs(right_duty_cycle);
    108a:	80 90 0c 01 	lds	r8, 0x010C
    108e:	90 90 0d 01 	lds	r9, 0x010D
    1092:	a0 90 0e 01 	lds	r10, 0x010E
    1096:	b0 90 0f 01 	lds	r11, 0x010F
    109a:	e8 94       	clt
    109c:	b7 f8       	bld	r11, 7
    109e:	80 92 0c 01 	sts	0x010C, r8
    10a2:	90 92 0d 01 	sts	0x010D, r9
    10a6:	a0 92 0e 01 	sts	0x010E, r10
    10aa:	b0 92 0f 01 	sts	0x010F, r11
	
	while (left_duty_cycle > 0.2)
    10ae:	d6 2e       	mov	r13, r22
    10b0:	e7 2e       	mov	r14, r23
    10b2:	f8 2e       	mov	r15, r24
    10b4:	c9 2e       	mov	r12, r25
    10b6:	2d ec       	ldi	r18, 0xCD	; 205
    10b8:	3c ec       	ldi	r19, 0xCC	; 204
    10ba:	4c e4       	ldi	r20, 0x4C	; 76
    10bc:	5e e3       	ldi	r21, 0x3E	; 62
    10be:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gesf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	0c f0       	brlt	.+2      	; 0x10c8 <run_control_loop+0x23c>
    10c6:	48 c0       	rjmp	.+144    	; 0x1158 <run_control_loop+0x2cc>
    10c8:	58 2c       	mov	r5, r8
    10ca:	69 2c       	mov	r6, r9
    10cc:	7a 2c       	mov	r7, r10
    10ce:	8b 2c       	mov	r8, r11
	{
		left_duty_cycle = 0.9*left_duty_cycle;
    10d0:	26 e6       	ldi	r18, 0x66	; 102
    10d2:	36 e6       	ldi	r19, 0x66	; 102
    10d4:	46 e6       	ldi	r20, 0x66	; 102
    10d6:	5f e3       	ldi	r21, 0x3F	; 63
    10d8:	6d 2d       	mov	r22, r13
    10da:	7e 2d       	mov	r23, r14
    10dc:	8f 2d       	mov	r24, r15
    10de:	9c 2d       	mov	r25, r12
    10e0:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    10e4:	d6 2e       	mov	r13, r22
    10e6:	e7 2e       	mov	r14, r23
    10e8:	f8 2e       	mov	r15, r24
    10ea:	c9 2e       	mov	r12, r25
		right_duty_cycle = 0.9*right_duty_cycle;
    10ec:	26 e6       	ldi	r18, 0x66	; 102
    10ee:	36 e6       	ldi	r19, 0x66	; 102
    10f0:	46 e6       	ldi	r20, 0x66	; 102
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	65 2d       	mov	r22, r5
    10f6:	76 2d       	mov	r23, r6
    10f8:	87 2d       	mov	r24, r7
    10fa:	98 2d       	mov	r25, r8
    10fc:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    1100:	46 2e       	mov	r4, r22
    1102:	97 2e       	mov	r9, r23
    1104:	a8 2e       	mov	r10, r24
    1106:	b9 2e       	mov	r11, r25
    1108:	56 2e       	mov	r5, r22
    110a:	67 2e       	mov	r6, r23
    110c:	78 2e       	mov	r7, r24
    110e:	89 2e       	mov	r8, r25
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
	right_duty_cycle = fabs(right_duty_cycle);
	
	while (left_duty_cycle > 0.2)
    1110:	2d ec       	ldi	r18, 0xCD	; 205
    1112:	3c ec       	ldi	r19, 0xCC	; 204
    1114:	4c e4       	ldi	r20, 0x4C	; 76
    1116:	5e e3       	ldi	r21, 0x3E	; 62
    1118:	6d 2d       	mov	r22, r13
    111a:	7e 2d       	mov	r23, r14
    111c:	8f 2d       	mov	r24, r15
    111e:	9c 2d       	mov	r25, r12
    1120:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gesf2>
    1124:	18 16       	cp	r1, r24
    1126:	a4 f2       	brlt	.-88     	; 0x10d0 <run_control_loop+0x244>
    1128:	8d 2d       	mov	r24, r13
    112a:	9e 2d       	mov	r25, r14
    112c:	af 2d       	mov	r26, r15
    112e:	bc 2d       	mov	r27, r12
    1130:	80 93 10 01 	sts	0x0110, r24
    1134:	90 93 11 01 	sts	0x0111, r25
    1138:	a0 93 12 01 	sts	0x0112, r26
    113c:	b0 93 13 01 	sts	0x0113, r27
    1140:	84 2d       	mov	r24, r4
    1142:	99 2d       	mov	r25, r9
    1144:	aa 2d       	mov	r26, r10
    1146:	bb 2d       	mov	r27, r11
    1148:	80 93 0c 01 	sts	0x010C, r24
    114c:	90 93 0d 01 	sts	0x010D, r25
    1150:	a0 93 0e 01 	sts	0x010E, r26
    1154:	b0 93 0f 01 	sts	0x010F, r27
	{
		left_duty_cycle = 0.9*left_duty_cycle;
		right_duty_cycle = 0.9*right_duty_cycle;
	}

	while (right_duty_cycle > 0.2)
    1158:	c0 90 0c 01 	lds	r12, 0x010C
    115c:	d0 90 0d 01 	lds	r13, 0x010D
    1160:	e0 90 0e 01 	lds	r14, 0x010E
    1164:	f0 90 0f 01 	lds	r15, 0x010F
    1168:	2d ec       	ldi	r18, 0xCD	; 205
    116a:	3c ec       	ldi	r19, 0xCC	; 204
    116c:	4c e4       	ldi	r20, 0x4C	; 76
    116e:	5e e3       	ldi	r21, 0x3E	; 62
    1170:	6c 2d       	mov	r22, r12
    1172:	7d 2d       	mov	r23, r13
    1174:	8e 2d       	mov	r24, r14
    1176:	9f 2d       	mov	r25, r15
    1178:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gesf2>
    117c:	18 16       	cp	r1, r24
    117e:	0c f0       	brlt	.+2      	; 0x1182 <run_control_loop+0x2f6>
    1180:	48 c0       	rjmp	.+144    	; 0x1212 <run_control_loop+0x386>
    1182:	40 90 10 01 	lds	r4, 0x0110
    1186:	50 90 11 01 	lds	r5, 0x0111
    118a:	60 90 12 01 	lds	r6, 0x0112
    118e:	70 90 13 01 	lds	r7, 0x0113
	{
		left_duty_cycle = 0.9*left_duty_cycle;
    1192:	26 e6       	ldi	r18, 0x66	; 102
    1194:	36 e6       	ldi	r19, 0x66	; 102
    1196:	46 e6       	ldi	r20, 0x66	; 102
    1198:	5f e3       	ldi	r21, 0x3F	; 63
    119a:	64 2d       	mov	r22, r4
    119c:	75 2d       	mov	r23, r5
    119e:	86 2d       	mov	r24, r6
    11a0:	97 2d       	mov	r25, r7
    11a2:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    11a6:	86 2e       	mov	r8, r22
    11a8:	97 2e       	mov	r9, r23
    11aa:	a8 2e       	mov	r10, r24
    11ac:	b9 2e       	mov	r11, r25
		right_duty_cycle = 0.9*right_duty_cycle;
    11ae:	26 e6       	ldi	r18, 0x66	; 102
    11b0:	36 e6       	ldi	r19, 0x66	; 102
    11b2:	46 e6       	ldi	r20, 0x66	; 102
    11b4:	5f e3       	ldi	r21, 0x3F	; 63
    11b6:	6c 2d       	mov	r22, r12
    11b8:	7d 2d       	mov	r23, r13
    11ba:	8e 2d       	mov	r24, r14
    11bc:	9f 2d       	mov	r25, r15
    11be:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    11c2:	c6 2e       	mov	r12, r22
    11c4:	d7 2e       	mov	r13, r23
    11c6:	e8 2e       	mov	r14, r24
    11c8:	f9 2e       	mov	r15, r25
		right_duty_cycle = 0.9*right_duty_cycle;
	}

	while (right_duty_cycle > 0.2)
	{
		left_duty_cycle = 0.9*left_duty_cycle;
    11ca:	48 2c       	mov	r4, r8
    11cc:	59 2c       	mov	r5, r9
    11ce:	6a 2c       	mov	r6, r10
    11d0:	7b 2c       	mov	r7, r11
	{
		left_duty_cycle = 0.9*left_duty_cycle;
		right_duty_cycle = 0.9*right_duty_cycle;
	}

	while (right_duty_cycle > 0.2)
    11d2:	2d ec       	ldi	r18, 0xCD	; 205
    11d4:	3c ec       	ldi	r19, 0xCC	; 204
    11d6:	4c e4       	ldi	r20, 0x4C	; 76
    11d8:	5e e3       	ldi	r21, 0x3E	; 62
    11da:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gesf2>
    11de:	18 16       	cp	r1, r24
    11e0:	c4 f2       	brlt	.-80     	; 0x1192 <run_control_loop+0x306>
    11e2:	88 2d       	mov	r24, r8
    11e4:	99 2d       	mov	r25, r9
    11e6:	aa 2d       	mov	r26, r10
    11e8:	bb 2d       	mov	r27, r11
    11ea:	80 93 10 01 	sts	0x0110, r24
    11ee:	90 93 11 01 	sts	0x0111, r25
    11f2:	a0 93 12 01 	sts	0x0112, r26
    11f6:	b0 93 13 01 	sts	0x0113, r27
    11fa:	8c 2d       	mov	r24, r12
    11fc:	9d 2d       	mov	r25, r13
    11fe:	ae 2d       	mov	r26, r14
    1200:	bf 2d       	mov	r27, r15
    1202:	80 93 0c 01 	sts	0x010C, r24
    1206:	90 93 0d 01 	sts	0x010D, r25
    120a:	a0 93 0e 01 	sts	0x010E, r26
    120e:	b0 93 0f 01 	sts	0x010F, r27
	{
		left_duty_cycle = 0.9*left_duty_cycle;
		right_duty_cycle = 0.9*right_duty_cycle;
	}
	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    1212:	08 e8       	ldi	r16, 0x88	; 136
    1214:	10 e0       	ldi	r17, 0x00	; 0
    1216:	f8 01       	movw	r30, r16
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 23 10 	call	0x2046	; 0x2046 <__floatunsisf>
    1224:	20 91 10 01 	lds	r18, 0x0110
    1228:	30 91 11 01 	lds	r19, 0x0111
    122c:	40 91 12 01 	lds	r20, 0x0112
    1230:	50 91 13 01 	lds	r21, 0x0113
    1234:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    1238:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__fixunssfsi>
    123c:	70 93 8b 00 	sts	0x008B, r23
    1240:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    1244:	f8 01       	movw	r30, r16
    1246:	60 81       	ld	r22, Z
    1248:	71 81       	ldd	r23, Z+1	; 0x01
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 23 10 	call	0x2046	; 0x2046 <__floatunsisf>
    1252:	20 91 0c 01 	lds	r18, 0x010C
    1256:	30 91 0d 01 	lds	r19, 0x010D
    125a:	40 91 0e 01 	lds	r20, 0x010E
    125e:	50 91 0f 01 	lds	r21, 0x010F
    1262:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    1266:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__fixunssfsi>
    126a:	70 93 8d 00 	sts	0x008D, r23
    126e:	60 93 8c 00 	sts	0x008C, r22

}
    1272:	28 96       	adiw	r28, 0x08	; 8
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	ff 90       	pop	r15
    1288:	ef 90       	pop	r14
    128a:	df 90       	pop	r13
    128c:	cf 90       	pop	r12
    128e:	bf 90       	pop	r11
    1290:	af 90       	pop	r10
    1292:	9f 90       	pop	r9
    1294:	8f 90       	pop	r8
    1296:	7f 90       	pop	r7
    1298:	6f 90       	pop	r6
    129a:	5f 90       	pop	r5
    129c:	4f 90       	pop	r4
    129e:	08 95       	ret

000012a0 <update_position>:
	return (int)((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    12a0:	8f 92       	push	r8
    12a2:	9f 92       	push	r9
    12a4:	af 92       	push	r10
    12a6:	bf 92       	push	r11
    12a8:	cf 92       	push	r12
    12aa:	df 92       	push	r13
    12ac:	ef 92       	push	r14
    12ae:	ff 92       	push	r15
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	60 97       	sbiw	r28, 0x10	; 16
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
	// Read in Locations
	m_wii_read(blobs);
    12c8:	89 e6       	ldi	r24, 0x69	; 105
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    12d0:	e9 e6       	ldi	r30, 0x69	; 105
    12d2:	f1 e0       	ldi	r31, 0x01	; 1
    12d4:	62 81       	ldd	r22, Z+2	; 0x02
    12d6:	73 81       	ldd	r23, Z+3	; 0x03
	unsigned int x2 = blobs[3];
    12d8:	e6 80       	ldd	r14, Z+6	; 0x06
    12da:	f7 80       	ldd	r15, Z+7	; 0x07
	unsigned int y2 = blobs[4];
    12dc:	40 85       	ldd	r20, Z+8	; 0x08
    12de:	51 85       	ldd	r21, Z+9	; 0x09
	unsigned int x3 = blobs[6];
    12e0:	04 85       	ldd	r16, Z+12	; 0x0c
    12e2:	15 85       	ldd	r17, Z+13	; 0x0d
	unsigned int y3 = blobs[7];
    12e4:	26 85       	ldd	r18, Z+14	; 0x0e
    12e6:	37 85       	ldd	r19, Z+15	; 0x0f
	unsigned int x4 = blobs[9];
    12e8:	a2 89       	ldd	r26, Z+18	; 0x12
    12ea:	b3 89       	ldd	r27, Z+19	; 0x13
	unsigned int y4 = blobs[10];
    12ec:	84 89       	ldd	r24, Z+20	; 0x14
    12ee:	95 89       	ldd	r25, Z+21	; 0x15
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    12f0:	01 90       	ld	r0, Z+
    12f2:	f0 81       	ld	r31, Z
    12f4:	e0 2d       	mov	r30, r0
    12f6:	fa 83       	std	Y+2, r31	; 0x02
    12f8:	e9 83       	std	Y+1, r30	; 0x01
    12fa:	fc 82       	std	Y+4, r15	; 0x04
    12fc:	eb 82       	std	Y+3, r14	; 0x03
    12fe:	1e 83       	std	Y+6, r17	; 0x06
    1300:	0d 83       	std	Y+5, r16	; 0x05
    1302:	b8 87       	std	Y+8, r27	; 0x08
    1304:	af 83       	std	Y+7, r26	; 0x07
    1306:	7a 87       	std	Y+10, r23	; 0x0a
    1308:	69 87       	std	Y+9, r22	; 0x09
    130a:	5c 87       	std	Y+12, r21	; 0x0c
    130c:	4b 87       	std	Y+11, r20	; 0x0b
    130e:	3e 87       	std	Y+14, r19	; 0x0e
    1310:	2d 87       	std	Y+13, r18	; 0x0d
    1312:	98 8b       	std	Y+16, r25	; 0x10
    1314:	8f 87       	std	Y+15, r24	; 0x0f
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	71 e0       	ldi	r23, 0x01	; 1
    131a:	ce 01       	movw	r24, r28
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	0e 94 01 05 	call	0xa02	; 0xa02 <localization_calc>
    1322:	8c 01       	movw	r16, r24
    1324:	90 93 68 01 	sts	0x0168, r25
    1328:	80 93 67 01 	sts	0x0167, r24
	
	robotCenterPrev[2] = robotCenter[2];
    132c:	fc 01       	movw	r30, r24
    132e:	80 85       	ldd	r24, Z+8	; 0x08
    1330:	91 85       	ldd	r25, Z+9	; 0x09
    1332:	a2 85       	ldd	r26, Z+10	; 0x0a
    1334:	b3 85       	ldd	r27, Z+11	; 0x0b
    1336:	80 93 08 01 	sts	0x0108, r24
    133a:	90 93 09 01 	sts	0x0109, r25
    133e:	a0 93 0a 01 	sts	0x010A, r26
    1342:	b0 93 0b 01 	sts	0x010B, r27
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    1346:	60 85       	ldd	r22, Z+8	; 0x08
    1348:	71 85       	ldd	r23, Z+9	; 0x09
    134a:	82 85       	ldd	r24, Z+10	; 0x0a
    134c:	93 85       	ldd	r25, Z+11	; 0x0b
    134e:	0e 94 06 07 	call	0xe0c	; 0xe0c <theta_error_correction>
    1352:	6b 01       	movw	r12, r22
    1354:	7c 01       	movw	r14, r24
    1356:	f8 01       	movw	r30, r16
    1358:	60 87       	std	Z+8, r22	; 0x08
    135a:	71 87       	std	Z+9, r23	; 0x09
    135c:	82 87       	std	Z+10, r24	; 0x0a
    135e:	93 87       	std	Z+11, r25	; 0x0b
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    1360:	60 81       	ld	r22, Z
    1362:	71 81       	ldd	r23, Z+1	; 0x01
    1364:	82 81       	ldd	r24, Z+2	; 0x02
    1366:	93 81       	ldd	r25, Z+3	; 0x03
    1368:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__fixsfsi>
    136c:	4b 01       	movw	r8, r22
    136e:	5c 01       	movw	r10, r24
    1370:	60 91 60 01 	lds	r22, 0x0160
    1374:	70 91 61 01 	lds	r23, 0x0161
    1378:	80 91 62 01 	lds	r24, 0x0162
    137c:	90 91 63 01 	lds	r25, 0x0163
    1380:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__fixsfsi>
    1384:	94 01       	movw	r18, r8
    1386:	ab 01       	movw	r20, r22
    1388:	66 e6       	ldi	r22, 0x66	; 102
    138a:	76 e6       	ldi	r23, 0x66	; 102
    138c:	86 e6       	ldi	r24, 0x66	; 102
    138e:	9f e3       	ldi	r25, 0x3F	; 63
    1390:	0e 94 c3 06 	call	0xd86	; 0xd86 <lowpass>
    1394:	bc 01       	movw	r22, r24
    1396:	99 0f       	add	r25, r25
    1398:	88 0b       	sbc	r24, r24
    139a:	99 0b       	sbc	r25, r25
    139c:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
    13a0:	60 93 60 01 	sts	0x0160, r22
    13a4:	70 93 61 01 	sts	0x0161, r23
    13a8:	80 93 62 01 	sts	0x0162, r24
    13ac:	90 93 63 01 	sts	0x0163, r25
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    13b0:	f8 01       	movw	r30, r16
    13b2:	64 81       	ldd	r22, Z+4	; 0x04
    13b4:	75 81       	ldd	r23, Z+5	; 0x05
    13b6:	86 81       	ldd	r24, Z+6	; 0x06
    13b8:	97 81       	ldd	r25, Z+7	; 0x07
    13ba:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__fixsfsi>
    13be:	4b 01       	movw	r8, r22
    13c0:	5c 01       	movw	r10, r24
    13c2:	60 91 5c 01 	lds	r22, 0x015C
    13c6:	70 91 5d 01 	lds	r23, 0x015D
    13ca:	80 91 5e 01 	lds	r24, 0x015E
    13ce:	90 91 5f 01 	lds	r25, 0x015F
    13d2:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__fixsfsi>
    13d6:	94 01       	movw	r18, r8
    13d8:	ab 01       	movw	r20, r22
    13da:	66 e6       	ldi	r22, 0x66	; 102
    13dc:	76 e6       	ldi	r23, 0x66	; 102
    13de:	86 e6       	ldi	r24, 0x66	; 102
    13e0:	9f e3       	ldi	r25, 0x3F	; 63
    13e2:	0e 94 c3 06 	call	0xd86	; 0xd86 <lowpass>
    13e6:	bc 01       	movw	r22, r24
    13e8:	99 0f       	add	r25, r25
    13ea:	88 0b       	sbc	r24, r24
    13ec:	99 0b       	sbc	r25, r25
    13ee:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
    13f2:	60 93 5c 01 	sts	0x015C, r22
    13f6:	70 93 5d 01 	sts	0x015D, r23
    13fa:	80 93 5e 01 	sts	0x015E, r24
    13fe:	90 93 5f 01 	sts	0x015F, r25
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    1402:	c7 01       	movw	r24, r14
    1404:	b6 01       	movw	r22, r12
    1406:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__fixsfsi>
    140a:	6b 01       	movw	r12, r22
    140c:	7c 01       	movw	r14, r24
    140e:	60 91 58 01 	lds	r22, 0x0158
    1412:	70 91 59 01 	lds	r23, 0x0159
    1416:	80 91 5a 01 	lds	r24, 0x015A
    141a:	90 91 5b 01 	lds	r25, 0x015B
    141e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__fixsfsi>
    1422:	96 01       	movw	r18, r12
    1424:	ab 01       	movw	r20, r22
    1426:	66 e6       	ldi	r22, 0x66	; 102
    1428:	76 e6       	ldi	r23, 0x66	; 102
    142a:	86 e6       	ldi	r24, 0x66	; 102
    142c:	9f e3       	ldi	r25, 0x3F	; 63
    142e:	0e 94 c3 06 	call	0xd86	; 0xd86 <lowpass>
    1432:	bc 01       	movw	r22, r24
    1434:	99 0f       	add	r25, r25
    1436:	88 0b       	sbc	r24, r24
    1438:	99 0b       	sbc	r25, r25
    143a:	0e 94 25 10 	call	0x204a	; 0x204a <__floatsisf>
    143e:	60 93 58 01 	sts	0x0158, r22
    1442:	70 93 59 01 	sts	0x0159, r23
    1446:	80 93 5a 01 	sts	0x015A, r24
    144a:	90 93 5b 01 	sts	0x015B, r25
	
	if (check(TIFR3,OCF3A)){	// Check if timestep has completed
    144e:	c1 9b       	sbis	0x18, 1	; 24
    1450:	35 c0       	rjmp	.+106    	; 0x14bc <update_position+0x21c>
		set(TIFR3,OCF3A);		// Reset flag
    1452:	c1 9a       	sbi	0x18, 1	; 24
		theta_target = atan2(y_target-y,x_target-x); // Update theta target
    1454:	20 91 60 01 	lds	r18, 0x0160
    1458:	30 91 61 01 	lds	r19, 0x0161
    145c:	40 91 62 01 	lds	r20, 0x0162
    1460:	50 91 63 01 	lds	r21, 0x0163
    1464:	60 91 54 01 	lds	r22, 0x0154
    1468:	70 91 55 01 	lds	r23, 0x0155
    146c:	80 91 56 01 	lds	r24, 0x0156
    1470:	90 91 57 01 	lds	r25, 0x0157
    1474:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
    1478:	6b 01       	movw	r12, r22
    147a:	7c 01       	movw	r14, r24
    147c:	20 91 5c 01 	lds	r18, 0x015C
    1480:	30 91 5d 01 	lds	r19, 0x015D
    1484:	40 91 5e 01 	lds	r20, 0x015E
    1488:	50 91 5f 01 	lds	r21, 0x015F
    148c:	60 91 50 01 	lds	r22, 0x0150
    1490:	70 91 51 01 	lds	r23, 0x0151
    1494:	80 91 52 01 	lds	r24, 0x0152
    1498:	90 91 53 01 	lds	r25, 0x0153
    149c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
    14a0:	a7 01       	movw	r20, r14
    14a2:	96 01       	movw	r18, r12
    14a4:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <atan2>
    14a8:	60 93 4c 01 	sts	0x014C, r22
    14ac:	70 93 4d 01 	sts	0x014D, r23
    14b0:	80 93 4e 01 	sts	0x014E, r24
    14b4:	90 93 4f 01 	sts	0x014F, r25
		run_control_loop(); // Update control
    14b8:	0e 94 46 07 	call	0xe8c	; 0xe8c <run_control_loop>
	}
	
	robotCenterPrev[0] = x;
    14bc:	e0 e0       	ldi	r30, 0x00	; 0
    14be:	f1 e0       	ldi	r31, 0x01	; 1
    14c0:	80 91 60 01 	lds	r24, 0x0160
    14c4:	90 91 61 01 	lds	r25, 0x0161
    14c8:	a0 91 62 01 	lds	r26, 0x0162
    14cc:	b0 91 63 01 	lds	r27, 0x0163
    14d0:	80 83       	st	Z, r24
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	a2 83       	std	Z+2, r26	; 0x02
    14d6:	b3 83       	std	Z+3, r27	; 0x03
	robotCenterPrev[1] = y;
    14d8:	80 91 5c 01 	lds	r24, 0x015C
    14dc:	90 91 5d 01 	lds	r25, 0x015D
    14e0:	a0 91 5e 01 	lds	r26, 0x015E
    14e4:	b0 91 5f 01 	lds	r27, 0x015F
    14e8:	84 83       	std	Z+4, r24	; 0x04
    14ea:	95 83       	std	Z+5, r25	; 0x05
    14ec:	a6 83       	std	Z+6, r26	; 0x06
    14ee:	b7 83       	std	Z+7, r27	; 0x07
}
    14f0:	60 96       	adiw	r28, 0x10	; 16
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	ef 90       	pop	r14
    1508:	df 90       	pop	r13
    150a:	cf 90       	pop	r12
    150c:	bf 90       	pop	r11
    150e:	af 90       	pop	r10
    1510:	9f 90       	pop	r9
    1512:	8f 90       	pop	r8
    1514:	08 95       	ret

00001516 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
    1516:	6e 9a       	sbi	0x0d, 6	; 13
    1518:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	init();
    151a:	0e 94 2b 06 	call	0xc56	; 0xc56 <init>
}

/* Setup USB */
void usb_enable(void)
{
	m_usb_init();
    151e:	0e 94 cd 0a 	call	0x159a	; 0x159a <m_usb_init>
	m_red(ON);

	/* Initializations */
	init();
	usb_enable();
	timer1_init();
    1522:	0e 94 42 06 	call	0xc84	; 0xc84 <timer1_init>
	timer3_init();
    1526:	0e 94 a3 06 	call	0xd46	; 0xd46 <timer3_init>

	/* Confirm successful initialization(s) */
	m_green(ON);
    152a:	6a 9a       	sbi	0x0d, 2	; 13
    152c:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
    152e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <update_position>
	}
    1532:	fd cf       	rjmp	.-6      	; 0x152e <main+0x18>

00001534 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    1534:	1f 92       	push	r1
    1536:	0f 92       	push	r0
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	0f 92       	push	r0
    153c:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    153e:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable	
    1540:	2a 9a       	sbi	0x05, 2	; 5
}
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    1556:	28 98       	cbi	0x05, 0	; 5
}
    1558:	0f 90       	pop	r0
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	0f 90       	pop	r0
    155e:	1f 90       	pop	r1
    1560:	18 95       	reti

00001562 <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    1562:	1f 92       	push	r1
    1564:	0f 92       	push	r0
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	0f 92       	push	r0
    156a:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    156c:	2a 98       	cbi	0x05, 2	; 5
}
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	0f 90       	pop	r0
    1574:	1f 90       	pop	r1
    1576:	18 95       	reti

00001578 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    1578:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    157a:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    157c:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    157e:	8c e0       	ldi	r24, 0x0C	; 12
    1580:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    1584:	e9 e6       	ldi	r30, 0x69	; 105
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	80 62       	ori	r24, 0x20	; 32
    158c:	80 83       	st	Z, r24
    158e:	80 81       	ld	r24, Z
    1590:	8f 7e       	andi	r24, 0xEF	; 239
    1592:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1594:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    1596:	78 94       	sei
    1598:	08 95       	ret

0000159a <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    15a0:	80 ea       	ldi	r24, 0xA0	; 160
    15a2:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    15a6:	82 e1       	ldi	r24, 0x12	; 18
    15a8:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    15aa:	09 b4       	in	r0, 0x29	; 41
    15ac:	00 fe       	sbrs	r0, 0
    15ae:	fd cf       	rjmp	.-6      	; 0x15aa <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    15b0:	80 e9       	ldi	r24, 0x90	; 144
    15b2:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    15b6:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    15ba:	10 92 66 01 	sts	0x0166, r1
	cdc_line_rtsdtr = 0;
    15be:	10 92 64 01 	sts	0x0164, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    15c2:	8c e0       	ldi	r24, 0x0C	; 12
    15c4:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    15c8:	78 94       	sei
    15ca:	08 95       	ret

000015cc <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    15cc:	1f 92       	push	r1
    15ce:	0f 92       	push	r0
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	0f 92       	push	r0
    15d4:	11 24       	eor	r1, r1
    15d6:	8f 93       	push	r24
    15d8:	9f 93       	push	r25
    15da:	ef 93       	push	r30
    15dc:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    15de:	e1 ee       	ldi	r30, 0xE1	; 225
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
        UDINT = 0;
    15e4:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    15e6:	83 ff       	sbrs	r24, 3
    15e8:	11 c0       	rjmp	.+34     	; 0x160c <__vector_10+0x40>
		UENUM = 0;
    15ea:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    15ee:	91 e0       	ldi	r25, 0x01	; 1
    15f0:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    15f4:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    15f8:	92 e1       	ldi	r25, 0x12	; 18
    15fa:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    15fe:	98 e0       	ldi	r25, 0x08	; 8
    1600:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1604:	10 92 66 01 	sts	0x0166, r1
		cdc_line_rtsdtr = 0;
    1608:	10 92 64 01 	sts	0x0164, r1
        }
	if (intbits & (1<<SOFI)) {
    160c:	82 ff       	sbrs	r24, 2
    160e:	13 c0       	rjmp	.+38     	; 0x1636 <__vector_10+0x6a>
		if (usb_configuration) {
    1610:	80 91 66 01 	lds	r24, 0x0166
    1614:	88 23       	and	r24, r24
    1616:	79 f0       	breq	.+30     	; 0x1636 <__vector_10+0x6a>
			t = transmit_flush_timer;
    1618:	80 91 65 01 	lds	r24, 0x0165
			if (t) {
    161c:	88 23       	and	r24, r24
    161e:	59 f0       	breq	.+22     	; 0x1636 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1620:	81 50       	subi	r24, 0x01	; 1
    1622:	80 93 65 01 	sts	0x0165, r24
				if (!t) {
    1626:	81 11       	cpse	r24, r1
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    162a:	84 e0       	ldi	r24, 0x04	; 4
    162c:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1630:	8a e3       	ldi	r24, 0x3A	; 58
    1632:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1636:	ff 91       	pop	r31
    1638:	ef 91       	pop	r30
    163a:	9f 91       	pop	r25
    163c:	8f 91       	pop	r24
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	0f 90       	pop	r0
    1644:	1f 90       	pop	r1
    1646:	18 95       	reti

00001648 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1648:	1f 92       	push	r1
    164a:	0f 92       	push	r0
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	0f 92       	push	r0
    1650:	11 24       	eor	r1, r1
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	2f 93       	push	r18
    1658:	3f 93       	push	r19
    165a:	4f 93       	push	r20
    165c:	5f 93       	push	r21
    165e:	6f 93       	push	r22
    1660:	7f 93       	push	r23
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	af 93       	push	r26
    1668:	bf 93       	push	r27
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	ef 93       	push	r30
    1670:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1672:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1676:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    167a:	83 ff       	sbrs	r24, 3
    167c:	4c c1       	rjmp	.+664    	; 0x1916 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    167e:	e1 ef       	ldi	r30, 0xF1	; 241
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    1684:	80 81       	ld	r24, Z
                wValue = UEDATX;
    1686:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1688:	90 81       	ld	r25, Z
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    168e:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    1690:	90 81       	ld	r25, Z
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	59 2b       	or	r21, r25
                wLength = UEDATX;
    1696:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    1698:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    169a:	92 ef       	ldi	r25, 0xF2	; 242
    169c:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    16a0:	86 30       	cpi	r24, 0x06	; 6
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <__vector_11+0x5e>
    16a4:	58 c0       	rjmp	.+176    	; 0x1756 <__vector_11+0x10e>
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    16a8:	81 e2       	ldi	r24, 0x21	; 33
    16aa:	80 93 eb 00 	sts	0x00EB, r24
					return;
    16ae:	3a c1       	rjmp	.+628    	; 0x1924 <__vector_11+0x2dc>
    16b0:	66 e0       	ldi	r22, 0x06	; 6
    16b2:	88 ef       	ldi	r24, 0xF8	; 248
    16b4:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
    16b6:	fc 01       	movw	r30, r24
    16b8:	a5 91       	lpm	r26, Z+
    16ba:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    16bc:	2a 17       	cp	r18, r26
    16be:	3b 07       	cpc	r19, r27
    16c0:	11 f0       	breq	.+4      	; 0x16c6 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    16c2:	07 96       	adiw	r24, 0x07	; 7
					continue;
    16c4:	23 c0       	rjmp	.+70     	; 0x170c <__vector_11+0xc4>
				}
				list += 2;
    16c6:	fc 01       	movw	r30, r24
    16c8:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    16ca:	a5 91       	lpm	r26, Z+
    16cc:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    16ce:	4a 17       	cp	r20, r26
    16d0:	5b 07       	cpc	r21, r27
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    16d4:	07 96       	adiw	r24, 0x07	; 7
					continue;
    16d6:	1a c0       	rjmp	.+52     	; 0x170c <__vector_11+0xc4>
				}
				list += 2;
    16d8:	fc 01       	movw	r30, r24
    16da:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    16dc:	45 91       	lpm	r20, Z+
    16de:	54 91       	lpm	r21, Z
				list += 2;
    16e0:	fc 01       	movw	r30, r24
    16e2:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    16e4:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    16e6:	87 2f       	mov	r24, r23
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    16ec:	8f 3f       	cpi	r24, 0xFF	; 255
    16ee:	91 05       	cpc	r25, r1
    16f0:	19 f0       	breq	.+6      	; 0x16f8 <__vector_11+0xb0>
    16f2:	10 f0       	brcs	.+4      	; 0x16f8 <__vector_11+0xb0>
    16f4:	8f ef       	ldi	r24, 0xFF	; 255
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	82 17       	cp	r24, r18
    16fa:	08 f4       	brcc	.+2      	; 0x16fe <__vector_11+0xb6>
    16fc:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    16fe:	a8 ee       	ldi	r26, 0xE8	; 232
    1700:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1702:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1704:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1706:	c1 ef       	ldi	r28, 0xF1	; 241
    1708:	d0 e0       	ldi	r29, 0x00	; 0
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <__vector_11+0xca>
    170c:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    170e:	99 f6       	brne	.-90     	; 0x16b6 <__vector_11+0x6e>
    1710:	cb cf       	rjmp	.-106    	; 0x16a8 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1712:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1714:	98 2f       	mov	r25, r24
    1716:	95 70       	andi	r25, 0x05	; 5
    1718:	e1 f3       	breq	.-8      	; 0x1712 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    171a:	82 fd       	sbrc	r24, 2
    171c:	03 c1       	rjmp	.+518    	; 0x1924 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    171e:	32 2f       	mov	r19, r18
    1720:	21 31       	cpi	r18, 0x11	; 17
    1722:	08 f0       	brcs	.+2      	; 0x1726 <__vector_11+0xde>
    1724:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    1726:	33 23       	and	r19, r19
    1728:	09 f4       	brne	.+2      	; 0x172c <__vector_11+0xe4>
    172a:	f9 c0       	rjmp	.+498    	; 0x191e <__vector_11+0x2d6>
    172c:	fa 01       	movw	r30, r20
    172e:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    1730:	94 91       	lpm	r25, Z
    1732:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1734:	81 50       	subi	r24, 0x01	; 1
    1736:	31 96       	adiw	r30, 0x01	; 1
    1738:	81 11       	cpse	r24, r1
    173a:	fa cf       	rjmp	.-12     	; 0x1730 <__vector_11+0xe8>
    173c:	8f ef       	ldi	r24, 0xFF	; 255
    173e:	83 0f       	add	r24, r19
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	48 0f       	add	r20, r24
    1746:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1748:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    174a:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    174c:	21 11       	cpse	r18, r1
    174e:	e1 cf       	rjmp	.-62     	; 0x1712 <__vector_11+0xca>
    1750:	30 31       	cpi	r19, 0x10	; 16
    1752:	f9 f2       	breq	.-66     	; 0x1712 <__vector_11+0xca>
    1754:	e7 c0       	rjmp	.+462    	; 0x1924 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1756:	85 30       	cpi	r24, 0x05	; 5
    1758:	61 f4       	brne	.+24     	; 0x1772 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    175a:	8e ef       	ldi	r24, 0xFE	; 254
    175c:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1760:	e8 ee       	ldi	r30, 0xE8	; 232
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	80 ff       	sbrs	r24, 0
    1768:	fd cf       	rjmp	.-6      	; 0x1764 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    176a:	20 68       	ori	r18, 0x80	; 128
    176c:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1770:	d9 c0       	rjmp	.+434    	; 0x1924 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1772:	89 30       	cpi	r24, 0x09	; 9
    1774:	09 f0       	breq	.+2      	; 0x1778 <__vector_11+0x130>
    1776:	35 c0       	rjmp	.+106    	; 0x17e2 <__vector_11+0x19a>
    1778:	61 11       	cpse	r22, r1
    177a:	cd c0       	rjmp	.+410    	; 0x1916 <__vector_11+0x2ce>
			usb_configuration = wValue;
    177c:	20 93 66 01 	sts	0x0166, r18
			cdc_line_rtsdtr = 0;
    1780:	10 92 64 01 	sts	0x0164, r1
			transmit_flush_timer = 0;
    1784:	10 92 65 01 	sts	0x0165, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1788:	8e ef       	ldi	r24, 0xFE	; 254
    178a:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    178e:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1790:	21 ea       	ldi	r18, 0xA1	; 161
    1792:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1794:	c9 ee       	ldi	r28, 0xE9	; 233
    1796:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1798:	ab ee       	ldi	r26, 0xEB	; 235
    179a:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    179c:	0c ee       	ldi	r16, 0xEC	; 236
    179e:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    17a0:	6d ee       	ldi	r22, 0xED	; 237
    17a2:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    17a4:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    17a6:	a9 01       	movw	r20, r18
    17a8:	4f 5f       	subi	r20, 0xFF	; 255
    17aa:	5f 4f       	sbci	r21, 0xFF	; 255
    17ac:	f9 01       	movw	r30, r18
    17ae:	94 91       	lpm	r25, Z
				UECONX = en;
    17b0:	9c 93       	st	X, r25
				if (en) {
    17b2:	99 23       	and	r25, r25
    17b4:	61 f0       	breq	.+24     	; 0x17ce <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    17b6:	fa 01       	movw	r30, r20
    17b8:	44 91       	lpm	r20, Z
    17ba:	f8 01       	movw	r30, r16
    17bc:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    17be:	f9 01       	movw	r30, r18
    17c0:	32 96       	adiw	r30, 0x02	; 2
    17c2:	94 91       	lpm	r25, Z
    17c4:	2d 5f       	subi	r18, 0xFD	; 253
    17c6:	3f 4f       	sbci	r19, 0xFF	; 255
    17c8:	fb 01       	movw	r30, r22
    17ca:	90 83       	st	Z, r25
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    17ce:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    17d0:	8f 5f       	subi	r24, 0xFF	; 255
    17d2:	85 30       	cpi	r24, 0x05	; 5
    17d4:	39 f7       	brne	.-50     	; 0x17a4 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    17d6:	ea ee       	ldi	r30, 0xEA	; 234
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	8e e1       	ldi	r24, 0x1E	; 30
    17dc:	80 83       	st	Z, r24
        		UERST = 0;
    17de:	10 82       	st	Z, r1
			return;
    17e0:	a1 c0       	rjmp	.+322    	; 0x1924 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    17e2:	88 30       	cpi	r24, 0x08	; 8
    17e4:	81 f4       	brne	.+32     	; 0x1806 <__vector_11+0x1be>
    17e6:	60 38       	cpi	r22, 0x80	; 128
    17e8:	09 f0       	breq	.+2      	; 0x17ec <__vector_11+0x1a4>
    17ea:	95 c0       	rjmp	.+298    	; 0x1916 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    17ec:	e8 ee       	ldi	r30, 0xE8	; 232
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	80 ff       	sbrs	r24, 0
    17f4:	fd cf       	rjmp	.-6      	; 0x17f0 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    17f6:	80 91 66 01 	lds	r24, 0x0166
    17fa:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    17fe:	8e ef       	ldi	r24, 0xFE	; 254
    1800:	80 93 e8 00 	sts	0x00E8, r24
    1804:	8f c0       	rjmp	.+286    	; 0x1924 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1806:	81 32       	cpi	r24, 0x21	; 33
    1808:	b9 f4       	brne	.+46     	; 0x1838 <__vector_11+0x1f0>
    180a:	61 3a       	cpi	r22, 0xA1	; 161
    180c:	09 f0       	breq	.+2      	; 0x1810 <__vector_11+0x1c8>
    180e:	83 c0       	rjmp	.+262    	; 0x1916 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1810:	e8 ee       	ldi	r30, 0xE8	; 232
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	80 ff       	sbrs	r24, 0
    1818:	fd cf       	rjmp	.-6      	; 0x1814 <__vector_11+0x1cc>
    181a:	e4 e1       	ldi	r30, 0x14	; 20
    181c:	f1 e0       	ldi	r31, 0x01	; 1
    181e:	2b e1       	ldi	r18, 0x1B	; 27
    1820:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1822:	a1 ef       	ldi	r26, 0xF1	; 241
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	81 91       	ld	r24, Z+
    1828:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    182a:	e2 17       	cp	r30, r18
    182c:	f3 07       	cpc	r31, r19
    182e:	d9 f7       	brne	.-10     	; 0x1826 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1830:	8e ef       	ldi	r24, 0xFE	; 254
    1832:	80 93 e8 00 	sts	0x00E8, r24
    1836:	76 c0       	rjmp	.+236    	; 0x1924 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1838:	80 32       	cpi	r24, 0x20	; 32
    183a:	d1 f4       	brne	.+52     	; 0x1870 <__vector_11+0x228>
    183c:	61 32       	cpi	r22, 0x21	; 33
    183e:	09 f0       	breq	.+2      	; 0x1842 <__vector_11+0x1fa>
    1840:	6a c0       	rjmp	.+212    	; 0x1916 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1842:	e8 ee       	ldi	r30, 0xE8	; 232
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	82 ff       	sbrs	r24, 2
    184a:	fd cf       	rjmp	.-6      	; 0x1846 <__vector_11+0x1fe>
    184c:	e4 e1       	ldi	r30, 0x14	; 20
    184e:	f1 e0       	ldi	r31, 0x01	; 1
    1850:	2b e1       	ldi	r18, 0x1B	; 27
    1852:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1854:	a1 ef       	ldi	r26, 0xF1	; 241
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	8c 91       	ld	r24, X
    185a:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    185c:	e2 17       	cp	r30, r18
    185e:	f3 07       	cpc	r31, r19
    1860:	d9 f7       	brne	.-10     	; 0x1858 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1862:	e8 ee       	ldi	r30, 0xE8	; 232
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	8b ef       	ldi	r24, 0xFB	; 251
    1868:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    186a:	8e ef       	ldi	r24, 0xFE	; 254
    186c:	80 83       	st	Z, r24
    186e:	5a c0       	rjmp	.+180    	; 0x1924 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1870:	82 32       	cpi	r24, 0x22	; 34
    1872:	71 f4       	brne	.+28     	; 0x1890 <__vector_11+0x248>
    1874:	61 32       	cpi	r22, 0x21	; 33
    1876:	09 f0       	breq	.+2      	; 0x187a <__vector_11+0x232>
    1878:	4e c0       	rjmp	.+156    	; 0x1916 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    187a:	20 93 64 01 	sts	0x0164, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    187e:	e8 ee       	ldi	r30, 0xE8	; 232
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	80 ff       	sbrs	r24, 0
    1886:	fd cf       	rjmp	.-6      	; 0x1882 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1888:	8e ef       	ldi	r24, 0xFE	; 254
    188a:	80 93 e8 00 	sts	0x00E8, r24
    188e:	4a c0       	rjmp	.+148    	; 0x1924 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1890:	81 11       	cpse	r24, r1
    1892:	1a c0       	rjmp	.+52     	; 0x18c8 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1894:	e8 ee       	ldi	r30, 0xE8	; 232
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	80 ff       	sbrs	r24, 0
    189c:	fd cf       	rjmp	.-6      	; 0x1898 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    189e:	62 38       	cpi	r22, 0x82	; 130
    18a0:	51 f4       	brne	.+20     	; 0x18b6 <__vector_11+0x26e>
				UENUM = wIndex;
    18a2:	e9 ee       	ldi	r30, 0xE9	; 233
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    18a8:	80 91 eb 00 	lds	r24, 0x00EB
    18ac:	85 fb       	bst	r24, 5
    18ae:	88 27       	eor	r24, r24
    18b0:	80 f9       	bld	r24, 0
				UENUM = 0;
    18b2:	10 82       	st	Z, r1
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    18b6:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    18b8:	e1 ef       	ldi	r30, 0xF1	; 241
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 83       	st	Z, r24
			UEDATX = 0;
    18be:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18c0:	8e ef       	ldi	r24, 0xFE	; 254
    18c2:	80 93 e8 00 	sts	0x00E8, r24
    18c6:	2e c0       	rjmp	.+92     	; 0x1924 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    18c8:	98 2f       	mov	r25, r24
    18ca:	9d 7f       	andi	r25, 0xFD	; 253
    18cc:	91 30       	cpi	r25, 0x01	; 1
    18ce:	19 f5       	brne	.+70     	; 0x1916 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    18d0:	62 30       	cpi	r22, 0x02	; 2
    18d2:	09 f5       	brne	.+66     	; 0x1916 <__vector_11+0x2ce>
    18d4:	23 2b       	or	r18, r19
    18d6:	f9 f4       	brne	.+62     	; 0x1916 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    18d8:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    18da:	9f ef       	ldi	r25, 0xFF	; 255
    18dc:	94 0f       	add	r25, r20
    18de:	94 30       	cpi	r25, 0x04	; 4
    18e0:	d0 f4       	brcc	.+52     	; 0x1916 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18e2:	9e ef       	ldi	r25, 0xFE	; 254
    18e4:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    18e8:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    18ec:	83 30       	cpi	r24, 0x03	; 3
    18ee:	21 f4       	brne	.+8      	; 0x18f8 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    18f0:	81 e2       	ldi	r24, 0x21	; 33
    18f2:	80 93 eb 00 	sts	0x00EB, r24
    18f6:	16 c0       	rjmp	.+44     	; 0x1924 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    18f8:	89 e1       	ldi	r24, 0x19	; 25
    18fa:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <__vector_11+0x2c0>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	4a 95       	dec	r20
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <__vector_11+0x2bc>
    190c:	ea ee       	ldi	r30, 0xEA	; 234
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 83       	st	Z, r24
					UERST = 0;
    1912:	10 82       	st	Z, r1
    1914:	07 c0       	rjmp	.+14     	; 0x1924 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1916:	81 e2       	ldi	r24, 0x21	; 33
    1918:	80 93 eb 00 	sts	0x00EB, r24
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    191e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1920:	21 11       	cpse	r18, r1
    1922:	f7 ce       	rjmp	.-530    	; 0x1712 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1924:	ff 91       	pop	r31
    1926:	ef 91       	pop	r30
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	bf 91       	pop	r27
    192e:	af 91       	pop	r26
    1930:	9f 91       	pop	r25
    1932:	8f 91       	pop	r24
    1934:	7f 91       	pop	r23
    1936:	6f 91       	pop	r22
    1938:	5f 91       	pop	r21
    193a:	4f 91       	pop	r20
    193c:	3f 91       	pop	r19
    193e:	2f 91       	pop	r18
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	0f 90       	pop	r0
    194a:	1f 90       	pop	r1
    194c:	18 95       	reti

0000194e <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1952:	ec eb       	ldi	r30, 0xBC	; 188
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	88 23       	and	r24, r24
    195a:	34 f0       	brlt	.+12     	; 0x1968 <twi_wait+0x1a>
    195c:	2f 5f       	subi	r18, 0xFF	; 255
    195e:	3f 4f       	sbci	r19, 0xFF	; 255
    1960:	29 3e       	cpi	r18, 0xE9	; 233
    1962:	83 e0       	ldi	r24, 0x03	; 3
    1964:	38 07       	cpc	r19, r24
    1966:	b9 f7       	brne	.-18     	; 0x1956 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	28 3e       	cpi	r18, 0xE8	; 232
    196c:	33 40       	sbci	r19, 0x03	; 3
    196e:	09 f4       	brne	.+2      	; 0x1972 <twi_wait+0x24>
    1970:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1972:	08 95       	ret

00001974 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1974:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1978:	84 e8       	ldi	r24, 0x84	; 132
    197a:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    197e:	0e 94 a7 0c 	call	0x194e	; 0x194e <twi_wait>
    1982:	88 23       	and	r24, r24
    1984:	19 f0       	breq	.+6      	; 0x198c <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1986:	80 91 b9 00 	lds	r24, 0x00B9
    198a:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    198c:	08 95       	ret

0000198e <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    198e:	cf 93       	push	r28
    1990:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1992:	94 ea       	ldi	r25, 0xA4	; 164
    1994:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1998:	0e 94 a7 0c 	call	0x194e	; 0x194e <twi_wait>
    199c:	88 23       	and	r24, r24
    199e:	61 f0       	breq	.+24     	; 0x19b8 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    19a0:	8c 2f       	mov	r24, r28
    19a2:	88 0f       	add	r24, r24
    19a4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    19a8:	80 32       	cpi	r24, 0x20	; 32
    19aa:	29 f4       	brne	.+10     	; 0x19b6 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    19ac:	84 e9       	ldi	r24, 0x94	; 148
    19ae:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	01 c0       	rjmp	.+2      	; 0x19b8 <start_write+0x2a>
	}	
	return 1;	// success
    19b6:	81 e0       	ldi	r24, 0x01	; 1
}	
    19b8:	cf 91       	pop	r28
    19ba:	08 95       	ret

000019bc <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    19bc:	0e 94 bc 0a 	call	0x1578	; 0x1578 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    19c0:	88 e5       	ldi	r24, 0x58	; 88
    19c2:	0e 94 c7 0c 	call	0x198e	; 0x198e <start_write>
    19c6:	88 23       	and	r24, r24
    19c8:	09 f4       	brne	.+2      	; 0x19cc <m_wii_open+0x10>
    19ca:	cd c0       	rjmp	.+410    	; 0x1b66 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    19cc:	80 e3       	ldi	r24, 0x30	; 48
    19ce:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    19d2:	88 23       	and	r24, r24
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <m_wii_open+0x1c>
    19d6:	c9 c0       	rjmp	.+402    	; 0x1b6a <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    19de:	88 23       	and	r24, r24
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <m_wii_open+0x28>
    19e2:	c5 c0       	rjmp	.+394    	; 0x1b6e <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    19e4:	84 e9       	ldi	r24, 0x94	; 148
    19e6:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19ea:	83 ec       	ldi	r24, 0xC3	; 195
    19ec:	99 e0       	ldi	r25, 0x09	; 9
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <m_wii_open+0x32>
    19f2:	00 c0       	rjmp	.+0      	; 0x19f4 <m_wii_open+0x38>
    19f4:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    19f6:	88 e5       	ldi	r24, 0x58	; 88
    19f8:	0e 94 c7 0c 	call	0x198e	; 0x198e <start_write>
    19fc:	88 23       	and	r24, r24
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <m_wii_open+0x46>
    1a00:	b8 c0       	rjmp	.+368    	; 0x1b72 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1a08:	88 23       	and	r24, r24
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <m_wii_open+0x52>
    1a0c:	b4 c0       	rjmp	.+360    	; 0x1b76 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1a14:	88 23       	and	r24, r24
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <m_wii_open+0x5e>
    1a18:	b0 c0       	rjmp	.+352    	; 0x1b7a <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1a20:	88 23       	and	r24, r24
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <m_wii_open+0x6a>
    1a24:	ac c0       	rjmp	.+344    	; 0x1b7e <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1a2c:	88 23       	and	r24, r24
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <m_wii_open+0x76>
    1a30:	a8 c0       	rjmp	.+336    	; 0x1b82 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1a38:	88 23       	and	r24, r24
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <m_wii_open+0x82>
    1a3c:	a4 c0       	rjmp	.+328    	; 0x1b86 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1a44:	88 23       	and	r24, r24
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <m_wii_open+0x8e>
    1a48:	a0 c0       	rjmp	.+320    	; 0x1b8a <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1a50:	88 23       	and	r24, r24
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <m_wii_open+0x9a>
    1a54:	9c c0       	rjmp	.+312    	; 0x1b8e <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    1a56:	80 e9       	ldi	r24, 0x90	; 144
    1a58:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1a5c:	88 23       	and	r24, r24
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <m_wii_open+0xa6>
    1a60:	98 c0       	rjmp	.+304    	; 0x1b92 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1a62:	84 e9       	ldi	r24, 0x94	; 148
    1a64:	80 93 bc 00 	sts	0x00BC, r24
    1a68:	83 ec       	ldi	r24, 0xC3	; 195
    1a6a:	99 e0       	ldi	r25, 0x09	; 9
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <m_wii_open+0xb0>
    1a70:	00 c0       	rjmp	.+0      	; 0x1a72 <m_wii_open+0xb6>
    1a72:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1a74:	88 e5       	ldi	r24, 0x58	; 88
    1a76:	0e 94 c7 0c 	call	0x198e	; 0x198e <start_write>
    1a7a:	88 23       	and	r24, r24
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <m_wii_open+0xc4>
    1a7e:	8b c0       	rjmp	.+278    	; 0x1b96 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    1a80:	87 e0       	ldi	r24, 0x07	; 7
    1a82:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1a86:	88 23       	and	r24, r24
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <m_wii_open+0xd0>
    1a8a:	87 c0       	rjmp	.+270    	; 0x1b9a <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1a92:	88 23       	and	r24, r24
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <m_wii_open+0xdc>
    1a96:	83 c0       	rjmp	.+262    	; 0x1b9e <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    1a98:	81 e4       	ldi	r24, 0x41	; 65
    1a9a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1a9e:	88 23       	and	r24, r24
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <m_wii_open+0xe8>
    1aa2:	7f c0       	rjmp	.+254    	; 0x1ba2 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1aa4:	84 e9       	ldi	r24, 0x94	; 148
    1aa6:	80 93 bc 00 	sts	0x00BC, r24
    1aaa:	83 ec       	ldi	r24, 0xC3	; 195
    1aac:	99 e0       	ldi	r25, 0x09	; 9
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <m_wii_open+0xf2>
    1ab2:	00 c0       	rjmp	.+0      	; 0x1ab4 <m_wii_open+0xf8>
    1ab4:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1ab6:	88 e5       	ldi	r24, 0x58	; 88
    1ab8:	0e 94 c7 0c 	call	0x198e	; 0x198e <start_write>
    1abc:	88 23       	and	r24, r24
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <m_wii_open+0x106>
    1ac0:	72 c0       	rjmp	.+228    	; 0x1ba6 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    1ac2:	8a e1       	ldi	r24, 0x1A	; 26
    1ac4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1ac8:	88 23       	and	r24, r24
    1aca:	09 f4       	brne	.+2      	; 0x1ace <m_wii_open+0x112>
    1acc:	6e c0       	rjmp	.+220    	; 0x1baa <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    1ace:	80 e4       	ldi	r24, 0x40	; 64
    1ad0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1ad4:	88 23       	and	r24, r24
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <m_wii_open+0x11e>
    1ad8:	6a c0       	rjmp	.+212    	; 0x1bae <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1ae0:	88 23       	and	r24, r24
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <m_wii_open+0x12a>
    1ae4:	66 c0       	rjmp	.+204    	; 0x1bb2 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1ae6:	84 e9       	ldi	r24, 0x94	; 148
    1ae8:	80 93 bc 00 	sts	0x00BC, r24
    1aec:	83 ec       	ldi	r24, 0xC3	; 195
    1aee:	99 e0       	ldi	r25, 0x09	; 9
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <m_wii_open+0x134>
    1af4:	00 c0       	rjmp	.+0      	; 0x1af6 <m_wii_open+0x13a>
    1af6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1af8:	88 e5       	ldi	r24, 0x58	; 88
    1afa:	0e 94 c7 0c 	call	0x198e	; 0x198e <start_write>
    1afe:	88 23       	and	r24, r24
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <m_wii_open+0x148>
    1b02:	59 c0       	rjmp	.+178    	; 0x1bb6 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    1b04:	83 e3       	ldi	r24, 0x33	; 51
    1b06:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1b0a:	88 23       	and	r24, r24
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <m_wii_open+0x154>
    1b0e:	55 c0       	rjmp	.+170    	; 0x1bba <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    1b10:	83 e0       	ldi	r24, 0x03	; 3
    1b12:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1b16:	88 23       	and	r24, r24
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <m_wii_open+0x160>
    1b1a:	51 c0       	rjmp	.+162    	; 0x1bbe <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1b1c:	84 e9       	ldi	r24, 0x94	; 148
    1b1e:	80 93 bc 00 	sts	0x00BC, r24
    1b22:	83 ec       	ldi	r24, 0xC3	; 195
    1b24:	99 e0       	ldi	r25, 0x09	; 9
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <m_wii_open+0x16a>
    1b2a:	00 c0       	rjmp	.+0      	; 0x1b2c <m_wii_open+0x170>
    1b2c:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1b2e:	88 e5       	ldi	r24, 0x58	; 88
    1b30:	0e 94 c7 0c 	call	0x198e	; 0x198e <start_write>
    1b34:	88 23       	and	r24, r24
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <m_wii_open+0x17e>
    1b38:	44 c0       	rjmp	.+136    	; 0x1bc2 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    1b3a:	80 e3       	ldi	r24, 0x30	; 48
    1b3c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1b40:	88 23       	and	r24, r24
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <m_wii_open+0x18a>
    1b44:	40 c0       	rjmp	.+128    	; 0x1bc6 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    1b46:	88 e0       	ldi	r24, 0x08	; 8
    1b48:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1b4c:	88 23       	and	r24, r24
    1b4e:	e9 f1       	breq	.+122    	; 0x1bca <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1b50:	84 e9       	ldi	r24, 0x94	; 148
    1b52:	80 93 bc 00 	sts	0x00BC, r24
    1b56:	83 ec       	ldi	r24, 0xC3	; 195
    1b58:	99 e0       	ldi	r25, 0x09	; 9
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <m_wii_open+0x19e>
    1b5e:	00 c0       	rjmp	.+0      	; 0x1b60 <m_wii_open+0x1a4>
    1b60:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    1bca:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1bcc:	08 95       	ret

00001bce <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1bce:	cf 93       	push	r28
    1bd0:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1bd2:	84 ea       	ldi	r24, 0xA4	; 164
    1bd4:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    1bd8:	0e 94 a7 0c 	call	0x194e	; 0x194e <twi_wait>
    1bdc:	88 23       	and	r24, r24
    1bde:	69 f0       	breq	.+26     	; 0x1bfa <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1be0:	8c 2f       	mov	r24, r28
    1be2:	88 0f       	add	r24, r24
    1be4:	8f 5f       	subi	r24, 0xFF	; 255
    1be6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1bea:	88 34       	cpi	r24, 0x48	; 72
    1bec:	29 f4       	brne	.+10     	; 0x1bf8 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1bee:	84 e9       	ldi	r24, 0x94	; 148
    1bf0:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	01 c0       	rjmp	.+2      	; 0x1bfa <start_read+0x2c>
	}	
	return 1;	// success
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
}	
    1bfa:	cf 91       	pop	r28
    1bfc:	08 95       	ret

00001bfe <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	60 97       	sbiw	r28, 0x10	; 16
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1c18:	fe 01       	movw	r30, r28
    1c1a:	31 96       	adiw	r30, 0x01	; 1
    1c1c:	80 e1       	ldi	r24, 0x10	; 16
    1c1e:	df 01       	movw	r26, r30
    1c20:	1d 92       	st	X+, r1
    1c22:	8a 95       	dec	r24
    1c24:	e9 f7       	brne	.-6      	; 0x1c20 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1c26:	88 e5       	ldi	r24, 0x58	; 88
    1c28:	0e 94 c7 0c 	call	0x198e	; 0x198e <start_write>
    1c2c:	88 23       	and	r24, r24
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <m_wii_read+0x34>
    1c30:	69 c0       	rjmp	.+210    	; 0x1d04 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1c32:	86 e3       	ldi	r24, 0x36	; 54
    1c34:	0e 94 ba 0c 	call	0x1974	; 0x1974 <send_byte>
    1c38:	88 23       	and	r24, r24
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <m_wii_read+0x40>
    1c3c:	65 c0       	rjmp	.+202    	; 0x1d08 <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1c3e:	84 e9       	ldi	r24, 0x94	; 148
    1c40:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c44:	b8 e0       	ldi	r27, 0x08	; 8
    1c46:	ba 95       	dec	r27
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <m_wii_read+0x48>
    1c4a:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1c4c:	88 e5       	ldi	r24, 0x58	; 88
    1c4e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <start_read>
    1c52:	88 23       	and	r24, r24
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <m_wii_read+0x5a>
    1c56:	5a c0       	rjmp	.+180    	; 0x1d0c <m_wii_read+0x10e>
    1c58:	be 01       	movw	r22, r28
    1c5a:	6f 5f       	subi	r22, 0xFF	; 255
    1c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5e:	ae 01       	movw	r20, r28
    1c60:	40 5f       	subi	r20, 0xF0	; 240
    1c62:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1c64:	ec eb       	ldi	r30, 0xBC	; 188
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1c6a:	2b eb       	ldi	r18, 0xBB	; 187
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1c6e:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1c70:	90 81       	ld	r25, Z
    1c72:	99 23       	and	r25, r25
    1c74:	ec f7       	brge	.-6      	; 0x1c70 <m_wii_read+0x72>
		temp[i] = TWDR;
    1c76:	d9 01       	movw	r26, r18
    1c78:	9c 91       	ld	r25, X
    1c7a:	db 01       	movw	r26, r22
    1c7c:	9d 93       	st	X+, r25
    1c7e:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1c80:	a4 17       	cp	r26, r20
    1c82:	b5 07       	cpc	r27, r21
    1c84:	a1 f7       	brne	.-24     	; 0x1c6e <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1c86:	84 e8       	ldi	r24, 0x84	; 132
    1c88:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1c8c:	ec eb       	ldi	r30, 0xBC	; 188
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	88 23       	and	r24, r24
    1c94:	ec f7       	brge	.-6      	; 0x1c90 <m_wii_read+0x92>
	temp[15] = TWDR;
    1c96:	80 91 bb 00 	lds	r24, 0x00BB
    1c9a:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1c9c:	84 e9       	ldi	r24, 0x94	; 148
    1c9e:	80 93 bc 00 	sts	0x00BC, r24
    1ca2:	be 01       	movw	r22, r28
    1ca4:	6c 5f       	subi	r22, 0xFC	; 252
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	f8 01       	movw	r30, r16
    1caa:	08 5e       	subi	r16, 0xE8	; 232
    1cac:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1cae:	db 01       	movw	r26, r22
    1cb0:	2c 91       	ld	r18, X
    1cb2:	32 2f       	mov	r19, r18
    1cb4:	30 73       	andi	r19, 0x30	; 48
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	02 97       	sbiw	r24, 0x02	; 2
    1cba:	dc 01       	movw	r26, r24
    1cbc:	8c 91       	ld	r24, X
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	b0 e1       	ldi	r27, 0x10	; 16
    1cc2:	3b 9f       	mul	r19, r27
    1cc4:	80 0d       	add	r24, r0
    1cc6:	91 1d       	adc	r25, r1
    1cc8:	11 24       	eor	r1, r1
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1cce:	42 2f       	mov	r20, r18
    1cd0:	40 7c       	andi	r20, 0xC0	; 192
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	44 0f       	add	r20, r20
    1cd6:	55 1f       	adc	r21, r21
    1cd8:	44 0f       	add	r20, r20
    1cda:	55 1f       	adc	r21, r21
    1cdc:	cb 01       	movw	r24, r22
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	8c 91       	ld	r24, X
    1ce4:	48 0f       	add	r20, r24
    1ce6:	51 1d       	adc	r21, r1
    1ce8:	53 83       	std	Z+3, r21	; 0x03
    1cea:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1cec:	2f 70       	andi	r18, 0x0F	; 15
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	35 83       	std	Z+5, r19	; 0x05
    1cf2:	24 83       	std	Z+4, r18	; 0x04
    1cf4:	6d 5f       	subi	r22, 0xFD	; 253
    1cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf8:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1cfa:	e0 17       	cp	r30, r16
    1cfc:	f1 07       	cpc	r31, r17
    1cfe:	b9 f6       	brne	.-82     	; 0x1cae <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	05 c0       	rjmp	.+10     	; 0x1d0e <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    1d0e:	60 96       	adiw	r28, 0x10	; 16
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	08 95       	ret

00001d24 <__subsf3>:
    1d24:	50 58       	subi	r21, 0x80	; 128

00001d26 <__addsf3>:
    1d26:	bb 27       	eor	r27, r27
    1d28:	aa 27       	eor	r26, r26
    1d2a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__addsf3x>
    1d2e:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__fp_round>
    1d32:	0e 94 b4 10 	call	0x2168	; 0x2168 <__fp_pscA>
    1d36:	38 f0       	brcs	.+14     	; 0x1d46 <__addsf3+0x20>
    1d38:	0e 94 bb 10 	call	0x2176	; 0x2176 <__fp_pscB>
    1d3c:	20 f0       	brcs	.+8      	; 0x1d46 <__addsf3+0x20>
    1d3e:	39 f4       	brne	.+14     	; 0x1d4e <__addsf3+0x28>
    1d40:	9f 3f       	cpi	r25, 0xFF	; 255
    1d42:	19 f4       	brne	.+6      	; 0x1d4a <__addsf3+0x24>
    1d44:	26 f4       	brtc	.+8      	; 0x1d4e <__addsf3+0x28>
    1d46:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__fp_nan>
    1d4a:	0e f4       	brtc	.+2      	; 0x1d4e <__addsf3+0x28>
    1d4c:	e0 95       	com	r30
    1d4e:	e7 fb       	bst	r30, 7
    1d50:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__fp_inf>

00001d54 <__addsf3x>:
    1d54:	e9 2f       	mov	r30, r25
    1d56:	0e 94 12 11 	call	0x2224	; 0x2224 <__fp_split3>
    1d5a:	58 f3       	brcs	.-42     	; 0x1d32 <__addsf3+0xc>
    1d5c:	ba 17       	cp	r27, r26
    1d5e:	62 07       	cpc	r22, r18
    1d60:	73 07       	cpc	r23, r19
    1d62:	84 07       	cpc	r24, r20
    1d64:	95 07       	cpc	r25, r21
    1d66:	20 f0       	brcs	.+8      	; 0x1d70 <__addsf3x+0x1c>
    1d68:	79 f4       	brne	.+30     	; 0x1d88 <__addsf3x+0x34>
    1d6a:	a6 f5       	brtc	.+104    	; 0x1dd4 <__addsf3x+0x80>
    1d6c:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__fp_zero>
    1d70:	0e f4       	brtc	.+2      	; 0x1d74 <__addsf3x+0x20>
    1d72:	e0 95       	com	r30
    1d74:	0b 2e       	mov	r0, r27
    1d76:	ba 2f       	mov	r27, r26
    1d78:	a0 2d       	mov	r26, r0
    1d7a:	0b 01       	movw	r0, r22
    1d7c:	b9 01       	movw	r22, r18
    1d7e:	90 01       	movw	r18, r0
    1d80:	0c 01       	movw	r0, r24
    1d82:	ca 01       	movw	r24, r20
    1d84:	a0 01       	movw	r20, r0
    1d86:	11 24       	eor	r1, r1
    1d88:	ff 27       	eor	r31, r31
    1d8a:	59 1b       	sub	r21, r25
    1d8c:	99 f0       	breq	.+38     	; 0x1db4 <__addsf3x+0x60>
    1d8e:	59 3f       	cpi	r21, 0xF9	; 249
    1d90:	50 f4       	brcc	.+20     	; 0x1da6 <__addsf3x+0x52>
    1d92:	50 3e       	cpi	r21, 0xE0	; 224
    1d94:	68 f1       	brcs	.+90     	; 0x1df0 <__addsf3x+0x9c>
    1d96:	1a 16       	cp	r1, r26
    1d98:	f0 40       	sbci	r31, 0x00	; 0
    1d9a:	a2 2f       	mov	r26, r18
    1d9c:	23 2f       	mov	r18, r19
    1d9e:	34 2f       	mov	r19, r20
    1da0:	44 27       	eor	r20, r20
    1da2:	58 5f       	subi	r21, 0xF8	; 248
    1da4:	f3 cf       	rjmp	.-26     	; 0x1d8c <__addsf3x+0x38>
    1da6:	46 95       	lsr	r20
    1da8:	37 95       	ror	r19
    1daa:	27 95       	ror	r18
    1dac:	a7 95       	ror	r26
    1dae:	f0 40       	sbci	r31, 0x00	; 0
    1db0:	53 95       	inc	r21
    1db2:	c9 f7       	brne	.-14     	; 0x1da6 <__addsf3x+0x52>
    1db4:	7e f4       	brtc	.+30     	; 0x1dd4 <__addsf3x+0x80>
    1db6:	1f 16       	cp	r1, r31
    1db8:	ba 0b       	sbc	r27, r26
    1dba:	62 0b       	sbc	r22, r18
    1dbc:	73 0b       	sbc	r23, r19
    1dbe:	84 0b       	sbc	r24, r20
    1dc0:	ba f0       	brmi	.+46     	; 0x1df0 <__addsf3x+0x9c>
    1dc2:	91 50       	subi	r25, 0x01	; 1
    1dc4:	a1 f0       	breq	.+40     	; 0x1dee <__addsf3x+0x9a>
    1dc6:	ff 0f       	add	r31, r31
    1dc8:	bb 1f       	adc	r27, r27
    1dca:	66 1f       	adc	r22, r22
    1dcc:	77 1f       	adc	r23, r23
    1dce:	88 1f       	adc	r24, r24
    1dd0:	c2 f7       	brpl	.-16     	; 0x1dc2 <__addsf3x+0x6e>
    1dd2:	0e c0       	rjmp	.+28     	; 0x1df0 <__addsf3x+0x9c>
    1dd4:	ba 0f       	add	r27, r26
    1dd6:	62 1f       	adc	r22, r18
    1dd8:	73 1f       	adc	r23, r19
    1dda:	84 1f       	adc	r24, r20
    1ddc:	48 f4       	brcc	.+18     	; 0x1df0 <__addsf3x+0x9c>
    1dde:	87 95       	ror	r24
    1de0:	77 95       	ror	r23
    1de2:	67 95       	ror	r22
    1de4:	b7 95       	ror	r27
    1de6:	f7 95       	ror	r31
    1de8:	9e 3f       	cpi	r25, 0xFE	; 254
    1dea:	08 f0       	brcs	.+2      	; 0x1dee <__addsf3x+0x9a>
    1dec:	b0 cf       	rjmp	.-160    	; 0x1d4e <__addsf3+0x28>
    1dee:	93 95       	inc	r25
    1df0:	88 0f       	add	r24, r24
    1df2:	08 f0       	brcs	.+2      	; 0x1df6 <__addsf3x+0xa2>
    1df4:	99 27       	eor	r25, r25
    1df6:	ee 0f       	add	r30, r30
    1df8:	97 95       	ror	r25
    1dfa:	87 95       	ror	r24
    1dfc:	08 95       	ret
    1dfe:	0e 94 b4 10 	call	0x2168	; 0x2168 <__fp_pscA>
    1e02:	60 f0       	brcs	.+24     	; 0x1e1c <__addsf3x+0xc8>
    1e04:	80 e8       	ldi	r24, 0x80	; 128
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <__addsf3x+0xb8>
    1e0a:	9e ef       	ldi	r25, 0xFE	; 254
    1e0c:	0e 94 bb 10 	call	0x2176	; 0x2176 <__fp_pscB>
    1e10:	28 f0       	brcs	.+10     	; 0x1e1c <__addsf3x+0xc8>
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	51 e0       	ldi	r21, 0x01	; 1
    1e16:	71 f4       	brne	.+28     	; 0x1e34 <atan2+0x10>
    1e18:	5e ef       	ldi	r21, 0xFE	; 254
    1e1a:	0c c0       	rjmp	.+24     	; 0x1e34 <atan2+0x10>
    1e1c:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__fp_nan>
    1e20:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__fp_zero>

00001e24 <atan2>:
    1e24:	e9 2f       	mov	r30, r25
    1e26:	e0 78       	andi	r30, 0x80	; 128
    1e28:	0e 94 12 11 	call	0x2224	; 0x2224 <__fp_split3>
    1e2c:	40 f3       	brcs	.-48     	; 0x1dfe <__addsf3x+0xaa>
    1e2e:	09 2e       	mov	r0, r25
    1e30:	05 2a       	or	r0, r21
    1e32:	b1 f3       	breq	.-20     	; 0x1e20 <__addsf3x+0xcc>
    1e34:	26 17       	cp	r18, r22
    1e36:	37 07       	cpc	r19, r23
    1e38:	48 07       	cpc	r20, r24
    1e3a:	59 07       	cpc	r21, r25
    1e3c:	38 f0       	brcs	.+14     	; 0x1e4c <atan2+0x28>
    1e3e:	0e 2e       	mov	r0, r30
    1e40:	07 f8       	bld	r0, 7
    1e42:	e0 25       	eor	r30, r0
    1e44:	69 f0       	breq	.+26     	; 0x1e60 <atan2+0x3c>
    1e46:	e0 25       	eor	r30, r0
    1e48:	e0 64       	ori	r30, 0x40	; 64
    1e4a:	0a c0       	rjmp	.+20     	; 0x1e60 <atan2+0x3c>
    1e4c:	ef 63       	ori	r30, 0x3F	; 63
    1e4e:	07 f8       	bld	r0, 7
    1e50:	00 94       	com	r0
    1e52:	07 fa       	bst	r0, 7
    1e54:	db 01       	movw	r26, r22
    1e56:	b9 01       	movw	r22, r18
    1e58:	9d 01       	movw	r18, r26
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	ca 01       	movw	r24, r20
    1e5e:	ad 01       	movw	r20, r26
    1e60:	ef 93       	push	r30
    1e62:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__divsf3_pse>
    1e66:	0e 94 ed 10 	call	0x21da	; 0x21da <__fp_round>
    1e6a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <atan>
    1e6e:	5f 91       	pop	r21
    1e70:	55 23       	and	r21, r21
    1e72:	39 f0       	breq	.+14     	; 0x1e82 <atan2+0x5e>
    1e74:	2b ed       	ldi	r18, 0xDB	; 219
    1e76:	3f e0       	ldi	r19, 0x0F	; 15
    1e78:	49 e4       	ldi	r20, 0x49	; 73
    1e7a:	50 fd       	sbrc	r21, 0
    1e7c:	49 ec       	ldi	r20, 0xC9	; 201
    1e7e:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__addsf3>
    1e82:	08 95       	ret

00001e84 <atan>:
    1e84:	df 93       	push	r29
    1e86:	dd 27       	eor	r29, r29
    1e88:	b9 2f       	mov	r27, r25
    1e8a:	bf 77       	andi	r27, 0x7F	; 127
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	16 16       	cp	r1, r22
    1e92:	17 06       	cpc	r1, r23
    1e94:	48 07       	cpc	r20, r24
    1e96:	5b 07       	cpc	r21, r27
    1e98:	18 f4       	brcc	.+6      	; 0x1ea0 <atan+0x1c>
    1e9a:	d9 2f       	mov	r29, r25
    1e9c:	0e 94 40 11 	call	0x2280	; 0x2280 <inverse>
    1ea0:	9f 93       	push	r25
    1ea2:	8f 93       	push	r24
    1ea4:	7f 93       	push	r23
    1ea6:	6f 93       	push	r22
    1ea8:	0e 94 03 12 	call	0x2406	; 0x2406 <square>
    1eac:	ec ea       	ldi	r30, 0xAC	; 172
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	0e 94 8d 10 	call	0x211a	; 0x211a <__fp_powser>
    1eb4:	0e 94 ed 10 	call	0x21da	; 0x21da <__fp_round>
    1eb8:	2f 91       	pop	r18
    1eba:	3f 91       	pop	r19
    1ebc:	4f 91       	pop	r20
    1ebe:	5f 91       	pop	r21
    1ec0:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__mulsf3x>
    1ec4:	dd 23       	and	r29, r29
    1ec6:	51 f0       	breq	.+20     	; 0x1edc <atan+0x58>
    1ec8:	90 58       	subi	r25, 0x80	; 128
    1eca:	a2 ea       	ldi	r26, 0xA2	; 162
    1ecc:	2a ed       	ldi	r18, 0xDA	; 218
    1ece:	3f e0       	ldi	r19, 0x0F	; 15
    1ed0:	49 ec       	ldi	r20, 0xC9	; 201
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	d0 78       	andi	r29, 0x80	; 128
    1ed6:	5d 27       	eor	r21, r29
    1ed8:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__addsf3x>
    1edc:	df 91       	pop	r29
    1ede:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__fp_round>

00001ee2 <__cmpsf2>:
    1ee2:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__fp_cmp>
    1ee6:	08 f4       	brcc	.+2      	; 0x1eea <__cmpsf2+0x8>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	08 95       	ret

00001eec <cos>:
    1eec:	0e 94 c4 10 	call	0x2188	; 0x2188 <__fp_rempio2>
    1ef0:	e3 95       	inc	r30
    1ef2:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__fp_sinus>

00001ef6 <__divsf3>:
    1ef6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <__divsf3x>
    1efa:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__fp_round>
    1efe:	0e 94 bb 10 	call	0x2176	; 0x2176 <__fp_pscB>
    1f02:	58 f0       	brcs	.+22     	; 0x1f1a <__divsf3+0x24>
    1f04:	0e 94 b4 10 	call	0x2168	; 0x2168 <__fp_pscA>
    1f08:	40 f0       	brcs	.+16     	; 0x1f1a <__divsf3+0x24>
    1f0a:	29 f4       	brne	.+10     	; 0x1f16 <__divsf3+0x20>
    1f0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f0e:	29 f0       	breq	.+10     	; 0x1f1a <__divsf3+0x24>
    1f10:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__fp_inf>
    1f14:	51 11       	cpse	r21, r1
    1f16:	0c 94 35 11 	jmp	0x226a	; 0x226a <__fp_szero>
    1f1a:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__fp_nan>

00001f1e <__divsf3x>:
    1f1e:	0e 94 12 11 	call	0x2224	; 0x2224 <__fp_split3>
    1f22:	68 f3       	brcs	.-38     	; 0x1efe <__divsf3+0x8>

00001f24 <__divsf3_pse>:
    1f24:	99 23       	and	r25, r25
    1f26:	b1 f3       	breq	.-20     	; 0x1f14 <__divsf3+0x1e>
    1f28:	55 23       	and	r21, r21
    1f2a:	91 f3       	breq	.-28     	; 0x1f10 <__divsf3+0x1a>
    1f2c:	95 1b       	sub	r25, r21
    1f2e:	55 0b       	sbc	r21, r21
    1f30:	bb 27       	eor	r27, r27
    1f32:	aa 27       	eor	r26, r26
    1f34:	62 17       	cp	r22, r18
    1f36:	73 07       	cpc	r23, r19
    1f38:	84 07       	cpc	r24, r20
    1f3a:	38 f0       	brcs	.+14     	; 0x1f4a <__divsf3_pse+0x26>
    1f3c:	9f 5f       	subi	r25, 0xFF	; 255
    1f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f40:	22 0f       	add	r18, r18
    1f42:	33 1f       	adc	r19, r19
    1f44:	44 1f       	adc	r20, r20
    1f46:	aa 1f       	adc	r26, r26
    1f48:	a9 f3       	breq	.-22     	; 0x1f34 <__divsf3_pse+0x10>
    1f4a:	35 d0       	rcall	.+106    	; 0x1fb6 <__divsf3_pse+0x92>
    1f4c:	0e 2e       	mov	r0, r30
    1f4e:	3a f0       	brmi	.+14     	; 0x1f5e <__divsf3_pse+0x3a>
    1f50:	e0 e8       	ldi	r30, 0x80	; 128
    1f52:	32 d0       	rcall	.+100    	; 0x1fb8 <__divsf3_pse+0x94>
    1f54:	91 50       	subi	r25, 0x01	; 1
    1f56:	50 40       	sbci	r21, 0x00	; 0
    1f58:	e6 95       	lsr	r30
    1f5a:	00 1c       	adc	r0, r0
    1f5c:	ca f7       	brpl	.-14     	; 0x1f50 <__divsf3_pse+0x2c>
    1f5e:	2b d0       	rcall	.+86     	; 0x1fb6 <__divsf3_pse+0x92>
    1f60:	fe 2f       	mov	r31, r30
    1f62:	29 d0       	rcall	.+82     	; 0x1fb6 <__divsf3_pse+0x92>
    1f64:	66 0f       	add	r22, r22
    1f66:	77 1f       	adc	r23, r23
    1f68:	88 1f       	adc	r24, r24
    1f6a:	bb 1f       	adc	r27, r27
    1f6c:	26 17       	cp	r18, r22
    1f6e:	37 07       	cpc	r19, r23
    1f70:	48 07       	cpc	r20, r24
    1f72:	ab 07       	cpc	r26, r27
    1f74:	b0 e8       	ldi	r27, 0x80	; 128
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <__divsf3_pse+0x56>
    1f78:	bb 0b       	sbc	r27, r27
    1f7a:	80 2d       	mov	r24, r0
    1f7c:	bf 01       	movw	r22, r30
    1f7e:	ff 27       	eor	r31, r31
    1f80:	93 58       	subi	r25, 0x83	; 131
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255
    1f84:	3a f0       	brmi	.+14     	; 0x1f94 <__divsf3_pse+0x70>
    1f86:	9e 3f       	cpi	r25, 0xFE	; 254
    1f88:	51 05       	cpc	r21, r1
    1f8a:	78 f0       	brcs	.+30     	; 0x1faa <__divsf3_pse+0x86>
    1f8c:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__fp_inf>
    1f90:	0c 94 35 11 	jmp	0x226a	; 0x226a <__fp_szero>
    1f94:	5f 3f       	cpi	r21, 0xFF	; 255
    1f96:	e4 f3       	brlt	.-8      	; 0x1f90 <__divsf3_pse+0x6c>
    1f98:	98 3e       	cpi	r25, 0xE8	; 232
    1f9a:	d4 f3       	brlt	.-12     	; 0x1f90 <__divsf3_pse+0x6c>
    1f9c:	86 95       	lsr	r24
    1f9e:	77 95       	ror	r23
    1fa0:	67 95       	ror	r22
    1fa2:	b7 95       	ror	r27
    1fa4:	f7 95       	ror	r31
    1fa6:	9f 5f       	subi	r25, 0xFF	; 255
    1fa8:	c9 f7       	brne	.-14     	; 0x1f9c <__divsf3_pse+0x78>
    1faa:	88 0f       	add	r24, r24
    1fac:	91 1d       	adc	r25, r1
    1fae:	96 95       	lsr	r25
    1fb0:	87 95       	ror	r24
    1fb2:	97 f9       	bld	r25, 7
    1fb4:	08 95       	ret
    1fb6:	e1 e0       	ldi	r30, 0x01	; 1
    1fb8:	66 0f       	add	r22, r22
    1fba:	77 1f       	adc	r23, r23
    1fbc:	88 1f       	adc	r24, r24
    1fbe:	bb 1f       	adc	r27, r27
    1fc0:	62 17       	cp	r22, r18
    1fc2:	73 07       	cpc	r23, r19
    1fc4:	84 07       	cpc	r24, r20
    1fc6:	ba 07       	cpc	r27, r26
    1fc8:	20 f0       	brcs	.+8      	; 0x1fd2 <__divsf3_pse+0xae>
    1fca:	62 1b       	sub	r22, r18
    1fcc:	73 0b       	sbc	r23, r19
    1fce:	84 0b       	sbc	r24, r20
    1fd0:	ba 0b       	sbc	r27, r26
    1fd2:	ee 1f       	adc	r30, r30
    1fd4:	88 f7       	brcc	.-30     	; 0x1fb8 <__divsf3_pse+0x94>
    1fd6:	e0 95       	com	r30
    1fd8:	08 95       	ret

00001fda <__fixsfsi>:
    1fda:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__fixunssfsi>
    1fde:	68 94       	set
    1fe0:	b1 11       	cpse	r27, r1
    1fe2:	0c 94 35 11 	jmp	0x226a	; 0x226a <__fp_szero>
    1fe6:	08 95       	ret

00001fe8 <__fixunssfsi>:
    1fe8:	0e 94 1a 11 	call	0x2234	; 0x2234 <__fp_splitA>
    1fec:	88 f0       	brcs	.+34     	; 0x2010 <__fixunssfsi+0x28>
    1fee:	9f 57       	subi	r25, 0x7F	; 127
    1ff0:	98 f0       	brcs	.+38     	; 0x2018 <__fixunssfsi+0x30>
    1ff2:	b9 2f       	mov	r27, r25
    1ff4:	99 27       	eor	r25, r25
    1ff6:	b7 51       	subi	r27, 0x17	; 23
    1ff8:	b0 f0       	brcs	.+44     	; 0x2026 <__fixunssfsi+0x3e>
    1ffa:	e1 f0       	breq	.+56     	; 0x2034 <__fixunssfsi+0x4c>
    1ffc:	66 0f       	add	r22, r22
    1ffe:	77 1f       	adc	r23, r23
    2000:	88 1f       	adc	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	1a f0       	brmi	.+6      	; 0x200c <__fixunssfsi+0x24>
    2006:	ba 95       	dec	r27
    2008:	c9 f7       	brne	.-14     	; 0x1ffc <__fixunssfsi+0x14>
    200a:	14 c0       	rjmp	.+40     	; 0x2034 <__fixunssfsi+0x4c>
    200c:	b1 30       	cpi	r27, 0x01	; 1
    200e:	91 f0       	breq	.+36     	; 0x2034 <__fixunssfsi+0x4c>
    2010:	0e 94 34 11 	call	0x2268	; 0x2268 <__fp_zero>
    2014:	b1 e0       	ldi	r27, 0x01	; 1
    2016:	08 95       	ret
    2018:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__fp_zero>
    201c:	67 2f       	mov	r22, r23
    201e:	78 2f       	mov	r23, r24
    2020:	88 27       	eor	r24, r24
    2022:	b8 5f       	subi	r27, 0xF8	; 248
    2024:	39 f0       	breq	.+14     	; 0x2034 <__fixunssfsi+0x4c>
    2026:	b9 3f       	cpi	r27, 0xF9	; 249
    2028:	cc f3       	brlt	.-14     	; 0x201c <__fixunssfsi+0x34>
    202a:	86 95       	lsr	r24
    202c:	77 95       	ror	r23
    202e:	67 95       	ror	r22
    2030:	b3 95       	inc	r27
    2032:	d9 f7       	brne	.-10     	; 0x202a <__fixunssfsi+0x42>
    2034:	3e f4       	brtc	.+14     	; 0x2044 <__fixunssfsi+0x5c>
    2036:	90 95       	com	r25
    2038:	80 95       	com	r24
    203a:	70 95       	com	r23
    203c:	61 95       	neg	r22
    203e:	7f 4f       	sbci	r23, 0xFF	; 255
    2040:	8f 4f       	sbci	r24, 0xFF	; 255
    2042:	9f 4f       	sbci	r25, 0xFF	; 255
    2044:	08 95       	ret

00002046 <__floatunsisf>:
    2046:	e8 94       	clt
    2048:	09 c0       	rjmp	.+18     	; 0x205c <__floatsisf+0x12>

0000204a <__floatsisf>:
    204a:	97 fb       	bst	r25, 7
    204c:	3e f4       	brtc	.+14     	; 0x205c <__floatsisf+0x12>
    204e:	90 95       	com	r25
    2050:	80 95       	com	r24
    2052:	70 95       	com	r23
    2054:	61 95       	neg	r22
    2056:	7f 4f       	sbci	r23, 0xFF	; 255
    2058:	8f 4f       	sbci	r24, 0xFF	; 255
    205a:	9f 4f       	sbci	r25, 0xFF	; 255
    205c:	99 23       	and	r25, r25
    205e:	a9 f0       	breq	.+42     	; 0x208a <__floatsisf+0x40>
    2060:	f9 2f       	mov	r31, r25
    2062:	96 e9       	ldi	r25, 0x96	; 150
    2064:	bb 27       	eor	r27, r27
    2066:	93 95       	inc	r25
    2068:	f6 95       	lsr	r31
    206a:	87 95       	ror	r24
    206c:	77 95       	ror	r23
    206e:	67 95       	ror	r22
    2070:	b7 95       	ror	r27
    2072:	f1 11       	cpse	r31, r1
    2074:	f8 cf       	rjmp	.-16     	; 0x2066 <__floatsisf+0x1c>
    2076:	fa f4       	brpl	.+62     	; 0x20b6 <__floatsisf+0x6c>
    2078:	bb 0f       	add	r27, r27
    207a:	11 f4       	brne	.+4      	; 0x2080 <__floatsisf+0x36>
    207c:	60 ff       	sbrs	r22, 0
    207e:	1b c0       	rjmp	.+54     	; 0x20b6 <__floatsisf+0x6c>
    2080:	6f 5f       	subi	r22, 0xFF	; 255
    2082:	7f 4f       	sbci	r23, 0xFF	; 255
    2084:	8f 4f       	sbci	r24, 0xFF	; 255
    2086:	9f 4f       	sbci	r25, 0xFF	; 255
    2088:	16 c0       	rjmp	.+44     	; 0x20b6 <__floatsisf+0x6c>
    208a:	88 23       	and	r24, r24
    208c:	11 f0       	breq	.+4      	; 0x2092 <__floatsisf+0x48>
    208e:	96 e9       	ldi	r25, 0x96	; 150
    2090:	11 c0       	rjmp	.+34     	; 0x20b4 <__floatsisf+0x6a>
    2092:	77 23       	and	r23, r23
    2094:	21 f0       	breq	.+8      	; 0x209e <__floatsisf+0x54>
    2096:	9e e8       	ldi	r25, 0x8E	; 142
    2098:	87 2f       	mov	r24, r23
    209a:	76 2f       	mov	r23, r22
    209c:	05 c0       	rjmp	.+10     	; 0x20a8 <__floatsisf+0x5e>
    209e:	66 23       	and	r22, r22
    20a0:	71 f0       	breq	.+28     	; 0x20be <__floatsisf+0x74>
    20a2:	96 e8       	ldi	r25, 0x86	; 134
    20a4:	86 2f       	mov	r24, r22
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	60 e0       	ldi	r22, 0x00	; 0
    20aa:	2a f0       	brmi	.+10     	; 0x20b6 <__floatsisf+0x6c>
    20ac:	9a 95       	dec	r25
    20ae:	66 0f       	add	r22, r22
    20b0:	77 1f       	adc	r23, r23
    20b2:	88 1f       	adc	r24, r24
    20b4:	da f7       	brpl	.-10     	; 0x20ac <__floatsisf+0x62>
    20b6:	88 0f       	add	r24, r24
    20b8:	96 95       	lsr	r25
    20ba:	87 95       	ror	r24
    20bc:	97 f9       	bld	r25, 7
    20be:	08 95       	ret

000020c0 <__fp_cmp>:
    20c0:	99 0f       	add	r25, r25
    20c2:	00 08       	sbc	r0, r0
    20c4:	55 0f       	add	r21, r21
    20c6:	aa 0b       	sbc	r26, r26
    20c8:	e0 e8       	ldi	r30, 0x80	; 128
    20ca:	fe ef       	ldi	r31, 0xFE	; 254
    20cc:	16 16       	cp	r1, r22
    20ce:	17 06       	cpc	r1, r23
    20d0:	e8 07       	cpc	r30, r24
    20d2:	f9 07       	cpc	r31, r25
    20d4:	c0 f0       	brcs	.+48     	; 0x2106 <__fp_cmp+0x46>
    20d6:	12 16       	cp	r1, r18
    20d8:	13 06       	cpc	r1, r19
    20da:	e4 07       	cpc	r30, r20
    20dc:	f5 07       	cpc	r31, r21
    20de:	98 f0       	brcs	.+38     	; 0x2106 <__fp_cmp+0x46>
    20e0:	62 1b       	sub	r22, r18
    20e2:	73 0b       	sbc	r23, r19
    20e4:	84 0b       	sbc	r24, r20
    20e6:	95 0b       	sbc	r25, r21
    20e8:	39 f4       	brne	.+14     	; 0x20f8 <__fp_cmp+0x38>
    20ea:	0a 26       	eor	r0, r26
    20ec:	61 f0       	breq	.+24     	; 0x2106 <__fp_cmp+0x46>
    20ee:	23 2b       	or	r18, r19
    20f0:	24 2b       	or	r18, r20
    20f2:	25 2b       	or	r18, r21
    20f4:	21 f4       	brne	.+8      	; 0x20fe <__fp_cmp+0x3e>
    20f6:	08 95       	ret
    20f8:	0a 26       	eor	r0, r26
    20fa:	09 f4       	brne	.+2      	; 0x20fe <__fp_cmp+0x3e>
    20fc:	a1 40       	sbci	r26, 0x01	; 1
    20fe:	a6 95       	lsr	r26
    2100:	8f ef       	ldi	r24, 0xFF	; 255
    2102:	81 1d       	adc	r24, r1
    2104:	81 1d       	adc	r24, r1
    2106:	08 95       	ret

00002108 <__fp_inf>:
    2108:	97 f9       	bld	r25, 7
    210a:	9f 67       	ori	r25, 0x7F	; 127
    210c:	80 e8       	ldi	r24, 0x80	; 128
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	08 95       	ret

00002114 <__fp_nan>:
    2114:	9f ef       	ldi	r25, 0xFF	; 255
    2116:	80 ec       	ldi	r24, 0xC0	; 192
    2118:	08 95       	ret

0000211a <__fp_powser>:
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	1f 93       	push	r17
    2120:	0f 93       	push	r16
    2122:	ff 92       	push	r15
    2124:	ef 92       	push	r14
    2126:	df 92       	push	r13
    2128:	7b 01       	movw	r14, r22
    212a:	8c 01       	movw	r16, r24
    212c:	68 94       	set
    212e:	06 c0       	rjmp	.+12     	; 0x213c <__fp_powser+0x22>
    2130:	da 2e       	mov	r13, r26
    2132:	ef 01       	movw	r28, r30
    2134:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__mulsf3x>
    2138:	fe 01       	movw	r30, r28
    213a:	e8 94       	clt
    213c:	a5 91       	lpm	r26, Z+
    213e:	25 91       	lpm	r18, Z+
    2140:	35 91       	lpm	r19, Z+
    2142:	45 91       	lpm	r20, Z+
    2144:	55 91       	lpm	r21, Z+
    2146:	a6 f3       	brts	.-24     	; 0x2130 <__fp_powser+0x16>
    2148:	ef 01       	movw	r28, r30
    214a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__addsf3x>
    214e:	fe 01       	movw	r30, r28
    2150:	97 01       	movw	r18, r14
    2152:	a8 01       	movw	r20, r16
    2154:	da 94       	dec	r13
    2156:	69 f7       	brne	.-38     	; 0x2132 <__fp_powser+0x18>
    2158:	df 90       	pop	r13
    215a:	ef 90       	pop	r14
    215c:	ff 90       	pop	r15
    215e:	0f 91       	pop	r16
    2160:	1f 91       	pop	r17
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <__fp_pscA>:
    2168:	00 24       	eor	r0, r0
    216a:	0a 94       	dec	r0
    216c:	16 16       	cp	r1, r22
    216e:	17 06       	cpc	r1, r23
    2170:	18 06       	cpc	r1, r24
    2172:	09 06       	cpc	r0, r25
    2174:	08 95       	ret

00002176 <__fp_pscB>:
    2176:	00 24       	eor	r0, r0
    2178:	0a 94       	dec	r0
    217a:	12 16       	cp	r1, r18
    217c:	13 06       	cpc	r1, r19
    217e:	14 06       	cpc	r1, r20
    2180:	05 06       	cpc	r0, r21
    2182:	08 95       	ret
    2184:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__fp_nan>

00002188 <__fp_rempio2>:
    2188:	0e 94 1a 11 	call	0x2234	; 0x2234 <__fp_splitA>
    218c:	d8 f3       	brcs	.-10     	; 0x2184 <__fp_pscB+0xe>
    218e:	e8 94       	clt
    2190:	e0 e0       	ldi	r30, 0x00	; 0
    2192:	bb 27       	eor	r27, r27
    2194:	9f 57       	subi	r25, 0x7F	; 127
    2196:	f0 f0       	brcs	.+60     	; 0x21d4 <__fp_rempio2+0x4c>
    2198:	2a ed       	ldi	r18, 0xDA	; 218
    219a:	3f e0       	ldi	r19, 0x0F	; 15
    219c:	49 ec       	ldi	r20, 0xC9	; 201
    219e:	06 c0       	rjmp	.+12     	; 0x21ac <__fp_rempio2+0x24>
    21a0:	ee 0f       	add	r30, r30
    21a2:	bb 0f       	add	r27, r27
    21a4:	66 1f       	adc	r22, r22
    21a6:	77 1f       	adc	r23, r23
    21a8:	88 1f       	adc	r24, r24
    21aa:	28 f0       	brcs	.+10     	; 0x21b6 <__fp_rempio2+0x2e>
    21ac:	b2 3a       	cpi	r27, 0xA2	; 162
    21ae:	62 07       	cpc	r22, r18
    21b0:	73 07       	cpc	r23, r19
    21b2:	84 07       	cpc	r24, r20
    21b4:	28 f0       	brcs	.+10     	; 0x21c0 <__fp_rempio2+0x38>
    21b6:	b2 5a       	subi	r27, 0xA2	; 162
    21b8:	62 0b       	sbc	r22, r18
    21ba:	73 0b       	sbc	r23, r19
    21bc:	84 0b       	sbc	r24, r20
    21be:	e3 95       	inc	r30
    21c0:	9a 95       	dec	r25
    21c2:	72 f7       	brpl	.-36     	; 0x21a0 <__fp_rempio2+0x18>
    21c4:	80 38       	cpi	r24, 0x80	; 128
    21c6:	30 f4       	brcc	.+12     	; 0x21d4 <__fp_rempio2+0x4c>
    21c8:	9a 95       	dec	r25
    21ca:	bb 0f       	add	r27, r27
    21cc:	66 1f       	adc	r22, r22
    21ce:	77 1f       	adc	r23, r23
    21d0:	88 1f       	adc	r24, r24
    21d2:	d2 f7       	brpl	.-12     	; 0x21c8 <__fp_rempio2+0x40>
    21d4:	90 48       	sbci	r25, 0x80	; 128
    21d6:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__fp_mpack_finite>

000021da <__fp_round>:
    21da:	09 2e       	mov	r0, r25
    21dc:	03 94       	inc	r0
    21de:	00 0c       	add	r0, r0
    21e0:	11 f4       	brne	.+4      	; 0x21e6 <__fp_round+0xc>
    21e2:	88 23       	and	r24, r24
    21e4:	52 f0       	brmi	.+20     	; 0x21fa <__fp_round+0x20>
    21e6:	bb 0f       	add	r27, r27
    21e8:	40 f4       	brcc	.+16     	; 0x21fa <__fp_round+0x20>
    21ea:	bf 2b       	or	r27, r31
    21ec:	11 f4       	brne	.+4      	; 0x21f2 <__fp_round+0x18>
    21ee:	60 ff       	sbrs	r22, 0
    21f0:	04 c0       	rjmp	.+8      	; 0x21fa <__fp_round+0x20>
    21f2:	6f 5f       	subi	r22, 0xFF	; 255
    21f4:	7f 4f       	sbci	r23, 0xFF	; 255
    21f6:	8f 4f       	sbci	r24, 0xFF	; 255
    21f8:	9f 4f       	sbci	r25, 0xFF	; 255
    21fa:	08 95       	ret

000021fc <__fp_sinus>:
    21fc:	ef 93       	push	r30
    21fe:	e0 ff       	sbrs	r30, 0
    2200:	07 c0       	rjmp	.+14     	; 0x2210 <__fp_sinus+0x14>
    2202:	a2 ea       	ldi	r26, 0xA2	; 162
    2204:	2a ed       	ldi	r18, 0xDA	; 218
    2206:	3f e0       	ldi	r19, 0x0F	; 15
    2208:	49 ec       	ldi	r20, 0xC9	; 201
    220a:	5f eb       	ldi	r21, 0xBF	; 191
    220c:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__addsf3x>
    2210:	0e 94 ed 10 	call	0x21da	; 0x21da <__fp_round>
    2214:	0f 90       	pop	r0
    2216:	03 94       	inc	r0
    2218:	01 fc       	sbrc	r0, 1
    221a:	90 58       	subi	r25, 0x80	; 128
    221c:	e9 ed       	ldi	r30, 0xD9	; 217
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__fp_powsodd>

00002224 <__fp_split3>:
    2224:	57 fd       	sbrc	r21, 7
    2226:	90 58       	subi	r25, 0x80	; 128
    2228:	44 0f       	add	r20, r20
    222a:	55 1f       	adc	r21, r21
    222c:	59 f0       	breq	.+22     	; 0x2244 <__fp_splitA+0x10>
    222e:	5f 3f       	cpi	r21, 0xFF	; 255
    2230:	71 f0       	breq	.+28     	; 0x224e <__fp_splitA+0x1a>
    2232:	47 95       	ror	r20

00002234 <__fp_splitA>:
    2234:	88 0f       	add	r24, r24
    2236:	97 fb       	bst	r25, 7
    2238:	99 1f       	adc	r25, r25
    223a:	61 f0       	breq	.+24     	; 0x2254 <__fp_splitA+0x20>
    223c:	9f 3f       	cpi	r25, 0xFF	; 255
    223e:	79 f0       	breq	.+30     	; 0x225e <__fp_splitA+0x2a>
    2240:	87 95       	ror	r24
    2242:	08 95       	ret
    2244:	12 16       	cp	r1, r18
    2246:	13 06       	cpc	r1, r19
    2248:	14 06       	cpc	r1, r20
    224a:	55 1f       	adc	r21, r21
    224c:	f2 cf       	rjmp	.-28     	; 0x2232 <__fp_split3+0xe>
    224e:	46 95       	lsr	r20
    2250:	f1 df       	rcall	.-30     	; 0x2234 <__fp_splitA>
    2252:	08 c0       	rjmp	.+16     	; 0x2264 <__fp_splitA+0x30>
    2254:	16 16       	cp	r1, r22
    2256:	17 06       	cpc	r1, r23
    2258:	18 06       	cpc	r1, r24
    225a:	99 1f       	adc	r25, r25
    225c:	f1 cf       	rjmp	.-30     	; 0x2240 <__fp_splitA+0xc>
    225e:	86 95       	lsr	r24
    2260:	71 05       	cpc	r23, r1
    2262:	61 05       	cpc	r22, r1
    2264:	08 94       	sec
    2266:	08 95       	ret

00002268 <__fp_zero>:
    2268:	e8 94       	clt

0000226a <__fp_szero>:
    226a:	bb 27       	eor	r27, r27
    226c:	66 27       	eor	r22, r22
    226e:	77 27       	eor	r23, r23
    2270:	cb 01       	movw	r24, r22
    2272:	97 f9       	bld	r25, 7
    2274:	08 95       	ret

00002276 <__gesf2>:
    2276:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__fp_cmp>
    227a:	08 f4       	brcc	.+2      	; 0x227e <__gesf2+0x8>
    227c:	8f ef       	ldi	r24, 0xFF	; 255
    227e:	08 95       	ret

00002280 <inverse>:
    2280:	9b 01       	movw	r18, r22
    2282:	ac 01       	movw	r20, r24
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	70 e0       	ldi	r23, 0x00	; 0
    2288:	80 e8       	ldi	r24, 0x80	; 128
    228a:	9f e3       	ldi	r25, 0x3F	; 63
    228c:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__divsf3>

00002290 <__mulsf3>:
    2290:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__mulsf3x>
    2294:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__fp_round>
    2298:	0e 94 b4 10 	call	0x2168	; 0x2168 <__fp_pscA>
    229c:	38 f0       	brcs	.+14     	; 0x22ac <__mulsf3+0x1c>
    229e:	0e 94 bb 10 	call	0x2176	; 0x2176 <__fp_pscB>
    22a2:	20 f0       	brcs	.+8      	; 0x22ac <__mulsf3+0x1c>
    22a4:	95 23       	and	r25, r21
    22a6:	11 f0       	breq	.+4      	; 0x22ac <__mulsf3+0x1c>
    22a8:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__fp_inf>
    22ac:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__fp_nan>
    22b0:	11 24       	eor	r1, r1
    22b2:	0c 94 35 11 	jmp	0x226a	; 0x226a <__fp_szero>

000022b6 <__mulsf3x>:
    22b6:	0e 94 12 11 	call	0x2224	; 0x2224 <__fp_split3>
    22ba:	70 f3       	brcs	.-36     	; 0x2298 <__mulsf3+0x8>

000022bc <__mulsf3_pse>:
    22bc:	95 9f       	mul	r25, r21
    22be:	c1 f3       	breq	.-16     	; 0x22b0 <__mulsf3+0x20>
    22c0:	95 0f       	add	r25, r21
    22c2:	50 e0       	ldi	r21, 0x00	; 0
    22c4:	55 1f       	adc	r21, r21
    22c6:	62 9f       	mul	r22, r18
    22c8:	f0 01       	movw	r30, r0
    22ca:	72 9f       	mul	r23, r18
    22cc:	bb 27       	eor	r27, r27
    22ce:	f0 0d       	add	r31, r0
    22d0:	b1 1d       	adc	r27, r1
    22d2:	63 9f       	mul	r22, r19
    22d4:	aa 27       	eor	r26, r26
    22d6:	f0 0d       	add	r31, r0
    22d8:	b1 1d       	adc	r27, r1
    22da:	aa 1f       	adc	r26, r26
    22dc:	64 9f       	mul	r22, r20
    22de:	66 27       	eor	r22, r22
    22e0:	b0 0d       	add	r27, r0
    22e2:	a1 1d       	adc	r26, r1
    22e4:	66 1f       	adc	r22, r22
    22e6:	82 9f       	mul	r24, r18
    22e8:	22 27       	eor	r18, r18
    22ea:	b0 0d       	add	r27, r0
    22ec:	a1 1d       	adc	r26, r1
    22ee:	62 1f       	adc	r22, r18
    22f0:	73 9f       	mul	r23, r19
    22f2:	b0 0d       	add	r27, r0
    22f4:	a1 1d       	adc	r26, r1
    22f6:	62 1f       	adc	r22, r18
    22f8:	83 9f       	mul	r24, r19
    22fa:	a0 0d       	add	r26, r0
    22fc:	61 1d       	adc	r22, r1
    22fe:	22 1f       	adc	r18, r18
    2300:	74 9f       	mul	r23, r20
    2302:	33 27       	eor	r19, r19
    2304:	a0 0d       	add	r26, r0
    2306:	61 1d       	adc	r22, r1
    2308:	23 1f       	adc	r18, r19
    230a:	84 9f       	mul	r24, r20
    230c:	60 0d       	add	r22, r0
    230e:	21 1d       	adc	r18, r1
    2310:	82 2f       	mov	r24, r18
    2312:	76 2f       	mov	r23, r22
    2314:	6a 2f       	mov	r22, r26
    2316:	11 24       	eor	r1, r1
    2318:	9f 57       	subi	r25, 0x7F	; 127
    231a:	50 40       	sbci	r21, 0x00	; 0
    231c:	9a f0       	brmi	.+38     	; 0x2344 <__mulsf3_pse+0x88>
    231e:	f1 f0       	breq	.+60     	; 0x235c <__mulsf3_pse+0xa0>
    2320:	88 23       	and	r24, r24
    2322:	4a f0       	brmi	.+18     	; 0x2336 <__mulsf3_pse+0x7a>
    2324:	ee 0f       	add	r30, r30
    2326:	ff 1f       	adc	r31, r31
    2328:	bb 1f       	adc	r27, r27
    232a:	66 1f       	adc	r22, r22
    232c:	77 1f       	adc	r23, r23
    232e:	88 1f       	adc	r24, r24
    2330:	91 50       	subi	r25, 0x01	; 1
    2332:	50 40       	sbci	r21, 0x00	; 0
    2334:	a9 f7       	brne	.-22     	; 0x2320 <__mulsf3_pse+0x64>
    2336:	9e 3f       	cpi	r25, 0xFE	; 254
    2338:	51 05       	cpc	r21, r1
    233a:	80 f0       	brcs	.+32     	; 0x235c <__mulsf3_pse+0xa0>
    233c:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__fp_inf>
    2340:	0c 94 35 11 	jmp	0x226a	; 0x226a <__fp_szero>
    2344:	5f 3f       	cpi	r21, 0xFF	; 255
    2346:	e4 f3       	brlt	.-8      	; 0x2340 <__mulsf3_pse+0x84>
    2348:	98 3e       	cpi	r25, 0xE8	; 232
    234a:	d4 f3       	brlt	.-12     	; 0x2340 <__mulsf3_pse+0x84>
    234c:	86 95       	lsr	r24
    234e:	77 95       	ror	r23
    2350:	67 95       	ror	r22
    2352:	b7 95       	ror	r27
    2354:	f7 95       	ror	r31
    2356:	e7 95       	ror	r30
    2358:	9f 5f       	subi	r25, 0xFF	; 255
    235a:	c1 f7       	brne	.-16     	; 0x234c <__mulsf3_pse+0x90>
    235c:	fe 2b       	or	r31, r30
    235e:	88 0f       	add	r24, r24
    2360:	91 1d       	adc	r25, r1
    2362:	96 95       	lsr	r25
    2364:	87 95       	ror	r24
    2366:	97 f9       	bld	r25, 7
    2368:	08 95       	ret

0000236a <sin>:
    236a:	9f 93       	push	r25
    236c:	0e 94 c4 10 	call	0x2188	; 0x2188 <__fp_rempio2>
    2370:	0f 90       	pop	r0
    2372:	07 fc       	sbrc	r0, 7
    2374:	ee 5f       	subi	r30, 0xFE	; 254
    2376:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__fp_sinus>
    237a:	19 f4       	brne	.+6      	; 0x2382 <sin+0x18>
    237c:	16 f4       	brtc	.+4      	; 0x2382 <sin+0x18>
    237e:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__fp_nan>
    2382:	0c 94 07 12 	jmp	0x240e	; 0x240e <__fp_mpack>

00002386 <sqrt>:
    2386:	0e 94 1a 11 	call	0x2234	; 0x2234 <__fp_splitA>
    238a:	b8 f3       	brcs	.-18     	; 0x237a <sin+0x10>
    238c:	99 23       	and	r25, r25
    238e:	c9 f3       	breq	.-14     	; 0x2382 <sin+0x18>
    2390:	b6 f3       	brts	.-20     	; 0x237e <sin+0x14>
    2392:	9f 57       	subi	r25, 0x7F	; 127
    2394:	55 0b       	sbc	r21, r21
    2396:	87 ff       	sbrs	r24, 7
    2398:	0e 94 15 12 	call	0x242a	; 0x242a <__fp_norm2>
    239c:	00 24       	eor	r0, r0
    239e:	a0 e6       	ldi	r26, 0x60	; 96
    23a0:	40 ea       	ldi	r20, 0xA0	; 160
    23a2:	90 01       	movw	r18, r0
    23a4:	80 58       	subi	r24, 0x80	; 128
    23a6:	56 95       	lsr	r21
    23a8:	97 95       	ror	r25
    23aa:	28 f4       	brcc	.+10     	; 0x23b6 <sqrt+0x30>
    23ac:	80 5c       	subi	r24, 0xC0	; 192
    23ae:	66 0f       	add	r22, r22
    23b0:	77 1f       	adc	r23, r23
    23b2:	88 1f       	adc	r24, r24
    23b4:	20 f0       	brcs	.+8      	; 0x23be <sqrt+0x38>
    23b6:	26 17       	cp	r18, r22
    23b8:	37 07       	cpc	r19, r23
    23ba:	48 07       	cpc	r20, r24
    23bc:	30 f4       	brcc	.+12     	; 0x23ca <sqrt+0x44>
    23be:	62 1b       	sub	r22, r18
    23c0:	73 0b       	sbc	r23, r19
    23c2:	84 0b       	sbc	r24, r20
    23c4:	20 29       	or	r18, r0
    23c6:	31 29       	or	r19, r1
    23c8:	4a 2b       	or	r20, r26
    23ca:	a6 95       	lsr	r26
    23cc:	17 94       	ror	r1
    23ce:	07 94       	ror	r0
    23d0:	20 25       	eor	r18, r0
    23d2:	31 25       	eor	r19, r1
    23d4:	4a 27       	eor	r20, r26
    23d6:	58 f7       	brcc	.-42     	; 0x23ae <sqrt+0x28>
    23d8:	66 0f       	add	r22, r22
    23da:	77 1f       	adc	r23, r23
    23dc:	88 1f       	adc	r24, r24
    23de:	20 f0       	brcs	.+8      	; 0x23e8 <sqrt+0x62>
    23e0:	26 17       	cp	r18, r22
    23e2:	37 07       	cpc	r19, r23
    23e4:	48 07       	cpc	r20, r24
    23e6:	30 f4       	brcc	.+12     	; 0x23f4 <sqrt+0x6e>
    23e8:	62 0b       	sbc	r22, r18
    23ea:	73 0b       	sbc	r23, r19
    23ec:	84 0b       	sbc	r24, r20
    23ee:	20 0d       	add	r18, r0
    23f0:	31 1d       	adc	r19, r1
    23f2:	41 1d       	adc	r20, r1
    23f4:	a0 95       	com	r26
    23f6:	81 f7       	brne	.-32     	; 0x23d8 <sqrt+0x52>
    23f8:	b9 01       	movw	r22, r18
    23fa:	84 2f       	mov	r24, r20
    23fc:	91 58       	subi	r25, 0x81	; 129
    23fe:	88 0f       	add	r24, r24
    2400:	96 95       	lsr	r25
    2402:	87 95       	ror	r24
    2404:	08 95       	ret

00002406 <square>:
    2406:	9b 01       	movw	r18, r22
    2408:	ac 01       	movw	r20, r24
    240a:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__mulsf3>

0000240e <__fp_mpack>:
    240e:	9f 3f       	cpi	r25, 0xFF	; 255
    2410:	31 f0       	breq	.+12     	; 0x241e <__fp_mpack_finite+0xc>

00002412 <__fp_mpack_finite>:
    2412:	91 50       	subi	r25, 0x01	; 1
    2414:	20 f4       	brcc	.+8      	; 0x241e <__fp_mpack_finite+0xc>
    2416:	87 95       	ror	r24
    2418:	77 95       	ror	r23
    241a:	67 95       	ror	r22
    241c:	b7 95       	ror	r27
    241e:	88 0f       	add	r24, r24
    2420:	91 1d       	adc	r25, r1
    2422:	96 95       	lsr	r25
    2424:	87 95       	ror	r24
    2426:	97 f9       	bld	r25, 7
    2428:	08 95       	ret

0000242a <__fp_norm2>:
    242a:	91 50       	subi	r25, 0x01	; 1
    242c:	50 40       	sbci	r21, 0x00	; 0
    242e:	66 0f       	add	r22, r22
    2430:	77 1f       	adc	r23, r23
    2432:	88 1f       	adc	r24, r24
    2434:	d2 f7       	brpl	.-12     	; 0x242a <__fp_norm2>
    2436:	08 95       	ret

00002438 <__fp_powsodd>:
    2438:	9f 93       	push	r25
    243a:	8f 93       	push	r24
    243c:	7f 93       	push	r23
    243e:	6f 93       	push	r22
    2440:	ff 93       	push	r31
    2442:	ef 93       	push	r30
    2444:	9b 01       	movw	r18, r22
    2446:	ac 01       	movw	r20, r24
    2448:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    244c:	ef 91       	pop	r30
    244e:	ff 91       	pop	r31
    2450:	0e 94 8d 10 	call	0x211a	; 0x211a <__fp_powser>
    2454:	2f 91       	pop	r18
    2456:	3f 91       	pop	r19
    2458:	4f 91       	pop	r20
    245a:	5f 91       	pop	r21
    245c:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__mulsf3>

00002460 <_exit>:
    2460:	f8 94       	cli

00002462 <__stop_program>:
    2462:	ff cf       	rjmp	.-2      	; 0x2462 <__stop_program>
