
motor_controler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000271c  000027b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000271c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800122  00800122  000027d2  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000027d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002834  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a6c  00000000  00000000  00002b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b81  00000000  00000000  000055a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  00006129  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000974  00000000  00000000  0000712c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ad7  00000000  00000000  00007aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037f8  00000000  00000000  00008577  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000bd6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__ctors_end>
       4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       c:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__vector_3>
      10:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      14:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      18:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      1c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      20:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      24:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      28:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <__vector_10>
      2c:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__vector_11>
      30:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      34:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      38:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      3c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      40:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      44:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__vector_17>
      48:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__vector_18>
      4c:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__vector_19>
      50:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      54:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      58:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      5c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      60:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      64:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      68:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      6c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      70:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      74:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      78:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      7c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      80:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      84:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      8c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      90:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      94:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      98:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      9c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__trampolines_end>:
      f8:	00 01       	movw	r0, r0
      fa:	00 00       	nop
      fc:	8f 01       	movw	r16, r30
      fe:	12 00       	.word	0x0012	; ????
     100:	02 00       	.word	0x0002	; ????
     102:	00 4c       	sbci	r16, 0xC0	; 192
     104:	01 43       	sbci	r16, 0x31	; 49
     106:	00 03       	mulsu	r16, r16
     108:	00 00       	nop
     10a:	48 01       	movw	r8, r16
     10c:	04 01       	movw	r0, r8
     10e:	03 09       	sbc	r16, r3
     110:	04 34       	cpi	r16, 0x44	; 68
     112:	01 12       	cpse	r0, r17
     114:	02 03       	mulsu	r16, r18
     116:	09 04       	cpc	r0, r9
     118:	2c 01       	movw	r4, r24
     11a:	06 03       	mulsu	r16, r22
     11c:	03 09       	sbc	r16, r3
     11e:	04 22       	and	r0, r20
     120:	01 08       	sbc	r0, r1

00000122 <string3>:
     122:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000012c <string2>:
     12c:	06 03 4d 00 32 00 00 00                             ..M.2...

00000134 <string1>:
     134:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     144:	65 00 00 00                                         e...

00000148 <string0>:
     148:	04 03 09 04                                         ....

0000014c <config1_descriptor>:
     14c:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     15c:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     16c:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     17c:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     18c:	40 00 00                                            @..

0000018f <device_descriptor>:
     18f:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     19f:	03 01                                               ..

000001a1 <endpoint_config_table>:
     1a1:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001ac <__ctors_end>:
     1ac:	11 24       	eor	r1, r1
     1ae:	1f be       	out	0x3f, r1	; 63
     1b0:	cf ef       	ldi	r28, 0xFF	; 255
     1b2:	da e0       	ldi	r29, 0x0A	; 10
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	cd bf       	out	0x3d, r28	; 61

000001b8 <__do_copy_data>:
     1b8:	11 e0       	ldi	r17, 0x01	; 1
     1ba:	a0 e0       	ldi	r26, 0x00	; 0
     1bc:	b1 e0       	ldi	r27, 0x01	; 1
     1be:	ec e1       	ldi	r30, 0x1C	; 28
     1c0:	f7 e2       	ldi	r31, 0x27	; 39
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__do_copy_data+0x10>
     1c4:	05 90       	lpm	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	a2 32       	cpi	r26, 0x22	; 34
     1ca:	b1 07       	cpc	r27, r17
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <__do_copy_data+0xc>

000001ce <__do_clear_bss>:
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	a2 e2       	ldi	r26, 0x22	; 34
     1d2:	b1 e0       	ldi	r27, 0x01	; 1
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <.do_clear_bss_start>

000001d6 <.do_clear_bss_loop>:
     1d6:	1d 92       	st	X+, r1

000001d8 <.do_clear_bss_start>:
     1d8:	a0 39       	cpi	r26, 0x90	; 144
     1da:	b2 07       	cpc	r27, r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <.do_clear_bss_loop>
     1de:	0e 94 8b 0a 	call	0x1516	; 0x1516 <main>
     1e2:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <_exit>

000001e6 <__bad_interrupt>:
     1e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ea <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     1ea:	82 30       	cpi	r24, 0x02	; 2
     1ec:	91 05       	cpc	r25, r1
     1ee:	f9 f0       	breq	.+62     	; 0x22e <distIndex+0x44>
     1f0:	2c f4       	brge	.+10     	; 0x1fc <distIndex+0x12>
     1f2:	00 97       	sbiw	r24, 0x00	; 0
     1f4:	51 f0       	breq	.+20     	; 0x20a <distIndex+0x20>
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	89 f0       	breq	.+34     	; 0x21c <distIndex+0x32>
     1fa:	42 c0       	rjmp	.+132    	; 0x280 <distIndex+0x96>
     1fc:	84 30       	cpi	r24, 0x04	; 4
     1fe:	91 05       	cpc	r25, r1
     200:	51 f1       	breq	.+84     	; 0x256 <distIndex+0x6c>
     202:	f4 f0       	brlt	.+60     	; 0x240 <distIndex+0x56>
     204:	05 97       	sbiw	r24, 0x05	; 5
     206:	91 f1       	breq	.+100    	; 0x26c <distIndex+0x82>
     208:	3b c0       	rjmp	.+118    	; 0x280 <distIndex+0x96>
	{
		case 0 : 
			pointsUsed[0] = 0;
     20a:	e2 e2       	ldi	r30, 0x22	; 34
     20c:	f1 e0       	ldi	r31, 0x01	; 1
     20e:	11 82       	std	Z+1, r1	; 0x01
     210:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	93 83       	std	Z+3, r25	; 0x03
     218:	82 83       	std	Z+2, r24	; 0x02
			break;
     21a:	32 c0       	rjmp	.+100    	; 0x280 <distIndex+0x96>
			
		case 1 : 
			pointsUsed[0] = 0;
     21c:	e2 e2       	ldi	r30, 0x22	; 34
     21e:	f1 e0       	ldi	r31, 0x01	; 1
     220:	11 82       	std	Z+1, r1	; 0x01
     222:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	93 83       	std	Z+3, r25	; 0x03
     22a:	82 83       	std	Z+2, r24	; 0x02
			break;
     22c:	29 c0       	rjmp	.+82     	; 0x280 <distIndex+0x96>
			
		case 2 : 
			pointsUsed[0] = 0;
     22e:	e2 e2       	ldi	r30, 0x22	; 34
     230:	f1 e0       	ldi	r31, 0x01	; 1
     232:	11 82       	std	Z+1, r1	; 0x01
     234:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     236:	83 e0       	ldi	r24, 0x03	; 3
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	93 83       	std	Z+3, r25	; 0x03
     23c:	82 83       	std	Z+2, r24	; 0x02
			break;
     23e:	20 c0       	rjmp	.+64     	; 0x280 <distIndex+0x96>
			
		case 3 : 
			pointsUsed[0] = 1;
     240:	e2 e2       	ldi	r30, 0x22	; 34
     242:	f1 e0       	ldi	r31, 0x01	; 1
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	91 83       	std	Z+1, r25	; 0x01
     24a:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	93 83       	std	Z+3, r25	; 0x03
     252:	82 83       	std	Z+2, r24	; 0x02
			break;
     254:	15 c0       	rjmp	.+42     	; 0x280 <distIndex+0x96>
			
		case 4 : 
			pointsUsed[0] = 1;
     256:	e2 e2       	ldi	r30, 0x22	; 34
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	91 83       	std	Z+1, r25	; 0x01
     260:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     262:	83 e0       	ldi	r24, 0x03	; 3
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	93 83       	std	Z+3, r25	; 0x03
     268:	82 83       	std	Z+2, r24	; 0x02
			break;
     26a:	0a c0       	rjmp	.+20     	; 0x280 <distIndex+0x96>
			
		case 5 :
			pointsUsed[0] = 2;
     26c:	e2 e2       	ldi	r30, 0x22	; 34
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	91 83       	std	Z+1, r25	; 0x01
     276:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     278:	83 e0       	ldi	r24, 0x03	; 3
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	93 83       	std	Z+3, r25	; 0x03
     27e:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     280:	82 e2       	ldi	r24, 0x22	; 34
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	08 95       	ret

00000286 <orientationCalculationFour>:


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
     286:	2f 92       	push	r2
     288:	3f 92       	push	r3
     28a:	4f 92       	push	r4
     28c:	5f 92       	push	r5
     28e:	6f 92       	push	r6
     290:	7f 92       	push	r7
     292:	8f 92       	push	r8
     294:	9f 92       	push	r9
     296:	af 92       	push	r10
     298:	bf 92       	push	r11
     29a:	cf 92       	push	r12
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <orientationCalculationFour+0x26>
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <orientationCalculationFour+0x28>
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	5c 01       	movw	r10, r24
     2b4:	4a 01       	movw	r8, r20
     2b6:	3a 83       	std	Y+2, r19	; 0x02
     2b8:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     2ba:	06 2f       	mov	r16, r22
     2bc:	17 2f       	mov	r17, r23
     2be:	f8 01       	movw	r30, r16
     2c0:	41 90       	ld	r4, Z+
     2c2:	51 90       	ld	r5, Z+
     2c4:	61 90       	ld	r6, Z+
     2c6:	71 90       	ld	r7, Z+
     2c8:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     2ca:	1c 82       	std	Y+4, r1	; 0x04
     2cc:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     2ce:	21 2c       	mov	r2, r1
     2d0:	31 2c       	mov	r3, r1
     2d2:	12 c0       	rjmp	.+36     	; 0x2f8 <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     2d4:	f8 01       	movw	r30, r16
     2d6:	c1 90       	ld	r12, Z+
     2d8:	d1 90       	ld	r13, Z+
     2da:	e1 90       	ld	r14, Z+
     2dc:	f1 90       	ld	r15, Z+
     2de:	8f 01       	movw	r16, r30
     2e0:	a7 01       	movw	r20, r14
     2e2:	96 01       	movw	r18, r12
     2e4:	c3 01       	movw	r24, r6
     2e6:	b2 01       	movw	r22, r4
     2e8:	0e 94 97 12 	call	0x252e	; 0x252e <__gesf2>
     2ec:	18 16       	cp	r1, r24
     2ee:	24 f4       	brge	.+8      	; 0x2f8 <orientationCalculationFour+0x72>
     2f0:	26 01       	movw	r4, r12
     2f2:	37 01       	movw	r6, r14
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     2f4:	2b 80       	ldd	r2, Y+3	; 0x03
     2f6:	3c 80       	ldd	r3, Y+4	; 0x04
     2f8:	8b 81       	ldd	r24, Y+3	; 0x03
     2fa:	9c 81       	ldd	r25, Y+4	; 0x04
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	9c 83       	std	Y+4, r25	; 0x04
     300:	8b 83       	std	Y+3, r24	; 0x03
     302:	06 97       	sbiw	r24, 0x06	; 6
     304:	39 f7       	brne	.-50     	; 0x2d4 <orientationCalculationFour+0x4e>
		}
	}
	
	//Find points used by shortest length	
	int* pointsShortRef;
	pointsShortRef = distIndex(indexMin);	
     306:	82 2d       	mov	r24, r2
     308:	93 2d       	mov	r25, r3
     30a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <distIndex>
	int pointsShort[2] = {pointsShortRef[0], pointsShortRef[1]};	
     30e:	fc 01       	movw	r30, r24
     310:	20 81       	ld	r18, Z
     312:	31 81       	ldd	r19, Z+1	; 0x01
     314:	62 81       	ldd	r22, Z+2	; 0x02
     316:	73 81       	ldd	r23, Z+3	; 0x03
	if (pointsShort[0] == pointsLong[0]){
     318:	f5 01       	movw	r30, r10
     31a:	40 81       	ld	r20, Z
     31c:	51 81       	ldd	r21, Z+1	; 0x01
     31e:	24 17       	cp	r18, r20
     320:	35 07       	cpc	r19, r21
     322:	59 f4       	brne	.+22     	; 0x33a <orientationCalculationFour+0xb4>
		*top = pointsLong[0];
     324:	f4 01       	movw	r30, r8
     326:	31 83       	std	Z+1, r19	; 0x01
     328:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     32a:	f5 01       	movw	r30, r10
     32c:	82 81       	ldd	r24, Z+2	; 0x02
     32e:	93 81       	ldd	r25, Z+3	; 0x03
     330:	e9 81       	ldd	r30, Y+1	; 0x01
     332:	fa 81       	ldd	r31, Y+2	; 0x02
     334:	91 83       	std	Z+1, r25	; 0x01
     336:	80 83       	st	Z, r24
     338:	37 c0       	rjmp	.+110    	; 0x3a8 <orientationCalculationFour+0x122>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     33a:	f5 01       	movw	r30, r10
     33c:	82 81       	ldd	r24, Z+2	; 0x02
     33e:	93 81       	ldd	r25, Z+3	; 0x03
     340:	28 17       	cp	r18, r24
     342:	39 07       	cpc	r19, r25
     344:	59 f4       	brne	.+22     	; 0x35c <orientationCalculationFour+0xd6>
			*top = pointsLong[1];
     346:	f4 01       	movw	r30, r8
     348:	31 83       	std	Z+1, r19	; 0x01
     34a:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     34c:	f5 01       	movw	r30, r10
     34e:	80 81       	ld	r24, Z
     350:	91 81       	ldd	r25, Z+1	; 0x01
     352:	e9 81       	ldd	r30, Y+1	; 0x01
     354:	fa 81       	ldd	r31, Y+2	; 0x02
     356:	91 83       	std	Z+1, r25	; 0x01
     358:	80 83       	st	Z, r24
     35a:	26 c0       	rjmp	.+76     	; 0x3a8 <orientationCalculationFour+0x122>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     35c:	64 17       	cp	r22, r20
     35e:	75 07       	cpc	r23, r21
     360:	59 f4       	brne	.+22     	; 0x378 <orientationCalculationFour+0xf2>
				*top = pointsLong[0];
     362:	f4 01       	movw	r30, r8
     364:	71 83       	std	Z+1, r23	; 0x01
     366:	60 83       	st	Z, r22
				*bottom = pointsLong[1];
     368:	f5 01       	movw	r30, r10
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	e9 81       	ldd	r30, Y+1	; 0x01
     370:	fa 81       	ldd	r31, Y+2	; 0x02
     372:	91 83       	std	Z+1, r25	; 0x01
     374:	80 83       	st	Z, r24
     376:	18 c0       	rjmp	.+48     	; 0x3a8 <orientationCalculationFour+0x122>
			} else {
				if (pointsShort[1] == pointsLong[1])
     378:	68 17       	cp	r22, r24
     37a:	79 07       	cpc	r23, r25
     37c:	59 f4       	brne	.+22     	; 0x394 <orientationCalculationFour+0x10e>
				{
					*top = pointsLong[1];
     37e:	f4 01       	movw	r30, r8
     380:	71 83       	std	Z+1, r23	; 0x01
     382:	60 83       	st	Z, r22
					*bottom = pointsLong[0];
     384:	f5 01       	movw	r30, r10
     386:	80 81       	ld	r24, Z
     388:	91 81       	ldd	r25, Z+1	; 0x01
     38a:	e9 81       	ldd	r30, Y+1	; 0x01
     38c:	fa 81       	ldd	r31, Y+2	; 0x02
     38e:	91 83       	std	Z+1, r25	; 0x01
     390:	80 83       	st	Z, r24
     392:	0a c0       	rjmp	.+20     	; 0x3a8 <orientationCalculationFour+0x122>
				} else {
//						m_green(OFF);
						*top = pointsLong[1];
     394:	f4 01       	movw	r30, r8
     396:	91 83       	std	Z+1, r25	; 0x01
     398:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     39a:	f5 01       	movw	r30, r10
     39c:	80 81       	ld	r24, Z
     39e:	91 81       	ldd	r25, Z+1	; 0x01
     3a0:	e9 81       	ldd	r30, Y+1	; 0x01
     3a2:	fa 81       	ldd	r31, Y+2	; 0x02
     3a4:	91 83       	std	Z+1, r25	; 0x01
     3a6:	80 83       	st	Z, r24
				}
			}
		}
	}
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	df 90       	pop	r13
     3be:	cf 90       	pop	r12
     3c0:	bf 90       	pop	r11
     3c2:	af 90       	pop	r10
     3c4:	9f 90       	pop	r9
     3c6:	8f 90       	pop	r8
     3c8:	7f 90       	pop	r7
     3ca:	6f 90       	pop	r6
     3cc:	5f 90       	pop	r5
     3ce:	4f 90       	pop	r4
     3d0:	3f 90       	pop	r3
     3d2:	2f 90       	pop	r2
     3d4:	08 95       	ret

000003d6 <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     3d6:	2f 92       	push	r2
     3d8:	3f 92       	push	r3
     3da:	4f 92       	push	r4
     3dc:	5f 92       	push	r5
     3de:	6f 92       	push	r6
     3e0:	7f 92       	push	r7
     3e2:	8f 92       	push	r8
     3e4:	9f 92       	push	r9
     3e6:	af 92       	push	r10
     3e8:	bf 92       	push	r11
     3ea:	cf 92       	push	r12
     3ec:	df 92       	push	r13
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	c2 54       	subi	r28, 0x42	; 66
     400:	d1 09       	sbc	r29, r1
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     40e:	fc 01       	movw	r30, r24
     410:	04 80       	ldd	r0, Z+4	; 0x04
     412:	f5 81       	ldd	r31, Z+5	; 0x05
     414:	e0 2d       	mov	r30, r0
     416:	fa a3       	std	Y+34, r31	; 0x22
     418:	e9 a3       	std	Y+33, r30	; 0x21
     41a:	fc 01       	movw	r30, r24
     41c:	00 81       	ld	r16, Z
     41e:	11 81       	ldd	r17, Z+1	; 0x01
     420:	69 a1       	ldd	r22, Y+33	; 0x21
     422:	7a a1       	ldd	r23, Y+34	; 0x22
     424:	60 1b       	sub	r22, r16
     426:	71 0b       	sbc	r23, r17
     428:	07 2e       	mov	r0, r23
     42a:	00 0c       	add	r0, r0
     42c:	88 0b       	sbc	r24, r24
     42e:	99 0b       	sbc	r25, r25
     430:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     434:	6b 01       	movw	r12, r22
     436:	7c 01       	movw	r14, r24
     438:	f2 01       	movw	r30, r4
     43a:	06 80       	ldd	r0, Z+6	; 0x06
     43c:	f7 81       	ldd	r31, Z+7	; 0x07
     43e:	e0 2d       	mov	r30, r0
     440:	fe a3       	std	Y+38, r31	; 0x26
     442:	ed a3       	std	Y+37, r30	; 0x25
     444:	f2 01       	movw	r30, r4
     446:	22 80       	ldd	r2, Z+2	; 0x02
     448:	33 80       	ldd	r3, Z+3	; 0x03
     44a:	ad a0       	ldd	r10, Y+37	; 0x25
     44c:	be a0       	ldd	r11, Y+38	; 0x26
     44e:	a2 18       	sub	r10, r2
     450:	b3 08       	sbc	r11, r3
     452:	9b 01       	movw	r18, r22
     454:	ac 01       	movw	r20, r24
     456:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     45a:	69 a7       	std	Y+41, r22	; 0x29
     45c:	7a a7       	std	Y+42, r23	; 0x2a
     45e:	8b a7       	std	Y+43, r24	; 0x2b
     460:	9c a7       	std	Y+44, r25	; 0x2c
     462:	aa 9c       	mul	r10, r10
     464:	40 01       	movw	r8, r0
     466:	ab 9c       	mul	r10, r11
     468:	90 0c       	add	r9, r0
     46a:	90 0c       	add	r9, r0
     46c:	11 24       	eor	r1, r1
     46e:	09 2c       	mov	r0, r9
     470:	00 0c       	add	r0, r0
     472:	aa 08       	sbc	r10, r10
     474:	bb 08       	sbc	r11, r11
     476:	a7 01       	movw	r20, r14
     478:	96 01       	movw	r18, r12
     47a:	c7 01       	movw	r24, r14
     47c:	b6 01       	movw	r22, r12
     47e:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     482:	6b 01       	movw	r12, r22
     484:	7c 01       	movw	r14, r24
     486:	c5 01       	movw	r24, r10
     488:	b4 01       	movw	r22, r8
     48a:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     48e:	9b 01       	movw	r18, r22
     490:	ac 01       	movw	r20, r24
     492:	c7 01       	movw	r24, r14
     494:	b6 01       	movw	r22, r12
     496:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__addsf3>
     49a:	0e 94 1f 13 	call	0x263e	; 0x263e <sqrt>
     49e:	6b af       	std	Y+59, r22	; 0x3b
     4a0:	7c af       	std	Y+60, r23	; 0x3c
     4a2:	8d af       	std	Y+61, r24	; 0x3d
     4a4:	9e af       	std	Y+62, r25	; 0x3e
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     4a6:	f2 01       	movw	r30, r4
     4a8:	00 84       	ldd	r0, Z+8	; 0x08
     4aa:	f1 85       	ldd	r31, Z+9	; 0x09
     4ac:	e0 2d       	mov	r30, r0
     4ae:	fa a7       	std	Y+42, r31	; 0x2a
     4b0:	e9 a7       	std	Y+41, r30	; 0x29
     4b2:	bf 01       	movw	r22, r30
     4b4:	60 1b       	sub	r22, r16
     4b6:	71 0b       	sbc	r23, r17
     4b8:	07 2e       	mov	r0, r23
     4ba:	00 0c       	add	r0, r0
     4bc:	88 0b       	sbc	r24, r24
     4be:	99 0b       	sbc	r25, r25
     4c0:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     4c4:	6b 01       	movw	r12, r22
     4c6:	7c 01       	movw	r14, r24
     4c8:	f2 01       	movw	r30, r4
     4ca:	62 84       	ldd	r6, Z+10	; 0x0a
     4cc:	73 84       	ldd	r7, Z+11	; 0x0b
     4ce:	53 01       	movw	r10, r6
     4d0:	a2 18       	sub	r10, r2
     4d2:	b3 08       	sbc	r11, r3
     4d4:	9b 01       	movw	r18, r22
     4d6:	ac 01       	movw	r20, r24
     4d8:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     4dc:	6d a7       	std	Y+45, r22	; 0x2d
     4de:	7e a7       	std	Y+46, r23	; 0x2e
     4e0:	8f a7       	std	Y+47, r24	; 0x2f
     4e2:	98 ab       	std	Y+48, r25	; 0x30
     4e4:	aa 9c       	mul	r10, r10
     4e6:	40 01       	movw	r8, r0
     4e8:	ab 9c       	mul	r10, r11
     4ea:	90 0c       	add	r9, r0
     4ec:	90 0c       	add	r9, r0
     4ee:	11 24       	eor	r1, r1
     4f0:	09 2c       	mov	r0, r9
     4f2:	00 0c       	add	r0, r0
     4f4:	aa 08       	sbc	r10, r10
     4f6:	bb 08       	sbc	r11, r11
     4f8:	a7 01       	movw	r20, r14
     4fa:	96 01       	movw	r18, r12
     4fc:	c7 01       	movw	r24, r14
     4fe:	b6 01       	movw	r22, r12
     500:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     504:	6b 01       	movw	r12, r22
     506:	7c 01       	movw	r14, r24
     508:	c5 01       	movw	r24, r10
     50a:	b4 01       	movw	r22, r8
     50c:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     510:	9b 01       	movw	r18, r22
     512:	ac 01       	movw	r20, r24
     514:	c7 01       	movw	r24, r14
     516:	b6 01       	movw	r22, r12
     518:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__addsf3>
     51c:	0e 94 1f 13 	call	0x263e	; 0x263e <sqrt>
     520:	23 96       	adiw	r28, 0x03	; 3
     522:	6c af       	std	Y+60, r22	; 0x3c
     524:	7d af       	std	Y+61, r23	; 0x3d
     526:	8e af       	std	Y+62, r24	; 0x3e
     528:	9f af       	std	Y+63, r25	; 0x3f
     52a:	23 97       	sbiw	r28, 0x03	; 3
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     52c:	f2 01       	movw	r30, r4
     52e:	04 84       	ldd	r0, Z+12	; 0x0c
     530:	f5 85       	ldd	r31, Z+13	; 0x0d
     532:	e0 2d       	mov	r30, r0
     534:	fe a7       	std	Y+46, r31	; 0x2e
     536:	ed a7       	std	Y+45, r30	; 0x2d
     538:	bf 01       	movw	r22, r30
     53a:	60 1b       	sub	r22, r16
     53c:	71 0b       	sbc	r23, r17
     53e:	07 2e       	mov	r0, r23
     540:	00 0c       	add	r0, r0
     542:	88 0b       	sbc	r24, r24
     544:	99 0b       	sbc	r25, r25
     546:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     54a:	4b 01       	movw	r8, r22
     54c:	5c 01       	movw	r10, r24
     54e:	f2 01       	movw	r30, r4
     550:	06 84       	ldd	r0, Z+14	; 0x0e
     552:	f7 85       	ldd	r31, Z+15	; 0x0f
     554:	e0 2d       	mov	r30, r0
     556:	fa ab       	std	Y+50, r31	; 0x32
     558:	e9 ab       	std	Y+49, r30	; 0x31
     55a:	8f 01       	movw	r16, r30
     55c:	02 19       	sub	r16, r2
     55e:	13 09       	sbc	r17, r3
     560:	9b 01       	movw	r18, r22
     562:	ac 01       	movw	r20, r24
     564:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     568:	6b ab       	std	Y+51, r22	; 0x33
     56a:	7c ab       	std	Y+52, r23	; 0x34
     56c:	8d ab       	std	Y+53, r24	; 0x35
     56e:	9e ab       	std	Y+54, r25	; 0x36
     570:	00 9f       	mul	r16, r16
     572:	60 01       	movw	r12, r0
     574:	01 9f       	mul	r16, r17
     576:	d0 0c       	add	r13, r0
     578:	d0 0c       	add	r13, r0
     57a:	11 24       	eor	r1, r1
     57c:	0d 2c       	mov	r0, r13
     57e:	00 0c       	add	r0, r0
     580:	ee 08       	sbc	r14, r14
     582:	ff 08       	sbc	r15, r15
     584:	a5 01       	movw	r20, r10
     586:	94 01       	movw	r18, r8
     588:	c5 01       	movw	r24, r10
     58a:	b4 01       	movw	r22, r8
     58c:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     590:	4b 01       	movw	r8, r22
     592:	5c 01       	movw	r10, r24
     594:	c7 01       	movw	r24, r14
     596:	b6 01       	movw	r22, r12
     598:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     59c:	9b 01       	movw	r18, r22
     59e:	ac 01       	movw	r20, r24
     5a0:	c5 01       	movw	r24, r10
     5a2:	b4 01       	movw	r22, r8
     5a4:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__addsf3>
     5a8:	0e 94 1f 13 	call	0x263e	; 0x263e <sqrt>
     5ac:	6b ab       	std	Y+51, r22	; 0x33
     5ae:	7c ab       	std	Y+52, r23	; 0x34
     5b0:	8d ab       	std	Y+53, r24	; 0x35
     5b2:	9e ab       	std	Y+54, r25	; 0x36
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     5b4:	69 a5       	ldd	r22, Y+41	; 0x29
     5b6:	7a a5       	ldd	r23, Y+42	; 0x2a
     5b8:	29 a1       	ldd	r18, Y+33	; 0x21
     5ba:	3a a1       	ldd	r19, Y+34	; 0x22
     5bc:	62 1b       	sub	r22, r18
     5be:	73 0b       	sbc	r23, r19
     5c0:	07 2e       	mov	r0, r23
     5c2:	00 0c       	add	r0, r0
     5c4:	88 0b       	sbc	r24, r24
     5c6:	99 0b       	sbc	r25, r25
     5c8:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     5cc:	4b 01       	movw	r8, r22
     5ce:	5c 01       	movw	r10, r24
     5d0:	83 01       	movw	r16, r6
     5d2:	4d a1       	ldd	r20, Y+37	; 0x25
     5d4:	5e a1       	ldd	r21, Y+38	; 0x26
     5d6:	04 1b       	sub	r16, r20
     5d8:	15 0b       	sbc	r17, r21
     5da:	9b 01       	movw	r18, r22
     5dc:	ac 01       	movw	r20, r24
     5de:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     5e2:	6f ab       	std	Y+55, r22	; 0x37
     5e4:	78 af       	std	Y+56, r23	; 0x38
     5e6:	89 af       	std	Y+57, r24	; 0x39
     5e8:	9a af       	std	Y+58, r25	; 0x3a
     5ea:	00 9f       	mul	r16, r16
     5ec:	60 01       	movw	r12, r0
     5ee:	01 9f       	mul	r16, r17
     5f0:	d0 0c       	add	r13, r0
     5f2:	d0 0c       	add	r13, r0
     5f4:	11 24       	eor	r1, r1
     5f6:	0d 2c       	mov	r0, r13
     5f8:	00 0c       	add	r0, r0
     5fa:	ee 08       	sbc	r14, r14
     5fc:	ff 08       	sbc	r15, r15
     5fe:	a5 01       	movw	r20, r10
     600:	94 01       	movw	r18, r8
     602:	c5 01       	movw	r24, r10
     604:	b4 01       	movw	r22, r8
     606:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     60a:	4b 01       	movw	r8, r22
     60c:	5c 01       	movw	r10, r24
     60e:	c7 01       	movw	r24, r14
     610:	b6 01       	movw	r22, r12
     612:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     616:	9b 01       	movw	r18, r22
     618:	ac 01       	movw	r20, r24
     61a:	c5 01       	movw	r24, r10
     61c:	b4 01       	movw	r22, r8
     61e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__addsf3>
     622:	0e 94 1f 13 	call	0x263e	; 0x263e <sqrt>
     626:	6f ab       	std	Y+55, r22	; 0x37
     628:	78 af       	std	Y+56, r23	; 0x38
     62a:	89 af       	std	Y+57, r24	; 0x39
     62c:	9a af       	std	Y+58, r25	; 0x3a
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     62e:	6d a5       	ldd	r22, Y+45	; 0x2d
     630:	7e a5       	ldd	r23, Y+46	; 0x2e
     632:	89 a1       	ldd	r24, Y+33	; 0x21
     634:	9a a1       	ldd	r25, Y+34	; 0x22
     636:	68 1b       	sub	r22, r24
     638:	79 0b       	sbc	r23, r25
     63a:	07 2e       	mov	r0, r23
     63c:	00 0c       	add	r0, r0
     63e:	88 0b       	sbc	r24, r24
     640:	99 0b       	sbc	r25, r25
     642:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     646:	4b 01       	movw	r8, r22
     648:	5c 01       	movw	r10, r24
     64a:	09 a9       	ldd	r16, Y+49	; 0x31
     64c:	1a a9       	ldd	r17, Y+50	; 0x32
     64e:	ed a1       	ldd	r30, Y+37	; 0x25
     650:	fe a1       	ldd	r31, Y+38	; 0x26
     652:	0e 1b       	sub	r16, r30
     654:	1f 0b       	sbc	r17, r31
     656:	9b 01       	movw	r18, r22
     658:	ac 01       	movw	r20, r24
     65a:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     65e:	69 a3       	std	Y+33, r22	; 0x21
     660:	7a a3       	std	Y+34, r23	; 0x22
     662:	8b a3       	std	Y+35, r24	; 0x23
     664:	9c a3       	std	Y+36, r25	; 0x24
     666:	00 9f       	mul	r16, r16
     668:	60 01       	movw	r12, r0
     66a:	01 9f       	mul	r16, r17
     66c:	d0 0c       	add	r13, r0
     66e:	d0 0c       	add	r13, r0
     670:	11 24       	eor	r1, r1
     672:	0d 2c       	mov	r0, r13
     674:	00 0c       	add	r0, r0
     676:	ee 08       	sbc	r14, r14
     678:	ff 08       	sbc	r15, r15
     67a:	a5 01       	movw	r20, r10
     67c:	94 01       	movw	r18, r8
     67e:	c5 01       	movw	r24, r10
     680:	b4 01       	movw	r22, r8
     682:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     686:	4b 01       	movw	r8, r22
     688:	5c 01       	movw	r10, r24
     68a:	c7 01       	movw	r24, r14
     68c:	b6 01       	movw	r22, r12
     68e:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	c5 01       	movw	r24, r10
     698:	b4 01       	movw	r22, r8
     69a:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__addsf3>
     69e:	0e 94 1f 13 	call	0x263e	; 0x263e <sqrt>
     6a2:	4b 01       	movw	r8, r22
     6a4:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     6a6:	6d a5       	ldd	r22, Y+45	; 0x2d
     6a8:	7e a5       	ldd	r23, Y+46	; 0x2e
     6aa:	29 a5       	ldd	r18, Y+41	; 0x29
     6ac:	3a a5       	ldd	r19, Y+42	; 0x2a
     6ae:	62 1b       	sub	r22, r18
     6b0:	73 0b       	sbc	r23, r19
     6b2:	07 2e       	mov	r0, r23
     6b4:	00 0c       	add	r0, r0
     6b6:	88 0b       	sbc	r24, r24
     6b8:	99 0b       	sbc	r25, r25
     6ba:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     6be:	69 a3       	std	Y+33, r22	; 0x21
     6c0:	7a a3       	std	Y+34, r23	; 0x22
     6c2:	8b a3       	std	Y+35, r24	; 0x23
     6c4:	9c a3       	std	Y+36, r25	; 0x24
     6c6:	09 a9       	ldd	r16, Y+49	; 0x31
     6c8:	1a a9       	ldd	r17, Y+50	; 0x32
     6ca:	06 19       	sub	r16, r6
     6cc:	17 09       	sbc	r17, r7
     6ce:	9b 01       	movw	r18, r22
     6d0:	ac 01       	movw	r20, r24
     6d2:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     6d6:	6d a3       	std	Y+37, r22	; 0x25
     6d8:	7e a3       	std	Y+38, r23	; 0x26
     6da:	8f a3       	std	Y+39, r24	; 0x27
     6dc:	98 a7       	std	Y+40, r25	; 0x28
     6de:	00 9f       	mul	r16, r16
     6e0:	60 01       	movw	r12, r0
     6e2:	01 9f       	mul	r16, r17
     6e4:	d0 0c       	add	r13, r0
     6e6:	d0 0c       	add	r13, r0
     6e8:	11 24       	eor	r1, r1
     6ea:	0d 2c       	mov	r0, r13
     6ec:	00 0c       	add	r0, r0
     6ee:	ee 08       	sbc	r14, r14
     6f0:	ff 08       	sbc	r15, r15
     6f2:	29 a1       	ldd	r18, Y+33	; 0x21
     6f4:	3a a1       	ldd	r19, Y+34	; 0x22
     6f6:	4b a1       	ldd	r20, Y+35	; 0x23
     6f8:	5c a1       	ldd	r21, Y+36	; 0x24
     6fa:	ca 01       	movw	r24, r20
     6fc:	b9 01       	movw	r22, r18
     6fe:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     702:	69 a3       	std	Y+33, r22	; 0x21
     704:	7a a3       	std	Y+34, r23	; 0x22
     706:	8b a3       	std	Y+35, r24	; 0x23
     708:	9c a3       	std	Y+36, r25	; 0x24
     70a:	c7 01       	movw	r24, r14
     70c:	b6 01       	movw	r22, r12
     70e:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     712:	9b 01       	movw	r18, r22
     714:	ac 01       	movw	r20, r24
     716:	69 a1       	ldd	r22, Y+33	; 0x21
     718:	7a a1       	ldd	r23, Y+34	; 0x22
     71a:	8b a1       	ldd	r24, Y+35	; 0x23
     71c:	9c a1       	ldd	r25, Y+36	; 0x24
     71e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__addsf3>
     722:	0e 94 1f 13 	call	0x263e	; 0x263e <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     726:	2b ad       	ldd	r18, Y+59	; 0x3b
     728:	3c ad       	ldd	r19, Y+60	; 0x3c
     72a:	4d ad       	ldd	r20, Y+61	; 0x3d
     72c:	5e ad       	ldd	r21, Y+62	; 0x3e
     72e:	29 83       	std	Y+1, r18	; 0x01
     730:	3a 83       	std	Y+2, r19	; 0x02
     732:	4b 83       	std	Y+3, r20	; 0x03
     734:	5c 83       	std	Y+4, r21	; 0x04
     736:	23 96       	adiw	r28, 0x03	; 3
     738:	2c ad       	ldd	r18, Y+60	; 0x3c
     73a:	3d ad       	ldd	r19, Y+61	; 0x3d
     73c:	4e ad       	ldd	r20, Y+62	; 0x3e
     73e:	5f ad       	ldd	r21, Y+63	; 0x3f
     740:	23 97       	sbiw	r28, 0x03	; 3
     742:	2d 83       	std	Y+5, r18	; 0x05
     744:	3e 83       	std	Y+6, r19	; 0x06
     746:	4f 83       	std	Y+7, r20	; 0x07
     748:	58 87       	std	Y+8, r21	; 0x08
     74a:	2b a9       	ldd	r18, Y+51	; 0x33
     74c:	3c a9       	ldd	r19, Y+52	; 0x34
     74e:	4d a9       	ldd	r20, Y+53	; 0x35
     750:	5e a9       	ldd	r21, Y+54	; 0x36
     752:	29 87       	std	Y+9, r18	; 0x09
     754:	3a 87       	std	Y+10, r19	; 0x0a
     756:	4b 87       	std	Y+11, r20	; 0x0b
     758:	5c 87       	std	Y+12, r21	; 0x0c
     75a:	2f a9       	ldd	r18, Y+55	; 0x37
     75c:	38 ad       	ldd	r19, Y+56	; 0x38
     75e:	49 ad       	ldd	r20, Y+57	; 0x39
     760:	5a ad       	ldd	r21, Y+58	; 0x3a
     762:	2d 87       	std	Y+13, r18	; 0x0d
     764:	3e 87       	std	Y+14, r19	; 0x0e
     766:	4f 87       	std	Y+15, r20	; 0x0f
     768:	58 8b       	std	Y+16, r21	; 0x10
     76a:	89 8a       	std	Y+17, r8	; 0x11
     76c:	9a 8a       	std	Y+18, r9	; 0x12
     76e:	ab 8a       	std	Y+19, r10	; 0x13
     770:	bc 8a       	std	Y+20, r11	; 0x14
     772:	6d 8b       	std	Y+21, r22	; 0x15
     774:	7e 8b       	std	Y+22, r23	; 0x16
     776:	8f 8b       	std	Y+23, r24	; 0x17
     778:	98 8f       	std	Y+24, r25	; 0x18
     77a:	ae 01       	movw	r20, r28
     77c:	4f 5f       	subi	r20, 0xFF	; 255
     77e:	5f 4f       	sbci	r21, 0xFF	; 255
     780:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     782:	00 e0       	ldi	r16, 0x00	; 0
     784:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     786:	61 2c       	mov	r6, r1
     788:	71 2c       	mov	r7, r1
     78a:	c1 2c       	mov	r12, r1
     78c:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     78e:	21 2c       	mov	r2, r1
     790:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     792:	f7 01       	movw	r30, r14
     794:	81 90       	ld	r8, Z+
     796:	91 90       	ld	r9, Z+
     798:	a1 90       	ld	r10, Z+
     79a:	b1 90       	ld	r11, Z+
     79c:	7f 01       	movw	r14, r30
     79e:	26 2d       	mov	r18, r6
     7a0:	37 2d       	mov	r19, r7
     7a2:	4c 2d       	mov	r20, r12
     7a4:	5d 2d       	mov	r21, r13
     7a6:	c5 01       	movw	r24, r10
     7a8:	b4 01       	movw	r22, r8
     7aa:	0e 94 97 12 	call	0x252e	; 0x252e <__gesf2>
     7ae:	18 16       	cp	r1, r24
     7b0:	34 f4       	brge	.+12     	; 0x7be <fourPointCalc+0x3e8>
			indexMax = i;
			maxVal = distVect[i];
     7b2:	68 2c       	mov	r6, r8
     7b4:	79 2c       	mov	r7, r9
     7b6:	ca 2c       	mov	r12, r10
     7b8:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     7ba:	20 2e       	mov	r2, r16
     7bc:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     7be:	0f 5f       	subi	r16, 0xFF	; 255
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
     7c2:	06 30       	cpi	r16, 0x06	; 6
     7c4:	11 05       	cpc	r17, r1
     7c6:	29 f7       	brne	.-54     	; 0x792 <fourPointCalc+0x3bc>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLongRef; 
	pointsLongRef = distIndex(indexMax);
     7c8:	82 2d       	mov	r24, r2
     7ca:	93 2d       	mov	r25, r3
     7cc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <distIndex>
	
	int pointsLong[2] = {(pointsLongRef[0]), (pointsLongRef[1])};
     7d0:	fc 01       	movw	r30, r24
     7d2:	e0 80       	ld	r14, Z
     7d4:	f1 80       	ldd	r15, Z+1	; 0x01
     7d6:	fa 8e       	std	Y+26, r15	; 0x1a
     7d8:	e9 8e       	std	Y+25, r14	; 0x19
     7da:	02 81       	ldd	r16, Z+2	; 0x02
     7dc:	13 81       	ldd	r17, Z+3	; 0x03
     7de:	1c 8f       	std	Y+28, r17	; 0x1c
     7e0:	0b 8f       	std	Y+27, r16	; 0x1b
	
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	ee 0c       	add	r14, r14
     7e8:	ff 1c       	adc	r15, r15
     7ea:	e4 0c       	add	r14, r4
     7ec:	f5 1c       	adc	r15, r5
     7ee:	00 0f       	add	r16, r16
     7f0:	11 1f       	adc	r17, r17
     7f2:	00 0f       	add	r16, r16
     7f4:	11 1f       	adc	r17, r17
     7f6:	04 0d       	add	r16, r4
     7f8:	15 1d       	adc	r17, r5
     7fa:	f7 01       	movw	r30, r14
     7fc:	60 81       	ld	r22, Z
     7fe:	71 81       	ldd	r23, Z+1	; 0x01
     800:	f8 01       	movw	r30, r16
     802:	80 81       	ld	r24, Z
     804:	91 81       	ldd	r25, Z+1	; 0x01
     806:	68 0f       	add	r22, r24
     808:	79 1f       	adc	r23, r25
     80a:	77 23       	and	r23, r23
     80c:	14 f4       	brge	.+4      	; 0x812 <fourPointCalc+0x43c>
     80e:	6f 5f       	subi	r22, 0xFF	; 255
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	75 95       	asr	r23
     814:	67 95       	ror	r22
     816:	07 2e       	mov	r0, r23
     818:	00 0c       	add	r0, r0
     81a:	88 0b       	sbc	r24, r24
     81c:	99 0b       	sbc	r25, r25
     81e:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     822:	4b 01       	movw	r8, r22
     824:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     826:	f7 01       	movw	r30, r14
     828:	62 81       	ldd	r22, Z+2	; 0x02
     82a:	73 81       	ldd	r23, Z+3	; 0x03
     82c:	f8 01       	movw	r30, r16
     82e:	82 81       	ldd	r24, Z+2	; 0x02
     830:	93 81       	ldd	r25, Z+3	; 0x03
     832:	68 0f       	add	r22, r24
     834:	79 1f       	adc	r23, r25
     836:	77 23       	and	r23, r23
     838:	14 f4       	brge	.+4      	; 0x83e <fourPointCalc+0x468>
     83a:	6f 5f       	subi	r22, 0xFF	; 255
     83c:	7f 4f       	sbci	r23, 0xFF	; 255
     83e:	75 95       	asr	r23
     840:	67 95       	ror	r22
     842:	07 2e       	mov	r0, r23
     844:	00 0c       	add	r0, r0
     846:	88 0b       	sbc	r24, r24
     848:	99 0b       	sbc	r25, r25
     84a:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     84e:	69 a3       	std	Y+33, r22	; 0x21
     850:	7a a3       	std	Y+34, r23	; 0x22
     852:	8b a3       	std	Y+35, r24	; 0x23
     854:	9c a3       	std	Y+36, r25	; 0x24
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     856:	9e 01       	movw	r18, r28
     858:	21 5e       	subi	r18, 0xE1	; 225
     85a:	3f 4f       	sbci	r19, 0xFF	; 255
     85c:	ae 01       	movw	r20, r28
     85e:	43 5e       	subi	r20, 0xE3	; 227
     860:	5f 4f       	sbci	r21, 0xFF	; 255
     862:	be 01       	movw	r22, r28
     864:	6f 5f       	subi	r22, 0xFF	; 255
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	ce 01       	movw	r24, r28
     86a:	49 96       	adiw	r24, 0x19	; 25
     86c:	0e 94 43 01 	call	0x286	; 0x286 <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     870:	0d 8d       	ldd	r16, Y+29	; 0x1d
     872:	1e 8d       	ldd	r17, Y+30	; 0x1e
     874:	00 0f       	add	r16, r16
     876:	11 1f       	adc	r17, r17
     878:	00 0f       	add	r16, r16
     87a:	11 1f       	adc	r17, r17
     87c:	04 0d       	add	r16, r4
     87e:	15 1d       	adc	r17, r5
     880:	2f 8c       	ldd	r2, Y+31	; 0x1f
     882:	38 a0       	ldd	r3, Y+32	; 0x20
     884:	22 0c       	add	r2, r2
     886:	33 1c       	adc	r3, r3
     888:	22 0c       	add	r2, r2
     88a:	33 1c       	adc	r3, r3
     88c:	24 0c       	add	r2, r4
     88e:	35 1c       	adc	r3, r5
     890:	f8 01       	movw	r30, r16
     892:	60 81       	ld	r22, Z
     894:	71 81       	ldd	r23, Z+1	; 0x01
     896:	f1 01       	movw	r30, r2
     898:	80 81       	ld	r24, Z
     89a:	91 81       	ldd	r25, Z+1	; 0x01
     89c:	68 1b       	sub	r22, r24
     89e:	79 0b       	sbc	r23, r25
     8a0:	07 2e       	mov	r0, r23
     8a2:	00 0c       	add	r0, r0
     8a4:	88 0b       	sbc	r24, r24
     8a6:	99 0b       	sbc	r25, r25
     8a8:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
     8ac:	6b 01       	movw	r12, r22
     8ae:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     8b0:	f8 01       	movw	r30, r16
     8b2:	62 81       	ldd	r22, Z+2	; 0x02
     8b4:	73 81       	ldd	r23, Z+3	; 0x03
     8b6:	f1 01       	movw	r30, r2
     8b8:	82 81       	ldd	r24, Z+2	; 0x02
     8ba:	93 81       	ldd	r25, Z+3	; 0x03
     8bc:	68 1b       	sub	r22, r24
     8be:	79 0b       	sbc	r23, r25
     8c0:	07 2e       	mov	r0, r23
     8c2:	00 0c       	add	r0, r0
     8c4:	88 0b       	sbc	r24, r24
     8c6:	99 0b       	sbc	r25, r25
     8c8:	0e 94 81 11 	call	0x2302	; 0x2302 <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     8cc:	90 58       	subi	r25, 0x80	; 128
     8ce:	a7 01       	movw	r20, r14
     8d0:	96 01       	movw	r18, r12
     8d2:	0e 94 75 10 	call	0x20ea	; 0x20ea <atan2>
	theta += M_PI/2.0;
     8d6:	2b ed       	ldi	r18, 0xDB	; 219
     8d8:	3f e0       	ldi	r19, 0x0F	; 15
     8da:	49 ec       	ldi	r20, 0xC9	; 201
     8dc:	5f e3       	ldi	r21, 0x3F	; 63
     8de:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__addsf3>
     8e2:	6b 01       	movw	r12, r22
     8e4:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     8e6:	a5 01       	movw	r20, r10
     8e8:	94 01       	movw	r18, r8
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	94 e4       	ldi	r25, 0x44	; 68
     8f2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
     8f6:	4b 01       	movw	r8, r22
     8f8:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     8fa:	29 a1       	ldd	r18, Y+33	; 0x21
     8fc:	3a a1       	ldd	r19, Y+34	; 0x22
     8fe:	4b a1       	ldd	r20, Y+35	; 0x23
     900:	5c a1       	ldd	r21, Y+36	; 0x24
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	8f eb       	ldi	r24, 0xBF	; 191
     908:	93 e4       	ldi	r25, 0x43	; 67
     90a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
     90e:	2b 01       	movw	r4, r22
     910:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     912:	c7 01       	movw	r24, r14
     914:	b6 01       	movw	r22, r12
     916:	0e 94 11 13 	call	0x2622	; 0x2622 <sin>
     91a:	69 a3       	std	Y+33, r22	; 0x21
     91c:	7a a3       	std	Y+34, r23	; 0x22
     91e:	8b a3       	std	Y+35, r24	; 0x23
     920:	9c a3       	std	Y+36, r25	; 0x24
     922:	c7 01       	movw	r24, r14
     924:	b6 01       	movw	r22, r12
     926:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <cos>
     92a:	6d a3       	std	Y+37, r22	; 0x25
     92c:	7e a3       	std	Y+38, r23	; 0x26
     92e:	8f a3       	std	Y+39, r24	; 0x27
     930:	98 a7       	std	Y+40, r25	; 0x28
     932:	06 e2       	ldi	r16, 0x26	; 38
     934:	11 e0       	ldi	r17, 0x01	; 1
     936:	29 a1       	ldd	r18, Y+33	; 0x21
     938:	3a a1       	ldd	r19, Y+34	; 0x22
     93a:	4b a1       	ldd	r20, Y+35	; 0x23
     93c:	5c a1       	ldd	r21, Y+36	; 0x24
     93e:	c3 01       	movw	r24, r6
     940:	b2 01       	movw	r22, r4
     942:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     946:	69 a7       	std	Y+41, r22	; 0x29
     948:	7a a7       	std	Y+42, r23	; 0x2a
     94a:	8b a7       	std	Y+43, r24	; 0x2b
     94c:	9c a7       	std	Y+44, r25	; 0x2c
     94e:	2d a1       	ldd	r18, Y+37	; 0x25
     950:	3e a1       	ldd	r19, Y+38	; 0x26
     952:	4f a1       	ldd	r20, Y+39	; 0x27
     954:	58 a5       	ldd	r21, Y+40	; 0x28
     956:	c5 01       	movw	r24, r10
     958:	b4 01       	movw	r22, r8
     95a:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     95e:	9b 01       	movw	r18, r22
     960:	ac 01       	movw	r20, r24
     962:	69 a5       	ldd	r22, Y+41	; 0x29
     964:	7a a5       	ldd	r23, Y+42	; 0x2a
     966:	8b a5       	ldd	r24, Y+43	; 0x2b
     968:	9c a5       	ldd	r25, Y+44	; 0x2c
     96a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
     96e:	f8 01       	movw	r30, r16
     970:	60 83       	st	Z, r22
     972:	71 83       	std	Z+1, r23	; 0x01
     974:	82 83       	std	Z+2, r24	; 0x02
     976:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     978:	2d a1       	ldd	r18, Y+37	; 0x25
     97a:	3e a1       	ldd	r19, Y+38	; 0x26
     97c:	4f a1       	ldd	r20, Y+39	; 0x27
     97e:	58 a5       	ldd	r21, Y+40	; 0x28
     980:	c3 01       	movw	r24, r6
     982:	b2 01       	movw	r22, r4
     984:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     988:	2b 01       	movw	r4, r22
     98a:	3c 01       	movw	r6, r24
     98c:	29 a1       	ldd	r18, Y+33	; 0x21
     98e:	3a a1       	ldd	r19, Y+34	; 0x22
     990:	4b a1       	ldd	r20, Y+35	; 0x23
     992:	5c a1       	ldd	r21, Y+36	; 0x24
     994:	c5 01       	movw	r24, r10
     996:	b4 01       	movw	r22, r8
     998:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     99c:	9b 01       	movw	r18, r22
     99e:	ac 01       	movw	r20, r24
     9a0:	c3 01       	movw	r24, r6
     9a2:	b2 01       	movw	r22, r4
     9a4:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__addsf3>
     9a8:	f8 01       	movw	r30, r16
     9aa:	64 83       	std	Z+4, r22	; 0x04
     9ac:	75 83       	std	Z+5, r23	; 0x05
     9ae:	86 83       	std	Z+6, r24	; 0x06
     9b0:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta;
     9b2:	f7 fa       	bst	r15, 7
     9b4:	f0 94       	com	r15
     9b6:	f7 f8       	bld	r15, 7
     9b8:	f0 94       	com	r15
     9ba:	c0 86       	std	Z+8, r12	; 0x08
     9bc:	d1 86       	std	Z+9, r13	; 0x09
     9be:	e2 86       	std	Z+10, r14	; 0x0a
     9c0:	f3 86       	std	Z+11, r15	; 0x0b
	
	return centerFour;
}
     9c2:	c8 01       	movw	r24, r16
     9c4:	ce 5b       	subi	r28, 0xBE	; 190
     9c6:	df 4f       	sbci	r29, 0xFF	; 255
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	cf 90       	pop	r12
     9e2:	bf 90       	pop	r11
     9e4:	af 90       	pop	r10
     9e6:	9f 90       	pop	r9
     9e8:	8f 90       	pop	r8
     9ea:	7f 90       	pop	r7
     9ec:	6f 90       	pop	r6
     9ee:	5f 90       	pop	r5
     9f0:	4f 90       	pop	r4
     9f2:	3f 90       	pop	r3
     9f4:	2f 90       	pop	r2
     9f6:	08 95       	ret

000009f8 <localization_calc>:
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
     9f8:	4f 92       	push	r4
     9fa:	5f 92       	push	r5
     9fc:	6f 92       	push	r6
     9fe:	7f 92       	push	r7
     a00:	af 92       	push	r10
     a02:	bf 92       	push	r11
     a04:	cf 92       	push	r12
     a06:	df 92       	push	r13
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
     a18:	68 97       	sbiw	r28, 0x18	; 24
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	f8 94       	cli
     a1e:	de bf       	out	0x3e, r29	; 62
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	cd bf       	out	0x3d, r28	; 61
     a24:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     a26:	0d b7       	in	r16, 0x3d	; 61
     a28:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	9a 83       	std	Y+2, r25	; 0x02
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	80 85       	ldd	r24, Z+8	; 0x08
     a34:	91 85       	ldd	r25, Z+9	; 0x09
     a36:	9c 83       	std	Y+4, r25	; 0x04
     a38:	8b 83       	std	Y+3, r24	; 0x03
     a3a:	82 81       	ldd	r24, Z+2	; 0x02
     a3c:	93 81       	ldd	r25, Z+3	; 0x03
     a3e:	9e 83       	std	Y+6, r25	; 0x06
     a40:	8d 83       	std	Y+5, r24	; 0x05
     a42:	82 85       	ldd	r24, Z+10	; 0x0a
     a44:	93 85       	ldd	r25, Z+11	; 0x0b
     a46:	98 87       	std	Y+8, r25	; 0x08
     a48:	8f 83       	std	Y+7, r24	; 0x07
     a4a:	84 81       	ldd	r24, Z+4	; 0x04
     a4c:	95 81       	ldd	r25, Z+5	; 0x05
     a4e:	9a 87       	std	Y+10, r25	; 0x0a
     a50:	89 87       	std	Y+9, r24	; 0x09
     a52:	84 85       	ldd	r24, Z+12	; 0x0c
     a54:	95 85       	ldd	r25, Z+13	; 0x0d
     a56:	9c 87       	std	Y+12, r25	; 0x0c
     a58:	8b 87       	std	Y+11, r24	; 0x0b
     a5a:	86 81       	ldd	r24, Z+6	; 0x06
     a5c:	97 81       	ldd	r25, Z+7	; 0x07
     a5e:	9e 87       	std	Y+14, r25	; 0x0e
     a60:	8d 87       	std	Y+13, r24	; 0x0d
     a62:	86 85       	ldd	r24, Z+14	; 0x0e
     a64:	97 85       	ldd	r25, Z+15	; 0x0f
     a66:	98 8b       	std	Y+16, r25	; 0x10
     a68:	8f 87       	std	Y+15, r24	; 0x0f
		{rawStarData[3], rawStarData[7]}
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     a6a:	fe 01       	movw	r30, r28
     a6c:	71 96       	adiw	r30, 0x11	; 17
     a6e:	88 e0       	ldi	r24, 0x08	; 8
     a70:	df 01       	movw	r26, r30
     a72:	1d 92       	st	X+, r1
     a74:	8a 95       	dec	r24
     a76:	e9 f7       	brne	.-6      	; 0xa72 <localization_calc+0x7a>
     a78:	70 97       	sbiw	r30, 0x10	; 16
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     a82:	40 81       	ld	r20, Z
     a84:	51 81       	ldd	r21, Z+1	; 0x01
     a86:	4f 3f       	cpi	r20, 0xFF	; 255
     a88:	53 40       	sbci	r21, 0x03	; 3
     a8a:	71 f0       	breq	.+28     	; 0xaa8 <localization_calc+0xb0>
			pointIndices[numPoints] = i;
     a8c:	dc 01       	movw	r26, r24
     a8e:	aa 0f       	add	r26, r26
     a90:	bb 1f       	adc	r27, r27
     a92:	41 e0       	ldi	r20, 0x01	; 1
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	4c 0f       	add	r20, r28
     a98:	5d 1f       	adc	r21, r29
     a9a:	a4 0f       	add	r26, r20
     a9c:	b5 1f       	adc	r27, r21
     a9e:	51 96       	adiw	r26, 0x11	; 17
     aa0:	3c 93       	st	X, r19
     aa2:	2e 93       	st	-X, r18
     aa4:	50 97       	sbiw	r26, 0x10	; 16
			numPoints++;
     aa6:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     aa8:	2f 5f       	subi	r18, 0xFF	; 255
     aaa:	3f 4f       	sbci	r19, 0xFF	; 255
     aac:	34 96       	adiw	r30, 0x04	; 4
     aae:	24 30       	cpi	r18, 0x04	; 4
     ab0:	31 05       	cpc	r19, r1
     ab2:	39 f7       	brne	.-50     	; 0xa82 <localization_calc+0x8a>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     ab4:	00 97       	sbiw	r24, 0x00	; 0
     ab6:	09 f4       	brne	.+2      	; 0xaba <localization_calc+0xc2>
     ab8:	8b c0       	rjmp	.+278    	; 0xbd0 <__stack+0xd1>
     aba:	ed b6       	in	r14, 0x3d	; 61
     abc:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     abe:	6c 01       	movw	r12, r24
     ac0:	cc 0c       	add	r12, r12
     ac2:	dd 1c       	adc	r13, r13
     ac4:	cc 0c       	add	r12, r12
     ac6:	dd 1c       	adc	r13, r13
     ac8:	ad b7       	in	r26, 0x3d	; 61
     aca:	be b7       	in	r27, 0x3e	; 62
     acc:	ac 19       	sub	r26, r12
     ace:	bd 09       	sbc	r27, r13
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	be bf       	out	0x3e, r27	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	ad bf       	out	0x3d, r26	; 61
     ada:	ed b7       	in	r30, 0x3d	; 61
     adc:	fe b7       	in	r31, 0x3e	; 62
     ade:	31 96       	adiw	r30, 0x01	; 1
     ae0:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     ae2:	18 16       	cp	r1, r24
     ae4:	19 06       	cpc	r1, r25
     ae6:	24 f5       	brge	.+72     	; 0xb30 <__stack+0x31>
     ae8:	9e 01       	movw	r18, r28
     aea:	2f 5e       	subi	r18, 0xEF	; 239
     aec:	3f 4f       	sbci	r19, 0xFF	; 255
     aee:	df 01       	movw	r26, r30
     af0:	ce 0e       	add	r12, r30
     af2:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     af4:	f9 01       	movw	r30, r18
     af6:	41 91       	ld	r20, Z+
     af8:	51 91       	ld	r21, Z+
     afa:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     afc:	fa 01       	movw	r30, r20
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	ee 0f       	add	r30, r30
     b04:	ff 1f       	adc	r31, r31
     b06:	41 e0       	ldi	r20, 0x01	; 1
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	4c 0f       	add	r20, r28
     b0c:	5d 1f       	adc	r21, r29
     b0e:	e4 0f       	add	r30, r20
     b10:	f5 1f       	adc	r31, r21
     b12:	40 81       	ld	r20, Z
     b14:	51 81       	ldd	r21, Z+1	; 0x01
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	5c 93       	st	X, r21
     b1a:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     b1c:	42 81       	ldd	r20, Z+2	; 0x02
     b1e:	53 81       	ldd	r21, Z+3	; 0x03
     b20:	13 96       	adiw	r26, 0x03	; 3
     b22:	5c 93       	st	X, r21
     b24:	4e 93       	st	-X, r20
     b26:	12 97       	sbiw	r26, 0x02	; 2
     b28:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     b2a:	ac 15       	cp	r26, r12
     b2c:	bd 05       	cpc	r27, r13
     b2e:	11 f7       	brne	.-60     	; 0xaf4 <localization_calc+0xfc>
			points[i][0] = pvect[index][0];
			points[i][1] = pvect[index][1];
		}
		
		
		m_red(ON);
     b30:	6e 9a       	sbi	0x0d, 6	; 13
     b32:	76 98       	cbi	0x0e, 6	; 14
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     b34:	db 01       	movw	r26, r22
     b36:	4d 90       	ld	r4, X+
     b38:	5d 90       	ld	r5, X+
     b3a:	6d 90       	ld	r6, X+
     b3c:	7c 90       	ld	r7, X
     b3e:	13 97       	sbiw	r26, 0x03	; 3
     b40:	ee e3       	ldi	r30, 0x3E	; 62
     b42:	f1 e0       	ldi	r31, 0x01	; 1
     b44:	40 82       	st	Z, r4
     b46:	51 82       	std	Z+1, r5	; 0x01
     b48:	62 82       	std	Z+2, r6	; 0x02
     b4a:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     b4c:	14 96       	adiw	r26, 0x04	; 4
     b4e:	4d 90       	ld	r4, X+
     b50:	5d 90       	ld	r5, X+
     b52:	6d 90       	ld	r6, X+
     b54:	7c 90       	ld	r7, X
     b56:	17 97       	sbiw	r26, 0x07	; 7
     b58:	44 82       	std	Z+4, r4	; 0x04
     b5a:	55 82       	std	Z+5, r5	; 0x05
     b5c:	66 82       	std	Z+6, r6	; 0x06
     b5e:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     b60:	18 96       	adiw	r26, 0x08	; 8
     b62:	4d 91       	ld	r20, X+
     b64:	5d 91       	ld	r21, X+
     b66:	6d 91       	ld	r22, X+
     b68:	7c 91       	ld	r23, X
     b6a:	1b 97       	sbiw	r26, 0x0b	; 11
     b6c:	40 87       	std	Z+8, r20	; 0x08
     b6e:	51 87       	std	Z+9, r21	; 0x09
     b70:	62 87       	std	Z+10, r22	; 0x0a
     b72:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     b74:	04 97       	sbiw	r24, 0x04	; 4
     b76:	29 f4       	brne	.+10     	; 0xb82 <__stack+0x83>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     b78:	c5 01       	movw	r24, r10
     b7a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <fourPointCalc>
     b7e:	dc 01       	movw	r26, r24
				break;
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <__stack+0x87>
				
			case 3 : 
				//calcPointer = threePointCalc(points);
				calcPointer = &rc[0];
     b82:	ae e3       	ldi	r26, 0x3E	; 62
     b84:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				calcPointer = &rc[0];
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     b86:	4d 91       	ld	r20, X+
     b88:	5d 91       	ld	r21, X+
     b8a:	6d 91       	ld	r22, X+
     b8c:	7c 91       	ld	r23, X
     b8e:	13 97       	sbiw	r26, 0x03	; 3
     b90:	e2 e3       	ldi	r30, 0x32	; 50
     b92:	f1 e0       	ldi	r31, 0x01	; 1
     b94:	40 83       	st	Z, r20
     b96:	51 83       	std	Z+1, r21	; 0x01
     b98:	62 83       	std	Z+2, r22	; 0x02
     b9a:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     b9c:	14 96       	adiw	r26, 0x04	; 4
     b9e:	4d 91       	ld	r20, X+
     ba0:	5d 91       	ld	r21, X+
     ba2:	6d 91       	ld	r22, X+
     ba4:	7c 91       	ld	r23, X
     ba6:	17 97       	sbiw	r26, 0x07	; 7
     ba8:	44 83       	std	Z+4, r20	; 0x04
     baa:	55 83       	std	Z+5, r21	; 0x05
     bac:	66 83       	std	Z+6, r22	; 0x06
     bae:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     bb0:	18 96       	adiw	r26, 0x08	; 8
     bb2:	8d 91       	ld	r24, X+
     bb4:	9d 91       	ld	r25, X+
     bb6:	0d 90       	ld	r0, X+
     bb8:	bc 91       	ld	r27, X
     bba:	a0 2d       	mov	r26, r0
     bbc:	80 87       	std	Z+8, r24	; 0x08
     bbe:	91 87       	std	Z+9, r25	; 0x09
     bc0:	a2 87       	std	Z+10, r26	; 0x0a
     bc2:	b3 87       	std	Z+11, r27	; 0x0b
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	fe be       	out	0x3e, r15	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	ed be       	out	0x3d, r14	; 61
     bce:	22 c0       	rjmp	.+68     	; 0xc14 <__stack+0x115>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     bd0:	fb 01       	movw	r30, r22
     bd2:	80 81       	ld	r24, Z
     bd4:	91 81       	ldd	r25, Z+1	; 0x01
     bd6:	a2 81       	ldd	r26, Z+2	; 0x02
     bd8:	b3 81       	ldd	r27, Z+3	; 0x03
     bda:	e2 e3       	ldi	r30, 0x32	; 50
     bdc:	f1 e0       	ldi	r31, 0x01	; 1
     bde:	80 83       	st	Z, r24
     be0:	91 83       	std	Z+1, r25	; 0x01
     be2:	a2 83       	std	Z+2, r26	; 0x02
     be4:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     be6:	db 01       	movw	r26, r22
     be8:	14 96       	adiw	r26, 0x04	; 4
     bea:	cd 90       	ld	r12, X+
     bec:	dd 90       	ld	r13, X+
     bee:	ed 90       	ld	r14, X+
     bf0:	fc 90       	ld	r15, X
     bf2:	17 97       	sbiw	r26, 0x07	; 7
     bf4:	c4 82       	std	Z+4, r12	; 0x04
     bf6:	d5 82       	std	Z+5, r13	; 0x05
     bf8:	e6 82       	std	Z+6, r14	; 0x06
     bfa:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];
     bfc:	18 96       	adiw	r26, 0x08	; 8
     bfe:	4d 91       	ld	r20, X+
     c00:	5d 91       	ld	r21, X+
     c02:	6d 91       	ld	r22, X+
     c04:	7c 91       	ld	r23, X
     c06:	1b 97       	sbiw	r26, 0x0b	; 11
     c08:	40 87       	std	Z+8, r20	; 0x08
     c0a:	51 87       	std	Z+9, r21	; 0x09
     c0c:	62 87       	std	Z+10, r22	; 0x0a
     c0e:	73 87       	std	Z+11, r23	; 0x0b
		m_red(OFF);	
     c10:	6e 9a       	sbi	0x0d, 6	; 13
     c12:	76 9a       	sbi	0x0e, 6	; 14
	
	return robotCenter;
	
	
	
}
     c14:	82 e3       	ldi	r24, 0x32	; 50
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	1e bf       	out	0x3e, r17	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0d bf       	out	0x3d, r16	; 61
     c22:	68 96       	adiw	r28, 0x18	; 24
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	de bf       	out	0x3e, r29	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12
     c3e:	bf 90       	pop	r11
     c40:	af 90       	pop	r10
     c42:	7f 90       	pop	r7
     c44:	6f 90       	pop	r6
     c46:	5f 90       	pop	r5
     c48:	4f 90       	pop	r4
     c4a:	08 95       	ret

00000c4c <init>:
************************************************************/

/* Initialization of Pins and System Clock */
void init(void){
	
	m_clockdivide(CLOCK_DIVIDE); // Set to 2 MHz
     c4c:	e1 e6       	ldi	r30, 0x61	; 97
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 e8       	ldi	r24, 0x80	; 128
     c52:	80 83       	st	Z, r24
     c54:	10 82       	st	Z, r1
	
	//Set to Input
	clear(DDRD,0); // D0
     c56:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     c58:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     c5a:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     c5c:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     c5e:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     c60:	23 9a       	sbi	0x04, 3	; 4
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     c62:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     c64:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     c66:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     c68:	2b 98       	cbi	0x05, 3	; 5
	
	m_bus_init();
     c6a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <m_bus_init>
	while(!m_wii_open());
     c6e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <m_wii_open>
     c72:	88 23       	and	r24, r24
     c74:	e1 f3       	breq	.-8      	; 0xc6e <init+0x22>
	sei();
     c76:	78 94       	sei
     c78:	08 95       	ret

00000c7a <timer1_init>:
	//while(!m_usb_isconnected());
}

/* Timer1 Initialization for PWM Motor Control */
void timer1_init(void)
{
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     c7e:	e1 e8       	ldi	r30, 0x81	; 129
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	8b 7f       	andi	r24, 0xFB	; 251
     c86:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     c88:	80 81       	ld	r24, Z
     c8a:	8d 7f       	andi	r24, 0xFD	; 253
     c8c:	80 83       	st	Z, r24
	set(TCCR1B,CS10);
     c8e:	80 81       	ld	r24, Z
     c90:	81 60       	ori	r24, 0x01	; 1
     c92:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     c94:	80 81       	ld	r24, Z
     c96:	8f 7e       	andi	r24, 0xEF	; 239
     c98:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     c9a:	80 81       	ld	r24, Z
     c9c:	88 60       	ori	r24, 0x08	; 8
     c9e:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     ca0:	e0 e8       	ldi	r30, 0x80	; 128
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     caa:	80 81       	ld	r24, Z
     cac:	8e 7f       	andi	r24, 0xFE	; 254
     cae:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     cb0:	80 81       	ld	r24, Z
     cb2:	8f 7d       	andi	r24, 0xDF	; 223
     cb4:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     cb6:	80 81       	ld	r24, Z
     cb8:	8f 7e       	andi	r24, 0xEF	; 239
     cba:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     cbc:	c8 e8       	ldi	r28, 0x88	; 136
     cbe:	d0 e0       	ldi	r29, 0x00	; 0
     cc0:	80 e8       	ldi	r24, 0x80	; 128
     cc2:	9e e3       	ldi	r25, 0x3E	; 62
     cc4:	99 83       	std	Y+1, r25	; 0x01
     cc6:	88 83       	st	Y, r24
	OCR1B = (float)OCR1A*left_duty_cycle;
     cc8:	68 81       	ld	r22, Y
     cca:	79 81       	ldd	r23, Y+1	; 0x01
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__floatunsisf>
     cd4:	20 91 16 01 	lds	r18, 0x0116
     cd8:	30 91 17 01 	lds	r19, 0x0117
     cdc:	40 91 18 01 	lds	r20, 0x0118
     ce0:	50 91 19 01 	lds	r21, 0x0119
     ce4:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     ce8:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fixunssfsi>
     cec:	70 93 8b 00 	sts	0x008B, r23
     cf0:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*right_duty_cycle;
     cf4:	68 81       	ld	r22, Y
     cf6:	79 81       	ldd	r23, Y+1	; 0x01
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__floatunsisf>
     d00:	20 91 12 01 	lds	r18, 0x0112
     d04:	30 91 13 01 	lds	r19, 0x0113
     d08:	40 91 14 01 	lds	r20, 0x0114
     d0c:	50 91 15 01 	lds	r21, 0x0115
     d10:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     d14:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fixunssfsi>
     d18:	70 93 8d 00 	sts	0x008D, r23
     d1c:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     d20:	ef e6       	ldi	r30, 0x6F	; 111
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	82 60       	ori	r24, 0x02	; 2
     d28:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     d2a:	80 81       	ld	r24, Z
     d2c:	84 60       	ori	r24, 0x04	; 4
     d2e:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     d30:	80 81       	ld	r24, Z
     d32:	88 60       	ori	r24, 0x08	; 8
     d34:	80 83       	st	Z, r24
}
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <timer3_init>:

/* Timer3 Initialization for fixed timestep calculations */
void timer3_init(void)
{
	clear(TCCR3B,CS32); // prescale /1
     d3c:	e1 e9       	ldi	r30, 0x91	; 145
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8b 7f       	andi	r24, 0xFB	; 251
     d44:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     d46:	80 81       	ld	r24, Z
     d48:	8d 7f       	andi	r24, 0xFD	; 253
     d4a:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     d4c:	80 81       	ld	r24, Z
     d4e:	81 60       	ori	r24, 0x01	; 1
     d50:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     d52:	80 81       	ld	r24, Z
     d54:	8f 7e       	andi	r24, 0xEF	; 239
     d56:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     d58:	80 81       	ld	r24, Z
     d5a:	88 60       	ori	r24, 0x08	; 8
     d5c:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     d5e:	e0 e9       	ldi	r30, 0x90	; 144
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8d 7f       	andi	r24, 0xFD	; 253
     d66:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     d68:	80 81       	ld	r24, Z
     d6a:	8e 7f       	andi	r24, 0xFE	; 254
     d6c:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     d6e:	80 e8       	ldi	r24, 0x80	; 128
     d70:	9e e3       	ldi	r25, 0x3E	; 62
     d72:	90 93 99 00 	sts	0x0099, r25
     d76:	80 93 98 00 	sts	0x0098, r24
     d7a:	08 95       	ret

00000d7c <theta_error_correction>:

}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
     d7c:	8f 92       	push	r8
     d7e:	9f 92       	push	r9
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	6b 01       	movw	r12, r22
     d8e:	7c 01       	movw	r14, r24
	if(fabs(error)>PI){return error-2.0*PI*error/fabs(error);}
     d90:	4b 01       	movw	r8, r22
     d92:	5c 01       	movw	r10, r24
     d94:	e8 94       	clt
     d96:	b7 f8       	bld	r11, 7
     d98:	2b ed       	ldi	r18, 0xDB	; 219
     d9a:	3f e0       	ldi	r19, 0x0F	; 15
     d9c:	49 e4       	ldi	r20, 0x49	; 73
     d9e:	50 e4       	ldi	r21, 0x40	; 64
     da0:	c5 01       	movw	r24, r10
     da2:	b4 01       	movw	r22, r8
     da4:	0e 94 97 12 	call	0x252e	; 0x252e <__gesf2>
     da8:	18 16       	cp	r1, r24
     daa:	bc f4       	brge	.+46     	; 0xdda <theta_error_correction+0x5e>
     dac:	2b ed       	ldi	r18, 0xDB	; 219
     dae:	3f e0       	ldi	r19, 0x0F	; 15
     db0:	49 ec       	ldi	r20, 0xC9	; 201
     db2:	50 e4       	ldi	r21, 0x40	; 64
     db4:	c7 01       	movw	r24, r14
     db6:	b6 01       	movw	r22, r12
     db8:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     dbc:	a5 01       	movw	r20, r10
     dbe:	94 01       	movw	r18, r8
     dc0:	0e 94 de 10 	call	0x21bc	; 0x21bc <__divsf3>
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	c7 01       	movw	r24, r14
     dca:	b6 01       	movw	r22, r12
     dcc:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
     dd0:	56 2f       	mov	r21, r22
     dd2:	47 2f       	mov	r20, r23
     dd4:	38 2f       	mov	r19, r24
     dd6:	29 2f       	mov	r18, r25
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <theta_error_correction+0x66>
	else{return error;}
     dda:	5c 2d       	mov	r21, r12
     ddc:	4d 2d       	mov	r20, r13
     dde:	3e 2d       	mov	r19, r14
     de0:	2f 2d       	mov	r18, r15
}
     de2:	65 2f       	mov	r22, r21
     de4:	74 2f       	mov	r23, r20
     de6:	83 2f       	mov	r24, r19
     de8:	92 2f       	mov	r25, r18
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	cf 90       	pop	r12
     df2:	bf 90       	pop	r11
     df4:	af 90       	pop	r10
     df6:	9f 90       	pop	r9
     df8:	8f 90       	pop	r8
     dfa:	08 95       	ret

00000dfc <run_control_loop>:
	robotCenterPrev[1] = y;
}

/* PID Control (Currently only for theta) */
void run_control_loop(void)
{
     dfc:	4f 92       	push	r4
     dfe:	5f 92       	push	r5
     e00:	6f 92       	push	r6
     e02:	7f 92       	push	r7
     e04:	8f 92       	push	r8
     e06:	9f 92       	push	r9
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	60 97       	sbiw	r28, 0x10	; 16
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
	// Get theta error based output
	float theta_error = theta_target - theta;
     e2c:	20 91 67 01 	lds	r18, 0x0167
     e30:	30 91 68 01 	lds	r19, 0x0168
     e34:	40 91 69 01 	lds	r20, 0x0169
     e38:	50 91 6a 01 	lds	r21, 0x016A
     e3c:	60 91 5f 01 	lds	r22, 0x015F
     e40:	70 91 60 01 	lds	r23, 0x0160
     e44:	80 91 61 01 	lds	r24, 0x0161
     e48:	90 91 62 01 	lds	r25, 0x0162
     e4c:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
	theta_error = theta_error_correction(theta_error);
     e50:	0e 94 be 06 	call	0xd7c	; 0xd7c <theta_error_correction>
     e54:	6b 01       	movw	r12, r22
     e56:	7c 01       	movw	r14, r24
	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
     e58:	20 91 5b 01 	lds	r18, 0x015B
     e5c:	30 91 5c 01 	lds	r19, 0x015C
     e60:	40 91 5d 01 	lds	r20, 0x015D
     e64:	50 91 5e 01 	lds	r21, 0x015E
     e68:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
     e6c:	2f e6       	ldi	r18, 0x6F	; 111
     e6e:	32 e1       	ldi	r19, 0x12	; 18
     e70:	43 e8       	ldi	r20, 0x83	; 131
     e72:	5a e3       	ldi	r21, 0x3A	; 58
     e74:	0e 94 de 10 	call	0x21bc	; 0x21bc <__divsf3>
	float angular_output = THETA_Kp*theta_error - THETA_Kd*derivative; //If output > 0, turn left
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	a9 01       	movw	r20, r18
     e7e:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     e82:	9b 01       	movw	r18, r22
     e84:	ac 01       	movw	r20, r24
     e86:	c7 01       	movw	r24, r14
     e88:	b6 01       	movw	r22, r12
     e8a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
	previous_theta_error = theta_error;
     e8e:	c0 92 5b 01 	sts	0x015B, r12
     e92:	d0 92 5c 01 	sts	0x015C, r13
     e96:	e0 92 5d 01 	sts	0x015D, r14
     e9a:	f0 92 5e 01 	sts	0x015E, r15
	angular_output = angular_output/PI; //Normalize to max value of 1 given Kp gain of 1
     e9e:	2b ed       	ldi	r18, 0xDB	; 219
     ea0:	3f e0       	ldi	r19, 0x0F	; 15
     ea2:	49 e4       	ldi	r20, 0x49	; 73
     ea4:	50 e4       	ldi	r21, 0x40	; 64
     ea6:	0e 94 de 10 	call	0x21bc	; 0x21bc <__divsf3>
     eaa:	2b 01       	movw	r4, r22
     eac:	3c 01       	movw	r6, r24
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	b0 58       	subi	r27, 0x80	; 128
     eb4:	8d 87       	std	Y+13, r24	; 0x0d
     eb6:	9e 87       	std	Y+14, r25	; 0x0e
     eb8:	af 87       	std	Y+15, r26	; 0x0f
     eba:	b8 8b       	std	Y+16, r27	; 0x10
	right_duty_cycle = angular_output;
	
	// Get linear error based output
	float y_delta = y_target-y;
     ebc:	20 91 6b 01 	lds	r18, 0x016B
     ec0:	30 91 6c 01 	lds	r19, 0x016C
     ec4:	40 91 6d 01 	lds	r20, 0x016D
     ec8:	50 91 6e 01 	lds	r21, 0x016E
     ecc:	60 91 63 01 	lds	r22, 0x0163
     ed0:	70 91 64 01 	lds	r23, 0x0164
     ed4:	80 91 65 01 	lds	r24, 0x0165
     ed8:	90 91 66 01 	lds	r25, 0x0166
     edc:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
     ee0:	69 83       	std	Y+1, r22	; 0x01
     ee2:	7a 83       	std	Y+2, r23	; 0x02
     ee4:	8b 83       	std	Y+3, r24	; 0x03
     ee6:	9c 83       	std	Y+4, r25	; 0x04
	float x_delta = x_target-x;
     ee8:	20 91 6f 01 	lds	r18, 0x016F
     eec:	30 91 70 01 	lds	r19, 0x0170
     ef0:	40 91 71 01 	lds	r20, 0x0171
     ef4:	50 91 72 01 	lds	r21, 0x0172
     ef8:	60 91 0e 01 	lds	r22, 0x010E
     efc:	70 91 0f 01 	lds	r23, 0x010F
     f00:	80 91 10 01 	lds	r24, 0x0110
     f04:	90 91 11 01 	lds	r25, 0x0111
     f08:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
     f0c:	6d 83       	std	Y+5, r22	; 0x05
     f0e:	7e 83       	std	Y+6, r23	; 0x06
     f10:	8f 83       	std	Y+7, r24	; 0x07
     f12:	98 87       	std	Y+8, r25	; 0x08
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
     f14:	c7 01       	movw	r24, r14
     f16:	b6 01       	movw	r22, r12
     f18:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <cos>
     f1c:	4b 01       	movw	r8, r22
     f1e:	5c 01       	movw	r10, r24
     f20:	29 81       	ldd	r18, Y+1	; 0x01
     f22:	3a 81       	ldd	r19, Y+2	; 0x02
     f24:	4b 81       	ldd	r20, Y+3	; 0x03
     f26:	5c 81       	ldd	r21, Y+4	; 0x04
     f28:	ca 01       	movw	r24, r20
     f2a:	b9 01       	movw	r22, r18
     f2c:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     f30:	69 87       	std	Y+9, r22	; 0x09
     f32:	7a 87       	std	Y+10, r23	; 0x0a
     f34:	8b 87       	std	Y+11, r24	; 0x0b
     f36:	9c 87       	std	Y+12, r25	; 0x0c
     f38:	29 81       	ldd	r18, Y+1	; 0x01
     f3a:	3a 81       	ldd	r19, Y+2	; 0x02
     f3c:	4b 81       	ldd	r20, Y+3	; 0x03
     f3e:	5c 81       	ldd	r21, Y+4	; 0x04
     f40:	ca 01       	movw	r24, r20
     f42:	b9 01       	movw	r22, r18
     f44:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     f48:	69 83       	std	Y+1, r22	; 0x01
     f4a:	7a 83       	std	Y+2, r23	; 0x02
     f4c:	8b 83       	std	Y+3, r24	; 0x03
     f4e:	9c 83       	std	Y+4, r25	; 0x04
     f50:	2d 81       	ldd	r18, Y+5	; 0x05
     f52:	3e 81       	ldd	r19, Y+6	; 0x06
     f54:	4f 81       	ldd	r20, Y+7	; 0x07
     f56:	58 85       	ldd	r21, Y+8	; 0x08
     f58:	ca 01       	movw	r24, r20
     f5a:	b9 01       	movw	r22, r18
     f5c:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     f60:	9b 01       	movw	r18, r22
     f62:	ac 01       	movw	r20, r24
     f64:	69 81       	ldd	r22, Y+1	; 0x01
     f66:	7a 81       	ldd	r23, Y+2	; 0x02
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__addsf3>
     f70:	0e 94 1f 13 	call	0x263e	; 0x263e <sqrt>
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
     f78:	c5 01       	movw	r24, r10
     f7a:	b4 01       	movw	r22, r8
     f7c:	9f 77       	andi	r25, 0x7F	; 127
     f7e:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     f82:	4b 01       	movw	r8, r22
     f84:	5c 01       	movw	r10, r24
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
	float linear_output = LINEAR_Kp*linear_error - LINEAR_Kd*derivative;
     f86:	2d ec       	ldi	r18, 0xCD	; 205
     f88:	3c ec       	ldi	r19, 0xCC	; 204
     f8a:	4c e4       	ldi	r20, 0x4C	; 76
     f8c:	5e e3       	ldi	r21, 0x3E	; 62
     f8e:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     f92:	69 83       	std	Y+1, r22	; 0x01
     f94:	7a 83       	std	Y+2, r23	; 0x02
     f96:	8b 83       	std	Y+3, r24	; 0x03
     f98:	9c 83       	std	Y+4, r25	; 0x04
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
     f9a:	20 91 57 01 	lds	r18, 0x0157
     f9e:	30 91 58 01 	lds	r19, 0x0158
     fa2:	40 91 59 01 	lds	r20, 0x0159
     fa6:	50 91 5a 01 	lds	r21, 0x015A
     faa:	c5 01       	movw	r24, r10
     fac:	b4 01       	movw	r22, r8
     fae:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
     fb2:	2f e6       	ldi	r18, 0x6F	; 111
     fb4:	32 e1       	ldi	r19, 0x12	; 18
     fb6:	43 e8       	ldi	r20, 0x83	; 131
     fb8:	5a e3       	ldi	r21, 0x3A	; 58
     fba:	0e 94 de 10 	call	0x21bc	; 0x21bc <__divsf3>
	float linear_output = LINEAR_Kp*linear_error - LINEAR_Kd*derivative;
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	a9 01       	movw	r20, r18
     fc4:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	69 81       	ldd	r22, Y+1	; 0x01
     fce:	7a 81       	ldd	r23, Y+2	; 0x02
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
     fd8:	69 83       	std	Y+1, r22	; 0x01
     fda:	7a 83       	std	Y+2, r23	; 0x02
     fdc:	8b 83       	std	Y+3, r24	; 0x03
     fde:	9c 83       	std	Y+4, r25	; 0x04
	previous_linear_error = linear_error;
     fe0:	80 92 57 01 	sts	0x0157, r8
     fe4:	90 92 58 01 	sts	0x0158, r9
     fe8:	a0 92 59 01 	sts	0x0159, r10
     fec:	b0 92 5a 01 	sts	0x015A, r11
	if(linear_output>40.0){linear_output=40.0;}
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e2       	ldi	r20, 0x20	; 32
     ff6:	52 e4       	ldi	r21, 0x42	; 66
     ff8:	0e 94 97 12 	call	0x252e	; 0x252e <__gesf2>
     ffc:	18 16       	cp	r1, r24
     ffe:	44 f4       	brge	.+16     	; 0x1010 <run_control_loop+0x214>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a0 e2       	ldi	r26, 0x20	; 32
    1006:	b2 e4       	ldi	r27, 0x42	; 66
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	9a 83       	std	Y+2, r25	; 0x02
    100c:	ab 83       	std	Y+3, r26	; 0x03
    100e:	bc 83       	std	Y+4, r27	; 0x04
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e2       	ldi	r20, 0x20	; 32
    1016:	52 e4       	ldi	r21, 0x42	; 66
    1018:	69 81       	ldd	r22, Y+1	; 0x01
    101a:	7a 81       	ldd	r23, Y+2	; 0x02
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	0e 94 de 10 	call	0x21bc	; 0x21bc <__divsf3>
    1024:	4b 01       	movw	r8, r22
    1026:	5c 01       	movw	r10, r24
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < PI/2){
    1028:	c7 01       	movw	r24, r14
    102a:	b6 01       	movw	r22, r12
    102c:	9f 77       	andi	r25, 0x7F	; 127
    102e:	2b ed       	ldi	r18, 0xDB	; 219
    1030:	3f e0       	ldi	r19, 0x0F	; 15
    1032:	49 ec       	ldi	r20, 0xC9	; 201
    1034:	5f e3       	ldi	r21, 0x3F	; 63
    1036:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__cmpsf2>
    103a:	88 23       	and	r24, r24
    103c:	ec f4       	brge	.+58     	; 0x1078 <run_control_loop+0x27c>
		left_duty_cycle += linear_output;
    103e:	a3 01       	movw	r20, r6
    1040:	92 01       	movw	r18, r4
    1042:	c5 01       	movw	r24, r10
    1044:	b4 01       	movw	r22, r8
    1046:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
    104a:	60 93 16 01 	sts	0x0116, r22
    104e:	70 93 17 01 	sts	0x0117, r23
    1052:	80 93 18 01 	sts	0x0118, r24
    1056:	90 93 19 01 	sts	0x0119, r25
		right_duty_cycle += linear_output;
    105a:	a5 01       	movw	r20, r10
    105c:	94 01       	movw	r18, r8
    105e:	c3 01       	movw	r24, r6
    1060:	b2 01       	movw	r22, r4
    1062:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__addsf3>
    1066:	60 93 12 01 	sts	0x0112, r22
    106a:	70 93 13 01 	sts	0x0113, r23
    106e:	80 93 14 01 	sts	0x0114, r24
    1072:	90 93 15 01 	sts	0x0115, r25
    1076:	1e c0       	rjmp	.+60     	; 0x10b4 <run_control_loop+0x2b8>
		} else{
		left_duty_cycle -= linear_output;
    1078:	a5 01       	movw	r20, r10
    107a:	94 01       	movw	r18, r8
    107c:	6d 85       	ldd	r22, Y+13	; 0x0d
    107e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1080:	8f 85       	ldd	r24, Y+15	; 0x0f
    1082:	98 89       	ldd	r25, Y+16	; 0x10
    1084:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
    1088:	60 93 16 01 	sts	0x0116, r22
    108c:	70 93 17 01 	sts	0x0117, r23
    1090:	80 93 18 01 	sts	0x0118, r24
    1094:	90 93 19 01 	sts	0x0119, r25
		right_duty_cycle -= linear_output;
    1098:	a5 01       	movw	r20, r10
    109a:	94 01       	movw	r18, r8
    109c:	c3 01       	movw	r24, r6
    109e:	b2 01       	movw	r22, r4
    10a0:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
    10a4:	60 93 12 01 	sts	0x0112, r22
    10a8:	70 93 13 01 	sts	0x0113, r23
    10ac:	80 93 14 01 	sts	0x0114, r24
    10b0:	90 93 15 01 	sts	0x0115, r25
	}
	
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	a9 01       	movw	r20, r18
    10ba:	60 91 16 01 	lds	r22, 0x0116
    10be:	70 91 17 01 	lds	r23, 0x0117
    10c2:	80 91 18 01 	lds	r24, 0x0118
    10c6:	90 91 19 01 	lds	r25, 0x0119
    10ca:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__cmpsf2>
    10ce:	88 23       	and	r24, r24
    10d0:	14 f4       	brge	.+4      	; 0x10d6 <run_control_loop+0x2da>
    10d2:	29 98       	cbi	0x05, 1	; 5
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <run_control_loop+0x2dc>
	else{set(PORTB,1);}
    10d6:	29 9a       	sbi	0x05, 1	; 5
		
	if (right_duty_cycle<0){clear(PORTB,3);}
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18
    10de:	60 91 12 01 	lds	r22, 0x0112
    10e2:	70 91 13 01 	lds	r23, 0x0113
    10e6:	80 91 14 01 	lds	r24, 0x0114
    10ea:	90 91 15 01 	lds	r25, 0x0115
    10ee:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__cmpsf2>
    10f2:	88 23       	and	r24, r24
    10f4:	14 f4       	brge	.+4      	; 0x10fa <run_control_loop+0x2fe>
    10f6:	2b 98       	cbi	0x05, 3	; 5
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <run_control_loop+0x300>
	else{set(PORTB,3);}
    10fa:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    10fc:	80 90 16 01 	lds	r8, 0x0116
    1100:	90 90 17 01 	lds	r9, 0x0117
    1104:	a0 90 18 01 	lds	r10, 0x0118
    1108:	b0 90 19 01 	lds	r11, 0x0119
    110c:	e8 94       	clt
    110e:	b7 f8       	bld	r11, 7
    1110:	80 92 16 01 	sts	0x0116, r8
    1114:	90 92 17 01 	sts	0x0117, r9
    1118:	a0 92 18 01 	sts	0x0118, r10
    111c:	b0 92 19 01 	sts	0x0119, r11
	right_duty_cycle = fabs(right_duty_cycle);
    1120:	c0 90 12 01 	lds	r12, 0x0112
    1124:	d0 90 13 01 	lds	r13, 0x0113
    1128:	e0 90 14 01 	lds	r14, 0x0114
    112c:	f0 90 15 01 	lds	r15, 0x0115
    1130:	e8 94       	clt
    1132:	f7 f8       	bld	r15, 7
    1134:	c0 92 12 01 	sts	0x0112, r12
    1138:	d0 92 13 01 	sts	0x0113, r13
    113c:	e0 92 14 01 	sts	0x0114, r14
    1140:	f0 92 15 01 	sts	0x0115, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    1144:	a7 01       	movw	r20, r14
    1146:	96 01       	movw	r18, r12
    1148:	c5 01       	movw	r24, r10
    114a:	b4 01       	movw	r22, r8
    114c:	0e 94 97 12 	call	0x252e	; 0x252e <__gesf2>
    1150:	18 16       	cp	r1, r24
    1152:	2c f0       	brlt	.+10     	; 0x115e <run_control_loop+0x362>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    1154:	6c 2c       	mov	r6, r12
    1156:	7d 2c       	mov	r7, r13
    1158:	1e 2d       	mov	r17, r14
    115a:	0f 2d       	mov	r16, r15
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <run_control_loop+0x36a>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    115e:	68 2c       	mov	r6, r8
    1160:	79 2c       	mov	r7, r9
    1162:	1a 2d       	mov	r17, r10
    1164:	0b 2d       	mov	r16, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > MAX_DUTY_CYCLE)
    1166:	2d ec       	ldi	r18, 0xCD	; 205
    1168:	3c ec       	ldi	r19, 0xCC	; 204
    116a:	4c ec       	ldi	r20, 0xCC	; 204
    116c:	5e e3       	ldi	r21, 0x3E	; 62
    116e:	66 2d       	mov	r22, r6
    1170:	77 2d       	mov	r23, r7
    1172:	81 2f       	mov	r24, r17
    1174:	90 2f       	mov	r25, r16
    1176:	0e 94 97 12 	call	0x252e	; 0x252e <__gesf2>
    117a:	18 16       	cp	r1, r24
    117c:	64 f5       	brge	.+88     	; 0x11d6 <run_control_loop+0x3da>
	{
		left_duty_cycle = left_duty_cycle/max*MAX_DUTY_CYCLE;
    117e:	26 2d       	mov	r18, r6
    1180:	37 2d       	mov	r19, r7
    1182:	41 2f       	mov	r20, r17
    1184:	50 2f       	mov	r21, r16
    1186:	c5 01       	movw	r24, r10
    1188:	b4 01       	movw	r22, r8
    118a:	0e 94 de 10 	call	0x21bc	; 0x21bc <__divsf3>
    118e:	2d ec       	ldi	r18, 0xCD	; 205
    1190:	3c ec       	ldi	r19, 0xCC	; 204
    1192:	4c ec       	ldi	r20, 0xCC	; 204
    1194:	5e e3       	ldi	r21, 0x3E	; 62
    1196:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
    119a:	60 93 16 01 	sts	0x0116, r22
    119e:	70 93 17 01 	sts	0x0117, r23
    11a2:	80 93 18 01 	sts	0x0118, r24
    11a6:	90 93 19 01 	sts	0x0119, r25
		right_duty_cycle = right_duty_cycle/max*MAX_DUTY_CYCLE;
    11aa:	26 2d       	mov	r18, r6
    11ac:	37 2d       	mov	r19, r7
    11ae:	41 2f       	mov	r20, r17
    11b0:	50 2f       	mov	r21, r16
    11b2:	c7 01       	movw	r24, r14
    11b4:	b6 01       	movw	r22, r12
    11b6:	0e 94 de 10 	call	0x21bc	; 0x21bc <__divsf3>
    11ba:	2d ec       	ldi	r18, 0xCD	; 205
    11bc:	3c ec       	ldi	r19, 0xCC	; 204
    11be:	4c ec       	ldi	r20, 0xCC	; 204
    11c0:	5e e3       	ldi	r21, 0x3E	; 62
    11c2:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
    11c6:	60 93 12 01 	sts	0x0112, r22
    11ca:	70 93 13 01 	sts	0x0113, r23
    11ce:	80 93 14 01 	sts	0x0114, r24
    11d2:	90 93 15 01 	sts	0x0115, r25
	}
	
	// Check game state
	if (game_pause)
    11d6:	80 91 00 01 	lds	r24, 0x0100
    11da:	90 91 01 01 	lds	r25, 0x0101
    11de:	89 2b       	or	r24, r25
    11e0:	81 f0       	breq	.+32     	; 0x1202 <run_control_loop+0x406>
	{
		left_duty_cycle = 0;
    11e2:	10 92 16 01 	sts	0x0116, r1
    11e6:	10 92 17 01 	sts	0x0117, r1
    11ea:	10 92 18 01 	sts	0x0118, r1
    11ee:	10 92 19 01 	sts	0x0119, r1
		right_duty_cycle = 0;
    11f2:	10 92 12 01 	sts	0x0112, r1
    11f6:	10 92 13 01 	sts	0x0113, r1
    11fa:	10 92 14 01 	sts	0x0114, r1
    11fe:	10 92 15 01 	sts	0x0115, r1
	}
	
	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    1202:	08 e8       	ldi	r16, 0x88	; 136
    1204:	10 e0       	ldi	r17, 0x00	; 0
    1206:	d8 01       	movw	r26, r16
    1208:	6d 91       	ld	r22, X+
    120a:	7c 91       	ld	r23, X
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__floatunsisf>
    1214:	20 91 16 01 	lds	r18, 0x0116
    1218:	30 91 17 01 	lds	r19, 0x0117
    121c:	40 91 18 01 	lds	r20, 0x0118
    1220:	50 91 19 01 	lds	r21, 0x0119
    1224:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
    1228:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fixunssfsi>
    122c:	70 93 8b 00 	sts	0x008B, r23
    1230:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    1234:	f8 01       	movw	r30, r16
    1236:	60 81       	ld	r22, Z
    1238:	71 81       	ldd	r23, Z+1	; 0x01
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__floatunsisf>
    1242:	20 91 12 01 	lds	r18, 0x0112
    1246:	30 91 13 01 	lds	r19, 0x0113
    124a:	40 91 14 01 	lds	r20, 0x0114
    124e:	50 91 15 01 	lds	r21, 0x0115
    1252:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
    1256:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fixunssfsi>
    125a:	70 93 8d 00 	sts	0x008D, r23
    125e:	60 93 8c 00 	sts	0x008C, r22

}
    1262:	60 96       	adiw	r28, 0x10	; 16
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	cf 90       	pop	r12
    127e:	bf 90       	pop	r11
    1280:	af 90       	pop	r10
    1282:	9f 90       	pop	r9
    1284:	8f 90       	pop	r8
    1286:	7f 90       	pop	r7
    1288:	6f 90       	pop	r6
    128a:	5f 90       	pop	r5
    128c:	4f 90       	pop	r4
    128e:	08 95       	ret

00001290 <update_position>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    1290:	8f 92       	push	r8
    1292:	9f 92       	push	r9
    1294:	af 92       	push	r10
    1296:	bf 92       	push	r11
    1298:	cf 92       	push	r12
    129a:	df 92       	push	r13
    129c:	ef 92       	push	r14
    129e:	ff 92       	push	r15
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	60 97       	sbiw	r28, 0x10	; 16
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
	// Read in Locations
	m_wii_read(blobs);
    12b8:	88 e7       	ldi	r24, 0x78	; 120
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    12c0:	e8 e7       	ldi	r30, 0x78	; 120
    12c2:	f1 e0       	ldi	r31, 0x01	; 1
    12c4:	62 81       	ldd	r22, Z+2	; 0x02
    12c6:	73 81       	ldd	r23, Z+3	; 0x03
	unsigned int x2 = blobs[3];
    12c8:	e6 80       	ldd	r14, Z+6	; 0x06
    12ca:	f7 80       	ldd	r15, Z+7	; 0x07
	unsigned int y2 = blobs[4];
    12cc:	40 85       	ldd	r20, Z+8	; 0x08
    12ce:	51 85       	ldd	r21, Z+9	; 0x09
	unsigned int x3 = blobs[6];
    12d0:	04 85       	ldd	r16, Z+12	; 0x0c
    12d2:	15 85       	ldd	r17, Z+13	; 0x0d
	unsigned int y3 = blobs[7];
    12d4:	26 85       	ldd	r18, Z+14	; 0x0e
    12d6:	37 85       	ldd	r19, Z+15	; 0x0f
	unsigned int x4 = blobs[9];
    12d8:	a2 89       	ldd	r26, Z+18	; 0x12
    12da:	b3 89       	ldd	r27, Z+19	; 0x13
	unsigned int y4 = blobs[10];
    12dc:	84 89       	ldd	r24, Z+20	; 0x14
    12de:	95 89       	ldd	r25, Z+21	; 0x15
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    12e0:	01 90       	ld	r0, Z+
    12e2:	f0 81       	ld	r31, Z
    12e4:	e0 2d       	mov	r30, r0
    12e6:	fa 83       	std	Y+2, r31	; 0x02
    12e8:	e9 83       	std	Y+1, r30	; 0x01
    12ea:	fc 82       	std	Y+4, r15	; 0x04
    12ec:	eb 82       	std	Y+3, r14	; 0x03
    12ee:	1e 83       	std	Y+6, r17	; 0x06
    12f0:	0d 83       	std	Y+5, r16	; 0x05
    12f2:	b8 87       	std	Y+8, r27	; 0x08
    12f4:	af 83       	std	Y+7, r26	; 0x07
    12f6:	7a 87       	std	Y+10, r23	; 0x0a
    12f8:	69 87       	std	Y+9, r22	; 0x09
    12fa:	5c 87       	std	Y+12, r21	; 0x0c
    12fc:	4b 87       	std	Y+11, r20	; 0x0b
    12fe:	3e 87       	std	Y+14, r19	; 0x0e
    1300:	2d 87       	std	Y+13, r18	; 0x0d
    1302:	98 8b       	std	Y+16, r25	; 0x10
    1304:	8f 87       	std	Y+15, r24	; 0x0f
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    1306:	62 e0       	ldi	r22, 0x02	; 2
    1308:	71 e0       	ldi	r23, 0x01	; 1
    130a:	ce 01       	movw	r24, r28
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <localization_calc>
    1312:	8c 01       	movw	r16, r24
    1314:	90 93 77 01 	sts	0x0177, r25
    1318:	80 93 76 01 	sts	0x0176, r24
	
	robotCenterPrev[2] = robotCenter[2];
    131c:	fc 01       	movw	r30, r24
    131e:	80 85       	ldd	r24, Z+8	; 0x08
    1320:	91 85       	ldd	r25, Z+9	; 0x09
    1322:	a2 85       	ldd	r26, Z+10	; 0x0a
    1324:	b3 85       	ldd	r27, Z+11	; 0x0b
    1326:	80 93 0a 01 	sts	0x010A, r24
    132a:	90 93 0b 01 	sts	0x010B, r25
    132e:	a0 93 0c 01 	sts	0x010C, r26
    1332:	b0 93 0d 01 	sts	0x010D, r27
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    1336:	60 85       	ldd	r22, Z+8	; 0x08
    1338:	71 85       	ldd	r23, Z+9	; 0x09
    133a:	82 85       	ldd	r24, Z+10	; 0x0a
    133c:	93 85       	ldd	r25, Z+11	; 0x0b
    133e:	0e 94 be 06 	call	0xd7c	; 0xd7c <theta_error_correction>
    1342:	6b 01       	movw	r12, r22
    1344:	7c 01       	movw	r14, r24
    1346:	f8 01       	movw	r30, r16
    1348:	60 87       	std	Z+8, r22	; 0x08
    134a:	71 87       	std	Z+9, r23	; 0x09
    134c:	82 87       	std	Z+10, r24	; 0x0a
    134e:	93 87       	std	Z+11, r25	; 0x0b


/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1350:	24 ea       	ldi	r18, 0xA4	; 164
    1352:	30 e7       	ldi	r19, 0x70	; 112
    1354:	4d e7       	ldi	r20, 0x7D	; 125
    1356:	5f e3       	ldi	r21, 0x3F	; 63
    1358:	60 81       	ld	r22, Z
    135a:	71 81       	ldd	r23, Z+1	; 0x01
    135c:	82 81       	ldd	r24, Z+2	; 0x02
    135e:	93 81       	ldd	r25, Z+3	; 0x03
    1360:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
    1364:	4b 01       	movw	r8, r22
    1366:	5c 01       	movw	r10, r24
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	37 ed       	ldi	r19, 0xD7	; 215
    136c:	43 e2       	ldi	r20, 0x23	; 35
    136e:	5c e3       	ldi	r21, 0x3C	; 60
    1370:	60 91 6f 01 	lds	r22, 0x016F
    1374:	70 91 70 01 	lds	r23, 0x0170
    1378:	80 91 71 01 	lds	r24, 0x0171
    137c:	90 91 72 01 	lds	r25, 0x0172
    1380:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
    1384:	9b 01       	movw	r18, r22
    1386:	ac 01       	movw	r20, r24
    1388:	c5 01       	movw	r24, r10
    138a:	b4 01       	movw	r22, r8
    138c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__addsf3>
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    1390:	60 93 6f 01 	sts	0x016F, r22
    1394:	70 93 70 01 	sts	0x0170, r23
    1398:	80 93 71 01 	sts	0x0171, r24
    139c:	90 93 72 01 	sts	0x0172, r25


/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    13a0:	24 ea       	ldi	r18, 0xA4	; 164
    13a2:	30 e7       	ldi	r19, 0x70	; 112
    13a4:	4d e7       	ldi	r20, 0x7D	; 125
    13a6:	5f e3       	ldi	r21, 0x3F	; 63
    13a8:	f8 01       	movw	r30, r16
    13aa:	64 81       	ldd	r22, Z+4	; 0x04
    13ac:	75 81       	ldd	r23, Z+5	; 0x05
    13ae:	86 81       	ldd	r24, Z+6	; 0x06
    13b0:	97 81       	ldd	r25, Z+7	; 0x07
    13b2:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
    13b6:	4b 01       	movw	r8, r22
    13b8:	5c 01       	movw	r10, r24
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	37 ed       	ldi	r19, 0xD7	; 215
    13be:	43 e2       	ldi	r20, 0x23	; 35
    13c0:	5c e3       	ldi	r21, 0x3C	; 60
    13c2:	60 91 6b 01 	lds	r22, 0x016B
    13c6:	70 91 6c 01 	lds	r23, 0x016C
    13ca:	80 91 6d 01 	lds	r24, 0x016D
    13ce:	90 91 6e 01 	lds	r25, 0x016E
    13d2:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
    13da:	c5 01       	movw	r24, r10
    13dc:	b4 01       	movw	r22, r8
    13de:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__addsf3>
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    13e2:	60 93 6b 01 	sts	0x016B, r22
    13e6:	70 93 6c 01 	sts	0x016C, r23
    13ea:	80 93 6d 01 	sts	0x016D, r24
    13ee:	90 93 6e 01 	sts	0x016E, r25


/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    13f2:	24 ea       	ldi	r18, 0xA4	; 164
    13f4:	30 e7       	ldi	r19, 0x70	; 112
    13f6:	4d e7       	ldi	r20, 0x7D	; 125
    13f8:	5f e3       	ldi	r21, 0x3F	; 63
    13fa:	c7 01       	movw	r24, r14
    13fc:	b6 01       	movw	r22, r12
    13fe:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
    1402:	6b 01       	movw	r12, r22
    1404:	7c 01       	movw	r14, r24
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	37 ed       	ldi	r19, 0xD7	; 215
    140a:	43 e2       	ldi	r20, 0x23	; 35
    140c:	5c e3       	ldi	r21, 0x3C	; 60
    140e:	60 91 67 01 	lds	r22, 0x0167
    1412:	70 91 68 01 	lds	r23, 0x0168
    1416:	80 91 69 01 	lds	r24, 0x0169
    141a:	90 91 6a 01 	lds	r25, 0x016A
    141e:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
    1422:	9b 01       	movw	r18, r22
    1424:	ac 01       	movw	r20, r24
    1426:	c7 01       	movw	r24, r14
    1428:	b6 01       	movw	r22, r12
    142a:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    142e:	60 93 67 01 	sts	0x0167, r22
    1432:	70 93 68 01 	sts	0x0168, r23
    1436:	80 93 69 01 	sts	0x0169, r24
    143a:	90 93 6a 01 	sts	0x016A, r25
	
	if (check(TIFR3,OCF3A)){	// Check if timestep has completed
    143e:	c1 9b       	sbis	0x18, 1	; 24
    1440:	35 c0       	rjmp	.+106    	; 0x14ac <update_position+0x21c>
		set(TIFR3,OCF3A);		// Reset flag
    1442:	c1 9a       	sbi	0x18, 1	; 24
		theta_target = atan2(y_target-y,x_target-x); // Update theta target
    1444:	20 91 6f 01 	lds	r18, 0x016F
    1448:	30 91 70 01 	lds	r19, 0x0170
    144c:	40 91 71 01 	lds	r20, 0x0171
    1450:	50 91 72 01 	lds	r21, 0x0172
    1454:	60 91 0e 01 	lds	r22, 0x010E
    1458:	70 91 0f 01 	lds	r23, 0x010F
    145c:	80 91 10 01 	lds	r24, 0x0110
    1460:	90 91 11 01 	lds	r25, 0x0111
    1464:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
    1468:	6b 01       	movw	r12, r22
    146a:	7c 01       	movw	r14, r24
    146c:	20 91 6b 01 	lds	r18, 0x016B
    1470:	30 91 6c 01 	lds	r19, 0x016C
    1474:	40 91 6d 01 	lds	r20, 0x016D
    1478:	50 91 6e 01 	lds	r21, 0x016E
    147c:	60 91 63 01 	lds	r22, 0x0163
    1480:	70 91 64 01 	lds	r23, 0x0164
    1484:	80 91 65 01 	lds	r24, 0x0165
    1488:	90 91 66 01 	lds	r25, 0x0166
    148c:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__subsf3>
    1490:	a7 01       	movw	r20, r14
    1492:	96 01       	movw	r18, r12
    1494:	0e 94 75 10 	call	0x20ea	; 0x20ea <atan2>
    1498:	60 93 5f 01 	sts	0x015F, r22
    149c:	70 93 60 01 	sts	0x0160, r23
    14a0:	80 93 61 01 	sts	0x0161, r24
    14a4:	90 93 62 01 	sts	0x0162, r25
		run_control_loop(); // Update control
    14a8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <run_control_loop>
	}
	
	robotCenterPrev[0] = x;
    14ac:	e2 e0       	ldi	r30, 0x02	; 2
    14ae:	f1 e0       	ldi	r31, 0x01	; 1
    14b0:	80 91 6f 01 	lds	r24, 0x016F
    14b4:	90 91 70 01 	lds	r25, 0x0170
    14b8:	a0 91 71 01 	lds	r26, 0x0171
    14bc:	b0 91 72 01 	lds	r27, 0x0172
    14c0:	80 83       	st	Z, r24
    14c2:	91 83       	std	Z+1, r25	; 0x01
    14c4:	a2 83       	std	Z+2, r26	; 0x02
    14c6:	b3 83       	std	Z+3, r27	; 0x03
	robotCenterPrev[1] = y;
    14c8:	80 91 6b 01 	lds	r24, 0x016B
    14cc:	90 91 6c 01 	lds	r25, 0x016C
    14d0:	a0 91 6d 01 	lds	r26, 0x016D
    14d4:	b0 91 6e 01 	lds	r27, 0x016E
    14d8:	84 83       	std	Z+4, r24	; 0x04
    14da:	95 83       	std	Z+5, r25	; 0x05
    14dc:	a6 83       	std	Z+6, r26	; 0x06
    14de:	b7 83       	std	Z+7, r27	; 0x07
}
    14e0:	60 96       	adiw	r28, 0x10	; 16
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	ff 90       	pop	r15
    14f6:	ef 90       	pop	r14
    14f8:	df 90       	pop	r13
    14fa:	cf 90       	pop	r12
    14fc:	bf 90       	pop	r11
    14fe:	af 90       	pop	r10
    1500:	9f 90       	pop	r9
    1502:	8f 90       	pop	r8
    1504:	08 95       	ret

00001506 <wireless_enable>:
}

/* Initialize the Wireless System */
void wireless_enable(void)
{
	m_bus_init(); // Enable mBUS
    1506:	0e 94 65 0b 	call	0x16ca	; 0x16ca <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS_1,PACKET_LENGTH); // Configure mRF
    150a:	4a e0       	ldi	r20, 0x0A	; 10
    150c:	60 e2       	ldi	r22, 0x20	; 32
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	0e 94 76 0b 	call	0x16ec	; 0x16ec <m_rf_open>
    1514:	08 95       	ret

00001516 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_green(ON);
    1516:	6a 9a       	sbi	0x0d, 2	; 13
    1518:	72 98       	cbi	0x0e, 2	; 14
	m_red(ON);
    151a:	6e 9a       	sbi	0x0d, 6	; 13
    151c:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	init();
    151e:	0e 94 26 06 	call	0xc4c	; 0xc4c <init>
}

/* Setup USB */
void usb_enable(void)
{
	m_usb_init();
    1522:	0e 94 30 0c 	call	0x1860	; 0x1860 <m_usb_init>
	m_red(ON);

	/* Initializations */
	init();
	usb_enable();
	wireless_enable();
    1526:	0e 94 83 0a 	call	0x1506	; 0x1506 <wireless_enable>
	timer1_init();
    152a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <timer1_init>
	timer3_init();
    152e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <timer3_init>
	/* Confirm successful initialization(s) */
//	m_green(ON);

	/* Run */
	while (1){
		update_position();
    1532:	0e 94 48 09 	call	0x1290	; 0x1290 <update_position>
	}
    1536:	fd cf       	rjmp	.-6      	; 0x1532 <main+0x1c>

00001538 <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
    1538:	80 91 4c 01 	lds	r24, 0x014C
    153c:	83 3a       	cpi	r24, 0xA3	; 163
    153e:	09 f4       	brne	.+2      	; 0x1542 <update_game_state+0xa>
    1540:	4e c0       	rjmp	.+156    	; 0x15de <update_game_state+0xa6>
    1542:	28 f4       	brcc	.+10     	; 0x154e <update_game_state+0x16>
    1544:	81 3a       	cpi	r24, 0xA1	; 161
    1546:	69 f0       	breq	.+26     	; 0x1562 <update_game_state+0x2a>
    1548:	82 3a       	cpi	r24, 0xA2	; 162
    154a:	d1 f1       	breq	.+116    	; 0x15c0 <update_game_state+0x88>
    154c:	08 95       	ret
    154e:	86 3a       	cpi	r24, 0xA6	; 166
    1550:	09 f4       	brne	.+2      	; 0x1554 <update_game_state+0x1c>
    1552:	5b c0       	rjmp	.+182    	; 0x160a <update_game_state+0xd2>
    1554:	87 3a       	cpi	r24, 0xA7	; 167
    1556:	09 f4       	brne	.+2      	; 0x155a <update_game_state+0x22>
    1558:	5f c0       	rjmp	.+190    	; 0x1618 <update_game_state+0xe0>
    155a:	84 3a       	cpi	r24, 0xA4	; 164
    155c:	09 f0       	breq	.+2      	; 0x1560 <update_game_state+0x28>
    155e:	62 c0       	rjmp	.+196    	; 0x1624 <update_game_state+0xec>
    1560:	4d c0       	rjmp	.+154    	; 0x15fc <update_game_state+0xc4>

void play(void)
{
	// Light LED of defending goal
	// Play
	game_pause = 0;
    1562:	10 92 01 01 	sts	0x0101, r1
    1566:	10 92 00 01 	sts	0x0100, r1
		comm_test();
		break;
		case 0xA1: // Play
	//		m_green(TOGGLE);
			play();
			update_position();
    156a:	0e 94 48 09 	call	0x1290	; 0x1290 <update_position>
			if (x>0) {
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	a9 01       	movw	r20, r18
    1574:	60 91 6f 01 	lds	r22, 0x016F
    1578:	70 91 70 01 	lds	r23, 0x0170
    157c:	80 91 71 01 	lds	r24, 0x0171
    1580:	90 91 72 01 	lds	r25, 0x0172
    1584:	0e 94 97 12 	call	0x252e	; 0x252e <__gesf2>
    1588:	18 16       	cp	r1, r24
    158a:	6c f4       	brge	.+26     	; 0x15a6 <update_game_state+0x6e>
				x_target = -350;
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	af ea       	ldi	r26, 0xAF	; 175
    1592:	b3 ec       	ldi	r27, 0xC3	; 195
    1594:	80 93 0e 01 	sts	0x010E, r24
    1598:	90 93 0f 01 	sts	0x010F, r25
    159c:	a0 93 10 01 	sts	0x0110, r26
    15a0:	b0 93 11 01 	sts	0x0111, r27
    15a4:	08 95       	ret
			} else {
				x_target = 350;
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	af ea       	ldi	r26, 0xAF	; 175
    15ac:	b3 e4       	ldi	r27, 0x43	; 67
    15ae:	80 93 0e 01 	sts	0x010E, r24
    15b2:	90 93 0f 01 	sts	0x010F, r25
    15b6:	a0 93 10 01 	sts	0x0110, r26
    15ba:	b0 93 11 01 	sts	0x0111, r27
    15be:	08 95       	ret
			}
			break;
		case 0xA2: // Goal R
		SR = buffer[1];
    15c0:	ed e4       	ldi	r30, 0x4D	; 77
    15c2:	f1 e0       	ldi	r31, 0x01	; 1
    15c4:	81 81       	ldd	r24, Z+1	; 0x01
    15c6:	80 93 4b 01 	sts	0x014B, r24
		SB = buffer[2];
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	80 93 4a 01 	sts	0x014A, r24
}

void pause(void)
{
	// Stop within 3  seconds
	game_pause = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	90 93 01 01 	sts	0x0101, r25
    15d8:	80 93 00 01 	sts	0x0100, r24
    15dc:	08 95       	ret
		SR = buffer[1];
		SB = buffer[2];
		pause();
		break;
		case 0xA3: // Goal B
		SR = buffer[1];
    15de:	ed e4       	ldi	r30, 0x4D	; 77
    15e0:	f1 e0       	ldi	r31, 0x01	; 1
    15e2:	81 81       	ldd	r24, Z+1	; 0x01
    15e4:	80 93 4b 01 	sts	0x014B, r24
		SB = buffer[2];
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	80 93 4a 01 	sts	0x014A, r24
}

void pause(void)
{
	// Stop within 3  seconds
	game_pause = 1;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	90 93 01 01 	sts	0x0101, r25
    15f6:	80 93 00 01 	sts	0x0100, r24
    15fa:	08 95       	ret
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	90 93 01 01 	sts	0x0101, r25
    1604:	80 93 00 01 	sts	0x0100, r24
    1608:	08 95       	ret

void halftime(void)
{
	// Stop play
	// Switch assigned goal
	game_pause = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	90 93 01 01 	sts	0x0101, r25
    1612:	80 93 00 01 	sts	0x0100, r24
    1616:	08 95       	ret

void game_over(void)
{
	// Stop play
	// Do a victory dance based on score?
	game_pause = 1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	90 93 01 01 	sts	0x0101, r25
    1620:	80 93 00 01 	sts	0x0100, r24
    1624:	08 95       	ret

00001626 <wireless_recieve>:
}

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    1626:	6a e0       	ldi	r22, 0x0A	; 10
    1628:	8d e4       	ldi	r24, 0x4D	; 77
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <m_rf_read>
// 	m_usb_tx_string("\n Game state: ");
// 	m_usb_tx_char(buffer[0]);
	game_state = buffer[0];
    1630:	80 91 4d 01 	lds	r24, 0x014D
    1634:	80 93 4c 01 	sts	0x014C, r24
	
	
	update_game_state();
    1638:	0e 94 9c 0a 	call	0x1538	; 0x1538 <update_game_state>
    163c:	08 95       	ret

0000163e <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    163e:	1f 92       	push	r1
    1640:	0f 92       	push	r0
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	0f 92       	push	r0
    1646:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    1648:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable	
    164a:	2a 9a       	sbi	0x05, 2	; 5
}
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti

00001656 <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    1656:	1f 92       	push	r1
    1658:	0f 92       	push	r0
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    1660:	28 98       	cbi	0x05, 0	; 5
}
    1662:	0f 90       	pop	r0
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	0f 90       	pop	r0
    1668:	1f 90       	pop	r1
    166a:	18 95       	reti

0000166c <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    166c:	1f 92       	push	r1
    166e:	0f 92       	push	r0
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	0f 92       	push	r0
    1674:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    1676:	2a 98       	cbi	0x05, 2	; 5
}
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <__vector_3>:

/* Recieve Wireless Comm */
ISR(INT2_vect){
    1682:	1f 92       	push	r1
    1684:	0f 92       	push	r0
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	0f 92       	push	r0
    168a:	11 24       	eor	r1, r1
    168c:	2f 93       	push	r18
    168e:	3f 93       	push	r19
    1690:	4f 93       	push	r20
    1692:	5f 93       	push	r21
    1694:	6f 93       	push	r22
    1696:	7f 93       	push	r23
    1698:	8f 93       	push	r24
    169a:	9f 93       	push	r25
    169c:	af 93       	push	r26
    169e:	bf 93       	push	r27
    16a0:	ef 93       	push	r30
    16a2:	ff 93       	push	r31
	wireless_recieve();
    16a4:	0e 94 13 0b 	call	0x1626	; 0x1626 <wireless_recieve>
}
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	bf 91       	pop	r27
    16ae:	af 91       	pop	r26
    16b0:	9f 91       	pop	r25
    16b2:	8f 91       	pop	r24
    16b4:	7f 91       	pop	r23
    16b6:	6f 91       	pop	r22
    16b8:	5f 91       	pop	r21
    16ba:	4f 91       	pop	r20
    16bc:	3f 91       	pop	r19
    16be:	2f 91       	pop	r18
    16c0:	0f 90       	pop	r0
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	0f 90       	pop	r0
    16c6:	1f 90       	pop	r1
    16c8:	18 95       	reti

000016ca <m_bus_init>:
    16ca:	58 9a       	sbi	0x0b, 0	; 11
    16cc:	59 9a       	sbi	0x0b, 1	; 11
    16ce:	5a 9a       	sbi	0x0b, 2	; 11
    16d0:	8c e0       	ldi	r24, 0x0C	; 12
    16d2:	80 93 b8 00 	sts	0x00B8, r24
    16d6:	e9 e6       	ldi	r30, 0x69	; 105
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	80 62       	ori	r24, 0x20	; 32
    16de:	80 83       	st	Z, r24
    16e0:	80 81       	ld	r24, Z
    16e2:	8f 7e       	andi	r24, 0xEF	; 239
    16e4:	80 83       	st	Z, r24
    16e6:	ea 9a       	sbi	0x1d, 2	; 29
    16e8:	78 94       	sei
    16ea:	08 95       	ret

000016ec <m_rf_open>:
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	18 2f       	mov	r17, r24
    16f4:	d6 2f       	mov	r29, r22
    16f6:	c4 2f       	mov	r28, r20
    16f8:	0e 94 65 0b 	call	0x16ca	; 0x16ca <m_bus_init>
    16fc:	94 ea       	ldi	r25, 0xA4	; 164
    16fe:	90 93 bc 00 	sts	0x00BC, r25
    1702:	ec eb       	ldi	r30, 0xBC	; 188
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	90 81       	ld	r25, Z
    1708:	99 23       	and	r25, r25
    170a:	ec f7       	brge	.-6      	; 0x1706 <m_rf_open+0x1a>
    170c:	90 e5       	ldi	r25, 0x50	; 80
    170e:	90 93 bb 00 	sts	0x00BB, r25
    1712:	94 e8       	ldi	r25, 0x84	; 132
    1714:	90 93 bc 00 	sts	0x00BC, r25
    1718:	ec eb       	ldi	r30, 0xBC	; 188
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	90 81       	ld	r25, Z
    171e:	99 23       	and	r25, r25
    1720:	ec f7       	brge	.-6      	; 0x171c <m_rf_open+0x30>
    1722:	90 91 b9 00 	lds	r25, 0x00B9
    1726:	98 7f       	andi	r25, 0xF8	; 248
    1728:	90 32       	cpi	r25, 0x20	; 32
    172a:	29 f4       	brne	.+10     	; 0x1736 <m_rf_open+0x4a>
    172c:	84 e9       	ldi	r24, 0x94	; 148
    172e:	80 93 bc 00 	sts	0x00BC, r24
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	2d c0       	rjmp	.+90     	; 0x1790 <m_rf_open+0xa4>
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	80 93 bb 00 	sts	0x00BB, r24
    173c:	84 e8       	ldi	r24, 0x84	; 132
    173e:	80 93 bc 00 	sts	0x00BC, r24
    1742:	ec eb       	ldi	r30, 0xBC	; 188
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	90 81       	ld	r25, Z
    1748:	99 23       	and	r25, r25
    174a:	ec f7       	brge	.-6      	; 0x1746 <m_rf_open+0x5a>
    174c:	10 93 bb 00 	sts	0x00BB, r17
    1750:	84 e8       	ldi	r24, 0x84	; 132
    1752:	80 93 bc 00 	sts	0x00BC, r24
    1756:	ec eb       	ldi	r30, 0xBC	; 188
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	88 23       	and	r24, r24
    175e:	ec f7       	brge	.-6      	; 0x175a <m_rf_open+0x6e>
    1760:	d0 93 bb 00 	sts	0x00BB, r29
    1764:	84 e8       	ldi	r24, 0x84	; 132
    1766:	80 93 bc 00 	sts	0x00BC, r24
    176a:	ec eb       	ldi	r30, 0xBC	; 188
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	88 23       	and	r24, r24
    1772:	ec f7       	brge	.-6      	; 0x176e <m_rf_open+0x82>
    1774:	c0 93 bb 00 	sts	0x00BB, r28
    1778:	84 e8       	ldi	r24, 0x84	; 132
    177a:	80 93 bc 00 	sts	0x00BC, r24
    177e:	ec eb       	ldi	r30, 0xBC	; 188
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	88 23       	and	r24, r24
    1786:	ec f7       	brge	.-6      	; 0x1782 <m_rf_open+0x96>
    1788:	84 e9       	ldi	r24, 0x94	; 148
    178a:	80 93 bc 00 	sts	0x00BC, r24
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	1f 91       	pop	r17
    1796:	08 95       	ret

00001798 <m_rf_read>:
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	9c 01       	movw	r18, r24
    179e:	84 ea       	ldi	r24, 0xA4	; 164
    17a0:	80 93 bc 00 	sts	0x00BC, r24
    17a4:	ec eb       	ldi	r30, 0xBC	; 188
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	90 81       	ld	r25, Z
    17aa:	99 23       	and	r25, r25
    17ac:	ec f7       	brge	.-6      	; 0x17a8 <m_rf_read+0x10>
    17ae:	81 e5       	ldi	r24, 0x51	; 81
    17b0:	80 93 bb 00 	sts	0x00BB, r24
    17b4:	84 e8       	ldi	r24, 0x84	; 132
    17b6:	80 93 bc 00 	sts	0x00BC, r24
    17ba:	ec eb       	ldi	r30, 0xBC	; 188
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	90 81       	ld	r25, Z
    17c0:	99 23       	and	r25, r25
    17c2:	ec f7       	brge	.-6      	; 0x17be <m_rf_read+0x26>
    17c4:	80 91 b9 00 	lds	r24, 0x00B9
    17c8:	88 7f       	andi	r24, 0xF8	; 248
    17ca:	88 34       	cpi	r24, 0x48	; 72
    17cc:	29 f4       	brne	.+10     	; 0x17d8 <m_rf_read+0x40>
    17ce:	84 e9       	ldi	r24, 0x94	; 148
    17d0:	80 93 bc 00 	sts	0x00BC, r24
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	41 c0       	rjmp	.+130    	; 0x185a <m_rf_read+0xc2>
    17d8:	84 ec       	ldi	r24, 0xC4	; 196
    17da:	80 93 bc 00 	sts	0x00BC, r24
    17de:	ec eb       	ldi	r30, 0xBC	; 188
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	90 81       	ld	r25, Z
    17e4:	99 23       	and	r25, r25
    17e6:	ec f7       	brge	.-6      	; 0x17e2 <m_rf_read+0x4a>
    17e8:	40 91 bb 00 	lds	r20, 0x00BB
    17ec:	46 13       	cpse	r20, r22
    17ee:	09 c0       	rjmp	.+18     	; 0x1802 <m_rf_read+0x6a>
    17f0:	84 2f       	mov	r24, r20
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	18 16       	cp	r1, r24
    17f8:	19 06       	cpc	r1, r25
    17fa:	44 f0       	brlt	.+16     	; 0x180c <m_rf_read+0x74>
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	1a c0       	rjmp	.+52     	; 0x1836 <m_rf_read+0x9e>
    1802:	84 e9       	ldi	r24, 0x94	; 148
    1804:	80 93 bc 00 	sts	0x00BC, r24
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	27 c0       	rjmp	.+78     	; 0x185a <m_rf_read+0xc2>
    180c:	d9 01       	movw	r26, r18
    180e:	50 e0       	ldi	r21, 0x00	; 0
    1810:	41 50       	subi	r20, 0x01	; 1
    1812:	51 09       	sbc	r21, r1
    1814:	b9 01       	movw	r22, r18
    1816:	64 0f       	add	r22, r20
    1818:	75 1f       	adc	r23, r21
    181a:	ec eb       	ldi	r30, 0xBC	; 188
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	84 ec       	ldi	r24, 0xC4	; 196
    1820:	cb eb       	ldi	r28, 0xBB	; 187
    1822:	d0 e0       	ldi	r29, 0x00	; 0
    1824:	80 83       	st	Z, r24
    1826:	90 81       	ld	r25, Z
    1828:	99 23       	and	r25, r25
    182a:	ec f7       	brge	.-6      	; 0x1826 <m_rf_read+0x8e>
    182c:	98 81       	ld	r25, Y
    182e:	9d 93       	st	X+, r25
    1830:	a6 17       	cp	r26, r22
    1832:	b7 07       	cpc	r27, r23
    1834:	b9 f7       	brne	.-18     	; 0x1824 <m_rf_read+0x8c>
    1836:	84 e8       	ldi	r24, 0x84	; 132
    1838:	80 93 bc 00 	sts	0x00BC, r24
    183c:	ec eb       	ldi	r30, 0xBC	; 188
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	90 81       	ld	r25, Z
    1842:	99 23       	and	r25, r25
    1844:	ec f7       	brge	.-6      	; 0x1840 <m_rf_read+0xa8>
    1846:	80 91 bb 00 	lds	r24, 0x00BB
    184a:	f9 01       	movw	r30, r18
    184c:	e4 0f       	add	r30, r20
    184e:	f5 1f       	adc	r31, r21
    1850:	80 83       	st	Z, r24
    1852:	84 e9       	ldi	r24, 0x94	; 148
    1854:	80 93 bc 00 	sts	0x00BC, r24
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <m_usb_init>:
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	80 93 d7 00 	sts	0x00D7, r24
    1866:	80 ea       	ldi	r24, 0xA0	; 160
    1868:	80 93 d8 00 	sts	0x00D8, r24
    186c:	82 e1       	ldi	r24, 0x12	; 18
    186e:	89 bd       	out	0x29, r24	; 41
    1870:	09 b4       	in	r0, 0x29	; 41
    1872:	00 fe       	sbrs	r0, 0
    1874:	fd cf       	rjmp	.-6      	; 0x1870 <m_usb_init+0x10>
    1876:	80 e9       	ldi	r24, 0x90	; 144
    1878:	80 93 d8 00 	sts	0x00D8, r24
    187c:	10 92 e0 00 	sts	0x00E0, r1
    1880:	10 92 75 01 	sts	0x0175, r1
    1884:	10 92 73 01 	sts	0x0173, r1
    1888:	8c e0       	ldi	r24, 0x0C	; 12
    188a:	80 93 e2 00 	sts	0x00E2, r24
    188e:	78 94       	sei
    1890:	08 95       	ret

00001892 <__vector_10>:
    1892:	1f 92       	push	r1
    1894:	0f 92       	push	r0
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	0f 92       	push	r0
    189a:	11 24       	eor	r1, r1
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	ef 93       	push	r30
    18a2:	ff 93       	push	r31
    18a4:	e1 ee       	ldi	r30, 0xE1	; 225
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	10 82       	st	Z, r1
    18ac:	83 ff       	sbrs	r24, 3
    18ae:	11 c0       	rjmp	.+34     	; 0x18d2 <__vector_10+0x40>
    18b0:	10 92 e9 00 	sts	0x00E9, r1
    18b4:	91 e0       	ldi	r25, 0x01	; 1
    18b6:	90 93 eb 00 	sts	0x00EB, r25
    18ba:	10 92 ec 00 	sts	0x00EC, r1
    18be:	92 e1       	ldi	r25, 0x12	; 18
    18c0:	90 93 ed 00 	sts	0x00ED, r25
    18c4:	98 e0       	ldi	r25, 0x08	; 8
    18c6:	90 93 f0 00 	sts	0x00F0, r25
    18ca:	10 92 75 01 	sts	0x0175, r1
    18ce:	10 92 73 01 	sts	0x0173, r1
    18d2:	82 ff       	sbrs	r24, 2
    18d4:	13 c0       	rjmp	.+38     	; 0x18fc <__vector_10+0x6a>
    18d6:	80 91 75 01 	lds	r24, 0x0175
    18da:	88 23       	and	r24, r24
    18dc:	79 f0       	breq	.+30     	; 0x18fc <__vector_10+0x6a>
    18de:	80 91 74 01 	lds	r24, 0x0174
    18e2:	88 23       	and	r24, r24
    18e4:	59 f0       	breq	.+22     	; 0x18fc <__vector_10+0x6a>
    18e6:	81 50       	subi	r24, 0x01	; 1
    18e8:	80 93 74 01 	sts	0x0174, r24
    18ec:	81 11       	cpse	r24, r1
    18ee:	06 c0       	rjmp	.+12     	; 0x18fc <__vector_10+0x6a>
    18f0:	84 e0       	ldi	r24, 0x04	; 4
    18f2:	80 93 e9 00 	sts	0x00E9, r24
    18f6:	8a e3       	ldi	r24, 0x3A	; 58
    18f8:	80 93 e8 00 	sts	0x00E8, r24
    18fc:	ff 91       	pop	r31
    18fe:	ef 91       	pop	r30
    1900:	9f 91       	pop	r25
    1902:	8f 91       	pop	r24
    1904:	0f 90       	pop	r0
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	0f 90       	pop	r0
    190a:	1f 90       	pop	r1
    190c:	18 95       	reti

0000190e <__vector_11>:
    190e:	1f 92       	push	r1
    1910:	0f 92       	push	r0
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	0f 92       	push	r0
    1916:	11 24       	eor	r1, r1
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	2f 93       	push	r18
    191e:	3f 93       	push	r19
    1920:	4f 93       	push	r20
    1922:	5f 93       	push	r21
    1924:	6f 93       	push	r22
    1926:	7f 93       	push	r23
    1928:	8f 93       	push	r24
    192a:	9f 93       	push	r25
    192c:	af 93       	push	r26
    192e:	bf 93       	push	r27
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	ef 93       	push	r30
    1936:	ff 93       	push	r31
    1938:	10 92 e9 00 	sts	0x00E9, r1
    193c:	80 91 e8 00 	lds	r24, 0x00E8
    1940:	83 ff       	sbrs	r24, 3
    1942:	4c c1       	rjmp	.+664    	; 0x1bdc <__vector_11+0x2ce>
    1944:	e1 ef       	ldi	r30, 0xF1	; 241
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	60 81       	ld	r22, Z
    194a:	80 81       	ld	r24, Z
    194c:	20 81       	ld	r18, Z
    194e:	90 81       	ld	r25, Z
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	39 2b       	or	r19, r25
    1954:	40 81       	ld	r20, Z
    1956:	90 81       	ld	r25, Z
    1958:	50 e0       	ldi	r21, 0x00	; 0
    195a:	59 2b       	or	r21, r25
    195c:	70 81       	ld	r23, Z
    195e:	c0 81       	ld	r28, Z
    1960:	92 ef       	ldi	r25, 0xF2	; 242
    1962:	90 93 e8 00 	sts	0x00E8, r25
    1966:	86 30       	cpi	r24, 0x06	; 6
    1968:	09 f0       	breq	.+2      	; 0x196c <__vector_11+0x5e>
    196a:	58 c0       	rjmp	.+176    	; 0x1a1c <__vector_11+0x10e>
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <__vector_11+0x68>
    196e:	81 e2       	ldi	r24, 0x21	; 33
    1970:	80 93 eb 00 	sts	0x00EB, r24
    1974:	3a c1       	rjmp	.+628    	; 0x1bea <__vector_11+0x2dc>
    1976:	66 e0       	ldi	r22, 0x06	; 6
    1978:	88 ef       	ldi	r24, 0xF8	; 248
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	fc 01       	movw	r30, r24
    197e:	a5 91       	lpm	r26, Z+
    1980:	b4 91       	lpm	r27, Z
    1982:	2a 17       	cp	r18, r26
    1984:	3b 07       	cpc	r19, r27
    1986:	11 f0       	breq	.+4      	; 0x198c <__vector_11+0x7e>
    1988:	07 96       	adiw	r24, 0x07	; 7
    198a:	23 c0       	rjmp	.+70     	; 0x19d2 <__vector_11+0xc4>
    198c:	fc 01       	movw	r30, r24
    198e:	32 96       	adiw	r30, 0x02	; 2
    1990:	a5 91       	lpm	r26, Z+
    1992:	b4 91       	lpm	r27, Z
    1994:	4a 17       	cp	r20, r26
    1996:	5b 07       	cpc	r21, r27
    1998:	11 f0       	breq	.+4      	; 0x199e <__vector_11+0x90>
    199a:	07 96       	adiw	r24, 0x07	; 7
    199c:	1a c0       	rjmp	.+52     	; 0x19d2 <__vector_11+0xc4>
    199e:	fc 01       	movw	r30, r24
    19a0:	34 96       	adiw	r30, 0x04	; 4
    19a2:	45 91       	lpm	r20, Z+
    19a4:	54 91       	lpm	r21, Z
    19a6:	fc 01       	movw	r30, r24
    19a8:	36 96       	adiw	r30, 0x06	; 6
    19aa:	24 91       	lpm	r18, Z
    19ac:	87 2f       	mov	r24, r23
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9c 2b       	or	r25, r28
    19b2:	8f 3f       	cpi	r24, 0xFF	; 255
    19b4:	91 05       	cpc	r25, r1
    19b6:	19 f0       	breq	.+6      	; 0x19be <__vector_11+0xb0>
    19b8:	10 f0       	brcs	.+4      	; 0x19be <__vector_11+0xb0>
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	82 17       	cp	r24, r18
    19c0:	08 f4       	brcc	.+2      	; 0x19c4 <__vector_11+0xb6>
    19c2:	28 2f       	mov	r18, r24
    19c4:	a8 ee       	ldi	r26, 0xE8	; 232
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	70 e1       	ldi	r23, 0x10	; 16
    19ca:	6e ef       	ldi	r22, 0xFE	; 254
    19cc:	c1 ef       	ldi	r28, 0xF1	; 241
    19ce:	d0 e0       	ldi	r29, 0x00	; 0
    19d0:	03 c0       	rjmp	.+6      	; 0x19d8 <__vector_11+0xca>
    19d2:	61 50       	subi	r22, 0x01	; 1
    19d4:	99 f6       	brne	.-90     	; 0x197c <__vector_11+0x6e>
    19d6:	cb cf       	rjmp	.-106    	; 0x196e <__vector_11+0x60>
    19d8:	8c 91       	ld	r24, X
    19da:	98 2f       	mov	r25, r24
    19dc:	95 70       	andi	r25, 0x05	; 5
    19de:	e1 f3       	breq	.-8      	; 0x19d8 <__vector_11+0xca>
    19e0:	82 fd       	sbrc	r24, 2
    19e2:	03 c1       	rjmp	.+518    	; 0x1bea <__vector_11+0x2dc>
    19e4:	32 2f       	mov	r19, r18
    19e6:	21 31       	cpi	r18, 0x11	; 17
    19e8:	08 f0       	brcs	.+2      	; 0x19ec <__vector_11+0xde>
    19ea:	37 2f       	mov	r19, r23
    19ec:	33 23       	and	r19, r19
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <__vector_11+0xe4>
    19f0:	f9 c0       	rjmp	.+498    	; 0x1be4 <__vector_11+0x2d6>
    19f2:	fa 01       	movw	r30, r20
    19f4:	83 2f       	mov	r24, r19
    19f6:	94 91       	lpm	r25, Z
    19f8:	98 83       	st	Y, r25
    19fa:	81 50       	subi	r24, 0x01	; 1
    19fc:	31 96       	adiw	r30, 0x01	; 1
    19fe:	81 11       	cpse	r24, r1
    1a00:	fa cf       	rjmp	.-12     	; 0x19f6 <__vector_11+0xe8>
    1a02:	8f ef       	ldi	r24, 0xFF	; 255
    1a04:	83 0f       	add	r24, r19
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	48 0f       	add	r20, r24
    1a0c:	59 1f       	adc	r21, r25
    1a0e:	23 1b       	sub	r18, r19
    1a10:	6c 93       	st	X, r22
    1a12:	21 11       	cpse	r18, r1
    1a14:	e1 cf       	rjmp	.-62     	; 0x19d8 <__vector_11+0xca>
    1a16:	30 31       	cpi	r19, 0x10	; 16
    1a18:	f9 f2       	breq	.-66     	; 0x19d8 <__vector_11+0xca>
    1a1a:	e7 c0       	rjmp	.+462    	; 0x1bea <__vector_11+0x2dc>
    1a1c:	85 30       	cpi	r24, 0x05	; 5
    1a1e:	61 f4       	brne	.+24     	; 0x1a38 <__vector_11+0x12a>
    1a20:	8e ef       	ldi	r24, 0xFE	; 254
    1a22:	80 93 e8 00 	sts	0x00E8, r24
    1a26:	e8 ee       	ldi	r30, 0xE8	; 232
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	80 ff       	sbrs	r24, 0
    1a2e:	fd cf       	rjmp	.-6      	; 0x1a2a <__vector_11+0x11c>
    1a30:	20 68       	ori	r18, 0x80	; 128
    1a32:	20 93 e3 00 	sts	0x00E3, r18
    1a36:	d9 c0       	rjmp	.+434    	; 0x1bea <__vector_11+0x2dc>
    1a38:	89 30       	cpi	r24, 0x09	; 9
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <__vector_11+0x130>
    1a3c:	35 c0       	rjmp	.+106    	; 0x1aa8 <__vector_11+0x19a>
    1a3e:	61 11       	cpse	r22, r1
    1a40:	cd c0       	rjmp	.+410    	; 0x1bdc <__vector_11+0x2ce>
    1a42:	20 93 75 01 	sts	0x0175, r18
    1a46:	10 92 73 01 	sts	0x0173, r1
    1a4a:	10 92 74 01 	sts	0x0174, r1
    1a4e:	8e ef       	ldi	r24, 0xFE	; 254
    1a50:	80 93 e8 00 	sts	0x00E8, r24
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	21 ea       	ldi	r18, 0xA1	; 161
    1a58:	31 e0       	ldi	r19, 0x01	; 1
    1a5a:	c9 ee       	ldi	r28, 0xE9	; 233
    1a5c:	d0 e0       	ldi	r29, 0x00	; 0
    1a5e:	ab ee       	ldi	r26, 0xEB	; 235
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	0c ee       	ldi	r16, 0xEC	; 236
    1a64:	10 e0       	ldi	r17, 0x00	; 0
    1a66:	6d ee       	ldi	r22, 0xED	; 237
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	88 83       	st	Y, r24
    1a6c:	a9 01       	movw	r20, r18
    1a6e:	4f 5f       	subi	r20, 0xFF	; 255
    1a70:	5f 4f       	sbci	r21, 0xFF	; 255
    1a72:	f9 01       	movw	r30, r18
    1a74:	94 91       	lpm	r25, Z
    1a76:	9c 93       	st	X, r25
    1a78:	99 23       	and	r25, r25
    1a7a:	61 f0       	breq	.+24     	; 0x1a94 <__vector_11+0x186>
    1a7c:	fa 01       	movw	r30, r20
    1a7e:	44 91       	lpm	r20, Z
    1a80:	f8 01       	movw	r30, r16
    1a82:	40 83       	st	Z, r20
    1a84:	f9 01       	movw	r30, r18
    1a86:	32 96       	adiw	r30, 0x02	; 2
    1a88:	94 91       	lpm	r25, Z
    1a8a:	2d 5f       	subi	r18, 0xFD	; 253
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	fb 01       	movw	r30, r22
    1a90:	90 83       	st	Z, r25
    1a92:	01 c0       	rjmp	.+2      	; 0x1a96 <__vector_11+0x188>
    1a94:	9a 01       	movw	r18, r20
    1a96:	8f 5f       	subi	r24, 0xFF	; 255
    1a98:	85 30       	cpi	r24, 0x05	; 5
    1a9a:	39 f7       	brne	.-50     	; 0x1a6a <__vector_11+0x15c>
    1a9c:	ea ee       	ldi	r30, 0xEA	; 234
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	8e e1       	ldi	r24, 0x1E	; 30
    1aa2:	80 83       	st	Z, r24
    1aa4:	10 82       	st	Z, r1
    1aa6:	a1 c0       	rjmp	.+322    	; 0x1bea <__vector_11+0x2dc>
    1aa8:	88 30       	cpi	r24, 0x08	; 8
    1aaa:	81 f4       	brne	.+32     	; 0x1acc <__vector_11+0x1be>
    1aac:	60 38       	cpi	r22, 0x80	; 128
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <__vector_11+0x1a4>
    1ab0:	95 c0       	rjmp	.+298    	; 0x1bdc <__vector_11+0x2ce>
    1ab2:	e8 ee       	ldi	r30, 0xE8	; 232
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	80 ff       	sbrs	r24, 0
    1aba:	fd cf       	rjmp	.-6      	; 0x1ab6 <__vector_11+0x1a8>
    1abc:	80 91 75 01 	lds	r24, 0x0175
    1ac0:	80 93 f1 00 	sts	0x00F1, r24
    1ac4:	8e ef       	ldi	r24, 0xFE	; 254
    1ac6:	80 93 e8 00 	sts	0x00E8, r24
    1aca:	8f c0       	rjmp	.+286    	; 0x1bea <__vector_11+0x2dc>
    1acc:	81 32       	cpi	r24, 0x21	; 33
    1ace:	b9 f4       	brne	.+46     	; 0x1afe <__vector_11+0x1f0>
    1ad0:	61 3a       	cpi	r22, 0xA1	; 161
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <__vector_11+0x1c8>
    1ad4:	83 c0       	rjmp	.+262    	; 0x1bdc <__vector_11+0x2ce>
    1ad6:	e8 ee       	ldi	r30, 0xE8	; 232
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	80 ff       	sbrs	r24, 0
    1ade:	fd cf       	rjmp	.-6      	; 0x1ada <__vector_11+0x1cc>
    1ae0:	ea e1       	ldi	r30, 0x1A	; 26
    1ae2:	f1 e0       	ldi	r31, 0x01	; 1
    1ae4:	21 e2       	ldi	r18, 0x21	; 33
    1ae6:	31 e0       	ldi	r19, 0x01	; 1
    1ae8:	a1 ef       	ldi	r26, 0xF1	; 241
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	81 91       	ld	r24, Z+
    1aee:	8c 93       	st	X, r24
    1af0:	e2 17       	cp	r30, r18
    1af2:	f3 07       	cpc	r31, r19
    1af4:	d9 f7       	brne	.-10     	; 0x1aec <__vector_11+0x1de>
    1af6:	8e ef       	ldi	r24, 0xFE	; 254
    1af8:	80 93 e8 00 	sts	0x00E8, r24
    1afc:	76 c0       	rjmp	.+236    	; 0x1bea <__vector_11+0x2dc>
    1afe:	80 32       	cpi	r24, 0x20	; 32
    1b00:	d1 f4       	brne	.+52     	; 0x1b36 <__vector_11+0x228>
    1b02:	61 32       	cpi	r22, 0x21	; 33
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <__vector_11+0x1fa>
    1b06:	6a c0       	rjmp	.+212    	; 0x1bdc <__vector_11+0x2ce>
    1b08:	e8 ee       	ldi	r30, 0xE8	; 232
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	82 ff       	sbrs	r24, 2
    1b10:	fd cf       	rjmp	.-6      	; 0x1b0c <__vector_11+0x1fe>
    1b12:	ea e1       	ldi	r30, 0x1A	; 26
    1b14:	f1 e0       	ldi	r31, 0x01	; 1
    1b16:	21 e2       	ldi	r18, 0x21	; 33
    1b18:	31 e0       	ldi	r19, 0x01	; 1
    1b1a:	a1 ef       	ldi	r26, 0xF1	; 241
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	8c 91       	ld	r24, X
    1b20:	81 93       	st	Z+, r24
    1b22:	e2 17       	cp	r30, r18
    1b24:	f3 07       	cpc	r31, r19
    1b26:	d9 f7       	brne	.-10     	; 0x1b1e <__vector_11+0x210>
    1b28:	e8 ee       	ldi	r30, 0xE8	; 232
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	8b ef       	ldi	r24, 0xFB	; 251
    1b2e:	80 83       	st	Z, r24
    1b30:	8e ef       	ldi	r24, 0xFE	; 254
    1b32:	80 83       	st	Z, r24
    1b34:	5a c0       	rjmp	.+180    	; 0x1bea <__vector_11+0x2dc>
    1b36:	82 32       	cpi	r24, 0x22	; 34
    1b38:	71 f4       	brne	.+28     	; 0x1b56 <__vector_11+0x248>
    1b3a:	61 32       	cpi	r22, 0x21	; 33
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <__vector_11+0x232>
    1b3e:	4e c0       	rjmp	.+156    	; 0x1bdc <__vector_11+0x2ce>
    1b40:	20 93 73 01 	sts	0x0173, r18
    1b44:	e8 ee       	ldi	r30, 0xE8	; 232
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	80 ff       	sbrs	r24, 0
    1b4c:	fd cf       	rjmp	.-6      	; 0x1b48 <__vector_11+0x23a>
    1b4e:	8e ef       	ldi	r24, 0xFE	; 254
    1b50:	80 93 e8 00 	sts	0x00E8, r24
    1b54:	4a c0       	rjmp	.+148    	; 0x1bea <__vector_11+0x2dc>
    1b56:	81 11       	cpse	r24, r1
    1b58:	1a c0       	rjmp	.+52     	; 0x1b8e <__vector_11+0x280>
    1b5a:	e8 ee       	ldi	r30, 0xE8	; 232
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	80 ff       	sbrs	r24, 0
    1b62:	fd cf       	rjmp	.-6      	; 0x1b5e <__vector_11+0x250>
    1b64:	62 38       	cpi	r22, 0x82	; 130
    1b66:	51 f4       	brne	.+20     	; 0x1b7c <__vector_11+0x26e>
    1b68:	e9 ee       	ldi	r30, 0xE9	; 233
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	40 83       	st	Z, r20
    1b6e:	80 91 eb 00 	lds	r24, 0x00EB
    1b72:	85 fb       	bst	r24, 5
    1b74:	88 27       	eor	r24, r24
    1b76:	80 f9       	bld	r24, 0
    1b78:	10 82       	st	Z, r1
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <__vector_11+0x270>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	e1 ef       	ldi	r30, 0xF1	; 241
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 83       	st	Z, r24
    1b84:	10 82       	st	Z, r1
    1b86:	8e ef       	ldi	r24, 0xFE	; 254
    1b88:	80 93 e8 00 	sts	0x00E8, r24
    1b8c:	2e c0       	rjmp	.+92     	; 0x1bea <__vector_11+0x2dc>
    1b8e:	98 2f       	mov	r25, r24
    1b90:	9d 7f       	andi	r25, 0xFD	; 253
    1b92:	91 30       	cpi	r25, 0x01	; 1
    1b94:	19 f5       	brne	.+70     	; 0x1bdc <__vector_11+0x2ce>
    1b96:	62 30       	cpi	r22, 0x02	; 2
    1b98:	09 f5       	brne	.+66     	; 0x1bdc <__vector_11+0x2ce>
    1b9a:	23 2b       	or	r18, r19
    1b9c:	f9 f4       	brne	.+62     	; 0x1bdc <__vector_11+0x2ce>
    1b9e:	4f 77       	andi	r20, 0x7F	; 127
    1ba0:	9f ef       	ldi	r25, 0xFF	; 255
    1ba2:	94 0f       	add	r25, r20
    1ba4:	94 30       	cpi	r25, 0x04	; 4
    1ba6:	d0 f4       	brcc	.+52     	; 0x1bdc <__vector_11+0x2ce>
    1ba8:	9e ef       	ldi	r25, 0xFE	; 254
    1baa:	90 93 e8 00 	sts	0x00E8, r25
    1bae:	40 93 e9 00 	sts	0x00E9, r20
    1bb2:	83 30       	cpi	r24, 0x03	; 3
    1bb4:	21 f4       	brne	.+8      	; 0x1bbe <__vector_11+0x2b0>
    1bb6:	81 e2       	ldi	r24, 0x21	; 33
    1bb8:	80 93 eb 00 	sts	0x00EB, r24
    1bbc:	16 c0       	rjmp	.+44     	; 0x1bea <__vector_11+0x2dc>
    1bbe:	89 e1       	ldi	r24, 0x19	; 25
    1bc0:	80 93 eb 00 	sts	0x00EB, r24
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <__vector_11+0x2c0>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	4a 95       	dec	r20
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <__vector_11+0x2bc>
    1bd2:	ea ee       	ldi	r30, 0xEA	; 234
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 83       	st	Z, r24
    1bd8:	10 82       	st	Z, r1
    1bda:	07 c0       	rjmp	.+14     	; 0x1bea <__vector_11+0x2dc>
    1bdc:	81 e2       	ldi	r24, 0x21	; 33
    1bde:	80 93 eb 00 	sts	0x00EB, r24
    1be2:	03 c0       	rjmp	.+6      	; 0x1bea <__vector_11+0x2dc>
    1be4:	6c 93       	st	X, r22
    1be6:	21 11       	cpse	r18, r1
    1be8:	f7 ce       	rjmp	.-530    	; 0x19d8 <__vector_11+0xca>
    1bea:	ff 91       	pop	r31
    1bec:	ef 91       	pop	r30
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	bf 91       	pop	r27
    1bf4:	af 91       	pop	r26
    1bf6:	9f 91       	pop	r25
    1bf8:	8f 91       	pop	r24
    1bfa:	7f 91       	pop	r23
    1bfc:	6f 91       	pop	r22
    1bfe:	5f 91       	pop	r21
    1c00:	4f 91       	pop	r20
    1c02:	3f 91       	pop	r19
    1c04:	2f 91       	pop	r18
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	0f 90       	pop	r0
    1c10:	1f 90       	pop	r1
    1c12:	18 95       	reti

00001c14 <twi_wait>:
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	ec eb       	ldi	r30, 0xBC	; 188
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	88 23       	and	r24, r24
    1c20:	34 f0       	brlt	.+12     	; 0x1c2e <twi_wait+0x1a>
    1c22:	2f 5f       	subi	r18, 0xFF	; 255
    1c24:	3f 4f       	sbci	r19, 0xFF	; 255
    1c26:	29 3e       	cpi	r18, 0xE9	; 233
    1c28:	83 e0       	ldi	r24, 0x03	; 3
    1c2a:	38 07       	cpc	r19, r24
    1c2c:	b9 f7       	brne	.-18     	; 0x1c1c <twi_wait+0x8>
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	28 3e       	cpi	r18, 0xE8	; 232
    1c32:	33 40       	sbci	r19, 0x03	; 3
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <twi_wait+0x24>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	08 95       	ret

00001c3a <send_byte>:
    1c3a:	80 93 bb 00 	sts	0x00BB, r24
    1c3e:	84 e8       	ldi	r24, 0x84	; 132
    1c40:	80 93 bc 00 	sts	0x00BC, r24
    1c44:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <twi_wait>
    1c48:	88 23       	and	r24, r24
    1c4a:	19 f0       	breq	.+6      	; 0x1c52 <send_byte+0x18>
    1c4c:	80 91 b9 00 	lds	r24, 0x00B9
    1c50:	88 7f       	andi	r24, 0xF8	; 248
    1c52:	08 95       	ret

00001c54 <start_write>:
    1c54:	cf 93       	push	r28
    1c56:	c8 2f       	mov	r28, r24
    1c58:	94 ea       	ldi	r25, 0xA4	; 164
    1c5a:	90 93 bc 00 	sts	0x00BC, r25
    1c5e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <twi_wait>
    1c62:	88 23       	and	r24, r24
    1c64:	61 f0       	breq	.+24     	; 0x1c7e <start_write+0x2a>
    1c66:	8c 2f       	mov	r24, r28
    1c68:	88 0f       	add	r24, r24
    1c6a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1c6e:	80 32       	cpi	r24, 0x20	; 32
    1c70:	29 f4       	brne	.+10     	; 0x1c7c <start_write+0x28>
    1c72:	84 e9       	ldi	r24, 0x94	; 148
    1c74:	80 93 bc 00 	sts	0x00BC, r24
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	01 c0       	rjmp	.+2      	; 0x1c7e <start_write+0x2a>
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	cf 91       	pop	r28
    1c80:	08 95       	ret

00001c82 <m_wii_open>:
    1c82:	0e 94 65 0b 	call	0x16ca	; 0x16ca <m_bus_init>
    1c86:	88 e5       	ldi	r24, 0x58	; 88
    1c88:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <start_write>
    1c8c:	88 23       	and	r24, r24
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <m_wii_open+0x10>
    1c90:	cd c0       	rjmp	.+410    	; 0x1e2c <m_wii_open+0x1aa>
    1c92:	80 e3       	ldi	r24, 0x30	; 48
    1c94:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1c98:	88 23       	and	r24, r24
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <m_wii_open+0x1c>
    1c9c:	c9 c0       	rjmp	.+402    	; 0x1e30 <m_wii_open+0x1ae>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1ca4:	88 23       	and	r24, r24
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <m_wii_open+0x28>
    1ca8:	c5 c0       	rjmp	.+394    	; 0x1e34 <m_wii_open+0x1b2>
    1caa:	84 e9       	ldi	r24, 0x94	; 148
    1cac:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cb0:	83 ec       	ldi	r24, 0xC3	; 195
    1cb2:	99 e0       	ldi	r25, 0x09	; 9
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <m_wii_open+0x32>
    1cb8:	00 c0       	rjmp	.+0      	; 0x1cba <m_wii_open+0x38>
    1cba:	00 00       	nop
    1cbc:	88 e5       	ldi	r24, 0x58	; 88
    1cbe:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <start_write>
    1cc2:	88 23       	and	r24, r24
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <m_wii_open+0x46>
    1cc6:	b8 c0       	rjmp	.+368    	; 0x1e38 <m_wii_open+0x1b6>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1cce:	88 23       	and	r24, r24
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <m_wii_open+0x52>
    1cd2:	b4 c0       	rjmp	.+360    	; 0x1e3c <m_wii_open+0x1ba>
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1cda:	88 23       	and	r24, r24
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <m_wii_open+0x5e>
    1cde:	b0 c0       	rjmp	.+352    	; 0x1e40 <m_wii_open+0x1be>
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1ce6:	88 23       	and	r24, r24
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <m_wii_open+0x6a>
    1cea:	ac c0       	rjmp	.+344    	; 0x1e44 <m_wii_open+0x1c2>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1cf2:	88 23       	and	r24, r24
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <m_wii_open+0x76>
    1cf6:	a8 c0       	rjmp	.+336    	; 0x1e48 <m_wii_open+0x1c6>
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1cfe:	88 23       	and	r24, r24
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <m_wii_open+0x82>
    1d02:	a4 c0       	rjmp	.+328    	; 0x1e4c <m_wii_open+0x1ca>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1d0a:	88 23       	and	r24, r24
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <m_wii_open+0x8e>
    1d0e:	a0 c0       	rjmp	.+320    	; 0x1e50 <m_wii_open+0x1ce>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1d16:	88 23       	and	r24, r24
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <m_wii_open+0x9a>
    1d1a:	9c c0       	rjmp	.+312    	; 0x1e54 <m_wii_open+0x1d2>
    1d1c:	80 e9       	ldi	r24, 0x90	; 144
    1d1e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1d22:	88 23       	and	r24, r24
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <m_wii_open+0xa6>
    1d26:	98 c0       	rjmp	.+304    	; 0x1e58 <m_wii_open+0x1d6>
    1d28:	84 e9       	ldi	r24, 0x94	; 148
    1d2a:	80 93 bc 00 	sts	0x00BC, r24
    1d2e:	83 ec       	ldi	r24, 0xC3	; 195
    1d30:	99 e0       	ldi	r25, 0x09	; 9
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <m_wii_open+0xb0>
    1d36:	00 c0       	rjmp	.+0      	; 0x1d38 <m_wii_open+0xb6>
    1d38:	00 00       	nop
    1d3a:	88 e5       	ldi	r24, 0x58	; 88
    1d3c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <start_write>
    1d40:	88 23       	and	r24, r24
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <m_wii_open+0xc4>
    1d44:	8b c0       	rjmp	.+278    	; 0x1e5c <m_wii_open+0x1da>
    1d46:	87 e0       	ldi	r24, 0x07	; 7
    1d48:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1d4c:	88 23       	and	r24, r24
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <m_wii_open+0xd0>
    1d50:	87 c0       	rjmp	.+270    	; 0x1e60 <m_wii_open+0x1de>
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1d58:	88 23       	and	r24, r24
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <m_wii_open+0xdc>
    1d5c:	83 c0       	rjmp	.+262    	; 0x1e64 <m_wii_open+0x1e2>
    1d5e:	81 e4       	ldi	r24, 0x41	; 65
    1d60:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1d64:	88 23       	and	r24, r24
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <m_wii_open+0xe8>
    1d68:	7f c0       	rjmp	.+254    	; 0x1e68 <m_wii_open+0x1e6>
    1d6a:	84 e9       	ldi	r24, 0x94	; 148
    1d6c:	80 93 bc 00 	sts	0x00BC, r24
    1d70:	83 ec       	ldi	r24, 0xC3	; 195
    1d72:	99 e0       	ldi	r25, 0x09	; 9
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <m_wii_open+0xf2>
    1d78:	00 c0       	rjmp	.+0      	; 0x1d7a <m_wii_open+0xf8>
    1d7a:	00 00       	nop
    1d7c:	88 e5       	ldi	r24, 0x58	; 88
    1d7e:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <start_write>
    1d82:	88 23       	and	r24, r24
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <m_wii_open+0x106>
    1d86:	72 c0       	rjmp	.+228    	; 0x1e6c <m_wii_open+0x1ea>
    1d88:	8a e1       	ldi	r24, 0x1A	; 26
    1d8a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1d8e:	88 23       	and	r24, r24
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <m_wii_open+0x112>
    1d92:	6e c0       	rjmp	.+220    	; 0x1e70 <m_wii_open+0x1ee>
    1d94:	80 e4       	ldi	r24, 0x40	; 64
    1d96:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1d9a:	88 23       	and	r24, r24
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <m_wii_open+0x11e>
    1d9e:	6a c0       	rjmp	.+212    	; 0x1e74 <m_wii_open+0x1f2>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1da6:	88 23       	and	r24, r24
    1da8:	09 f4       	brne	.+2      	; 0x1dac <m_wii_open+0x12a>
    1daa:	66 c0       	rjmp	.+204    	; 0x1e78 <m_wii_open+0x1f6>
    1dac:	84 e9       	ldi	r24, 0x94	; 148
    1dae:	80 93 bc 00 	sts	0x00BC, r24
    1db2:	83 ec       	ldi	r24, 0xC3	; 195
    1db4:	99 e0       	ldi	r25, 0x09	; 9
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <m_wii_open+0x134>
    1dba:	00 c0       	rjmp	.+0      	; 0x1dbc <m_wii_open+0x13a>
    1dbc:	00 00       	nop
    1dbe:	88 e5       	ldi	r24, 0x58	; 88
    1dc0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <start_write>
    1dc4:	88 23       	and	r24, r24
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <m_wii_open+0x148>
    1dc8:	59 c0       	rjmp	.+178    	; 0x1e7c <m_wii_open+0x1fa>
    1dca:	83 e3       	ldi	r24, 0x33	; 51
    1dcc:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1dd0:	88 23       	and	r24, r24
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <m_wii_open+0x154>
    1dd4:	55 c0       	rjmp	.+170    	; 0x1e80 <m_wii_open+0x1fe>
    1dd6:	83 e0       	ldi	r24, 0x03	; 3
    1dd8:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1ddc:	88 23       	and	r24, r24
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <m_wii_open+0x160>
    1de0:	51 c0       	rjmp	.+162    	; 0x1e84 <m_wii_open+0x202>
    1de2:	84 e9       	ldi	r24, 0x94	; 148
    1de4:	80 93 bc 00 	sts	0x00BC, r24
    1de8:	83 ec       	ldi	r24, 0xC3	; 195
    1dea:	99 e0       	ldi	r25, 0x09	; 9
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <m_wii_open+0x16a>
    1df0:	00 c0       	rjmp	.+0      	; 0x1df2 <m_wii_open+0x170>
    1df2:	00 00       	nop
    1df4:	88 e5       	ldi	r24, 0x58	; 88
    1df6:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <start_write>
    1dfa:	88 23       	and	r24, r24
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <m_wii_open+0x17e>
    1dfe:	44 c0       	rjmp	.+136    	; 0x1e88 <m_wii_open+0x206>
    1e00:	80 e3       	ldi	r24, 0x30	; 48
    1e02:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1e06:	88 23       	and	r24, r24
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <m_wii_open+0x18a>
    1e0a:	40 c0       	rjmp	.+128    	; 0x1e8c <m_wii_open+0x20a>
    1e0c:	88 e0       	ldi	r24, 0x08	; 8
    1e0e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1e12:	88 23       	and	r24, r24
    1e14:	e9 f1       	breq	.+122    	; 0x1e90 <m_wii_open+0x20e>
    1e16:	84 e9       	ldi	r24, 0x94	; 148
    1e18:	80 93 bc 00 	sts	0x00BC, r24
    1e1c:	83 ec       	ldi	r24, 0xC3	; 195
    1e1e:	99 e0       	ldi	r25, 0x09	; 9
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <m_wii_open+0x19e>
    1e24:	00 c0       	rjmp	.+0      	; 0x1e26 <m_wii_open+0x1a4>
    1e26:	00 00       	nop
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	08 95       	ret
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	08 95       	ret
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	08 95       	ret
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	08 95       	ret
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	08 95       	ret
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	08 95       	ret
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	08 95       	ret
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	08 95       	ret
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	08 95       	ret
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	08 95       	ret
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	08 95       	ret
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	08 95       	ret
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	08 95       	ret
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	08 95       	ret
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	08 95       	ret
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	08 95       	ret
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	08 95       	ret
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	08 95       	ret
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	08 95       	ret
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	08 95       	ret
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	08 95       	ret
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	08 95       	ret
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	08 95       	ret
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	08 95       	ret
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	08 95       	ret
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	08 95       	ret
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	08 95       	ret

00001e94 <start_read>:
    1e94:	cf 93       	push	r28
    1e96:	c8 2f       	mov	r28, r24
    1e98:	84 ea       	ldi	r24, 0xA4	; 164
    1e9a:	80 93 bc 00 	sts	0x00BC, r24
    1e9e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <twi_wait>
    1ea2:	88 23       	and	r24, r24
    1ea4:	69 f0       	breq	.+26     	; 0x1ec0 <start_read+0x2c>
    1ea6:	8c 2f       	mov	r24, r28
    1ea8:	88 0f       	add	r24, r24
    1eaa:	8f 5f       	subi	r24, 0xFF	; 255
    1eac:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1eb0:	88 34       	cpi	r24, 0x48	; 72
    1eb2:	29 f4       	brne	.+10     	; 0x1ebe <start_read+0x2a>
    1eb4:	84 e9       	ldi	r24, 0x94	; 148
    1eb6:	80 93 bc 00 	sts	0x00BC, r24
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <start_read+0x2c>
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	cf 91       	pop	r28
    1ec2:	08 95       	ret

00001ec4 <m_wii_read>:
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	60 97       	sbiw	r28, 0x10	; 16
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	8c 01       	movw	r16, r24
    1ede:	fe 01       	movw	r30, r28
    1ee0:	31 96       	adiw	r30, 0x01	; 1
    1ee2:	80 e1       	ldi	r24, 0x10	; 16
    1ee4:	df 01       	movw	r26, r30
    1ee6:	1d 92       	st	X+, r1
    1ee8:	8a 95       	dec	r24
    1eea:	e9 f7       	brne	.-6      	; 0x1ee6 <m_wii_read+0x22>
    1eec:	88 e5       	ldi	r24, 0x58	; 88
    1eee:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <start_write>
    1ef2:	88 23       	and	r24, r24
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <m_wii_read+0x34>
    1ef6:	69 c0       	rjmp	.+210    	; 0x1fca <m_wii_read+0x106>
    1ef8:	86 e3       	ldi	r24, 0x36	; 54
    1efa:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <send_byte>
    1efe:	88 23       	and	r24, r24
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <m_wii_read+0x40>
    1f02:	65 c0       	rjmp	.+202    	; 0x1fce <m_wii_read+0x10a>
    1f04:	84 e9       	ldi	r24, 0x94	; 148
    1f06:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f0a:	b8 e0       	ldi	r27, 0x08	; 8
    1f0c:	ba 95       	dec	r27
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <m_wii_read+0x48>
    1f10:	00 00       	nop
    1f12:	88 e5       	ldi	r24, 0x58	; 88
    1f14:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <start_read>
    1f18:	88 23       	and	r24, r24
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <m_wii_read+0x5a>
    1f1c:	5a c0       	rjmp	.+180    	; 0x1fd2 <m_wii_read+0x10e>
    1f1e:	be 01       	movw	r22, r28
    1f20:	6f 5f       	subi	r22, 0xFF	; 255
    1f22:	7f 4f       	sbci	r23, 0xFF	; 255
    1f24:	ae 01       	movw	r20, r28
    1f26:	40 5f       	subi	r20, 0xF0	; 240
    1f28:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2a:	ec eb       	ldi	r30, 0xBC	; 188
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	84 ec       	ldi	r24, 0xC4	; 196
    1f30:	2b eb       	ldi	r18, 0xBB	; 187
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	80 83       	st	Z, r24
    1f36:	90 81       	ld	r25, Z
    1f38:	99 23       	and	r25, r25
    1f3a:	ec f7       	brge	.-6      	; 0x1f36 <m_wii_read+0x72>
    1f3c:	d9 01       	movw	r26, r18
    1f3e:	9c 91       	ld	r25, X
    1f40:	db 01       	movw	r26, r22
    1f42:	9d 93       	st	X+, r25
    1f44:	bd 01       	movw	r22, r26
    1f46:	a4 17       	cp	r26, r20
    1f48:	b5 07       	cpc	r27, r21
    1f4a:	a1 f7       	brne	.-24     	; 0x1f34 <m_wii_read+0x70>
    1f4c:	84 e8       	ldi	r24, 0x84	; 132
    1f4e:	80 93 bc 00 	sts	0x00BC, r24
    1f52:	ec eb       	ldi	r30, 0xBC	; 188
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	88 23       	and	r24, r24
    1f5a:	ec f7       	brge	.-6      	; 0x1f56 <m_wii_read+0x92>
    1f5c:	80 91 bb 00 	lds	r24, 0x00BB
    1f60:	88 8b       	std	Y+16, r24	; 0x10
    1f62:	84 e9       	ldi	r24, 0x94	; 148
    1f64:	80 93 bc 00 	sts	0x00BC, r24
    1f68:	be 01       	movw	r22, r28
    1f6a:	6c 5f       	subi	r22, 0xFC	; 252
    1f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6e:	f8 01       	movw	r30, r16
    1f70:	08 5e       	subi	r16, 0xE8	; 232
    1f72:	1f 4f       	sbci	r17, 0xFF	; 255
    1f74:	db 01       	movw	r26, r22
    1f76:	2c 91       	ld	r18, X
    1f78:	32 2f       	mov	r19, r18
    1f7a:	30 73       	andi	r19, 0x30	; 48
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	02 97       	sbiw	r24, 0x02	; 2
    1f80:	dc 01       	movw	r26, r24
    1f82:	8c 91       	ld	r24, X
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	b0 e1       	ldi	r27, 0x10	; 16
    1f88:	3b 9f       	mul	r19, r27
    1f8a:	80 0d       	add	r24, r0
    1f8c:	91 1d       	adc	r25, r1
    1f8e:	11 24       	eor	r1, r1
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	80 83       	st	Z, r24
    1f94:	42 2f       	mov	r20, r18
    1f96:	40 7c       	andi	r20, 0xC0	; 192
    1f98:	50 e0       	ldi	r21, 0x00	; 0
    1f9a:	44 0f       	add	r20, r20
    1f9c:	55 1f       	adc	r21, r21
    1f9e:	44 0f       	add	r20, r20
    1fa0:	55 1f       	adc	r21, r21
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	8c 91       	ld	r24, X
    1faa:	48 0f       	add	r20, r24
    1fac:	51 1d       	adc	r21, r1
    1fae:	53 83       	std	Z+3, r21	; 0x03
    1fb0:	42 83       	std	Z+2, r20	; 0x02
    1fb2:	2f 70       	andi	r18, 0x0F	; 15
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	35 83       	std	Z+5, r19	; 0x05
    1fb8:	24 83       	std	Z+4, r18	; 0x04
    1fba:	6d 5f       	subi	r22, 0xFD	; 253
    1fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbe:	36 96       	adiw	r30, 0x06	; 6
    1fc0:	e0 17       	cp	r30, r16
    1fc2:	f1 07       	cpc	r31, r17
    1fc4:	b9 f6       	brne	.-82     	; 0x1f74 <m_wii_read+0xb0>
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	05 c0       	rjmp	.+10     	; 0x1fd4 <m_wii_read+0x110>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	03 c0       	rjmp	.+6      	; 0x1fd4 <m_wii_read+0x110>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	01 c0       	rjmp	.+2      	; 0x1fd4 <m_wii_read+0x110>
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	60 96       	adiw	r28, 0x10	; 16
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	08 95       	ret

00001fea <__subsf3>:
    1fea:	50 58       	subi	r21, 0x80	; 128

00001fec <__addsf3>:
    1fec:	bb 27       	eor	r27, r27
    1fee:	aa 27       	eor	r26, r26
    1ff0:	0e 94 0d 10 	call	0x201a	; 0x201a <__addsf3x>
    1ff4:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__fp_round>
    1ff8:	0e 94 10 12 	call	0x2420	; 0x2420 <__fp_pscA>
    1ffc:	38 f0       	brcs	.+14     	; 0x200c <__addsf3+0x20>
    1ffe:	0e 94 17 12 	call	0x242e	; 0x242e <__fp_pscB>
    2002:	20 f0       	brcs	.+8      	; 0x200c <__addsf3+0x20>
    2004:	39 f4       	brne	.+14     	; 0x2014 <__addsf3+0x28>
    2006:	9f 3f       	cpi	r25, 0xFF	; 255
    2008:	19 f4       	brne	.+6      	; 0x2010 <__addsf3+0x24>
    200a:	26 f4       	brtc	.+8      	; 0x2014 <__addsf3+0x28>
    200c:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__fp_nan>
    2010:	0e f4       	brtc	.+2      	; 0x2014 <__addsf3+0x28>
    2012:	e0 95       	com	r30
    2014:	e7 fb       	bst	r30, 7
    2016:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__fp_inf>

0000201a <__addsf3x>:
    201a:	e9 2f       	mov	r30, r25
    201c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__fp_split3>
    2020:	58 f3       	brcs	.-42     	; 0x1ff8 <__addsf3+0xc>
    2022:	ba 17       	cp	r27, r26
    2024:	62 07       	cpc	r22, r18
    2026:	73 07       	cpc	r23, r19
    2028:	84 07       	cpc	r24, r20
    202a:	95 07       	cpc	r25, r21
    202c:	20 f0       	brcs	.+8      	; 0x2036 <__addsf3x+0x1c>
    202e:	79 f4       	brne	.+30     	; 0x204e <__addsf3x+0x34>
    2030:	a6 f5       	brtc	.+104    	; 0x209a <__addsf3x+0x80>
    2032:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__fp_zero>
    2036:	0e f4       	brtc	.+2      	; 0x203a <__addsf3x+0x20>
    2038:	e0 95       	com	r30
    203a:	0b 2e       	mov	r0, r27
    203c:	ba 2f       	mov	r27, r26
    203e:	a0 2d       	mov	r26, r0
    2040:	0b 01       	movw	r0, r22
    2042:	b9 01       	movw	r22, r18
    2044:	90 01       	movw	r18, r0
    2046:	0c 01       	movw	r0, r24
    2048:	ca 01       	movw	r24, r20
    204a:	a0 01       	movw	r20, r0
    204c:	11 24       	eor	r1, r1
    204e:	ff 27       	eor	r31, r31
    2050:	59 1b       	sub	r21, r25
    2052:	99 f0       	breq	.+38     	; 0x207a <__addsf3x+0x60>
    2054:	59 3f       	cpi	r21, 0xF9	; 249
    2056:	50 f4       	brcc	.+20     	; 0x206c <__addsf3x+0x52>
    2058:	50 3e       	cpi	r21, 0xE0	; 224
    205a:	68 f1       	brcs	.+90     	; 0x20b6 <__addsf3x+0x9c>
    205c:	1a 16       	cp	r1, r26
    205e:	f0 40       	sbci	r31, 0x00	; 0
    2060:	a2 2f       	mov	r26, r18
    2062:	23 2f       	mov	r18, r19
    2064:	34 2f       	mov	r19, r20
    2066:	44 27       	eor	r20, r20
    2068:	58 5f       	subi	r21, 0xF8	; 248
    206a:	f3 cf       	rjmp	.-26     	; 0x2052 <__addsf3x+0x38>
    206c:	46 95       	lsr	r20
    206e:	37 95       	ror	r19
    2070:	27 95       	ror	r18
    2072:	a7 95       	ror	r26
    2074:	f0 40       	sbci	r31, 0x00	; 0
    2076:	53 95       	inc	r21
    2078:	c9 f7       	brne	.-14     	; 0x206c <__addsf3x+0x52>
    207a:	7e f4       	brtc	.+30     	; 0x209a <__addsf3x+0x80>
    207c:	1f 16       	cp	r1, r31
    207e:	ba 0b       	sbc	r27, r26
    2080:	62 0b       	sbc	r22, r18
    2082:	73 0b       	sbc	r23, r19
    2084:	84 0b       	sbc	r24, r20
    2086:	ba f0       	brmi	.+46     	; 0x20b6 <__addsf3x+0x9c>
    2088:	91 50       	subi	r25, 0x01	; 1
    208a:	a1 f0       	breq	.+40     	; 0x20b4 <__addsf3x+0x9a>
    208c:	ff 0f       	add	r31, r31
    208e:	bb 1f       	adc	r27, r27
    2090:	66 1f       	adc	r22, r22
    2092:	77 1f       	adc	r23, r23
    2094:	88 1f       	adc	r24, r24
    2096:	c2 f7       	brpl	.-16     	; 0x2088 <__addsf3x+0x6e>
    2098:	0e c0       	rjmp	.+28     	; 0x20b6 <__addsf3x+0x9c>
    209a:	ba 0f       	add	r27, r26
    209c:	62 1f       	adc	r22, r18
    209e:	73 1f       	adc	r23, r19
    20a0:	84 1f       	adc	r24, r20
    20a2:	48 f4       	brcc	.+18     	; 0x20b6 <__addsf3x+0x9c>
    20a4:	87 95       	ror	r24
    20a6:	77 95       	ror	r23
    20a8:	67 95       	ror	r22
    20aa:	b7 95       	ror	r27
    20ac:	f7 95       	ror	r31
    20ae:	9e 3f       	cpi	r25, 0xFE	; 254
    20b0:	08 f0       	brcs	.+2      	; 0x20b4 <__addsf3x+0x9a>
    20b2:	b0 cf       	rjmp	.-160    	; 0x2014 <__addsf3+0x28>
    20b4:	93 95       	inc	r25
    20b6:	88 0f       	add	r24, r24
    20b8:	08 f0       	brcs	.+2      	; 0x20bc <__addsf3x+0xa2>
    20ba:	99 27       	eor	r25, r25
    20bc:	ee 0f       	add	r30, r30
    20be:	97 95       	ror	r25
    20c0:	87 95       	ror	r24
    20c2:	08 95       	ret
    20c4:	0e 94 10 12 	call	0x2420	; 0x2420 <__fp_pscA>
    20c8:	60 f0       	brcs	.+24     	; 0x20e2 <__addsf3x+0xc8>
    20ca:	80 e8       	ldi	r24, 0x80	; 128
    20cc:	91 e0       	ldi	r25, 0x01	; 1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <__addsf3x+0xb8>
    20d0:	9e ef       	ldi	r25, 0xFE	; 254
    20d2:	0e 94 17 12 	call	0x242e	; 0x242e <__fp_pscB>
    20d6:	28 f0       	brcs	.+10     	; 0x20e2 <__addsf3x+0xc8>
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	51 e0       	ldi	r21, 0x01	; 1
    20dc:	71 f4       	brne	.+28     	; 0x20fa <atan2+0x10>
    20de:	5e ef       	ldi	r21, 0xFE	; 254
    20e0:	0c c0       	rjmp	.+24     	; 0x20fa <atan2+0x10>
    20e2:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__fp_nan>
    20e6:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__fp_zero>

000020ea <atan2>:
    20ea:	e9 2f       	mov	r30, r25
    20ec:	e0 78       	andi	r30, 0x80	; 128
    20ee:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__fp_split3>
    20f2:	40 f3       	brcs	.-48     	; 0x20c4 <__addsf3x+0xaa>
    20f4:	09 2e       	mov	r0, r25
    20f6:	05 2a       	or	r0, r21
    20f8:	b1 f3       	breq	.-20     	; 0x20e6 <__addsf3x+0xcc>
    20fa:	26 17       	cp	r18, r22
    20fc:	37 07       	cpc	r19, r23
    20fe:	48 07       	cpc	r20, r24
    2100:	59 07       	cpc	r21, r25
    2102:	38 f0       	brcs	.+14     	; 0x2112 <atan2+0x28>
    2104:	0e 2e       	mov	r0, r30
    2106:	07 f8       	bld	r0, 7
    2108:	e0 25       	eor	r30, r0
    210a:	69 f0       	breq	.+26     	; 0x2126 <atan2+0x3c>
    210c:	e0 25       	eor	r30, r0
    210e:	e0 64       	ori	r30, 0x40	; 64
    2110:	0a c0       	rjmp	.+20     	; 0x2126 <atan2+0x3c>
    2112:	ef 63       	ori	r30, 0x3F	; 63
    2114:	07 f8       	bld	r0, 7
    2116:	00 94       	com	r0
    2118:	07 fa       	bst	r0, 7
    211a:	db 01       	movw	r26, r22
    211c:	b9 01       	movw	r22, r18
    211e:	9d 01       	movw	r18, r26
    2120:	dc 01       	movw	r26, r24
    2122:	ca 01       	movw	r24, r20
    2124:	ad 01       	movw	r20, r26
    2126:	ef 93       	push	r30
    2128:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__divsf3_pse>
    212c:	0e 94 49 12 	call	0x2492	; 0x2492 <__fp_round>
    2130:	0e 94 a5 10 	call	0x214a	; 0x214a <atan>
    2134:	5f 91       	pop	r21
    2136:	55 23       	and	r21, r21
    2138:	39 f0       	breq	.+14     	; 0x2148 <atan2+0x5e>
    213a:	2b ed       	ldi	r18, 0xDB	; 219
    213c:	3f e0       	ldi	r19, 0x0F	; 15
    213e:	49 e4       	ldi	r20, 0x49	; 73
    2140:	50 fd       	sbrc	r21, 0
    2142:	49 ec       	ldi	r20, 0xC9	; 201
    2144:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__addsf3>
    2148:	08 95       	ret

0000214a <atan>:
    214a:	df 93       	push	r29
    214c:	dd 27       	eor	r29, r29
    214e:	b9 2f       	mov	r27, r25
    2150:	bf 77       	andi	r27, 0x7F	; 127
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	16 16       	cp	r1, r22
    2158:	17 06       	cpc	r1, r23
    215a:	48 07       	cpc	r20, r24
    215c:	5b 07       	cpc	r21, r27
    215e:	18 f4       	brcc	.+6      	; 0x2166 <atan+0x1c>
    2160:	d9 2f       	mov	r29, r25
    2162:	0e 94 9c 12 	call	0x2538	; 0x2538 <inverse>
    2166:	9f 93       	push	r25
    2168:	8f 93       	push	r24
    216a:	7f 93       	push	r23
    216c:	6f 93       	push	r22
    216e:	0e 94 5f 13 	call	0x26be	; 0x26be <square>
    2172:	ec ea       	ldi	r30, 0xAC	; 172
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__fp_powser>
    217a:	0e 94 49 12 	call	0x2492	; 0x2492 <__fp_round>
    217e:	2f 91       	pop	r18
    2180:	3f 91       	pop	r19
    2182:	4f 91       	pop	r20
    2184:	5f 91       	pop	r21
    2186:	0e 94 b7 12 	call	0x256e	; 0x256e <__mulsf3x>
    218a:	dd 23       	and	r29, r29
    218c:	51 f0       	breq	.+20     	; 0x21a2 <atan+0x58>
    218e:	90 58       	subi	r25, 0x80	; 128
    2190:	a2 ea       	ldi	r26, 0xA2	; 162
    2192:	2a ed       	ldi	r18, 0xDA	; 218
    2194:	3f e0       	ldi	r19, 0x0F	; 15
    2196:	49 ec       	ldi	r20, 0xC9	; 201
    2198:	5f e3       	ldi	r21, 0x3F	; 63
    219a:	d0 78       	andi	r29, 0x80	; 128
    219c:	5d 27       	eor	r21, r29
    219e:	0e 94 0d 10 	call	0x201a	; 0x201a <__addsf3x>
    21a2:	df 91       	pop	r29
    21a4:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__fp_round>

000021a8 <__cmpsf2>:
    21a8:	0e 94 bc 11 	call	0x2378	; 0x2378 <__fp_cmp>
    21ac:	08 f4       	brcc	.+2      	; 0x21b0 <__cmpsf2+0x8>
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	08 95       	ret

000021b2 <cos>:
    21b2:	0e 94 20 12 	call	0x2440	; 0x2440 <__fp_rempio2>
    21b6:	e3 95       	inc	r30
    21b8:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <__fp_sinus>

000021bc <__divsf3>:
    21bc:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__divsf3x>
    21c0:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__fp_round>
    21c4:	0e 94 17 12 	call	0x242e	; 0x242e <__fp_pscB>
    21c8:	58 f0       	brcs	.+22     	; 0x21e0 <__divsf3+0x24>
    21ca:	0e 94 10 12 	call	0x2420	; 0x2420 <__fp_pscA>
    21ce:	40 f0       	brcs	.+16     	; 0x21e0 <__divsf3+0x24>
    21d0:	29 f4       	brne	.+10     	; 0x21dc <__divsf3+0x20>
    21d2:	5f 3f       	cpi	r21, 0xFF	; 255
    21d4:	29 f0       	breq	.+10     	; 0x21e0 <__divsf3+0x24>
    21d6:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__fp_inf>
    21da:	51 11       	cpse	r21, r1
    21dc:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__fp_szero>
    21e0:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__fp_nan>

000021e4 <__divsf3x>:
    21e4:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__fp_split3>
    21e8:	68 f3       	brcs	.-38     	; 0x21c4 <__divsf3+0x8>

000021ea <__divsf3_pse>:
    21ea:	99 23       	and	r25, r25
    21ec:	b1 f3       	breq	.-20     	; 0x21da <__divsf3+0x1e>
    21ee:	55 23       	and	r21, r21
    21f0:	91 f3       	breq	.-28     	; 0x21d6 <__divsf3+0x1a>
    21f2:	95 1b       	sub	r25, r21
    21f4:	55 0b       	sbc	r21, r21
    21f6:	bb 27       	eor	r27, r27
    21f8:	aa 27       	eor	r26, r26
    21fa:	62 17       	cp	r22, r18
    21fc:	73 07       	cpc	r23, r19
    21fe:	84 07       	cpc	r24, r20
    2200:	38 f0       	brcs	.+14     	; 0x2210 <__divsf3_pse+0x26>
    2202:	9f 5f       	subi	r25, 0xFF	; 255
    2204:	5f 4f       	sbci	r21, 0xFF	; 255
    2206:	22 0f       	add	r18, r18
    2208:	33 1f       	adc	r19, r19
    220a:	44 1f       	adc	r20, r20
    220c:	aa 1f       	adc	r26, r26
    220e:	a9 f3       	breq	.-22     	; 0x21fa <__divsf3_pse+0x10>
    2210:	35 d0       	rcall	.+106    	; 0x227c <__divsf3_pse+0x92>
    2212:	0e 2e       	mov	r0, r30
    2214:	3a f0       	brmi	.+14     	; 0x2224 <__divsf3_pse+0x3a>
    2216:	e0 e8       	ldi	r30, 0x80	; 128
    2218:	32 d0       	rcall	.+100    	; 0x227e <__divsf3_pse+0x94>
    221a:	91 50       	subi	r25, 0x01	; 1
    221c:	50 40       	sbci	r21, 0x00	; 0
    221e:	e6 95       	lsr	r30
    2220:	00 1c       	adc	r0, r0
    2222:	ca f7       	brpl	.-14     	; 0x2216 <__divsf3_pse+0x2c>
    2224:	2b d0       	rcall	.+86     	; 0x227c <__divsf3_pse+0x92>
    2226:	fe 2f       	mov	r31, r30
    2228:	29 d0       	rcall	.+82     	; 0x227c <__divsf3_pse+0x92>
    222a:	66 0f       	add	r22, r22
    222c:	77 1f       	adc	r23, r23
    222e:	88 1f       	adc	r24, r24
    2230:	bb 1f       	adc	r27, r27
    2232:	26 17       	cp	r18, r22
    2234:	37 07       	cpc	r19, r23
    2236:	48 07       	cpc	r20, r24
    2238:	ab 07       	cpc	r26, r27
    223a:	b0 e8       	ldi	r27, 0x80	; 128
    223c:	09 f0       	breq	.+2      	; 0x2240 <__divsf3_pse+0x56>
    223e:	bb 0b       	sbc	r27, r27
    2240:	80 2d       	mov	r24, r0
    2242:	bf 01       	movw	r22, r30
    2244:	ff 27       	eor	r31, r31
    2246:	93 58       	subi	r25, 0x83	; 131
    2248:	5f 4f       	sbci	r21, 0xFF	; 255
    224a:	3a f0       	brmi	.+14     	; 0x225a <__divsf3_pse+0x70>
    224c:	9e 3f       	cpi	r25, 0xFE	; 254
    224e:	51 05       	cpc	r21, r1
    2250:	78 f0       	brcs	.+30     	; 0x2270 <__divsf3_pse+0x86>
    2252:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__fp_inf>
    2256:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__fp_szero>
    225a:	5f 3f       	cpi	r21, 0xFF	; 255
    225c:	e4 f3       	brlt	.-8      	; 0x2256 <__divsf3_pse+0x6c>
    225e:	98 3e       	cpi	r25, 0xE8	; 232
    2260:	d4 f3       	brlt	.-12     	; 0x2256 <__divsf3_pse+0x6c>
    2262:	86 95       	lsr	r24
    2264:	77 95       	ror	r23
    2266:	67 95       	ror	r22
    2268:	b7 95       	ror	r27
    226a:	f7 95       	ror	r31
    226c:	9f 5f       	subi	r25, 0xFF	; 255
    226e:	c9 f7       	brne	.-14     	; 0x2262 <__divsf3_pse+0x78>
    2270:	88 0f       	add	r24, r24
    2272:	91 1d       	adc	r25, r1
    2274:	96 95       	lsr	r25
    2276:	87 95       	ror	r24
    2278:	97 f9       	bld	r25, 7
    227a:	08 95       	ret
    227c:	e1 e0       	ldi	r30, 0x01	; 1
    227e:	66 0f       	add	r22, r22
    2280:	77 1f       	adc	r23, r23
    2282:	88 1f       	adc	r24, r24
    2284:	bb 1f       	adc	r27, r27
    2286:	62 17       	cp	r22, r18
    2288:	73 07       	cpc	r23, r19
    228a:	84 07       	cpc	r24, r20
    228c:	ba 07       	cpc	r27, r26
    228e:	20 f0       	brcs	.+8      	; 0x2298 <__divsf3_pse+0xae>
    2290:	62 1b       	sub	r22, r18
    2292:	73 0b       	sbc	r23, r19
    2294:	84 0b       	sbc	r24, r20
    2296:	ba 0b       	sbc	r27, r26
    2298:	ee 1f       	adc	r30, r30
    229a:	88 f7       	brcc	.-30     	; 0x227e <__divsf3_pse+0x94>
    229c:	e0 95       	com	r30
    229e:	08 95       	ret

000022a0 <__fixunssfsi>:
    22a0:	0e 94 76 12 	call	0x24ec	; 0x24ec <__fp_splitA>
    22a4:	88 f0       	brcs	.+34     	; 0x22c8 <__fixunssfsi+0x28>
    22a6:	9f 57       	subi	r25, 0x7F	; 127
    22a8:	98 f0       	brcs	.+38     	; 0x22d0 <__fixunssfsi+0x30>
    22aa:	b9 2f       	mov	r27, r25
    22ac:	99 27       	eor	r25, r25
    22ae:	b7 51       	subi	r27, 0x17	; 23
    22b0:	b0 f0       	brcs	.+44     	; 0x22de <__fixunssfsi+0x3e>
    22b2:	e1 f0       	breq	.+56     	; 0x22ec <__fixunssfsi+0x4c>
    22b4:	66 0f       	add	r22, r22
    22b6:	77 1f       	adc	r23, r23
    22b8:	88 1f       	adc	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	1a f0       	brmi	.+6      	; 0x22c4 <__fixunssfsi+0x24>
    22be:	ba 95       	dec	r27
    22c0:	c9 f7       	brne	.-14     	; 0x22b4 <__fixunssfsi+0x14>
    22c2:	14 c0       	rjmp	.+40     	; 0x22ec <__fixunssfsi+0x4c>
    22c4:	b1 30       	cpi	r27, 0x01	; 1
    22c6:	91 f0       	breq	.+36     	; 0x22ec <__fixunssfsi+0x4c>
    22c8:	0e 94 90 12 	call	0x2520	; 0x2520 <__fp_zero>
    22cc:	b1 e0       	ldi	r27, 0x01	; 1
    22ce:	08 95       	ret
    22d0:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__fp_zero>
    22d4:	67 2f       	mov	r22, r23
    22d6:	78 2f       	mov	r23, r24
    22d8:	88 27       	eor	r24, r24
    22da:	b8 5f       	subi	r27, 0xF8	; 248
    22dc:	39 f0       	breq	.+14     	; 0x22ec <__fixunssfsi+0x4c>
    22de:	b9 3f       	cpi	r27, 0xF9	; 249
    22e0:	cc f3       	brlt	.-14     	; 0x22d4 <__fixunssfsi+0x34>
    22e2:	86 95       	lsr	r24
    22e4:	77 95       	ror	r23
    22e6:	67 95       	ror	r22
    22e8:	b3 95       	inc	r27
    22ea:	d9 f7       	brne	.-10     	; 0x22e2 <__fixunssfsi+0x42>
    22ec:	3e f4       	brtc	.+14     	; 0x22fc <__fixunssfsi+0x5c>
    22ee:	90 95       	com	r25
    22f0:	80 95       	com	r24
    22f2:	70 95       	com	r23
    22f4:	61 95       	neg	r22
    22f6:	7f 4f       	sbci	r23, 0xFF	; 255
    22f8:	8f 4f       	sbci	r24, 0xFF	; 255
    22fa:	9f 4f       	sbci	r25, 0xFF	; 255
    22fc:	08 95       	ret

000022fe <__floatunsisf>:
    22fe:	e8 94       	clt
    2300:	09 c0       	rjmp	.+18     	; 0x2314 <__floatsisf+0x12>

00002302 <__floatsisf>:
    2302:	97 fb       	bst	r25, 7
    2304:	3e f4       	brtc	.+14     	; 0x2314 <__floatsisf+0x12>
    2306:	90 95       	com	r25
    2308:	80 95       	com	r24
    230a:	70 95       	com	r23
    230c:	61 95       	neg	r22
    230e:	7f 4f       	sbci	r23, 0xFF	; 255
    2310:	8f 4f       	sbci	r24, 0xFF	; 255
    2312:	9f 4f       	sbci	r25, 0xFF	; 255
    2314:	99 23       	and	r25, r25
    2316:	a9 f0       	breq	.+42     	; 0x2342 <__floatsisf+0x40>
    2318:	f9 2f       	mov	r31, r25
    231a:	96 e9       	ldi	r25, 0x96	; 150
    231c:	bb 27       	eor	r27, r27
    231e:	93 95       	inc	r25
    2320:	f6 95       	lsr	r31
    2322:	87 95       	ror	r24
    2324:	77 95       	ror	r23
    2326:	67 95       	ror	r22
    2328:	b7 95       	ror	r27
    232a:	f1 11       	cpse	r31, r1
    232c:	f8 cf       	rjmp	.-16     	; 0x231e <__floatsisf+0x1c>
    232e:	fa f4       	brpl	.+62     	; 0x236e <__floatsisf+0x6c>
    2330:	bb 0f       	add	r27, r27
    2332:	11 f4       	brne	.+4      	; 0x2338 <__floatsisf+0x36>
    2334:	60 ff       	sbrs	r22, 0
    2336:	1b c0       	rjmp	.+54     	; 0x236e <__floatsisf+0x6c>
    2338:	6f 5f       	subi	r22, 0xFF	; 255
    233a:	7f 4f       	sbci	r23, 0xFF	; 255
    233c:	8f 4f       	sbci	r24, 0xFF	; 255
    233e:	9f 4f       	sbci	r25, 0xFF	; 255
    2340:	16 c0       	rjmp	.+44     	; 0x236e <__floatsisf+0x6c>
    2342:	88 23       	and	r24, r24
    2344:	11 f0       	breq	.+4      	; 0x234a <__floatsisf+0x48>
    2346:	96 e9       	ldi	r25, 0x96	; 150
    2348:	11 c0       	rjmp	.+34     	; 0x236c <__floatsisf+0x6a>
    234a:	77 23       	and	r23, r23
    234c:	21 f0       	breq	.+8      	; 0x2356 <__floatsisf+0x54>
    234e:	9e e8       	ldi	r25, 0x8E	; 142
    2350:	87 2f       	mov	r24, r23
    2352:	76 2f       	mov	r23, r22
    2354:	05 c0       	rjmp	.+10     	; 0x2360 <__floatsisf+0x5e>
    2356:	66 23       	and	r22, r22
    2358:	71 f0       	breq	.+28     	; 0x2376 <__floatsisf+0x74>
    235a:	96 e8       	ldi	r25, 0x86	; 134
    235c:	86 2f       	mov	r24, r22
    235e:	70 e0       	ldi	r23, 0x00	; 0
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	2a f0       	brmi	.+10     	; 0x236e <__floatsisf+0x6c>
    2364:	9a 95       	dec	r25
    2366:	66 0f       	add	r22, r22
    2368:	77 1f       	adc	r23, r23
    236a:	88 1f       	adc	r24, r24
    236c:	da f7       	brpl	.-10     	; 0x2364 <__floatsisf+0x62>
    236e:	88 0f       	add	r24, r24
    2370:	96 95       	lsr	r25
    2372:	87 95       	ror	r24
    2374:	97 f9       	bld	r25, 7
    2376:	08 95       	ret

00002378 <__fp_cmp>:
    2378:	99 0f       	add	r25, r25
    237a:	00 08       	sbc	r0, r0
    237c:	55 0f       	add	r21, r21
    237e:	aa 0b       	sbc	r26, r26
    2380:	e0 e8       	ldi	r30, 0x80	; 128
    2382:	fe ef       	ldi	r31, 0xFE	; 254
    2384:	16 16       	cp	r1, r22
    2386:	17 06       	cpc	r1, r23
    2388:	e8 07       	cpc	r30, r24
    238a:	f9 07       	cpc	r31, r25
    238c:	c0 f0       	brcs	.+48     	; 0x23be <__fp_cmp+0x46>
    238e:	12 16       	cp	r1, r18
    2390:	13 06       	cpc	r1, r19
    2392:	e4 07       	cpc	r30, r20
    2394:	f5 07       	cpc	r31, r21
    2396:	98 f0       	brcs	.+38     	; 0x23be <__fp_cmp+0x46>
    2398:	62 1b       	sub	r22, r18
    239a:	73 0b       	sbc	r23, r19
    239c:	84 0b       	sbc	r24, r20
    239e:	95 0b       	sbc	r25, r21
    23a0:	39 f4       	brne	.+14     	; 0x23b0 <__fp_cmp+0x38>
    23a2:	0a 26       	eor	r0, r26
    23a4:	61 f0       	breq	.+24     	; 0x23be <__fp_cmp+0x46>
    23a6:	23 2b       	or	r18, r19
    23a8:	24 2b       	or	r18, r20
    23aa:	25 2b       	or	r18, r21
    23ac:	21 f4       	brne	.+8      	; 0x23b6 <__fp_cmp+0x3e>
    23ae:	08 95       	ret
    23b0:	0a 26       	eor	r0, r26
    23b2:	09 f4       	brne	.+2      	; 0x23b6 <__fp_cmp+0x3e>
    23b4:	a1 40       	sbci	r26, 0x01	; 1
    23b6:	a6 95       	lsr	r26
    23b8:	8f ef       	ldi	r24, 0xFF	; 255
    23ba:	81 1d       	adc	r24, r1
    23bc:	81 1d       	adc	r24, r1
    23be:	08 95       	ret

000023c0 <__fp_inf>:
    23c0:	97 f9       	bld	r25, 7
    23c2:	9f 67       	ori	r25, 0x7F	; 127
    23c4:	80 e8       	ldi	r24, 0x80	; 128
    23c6:	70 e0       	ldi	r23, 0x00	; 0
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	08 95       	ret

000023cc <__fp_nan>:
    23cc:	9f ef       	ldi	r25, 0xFF	; 255
    23ce:	80 ec       	ldi	r24, 0xC0	; 192
    23d0:	08 95       	ret

000023d2 <__fp_powser>:
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	1f 93       	push	r17
    23d8:	0f 93       	push	r16
    23da:	ff 92       	push	r15
    23dc:	ef 92       	push	r14
    23de:	df 92       	push	r13
    23e0:	7b 01       	movw	r14, r22
    23e2:	8c 01       	movw	r16, r24
    23e4:	68 94       	set
    23e6:	06 c0       	rjmp	.+12     	; 0x23f4 <__fp_powser+0x22>
    23e8:	da 2e       	mov	r13, r26
    23ea:	ef 01       	movw	r28, r30
    23ec:	0e 94 b7 12 	call	0x256e	; 0x256e <__mulsf3x>
    23f0:	fe 01       	movw	r30, r28
    23f2:	e8 94       	clt
    23f4:	a5 91       	lpm	r26, Z+
    23f6:	25 91       	lpm	r18, Z+
    23f8:	35 91       	lpm	r19, Z+
    23fa:	45 91       	lpm	r20, Z+
    23fc:	55 91       	lpm	r21, Z+
    23fe:	a6 f3       	brts	.-24     	; 0x23e8 <__fp_powser+0x16>
    2400:	ef 01       	movw	r28, r30
    2402:	0e 94 0d 10 	call	0x201a	; 0x201a <__addsf3x>
    2406:	fe 01       	movw	r30, r28
    2408:	97 01       	movw	r18, r14
    240a:	a8 01       	movw	r20, r16
    240c:	da 94       	dec	r13
    240e:	69 f7       	brne	.-38     	; 0x23ea <__fp_powser+0x18>
    2410:	df 90       	pop	r13
    2412:	ef 90       	pop	r14
    2414:	ff 90       	pop	r15
    2416:	0f 91       	pop	r16
    2418:	1f 91       	pop	r17
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <__fp_pscA>:
    2420:	00 24       	eor	r0, r0
    2422:	0a 94       	dec	r0
    2424:	16 16       	cp	r1, r22
    2426:	17 06       	cpc	r1, r23
    2428:	18 06       	cpc	r1, r24
    242a:	09 06       	cpc	r0, r25
    242c:	08 95       	ret

0000242e <__fp_pscB>:
    242e:	00 24       	eor	r0, r0
    2430:	0a 94       	dec	r0
    2432:	12 16       	cp	r1, r18
    2434:	13 06       	cpc	r1, r19
    2436:	14 06       	cpc	r1, r20
    2438:	05 06       	cpc	r0, r21
    243a:	08 95       	ret
    243c:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__fp_nan>

00002440 <__fp_rempio2>:
    2440:	0e 94 76 12 	call	0x24ec	; 0x24ec <__fp_splitA>
    2444:	d8 f3       	brcs	.-10     	; 0x243c <__fp_pscB+0xe>
    2446:	e8 94       	clt
    2448:	e0 e0       	ldi	r30, 0x00	; 0
    244a:	bb 27       	eor	r27, r27
    244c:	9f 57       	subi	r25, 0x7F	; 127
    244e:	f0 f0       	brcs	.+60     	; 0x248c <__fp_rempio2+0x4c>
    2450:	2a ed       	ldi	r18, 0xDA	; 218
    2452:	3f e0       	ldi	r19, 0x0F	; 15
    2454:	49 ec       	ldi	r20, 0xC9	; 201
    2456:	06 c0       	rjmp	.+12     	; 0x2464 <__fp_rempio2+0x24>
    2458:	ee 0f       	add	r30, r30
    245a:	bb 0f       	add	r27, r27
    245c:	66 1f       	adc	r22, r22
    245e:	77 1f       	adc	r23, r23
    2460:	88 1f       	adc	r24, r24
    2462:	28 f0       	brcs	.+10     	; 0x246e <__fp_rempio2+0x2e>
    2464:	b2 3a       	cpi	r27, 0xA2	; 162
    2466:	62 07       	cpc	r22, r18
    2468:	73 07       	cpc	r23, r19
    246a:	84 07       	cpc	r24, r20
    246c:	28 f0       	brcs	.+10     	; 0x2478 <__fp_rempio2+0x38>
    246e:	b2 5a       	subi	r27, 0xA2	; 162
    2470:	62 0b       	sbc	r22, r18
    2472:	73 0b       	sbc	r23, r19
    2474:	84 0b       	sbc	r24, r20
    2476:	e3 95       	inc	r30
    2478:	9a 95       	dec	r25
    247a:	72 f7       	brpl	.-36     	; 0x2458 <__fp_rempio2+0x18>
    247c:	80 38       	cpi	r24, 0x80	; 128
    247e:	30 f4       	brcc	.+12     	; 0x248c <__fp_rempio2+0x4c>
    2480:	9a 95       	dec	r25
    2482:	bb 0f       	add	r27, r27
    2484:	66 1f       	adc	r22, r22
    2486:	77 1f       	adc	r23, r23
    2488:	88 1f       	adc	r24, r24
    248a:	d2 f7       	brpl	.-12     	; 0x2480 <__fp_rempio2+0x40>
    248c:	90 48       	sbci	r25, 0x80	; 128
    248e:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__fp_mpack_finite>

00002492 <__fp_round>:
    2492:	09 2e       	mov	r0, r25
    2494:	03 94       	inc	r0
    2496:	00 0c       	add	r0, r0
    2498:	11 f4       	brne	.+4      	; 0x249e <__fp_round+0xc>
    249a:	88 23       	and	r24, r24
    249c:	52 f0       	brmi	.+20     	; 0x24b2 <__fp_round+0x20>
    249e:	bb 0f       	add	r27, r27
    24a0:	40 f4       	brcc	.+16     	; 0x24b2 <__fp_round+0x20>
    24a2:	bf 2b       	or	r27, r31
    24a4:	11 f4       	brne	.+4      	; 0x24aa <__fp_round+0x18>
    24a6:	60 ff       	sbrs	r22, 0
    24a8:	04 c0       	rjmp	.+8      	; 0x24b2 <__fp_round+0x20>
    24aa:	6f 5f       	subi	r22, 0xFF	; 255
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	8f 4f       	sbci	r24, 0xFF	; 255
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	08 95       	ret

000024b4 <__fp_sinus>:
    24b4:	ef 93       	push	r30
    24b6:	e0 ff       	sbrs	r30, 0
    24b8:	07 c0       	rjmp	.+14     	; 0x24c8 <__fp_sinus+0x14>
    24ba:	a2 ea       	ldi	r26, 0xA2	; 162
    24bc:	2a ed       	ldi	r18, 0xDA	; 218
    24be:	3f e0       	ldi	r19, 0x0F	; 15
    24c0:	49 ec       	ldi	r20, 0xC9	; 201
    24c2:	5f eb       	ldi	r21, 0xBF	; 191
    24c4:	0e 94 0d 10 	call	0x201a	; 0x201a <__addsf3x>
    24c8:	0e 94 49 12 	call	0x2492	; 0x2492 <__fp_round>
    24cc:	0f 90       	pop	r0
    24ce:	03 94       	inc	r0
    24d0:	01 fc       	sbrc	r0, 1
    24d2:	90 58       	subi	r25, 0x80	; 128
    24d4:	e9 ed       	ldi	r30, 0xD9	; 217
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__fp_powsodd>

000024dc <__fp_split3>:
    24dc:	57 fd       	sbrc	r21, 7
    24de:	90 58       	subi	r25, 0x80	; 128
    24e0:	44 0f       	add	r20, r20
    24e2:	55 1f       	adc	r21, r21
    24e4:	59 f0       	breq	.+22     	; 0x24fc <__fp_splitA+0x10>
    24e6:	5f 3f       	cpi	r21, 0xFF	; 255
    24e8:	71 f0       	breq	.+28     	; 0x2506 <__fp_splitA+0x1a>
    24ea:	47 95       	ror	r20

000024ec <__fp_splitA>:
    24ec:	88 0f       	add	r24, r24
    24ee:	97 fb       	bst	r25, 7
    24f0:	99 1f       	adc	r25, r25
    24f2:	61 f0       	breq	.+24     	; 0x250c <__fp_splitA+0x20>
    24f4:	9f 3f       	cpi	r25, 0xFF	; 255
    24f6:	79 f0       	breq	.+30     	; 0x2516 <__fp_splitA+0x2a>
    24f8:	87 95       	ror	r24
    24fa:	08 95       	ret
    24fc:	12 16       	cp	r1, r18
    24fe:	13 06       	cpc	r1, r19
    2500:	14 06       	cpc	r1, r20
    2502:	55 1f       	adc	r21, r21
    2504:	f2 cf       	rjmp	.-28     	; 0x24ea <__fp_split3+0xe>
    2506:	46 95       	lsr	r20
    2508:	f1 df       	rcall	.-30     	; 0x24ec <__fp_splitA>
    250a:	08 c0       	rjmp	.+16     	; 0x251c <__fp_splitA+0x30>
    250c:	16 16       	cp	r1, r22
    250e:	17 06       	cpc	r1, r23
    2510:	18 06       	cpc	r1, r24
    2512:	99 1f       	adc	r25, r25
    2514:	f1 cf       	rjmp	.-30     	; 0x24f8 <__fp_splitA+0xc>
    2516:	86 95       	lsr	r24
    2518:	71 05       	cpc	r23, r1
    251a:	61 05       	cpc	r22, r1
    251c:	08 94       	sec
    251e:	08 95       	ret

00002520 <__fp_zero>:
    2520:	e8 94       	clt

00002522 <__fp_szero>:
    2522:	bb 27       	eor	r27, r27
    2524:	66 27       	eor	r22, r22
    2526:	77 27       	eor	r23, r23
    2528:	cb 01       	movw	r24, r22
    252a:	97 f9       	bld	r25, 7
    252c:	08 95       	ret

0000252e <__gesf2>:
    252e:	0e 94 bc 11 	call	0x2378	; 0x2378 <__fp_cmp>
    2532:	08 f4       	brcc	.+2      	; 0x2536 <__gesf2+0x8>
    2534:	8f ef       	ldi	r24, 0xFF	; 255
    2536:	08 95       	ret

00002538 <inverse>:
    2538:	9b 01       	movw	r18, r22
    253a:	ac 01       	movw	r20, r24
    253c:	60 e0       	ldi	r22, 0x00	; 0
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	80 e8       	ldi	r24, 0x80	; 128
    2542:	9f e3       	ldi	r25, 0x3F	; 63
    2544:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__divsf3>

00002548 <__mulsf3>:
    2548:	0e 94 b7 12 	call	0x256e	; 0x256e <__mulsf3x>
    254c:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__fp_round>
    2550:	0e 94 10 12 	call	0x2420	; 0x2420 <__fp_pscA>
    2554:	38 f0       	brcs	.+14     	; 0x2564 <__mulsf3+0x1c>
    2556:	0e 94 17 12 	call	0x242e	; 0x242e <__fp_pscB>
    255a:	20 f0       	brcs	.+8      	; 0x2564 <__mulsf3+0x1c>
    255c:	95 23       	and	r25, r21
    255e:	11 f0       	breq	.+4      	; 0x2564 <__mulsf3+0x1c>
    2560:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__fp_inf>
    2564:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__fp_nan>
    2568:	11 24       	eor	r1, r1
    256a:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__fp_szero>

0000256e <__mulsf3x>:
    256e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__fp_split3>
    2572:	70 f3       	brcs	.-36     	; 0x2550 <__mulsf3+0x8>

00002574 <__mulsf3_pse>:
    2574:	95 9f       	mul	r25, r21
    2576:	c1 f3       	breq	.-16     	; 0x2568 <__mulsf3+0x20>
    2578:	95 0f       	add	r25, r21
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	55 1f       	adc	r21, r21
    257e:	62 9f       	mul	r22, r18
    2580:	f0 01       	movw	r30, r0
    2582:	72 9f       	mul	r23, r18
    2584:	bb 27       	eor	r27, r27
    2586:	f0 0d       	add	r31, r0
    2588:	b1 1d       	adc	r27, r1
    258a:	63 9f       	mul	r22, r19
    258c:	aa 27       	eor	r26, r26
    258e:	f0 0d       	add	r31, r0
    2590:	b1 1d       	adc	r27, r1
    2592:	aa 1f       	adc	r26, r26
    2594:	64 9f       	mul	r22, r20
    2596:	66 27       	eor	r22, r22
    2598:	b0 0d       	add	r27, r0
    259a:	a1 1d       	adc	r26, r1
    259c:	66 1f       	adc	r22, r22
    259e:	82 9f       	mul	r24, r18
    25a0:	22 27       	eor	r18, r18
    25a2:	b0 0d       	add	r27, r0
    25a4:	a1 1d       	adc	r26, r1
    25a6:	62 1f       	adc	r22, r18
    25a8:	73 9f       	mul	r23, r19
    25aa:	b0 0d       	add	r27, r0
    25ac:	a1 1d       	adc	r26, r1
    25ae:	62 1f       	adc	r22, r18
    25b0:	83 9f       	mul	r24, r19
    25b2:	a0 0d       	add	r26, r0
    25b4:	61 1d       	adc	r22, r1
    25b6:	22 1f       	adc	r18, r18
    25b8:	74 9f       	mul	r23, r20
    25ba:	33 27       	eor	r19, r19
    25bc:	a0 0d       	add	r26, r0
    25be:	61 1d       	adc	r22, r1
    25c0:	23 1f       	adc	r18, r19
    25c2:	84 9f       	mul	r24, r20
    25c4:	60 0d       	add	r22, r0
    25c6:	21 1d       	adc	r18, r1
    25c8:	82 2f       	mov	r24, r18
    25ca:	76 2f       	mov	r23, r22
    25cc:	6a 2f       	mov	r22, r26
    25ce:	11 24       	eor	r1, r1
    25d0:	9f 57       	subi	r25, 0x7F	; 127
    25d2:	50 40       	sbci	r21, 0x00	; 0
    25d4:	9a f0       	brmi	.+38     	; 0x25fc <__mulsf3_pse+0x88>
    25d6:	f1 f0       	breq	.+60     	; 0x2614 <__mulsf3_pse+0xa0>
    25d8:	88 23       	and	r24, r24
    25da:	4a f0       	brmi	.+18     	; 0x25ee <__mulsf3_pse+0x7a>
    25dc:	ee 0f       	add	r30, r30
    25de:	ff 1f       	adc	r31, r31
    25e0:	bb 1f       	adc	r27, r27
    25e2:	66 1f       	adc	r22, r22
    25e4:	77 1f       	adc	r23, r23
    25e6:	88 1f       	adc	r24, r24
    25e8:	91 50       	subi	r25, 0x01	; 1
    25ea:	50 40       	sbci	r21, 0x00	; 0
    25ec:	a9 f7       	brne	.-22     	; 0x25d8 <__mulsf3_pse+0x64>
    25ee:	9e 3f       	cpi	r25, 0xFE	; 254
    25f0:	51 05       	cpc	r21, r1
    25f2:	80 f0       	brcs	.+32     	; 0x2614 <__mulsf3_pse+0xa0>
    25f4:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__fp_inf>
    25f8:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__fp_szero>
    25fc:	5f 3f       	cpi	r21, 0xFF	; 255
    25fe:	e4 f3       	brlt	.-8      	; 0x25f8 <__mulsf3_pse+0x84>
    2600:	98 3e       	cpi	r25, 0xE8	; 232
    2602:	d4 f3       	brlt	.-12     	; 0x25f8 <__mulsf3_pse+0x84>
    2604:	86 95       	lsr	r24
    2606:	77 95       	ror	r23
    2608:	67 95       	ror	r22
    260a:	b7 95       	ror	r27
    260c:	f7 95       	ror	r31
    260e:	e7 95       	ror	r30
    2610:	9f 5f       	subi	r25, 0xFF	; 255
    2612:	c1 f7       	brne	.-16     	; 0x2604 <__mulsf3_pse+0x90>
    2614:	fe 2b       	or	r31, r30
    2616:	88 0f       	add	r24, r24
    2618:	91 1d       	adc	r25, r1
    261a:	96 95       	lsr	r25
    261c:	87 95       	ror	r24
    261e:	97 f9       	bld	r25, 7
    2620:	08 95       	ret

00002622 <sin>:
    2622:	9f 93       	push	r25
    2624:	0e 94 20 12 	call	0x2440	; 0x2440 <__fp_rempio2>
    2628:	0f 90       	pop	r0
    262a:	07 fc       	sbrc	r0, 7
    262c:	ee 5f       	subi	r30, 0xFE	; 254
    262e:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <__fp_sinus>
    2632:	19 f4       	brne	.+6      	; 0x263a <sin+0x18>
    2634:	16 f4       	brtc	.+4      	; 0x263a <sin+0x18>
    2636:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__fp_nan>
    263a:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__fp_mpack>

0000263e <sqrt>:
    263e:	0e 94 76 12 	call	0x24ec	; 0x24ec <__fp_splitA>
    2642:	b8 f3       	brcs	.-18     	; 0x2632 <sin+0x10>
    2644:	99 23       	and	r25, r25
    2646:	c9 f3       	breq	.-14     	; 0x263a <sin+0x18>
    2648:	b6 f3       	brts	.-20     	; 0x2636 <sin+0x14>
    264a:	9f 57       	subi	r25, 0x7F	; 127
    264c:	55 0b       	sbc	r21, r21
    264e:	87 ff       	sbrs	r24, 7
    2650:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__fp_norm2>
    2654:	00 24       	eor	r0, r0
    2656:	a0 e6       	ldi	r26, 0x60	; 96
    2658:	40 ea       	ldi	r20, 0xA0	; 160
    265a:	90 01       	movw	r18, r0
    265c:	80 58       	subi	r24, 0x80	; 128
    265e:	56 95       	lsr	r21
    2660:	97 95       	ror	r25
    2662:	28 f4       	brcc	.+10     	; 0x266e <sqrt+0x30>
    2664:	80 5c       	subi	r24, 0xC0	; 192
    2666:	66 0f       	add	r22, r22
    2668:	77 1f       	adc	r23, r23
    266a:	88 1f       	adc	r24, r24
    266c:	20 f0       	brcs	.+8      	; 0x2676 <sqrt+0x38>
    266e:	26 17       	cp	r18, r22
    2670:	37 07       	cpc	r19, r23
    2672:	48 07       	cpc	r20, r24
    2674:	30 f4       	brcc	.+12     	; 0x2682 <sqrt+0x44>
    2676:	62 1b       	sub	r22, r18
    2678:	73 0b       	sbc	r23, r19
    267a:	84 0b       	sbc	r24, r20
    267c:	20 29       	or	r18, r0
    267e:	31 29       	or	r19, r1
    2680:	4a 2b       	or	r20, r26
    2682:	a6 95       	lsr	r26
    2684:	17 94       	ror	r1
    2686:	07 94       	ror	r0
    2688:	20 25       	eor	r18, r0
    268a:	31 25       	eor	r19, r1
    268c:	4a 27       	eor	r20, r26
    268e:	58 f7       	brcc	.-42     	; 0x2666 <sqrt+0x28>
    2690:	66 0f       	add	r22, r22
    2692:	77 1f       	adc	r23, r23
    2694:	88 1f       	adc	r24, r24
    2696:	20 f0       	brcs	.+8      	; 0x26a0 <sqrt+0x62>
    2698:	26 17       	cp	r18, r22
    269a:	37 07       	cpc	r19, r23
    269c:	48 07       	cpc	r20, r24
    269e:	30 f4       	brcc	.+12     	; 0x26ac <sqrt+0x6e>
    26a0:	62 0b       	sbc	r22, r18
    26a2:	73 0b       	sbc	r23, r19
    26a4:	84 0b       	sbc	r24, r20
    26a6:	20 0d       	add	r18, r0
    26a8:	31 1d       	adc	r19, r1
    26aa:	41 1d       	adc	r20, r1
    26ac:	a0 95       	com	r26
    26ae:	81 f7       	brne	.-32     	; 0x2690 <sqrt+0x52>
    26b0:	b9 01       	movw	r22, r18
    26b2:	84 2f       	mov	r24, r20
    26b4:	91 58       	subi	r25, 0x81	; 129
    26b6:	88 0f       	add	r24, r24
    26b8:	96 95       	lsr	r25
    26ba:	87 95       	ror	r24
    26bc:	08 95       	ret

000026be <square>:
    26be:	9b 01       	movw	r18, r22
    26c0:	ac 01       	movw	r20, r24
    26c2:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__mulsf3>

000026c6 <__fp_mpack>:
    26c6:	9f 3f       	cpi	r25, 0xFF	; 255
    26c8:	31 f0       	breq	.+12     	; 0x26d6 <__fp_mpack_finite+0xc>

000026ca <__fp_mpack_finite>:
    26ca:	91 50       	subi	r25, 0x01	; 1
    26cc:	20 f4       	brcc	.+8      	; 0x26d6 <__fp_mpack_finite+0xc>
    26ce:	87 95       	ror	r24
    26d0:	77 95       	ror	r23
    26d2:	67 95       	ror	r22
    26d4:	b7 95       	ror	r27
    26d6:	88 0f       	add	r24, r24
    26d8:	91 1d       	adc	r25, r1
    26da:	96 95       	lsr	r25
    26dc:	87 95       	ror	r24
    26de:	97 f9       	bld	r25, 7
    26e0:	08 95       	ret

000026e2 <__fp_norm2>:
    26e2:	91 50       	subi	r25, 0x01	; 1
    26e4:	50 40       	sbci	r21, 0x00	; 0
    26e6:	66 0f       	add	r22, r22
    26e8:	77 1f       	adc	r23, r23
    26ea:	88 1f       	adc	r24, r24
    26ec:	d2 f7       	brpl	.-12     	; 0x26e2 <__fp_norm2>
    26ee:	08 95       	ret

000026f0 <__fp_powsodd>:
    26f0:	9f 93       	push	r25
    26f2:	8f 93       	push	r24
    26f4:	7f 93       	push	r23
    26f6:	6f 93       	push	r22
    26f8:	ff 93       	push	r31
    26fa:	ef 93       	push	r30
    26fc:	9b 01       	movw	r18, r22
    26fe:	ac 01       	movw	r20, r24
    2700:	0e 94 a4 12 	call	0x2548	; 0x2548 <__mulsf3>
    2704:	ef 91       	pop	r30
    2706:	ff 91       	pop	r31
    2708:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__fp_powser>
    270c:	2f 91       	pop	r18
    270e:	3f 91       	pop	r19
    2710:	4f 91       	pop	r20
    2712:	5f 91       	pop	r21
    2714:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__mulsf3>

00002718 <_exit>:
    2718:	f8 94       	cli

0000271a <__stop_program>:
    271a:	ff cf       	rjmp	.-2      	; 0x271a <__stop_program>
