
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00002f64  00002ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800154  00800154  0000304c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000304c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000307c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  000030bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000302d  00000000  00000000  000033e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e31  00000000  00000000  00006411  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001389  00000000  00000000  00007242  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ae0  00000000  00000000  000085cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c10  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d9e  00000000  00000000  00009cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0000da5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__vector_3>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <__vector_10>
      2c:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__vector_11>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_17>
      48:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__vector_18>
      4c:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_19>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	de 08       	sbc	r13, r14
      ae:	e1 08       	sbc	r14, r1
      b0:	e4 08       	sbc	r14, r4
      b2:	ef 08       	sbc	r14, r15
      b4:	fa 08       	sbc	r15, r10
      b6:	02 09       	sbc	r16, r2
      b8:	fd 08       	sbc	r15, r13
      ba:	00 09       	sbc	r16, r0
      bc:	8b 12       	cpse	r8, r27
      be:	ab 12       	cpse	r10, r27
      c0:	cb 12       	cpse	r12, r27
      c2:	eb 12       	cpse	r14, r27
      c4:	0b 13       	cpse	r16, r27
      c6:	2b 13       	cpse	r18, r27
      c8:	4b 13       	cpse	r20, r27
      ca:	6b 13       	cpse	r22, r27
      cc:	8b 13       	cpse	r24, r27
      ce:	ab 13       	cpse	r26, r27
      d0:	cb 13       	cpse	r28, r27
      d2:	eb 13       	cpse	r30, r27
      d4:	08 4a       	sbci	r16, 0xA8	; 168
      d6:	d7 3b       	cpi	r29, 0xB7	; 183
      d8:	3b ce       	rjmp	.-906    	; 0xfffffd50 <__eeprom_end+0xff7efd50>
      da:	01 6e       	ori	r16, 0xE1	; 225
      dc:	84 bc       	out	0x24, r8	; 36
      de:	bf fd       	.word	0xfdbf	; ????
      e0:	c1 2f       	mov	r28, r17
      e2:	3d 6c       	ori	r19, 0xCD	; 205
      e4:	74 31       	cpi	r23, 0x14	; 20
      e6:	9a bd       	out	0x2a, r25	; 42
      e8:	56 83       	std	Z+6, r21	; 0x06
      ea:	3d da       	rcall	.-2950   	; 0xfffff566 <__eeprom_end+0xff7ef566>
      ec:	3d 00       	.word	0x003d	; ????
      ee:	c7 7f       	andi	r28, 0xF7	; 247
      f0:	11 be       	out	0x31, r1	; 49
      f2:	d9 e4       	ldi	r29, 0x49	; 73
      f4:	bb 4c       	sbci	r27, 0xCB	; 203
      f6:	3e 91       	ld	r19, -X
      f8:	6b aa       	std	Y+51, r6	; 0x33
      fa:	aa be       	out	0x3a, r10	; 58
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 00       	.word	0x003f	; ????

00000120 <__trampolines_end>:
     120:	00 01       	movw	r0, r0
     122:	00 00       	nop
     124:	b7 01       	movw	r22, r14
     126:	12 00       	.word	0x0012	; ????
     128:	02 00       	.word	0x0002	; ????
     12a:	00 74       	andi	r16, 0x40	; 64
     12c:	01 43       	sbci	r16, 0x31	; 49
     12e:	00 03       	mulsu	r16, r16
     130:	00 00       	nop
     132:	70 01       	movw	r14, r0
     134:	04 01       	movw	r0, r8
     136:	03 09       	sbc	r16, r3
     138:	04 5c       	subi	r16, 0xC4	; 196
     13a:	01 12       	cpse	r0, r17
     13c:	02 03       	mulsu	r16, r18
     13e:	09 04       	cpc	r0, r9
     140:	54 01       	movw	r10, r8
     142:	06 03       	mulsu	r16, r22
     144:	03 09       	sbc	r16, r3
     146:	04 4a       	sbci	r16, 0xA4	; 164
     148:	01 08       	sbc	r0, r1

0000014a <string3>:
     14a:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000154 <string2>:
     154:	06 03 4d 00 32 00 00 00                             ..M.2...

0000015c <string1>:
     15c:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     16c:	65 00 00 00                                         e...

00000170 <string0>:
     170:	04 03 09 04                                         ....

00000174 <config1_descriptor>:
     174:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     184:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     194:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1a4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1b4:	40 00 00                                            @..

000001b7 <device_descriptor>:
     1b7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1c7:	03 01                                               ..

000001c9 <endpoint_config_table>:
     1c9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	da e0       	ldi	r29, 0x0A	; 10
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	e4 e6       	ldi	r30, 0x64	; 100
     1e8:	ff e2       	ldi	r31, 0x2F	; 47
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a4 35       	cpi	r26, 0x54	; 84
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	a4 e5       	ldi	r26, 0x54	; 84
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	aa 3d       	cpi	r26, 0xDA	; 218
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 8e 08 	call	0x111c	; 0x111c <main>
     20a:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(void) {
     212:	0f 93       	push	r16
     214:	1f 93       	push	r17
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
/************************************************************
Initialization of Pins and System Clock
************************************************************/

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     21a:	e1 e6       	ldi	r30, 0x61	; 97
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 e8       	ldi	r24, 0x80	; 128
     220:	80 83       	st	Z, r24
     222:	10 82       	st	Z, r1

	// Dissable JTAG
	m_disableJTAG(); // turn off JTAG port and allow access to F4-F7 as GPIO
     224:	85 bf       	out	0x35, r24	; 53
     226:	85 bf       	out	0x35, r24	; 53
	
	//Set to Input
	clear(DDRD,0); // D0
     228:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     22a:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     22c:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     22e:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     230:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     232:	23 9a       	sbi	0x04, 3	; 4
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     234:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     236:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     238:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     23a:	2b 98       	cbi	0x05, 3	; 5

/************************************************************
Setup Subsystems
************************************************************/

	m_bus_init();
     23c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <m_bus_init>
	while(!m_wii_open());
     240:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <m_wii_open>
     244:	88 23       	and	r24, r24
     246:	e1 f3       	breq	.-8      	; 0x240 <initialize_robockey+0x2e>
	sei();
     248:	78 94       	sei
	m_usb_init();
     24a:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <m_usb_init>
	while(!m_rf_open(CHANNEL,RXADDRESS_1,PACKET_LENGTH)); // Configure mRF
     24e:	4a e0       	ldi	r20, 0x0A	; 10
     250:	60 e2       	ldi	r22, 0x20	; 32
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <m_rf_open>
     258:	88 23       	and	r24, r24
     25a:	c9 f3       	breq	.-14     	; 0x24e <initialize_robockey+0x3c>
/************************************************************
Timer1 Initialization for PWM Motor Control
************************************************************/

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     25c:	e1 e8       	ldi	r30, 0x81	; 129
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	8b 7f       	andi	r24, 0xFB	; 251
     264:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     266:	80 81       	ld	r24, Z
     268:	8d 7f       	andi	r24, 0xFD	; 253
     26a:	80 83       	st	Z, r24
	clear(TCCR1B,CS10);
     26c:	80 81       	ld	r24, Z
     26e:	8e 7f       	andi	r24, 0xFE	; 254
     270:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     272:	80 81       	ld	r24, Z
     274:	8f 7e       	andi	r24, 0xEF	; 239
     276:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     278:	80 81       	ld	r24, Z
     27a:	88 60       	ori	r24, 0x08	; 8
     27c:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     27e:	e0 e8       	ldi	r30, 0x80	; 128
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	8d 7f       	andi	r24, 0xFD	; 253
     286:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     288:	80 81       	ld	r24, Z
     28a:	8e 7f       	andi	r24, 0xFE	; 254
     28c:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     28e:	80 81       	ld	r24, Z
     290:	8f 7d       	andi	r24, 0xDF	; 223
     292:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     294:	80 81       	ld	r24, Z
     296:	8f 7e       	andi	r24, 0xEF	; 239
     298:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     29a:	08 e8       	ldi	r16, 0x88	; 136
     29c:	10 e0       	ldi	r17, 0x00	; 0
     29e:	c0 e8       	ldi	r28, 0x80	; 128
     2a0:	de e3       	ldi	r29, 0x3E	; 62
     2a2:	f8 01       	movw	r30, r16
     2a4:	d1 83       	std	Z+1, r29	; 0x01
     2a6:	c0 83       	st	Z, r28
	OCR1B = (float)OCR1A*0.1;
     2a8:	60 81       	ld	r22, Z
     2aa:	71 81       	ldd	r23, Z+1	; 0x01
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__floatunsisf>
     2b4:	2d ec       	ldi	r18, 0xCD	; 205
     2b6:	3c ec       	ldi	r19, 0xCC	; 204
     2b8:	4c ec       	ldi	r20, 0xCC	; 204
     2ba:	5d e3       	ldi	r21, 0x3D	; 61
     2bc:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     2c0:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__fixunssfsi>
     2c4:	70 93 8b 00 	sts	0x008B, r23
     2c8:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     2cc:	f8 01       	movw	r30, r16
     2ce:	60 81       	ld	r22, Z
     2d0:	71 81       	ldd	r23, Z+1	; 0x01
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__floatunsisf>
     2da:	2d ec       	ldi	r18, 0xCD	; 205
     2dc:	3c ec       	ldi	r19, 0xCC	; 204
     2de:	4c ec       	ldi	r20, 0xCC	; 204
     2e0:	5d e3       	ldi	r21, 0x3D	; 61
     2e2:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     2e6:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__fixunssfsi>
     2ea:	70 93 8d 00 	sts	0x008D, r23
     2ee:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     2f2:	ef e6       	ldi	r30, 0x6F	; 111
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	82 60       	ori	r24, 0x02	; 2
     2fa:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     2fc:	80 81       	ld	r24, Z
     2fe:	84 60       	ori	r24, 0x04	; 4
     300:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     302:	80 81       	ld	r24, Z
     304:	88 60       	ori	r24, 0x08	; 8
     306:	80 83       	st	Z, r24

/************************************************************
Timer3 Initialization for fixed timestep calculations
************************************************************/

	clear(TCCR3B,CS32); // prescale /1
     308:	e1 e9       	ldi	r30, 0x91	; 145
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	8b 7f       	andi	r24, 0xFB	; 251
     310:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     312:	80 81       	ld	r24, Z
     314:	8d 7f       	andi	r24, 0xFD	; 253
     316:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     318:	80 81       	ld	r24, Z
     31a:	81 60       	ori	r24, 0x01	; 1
     31c:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     31e:	80 81       	ld	r24, Z
     320:	8f 7e       	andi	r24, 0xEF	; 239
     322:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     324:	80 81       	ld	r24, Z
     326:	88 60       	ori	r24, 0x08	; 8
     328:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     32a:	e0 e9       	ldi	r30, 0x90	; 144
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	8d 7f       	andi	r24, 0xFD	; 253
     332:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     334:	80 81       	ld	r24, Z
     336:	8e 7f       	andi	r24, 0xFE	; 254
     338:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     33a:	d0 93 99 00 	sts	0x0099, r29
     33e:	c0 93 98 00 	sts	0x0098, r28

/************************************************************
Setup ADC
************************************************************/
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
     342:	cc e7       	ldi	r28, 0x7C	; 124
     344:	d0 e0       	ldi	r29, 0x00	; 0
     346:	88 81       	ld	r24, Y
     348:	8f 77       	andi	r24, 0x7F	; 127
     34a:	88 83       	st	Y, r24
	set(ADMUX,REFS0);
     34c:	88 81       	ld	r24, Y
     34e:	80 64       	ori	r24, 0x40	; 64
     350:	88 83       	st	Y, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
     352:	ea e7       	ldi	r30, 0x7A	; 122
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	8b 7f       	andi	r24, 0xFB	; 251
     35a:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     35c:	80 81       	ld	r24, Z
     35e:	82 60       	ori	r24, 0x02	; 2
     360:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     362:	80 81       	ld	r24, Z
     364:	81 60       	ori	r24, 0x01	; 1
     366:	80 83       	st	Z, r24
	
	// Disable Digital input to:
	set(DIDR0,ADC0D); // ADC0
     368:	ae e7       	ldi	r26, 0x7E	; 126
     36a:	b0 e0       	ldi	r27, 0x00	; 0
     36c:	8c 91       	ld	r24, X
     36e:	81 60       	ori	r24, 0x01	; 1
     370:	8c 93       	st	X, r24
	set(DIDR0,ADC1D); // ADC1
     372:	8c 91       	ld	r24, X
     374:	82 60       	ori	r24, 0x02	; 2
     376:	8c 93       	st	X, r24
	set(DIDR0,ADC4D); // ADC4
     378:	8c 91       	ld	r24, X
     37a:	80 61       	ori	r24, 0x10	; 16
     37c:	8c 93       	st	X, r24
	set(DIDR0,ADC5D); // ADC5
     37e:	8c 91       	ld	r24, X
     380:	80 62       	ori	r24, 0x20	; 32
     382:	8c 93       	st	X, r24
	set(DIDR0,ADC6D); // ADC6
     384:	8c 91       	ld	r24, X
     386:	80 64       	ori	r24, 0x40	; 64
     388:	8c 93       	st	X, r24
	set(DIDR0,ADC7D); // ADC7
     38a:	8c 91       	ld	r24, X
     38c:	80 68       	ori	r24, 0x80	; 128
     38e:	8c 93       	st	X, r24
	set(DIDR2,ADC8D); // ADC8
     390:	ad e7       	ldi	r26, 0x7D	; 125
     392:	b0 e0       	ldi	r27, 0x00	; 0
     394:	8c 91       	ld	r24, X
     396:	81 60       	ori	r24, 0x01	; 1
     398:	8c 93       	st	X, r24
	set(DIDR2,ADC9D); // ADC9
     39a:	8c 91       	ld	r24, X
     39c:	82 60       	ori	r24, 0x02	; 2
     39e:	8c 93       	st	X, r24
	set(DIDR2,ADC10D); // ADC10
     3a0:	8c 91       	ld	r24, X
     3a2:	84 60       	ori	r24, 0x04	; 4
     3a4:	8c 93       	st	X, r24
	set(DIDR2,ADC11D); // ADC11
     3a6:	8c 91       	ld	r24, X
     3a8:	88 60       	ori	r24, 0x08	; 8
     3aa:	8c 93       	st	X, r24
	set(DIDR2,ADC12D); // ADC812
     3ac:	8c 91       	ld	r24, X
     3ae:	80 61       	ori	r24, 0x10	; 16
     3b0:	8c 93       	st	X, r24
	set(DIDR2,ADC13D); // ADC13
     3b2:	8c 91       	ld	r24, X
     3b4:	80 62       	ori	r24, 0x20	; 32
     3b6:	8c 93       	st	X, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
     3b8:	80 81       	ld	r24, Z
     3ba:	8f 7d       	andi	r24, 0xDF	; 223
     3bc:	80 83       	st	Z, r24
	
	set(ADCSRB,MUX5); // Select ADC13 at pin B6
     3be:	ab e7       	ldi	r26, 0x7B	; 123
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	8c 91       	ld	r24, X
     3c4:	80 62       	ori	r24, 0x20	; 32
     3c6:	8c 93       	st	X, r24
	set(ADMUX,MUX2); // Transistor 4
     3c8:	88 81       	ld	r24, Y
     3ca:	84 60       	ori	r24, 0x04	; 4
     3cc:	88 83       	st	Y, r24
	clear(ADMUX,MUX1);
     3ce:	88 81       	ld	r24, Y
     3d0:	8d 7f       	andi	r24, 0xFD	; 253
     3d2:	88 83       	st	Y, r24
	set(ADMUX,MUX0);
     3d4:	88 81       	ld	r24, Y
     3d6:	81 60       	ori	r24, 0x01	; 1
     3d8:	88 83       	st	Y, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
     3da:	80 81       	ld	r24, Z
     3dc:	80 68       	ori	r24, 0x80	; 128
     3de:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
     3e0:	80 81       	ld	r24, Z
     3e2:	80 64       	ori	r24, 0x40	; 64
     3e4:	80 83       	st	Z, r24
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	08 95       	ret

000003f0 <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     3f0:	82 30       	cpi	r24, 0x02	; 2
     3f2:	91 05       	cpc	r25, r1
     3f4:	f9 f0       	breq	.+62     	; 0x434 <distIndex+0x44>
     3f6:	2c f4       	brge	.+10     	; 0x402 <distIndex+0x12>
     3f8:	00 97       	sbiw	r24, 0x00	; 0
     3fa:	51 f0       	breq	.+20     	; 0x410 <distIndex+0x20>
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	89 f0       	breq	.+34     	; 0x422 <distIndex+0x32>
     400:	42 c0       	rjmp	.+132    	; 0x486 <distIndex+0x96>
     402:	84 30       	cpi	r24, 0x04	; 4
     404:	91 05       	cpc	r25, r1
     406:	51 f1       	breq	.+84     	; 0x45c <distIndex+0x6c>
     408:	f4 f0       	brlt	.+60     	; 0x446 <distIndex+0x56>
     40a:	05 97       	sbiw	r24, 0x05	; 5
     40c:	91 f1       	breq	.+100    	; 0x472 <distIndex+0x82>
     40e:	3b c0       	rjmp	.+118    	; 0x486 <distIndex+0x96>
	{
		case 0 : 
			pointsUsed[0] = 0;
     410:	e4 e5       	ldi	r30, 0x54	; 84
     412:	f1 e0       	ldi	r31, 0x01	; 1
     414:	11 82       	std	Z+1, r1	; 0x01
     416:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	93 83       	std	Z+3, r25	; 0x03
     41e:	82 83       	std	Z+2, r24	; 0x02
			break;
     420:	32 c0       	rjmp	.+100    	; 0x486 <distIndex+0x96>
			
		case 1 : 
			pointsUsed[0] = 0;
     422:	e4 e5       	ldi	r30, 0x54	; 84
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	11 82       	std	Z+1, r1	; 0x01
     428:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     42a:	82 e0       	ldi	r24, 0x02	; 2
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	93 83       	std	Z+3, r25	; 0x03
     430:	82 83       	std	Z+2, r24	; 0x02
			break;
     432:	29 c0       	rjmp	.+82     	; 0x486 <distIndex+0x96>
			
		case 2 : 
			pointsUsed[0] = 0;
     434:	e4 e5       	ldi	r30, 0x54	; 84
     436:	f1 e0       	ldi	r31, 0x01	; 1
     438:	11 82       	std	Z+1, r1	; 0x01
     43a:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     43c:	83 e0       	ldi	r24, 0x03	; 3
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	93 83       	std	Z+3, r25	; 0x03
     442:	82 83       	std	Z+2, r24	; 0x02
			break;
     444:	20 c0       	rjmp	.+64     	; 0x486 <distIndex+0x96>
			
		case 3 : 
			pointsUsed[0] = 1;
     446:	e4 e5       	ldi	r30, 0x54	; 84
     448:	f1 e0       	ldi	r31, 0x01	; 1
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	91 83       	std	Z+1, r25	; 0x01
     450:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	93 83       	std	Z+3, r25	; 0x03
     458:	82 83       	std	Z+2, r24	; 0x02
			break;
     45a:	15 c0       	rjmp	.+42     	; 0x486 <distIndex+0x96>
			
		case 4 : 
			pointsUsed[0] = 1;
     45c:	e4 e5       	ldi	r30, 0x54	; 84
     45e:	f1 e0       	ldi	r31, 0x01	; 1
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	91 83       	std	Z+1, r25	; 0x01
     466:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	93 83       	std	Z+3, r25	; 0x03
     46e:	82 83       	std	Z+2, r24	; 0x02
			break;
     470:	0a c0       	rjmp	.+20     	; 0x486 <distIndex+0x96>
			
		case 5 :
			pointsUsed[0] = 2;
     472:	e4 e5       	ldi	r30, 0x54	; 84
     474:	f1 e0       	ldi	r31, 0x01	; 1
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     47e:	83 e0       	ldi	r24, 0x03	; 3
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	93 83       	std	Z+3, r25	; 0x03
     484:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     486:	84 e5       	ldi	r24, 0x54	; 84
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	08 95       	ret

0000048c <orientationCalculationFour>:


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
     48c:	2f 92       	push	r2
     48e:	3f 92       	push	r3
     490:	4f 92       	push	r4
     492:	5f 92       	push	r5
     494:	6f 92       	push	r6
     496:	7f 92       	push	r7
     498:	8f 92       	push	r8
     49a:	9f 92       	push	r9
     49c:	af 92       	push	r10
     49e:	bf 92       	push	r11
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <orientationCalculationFour+0x26>
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <orientationCalculationFour+0x28>
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	5c 01       	movw	r10, r24
     4ba:	4a 01       	movw	r8, r20
     4bc:	3a 83       	std	Y+2, r19	; 0x02
     4be:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     4c0:	06 2f       	mov	r16, r22
     4c2:	17 2f       	mov	r17, r23
     4c4:	f8 01       	movw	r30, r16
     4c6:	41 90       	ld	r4, Z+
     4c8:	51 90       	ld	r5, Z+
     4ca:	61 90       	ld	r6, Z+
     4cc:	71 90       	ld	r7, Z+
     4ce:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     4d0:	1c 82       	std	Y+4, r1	; 0x04
     4d2:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     4d4:	21 2c       	mov	r2, r1
     4d6:	31 2c       	mov	r3, r1
     4d8:	12 c0       	rjmp	.+36     	; 0x4fe <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     4da:	f8 01       	movw	r30, r16
     4dc:	c1 90       	ld	r12, Z+
     4de:	d1 90       	ld	r13, Z+
     4e0:	e1 90       	ld	r14, Z+
     4e2:	f1 90       	ld	r15, Z+
     4e4:	8f 01       	movw	r16, r30
     4e6:	a7 01       	movw	r20, r14
     4e8:	96 01       	movw	r18, r12
     4ea:	c3 01       	movw	r24, r6
     4ec:	b2 01       	movw	r22, r4
     4ee:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__gesf2>
     4f2:	18 16       	cp	r1, r24
     4f4:	24 f4       	brge	.+8      	; 0x4fe <orientationCalculationFour+0x72>
     4f6:	26 01       	movw	r4, r12
     4f8:	37 01       	movw	r6, r14
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     4fa:	2b 80       	ldd	r2, Y+3	; 0x03
     4fc:	3c 80       	ldd	r3, Y+4	; 0x04
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	9c 81       	ldd	r25, Y+4	; 0x04
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	9c 83       	std	Y+4, r25	; 0x04
     506:	8b 83       	std	Y+3, r24	; 0x03
     508:	06 97       	sbiw	r24, 0x06	; 6
     50a:	39 f7       	brne	.-50     	; 0x4da <orientationCalculationFour+0x4e>
		}
	}
	
	//Find points used by shortest length	
	int* pointsShortRef;
	pointsShortRef = distIndex(indexMin);	
     50c:	82 2d       	mov	r24, r2
     50e:	93 2d       	mov	r25, r3
     510:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <distIndex>
	int pointsShort[2] = {pointsShortRef[0], pointsShortRef[1]};	
     514:	fc 01       	movw	r30, r24
     516:	20 81       	ld	r18, Z
     518:	31 81       	ldd	r19, Z+1	; 0x01
     51a:	62 81       	ldd	r22, Z+2	; 0x02
     51c:	73 81       	ldd	r23, Z+3	; 0x03
	if (pointsShort[0] == pointsLong[0]){
     51e:	f5 01       	movw	r30, r10
     520:	40 81       	ld	r20, Z
     522:	51 81       	ldd	r21, Z+1	; 0x01
     524:	24 17       	cp	r18, r20
     526:	35 07       	cpc	r19, r21
     528:	59 f4       	brne	.+22     	; 0x540 <orientationCalculationFour+0xb4>
		*top = pointsLong[0];
     52a:	f4 01       	movw	r30, r8
     52c:	31 83       	std	Z+1, r19	; 0x01
     52e:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     530:	f5 01       	movw	r30, r10
     532:	82 81       	ldd	r24, Z+2	; 0x02
     534:	93 81       	ldd	r25, Z+3	; 0x03
     536:	e9 81       	ldd	r30, Y+1	; 0x01
     538:	fa 81       	ldd	r31, Y+2	; 0x02
     53a:	91 83       	std	Z+1, r25	; 0x01
     53c:	80 83       	st	Z, r24
     53e:	37 c0       	rjmp	.+110    	; 0x5ae <orientationCalculationFour+0x122>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     540:	f5 01       	movw	r30, r10
     542:	82 81       	ldd	r24, Z+2	; 0x02
     544:	93 81       	ldd	r25, Z+3	; 0x03
     546:	28 17       	cp	r18, r24
     548:	39 07       	cpc	r19, r25
     54a:	59 f4       	brne	.+22     	; 0x562 <orientationCalculationFour+0xd6>
			*top = pointsLong[1];
     54c:	f4 01       	movw	r30, r8
     54e:	31 83       	std	Z+1, r19	; 0x01
     550:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     552:	f5 01       	movw	r30, r10
     554:	80 81       	ld	r24, Z
     556:	91 81       	ldd	r25, Z+1	; 0x01
     558:	e9 81       	ldd	r30, Y+1	; 0x01
     55a:	fa 81       	ldd	r31, Y+2	; 0x02
     55c:	91 83       	std	Z+1, r25	; 0x01
     55e:	80 83       	st	Z, r24
     560:	26 c0       	rjmp	.+76     	; 0x5ae <orientationCalculationFour+0x122>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     562:	64 17       	cp	r22, r20
     564:	75 07       	cpc	r23, r21
     566:	59 f4       	brne	.+22     	; 0x57e <orientationCalculationFour+0xf2>
				*top = pointsLong[0];
     568:	f4 01       	movw	r30, r8
     56a:	71 83       	std	Z+1, r23	; 0x01
     56c:	60 83       	st	Z, r22
				*bottom = pointsLong[1];
     56e:	f5 01       	movw	r30, r10
     570:	82 81       	ldd	r24, Z+2	; 0x02
     572:	93 81       	ldd	r25, Z+3	; 0x03
     574:	e9 81       	ldd	r30, Y+1	; 0x01
     576:	fa 81       	ldd	r31, Y+2	; 0x02
     578:	91 83       	std	Z+1, r25	; 0x01
     57a:	80 83       	st	Z, r24
     57c:	18 c0       	rjmp	.+48     	; 0x5ae <orientationCalculationFour+0x122>
			} else {
				if (pointsShort[1] == pointsLong[1])
     57e:	68 17       	cp	r22, r24
     580:	79 07       	cpc	r23, r25
     582:	59 f4       	brne	.+22     	; 0x59a <orientationCalculationFour+0x10e>
				{
					*top = pointsLong[1];
     584:	f4 01       	movw	r30, r8
     586:	71 83       	std	Z+1, r23	; 0x01
     588:	60 83       	st	Z, r22
					*bottom = pointsLong[0];
     58a:	f5 01       	movw	r30, r10
     58c:	80 81       	ld	r24, Z
     58e:	91 81       	ldd	r25, Z+1	; 0x01
     590:	e9 81       	ldd	r30, Y+1	; 0x01
     592:	fa 81       	ldd	r31, Y+2	; 0x02
     594:	91 83       	std	Z+1, r25	; 0x01
     596:	80 83       	st	Z, r24
     598:	0a c0       	rjmp	.+20     	; 0x5ae <orientationCalculationFour+0x122>
				} else {
						*top = pointsLong[1];
     59a:	f4 01       	movw	r30, r8
     59c:	91 83       	std	Z+1, r25	; 0x01
     59e:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     5a0:	f5 01       	movw	r30, r10
     5a2:	80 81       	ld	r24, Z
     5a4:	91 81       	ldd	r25, Z+1	; 0x01
     5a6:	e9 81       	ldd	r30, Y+1	; 0x01
     5a8:	fa 81       	ldd	r31, Y+2	; 0x02
     5aa:	91 83       	std	Z+1, r25	; 0x01
     5ac:	80 83       	st	Z, r24
				}
			}
		}
	}
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	9f 90       	pop	r9
     5cc:	8f 90       	pop	r8
     5ce:	7f 90       	pop	r7
     5d0:	6f 90       	pop	r6
     5d2:	5f 90       	pop	r5
     5d4:	4f 90       	pop	r4
     5d6:	3f 90       	pop	r3
     5d8:	2f 90       	pop	r2
     5da:	08 95       	ret

000005dc <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     5dc:	2f 92       	push	r2
     5de:	3f 92       	push	r3
     5e0:	4f 92       	push	r4
     5e2:	5f 92       	push	r5
     5e4:	6f 92       	push	r6
     5e6:	7f 92       	push	r7
     5e8:	8f 92       	push	r8
     5ea:	9f 92       	push	r9
     5ec:	af 92       	push	r10
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	c2 54       	subi	r28, 0x42	; 66
     606:	d1 09       	sbc	r29, r1
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     614:	fc 01       	movw	r30, r24
     616:	04 80       	ldd	r0, Z+4	; 0x04
     618:	f5 81       	ldd	r31, Z+5	; 0x05
     61a:	e0 2d       	mov	r30, r0
     61c:	fa a3       	std	Y+34, r31	; 0x22
     61e:	e9 a3       	std	Y+33, r30	; 0x21
     620:	fc 01       	movw	r30, r24
     622:	00 81       	ld	r16, Z
     624:	11 81       	ldd	r17, Z+1	; 0x01
     626:	69 a1       	ldd	r22, Y+33	; 0x21
     628:	7a a1       	ldd	r23, Y+34	; 0x22
     62a:	60 1b       	sub	r22, r16
     62c:	71 0b       	sbc	r23, r17
     62e:	07 2e       	mov	r0, r23
     630:	00 0c       	add	r0, r0
     632:	88 0b       	sbc	r24, r24
     634:	99 0b       	sbc	r25, r25
     636:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     63a:	6b 01       	movw	r12, r22
     63c:	7c 01       	movw	r14, r24
     63e:	f2 01       	movw	r30, r4
     640:	06 80       	ldd	r0, Z+6	; 0x06
     642:	f7 81       	ldd	r31, Z+7	; 0x07
     644:	e0 2d       	mov	r30, r0
     646:	fe a3       	std	Y+38, r31	; 0x26
     648:	ed a3       	std	Y+37, r30	; 0x25
     64a:	f2 01       	movw	r30, r4
     64c:	22 80       	ldd	r2, Z+2	; 0x02
     64e:	33 80       	ldd	r3, Z+3	; 0x03
     650:	ad a0       	ldd	r10, Y+37	; 0x25
     652:	be a0       	ldd	r11, Y+38	; 0x26
     654:	a2 18       	sub	r10, r2
     656:	b3 08       	sbc	r11, r3
     658:	9b 01       	movw	r18, r22
     65a:	ac 01       	movw	r20, r24
     65c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     660:	69 a7       	std	Y+41, r22	; 0x29
     662:	7a a7       	std	Y+42, r23	; 0x2a
     664:	8b a7       	std	Y+43, r24	; 0x2b
     666:	9c a7       	std	Y+44, r25	; 0x2c
     668:	aa 9c       	mul	r10, r10
     66a:	40 01       	movw	r8, r0
     66c:	ab 9c       	mul	r10, r11
     66e:	90 0c       	add	r9, r0
     670:	90 0c       	add	r9, r0
     672:	11 24       	eor	r1, r1
     674:	09 2c       	mov	r0, r9
     676:	00 0c       	add	r0, r0
     678:	aa 08       	sbc	r10, r10
     67a:	bb 08       	sbc	r11, r11
     67c:	a7 01       	movw	r20, r14
     67e:	96 01       	movw	r18, r12
     680:	c7 01       	movw	r24, r14
     682:	b6 01       	movw	r22, r12
     684:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     688:	6b 01       	movw	r12, r22
     68a:	7c 01       	movw	r14, r24
     68c:	c5 01       	movw	r24, r10
     68e:	b4 01       	movw	r22, r8
     690:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     694:	9b 01       	movw	r18, r22
     696:	ac 01       	movw	r20, r24
     698:	c7 01       	movw	r24, r14
     69a:	b6 01       	movw	r22, r12
     69c:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
     6a0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <sqrt>
     6a4:	6b af       	std	Y+59, r22	; 0x3b
     6a6:	7c af       	std	Y+60, r23	; 0x3c
     6a8:	8d af       	std	Y+61, r24	; 0x3d
     6aa:	9e af       	std	Y+62, r25	; 0x3e
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     6ac:	f2 01       	movw	r30, r4
     6ae:	00 84       	ldd	r0, Z+8	; 0x08
     6b0:	f1 85       	ldd	r31, Z+9	; 0x09
     6b2:	e0 2d       	mov	r30, r0
     6b4:	fa a7       	std	Y+42, r31	; 0x2a
     6b6:	e9 a7       	std	Y+41, r30	; 0x29
     6b8:	bf 01       	movw	r22, r30
     6ba:	60 1b       	sub	r22, r16
     6bc:	71 0b       	sbc	r23, r17
     6be:	07 2e       	mov	r0, r23
     6c0:	00 0c       	add	r0, r0
     6c2:	88 0b       	sbc	r24, r24
     6c4:	99 0b       	sbc	r25, r25
     6c6:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     6ca:	6b 01       	movw	r12, r22
     6cc:	7c 01       	movw	r14, r24
     6ce:	f2 01       	movw	r30, r4
     6d0:	62 84       	ldd	r6, Z+10	; 0x0a
     6d2:	73 84       	ldd	r7, Z+11	; 0x0b
     6d4:	53 01       	movw	r10, r6
     6d6:	a2 18       	sub	r10, r2
     6d8:	b3 08       	sbc	r11, r3
     6da:	9b 01       	movw	r18, r22
     6dc:	ac 01       	movw	r20, r24
     6de:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     6e2:	6d a7       	std	Y+45, r22	; 0x2d
     6e4:	7e a7       	std	Y+46, r23	; 0x2e
     6e6:	8f a7       	std	Y+47, r24	; 0x2f
     6e8:	98 ab       	std	Y+48, r25	; 0x30
     6ea:	aa 9c       	mul	r10, r10
     6ec:	40 01       	movw	r8, r0
     6ee:	ab 9c       	mul	r10, r11
     6f0:	90 0c       	add	r9, r0
     6f2:	90 0c       	add	r9, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	09 2c       	mov	r0, r9
     6f8:	00 0c       	add	r0, r0
     6fa:	aa 08       	sbc	r10, r10
     6fc:	bb 08       	sbc	r11, r11
     6fe:	a7 01       	movw	r20, r14
     700:	96 01       	movw	r18, r12
     702:	c7 01       	movw	r24, r14
     704:	b6 01       	movw	r22, r12
     706:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     70a:	6b 01       	movw	r12, r22
     70c:	7c 01       	movw	r14, r24
     70e:	c5 01       	movw	r24, r10
     710:	b4 01       	movw	r22, r8
     712:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     716:	9b 01       	movw	r18, r22
     718:	ac 01       	movw	r20, r24
     71a:	c7 01       	movw	r24, r14
     71c:	b6 01       	movw	r22, r12
     71e:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
     722:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <sqrt>
     726:	23 96       	adiw	r28, 0x03	; 3
     728:	6c af       	std	Y+60, r22	; 0x3c
     72a:	7d af       	std	Y+61, r23	; 0x3d
     72c:	8e af       	std	Y+62, r24	; 0x3e
     72e:	9f af       	std	Y+63, r25	; 0x3f
     730:	23 97       	sbiw	r28, 0x03	; 3
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     732:	f2 01       	movw	r30, r4
     734:	04 84       	ldd	r0, Z+12	; 0x0c
     736:	f5 85       	ldd	r31, Z+13	; 0x0d
     738:	e0 2d       	mov	r30, r0
     73a:	fe a7       	std	Y+46, r31	; 0x2e
     73c:	ed a7       	std	Y+45, r30	; 0x2d
     73e:	bf 01       	movw	r22, r30
     740:	60 1b       	sub	r22, r16
     742:	71 0b       	sbc	r23, r17
     744:	07 2e       	mov	r0, r23
     746:	00 0c       	add	r0, r0
     748:	88 0b       	sbc	r24, r24
     74a:	99 0b       	sbc	r25, r25
     74c:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     750:	4b 01       	movw	r8, r22
     752:	5c 01       	movw	r10, r24
     754:	f2 01       	movw	r30, r4
     756:	06 84       	ldd	r0, Z+14	; 0x0e
     758:	f7 85       	ldd	r31, Z+15	; 0x0f
     75a:	e0 2d       	mov	r30, r0
     75c:	fa ab       	std	Y+50, r31	; 0x32
     75e:	e9 ab       	std	Y+49, r30	; 0x31
     760:	8f 01       	movw	r16, r30
     762:	02 19       	sub	r16, r2
     764:	13 09       	sbc	r17, r3
     766:	9b 01       	movw	r18, r22
     768:	ac 01       	movw	r20, r24
     76a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     76e:	6b ab       	std	Y+51, r22	; 0x33
     770:	7c ab       	std	Y+52, r23	; 0x34
     772:	8d ab       	std	Y+53, r24	; 0x35
     774:	9e ab       	std	Y+54, r25	; 0x36
     776:	00 9f       	mul	r16, r16
     778:	60 01       	movw	r12, r0
     77a:	01 9f       	mul	r16, r17
     77c:	d0 0c       	add	r13, r0
     77e:	d0 0c       	add	r13, r0
     780:	11 24       	eor	r1, r1
     782:	0d 2c       	mov	r0, r13
     784:	00 0c       	add	r0, r0
     786:	ee 08       	sbc	r14, r14
     788:	ff 08       	sbc	r15, r15
     78a:	a5 01       	movw	r20, r10
     78c:	94 01       	movw	r18, r8
     78e:	c5 01       	movw	r24, r10
     790:	b4 01       	movw	r22, r8
     792:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     796:	4b 01       	movw	r8, r22
     798:	5c 01       	movw	r10, r24
     79a:	c7 01       	movw	r24, r14
     79c:	b6 01       	movw	r22, r12
     79e:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     7a2:	9b 01       	movw	r18, r22
     7a4:	ac 01       	movw	r20, r24
     7a6:	c5 01       	movw	r24, r10
     7a8:	b4 01       	movw	r22, r8
     7aa:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
     7ae:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <sqrt>
     7b2:	6b ab       	std	Y+51, r22	; 0x33
     7b4:	7c ab       	std	Y+52, r23	; 0x34
     7b6:	8d ab       	std	Y+53, r24	; 0x35
     7b8:	9e ab       	std	Y+54, r25	; 0x36
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     7ba:	69 a5       	ldd	r22, Y+41	; 0x29
     7bc:	7a a5       	ldd	r23, Y+42	; 0x2a
     7be:	29 a1       	ldd	r18, Y+33	; 0x21
     7c0:	3a a1       	ldd	r19, Y+34	; 0x22
     7c2:	62 1b       	sub	r22, r18
     7c4:	73 0b       	sbc	r23, r19
     7c6:	07 2e       	mov	r0, r23
     7c8:	00 0c       	add	r0, r0
     7ca:	88 0b       	sbc	r24, r24
     7cc:	99 0b       	sbc	r25, r25
     7ce:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     7d2:	4b 01       	movw	r8, r22
     7d4:	5c 01       	movw	r10, r24
     7d6:	83 01       	movw	r16, r6
     7d8:	4d a1       	ldd	r20, Y+37	; 0x25
     7da:	5e a1       	ldd	r21, Y+38	; 0x26
     7dc:	04 1b       	sub	r16, r20
     7de:	15 0b       	sbc	r17, r21
     7e0:	9b 01       	movw	r18, r22
     7e2:	ac 01       	movw	r20, r24
     7e4:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     7e8:	6f ab       	std	Y+55, r22	; 0x37
     7ea:	78 af       	std	Y+56, r23	; 0x38
     7ec:	89 af       	std	Y+57, r24	; 0x39
     7ee:	9a af       	std	Y+58, r25	; 0x3a
     7f0:	00 9f       	mul	r16, r16
     7f2:	60 01       	movw	r12, r0
     7f4:	01 9f       	mul	r16, r17
     7f6:	d0 0c       	add	r13, r0
     7f8:	d0 0c       	add	r13, r0
     7fa:	11 24       	eor	r1, r1
     7fc:	0d 2c       	mov	r0, r13
     7fe:	00 0c       	add	r0, r0
     800:	ee 08       	sbc	r14, r14
     802:	ff 08       	sbc	r15, r15
     804:	a5 01       	movw	r20, r10
     806:	94 01       	movw	r18, r8
     808:	c5 01       	movw	r24, r10
     80a:	b4 01       	movw	r22, r8
     80c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     810:	4b 01       	movw	r8, r22
     812:	5c 01       	movw	r10, r24
     814:	c7 01       	movw	r24, r14
     816:	b6 01       	movw	r22, r12
     818:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     81c:	9b 01       	movw	r18, r22
     81e:	ac 01       	movw	r20, r24
     820:	c5 01       	movw	r24, r10
     822:	b4 01       	movw	r22, r8
     824:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
     828:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <sqrt>
     82c:	6f ab       	std	Y+55, r22	; 0x37
     82e:	78 af       	std	Y+56, r23	; 0x38
     830:	89 af       	std	Y+57, r24	; 0x39
     832:	9a af       	std	Y+58, r25	; 0x3a
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     834:	6d a5       	ldd	r22, Y+45	; 0x2d
     836:	7e a5       	ldd	r23, Y+46	; 0x2e
     838:	89 a1       	ldd	r24, Y+33	; 0x21
     83a:	9a a1       	ldd	r25, Y+34	; 0x22
     83c:	68 1b       	sub	r22, r24
     83e:	79 0b       	sbc	r23, r25
     840:	07 2e       	mov	r0, r23
     842:	00 0c       	add	r0, r0
     844:	88 0b       	sbc	r24, r24
     846:	99 0b       	sbc	r25, r25
     848:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     84c:	4b 01       	movw	r8, r22
     84e:	5c 01       	movw	r10, r24
     850:	09 a9       	ldd	r16, Y+49	; 0x31
     852:	1a a9       	ldd	r17, Y+50	; 0x32
     854:	ed a1       	ldd	r30, Y+37	; 0x25
     856:	fe a1       	ldd	r31, Y+38	; 0x26
     858:	0e 1b       	sub	r16, r30
     85a:	1f 0b       	sbc	r17, r31
     85c:	9b 01       	movw	r18, r22
     85e:	ac 01       	movw	r20, r24
     860:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     864:	69 a3       	std	Y+33, r22	; 0x21
     866:	7a a3       	std	Y+34, r23	; 0x22
     868:	8b a3       	std	Y+35, r24	; 0x23
     86a:	9c a3       	std	Y+36, r25	; 0x24
     86c:	00 9f       	mul	r16, r16
     86e:	60 01       	movw	r12, r0
     870:	01 9f       	mul	r16, r17
     872:	d0 0c       	add	r13, r0
     874:	d0 0c       	add	r13, r0
     876:	11 24       	eor	r1, r1
     878:	0d 2c       	mov	r0, r13
     87a:	00 0c       	add	r0, r0
     87c:	ee 08       	sbc	r14, r14
     87e:	ff 08       	sbc	r15, r15
     880:	a5 01       	movw	r20, r10
     882:	94 01       	movw	r18, r8
     884:	c5 01       	movw	r24, r10
     886:	b4 01       	movw	r22, r8
     888:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     88c:	4b 01       	movw	r8, r22
     88e:	5c 01       	movw	r10, r24
     890:	c7 01       	movw	r24, r14
     892:	b6 01       	movw	r22, r12
     894:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     898:	9b 01       	movw	r18, r22
     89a:	ac 01       	movw	r20, r24
     89c:	c5 01       	movw	r24, r10
     89e:	b4 01       	movw	r22, r8
     8a0:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
     8a4:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <sqrt>
     8a8:	4b 01       	movw	r8, r22
     8aa:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     8ac:	6d a5       	ldd	r22, Y+45	; 0x2d
     8ae:	7e a5       	ldd	r23, Y+46	; 0x2e
     8b0:	29 a5       	ldd	r18, Y+41	; 0x29
     8b2:	3a a5       	ldd	r19, Y+42	; 0x2a
     8b4:	62 1b       	sub	r22, r18
     8b6:	73 0b       	sbc	r23, r19
     8b8:	07 2e       	mov	r0, r23
     8ba:	00 0c       	add	r0, r0
     8bc:	88 0b       	sbc	r24, r24
     8be:	99 0b       	sbc	r25, r25
     8c0:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     8c4:	69 a3       	std	Y+33, r22	; 0x21
     8c6:	7a a3       	std	Y+34, r23	; 0x22
     8c8:	8b a3       	std	Y+35, r24	; 0x23
     8ca:	9c a3       	std	Y+36, r25	; 0x24
     8cc:	09 a9       	ldd	r16, Y+49	; 0x31
     8ce:	1a a9       	ldd	r17, Y+50	; 0x32
     8d0:	06 19       	sub	r16, r6
     8d2:	17 09       	sbc	r17, r7
     8d4:	9b 01       	movw	r18, r22
     8d6:	ac 01       	movw	r20, r24
     8d8:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     8dc:	6d a3       	std	Y+37, r22	; 0x25
     8de:	7e a3       	std	Y+38, r23	; 0x26
     8e0:	8f a3       	std	Y+39, r24	; 0x27
     8e2:	98 a7       	std	Y+40, r25	; 0x28
     8e4:	00 9f       	mul	r16, r16
     8e6:	60 01       	movw	r12, r0
     8e8:	01 9f       	mul	r16, r17
     8ea:	d0 0c       	add	r13, r0
     8ec:	d0 0c       	add	r13, r0
     8ee:	11 24       	eor	r1, r1
     8f0:	0d 2c       	mov	r0, r13
     8f2:	00 0c       	add	r0, r0
     8f4:	ee 08       	sbc	r14, r14
     8f6:	ff 08       	sbc	r15, r15
     8f8:	29 a1       	ldd	r18, Y+33	; 0x21
     8fa:	3a a1       	ldd	r19, Y+34	; 0x22
     8fc:	4b a1       	ldd	r20, Y+35	; 0x23
     8fe:	5c a1       	ldd	r21, Y+36	; 0x24
     900:	ca 01       	movw	r24, r20
     902:	b9 01       	movw	r22, r18
     904:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     908:	69 a3       	std	Y+33, r22	; 0x21
     90a:	7a a3       	std	Y+34, r23	; 0x22
     90c:	8b a3       	std	Y+35, r24	; 0x23
     90e:	9c a3       	std	Y+36, r25	; 0x24
     910:	c7 01       	movw	r24, r14
     912:	b6 01       	movw	r22, r12
     914:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     918:	9b 01       	movw	r18, r22
     91a:	ac 01       	movw	r20, r24
     91c:	69 a1       	ldd	r22, Y+33	; 0x21
     91e:	7a a1       	ldd	r23, Y+34	; 0x22
     920:	8b a1       	ldd	r24, Y+35	; 0x23
     922:	9c a1       	ldd	r25, Y+36	; 0x24
     924:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
     928:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     92c:	2b ad       	ldd	r18, Y+59	; 0x3b
     92e:	3c ad       	ldd	r19, Y+60	; 0x3c
     930:	4d ad       	ldd	r20, Y+61	; 0x3d
     932:	5e ad       	ldd	r21, Y+62	; 0x3e
     934:	29 83       	std	Y+1, r18	; 0x01
     936:	3a 83       	std	Y+2, r19	; 0x02
     938:	4b 83       	std	Y+3, r20	; 0x03
     93a:	5c 83       	std	Y+4, r21	; 0x04
     93c:	23 96       	adiw	r28, 0x03	; 3
     93e:	2c ad       	ldd	r18, Y+60	; 0x3c
     940:	3d ad       	ldd	r19, Y+61	; 0x3d
     942:	4e ad       	ldd	r20, Y+62	; 0x3e
     944:	5f ad       	ldd	r21, Y+63	; 0x3f
     946:	23 97       	sbiw	r28, 0x03	; 3
     948:	2d 83       	std	Y+5, r18	; 0x05
     94a:	3e 83       	std	Y+6, r19	; 0x06
     94c:	4f 83       	std	Y+7, r20	; 0x07
     94e:	58 87       	std	Y+8, r21	; 0x08
     950:	2b a9       	ldd	r18, Y+51	; 0x33
     952:	3c a9       	ldd	r19, Y+52	; 0x34
     954:	4d a9       	ldd	r20, Y+53	; 0x35
     956:	5e a9       	ldd	r21, Y+54	; 0x36
     958:	29 87       	std	Y+9, r18	; 0x09
     95a:	3a 87       	std	Y+10, r19	; 0x0a
     95c:	4b 87       	std	Y+11, r20	; 0x0b
     95e:	5c 87       	std	Y+12, r21	; 0x0c
     960:	2f a9       	ldd	r18, Y+55	; 0x37
     962:	38 ad       	ldd	r19, Y+56	; 0x38
     964:	49 ad       	ldd	r20, Y+57	; 0x39
     966:	5a ad       	ldd	r21, Y+58	; 0x3a
     968:	2d 87       	std	Y+13, r18	; 0x0d
     96a:	3e 87       	std	Y+14, r19	; 0x0e
     96c:	4f 87       	std	Y+15, r20	; 0x0f
     96e:	58 8b       	std	Y+16, r21	; 0x10
     970:	89 8a       	std	Y+17, r8	; 0x11
     972:	9a 8a       	std	Y+18, r9	; 0x12
     974:	ab 8a       	std	Y+19, r10	; 0x13
     976:	bc 8a       	std	Y+20, r11	; 0x14
     978:	6d 8b       	std	Y+21, r22	; 0x15
     97a:	7e 8b       	std	Y+22, r23	; 0x16
     97c:	8f 8b       	std	Y+23, r24	; 0x17
     97e:	98 8f       	std	Y+24, r25	; 0x18
     980:	ae 01       	movw	r20, r28
     982:	4f 5f       	subi	r20, 0xFF	; 255
     984:	5f 4f       	sbci	r21, 0xFF	; 255
     986:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     988:	00 e0       	ldi	r16, 0x00	; 0
     98a:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     98c:	61 2c       	mov	r6, r1
     98e:	71 2c       	mov	r7, r1
     990:	c1 2c       	mov	r12, r1
     992:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     994:	21 2c       	mov	r2, r1
     996:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     998:	f7 01       	movw	r30, r14
     99a:	81 90       	ld	r8, Z+
     99c:	91 90       	ld	r9, Z+
     99e:	a1 90       	ld	r10, Z+
     9a0:	b1 90       	ld	r11, Z+
     9a2:	7f 01       	movw	r14, r30
     9a4:	26 2d       	mov	r18, r6
     9a6:	37 2d       	mov	r19, r7
     9a8:	4c 2d       	mov	r20, r12
     9aa:	5d 2d       	mov	r21, r13
     9ac:	c5 01       	movw	r24, r10
     9ae:	b4 01       	movw	r22, r8
     9b0:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__gesf2>
     9b4:	18 16       	cp	r1, r24
     9b6:	34 f4       	brge	.+12     	; 0x9c4 <fourPointCalc+0x3e8>
			indexMax = i;
			maxVal = distVect[i];
     9b8:	68 2c       	mov	r6, r8
     9ba:	79 2c       	mov	r7, r9
     9bc:	ca 2c       	mov	r12, r10
     9be:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     9c0:	20 2e       	mov	r2, r16
     9c2:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     9c4:	0f 5f       	subi	r16, 0xFF	; 255
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
     9c8:	06 30       	cpi	r16, 0x06	; 6
     9ca:	11 05       	cpc	r17, r1
     9cc:	29 f7       	brne	.-54     	; 0x998 <fourPointCalc+0x3bc>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLongRef; 
	pointsLongRef = distIndex(indexMax);
     9ce:	82 2d       	mov	r24, r2
     9d0:	93 2d       	mov	r25, r3
     9d2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <distIndex>
	
	int pointsLong[2] = {(pointsLongRef[0]), (pointsLongRef[1])};
     9d6:	fc 01       	movw	r30, r24
     9d8:	e0 80       	ld	r14, Z
     9da:	f1 80       	ldd	r15, Z+1	; 0x01
     9dc:	fa 8e       	std	Y+26, r15	; 0x1a
     9de:	e9 8e       	std	Y+25, r14	; 0x19
     9e0:	02 81       	ldd	r16, Z+2	; 0x02
     9e2:	13 81       	ldd	r17, Z+3	; 0x03
     9e4:	1c 8f       	std	Y+28, r17	; 0x1c
     9e6:	0b 8f       	std	Y+27, r16	; 0x1b
	
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     9e8:	ee 0c       	add	r14, r14
     9ea:	ff 1c       	adc	r15, r15
     9ec:	ee 0c       	add	r14, r14
     9ee:	ff 1c       	adc	r15, r15
     9f0:	e4 0c       	add	r14, r4
     9f2:	f5 1c       	adc	r15, r5
     9f4:	00 0f       	add	r16, r16
     9f6:	11 1f       	adc	r17, r17
     9f8:	00 0f       	add	r16, r16
     9fa:	11 1f       	adc	r17, r17
     9fc:	04 0d       	add	r16, r4
     9fe:	15 1d       	adc	r17, r5
     a00:	f7 01       	movw	r30, r14
     a02:	60 81       	ld	r22, Z
     a04:	71 81       	ldd	r23, Z+1	; 0x01
     a06:	f8 01       	movw	r30, r16
     a08:	80 81       	ld	r24, Z
     a0a:	91 81       	ldd	r25, Z+1	; 0x01
     a0c:	68 0f       	add	r22, r24
     a0e:	79 1f       	adc	r23, r25
     a10:	77 23       	and	r23, r23
     a12:	14 f4       	brge	.+4      	; 0xa18 <fourPointCalc+0x43c>
     a14:	6f 5f       	subi	r22, 0xFF	; 255
     a16:	7f 4f       	sbci	r23, 0xFF	; 255
     a18:	75 95       	asr	r23
     a1a:	67 95       	ror	r22
     a1c:	07 2e       	mov	r0, r23
     a1e:	00 0c       	add	r0, r0
     a20:	88 0b       	sbc	r24, r24
     a22:	99 0b       	sbc	r25, r25
     a24:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     a28:	4b 01       	movw	r8, r22
     a2a:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     a2c:	f7 01       	movw	r30, r14
     a2e:	62 81       	ldd	r22, Z+2	; 0x02
     a30:	73 81       	ldd	r23, Z+3	; 0x03
     a32:	f8 01       	movw	r30, r16
     a34:	82 81       	ldd	r24, Z+2	; 0x02
     a36:	93 81       	ldd	r25, Z+3	; 0x03
     a38:	68 0f       	add	r22, r24
     a3a:	79 1f       	adc	r23, r25
     a3c:	77 23       	and	r23, r23
     a3e:	14 f4       	brge	.+4      	; 0xa44 <fourPointCalc+0x468>
     a40:	6f 5f       	subi	r22, 0xFF	; 255
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	75 95       	asr	r23
     a46:	67 95       	ror	r22
     a48:	07 2e       	mov	r0, r23
     a4a:	00 0c       	add	r0, r0
     a4c:	88 0b       	sbc	r24, r24
     a4e:	99 0b       	sbc	r25, r25
     a50:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     a54:	69 a3       	std	Y+33, r22	; 0x21
     a56:	7a a3       	std	Y+34, r23	; 0x22
     a58:	8b a3       	std	Y+35, r24	; 0x23
     a5a:	9c a3       	std	Y+36, r25	; 0x24
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     a5c:	9e 01       	movw	r18, r28
     a5e:	21 5e       	subi	r18, 0xE1	; 225
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	ae 01       	movw	r20, r28
     a64:	43 5e       	subi	r20, 0xE3	; 227
     a66:	5f 4f       	sbci	r21, 0xFF	; 255
     a68:	be 01       	movw	r22, r28
     a6a:	6f 5f       	subi	r22, 0xFF	; 255
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	ce 01       	movw	r24, r28
     a70:	49 96       	adiw	r24, 0x19	; 25
     a72:	0e 94 46 02 	call	0x48c	; 0x48c <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     a76:	0d 8d       	ldd	r16, Y+29	; 0x1d
     a78:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a7a:	00 0f       	add	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	00 0f       	add	r16, r16
     a80:	11 1f       	adc	r17, r17
     a82:	04 0d       	add	r16, r4
     a84:	15 1d       	adc	r17, r5
     a86:	2f 8c       	ldd	r2, Y+31	; 0x1f
     a88:	38 a0       	ldd	r3, Y+32	; 0x20
     a8a:	22 0c       	add	r2, r2
     a8c:	33 1c       	adc	r3, r3
     a8e:	22 0c       	add	r2, r2
     a90:	33 1c       	adc	r3, r3
     a92:	24 0c       	add	r2, r4
     a94:	35 1c       	adc	r3, r5
     a96:	f8 01       	movw	r30, r16
     a98:	60 81       	ld	r22, Z
     a9a:	71 81       	ldd	r23, Z+1	; 0x01
     a9c:	f1 01       	movw	r30, r2
     a9e:	80 81       	ld	r24, Z
     aa0:	91 81       	ldd	r25, Z+1	; 0x01
     aa2:	68 1b       	sub	r22, r24
     aa4:	79 0b       	sbc	r23, r25
     aa6:	07 2e       	mov	r0, r23
     aa8:	00 0c       	add	r0, r0
     aaa:	88 0b       	sbc	r24, r24
     aac:	99 0b       	sbc	r25, r25
     aae:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
     ab2:	6b 01       	movw	r12, r22
     ab4:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     ab6:	f8 01       	movw	r30, r16
     ab8:	62 81       	ldd	r22, Z+2	; 0x02
     aba:	73 81       	ldd	r23, Z+3	; 0x03
     abc:	f1 01       	movw	r30, r2
     abe:	82 81       	ldd	r24, Z+2	; 0x02
     ac0:	93 81       	ldd	r25, Z+3	; 0x03
     ac2:	68 1b       	sub	r22, r24
     ac4:	79 0b       	sbc	r23, r25
     ac6:	07 2e       	mov	r0, r23
     ac8:	00 0c       	add	r0, r0
     aca:	88 0b       	sbc	r24, r24
     acc:	99 0b       	sbc	r25, r25
     ace:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     ad2:	90 58       	subi	r25, 0x80	; 128
     ad4:	a7 01       	movw	r20, r14
     ad6:	96 01       	movw	r18, r12
     ad8:	0e 94 93 14 	call	0x2926	; 0x2926 <atan2>
	theta += M_PI/2.0;
     adc:	2b ed       	ldi	r18, 0xDB	; 219
     ade:	3f e0       	ldi	r19, 0x0F	; 15
     ae0:	49 ec       	ldi	r20, 0xC9	; 201
     ae2:	5f e3       	ldi	r21, 0x3F	; 63
     ae4:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
     ae8:	6b 01       	movw	r12, r22
     aea:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     aec:	a5 01       	movw	r20, r10
     aee:	94 01       	movw	r18, r8
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	94 e4       	ldi	r25, 0x44	; 68
     af8:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
     afc:	4b 01       	movw	r8, r22
     afe:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     b00:	29 a1       	ldd	r18, Y+33	; 0x21
     b02:	3a a1       	ldd	r19, Y+34	; 0x22
     b04:	4b a1       	ldd	r20, Y+35	; 0x23
     b06:	5c a1       	ldd	r21, Y+36	; 0x24
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	8f eb       	ldi	r24, 0xBF	; 191
     b0e:	93 e4       	ldi	r25, 0x43	; 67
     b10:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
     b14:	2b 01       	movw	r4, r22
     b16:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     b18:	c7 01       	movw	r24, r14
     b1a:	b6 01       	movw	r22, r12
     b1c:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <sin>
     b20:	69 a3       	std	Y+33, r22	; 0x21
     b22:	7a a3       	std	Y+34, r23	; 0x22
     b24:	8b a3       	std	Y+35, r24	; 0x23
     b26:	9c a3       	std	Y+36, r25	; 0x24
     b28:	c7 01       	movw	r24, r14
     b2a:	b6 01       	movw	r22, r12
     b2c:	0e 94 f7 14 	call	0x29ee	; 0x29ee <cos>
     b30:	6d a3       	std	Y+37, r22	; 0x25
     b32:	7e a3       	std	Y+38, r23	; 0x26
     b34:	8f a3       	std	Y+39, r24	; 0x27
     b36:	98 a7       	std	Y+40, r25	; 0x28
     b38:	08 e5       	ldi	r16, 0x58	; 88
     b3a:	11 e0       	ldi	r17, 0x01	; 1
     b3c:	29 a1       	ldd	r18, Y+33	; 0x21
     b3e:	3a a1       	ldd	r19, Y+34	; 0x22
     b40:	4b a1       	ldd	r20, Y+35	; 0x23
     b42:	5c a1       	ldd	r21, Y+36	; 0x24
     b44:	c3 01       	movw	r24, r6
     b46:	b2 01       	movw	r22, r4
     b48:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     b4c:	69 a7       	std	Y+41, r22	; 0x29
     b4e:	7a a7       	std	Y+42, r23	; 0x2a
     b50:	8b a7       	std	Y+43, r24	; 0x2b
     b52:	9c a7       	std	Y+44, r25	; 0x2c
     b54:	2d a1       	ldd	r18, Y+37	; 0x25
     b56:	3e a1       	ldd	r19, Y+38	; 0x26
     b58:	4f a1       	ldd	r20, Y+39	; 0x27
     b5a:	58 a5       	ldd	r21, Y+40	; 0x28
     b5c:	c5 01       	movw	r24, r10
     b5e:	b4 01       	movw	r22, r8
     b60:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     b64:	9b 01       	movw	r18, r22
     b66:	ac 01       	movw	r20, r24
     b68:	69 a5       	ldd	r22, Y+41	; 0x29
     b6a:	7a a5       	ldd	r23, Y+42	; 0x2a
     b6c:	8b a5       	ldd	r24, Y+43	; 0x2b
     b6e:	9c a5       	ldd	r25, Y+44	; 0x2c
     b70:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
     b74:	f8 01       	movw	r30, r16
     b76:	60 83       	st	Z, r22
     b78:	71 83       	std	Z+1, r23	; 0x01
     b7a:	82 83       	std	Z+2, r24	; 0x02
     b7c:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     b7e:	2d a1       	ldd	r18, Y+37	; 0x25
     b80:	3e a1       	ldd	r19, Y+38	; 0x26
     b82:	4f a1       	ldd	r20, Y+39	; 0x27
     b84:	58 a5       	ldd	r21, Y+40	; 0x28
     b86:	c3 01       	movw	r24, r6
     b88:	b2 01       	movw	r22, r4
     b8a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     b8e:	2b 01       	movw	r4, r22
     b90:	3c 01       	movw	r6, r24
     b92:	29 a1       	ldd	r18, Y+33	; 0x21
     b94:	3a a1       	ldd	r19, Y+34	; 0x22
     b96:	4b a1       	ldd	r20, Y+35	; 0x23
     b98:	5c a1       	ldd	r21, Y+36	; 0x24
     b9a:	c5 01       	movw	r24, r10
     b9c:	b4 01       	movw	r22, r8
     b9e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
     ba2:	9b 01       	movw	r18, r22
     ba4:	ac 01       	movw	r20, r24
     ba6:	c3 01       	movw	r24, r6
     ba8:	b2 01       	movw	r22, r4
     baa:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
     bae:	f8 01       	movw	r30, r16
     bb0:	64 83       	std	Z+4, r22	; 0x04
     bb2:	75 83       	std	Z+5, r23	; 0x05
     bb4:	86 83       	std	Z+6, r24	; 0x06
     bb6:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta;
     bb8:	f7 fa       	bst	r15, 7
     bba:	f0 94       	com	r15
     bbc:	f7 f8       	bld	r15, 7
     bbe:	f0 94       	com	r15
     bc0:	c0 86       	std	Z+8, r12	; 0x08
     bc2:	d1 86       	std	Z+9, r13	; 0x09
     bc4:	e2 86       	std	Z+10, r14	; 0x0a
     bc6:	f3 86       	std	Z+11, r15	; 0x0b
	
	return centerFour;
}
     bc8:	c8 01       	movw	r24, r16
     bca:	ce 5b       	subi	r28, 0xBE	; 190
     bcc:	df 4f       	sbci	r29, 0xFF	; 255
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	bf 90       	pop	r11
     bea:	af 90       	pop	r10
     bec:	9f 90       	pop	r9
     bee:	8f 90       	pop	r8
     bf0:	7f 90       	pop	r7
     bf2:	6f 90       	pop	r6
     bf4:	5f 90       	pop	r5
     bf6:	4f 90       	pop	r4
     bf8:	3f 90       	pop	r3
     bfa:	2f 90       	pop	r2
     bfc:	08 95       	ret

00000bfe <localization_calc>:
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
     bfe:	4f 92       	push	r4
     c00:	5f 92       	push	r5
     c02:	6f 92       	push	r6
     c04:	7f 92       	push	r7
     c06:	af 92       	push	r10
     c08:	bf 92       	push	r11
     c0a:	cf 92       	push	r12
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	68 97       	sbiw	r28, 0x18	; 24
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     c2c:	0d b7       	in	r16, 0x3d	; 61
     c2e:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     c30:	80 81       	ld	r24, Z
     c32:	91 81       	ldd	r25, Z+1	; 0x01
     c34:	9a 83       	std	Y+2, r25	; 0x02
     c36:	89 83       	std	Y+1, r24	; 0x01
     c38:	80 85       	ldd	r24, Z+8	; 0x08
     c3a:	91 85       	ldd	r25, Z+9	; 0x09
     c3c:	9c 83       	std	Y+4, r25	; 0x04
     c3e:	8b 83       	std	Y+3, r24	; 0x03
     c40:	82 81       	ldd	r24, Z+2	; 0x02
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	9e 83       	std	Y+6, r25	; 0x06
     c46:	8d 83       	std	Y+5, r24	; 0x05
     c48:	82 85       	ldd	r24, Z+10	; 0x0a
     c4a:	93 85       	ldd	r25, Z+11	; 0x0b
     c4c:	98 87       	std	Y+8, r25	; 0x08
     c4e:	8f 83       	std	Y+7, r24	; 0x07
     c50:	84 81       	ldd	r24, Z+4	; 0x04
     c52:	95 81       	ldd	r25, Z+5	; 0x05
     c54:	9a 87       	std	Y+10, r25	; 0x0a
     c56:	89 87       	std	Y+9, r24	; 0x09
     c58:	84 85       	ldd	r24, Z+12	; 0x0c
     c5a:	95 85       	ldd	r25, Z+13	; 0x0d
     c5c:	9c 87       	std	Y+12, r25	; 0x0c
     c5e:	8b 87       	std	Y+11, r24	; 0x0b
     c60:	86 81       	ldd	r24, Z+6	; 0x06
     c62:	97 81       	ldd	r25, Z+7	; 0x07
     c64:	9e 87       	std	Y+14, r25	; 0x0e
     c66:	8d 87       	std	Y+13, r24	; 0x0d
     c68:	86 85       	ldd	r24, Z+14	; 0x0e
     c6a:	97 85       	ldd	r25, Z+15	; 0x0f
     c6c:	98 8b       	std	Y+16, r25	; 0x10
     c6e:	8f 87       	std	Y+15, r24	; 0x0f
		{rawStarData[3], rawStarData[7]}
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     c70:	fe 01       	movw	r30, r28
     c72:	71 96       	adiw	r30, 0x11	; 17
     c74:	88 e0       	ldi	r24, 0x08	; 8
     c76:	df 01       	movw	r26, r30
     c78:	1d 92       	st	X+, r1
     c7a:	8a 95       	dec	r24
     c7c:	e9 f7       	brne	.-6      	; 0xc78 <localization_calc+0x7a>
     c7e:	70 97       	sbiw	r30, 0x10	; 16
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     c88:	40 81       	ld	r20, Z
     c8a:	51 81       	ldd	r21, Z+1	; 0x01
     c8c:	4f 3f       	cpi	r20, 0xFF	; 255
     c8e:	53 40       	sbci	r21, 0x03	; 3
     c90:	71 f0       	breq	.+28     	; 0xcae <localization_calc+0xb0>
			pointIndices[numPoints] = i;
     c92:	dc 01       	movw	r26, r24
     c94:	aa 0f       	add	r26, r26
     c96:	bb 1f       	adc	r27, r27
     c98:	41 e0       	ldi	r20, 0x01	; 1
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	4c 0f       	add	r20, r28
     c9e:	5d 1f       	adc	r21, r29
     ca0:	a4 0f       	add	r26, r20
     ca2:	b5 1f       	adc	r27, r21
     ca4:	51 96       	adiw	r26, 0x11	; 17
     ca6:	3c 93       	st	X, r19
     ca8:	2e 93       	st	-X, r18
     caa:	50 97       	sbiw	r26, 0x10	; 16
			numPoints++;
     cac:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     cae:	2f 5f       	subi	r18, 0xFF	; 255
     cb0:	3f 4f       	sbci	r19, 0xFF	; 255
     cb2:	34 96       	adiw	r30, 0x04	; 4
     cb4:	24 30       	cpi	r18, 0x04	; 4
     cb6:	31 05       	cpc	r19, r1
     cb8:	39 f7       	brne	.-50     	; 0xc88 <localization_calc+0x8a>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <localization_calc+0xc2>
     cbe:	89 c0       	rjmp	.+274    	; 0xdd2 <localization_calc+0x1d4>
     cc0:	ed b6       	in	r14, 0x3d	; 61
     cc2:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     cc4:	6c 01       	movw	r12, r24
     cc6:	cc 0c       	add	r12, r12
     cc8:	dd 1c       	adc	r13, r13
     cca:	cc 0c       	add	r12, r12
     ccc:	dd 1c       	adc	r13, r13
     cce:	ad b7       	in	r26, 0x3d	; 61
     cd0:	be b7       	in	r27, 0x3e	; 62
     cd2:	ac 19       	sub	r26, r12
     cd4:	bd 09       	sbc	r27, r13
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	be bf       	out	0x3e, r27	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	ad bf       	out	0x3d, r26	; 61
     ce0:	ed b7       	in	r30, 0x3d	; 61
     ce2:	fe b7       	in	r31, 0x3e	; 62
     ce4:	31 96       	adiw	r30, 0x01	; 1
     ce6:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     ce8:	18 16       	cp	r1, r24
     cea:	19 06       	cpc	r1, r25
     cec:	24 f5       	brge	.+72     	; 0xd36 <localization_calc+0x138>
     cee:	9e 01       	movw	r18, r28
     cf0:	2f 5e       	subi	r18, 0xEF	; 239
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
     cf4:	df 01       	movw	r26, r30
     cf6:	ce 0e       	add	r12, r30
     cf8:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     cfa:	f9 01       	movw	r30, r18
     cfc:	41 91       	ld	r20, Z+
     cfe:	51 91       	ld	r21, Z+
     d00:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     d02:	fa 01       	movw	r30, r20
     d04:	ee 0f       	add	r30, r30
     d06:	ff 1f       	adc	r31, r31
     d08:	ee 0f       	add	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	4c 0f       	add	r20, r28
     d12:	5d 1f       	adc	r21, r29
     d14:	e4 0f       	add	r30, r20
     d16:	f5 1f       	adc	r31, r21
     d18:	40 81       	ld	r20, Z
     d1a:	51 81       	ldd	r21, Z+1	; 0x01
     d1c:	11 96       	adiw	r26, 0x01	; 1
     d1e:	5c 93       	st	X, r21
     d20:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     d22:	42 81       	ldd	r20, Z+2	; 0x02
     d24:	53 81       	ldd	r21, Z+3	; 0x03
     d26:	13 96       	adiw	r26, 0x03	; 3
     d28:	5c 93       	st	X, r21
     d2a:	4e 93       	st	-X, r20
     d2c:	12 97       	sbiw	r26, 0x02	; 2
     d2e:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     d30:	ac 15       	cp	r26, r12
     d32:	bd 05       	cpc	r27, r13
     d34:	11 f7       	brne	.-60     	; 0xcfa <localization_calc+0xfc>
			points[i][1] = pvect[index][1];
		}
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     d36:	db 01       	movw	r26, r22
     d38:	4d 90       	ld	r4, X+
     d3a:	5d 90       	ld	r5, X+
     d3c:	6d 90       	ld	r6, X+
     d3e:	7c 90       	ld	r7, X
     d40:	13 97       	sbiw	r26, 0x03	; 3
     d42:	e0 e7       	ldi	r30, 0x70	; 112
     d44:	f1 e0       	ldi	r31, 0x01	; 1
     d46:	40 82       	st	Z, r4
     d48:	51 82       	std	Z+1, r5	; 0x01
     d4a:	62 82       	std	Z+2, r6	; 0x02
     d4c:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     d4e:	14 96       	adiw	r26, 0x04	; 4
     d50:	4d 90       	ld	r4, X+
     d52:	5d 90       	ld	r5, X+
     d54:	6d 90       	ld	r6, X+
     d56:	7c 90       	ld	r7, X
     d58:	17 97       	sbiw	r26, 0x07	; 7
     d5a:	44 82       	std	Z+4, r4	; 0x04
     d5c:	55 82       	std	Z+5, r5	; 0x05
     d5e:	66 82       	std	Z+6, r6	; 0x06
     d60:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     d62:	18 96       	adiw	r26, 0x08	; 8
     d64:	4d 91       	ld	r20, X+
     d66:	5d 91       	ld	r21, X+
     d68:	6d 91       	ld	r22, X+
     d6a:	7c 91       	ld	r23, X
     d6c:	1b 97       	sbiw	r26, 0x0b	; 11
     d6e:	40 87       	std	Z+8, r20	; 0x08
     d70:	51 87       	std	Z+9, r21	; 0x09
     d72:	62 87       	std	Z+10, r22	; 0x0a
     d74:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     d76:	04 97       	sbiw	r24, 0x04	; 4
     d78:	29 f4       	brne	.+10     	; 0xd84 <localization_calc+0x186>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     d7a:	c5 01       	movw	r24, r10
     d7c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <fourPointCalc>
     d80:	dc 01       	movw	r26, r24
				break;
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <localization_calc+0x18a>
				
			case 3 : 
				//calcPointer = threePointCalc(points);
				calcPointer = &rc[0];
     d84:	a0 e7       	ldi	r26, 0x70	; 112
     d86:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				calcPointer = &rc[0];
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     d88:	4d 91       	ld	r20, X+
     d8a:	5d 91       	ld	r21, X+
     d8c:	6d 91       	ld	r22, X+
     d8e:	7c 91       	ld	r23, X
     d90:	13 97       	sbiw	r26, 0x03	; 3
     d92:	e4 e6       	ldi	r30, 0x64	; 100
     d94:	f1 e0       	ldi	r31, 0x01	; 1
     d96:	40 83       	st	Z, r20
     d98:	51 83       	std	Z+1, r21	; 0x01
     d9a:	62 83       	std	Z+2, r22	; 0x02
     d9c:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     d9e:	14 96       	adiw	r26, 0x04	; 4
     da0:	4d 91       	ld	r20, X+
     da2:	5d 91       	ld	r21, X+
     da4:	6d 91       	ld	r22, X+
     da6:	7c 91       	ld	r23, X
     da8:	17 97       	sbiw	r26, 0x07	; 7
     daa:	44 83       	std	Z+4, r20	; 0x04
     dac:	55 83       	std	Z+5, r21	; 0x05
     dae:	66 83       	std	Z+6, r22	; 0x06
     db0:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     db2:	18 96       	adiw	r26, 0x08	; 8
     db4:	8d 91       	ld	r24, X+
     db6:	9d 91       	ld	r25, X+
     db8:	0d 90       	ld	r0, X+
     dba:	bc 91       	ld	r27, X
     dbc:	a0 2d       	mov	r26, r0
     dbe:	80 87       	std	Z+8, r24	; 0x08
     dc0:	91 87       	std	Z+9, r25	; 0x09
     dc2:	a2 87       	std	Z+10, r26	; 0x0a
     dc4:	b3 87       	std	Z+11, r27	; 0x0b
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	fe be       	out	0x3e, r15	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	ed be       	out	0x3d, r14	; 61
     dd0:	20 c0       	rjmp	.+64     	; 0xe12 <localization_calc+0x214>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     dd2:	fb 01       	movw	r30, r22
     dd4:	80 81       	ld	r24, Z
     dd6:	91 81       	ldd	r25, Z+1	; 0x01
     dd8:	a2 81       	ldd	r26, Z+2	; 0x02
     dda:	b3 81       	ldd	r27, Z+3	; 0x03
     ddc:	e4 e6       	ldi	r30, 0x64	; 100
     dde:	f1 e0       	ldi	r31, 0x01	; 1
     de0:	80 83       	st	Z, r24
     de2:	91 83       	std	Z+1, r25	; 0x01
     de4:	a2 83       	std	Z+2, r26	; 0x02
     de6:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     de8:	db 01       	movw	r26, r22
     dea:	14 96       	adiw	r26, 0x04	; 4
     dec:	cd 90       	ld	r12, X+
     dee:	dd 90       	ld	r13, X+
     df0:	ed 90       	ld	r14, X+
     df2:	fc 90       	ld	r15, X
     df4:	17 97       	sbiw	r26, 0x07	; 7
     df6:	c4 82       	std	Z+4, r12	; 0x04
     df8:	d5 82       	std	Z+5, r13	; 0x05
     dfa:	e6 82       	std	Z+6, r14	; 0x06
     dfc:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];	
     dfe:	18 96       	adiw	r26, 0x08	; 8
     e00:	4d 91       	ld	r20, X+
     e02:	5d 91       	ld	r21, X+
     e04:	6d 91       	ld	r22, X+
     e06:	7c 91       	ld	r23, X
     e08:	1b 97       	sbiw	r26, 0x0b	; 11
     e0a:	40 87       	std	Z+8, r20	; 0x08
     e0c:	51 87       	std	Z+9, r21	; 0x09
     e0e:	62 87       	std	Z+10, r22	; 0x0a
     e10:	73 87       	std	Z+11, r23	; 0x0b
	
	return robotCenter;
	
	
	
}
     e12:	84 e6       	ldi	r24, 0x64	; 100
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	1e bf       	out	0x3e, r17	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	0d bf       	out	0x3d, r16	; 61
     e20:	68 96       	adiw	r28, 0x18	; 24
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	7f 90       	pop	r7
     e42:	6f 90       	pop	r6
     e44:	5f 90       	pop	r5
     e46:	4f 90       	pop	r4
     e48:	08 95       	ret

00000e4a <motor_update>:
Initialization of Subsystem Components
************************************************************/

/* Called On Timer 3 Rollover */
void motor_update(void)
{
     e4a:	af 92       	push	r10
     e4c:	bf 92       	push	r11
     e4e:	cf 92       	push	r12
     e50:	df 92       	push	r13
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
	set(TIFR3,OCF3A);		// Reset flag
     e5a:	c1 9a       	sbi	0x18, 1	; 24
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd); // Update control
     e5c:	a0 90 08 01 	lds	r10, 0x0108
     e60:	b0 90 09 01 	lds	r11, 0x0109
     e64:	c0 90 0a 01 	lds	r12, 0x010A
     e68:	d0 90 0b 01 	lds	r13, 0x010B
     e6c:	e0 90 0c 01 	lds	r14, 0x010C
     e70:	f0 90 0d 01 	lds	r15, 0x010D
     e74:	00 91 0e 01 	lds	r16, 0x010E
     e78:	10 91 0f 01 	lds	r17, 0x010F
     e7c:	20 91 a1 01 	lds	r18, 0x01A1
     e80:	30 91 a2 01 	lds	r19, 0x01A2
     e84:	40 91 a3 01 	lds	r20, 0x01A3
     e88:	50 91 a4 01 	lds	r21, 0x01A4
     e8c:	60 91 a5 01 	lds	r22, 0x01A5
     e90:	70 91 a6 01 	lds	r23, 0x01A6
     e94:	80 91 a7 01 	lds	r24, 0x01A7
     e98:	90 91 a8 01 	lds	r25, 0x01A8
     e9c:	e0 91 9c 01 	lds	r30, 0x019C
     ea0:	ef 93       	push	r30
     ea2:	e0 91 9b 01 	lds	r30, 0x019B
     ea6:	ef 93       	push	r30
     ea8:	e0 91 9a 01 	lds	r30, 0x019A
     eac:	ef 93       	push	r30
     eae:	e0 91 99 01 	lds	r30, 0x0199
     eb2:	ef 93       	push	r30
     eb4:	e0 91 03 01 	lds	r30, 0x0103
     eb8:	ef 93       	push	r30
     eba:	e0 91 02 01 	lds	r30, 0x0102
     ebe:	ef 93       	push	r30
     ec0:	e0 91 01 01 	lds	r30, 0x0101
     ec4:	ef 93       	push	r30
     ec6:	e0 91 00 01 	lds	r30, 0x0100
     eca:	ef 93       	push	r30
     ecc:	e0 91 a0 01 	lds	r30, 0x01A0
     ed0:	ef 93       	push	r30
     ed2:	e0 91 9f 01 	lds	r30, 0x019F
     ed6:	ef 93       	push	r30
     ed8:	e0 91 9e 01 	lds	r30, 0x019E
     edc:	ef 93       	push	r30
     ede:	e0 91 9d 01 	lds	r30, 0x019D
     ee2:	ef 93       	push	r30
     ee4:	e0 91 07 01 	lds	r30, 0x0107
     ee8:	ef 93       	push	r30
     eea:	e0 91 06 01 	lds	r30, 0x0106
     eee:	ef 93       	push	r30
     ef0:	e0 91 05 01 	lds	r30, 0x0105
     ef4:	ef 93       	push	r30
     ef6:	e0 91 04 01 	lds	r30, 0x0104
     efa:	ef 93       	push	r30
     efc:	0e 94 bc 0a 	call	0x1578	; 0x1578 <run_motor_control_loop>
     f00:	8d b7       	in	r24, 0x3d	; 61
     f02:	9e b7       	in	r25, 0x3e	; 62
     f04:	40 96       	adiw	r24, 0x10	; 16
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	9e bf       	out	0x3e, r25	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	8d bf       	out	0x3d, r24	; 61
}
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	bf 90       	pop	r11
     f1e:	af 90       	pop	r10
     f20:	08 95       	ret

00000f22 <bot_behavior_update>:

/* Update Targets, Gains, and Max Vals */
void bot_behavior_update()
{
	if (has_puck())
     f22:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <has_puck>
     f26:	88 23       	and	r24, r24
     f28:	c9 f1       	breq	.+114    	; 0xf9c <bot_behavior_update+0x7a>
	{
		x_target = x_goal;
     f2a:	80 91 88 01 	lds	r24, 0x0188
     f2e:	90 91 89 01 	lds	r25, 0x0189
     f32:	a0 91 8a 01 	lds	r26, 0x018A
     f36:	b0 91 8b 01 	lds	r27, 0x018B
     f3a:	80 93 a5 01 	sts	0x01A5, r24
     f3e:	90 93 a6 01 	sts	0x01A6, r25
     f42:	a0 93 a7 01 	sts	0x01A7, r26
     f46:	b0 93 a8 01 	sts	0x01A8, r27
		y_target = y_goal;
     f4a:	80 91 84 01 	lds	r24, 0x0184
     f4e:	90 91 85 01 	lds	r25, 0x0185
     f52:	a0 91 86 01 	lds	r26, 0x0186
     f56:	b0 91 87 01 	lds	r27, 0x0187
     f5a:	80 93 a1 01 	sts	0x01A1, r24
     f5e:	90 93 a2 01 	sts	0x01A2, r25
     f62:	a0 93 a3 01 	sts	0x01A3, r26
     f66:	b0 93 a4 01 	sts	0x01A4, r27
		max_theta = M_PI/3;
     f6a:	82 e9       	ldi	r24, 0x92	; 146
     f6c:	9a e0       	ldi	r25, 0x0A	; 10
     f6e:	a6 e8       	ldi	r26, 0x86	; 134
     f70:	bf e3       	ldi	r27, 0x3F	; 63
     f72:	80 93 08 01 	sts	0x0108, r24
     f76:	90 93 09 01 	sts	0x0109, r25
     f7a:	a0 93 0a 01 	sts	0x010A, r26
     f7e:	b0 93 0b 01 	sts	0x010B, r27
		max_duty_cycle = 0.7;
     f82:	83 e3       	ldi	r24, 0x33	; 51
     f84:	93 e3       	ldi	r25, 0x33	; 51
     f86:	a3 e3       	ldi	r26, 0x33	; 51
     f88:	bf e3       	ldi	r27, 0x3F	; 63
     f8a:	80 93 0c 01 	sts	0x010C, r24
     f8e:	90 93 0d 01 	sts	0x010D, r25
     f92:	a0 93 0e 01 	sts	0x010E, r26
     f96:	b0 93 0f 01 	sts	0x010F, r27
		return;
     f9a:	08 95       	ret
	}
	
	if (!has_puck())
     f9c:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <has_puck>
     fa0:	81 11       	cpse	r24, r1
     fa2:	38 c0       	rjmp	.+112    	; 0x1014 <bot_behavior_update+0xf2>
	{
		x_target = x_puck;
     fa4:	80 91 80 01 	lds	r24, 0x0180
     fa8:	90 91 81 01 	lds	r25, 0x0181
     fac:	a0 91 82 01 	lds	r26, 0x0182
     fb0:	b0 91 83 01 	lds	r27, 0x0183
     fb4:	80 93 a5 01 	sts	0x01A5, r24
     fb8:	90 93 a6 01 	sts	0x01A6, r25
     fbc:	a0 93 a7 01 	sts	0x01A7, r26
     fc0:	b0 93 a8 01 	sts	0x01A8, r27
		y_target = y_puck;
     fc4:	80 91 7c 01 	lds	r24, 0x017C
     fc8:	90 91 7d 01 	lds	r25, 0x017D
     fcc:	a0 91 7e 01 	lds	r26, 0x017E
     fd0:	b0 91 7f 01 	lds	r27, 0x017F
     fd4:	80 93 a1 01 	sts	0x01A1, r24
     fd8:	90 93 a2 01 	sts	0x01A2, r25
     fdc:	a0 93 a3 01 	sts	0x01A3, r26
     fe0:	b0 93 a4 01 	sts	0x01A4, r27
		max_theta = M_PI;
     fe4:	8b ed       	ldi	r24, 0xDB	; 219
     fe6:	9f e0       	ldi	r25, 0x0F	; 15
     fe8:	a9 e4       	ldi	r26, 0x49	; 73
     fea:	b0 e4       	ldi	r27, 0x40	; 64
     fec:	80 93 08 01 	sts	0x0108, r24
     ff0:	90 93 09 01 	sts	0x0109, r25
     ff4:	a0 93 0a 01 	sts	0x010A, r26
     ff8:	b0 93 0b 01 	sts	0x010B, r27
		max_duty_cycle = 0.99;
     ffc:	84 ea       	ldi	r24, 0xA4	; 164
     ffe:	90 e7       	ldi	r25, 0x70	; 112
    1000:	ad e7       	ldi	r26, 0x7D	; 125
    1002:	bf e3       	ldi	r27, 0x3F	; 63
    1004:	80 93 0c 01 	sts	0x010C, r24
    1008:	90 93 0d 01 	sts	0x010D, r25
    100c:	a0 93 0e 01 	sts	0x010E, r26
    1010:	b0 93 0f 01 	sts	0x010F, r27
    1014:	08 95       	ret

00001016 <adc_update>:
	}
}

/* Called on ADC Conversion Completion */
void adc_update(void)
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	28 97       	sbiw	r28, 0x08	; 8
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
	set(ADCSRA,ADIF);	 // Reset flag
    102a:	ea e7       	ldi	r30, 0x7A	; 122
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	80 61       	ori	r24, 0x10	; 16
    1032:	80 83       	st	Z, r24
	if(adc_switch()){
    1034:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <adc_switch>
    1038:	88 23       	and	r24, r24
    103a:	e1 f0       	breq	.+56     	; 0x1074 <adc_update+0x5e>
		float puck_buffer[2];
		get_puck_location(puck_buffer);
    103c:	ce 01       	movw	r24, r28
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	0e 94 9c 11 	call	0x2338	; 0x2338 <get_puck_location>
		x_puck = puck_buffer[0];
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	ab 81       	ldd	r26, Y+3	; 0x03
    104a:	bc 81       	ldd	r27, Y+4	; 0x04
    104c:	80 93 80 01 	sts	0x0180, r24
    1050:	90 93 81 01 	sts	0x0181, r25
    1054:	a0 93 82 01 	sts	0x0182, r26
    1058:	b0 93 83 01 	sts	0x0183, r27
		y_puck = puck_buffer[1];
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	af 81       	ldd	r26, Y+7	; 0x07
    1062:	b8 85       	ldd	r27, Y+8	; 0x08
    1064:	80 93 7c 01 	sts	0x017C, r24
    1068:	90 93 7d 01 	sts	0x017D, r25
    106c:	a0 93 7e 01 	sts	0x017E, r26
    1070:	b0 93 7f 01 	sts	0x017F, r27
	}
}
    1074:	28 96       	adiw	r28, 0x08	; 8
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <comm_test>:
		break;
	}
}

void comm_test(void)
{
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	2c 97       	sbiw	r28, 0x0c	; 12
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
	/* Assign Defending goal */
	update_position();
    109a:	0e 94 bc 09 	call	0x1378	; 0x1378 <update_position>
	float position_buffer[3];
	get_position(position_buffer);
    109e:	ce 01       	movw	r24, r28
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	0e 94 55 09 	call	0x12aa	; 0x12aa <get_position>
	if (position_buffer[0]>0) {
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	a9 01       	movw	r20, r18
    10ac:	69 81       	ldd	r22, Y+1	; 0x01
    10ae:	7a 81       	ldd	r23, Y+2	; 0x02
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__gesf2>
    10b8:	18 16       	cp	r1, r24
    10ba:	6c f4       	brge	.+26     	; 0x10d6 <comm_test+0x50>
		x_goal = -1*GOAL_X_DIST;
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	af ea       	ldi	r26, 0xAF	; 175
    10c2:	b3 ec       	ldi	r27, 0xC3	; 195
    10c4:	80 93 88 01 	sts	0x0188, r24
    10c8:	90 93 89 01 	sts	0x0189, r25
    10cc:	a0 93 8a 01 	sts	0x018A, r26
    10d0:	b0 93 8b 01 	sts	0x018B, r27
    10d4:	0c c0       	rjmp	.+24     	; 0x10ee <comm_test+0x68>
		} else {
		x_goal = GOAL_X_DIST;
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	af ea       	ldi	r26, 0xAF	; 175
    10dc:	b3 e4       	ldi	r27, 0x43	; 67
    10de:	80 93 88 01 	sts	0x0188, r24
    10e2:	90 93 89 01 	sts	0x0189, r25
    10e6:	a0 93 8a 01 	sts	0x018A, r26
    10ea:	b0 93 8b 01 	sts	0x018B, r27
	}
	/* Flash color of LED for defending goal */
}
    10ee:	2c 96       	adiw	r28, 0x0c	; 12
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <play>:
void play(void)
{
	/* Light LED of defending goal */
	
	/* Play */
	set(TCCR1B,CS10);
    1100:	e1 e8       	ldi	r30, 0x81	; 129
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	81 60       	ori	r24, 0x01	; 1
    1108:	80 83       	st	Z, r24
    110a:	08 95       	ret

0000110c <pause>:
}

void pause(void)
{
	/* Stop within 3  seconds */
	clear(TCCR1B,CS10);
    110c:	e1 e8       	ldi	r30, 0x81	; 129
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8e 7f       	andi	r24, 0xFE	; 254
    1114:	80 83       	st	Z, r24
	clear(PORTB,0); // B0 Left motor off
    1116:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,2); // B2 Right motor off
    1118:	2a 98       	cbi	0x05, 2	; 5
    111a:	08 95       	ret

0000111c <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
    111c:	6e 9a       	sbi	0x0d, 6	; 13
    111e:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey();
    1120:	0e 94 09 01 	call	0x212	; 0x212 <initialize_robockey>
	pause();
    1124:	0e 94 86 08 	call	0x110c	; 0x110c <pause>

	/* Confirm successful initialization(s) */
	m_green(ON);
    1128:	6a 9a       	sbi	0x0d, 2	; 13
    112a:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    112c:	ca e7       	ldi	r28, 0x7A	; 122
    112e:	d0 e0       	ldi	r29, 0x00	; 0
	/* Confirm successful initialization(s) */
	m_green(ON);

	/* Run */
	while (1){
		update_position();
    1130:	0e 94 bc 09 	call	0x1378	; 0x1378 <update_position>
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    1134:	88 81       	ld	r24, Y
    1136:	84 fd       	sbrc	r24, 4
    1138:	0e 94 0b 08 	call	0x1016	; 0x1016 <adc_update>
		bot_behavior_update();
    113c:	0e 94 91 07 	call	0xf22	; 0xf22 <bot_behavior_update>
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
    1140:	c1 9b       	sbis	0x18, 1	; 24
    1142:	f6 cf       	rjmp	.-20     	; 0x1130 <main+0x14>
    1144:	0e 94 25 07 	call	0xe4a	; 0xe4a <motor_update>
    1148:	f3 cf       	rjmp	.-26     	; 0x1130 <main+0x14>

0000114a <halftime>:
}

void halftime(void)
{
	/* Stop play */
	pause();
    114a:	0e 94 86 08 	call	0x110c	; 0x110c <pause>
	
	/* Switch assigned goal */
	if (x_goal>0) {
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	a9 01       	movw	r20, r18
    1154:	60 91 88 01 	lds	r22, 0x0188
    1158:	70 91 89 01 	lds	r23, 0x0189
    115c:	80 91 8a 01 	lds	r24, 0x018A
    1160:	90 91 8b 01 	lds	r25, 0x018B
    1164:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__gesf2>
    1168:	18 16       	cp	r1, r24
    116a:	6c f4       	brge	.+26     	; 0x1186 <halftime+0x3c>
		x_goal = -1*GOAL_X_DIST;
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	af ea       	ldi	r26, 0xAF	; 175
    1172:	b3 ec       	ldi	r27, 0xC3	; 195
    1174:	80 93 88 01 	sts	0x0188, r24
    1178:	90 93 89 01 	sts	0x0189, r25
    117c:	a0 93 8a 01 	sts	0x018A, r26
    1180:	b0 93 8b 01 	sts	0x018B, r27
    1184:	08 95       	ret
		} else {
		x_goal = GOAL_X_DIST;
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	af ea       	ldi	r26, 0xAF	; 175
    118c:	b3 e4       	ldi	r27, 0x43	; 67
    118e:	80 93 88 01 	sts	0x0188, r24
    1192:	90 93 89 01 	sts	0x0189, r25
    1196:	a0 93 8a 01 	sts	0x018A, r26
    119a:	b0 93 8b 01 	sts	0x018B, r27
    119e:	08 95       	ret

000011a0 <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
    11a0:	e0 91 8e 01 	lds	r30, 0x018E
    11a4:	8e 2f       	mov	r24, r30
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	fc 01       	movw	r30, r24
    11aa:	e0 5a       	subi	r30, 0xA0	; 160
    11ac:	f1 09       	sbc	r31, r1
    11ae:	e8 30       	cpi	r30, 0x08	; 8
    11b0:	f1 05       	cpc	r31, r1
    11b2:	40 f5       	brcc	.+80     	; 0x1204 <update_game_state+0x64>
    11b4:	ea 5a       	subi	r30, 0xAA	; 170
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__tablejump2__>
		case 0xA0: // Comm Test
		comm_test();
    11bc:	0e 94 43 08 	call	0x1086	; 0x1086 <comm_test>
		break;
    11c0:	08 95       	ret
		case 0xA1: // Play
		play();
    11c2:	0e 94 80 08 	call	0x1100	; 0x1100 <play>
		break;
    11c6:	08 95       	ret
		case 0xA2: // Goal R
		SR = buffer[1];
    11c8:	ef e8       	ldi	r30, 0x8F	; 143
    11ca:	f1 e0       	ldi	r31, 0x01	; 1
    11cc:	81 81       	ldd	r24, Z+1	; 0x01
    11ce:	80 93 8d 01 	sts	0x018D, r24
		SB = buffer[2];
    11d2:	82 81       	ldd	r24, Z+2	; 0x02
    11d4:	80 93 8c 01 	sts	0x018C, r24
		pause();
    11d8:	0e 94 86 08 	call	0x110c	; 0x110c <pause>
		break;
    11dc:	08 95       	ret
		case 0xA3: // Goal B
		SR = buffer[1];
    11de:	ef e8       	ldi	r30, 0x8F	; 143
    11e0:	f1 e0       	ldi	r31, 0x01	; 1
    11e2:	81 81       	ldd	r24, Z+1	; 0x01
    11e4:	80 93 8d 01 	sts	0x018D, r24
		SB = buffer[2];
    11e8:	82 81       	ldd	r24, Z+2	; 0x02
    11ea:	80 93 8c 01 	sts	0x018C, r24
		pause();
    11ee:	0e 94 86 08 	call	0x110c	; 0x110c <pause>
		break;
    11f2:	08 95       	ret
		case 0xA4: // Pause
		pause();
    11f4:	0e 94 86 08 	call	0x110c	; 0x110c <pause>
		break;
    11f8:	08 95       	ret
		case 0xA6: // Halftime
		halftime();
    11fa:	0e 94 a5 08 	call	0x114a	; 0x114a <halftime>
		break;
    11fe:	08 95       	ret
}

void game_over(void)
{
	// Stop play
	pause();
    1200:	0e 94 86 08 	call	0x110c	; 0x110c <pause>
    1204:	08 95       	ret

00001206 <wireless_recieve>:
}

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    1206:	6a e0       	ldi	r22, 0x0A	; 10
    1208:	8f e8       	ldi	r24, 0x8F	; 143
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <m_rf_read>
	game_state = buffer[0];
    1210:	80 91 8f 01 	lds	r24, 0x018F
    1214:	80 93 8e 01 	sts	0x018E, r24
	update_game_state();
    1218:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <update_game_state>
    121c:	08 95       	ret

0000121e <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	0f 92       	push	r0
    1226:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    1228:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
    122a:	2a 9a       	sbi	0x05, 2	; 5
}
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0f 90       	pop	r0
    1232:	1f 90       	pop	r1
    1234:	18 95       	reti

00001236 <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    1236:	1f 92       	push	r1
    1238:	0f 92       	push	r0
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	0f 92       	push	r0
    123e:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    1240:	28 98       	cbi	0x05, 0	; 5
}
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	0f 90       	pop	r0
    1248:	1f 90       	pop	r1
    124a:	18 95       	reti

0000124c <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    1256:	2a 98       	cbi	0x05, 2	; 5
}
    1258:	0f 90       	pop	r0
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti

00001262 <__vector_3>:

/* Recieve Wireless Comm */
ISR(INT2_vect){
    1262:	1f 92       	push	r1
    1264:	0f 92       	push	r0
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	0f 92       	push	r0
    126a:	11 24       	eor	r1, r1
    126c:	2f 93       	push	r18
    126e:	3f 93       	push	r19
    1270:	4f 93       	push	r20
    1272:	5f 93       	push	r21
    1274:	6f 93       	push	r22
    1276:	7f 93       	push	r23
    1278:	8f 93       	push	r24
    127a:	9f 93       	push	r25
    127c:	af 93       	push	r26
    127e:	bf 93       	push	r27
    1280:	ef 93       	push	r30
    1282:	ff 93       	push	r31
	wireless_recieve();
    1284:	0e 94 03 09 	call	0x1206	; 0x1206 <wireless_recieve>
}
    1288:	ff 91       	pop	r31
    128a:	ef 91       	pop	r30
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	7f 91       	pop	r23
    1296:	6f 91       	pop	r22
    1298:	5f 91       	pop	r21
    129a:	4f 91       	pop	r20
    129c:	3f 91       	pop	r19
    129e:	2f 91       	pop	r18
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	0f 90       	pop	r0
    12a6:	1f 90       	pop	r1
    12a8:	18 95       	reti

000012aa <get_position>:
/************************************************************
Public Functions
************************************************************/

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    12aa:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    12ac:	80 91 b9 01 	lds	r24, 0x01B9
    12b0:	90 91 ba 01 	lds	r25, 0x01BA
    12b4:	a0 91 bb 01 	lds	r26, 0x01BB
    12b8:	b0 91 bc 01 	lds	r27, 0x01BC
    12bc:	80 83       	st	Z, r24
    12be:	91 83       	std	Z+1, r25	; 0x01
    12c0:	a2 83       	std	Z+2, r26	; 0x02
    12c2:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    12c4:	80 91 b5 01 	lds	r24, 0x01B5
    12c8:	90 91 b6 01 	lds	r25, 0x01B6
    12cc:	a0 91 b7 01 	lds	r26, 0x01B7
    12d0:	b0 91 b8 01 	lds	r27, 0x01B8
    12d4:	84 83       	std	Z+4, r24	; 0x04
    12d6:	95 83       	std	Z+5, r25	; 0x05
    12d8:	a6 83       	std	Z+6, r26	; 0x06
    12da:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    12dc:	80 91 b1 01 	lds	r24, 0x01B1
    12e0:	90 91 b2 01 	lds	r25, 0x01B2
    12e4:	a0 91 b3 01 	lds	r26, 0x01B3
    12e8:	b0 91 b4 01 	lds	r27, 0x01B4
    12ec:	80 87       	std	Z+8, r24	; 0x08
    12ee:	91 87       	std	Z+9, r25	; 0x09
    12f0:	a2 87       	std	Z+10, r26	; 0x0a
    12f2:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	08 95       	ret

000012f8 <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    12f8:	8f 92       	push	r8
    12fa:	9f 92       	push	r9
    12fc:	af 92       	push	r10
    12fe:	bf 92       	push	r11
    1300:	cf 92       	push	r12
    1302:	df 92       	push	r13
    1304:	ef 92       	push	r14
    1306:	ff 92       	push	r15
    1308:	6b 01       	movw	r12, r22
    130a:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    130c:	4b 01       	movw	r8, r22
    130e:	5c 01       	movw	r10, r24
    1310:	e8 94       	clt
    1312:	b7 f8       	bld	r11, 7
    1314:	2b ed       	ldi	r18, 0xDB	; 219
    1316:	3f e0       	ldi	r19, 0x0F	; 15
    1318:	49 e4       	ldi	r20, 0x49	; 73
    131a:	50 e4       	ldi	r21, 0x40	; 64
    131c:	c5 01       	movw	r24, r10
    131e:	b4 01       	movw	r22, r8
    1320:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__gesf2>
    1324:	18 16       	cp	r1, r24
    1326:	bc f4       	brge	.+46     	; 0x1356 <theta_error_correction+0x5e>
    1328:	2b ed       	ldi	r18, 0xDB	; 219
    132a:	3f e0       	ldi	r19, 0x0F	; 15
    132c:	49 ec       	ldi	r20, 0xC9	; 201
    132e:	50 e4       	ldi	r21, 0x40	; 64
    1330:	c7 01       	movw	r24, r14
    1332:	b6 01       	movw	r22, r12
    1334:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    1338:	a5 01       	movw	r20, r10
    133a:	94 01       	movw	r18, r8
    133c:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__divsf3>
    1340:	9b 01       	movw	r18, r22
    1342:	ac 01       	movw	r20, r24
    1344:	c7 01       	movw	r24, r14
    1346:	b6 01       	movw	r22, r12
    1348:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
    134c:	56 2f       	mov	r21, r22
    134e:	47 2f       	mov	r20, r23
    1350:	38 2f       	mov	r19, r24
    1352:	29 2f       	mov	r18, r25
    1354:	04 c0       	rjmp	.+8      	; 0x135e <theta_error_correction+0x66>
	else{return error;}
    1356:	5c 2d       	mov	r21, r12
    1358:	4d 2d       	mov	r20, r13
    135a:	3e 2d       	mov	r19, r14
    135c:	2f 2d       	mov	r18, r15
}
    135e:	65 2f       	mov	r22, r21
    1360:	74 2f       	mov	r23, r20
    1362:	83 2f       	mov	r24, r19
    1364:	92 2f       	mov	r25, r18
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	cf 90       	pop	r12
    136e:	bf 90       	pop	r11
    1370:	af 90       	pop	r10
    1372:	9f 90       	pop	r9
    1374:	8f 90       	pop	r8
    1376:	08 95       	ret

00001378 <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    1378:	2f 92       	push	r2
    137a:	3f 92       	push	r3
    137c:	4f 92       	push	r4
    137e:	5f 92       	push	r5
    1380:	6f 92       	push	r6
    1382:	7f 92       	push	r7
    1384:	8f 92       	push	r8
    1386:	9f 92       	push	r9
    1388:	af 92       	push	r10
    138a:	bf 92       	push	r11
    138c:	cf 92       	push	r12
    138e:	df 92       	push	r13
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	a8 97       	sbiw	r28, 0x28	; 40
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    13ac:	ce 01       	movw	r24, r28
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	0e 94 09 11 	call	0x2212	; 0x2212 <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    13b4:	6b 81       	ldd	r22, Y+3	; 0x03
    13b6:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    13b8:	0f 81       	ldd	r16, Y+7	; 0x07
    13ba:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    13bc:	49 85       	ldd	r20, Y+9	; 0x09
    13be:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    13c0:	ad 85       	ldd	r26, Y+13	; 0x0d
    13c2:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    13c4:	2f 85       	ldd	r18, Y+15	; 0x0f
    13c6:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    13c8:	eb 89       	ldd	r30, Y+19	; 0x13
    13ca:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    13cc:	8d 89       	ldd	r24, Y+21	; 0x15
    13ce:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    13d0:	e9 80       	ldd	r14, Y+1	; 0x01
    13d2:	fa 80       	ldd	r15, Y+2	; 0x02
    13d4:	fa 8e       	std	Y+26, r15	; 0x1a
    13d6:	e9 8e       	std	Y+25, r14	; 0x19
    13d8:	1c 8f       	std	Y+28, r17	; 0x1c
    13da:	0b 8f       	std	Y+27, r16	; 0x1b
    13dc:	be 8f       	std	Y+30, r27	; 0x1e
    13de:	ad 8f       	std	Y+29, r26	; 0x1d
    13e0:	f8 a3       	std	Y+32, r31	; 0x20
    13e2:	ef 8f       	std	Y+31, r30	; 0x1f
    13e4:	7a a3       	std	Y+34, r23	; 0x22
    13e6:	69 a3       	std	Y+33, r22	; 0x21
    13e8:	5c a3       	std	Y+36, r21	; 0x24
    13ea:	4b a3       	std	Y+35, r20	; 0x23
    13ec:	3e a3       	std	Y+38, r19	; 0x26
    13ee:	2d a3       	std	Y+37, r18	; 0x25
    13f0:	98 a7       	std	Y+40, r25	; 0x28
    13f2:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    13f4:	68 e1       	ldi	r22, 0x18	; 24
    13f6:	71 e0       	ldi	r23, 0x01	; 1
    13f8:	ce 01       	movw	r24, r28
    13fa:	49 96       	adiw	r24, 0x19	; 25
    13fc:	0e 94 ff 05 	call	0xbfe	; 0xbfe <localization_calc>
    1400:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    1402:	fc 01       	movw	r30, r24
    1404:	80 85       	ldd	r24, Z+8	; 0x08
    1406:	91 85       	ldd	r25, Z+9	; 0x09
    1408:	a2 85       	ldd	r26, Z+10	; 0x0a
    140a:	b3 85       	ldd	r27, Z+11	; 0x0b
    140c:	0f 2e       	mov	r0, r31
    140e:	f8 e1       	ldi	r31, 0x18	; 24
    1410:	2f 2e       	mov	r2, r31
    1412:	f1 e0       	ldi	r31, 0x01	; 1
    1414:	3f 2e       	mov	r3, r31
    1416:	f0 2d       	mov	r31, r0
    1418:	f1 01       	movw	r30, r2
    141a:	80 87       	std	Z+8, r24	; 0x08
    141c:	91 87       	std	Z+9, r25	; 0x09
    141e:	a2 87       	std	Z+10, r26	; 0x0a
    1420:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    1422:	f8 01       	movw	r30, r16
    1424:	60 85       	ldd	r22, Z+8	; 0x08
    1426:	71 85       	ldd	r23, Z+9	; 0x09
    1428:	82 85       	ldd	r24, Z+10	; 0x0a
    142a:	93 85       	ldd	r25, Z+11	; 0x0b
    142c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <theta_error_correction>
    1430:	2b 01       	movw	r4, r22
    1432:	3c 01       	movw	r6, r24
    1434:	f8 01       	movw	r30, r16
    1436:	60 87       	std	Z+8, r22	; 0x08
    1438:	71 87       	std	Z+9, r23	; 0x09
    143a:	82 87       	std	Z+10, r24	; 0x0a
    143c:	93 87       	std	Z+11, r25	; 0x0b
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    143e:	24 ea       	ldi	r18, 0xA4	; 164
    1440:	30 e7       	ldi	r19, 0x70	; 112
    1442:	4d e7       	ldi	r20, 0x7D	; 125
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	60 81       	ld	r22, Z
    1448:	71 81       	ldd	r23, Z+1	; 0x01
    144a:	82 81       	ldd	r24, Z+2	; 0x02
    144c:	93 81       	ldd	r25, Z+3	; 0x03
    144e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    1452:	4b 01       	movw	r8, r22
    1454:	5c 01       	movw	r10, r24
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	37 ed       	ldi	r19, 0xD7	; 215
    145a:	43 e2       	ldi	r20, 0x23	; 35
    145c:	5c e3       	ldi	r21, 0x3C	; 60
    145e:	60 91 b9 01 	lds	r22, 0x01B9
    1462:	70 91 ba 01 	lds	r23, 0x01BA
    1466:	80 91 bb 01 	lds	r24, 0x01BB
    146a:	90 91 bc 01 	lds	r25, 0x01BC
    146e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    1472:	9b 01       	movw	r18, r22
    1474:	ac 01       	movw	r20, r24
    1476:	c5 01       	movw	r24, r10
    1478:	b4 01       	movw	r22, r8
    147a:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
    147e:	4b 01       	movw	r8, r22
    1480:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    1482:	60 93 b9 01 	sts	0x01B9, r22
    1486:	70 93 ba 01 	sts	0x01BA, r23
    148a:	80 93 bb 01 	sts	0x01BB, r24
    148e:	90 93 bc 01 	sts	0x01BC, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1492:	24 ea       	ldi	r18, 0xA4	; 164
    1494:	30 e7       	ldi	r19, 0x70	; 112
    1496:	4d e7       	ldi	r20, 0x7D	; 125
    1498:	5f e3       	ldi	r21, 0x3F	; 63
    149a:	f8 01       	movw	r30, r16
    149c:	64 81       	ldd	r22, Z+4	; 0x04
    149e:	75 81       	ldd	r23, Z+5	; 0x05
    14a0:	86 81       	ldd	r24, Z+6	; 0x06
    14a2:	97 81       	ldd	r25, Z+7	; 0x07
    14a4:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    14a8:	6b 01       	movw	r12, r22
    14aa:	7c 01       	movw	r14, r24
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	37 ed       	ldi	r19, 0xD7	; 215
    14b0:	43 e2       	ldi	r20, 0x23	; 35
    14b2:	5c e3       	ldi	r21, 0x3C	; 60
    14b4:	60 91 b5 01 	lds	r22, 0x01B5
    14b8:	70 91 b6 01 	lds	r23, 0x01B6
    14bc:	80 91 b7 01 	lds	r24, 0x01B7
    14c0:	90 91 b8 01 	lds	r25, 0x01B8
    14c4:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    14c8:	9b 01       	movw	r18, r22
    14ca:	ac 01       	movw	r20, r24
    14cc:	c7 01       	movw	r24, r14
    14ce:	b6 01       	movw	r22, r12
    14d0:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
    14d4:	6b 01       	movw	r12, r22
    14d6:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    14d8:	60 93 b5 01 	sts	0x01B5, r22
    14dc:	70 93 b6 01 	sts	0x01B6, r23
    14e0:	80 93 b7 01 	sts	0x01B7, r24
    14e4:	90 93 b8 01 	sts	0x01B8, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    14e8:	24 ea       	ldi	r18, 0xA4	; 164
    14ea:	30 e7       	ldi	r19, 0x70	; 112
    14ec:	4d e7       	ldi	r20, 0x7D	; 125
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	c3 01       	movw	r24, r6
    14f2:	b2 01       	movw	r22, r4
    14f4:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    14f8:	2b 01       	movw	r4, r22
    14fa:	3c 01       	movw	r6, r24
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	37 ed       	ldi	r19, 0xD7	; 215
    1500:	43 e2       	ldi	r20, 0x23	; 35
    1502:	5c e3       	ldi	r21, 0x3C	; 60
    1504:	60 91 b1 01 	lds	r22, 0x01B1
    1508:	70 91 b2 01 	lds	r23, 0x01B2
    150c:	80 91 b3 01 	lds	r24, 0x01B3
    1510:	90 91 b4 01 	lds	r25, 0x01B4
    1514:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    1518:	9b 01       	movw	r18, r22
    151a:	ac 01       	movw	r20, r24
    151c:	c3 01       	movw	r24, r6
    151e:	b2 01       	movw	r22, r4
    1520:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    1524:	60 93 b1 01 	sts	0x01B1, r22
    1528:	70 93 b2 01 	sts	0x01B2, r23
    152c:	80 93 b3 01 	sts	0x01B3, r24
    1530:	90 93 b4 01 	sts	0x01B4, r25
	
	robotCenterPrev[0] = x;
    1534:	f1 01       	movw	r30, r2
    1536:	80 82       	st	Z, r8
    1538:	91 82       	std	Z+1, r9	; 0x01
    153a:	a2 82       	std	Z+2, r10	; 0x02
    153c:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    153e:	c4 82       	std	Z+4, r12	; 0x04
    1540:	d5 82       	std	Z+5, r13	; 0x05
    1542:	e6 82       	std	Z+6, r14	; 0x06
    1544:	f7 82       	std	Z+7, r15	; 0x07
}
    1546:	a8 96       	adiw	r28, 0x28	; 40
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	bf 90       	pop	r11
    1564:	af 90       	pop	r10
    1566:	9f 90       	pop	r9
    1568:	8f 90       	pop	r8
    156a:	7f 90       	pop	r7
    156c:	6f 90       	pop	r6
    156e:	5f 90       	pop	r5
    1570:	4f 90       	pop	r4
    1572:	3f 90       	pop	r3
    1574:	2f 90       	pop	r2
    1576:	08 95       	ret

00001578 <run_motor_control_loop>:



/* PID Control */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd)
{
    1578:	4f 92       	push	r4
    157a:	5f 92       	push	r5
    157c:	6f 92       	push	r6
    157e:	7f 92       	push	r7
    1580:	8f 92       	push	r8
    1582:	9f 92       	push	r9
    1584:	af 92       	push	r10
    1586:	bf 92       	push	r11
    1588:	cf 92       	push	r12
    158a:	df 92       	push	r13
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	64 97       	sbiw	r28, 0x14	; 20
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	29 01       	movw	r4, r18
    15aa:	3a 01       	movw	r6, r20
    15ac:	ed 86       	std	Y+13, r14	; 0x0d
    15ae:	fe 86       	std	Y+14, r15	; 0x0e
    15b0:	0f 87       	std	Y+15, r16	; 0x0f
    15b2:	18 8b       	std	Y+16, r17	; 0x10
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    15b4:	20 91 b9 01 	lds	r18, 0x01B9
    15b8:	30 91 ba 01 	lds	r19, 0x01BA
    15bc:	40 91 bb 01 	lds	r20, 0x01BB
    15c0:	50 91 bc 01 	lds	r21, 0x01BC
    15c4:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
    15c8:	6d 83       	std	Y+5, r22	; 0x05
    15ca:	7e 83       	std	Y+6, r23	; 0x06
    15cc:	8f 83       	std	Y+7, r24	; 0x07
    15ce:	98 87       	std	Y+8, r25	; 0x08
    15d0:	20 91 b5 01 	lds	r18, 0x01B5
    15d4:	30 91 b6 01 	lds	r19, 0x01B6
    15d8:	40 91 b7 01 	lds	r20, 0x01B7
    15dc:	50 91 b8 01 	lds	r21, 0x01B8
    15e0:	c3 01       	movw	r24, r6
    15e2:	b2 01       	movw	r22, r4
    15e4:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
    15e8:	69 87       	std	Y+9, r22	; 0x09
    15ea:	7a 87       	std	Y+10, r23	; 0x0a
    15ec:	8b 87       	std	Y+11, r24	; 0x0b
    15ee:	9c 87       	std	Y+12, r25	; 0x0c
    15f0:	2d 81       	ldd	r18, Y+5	; 0x05
    15f2:	3e 81       	ldd	r19, Y+6	; 0x06
    15f4:	4f 81       	ldd	r20, Y+7	; 0x07
    15f6:	58 85       	ldd	r21, Y+8	; 0x08
    15f8:	0e 94 93 14 	call	0x2926	; 0x2926 <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    15fc:	20 91 b1 01 	lds	r18, 0x01B1
    1600:	30 91 b2 01 	lds	r19, 0x01B2
    1604:	40 91 b3 01 	lds	r20, 0x01B3
    1608:	50 91 b4 01 	lds	r21, 0x01B4
    160c:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
	theta_error = theta_error_correction(theta_error);
    1610:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <theta_error_correction>
    1614:	69 83       	std	Y+1, r22	; 0x01
    1616:	7a 83       	std	Y+2, r23	; 0x02
    1618:	8b 83       	std	Y+3, r24	; 0x03
    161a:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    161c:	2b 01       	movw	r4, r22
    161e:	3c 01       	movw	r6, r24
    1620:	e8 94       	clt
    1622:	77 f8       	bld	r7, 7
    1624:	a6 01       	movw	r20, r12
    1626:	95 01       	movw	r18, r10
    1628:	c3 01       	movw	r24, r6
    162a:	b2 01       	movw	r22, r4
    162c:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__gesf2>
    1630:	18 16       	cp	r1, r24
    1632:	84 f4       	brge	.+32     	; 0x1654 <run_motor_control_loop+0xdc>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    1634:	29 81       	ldd	r18, Y+1	; 0x01
    1636:	3a 81       	ldd	r19, Y+2	; 0x02
    1638:	4b 81       	ldd	r20, Y+3	; 0x03
    163a:	5c 81       	ldd	r21, Y+4	; 0x04
    163c:	c3 01       	movw	r24, r6
    163e:	b2 01       	movw	r22, r4
    1640:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__divsf3>
    1644:	a6 01       	movw	r20, r12
    1646:	95 01       	movw	r18, r10
    1648:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    164c:	69 83       	std	Y+1, r22	; 0x01
    164e:	7a 83       	std	Y+2, r23	; 0x02
    1650:	8b 83       	std	Y+3, r24	; 0x03
    1652:	9c 83       	std	Y+4, r25	; 0x04
	}

	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    1654:	29 81       	ldd	r18, Y+1	; 0x01
    1656:	3a 81       	ldd	r19, Y+2	; 0x02
    1658:	4b 81       	ldd	r20, Y+3	; 0x03
    165a:	5c 81       	ldd	r21, Y+4	; 0x04
    165c:	6f a1       	ldd	r22, Y+39	; 0x27
    165e:	78 a5       	ldd	r23, Y+40	; 0x28
    1660:	89 a5       	ldd	r24, Y+41	; 0x29
    1662:	9a a5       	ldd	r25, Y+42	; 0x2a
    1664:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    1668:	6b 01       	movw	r12, r22
    166a:	7c 01       	movw	r14, r24
	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
		theta_error = fabs(theta_error)/theta_error*max_theta;
	}

	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
    166c:	20 91 ad 01 	lds	r18, 0x01AD
    1670:	30 91 ae 01 	lds	r19, 0x01AE
    1674:	40 91 af 01 	lds	r20, 0x01AF
    1678:	50 91 b0 01 	lds	r21, 0x01B0
    167c:	69 81       	ldd	r22, Y+1	; 0x01
    167e:	7a 81       	ldd	r23, Y+2	; 0x02
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
    1688:	2f e6       	ldi	r18, 0x6F	; 111
    168a:	32 e1       	ldi	r19, 0x12	; 18
    168c:	43 e8       	ldi	r20, 0x83	; 131
    168e:	5a e3       	ldi	r21, 0x3A	; 58
    1690:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__divsf3>
    1694:	9b 01       	movw	r18, r22
    1696:	ac 01       	movw	r20, r24
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    1698:	6b a5       	ldd	r22, Y+43	; 0x2b
    169a:	7c a5       	ldd	r23, Y+44	; 0x2c
    169c:	8d a5       	ldd	r24, Y+45	; 0x2d
    169e:	9e a5       	ldd	r25, Y+46	; 0x2e
    16a0:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    16a4:	9b 01       	movw	r18, r22
    16a6:	ac 01       	movw	r20, r24
    16a8:	c7 01       	movw	r24, r14
    16aa:	b6 01       	movw	r22, r12
    16ac:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
	previous_theta_error = theta_error;
    16b0:	29 81       	ldd	r18, Y+1	; 0x01
    16b2:	3a 81       	ldd	r19, Y+2	; 0x02
    16b4:	4b 81       	ldd	r20, Y+3	; 0x03
    16b6:	5c 81       	ldd	r21, Y+4	; 0x04
    16b8:	20 93 ad 01 	sts	0x01AD, r18
    16bc:	30 93 ae 01 	sts	0x01AE, r19
    16c0:	40 93 af 01 	sts	0x01AF, r20
    16c4:	50 93 b0 01 	sts	0x01B0, r21
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    16c8:	2b ed       	ldi	r18, 0xDB	; 219
    16ca:	3f e0       	ldi	r19, 0x0F	; 15
    16cc:	49 e4       	ldi	r20, 0x49	; 73
    16ce:	50 e4       	ldi	r21, 0x40	; 64
    16d0:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__divsf3>
    16d4:	2b 01       	movw	r4, r22
    16d6:	3c 01       	movw	r6, r24
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	b0 58       	subi	r27, 0x80	; 128
    16de:	89 8b       	std	Y+17, r24	; 0x11
    16e0:	9a 8b       	std	Y+18, r25	; 0x12
    16e2:	ab 8b       	std	Y+19, r26	; 0x13
    16e4:	bc 8b       	std	Y+20, r27	; 0x14
	right_duty_cycle = angular_output;
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    16e6:	69 81       	ldd	r22, Y+1	; 0x01
    16e8:	7a 81       	ldd	r23, Y+2	; 0x02
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	0e 94 f7 14 	call	0x29ee	; 0x29ee <cos>
    16f2:	6b 01       	movw	r12, r22
    16f4:	7c 01       	movw	r14, r24
    16f6:	29 85       	ldd	r18, Y+9	; 0x09
    16f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16fa:	4b 85       	ldd	r20, Y+11	; 0x0b
    16fc:	5c 85       	ldd	r21, Y+12	; 0x0c
    16fe:	ca 01       	movw	r24, r20
    1700:	b9 01       	movw	r22, r18
    1702:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    1706:	4b 01       	movw	r8, r22
    1708:	5c 01       	movw	r10, r24
    170a:	2d 81       	ldd	r18, Y+5	; 0x05
    170c:	3e 81       	ldd	r19, Y+6	; 0x06
    170e:	4f 81       	ldd	r20, Y+7	; 0x07
    1710:	58 85       	ldd	r21, Y+8	; 0x08
    1712:	ca 01       	movw	r24, r20
    1714:	b9 01       	movw	r22, r18
    1716:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    171a:	9b 01       	movw	r18, r22
    171c:	ac 01       	movw	r20, r24
    171e:	c5 01       	movw	r24, r10
    1720:	b4 01       	movw	r22, r8
    1722:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
    1726:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <sqrt>
    172a:	9b 01       	movw	r18, r22
    172c:	ac 01       	movw	r20, r24
    172e:	c7 01       	movw	r24, r14
    1730:	b6 01       	movw	r22, r12
    1732:	9f 77       	andi	r25, 0x7F	; 127
    1734:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    1738:	6b 01       	movw	r12, r22
    173a:	7c 01       	movw	r14, r24
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    173c:	9b 01       	movw	r18, r22
    173e:	ac 01       	movw	r20, r24
    1740:	6f a5       	ldd	r22, Y+47	; 0x2f
    1742:	78 a9       	ldd	r23, Y+48	; 0x30
    1744:	89 a9       	ldd	r24, Y+49	; 0x31
    1746:	9a a9       	ldd	r25, Y+50	; 0x32
    1748:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    174c:	4b 01       	movw	r8, r22
    174e:	5c 01       	movw	r10, r24
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
    1750:	20 91 a9 01 	lds	r18, 0x01A9
    1754:	30 91 aa 01 	lds	r19, 0x01AA
    1758:	40 91 ab 01 	lds	r20, 0x01AB
    175c:	50 91 ac 01 	lds	r21, 0x01AC
    1760:	c7 01       	movw	r24, r14
    1762:	b6 01       	movw	r22, r12
    1764:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
    1768:	2f e6       	ldi	r18, 0x6F	; 111
    176a:	32 e1       	ldi	r19, 0x12	; 18
    176c:	43 e8       	ldi	r20, 0x83	; 131
    176e:	5a e3       	ldi	r21, 0x3A	; 58
    1770:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__divsf3>
    1774:	9b 01       	movw	r18, r22
    1776:	ac 01       	movw	r20, r24
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    1778:	6b a9       	ldd	r22, Y+51	; 0x33
    177a:	7c a9       	ldd	r23, Y+52	; 0x34
    177c:	8d a9       	ldd	r24, Y+53	; 0x35
    177e:	9e a9       	ldd	r25, Y+54	; 0x36
    1780:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    1784:	9b 01       	movw	r18, r22
    1786:	ac 01       	movw	r20, r24
    1788:	c5 01       	movw	r24, r10
    178a:	b4 01       	movw	r22, r8
    178c:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
    1790:	4b 01       	movw	r8, r22
    1792:	5c 01       	movw	r10, r24
	previous_linear_error = linear_error;
    1794:	c0 92 a9 01 	sts	0x01A9, r12
    1798:	d0 92 aa 01 	sts	0x01AA, r13
    179c:	e0 92 ab 01 	sts	0x01AB, r14
    17a0:	f0 92 ac 01 	sts	0x01AC, r15
	if(linear_output>40.0){linear_output=40.0;}
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e2       	ldi	r20, 0x20	; 32
    17aa:	52 e4       	ldi	r21, 0x42	; 66
    17ac:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__gesf2>
    17b0:	18 16       	cp	r1, r24
    17b2:	44 f4       	brge	.+16     	; 0x17c4 <run_motor_control_loop+0x24c>
    17b4:	0f 2e       	mov	r0, r31
    17b6:	81 2c       	mov	r8, r1
    17b8:	91 2c       	mov	r9, r1
    17ba:	f0 e2       	ldi	r31, 0x20	; 32
    17bc:	af 2e       	mov	r10, r31
    17be:	f2 e4       	ldi	r31, 0x42	; 66
    17c0:	bf 2e       	mov	r11, r31
    17c2:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e2       	ldi	r20, 0x20	; 32
    17ca:	52 e4       	ldi	r21, 0x42	; 66
    17cc:	c5 01       	movw	r24, r10
    17ce:	b4 01       	movw	r22, r8
    17d0:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__divsf3>
    17d4:	6b 01       	movw	r12, r22
    17d6:	7c 01       	movw	r14, r24
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    17d8:	69 81       	ldd	r22, Y+1	; 0x01
    17da:	7a 81       	ldd	r23, Y+2	; 0x02
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	9f 77       	andi	r25, 0x7F	; 127
    17e2:	2b ed       	ldi	r18, 0xDB	; 219
    17e4:	3f e0       	ldi	r19, 0x0F	; 15
    17e6:	49 ec       	ldi	r20, 0xC9	; 201
    17e8:	5f e3       	ldi	r21, 0x3F	; 63
    17ea:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__cmpsf2>
    17ee:	88 23       	and	r24, r24
    17f0:	ec f4       	brge	.+58     	; 0x182c <run_motor_control_loop+0x2b4>
		left_duty_cycle += linear_output;
    17f2:	a3 01       	movw	r20, r6
    17f4:	92 01       	movw	r18, r4
    17f6:	c7 01       	movw	r24, r14
    17f8:	b6 01       	movw	r22, r12
    17fa:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
    17fe:	60 93 14 01 	sts	0x0114, r22
    1802:	70 93 15 01 	sts	0x0115, r23
    1806:	80 93 16 01 	sts	0x0116, r24
    180a:	90 93 17 01 	sts	0x0117, r25
		right_duty_cycle += linear_output;
    180e:	a7 01       	movw	r20, r14
    1810:	96 01       	movw	r18, r12
    1812:	c3 01       	movw	r24, r6
    1814:	b2 01       	movw	r22, r4
    1816:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
    181a:	60 93 10 01 	sts	0x0110, r22
    181e:	70 93 11 01 	sts	0x0111, r23
    1822:	80 93 12 01 	sts	0x0112, r24
    1826:	90 93 13 01 	sts	0x0113, r25
    182a:	1e c0       	rjmp	.+60     	; 0x1868 <run_motor_control_loop+0x2f0>
		} else{
		left_duty_cycle -= linear_output;
    182c:	a7 01       	movw	r20, r14
    182e:	96 01       	movw	r18, r12
    1830:	69 89       	ldd	r22, Y+17	; 0x11
    1832:	7a 89       	ldd	r23, Y+18	; 0x12
    1834:	8b 89       	ldd	r24, Y+19	; 0x13
    1836:	9c 89       	ldd	r25, Y+20	; 0x14
    1838:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
    183c:	60 93 14 01 	sts	0x0114, r22
    1840:	70 93 15 01 	sts	0x0115, r23
    1844:	80 93 16 01 	sts	0x0116, r24
    1848:	90 93 17 01 	sts	0x0117, r25
		right_duty_cycle -= linear_output;
    184c:	a7 01       	movw	r20, r14
    184e:	96 01       	movw	r18, r12
    1850:	c3 01       	movw	r24, r6
    1852:	b2 01       	movw	r22, r4
    1854:	0e 94 13 14 	call	0x2826	; 0x2826 <__subsf3>
    1858:	60 93 10 01 	sts	0x0110, r22
    185c:	70 93 11 01 	sts	0x0111, r23
    1860:	80 93 12 01 	sts	0x0112, r24
    1864:	90 93 13 01 	sts	0x0113, r25
	}
	
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	a9 01       	movw	r20, r18
    186e:	60 91 14 01 	lds	r22, 0x0114
    1872:	70 91 15 01 	lds	r23, 0x0115
    1876:	80 91 16 01 	lds	r24, 0x0116
    187a:	90 91 17 01 	lds	r25, 0x0117
    187e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__cmpsf2>
    1882:	88 23       	and	r24, r24
    1884:	14 f4       	brge	.+4      	; 0x188a <run_motor_control_loop+0x312>
    1886:	29 98       	cbi	0x05, 1	; 5
    1888:	01 c0       	rjmp	.+2      	; 0x188c <run_motor_control_loop+0x314>
	else{set(PORTB,1);}
    188a:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	a9 01       	movw	r20, r18
    1892:	60 91 10 01 	lds	r22, 0x0110
    1896:	70 91 11 01 	lds	r23, 0x0111
    189a:	80 91 12 01 	lds	r24, 0x0112
    189e:	90 91 13 01 	lds	r25, 0x0113
    18a2:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__cmpsf2>
    18a6:	88 23       	and	r24, r24
    18a8:	14 f4       	brge	.+4      	; 0x18ae <run_motor_control_loop+0x336>
    18aa:	2b 98       	cbi	0x05, 3	; 5
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <run_motor_control_loop+0x338>
	else{set(PORTB,3);}
    18ae:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    18b0:	80 90 14 01 	lds	r8, 0x0114
    18b4:	90 90 15 01 	lds	r9, 0x0115
    18b8:	a0 90 16 01 	lds	r10, 0x0116
    18bc:	b0 90 17 01 	lds	r11, 0x0117
    18c0:	e8 94       	clt
    18c2:	b7 f8       	bld	r11, 7
    18c4:	80 92 14 01 	sts	0x0114, r8
    18c8:	90 92 15 01 	sts	0x0115, r9
    18cc:	a0 92 16 01 	sts	0x0116, r10
    18d0:	b0 92 17 01 	sts	0x0117, r11
	right_duty_cycle = fabs(right_duty_cycle);
    18d4:	c0 90 10 01 	lds	r12, 0x0110
    18d8:	d0 90 11 01 	lds	r13, 0x0111
    18dc:	e0 90 12 01 	lds	r14, 0x0112
    18e0:	f0 90 13 01 	lds	r15, 0x0113
    18e4:	e8 94       	clt
    18e6:	f7 f8       	bld	r15, 7
    18e8:	c0 92 10 01 	sts	0x0110, r12
    18ec:	d0 92 11 01 	sts	0x0111, r13
    18f0:	e0 92 12 01 	sts	0x0112, r14
    18f4:	f0 92 13 01 	sts	0x0113, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    18f8:	a7 01       	movw	r20, r14
    18fa:	96 01       	movw	r18, r12
    18fc:	c5 01       	movw	r24, r10
    18fe:	b4 01       	movw	r22, r8
    1900:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__gesf2>
    1904:	18 16       	cp	r1, r24
    1906:	2c f0       	brlt	.+10     	; 0x1912 <run_motor_control_loop+0x39a>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    1908:	1c 2d       	mov	r17, r12
    190a:	0d 2d       	mov	r16, r13
    190c:	7e 2c       	mov	r7, r14
    190e:	6f 2c       	mov	r6, r15
    1910:	04 c0       	rjmp	.+8      	; 0x191a <run_motor_control_loop+0x3a2>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    1912:	18 2d       	mov	r17, r8
    1914:	09 2d       	mov	r16, r9
    1916:	7a 2c       	mov	r7, r10
    1918:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    191a:	2d 85       	ldd	r18, Y+13	; 0x0d
    191c:	3e 85       	ldd	r19, Y+14	; 0x0e
    191e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1920:	58 89       	ldd	r21, Y+16	; 0x10
    1922:	61 2f       	mov	r22, r17
    1924:	70 2f       	mov	r23, r16
    1926:	87 2d       	mov	r24, r7
    1928:	96 2d       	mov	r25, r6
    192a:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__gesf2>
    192e:	18 16       	cp	r1, r24
    1930:	64 f5       	brge	.+88     	; 0x198a <run_motor_control_loop+0x412>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    1932:	21 2f       	mov	r18, r17
    1934:	30 2f       	mov	r19, r16
    1936:	47 2d       	mov	r20, r7
    1938:	56 2d       	mov	r21, r6
    193a:	c5 01       	movw	r24, r10
    193c:	b4 01       	movw	r22, r8
    193e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__divsf3>
    1942:	2d 85       	ldd	r18, Y+13	; 0x0d
    1944:	3e 85       	ldd	r19, Y+14	; 0x0e
    1946:	4f 85       	ldd	r20, Y+15	; 0x0f
    1948:	58 89       	ldd	r21, Y+16	; 0x10
    194a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    194e:	60 93 14 01 	sts	0x0114, r22
    1952:	70 93 15 01 	sts	0x0115, r23
    1956:	80 93 16 01 	sts	0x0116, r24
    195a:	90 93 17 01 	sts	0x0117, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    195e:	21 2f       	mov	r18, r17
    1960:	30 2f       	mov	r19, r16
    1962:	47 2d       	mov	r20, r7
    1964:	56 2d       	mov	r21, r6
    1966:	c7 01       	movw	r24, r14
    1968:	b6 01       	movw	r22, r12
    196a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__divsf3>
    196e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1970:	3e 85       	ldd	r19, Y+14	; 0x0e
    1972:	4f 85       	ldd	r20, Y+15	; 0x0f
    1974:	58 89       	ldd	r21, Y+16	; 0x10
    1976:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    197a:	60 93 10 01 	sts	0x0110, r22
    197e:	70 93 11 01 	sts	0x0111, r23
    1982:	80 93 12 01 	sts	0x0112, r24
    1986:	90 93 13 01 	sts	0x0113, r25
	}

	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    198a:	08 e8       	ldi	r16, 0x88	; 136
    198c:	10 e0       	ldi	r17, 0x00	; 0
    198e:	d8 01       	movw	r26, r16
    1990:	6d 91       	ld	r22, X+
    1992:	7c 91       	ld	r23, X
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__floatunsisf>
    199c:	20 91 14 01 	lds	r18, 0x0114
    19a0:	30 91 15 01 	lds	r19, 0x0115
    19a4:	40 91 16 01 	lds	r20, 0x0116
    19a8:	50 91 17 01 	lds	r21, 0x0117
    19ac:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    19b0:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__fixunssfsi>
    19b4:	70 93 8b 00 	sts	0x008B, r23
    19b8:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    19bc:	f8 01       	movw	r30, r16
    19be:	60 81       	ld	r22, Z
    19c0:	71 81       	ldd	r23, Z+1	; 0x01
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__floatunsisf>
    19ca:	20 91 10 01 	lds	r18, 0x0110
    19ce:	30 91 11 01 	lds	r19, 0x0111
    19d2:	40 91 12 01 	lds	r20, 0x0112
    19d6:	50 91 13 01 	lds	r21, 0x0113
    19da:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    19de:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__fixunssfsi>
    19e2:	70 93 8d 00 	sts	0x008D, r23
    19e6:	60 93 8c 00 	sts	0x008C, r22

}
    19ea:	64 96       	adiw	r28, 0x14	; 20
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	ff 90       	pop	r15
    1a00:	ef 90       	pop	r14
    1a02:	df 90       	pop	r13
    1a04:	cf 90       	pop	r12
    1a06:	bf 90       	pop	r11
    1a08:	af 90       	pop	r10
    1a0a:	9f 90       	pop	r9
    1a0c:	8f 90       	pop	r8
    1a0e:	7f 90       	pop	r7
    1a10:	6f 90       	pop	r6
    1a12:	5f 90       	pop	r5
    1a14:	4f 90       	pop	r4
    1a16:	08 95       	ret

00001a18 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    1a18:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1a1a:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1a1c:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1a1e:	8c e0       	ldi	r24, 0x0C	; 12
    1a20:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    1a24:	e9 e6       	ldi	r30, 0x69	; 105
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	80 62       	ori	r24, 0x20	; 32
    1a2c:	80 83       	st	Z, r24
    1a2e:	80 81       	ld	r24, Z
    1a30:	8f 7e       	andi	r24, 0xEF	; 239
    1a32:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1a34:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    1a36:	78 94       	sei
    1a38:	08 95       	ret

00001a3a <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	18 2f       	mov	r17, r24
    1a42:	d6 2f       	mov	r29, r22
    1a44:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1a46:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1a4a:	94 ea       	ldi	r25, 0xA4	; 164
    1a4c:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1a50:	ec eb       	ldi	r30, 0xBC	; 188
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	90 81       	ld	r25, Z
    1a56:	99 23       	and	r25, r25
    1a58:	ec f7       	brge	.-6      	; 0x1a54 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1a5a:	90 e5       	ldi	r25, 0x50	; 80
    1a5c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a60:	94 e8       	ldi	r25, 0x84	; 132
    1a62:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1a66:	ec eb       	ldi	r30, 0xBC	; 188
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	90 81       	ld	r25, Z
    1a6c:	99 23       	and	r25, r25
    1a6e:	ec f7       	brge	.-6      	; 0x1a6a <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1a70:	90 91 b9 00 	lds	r25, 0x00B9
    1a74:	98 7f       	andi	r25, 0xF8	; 248
    1a76:	90 32       	cpi	r25, 0x20	; 32
    1a78:	29 f4       	brne	.+10     	; 0x1a84 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1a7a:	84 e9       	ldi	r24, 0x94	; 148
    1a7c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	2d c0       	rjmp	.+90     	; 0x1ade <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a8a:	84 e8       	ldi	r24, 0x84	; 132
    1a8c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1a90:	ec eb       	ldi	r30, 0xBC	; 188
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	90 81       	ld	r25, Z
    1a96:	99 23       	and	r25, r25
    1a98:	ec f7       	brge	.-6      	; 0x1a94 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1a9a:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a9e:	84 e8       	ldi	r24, 0x84	; 132
    1aa0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1aa4:	ec eb       	ldi	r30, 0xBC	; 188
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	88 23       	and	r24, r24
    1aac:	ec f7       	brge	.-6      	; 0x1aa8 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1aae:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ab2:	84 e8       	ldi	r24, 0x84	; 132
    1ab4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1ab8:	ec eb       	ldi	r30, 0xBC	; 188
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	88 23       	and	r24, r24
    1ac0:	ec f7       	brge	.-6      	; 0x1abc <m_rf_open+0x82>
	
	TWDR = packet_length;
    1ac2:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ac6:	84 e8       	ldi	r24, 0x84	; 132
    1ac8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1acc:	ec eb       	ldi	r30, 0xBC	; 188
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	88 23       	and	r24, r24
    1ad4:	ec f7       	brge	.-6      	; 0x1ad0 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1ad6:	84 e9       	ldi	r24, 0x94	; 148
    1ad8:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
}
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	08 95       	ret

00001ae6 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1aec:	84 ea       	ldi	r24, 0xA4	; 164
    1aee:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1af2:	ec eb       	ldi	r30, 0xBC	; 188
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	90 81       	ld	r25, Z
    1af8:	99 23       	and	r25, r25
    1afa:	ec f7       	brge	.-6      	; 0x1af6 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1afc:	81 e5       	ldi	r24, 0x51	; 81
    1afe:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1b02:	84 e8       	ldi	r24, 0x84	; 132
    1b04:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1b08:	ec eb       	ldi	r30, 0xBC	; 188
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	90 81       	ld	r25, Z
    1b0e:	99 23       	and	r25, r25
    1b10:	ec f7       	brge	.-6      	; 0x1b0c <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1b12:	80 91 b9 00 	lds	r24, 0x00B9
    1b16:	88 7f       	andi	r24, 0xF8	; 248
    1b18:	88 34       	cpi	r24, 0x48	; 72
    1b1a:	29 f4       	brne	.+10     	; 0x1b26 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1b1c:	84 e9       	ldi	r24, 0x94	; 148
    1b1e:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	41 c0       	rjmp	.+130    	; 0x1ba8 <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1b26:	84 ec       	ldi	r24, 0xC4	; 196
    1b28:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1b2c:	ec eb       	ldi	r30, 0xBC	; 188
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	90 81       	ld	r25, Z
    1b32:	99 23       	and	r25, r25
    1b34:	ec f7       	brge	.-6      	; 0x1b30 <m_rf_read+0x4a>
	bytes = TWDR;
    1b36:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1b3a:	46 13       	cpse	r20, r22
    1b3c:	09 c0       	rjmp	.+18     	; 0x1b50 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1b3e:	84 2f       	mov	r24, r20
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	18 16       	cp	r1, r24
    1b46:	19 06       	cpc	r1, r25
    1b48:	44 f0       	brlt	.+16     	; 0x1b5a <m_rf_read+0x74>
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	1a c0       	rjmp	.+52     	; 0x1b84 <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1b50:	84 e9       	ldi	r24, 0x94	; 148
    1b52:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	27 c0       	rjmp	.+78     	; 0x1ba8 <m_rf_read+0xc2>
    1b5a:	d9 01       	movw	r26, r18
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	41 50       	subi	r20, 0x01	; 1
    1b60:	51 09       	sbc	r21, r1
    1b62:	b9 01       	movw	r22, r18
    1b64:	64 0f       	add	r22, r20
    1b66:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1b68:	ec eb       	ldi	r30, 0xBC	; 188
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1b6e:	cb eb       	ldi	r28, 0xBB	; 187
    1b70:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1b72:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1b74:	90 81       	ld	r25, Z
    1b76:	99 23       	and	r25, r25
    1b78:	ec f7       	brge	.-6      	; 0x1b74 <m_rf_read+0x8e>
		buffer[i] = TWDR;
    1b7a:	98 81       	ld	r25, Y
    1b7c:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1b7e:	a6 17       	cp	r26, r22
    1b80:	b7 07       	cpc	r27, r23
    1b82:	b9 f7       	brne	.-18     	; 0x1b72 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1b84:	84 e8       	ldi	r24, 0x84	; 132
    1b86:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1b8a:	ec eb       	ldi	r30, 0xBC	; 188
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	90 81       	ld	r25, Z
    1b90:	99 23       	and	r25, r25
    1b92:	ec f7       	brge	.-6      	; 0x1b8e <m_rf_read+0xa8>
	buffer[i++] = TWDR;
    1b94:	80 91 bb 00 	lds	r24, 0x00BB
    1b98:	f9 01       	movw	r30, r18
    1b9a:	e4 0f       	add	r30, r20
    1b9c:	f5 1f       	adc	r31, r21
    1b9e:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1ba0:	84 e9       	ldi	r24, 0x94	; 148
    1ba2:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
}
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	08 95       	ret

00001bae <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    1bb4:	80 ea       	ldi	r24, 0xA0	; 160
    1bb6:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    1bba:	82 e1       	ldi	r24, 0x12	; 18
    1bbc:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1bbe:	09 b4       	in	r0, 0x29	; 41
    1bc0:	00 fe       	sbrs	r0, 0
    1bc2:	fd cf       	rjmp	.-6      	; 0x1bbe <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1bc4:	80 e9       	ldi	r24, 0x90	; 144
    1bc6:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1bca:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1bce:	10 92 bf 01 	sts	0x01BF, r1
	cdc_line_rtsdtr = 0;
    1bd2:	10 92 bd 01 	sts	0x01BD, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    1bd6:	8c e0       	ldi	r24, 0x0C	; 12
    1bd8:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1bdc:	78 94       	sei
    1bde:	08 95       	ret

00001be0 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1be0:	1f 92       	push	r1
    1be2:	0f 92       	push	r0
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	0f 92       	push	r0
    1be8:	11 24       	eor	r1, r1
    1bea:	8f 93       	push	r24
    1bec:	9f 93       	push	r25
    1bee:	ef 93       	push	r30
    1bf0:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1bf2:	e1 ee       	ldi	r30, 0xE1	; 225
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
        UDINT = 0;
    1bf8:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1bfa:	83 ff       	sbrs	r24, 3
    1bfc:	11 c0       	rjmp	.+34     	; 0x1c20 <__vector_10+0x40>
		UENUM = 0;
    1bfe:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1c02:	91 e0       	ldi	r25, 0x01	; 1
    1c04:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1c08:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1c0c:	92 e1       	ldi	r25, 0x12	; 18
    1c0e:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1c12:	98 e0       	ldi	r25, 0x08	; 8
    1c14:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1c18:	10 92 bf 01 	sts	0x01BF, r1
		cdc_line_rtsdtr = 0;
    1c1c:	10 92 bd 01 	sts	0x01BD, r1
        }
	if (intbits & (1<<SOFI)) {
    1c20:	82 ff       	sbrs	r24, 2
    1c22:	13 c0       	rjmp	.+38     	; 0x1c4a <__vector_10+0x6a>
		if (usb_configuration) {
    1c24:	80 91 bf 01 	lds	r24, 0x01BF
    1c28:	88 23       	and	r24, r24
    1c2a:	79 f0       	breq	.+30     	; 0x1c4a <__vector_10+0x6a>
			t = transmit_flush_timer;
    1c2c:	80 91 be 01 	lds	r24, 0x01BE
			if (t) {
    1c30:	88 23       	and	r24, r24
    1c32:	59 f0       	breq	.+22     	; 0x1c4a <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1c34:	81 50       	subi	r24, 0x01	; 1
    1c36:	80 93 be 01 	sts	0x01BE, r24
				if (!t) {
    1c3a:	81 11       	cpse	r24, r1
    1c3c:	06 c0       	rjmp	.+12     	; 0x1c4a <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1c3e:	84 e0       	ldi	r24, 0x04	; 4
    1c40:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1c44:	8a e3       	ldi	r24, 0x3A	; 58
    1c46:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1c4a:	ff 91       	pop	r31
    1c4c:	ef 91       	pop	r30
    1c4e:	9f 91       	pop	r25
    1c50:	8f 91       	pop	r24
    1c52:	0f 90       	pop	r0
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	0f 90       	pop	r0
    1c58:	1f 90       	pop	r1
    1c5a:	18 95       	reti

00001c5c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1c5c:	1f 92       	push	r1
    1c5e:	0f 92       	push	r0
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	0f 92       	push	r0
    1c64:	11 24       	eor	r1, r1
    1c66:	0f 93       	push	r16
    1c68:	1f 93       	push	r17
    1c6a:	2f 93       	push	r18
    1c6c:	3f 93       	push	r19
    1c6e:	4f 93       	push	r20
    1c70:	5f 93       	push	r21
    1c72:	6f 93       	push	r22
    1c74:	7f 93       	push	r23
    1c76:	8f 93       	push	r24
    1c78:	9f 93       	push	r25
    1c7a:	af 93       	push	r26
    1c7c:	bf 93       	push	r27
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	ef 93       	push	r30
    1c84:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1c86:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1c8a:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1c8e:	83 ff       	sbrs	r24, 3
    1c90:	4c c1       	rjmp	.+664    	; 0x1f2a <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    1c92:	e1 ef       	ldi	r30, 0xF1	; 241
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    1c98:	80 81       	ld	r24, Z
                wValue = UEDATX;
    1c9a:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1c9c:	90 81       	ld	r25, Z
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    1ca2:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    1ca4:	90 81       	ld	r25, Z
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	59 2b       	or	r21, r25
                wLength = UEDATX;
    1caa:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    1cac:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1cae:	92 ef       	ldi	r25, 0xF2	; 242
    1cb0:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    1cb4:	86 30       	cpi	r24, 0x06	; 6
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <__vector_11+0x5e>
    1cb8:	58 c0       	rjmp	.+176    	; 0x1d6a <__vector_11+0x10e>
    1cba:	04 c0       	rjmp	.+8      	; 0x1cc4 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1cbc:	81 e2       	ldi	r24, 0x21	; 33
    1cbe:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1cc2:	3a c1       	rjmp	.+628    	; 0x1f38 <__vector_11+0x2dc>
    1cc4:	66 e0       	ldi	r22, 0x06	; 6
    1cc6:	80 e2       	ldi	r24, 0x20	; 32
    1cc8:	91 e0       	ldi	r25, 0x01	; 1
				}
				desc_val = pgm_read_word(list);
    1cca:	fc 01       	movw	r30, r24
    1ccc:	a5 91       	lpm	r26, Z+
    1cce:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    1cd0:	2a 17       	cp	r18, r26
    1cd2:	3b 07       	cpc	r19, r27
    1cd4:	11 f0       	breq	.+4      	; 0x1cda <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    1cd6:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1cd8:	23 c0       	rjmp	.+70     	; 0x1d20 <__vector_11+0xc4>
				}
				list += 2;
    1cda:	fc 01       	movw	r30, r24
    1cdc:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1cde:	a5 91       	lpm	r26, Z+
    1ce0:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    1ce2:	4a 17       	cp	r20, r26
    1ce4:	5b 07       	cpc	r21, r27
    1ce6:	11 f0       	breq	.+4      	; 0x1cec <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    1ce8:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1cea:	1a c0       	rjmp	.+52     	; 0x1d20 <__vector_11+0xc4>
				}
				list += 2;
    1cec:	fc 01       	movw	r30, r24
    1cee:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1cf0:	45 91       	lpm	r20, Z+
    1cf2:	54 91       	lpm	r21, Z
				list += 2;
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1cf8:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1cfa:	87 2f       	mov	r24, r23
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1d00:	8f 3f       	cpi	r24, 0xFF	; 255
    1d02:	91 05       	cpc	r25, r1
    1d04:	19 f0       	breq	.+6      	; 0x1d0c <__vector_11+0xb0>
    1d06:	10 f0       	brcs	.+4      	; 0x1d0c <__vector_11+0xb0>
    1d08:	8f ef       	ldi	r24, 0xFF	; 255
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	82 17       	cp	r24, r18
    1d0e:	08 f4       	brcc	.+2      	; 0x1d12 <__vector_11+0xb6>
    1d10:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1d12:	a8 ee       	ldi	r26, 0xE8	; 232
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1d16:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d18:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1d1a:	c1 ef       	ldi	r28, 0xF1	; 241
    1d1c:	d0 e0       	ldi	r29, 0x00	; 0
    1d1e:	03 c0       	rjmp	.+6      	; 0x1d26 <__vector_11+0xca>
    1d20:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1d22:	99 f6       	brne	.-90     	; 0x1cca <__vector_11+0x6e>
    1d24:	cb cf       	rjmp	.-106    	; 0x1cbc <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1d26:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1d28:	98 2f       	mov	r25, r24
    1d2a:	95 70       	andi	r25, 0x05	; 5
    1d2c:	e1 f3       	breq	.-8      	; 0x1d26 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    1d2e:	82 fd       	sbrc	r24, 2
    1d30:	03 c1       	rjmp	.+518    	; 0x1f38 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1d32:	32 2f       	mov	r19, r18
    1d34:	21 31       	cpi	r18, 0x11	; 17
    1d36:	08 f0       	brcs	.+2      	; 0x1d3a <__vector_11+0xde>
    1d38:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    1d3a:	33 23       	and	r19, r19
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <__vector_11+0xe4>
    1d3e:	f9 c0       	rjmp	.+498    	; 0x1f32 <__vector_11+0x2d6>
    1d40:	fa 01       	movw	r30, r20
    1d42:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    1d44:	94 91       	lpm	r25, Z
    1d46:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1d48:	81 50       	subi	r24, 0x01	; 1
    1d4a:	31 96       	adiw	r30, 0x01	; 1
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	fa cf       	rjmp	.-12     	; 0x1d44 <__vector_11+0xe8>
    1d50:	8f ef       	ldi	r24, 0xFF	; 255
    1d52:	83 0f       	add	r24, r19
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	01 96       	adiw	r24, 0x01	; 1
    1d58:	48 0f       	add	r20, r24
    1d5a:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1d5c:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d5e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1d60:	21 11       	cpse	r18, r1
    1d62:	e1 cf       	rjmp	.-62     	; 0x1d26 <__vector_11+0xca>
    1d64:	30 31       	cpi	r19, 0x10	; 16
    1d66:	f9 f2       	breq	.-66     	; 0x1d26 <__vector_11+0xca>
    1d68:	e7 c0       	rjmp	.+462    	; 0x1f38 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1d6a:	85 30       	cpi	r24, 0x05	; 5
    1d6c:	61 f4       	brne	.+24     	; 0x1d86 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d6e:	8e ef       	ldi	r24, 0xFE	; 254
    1d70:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1d74:	e8 ee       	ldi	r30, 0xE8	; 232
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	80 ff       	sbrs	r24, 0
    1d7c:	fd cf       	rjmp	.-6      	; 0x1d78 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1d7e:	20 68       	ori	r18, 0x80	; 128
    1d80:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1d84:	d9 c0       	rjmp	.+434    	; 0x1f38 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1d86:	89 30       	cpi	r24, 0x09	; 9
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <__vector_11+0x130>
    1d8a:	35 c0       	rjmp	.+106    	; 0x1df6 <__vector_11+0x19a>
    1d8c:	61 11       	cpse	r22, r1
    1d8e:	cd c0       	rjmp	.+410    	; 0x1f2a <__vector_11+0x2ce>
			usb_configuration = wValue;
    1d90:	20 93 bf 01 	sts	0x01BF, r18
			cdc_line_rtsdtr = 0;
    1d94:	10 92 bd 01 	sts	0x01BD, r1
			transmit_flush_timer = 0;
    1d98:	10 92 be 01 	sts	0x01BE, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d9c:	8e ef       	ldi	r24, 0xFE	; 254
    1d9e:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1da2:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1da4:	29 ec       	ldi	r18, 0xC9	; 201
    1da6:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1da8:	c9 ee       	ldi	r28, 0xE9	; 233
    1daa:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1dac:	ab ee       	ldi	r26, 0xEB	; 235
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1db0:	0c ee       	ldi	r16, 0xEC	; 236
    1db2:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1db4:	6d ee       	ldi	r22, 0xED	; 237
    1db6:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1db8:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    1dba:	a9 01       	movw	r20, r18
    1dbc:	4f 5f       	subi	r20, 0xFF	; 255
    1dbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc0:	f9 01       	movw	r30, r18
    1dc2:	94 91       	lpm	r25, Z
				UECONX = en;
    1dc4:	9c 93       	st	X, r25
				if (en) {
    1dc6:	99 23       	and	r25, r25
    1dc8:	61 f0       	breq	.+24     	; 0x1de2 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    1dca:	fa 01       	movw	r30, r20
    1dcc:	44 91       	lpm	r20, Z
    1dce:	f8 01       	movw	r30, r16
    1dd0:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    1dd2:	f9 01       	movw	r30, r18
    1dd4:	32 96       	adiw	r30, 0x02	; 2
    1dd6:	94 91       	lpm	r25, Z
    1dd8:	2d 5f       	subi	r18, 0xFD	; 253
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	fb 01       	movw	r30, r22
    1dde:	90 83       	st	Z, r25
    1de0:	01 c0       	rjmp	.+2      	; 0x1de4 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1de2:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1de4:	8f 5f       	subi	r24, 0xFF	; 255
    1de6:	85 30       	cpi	r24, 0x05	; 5
    1de8:	39 f7       	brne	.-50     	; 0x1db8 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1dea:	ea ee       	ldi	r30, 0xEA	; 234
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	8e e1       	ldi	r24, 0x1E	; 30
    1df0:	80 83       	st	Z, r24
        		UERST = 0;
    1df2:	10 82       	st	Z, r1
			return;
    1df4:	a1 c0       	rjmp	.+322    	; 0x1f38 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1df6:	88 30       	cpi	r24, 0x08	; 8
    1df8:	81 f4       	brne	.+32     	; 0x1e1a <__vector_11+0x1be>
    1dfa:	60 38       	cpi	r22, 0x80	; 128
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <__vector_11+0x1a4>
    1dfe:	95 c0       	rjmp	.+298    	; 0x1f2a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1e00:	e8 ee       	ldi	r30, 0xE8	; 232
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	80 ff       	sbrs	r24, 0
    1e08:	fd cf       	rjmp	.-6      	; 0x1e04 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1e0a:	80 91 bf 01 	lds	r24, 0x01BF
    1e0e:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e12:	8e ef       	ldi	r24, 0xFE	; 254
    1e14:	80 93 e8 00 	sts	0x00E8, r24
    1e18:	8f c0       	rjmp	.+286    	; 0x1f38 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1e1a:	81 32       	cpi	r24, 0x21	; 33
    1e1c:	b9 f4       	brne	.+46     	; 0x1e4c <__vector_11+0x1f0>
    1e1e:	61 3a       	cpi	r22, 0xA1	; 161
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <__vector_11+0x1c8>
    1e22:	83 c0       	rjmp	.+262    	; 0x1f2a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1e24:	e8 ee       	ldi	r30, 0xE8	; 232
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	80 ff       	sbrs	r24, 0
    1e2c:	fd cf       	rjmp	.-6      	; 0x1e28 <__vector_11+0x1cc>
    1e2e:	e4 e2       	ldi	r30, 0x24	; 36
    1e30:	f1 e0       	ldi	r31, 0x01	; 1
    1e32:	2b e2       	ldi	r18, 0x2B	; 43
    1e34:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1e36:	a1 ef       	ldi	r26, 0xF1	; 241
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	81 91       	ld	r24, Z+
    1e3c:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1e3e:	e2 17       	cp	r30, r18
    1e40:	f3 07       	cpc	r31, r19
    1e42:	d9 f7       	brne	.-10     	; 0x1e3a <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e44:	8e ef       	ldi	r24, 0xFE	; 254
    1e46:	80 93 e8 00 	sts	0x00E8, r24
    1e4a:	76 c0       	rjmp	.+236    	; 0x1f38 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1e4c:	80 32       	cpi	r24, 0x20	; 32
    1e4e:	d1 f4       	brne	.+52     	; 0x1e84 <__vector_11+0x228>
    1e50:	61 32       	cpi	r22, 0x21	; 33
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <__vector_11+0x1fa>
    1e54:	6a c0       	rjmp	.+212    	; 0x1f2a <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1e56:	e8 ee       	ldi	r30, 0xE8	; 232
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	82 ff       	sbrs	r24, 2
    1e5e:	fd cf       	rjmp	.-6      	; 0x1e5a <__vector_11+0x1fe>
    1e60:	e4 e2       	ldi	r30, 0x24	; 36
    1e62:	f1 e0       	ldi	r31, 0x01	; 1
    1e64:	2b e2       	ldi	r18, 0x2B	; 43
    1e66:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1e68:	a1 ef       	ldi	r26, 0xF1	; 241
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	8c 91       	ld	r24, X
    1e6e:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1e70:	e2 17       	cp	r30, r18
    1e72:	f3 07       	cpc	r31, r19
    1e74:	d9 f7       	brne	.-10     	; 0x1e6c <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1e76:	e8 ee       	ldi	r30, 0xE8	; 232
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	8b ef       	ldi	r24, 0xFB	; 251
    1e7c:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e7e:	8e ef       	ldi	r24, 0xFE	; 254
    1e80:	80 83       	st	Z, r24
    1e82:	5a c0       	rjmp	.+180    	; 0x1f38 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1e84:	82 32       	cpi	r24, 0x22	; 34
    1e86:	71 f4       	brne	.+28     	; 0x1ea4 <__vector_11+0x248>
    1e88:	61 32       	cpi	r22, 0x21	; 33
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <__vector_11+0x232>
    1e8c:	4e c0       	rjmp	.+156    	; 0x1f2a <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    1e8e:	20 93 bd 01 	sts	0x01BD, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1e92:	e8 ee       	ldi	r30, 0xE8	; 232
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	80 ff       	sbrs	r24, 0
    1e9a:	fd cf       	rjmp	.-6      	; 0x1e96 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e9c:	8e ef       	ldi	r24, 0xFE	; 254
    1e9e:	80 93 e8 00 	sts	0x00E8, r24
    1ea2:	4a c0       	rjmp	.+148    	; 0x1f38 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	1a c0       	rjmp	.+52     	; 0x1edc <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1ea8:	e8 ee       	ldi	r30, 0xE8	; 232
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	80 ff       	sbrs	r24, 0
    1eb0:	fd cf       	rjmp	.-6      	; 0x1eac <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1eb2:	62 38       	cpi	r22, 0x82	; 130
    1eb4:	51 f4       	brne	.+20     	; 0x1eca <__vector_11+0x26e>
				UENUM = wIndex;
    1eb6:	e9 ee       	ldi	r30, 0xE9	; 233
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    1ebc:	80 91 eb 00 	lds	r24, 0x00EB
    1ec0:	85 fb       	bst	r24, 5
    1ec2:	88 27       	eor	r24, r24
    1ec4:	80 f9       	bld	r24, 0
				UENUM = 0;
    1ec6:	10 82       	st	Z, r1
    1ec8:	01 c0       	rjmp	.+2      	; 0x1ecc <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1eca:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1ecc:	e1 ef       	ldi	r30, 0xF1	; 241
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 83       	st	Z, r24
			UEDATX = 0;
    1ed2:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ed4:	8e ef       	ldi	r24, 0xFE	; 254
    1ed6:	80 93 e8 00 	sts	0x00E8, r24
    1eda:	2e c0       	rjmp	.+92     	; 0x1f38 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1edc:	98 2f       	mov	r25, r24
    1ede:	9d 7f       	andi	r25, 0xFD	; 253
    1ee0:	91 30       	cpi	r25, 0x01	; 1
    1ee2:	19 f5       	brne	.+70     	; 0x1f2a <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    1ee4:	62 30       	cpi	r22, 0x02	; 2
    1ee6:	09 f5       	brne	.+66     	; 0x1f2a <__vector_11+0x2ce>
    1ee8:	23 2b       	or	r18, r19
    1eea:	f9 f4       	brne	.+62     	; 0x1f2a <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    1eec:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1eee:	9f ef       	ldi	r25, 0xFF	; 255
    1ef0:	94 0f       	add	r25, r20
    1ef2:	94 30       	cpi	r25, 0x04	; 4
    1ef4:	d0 f4       	brcc	.+52     	; 0x1f2a <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ef6:	9e ef       	ldi	r25, 0xFE	; 254
    1ef8:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1efc:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    1f00:	83 30       	cpi	r24, 0x03	; 3
    1f02:	21 f4       	brne	.+8      	; 0x1f0c <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1f04:	81 e2       	ldi	r24, 0x21	; 33
    1f06:	80 93 eb 00 	sts	0x00EB, r24
    1f0a:	16 c0       	rjmp	.+44     	; 0x1f38 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1f0c:	89 e1       	ldi	r24, 0x19	; 25
    1f0e:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <__vector_11+0x2c0>
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	4a 95       	dec	r20
    1f1e:	e2 f7       	brpl	.-8      	; 0x1f18 <__vector_11+0x2bc>
    1f20:	ea ee       	ldi	r30, 0xEA	; 234
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 83       	st	Z, r24
					UERST = 0;
    1f26:	10 82       	st	Z, r1
    1f28:	07 c0       	rjmp	.+14     	; 0x1f38 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1f2a:	81 e2       	ldi	r24, 0x21	; 33
    1f2c:	80 93 eb 00 	sts	0x00EB, r24
    1f30:	03 c0       	rjmp	.+6      	; 0x1f38 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1f32:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1f34:	21 11       	cpse	r18, r1
    1f36:	f7 ce       	rjmp	.-530    	; 0x1d26 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1f38:	ff 91       	pop	r31
    1f3a:	ef 91       	pop	r30
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	bf 91       	pop	r27
    1f42:	af 91       	pop	r26
    1f44:	9f 91       	pop	r25
    1f46:	8f 91       	pop	r24
    1f48:	7f 91       	pop	r23
    1f4a:	6f 91       	pop	r22
    1f4c:	5f 91       	pop	r21
    1f4e:	4f 91       	pop	r20
    1f50:	3f 91       	pop	r19
    1f52:	2f 91       	pop	r18
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	0f 90       	pop	r0
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti

00001f62 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1f66:	ec eb       	ldi	r30, 0xBC	; 188
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 23       	and	r24, r24
    1f6e:	34 f0       	brlt	.+12     	; 0x1f7c <twi_wait+0x1a>
    1f70:	2f 5f       	subi	r18, 0xFF	; 255
    1f72:	3f 4f       	sbci	r19, 0xFF	; 255
    1f74:	29 3e       	cpi	r18, 0xE9	; 233
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	38 07       	cpc	r19, r24
    1f7a:	b9 f7       	brne	.-18     	; 0x1f6a <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	28 3e       	cpi	r18, 0xE8	; 232
    1f80:	33 40       	sbci	r19, 0x03	; 3
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <twi_wait+0x24>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1f86:	08 95       	ret

00001f88 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1f88:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1f8c:	84 e8       	ldi	r24, 0x84	; 132
    1f8e:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1f92:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <twi_wait>
    1f96:	88 23       	and	r24, r24
    1f98:	19 f0       	breq	.+6      	; 0x1fa0 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1f9a:	80 91 b9 00 	lds	r24, 0x00B9
    1f9e:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    1fa0:	08 95       	ret

00001fa2 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1fa2:	cf 93       	push	r28
    1fa4:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1fa6:	94 ea       	ldi	r25, 0xA4	; 164
    1fa8:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1fac:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <twi_wait>
    1fb0:	88 23       	and	r24, r24
    1fb2:	61 f0       	breq	.+24     	; 0x1fcc <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1fb4:	8c 2f       	mov	r24, r28
    1fb6:	88 0f       	add	r24, r24
    1fb8:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1fbc:	80 32       	cpi	r24, 0x20	; 32
    1fbe:	29 f4       	brne	.+10     	; 0x1fca <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1fc0:	84 e9       	ldi	r24, 0x94	; 148
    1fc2:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <start_write+0x2a>
	}	
	return 1;	// success
    1fca:	81 e0       	ldi	r24, 0x01	; 1
}	
    1fcc:	cf 91       	pop	r28
    1fce:	08 95       	ret

00001fd0 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1fd0:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1fd4:	88 e5       	ldi	r24, 0x58	; 88
    1fd6:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <start_write>
    1fda:	88 23       	and	r24, r24
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <m_wii_open+0x10>
    1fde:	cd c0       	rjmp	.+410    	; 0x217a <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    1fe0:	80 e3       	ldi	r24, 0x30	; 48
    1fe2:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    1fe6:	88 23       	and	r24, r24
    1fe8:	09 f4       	brne	.+2      	; 0x1fec <m_wii_open+0x1c>
    1fea:	c9 c0       	rjmp	.+402    	; 0x217e <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    1ff2:	88 23       	and	r24, r24
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <m_wii_open+0x28>
    1ff6:	c5 c0       	rjmp	.+394    	; 0x2182 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1ff8:	84 e9       	ldi	r24, 0x94	; 148
    1ffa:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ffe:	83 ec       	ldi	r24, 0xC3	; 195
    2000:	99 e0       	ldi	r25, 0x09	; 9
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <m_wii_open+0x32>
    2006:	00 c0       	rjmp	.+0      	; 0x2008 <m_wii_open+0x38>
    2008:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    200a:	88 e5       	ldi	r24, 0x58	; 88
    200c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <start_write>
    2010:	88 23       	and	r24, r24
    2012:	09 f4       	brne	.+2      	; 0x2016 <m_wii_open+0x46>
    2014:	b8 c0       	rjmp	.+368    	; 0x2186 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    201c:	88 23       	and	r24, r24
    201e:	09 f4       	brne	.+2      	; 0x2022 <m_wii_open+0x52>
    2020:	b4 c0       	rjmp	.+360    	; 0x218a <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    2028:	88 23       	and	r24, r24
    202a:	09 f4       	brne	.+2      	; 0x202e <m_wii_open+0x5e>
    202c:	b0 c0       	rjmp	.+352    	; 0x218e <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    2034:	88 23       	and	r24, r24
    2036:	09 f4       	brne	.+2      	; 0x203a <m_wii_open+0x6a>
    2038:	ac c0       	rjmp	.+344    	; 0x2192 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    2040:	88 23       	and	r24, r24
    2042:	09 f4       	brne	.+2      	; 0x2046 <m_wii_open+0x76>
    2044:	a8 c0       	rjmp	.+336    	; 0x2196 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    204c:	88 23       	and	r24, r24
    204e:	09 f4       	brne	.+2      	; 0x2052 <m_wii_open+0x82>
    2050:	a4 c0       	rjmp	.+328    	; 0x219a <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    2058:	88 23       	and	r24, r24
    205a:	09 f4       	brne	.+2      	; 0x205e <m_wii_open+0x8e>
    205c:	a0 c0       	rjmp	.+320    	; 0x219e <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    2064:	88 23       	and	r24, r24
    2066:	09 f4       	brne	.+2      	; 0x206a <m_wii_open+0x9a>
    2068:	9c c0       	rjmp	.+312    	; 0x21a2 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    206a:	80 e9       	ldi	r24, 0x90	; 144
    206c:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    2070:	88 23       	and	r24, r24
    2072:	09 f4       	brne	.+2      	; 0x2076 <m_wii_open+0xa6>
    2074:	98 c0       	rjmp	.+304    	; 0x21a6 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2076:	84 e9       	ldi	r24, 0x94	; 148
    2078:	80 93 bc 00 	sts	0x00BC, r24
    207c:	83 ec       	ldi	r24, 0xC3	; 195
    207e:	99 e0       	ldi	r25, 0x09	; 9
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <m_wii_open+0xb0>
    2084:	00 c0       	rjmp	.+0      	; 0x2086 <m_wii_open+0xb6>
    2086:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2088:	88 e5       	ldi	r24, 0x58	; 88
    208a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <start_write>
    208e:	88 23       	and	r24, r24
    2090:	09 f4       	brne	.+2      	; 0x2094 <m_wii_open+0xc4>
    2092:	8b c0       	rjmp	.+278    	; 0x21aa <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    2094:	87 e0       	ldi	r24, 0x07	; 7
    2096:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    209a:	88 23       	and	r24, r24
    209c:	09 f4       	brne	.+2      	; 0x20a0 <m_wii_open+0xd0>
    209e:	87 c0       	rjmp	.+270    	; 0x21ae <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    20a6:	88 23       	and	r24, r24
    20a8:	09 f4       	brne	.+2      	; 0x20ac <m_wii_open+0xdc>
    20aa:	83 c0       	rjmp	.+262    	; 0x21b2 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    20ac:	81 e4       	ldi	r24, 0x41	; 65
    20ae:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    20b2:	88 23       	and	r24, r24
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <m_wii_open+0xe8>
    20b6:	7f c0       	rjmp	.+254    	; 0x21b6 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    20b8:	84 e9       	ldi	r24, 0x94	; 148
    20ba:	80 93 bc 00 	sts	0x00BC, r24
    20be:	83 ec       	ldi	r24, 0xC3	; 195
    20c0:	99 e0       	ldi	r25, 0x09	; 9
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <m_wii_open+0xf2>
    20c6:	00 c0       	rjmp	.+0      	; 0x20c8 <m_wii_open+0xf8>
    20c8:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    20ca:	88 e5       	ldi	r24, 0x58	; 88
    20cc:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <start_write>
    20d0:	88 23       	and	r24, r24
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <m_wii_open+0x106>
    20d4:	72 c0       	rjmp	.+228    	; 0x21ba <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    20d6:	8a e1       	ldi	r24, 0x1A	; 26
    20d8:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    20dc:	88 23       	and	r24, r24
    20de:	09 f4       	brne	.+2      	; 0x20e2 <m_wii_open+0x112>
    20e0:	6e c0       	rjmp	.+220    	; 0x21be <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    20e2:	80 e4       	ldi	r24, 0x40	; 64
    20e4:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    20e8:	88 23       	and	r24, r24
    20ea:	09 f4       	brne	.+2      	; 0x20ee <m_wii_open+0x11e>
    20ec:	6a c0       	rjmp	.+212    	; 0x21c2 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    20f4:	88 23       	and	r24, r24
    20f6:	09 f4       	brne	.+2      	; 0x20fa <m_wii_open+0x12a>
    20f8:	66 c0       	rjmp	.+204    	; 0x21c6 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    20fa:	84 e9       	ldi	r24, 0x94	; 148
    20fc:	80 93 bc 00 	sts	0x00BC, r24
    2100:	83 ec       	ldi	r24, 0xC3	; 195
    2102:	99 e0       	ldi	r25, 0x09	; 9
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <m_wii_open+0x134>
    2108:	00 c0       	rjmp	.+0      	; 0x210a <m_wii_open+0x13a>
    210a:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    210c:	88 e5       	ldi	r24, 0x58	; 88
    210e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <start_write>
    2112:	88 23       	and	r24, r24
    2114:	09 f4       	brne	.+2      	; 0x2118 <m_wii_open+0x148>
    2116:	59 c0       	rjmp	.+178    	; 0x21ca <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    2118:	83 e3       	ldi	r24, 0x33	; 51
    211a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    211e:	88 23       	and	r24, r24
    2120:	09 f4       	brne	.+2      	; 0x2124 <m_wii_open+0x154>
    2122:	55 c0       	rjmp	.+170    	; 0x21ce <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    212a:	88 23       	and	r24, r24
    212c:	09 f4       	brne	.+2      	; 0x2130 <m_wii_open+0x160>
    212e:	51 c0       	rjmp	.+162    	; 0x21d2 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2130:	84 e9       	ldi	r24, 0x94	; 148
    2132:	80 93 bc 00 	sts	0x00BC, r24
    2136:	83 ec       	ldi	r24, 0xC3	; 195
    2138:	99 e0       	ldi	r25, 0x09	; 9
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <m_wii_open+0x16a>
    213e:	00 c0       	rjmp	.+0      	; 0x2140 <m_wii_open+0x170>
    2140:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2142:	88 e5       	ldi	r24, 0x58	; 88
    2144:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <start_write>
    2148:	88 23       	and	r24, r24
    214a:	09 f4       	brne	.+2      	; 0x214e <m_wii_open+0x17e>
    214c:	44 c0       	rjmp	.+136    	; 0x21d6 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    214e:	80 e3       	ldi	r24, 0x30	; 48
    2150:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    2154:	88 23       	and	r24, r24
    2156:	09 f4       	brne	.+2      	; 0x215a <m_wii_open+0x18a>
    2158:	40 c0       	rjmp	.+128    	; 0x21da <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    215a:	88 e0       	ldi	r24, 0x08	; 8
    215c:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    2160:	88 23       	and	r24, r24
    2162:	e9 f1       	breq	.+122    	; 0x21de <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2164:	84 e9       	ldi	r24, 0x94	; 148
    2166:	80 93 bc 00 	sts	0x00BC, r24
    216a:	83 ec       	ldi	r24, 0xC3	; 195
    216c:	99 e0       	ldi	r25, 0x09	; 9
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <m_wii_open+0x19e>
    2172:	00 c0       	rjmp	.+0      	; 0x2174 <m_wii_open+0x1a4>
    2174:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    21de:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    21e0:	08 95       	ret

000021e2 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    21e2:	cf 93       	push	r28
    21e4:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    21e6:	84 ea       	ldi	r24, 0xA4	; 164
    21e8:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    21ec:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <twi_wait>
    21f0:	88 23       	and	r24, r24
    21f2:	69 f0       	breq	.+26     	; 0x220e <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    21f4:	8c 2f       	mov	r24, r28
    21f6:	88 0f       	add	r24, r24
    21f8:	8f 5f       	subi	r24, 0xFF	; 255
    21fa:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    21fe:	88 34       	cpi	r24, 0x48	; 72
    2200:	29 f4       	brne	.+10     	; 0x220c <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2202:	84 e9       	ldi	r24, 0x94	; 148
    2204:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	01 c0       	rjmp	.+2      	; 0x220e <start_read+0x2c>
	}	
	return 1;	// success
    220c:	81 e0       	ldi	r24, 0x01	; 1
}	
    220e:	cf 91       	pop	r28
    2210:	08 95       	ret

00002212 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2212:	0f 93       	push	r16
    2214:	1f 93       	push	r17
    2216:	cf 93       	push	r28
    2218:	df 93       	push	r29
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	60 97       	sbiw	r28, 0x10	; 16
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    222c:	fe 01       	movw	r30, r28
    222e:	31 96       	adiw	r30, 0x01	; 1
    2230:	80 e1       	ldi	r24, 0x10	; 16
    2232:	df 01       	movw	r26, r30
    2234:	1d 92       	st	X+, r1
    2236:	8a 95       	dec	r24
    2238:	e9 f7       	brne	.-6      	; 0x2234 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    223a:	88 e5       	ldi	r24, 0x58	; 88
    223c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <start_write>
    2240:	88 23       	and	r24, r24
    2242:	09 f4       	brne	.+2      	; 0x2246 <m_wii_read+0x34>
    2244:	69 c0       	rjmp	.+210    	; 0x2318 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    2246:	86 e3       	ldi	r24, 0x36	; 54
    2248:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <send_byte>
    224c:	88 23       	and	r24, r24
    224e:	09 f4       	brne	.+2      	; 0x2252 <m_wii_read+0x40>
    2250:	65 c0       	rjmp	.+202    	; 0x231c <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2252:	84 e9       	ldi	r24, 0x94	; 148
    2254:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2258:	b8 e0       	ldi	r27, 0x08	; 8
    225a:	ba 95       	dec	r27
    225c:	f1 f7       	brne	.-4      	; 0x225a <m_wii_read+0x48>
    225e:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2260:	88 e5       	ldi	r24, 0x58	; 88
    2262:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <start_read>
    2266:	88 23       	and	r24, r24
    2268:	09 f4       	brne	.+2      	; 0x226c <m_wii_read+0x5a>
    226a:	5a c0       	rjmp	.+180    	; 0x2320 <m_wii_read+0x10e>
    226c:	be 01       	movw	r22, r28
    226e:	6f 5f       	subi	r22, 0xFF	; 255
    2270:	7f 4f       	sbci	r23, 0xFF	; 255
    2272:	ae 01       	movw	r20, r28
    2274:	40 5f       	subi	r20, 0xF0	; 240
    2276:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2278:	ec eb       	ldi	r30, 0xBC	; 188
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    227e:	2b eb       	ldi	r18, 0xBB	; 187
    2280:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2282:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2284:	90 81       	ld	r25, Z
    2286:	99 23       	and	r25, r25
    2288:	ec f7       	brge	.-6      	; 0x2284 <m_wii_read+0x72>
		temp[i] = TWDR;
    228a:	d9 01       	movw	r26, r18
    228c:	9c 91       	ld	r25, X
    228e:	db 01       	movw	r26, r22
    2290:	9d 93       	st	X+, r25
    2292:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2294:	a4 17       	cp	r26, r20
    2296:	b5 07       	cpc	r27, r21
    2298:	a1 f7       	brne	.-24     	; 0x2282 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    229a:	84 e8       	ldi	r24, 0x84	; 132
    229c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    22a0:	ec eb       	ldi	r30, 0xBC	; 188
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	88 23       	and	r24, r24
    22a8:	ec f7       	brge	.-6      	; 0x22a4 <m_wii_read+0x92>
	temp[15] = TWDR;
    22aa:	80 91 bb 00 	lds	r24, 0x00BB
    22ae:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    22b0:	84 e9       	ldi	r24, 0x94	; 148
    22b2:	80 93 bc 00 	sts	0x00BC, r24
    22b6:	be 01       	movw	r22, r28
    22b8:	6c 5f       	subi	r22, 0xFC	; 252
    22ba:	7f 4f       	sbci	r23, 0xFF	; 255
    22bc:	f8 01       	movw	r30, r16
    22be:	08 5e       	subi	r16, 0xE8	; 232
    22c0:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    22c2:	db 01       	movw	r26, r22
    22c4:	2c 91       	ld	r18, X
    22c6:	32 2f       	mov	r19, r18
    22c8:	30 73       	andi	r19, 0x30	; 48
    22ca:	cb 01       	movw	r24, r22
    22cc:	02 97       	sbiw	r24, 0x02	; 2
    22ce:	dc 01       	movw	r26, r24
    22d0:	8c 91       	ld	r24, X
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	b0 e1       	ldi	r27, 0x10	; 16
    22d6:	3b 9f       	mul	r19, r27
    22d8:	80 0d       	add	r24, r0
    22da:	91 1d       	adc	r25, r1
    22dc:	11 24       	eor	r1, r1
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    22e2:	42 2f       	mov	r20, r18
    22e4:	40 7c       	andi	r20, 0xC0	; 192
    22e6:	50 e0       	ldi	r21, 0x00	; 0
    22e8:	44 0f       	add	r20, r20
    22ea:	55 1f       	adc	r21, r21
    22ec:	44 0f       	add	r20, r20
    22ee:	55 1f       	adc	r21, r21
    22f0:	cb 01       	movw	r24, r22
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	dc 01       	movw	r26, r24
    22f6:	8c 91       	ld	r24, X
    22f8:	48 0f       	add	r20, r24
    22fa:	51 1d       	adc	r21, r1
    22fc:	53 83       	std	Z+3, r21	; 0x03
    22fe:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2300:	2f 70       	andi	r18, 0x0F	; 15
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	35 83       	std	Z+5, r19	; 0x05
    2306:	24 83       	std	Z+4, r18	; 0x04
    2308:	6d 5f       	subi	r22, 0xFD	; 253
    230a:	7f 4f       	sbci	r23, 0xFF	; 255
    230c:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    230e:	e0 17       	cp	r30, r16
    2310:	f1 07       	cpc	r31, r17
    2312:	b9 f6       	brne	.-82     	; 0x22c2 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	05 c0       	rjmp	.+10     	; 0x2322 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	03 c0       	rjmp	.+6      	; 0x2322 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2320:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2322:	60 96       	adiw	r28, 0x10	; 16
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	08 95       	ret

00002338 <get_puck_location>:
Public Functions
************************************************************/

/* Returns x,y, location of puck (angle more accurate) */
void get_puck_location(float* puck_buffer)
{
    2338:	2f 92       	push	r2
    233a:	3f 92       	push	r3
    233c:	4f 92       	push	r4
    233e:	5f 92       	push	r5
    2340:	6f 92       	push	r6
    2342:	7f 92       	push	r7
    2344:	8f 92       	push	r8
    2346:	9f 92       	push	r9
    2348:	af 92       	push	r10
    234a:	bf 92       	push	r11
    234c:	cf 92       	push	r12
    234e:	df 92       	push	r13
    2350:	ef 92       	push	r14
    2352:	ff 92       	push	r15
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	62 97       	sbiw	r28, 0x12	; 18
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	cd bf       	out	0x3d, r28	; 61
    236c:	9a 8b       	std	Y+18, r25	; 0x12
    236e:	89 8b       	std	Y+17, r24	; 0x11
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta
    2370:	ce 01       	movw	r24, r28
    2372:	01 96       	adiw	r24, 0x01	; 1
    2374:	0e 94 55 09 	call	0x12aa	; 0x12aa <get_position>
    2378:	0f 2e       	mov	r0, r31
    237a:	f4 ec       	ldi	r31, 0xC4	; 196
    237c:	8f 2e       	mov	r8, r31
    237e:	f1 e0       	ldi	r31, 0x01	; 1
    2380:	9f 2e       	mov	r9, r31
    2382:	f0 2d       	mov	r31, r0
    2384:	0f 2e       	mov	r0, r31
    2386:	fb e2       	ldi	r31, 0x2B	; 43
    2388:	ef 2e       	mov	r14, r31
    238a:	f1 e0       	ldi	r31, 0x01	; 1
    238c:	ff 2e       	mov	r15, r31
    238e:	f0 2d       	mov	r31, r0
    2390:	0f 2e       	mov	r0, r31
    2392:	f3 e5       	ldi	r31, 0x53	; 83
    2394:	af 2e       	mov	r10, r31
    2396:	f1 e0       	ldi	r31, 0x01	; 1
    2398:	bf 2e       	mov	r11, r31
    239a:	f0 2d       	mov	r31, r0

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
    239c:	1d 86       	std	Y+13, r1	; 0x0d
    239e:	1e 86       	std	Y+14, r1	; 0x0e
    23a0:	1f 86       	std	Y+15, r1	; 0x0f
    23a2:	18 8a       	std	Y+16, r1	; 0x10
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
    23a4:	c1 2c       	mov	r12, r1
    23a6:	d1 2c       	mov	r13, r1
{
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
    23a8:	21 2c       	mov	r2, r1
    23aa:	31 2c       	mov	r3, r1
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
		scaler += transistor_vals[i];
    23ac:	f4 01       	movw	r30, r8
    23ae:	01 91       	ld	r16, Z+
    23b0:	11 91       	ld	r17, Z+
    23b2:	4f 01       	movw	r8, r30
    23b4:	c0 0e       	add	r12, r16
    23b6:	d1 1e       	adc	r13, r17
		global_theta += transistor_angles[i] * (float)transistor_vals[i];
    23b8:	f7 01       	movw	r30, r14
    23ba:	41 90       	ld	r4, Z+
    23bc:	51 90       	ld	r5, Z+
    23be:	61 90       	ld	r6, Z+
    23c0:	71 90       	ld	r7, Z+
    23c2:	7f 01       	movw	r14, r30
    23c4:	b8 01       	movw	r22, r16
    23c6:	01 2e       	mov	r0, r17
    23c8:	00 0c       	add	r0, r0
    23ca:	88 0b       	sbc	r24, r24
    23cc:	99 0b       	sbc	r25, r25
    23ce:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
    23d2:	9b 01       	movw	r18, r22
    23d4:	ac 01       	movw	r20, r24
    23d6:	c3 01       	movw	r24, r6
    23d8:	b2 01       	movw	r22, r4
    23da:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    23de:	9b 01       	movw	r18, r22
    23e0:	ac 01       	movw	r20, r24
    23e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    23e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    23e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e8:	98 89       	ldd	r25, Y+16	; 0x10
    23ea:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
    23ee:	6d 87       	std	Y+13, r22	; 0x0d
    23f0:	7e 87       	std	Y+14, r23	; 0x0e
    23f2:	8f 87       	std	Y+15, r24	; 0x0f
    23f4:	98 8b       	std	Y+16, r25	; 0x10
    23f6:	20 16       	cp	r2, r16
    23f8:	31 06       	cpc	r3, r17
    23fa:	0c f4       	brge	.+2      	; 0x23fe <get_puck_location+0xc6>
    23fc:	18 01       	movw	r2, r16

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
    23fe:	ea 14       	cp	r14, r10
    2400:	fb 04       	cpc	r15, r11
    2402:	a1 f6       	brne	.-88     	; 0x23ac <get_puck_location+0x74>
	}
	global_theta = global_theta/((float)scaler);


	/* If no puck found */
	if(max_val<100){
    2404:	f4 e6       	ldi	r31, 0x64	; 100
    2406:	2f 16       	cp	r2, r31
    2408:	31 04       	cpc	r3, r1
    240a:	5c f4       	brge	.+22     	; 0x2422 <get_puck_location+0xea>
		puck_buffer[0] = 0;
    240c:	e9 89       	ldd	r30, Y+17	; 0x11
    240e:	fa 89       	ldd	r31, Y+18	; 0x12
    2410:	10 82       	st	Z, r1
    2412:	11 82       	std	Z+1, r1	; 0x01
    2414:	12 82       	std	Z+2, r1	; 0x02
    2416:	13 82       	std	Z+3, r1	; 0x03
		puck_buffer[1] = 0;
    2418:	14 82       	std	Z+4, r1	; 0x04
    241a:	15 82       	std	Z+5, r1	; 0x05
    241c:	16 82       	std	Z+6, r1	; 0x06
    241e:	17 82       	std	Z+7, r1	; 0x07
    2420:	40 c0       	rjmp	.+128    	; 0x24a2 <get_puck_location+0x16a>

		if(transistor_vals[i]>max_val){
			max_val = transistor_vals[i];
		}
	}
	global_theta = global_theta/((float)scaler);
    2422:	b6 01       	movw	r22, r12
    2424:	dd 0c       	add	r13, r13
    2426:	88 0b       	sbc	r24, r24
    2428:	99 0b       	sbc	r25, r25
    242a:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
    242e:	9b 01       	movw	r18, r22
    2430:	ac 01       	movw	r20, r24
    2432:	6d 85       	ldd	r22, Y+13	; 0x0d
    2434:	7e 85       	ldd	r23, Y+14	; 0x0e
    2436:	8f 85       	ldd	r24, Y+15	; 0x0f
    2438:	98 89       	ldd	r25, Y+16	; 0x10
    243a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__divsf3>
		puck_buffer[1] = 0;
		return;
	}

	/* Create vector pointing to puck in global coordinates */
	global_theta += position_buffer[2];
    243e:	29 85       	ldd	r18, Y+9	; 0x09
    2440:	3a 85       	ldd	r19, Y+10	; 0x0a
    2442:	4b 85       	ldd	r20, Y+11	; 0x0b
    2444:	5c 85       	ldd	r21, Y+12	; 0x0c
    2446:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
    244a:	6b 01       	movw	r12, r22
    244c:	7c 01       	movw	r14, r24
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN + position_buffer[0]; // Assign X val
    244e:	0e 94 f7 14 	call	0x29ee	; 0x29ee <cos>
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4a e7       	ldi	r20, 0x7A	; 122
    2458:	54 e4       	ldi	r21, 0x44	; 68
    245a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    245e:	29 81       	ldd	r18, Y+1	; 0x01
    2460:	3a 81       	ldd	r19, Y+2	; 0x02
    2462:	4b 81       	ldd	r20, Y+3	; 0x03
    2464:	5c 81       	ldd	r21, Y+4	; 0x04
    2466:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
    246a:	e9 89       	ldd	r30, Y+17	; 0x11
    246c:	fa 89       	ldd	r31, Y+18	; 0x12
    246e:	60 83       	st	Z, r22
    2470:	71 83       	std	Z+1, r23	; 0x01
    2472:	82 83       	std	Z+2, r24	; 0x02
    2474:	93 83       	std	Z+3, r25	; 0x03
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN + position_buffer[1]; // Assign Y val
    2476:	c7 01       	movw	r24, r14
    2478:	b6 01       	movw	r22, r12
    247a:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <sin>
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	4a e7       	ldi	r20, 0x7A	; 122
    2484:	54 e4       	ldi	r21, 0x44	; 68
    2486:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    248a:	2d 81       	ldd	r18, Y+5	; 0x05
    248c:	3e 81       	ldd	r19, Y+6	; 0x06
    248e:	4f 81       	ldd	r20, Y+7	; 0x07
    2490:	58 85       	ldd	r21, Y+8	; 0x08
    2492:	0e 94 14 14 	call	0x2828	; 0x2828 <__addsf3>
    2496:	e9 89       	ldd	r30, Y+17	; 0x11
    2498:	fa 89       	ldd	r31, Y+18	; 0x12
    249a:	64 83       	std	Z+4, r22	; 0x04
    249c:	75 83       	std	Z+5, r23	; 0x05
    249e:	86 83       	std	Z+6, r24	; 0x06
    24a0:	97 83       	std	Z+7, r25	; 0x07

}
    24a2:	62 96       	adiw	r28, 0x12	; 18
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	ff 90       	pop	r15
    24b8:	ef 90       	pop	r14
    24ba:	df 90       	pop	r13
    24bc:	cf 90       	pop	r12
    24be:	bf 90       	pop	r11
    24c0:	af 90       	pop	r10
    24c2:	9f 90       	pop	r9
    24c4:	8f 90       	pop	r8
    24c6:	7f 90       	pop	r7
    24c8:	6f 90       	pop	r6
    24ca:	5f 90       	pop	r5
    24cc:	4f 90       	pop	r4
    24ce:	3f 90       	pop	r3
    24d0:	2f 90       	pop	r2
    24d2:	08 95       	ret

000024d4 <has_puck>:

/* Return 1 If Has Puck */
char has_puck(void)
{
	if((transistor_3 + transistor_9) > HAS_PUCK_THRESHOLD){
    24d4:	20 91 c2 01 	lds	r18, 0x01C2
    24d8:	30 91 c3 01 	lds	r19, 0x01C3
    24dc:	80 91 c0 01 	lds	r24, 0x01C0
    24e0:	90 91 c1 01 	lds	r25, 0x01C1
    24e4:	28 0f       	add	r18, r24
    24e6:	39 1f       	adc	r19, r25
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	2b 33       	cpi	r18, 0x3B	; 59
    24ec:	37 40       	sbci	r19, 0x07	; 7
    24ee:	0c f4       	brge	.+2      	; 0x24f2 <has_puck+0x1e>
    24f0:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	return 0;
}
    24f2:	08 95       	ret

000024f4 <adc_switch>:
/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated

	clear(ADCSRA,ADEN); // Disable ADC subsystem
    24f4:	ea e7       	ldi	r30, 0x7A	; 122
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	8f 77       	andi	r24, 0x7F	; 127
    24fc:	80 83       	st	Z, r24
	
	switch(state){
    24fe:	e0 91 d8 01 	lds	r30, 0x01D8
    2502:	f0 91 d9 01 	lds	r31, 0x01D9
    2506:	ec 30       	cpi	r30, 0x0C	; 12
    2508:	f1 05       	cpc	r31, r1
    250a:	08 f0       	brcs	.+2      	; 0x250e <adc_switch+0x1a>
    250c:	82 c1       	rjmp	.+772    	; 0x2812 <adc_switch+0x31e>
    250e:	e2 5a       	subi	r30, 0xA2	; 162
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__tablejump2__>

		case 0:
			state = 1;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	90 93 d9 01 	sts	0x01D9, r25
    251e:	80 93 d8 01 	sts	0x01D8, r24
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
    2522:	eb e7       	ldi	r30, 0x7B	; 123
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	8f 7d       	andi	r24, 0xDF	; 223
    252a:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 8
    252c:	ec e7       	ldi	r30, 0x7C	; 124
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	8b 7f       	andi	r24, 0xFB	; 251
    2534:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2536:	80 81       	ld	r24, Z
    2538:	8d 7f       	andi	r24, 0xFD	; 253
    253a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    253c:	80 81       	ld	r24, Z
    253e:	8e 7f       	andi	r24, 0xFE	; 254
    2540:	80 83       	st	Z, r24
			transistor_vals[2] = ADC;			
    2542:	80 91 78 00 	lds	r24, 0x0078
    2546:	90 91 79 00 	lds	r25, 0x0079
    254a:	90 93 c9 01 	sts	0x01C9, r25
    254e:	80 93 c8 01 	sts	0x01C8, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2552:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
			clear(ADMUX,MUX2); // Transistor 8
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[2] = ADC;			
			break;
    2554:	5f c1       	rjmp	.+702    	; 0x2814 <adc_switch+0x320>

		case 1:
			state = 2;
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	90 93 d9 01 	sts	0x01D9, r25
    255e:	80 93 d8 01 	sts	0x01D8, r24
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
    2562:	eb e7       	ldi	r30, 0x7B	; 123
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	8f 7d       	andi	r24, 0xDF	; 223
    256a:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 9
    256c:	ec e7       	ldi	r30, 0x7C	; 124
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8b 7f       	andi	r24, 0xFB	; 251
    2574:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2576:	80 81       	ld	r24, Z
    2578:	8d 7f       	andi	r24, 0xFD	; 253
    257a:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    257c:	80 81       	ld	r24, Z
    257e:	81 60       	ori	r24, 0x01	; 1
    2580:	80 83       	st	Z, r24
			transistor_vals[4] = ADC;			
    2582:	80 91 78 00 	lds	r24, 0x0078
    2586:	90 91 79 00 	lds	r25, 0x0079
    258a:	90 93 cd 01 	sts	0x01CD, r25
    258e:	80 93 cc 01 	sts	0x01CC, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2592:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
			clear(ADMUX,MUX2); // Transistor 9
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[4] = ADC;			
			break;
    2594:	3f c1       	rjmp	.+638    	; 0x2814 <adc_switch+0x320>

		case 2:
			state = 3;
    2596:	83 e0       	ldi	r24, 0x03	; 3
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	90 93 d9 01 	sts	0x01D9, r25
    259e:	80 93 d8 01 	sts	0x01D8, r24
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
    25a2:	eb e7       	ldi	r30, 0x7B	; 123
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	8f 7d       	andi	r24, 0xDF	; 223
    25aa:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 10
    25ac:	ec e7       	ldi	r30, 0x7C	; 124
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	84 60       	ori	r24, 0x04	; 4
    25b4:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    25b6:	80 81       	ld	r24, Z
    25b8:	8d 7f       	andi	r24, 0xFD	; 253
    25ba:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    25bc:	80 81       	ld	r24, Z
    25be:	8e 7f       	andi	r24, 0xFE	; 254
    25c0:	80 83       	st	Z, r24
			transistor_9 = ADC;			
    25c2:	80 91 78 00 	lds	r24, 0x0078
    25c6:	90 91 79 00 	lds	r25, 0x0079
    25ca:	90 93 c1 01 	sts	0x01C1, r25
    25ce:	80 93 c0 01 	sts	0x01C0, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    25d2:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
			set(ADMUX,MUX2); // Transistor 10
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_9 = ADC;			
			break;
    25d4:	1f c1       	rjmp	.+574    	; 0x2814 <adc_switch+0x320>

		case 3:
			state = 4;
    25d6:	84 e0       	ldi	r24, 0x04	; 4
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	90 93 d9 01 	sts	0x01D9, r25
    25de:	80 93 d8 01 	sts	0x01D8, r24
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
    25e2:	eb e7       	ldi	r30, 0x7B	; 123
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	8f 7d       	andi	r24, 0xDF	; 223
    25ea:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 13
    25ec:	ec e7       	ldi	r30, 0x7C	; 124
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	84 60       	ori	r24, 0x04	; 4
    25f4:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    25f6:	80 81       	ld	r24, Z
    25f8:	8d 7f       	andi	r24, 0xFD	; 253
    25fa:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    25fc:	80 81       	ld	r24, Z
    25fe:	81 60       	ori	r24, 0x01	; 1
    2600:	80 83       	st	Z, r24
			transistor_vals[5] = ADC;			
    2602:	80 91 78 00 	lds	r24, 0x0078
    2606:	90 91 79 00 	lds	r25, 0x0079
    260a:	90 93 cf 01 	sts	0x01CF, r25
    260e:	80 93 ce 01 	sts	0x01CE, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2612:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
			set(ADMUX,MUX2); // Transistor 13
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[5] = ADC;			
			break;
    2614:	ff c0       	rjmp	.+510    	; 0x2814 <adc_switch+0x320>

		case 4:
			state = 5;
    2616:	85 e0       	ldi	r24, 0x05	; 5
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	90 93 d9 01 	sts	0x01D9, r25
    261e:	80 93 d8 01 	sts	0x01D8, r24
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
    2622:	eb e7       	ldi	r30, 0x7B	; 123
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	8f 7d       	andi	r24, 0xDF	; 223
    262a:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 14
    262c:	ec e7       	ldi	r30, 0x7C	; 124
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	84 60       	ori	r24, 0x04	; 4
    2634:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2636:	80 81       	ld	r24, Z
    2638:	82 60       	ori	r24, 0x02	; 2
    263a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    263c:	80 81       	ld	r24, Z
    263e:	8e 7f       	andi	r24, 0xFE	; 254
    2640:	80 83       	st	Z, r24
			transistor_vals[7] = ADC;			
    2642:	80 91 78 00 	lds	r24, 0x0078
    2646:	90 91 79 00 	lds	r25, 0x0079
    264a:	90 93 d3 01 	sts	0x01D3, r25
    264e:	80 93 d2 01 	sts	0x01D2, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2652:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
			set(ADMUX,MUX2); // Transistor 14
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[7] = ADC;			
			break;
    2654:	df c0       	rjmp	.+446    	; 0x2814 <adc_switch+0x320>

		case 5:
			state = 6;
    2656:	86 e0       	ldi	r24, 0x06	; 6
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	90 93 d9 01 	sts	0x01D9, r25
    265e:	80 93 d8 01 	sts	0x01D8, r24
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
    2662:	eb e7       	ldi	r30, 0x7B	; 123
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	8f 7d       	andi	r24, 0xDF	; 223
    266a:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 15
    266c:	ec e7       	ldi	r30, 0x7C	; 124
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	84 60       	ori	r24, 0x04	; 4
    2674:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2676:	80 81       	ld	r24, Z
    2678:	82 60       	ori	r24, 0x02	; 2
    267a:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    267c:	80 81       	ld	r24, Z
    267e:	81 60       	ori	r24, 0x01	; 1
    2680:	80 83       	st	Z, r24
			transistor_vals[8] = ADC;			
    2682:	80 91 78 00 	lds	r24, 0x0078
    2686:	90 91 79 00 	lds	r25, 0x0079
    268a:	90 93 d5 01 	sts	0x01D5, r25
    268e:	80 93 d4 01 	sts	0x01D4, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2692:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
			set(ADMUX,MUX2); // Transistor 15
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[8] = ADC;			
			break;
    2694:	bf c0       	rjmp	.+382    	; 0x2814 <adc_switch+0x320>

		case 6:
			state = 7;
    2696:	87 e0       	ldi	r24, 0x07	; 7
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	90 93 d9 01 	sts	0x01D9, r25
    269e:	80 93 d8 01 	sts	0x01D8, r24
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
    26a2:	eb e7       	ldi	r30, 0x7B	; 123
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	80 62       	ori	r24, 0x20	; 32
    26aa:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 1, 16
    26ac:	ec e7       	ldi	r30, 0x7C	; 124
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	8b 7f       	andi	r24, 0xFB	; 251
    26b4:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    26b6:	80 81       	ld	r24, Z
    26b8:	8d 7f       	andi	r24, 0xFD	; 253
    26ba:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    26bc:	80 81       	ld	r24, Z
    26be:	8e 7f       	andi	r24, 0xFE	; 254
    26c0:	80 83       	st	Z, r24
			transistor_vals[9] = ADC;			
    26c2:	80 91 78 00 	lds	r24, 0x0078
    26c6:	90 91 79 00 	lds	r25, 0x0079
    26ca:	90 93 d7 01 	sts	0x01D7, r25
    26ce:	80 93 d6 01 	sts	0x01D6, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    26d2:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
			clear(ADMUX,MUX2); // Transistor 1, 16
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[9] = ADC;			
			break;
    26d4:	9f c0       	rjmp	.+318    	; 0x2814 <adc_switch+0x320>

		case 7:
			state = 8;
    26d6:	88 e0       	ldi	r24, 0x08	; 8
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	90 93 d9 01 	sts	0x01D9, r25
    26de:	80 93 d8 01 	sts	0x01D8, r24
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
    26e2:	eb e7       	ldi	r30, 0x7B	; 123
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	80 62       	ori	r24, 0x20	; 32
    26ea:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 11, 12
    26ec:	ec e7       	ldi	r30, 0x7C	; 124
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	8b 7f       	andi	r24, 0xFB	; 251
    26f4:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    26f6:	80 81       	ld	r24, Z
    26f8:	8d 7f       	andi	r24, 0xFD	; 253
    26fa:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    26fc:	80 81       	ld	r24, Z
    26fe:	81 60       	ori	r24, 0x01	; 1
    2700:	80 83       	st	Z, r24
			transistor_vals[0] = ADC;			
    2702:	80 91 78 00 	lds	r24, 0x0078
    2706:	90 91 79 00 	lds	r25, 0x0079
    270a:	90 93 c5 01 	sts	0x01C5, r25
    270e:	80 93 c4 01 	sts	0x01C4, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2712:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
			clear(ADMUX,MUX2); // Transistor 11, 12
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[0] = ADC;			
			break;
    2714:	7f c0       	rjmp	.+254    	; 0x2814 <adc_switch+0x320>

		case 8:
			state = 9;
    2716:	89 e0       	ldi	r24, 0x09	; 9
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	90 93 d9 01 	sts	0x01D9, r25
    271e:	80 93 d8 01 	sts	0x01D8, r24
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
    2722:	eb e7       	ldi	r30, 0x7B	; 123
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	80 62       	ori	r24, 0x20	; 32
    272a:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
    272c:	ec e7       	ldi	r30, 0x7C	; 124
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	8b 7f       	andi	r24, 0xFB	; 251
    2734:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2736:	80 81       	ld	r24, Z
    2738:	82 60       	ori	r24, 0x02	; 2
    273a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    273c:	80 81       	ld	r24, Z
    273e:	8e 7f       	andi	r24, 0xFE	; 254
    2740:	80 83       	st	Z, r24
			transistor_vals[6] = ADC;			
    2742:	80 91 78 00 	lds	r24, 0x0078
    2746:	90 91 79 00 	lds	r25, 0x0079
    274a:	90 93 d1 01 	sts	0x01D1, r25
    274e:	80 93 d0 01 	sts	0x01D0, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2752:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[6] = ADC;			
			break;
    2754:	5f c0       	rjmp	.+190    	; 0x2814 <adc_switch+0x320>

		case 9:
			state = 10;
    2756:	8a e0       	ldi	r24, 0x0A	; 10
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	90 93 d9 01 	sts	0x01D9, r25
    275e:	80 93 d8 01 	sts	0x01D8, r24
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
    2762:	eb e7       	ldi	r30, 0x7B	; 123
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	80 62       	ori	r24, 0x20	; 32
    276a:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 2
    276c:	ec e7       	ldi	r30, 0x7C	; 124
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	8b 7f       	andi	r24, 0xFB	; 251
    2774:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2776:	80 81       	ld	r24, Z
    2778:	82 60       	ori	r24, 0x02	; 2
    277a:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    277c:	80 81       	ld	r24, Z
    277e:	81 60       	ori	r24, 0x01	; 1
    2780:	80 83       	st	Z, r24
			transistor_vals[3] = ADC;			
    2782:	80 91 78 00 	lds	r24, 0x0078
    2786:	90 91 79 00 	lds	r25, 0x0079
    278a:	90 93 cb 01 	sts	0x01CB, r25
    278e:	80 93 ca 01 	sts	0x01CA, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2792:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
			clear(ADMUX,MUX2); // Transistor 2
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[3] = ADC;			
			break;
    2794:	3f c0       	rjmp	.+126    	; 0x2814 <adc_switch+0x320>

		case 10:
			state = 11;
    2796:	8b e0       	ldi	r24, 0x0B	; 11
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	90 93 d9 01 	sts	0x01D9, r25
    279e:	80 93 d8 01 	sts	0x01D8, r24
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
    27a2:	eb e7       	ldi	r30, 0x7B	; 123
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	80 62       	ori	r24, 0x20	; 32
    27aa:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 3
    27ac:	ec e7       	ldi	r30, 0x7C	; 124
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	84 60       	ori	r24, 0x04	; 4
    27b4:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    27b6:	80 81       	ld	r24, Z
    27b8:	8d 7f       	andi	r24, 0xFD	; 253
    27ba:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    27bc:	80 81       	ld	r24, Z
    27be:	8e 7f       	andi	r24, 0xFE	; 254
    27c0:	80 83       	st	Z, r24
			transistor_vals[1] = ADC;			
    27c2:	80 91 78 00 	lds	r24, 0x0078
    27c6:	90 91 79 00 	lds	r25, 0x0079
    27ca:	90 93 c7 01 	sts	0x01C7, r25
    27ce:	80 93 c6 01 	sts	0x01C6, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    27d2:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
			set(ADMUX,MUX2); // Transistor 3
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[1] = ADC;			
			break;
    27d4:	1f c0       	rjmp	.+62     	; 0x2814 <adc_switch+0x320>

		case 11:
			state = 0;
    27d6:	10 92 d9 01 	sts	0x01D9, r1
    27da:	10 92 d8 01 	sts	0x01D8, r1
			set(ADCSRB,MUX5); // Select ADC13 at pin B6
    27de:	eb e7       	ldi	r30, 0x7B	; 123
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	80 62       	ori	r24, 0x20	; 32
    27e6:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 4
    27e8:	ec e7       	ldi	r30, 0x7C	; 124
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	84 60       	ori	r24, 0x04	; 4
    27f0:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    27f2:	80 81       	ld	r24, Z
    27f4:	8d 7f       	andi	r24, 0xFD	; 253
    27f6:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    27f8:	80 81       	ld	r24, Z
    27fa:	81 60       	ori	r24, 0x01	; 1
    27fc:	80 83       	st	Z, r24
			transistor_3 = ADC;			
    27fe:	80 91 78 00 	lds	r24, 0x0078
    2802:	90 91 79 00 	lds	r25, 0x0079
    2806:	90 93 c3 01 	sts	0x01C3, r25
    280a:	80 93 c2 01 	sts	0x01C2, r24
			return_val = 1;
    280e:	81 e0       	ldi	r24, 0x01	; 1
			// m_usb_tx_string("  IR14: ");
			// m_usb_tx_int(transistor_vals[8]);
			// m_usb_tx_string("  IR15: ");
			// m_usb_tx_int(transistor_vals[9]);

			break;
    2810:	01 c0       	rjmp	.+2      	; 0x2814 <adc_switch+0x320>
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2812:	80 e0       	ldi	r24, 0x00	; 0
			// m_usb_tx_int(transistor_vals[9]);

			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
    2814:	ea e7       	ldi	r30, 0x7A	; 122
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	90 81       	ld	r25, Z
    281a:	90 68       	ori	r25, 0x80	; 128
    281c:	90 83       	st	Z, r25
	set(ADCSRA,ADSC); // Begin new conversion
    281e:	90 81       	ld	r25, Z
    2820:	90 64       	ori	r25, 0x40	; 64
    2822:	90 83       	st	Z, r25

	return return_val;
}
    2824:	08 95       	ret

00002826 <__subsf3>:
    2826:	50 58       	subi	r21, 0x80	; 128

00002828 <__addsf3>:
    2828:	bb 27       	eor	r27, r27
    282a:	aa 27       	eor	r26, r26
    282c:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3x>
    2830:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__fp_round>
    2834:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__fp_pscA>
    2838:	38 f0       	brcs	.+14     	; 0x2848 <__addsf3+0x20>
    283a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__fp_pscB>
    283e:	20 f0       	brcs	.+8      	; 0x2848 <__addsf3+0x20>
    2840:	39 f4       	brne	.+14     	; 0x2850 <__addsf3+0x28>
    2842:	9f 3f       	cpi	r25, 0xFF	; 255
    2844:	19 f4       	brne	.+6      	; 0x284c <__addsf3+0x24>
    2846:	26 f4       	brtc	.+8      	; 0x2850 <__addsf3+0x28>
    2848:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__fp_nan>
    284c:	0e f4       	brtc	.+2      	; 0x2850 <__addsf3+0x28>
    284e:	e0 95       	com	r30
    2850:	e7 fb       	bst	r30, 7
    2852:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__fp_inf>

00002856 <__addsf3x>:
    2856:	e9 2f       	mov	r30, r25
    2858:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__fp_split3>
    285c:	58 f3       	brcs	.-42     	; 0x2834 <__addsf3+0xc>
    285e:	ba 17       	cp	r27, r26
    2860:	62 07       	cpc	r22, r18
    2862:	73 07       	cpc	r23, r19
    2864:	84 07       	cpc	r24, r20
    2866:	95 07       	cpc	r25, r21
    2868:	20 f0       	brcs	.+8      	; 0x2872 <__addsf3x+0x1c>
    286a:	79 f4       	brne	.+30     	; 0x288a <__addsf3x+0x34>
    286c:	a6 f5       	brtc	.+104    	; 0x28d6 <__addsf3x+0x80>
    286e:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__fp_zero>
    2872:	0e f4       	brtc	.+2      	; 0x2876 <__addsf3x+0x20>
    2874:	e0 95       	com	r30
    2876:	0b 2e       	mov	r0, r27
    2878:	ba 2f       	mov	r27, r26
    287a:	a0 2d       	mov	r26, r0
    287c:	0b 01       	movw	r0, r22
    287e:	b9 01       	movw	r22, r18
    2880:	90 01       	movw	r18, r0
    2882:	0c 01       	movw	r0, r24
    2884:	ca 01       	movw	r24, r20
    2886:	a0 01       	movw	r20, r0
    2888:	11 24       	eor	r1, r1
    288a:	ff 27       	eor	r31, r31
    288c:	59 1b       	sub	r21, r25
    288e:	99 f0       	breq	.+38     	; 0x28b6 <__addsf3x+0x60>
    2890:	59 3f       	cpi	r21, 0xF9	; 249
    2892:	50 f4       	brcc	.+20     	; 0x28a8 <__addsf3x+0x52>
    2894:	50 3e       	cpi	r21, 0xE0	; 224
    2896:	68 f1       	brcs	.+90     	; 0x28f2 <__addsf3x+0x9c>
    2898:	1a 16       	cp	r1, r26
    289a:	f0 40       	sbci	r31, 0x00	; 0
    289c:	a2 2f       	mov	r26, r18
    289e:	23 2f       	mov	r18, r19
    28a0:	34 2f       	mov	r19, r20
    28a2:	44 27       	eor	r20, r20
    28a4:	58 5f       	subi	r21, 0xF8	; 248
    28a6:	f3 cf       	rjmp	.-26     	; 0x288e <__addsf3x+0x38>
    28a8:	46 95       	lsr	r20
    28aa:	37 95       	ror	r19
    28ac:	27 95       	ror	r18
    28ae:	a7 95       	ror	r26
    28b0:	f0 40       	sbci	r31, 0x00	; 0
    28b2:	53 95       	inc	r21
    28b4:	c9 f7       	brne	.-14     	; 0x28a8 <__addsf3x+0x52>
    28b6:	7e f4       	brtc	.+30     	; 0x28d6 <__addsf3x+0x80>
    28b8:	1f 16       	cp	r1, r31
    28ba:	ba 0b       	sbc	r27, r26
    28bc:	62 0b       	sbc	r22, r18
    28be:	73 0b       	sbc	r23, r19
    28c0:	84 0b       	sbc	r24, r20
    28c2:	ba f0       	brmi	.+46     	; 0x28f2 <__addsf3x+0x9c>
    28c4:	91 50       	subi	r25, 0x01	; 1
    28c6:	a1 f0       	breq	.+40     	; 0x28f0 <__addsf3x+0x9a>
    28c8:	ff 0f       	add	r31, r31
    28ca:	bb 1f       	adc	r27, r27
    28cc:	66 1f       	adc	r22, r22
    28ce:	77 1f       	adc	r23, r23
    28d0:	88 1f       	adc	r24, r24
    28d2:	c2 f7       	brpl	.-16     	; 0x28c4 <__addsf3x+0x6e>
    28d4:	0e c0       	rjmp	.+28     	; 0x28f2 <__addsf3x+0x9c>
    28d6:	ba 0f       	add	r27, r26
    28d8:	62 1f       	adc	r22, r18
    28da:	73 1f       	adc	r23, r19
    28dc:	84 1f       	adc	r24, r20
    28de:	48 f4       	brcc	.+18     	; 0x28f2 <__addsf3x+0x9c>
    28e0:	87 95       	ror	r24
    28e2:	77 95       	ror	r23
    28e4:	67 95       	ror	r22
    28e6:	b7 95       	ror	r27
    28e8:	f7 95       	ror	r31
    28ea:	9e 3f       	cpi	r25, 0xFE	; 254
    28ec:	08 f0       	brcs	.+2      	; 0x28f0 <__addsf3x+0x9a>
    28ee:	b0 cf       	rjmp	.-160    	; 0x2850 <__addsf3+0x28>
    28f0:	93 95       	inc	r25
    28f2:	88 0f       	add	r24, r24
    28f4:	08 f0       	brcs	.+2      	; 0x28f8 <__addsf3x+0xa2>
    28f6:	99 27       	eor	r25, r25
    28f8:	ee 0f       	add	r30, r30
    28fa:	97 95       	ror	r25
    28fc:	87 95       	ror	r24
    28fe:	08 95       	ret
    2900:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__fp_pscA>
    2904:	60 f0       	brcs	.+24     	; 0x291e <__addsf3x+0xc8>
    2906:	80 e8       	ldi	r24, 0x80	; 128
    2908:	91 e0       	ldi	r25, 0x01	; 1
    290a:	09 f4       	brne	.+2      	; 0x290e <__addsf3x+0xb8>
    290c:	9e ef       	ldi	r25, 0xFE	; 254
    290e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__fp_pscB>
    2912:	28 f0       	brcs	.+10     	; 0x291e <__addsf3x+0xc8>
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	51 e0       	ldi	r21, 0x01	; 1
    2918:	71 f4       	brne	.+28     	; 0x2936 <atan2+0x10>
    291a:	5e ef       	ldi	r21, 0xFE	; 254
    291c:	0c c0       	rjmp	.+24     	; 0x2936 <atan2+0x10>
    291e:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__fp_nan>
    2922:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__fp_zero>

00002926 <atan2>:
    2926:	e9 2f       	mov	r30, r25
    2928:	e0 78       	andi	r30, 0x80	; 128
    292a:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__fp_split3>
    292e:	40 f3       	brcs	.-48     	; 0x2900 <__addsf3x+0xaa>
    2930:	09 2e       	mov	r0, r25
    2932:	05 2a       	or	r0, r21
    2934:	b1 f3       	breq	.-20     	; 0x2922 <__addsf3x+0xcc>
    2936:	26 17       	cp	r18, r22
    2938:	37 07       	cpc	r19, r23
    293a:	48 07       	cpc	r20, r24
    293c:	59 07       	cpc	r21, r25
    293e:	38 f0       	brcs	.+14     	; 0x294e <atan2+0x28>
    2940:	0e 2e       	mov	r0, r30
    2942:	07 f8       	bld	r0, 7
    2944:	e0 25       	eor	r30, r0
    2946:	69 f0       	breq	.+26     	; 0x2962 <atan2+0x3c>
    2948:	e0 25       	eor	r30, r0
    294a:	e0 64       	ori	r30, 0x40	; 64
    294c:	0a c0       	rjmp	.+20     	; 0x2962 <atan2+0x3c>
    294e:	ef 63       	ori	r30, 0x3F	; 63
    2950:	07 f8       	bld	r0, 7
    2952:	00 94       	com	r0
    2954:	07 fa       	bst	r0, 7
    2956:	db 01       	movw	r26, r22
    2958:	b9 01       	movw	r22, r18
    295a:	9d 01       	movw	r18, r26
    295c:	dc 01       	movw	r26, r24
    295e:	ca 01       	movw	r24, r20
    2960:	ad 01       	movw	r20, r26
    2962:	ef 93       	push	r30
    2964:	0e 94 13 15 	call	0x2a26	; 0x2a26 <__divsf3_pse>
    2968:	0e 94 67 16 	call	0x2cce	; 0x2cce <__fp_round>
    296c:	0e 94 c3 14 	call	0x2986	; 0x2986 <atan>
    2970:	5f 91       	pop	r21
    2972:	55 23       	and	r21, r21
    2974:	39 f0       	breq	.+14     	; 0x2984 <atan2+0x5e>
    2976:	2b ed       	ldi	r18, 0xDB	; 219
    2978:	3f e0       	ldi	r19, 0x0F	; 15
    297a:	49 e4       	ldi	r20, 0x49	; 73
    297c:	50 fd       	sbrc	r21, 0
    297e:	49 ec       	ldi	r20, 0xC9	; 201
    2980:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__addsf3>
    2984:	08 95       	ret

00002986 <atan>:
    2986:	df 93       	push	r29
    2988:	dd 27       	eor	r29, r29
    298a:	b9 2f       	mov	r27, r25
    298c:	bf 77       	andi	r27, 0x7F	; 127
    298e:	40 e8       	ldi	r20, 0x80	; 128
    2990:	5f e3       	ldi	r21, 0x3F	; 63
    2992:	16 16       	cp	r1, r22
    2994:	17 06       	cpc	r1, r23
    2996:	48 07       	cpc	r20, r24
    2998:	5b 07       	cpc	r21, r27
    299a:	18 f4       	brcc	.+6      	; 0x29a2 <atan+0x1c>
    299c:	d9 2f       	mov	r29, r25
    299e:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <inverse>
    29a2:	9f 93       	push	r25
    29a4:	8f 93       	push	r24
    29a6:	7f 93       	push	r23
    29a8:	6f 93       	push	r22
    29aa:	0e 94 7d 17 	call	0x2efa	; 0x2efa <square>
    29ae:	e4 ed       	ldi	r30, 0xD4	; 212
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__fp_powser>
    29b6:	0e 94 67 16 	call	0x2cce	; 0x2cce <__fp_round>
    29ba:	2f 91       	pop	r18
    29bc:	3f 91       	pop	r19
    29be:	4f 91       	pop	r20
    29c0:	5f 91       	pop	r21
    29c2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3x>
    29c6:	dd 23       	and	r29, r29
    29c8:	51 f0       	breq	.+20     	; 0x29de <atan+0x58>
    29ca:	90 58       	subi	r25, 0x80	; 128
    29cc:	a2 ea       	ldi	r26, 0xA2	; 162
    29ce:	2a ed       	ldi	r18, 0xDA	; 218
    29d0:	3f e0       	ldi	r19, 0x0F	; 15
    29d2:	49 ec       	ldi	r20, 0xC9	; 201
    29d4:	5f e3       	ldi	r21, 0x3F	; 63
    29d6:	d0 78       	andi	r29, 0x80	; 128
    29d8:	5d 27       	eor	r21, r29
    29da:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3x>
    29de:	df 91       	pop	r29
    29e0:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__fp_round>

000029e4 <__cmpsf2>:
    29e4:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <__fp_cmp>
    29e8:	08 f4       	brcc	.+2      	; 0x29ec <__cmpsf2+0x8>
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	08 95       	ret

000029ee <cos>:
    29ee:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__fp_rempio2>
    29f2:	e3 95       	inc	r30
    29f4:	0c 94 78 16 	jmp	0x2cf0	; 0x2cf0 <__fp_sinus>

000029f8 <__divsf3>:
    29f8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__divsf3x>
    29fc:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__fp_round>
    2a00:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__fp_pscB>
    2a04:	58 f0       	brcs	.+22     	; 0x2a1c <__divsf3+0x24>
    2a06:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__fp_pscA>
    2a0a:	40 f0       	brcs	.+16     	; 0x2a1c <__divsf3+0x24>
    2a0c:	29 f4       	brne	.+10     	; 0x2a18 <__divsf3+0x20>
    2a0e:	5f 3f       	cpi	r21, 0xFF	; 255
    2a10:	29 f0       	breq	.+10     	; 0x2a1c <__divsf3+0x24>
    2a12:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__fp_inf>
    2a16:	51 11       	cpse	r21, r1
    2a18:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__fp_szero>
    2a1c:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__fp_nan>

00002a20 <__divsf3x>:
    2a20:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__fp_split3>
    2a24:	68 f3       	brcs	.-38     	; 0x2a00 <__divsf3+0x8>

00002a26 <__divsf3_pse>:
    2a26:	99 23       	and	r25, r25
    2a28:	b1 f3       	breq	.-20     	; 0x2a16 <__divsf3+0x1e>
    2a2a:	55 23       	and	r21, r21
    2a2c:	91 f3       	breq	.-28     	; 0x2a12 <__divsf3+0x1a>
    2a2e:	95 1b       	sub	r25, r21
    2a30:	55 0b       	sbc	r21, r21
    2a32:	bb 27       	eor	r27, r27
    2a34:	aa 27       	eor	r26, r26
    2a36:	62 17       	cp	r22, r18
    2a38:	73 07       	cpc	r23, r19
    2a3a:	84 07       	cpc	r24, r20
    2a3c:	38 f0       	brcs	.+14     	; 0x2a4c <__divsf3_pse+0x26>
    2a3e:	9f 5f       	subi	r25, 0xFF	; 255
    2a40:	5f 4f       	sbci	r21, 0xFF	; 255
    2a42:	22 0f       	add	r18, r18
    2a44:	33 1f       	adc	r19, r19
    2a46:	44 1f       	adc	r20, r20
    2a48:	aa 1f       	adc	r26, r26
    2a4a:	a9 f3       	breq	.-22     	; 0x2a36 <__divsf3_pse+0x10>
    2a4c:	35 d0       	rcall	.+106    	; 0x2ab8 <__divsf3_pse+0x92>
    2a4e:	0e 2e       	mov	r0, r30
    2a50:	3a f0       	brmi	.+14     	; 0x2a60 <__divsf3_pse+0x3a>
    2a52:	e0 e8       	ldi	r30, 0x80	; 128
    2a54:	32 d0       	rcall	.+100    	; 0x2aba <__divsf3_pse+0x94>
    2a56:	91 50       	subi	r25, 0x01	; 1
    2a58:	50 40       	sbci	r21, 0x00	; 0
    2a5a:	e6 95       	lsr	r30
    2a5c:	00 1c       	adc	r0, r0
    2a5e:	ca f7       	brpl	.-14     	; 0x2a52 <__divsf3_pse+0x2c>
    2a60:	2b d0       	rcall	.+86     	; 0x2ab8 <__divsf3_pse+0x92>
    2a62:	fe 2f       	mov	r31, r30
    2a64:	29 d0       	rcall	.+82     	; 0x2ab8 <__divsf3_pse+0x92>
    2a66:	66 0f       	add	r22, r22
    2a68:	77 1f       	adc	r23, r23
    2a6a:	88 1f       	adc	r24, r24
    2a6c:	bb 1f       	adc	r27, r27
    2a6e:	26 17       	cp	r18, r22
    2a70:	37 07       	cpc	r19, r23
    2a72:	48 07       	cpc	r20, r24
    2a74:	ab 07       	cpc	r26, r27
    2a76:	b0 e8       	ldi	r27, 0x80	; 128
    2a78:	09 f0       	breq	.+2      	; 0x2a7c <__divsf3_pse+0x56>
    2a7a:	bb 0b       	sbc	r27, r27
    2a7c:	80 2d       	mov	r24, r0
    2a7e:	bf 01       	movw	r22, r30
    2a80:	ff 27       	eor	r31, r31
    2a82:	93 58       	subi	r25, 0x83	; 131
    2a84:	5f 4f       	sbci	r21, 0xFF	; 255
    2a86:	3a f0       	brmi	.+14     	; 0x2a96 <__divsf3_pse+0x70>
    2a88:	9e 3f       	cpi	r25, 0xFE	; 254
    2a8a:	51 05       	cpc	r21, r1
    2a8c:	78 f0       	brcs	.+30     	; 0x2aac <__divsf3_pse+0x86>
    2a8e:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__fp_inf>
    2a92:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__fp_szero>
    2a96:	5f 3f       	cpi	r21, 0xFF	; 255
    2a98:	e4 f3       	brlt	.-8      	; 0x2a92 <__divsf3_pse+0x6c>
    2a9a:	98 3e       	cpi	r25, 0xE8	; 232
    2a9c:	d4 f3       	brlt	.-12     	; 0x2a92 <__divsf3_pse+0x6c>
    2a9e:	86 95       	lsr	r24
    2aa0:	77 95       	ror	r23
    2aa2:	67 95       	ror	r22
    2aa4:	b7 95       	ror	r27
    2aa6:	f7 95       	ror	r31
    2aa8:	9f 5f       	subi	r25, 0xFF	; 255
    2aaa:	c9 f7       	brne	.-14     	; 0x2a9e <__divsf3_pse+0x78>
    2aac:	88 0f       	add	r24, r24
    2aae:	91 1d       	adc	r25, r1
    2ab0:	96 95       	lsr	r25
    2ab2:	87 95       	ror	r24
    2ab4:	97 f9       	bld	r25, 7
    2ab6:	08 95       	ret
    2ab8:	e1 e0       	ldi	r30, 0x01	; 1
    2aba:	66 0f       	add	r22, r22
    2abc:	77 1f       	adc	r23, r23
    2abe:	88 1f       	adc	r24, r24
    2ac0:	bb 1f       	adc	r27, r27
    2ac2:	62 17       	cp	r22, r18
    2ac4:	73 07       	cpc	r23, r19
    2ac6:	84 07       	cpc	r24, r20
    2ac8:	ba 07       	cpc	r27, r26
    2aca:	20 f0       	brcs	.+8      	; 0x2ad4 <__divsf3_pse+0xae>
    2acc:	62 1b       	sub	r22, r18
    2ace:	73 0b       	sbc	r23, r19
    2ad0:	84 0b       	sbc	r24, r20
    2ad2:	ba 0b       	sbc	r27, r26
    2ad4:	ee 1f       	adc	r30, r30
    2ad6:	88 f7       	brcc	.-30     	; 0x2aba <__divsf3_pse+0x94>
    2ad8:	e0 95       	com	r30
    2ada:	08 95       	ret

00002adc <__fixunssfsi>:
    2adc:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__fp_splitA>
    2ae0:	88 f0       	brcs	.+34     	; 0x2b04 <__fixunssfsi+0x28>
    2ae2:	9f 57       	subi	r25, 0x7F	; 127
    2ae4:	98 f0       	brcs	.+38     	; 0x2b0c <__fixunssfsi+0x30>
    2ae6:	b9 2f       	mov	r27, r25
    2ae8:	99 27       	eor	r25, r25
    2aea:	b7 51       	subi	r27, 0x17	; 23
    2aec:	b0 f0       	brcs	.+44     	; 0x2b1a <__fixunssfsi+0x3e>
    2aee:	e1 f0       	breq	.+56     	; 0x2b28 <__fixunssfsi+0x4c>
    2af0:	66 0f       	add	r22, r22
    2af2:	77 1f       	adc	r23, r23
    2af4:	88 1f       	adc	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	1a f0       	brmi	.+6      	; 0x2b00 <__fixunssfsi+0x24>
    2afa:	ba 95       	dec	r27
    2afc:	c9 f7       	brne	.-14     	; 0x2af0 <__fixunssfsi+0x14>
    2afe:	14 c0       	rjmp	.+40     	; 0x2b28 <__fixunssfsi+0x4c>
    2b00:	b1 30       	cpi	r27, 0x01	; 1
    2b02:	91 f0       	breq	.+36     	; 0x2b28 <__fixunssfsi+0x4c>
    2b04:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__fp_zero>
    2b08:	b1 e0       	ldi	r27, 0x01	; 1
    2b0a:	08 95       	ret
    2b0c:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__fp_zero>
    2b10:	67 2f       	mov	r22, r23
    2b12:	78 2f       	mov	r23, r24
    2b14:	88 27       	eor	r24, r24
    2b16:	b8 5f       	subi	r27, 0xF8	; 248
    2b18:	39 f0       	breq	.+14     	; 0x2b28 <__fixunssfsi+0x4c>
    2b1a:	b9 3f       	cpi	r27, 0xF9	; 249
    2b1c:	cc f3       	brlt	.-14     	; 0x2b10 <__fixunssfsi+0x34>
    2b1e:	86 95       	lsr	r24
    2b20:	77 95       	ror	r23
    2b22:	67 95       	ror	r22
    2b24:	b3 95       	inc	r27
    2b26:	d9 f7       	brne	.-10     	; 0x2b1e <__fixunssfsi+0x42>
    2b28:	3e f4       	brtc	.+14     	; 0x2b38 <__fixunssfsi+0x5c>
    2b2a:	90 95       	com	r25
    2b2c:	80 95       	com	r24
    2b2e:	70 95       	com	r23
    2b30:	61 95       	neg	r22
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	8f 4f       	sbci	r24, 0xFF	; 255
    2b36:	9f 4f       	sbci	r25, 0xFF	; 255
    2b38:	08 95       	ret

00002b3a <__floatunsisf>:
    2b3a:	e8 94       	clt
    2b3c:	09 c0       	rjmp	.+18     	; 0x2b50 <__floatsisf+0x12>

00002b3e <__floatsisf>:
    2b3e:	97 fb       	bst	r25, 7
    2b40:	3e f4       	brtc	.+14     	; 0x2b50 <__floatsisf+0x12>
    2b42:	90 95       	com	r25
    2b44:	80 95       	com	r24
    2b46:	70 95       	com	r23
    2b48:	61 95       	neg	r22
    2b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b50:	99 23       	and	r25, r25
    2b52:	a9 f0       	breq	.+42     	; 0x2b7e <__floatsisf+0x40>
    2b54:	f9 2f       	mov	r31, r25
    2b56:	96 e9       	ldi	r25, 0x96	; 150
    2b58:	bb 27       	eor	r27, r27
    2b5a:	93 95       	inc	r25
    2b5c:	f6 95       	lsr	r31
    2b5e:	87 95       	ror	r24
    2b60:	77 95       	ror	r23
    2b62:	67 95       	ror	r22
    2b64:	b7 95       	ror	r27
    2b66:	f1 11       	cpse	r31, r1
    2b68:	f8 cf       	rjmp	.-16     	; 0x2b5a <__floatsisf+0x1c>
    2b6a:	fa f4       	brpl	.+62     	; 0x2baa <__floatsisf+0x6c>
    2b6c:	bb 0f       	add	r27, r27
    2b6e:	11 f4       	brne	.+4      	; 0x2b74 <__floatsisf+0x36>
    2b70:	60 ff       	sbrs	r22, 0
    2b72:	1b c0       	rjmp	.+54     	; 0x2baa <__floatsisf+0x6c>
    2b74:	6f 5f       	subi	r22, 0xFF	; 255
    2b76:	7f 4f       	sbci	r23, 0xFF	; 255
    2b78:	8f 4f       	sbci	r24, 0xFF	; 255
    2b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7c:	16 c0       	rjmp	.+44     	; 0x2baa <__floatsisf+0x6c>
    2b7e:	88 23       	and	r24, r24
    2b80:	11 f0       	breq	.+4      	; 0x2b86 <__floatsisf+0x48>
    2b82:	96 e9       	ldi	r25, 0x96	; 150
    2b84:	11 c0       	rjmp	.+34     	; 0x2ba8 <__floatsisf+0x6a>
    2b86:	77 23       	and	r23, r23
    2b88:	21 f0       	breq	.+8      	; 0x2b92 <__floatsisf+0x54>
    2b8a:	9e e8       	ldi	r25, 0x8E	; 142
    2b8c:	87 2f       	mov	r24, r23
    2b8e:	76 2f       	mov	r23, r22
    2b90:	05 c0       	rjmp	.+10     	; 0x2b9c <__floatsisf+0x5e>
    2b92:	66 23       	and	r22, r22
    2b94:	71 f0       	breq	.+28     	; 0x2bb2 <__floatsisf+0x74>
    2b96:	96 e8       	ldi	r25, 0x86	; 134
    2b98:	86 2f       	mov	r24, r22
    2b9a:	70 e0       	ldi	r23, 0x00	; 0
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	2a f0       	brmi	.+10     	; 0x2baa <__floatsisf+0x6c>
    2ba0:	9a 95       	dec	r25
    2ba2:	66 0f       	add	r22, r22
    2ba4:	77 1f       	adc	r23, r23
    2ba6:	88 1f       	adc	r24, r24
    2ba8:	da f7       	brpl	.-10     	; 0x2ba0 <__floatsisf+0x62>
    2baa:	88 0f       	add	r24, r24
    2bac:	96 95       	lsr	r25
    2bae:	87 95       	ror	r24
    2bb0:	97 f9       	bld	r25, 7
    2bb2:	08 95       	ret

00002bb4 <__fp_cmp>:
    2bb4:	99 0f       	add	r25, r25
    2bb6:	00 08       	sbc	r0, r0
    2bb8:	55 0f       	add	r21, r21
    2bba:	aa 0b       	sbc	r26, r26
    2bbc:	e0 e8       	ldi	r30, 0x80	; 128
    2bbe:	fe ef       	ldi	r31, 0xFE	; 254
    2bc0:	16 16       	cp	r1, r22
    2bc2:	17 06       	cpc	r1, r23
    2bc4:	e8 07       	cpc	r30, r24
    2bc6:	f9 07       	cpc	r31, r25
    2bc8:	c0 f0       	brcs	.+48     	; 0x2bfa <__fp_cmp+0x46>
    2bca:	12 16       	cp	r1, r18
    2bcc:	13 06       	cpc	r1, r19
    2bce:	e4 07       	cpc	r30, r20
    2bd0:	f5 07       	cpc	r31, r21
    2bd2:	98 f0       	brcs	.+38     	; 0x2bfa <__fp_cmp+0x46>
    2bd4:	62 1b       	sub	r22, r18
    2bd6:	73 0b       	sbc	r23, r19
    2bd8:	84 0b       	sbc	r24, r20
    2bda:	95 0b       	sbc	r25, r21
    2bdc:	39 f4       	brne	.+14     	; 0x2bec <__fp_cmp+0x38>
    2bde:	0a 26       	eor	r0, r26
    2be0:	61 f0       	breq	.+24     	; 0x2bfa <__fp_cmp+0x46>
    2be2:	23 2b       	or	r18, r19
    2be4:	24 2b       	or	r18, r20
    2be6:	25 2b       	or	r18, r21
    2be8:	21 f4       	brne	.+8      	; 0x2bf2 <__fp_cmp+0x3e>
    2bea:	08 95       	ret
    2bec:	0a 26       	eor	r0, r26
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <__fp_cmp+0x3e>
    2bf0:	a1 40       	sbci	r26, 0x01	; 1
    2bf2:	a6 95       	lsr	r26
    2bf4:	8f ef       	ldi	r24, 0xFF	; 255
    2bf6:	81 1d       	adc	r24, r1
    2bf8:	81 1d       	adc	r24, r1
    2bfa:	08 95       	ret

00002bfc <__fp_inf>:
    2bfc:	97 f9       	bld	r25, 7
    2bfe:	9f 67       	ori	r25, 0x7F	; 127
    2c00:	80 e8       	ldi	r24, 0x80	; 128
    2c02:	70 e0       	ldi	r23, 0x00	; 0
    2c04:	60 e0       	ldi	r22, 0x00	; 0
    2c06:	08 95       	ret

00002c08 <__fp_nan>:
    2c08:	9f ef       	ldi	r25, 0xFF	; 255
    2c0a:	80 ec       	ldi	r24, 0xC0	; 192
    2c0c:	08 95       	ret

00002c0e <__fp_powser>:
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	1f 93       	push	r17
    2c14:	0f 93       	push	r16
    2c16:	ff 92       	push	r15
    2c18:	ef 92       	push	r14
    2c1a:	df 92       	push	r13
    2c1c:	7b 01       	movw	r14, r22
    2c1e:	8c 01       	movw	r16, r24
    2c20:	68 94       	set
    2c22:	06 c0       	rjmp	.+12     	; 0x2c30 <__fp_powser+0x22>
    2c24:	da 2e       	mov	r13, r26
    2c26:	ef 01       	movw	r28, r30
    2c28:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3x>
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e8 94       	clt
    2c30:	a5 91       	lpm	r26, Z+
    2c32:	25 91       	lpm	r18, Z+
    2c34:	35 91       	lpm	r19, Z+
    2c36:	45 91       	lpm	r20, Z+
    2c38:	55 91       	lpm	r21, Z+
    2c3a:	a6 f3       	brts	.-24     	; 0x2c24 <__fp_powser+0x16>
    2c3c:	ef 01       	movw	r28, r30
    2c3e:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3x>
    2c42:	fe 01       	movw	r30, r28
    2c44:	97 01       	movw	r18, r14
    2c46:	a8 01       	movw	r20, r16
    2c48:	da 94       	dec	r13
    2c4a:	69 f7       	brne	.-38     	; 0x2c26 <__fp_powser+0x18>
    2c4c:	df 90       	pop	r13
    2c4e:	ef 90       	pop	r14
    2c50:	ff 90       	pop	r15
    2c52:	0f 91       	pop	r16
    2c54:	1f 91       	pop	r17
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <__fp_pscA>:
    2c5c:	00 24       	eor	r0, r0
    2c5e:	0a 94       	dec	r0
    2c60:	16 16       	cp	r1, r22
    2c62:	17 06       	cpc	r1, r23
    2c64:	18 06       	cpc	r1, r24
    2c66:	09 06       	cpc	r0, r25
    2c68:	08 95       	ret

00002c6a <__fp_pscB>:
    2c6a:	00 24       	eor	r0, r0
    2c6c:	0a 94       	dec	r0
    2c6e:	12 16       	cp	r1, r18
    2c70:	13 06       	cpc	r1, r19
    2c72:	14 06       	cpc	r1, r20
    2c74:	05 06       	cpc	r0, r21
    2c76:	08 95       	ret
    2c78:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__fp_nan>

00002c7c <__fp_rempio2>:
    2c7c:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__fp_splitA>
    2c80:	d8 f3       	brcs	.-10     	; 0x2c78 <__fp_pscB+0xe>
    2c82:	e8 94       	clt
    2c84:	e0 e0       	ldi	r30, 0x00	; 0
    2c86:	bb 27       	eor	r27, r27
    2c88:	9f 57       	subi	r25, 0x7F	; 127
    2c8a:	f0 f0       	brcs	.+60     	; 0x2cc8 <__fp_rempio2+0x4c>
    2c8c:	2a ed       	ldi	r18, 0xDA	; 218
    2c8e:	3f e0       	ldi	r19, 0x0F	; 15
    2c90:	49 ec       	ldi	r20, 0xC9	; 201
    2c92:	06 c0       	rjmp	.+12     	; 0x2ca0 <__fp_rempio2+0x24>
    2c94:	ee 0f       	add	r30, r30
    2c96:	bb 0f       	add	r27, r27
    2c98:	66 1f       	adc	r22, r22
    2c9a:	77 1f       	adc	r23, r23
    2c9c:	88 1f       	adc	r24, r24
    2c9e:	28 f0       	brcs	.+10     	; 0x2caa <__fp_rempio2+0x2e>
    2ca0:	b2 3a       	cpi	r27, 0xA2	; 162
    2ca2:	62 07       	cpc	r22, r18
    2ca4:	73 07       	cpc	r23, r19
    2ca6:	84 07       	cpc	r24, r20
    2ca8:	28 f0       	brcs	.+10     	; 0x2cb4 <__fp_rempio2+0x38>
    2caa:	b2 5a       	subi	r27, 0xA2	; 162
    2cac:	62 0b       	sbc	r22, r18
    2cae:	73 0b       	sbc	r23, r19
    2cb0:	84 0b       	sbc	r24, r20
    2cb2:	e3 95       	inc	r30
    2cb4:	9a 95       	dec	r25
    2cb6:	72 f7       	brpl	.-36     	; 0x2c94 <__fp_rempio2+0x18>
    2cb8:	80 38       	cpi	r24, 0x80	; 128
    2cba:	30 f4       	brcc	.+12     	; 0x2cc8 <__fp_rempio2+0x4c>
    2cbc:	9a 95       	dec	r25
    2cbe:	bb 0f       	add	r27, r27
    2cc0:	66 1f       	adc	r22, r22
    2cc2:	77 1f       	adc	r23, r23
    2cc4:	88 1f       	adc	r24, r24
    2cc6:	d2 f7       	brpl	.-12     	; 0x2cbc <__fp_rempio2+0x40>
    2cc8:	90 48       	sbci	r25, 0x80	; 128
    2cca:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__fp_mpack_finite>

00002cce <__fp_round>:
    2cce:	09 2e       	mov	r0, r25
    2cd0:	03 94       	inc	r0
    2cd2:	00 0c       	add	r0, r0
    2cd4:	11 f4       	brne	.+4      	; 0x2cda <__fp_round+0xc>
    2cd6:	88 23       	and	r24, r24
    2cd8:	52 f0       	brmi	.+20     	; 0x2cee <__fp_round+0x20>
    2cda:	bb 0f       	add	r27, r27
    2cdc:	40 f4       	brcc	.+16     	; 0x2cee <__fp_round+0x20>
    2cde:	bf 2b       	or	r27, r31
    2ce0:	11 f4       	brne	.+4      	; 0x2ce6 <__fp_round+0x18>
    2ce2:	60 ff       	sbrs	r22, 0
    2ce4:	04 c0       	rjmp	.+8      	; 0x2cee <__fp_round+0x20>
    2ce6:	6f 5f       	subi	r22, 0xFF	; 255
    2ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cea:	8f 4f       	sbci	r24, 0xFF	; 255
    2cec:	9f 4f       	sbci	r25, 0xFF	; 255
    2cee:	08 95       	ret

00002cf0 <__fp_sinus>:
    2cf0:	ef 93       	push	r30
    2cf2:	e0 ff       	sbrs	r30, 0
    2cf4:	07 c0       	rjmp	.+14     	; 0x2d04 <__fp_sinus+0x14>
    2cf6:	a2 ea       	ldi	r26, 0xA2	; 162
    2cf8:	2a ed       	ldi	r18, 0xDA	; 218
    2cfa:	3f e0       	ldi	r19, 0x0F	; 15
    2cfc:	49 ec       	ldi	r20, 0xC9	; 201
    2cfe:	5f eb       	ldi	r21, 0xBF	; 191
    2d00:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3x>
    2d04:	0e 94 67 16 	call	0x2cce	; 0x2cce <__fp_round>
    2d08:	0f 90       	pop	r0
    2d0a:	03 94       	inc	r0
    2d0c:	01 fc       	sbrc	r0, 1
    2d0e:	90 58       	subi	r25, 0x80	; 128
    2d10:	e1 e0       	ldi	r30, 0x01	; 1
    2d12:	f1 e0       	ldi	r31, 0x01	; 1
    2d14:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__fp_powsodd>

00002d18 <__fp_split3>:
    2d18:	57 fd       	sbrc	r21, 7
    2d1a:	90 58       	subi	r25, 0x80	; 128
    2d1c:	44 0f       	add	r20, r20
    2d1e:	55 1f       	adc	r21, r21
    2d20:	59 f0       	breq	.+22     	; 0x2d38 <__fp_splitA+0x10>
    2d22:	5f 3f       	cpi	r21, 0xFF	; 255
    2d24:	71 f0       	breq	.+28     	; 0x2d42 <__fp_splitA+0x1a>
    2d26:	47 95       	ror	r20

00002d28 <__fp_splitA>:
    2d28:	88 0f       	add	r24, r24
    2d2a:	97 fb       	bst	r25, 7
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	61 f0       	breq	.+24     	; 0x2d48 <__fp_splitA+0x20>
    2d30:	9f 3f       	cpi	r25, 0xFF	; 255
    2d32:	79 f0       	breq	.+30     	; 0x2d52 <__fp_splitA+0x2a>
    2d34:	87 95       	ror	r24
    2d36:	08 95       	ret
    2d38:	12 16       	cp	r1, r18
    2d3a:	13 06       	cpc	r1, r19
    2d3c:	14 06       	cpc	r1, r20
    2d3e:	55 1f       	adc	r21, r21
    2d40:	f2 cf       	rjmp	.-28     	; 0x2d26 <__fp_split3+0xe>
    2d42:	46 95       	lsr	r20
    2d44:	f1 df       	rcall	.-30     	; 0x2d28 <__fp_splitA>
    2d46:	08 c0       	rjmp	.+16     	; 0x2d58 <__fp_splitA+0x30>
    2d48:	16 16       	cp	r1, r22
    2d4a:	17 06       	cpc	r1, r23
    2d4c:	18 06       	cpc	r1, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	f1 cf       	rjmp	.-30     	; 0x2d34 <__fp_splitA+0xc>
    2d52:	86 95       	lsr	r24
    2d54:	71 05       	cpc	r23, r1
    2d56:	61 05       	cpc	r22, r1
    2d58:	08 94       	sec
    2d5a:	08 95       	ret

00002d5c <__fp_zero>:
    2d5c:	e8 94       	clt

00002d5e <__fp_szero>:
    2d5e:	bb 27       	eor	r27, r27
    2d60:	66 27       	eor	r22, r22
    2d62:	77 27       	eor	r23, r23
    2d64:	cb 01       	movw	r24, r22
    2d66:	97 f9       	bld	r25, 7
    2d68:	08 95       	ret

00002d6a <__gesf2>:
    2d6a:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <__fp_cmp>
    2d6e:	08 f4       	brcc	.+2      	; 0x2d72 <__gesf2+0x8>
    2d70:	8f ef       	ldi	r24, 0xFF	; 255
    2d72:	08 95       	ret

00002d74 <inverse>:
    2d74:	9b 01       	movw	r18, r22
    2d76:	ac 01       	movw	r20, r24
    2d78:	60 e0       	ldi	r22, 0x00	; 0
    2d7a:	70 e0       	ldi	r23, 0x00	; 0
    2d7c:	80 e8       	ldi	r24, 0x80	; 128
    2d7e:	9f e3       	ldi	r25, 0x3F	; 63
    2d80:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__divsf3>

00002d84 <__mulsf3>:
    2d84:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3x>
    2d88:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__fp_round>
    2d8c:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__fp_pscA>
    2d90:	38 f0       	brcs	.+14     	; 0x2da0 <__mulsf3+0x1c>
    2d92:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__fp_pscB>
    2d96:	20 f0       	brcs	.+8      	; 0x2da0 <__mulsf3+0x1c>
    2d98:	95 23       	and	r25, r21
    2d9a:	11 f0       	breq	.+4      	; 0x2da0 <__mulsf3+0x1c>
    2d9c:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__fp_inf>
    2da0:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__fp_nan>
    2da4:	11 24       	eor	r1, r1
    2da6:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__fp_szero>

00002daa <__mulsf3x>:
    2daa:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__fp_split3>
    2dae:	70 f3       	brcs	.-36     	; 0x2d8c <__mulsf3+0x8>

00002db0 <__mulsf3_pse>:
    2db0:	95 9f       	mul	r25, r21
    2db2:	c1 f3       	breq	.-16     	; 0x2da4 <__mulsf3+0x20>
    2db4:	95 0f       	add	r25, r21
    2db6:	50 e0       	ldi	r21, 0x00	; 0
    2db8:	55 1f       	adc	r21, r21
    2dba:	62 9f       	mul	r22, r18
    2dbc:	f0 01       	movw	r30, r0
    2dbe:	72 9f       	mul	r23, r18
    2dc0:	bb 27       	eor	r27, r27
    2dc2:	f0 0d       	add	r31, r0
    2dc4:	b1 1d       	adc	r27, r1
    2dc6:	63 9f       	mul	r22, r19
    2dc8:	aa 27       	eor	r26, r26
    2dca:	f0 0d       	add	r31, r0
    2dcc:	b1 1d       	adc	r27, r1
    2dce:	aa 1f       	adc	r26, r26
    2dd0:	64 9f       	mul	r22, r20
    2dd2:	66 27       	eor	r22, r22
    2dd4:	b0 0d       	add	r27, r0
    2dd6:	a1 1d       	adc	r26, r1
    2dd8:	66 1f       	adc	r22, r22
    2dda:	82 9f       	mul	r24, r18
    2ddc:	22 27       	eor	r18, r18
    2dde:	b0 0d       	add	r27, r0
    2de0:	a1 1d       	adc	r26, r1
    2de2:	62 1f       	adc	r22, r18
    2de4:	73 9f       	mul	r23, r19
    2de6:	b0 0d       	add	r27, r0
    2de8:	a1 1d       	adc	r26, r1
    2dea:	62 1f       	adc	r22, r18
    2dec:	83 9f       	mul	r24, r19
    2dee:	a0 0d       	add	r26, r0
    2df0:	61 1d       	adc	r22, r1
    2df2:	22 1f       	adc	r18, r18
    2df4:	74 9f       	mul	r23, r20
    2df6:	33 27       	eor	r19, r19
    2df8:	a0 0d       	add	r26, r0
    2dfa:	61 1d       	adc	r22, r1
    2dfc:	23 1f       	adc	r18, r19
    2dfe:	84 9f       	mul	r24, r20
    2e00:	60 0d       	add	r22, r0
    2e02:	21 1d       	adc	r18, r1
    2e04:	82 2f       	mov	r24, r18
    2e06:	76 2f       	mov	r23, r22
    2e08:	6a 2f       	mov	r22, r26
    2e0a:	11 24       	eor	r1, r1
    2e0c:	9f 57       	subi	r25, 0x7F	; 127
    2e0e:	50 40       	sbci	r21, 0x00	; 0
    2e10:	9a f0       	brmi	.+38     	; 0x2e38 <__mulsf3_pse+0x88>
    2e12:	f1 f0       	breq	.+60     	; 0x2e50 <__mulsf3_pse+0xa0>
    2e14:	88 23       	and	r24, r24
    2e16:	4a f0       	brmi	.+18     	; 0x2e2a <__mulsf3_pse+0x7a>
    2e18:	ee 0f       	add	r30, r30
    2e1a:	ff 1f       	adc	r31, r31
    2e1c:	bb 1f       	adc	r27, r27
    2e1e:	66 1f       	adc	r22, r22
    2e20:	77 1f       	adc	r23, r23
    2e22:	88 1f       	adc	r24, r24
    2e24:	91 50       	subi	r25, 0x01	; 1
    2e26:	50 40       	sbci	r21, 0x00	; 0
    2e28:	a9 f7       	brne	.-22     	; 0x2e14 <__mulsf3_pse+0x64>
    2e2a:	9e 3f       	cpi	r25, 0xFE	; 254
    2e2c:	51 05       	cpc	r21, r1
    2e2e:	80 f0       	brcs	.+32     	; 0x2e50 <__mulsf3_pse+0xa0>
    2e30:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__fp_inf>
    2e34:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__fp_szero>
    2e38:	5f 3f       	cpi	r21, 0xFF	; 255
    2e3a:	e4 f3       	brlt	.-8      	; 0x2e34 <__mulsf3_pse+0x84>
    2e3c:	98 3e       	cpi	r25, 0xE8	; 232
    2e3e:	d4 f3       	brlt	.-12     	; 0x2e34 <__mulsf3_pse+0x84>
    2e40:	86 95       	lsr	r24
    2e42:	77 95       	ror	r23
    2e44:	67 95       	ror	r22
    2e46:	b7 95       	ror	r27
    2e48:	f7 95       	ror	r31
    2e4a:	e7 95       	ror	r30
    2e4c:	9f 5f       	subi	r25, 0xFF	; 255
    2e4e:	c1 f7       	brne	.-16     	; 0x2e40 <__mulsf3_pse+0x90>
    2e50:	fe 2b       	or	r31, r30
    2e52:	88 0f       	add	r24, r24
    2e54:	91 1d       	adc	r25, r1
    2e56:	96 95       	lsr	r25
    2e58:	87 95       	ror	r24
    2e5a:	97 f9       	bld	r25, 7
    2e5c:	08 95       	ret

00002e5e <sin>:
    2e5e:	9f 93       	push	r25
    2e60:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__fp_rempio2>
    2e64:	0f 90       	pop	r0
    2e66:	07 fc       	sbrc	r0, 7
    2e68:	ee 5f       	subi	r30, 0xFE	; 254
    2e6a:	0c 94 78 16 	jmp	0x2cf0	; 0x2cf0 <__fp_sinus>
    2e6e:	19 f4       	brne	.+6      	; 0x2e76 <sin+0x18>
    2e70:	16 f4       	brtc	.+4      	; 0x2e76 <sin+0x18>
    2e72:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__fp_nan>
    2e76:	0c 94 81 17 	jmp	0x2f02	; 0x2f02 <__fp_mpack>

00002e7a <sqrt>:
    2e7a:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__fp_splitA>
    2e7e:	b8 f3       	brcs	.-18     	; 0x2e6e <sin+0x10>
    2e80:	99 23       	and	r25, r25
    2e82:	c9 f3       	breq	.-14     	; 0x2e76 <sin+0x18>
    2e84:	b6 f3       	brts	.-20     	; 0x2e72 <sin+0x14>
    2e86:	9f 57       	subi	r25, 0x7F	; 127
    2e88:	55 0b       	sbc	r21, r21
    2e8a:	87 ff       	sbrs	r24, 7
    2e8c:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__fp_norm2>
    2e90:	00 24       	eor	r0, r0
    2e92:	a0 e6       	ldi	r26, 0x60	; 96
    2e94:	40 ea       	ldi	r20, 0xA0	; 160
    2e96:	90 01       	movw	r18, r0
    2e98:	80 58       	subi	r24, 0x80	; 128
    2e9a:	56 95       	lsr	r21
    2e9c:	97 95       	ror	r25
    2e9e:	28 f4       	brcc	.+10     	; 0x2eaa <sqrt+0x30>
    2ea0:	80 5c       	subi	r24, 0xC0	; 192
    2ea2:	66 0f       	add	r22, r22
    2ea4:	77 1f       	adc	r23, r23
    2ea6:	88 1f       	adc	r24, r24
    2ea8:	20 f0       	brcs	.+8      	; 0x2eb2 <sqrt+0x38>
    2eaa:	26 17       	cp	r18, r22
    2eac:	37 07       	cpc	r19, r23
    2eae:	48 07       	cpc	r20, r24
    2eb0:	30 f4       	brcc	.+12     	; 0x2ebe <sqrt+0x44>
    2eb2:	62 1b       	sub	r22, r18
    2eb4:	73 0b       	sbc	r23, r19
    2eb6:	84 0b       	sbc	r24, r20
    2eb8:	20 29       	or	r18, r0
    2eba:	31 29       	or	r19, r1
    2ebc:	4a 2b       	or	r20, r26
    2ebe:	a6 95       	lsr	r26
    2ec0:	17 94       	ror	r1
    2ec2:	07 94       	ror	r0
    2ec4:	20 25       	eor	r18, r0
    2ec6:	31 25       	eor	r19, r1
    2ec8:	4a 27       	eor	r20, r26
    2eca:	58 f7       	brcc	.-42     	; 0x2ea2 <sqrt+0x28>
    2ecc:	66 0f       	add	r22, r22
    2ece:	77 1f       	adc	r23, r23
    2ed0:	88 1f       	adc	r24, r24
    2ed2:	20 f0       	brcs	.+8      	; 0x2edc <sqrt+0x62>
    2ed4:	26 17       	cp	r18, r22
    2ed6:	37 07       	cpc	r19, r23
    2ed8:	48 07       	cpc	r20, r24
    2eda:	30 f4       	brcc	.+12     	; 0x2ee8 <sqrt+0x6e>
    2edc:	62 0b       	sbc	r22, r18
    2ede:	73 0b       	sbc	r23, r19
    2ee0:	84 0b       	sbc	r24, r20
    2ee2:	20 0d       	add	r18, r0
    2ee4:	31 1d       	adc	r19, r1
    2ee6:	41 1d       	adc	r20, r1
    2ee8:	a0 95       	com	r26
    2eea:	81 f7       	brne	.-32     	; 0x2ecc <sqrt+0x52>
    2eec:	b9 01       	movw	r22, r18
    2eee:	84 2f       	mov	r24, r20
    2ef0:	91 58       	subi	r25, 0x81	; 129
    2ef2:	88 0f       	add	r24, r24
    2ef4:	96 95       	lsr	r25
    2ef6:	87 95       	ror	r24
    2ef8:	08 95       	ret

00002efa <square>:
    2efa:	9b 01       	movw	r18, r22
    2efc:	ac 01       	movw	r20, r24
    2efe:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__mulsf3>

00002f02 <__fp_mpack>:
    2f02:	9f 3f       	cpi	r25, 0xFF	; 255
    2f04:	31 f0       	breq	.+12     	; 0x2f12 <__fp_mpack_finite+0xc>

00002f06 <__fp_mpack_finite>:
    2f06:	91 50       	subi	r25, 0x01	; 1
    2f08:	20 f4       	brcc	.+8      	; 0x2f12 <__fp_mpack_finite+0xc>
    2f0a:	87 95       	ror	r24
    2f0c:	77 95       	ror	r23
    2f0e:	67 95       	ror	r22
    2f10:	b7 95       	ror	r27
    2f12:	88 0f       	add	r24, r24
    2f14:	91 1d       	adc	r25, r1
    2f16:	96 95       	lsr	r25
    2f18:	87 95       	ror	r24
    2f1a:	97 f9       	bld	r25, 7
    2f1c:	08 95       	ret

00002f1e <__fp_norm2>:
    2f1e:	91 50       	subi	r25, 0x01	; 1
    2f20:	50 40       	sbci	r21, 0x00	; 0
    2f22:	66 0f       	add	r22, r22
    2f24:	77 1f       	adc	r23, r23
    2f26:	88 1f       	adc	r24, r24
    2f28:	d2 f7       	brpl	.-12     	; 0x2f1e <__fp_norm2>
    2f2a:	08 95       	ret

00002f2c <__fp_powsodd>:
    2f2c:	9f 93       	push	r25
    2f2e:	8f 93       	push	r24
    2f30:	7f 93       	push	r23
    2f32:	6f 93       	push	r22
    2f34:	ff 93       	push	r31
    2f36:	ef 93       	push	r30
    2f38:	9b 01       	movw	r18, r22
    2f3a:	ac 01       	movw	r20, r24
    2f3c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsf3>
    2f40:	ef 91       	pop	r30
    2f42:	ff 91       	pop	r31
    2f44:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__fp_powser>
    2f48:	2f 91       	pop	r18
    2f4a:	3f 91       	pop	r19
    2f4c:	4f 91       	pop	r20
    2f4e:	5f 91       	pop	r21
    2f50:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__mulsf3>

00002f54 <__tablejump2__>:
    2f54:	ee 0f       	add	r30, r30
    2f56:	ff 1f       	adc	r31, r31
    2f58:	05 90       	lpm	r0, Z+
    2f5a:	f4 91       	lpm	r31, Z
    2f5c:	e0 2d       	mov	r30, r0
    2f5e:	09 94       	ijmp

00002f60 <_exit>:
    2f60:	f8 94       	cli

00002f62 <__stop_program>:
    2f62:	ff cf       	rjmp	.-2      	; 0x2f62 <__stop_program>
