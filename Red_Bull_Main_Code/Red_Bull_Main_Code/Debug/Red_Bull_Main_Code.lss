
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000286c  00002900  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000286c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  00800132  00800132  00002932  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002932  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  000029a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cb3  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8c  00000000  00000000  0000593f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000116f  00000000  00000000  000065cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a58  00000000  00000000  0000773c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b26  00000000  00000000  00008194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003bde  00000000  00000000  00008cba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000c898  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__ctors_end>
       4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       c:	0c 94 8a 07 	jmp	0xf14	; 0xf14 <__vector_3>
      10:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      14:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      18:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      1c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      20:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      24:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      28:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__vector_10>
      2c:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__vector_11>
      30:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      34:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      38:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      3c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      40:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      44:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__vector_17>
      48:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__vector_18>
      4c:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__vector_19>
      50:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      54:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      58:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      5c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      60:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      64:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      68:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      6c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      70:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      74:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      78:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      7c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      80:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__vector_32>
      84:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      8c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      90:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      94:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      98:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      9c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__trampolines_end>:
      f8:	00 01       	movw	r0, r0
      fa:	00 00       	nop
      fc:	8f 01       	movw	r16, r30
      fe:	12 00       	.word	0x0012	; ????
     100:	02 00       	.word	0x0002	; ????
     102:	00 4c       	sbci	r16, 0xC0	; 192
     104:	01 43       	sbci	r16, 0x31	; 49
     106:	00 03       	mulsu	r16, r16
     108:	00 00       	nop
     10a:	48 01       	movw	r8, r16
     10c:	04 01       	movw	r0, r8
     10e:	03 09       	sbc	r16, r3
     110:	04 34       	cpi	r16, 0x44	; 68
     112:	01 12       	cpse	r0, r17
     114:	02 03       	mulsu	r16, r18
     116:	09 04       	cpc	r0, r9
     118:	2c 01       	movw	r4, r24
     11a:	06 03       	mulsu	r16, r22
     11c:	03 09       	sbc	r16, r3
     11e:	04 22       	and	r0, r20
     120:	01 08       	sbc	r0, r1

00000122 <string3>:
     122:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000012c <string2>:
     12c:	06 03 4d 00 32 00 00 00                             ..M.2...

00000134 <string1>:
     134:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     144:	65 00 00 00                                         e...

00000148 <string0>:
     148:	04 03 09 04                                         ....

0000014c <config1_descriptor>:
     14c:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     15c:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     16c:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     17c:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     18c:	40 00 00                                            @..

0000018f <device_descriptor>:
     18f:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     19f:	03 01                                               ..

000001a1 <endpoint_config_table>:
     1a1:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001ac <__ctors_end>:
     1ac:	11 24       	eor	r1, r1
     1ae:	1f be       	out	0x3f, r1	; 63
     1b0:	cf ef       	ldi	r28, 0xFF	; 255
     1b2:	da e0       	ldi	r29, 0x0A	; 10
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	cd bf       	out	0x3d, r28	; 61

000001b8 <__do_copy_data>:
     1b8:	11 e0       	ldi	r17, 0x01	; 1
     1ba:	a0 e0       	ldi	r26, 0x00	; 0
     1bc:	b1 e0       	ldi	r27, 0x01	; 1
     1be:	ec e6       	ldi	r30, 0x6C	; 108
     1c0:	f8 e2       	ldi	r31, 0x28	; 40
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__do_copy_data+0x10>
     1c4:	05 90       	lpm	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	a2 33       	cpi	r26, 0x32	; 50
     1ca:	b1 07       	cpc	r27, r17
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <__do_copy_data+0xc>

000001ce <__do_clear_bss>:
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	a2 e3       	ldi	r26, 0x32	; 50
     1d2:	b1 e0       	ldi	r27, 0x01	; 1
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <.do_clear_bss_start>

000001d6 <.do_clear_bss_loop>:
     1d6:	1d 92       	st	X+, r1

000001d8 <.do_clear_bss_start>:
     1d8:	aa 38       	cpi	r26, 0x8A	; 138
     1da:	b2 07       	cpc	r27, r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <.do_clear_bss_loop>
     1de:	0e 94 cb 06 	call	0xd96	; 0xd96 <main>
     1e2:	0c 94 34 14 	jmp	0x2868	; 0x2868 <_exit>

000001e6 <__bad_interrupt>:
     1e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ea <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(void) {
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29

	/* Initialization of Pins and System Clock */

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     1f2:	e1 e6       	ldi	r30, 0x61	; 97
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 e8       	ldi	r24, 0x80	; 128
     1f8:	80 83       	st	Z, r24
     1fa:	10 82       	st	Z, r1
	
	//Set to Input
	clear(DDRD,0); // D0
     1fc:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     1fe:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     200:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     202:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     204:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     206:	23 9a       	sbi	0x04, 3	; 4
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     208:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     20a:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     20c:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     20e:	2b 98       	cbi	0x05, 3	; 5
	
	m_bus_init();
     210:	0e 94 0d 0c 	call	0x181a	; 0x181a <m_bus_init>
	while(!m_wii_open());
     214:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <m_wii_open>
     218:	88 23       	and	r24, r24
     21a:	e1 f3       	breq	.-8      	; 0x214 <initialize_robockey+0x2a>
	sei();
     21c:	78 94       	sei




	/* Setup USB */
	m_usb_init();
     21e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <m_usb_init>


	/* Timer1 Initialization for PWM Motor Control */

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     222:	e1 e8       	ldi	r30, 0x81	; 129
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	8b 7f       	andi	r24, 0xFB	; 251
     22a:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     22c:	80 81       	ld	r24, Z
     22e:	8d 7f       	andi	r24, 0xFD	; 253
     230:	80 83       	st	Z, r24
	set(TCCR1B,CS10);
     232:	80 81       	ld	r24, Z
     234:	81 60       	ori	r24, 0x01	; 1
     236:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     238:	80 81       	ld	r24, Z
     23a:	8f 7e       	andi	r24, 0xEF	; 239
     23c:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     23e:	80 81       	ld	r24, Z
     240:	88 60       	ori	r24, 0x08	; 8
     242:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     244:	e0 e8       	ldi	r30, 0x80	; 128
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	8d 7f       	andi	r24, 0xFD	; 253
     24c:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     24e:	80 81       	ld	r24, Z
     250:	8e 7f       	andi	r24, 0xFE	; 254
     252:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     254:	80 81       	ld	r24, Z
     256:	8f 7d       	andi	r24, 0xDF	; 223
     258:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     25a:	80 81       	ld	r24, Z
     25c:	8f 7e       	andi	r24, 0xEF	; 239
     25e:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     260:	08 e8       	ldi	r16, 0x88	; 136
     262:	10 e0       	ldi	r17, 0x00	; 0
     264:	c0 e8       	ldi	r28, 0x80	; 128
     266:	de e3       	ldi	r29, 0x3E	; 62
     268:	f8 01       	movw	r30, r16
     26a:	d1 83       	std	Z+1, r29	; 0x01
     26c:	c0 83       	st	Z, r28
	OCR1B = (float)OCR1A*0.1;
     26e:	60 81       	ld	r22, Z
     270:	71 81       	ldd	r23, Z+1	; 0x01
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 27 12 	call	0x244e	; 0x244e <__floatunsisf>
     27a:	2d ec       	ldi	r18, 0xCD	; 205
     27c:	3c ec       	ldi	r19, 0xCC	; 204
     27e:	4c ec       	ldi	r20, 0xCC	; 204
     280:	5d e3       	ldi	r21, 0x3D	; 61
     282:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     286:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__fixunssfsi>
     28a:	70 93 8b 00 	sts	0x008B, r23
     28e:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     292:	f8 01       	movw	r30, r16
     294:	60 81       	ld	r22, Z
     296:	71 81       	ldd	r23, Z+1	; 0x01
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 27 12 	call	0x244e	; 0x244e <__floatunsisf>
     2a0:	2d ec       	ldi	r18, 0xCD	; 205
     2a2:	3c ec       	ldi	r19, 0xCC	; 204
     2a4:	4c ec       	ldi	r20, 0xCC	; 204
     2a6:	5d e3       	ldi	r21, 0x3D	; 61
     2a8:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     2ac:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__fixunssfsi>
     2b0:	70 93 8d 00 	sts	0x008D, r23
     2b4:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     2b8:	ef e6       	ldi	r30, 0x6F	; 111
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	82 60       	ori	r24, 0x02	; 2
     2c0:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     2c2:	80 81       	ld	r24, Z
     2c4:	84 60       	ori	r24, 0x04	; 4
     2c6:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     2c8:	80 81       	ld	r24, Z
     2ca:	88 60       	ori	r24, 0x08	; 8
     2cc:	80 83       	st	Z, r24


	
	/* Timer3 Initialization for fixed timestep calculations */

	clear(TCCR3B,CS32); // prescale /1
     2ce:	e1 e9       	ldi	r30, 0x91	; 145
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	8b 7f       	andi	r24, 0xFB	; 251
     2d6:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     2d8:	80 81       	ld	r24, Z
     2da:	8d 7f       	andi	r24, 0xFD	; 253
     2dc:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     2de:	80 81       	ld	r24, Z
     2e0:	81 60       	ori	r24, 0x01	; 1
     2e2:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     2e4:	80 81       	ld	r24, Z
     2e6:	8f 7e       	andi	r24, 0xEF	; 239
     2e8:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     2ea:	80 81       	ld	r24, Z
     2ec:	88 60       	ori	r24, 0x08	; 8
     2ee:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     2f0:	e0 e9       	ldi	r30, 0x90	; 144
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8d 7f       	andi	r24, 0xFD	; 253
     2f8:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     2fa:	80 81       	ld	r24, Z
     2fc:	8e 7f       	andi	r24, 0xFE	; 254
     2fe:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     300:	d0 93 99 00 	sts	0x0099, r29
     304:	c0 93 98 00 	sts	0x0098, r28

	set(TIMSK3,OCIE3A); // OCR3A interrupt vector
     308:	e1 e7       	ldi	r30, 0x71	; 113
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	82 60       	ori	r24, 0x02	; 2
     310:	80 83       	st	Z, r24



	/* Initialize the Wireless System */

	m_bus_init(); // Enable mBUS
     312:	0e 94 0d 0c 	call	0x181a	; 0x181a <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS_1,PACKET_LENGTH); // Configure mRF
     316:	4a e0       	ldi	r20, 0x0A	; 10
     318:	60 e2       	ldi	r22, 0x20	; 32
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	0e 94 1e 0c 	call	0x183c	; 0x183c <m_rf_open>
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	08 95       	ret

0000032a <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     32a:	82 30       	cpi	r24, 0x02	; 2
     32c:	91 05       	cpc	r25, r1
     32e:	f9 f0       	breq	.+62     	; 0x36e <distIndex+0x44>
     330:	2c f4       	brge	.+10     	; 0x33c <distIndex+0x12>
     332:	00 97       	sbiw	r24, 0x00	; 0
     334:	51 f0       	breq	.+20     	; 0x34a <distIndex+0x20>
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	89 f0       	breq	.+34     	; 0x35c <distIndex+0x32>
     33a:	42 c0       	rjmp	.+132    	; 0x3c0 <distIndex+0x96>
     33c:	84 30       	cpi	r24, 0x04	; 4
     33e:	91 05       	cpc	r25, r1
     340:	51 f1       	breq	.+84     	; 0x396 <distIndex+0x6c>
     342:	f4 f0       	brlt	.+60     	; 0x380 <distIndex+0x56>
     344:	05 97       	sbiw	r24, 0x05	; 5
     346:	91 f1       	breq	.+100    	; 0x3ac <distIndex+0x82>
     348:	3b c0       	rjmp	.+118    	; 0x3c0 <distIndex+0x96>
	{
		case 0 : 
			pointsUsed[0] = 0;
     34a:	e2 e3       	ldi	r30, 0x32	; 50
     34c:	f1 e0       	ldi	r31, 0x01	; 1
     34e:	11 82       	std	Z+1, r1	; 0x01
     350:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	93 83       	std	Z+3, r25	; 0x03
     358:	82 83       	std	Z+2, r24	; 0x02
			break;
     35a:	32 c0       	rjmp	.+100    	; 0x3c0 <distIndex+0x96>
			
		case 1 : 
			pointsUsed[0] = 0;
     35c:	e2 e3       	ldi	r30, 0x32	; 50
     35e:	f1 e0       	ldi	r31, 0x01	; 1
     360:	11 82       	std	Z+1, r1	; 0x01
     362:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	93 83       	std	Z+3, r25	; 0x03
     36a:	82 83       	std	Z+2, r24	; 0x02
			break;
     36c:	29 c0       	rjmp	.+82     	; 0x3c0 <distIndex+0x96>
			
		case 2 : 
			pointsUsed[0] = 0;
     36e:	e2 e3       	ldi	r30, 0x32	; 50
     370:	f1 e0       	ldi	r31, 0x01	; 1
     372:	11 82       	std	Z+1, r1	; 0x01
     374:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     376:	83 e0       	ldi	r24, 0x03	; 3
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	93 83       	std	Z+3, r25	; 0x03
     37c:	82 83       	std	Z+2, r24	; 0x02
			break;
     37e:	20 c0       	rjmp	.+64     	; 0x3c0 <distIndex+0x96>
			
		case 3 : 
			pointsUsed[0] = 1;
     380:	e2 e3       	ldi	r30, 0x32	; 50
     382:	f1 e0       	ldi	r31, 0x01	; 1
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	91 83       	std	Z+1, r25	; 0x01
     38a:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	93 83       	std	Z+3, r25	; 0x03
     392:	82 83       	std	Z+2, r24	; 0x02
			break;
     394:	15 c0       	rjmp	.+42     	; 0x3c0 <distIndex+0x96>
			
		case 4 : 
			pointsUsed[0] = 1;
     396:	e2 e3       	ldi	r30, 0x32	; 50
     398:	f1 e0       	ldi	r31, 0x01	; 1
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	91 83       	std	Z+1, r25	; 0x01
     3a0:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	93 83       	std	Z+3, r25	; 0x03
     3a8:	82 83       	std	Z+2, r24	; 0x02
			break;
     3aa:	0a c0       	rjmp	.+20     	; 0x3c0 <distIndex+0x96>
			
		case 5 :
			pointsUsed[0] = 2;
     3ac:	e2 e3       	ldi	r30, 0x32	; 50
     3ae:	f1 e0       	ldi	r31, 0x01	; 1
     3b0:	82 e0       	ldi	r24, 0x02	; 2
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	91 83       	std	Z+1, r25	; 0x01
     3b6:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     3b8:	83 e0       	ldi	r24, 0x03	; 3
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	93 83       	std	Z+3, r25	; 0x03
     3be:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     3c0:	82 e3       	ldi	r24, 0x32	; 50
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	08 95       	ret

000003c6 <orientationCalculationFour>:


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
     3c6:	2f 92       	push	r2
     3c8:	3f 92       	push	r3
     3ca:	4f 92       	push	r4
     3cc:	5f 92       	push	r5
     3ce:	6f 92       	push	r6
     3d0:	7f 92       	push	r7
     3d2:	8f 92       	push	r8
     3d4:	9f 92       	push	r9
     3d6:	af 92       	push	r10
     3d8:	bf 92       	push	r11
     3da:	cf 92       	push	r12
     3dc:	df 92       	push	r13
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	00 d0       	rcall	.+0      	; 0x3ec <orientationCalculationFour+0x26>
     3ec:	00 d0       	rcall	.+0      	; 0x3ee <orientationCalculationFour+0x28>
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
     3f2:	5c 01       	movw	r10, r24
     3f4:	4a 01       	movw	r8, r20
     3f6:	3a 83       	std	Y+2, r19	; 0x02
     3f8:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     3fa:	06 2f       	mov	r16, r22
     3fc:	17 2f       	mov	r17, r23
     3fe:	f8 01       	movw	r30, r16
     400:	41 90       	ld	r4, Z+
     402:	51 90       	ld	r5, Z+
     404:	61 90       	ld	r6, Z+
     406:	71 90       	ld	r7, Z+
     408:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     40a:	1c 82       	std	Y+4, r1	; 0x04
     40c:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     40e:	21 2c       	mov	r2, r1
     410:	31 2c       	mov	r3, r1
     412:	12 c0       	rjmp	.+36     	; 0x438 <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     414:	f8 01       	movw	r30, r16
     416:	c1 90       	ld	r12, Z+
     418:	d1 90       	ld	r13, Z+
     41a:	e1 90       	ld	r14, Z+
     41c:	f1 90       	ld	r15, Z+
     41e:	8f 01       	movw	r16, r30
     420:	a7 01       	movw	r20, r14
     422:	96 01       	movw	r18, r12
     424:	c3 01       	movw	r24, r6
     426:	b2 01       	movw	r22, r4
     428:	0e 94 3f 13 	call	0x267e	; 0x267e <__gesf2>
     42c:	18 16       	cp	r1, r24
     42e:	24 f4       	brge	.+8      	; 0x438 <orientationCalculationFour+0x72>
     430:	26 01       	movw	r4, r12
     432:	37 01       	movw	r6, r14
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     434:	2b 80       	ldd	r2, Y+3	; 0x03
     436:	3c 80       	ldd	r3, Y+4	; 0x04
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	9c 81       	ldd	r25, Y+4	; 0x04
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	9c 83       	std	Y+4, r25	; 0x04
     440:	8b 83       	std	Y+3, r24	; 0x03
     442:	06 97       	sbiw	r24, 0x06	; 6
     444:	39 f7       	brne	.-50     	; 0x414 <orientationCalculationFour+0x4e>
		}
	}
	
	//Find points used by shortest length	
	int* pointsShortRef;
	pointsShortRef = distIndex(indexMin);	
     446:	82 2d       	mov	r24, r2
     448:	93 2d       	mov	r25, r3
     44a:	0e 94 95 01 	call	0x32a	; 0x32a <distIndex>
	int pointsShort[2] = {pointsShortRef[0], pointsShortRef[1]};	
     44e:	fc 01       	movw	r30, r24
     450:	20 81       	ld	r18, Z
     452:	31 81       	ldd	r19, Z+1	; 0x01
     454:	42 81       	ldd	r20, Z+2	; 0x02
     456:	53 81       	ldd	r21, Z+3	; 0x03
	if (pointsShort[0] == pointsLong[0]){
     458:	f5 01       	movw	r30, r10
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	28 17       	cp	r18, r24
     460:	39 07       	cpc	r19, r25
     462:	59 f4       	brne	.+22     	; 0x47a <orientationCalculationFour+0xb4>
		*top = pointsLong[0];
     464:	f4 01       	movw	r30, r8
     466:	31 83       	std	Z+1, r19	; 0x01
     468:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     46a:	f5 01       	movw	r30, r10
     46c:	82 81       	ldd	r24, Z+2	; 0x02
     46e:	93 81       	ldd	r25, Z+3	; 0x03
     470:	e9 81       	ldd	r30, Y+1	; 0x01
     472:	fa 81       	ldd	r31, Y+2	; 0x02
     474:	91 83       	std	Z+1, r25	; 0x01
     476:	80 83       	st	Z, r24
     478:	3c c0       	rjmp	.+120    	; 0x4f2 <orientationCalculationFour+0x12c>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     47a:	f5 01       	movw	r30, r10
     47c:	62 81       	ldd	r22, Z+2	; 0x02
     47e:	73 81       	ldd	r23, Z+3	; 0x03
     480:	26 17       	cp	r18, r22
     482:	37 07       	cpc	r19, r23
     484:	59 f4       	brne	.+22     	; 0x49c <orientationCalculationFour+0xd6>
			*top = pointsLong[1];
     486:	f4 01       	movw	r30, r8
     488:	31 83       	std	Z+1, r19	; 0x01
     48a:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     48c:	f5 01       	movw	r30, r10
     48e:	80 81       	ld	r24, Z
     490:	91 81       	ldd	r25, Z+1	; 0x01
     492:	e9 81       	ldd	r30, Y+1	; 0x01
     494:	fa 81       	ldd	r31, Y+2	; 0x02
     496:	91 83       	std	Z+1, r25	; 0x01
     498:	80 83       	st	Z, r24
     49a:	2b c0       	rjmp	.+86     	; 0x4f2 <orientationCalculationFour+0x12c>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     49c:	48 17       	cp	r20, r24
     49e:	59 07       	cpc	r21, r25
     4a0:	59 f4       	brne	.+22     	; 0x4b8 <orientationCalculationFour+0xf2>
				*top = pointsLong[0];
     4a2:	f4 01       	movw	r30, r8
     4a4:	51 83       	std	Z+1, r21	; 0x01
     4a6:	40 83       	st	Z, r20
				*bottom = pointsLong[1];
     4a8:	f5 01       	movw	r30, r10
     4aa:	82 81       	ldd	r24, Z+2	; 0x02
     4ac:	93 81       	ldd	r25, Z+3	; 0x03
     4ae:	e9 81       	ldd	r30, Y+1	; 0x01
     4b0:	fa 81       	ldd	r31, Y+2	; 0x02
     4b2:	91 83       	std	Z+1, r25	; 0x01
     4b4:	80 83       	st	Z, r24
     4b6:	1d c0       	rjmp	.+58     	; 0x4f2 <orientationCalculationFour+0x12c>
			} else {
				if (pointsShort[1] == pointsLong[1])
     4b8:	46 17       	cp	r20, r22
     4ba:	57 07       	cpc	r21, r23
     4bc:	59 f4       	brne	.+22     	; 0x4d4 <orientationCalculationFour+0x10e>
				{
					*top = pointsLong[1];
     4be:	f4 01       	movw	r30, r8
     4c0:	51 83       	std	Z+1, r21	; 0x01
     4c2:	40 83       	st	Z, r20
					*bottom = pointsLong[0];
     4c4:	f5 01       	movw	r30, r10
     4c6:	80 81       	ld	r24, Z
     4c8:	91 81       	ldd	r25, Z+1	; 0x01
     4ca:	e9 81       	ldd	r30, Y+1	; 0x01
     4cc:	fa 81       	ldd	r31, Y+2	; 0x02
     4ce:	91 83       	std	Z+1, r25	; 0x01
     4d0:	80 83       	st	Z, r24
     4d2:	0f c0       	rjmp	.+30     	; 0x4f2 <orientationCalculationFour+0x12c>
				} else {
						m_green(OFF);
     4d4:	6a 9a       	sbi	0x0d, 2	; 13
     4d6:	72 9a       	sbi	0x0e, 2	; 14
						*top = pointsLong[1];
     4d8:	f5 01       	movw	r30, r10
     4da:	82 81       	ldd	r24, Z+2	; 0x02
     4dc:	93 81       	ldd	r25, Z+3	; 0x03
     4de:	f4 01       	movw	r30, r8
     4e0:	91 83       	std	Z+1, r25	; 0x01
     4e2:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     4e4:	f5 01       	movw	r30, r10
     4e6:	80 81       	ld	r24, Z
     4e8:	91 81       	ldd	r25, Z+1	; 0x01
     4ea:	e9 81       	ldd	r30, Y+1	; 0x01
     4ec:	fa 81       	ldd	r31, Y+2	; 0x02
     4ee:	91 83       	std	Z+1, r25	; 0x01
     4f0:	80 83       	st	Z, r24
				}
			}
		}
	}
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	df 90       	pop	r13
     508:	cf 90       	pop	r12
     50a:	bf 90       	pop	r11
     50c:	af 90       	pop	r10
     50e:	9f 90       	pop	r9
     510:	8f 90       	pop	r8
     512:	7f 90       	pop	r7
     514:	6f 90       	pop	r6
     516:	5f 90       	pop	r5
     518:	4f 90       	pop	r4
     51a:	3f 90       	pop	r3
     51c:	2f 90       	pop	r2
     51e:	08 95       	ret

00000520 <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     520:	2f 92       	push	r2
     522:	3f 92       	push	r3
     524:	4f 92       	push	r4
     526:	5f 92       	push	r5
     528:	6f 92       	push	r6
     52a:	7f 92       	push	r7
     52c:	8f 92       	push	r8
     52e:	9f 92       	push	r9
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	c2 54       	subi	r28, 0x42	; 66
     54a:	d1 09       	sbc	r29, r1
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     558:	fc 01       	movw	r30, r24
     55a:	04 80       	ldd	r0, Z+4	; 0x04
     55c:	f5 81       	ldd	r31, Z+5	; 0x05
     55e:	e0 2d       	mov	r30, r0
     560:	fa a3       	std	Y+34, r31	; 0x22
     562:	e9 a3       	std	Y+33, r30	; 0x21
     564:	fc 01       	movw	r30, r24
     566:	00 81       	ld	r16, Z
     568:	11 81       	ldd	r17, Z+1	; 0x01
     56a:	69 a1       	ldd	r22, Y+33	; 0x21
     56c:	7a a1       	ldd	r23, Y+34	; 0x22
     56e:	60 1b       	sub	r22, r16
     570:	71 0b       	sbc	r23, r17
     572:	07 2e       	mov	r0, r23
     574:	00 0c       	add	r0, r0
     576:	88 0b       	sbc	r24, r24
     578:	99 0b       	sbc	r25, r25
     57a:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     57e:	6b 01       	movw	r12, r22
     580:	7c 01       	movw	r14, r24
     582:	f2 01       	movw	r30, r4
     584:	06 80       	ldd	r0, Z+6	; 0x06
     586:	f7 81       	ldd	r31, Z+7	; 0x07
     588:	e0 2d       	mov	r30, r0
     58a:	fe a3       	std	Y+38, r31	; 0x26
     58c:	ed a3       	std	Y+37, r30	; 0x25
     58e:	f2 01       	movw	r30, r4
     590:	22 80       	ldd	r2, Z+2	; 0x02
     592:	33 80       	ldd	r3, Z+3	; 0x03
     594:	ad a0       	ldd	r10, Y+37	; 0x25
     596:	be a0       	ldd	r11, Y+38	; 0x26
     598:	a2 18       	sub	r10, r2
     59a:	b3 08       	sbc	r11, r3
     59c:	9b 01       	movw	r18, r22
     59e:	ac 01       	movw	r20, r24
     5a0:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     5a4:	69 a7       	std	Y+41, r22	; 0x29
     5a6:	7a a7       	std	Y+42, r23	; 0x2a
     5a8:	8b a7       	std	Y+43, r24	; 0x2b
     5aa:	9c a7       	std	Y+44, r25	; 0x2c
     5ac:	aa 9c       	mul	r10, r10
     5ae:	40 01       	movw	r8, r0
     5b0:	ab 9c       	mul	r10, r11
     5b2:	90 0c       	add	r9, r0
     5b4:	90 0c       	add	r9, r0
     5b6:	11 24       	eor	r1, r1
     5b8:	09 2c       	mov	r0, r9
     5ba:	00 0c       	add	r0, r0
     5bc:	aa 08       	sbc	r10, r10
     5be:	bb 08       	sbc	r11, r11
     5c0:	a7 01       	movw	r20, r14
     5c2:	96 01       	movw	r18, r12
     5c4:	c7 01       	movw	r24, r14
     5c6:	b6 01       	movw	r22, r12
     5c8:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     5cc:	6b 01       	movw	r12, r22
     5ce:	7c 01       	movw	r14, r24
     5d0:	c5 01       	movw	r24, r10
     5d2:	b4 01       	movw	r22, r8
     5d4:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     5d8:	9b 01       	movw	r18, r22
     5da:	ac 01       	movw	r20, r24
     5dc:	c7 01       	movw	r24, r14
     5de:	b6 01       	movw	r22, r12
     5e0:	0e 94 9e 10 	call	0x213c	; 0x213c <__addsf3>
     5e4:	0e 94 c7 13 	call	0x278e	; 0x278e <sqrt>
     5e8:	6b af       	std	Y+59, r22	; 0x3b
     5ea:	7c af       	std	Y+60, r23	; 0x3c
     5ec:	8d af       	std	Y+61, r24	; 0x3d
     5ee:	9e af       	std	Y+62, r25	; 0x3e
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     5f0:	f2 01       	movw	r30, r4
     5f2:	00 84       	ldd	r0, Z+8	; 0x08
     5f4:	f1 85       	ldd	r31, Z+9	; 0x09
     5f6:	e0 2d       	mov	r30, r0
     5f8:	fa a7       	std	Y+42, r31	; 0x2a
     5fa:	e9 a7       	std	Y+41, r30	; 0x29
     5fc:	bf 01       	movw	r22, r30
     5fe:	60 1b       	sub	r22, r16
     600:	71 0b       	sbc	r23, r17
     602:	07 2e       	mov	r0, r23
     604:	00 0c       	add	r0, r0
     606:	88 0b       	sbc	r24, r24
     608:	99 0b       	sbc	r25, r25
     60a:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     60e:	6b 01       	movw	r12, r22
     610:	7c 01       	movw	r14, r24
     612:	f2 01       	movw	r30, r4
     614:	62 84       	ldd	r6, Z+10	; 0x0a
     616:	73 84       	ldd	r7, Z+11	; 0x0b
     618:	53 01       	movw	r10, r6
     61a:	a2 18       	sub	r10, r2
     61c:	b3 08       	sbc	r11, r3
     61e:	9b 01       	movw	r18, r22
     620:	ac 01       	movw	r20, r24
     622:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     626:	6d a7       	std	Y+45, r22	; 0x2d
     628:	7e a7       	std	Y+46, r23	; 0x2e
     62a:	8f a7       	std	Y+47, r24	; 0x2f
     62c:	98 ab       	std	Y+48, r25	; 0x30
     62e:	aa 9c       	mul	r10, r10
     630:	40 01       	movw	r8, r0
     632:	ab 9c       	mul	r10, r11
     634:	90 0c       	add	r9, r0
     636:	90 0c       	add	r9, r0
     638:	11 24       	eor	r1, r1
     63a:	09 2c       	mov	r0, r9
     63c:	00 0c       	add	r0, r0
     63e:	aa 08       	sbc	r10, r10
     640:	bb 08       	sbc	r11, r11
     642:	a7 01       	movw	r20, r14
     644:	96 01       	movw	r18, r12
     646:	c7 01       	movw	r24, r14
     648:	b6 01       	movw	r22, r12
     64a:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     64e:	6b 01       	movw	r12, r22
     650:	7c 01       	movw	r14, r24
     652:	c5 01       	movw	r24, r10
     654:	b4 01       	movw	r22, r8
     656:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     65a:	9b 01       	movw	r18, r22
     65c:	ac 01       	movw	r20, r24
     65e:	c7 01       	movw	r24, r14
     660:	b6 01       	movw	r22, r12
     662:	0e 94 9e 10 	call	0x213c	; 0x213c <__addsf3>
     666:	0e 94 c7 13 	call	0x278e	; 0x278e <sqrt>
     66a:	23 96       	adiw	r28, 0x03	; 3
     66c:	6c af       	std	Y+60, r22	; 0x3c
     66e:	7d af       	std	Y+61, r23	; 0x3d
     670:	8e af       	std	Y+62, r24	; 0x3e
     672:	9f af       	std	Y+63, r25	; 0x3f
     674:	23 97       	sbiw	r28, 0x03	; 3
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     676:	f2 01       	movw	r30, r4
     678:	04 84       	ldd	r0, Z+12	; 0x0c
     67a:	f5 85       	ldd	r31, Z+13	; 0x0d
     67c:	e0 2d       	mov	r30, r0
     67e:	fe a7       	std	Y+46, r31	; 0x2e
     680:	ed a7       	std	Y+45, r30	; 0x2d
     682:	bf 01       	movw	r22, r30
     684:	60 1b       	sub	r22, r16
     686:	71 0b       	sbc	r23, r17
     688:	07 2e       	mov	r0, r23
     68a:	00 0c       	add	r0, r0
     68c:	88 0b       	sbc	r24, r24
     68e:	99 0b       	sbc	r25, r25
     690:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     694:	4b 01       	movw	r8, r22
     696:	5c 01       	movw	r10, r24
     698:	f2 01       	movw	r30, r4
     69a:	06 84       	ldd	r0, Z+14	; 0x0e
     69c:	f7 85       	ldd	r31, Z+15	; 0x0f
     69e:	e0 2d       	mov	r30, r0
     6a0:	fa ab       	std	Y+50, r31	; 0x32
     6a2:	e9 ab       	std	Y+49, r30	; 0x31
     6a4:	8f 01       	movw	r16, r30
     6a6:	02 19       	sub	r16, r2
     6a8:	13 09       	sbc	r17, r3
     6aa:	9b 01       	movw	r18, r22
     6ac:	ac 01       	movw	r20, r24
     6ae:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     6b2:	6b ab       	std	Y+51, r22	; 0x33
     6b4:	7c ab       	std	Y+52, r23	; 0x34
     6b6:	8d ab       	std	Y+53, r24	; 0x35
     6b8:	9e ab       	std	Y+54, r25	; 0x36
     6ba:	00 9f       	mul	r16, r16
     6bc:	60 01       	movw	r12, r0
     6be:	01 9f       	mul	r16, r17
     6c0:	d0 0c       	add	r13, r0
     6c2:	d0 0c       	add	r13, r0
     6c4:	11 24       	eor	r1, r1
     6c6:	0d 2c       	mov	r0, r13
     6c8:	00 0c       	add	r0, r0
     6ca:	ee 08       	sbc	r14, r14
     6cc:	ff 08       	sbc	r15, r15
     6ce:	a5 01       	movw	r20, r10
     6d0:	94 01       	movw	r18, r8
     6d2:	c5 01       	movw	r24, r10
     6d4:	b4 01       	movw	r22, r8
     6d6:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     6da:	4b 01       	movw	r8, r22
     6dc:	5c 01       	movw	r10, r24
     6de:	c7 01       	movw	r24, r14
     6e0:	b6 01       	movw	r22, r12
     6e2:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     6e6:	9b 01       	movw	r18, r22
     6e8:	ac 01       	movw	r20, r24
     6ea:	c5 01       	movw	r24, r10
     6ec:	b4 01       	movw	r22, r8
     6ee:	0e 94 9e 10 	call	0x213c	; 0x213c <__addsf3>
     6f2:	0e 94 c7 13 	call	0x278e	; 0x278e <sqrt>
     6f6:	6b ab       	std	Y+51, r22	; 0x33
     6f8:	7c ab       	std	Y+52, r23	; 0x34
     6fa:	8d ab       	std	Y+53, r24	; 0x35
     6fc:	9e ab       	std	Y+54, r25	; 0x36
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     6fe:	69 a5       	ldd	r22, Y+41	; 0x29
     700:	7a a5       	ldd	r23, Y+42	; 0x2a
     702:	29 a1       	ldd	r18, Y+33	; 0x21
     704:	3a a1       	ldd	r19, Y+34	; 0x22
     706:	62 1b       	sub	r22, r18
     708:	73 0b       	sbc	r23, r19
     70a:	07 2e       	mov	r0, r23
     70c:	00 0c       	add	r0, r0
     70e:	88 0b       	sbc	r24, r24
     710:	99 0b       	sbc	r25, r25
     712:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     716:	4b 01       	movw	r8, r22
     718:	5c 01       	movw	r10, r24
     71a:	83 01       	movw	r16, r6
     71c:	4d a1       	ldd	r20, Y+37	; 0x25
     71e:	5e a1       	ldd	r21, Y+38	; 0x26
     720:	04 1b       	sub	r16, r20
     722:	15 0b       	sbc	r17, r21
     724:	9b 01       	movw	r18, r22
     726:	ac 01       	movw	r20, r24
     728:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     72c:	6f ab       	std	Y+55, r22	; 0x37
     72e:	78 af       	std	Y+56, r23	; 0x38
     730:	89 af       	std	Y+57, r24	; 0x39
     732:	9a af       	std	Y+58, r25	; 0x3a
     734:	00 9f       	mul	r16, r16
     736:	60 01       	movw	r12, r0
     738:	01 9f       	mul	r16, r17
     73a:	d0 0c       	add	r13, r0
     73c:	d0 0c       	add	r13, r0
     73e:	11 24       	eor	r1, r1
     740:	0d 2c       	mov	r0, r13
     742:	00 0c       	add	r0, r0
     744:	ee 08       	sbc	r14, r14
     746:	ff 08       	sbc	r15, r15
     748:	a5 01       	movw	r20, r10
     74a:	94 01       	movw	r18, r8
     74c:	c5 01       	movw	r24, r10
     74e:	b4 01       	movw	r22, r8
     750:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     754:	4b 01       	movw	r8, r22
     756:	5c 01       	movw	r10, r24
     758:	c7 01       	movw	r24, r14
     75a:	b6 01       	movw	r22, r12
     75c:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     760:	9b 01       	movw	r18, r22
     762:	ac 01       	movw	r20, r24
     764:	c5 01       	movw	r24, r10
     766:	b4 01       	movw	r22, r8
     768:	0e 94 9e 10 	call	0x213c	; 0x213c <__addsf3>
     76c:	0e 94 c7 13 	call	0x278e	; 0x278e <sqrt>
     770:	6f ab       	std	Y+55, r22	; 0x37
     772:	78 af       	std	Y+56, r23	; 0x38
     774:	89 af       	std	Y+57, r24	; 0x39
     776:	9a af       	std	Y+58, r25	; 0x3a
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     778:	6d a5       	ldd	r22, Y+45	; 0x2d
     77a:	7e a5       	ldd	r23, Y+46	; 0x2e
     77c:	89 a1       	ldd	r24, Y+33	; 0x21
     77e:	9a a1       	ldd	r25, Y+34	; 0x22
     780:	68 1b       	sub	r22, r24
     782:	79 0b       	sbc	r23, r25
     784:	07 2e       	mov	r0, r23
     786:	00 0c       	add	r0, r0
     788:	88 0b       	sbc	r24, r24
     78a:	99 0b       	sbc	r25, r25
     78c:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     790:	4b 01       	movw	r8, r22
     792:	5c 01       	movw	r10, r24
     794:	09 a9       	ldd	r16, Y+49	; 0x31
     796:	1a a9       	ldd	r17, Y+50	; 0x32
     798:	ed a1       	ldd	r30, Y+37	; 0x25
     79a:	fe a1       	ldd	r31, Y+38	; 0x26
     79c:	0e 1b       	sub	r16, r30
     79e:	1f 0b       	sbc	r17, r31
     7a0:	9b 01       	movw	r18, r22
     7a2:	ac 01       	movw	r20, r24
     7a4:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     7a8:	69 a3       	std	Y+33, r22	; 0x21
     7aa:	7a a3       	std	Y+34, r23	; 0x22
     7ac:	8b a3       	std	Y+35, r24	; 0x23
     7ae:	9c a3       	std	Y+36, r25	; 0x24
     7b0:	00 9f       	mul	r16, r16
     7b2:	60 01       	movw	r12, r0
     7b4:	01 9f       	mul	r16, r17
     7b6:	d0 0c       	add	r13, r0
     7b8:	d0 0c       	add	r13, r0
     7ba:	11 24       	eor	r1, r1
     7bc:	0d 2c       	mov	r0, r13
     7be:	00 0c       	add	r0, r0
     7c0:	ee 08       	sbc	r14, r14
     7c2:	ff 08       	sbc	r15, r15
     7c4:	a5 01       	movw	r20, r10
     7c6:	94 01       	movw	r18, r8
     7c8:	c5 01       	movw	r24, r10
     7ca:	b4 01       	movw	r22, r8
     7cc:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     7d0:	4b 01       	movw	r8, r22
     7d2:	5c 01       	movw	r10, r24
     7d4:	c7 01       	movw	r24, r14
     7d6:	b6 01       	movw	r22, r12
     7d8:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     7dc:	9b 01       	movw	r18, r22
     7de:	ac 01       	movw	r20, r24
     7e0:	c5 01       	movw	r24, r10
     7e2:	b4 01       	movw	r22, r8
     7e4:	0e 94 9e 10 	call	0x213c	; 0x213c <__addsf3>
     7e8:	0e 94 c7 13 	call	0x278e	; 0x278e <sqrt>
     7ec:	4b 01       	movw	r8, r22
     7ee:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     7f0:	6d a5       	ldd	r22, Y+45	; 0x2d
     7f2:	7e a5       	ldd	r23, Y+46	; 0x2e
     7f4:	29 a5       	ldd	r18, Y+41	; 0x29
     7f6:	3a a5       	ldd	r19, Y+42	; 0x2a
     7f8:	62 1b       	sub	r22, r18
     7fa:	73 0b       	sbc	r23, r19
     7fc:	07 2e       	mov	r0, r23
     7fe:	00 0c       	add	r0, r0
     800:	88 0b       	sbc	r24, r24
     802:	99 0b       	sbc	r25, r25
     804:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     808:	69 a3       	std	Y+33, r22	; 0x21
     80a:	7a a3       	std	Y+34, r23	; 0x22
     80c:	8b a3       	std	Y+35, r24	; 0x23
     80e:	9c a3       	std	Y+36, r25	; 0x24
     810:	09 a9       	ldd	r16, Y+49	; 0x31
     812:	1a a9       	ldd	r17, Y+50	; 0x32
     814:	06 19       	sub	r16, r6
     816:	17 09       	sbc	r17, r7
     818:	9b 01       	movw	r18, r22
     81a:	ac 01       	movw	r20, r24
     81c:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     820:	6d a3       	std	Y+37, r22	; 0x25
     822:	7e a3       	std	Y+38, r23	; 0x26
     824:	8f a3       	std	Y+39, r24	; 0x27
     826:	98 a7       	std	Y+40, r25	; 0x28
     828:	00 9f       	mul	r16, r16
     82a:	60 01       	movw	r12, r0
     82c:	01 9f       	mul	r16, r17
     82e:	d0 0c       	add	r13, r0
     830:	d0 0c       	add	r13, r0
     832:	11 24       	eor	r1, r1
     834:	0d 2c       	mov	r0, r13
     836:	00 0c       	add	r0, r0
     838:	ee 08       	sbc	r14, r14
     83a:	ff 08       	sbc	r15, r15
     83c:	29 a1       	ldd	r18, Y+33	; 0x21
     83e:	3a a1       	ldd	r19, Y+34	; 0x22
     840:	4b a1       	ldd	r20, Y+35	; 0x23
     842:	5c a1       	ldd	r21, Y+36	; 0x24
     844:	ca 01       	movw	r24, r20
     846:	b9 01       	movw	r22, r18
     848:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     84c:	69 a3       	std	Y+33, r22	; 0x21
     84e:	7a a3       	std	Y+34, r23	; 0x22
     850:	8b a3       	std	Y+35, r24	; 0x23
     852:	9c a3       	std	Y+36, r25	; 0x24
     854:	c7 01       	movw	r24, r14
     856:	b6 01       	movw	r22, r12
     858:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     85c:	9b 01       	movw	r18, r22
     85e:	ac 01       	movw	r20, r24
     860:	69 a1       	ldd	r22, Y+33	; 0x21
     862:	7a a1       	ldd	r23, Y+34	; 0x22
     864:	8b a1       	ldd	r24, Y+35	; 0x23
     866:	9c a1       	ldd	r25, Y+36	; 0x24
     868:	0e 94 9e 10 	call	0x213c	; 0x213c <__addsf3>
     86c:	0e 94 c7 13 	call	0x278e	; 0x278e <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     870:	2b ad       	ldd	r18, Y+59	; 0x3b
     872:	3c ad       	ldd	r19, Y+60	; 0x3c
     874:	4d ad       	ldd	r20, Y+61	; 0x3d
     876:	5e ad       	ldd	r21, Y+62	; 0x3e
     878:	29 83       	std	Y+1, r18	; 0x01
     87a:	3a 83       	std	Y+2, r19	; 0x02
     87c:	4b 83       	std	Y+3, r20	; 0x03
     87e:	5c 83       	std	Y+4, r21	; 0x04
     880:	23 96       	adiw	r28, 0x03	; 3
     882:	2c ad       	ldd	r18, Y+60	; 0x3c
     884:	3d ad       	ldd	r19, Y+61	; 0x3d
     886:	4e ad       	ldd	r20, Y+62	; 0x3e
     888:	5f ad       	ldd	r21, Y+63	; 0x3f
     88a:	23 97       	sbiw	r28, 0x03	; 3
     88c:	2d 83       	std	Y+5, r18	; 0x05
     88e:	3e 83       	std	Y+6, r19	; 0x06
     890:	4f 83       	std	Y+7, r20	; 0x07
     892:	58 87       	std	Y+8, r21	; 0x08
     894:	2b a9       	ldd	r18, Y+51	; 0x33
     896:	3c a9       	ldd	r19, Y+52	; 0x34
     898:	4d a9       	ldd	r20, Y+53	; 0x35
     89a:	5e a9       	ldd	r21, Y+54	; 0x36
     89c:	29 87       	std	Y+9, r18	; 0x09
     89e:	3a 87       	std	Y+10, r19	; 0x0a
     8a0:	4b 87       	std	Y+11, r20	; 0x0b
     8a2:	5c 87       	std	Y+12, r21	; 0x0c
     8a4:	2f a9       	ldd	r18, Y+55	; 0x37
     8a6:	38 ad       	ldd	r19, Y+56	; 0x38
     8a8:	49 ad       	ldd	r20, Y+57	; 0x39
     8aa:	5a ad       	ldd	r21, Y+58	; 0x3a
     8ac:	2d 87       	std	Y+13, r18	; 0x0d
     8ae:	3e 87       	std	Y+14, r19	; 0x0e
     8b0:	4f 87       	std	Y+15, r20	; 0x0f
     8b2:	58 8b       	std	Y+16, r21	; 0x10
     8b4:	89 8a       	std	Y+17, r8	; 0x11
     8b6:	9a 8a       	std	Y+18, r9	; 0x12
     8b8:	ab 8a       	std	Y+19, r10	; 0x13
     8ba:	bc 8a       	std	Y+20, r11	; 0x14
     8bc:	6d 8b       	std	Y+21, r22	; 0x15
     8be:	7e 8b       	std	Y+22, r23	; 0x16
     8c0:	8f 8b       	std	Y+23, r24	; 0x17
     8c2:	98 8f       	std	Y+24, r25	; 0x18
     8c4:	ae 01       	movw	r20, r28
     8c6:	4f 5f       	subi	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     8cc:	00 e0       	ldi	r16, 0x00	; 0
     8ce:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     8d0:	61 2c       	mov	r6, r1
     8d2:	71 2c       	mov	r7, r1
     8d4:	c1 2c       	mov	r12, r1
     8d6:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     8d8:	21 2c       	mov	r2, r1
     8da:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     8dc:	f7 01       	movw	r30, r14
     8de:	81 90       	ld	r8, Z+
     8e0:	91 90       	ld	r9, Z+
     8e2:	a1 90       	ld	r10, Z+
     8e4:	b1 90       	ld	r11, Z+
     8e6:	7f 01       	movw	r14, r30
     8e8:	26 2d       	mov	r18, r6
     8ea:	37 2d       	mov	r19, r7
     8ec:	4c 2d       	mov	r20, r12
     8ee:	5d 2d       	mov	r21, r13
     8f0:	c5 01       	movw	r24, r10
     8f2:	b4 01       	movw	r22, r8
     8f4:	0e 94 3f 13 	call	0x267e	; 0x267e <__gesf2>
     8f8:	18 16       	cp	r1, r24
     8fa:	34 f4       	brge	.+12     	; 0x908 <fourPointCalc+0x3e8>
			indexMax = i;
			maxVal = distVect[i];
     8fc:	68 2c       	mov	r6, r8
     8fe:	79 2c       	mov	r7, r9
     900:	ca 2c       	mov	r12, r10
     902:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     904:	20 2e       	mov	r2, r16
     906:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     908:	0f 5f       	subi	r16, 0xFF	; 255
     90a:	1f 4f       	sbci	r17, 0xFF	; 255
     90c:	06 30       	cpi	r16, 0x06	; 6
     90e:	11 05       	cpc	r17, r1
     910:	29 f7       	brne	.-54     	; 0x8dc <fourPointCalc+0x3bc>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLongRef; 
	pointsLongRef = distIndex(indexMax);
     912:	82 2d       	mov	r24, r2
     914:	93 2d       	mov	r25, r3
     916:	0e 94 95 01 	call	0x32a	; 0x32a <distIndex>
	
	int pointsLong[2] = {(pointsLongRef[0]), (pointsLongRef[1])};
     91a:	fc 01       	movw	r30, r24
     91c:	e0 80       	ld	r14, Z
     91e:	f1 80       	ldd	r15, Z+1	; 0x01
     920:	fa 8e       	std	Y+26, r15	; 0x1a
     922:	e9 8e       	std	Y+25, r14	; 0x19
     924:	02 81       	ldd	r16, Z+2	; 0x02
     926:	13 81       	ldd	r17, Z+3	; 0x03
     928:	1c 8f       	std	Y+28, r17	; 0x1c
     92a:	0b 8f       	std	Y+27, r16	; 0x1b
	
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     92c:	ee 0c       	add	r14, r14
     92e:	ff 1c       	adc	r15, r15
     930:	ee 0c       	add	r14, r14
     932:	ff 1c       	adc	r15, r15
     934:	e4 0c       	add	r14, r4
     936:	f5 1c       	adc	r15, r5
     938:	00 0f       	add	r16, r16
     93a:	11 1f       	adc	r17, r17
     93c:	00 0f       	add	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	04 0d       	add	r16, r4
     942:	15 1d       	adc	r17, r5
     944:	f7 01       	movw	r30, r14
     946:	60 81       	ld	r22, Z
     948:	71 81       	ldd	r23, Z+1	; 0x01
     94a:	f8 01       	movw	r30, r16
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	68 0f       	add	r22, r24
     952:	79 1f       	adc	r23, r25
     954:	77 23       	and	r23, r23
     956:	14 f4       	brge	.+4      	; 0x95c <fourPointCalc+0x43c>
     958:	6f 5f       	subi	r22, 0xFF	; 255
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	75 95       	asr	r23
     95e:	67 95       	ror	r22
     960:	07 2e       	mov	r0, r23
     962:	00 0c       	add	r0, r0
     964:	88 0b       	sbc	r24, r24
     966:	99 0b       	sbc	r25, r25
     968:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     96c:	4b 01       	movw	r8, r22
     96e:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     970:	f7 01       	movw	r30, r14
     972:	62 81       	ldd	r22, Z+2	; 0x02
     974:	73 81       	ldd	r23, Z+3	; 0x03
     976:	f8 01       	movw	r30, r16
     978:	82 81       	ldd	r24, Z+2	; 0x02
     97a:	93 81       	ldd	r25, Z+3	; 0x03
     97c:	68 0f       	add	r22, r24
     97e:	79 1f       	adc	r23, r25
     980:	77 23       	and	r23, r23
     982:	14 f4       	brge	.+4      	; 0x988 <fourPointCalc+0x468>
     984:	6f 5f       	subi	r22, 0xFF	; 255
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	75 95       	asr	r23
     98a:	67 95       	ror	r22
     98c:	07 2e       	mov	r0, r23
     98e:	00 0c       	add	r0, r0
     990:	88 0b       	sbc	r24, r24
     992:	99 0b       	sbc	r25, r25
     994:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     998:	69 a3       	std	Y+33, r22	; 0x21
     99a:	7a a3       	std	Y+34, r23	; 0x22
     99c:	8b a3       	std	Y+35, r24	; 0x23
     99e:	9c a3       	std	Y+36, r25	; 0x24
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     9a0:	9e 01       	movw	r18, r28
     9a2:	21 5e       	subi	r18, 0xE1	; 225
     9a4:	3f 4f       	sbci	r19, 0xFF	; 255
     9a6:	ae 01       	movw	r20, r28
     9a8:	43 5e       	subi	r20, 0xE3	; 227
     9aa:	5f 4f       	sbci	r21, 0xFF	; 255
     9ac:	be 01       	movw	r22, r28
     9ae:	6f 5f       	subi	r22, 0xFF	; 255
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	ce 01       	movw	r24, r28
     9b4:	49 96       	adiw	r24, 0x19	; 25
     9b6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     9ba:	0d 8d       	ldd	r16, Y+29	; 0x1d
     9bc:	1e 8d       	ldd	r17, Y+30	; 0x1e
     9be:	00 0f       	add	r16, r16
     9c0:	11 1f       	adc	r17, r17
     9c2:	00 0f       	add	r16, r16
     9c4:	11 1f       	adc	r17, r17
     9c6:	04 0d       	add	r16, r4
     9c8:	15 1d       	adc	r17, r5
     9ca:	2f 8c       	ldd	r2, Y+31	; 0x1f
     9cc:	38 a0       	ldd	r3, Y+32	; 0x20
     9ce:	22 0c       	add	r2, r2
     9d0:	33 1c       	adc	r3, r3
     9d2:	22 0c       	add	r2, r2
     9d4:	33 1c       	adc	r3, r3
     9d6:	24 0c       	add	r2, r4
     9d8:	35 1c       	adc	r3, r5
     9da:	f8 01       	movw	r30, r16
     9dc:	60 81       	ld	r22, Z
     9de:	71 81       	ldd	r23, Z+1	; 0x01
     9e0:	f1 01       	movw	r30, r2
     9e2:	80 81       	ld	r24, Z
     9e4:	91 81       	ldd	r25, Z+1	; 0x01
     9e6:	68 1b       	sub	r22, r24
     9e8:	79 0b       	sbc	r23, r25
     9ea:	07 2e       	mov	r0, r23
     9ec:	00 0c       	add	r0, r0
     9ee:	88 0b       	sbc	r24, r24
     9f0:	99 0b       	sbc	r25, r25
     9f2:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
     9f6:	6b 01       	movw	r12, r22
     9f8:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     9fa:	f8 01       	movw	r30, r16
     9fc:	62 81       	ldd	r22, Z+2	; 0x02
     9fe:	73 81       	ldd	r23, Z+3	; 0x03
     a00:	f1 01       	movw	r30, r2
     a02:	82 81       	ldd	r24, Z+2	; 0x02
     a04:	93 81       	ldd	r25, Z+3	; 0x03
     a06:	68 1b       	sub	r22, r24
     a08:	79 0b       	sbc	r23, r25
     a0a:	07 2e       	mov	r0, r23
     a0c:	00 0c       	add	r0, r0
     a0e:	88 0b       	sbc	r24, r24
     a10:	99 0b       	sbc	r25, r25
     a12:	0e 94 29 12 	call	0x2452	; 0x2452 <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     a16:	90 58       	subi	r25, 0x80	; 128
     a18:	a7 01       	movw	r20, r14
     a1a:	96 01       	movw	r18, r12
     a1c:	0e 94 1d 11 	call	0x223a	; 0x223a <atan2>
	theta += M_PI/2.0;
     a20:	2b ed       	ldi	r18, 0xDB	; 219
     a22:	3f e0       	ldi	r19, 0x0F	; 15
     a24:	49 ec       	ldi	r20, 0xC9	; 201
     a26:	5f e3       	ldi	r21, 0x3F	; 63
     a28:	0e 94 9e 10 	call	0x213c	; 0x213c <__addsf3>
     a2c:	6b 01       	movw	r12, r22
     a2e:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     a30:	a5 01       	movw	r20, r10
     a32:	94 01       	movw	r18, r8
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	94 e4       	ldi	r25, 0x44	; 68
     a3c:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
     a40:	4b 01       	movw	r8, r22
     a42:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     a44:	29 a1       	ldd	r18, Y+33	; 0x21
     a46:	3a a1       	ldd	r19, Y+34	; 0x22
     a48:	4b a1       	ldd	r20, Y+35	; 0x23
     a4a:	5c a1       	ldd	r21, Y+36	; 0x24
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	8f eb       	ldi	r24, 0xBF	; 191
     a52:	93 e4       	ldi	r25, 0x43	; 67
     a54:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
     a58:	2b 01       	movw	r4, r22
     a5a:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     a5c:	c7 01       	movw	r24, r14
     a5e:	b6 01       	movw	r22, r12
     a60:	0e 94 b9 13 	call	0x2772	; 0x2772 <sin>
     a64:	69 a3       	std	Y+33, r22	; 0x21
     a66:	7a a3       	std	Y+34, r23	; 0x22
     a68:	8b a3       	std	Y+35, r24	; 0x23
     a6a:	9c a3       	std	Y+36, r25	; 0x24
     a6c:	c7 01       	movw	r24, r14
     a6e:	b6 01       	movw	r22, r12
     a70:	0e 94 81 11 	call	0x2302	; 0x2302 <cos>
     a74:	6d a3       	std	Y+37, r22	; 0x25
     a76:	7e a3       	std	Y+38, r23	; 0x26
     a78:	8f a3       	std	Y+39, r24	; 0x27
     a7a:	98 a7       	std	Y+40, r25	; 0x28
     a7c:	06 e3       	ldi	r16, 0x36	; 54
     a7e:	11 e0       	ldi	r17, 0x01	; 1
     a80:	29 a1       	ldd	r18, Y+33	; 0x21
     a82:	3a a1       	ldd	r19, Y+34	; 0x22
     a84:	4b a1       	ldd	r20, Y+35	; 0x23
     a86:	5c a1       	ldd	r21, Y+36	; 0x24
     a88:	c3 01       	movw	r24, r6
     a8a:	b2 01       	movw	r22, r4
     a8c:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     a90:	69 a7       	std	Y+41, r22	; 0x29
     a92:	7a a7       	std	Y+42, r23	; 0x2a
     a94:	8b a7       	std	Y+43, r24	; 0x2b
     a96:	9c a7       	std	Y+44, r25	; 0x2c
     a98:	2d a1       	ldd	r18, Y+37	; 0x25
     a9a:	3e a1       	ldd	r19, Y+38	; 0x26
     a9c:	4f a1       	ldd	r20, Y+39	; 0x27
     a9e:	58 a5       	ldd	r21, Y+40	; 0x28
     aa0:	c5 01       	movw	r24, r10
     aa2:	b4 01       	movw	r22, r8
     aa4:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
     aac:	69 a5       	ldd	r22, Y+41	; 0x29
     aae:	7a a5       	ldd	r23, Y+42	; 0x2a
     ab0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ab2:	9c a5       	ldd	r25, Y+44	; 0x2c
     ab4:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
     ab8:	f8 01       	movw	r30, r16
     aba:	60 83       	st	Z, r22
     abc:	71 83       	std	Z+1, r23	; 0x01
     abe:	82 83       	std	Z+2, r24	; 0x02
     ac0:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     ac2:	2d a1       	ldd	r18, Y+37	; 0x25
     ac4:	3e a1       	ldd	r19, Y+38	; 0x26
     ac6:	4f a1       	ldd	r20, Y+39	; 0x27
     ac8:	58 a5       	ldd	r21, Y+40	; 0x28
     aca:	c3 01       	movw	r24, r6
     acc:	b2 01       	movw	r22, r4
     ace:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     ad2:	2b 01       	movw	r4, r22
     ad4:	3c 01       	movw	r6, r24
     ad6:	29 a1       	ldd	r18, Y+33	; 0x21
     ad8:	3a a1       	ldd	r19, Y+34	; 0x22
     ada:	4b a1       	ldd	r20, Y+35	; 0x23
     adc:	5c a1       	ldd	r21, Y+36	; 0x24
     ade:	c5 01       	movw	r24, r10
     ae0:	b4 01       	movw	r22, r8
     ae2:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	c3 01       	movw	r24, r6
     aec:	b2 01       	movw	r22, r4
     aee:	0e 94 9e 10 	call	0x213c	; 0x213c <__addsf3>
     af2:	f8 01       	movw	r30, r16
     af4:	64 83       	std	Z+4, r22	; 0x04
     af6:	75 83       	std	Z+5, r23	; 0x05
     af8:	86 83       	std	Z+6, r24	; 0x06
     afa:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta;
     afc:	f7 fa       	bst	r15, 7
     afe:	f0 94       	com	r15
     b00:	f7 f8       	bld	r15, 7
     b02:	f0 94       	com	r15
     b04:	c0 86       	std	Z+8, r12	; 0x08
     b06:	d1 86       	std	Z+9, r13	; 0x09
     b08:	e2 86       	std	Z+10, r14	; 0x0a
     b0a:	f3 86       	std	Z+11, r15	; 0x0b
	
	return centerFour;
}
     b0c:	c8 01       	movw	r24, r16
     b0e:	ce 5b       	subi	r28, 0xBE	; 190
     b10:	df 4f       	sbci	r29, 0xFF	; 255
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	df 90       	pop	r13
     b2a:	cf 90       	pop	r12
     b2c:	bf 90       	pop	r11
     b2e:	af 90       	pop	r10
     b30:	9f 90       	pop	r9
     b32:	8f 90       	pop	r8
     b34:	7f 90       	pop	r7
     b36:	6f 90       	pop	r6
     b38:	5f 90       	pop	r5
     b3a:	4f 90       	pop	r4
     b3c:	3f 90       	pop	r3
     b3e:	2f 90       	pop	r2
     b40:	08 95       	ret

00000b42 <localization_calc>:
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
     b42:	4f 92       	push	r4
     b44:	5f 92       	push	r5
     b46:	6f 92       	push	r6
     b48:	7f 92       	push	r7
     b4a:	af 92       	push	r10
     b4c:	bf 92       	push	r11
     b4e:	cf 92       	push	r12
     b50:	df 92       	push	r13
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	68 97       	sbiw	r28, 0x18	; 24
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     b70:	0d b7       	in	r16, 0x3d	; 61
     b72:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     b74:	80 81       	ld	r24, Z
     b76:	91 81       	ldd	r25, Z+1	; 0x01
     b78:	9a 83       	std	Y+2, r25	; 0x02
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	80 85       	ldd	r24, Z+8	; 0x08
     b7e:	91 85       	ldd	r25, Z+9	; 0x09
     b80:	9c 83       	std	Y+4, r25	; 0x04
     b82:	8b 83       	std	Y+3, r24	; 0x03
     b84:	82 81       	ldd	r24, Z+2	; 0x02
     b86:	93 81       	ldd	r25, Z+3	; 0x03
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	82 85       	ldd	r24, Z+10	; 0x0a
     b8e:	93 85       	ldd	r25, Z+11	; 0x0b
     b90:	98 87       	std	Y+8, r25	; 0x08
     b92:	8f 83       	std	Y+7, r24	; 0x07
     b94:	84 81       	ldd	r24, Z+4	; 0x04
     b96:	95 81       	ldd	r25, Z+5	; 0x05
     b98:	9a 87       	std	Y+10, r25	; 0x0a
     b9a:	89 87       	std	Y+9, r24	; 0x09
     b9c:	84 85       	ldd	r24, Z+12	; 0x0c
     b9e:	95 85       	ldd	r25, Z+13	; 0x0d
     ba0:	9c 87       	std	Y+12, r25	; 0x0c
     ba2:	8b 87       	std	Y+11, r24	; 0x0b
     ba4:	86 81       	ldd	r24, Z+6	; 0x06
     ba6:	97 81       	ldd	r25, Z+7	; 0x07
     ba8:	9e 87       	std	Y+14, r25	; 0x0e
     baa:	8d 87       	std	Y+13, r24	; 0x0d
     bac:	86 85       	ldd	r24, Z+14	; 0x0e
     bae:	97 85       	ldd	r25, Z+15	; 0x0f
     bb0:	98 8b       	std	Y+16, r25	; 0x10
     bb2:	8f 87       	std	Y+15, r24	; 0x0f
		{rawStarData[3], rawStarData[7]}
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     bb4:	fe 01       	movw	r30, r28
     bb6:	71 96       	adiw	r30, 0x11	; 17
     bb8:	88 e0       	ldi	r24, 0x08	; 8
     bba:	df 01       	movw	r26, r30
     bbc:	1d 92       	st	X+, r1
     bbe:	8a 95       	dec	r24
     bc0:	e9 f7       	brne	.-6      	; 0xbbc <localization_calc+0x7a>
     bc2:	70 97       	sbiw	r30, 0x10	; 16
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     bcc:	40 81       	ld	r20, Z
     bce:	51 81       	ldd	r21, Z+1	; 0x01
     bd0:	4f 3f       	cpi	r20, 0xFF	; 255
     bd2:	53 40       	sbci	r21, 0x03	; 3
     bd4:	71 f0       	breq	.+28     	; 0xbf2 <localization_calc+0xb0>
			pointIndices[numPoints] = i;
     bd6:	dc 01       	movw	r26, r24
     bd8:	aa 0f       	add	r26, r26
     bda:	bb 1f       	adc	r27, r27
     bdc:	41 e0       	ldi	r20, 0x01	; 1
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	4c 0f       	add	r20, r28
     be2:	5d 1f       	adc	r21, r29
     be4:	a4 0f       	add	r26, r20
     be6:	b5 1f       	adc	r27, r21
     be8:	51 96       	adiw	r26, 0x11	; 17
     bea:	3c 93       	st	X, r19
     bec:	2e 93       	st	-X, r18
     bee:	50 97       	sbiw	r26, 0x10	; 16
			numPoints++;
     bf0:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     bf2:	2f 5f       	subi	r18, 0xFF	; 255
     bf4:	3f 4f       	sbci	r19, 0xFF	; 255
     bf6:	34 96       	adiw	r30, 0x04	; 4
     bf8:	24 30       	cpi	r18, 0x04	; 4
     bfa:	31 05       	cpc	r19, r1
     bfc:	39 f7       	brne	.-50     	; 0xbcc <localization_calc+0x8a>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	09 f4       	brne	.+2      	; 0xc04 <localization_calc+0xc2>
     c02:	8b c0       	rjmp	.+278    	; 0xd1a <localization_calc+0x1d8>
     c04:	ed b6       	in	r14, 0x3d	; 61
     c06:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     c08:	6c 01       	movw	r12, r24
     c0a:	cc 0c       	add	r12, r12
     c0c:	dd 1c       	adc	r13, r13
     c0e:	cc 0c       	add	r12, r12
     c10:	dd 1c       	adc	r13, r13
     c12:	ad b7       	in	r26, 0x3d	; 61
     c14:	be b7       	in	r27, 0x3e	; 62
     c16:	ac 19       	sub	r26, r12
     c18:	bd 09       	sbc	r27, r13
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	be bf       	out	0x3e, r27	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	ad bf       	out	0x3d, r26	; 61
     c24:	ed b7       	in	r30, 0x3d	; 61
     c26:	fe b7       	in	r31, 0x3e	; 62
     c28:	31 96       	adiw	r30, 0x01	; 1
     c2a:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     c2c:	18 16       	cp	r1, r24
     c2e:	19 06       	cpc	r1, r25
     c30:	24 f5       	brge	.+72     	; 0xc7a <localization_calc+0x138>
     c32:	9e 01       	movw	r18, r28
     c34:	2f 5e       	subi	r18, 0xEF	; 239
     c36:	3f 4f       	sbci	r19, 0xFF	; 255
     c38:	df 01       	movw	r26, r30
     c3a:	ce 0e       	add	r12, r30
     c3c:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     c3e:	f9 01       	movw	r30, r18
     c40:	41 91       	ld	r20, Z+
     c42:	51 91       	ld	r21, Z+
     c44:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     c46:	fa 01       	movw	r30, r20
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	41 e0       	ldi	r20, 0x01	; 1
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	4c 0f       	add	r20, r28
     c56:	5d 1f       	adc	r21, r29
     c58:	e4 0f       	add	r30, r20
     c5a:	f5 1f       	adc	r31, r21
     c5c:	40 81       	ld	r20, Z
     c5e:	51 81       	ldd	r21, Z+1	; 0x01
     c60:	11 96       	adiw	r26, 0x01	; 1
     c62:	5c 93       	st	X, r21
     c64:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     c66:	42 81       	ldd	r20, Z+2	; 0x02
     c68:	53 81       	ldd	r21, Z+3	; 0x03
     c6a:	13 96       	adiw	r26, 0x03	; 3
     c6c:	5c 93       	st	X, r21
     c6e:	4e 93       	st	-X, r20
     c70:	12 97       	sbiw	r26, 0x02	; 2
     c72:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     c74:	ac 15       	cp	r26, r12
     c76:	bd 05       	cpc	r27, r13
     c78:	11 f7       	brne	.-60     	; 0xc3e <localization_calc+0xfc>
			points[i][0] = pvect[index][0];
			points[i][1] = pvect[index][1];
		}
		
		
		m_red(ON);
     c7a:	6e 9a       	sbi	0x0d, 6	; 13
     c7c:	76 98       	cbi	0x0e, 6	; 14
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     c7e:	db 01       	movw	r26, r22
     c80:	4d 90       	ld	r4, X+
     c82:	5d 90       	ld	r5, X+
     c84:	6d 90       	ld	r6, X+
     c86:	7c 90       	ld	r7, X
     c88:	13 97       	sbiw	r26, 0x03	; 3
     c8a:	ee e4       	ldi	r30, 0x4E	; 78
     c8c:	f1 e0       	ldi	r31, 0x01	; 1
     c8e:	40 82       	st	Z, r4
     c90:	51 82       	std	Z+1, r5	; 0x01
     c92:	62 82       	std	Z+2, r6	; 0x02
     c94:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     c96:	14 96       	adiw	r26, 0x04	; 4
     c98:	4d 90       	ld	r4, X+
     c9a:	5d 90       	ld	r5, X+
     c9c:	6d 90       	ld	r6, X+
     c9e:	7c 90       	ld	r7, X
     ca0:	17 97       	sbiw	r26, 0x07	; 7
     ca2:	44 82       	std	Z+4, r4	; 0x04
     ca4:	55 82       	std	Z+5, r5	; 0x05
     ca6:	66 82       	std	Z+6, r6	; 0x06
     ca8:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     caa:	18 96       	adiw	r26, 0x08	; 8
     cac:	4d 91       	ld	r20, X+
     cae:	5d 91       	ld	r21, X+
     cb0:	6d 91       	ld	r22, X+
     cb2:	7c 91       	ld	r23, X
     cb4:	1b 97       	sbiw	r26, 0x0b	; 11
     cb6:	40 87       	std	Z+8, r20	; 0x08
     cb8:	51 87       	std	Z+9, r21	; 0x09
     cba:	62 87       	std	Z+10, r22	; 0x0a
     cbc:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     cbe:	04 97       	sbiw	r24, 0x04	; 4
     cc0:	29 f4       	brne	.+10     	; 0xccc <localization_calc+0x18a>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     cc2:	c5 01       	movw	r24, r10
     cc4:	0e 94 90 02 	call	0x520	; 0x520 <fourPointCalc>
     cc8:	dc 01       	movw	r26, r24
				break;
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <localization_calc+0x18e>
				
			case 3 : 
				//calcPointer = threePointCalc(points);
				calcPointer = &rc[0];
     ccc:	ae e4       	ldi	r26, 0x4E	; 78
     cce:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				calcPointer = &rc[0];
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     cd0:	4d 91       	ld	r20, X+
     cd2:	5d 91       	ld	r21, X+
     cd4:	6d 91       	ld	r22, X+
     cd6:	7c 91       	ld	r23, X
     cd8:	13 97       	sbiw	r26, 0x03	; 3
     cda:	e2 e4       	ldi	r30, 0x42	; 66
     cdc:	f1 e0       	ldi	r31, 0x01	; 1
     cde:	40 83       	st	Z, r20
     ce0:	51 83       	std	Z+1, r21	; 0x01
     ce2:	62 83       	std	Z+2, r22	; 0x02
     ce4:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	4d 91       	ld	r20, X+
     cea:	5d 91       	ld	r21, X+
     cec:	6d 91       	ld	r22, X+
     cee:	7c 91       	ld	r23, X
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	44 83       	std	Z+4, r20	; 0x04
     cf4:	55 83       	std	Z+5, r21	; 0x05
     cf6:	66 83       	std	Z+6, r22	; 0x06
     cf8:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     cfa:	18 96       	adiw	r26, 0x08	; 8
     cfc:	8d 91       	ld	r24, X+
     cfe:	9d 91       	ld	r25, X+
     d00:	0d 90       	ld	r0, X+
     d02:	bc 91       	ld	r27, X
     d04:	a0 2d       	mov	r26, r0
     d06:	80 87       	std	Z+8, r24	; 0x08
     d08:	91 87       	std	Z+9, r25	; 0x09
     d0a:	a2 87       	std	Z+10, r26	; 0x0a
     d0c:	b3 87       	std	Z+11, r27	; 0x0b
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	fe be       	out	0x3e, r15	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	ed be       	out	0x3d, r14	; 61
     d18:	22 c0       	rjmp	.+68     	; 0xd5e <localization_calc+0x21c>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     d1a:	fb 01       	movw	r30, r22
     d1c:	80 81       	ld	r24, Z
     d1e:	91 81       	ldd	r25, Z+1	; 0x01
     d20:	a2 81       	ldd	r26, Z+2	; 0x02
     d22:	b3 81       	ldd	r27, Z+3	; 0x03
     d24:	e2 e4       	ldi	r30, 0x42	; 66
     d26:	f1 e0       	ldi	r31, 0x01	; 1
     d28:	80 83       	st	Z, r24
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	a2 83       	std	Z+2, r26	; 0x02
     d2e:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     d30:	db 01       	movw	r26, r22
     d32:	14 96       	adiw	r26, 0x04	; 4
     d34:	cd 90       	ld	r12, X+
     d36:	dd 90       	ld	r13, X+
     d38:	ed 90       	ld	r14, X+
     d3a:	fc 90       	ld	r15, X
     d3c:	17 97       	sbiw	r26, 0x07	; 7
     d3e:	c4 82       	std	Z+4, r12	; 0x04
     d40:	d5 82       	std	Z+5, r13	; 0x05
     d42:	e6 82       	std	Z+6, r14	; 0x06
     d44:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];
     d46:	18 96       	adiw	r26, 0x08	; 8
     d48:	4d 91       	ld	r20, X+
     d4a:	5d 91       	ld	r21, X+
     d4c:	6d 91       	ld	r22, X+
     d4e:	7c 91       	ld	r23, X
     d50:	1b 97       	sbiw	r26, 0x0b	; 11
     d52:	40 87       	std	Z+8, r20	; 0x08
     d54:	51 87       	std	Z+9, r21	; 0x09
     d56:	62 87       	std	Z+10, r22	; 0x0a
     d58:	73 87       	std	Z+11, r23	; 0x0b
		m_red(OFF);	
     d5a:	6e 9a       	sbi	0x0d, 6	; 13
     d5c:	76 9a       	sbi	0x0e, 6	; 14
	
	return robotCenter;
	
	
	
}
     d5e:	82 e4       	ldi	r24, 0x42	; 66
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	1e bf       	out	0x3e, r17	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0d bf       	out	0x3d, r16	; 61
     d6c:	68 96       	adiw	r28, 0x18	; 24
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	bf 90       	pop	r11
     d8a:	af 90       	pop	r10
     d8c:	7f 90       	pop	r7
     d8e:	6f 90       	pop	r6
     d90:	5f 90       	pop	r5
     d92:	4f 90       	pop	r4
     d94:	08 95       	ret

00000d96 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
     d96:	6e 9a       	sbi	0x0d, 6	; 13
     d98:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey();
     d9a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <initialize_robockey>

	/* Confirm successful initialization(s) */
	m_green(ON);
     d9e:	6a 9a       	sbi	0x0d, 2	; 13
     da0:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
     da2:	0e 94 a7 08 	call	0x114e	; 0x114e <update_position>
	}
     da6:	fd cf       	rjmp	.-6      	; 0xda2 <main+0xc>

00000da8 <play>:
	// Assign Defending goal
	// Flash color of LED for defending goal
}

void play(void)
{
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	2c 97       	sbiw	r28, 0x0c	; 12
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
	// Light LED of defending goal
	// Play
	update_position();
     dbc:	0e 94 a7 08 	call	0x114e	; 0x114e <update_position>
	float position_buffer[3];
	get_position(position_buffer);
     dc0:	ce 01       	movw	r24, r28
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	0e 94 40 08 	call	0x1080	; 0x1080 <get_position>
	if (position_buffer[0]>0) {
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	a9 01       	movw	r20, r18
     dce:	69 81       	ldd	r22, Y+1	; 0x01
     dd0:	7a 81       	ldd	r23, Y+2	; 0x02
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	9c 81       	ldd	r25, Y+4	; 0x04
     dd6:	0e 94 3f 13 	call	0x267e	; 0x267e <__gesf2>
     dda:	18 16       	cp	r1, r24
     ddc:	6c f4       	brge	.+26     	; 0xdf8 <play+0x50>
		x_target = -350;
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	af ea       	ldi	r26, 0xAF	; 175
     de4:	b3 ec       	ldi	r27, 0xC3	; 195
     de6:	80 93 0a 01 	sts	0x010A, r24
     dea:	90 93 0b 01 	sts	0x010B, r25
     dee:	a0 93 0c 01 	sts	0x010C, r26
     df2:	b0 93 0d 01 	sts	0x010D, r27
     df6:	0c c0       	rjmp	.+24     	; 0xe10 <play+0x68>
		} else {
		x_target = 350;
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	af ea       	ldi	r26, 0xAF	; 175
     dfe:	b3 e4       	ldi	r27, 0x43	; 67
     e00:	80 93 0a 01 	sts	0x010A, r24
     e04:	90 93 0b 01 	sts	0x010B, r25
     e08:	a0 93 0c 01 	sts	0x010C, r26
     e0c:	b0 93 0d 01 	sts	0x010D, r27
	}
	game_pause = 0;
     e10:	10 92 01 01 	sts	0x0101, r1
     e14:	10 92 00 01 	sts	0x0100, r1
}
     e18:	2c 96       	adiw	r28, 0x0c	; 12
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	08 95       	ret

00000e2a <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
     e2a:	80 91 5c 01 	lds	r24, 0x015C
     e2e:	83 3a       	cpi	r24, 0xA3	; 163
     e30:	f9 f0       	breq	.+62     	; 0xe70 <update_game_state+0x46>
     e32:	28 f4       	brcc	.+10     	; 0xe3e <update_game_state+0x14>
     e34:	81 3a       	cpi	r24, 0xA1	; 161
     e36:	51 f0       	breq	.+20     	; 0xe4c <update_game_state+0x22>
     e38:	82 3a       	cpi	r24, 0xA2	; 162
     e3a:	59 f0       	breq	.+22     	; 0xe52 <update_game_state+0x28>
     e3c:	08 95       	ret
     e3e:	86 3a       	cpi	r24, 0xA6	; 166
     e40:	69 f1       	breq	.+90     	; 0xe9c <update_game_state+0x72>
     e42:	87 3a       	cpi	r24, 0xA7	; 167
     e44:	91 f1       	breq	.+100    	; 0xeaa <update_game_state+0x80>
     e46:	84 3a       	cpi	r24, 0xA4	; 164
     e48:	b1 f5       	brne	.+108    	; 0xeb6 <update_game_state+0x8c>
     e4a:	21 c0       	rjmp	.+66     	; 0xe8e <update_game_state+0x64>
		case 0xA0: // Comm Test
		comm_test();
		break;
		case 0xA1: // Play
		play();
     e4c:	0e 94 d4 06 	call	0xda8	; 0xda8 <play>
		break;
     e50:	08 95       	ret
		case 0xA2: // Goal R
		SR = buffer[1];
     e52:	ed e5       	ldi	r30, 0x5D	; 93
     e54:	f1 e0       	ldi	r31, 0x01	; 1
     e56:	81 81       	ldd	r24, Z+1	; 0x01
     e58:	80 93 5b 01 	sts	0x015B, r24
		SB = buffer[2];
     e5c:	82 81       	ldd	r24, Z+2	; 0x02
     e5e:	80 93 5a 01 	sts	0x015A, r24
}

void pause(void)
{
	// Stop within 3  seconds
	game_pause = 1;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	90 93 01 01 	sts	0x0101, r25
     e6a:	80 93 00 01 	sts	0x0100, r24
     e6e:	08 95       	ret
		SR = buffer[1];
		SB = buffer[2];
		pause();
		break;
		case 0xA3: // Goal B
		SR = buffer[1];
     e70:	ed e5       	ldi	r30, 0x5D	; 93
     e72:	f1 e0       	ldi	r31, 0x01	; 1
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	80 93 5b 01 	sts	0x015B, r24
		SB = buffer[2];
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	80 93 5a 01 	sts	0x015A, r24
}

void pause(void)
{
	// Stop within 3  seconds
	game_pause = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	90 93 01 01 	sts	0x0101, r25
     e88:	80 93 00 01 	sts	0x0100, r24
     e8c:	08 95       	ret
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	90 93 01 01 	sts	0x0101, r25
     e96:	80 93 00 01 	sts	0x0100, r24
     e9a:	08 95       	ret

void halftime(void)
{
	// Stop play
	// Switch assigned goal
	game_pause = 1;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	90 93 01 01 	sts	0x0101, r25
     ea4:	80 93 00 01 	sts	0x0100, r24
     ea8:	08 95       	ret

void game_over(void)
{
	// Stop play
	// Do a victory dance based on score?
	game_pause = 1;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	90 93 01 01 	sts	0x0101, r25
     eb2:	80 93 00 01 	sts	0x0100, r24
     eb6:	08 95       	ret

00000eb8 <wireless_recieve>:
************************************************************/

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
     eb8:	6a e0       	ldi	r22, 0x0A	; 10
     eba:	8d e5       	ldi	r24, 0x5D	; 93
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <m_rf_read>
	game_state = buffer[0];
     ec2:	80 91 5d 01 	lds	r24, 0x015D
     ec6:	80 93 5c 01 	sts	0x015C, r24
	update_game_state();
     eca:	0e 94 15 07 	call	0xe2a	; 0xe2a <update_game_state>
     ece:	08 95       	ret

00000ed0 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
     ed0:	1f 92       	push	r1
     ed2:	0f 92       	push	r0
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	0f 92       	push	r0
     ed8:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
     eda:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
     edc:	2a 9a       	sbi	0x05, 2	; 5
}
     ede:	0f 90       	pop	r0
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	0f 90       	pop	r0
     ee4:	1f 90       	pop	r1
     ee6:	18 95       	reti

00000ee8 <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
     ee8:	1f 92       	push	r1
     eea:	0f 92       	push	r0
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	0f 92       	push	r0
     ef0:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
     ef2:	28 98       	cbi	0x05, 0	; 5
}
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
     efe:	1f 92       	push	r1
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
     f08:	2a 98       	cbi	0x05, 2	; 5
}
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	0f 90       	pop	r0
     f10:	1f 90       	pop	r1
     f12:	18 95       	reti

00000f14 <__vector_3>:

/* Recieve Wireless Comm */
ISR(INT2_vect){
     f14:	1f 92       	push	r1
     f16:	0f 92       	push	r0
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	0f 92       	push	r0
     f1c:	11 24       	eor	r1, r1
     f1e:	2f 93       	push	r18
     f20:	3f 93       	push	r19
     f22:	4f 93       	push	r20
     f24:	5f 93       	push	r21
     f26:	6f 93       	push	r22
     f28:	7f 93       	push	r23
     f2a:	8f 93       	push	r24
     f2c:	9f 93       	push	r25
     f2e:	af 93       	push	r26
     f30:	bf 93       	push	r27
     f32:	ef 93       	push	r30
     f34:	ff 93       	push	r31
	wireless_recieve();
     f36:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <wireless_recieve>
}
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <__vector_32>:

/* Timer 3 Timestep Rollover */
ISR(TIMER3_COMPA_vect){
     f5c:	1f 92       	push	r1
     f5e:	0f 92       	push	r0
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	0f 92       	push	r0
     f64:	11 24       	eor	r1, r1
     f66:	af 92       	push	r10
     f68:	bf 92       	push	r11
     f6a:	cf 92       	push	r12
     f6c:	df 92       	push	r13
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	2f 93       	push	r18
     f78:	3f 93       	push	r19
     f7a:	4f 93       	push	r20
     f7c:	5f 93       	push	r21
     f7e:	6f 93       	push	r22
     f80:	7f 93       	push	r23
     f82:	8f 93       	push	r24
     f84:	9f 93       	push	r25
     f86:	af 93       	push	r26
     f88:	bf 93       	push	r27
     f8a:	ef 93       	push	r30
     f8c:	ff 93       	push	r31
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd, game_pause); // Update control
     f8e:	a0 90 0e 01 	lds	r10, 0x010E
     f92:	b0 90 0f 01 	lds	r11, 0x010F
     f96:	c0 90 10 01 	lds	r12, 0x0110
     f9a:	d0 90 11 01 	lds	r13, 0x0111
     f9e:	e0 90 12 01 	lds	r14, 0x0112
     fa2:	f0 90 13 01 	lds	r15, 0x0113
     fa6:	00 91 14 01 	lds	r16, 0x0114
     faa:	10 91 15 01 	lds	r17, 0x0115
     fae:	20 91 6f 01 	lds	r18, 0x016F
     fb2:	30 91 70 01 	lds	r19, 0x0170
     fb6:	40 91 71 01 	lds	r20, 0x0171
     fba:	50 91 72 01 	lds	r21, 0x0172
     fbe:	60 91 0a 01 	lds	r22, 0x010A
     fc2:	70 91 0b 01 	lds	r23, 0x010B
     fc6:	80 91 0c 01 	lds	r24, 0x010C
     fca:	90 91 0d 01 	lds	r25, 0x010D
     fce:	e0 91 01 01 	lds	r30, 0x0101
     fd2:	ef 93       	push	r30
     fd4:	e0 91 00 01 	lds	r30, 0x0100
     fd8:	ef 93       	push	r30
     fda:	e0 91 6a 01 	lds	r30, 0x016A
     fde:	ef 93       	push	r30
     fe0:	e0 91 69 01 	lds	r30, 0x0169
     fe4:	ef 93       	push	r30
     fe6:	e0 91 68 01 	lds	r30, 0x0168
     fea:	ef 93       	push	r30
     fec:	e0 91 67 01 	lds	r30, 0x0167
     ff0:	ef 93       	push	r30
     ff2:	e0 91 05 01 	lds	r30, 0x0105
     ff6:	ef 93       	push	r30
     ff8:	e0 91 04 01 	lds	r30, 0x0104
     ffc:	ef 93       	push	r30
     ffe:	e0 91 03 01 	lds	r30, 0x0103
    1002:	ef 93       	push	r30
    1004:	e0 91 02 01 	lds	r30, 0x0102
    1008:	ef 93       	push	r30
    100a:	e0 91 6e 01 	lds	r30, 0x016E
    100e:	ef 93       	push	r30
    1010:	e0 91 6d 01 	lds	r30, 0x016D
    1014:	ef 93       	push	r30
    1016:	e0 91 6c 01 	lds	r30, 0x016C
    101a:	ef 93       	push	r30
    101c:	e0 91 6b 01 	lds	r30, 0x016B
    1020:	ef 93       	push	r30
    1022:	e0 91 09 01 	lds	r30, 0x0109
    1026:	ef 93       	push	r30
    1028:	e0 91 08 01 	lds	r30, 0x0108
    102c:	ef 93       	push	r30
    102e:	e0 91 07 01 	lds	r30, 0x0107
    1032:	ef 93       	push	r30
    1034:	e0 91 06 01 	lds	r30, 0x0106
    1038:	ef 93       	push	r30
    103a:	0e 94 a7 09 	call	0x134e	; 0x134e <run_motor_control_loop>
    103e:	8d b7       	in	r24, 0x3d	; 61
    1040:	9e b7       	in	r25, 0x3e	; 62
    1042:	42 96       	adiw	r24, 0x12	; 18
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	9e bf       	out	0x3e, r25	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	8d bf       	out	0x3d, r24	; 61
}
    104e:	ff 91       	pop	r31
    1050:	ef 91       	pop	r30
    1052:	bf 91       	pop	r27
    1054:	af 91       	pop	r26
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	7f 91       	pop	r23
    105c:	6f 91       	pop	r22
    105e:	5f 91       	pop	r21
    1060:	4f 91       	pop	r20
    1062:	3f 91       	pop	r19
    1064:	2f 91       	pop	r18
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	df 90       	pop	r13
    1070:	cf 90       	pop	r12
    1072:	bf 90       	pop	r11
    1074:	af 90       	pop	r10
    1076:	0f 90       	pop	r0
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	0f 90       	pop	r0
    107c:	1f 90       	pop	r1
    107e:	18 95       	reti

00001080 <get_position>:
/* Motor Control */
float left_duty_cycle = 0.1;
float right_duty_cycle = 0.1;

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    1080:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    1082:	80 91 83 01 	lds	r24, 0x0183
    1086:	90 91 84 01 	lds	r25, 0x0184
    108a:	a0 91 85 01 	lds	r26, 0x0185
    108e:	b0 91 86 01 	lds	r27, 0x0186
    1092:	80 83       	st	Z, r24
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	a2 83       	std	Z+2, r26	; 0x02
    1098:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    109a:	80 91 7f 01 	lds	r24, 0x017F
    109e:	90 91 80 01 	lds	r25, 0x0180
    10a2:	a0 91 81 01 	lds	r26, 0x0181
    10a6:	b0 91 82 01 	lds	r27, 0x0182
    10aa:	84 83       	std	Z+4, r24	; 0x04
    10ac:	95 83       	std	Z+5, r25	; 0x05
    10ae:	a6 83       	std	Z+6, r26	; 0x06
    10b0:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    10b2:	80 91 7b 01 	lds	r24, 0x017B
    10b6:	90 91 7c 01 	lds	r25, 0x017C
    10ba:	a0 91 7d 01 	lds	r26, 0x017D
    10be:	b0 91 7e 01 	lds	r27, 0x017E
    10c2:	80 87       	std	Z+8, r24	; 0x08
    10c4:	91 87       	std	Z+9, r25	; 0x09
    10c6:	a2 87       	std	Z+10, r26	; 0x0a
    10c8:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	08 95       	ret

000010ce <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    10ce:	8f 92       	push	r8
    10d0:	9f 92       	push	r9
    10d2:	af 92       	push	r10
    10d4:	bf 92       	push	r11
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	6b 01       	movw	r12, r22
    10e0:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    10e2:	4b 01       	movw	r8, r22
    10e4:	5c 01       	movw	r10, r24
    10e6:	e8 94       	clt
    10e8:	b7 f8       	bld	r11, 7
    10ea:	2b ed       	ldi	r18, 0xDB	; 219
    10ec:	3f e0       	ldi	r19, 0x0F	; 15
    10ee:	49 e4       	ldi	r20, 0x49	; 73
    10f0:	50 e4       	ldi	r21, 0x40	; 64
    10f2:	c5 01       	movw	r24, r10
    10f4:	b4 01       	movw	r22, r8
    10f6:	0e 94 3f 13 	call	0x267e	; 0x267e <__gesf2>
    10fa:	18 16       	cp	r1, r24
    10fc:	bc f4       	brge	.+46     	; 0x112c <theta_error_correction+0x5e>
    10fe:	2b ed       	ldi	r18, 0xDB	; 219
    1100:	3f e0       	ldi	r19, 0x0F	; 15
    1102:	49 ec       	ldi	r20, 0xC9	; 201
    1104:	50 e4       	ldi	r21, 0x40	; 64
    1106:	c7 01       	movw	r24, r14
    1108:	b6 01       	movw	r22, r12
    110a:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    110e:	a5 01       	movw	r20, r10
    1110:	94 01       	movw	r18, r8
    1112:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
    1116:	9b 01       	movw	r18, r22
    1118:	ac 01       	movw	r20, r24
    111a:	c7 01       	movw	r24, r14
    111c:	b6 01       	movw	r22, r12
    111e:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
    1122:	56 2f       	mov	r21, r22
    1124:	47 2f       	mov	r20, r23
    1126:	38 2f       	mov	r19, r24
    1128:	29 2f       	mov	r18, r25
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <theta_error_correction+0x66>
	else{return error;}
    112c:	5c 2d       	mov	r21, r12
    112e:	4d 2d       	mov	r20, r13
    1130:	3e 2d       	mov	r19, r14
    1132:	2f 2d       	mov	r18, r15
    1134:	65 2f       	mov	r22, r21
    1136:	74 2f       	mov	r23, r20
    1138:	83 2f       	mov	r24, r19
    113a:	92 2f       	mov	r25, r18
    113c:	ff 90       	pop	r15
    113e:	ef 90       	pop	r14
    1140:	df 90       	pop	r13
    1142:	cf 90       	pop	r12
    1144:	bf 90       	pop	r11
    1146:	af 90       	pop	r10
    1148:	9f 90       	pop	r9
    114a:	8f 90       	pop	r8
    114c:	08 95       	ret

0000114e <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    114e:	2f 92       	push	r2
    1150:	3f 92       	push	r3
    1152:	4f 92       	push	r4
    1154:	5f 92       	push	r5
    1156:	6f 92       	push	r6
    1158:	7f 92       	push	r7
    115a:	8f 92       	push	r8
    115c:	9f 92       	push	r9
    115e:	af 92       	push	r10
    1160:	bf 92       	push	r11
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	a8 97       	sbiw	r28, 0x28	; 40
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    1182:	ce 01       	movw	r24, r28
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	0e 94 0a 10 	call	0x2014	; 0x2014 <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    118a:	6b 81       	ldd	r22, Y+3	; 0x03
    118c:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    118e:	0f 81       	ldd	r16, Y+7	; 0x07
    1190:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    1192:	49 85       	ldd	r20, Y+9	; 0x09
    1194:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    1196:	ad 85       	ldd	r26, Y+13	; 0x0d
    1198:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    119a:	2f 85       	ldd	r18, Y+15	; 0x0f
    119c:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    119e:	eb 89       	ldd	r30, Y+19	; 0x13
    11a0:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    11a2:	8d 89       	ldd	r24, Y+21	; 0x15
    11a4:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    11a6:	e9 80       	ldd	r14, Y+1	; 0x01
    11a8:	fa 80       	ldd	r15, Y+2	; 0x02
    11aa:	fa 8e       	std	Y+26, r15	; 0x1a
    11ac:	e9 8e       	std	Y+25, r14	; 0x19
    11ae:	1c 8f       	std	Y+28, r17	; 0x1c
    11b0:	0b 8f       	std	Y+27, r16	; 0x1b
    11b2:	be 8f       	std	Y+30, r27	; 0x1e
    11b4:	ad 8f       	std	Y+29, r26	; 0x1d
    11b6:	f8 a3       	std	Y+32, r31	; 0x20
    11b8:	ef 8f       	std	Y+31, r30	; 0x1f
    11ba:	7a a3       	std	Y+34, r23	; 0x22
    11bc:	69 a3       	std	Y+33, r22	; 0x21
    11be:	5c a3       	std	Y+36, r21	; 0x24
    11c0:	4b a3       	std	Y+35, r20	; 0x23
    11c2:	3e a3       	std	Y+38, r19	; 0x26
    11c4:	2d a3       	std	Y+37, r18	; 0x25
    11c6:	98 a7       	std	Y+40, r25	; 0x28
    11c8:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    11ca:	6e e1       	ldi	r22, 0x1E	; 30
    11cc:	71 e0       	ldi	r23, 0x01	; 1
    11ce:	ce 01       	movw	r24, r28
    11d0:	49 96       	adiw	r24, 0x19	; 25
    11d2:	0e 94 a1 05 	call	0xb42	; 0xb42 <localization_calc>
    11d6:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    11d8:	fc 01       	movw	r30, r24
    11da:	80 85       	ldd	r24, Z+8	; 0x08
    11dc:	91 85       	ldd	r25, Z+9	; 0x09
    11de:	a2 85       	ldd	r26, Z+10	; 0x0a
    11e0:	b3 85       	ldd	r27, Z+11	; 0x0b
    11e2:	0f 2e       	mov	r0, r31
    11e4:	fe e1       	ldi	r31, 0x1E	; 30
    11e6:	2f 2e       	mov	r2, r31
    11e8:	f1 e0       	ldi	r31, 0x01	; 1
    11ea:	3f 2e       	mov	r3, r31
    11ec:	f0 2d       	mov	r31, r0
    11ee:	f1 01       	movw	r30, r2
    11f0:	80 87       	std	Z+8, r24	; 0x08
    11f2:	91 87       	std	Z+9, r25	; 0x09
    11f4:	a2 87       	std	Z+10, r26	; 0x0a
    11f6:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    11f8:	f8 01       	movw	r30, r16
    11fa:	60 85       	ldd	r22, Z+8	; 0x08
    11fc:	71 85       	ldd	r23, Z+9	; 0x09
    11fe:	82 85       	ldd	r24, Z+10	; 0x0a
    1200:	93 85       	ldd	r25, Z+11	; 0x0b
    1202:	0e 94 67 08 	call	0x10ce	; 0x10ce <theta_error_correction>
    1206:	2b 01       	movw	r4, r22
    1208:	3c 01       	movw	r6, r24
    120a:	f8 01       	movw	r30, r16
    120c:	60 87       	std	Z+8, r22	; 0x08
    120e:	71 87       	std	Z+9, r23	; 0x09
    1210:	82 87       	std	Z+10, r24	; 0x0a
    1212:	93 87       	std	Z+11, r25	; 0x0b


/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1214:	24 ea       	ldi	r18, 0xA4	; 164
    1216:	30 e7       	ldi	r19, 0x70	; 112
    1218:	4d e7       	ldi	r20, 0x7D	; 125
    121a:	5f e3       	ldi	r21, 0x3F	; 63
    121c:	60 81       	ld	r22, Z
    121e:	71 81       	ldd	r23, Z+1	; 0x01
    1220:	82 81       	ldd	r24, Z+2	; 0x02
    1222:	93 81       	ldd	r25, Z+3	; 0x03
    1224:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    1228:	4b 01       	movw	r8, r22
    122a:	5c 01       	movw	r10, r24
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	37 ed       	ldi	r19, 0xD7	; 215
    1230:	43 e2       	ldi	r20, 0x23	; 35
    1232:	5c e3       	ldi	r21, 0x3C	; 60
    1234:	60 91 83 01 	lds	r22, 0x0183
    1238:	70 91 84 01 	lds	r23, 0x0184
    123c:	80 91 85 01 	lds	r24, 0x0185
    1240:	90 91 86 01 	lds	r25, 0x0186
    1244:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    1248:	9b 01       	movw	r18, r22
    124a:	ac 01       	movw	r20, r24
    124c:	c5 01       	movw	r24, r10
    124e:	b4 01       	movw	r22, r8
    1250:	0e 94 9e 10 	call	0x213c	; 0x213c <__addsf3>
    1254:	4b 01       	movw	r8, r22
    1256:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    1258:	60 93 83 01 	sts	0x0183, r22
    125c:	70 93 84 01 	sts	0x0184, r23
    1260:	80 93 85 01 	sts	0x0185, r24
    1264:	90 93 86 01 	sts	0x0186, r25


/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1268:	24 ea       	ldi	r18, 0xA4	; 164
    126a:	30 e7       	ldi	r19, 0x70	; 112
    126c:	4d e7       	ldi	r20, 0x7D	; 125
    126e:	5f e3       	ldi	r21, 0x3F	; 63
    1270:	f8 01       	movw	r30, r16
    1272:	64 81       	ldd	r22, Z+4	; 0x04
    1274:	75 81       	ldd	r23, Z+5	; 0x05
    1276:	86 81       	ldd	r24, Z+6	; 0x06
    1278:	97 81       	ldd	r25, Z+7	; 0x07
    127a:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    127e:	6b 01       	movw	r12, r22
    1280:	7c 01       	movw	r14, r24
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	37 ed       	ldi	r19, 0xD7	; 215
    1286:	43 e2       	ldi	r20, 0x23	; 35
    1288:	5c e3       	ldi	r21, 0x3C	; 60
    128a:	60 91 7f 01 	lds	r22, 0x017F
    128e:	70 91 80 01 	lds	r23, 0x0180
    1292:	80 91 81 01 	lds	r24, 0x0181
    1296:	90 91 82 01 	lds	r25, 0x0182
    129a:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    129e:	9b 01       	movw	r18, r22
    12a0:	ac 01       	movw	r20, r24
    12a2:	c7 01       	movw	r24, r14
    12a4:	b6 01       	movw	r22, r12
    12a6:	0e 94 9e 10 	call	0x213c	; 0x213c <__addsf3>
    12aa:	6b 01       	movw	r12, r22
    12ac:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    12ae:	60 93 7f 01 	sts	0x017F, r22
    12b2:	70 93 80 01 	sts	0x0180, r23
    12b6:	80 93 81 01 	sts	0x0181, r24
    12ba:	90 93 82 01 	sts	0x0182, r25


/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    12be:	24 ea       	ldi	r18, 0xA4	; 164
    12c0:	30 e7       	ldi	r19, 0x70	; 112
    12c2:	4d e7       	ldi	r20, 0x7D	; 125
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	c3 01       	movw	r24, r6
    12c8:	b2 01       	movw	r22, r4
    12ca:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    12ce:	2b 01       	movw	r4, r22
    12d0:	3c 01       	movw	r6, r24
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	37 ed       	ldi	r19, 0xD7	; 215
    12d6:	43 e2       	ldi	r20, 0x23	; 35
    12d8:	5c e3       	ldi	r21, 0x3C	; 60
    12da:	60 91 7b 01 	lds	r22, 0x017B
    12de:	70 91 7c 01 	lds	r23, 0x017C
    12e2:	80 91 7d 01 	lds	r24, 0x017D
    12e6:	90 91 7e 01 	lds	r25, 0x017E
    12ea:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    12ee:	9b 01       	movw	r18, r22
    12f0:	ac 01       	movw	r20, r24
    12f2:	c3 01       	movw	r24, r6
    12f4:	b2 01       	movw	r22, r4
    12f6:	0e 94 9e 10 	call	0x213c	; 0x213c <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    12fa:	60 93 7b 01 	sts	0x017B, r22
    12fe:	70 93 7c 01 	sts	0x017C, r23
    1302:	80 93 7d 01 	sts	0x017D, r24
    1306:	90 93 7e 01 	sts	0x017E, r25
	
	robotCenterPrev[0] = x;
    130a:	f1 01       	movw	r30, r2
    130c:	80 82       	st	Z, r8
    130e:	91 82       	std	Z+1, r9	; 0x01
    1310:	a2 82       	std	Z+2, r10	; 0x02
    1312:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    1314:	c4 82       	std	Z+4, r12	; 0x04
    1316:	d5 82       	std	Z+5, r13	; 0x05
    1318:	e6 82       	std	Z+6, r14	; 0x06
    131a:	f7 82       	std	Z+7, r15	; 0x07
}
    131c:	a8 96       	adiw	r28, 0x28	; 40
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	bf 90       	pop	r11
    133a:	af 90       	pop	r10
    133c:	9f 90       	pop	r9
    133e:	8f 90       	pop	r8
    1340:	7f 90       	pop	r7
    1342:	6f 90       	pop	r6
    1344:	5f 90       	pop	r5
    1346:	4f 90       	pop	r4
    1348:	3f 90       	pop	r3
    134a:	2f 90       	pop	r2
    134c:	08 95       	ret

0000134e <run_motor_control_loop>:



/* PID Control (Currently only for theta) */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd, int game_pause)
{
    134e:	4f 92       	push	r4
    1350:	5f 92       	push	r5
    1352:	6f 92       	push	r6
    1354:	7f 92       	push	r7
    1356:	8f 92       	push	r8
    1358:	9f 92       	push	r9
    135a:	af 92       	push	r10
    135c:	bf 92       	push	r11
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	64 97       	sbiw	r28, 0x14	; 20
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	29 01       	movw	r4, r18
    1380:	3a 01       	movw	r6, r20
    1382:	ed 86       	std	Y+13, r14	; 0x0d
    1384:	fe 86       	std	Y+14, r15	; 0x0e
    1386:	0f 87       	std	Y+15, r16	; 0x0f
    1388:	18 8b       	std	Y+16, r17	; 0x10
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    138a:	20 91 83 01 	lds	r18, 0x0183
    138e:	30 91 84 01 	lds	r19, 0x0184
    1392:	40 91 85 01 	lds	r20, 0x0185
    1396:	50 91 86 01 	lds	r21, 0x0186
    139a:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
    139e:	6d 83       	std	Y+5, r22	; 0x05
    13a0:	7e 83       	std	Y+6, r23	; 0x06
    13a2:	8f 83       	std	Y+7, r24	; 0x07
    13a4:	98 87       	std	Y+8, r25	; 0x08
    13a6:	20 91 7f 01 	lds	r18, 0x017F
    13aa:	30 91 80 01 	lds	r19, 0x0180
    13ae:	40 91 81 01 	lds	r20, 0x0181
    13b2:	50 91 82 01 	lds	r21, 0x0182
    13b6:	c3 01       	movw	r24, r6
    13b8:	b2 01       	movw	r22, r4
    13ba:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
    13be:	69 87       	std	Y+9, r22	; 0x09
    13c0:	7a 87       	std	Y+10, r23	; 0x0a
    13c2:	8b 87       	std	Y+11, r24	; 0x0b
    13c4:	9c 87       	std	Y+12, r25	; 0x0c
    13c6:	2d 81       	ldd	r18, Y+5	; 0x05
    13c8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ca:	4f 81       	ldd	r20, Y+7	; 0x07
    13cc:	58 85       	ldd	r21, Y+8	; 0x08
    13ce:	0e 94 1d 11 	call	0x223a	; 0x223a <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    13d2:	20 91 7b 01 	lds	r18, 0x017B
    13d6:	30 91 7c 01 	lds	r19, 0x017C
    13da:	40 91 7d 01 	lds	r20, 0x017D
    13de:	50 91 7e 01 	lds	r21, 0x017E
    13e2:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
    13e6:	69 83       	std	Y+1, r22	; 0x01
    13e8:	7a 83       	std	Y+2, r23	; 0x02
    13ea:	8b 83       	std	Y+3, r24	; 0x03
    13ec:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    13ee:	2b 01       	movw	r4, r22
    13f0:	3c 01       	movw	r6, r24
    13f2:	e8 94       	clt
    13f4:	77 f8       	bld	r7, 7
    13f6:	a6 01       	movw	r20, r12
    13f8:	95 01       	movw	r18, r10
    13fa:	c3 01       	movw	r24, r6
    13fc:	b2 01       	movw	r22, r4
    13fe:	0e 94 3f 13 	call	0x267e	; 0x267e <__gesf2>
    1402:	18 16       	cp	r1, r24
    1404:	84 f4       	brge	.+32     	; 0x1426 <run_motor_control_loop+0xd8>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    1406:	29 81       	ldd	r18, Y+1	; 0x01
    1408:	3a 81       	ldd	r19, Y+2	; 0x02
    140a:	4b 81       	ldd	r20, Y+3	; 0x03
    140c:	5c 81       	ldd	r21, Y+4	; 0x04
    140e:	c3 01       	movw	r24, r6
    1410:	b2 01       	movw	r22, r4
    1412:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
    1416:	a6 01       	movw	r20, r12
    1418:	95 01       	movw	r18, r10
    141a:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    141e:	69 83       	std	Y+1, r22	; 0x01
    1420:	7a 83       	std	Y+2, r23	; 0x02
    1422:	8b 83       	std	Y+3, r24	; 0x03
    1424:	9c 83       	std	Y+4, r25	; 0x04
	}

	theta_error = theta_error_correction(theta_error);
    1426:	69 81       	ldd	r22, Y+1	; 0x01
    1428:	7a 81       	ldd	r23, Y+2	; 0x02
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	0e 94 67 08 	call	0x10ce	; 0x10ce <theta_error_correction>
    1432:	4b 01       	movw	r8, r22
    1434:	5c 01       	movw	r10, r24
	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    1436:	9b 01       	movw	r18, r22
    1438:	ac 01       	movw	r20, r24
    143a:	6f a1       	ldd	r22, Y+39	; 0x27
    143c:	78 a5       	ldd	r23, Y+40	; 0x28
    143e:	89 a5       	ldd	r24, Y+41	; 0x29
    1440:	9a a5       	ldd	r25, Y+42	; 0x2a
    1442:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    1446:	6b 01       	movw	r12, r22
    1448:	7c 01       	movw	r14, r24
	if(fabs(theta_error)>max_theta){
		theta_error = fabs(theta_error)/theta_error*max_theta;
	}

	theta_error = theta_error_correction(theta_error);
	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
    144a:	20 91 77 01 	lds	r18, 0x0177
    144e:	30 91 78 01 	lds	r19, 0x0178
    1452:	40 91 79 01 	lds	r20, 0x0179
    1456:	50 91 7a 01 	lds	r21, 0x017A
    145a:	c5 01       	movw	r24, r10
    145c:	b4 01       	movw	r22, r8
    145e:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
    1462:	2f e6       	ldi	r18, 0x6F	; 111
    1464:	32 e1       	ldi	r19, 0x12	; 18
    1466:	43 e8       	ldi	r20, 0x83	; 131
    1468:	5a e3       	ldi	r21, 0x3A	; 58
    146a:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
    146e:	9b 01       	movw	r18, r22
    1470:	ac 01       	movw	r20, r24
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    1472:	6b a5       	ldd	r22, Y+43	; 0x2b
    1474:	7c a5       	ldd	r23, Y+44	; 0x2c
    1476:	8d a5       	ldd	r24, Y+45	; 0x2d
    1478:	9e a5       	ldd	r25, Y+46	; 0x2e
    147a:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    147e:	9b 01       	movw	r18, r22
    1480:	ac 01       	movw	r20, r24
    1482:	c7 01       	movw	r24, r14
    1484:	b6 01       	movw	r22, r12
    1486:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
	previous_theta_error = theta_error;
    148a:	80 92 77 01 	sts	0x0177, r8
    148e:	90 92 78 01 	sts	0x0178, r9
    1492:	a0 92 79 01 	sts	0x0179, r10
    1496:	b0 92 7a 01 	sts	0x017A, r11
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    149a:	2b ed       	ldi	r18, 0xDB	; 219
    149c:	3f e0       	ldi	r19, 0x0F	; 15
    149e:	49 e4       	ldi	r20, 0x49	; 73
    14a0:	50 e4       	ldi	r21, 0x40	; 64
    14a2:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
    14a6:	69 83       	std	Y+1, r22	; 0x01
    14a8:	7a 83       	std	Y+2, r23	; 0x02
    14aa:	8b 83       	std	Y+3, r24	; 0x03
    14ac:	9c 83       	std	Y+4, r25	; 0x04
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	b0 58       	subi	r27, 0x80	; 128
    14b4:	89 8b       	std	Y+17, r24	; 0x11
    14b6:	9a 8b       	std	Y+18, r25	; 0x12
    14b8:	ab 8b       	std	Y+19, r26	; 0x13
    14ba:	bc 8b       	std	Y+20, r27	; 0x14
	right_duty_cycle = angular_output;
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    14bc:	c5 01       	movw	r24, r10
    14be:	b4 01       	movw	r22, r8
    14c0:	0e 94 81 11 	call	0x2302	; 0x2302 <cos>
    14c4:	2b 01       	movw	r4, r22
    14c6:	3c 01       	movw	r6, r24
    14c8:	29 85       	ldd	r18, Y+9	; 0x09
    14ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    14cc:	4b 85       	ldd	r20, Y+11	; 0x0b
    14ce:	5c 85       	ldd	r21, Y+12	; 0x0c
    14d0:	ca 01       	movw	r24, r20
    14d2:	b9 01       	movw	r22, r18
    14d4:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    14d8:	6b 01       	movw	r12, r22
    14da:	7c 01       	movw	r14, r24
    14dc:	2d 81       	ldd	r18, Y+5	; 0x05
    14de:	3e 81       	ldd	r19, Y+6	; 0x06
    14e0:	4f 81       	ldd	r20, Y+7	; 0x07
    14e2:	58 85       	ldd	r21, Y+8	; 0x08
    14e4:	ca 01       	movw	r24, r20
    14e6:	b9 01       	movw	r22, r18
    14e8:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    14ec:	9b 01       	movw	r18, r22
    14ee:	ac 01       	movw	r20, r24
    14f0:	c7 01       	movw	r24, r14
    14f2:	b6 01       	movw	r22, r12
    14f4:	0e 94 9e 10 	call	0x213c	; 0x213c <__addsf3>
    14f8:	0e 94 c7 13 	call	0x278e	; 0x278e <sqrt>
    14fc:	9b 01       	movw	r18, r22
    14fe:	ac 01       	movw	r20, r24
    1500:	c3 01       	movw	r24, r6
    1502:	b2 01       	movw	r22, r4
    1504:	9f 77       	andi	r25, 0x7F	; 127
    1506:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    150a:	6b 01       	movw	r12, r22
    150c:	7c 01       	movw	r14, r24
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    150e:	9b 01       	movw	r18, r22
    1510:	ac 01       	movw	r20, r24
    1512:	6f a5       	ldd	r22, Y+47	; 0x2f
    1514:	78 a9       	ldd	r23, Y+48	; 0x30
    1516:	89 a9       	ldd	r24, Y+49	; 0x31
    1518:	9a a9       	ldd	r25, Y+50	; 0x32
    151a:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    151e:	2b 01       	movw	r4, r22
    1520:	3c 01       	movw	r6, r24
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
    1522:	20 91 73 01 	lds	r18, 0x0173
    1526:	30 91 74 01 	lds	r19, 0x0174
    152a:	40 91 75 01 	lds	r20, 0x0175
    152e:	50 91 76 01 	lds	r21, 0x0176
    1532:	c7 01       	movw	r24, r14
    1534:	b6 01       	movw	r22, r12
    1536:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
    153a:	2f e6       	ldi	r18, 0x6F	; 111
    153c:	32 e1       	ldi	r19, 0x12	; 18
    153e:	43 e8       	ldi	r20, 0x83	; 131
    1540:	5a e3       	ldi	r21, 0x3A	; 58
    1542:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
    1546:	9b 01       	movw	r18, r22
    1548:	ac 01       	movw	r20, r24
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    154a:	6b a9       	ldd	r22, Y+51	; 0x33
    154c:	7c a9       	ldd	r23, Y+52	; 0x34
    154e:	8d a9       	ldd	r24, Y+53	; 0x35
    1550:	9e a9       	ldd	r25, Y+54	; 0x36
    1552:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    1556:	9b 01       	movw	r18, r22
    1558:	ac 01       	movw	r20, r24
    155a:	c3 01       	movw	r24, r6
    155c:	b2 01       	movw	r22, r4
    155e:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
    1562:	2b 01       	movw	r4, r22
    1564:	3c 01       	movw	r6, r24
	previous_linear_error = linear_error;
    1566:	c0 92 73 01 	sts	0x0173, r12
    156a:	d0 92 74 01 	sts	0x0174, r13
    156e:	e0 92 75 01 	sts	0x0175, r14
    1572:	f0 92 76 01 	sts	0x0176, r15
	if(linear_output>40.0){linear_output=40.0;}
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e2       	ldi	r20, 0x20	; 32
    157c:	52 e4       	ldi	r21, 0x42	; 66
    157e:	0e 94 3f 13 	call	0x267e	; 0x267e <__gesf2>
    1582:	18 16       	cp	r1, r24
    1584:	44 f4       	brge	.+16     	; 0x1596 <run_motor_control_loop+0x248>
    1586:	0f 2e       	mov	r0, r31
    1588:	41 2c       	mov	r4, r1
    158a:	51 2c       	mov	r5, r1
    158c:	f0 e2       	ldi	r31, 0x20	; 32
    158e:	6f 2e       	mov	r6, r31
    1590:	f2 e4       	ldi	r31, 0x42	; 66
    1592:	7f 2e       	mov	r7, r31
    1594:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e2       	ldi	r20, 0x20	; 32
    159c:	52 e4       	ldi	r21, 0x42	; 66
    159e:	c3 01       	movw	r24, r6
    15a0:	b2 01       	movw	r22, r4
    15a2:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
    15a6:	6b 01       	movw	r12, r22
    15a8:	7c 01       	movw	r14, r24
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    15aa:	c5 01       	movw	r24, r10
    15ac:	b4 01       	movw	r22, r8
    15ae:	9f 77       	andi	r25, 0x7F	; 127
    15b0:	2b ed       	ldi	r18, 0xDB	; 219
    15b2:	3f e0       	ldi	r19, 0x0F	; 15
    15b4:	49 ec       	ldi	r20, 0xC9	; 201
    15b6:	5f e3       	ldi	r21, 0x3F	; 63
    15b8:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__cmpsf2>
    15bc:	88 23       	and	r24, r24
    15be:	0c f5       	brge	.+66     	; 0x1602 <run_motor_control_loop+0x2b4>
		left_duty_cycle += linear_output;
    15c0:	29 81       	ldd	r18, Y+1	; 0x01
    15c2:	3a 81       	ldd	r19, Y+2	; 0x02
    15c4:	4b 81       	ldd	r20, Y+3	; 0x03
    15c6:	5c 81       	ldd	r21, Y+4	; 0x04
    15c8:	c7 01       	movw	r24, r14
    15ca:	b6 01       	movw	r22, r12
    15cc:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
    15d0:	60 93 1a 01 	sts	0x011A, r22
    15d4:	70 93 1b 01 	sts	0x011B, r23
    15d8:	80 93 1c 01 	sts	0x011C, r24
    15dc:	90 93 1d 01 	sts	0x011D, r25
		right_duty_cycle += linear_output;
    15e0:	a7 01       	movw	r20, r14
    15e2:	96 01       	movw	r18, r12
    15e4:	69 81       	ldd	r22, Y+1	; 0x01
    15e6:	7a 81       	ldd	r23, Y+2	; 0x02
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	0e 94 9e 10 	call	0x213c	; 0x213c <__addsf3>
    15f0:	60 93 16 01 	sts	0x0116, r22
    15f4:	70 93 17 01 	sts	0x0117, r23
    15f8:	80 93 18 01 	sts	0x0118, r24
    15fc:	90 93 19 01 	sts	0x0119, r25
    1600:	20 c0       	rjmp	.+64     	; 0x1642 <run_motor_control_loop+0x2f4>
		} else{
		left_duty_cycle -= linear_output;
    1602:	a7 01       	movw	r20, r14
    1604:	96 01       	movw	r18, r12
    1606:	69 89       	ldd	r22, Y+17	; 0x11
    1608:	7a 89       	ldd	r23, Y+18	; 0x12
    160a:	8b 89       	ldd	r24, Y+19	; 0x13
    160c:	9c 89       	ldd	r25, Y+20	; 0x14
    160e:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
    1612:	60 93 1a 01 	sts	0x011A, r22
    1616:	70 93 1b 01 	sts	0x011B, r23
    161a:	80 93 1c 01 	sts	0x011C, r24
    161e:	90 93 1d 01 	sts	0x011D, r25
		right_duty_cycle -= linear_output;
    1622:	a7 01       	movw	r20, r14
    1624:	96 01       	movw	r18, r12
    1626:	69 81       	ldd	r22, Y+1	; 0x01
    1628:	7a 81       	ldd	r23, Y+2	; 0x02
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	0e 94 9d 10 	call	0x213a	; 0x213a <__subsf3>
    1632:	60 93 16 01 	sts	0x0116, r22
    1636:	70 93 17 01 	sts	0x0117, r23
    163a:	80 93 18 01 	sts	0x0118, r24
    163e:	90 93 19 01 	sts	0x0119, r25
	}
	
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	a9 01       	movw	r20, r18
    1648:	60 91 1a 01 	lds	r22, 0x011A
    164c:	70 91 1b 01 	lds	r23, 0x011B
    1650:	80 91 1c 01 	lds	r24, 0x011C
    1654:	90 91 1d 01 	lds	r25, 0x011D
    1658:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__cmpsf2>
    165c:	88 23       	and	r24, r24
    165e:	14 f4       	brge	.+4      	; 0x1664 <run_motor_control_loop+0x316>
    1660:	29 98       	cbi	0x05, 1	; 5
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <run_motor_control_loop+0x318>
	else{set(PORTB,1);}
    1664:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	a9 01       	movw	r20, r18
    166c:	60 91 16 01 	lds	r22, 0x0116
    1670:	70 91 17 01 	lds	r23, 0x0117
    1674:	80 91 18 01 	lds	r24, 0x0118
    1678:	90 91 19 01 	lds	r25, 0x0119
    167c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__cmpsf2>
    1680:	88 23       	and	r24, r24
    1682:	14 f4       	brge	.+4      	; 0x1688 <run_motor_control_loop+0x33a>
    1684:	2b 98       	cbi	0x05, 3	; 5
    1686:	01 c0       	rjmp	.+2      	; 0x168a <run_motor_control_loop+0x33c>
	else{set(PORTB,3);}
    1688:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    168a:	80 90 1a 01 	lds	r8, 0x011A
    168e:	90 90 1b 01 	lds	r9, 0x011B
    1692:	a0 90 1c 01 	lds	r10, 0x011C
    1696:	b0 90 1d 01 	lds	r11, 0x011D
    169a:	e8 94       	clt
    169c:	b7 f8       	bld	r11, 7
    169e:	80 92 1a 01 	sts	0x011A, r8
    16a2:	90 92 1b 01 	sts	0x011B, r9
    16a6:	a0 92 1c 01 	sts	0x011C, r10
    16aa:	b0 92 1d 01 	sts	0x011D, r11
	right_duty_cycle = fabs(right_duty_cycle);
    16ae:	c0 90 16 01 	lds	r12, 0x0116
    16b2:	d0 90 17 01 	lds	r13, 0x0117
    16b6:	e0 90 18 01 	lds	r14, 0x0118
    16ba:	f0 90 19 01 	lds	r15, 0x0119
    16be:	e8 94       	clt
    16c0:	f7 f8       	bld	r15, 7
    16c2:	c0 92 16 01 	sts	0x0116, r12
    16c6:	d0 92 17 01 	sts	0x0117, r13
    16ca:	e0 92 18 01 	sts	0x0118, r14
    16ce:	f0 92 19 01 	sts	0x0119, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    16d2:	a7 01       	movw	r20, r14
    16d4:	96 01       	movw	r18, r12
    16d6:	c5 01       	movw	r24, r10
    16d8:	b4 01       	movw	r22, r8
    16da:	0e 94 3f 13 	call	0x267e	; 0x267e <__gesf2>
    16de:	18 16       	cp	r1, r24
    16e0:	2c f0       	brlt	.+10     	; 0x16ec <run_motor_control_loop+0x39e>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    16e2:	1c 2d       	mov	r17, r12
    16e4:	0d 2d       	mov	r16, r13
    16e6:	7e 2c       	mov	r7, r14
    16e8:	6f 2c       	mov	r6, r15
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <run_motor_control_loop+0x3a6>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    16ec:	18 2d       	mov	r17, r8
    16ee:	09 2d       	mov	r16, r9
    16f0:	7a 2c       	mov	r7, r10
    16f2:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    16f4:	2d 85       	ldd	r18, Y+13	; 0x0d
    16f6:	3e 85       	ldd	r19, Y+14	; 0x0e
    16f8:	4f 85       	ldd	r20, Y+15	; 0x0f
    16fa:	58 89       	ldd	r21, Y+16	; 0x10
    16fc:	61 2f       	mov	r22, r17
    16fe:	70 2f       	mov	r23, r16
    1700:	87 2d       	mov	r24, r7
    1702:	96 2d       	mov	r25, r6
    1704:	0e 94 3f 13 	call	0x267e	; 0x267e <__gesf2>
    1708:	18 16       	cp	r1, r24
    170a:	64 f5       	brge	.+88     	; 0x1764 <run_motor_control_loop+0x416>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    170c:	21 2f       	mov	r18, r17
    170e:	30 2f       	mov	r19, r16
    1710:	47 2d       	mov	r20, r7
    1712:	56 2d       	mov	r21, r6
    1714:	c5 01       	movw	r24, r10
    1716:	b4 01       	movw	r22, r8
    1718:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
    171c:	2d 85       	ldd	r18, Y+13	; 0x0d
    171e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1720:	4f 85       	ldd	r20, Y+15	; 0x0f
    1722:	58 89       	ldd	r21, Y+16	; 0x10
    1724:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    1728:	60 93 1a 01 	sts	0x011A, r22
    172c:	70 93 1b 01 	sts	0x011B, r23
    1730:	80 93 1c 01 	sts	0x011C, r24
    1734:	90 93 1d 01 	sts	0x011D, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    1738:	21 2f       	mov	r18, r17
    173a:	30 2f       	mov	r19, r16
    173c:	47 2d       	mov	r20, r7
    173e:	56 2d       	mov	r21, r6
    1740:	c7 01       	movw	r24, r14
    1742:	b6 01       	movw	r22, r12
    1744:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
    1748:	2d 85       	ldd	r18, Y+13	; 0x0d
    174a:	3e 85       	ldd	r19, Y+14	; 0x0e
    174c:	4f 85       	ldd	r20, Y+15	; 0x0f
    174e:	58 89       	ldd	r21, Y+16	; 0x10
    1750:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    1754:	60 93 16 01 	sts	0x0116, r22
    1758:	70 93 17 01 	sts	0x0117, r23
    175c:	80 93 18 01 	sts	0x0118, r24
    1760:	90 93 19 01 	sts	0x0119, r25
	}
	
	// Check game state
	if (game_pause)
    1764:	8f a9       	ldd	r24, Y+55	; 0x37
    1766:	98 ad       	ldd	r25, Y+56	; 0x38
    1768:	89 2b       	or	r24, r25
    176a:	81 f0       	breq	.+32     	; 0x178c <run_motor_control_loop+0x43e>
	{
		left_duty_cycle = 0;
    176c:	10 92 1a 01 	sts	0x011A, r1
    1770:	10 92 1b 01 	sts	0x011B, r1
    1774:	10 92 1c 01 	sts	0x011C, r1
    1778:	10 92 1d 01 	sts	0x011D, r1
		right_duty_cycle = 0;
    177c:	10 92 16 01 	sts	0x0116, r1
    1780:	10 92 17 01 	sts	0x0117, r1
    1784:	10 92 18 01 	sts	0x0118, r1
    1788:	10 92 19 01 	sts	0x0119, r1
	}
	
	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    178c:	08 e8       	ldi	r16, 0x88	; 136
    178e:	10 e0       	ldi	r17, 0x00	; 0
    1790:	d8 01       	movw	r26, r16
    1792:	6d 91       	ld	r22, X+
    1794:	7c 91       	ld	r23, X
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 27 12 	call	0x244e	; 0x244e <__floatunsisf>
    179e:	20 91 1a 01 	lds	r18, 0x011A
    17a2:	30 91 1b 01 	lds	r19, 0x011B
    17a6:	40 91 1c 01 	lds	r20, 0x011C
    17aa:	50 91 1d 01 	lds	r21, 0x011D
    17ae:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    17b2:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__fixunssfsi>
    17b6:	70 93 8b 00 	sts	0x008B, r23
    17ba:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    17be:	f8 01       	movw	r30, r16
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 94 27 12 	call	0x244e	; 0x244e <__floatunsisf>
    17cc:	20 91 16 01 	lds	r18, 0x0116
    17d0:	30 91 17 01 	lds	r19, 0x0117
    17d4:	40 91 18 01 	lds	r20, 0x0118
    17d8:	50 91 19 01 	lds	r21, 0x0119
    17dc:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    17e0:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__fixunssfsi>
    17e4:	70 93 8d 00 	sts	0x008D, r23
    17e8:	60 93 8c 00 	sts	0x008C, r22

}
    17ec:	64 96       	adiw	r28, 0x14	; 20
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	df 90       	pop	r13
    1806:	cf 90       	pop	r12
    1808:	bf 90       	pop	r11
    180a:	af 90       	pop	r10
    180c:	9f 90       	pop	r9
    180e:	8f 90       	pop	r8
    1810:	7f 90       	pop	r7
    1812:	6f 90       	pop	r6
    1814:	5f 90       	pop	r5
    1816:	4f 90       	pop	r4
    1818:	08 95       	ret

0000181a <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    181a:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    181c:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    181e:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1820:	8c e0       	ldi	r24, 0x0C	; 12
    1822:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    1826:	e9 e6       	ldi	r30, 0x69	; 105
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	80 62       	ori	r24, 0x20	; 32
    182e:	80 83       	st	Z, r24
    1830:	80 81       	ld	r24, Z
    1832:	8f 7e       	andi	r24, 0xEF	; 239
    1834:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1836:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    1838:	78 94       	sei
    183a:	08 95       	ret

0000183c <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	18 2f       	mov	r17, r24
    1844:	d6 2f       	mov	r29, r22
    1846:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1848:	0e 94 0d 0c 	call	0x181a	; 0x181a <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    184c:	94 ea       	ldi	r25, 0xA4	; 164
    184e:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1852:	ec eb       	ldi	r30, 0xBC	; 188
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	90 81       	ld	r25, Z
    1858:	99 23       	and	r25, r25
    185a:	ec f7       	brge	.-6      	; 0x1856 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    185c:	90 e5       	ldi	r25, 0x50	; 80
    185e:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1862:	94 e8       	ldi	r25, 0x84	; 132
    1864:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1868:	ec eb       	ldi	r30, 0xBC	; 188
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	90 81       	ld	r25, Z
    186e:	99 23       	and	r25, r25
    1870:	ec f7       	brge	.-6      	; 0x186c <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1872:	90 91 b9 00 	lds	r25, 0x00B9
    1876:	98 7f       	andi	r25, 0xF8	; 248
    1878:	90 32       	cpi	r25, 0x20	; 32
    187a:	29 f4       	brne	.+10     	; 0x1886 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    187c:	84 e9       	ldi	r24, 0x94	; 148
    187e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	2d c0       	rjmp	.+90     	; 0x18e0 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    188c:	84 e8       	ldi	r24, 0x84	; 132
    188e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1892:	ec eb       	ldi	r30, 0xBC	; 188
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	90 81       	ld	r25, Z
    1898:	99 23       	and	r25, r25
    189a:	ec f7       	brge	.-6      	; 0x1896 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    189c:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    18a0:	84 e8       	ldi	r24, 0x84	; 132
    18a2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    18a6:	ec eb       	ldi	r30, 0xBC	; 188
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	88 23       	and	r24, r24
    18ae:	ec f7       	brge	.-6      	; 0x18aa <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    18b0:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    18b4:	84 e8       	ldi	r24, 0x84	; 132
    18b6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    18ba:	ec eb       	ldi	r30, 0xBC	; 188
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	88 23       	and	r24, r24
    18c2:	ec f7       	brge	.-6      	; 0x18be <m_rf_open+0x82>
	
	TWDR = packet_length;
    18c4:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    18c8:	84 e8       	ldi	r24, 0x84	; 132
    18ca:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    18ce:	ec eb       	ldi	r30, 0xBC	; 188
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	88 23       	and	r24, r24
    18d6:	ec f7       	brge	.-6      	; 0x18d2 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    18d8:	84 e9       	ldi	r24, 0x94	; 148
    18da:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    18de:	81 e0       	ldi	r24, 0x01	; 1
}
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	1f 91       	pop	r17
    18e6:	08 95       	ret

000018e8 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    18ee:	84 ea       	ldi	r24, 0xA4	; 164
    18f0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    18f4:	ec eb       	ldi	r30, 0xBC	; 188
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	90 81       	ld	r25, Z
    18fa:	99 23       	and	r25, r25
    18fc:	ec f7       	brge	.-6      	; 0x18f8 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    18fe:	81 e5       	ldi	r24, 0x51	; 81
    1900:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1904:	84 e8       	ldi	r24, 0x84	; 132
    1906:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    190a:	ec eb       	ldi	r30, 0xBC	; 188
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	90 81       	ld	r25, Z
    1910:	99 23       	and	r25, r25
    1912:	ec f7       	brge	.-6      	; 0x190e <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1914:	80 91 b9 00 	lds	r24, 0x00B9
    1918:	88 7f       	andi	r24, 0xF8	; 248
    191a:	88 34       	cpi	r24, 0x48	; 72
    191c:	29 f4       	brne	.+10     	; 0x1928 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    191e:	84 e9       	ldi	r24, 0x94	; 148
    1920:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	41 c0       	rjmp	.+130    	; 0x19aa <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1928:	84 ec       	ldi	r24, 0xC4	; 196
    192a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    192e:	ec eb       	ldi	r30, 0xBC	; 188
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	90 81       	ld	r25, Z
    1934:	99 23       	and	r25, r25
    1936:	ec f7       	brge	.-6      	; 0x1932 <m_rf_read+0x4a>
	bytes = TWDR;
    1938:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    193c:	46 13       	cpse	r20, r22
    193e:	09 c0       	rjmp	.+18     	; 0x1952 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1940:	84 2f       	mov	r24, r20
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	18 16       	cp	r1, r24
    1948:	19 06       	cpc	r1, r25
    194a:	44 f0       	brlt	.+16     	; 0x195c <m_rf_read+0x74>
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	1a c0       	rjmp	.+52     	; 0x1986 <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1952:	84 e9       	ldi	r24, 0x94	; 148
    1954:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	27 c0       	rjmp	.+78     	; 0x19aa <m_rf_read+0xc2>
    195c:	d9 01       	movw	r26, r18
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	41 50       	subi	r20, 0x01	; 1
    1962:	51 09       	sbc	r21, r1
    1964:	b9 01       	movw	r22, r18
    1966:	64 0f       	add	r22, r20
    1968:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    196a:	ec eb       	ldi	r30, 0xBC	; 188
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1970:	cb eb       	ldi	r28, 0xBB	; 187
    1972:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1974:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1976:	90 81       	ld	r25, Z
    1978:	99 23       	and	r25, r25
    197a:	ec f7       	brge	.-6      	; 0x1976 <m_rf_read+0x8e>
		buffer[i] = TWDR;
    197c:	98 81       	ld	r25, Y
    197e:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1980:	a6 17       	cp	r26, r22
    1982:	b7 07       	cpc	r27, r23
    1984:	b9 f7       	brne	.-18     	; 0x1974 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1986:	84 e8       	ldi	r24, 0x84	; 132
    1988:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    198c:	ec eb       	ldi	r30, 0xBC	; 188
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	90 81       	ld	r25, Z
    1992:	99 23       	and	r25, r25
    1994:	ec f7       	brge	.-6      	; 0x1990 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
    1996:	80 91 bb 00 	lds	r24, 0x00BB
    199a:	f9 01       	movw	r30, r18
    199c:	e4 0f       	add	r30, r20
    199e:	f5 1f       	adc	r31, r21
    19a0:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    19a2:	84 e9       	ldi	r24, 0x94	; 148
    19a4:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
}
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	08 95       	ret

000019b0 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    19b6:	80 ea       	ldi	r24, 0xA0	; 160
    19b8:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    19bc:	82 e1       	ldi	r24, 0x12	; 18
    19be:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    19c0:	09 b4       	in	r0, 0x29	; 41
    19c2:	00 fe       	sbrs	r0, 0
    19c4:	fd cf       	rjmp	.-6      	; 0x19c0 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    19c6:	80 e9       	ldi	r24, 0x90	; 144
    19c8:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    19cc:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    19d0:	10 92 89 01 	sts	0x0189, r1
	cdc_line_rtsdtr = 0;
    19d4:	10 92 87 01 	sts	0x0187, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    19d8:	8c e0       	ldi	r24, 0x0C	; 12
    19da:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    19de:	78 94       	sei
    19e0:	08 95       	ret

000019e2 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    19e2:	1f 92       	push	r1
    19e4:	0f 92       	push	r0
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	0f 92       	push	r0
    19ea:	11 24       	eor	r1, r1
    19ec:	8f 93       	push	r24
    19ee:	9f 93       	push	r25
    19f0:	ef 93       	push	r30
    19f2:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    19f4:	e1 ee       	ldi	r30, 0xE1	; 225
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
        UDINT = 0;
    19fa:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    19fc:	83 ff       	sbrs	r24, 3
    19fe:	11 c0       	rjmp	.+34     	; 0x1a22 <__vector_10+0x40>
		UENUM = 0;
    1a00:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1a0a:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1a0e:	92 e1       	ldi	r25, 0x12	; 18
    1a10:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1a14:	98 e0       	ldi	r25, 0x08	; 8
    1a16:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1a1a:	10 92 89 01 	sts	0x0189, r1
		cdc_line_rtsdtr = 0;
    1a1e:	10 92 87 01 	sts	0x0187, r1
        }
	if (intbits & (1<<SOFI)) {
    1a22:	82 ff       	sbrs	r24, 2
    1a24:	13 c0       	rjmp	.+38     	; 0x1a4c <__vector_10+0x6a>
		if (usb_configuration) {
    1a26:	80 91 89 01 	lds	r24, 0x0189
    1a2a:	88 23       	and	r24, r24
    1a2c:	79 f0       	breq	.+30     	; 0x1a4c <__vector_10+0x6a>
			t = transmit_flush_timer;
    1a2e:	80 91 88 01 	lds	r24, 0x0188
			if (t) {
    1a32:	88 23       	and	r24, r24
    1a34:	59 f0       	breq	.+22     	; 0x1a4c <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1a36:	81 50       	subi	r24, 0x01	; 1
    1a38:	80 93 88 01 	sts	0x0188, r24
				if (!t) {
    1a3c:	81 11       	cpse	r24, r1
    1a3e:	06 c0       	rjmp	.+12     	; 0x1a4c <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1a46:	8a e3       	ldi	r24, 0x3A	; 58
    1a48:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1a4c:	ff 91       	pop	r31
    1a4e:	ef 91       	pop	r30
    1a50:	9f 91       	pop	r25
    1a52:	8f 91       	pop	r24
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	0f 90       	pop	r0
    1a5a:	1f 90       	pop	r1
    1a5c:	18 95       	reti

00001a5e <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1a5e:	1f 92       	push	r1
    1a60:	0f 92       	push	r0
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	0f 92       	push	r0
    1a66:	11 24       	eor	r1, r1
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	2f 93       	push	r18
    1a6e:	3f 93       	push	r19
    1a70:	4f 93       	push	r20
    1a72:	5f 93       	push	r21
    1a74:	6f 93       	push	r22
    1a76:	7f 93       	push	r23
    1a78:	8f 93       	push	r24
    1a7a:	9f 93       	push	r25
    1a7c:	af 93       	push	r26
    1a7e:	bf 93       	push	r27
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	ef 93       	push	r30
    1a86:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1a88:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1a8c:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1a90:	83 ff       	sbrs	r24, 3
    1a92:	4c c1       	rjmp	.+664    	; 0x1d2c <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    1a94:	e1 ef       	ldi	r30, 0xF1	; 241
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    1a9a:	80 81       	ld	r24, Z
                wValue = UEDATX;
    1a9c:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1a9e:	90 81       	ld	r25, Z
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    1aa4:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    1aa6:	90 81       	ld	r25, Z
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	59 2b       	or	r21, r25
                wLength = UEDATX;
    1aac:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    1aae:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1ab0:	92 ef       	ldi	r25, 0xF2	; 242
    1ab2:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    1ab6:	86 30       	cpi	r24, 0x06	; 6
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <__vector_11+0x5e>
    1aba:	58 c0       	rjmp	.+176    	; 0x1b6c <__vector_11+0x10e>
    1abc:	04 c0       	rjmp	.+8      	; 0x1ac6 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1abe:	81 e2       	ldi	r24, 0x21	; 33
    1ac0:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1ac4:	3a c1       	rjmp	.+628    	; 0x1d3a <__vector_11+0x2dc>
    1ac6:	66 e0       	ldi	r22, 0x06	; 6
    1ac8:	88 ef       	ldi	r24, 0xF8	; 248
    1aca:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
    1acc:	fc 01       	movw	r30, r24
    1ace:	a5 91       	lpm	r26, Z+
    1ad0:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    1ad2:	2a 17       	cp	r18, r26
    1ad4:	3b 07       	cpc	r19, r27
    1ad6:	11 f0       	breq	.+4      	; 0x1adc <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    1ad8:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1ada:	23 c0       	rjmp	.+70     	; 0x1b22 <__vector_11+0xc4>
				}
				list += 2;
    1adc:	fc 01       	movw	r30, r24
    1ade:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1ae0:	a5 91       	lpm	r26, Z+
    1ae2:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    1ae4:	4a 17       	cp	r20, r26
    1ae6:	5b 07       	cpc	r21, r27
    1ae8:	11 f0       	breq	.+4      	; 0x1aee <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    1aea:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1aec:	1a c0       	rjmp	.+52     	; 0x1b22 <__vector_11+0xc4>
				}
				list += 2;
    1aee:	fc 01       	movw	r30, r24
    1af0:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1af2:	45 91       	lpm	r20, Z+
    1af4:	54 91       	lpm	r21, Z
				list += 2;
    1af6:	fc 01       	movw	r30, r24
    1af8:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1afa:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1afc:	87 2f       	mov	r24, r23
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1b02:	8f 3f       	cpi	r24, 0xFF	; 255
    1b04:	91 05       	cpc	r25, r1
    1b06:	19 f0       	breq	.+6      	; 0x1b0e <__vector_11+0xb0>
    1b08:	10 f0       	brcs	.+4      	; 0x1b0e <__vector_11+0xb0>
    1b0a:	8f ef       	ldi	r24, 0xFF	; 255
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	82 17       	cp	r24, r18
    1b10:	08 f4       	brcc	.+2      	; 0x1b14 <__vector_11+0xb6>
    1b12:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1b14:	a8 ee       	ldi	r26, 0xE8	; 232
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1b18:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b1a:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1b1c:	c1 ef       	ldi	r28, 0xF1	; 241
    1b1e:	d0 e0       	ldi	r29, 0x00	; 0
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <__vector_11+0xca>
    1b22:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1b24:	99 f6       	brne	.-90     	; 0x1acc <__vector_11+0x6e>
    1b26:	cb cf       	rjmp	.-106    	; 0x1abe <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1b28:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	95 70       	andi	r25, 0x05	; 5
    1b2e:	e1 f3       	breq	.-8      	; 0x1b28 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    1b30:	82 fd       	sbrc	r24, 2
    1b32:	03 c1       	rjmp	.+518    	; 0x1d3a <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1b34:	32 2f       	mov	r19, r18
    1b36:	21 31       	cpi	r18, 0x11	; 17
    1b38:	08 f0       	brcs	.+2      	; 0x1b3c <__vector_11+0xde>
    1b3a:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    1b3c:	33 23       	and	r19, r19
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <__vector_11+0xe4>
    1b40:	f9 c0       	rjmp	.+498    	; 0x1d34 <__vector_11+0x2d6>
    1b42:	fa 01       	movw	r30, r20
    1b44:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    1b46:	94 91       	lpm	r25, Z
    1b48:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1b4a:	81 50       	subi	r24, 0x01	; 1
    1b4c:	31 96       	adiw	r30, 0x01	; 1
    1b4e:	81 11       	cpse	r24, r1
    1b50:	fa cf       	rjmp	.-12     	; 0x1b46 <__vector_11+0xe8>
    1b52:	8f ef       	ldi	r24, 0xFF	; 255
    1b54:	83 0f       	add	r24, r19
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	48 0f       	add	r20, r24
    1b5c:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1b5e:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b60:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1b62:	21 11       	cpse	r18, r1
    1b64:	e1 cf       	rjmp	.-62     	; 0x1b28 <__vector_11+0xca>
    1b66:	30 31       	cpi	r19, 0x10	; 16
    1b68:	f9 f2       	breq	.-66     	; 0x1b28 <__vector_11+0xca>
    1b6a:	e7 c0       	rjmp	.+462    	; 0x1d3a <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1b6c:	85 30       	cpi	r24, 0x05	; 5
    1b6e:	61 f4       	brne	.+24     	; 0x1b88 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b70:	8e ef       	ldi	r24, 0xFE	; 254
    1b72:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1b76:	e8 ee       	ldi	r30, 0xE8	; 232
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	80 ff       	sbrs	r24, 0
    1b7e:	fd cf       	rjmp	.-6      	; 0x1b7a <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1b80:	20 68       	ori	r18, 0x80	; 128
    1b82:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1b86:	d9 c0       	rjmp	.+434    	; 0x1d3a <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1b88:	89 30       	cpi	r24, 0x09	; 9
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <__vector_11+0x130>
    1b8c:	35 c0       	rjmp	.+106    	; 0x1bf8 <__vector_11+0x19a>
    1b8e:	61 11       	cpse	r22, r1
    1b90:	cd c0       	rjmp	.+410    	; 0x1d2c <__vector_11+0x2ce>
			usb_configuration = wValue;
    1b92:	20 93 89 01 	sts	0x0189, r18
			cdc_line_rtsdtr = 0;
    1b96:	10 92 87 01 	sts	0x0187, r1
			transmit_flush_timer = 0;
    1b9a:	10 92 88 01 	sts	0x0188, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b9e:	8e ef       	ldi	r24, 0xFE	; 254
    1ba0:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1ba6:	21 ea       	ldi	r18, 0xA1	; 161
    1ba8:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1baa:	c9 ee       	ldi	r28, 0xE9	; 233
    1bac:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1bae:	ab ee       	ldi	r26, 0xEB	; 235
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1bb2:	0c ee       	ldi	r16, 0xEC	; 236
    1bb4:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1bb6:	6d ee       	ldi	r22, 0xED	; 237
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1bba:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    1bbc:	a9 01       	movw	r20, r18
    1bbe:	4f 5f       	subi	r20, 0xFF	; 255
    1bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc2:	f9 01       	movw	r30, r18
    1bc4:	94 91       	lpm	r25, Z
				UECONX = en;
    1bc6:	9c 93       	st	X, r25
				if (en) {
    1bc8:	99 23       	and	r25, r25
    1bca:	61 f0       	breq	.+24     	; 0x1be4 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    1bcc:	fa 01       	movw	r30, r20
    1bce:	44 91       	lpm	r20, Z
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    1bd4:	f9 01       	movw	r30, r18
    1bd6:	32 96       	adiw	r30, 0x02	; 2
    1bd8:	94 91       	lpm	r25, Z
    1bda:	2d 5f       	subi	r18, 0xFD	; 253
    1bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bde:	fb 01       	movw	r30, r22
    1be0:	90 83       	st	Z, r25
    1be2:	01 c0       	rjmp	.+2      	; 0x1be6 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1be4:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1be6:	8f 5f       	subi	r24, 0xFF	; 255
    1be8:	85 30       	cpi	r24, 0x05	; 5
    1bea:	39 f7       	brne	.-50     	; 0x1bba <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1bec:	ea ee       	ldi	r30, 0xEA	; 234
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	8e e1       	ldi	r24, 0x1E	; 30
    1bf2:	80 83       	st	Z, r24
        		UERST = 0;
    1bf4:	10 82       	st	Z, r1
			return;
    1bf6:	a1 c0       	rjmp	.+322    	; 0x1d3a <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1bf8:	88 30       	cpi	r24, 0x08	; 8
    1bfa:	81 f4       	brne	.+32     	; 0x1c1c <__vector_11+0x1be>
    1bfc:	60 38       	cpi	r22, 0x80	; 128
    1bfe:	09 f0       	breq	.+2      	; 0x1c02 <__vector_11+0x1a4>
    1c00:	95 c0       	rjmp	.+298    	; 0x1d2c <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c02:	e8 ee       	ldi	r30, 0xE8	; 232
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	80 ff       	sbrs	r24, 0
    1c0a:	fd cf       	rjmp	.-6      	; 0x1c06 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1c0c:	80 91 89 01 	lds	r24, 0x0189
    1c10:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c14:	8e ef       	ldi	r24, 0xFE	; 254
    1c16:	80 93 e8 00 	sts	0x00E8, r24
    1c1a:	8f c0       	rjmp	.+286    	; 0x1d3a <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1c1c:	81 32       	cpi	r24, 0x21	; 33
    1c1e:	b9 f4       	brne	.+46     	; 0x1c4e <__vector_11+0x1f0>
    1c20:	61 3a       	cpi	r22, 0xA1	; 161
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <__vector_11+0x1c8>
    1c24:	83 c0       	rjmp	.+262    	; 0x1d2c <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c26:	e8 ee       	ldi	r30, 0xE8	; 232
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	80 ff       	sbrs	r24, 0
    1c2e:	fd cf       	rjmp	.-6      	; 0x1c2a <__vector_11+0x1cc>
    1c30:	ea e2       	ldi	r30, 0x2A	; 42
    1c32:	f1 e0       	ldi	r31, 0x01	; 1
    1c34:	21 e3       	ldi	r18, 0x31	; 49
    1c36:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1c38:	a1 ef       	ldi	r26, 0xF1	; 241
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	81 91       	ld	r24, Z+
    1c3e:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1c40:	e2 17       	cp	r30, r18
    1c42:	f3 07       	cpc	r31, r19
    1c44:	d9 f7       	brne	.-10     	; 0x1c3c <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c46:	8e ef       	ldi	r24, 0xFE	; 254
    1c48:	80 93 e8 00 	sts	0x00E8, r24
    1c4c:	76 c0       	rjmp	.+236    	; 0x1d3a <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1c4e:	80 32       	cpi	r24, 0x20	; 32
    1c50:	d1 f4       	brne	.+52     	; 0x1c86 <__vector_11+0x228>
    1c52:	61 32       	cpi	r22, 0x21	; 33
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <__vector_11+0x1fa>
    1c56:	6a c0       	rjmp	.+212    	; 0x1d2c <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1c58:	e8 ee       	ldi	r30, 0xE8	; 232
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	82 ff       	sbrs	r24, 2
    1c60:	fd cf       	rjmp	.-6      	; 0x1c5c <__vector_11+0x1fe>
    1c62:	ea e2       	ldi	r30, 0x2A	; 42
    1c64:	f1 e0       	ldi	r31, 0x01	; 1
    1c66:	21 e3       	ldi	r18, 0x31	; 49
    1c68:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1c6a:	a1 ef       	ldi	r26, 0xF1	; 241
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	8c 91       	ld	r24, X
    1c70:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1c72:	e2 17       	cp	r30, r18
    1c74:	f3 07       	cpc	r31, r19
    1c76:	d9 f7       	brne	.-10     	; 0x1c6e <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1c78:	e8 ee       	ldi	r30, 0xE8	; 232
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	8b ef       	ldi	r24, 0xFB	; 251
    1c7e:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c80:	8e ef       	ldi	r24, 0xFE	; 254
    1c82:	80 83       	st	Z, r24
    1c84:	5a c0       	rjmp	.+180    	; 0x1d3a <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1c86:	82 32       	cpi	r24, 0x22	; 34
    1c88:	71 f4       	brne	.+28     	; 0x1ca6 <__vector_11+0x248>
    1c8a:	61 32       	cpi	r22, 0x21	; 33
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <__vector_11+0x232>
    1c8e:	4e c0       	rjmp	.+156    	; 0x1d2c <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    1c90:	20 93 87 01 	sts	0x0187, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c94:	e8 ee       	ldi	r30, 0xE8	; 232
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	80 ff       	sbrs	r24, 0
    1c9c:	fd cf       	rjmp	.-6      	; 0x1c98 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c9e:	8e ef       	ldi	r24, 0xFE	; 254
    1ca0:	80 93 e8 00 	sts	0x00E8, r24
    1ca4:	4a c0       	rjmp	.+148    	; 0x1d3a <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	1a c0       	rjmp	.+52     	; 0x1cde <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1caa:	e8 ee       	ldi	r30, 0xE8	; 232
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	80 ff       	sbrs	r24, 0
    1cb2:	fd cf       	rjmp	.-6      	; 0x1cae <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1cb4:	62 38       	cpi	r22, 0x82	; 130
    1cb6:	51 f4       	brne	.+20     	; 0x1ccc <__vector_11+0x26e>
				UENUM = wIndex;
    1cb8:	e9 ee       	ldi	r30, 0xE9	; 233
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    1cbe:	80 91 eb 00 	lds	r24, 0x00EB
    1cc2:	85 fb       	bst	r24, 5
    1cc4:	88 27       	eor	r24, r24
    1cc6:	80 f9       	bld	r24, 0
				UENUM = 0;
    1cc8:	10 82       	st	Z, r1
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1cce:	e1 ef       	ldi	r30, 0xF1	; 241
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 83       	st	Z, r24
			UEDATX = 0;
    1cd4:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1cd6:	8e ef       	ldi	r24, 0xFE	; 254
    1cd8:	80 93 e8 00 	sts	0x00E8, r24
    1cdc:	2e c0       	rjmp	.+92     	; 0x1d3a <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1cde:	98 2f       	mov	r25, r24
    1ce0:	9d 7f       	andi	r25, 0xFD	; 253
    1ce2:	91 30       	cpi	r25, 0x01	; 1
    1ce4:	19 f5       	brne	.+70     	; 0x1d2c <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    1ce6:	62 30       	cpi	r22, 0x02	; 2
    1ce8:	09 f5       	brne	.+66     	; 0x1d2c <__vector_11+0x2ce>
    1cea:	23 2b       	or	r18, r19
    1cec:	f9 f4       	brne	.+62     	; 0x1d2c <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    1cee:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1cf0:	9f ef       	ldi	r25, 0xFF	; 255
    1cf2:	94 0f       	add	r25, r20
    1cf4:	94 30       	cpi	r25, 0x04	; 4
    1cf6:	d0 f4       	brcc	.+52     	; 0x1d2c <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1cf8:	9e ef       	ldi	r25, 0xFE	; 254
    1cfa:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1cfe:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    1d02:	83 30       	cpi	r24, 0x03	; 3
    1d04:	21 f4       	brne	.+8      	; 0x1d0e <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1d06:	81 e2       	ldi	r24, 0x21	; 33
    1d08:	80 93 eb 00 	sts	0x00EB, r24
    1d0c:	16 c0       	rjmp	.+44     	; 0x1d3a <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1d0e:	89 e1       	ldi	r24, 0x19	; 25
    1d10:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <__vector_11+0x2c0>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	4a 95       	dec	r20
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <__vector_11+0x2bc>
    1d22:	ea ee       	ldi	r30, 0xEA	; 234
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 83       	st	Z, r24
					UERST = 0;
    1d28:	10 82       	st	Z, r1
    1d2a:	07 c0       	rjmp	.+14     	; 0x1d3a <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1d2c:	81 e2       	ldi	r24, 0x21	; 33
    1d2e:	80 93 eb 00 	sts	0x00EB, r24
    1d32:	03 c0       	rjmp	.+6      	; 0x1d3a <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d34:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1d36:	21 11       	cpse	r18, r1
    1d38:	f7 ce       	rjmp	.-530    	; 0x1b28 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1d3a:	ff 91       	pop	r31
    1d3c:	ef 91       	pop	r30
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	bf 91       	pop	r27
    1d44:	af 91       	pop	r26
    1d46:	9f 91       	pop	r25
    1d48:	8f 91       	pop	r24
    1d4a:	7f 91       	pop	r23
    1d4c:	6f 91       	pop	r22
    1d4e:	5f 91       	pop	r21
    1d50:	4f 91       	pop	r20
    1d52:	3f 91       	pop	r19
    1d54:	2f 91       	pop	r18
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	0f 90       	pop	r0
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	0f 90       	pop	r0
    1d60:	1f 90       	pop	r1
    1d62:	18 95       	reti

00001d64 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1d68:	ec eb       	ldi	r30, 0xBC	; 188
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 23       	and	r24, r24
    1d70:	34 f0       	brlt	.+12     	; 0x1d7e <twi_wait+0x1a>
    1d72:	2f 5f       	subi	r18, 0xFF	; 255
    1d74:	3f 4f       	sbci	r19, 0xFF	; 255
    1d76:	29 3e       	cpi	r18, 0xE9	; 233
    1d78:	83 e0       	ldi	r24, 0x03	; 3
    1d7a:	38 07       	cpc	r19, r24
    1d7c:	b9 f7       	brne	.-18     	; 0x1d6c <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	28 3e       	cpi	r18, 0xE8	; 232
    1d82:	33 40       	sbci	r19, 0x03	; 3
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <twi_wait+0x24>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1d88:	08 95       	ret

00001d8a <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1d8a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1d8e:	84 e8       	ldi	r24, 0x84	; 132
    1d90:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1d94:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <twi_wait>
    1d98:	88 23       	and	r24, r24
    1d9a:	19 f0       	breq	.+6      	; 0x1da2 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1d9c:	80 91 b9 00 	lds	r24, 0x00B9
    1da0:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    1da2:	08 95       	ret

00001da4 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1da4:	cf 93       	push	r28
    1da6:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1da8:	94 ea       	ldi	r25, 0xA4	; 164
    1daa:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1dae:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <twi_wait>
    1db2:	88 23       	and	r24, r24
    1db4:	61 f0       	breq	.+24     	; 0x1dce <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1db6:	8c 2f       	mov	r24, r28
    1db8:	88 0f       	add	r24, r24
    1dba:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1dbe:	80 32       	cpi	r24, 0x20	; 32
    1dc0:	29 f4       	brne	.+10     	; 0x1dcc <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1dc2:	84 e9       	ldi	r24, 0x94	; 148
    1dc4:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	01 c0       	rjmp	.+2      	; 0x1dce <start_write+0x2a>
	}	
	return 1;	// success
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
}	
    1dce:	cf 91       	pop	r28
    1dd0:	08 95       	ret

00001dd2 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1dd2:	0e 94 0d 0c 	call	0x181a	; 0x181a <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1dd6:	88 e5       	ldi	r24, 0x58	; 88
    1dd8:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <start_write>
    1ddc:	88 23       	and	r24, r24
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <m_wii_open+0x10>
    1de0:	cd c0       	rjmp	.+410    	; 0x1f7c <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    1de2:	80 e3       	ldi	r24, 0x30	; 48
    1de4:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1de8:	88 23       	and	r24, r24
    1dea:	09 f4       	brne	.+2      	; 0x1dee <m_wii_open+0x1c>
    1dec:	c9 c0       	rjmp	.+402    	; 0x1f80 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1df4:	88 23       	and	r24, r24
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <m_wii_open+0x28>
    1df8:	c5 c0       	rjmp	.+394    	; 0x1f84 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1dfa:	84 e9       	ldi	r24, 0x94	; 148
    1dfc:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e00:	83 ec       	ldi	r24, 0xC3	; 195
    1e02:	99 e0       	ldi	r25, 0x09	; 9
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <m_wii_open+0x32>
    1e08:	00 c0       	rjmp	.+0      	; 0x1e0a <m_wii_open+0x38>
    1e0a:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1e0c:	88 e5       	ldi	r24, 0x58	; 88
    1e0e:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <start_write>
    1e12:	88 23       	and	r24, r24
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <m_wii_open+0x46>
    1e16:	b8 c0       	rjmp	.+368    	; 0x1f88 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1e1e:	88 23       	and	r24, r24
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <m_wii_open+0x52>
    1e22:	b4 c0       	rjmp	.+360    	; 0x1f8c <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1e2a:	88 23       	and	r24, r24
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <m_wii_open+0x5e>
    1e2e:	b0 c0       	rjmp	.+352    	; 0x1f90 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1e36:	88 23       	and	r24, r24
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <m_wii_open+0x6a>
    1e3a:	ac c0       	rjmp	.+344    	; 0x1f94 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1e42:	88 23       	and	r24, r24
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <m_wii_open+0x76>
    1e46:	a8 c0       	rjmp	.+336    	; 0x1f98 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1e4e:	88 23       	and	r24, r24
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <m_wii_open+0x82>
    1e52:	a4 c0       	rjmp	.+328    	; 0x1f9c <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1e5a:	88 23       	and	r24, r24
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <m_wii_open+0x8e>
    1e5e:	a0 c0       	rjmp	.+320    	; 0x1fa0 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1e66:	88 23       	and	r24, r24
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <m_wii_open+0x9a>
    1e6a:	9c c0       	rjmp	.+312    	; 0x1fa4 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    1e6c:	80 e9       	ldi	r24, 0x90	; 144
    1e6e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1e72:	88 23       	and	r24, r24
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <m_wii_open+0xa6>
    1e76:	98 c0       	rjmp	.+304    	; 0x1fa8 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1e78:	84 e9       	ldi	r24, 0x94	; 148
    1e7a:	80 93 bc 00 	sts	0x00BC, r24
    1e7e:	83 ec       	ldi	r24, 0xC3	; 195
    1e80:	99 e0       	ldi	r25, 0x09	; 9
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <m_wii_open+0xb0>
    1e86:	00 c0       	rjmp	.+0      	; 0x1e88 <m_wii_open+0xb6>
    1e88:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1e8a:	88 e5       	ldi	r24, 0x58	; 88
    1e8c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <start_write>
    1e90:	88 23       	and	r24, r24
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <m_wii_open+0xc4>
    1e94:	8b c0       	rjmp	.+278    	; 0x1fac <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    1e96:	87 e0       	ldi	r24, 0x07	; 7
    1e98:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1e9c:	88 23       	and	r24, r24
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <m_wii_open+0xd0>
    1ea0:	87 c0       	rjmp	.+270    	; 0x1fb0 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1ea8:	88 23       	and	r24, r24
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <m_wii_open+0xdc>
    1eac:	83 c0       	rjmp	.+262    	; 0x1fb4 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    1eae:	81 e4       	ldi	r24, 0x41	; 65
    1eb0:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1eb4:	88 23       	and	r24, r24
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <m_wii_open+0xe8>
    1eb8:	7f c0       	rjmp	.+254    	; 0x1fb8 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1eba:	84 e9       	ldi	r24, 0x94	; 148
    1ebc:	80 93 bc 00 	sts	0x00BC, r24
    1ec0:	83 ec       	ldi	r24, 0xC3	; 195
    1ec2:	99 e0       	ldi	r25, 0x09	; 9
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <m_wii_open+0xf2>
    1ec8:	00 c0       	rjmp	.+0      	; 0x1eca <m_wii_open+0xf8>
    1eca:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1ecc:	88 e5       	ldi	r24, 0x58	; 88
    1ece:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <start_write>
    1ed2:	88 23       	and	r24, r24
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <m_wii_open+0x106>
    1ed6:	72 c0       	rjmp	.+228    	; 0x1fbc <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    1ed8:	8a e1       	ldi	r24, 0x1A	; 26
    1eda:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1ede:	88 23       	and	r24, r24
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <m_wii_open+0x112>
    1ee2:	6e c0       	rjmp	.+220    	; 0x1fc0 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    1ee4:	80 e4       	ldi	r24, 0x40	; 64
    1ee6:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1eea:	88 23       	and	r24, r24
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <m_wii_open+0x11e>
    1eee:	6a c0       	rjmp	.+212    	; 0x1fc4 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1ef6:	88 23       	and	r24, r24
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <m_wii_open+0x12a>
    1efa:	66 c0       	rjmp	.+204    	; 0x1fc8 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1efc:	84 e9       	ldi	r24, 0x94	; 148
    1efe:	80 93 bc 00 	sts	0x00BC, r24
    1f02:	83 ec       	ldi	r24, 0xC3	; 195
    1f04:	99 e0       	ldi	r25, 0x09	; 9
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <m_wii_open+0x134>
    1f0a:	00 c0       	rjmp	.+0      	; 0x1f0c <m_wii_open+0x13a>
    1f0c:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1f0e:	88 e5       	ldi	r24, 0x58	; 88
    1f10:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <start_write>
    1f14:	88 23       	and	r24, r24
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <m_wii_open+0x148>
    1f18:	59 c0       	rjmp	.+178    	; 0x1fcc <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    1f1a:	83 e3       	ldi	r24, 0x33	; 51
    1f1c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1f20:	88 23       	and	r24, r24
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <m_wii_open+0x154>
    1f24:	55 c0       	rjmp	.+170    	; 0x1fd0 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    1f26:	83 e0       	ldi	r24, 0x03	; 3
    1f28:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1f2c:	88 23       	and	r24, r24
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <m_wii_open+0x160>
    1f30:	51 c0       	rjmp	.+162    	; 0x1fd4 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1f32:	84 e9       	ldi	r24, 0x94	; 148
    1f34:	80 93 bc 00 	sts	0x00BC, r24
    1f38:	83 ec       	ldi	r24, 0xC3	; 195
    1f3a:	99 e0       	ldi	r25, 0x09	; 9
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <m_wii_open+0x16a>
    1f40:	00 c0       	rjmp	.+0      	; 0x1f42 <m_wii_open+0x170>
    1f42:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1f44:	88 e5       	ldi	r24, 0x58	; 88
    1f46:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <start_write>
    1f4a:	88 23       	and	r24, r24
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <m_wii_open+0x17e>
    1f4e:	44 c0       	rjmp	.+136    	; 0x1fd8 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    1f50:	80 e3       	ldi	r24, 0x30	; 48
    1f52:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1f56:	88 23       	and	r24, r24
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <m_wii_open+0x18a>
    1f5a:	40 c0       	rjmp	.+128    	; 0x1fdc <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    1f5c:	88 e0       	ldi	r24, 0x08	; 8
    1f5e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    1f62:	88 23       	and	r24, r24
    1f64:	e9 f1       	breq	.+122    	; 0x1fe0 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1f66:	84 e9       	ldi	r24, 0x94	; 148
    1f68:	80 93 bc 00 	sts	0x00BC, r24
    1f6c:	83 ec       	ldi	r24, 0xC3	; 195
    1f6e:	99 e0       	ldi	r25, 0x09	; 9
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <m_wii_open+0x19e>
    1f74:	00 c0       	rjmp	.+0      	; 0x1f76 <m_wii_open+0x1a4>
    1f76:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1fe2:	08 95       	ret

00001fe4 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1fe4:	cf 93       	push	r28
    1fe6:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1fe8:	84 ea       	ldi	r24, 0xA4	; 164
    1fea:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    1fee:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <twi_wait>
    1ff2:	88 23       	and	r24, r24
    1ff4:	69 f0       	breq	.+26     	; 0x2010 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1ff6:	8c 2f       	mov	r24, r28
    1ff8:	88 0f       	add	r24, r24
    1ffa:	8f 5f       	subi	r24, 0xFF	; 255
    1ffc:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2000:	88 34       	cpi	r24, 0x48	; 72
    2002:	29 f4       	brne	.+10     	; 0x200e <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2004:	84 e9       	ldi	r24, 0x94	; 148
    2006:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <start_read+0x2c>
	}	
	return 1;	// success
    200e:	81 e0       	ldi	r24, 0x01	; 1
}	
    2010:	cf 91       	pop	r28
    2012:	08 95       	ret

00002014 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	60 97       	sbiw	r28, 0x10	; 16
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    202e:	fe 01       	movw	r30, r28
    2030:	31 96       	adiw	r30, 0x01	; 1
    2032:	80 e1       	ldi	r24, 0x10	; 16
    2034:	df 01       	movw	r26, r30
    2036:	1d 92       	st	X+, r1
    2038:	8a 95       	dec	r24
    203a:	e9 f7       	brne	.-6      	; 0x2036 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    203c:	88 e5       	ldi	r24, 0x58	; 88
    203e:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <start_write>
    2042:	88 23       	and	r24, r24
    2044:	09 f4       	brne	.+2      	; 0x2048 <m_wii_read+0x34>
    2046:	69 c0       	rjmp	.+210    	; 0x211a <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    2048:	86 e3       	ldi	r24, 0x36	; 54
    204a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <send_byte>
    204e:	88 23       	and	r24, r24
    2050:	09 f4       	brne	.+2      	; 0x2054 <m_wii_read+0x40>
    2052:	65 c0       	rjmp	.+202    	; 0x211e <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2054:	84 e9       	ldi	r24, 0x94	; 148
    2056:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    205a:	b8 e0       	ldi	r27, 0x08	; 8
    205c:	ba 95       	dec	r27
    205e:	f1 f7       	brne	.-4      	; 0x205c <m_wii_read+0x48>
    2060:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2062:	88 e5       	ldi	r24, 0x58	; 88
    2064:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <start_read>
    2068:	88 23       	and	r24, r24
    206a:	09 f4       	brne	.+2      	; 0x206e <m_wii_read+0x5a>
    206c:	5a c0       	rjmp	.+180    	; 0x2122 <m_wii_read+0x10e>
    206e:	be 01       	movw	r22, r28
    2070:	6f 5f       	subi	r22, 0xFF	; 255
    2072:	7f 4f       	sbci	r23, 0xFF	; 255
    2074:	ae 01       	movw	r20, r28
    2076:	40 5f       	subi	r20, 0xF0	; 240
    2078:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    207a:	ec eb       	ldi	r30, 0xBC	; 188
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    2080:	2b eb       	ldi	r18, 0xBB	; 187
    2082:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2084:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2086:	90 81       	ld	r25, Z
    2088:	99 23       	and	r25, r25
    208a:	ec f7       	brge	.-6      	; 0x2086 <m_wii_read+0x72>
		temp[i] = TWDR;
    208c:	d9 01       	movw	r26, r18
    208e:	9c 91       	ld	r25, X
    2090:	db 01       	movw	r26, r22
    2092:	9d 93       	st	X+, r25
    2094:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2096:	a4 17       	cp	r26, r20
    2098:	b5 07       	cpc	r27, r21
    209a:	a1 f7       	brne	.-24     	; 0x2084 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    209c:	84 e8       	ldi	r24, 0x84	; 132
    209e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    20a2:	ec eb       	ldi	r30, 0xBC	; 188
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	88 23       	and	r24, r24
    20aa:	ec f7       	brge	.-6      	; 0x20a6 <m_wii_read+0x92>
	temp[15] = TWDR;
    20ac:	80 91 bb 00 	lds	r24, 0x00BB
    20b0:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    20b2:	84 e9       	ldi	r24, 0x94	; 148
    20b4:	80 93 bc 00 	sts	0x00BC, r24
    20b8:	be 01       	movw	r22, r28
    20ba:	6c 5f       	subi	r22, 0xFC	; 252
    20bc:	7f 4f       	sbci	r23, 0xFF	; 255
    20be:	f8 01       	movw	r30, r16
    20c0:	08 5e       	subi	r16, 0xE8	; 232
    20c2:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    20c4:	db 01       	movw	r26, r22
    20c6:	2c 91       	ld	r18, X
    20c8:	32 2f       	mov	r19, r18
    20ca:	30 73       	andi	r19, 0x30	; 48
    20cc:	cb 01       	movw	r24, r22
    20ce:	02 97       	sbiw	r24, 0x02	; 2
    20d0:	dc 01       	movw	r26, r24
    20d2:	8c 91       	ld	r24, X
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	b0 e1       	ldi	r27, 0x10	; 16
    20d8:	3b 9f       	mul	r19, r27
    20da:	80 0d       	add	r24, r0
    20dc:	91 1d       	adc	r25, r1
    20de:	11 24       	eor	r1, r1
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    20e4:	42 2f       	mov	r20, r18
    20e6:	40 7c       	andi	r20, 0xC0	; 192
    20e8:	50 e0       	ldi	r21, 0x00	; 0
    20ea:	44 0f       	add	r20, r20
    20ec:	55 1f       	adc	r21, r21
    20ee:	44 0f       	add	r20, r20
    20f0:	55 1f       	adc	r21, r21
    20f2:	cb 01       	movw	r24, r22
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	dc 01       	movw	r26, r24
    20f8:	8c 91       	ld	r24, X
    20fa:	48 0f       	add	r20, r24
    20fc:	51 1d       	adc	r21, r1
    20fe:	53 83       	std	Z+3, r21	; 0x03
    2100:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2102:	2f 70       	andi	r18, 0x0F	; 15
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	35 83       	std	Z+5, r19	; 0x05
    2108:	24 83       	std	Z+4, r18	; 0x04
    210a:	6d 5f       	subi	r22, 0xFD	; 253
    210c:	7f 4f       	sbci	r23, 0xFF	; 255
    210e:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2110:	e0 17       	cp	r30, r16
    2112:	f1 07       	cpc	r31, r17
    2114:	b9 f6       	brne	.-82     	; 0x20c4 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	05 c0       	rjmp	.+10     	; 0x2124 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	03 c0       	rjmp	.+6      	; 0x2124 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2122:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2124:	60 96       	adiw	r28, 0x10	; 16
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	08 95       	ret

0000213a <__subsf3>:
    213a:	50 58       	subi	r21, 0x80	; 128

0000213c <__addsf3>:
    213c:	bb 27       	eor	r27, r27
    213e:	aa 27       	eor	r26, r26
    2140:	0e 94 b5 10 	call	0x216a	; 0x216a <__addsf3x>
    2144:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__fp_round>
    2148:	0e 94 b8 12 	call	0x2570	; 0x2570 <__fp_pscA>
    214c:	38 f0       	brcs	.+14     	; 0x215c <__addsf3+0x20>
    214e:	0e 94 bf 12 	call	0x257e	; 0x257e <__fp_pscB>
    2152:	20 f0       	brcs	.+8      	; 0x215c <__addsf3+0x20>
    2154:	39 f4       	brne	.+14     	; 0x2164 <__addsf3+0x28>
    2156:	9f 3f       	cpi	r25, 0xFF	; 255
    2158:	19 f4       	brne	.+6      	; 0x2160 <__addsf3+0x24>
    215a:	26 f4       	brtc	.+8      	; 0x2164 <__addsf3+0x28>
    215c:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__fp_nan>
    2160:	0e f4       	brtc	.+2      	; 0x2164 <__addsf3+0x28>
    2162:	e0 95       	com	r30
    2164:	e7 fb       	bst	r30, 7
    2166:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__fp_inf>

0000216a <__addsf3x>:
    216a:	e9 2f       	mov	r30, r25
    216c:	0e 94 16 13 	call	0x262c	; 0x262c <__fp_split3>
    2170:	58 f3       	brcs	.-42     	; 0x2148 <__addsf3+0xc>
    2172:	ba 17       	cp	r27, r26
    2174:	62 07       	cpc	r22, r18
    2176:	73 07       	cpc	r23, r19
    2178:	84 07       	cpc	r24, r20
    217a:	95 07       	cpc	r25, r21
    217c:	20 f0       	brcs	.+8      	; 0x2186 <__addsf3x+0x1c>
    217e:	79 f4       	brne	.+30     	; 0x219e <__addsf3x+0x34>
    2180:	a6 f5       	brtc	.+104    	; 0x21ea <__addsf3x+0x80>
    2182:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__fp_zero>
    2186:	0e f4       	brtc	.+2      	; 0x218a <__addsf3x+0x20>
    2188:	e0 95       	com	r30
    218a:	0b 2e       	mov	r0, r27
    218c:	ba 2f       	mov	r27, r26
    218e:	a0 2d       	mov	r26, r0
    2190:	0b 01       	movw	r0, r22
    2192:	b9 01       	movw	r22, r18
    2194:	90 01       	movw	r18, r0
    2196:	0c 01       	movw	r0, r24
    2198:	ca 01       	movw	r24, r20
    219a:	a0 01       	movw	r20, r0
    219c:	11 24       	eor	r1, r1
    219e:	ff 27       	eor	r31, r31
    21a0:	59 1b       	sub	r21, r25
    21a2:	99 f0       	breq	.+38     	; 0x21ca <__addsf3x+0x60>
    21a4:	59 3f       	cpi	r21, 0xF9	; 249
    21a6:	50 f4       	brcc	.+20     	; 0x21bc <__addsf3x+0x52>
    21a8:	50 3e       	cpi	r21, 0xE0	; 224
    21aa:	68 f1       	brcs	.+90     	; 0x2206 <__addsf3x+0x9c>
    21ac:	1a 16       	cp	r1, r26
    21ae:	f0 40       	sbci	r31, 0x00	; 0
    21b0:	a2 2f       	mov	r26, r18
    21b2:	23 2f       	mov	r18, r19
    21b4:	34 2f       	mov	r19, r20
    21b6:	44 27       	eor	r20, r20
    21b8:	58 5f       	subi	r21, 0xF8	; 248
    21ba:	f3 cf       	rjmp	.-26     	; 0x21a2 <__addsf3x+0x38>
    21bc:	46 95       	lsr	r20
    21be:	37 95       	ror	r19
    21c0:	27 95       	ror	r18
    21c2:	a7 95       	ror	r26
    21c4:	f0 40       	sbci	r31, 0x00	; 0
    21c6:	53 95       	inc	r21
    21c8:	c9 f7       	brne	.-14     	; 0x21bc <__addsf3x+0x52>
    21ca:	7e f4       	brtc	.+30     	; 0x21ea <__addsf3x+0x80>
    21cc:	1f 16       	cp	r1, r31
    21ce:	ba 0b       	sbc	r27, r26
    21d0:	62 0b       	sbc	r22, r18
    21d2:	73 0b       	sbc	r23, r19
    21d4:	84 0b       	sbc	r24, r20
    21d6:	ba f0       	brmi	.+46     	; 0x2206 <__addsf3x+0x9c>
    21d8:	91 50       	subi	r25, 0x01	; 1
    21da:	a1 f0       	breq	.+40     	; 0x2204 <__addsf3x+0x9a>
    21dc:	ff 0f       	add	r31, r31
    21de:	bb 1f       	adc	r27, r27
    21e0:	66 1f       	adc	r22, r22
    21e2:	77 1f       	adc	r23, r23
    21e4:	88 1f       	adc	r24, r24
    21e6:	c2 f7       	brpl	.-16     	; 0x21d8 <__addsf3x+0x6e>
    21e8:	0e c0       	rjmp	.+28     	; 0x2206 <__addsf3x+0x9c>
    21ea:	ba 0f       	add	r27, r26
    21ec:	62 1f       	adc	r22, r18
    21ee:	73 1f       	adc	r23, r19
    21f0:	84 1f       	adc	r24, r20
    21f2:	48 f4       	brcc	.+18     	; 0x2206 <__addsf3x+0x9c>
    21f4:	87 95       	ror	r24
    21f6:	77 95       	ror	r23
    21f8:	67 95       	ror	r22
    21fa:	b7 95       	ror	r27
    21fc:	f7 95       	ror	r31
    21fe:	9e 3f       	cpi	r25, 0xFE	; 254
    2200:	08 f0       	brcs	.+2      	; 0x2204 <__addsf3x+0x9a>
    2202:	b0 cf       	rjmp	.-160    	; 0x2164 <__addsf3+0x28>
    2204:	93 95       	inc	r25
    2206:	88 0f       	add	r24, r24
    2208:	08 f0       	brcs	.+2      	; 0x220c <__addsf3x+0xa2>
    220a:	99 27       	eor	r25, r25
    220c:	ee 0f       	add	r30, r30
    220e:	97 95       	ror	r25
    2210:	87 95       	ror	r24
    2212:	08 95       	ret
    2214:	0e 94 b8 12 	call	0x2570	; 0x2570 <__fp_pscA>
    2218:	60 f0       	brcs	.+24     	; 0x2232 <__addsf3x+0xc8>
    221a:	80 e8       	ldi	r24, 0x80	; 128
    221c:	91 e0       	ldi	r25, 0x01	; 1
    221e:	09 f4       	brne	.+2      	; 0x2222 <__addsf3x+0xb8>
    2220:	9e ef       	ldi	r25, 0xFE	; 254
    2222:	0e 94 bf 12 	call	0x257e	; 0x257e <__fp_pscB>
    2226:	28 f0       	brcs	.+10     	; 0x2232 <__addsf3x+0xc8>
    2228:	40 e8       	ldi	r20, 0x80	; 128
    222a:	51 e0       	ldi	r21, 0x01	; 1
    222c:	71 f4       	brne	.+28     	; 0x224a <atan2+0x10>
    222e:	5e ef       	ldi	r21, 0xFE	; 254
    2230:	0c c0       	rjmp	.+24     	; 0x224a <atan2+0x10>
    2232:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__fp_nan>
    2236:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__fp_zero>

0000223a <atan2>:
    223a:	e9 2f       	mov	r30, r25
    223c:	e0 78       	andi	r30, 0x80	; 128
    223e:	0e 94 16 13 	call	0x262c	; 0x262c <__fp_split3>
    2242:	40 f3       	brcs	.-48     	; 0x2214 <__addsf3x+0xaa>
    2244:	09 2e       	mov	r0, r25
    2246:	05 2a       	or	r0, r21
    2248:	b1 f3       	breq	.-20     	; 0x2236 <__addsf3x+0xcc>
    224a:	26 17       	cp	r18, r22
    224c:	37 07       	cpc	r19, r23
    224e:	48 07       	cpc	r20, r24
    2250:	59 07       	cpc	r21, r25
    2252:	38 f0       	brcs	.+14     	; 0x2262 <atan2+0x28>
    2254:	0e 2e       	mov	r0, r30
    2256:	07 f8       	bld	r0, 7
    2258:	e0 25       	eor	r30, r0
    225a:	69 f0       	breq	.+26     	; 0x2276 <atan2+0x3c>
    225c:	e0 25       	eor	r30, r0
    225e:	e0 64       	ori	r30, 0x40	; 64
    2260:	0a c0       	rjmp	.+20     	; 0x2276 <atan2+0x3c>
    2262:	ef 63       	ori	r30, 0x3F	; 63
    2264:	07 f8       	bld	r0, 7
    2266:	00 94       	com	r0
    2268:	07 fa       	bst	r0, 7
    226a:	db 01       	movw	r26, r22
    226c:	b9 01       	movw	r22, r18
    226e:	9d 01       	movw	r18, r26
    2270:	dc 01       	movw	r26, r24
    2272:	ca 01       	movw	r24, r20
    2274:	ad 01       	movw	r20, r26
    2276:	ef 93       	push	r30
    2278:	0e 94 9d 11 	call	0x233a	; 0x233a <__divsf3_pse>
    227c:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__fp_round>
    2280:	0e 94 4d 11 	call	0x229a	; 0x229a <atan>
    2284:	5f 91       	pop	r21
    2286:	55 23       	and	r21, r21
    2288:	39 f0       	breq	.+14     	; 0x2298 <atan2+0x5e>
    228a:	2b ed       	ldi	r18, 0xDB	; 219
    228c:	3f e0       	ldi	r19, 0x0F	; 15
    228e:	49 e4       	ldi	r20, 0x49	; 73
    2290:	50 fd       	sbrc	r21, 0
    2292:	49 ec       	ldi	r20, 0xC9	; 201
    2294:	0c 94 9e 10 	jmp	0x213c	; 0x213c <__addsf3>
    2298:	08 95       	ret

0000229a <atan>:
    229a:	df 93       	push	r29
    229c:	dd 27       	eor	r29, r29
    229e:	b9 2f       	mov	r27, r25
    22a0:	bf 77       	andi	r27, 0x7F	; 127
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	16 16       	cp	r1, r22
    22a8:	17 06       	cpc	r1, r23
    22aa:	48 07       	cpc	r20, r24
    22ac:	5b 07       	cpc	r21, r27
    22ae:	18 f4       	brcc	.+6      	; 0x22b6 <atan+0x1c>
    22b0:	d9 2f       	mov	r29, r25
    22b2:	0e 94 44 13 	call	0x2688	; 0x2688 <inverse>
    22b6:	9f 93       	push	r25
    22b8:	8f 93       	push	r24
    22ba:	7f 93       	push	r23
    22bc:	6f 93       	push	r22
    22be:	0e 94 07 14 	call	0x280e	; 0x280e <square>
    22c2:	ec ea       	ldi	r30, 0xAC	; 172
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	0e 94 91 12 	call	0x2522	; 0x2522 <__fp_powser>
    22ca:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__fp_round>
    22ce:	2f 91       	pop	r18
    22d0:	3f 91       	pop	r19
    22d2:	4f 91       	pop	r20
    22d4:	5f 91       	pop	r21
    22d6:	0e 94 5f 13 	call	0x26be	; 0x26be <__mulsf3x>
    22da:	dd 23       	and	r29, r29
    22dc:	51 f0       	breq	.+20     	; 0x22f2 <atan+0x58>
    22de:	90 58       	subi	r25, 0x80	; 128
    22e0:	a2 ea       	ldi	r26, 0xA2	; 162
    22e2:	2a ed       	ldi	r18, 0xDA	; 218
    22e4:	3f e0       	ldi	r19, 0x0F	; 15
    22e6:	49 ec       	ldi	r20, 0xC9	; 201
    22e8:	5f e3       	ldi	r21, 0x3F	; 63
    22ea:	d0 78       	andi	r29, 0x80	; 128
    22ec:	5d 27       	eor	r21, r29
    22ee:	0e 94 b5 10 	call	0x216a	; 0x216a <__addsf3x>
    22f2:	df 91       	pop	r29
    22f4:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__fp_round>

000022f8 <__cmpsf2>:
    22f8:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__fp_cmp>
    22fc:	08 f4       	brcc	.+2      	; 0x2300 <__cmpsf2+0x8>
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	08 95       	ret

00002302 <cos>:
    2302:	0e 94 c8 12 	call	0x2590	; 0x2590 <__fp_rempio2>
    2306:	e3 95       	inc	r30
    2308:	0c 94 02 13 	jmp	0x2604	; 0x2604 <__fp_sinus>

0000230c <__divsf3>:
    230c:	0e 94 9a 11 	call	0x2334	; 0x2334 <__divsf3x>
    2310:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__fp_round>
    2314:	0e 94 bf 12 	call	0x257e	; 0x257e <__fp_pscB>
    2318:	58 f0       	brcs	.+22     	; 0x2330 <__divsf3+0x24>
    231a:	0e 94 b8 12 	call	0x2570	; 0x2570 <__fp_pscA>
    231e:	40 f0       	brcs	.+16     	; 0x2330 <__divsf3+0x24>
    2320:	29 f4       	brne	.+10     	; 0x232c <__divsf3+0x20>
    2322:	5f 3f       	cpi	r21, 0xFF	; 255
    2324:	29 f0       	breq	.+10     	; 0x2330 <__divsf3+0x24>
    2326:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__fp_inf>
    232a:	51 11       	cpse	r21, r1
    232c:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__fp_szero>
    2330:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__fp_nan>

00002334 <__divsf3x>:
    2334:	0e 94 16 13 	call	0x262c	; 0x262c <__fp_split3>
    2338:	68 f3       	brcs	.-38     	; 0x2314 <__divsf3+0x8>

0000233a <__divsf3_pse>:
    233a:	99 23       	and	r25, r25
    233c:	b1 f3       	breq	.-20     	; 0x232a <__divsf3+0x1e>
    233e:	55 23       	and	r21, r21
    2340:	91 f3       	breq	.-28     	; 0x2326 <__divsf3+0x1a>
    2342:	95 1b       	sub	r25, r21
    2344:	55 0b       	sbc	r21, r21
    2346:	bb 27       	eor	r27, r27
    2348:	aa 27       	eor	r26, r26
    234a:	62 17       	cp	r22, r18
    234c:	73 07       	cpc	r23, r19
    234e:	84 07       	cpc	r24, r20
    2350:	38 f0       	brcs	.+14     	; 0x2360 <__divsf3_pse+0x26>
    2352:	9f 5f       	subi	r25, 0xFF	; 255
    2354:	5f 4f       	sbci	r21, 0xFF	; 255
    2356:	22 0f       	add	r18, r18
    2358:	33 1f       	adc	r19, r19
    235a:	44 1f       	adc	r20, r20
    235c:	aa 1f       	adc	r26, r26
    235e:	a9 f3       	breq	.-22     	; 0x234a <__divsf3_pse+0x10>
    2360:	35 d0       	rcall	.+106    	; 0x23cc <__divsf3_pse+0x92>
    2362:	0e 2e       	mov	r0, r30
    2364:	3a f0       	brmi	.+14     	; 0x2374 <__divsf3_pse+0x3a>
    2366:	e0 e8       	ldi	r30, 0x80	; 128
    2368:	32 d0       	rcall	.+100    	; 0x23ce <__divsf3_pse+0x94>
    236a:	91 50       	subi	r25, 0x01	; 1
    236c:	50 40       	sbci	r21, 0x00	; 0
    236e:	e6 95       	lsr	r30
    2370:	00 1c       	adc	r0, r0
    2372:	ca f7       	brpl	.-14     	; 0x2366 <__divsf3_pse+0x2c>
    2374:	2b d0       	rcall	.+86     	; 0x23cc <__divsf3_pse+0x92>
    2376:	fe 2f       	mov	r31, r30
    2378:	29 d0       	rcall	.+82     	; 0x23cc <__divsf3_pse+0x92>
    237a:	66 0f       	add	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	88 1f       	adc	r24, r24
    2380:	bb 1f       	adc	r27, r27
    2382:	26 17       	cp	r18, r22
    2384:	37 07       	cpc	r19, r23
    2386:	48 07       	cpc	r20, r24
    2388:	ab 07       	cpc	r26, r27
    238a:	b0 e8       	ldi	r27, 0x80	; 128
    238c:	09 f0       	breq	.+2      	; 0x2390 <__divsf3_pse+0x56>
    238e:	bb 0b       	sbc	r27, r27
    2390:	80 2d       	mov	r24, r0
    2392:	bf 01       	movw	r22, r30
    2394:	ff 27       	eor	r31, r31
    2396:	93 58       	subi	r25, 0x83	; 131
    2398:	5f 4f       	sbci	r21, 0xFF	; 255
    239a:	3a f0       	brmi	.+14     	; 0x23aa <__divsf3_pse+0x70>
    239c:	9e 3f       	cpi	r25, 0xFE	; 254
    239e:	51 05       	cpc	r21, r1
    23a0:	78 f0       	brcs	.+30     	; 0x23c0 <__divsf3_pse+0x86>
    23a2:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__fp_inf>
    23a6:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__fp_szero>
    23aa:	5f 3f       	cpi	r21, 0xFF	; 255
    23ac:	e4 f3       	brlt	.-8      	; 0x23a6 <__divsf3_pse+0x6c>
    23ae:	98 3e       	cpi	r25, 0xE8	; 232
    23b0:	d4 f3       	brlt	.-12     	; 0x23a6 <__divsf3_pse+0x6c>
    23b2:	86 95       	lsr	r24
    23b4:	77 95       	ror	r23
    23b6:	67 95       	ror	r22
    23b8:	b7 95       	ror	r27
    23ba:	f7 95       	ror	r31
    23bc:	9f 5f       	subi	r25, 0xFF	; 255
    23be:	c9 f7       	brne	.-14     	; 0x23b2 <__divsf3_pse+0x78>
    23c0:	88 0f       	add	r24, r24
    23c2:	91 1d       	adc	r25, r1
    23c4:	96 95       	lsr	r25
    23c6:	87 95       	ror	r24
    23c8:	97 f9       	bld	r25, 7
    23ca:	08 95       	ret
    23cc:	e1 e0       	ldi	r30, 0x01	; 1
    23ce:	66 0f       	add	r22, r22
    23d0:	77 1f       	adc	r23, r23
    23d2:	88 1f       	adc	r24, r24
    23d4:	bb 1f       	adc	r27, r27
    23d6:	62 17       	cp	r22, r18
    23d8:	73 07       	cpc	r23, r19
    23da:	84 07       	cpc	r24, r20
    23dc:	ba 07       	cpc	r27, r26
    23de:	20 f0       	brcs	.+8      	; 0x23e8 <__divsf3_pse+0xae>
    23e0:	62 1b       	sub	r22, r18
    23e2:	73 0b       	sbc	r23, r19
    23e4:	84 0b       	sbc	r24, r20
    23e6:	ba 0b       	sbc	r27, r26
    23e8:	ee 1f       	adc	r30, r30
    23ea:	88 f7       	brcc	.-30     	; 0x23ce <__divsf3_pse+0x94>
    23ec:	e0 95       	com	r30
    23ee:	08 95       	ret

000023f0 <__fixunssfsi>:
    23f0:	0e 94 1e 13 	call	0x263c	; 0x263c <__fp_splitA>
    23f4:	88 f0       	brcs	.+34     	; 0x2418 <__fixunssfsi+0x28>
    23f6:	9f 57       	subi	r25, 0x7F	; 127
    23f8:	98 f0       	brcs	.+38     	; 0x2420 <__fixunssfsi+0x30>
    23fa:	b9 2f       	mov	r27, r25
    23fc:	99 27       	eor	r25, r25
    23fe:	b7 51       	subi	r27, 0x17	; 23
    2400:	b0 f0       	brcs	.+44     	; 0x242e <__fixunssfsi+0x3e>
    2402:	e1 f0       	breq	.+56     	; 0x243c <__fixunssfsi+0x4c>
    2404:	66 0f       	add	r22, r22
    2406:	77 1f       	adc	r23, r23
    2408:	88 1f       	adc	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	1a f0       	brmi	.+6      	; 0x2414 <__fixunssfsi+0x24>
    240e:	ba 95       	dec	r27
    2410:	c9 f7       	brne	.-14     	; 0x2404 <__fixunssfsi+0x14>
    2412:	14 c0       	rjmp	.+40     	; 0x243c <__fixunssfsi+0x4c>
    2414:	b1 30       	cpi	r27, 0x01	; 1
    2416:	91 f0       	breq	.+36     	; 0x243c <__fixunssfsi+0x4c>
    2418:	0e 94 38 13 	call	0x2670	; 0x2670 <__fp_zero>
    241c:	b1 e0       	ldi	r27, 0x01	; 1
    241e:	08 95       	ret
    2420:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__fp_zero>
    2424:	67 2f       	mov	r22, r23
    2426:	78 2f       	mov	r23, r24
    2428:	88 27       	eor	r24, r24
    242a:	b8 5f       	subi	r27, 0xF8	; 248
    242c:	39 f0       	breq	.+14     	; 0x243c <__fixunssfsi+0x4c>
    242e:	b9 3f       	cpi	r27, 0xF9	; 249
    2430:	cc f3       	brlt	.-14     	; 0x2424 <__fixunssfsi+0x34>
    2432:	86 95       	lsr	r24
    2434:	77 95       	ror	r23
    2436:	67 95       	ror	r22
    2438:	b3 95       	inc	r27
    243a:	d9 f7       	brne	.-10     	; 0x2432 <__fixunssfsi+0x42>
    243c:	3e f4       	brtc	.+14     	; 0x244c <__fixunssfsi+0x5c>
    243e:	90 95       	com	r25
    2440:	80 95       	com	r24
    2442:	70 95       	com	r23
    2444:	61 95       	neg	r22
    2446:	7f 4f       	sbci	r23, 0xFF	; 255
    2448:	8f 4f       	sbci	r24, 0xFF	; 255
    244a:	9f 4f       	sbci	r25, 0xFF	; 255
    244c:	08 95       	ret

0000244e <__floatunsisf>:
    244e:	e8 94       	clt
    2450:	09 c0       	rjmp	.+18     	; 0x2464 <__floatsisf+0x12>

00002452 <__floatsisf>:
    2452:	97 fb       	bst	r25, 7
    2454:	3e f4       	brtc	.+14     	; 0x2464 <__floatsisf+0x12>
    2456:	90 95       	com	r25
    2458:	80 95       	com	r24
    245a:	70 95       	com	r23
    245c:	61 95       	neg	r22
    245e:	7f 4f       	sbci	r23, 0xFF	; 255
    2460:	8f 4f       	sbci	r24, 0xFF	; 255
    2462:	9f 4f       	sbci	r25, 0xFF	; 255
    2464:	99 23       	and	r25, r25
    2466:	a9 f0       	breq	.+42     	; 0x2492 <__floatsisf+0x40>
    2468:	f9 2f       	mov	r31, r25
    246a:	96 e9       	ldi	r25, 0x96	; 150
    246c:	bb 27       	eor	r27, r27
    246e:	93 95       	inc	r25
    2470:	f6 95       	lsr	r31
    2472:	87 95       	ror	r24
    2474:	77 95       	ror	r23
    2476:	67 95       	ror	r22
    2478:	b7 95       	ror	r27
    247a:	f1 11       	cpse	r31, r1
    247c:	f8 cf       	rjmp	.-16     	; 0x246e <__floatsisf+0x1c>
    247e:	fa f4       	brpl	.+62     	; 0x24be <__floatsisf+0x6c>
    2480:	bb 0f       	add	r27, r27
    2482:	11 f4       	brne	.+4      	; 0x2488 <__floatsisf+0x36>
    2484:	60 ff       	sbrs	r22, 0
    2486:	1b c0       	rjmp	.+54     	; 0x24be <__floatsisf+0x6c>
    2488:	6f 5f       	subi	r22, 0xFF	; 255
    248a:	7f 4f       	sbci	r23, 0xFF	; 255
    248c:	8f 4f       	sbci	r24, 0xFF	; 255
    248e:	9f 4f       	sbci	r25, 0xFF	; 255
    2490:	16 c0       	rjmp	.+44     	; 0x24be <__floatsisf+0x6c>
    2492:	88 23       	and	r24, r24
    2494:	11 f0       	breq	.+4      	; 0x249a <__floatsisf+0x48>
    2496:	96 e9       	ldi	r25, 0x96	; 150
    2498:	11 c0       	rjmp	.+34     	; 0x24bc <__floatsisf+0x6a>
    249a:	77 23       	and	r23, r23
    249c:	21 f0       	breq	.+8      	; 0x24a6 <__floatsisf+0x54>
    249e:	9e e8       	ldi	r25, 0x8E	; 142
    24a0:	87 2f       	mov	r24, r23
    24a2:	76 2f       	mov	r23, r22
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <__floatsisf+0x5e>
    24a6:	66 23       	and	r22, r22
    24a8:	71 f0       	breq	.+28     	; 0x24c6 <__floatsisf+0x74>
    24aa:	96 e8       	ldi	r25, 0x86	; 134
    24ac:	86 2f       	mov	r24, r22
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	60 e0       	ldi	r22, 0x00	; 0
    24b2:	2a f0       	brmi	.+10     	; 0x24be <__floatsisf+0x6c>
    24b4:	9a 95       	dec	r25
    24b6:	66 0f       	add	r22, r22
    24b8:	77 1f       	adc	r23, r23
    24ba:	88 1f       	adc	r24, r24
    24bc:	da f7       	brpl	.-10     	; 0x24b4 <__floatsisf+0x62>
    24be:	88 0f       	add	r24, r24
    24c0:	96 95       	lsr	r25
    24c2:	87 95       	ror	r24
    24c4:	97 f9       	bld	r25, 7
    24c6:	08 95       	ret

000024c8 <__fp_cmp>:
    24c8:	99 0f       	add	r25, r25
    24ca:	00 08       	sbc	r0, r0
    24cc:	55 0f       	add	r21, r21
    24ce:	aa 0b       	sbc	r26, r26
    24d0:	e0 e8       	ldi	r30, 0x80	; 128
    24d2:	fe ef       	ldi	r31, 0xFE	; 254
    24d4:	16 16       	cp	r1, r22
    24d6:	17 06       	cpc	r1, r23
    24d8:	e8 07       	cpc	r30, r24
    24da:	f9 07       	cpc	r31, r25
    24dc:	c0 f0       	brcs	.+48     	; 0x250e <__fp_cmp+0x46>
    24de:	12 16       	cp	r1, r18
    24e0:	13 06       	cpc	r1, r19
    24e2:	e4 07       	cpc	r30, r20
    24e4:	f5 07       	cpc	r31, r21
    24e6:	98 f0       	brcs	.+38     	; 0x250e <__fp_cmp+0x46>
    24e8:	62 1b       	sub	r22, r18
    24ea:	73 0b       	sbc	r23, r19
    24ec:	84 0b       	sbc	r24, r20
    24ee:	95 0b       	sbc	r25, r21
    24f0:	39 f4       	brne	.+14     	; 0x2500 <__fp_cmp+0x38>
    24f2:	0a 26       	eor	r0, r26
    24f4:	61 f0       	breq	.+24     	; 0x250e <__fp_cmp+0x46>
    24f6:	23 2b       	or	r18, r19
    24f8:	24 2b       	or	r18, r20
    24fa:	25 2b       	or	r18, r21
    24fc:	21 f4       	brne	.+8      	; 0x2506 <__fp_cmp+0x3e>
    24fe:	08 95       	ret
    2500:	0a 26       	eor	r0, r26
    2502:	09 f4       	brne	.+2      	; 0x2506 <__fp_cmp+0x3e>
    2504:	a1 40       	sbci	r26, 0x01	; 1
    2506:	a6 95       	lsr	r26
    2508:	8f ef       	ldi	r24, 0xFF	; 255
    250a:	81 1d       	adc	r24, r1
    250c:	81 1d       	adc	r24, r1
    250e:	08 95       	ret

00002510 <__fp_inf>:
    2510:	97 f9       	bld	r25, 7
    2512:	9f 67       	ori	r25, 0x7F	; 127
    2514:	80 e8       	ldi	r24, 0x80	; 128
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	60 e0       	ldi	r22, 0x00	; 0
    251a:	08 95       	ret

0000251c <__fp_nan>:
    251c:	9f ef       	ldi	r25, 0xFF	; 255
    251e:	80 ec       	ldi	r24, 0xC0	; 192
    2520:	08 95       	ret

00002522 <__fp_powser>:
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	1f 93       	push	r17
    2528:	0f 93       	push	r16
    252a:	ff 92       	push	r15
    252c:	ef 92       	push	r14
    252e:	df 92       	push	r13
    2530:	7b 01       	movw	r14, r22
    2532:	8c 01       	movw	r16, r24
    2534:	68 94       	set
    2536:	06 c0       	rjmp	.+12     	; 0x2544 <__fp_powser+0x22>
    2538:	da 2e       	mov	r13, r26
    253a:	ef 01       	movw	r28, r30
    253c:	0e 94 5f 13 	call	0x26be	; 0x26be <__mulsf3x>
    2540:	fe 01       	movw	r30, r28
    2542:	e8 94       	clt
    2544:	a5 91       	lpm	r26, Z+
    2546:	25 91       	lpm	r18, Z+
    2548:	35 91       	lpm	r19, Z+
    254a:	45 91       	lpm	r20, Z+
    254c:	55 91       	lpm	r21, Z+
    254e:	a6 f3       	brts	.-24     	; 0x2538 <__fp_powser+0x16>
    2550:	ef 01       	movw	r28, r30
    2552:	0e 94 b5 10 	call	0x216a	; 0x216a <__addsf3x>
    2556:	fe 01       	movw	r30, r28
    2558:	97 01       	movw	r18, r14
    255a:	a8 01       	movw	r20, r16
    255c:	da 94       	dec	r13
    255e:	69 f7       	brne	.-38     	; 0x253a <__fp_powser+0x18>
    2560:	df 90       	pop	r13
    2562:	ef 90       	pop	r14
    2564:	ff 90       	pop	r15
    2566:	0f 91       	pop	r16
    2568:	1f 91       	pop	r17
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <__fp_pscA>:
    2570:	00 24       	eor	r0, r0
    2572:	0a 94       	dec	r0
    2574:	16 16       	cp	r1, r22
    2576:	17 06       	cpc	r1, r23
    2578:	18 06       	cpc	r1, r24
    257a:	09 06       	cpc	r0, r25
    257c:	08 95       	ret

0000257e <__fp_pscB>:
    257e:	00 24       	eor	r0, r0
    2580:	0a 94       	dec	r0
    2582:	12 16       	cp	r1, r18
    2584:	13 06       	cpc	r1, r19
    2586:	14 06       	cpc	r1, r20
    2588:	05 06       	cpc	r0, r21
    258a:	08 95       	ret
    258c:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__fp_nan>

00002590 <__fp_rempio2>:
    2590:	0e 94 1e 13 	call	0x263c	; 0x263c <__fp_splitA>
    2594:	d8 f3       	brcs	.-10     	; 0x258c <__fp_pscB+0xe>
    2596:	e8 94       	clt
    2598:	e0 e0       	ldi	r30, 0x00	; 0
    259a:	bb 27       	eor	r27, r27
    259c:	9f 57       	subi	r25, 0x7F	; 127
    259e:	f0 f0       	brcs	.+60     	; 0x25dc <__fp_rempio2+0x4c>
    25a0:	2a ed       	ldi	r18, 0xDA	; 218
    25a2:	3f e0       	ldi	r19, 0x0F	; 15
    25a4:	49 ec       	ldi	r20, 0xC9	; 201
    25a6:	06 c0       	rjmp	.+12     	; 0x25b4 <__fp_rempio2+0x24>
    25a8:	ee 0f       	add	r30, r30
    25aa:	bb 0f       	add	r27, r27
    25ac:	66 1f       	adc	r22, r22
    25ae:	77 1f       	adc	r23, r23
    25b0:	88 1f       	adc	r24, r24
    25b2:	28 f0       	brcs	.+10     	; 0x25be <__fp_rempio2+0x2e>
    25b4:	b2 3a       	cpi	r27, 0xA2	; 162
    25b6:	62 07       	cpc	r22, r18
    25b8:	73 07       	cpc	r23, r19
    25ba:	84 07       	cpc	r24, r20
    25bc:	28 f0       	brcs	.+10     	; 0x25c8 <__fp_rempio2+0x38>
    25be:	b2 5a       	subi	r27, 0xA2	; 162
    25c0:	62 0b       	sbc	r22, r18
    25c2:	73 0b       	sbc	r23, r19
    25c4:	84 0b       	sbc	r24, r20
    25c6:	e3 95       	inc	r30
    25c8:	9a 95       	dec	r25
    25ca:	72 f7       	brpl	.-36     	; 0x25a8 <__fp_rempio2+0x18>
    25cc:	80 38       	cpi	r24, 0x80	; 128
    25ce:	30 f4       	brcc	.+12     	; 0x25dc <__fp_rempio2+0x4c>
    25d0:	9a 95       	dec	r25
    25d2:	bb 0f       	add	r27, r27
    25d4:	66 1f       	adc	r22, r22
    25d6:	77 1f       	adc	r23, r23
    25d8:	88 1f       	adc	r24, r24
    25da:	d2 f7       	brpl	.-12     	; 0x25d0 <__fp_rempio2+0x40>
    25dc:	90 48       	sbci	r25, 0x80	; 128
    25de:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__fp_mpack_finite>

000025e2 <__fp_round>:
    25e2:	09 2e       	mov	r0, r25
    25e4:	03 94       	inc	r0
    25e6:	00 0c       	add	r0, r0
    25e8:	11 f4       	brne	.+4      	; 0x25ee <__fp_round+0xc>
    25ea:	88 23       	and	r24, r24
    25ec:	52 f0       	brmi	.+20     	; 0x2602 <__fp_round+0x20>
    25ee:	bb 0f       	add	r27, r27
    25f0:	40 f4       	brcc	.+16     	; 0x2602 <__fp_round+0x20>
    25f2:	bf 2b       	or	r27, r31
    25f4:	11 f4       	brne	.+4      	; 0x25fa <__fp_round+0x18>
    25f6:	60 ff       	sbrs	r22, 0
    25f8:	04 c0       	rjmp	.+8      	; 0x2602 <__fp_round+0x20>
    25fa:	6f 5f       	subi	r22, 0xFF	; 255
    25fc:	7f 4f       	sbci	r23, 0xFF	; 255
    25fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2600:	9f 4f       	sbci	r25, 0xFF	; 255
    2602:	08 95       	ret

00002604 <__fp_sinus>:
    2604:	ef 93       	push	r30
    2606:	e0 ff       	sbrs	r30, 0
    2608:	07 c0       	rjmp	.+14     	; 0x2618 <__fp_sinus+0x14>
    260a:	a2 ea       	ldi	r26, 0xA2	; 162
    260c:	2a ed       	ldi	r18, 0xDA	; 218
    260e:	3f e0       	ldi	r19, 0x0F	; 15
    2610:	49 ec       	ldi	r20, 0xC9	; 201
    2612:	5f eb       	ldi	r21, 0xBF	; 191
    2614:	0e 94 b5 10 	call	0x216a	; 0x216a <__addsf3x>
    2618:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__fp_round>
    261c:	0f 90       	pop	r0
    261e:	03 94       	inc	r0
    2620:	01 fc       	sbrc	r0, 1
    2622:	90 58       	subi	r25, 0x80	; 128
    2624:	e9 ed       	ldi	r30, 0xD9	; 217
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__fp_powsodd>

0000262c <__fp_split3>:
    262c:	57 fd       	sbrc	r21, 7
    262e:	90 58       	subi	r25, 0x80	; 128
    2630:	44 0f       	add	r20, r20
    2632:	55 1f       	adc	r21, r21
    2634:	59 f0       	breq	.+22     	; 0x264c <__fp_splitA+0x10>
    2636:	5f 3f       	cpi	r21, 0xFF	; 255
    2638:	71 f0       	breq	.+28     	; 0x2656 <__fp_splitA+0x1a>
    263a:	47 95       	ror	r20

0000263c <__fp_splitA>:
    263c:	88 0f       	add	r24, r24
    263e:	97 fb       	bst	r25, 7
    2640:	99 1f       	adc	r25, r25
    2642:	61 f0       	breq	.+24     	; 0x265c <__fp_splitA+0x20>
    2644:	9f 3f       	cpi	r25, 0xFF	; 255
    2646:	79 f0       	breq	.+30     	; 0x2666 <__fp_splitA+0x2a>
    2648:	87 95       	ror	r24
    264a:	08 95       	ret
    264c:	12 16       	cp	r1, r18
    264e:	13 06       	cpc	r1, r19
    2650:	14 06       	cpc	r1, r20
    2652:	55 1f       	adc	r21, r21
    2654:	f2 cf       	rjmp	.-28     	; 0x263a <__fp_split3+0xe>
    2656:	46 95       	lsr	r20
    2658:	f1 df       	rcall	.-30     	; 0x263c <__fp_splitA>
    265a:	08 c0       	rjmp	.+16     	; 0x266c <__fp_splitA+0x30>
    265c:	16 16       	cp	r1, r22
    265e:	17 06       	cpc	r1, r23
    2660:	18 06       	cpc	r1, r24
    2662:	99 1f       	adc	r25, r25
    2664:	f1 cf       	rjmp	.-30     	; 0x2648 <__fp_splitA+0xc>
    2666:	86 95       	lsr	r24
    2668:	71 05       	cpc	r23, r1
    266a:	61 05       	cpc	r22, r1
    266c:	08 94       	sec
    266e:	08 95       	ret

00002670 <__fp_zero>:
    2670:	e8 94       	clt

00002672 <__fp_szero>:
    2672:	bb 27       	eor	r27, r27
    2674:	66 27       	eor	r22, r22
    2676:	77 27       	eor	r23, r23
    2678:	cb 01       	movw	r24, r22
    267a:	97 f9       	bld	r25, 7
    267c:	08 95       	ret

0000267e <__gesf2>:
    267e:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__fp_cmp>
    2682:	08 f4       	brcc	.+2      	; 0x2686 <__gesf2+0x8>
    2684:	8f ef       	ldi	r24, 0xFF	; 255
    2686:	08 95       	ret

00002688 <inverse>:
    2688:	9b 01       	movw	r18, r22
    268a:	ac 01       	movw	r20, r24
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	80 e8       	ldi	r24, 0x80	; 128
    2692:	9f e3       	ldi	r25, 0x3F	; 63
    2694:	0c 94 86 11 	jmp	0x230c	; 0x230c <__divsf3>

00002698 <__mulsf3>:
    2698:	0e 94 5f 13 	call	0x26be	; 0x26be <__mulsf3x>
    269c:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__fp_round>
    26a0:	0e 94 b8 12 	call	0x2570	; 0x2570 <__fp_pscA>
    26a4:	38 f0       	brcs	.+14     	; 0x26b4 <__mulsf3+0x1c>
    26a6:	0e 94 bf 12 	call	0x257e	; 0x257e <__fp_pscB>
    26aa:	20 f0       	brcs	.+8      	; 0x26b4 <__mulsf3+0x1c>
    26ac:	95 23       	and	r25, r21
    26ae:	11 f0       	breq	.+4      	; 0x26b4 <__mulsf3+0x1c>
    26b0:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__fp_inf>
    26b4:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__fp_nan>
    26b8:	11 24       	eor	r1, r1
    26ba:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__fp_szero>

000026be <__mulsf3x>:
    26be:	0e 94 16 13 	call	0x262c	; 0x262c <__fp_split3>
    26c2:	70 f3       	brcs	.-36     	; 0x26a0 <__mulsf3+0x8>

000026c4 <__mulsf3_pse>:
    26c4:	95 9f       	mul	r25, r21
    26c6:	c1 f3       	breq	.-16     	; 0x26b8 <__mulsf3+0x20>
    26c8:	95 0f       	add	r25, r21
    26ca:	50 e0       	ldi	r21, 0x00	; 0
    26cc:	55 1f       	adc	r21, r21
    26ce:	62 9f       	mul	r22, r18
    26d0:	f0 01       	movw	r30, r0
    26d2:	72 9f       	mul	r23, r18
    26d4:	bb 27       	eor	r27, r27
    26d6:	f0 0d       	add	r31, r0
    26d8:	b1 1d       	adc	r27, r1
    26da:	63 9f       	mul	r22, r19
    26dc:	aa 27       	eor	r26, r26
    26de:	f0 0d       	add	r31, r0
    26e0:	b1 1d       	adc	r27, r1
    26e2:	aa 1f       	adc	r26, r26
    26e4:	64 9f       	mul	r22, r20
    26e6:	66 27       	eor	r22, r22
    26e8:	b0 0d       	add	r27, r0
    26ea:	a1 1d       	adc	r26, r1
    26ec:	66 1f       	adc	r22, r22
    26ee:	82 9f       	mul	r24, r18
    26f0:	22 27       	eor	r18, r18
    26f2:	b0 0d       	add	r27, r0
    26f4:	a1 1d       	adc	r26, r1
    26f6:	62 1f       	adc	r22, r18
    26f8:	73 9f       	mul	r23, r19
    26fa:	b0 0d       	add	r27, r0
    26fc:	a1 1d       	adc	r26, r1
    26fe:	62 1f       	adc	r22, r18
    2700:	83 9f       	mul	r24, r19
    2702:	a0 0d       	add	r26, r0
    2704:	61 1d       	adc	r22, r1
    2706:	22 1f       	adc	r18, r18
    2708:	74 9f       	mul	r23, r20
    270a:	33 27       	eor	r19, r19
    270c:	a0 0d       	add	r26, r0
    270e:	61 1d       	adc	r22, r1
    2710:	23 1f       	adc	r18, r19
    2712:	84 9f       	mul	r24, r20
    2714:	60 0d       	add	r22, r0
    2716:	21 1d       	adc	r18, r1
    2718:	82 2f       	mov	r24, r18
    271a:	76 2f       	mov	r23, r22
    271c:	6a 2f       	mov	r22, r26
    271e:	11 24       	eor	r1, r1
    2720:	9f 57       	subi	r25, 0x7F	; 127
    2722:	50 40       	sbci	r21, 0x00	; 0
    2724:	9a f0       	brmi	.+38     	; 0x274c <__mulsf3_pse+0x88>
    2726:	f1 f0       	breq	.+60     	; 0x2764 <__mulsf3_pse+0xa0>
    2728:	88 23       	and	r24, r24
    272a:	4a f0       	brmi	.+18     	; 0x273e <__mulsf3_pse+0x7a>
    272c:	ee 0f       	add	r30, r30
    272e:	ff 1f       	adc	r31, r31
    2730:	bb 1f       	adc	r27, r27
    2732:	66 1f       	adc	r22, r22
    2734:	77 1f       	adc	r23, r23
    2736:	88 1f       	adc	r24, r24
    2738:	91 50       	subi	r25, 0x01	; 1
    273a:	50 40       	sbci	r21, 0x00	; 0
    273c:	a9 f7       	brne	.-22     	; 0x2728 <__mulsf3_pse+0x64>
    273e:	9e 3f       	cpi	r25, 0xFE	; 254
    2740:	51 05       	cpc	r21, r1
    2742:	80 f0       	brcs	.+32     	; 0x2764 <__mulsf3_pse+0xa0>
    2744:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__fp_inf>
    2748:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__fp_szero>
    274c:	5f 3f       	cpi	r21, 0xFF	; 255
    274e:	e4 f3       	brlt	.-8      	; 0x2748 <__mulsf3_pse+0x84>
    2750:	98 3e       	cpi	r25, 0xE8	; 232
    2752:	d4 f3       	brlt	.-12     	; 0x2748 <__mulsf3_pse+0x84>
    2754:	86 95       	lsr	r24
    2756:	77 95       	ror	r23
    2758:	67 95       	ror	r22
    275a:	b7 95       	ror	r27
    275c:	f7 95       	ror	r31
    275e:	e7 95       	ror	r30
    2760:	9f 5f       	subi	r25, 0xFF	; 255
    2762:	c1 f7       	brne	.-16     	; 0x2754 <__mulsf3_pse+0x90>
    2764:	fe 2b       	or	r31, r30
    2766:	88 0f       	add	r24, r24
    2768:	91 1d       	adc	r25, r1
    276a:	96 95       	lsr	r25
    276c:	87 95       	ror	r24
    276e:	97 f9       	bld	r25, 7
    2770:	08 95       	ret

00002772 <sin>:
    2772:	9f 93       	push	r25
    2774:	0e 94 c8 12 	call	0x2590	; 0x2590 <__fp_rempio2>
    2778:	0f 90       	pop	r0
    277a:	07 fc       	sbrc	r0, 7
    277c:	ee 5f       	subi	r30, 0xFE	; 254
    277e:	0c 94 02 13 	jmp	0x2604	; 0x2604 <__fp_sinus>
    2782:	19 f4       	brne	.+6      	; 0x278a <sin+0x18>
    2784:	16 f4       	brtc	.+4      	; 0x278a <sin+0x18>
    2786:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__fp_nan>
    278a:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__fp_mpack>

0000278e <sqrt>:
    278e:	0e 94 1e 13 	call	0x263c	; 0x263c <__fp_splitA>
    2792:	b8 f3       	brcs	.-18     	; 0x2782 <sin+0x10>
    2794:	99 23       	and	r25, r25
    2796:	c9 f3       	breq	.-14     	; 0x278a <sin+0x18>
    2798:	b6 f3       	brts	.-20     	; 0x2786 <sin+0x14>
    279a:	9f 57       	subi	r25, 0x7F	; 127
    279c:	55 0b       	sbc	r21, r21
    279e:	87 ff       	sbrs	r24, 7
    27a0:	0e 94 19 14 	call	0x2832	; 0x2832 <__fp_norm2>
    27a4:	00 24       	eor	r0, r0
    27a6:	a0 e6       	ldi	r26, 0x60	; 96
    27a8:	40 ea       	ldi	r20, 0xA0	; 160
    27aa:	90 01       	movw	r18, r0
    27ac:	80 58       	subi	r24, 0x80	; 128
    27ae:	56 95       	lsr	r21
    27b0:	97 95       	ror	r25
    27b2:	28 f4       	brcc	.+10     	; 0x27be <sqrt+0x30>
    27b4:	80 5c       	subi	r24, 0xC0	; 192
    27b6:	66 0f       	add	r22, r22
    27b8:	77 1f       	adc	r23, r23
    27ba:	88 1f       	adc	r24, r24
    27bc:	20 f0       	brcs	.+8      	; 0x27c6 <sqrt+0x38>
    27be:	26 17       	cp	r18, r22
    27c0:	37 07       	cpc	r19, r23
    27c2:	48 07       	cpc	r20, r24
    27c4:	30 f4       	brcc	.+12     	; 0x27d2 <sqrt+0x44>
    27c6:	62 1b       	sub	r22, r18
    27c8:	73 0b       	sbc	r23, r19
    27ca:	84 0b       	sbc	r24, r20
    27cc:	20 29       	or	r18, r0
    27ce:	31 29       	or	r19, r1
    27d0:	4a 2b       	or	r20, r26
    27d2:	a6 95       	lsr	r26
    27d4:	17 94       	ror	r1
    27d6:	07 94       	ror	r0
    27d8:	20 25       	eor	r18, r0
    27da:	31 25       	eor	r19, r1
    27dc:	4a 27       	eor	r20, r26
    27de:	58 f7       	brcc	.-42     	; 0x27b6 <sqrt+0x28>
    27e0:	66 0f       	add	r22, r22
    27e2:	77 1f       	adc	r23, r23
    27e4:	88 1f       	adc	r24, r24
    27e6:	20 f0       	brcs	.+8      	; 0x27f0 <sqrt+0x62>
    27e8:	26 17       	cp	r18, r22
    27ea:	37 07       	cpc	r19, r23
    27ec:	48 07       	cpc	r20, r24
    27ee:	30 f4       	brcc	.+12     	; 0x27fc <sqrt+0x6e>
    27f0:	62 0b       	sbc	r22, r18
    27f2:	73 0b       	sbc	r23, r19
    27f4:	84 0b       	sbc	r24, r20
    27f6:	20 0d       	add	r18, r0
    27f8:	31 1d       	adc	r19, r1
    27fa:	41 1d       	adc	r20, r1
    27fc:	a0 95       	com	r26
    27fe:	81 f7       	brne	.-32     	; 0x27e0 <sqrt+0x52>
    2800:	b9 01       	movw	r22, r18
    2802:	84 2f       	mov	r24, r20
    2804:	91 58       	subi	r25, 0x81	; 129
    2806:	88 0f       	add	r24, r24
    2808:	96 95       	lsr	r25
    280a:	87 95       	ror	r24
    280c:	08 95       	ret

0000280e <square>:
    280e:	9b 01       	movw	r18, r22
    2810:	ac 01       	movw	r20, r24
    2812:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__mulsf3>

00002816 <__fp_mpack>:
    2816:	9f 3f       	cpi	r25, 0xFF	; 255
    2818:	31 f0       	breq	.+12     	; 0x2826 <__fp_mpack_finite+0xc>

0000281a <__fp_mpack_finite>:
    281a:	91 50       	subi	r25, 0x01	; 1
    281c:	20 f4       	brcc	.+8      	; 0x2826 <__fp_mpack_finite+0xc>
    281e:	87 95       	ror	r24
    2820:	77 95       	ror	r23
    2822:	67 95       	ror	r22
    2824:	b7 95       	ror	r27
    2826:	88 0f       	add	r24, r24
    2828:	91 1d       	adc	r25, r1
    282a:	96 95       	lsr	r25
    282c:	87 95       	ror	r24
    282e:	97 f9       	bld	r25, 7
    2830:	08 95       	ret

00002832 <__fp_norm2>:
    2832:	91 50       	subi	r25, 0x01	; 1
    2834:	50 40       	sbci	r21, 0x00	; 0
    2836:	66 0f       	add	r22, r22
    2838:	77 1f       	adc	r23, r23
    283a:	88 1f       	adc	r24, r24
    283c:	d2 f7       	brpl	.-12     	; 0x2832 <__fp_norm2>
    283e:	08 95       	ret

00002840 <__fp_powsodd>:
    2840:	9f 93       	push	r25
    2842:	8f 93       	push	r24
    2844:	7f 93       	push	r23
    2846:	6f 93       	push	r22
    2848:	ff 93       	push	r31
    284a:	ef 93       	push	r30
    284c:	9b 01       	movw	r18, r22
    284e:	ac 01       	movw	r20, r24
    2850:	0e 94 4c 13 	call	0x2698	; 0x2698 <__mulsf3>
    2854:	ef 91       	pop	r30
    2856:	ff 91       	pop	r31
    2858:	0e 94 91 12 	call	0x2522	; 0x2522 <__fp_powser>
    285c:	2f 91       	pop	r18
    285e:	3f 91       	pop	r19
    2860:	4f 91       	pop	r20
    2862:	5f 91       	pop	r21
    2864:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__mulsf3>

00002868 <_exit>:
    2868:	f8 94       	cli

0000286a <__stop_program>:
    286a:	ff cf       	rjmp	.-2      	; 0x286a <__stop_program>
