
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000028ba  0000294e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  0080012e  0080012e  0000297c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000297c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c07  00000000  00000000  00002cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c79  00000000  00000000  000058db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001164  00000000  00000000  00006554  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f8  00000000  00000000  000076b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b26  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ae7  00000000  00000000  00008bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000c6bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__ctors_end>
       4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       c:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__vector_3>
      10:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      14:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      18:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      1c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      20:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      24:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      28:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__vector_10>
      2c:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__vector_11>
      30:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      34:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      38:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      3c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      40:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      44:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__vector_17>
      48:	0c 94 25 08 	jmp	0x104a	; 0x104a <__vector_18>
      4c:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__vector_19>
      50:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      54:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      58:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      5c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      60:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      64:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      68:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      6c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      70:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      74:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__vector_29>
      78:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      7c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      80:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      84:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      8c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      90:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      94:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      98:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      9c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      a8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__trampolines_end>:
      f8:	00 01       	movw	r0, r0
      fa:	00 00       	nop
      fc:	8f 01       	movw	r16, r30
      fe:	12 00       	.word	0x0012	; ????
     100:	02 00       	.word	0x0002	; ????
     102:	00 4c       	sbci	r16, 0xC0	; 192
     104:	01 43       	sbci	r16, 0x31	; 49
     106:	00 03       	mulsu	r16, r16
     108:	00 00       	nop
     10a:	48 01       	movw	r8, r16
     10c:	04 01       	movw	r0, r8
     10e:	03 09       	sbc	r16, r3
     110:	04 34       	cpi	r16, 0x44	; 68
     112:	01 12       	cpse	r0, r17
     114:	02 03       	mulsu	r16, r18
     116:	09 04       	cpc	r0, r9
     118:	2c 01       	movw	r4, r24
     11a:	06 03       	mulsu	r16, r22
     11c:	03 09       	sbc	r16, r3
     11e:	04 22       	and	r0, r20
     120:	01 08       	sbc	r0, r1

00000122 <string3>:
     122:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000012c <string2>:
     12c:	06 03 4d 00 32 00 00 00                             ..M.2...

00000134 <string1>:
     134:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     144:	65 00 00 00                                         e...

00000148 <string0>:
     148:	04 03 09 04                                         ....

0000014c <config1_descriptor>:
     14c:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     15c:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     16c:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     17c:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     18c:	40 00 00                                            @..

0000018f <device_descriptor>:
     18f:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     19f:	03 01                                               ..

000001a1 <endpoint_config_table>:
     1a1:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001ac <__ctors_end>:
     1ac:	11 24       	eor	r1, r1
     1ae:	1f be       	out	0x3f, r1	; 63
     1b0:	cf ef       	ldi	r28, 0xFF	; 255
     1b2:	da e0       	ldi	r29, 0x0A	; 10
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	cd bf       	out	0x3d, r28	; 61

000001b8 <__do_copy_data>:
     1b8:	11 e0       	ldi	r17, 0x01	; 1
     1ba:	a0 e0       	ldi	r26, 0x00	; 0
     1bc:	b1 e0       	ldi	r27, 0x01	; 1
     1be:	ea eb       	ldi	r30, 0xBA	; 186
     1c0:	f8 e2       	ldi	r31, 0x28	; 40
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__do_copy_data+0x10>
     1c4:	05 90       	lpm	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	ae 32       	cpi	r26, 0x2E	; 46
     1ca:	b1 07       	cpc	r27, r17
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <__do_copy_data+0xc>

000001ce <__do_clear_bss>:
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	ae e2       	ldi	r26, 0x2E	; 46
     1d2:	b1 e0       	ldi	r27, 0x01	; 1
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <.do_clear_bss_start>

000001d6 <.do_clear_bss_loop>:
     1d6:	1d 92       	st	X+, r1

000001d8 <.do_clear_bss_start>:
     1d8:	aa 38       	cpi	r26, 0x8A	; 138
     1da:	b2 07       	cpc	r27, r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <.do_clear_bss_loop>
     1de:	0e 94 19 07 	call	0xe32	; 0xe32 <main>
     1e2:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <_exit>

000001e6 <__bad_interrupt>:
     1e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ea <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(void) {
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
/************************************************************
Initialization of Pins and System Clock
************************************************************/

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     1f2:	e1 e6       	ldi	r30, 0x61	; 97
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 e8       	ldi	r24, 0x80	; 128
     1f8:	80 83       	st	Z, r24
     1fa:	10 82       	st	Z, r1
	
	//Set to Input
	clear(DDRD,0); // D0
     1fc:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     1fe:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     200:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     202:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     204:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     206:	23 9a       	sbi	0x04, 3	; 4
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     208:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     20a:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     20c:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     20e:	2b 98       	cbi	0x05, 3	; 5

/************************************************************
Setup Subsystems
************************************************************/

	m_bus_init();
     210:	0e 94 34 0c 	call	0x1868	; 0x1868 <m_bus_init>
	while(!m_wii_open());
     214:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <m_wii_open>
     218:	88 23       	and	r24, r24
     21a:	e1 f3       	breq	.-8      	; 0x214 <initialize_robockey+0x2a>
	sei();
     21c:	78 94       	sei
	m_usb_init();
     21e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <m_usb_init>
/************************************************************
Timer1 Initialization for PWM Motor Control
************************************************************/

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     222:	e1 e8       	ldi	r30, 0x81	; 129
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	8b 7f       	andi	r24, 0xFB	; 251
     22a:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     22c:	80 81       	ld	r24, Z
     22e:	8d 7f       	andi	r24, 0xFD	; 253
     230:	80 83       	st	Z, r24
	set(TCCR1B,CS10);
     232:	80 81       	ld	r24, Z
     234:	81 60       	ori	r24, 0x01	; 1
     236:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     238:	80 81       	ld	r24, Z
     23a:	8f 7e       	andi	r24, 0xEF	; 239
     23c:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     23e:	80 81       	ld	r24, Z
     240:	88 60       	ori	r24, 0x08	; 8
     242:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     244:	e0 e8       	ldi	r30, 0x80	; 128
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	8d 7f       	andi	r24, 0xFD	; 253
     24c:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     24e:	80 81       	ld	r24, Z
     250:	8e 7f       	andi	r24, 0xFE	; 254
     252:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     254:	80 81       	ld	r24, Z
     256:	8f 7d       	andi	r24, 0xDF	; 223
     258:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     25a:	80 81       	ld	r24, Z
     25c:	8f 7e       	andi	r24, 0xEF	; 239
     25e:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     260:	08 e8       	ldi	r16, 0x88	; 136
     262:	10 e0       	ldi	r17, 0x00	; 0
     264:	c0 e8       	ldi	r28, 0x80	; 128
     266:	de e3       	ldi	r29, 0x3E	; 62
     268:	f8 01       	movw	r30, r16
     26a:	d1 83       	std	Z+1, r29	; 0x01
     26c:	c0 83       	st	Z, r28
	OCR1B = (float)OCR1A*0.1;
     26e:	60 81       	ld	r22, Z
     270:	71 81       	ldd	r23, Z+1	; 0x01
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 4e 12 	call	0x249c	; 0x249c <__floatunsisf>
     27a:	2d ec       	ldi	r18, 0xCD	; 205
     27c:	3c ec       	ldi	r19, 0xCC	; 204
     27e:	4c ec       	ldi	r20, 0xCC	; 204
     280:	5d e3       	ldi	r21, 0x3D	; 61
     282:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     286:	0e 94 1f 12 	call	0x243e	; 0x243e <__fixunssfsi>
     28a:	70 93 8b 00 	sts	0x008B, r23
     28e:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     292:	f8 01       	movw	r30, r16
     294:	60 81       	ld	r22, Z
     296:	71 81       	ldd	r23, Z+1	; 0x01
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 4e 12 	call	0x249c	; 0x249c <__floatunsisf>
     2a0:	2d ec       	ldi	r18, 0xCD	; 205
     2a2:	3c ec       	ldi	r19, 0xCC	; 204
     2a4:	4c ec       	ldi	r20, 0xCC	; 204
     2a6:	5d e3       	ldi	r21, 0x3D	; 61
     2a8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     2ac:	0e 94 1f 12 	call	0x243e	; 0x243e <__fixunssfsi>
     2b0:	70 93 8d 00 	sts	0x008D, r23
     2b4:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     2b8:	ef e6       	ldi	r30, 0x6F	; 111
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	82 60       	ori	r24, 0x02	; 2
     2c0:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     2c2:	80 81       	ld	r24, Z
     2c4:	84 60       	ori	r24, 0x04	; 4
     2c6:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     2c8:	80 81       	ld	r24, Z
     2ca:	88 60       	ori	r24, 0x08	; 8
     2cc:	80 83       	st	Z, r24

/************************************************************
Timer3 Initialization for fixed timestep calculations
************************************************************/

	clear(TCCR3B,CS32); // prescale /1
     2ce:	e1 e9       	ldi	r30, 0x91	; 145
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	8b 7f       	andi	r24, 0xFB	; 251
     2d6:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     2d8:	80 81       	ld	r24, Z
     2da:	8d 7f       	andi	r24, 0xFD	; 253
     2dc:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     2de:	80 81       	ld	r24, Z
     2e0:	81 60       	ori	r24, 0x01	; 1
     2e2:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     2e4:	80 81       	ld	r24, Z
     2e6:	8f 7e       	andi	r24, 0xEF	; 239
     2e8:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     2ea:	80 81       	ld	r24, Z
     2ec:	88 60       	ori	r24, 0x08	; 8
     2ee:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     2f0:	e0 e9       	ldi	r30, 0x90	; 144
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8d 7f       	andi	r24, 0xFD	; 253
     2f8:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     2fa:	80 81       	ld	r24, Z
     2fc:	8e 7f       	andi	r24, 0xFE	; 254
     2fe:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     300:	d0 93 99 00 	sts	0x0099, r29
     304:	c0 93 98 00 	sts	0x0098, r28

/************************************************************
Initialize the Wireless System
************************************************************/

	m_rf_open(CHANNEL,RXADDRESS_1,PACKET_LENGTH); // Configure mRF
     308:	4a e0       	ldi	r20, 0x0A	; 10
     30a:	60 e2       	ldi	r22, 0x20	; 32
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	0e 94 45 0c 	call	0x188a	; 0x188a <m_rf_open>

/************************************************************
Setup ADC
************************************************************/
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
     312:	cc e7       	ldi	r28, 0x7C	; 124
     314:	d0 e0       	ldi	r29, 0x00	; 0
     316:	88 81       	ld	r24, Y
     318:	8f 77       	andi	r24, 0x7F	; 127
     31a:	88 83       	st	Y, r24
	set(ADMUX,REFS0);
     31c:	88 81       	ld	r24, Y
     31e:	80 64       	ori	r24, 0x40	; 64
     320:	88 83       	st	Y, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
     322:	ea e7       	ldi	r30, 0x7A	; 122
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	8b 7f       	andi	r24, 0xFB	; 251
     32a:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     32c:	80 81       	ld	r24, Z
     32e:	82 60       	ori	r24, 0x02	; 2
     330:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     332:	80 81       	ld	r24, Z
     334:	81 60       	ori	r24, 0x01	; 1
     336:	80 83       	st	Z, r24
	
	// Disable Digital input to:
	set(DIDR0,ADC0D); // ADC0
     338:	ae e7       	ldi	r26, 0x7E	; 126
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	8c 91       	ld	r24, X
     33e:	81 60       	ori	r24, 0x01	; 1
     340:	8c 93       	st	X, r24
	set(DIDR0,ADC1D); // ADC1
     342:	8c 91       	ld	r24, X
     344:	82 60       	ori	r24, 0x02	; 2
     346:	8c 93       	st	X, r24
	set(DIDR0,ADC4D); // ADC4
     348:	8c 91       	ld	r24, X
     34a:	80 61       	ori	r24, 0x10	; 16
     34c:	8c 93       	st	X, r24
	set(DIDR0,ADC5D); // ADC5
     34e:	8c 91       	ld	r24, X
     350:	80 62       	ori	r24, 0x20	; 32
     352:	8c 93       	st	X, r24
	set(DIDR0,ADC6D); // ADC6
     354:	8c 91       	ld	r24, X
     356:	80 64       	ori	r24, 0x40	; 64
     358:	8c 93       	st	X, r24
	set(DIDR0,ADC7D); // ADC7
     35a:	8c 91       	ld	r24, X
     35c:	80 68       	ori	r24, 0x80	; 128
     35e:	8c 93       	st	X, r24
	set(DIDR2,ADC8D); // ADC8
     360:	ad e7       	ldi	r26, 0x7D	; 125
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	8c 91       	ld	r24, X
     366:	81 60       	ori	r24, 0x01	; 1
     368:	8c 93       	st	X, r24
	set(DIDR2,ADC9D); // ADC9
     36a:	8c 91       	ld	r24, X
     36c:	82 60       	ori	r24, 0x02	; 2
     36e:	8c 93       	st	X, r24
	set(DIDR2,ADC10D); // ADC10
     370:	8c 91       	ld	r24, X
     372:	84 60       	ori	r24, 0x04	; 4
     374:	8c 93       	st	X, r24
	set(DIDR2,ADC11D); // ADC11
     376:	8c 91       	ld	r24, X
     378:	88 60       	ori	r24, 0x08	; 8
     37a:	8c 93       	st	X, r24
	set(DIDR2,ADC12D); // ADC812
     37c:	8c 91       	ld	r24, X
     37e:	80 61       	ori	r24, 0x10	; 16
     380:	8c 93       	st	X, r24
	set(DIDR2,ADC13D); // ADC13
     382:	8c 91       	ld	r24, X
     384:	80 62       	ori	r24, 0x20	; 32
     386:	8c 93       	st	X, r24

	
	set(ADCSRA,ADIE); // Enable interrupt for when conversion is finished
     388:	80 81       	ld	r24, Z
     38a:	88 60       	ori	r24, 0x08	; 8
     38c:	80 83       	st	Z, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
     38e:	80 81       	ld	r24, Z
     390:	8f 7d       	andi	r24, 0xDF	; 223
     392:	80 83       	st	Z, r24
	
	clear(ADCSRB,MUX5); // Select ADC0 at pin F4
     394:	ab e7       	ldi	r26, 0x7B	; 123
     396:	b0 e0       	ldi	r27, 0x00	; 0
     398:	8c 91       	ld	r24, X
     39a:	8f 7d       	andi	r24, 0xDF	; 223
     39c:	8c 93       	st	X, r24
	clear(ADMUX,MUX2);
     39e:	88 81       	ld	r24, Y
     3a0:	8b 7f       	andi	r24, 0xFB	; 251
     3a2:	88 83       	st	Y, r24
	clear(ADMUX,MUX1);
     3a4:	88 81       	ld	r24, Y
     3a6:	8d 7f       	andi	r24, 0xFD	; 253
     3a8:	88 83       	st	Y, r24
	clear(ADMUX,MUX0);
     3aa:	88 81       	ld	r24, Y
     3ac:	8e 7f       	andi	r24, 0xFE	; 254
     3ae:	88 83       	st	Y, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
     3b0:	80 81       	ld	r24, Z
     3b2:	80 68       	ori	r24, 0x80	; 128
     3b4:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
     3b6:	80 81       	ld	r24, Z
     3b8:	80 64       	ori	r24, 0x40	; 64
     3ba:	80 83       	st	Z, r24
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	08 95       	ret

000003c6 <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     3c6:	82 30       	cpi	r24, 0x02	; 2
     3c8:	91 05       	cpc	r25, r1
     3ca:	f9 f0       	breq	.+62     	; 0x40a <distIndex+0x44>
     3cc:	2c f4       	brge	.+10     	; 0x3d8 <distIndex+0x12>
     3ce:	00 97       	sbiw	r24, 0x00	; 0
     3d0:	51 f0       	breq	.+20     	; 0x3e6 <distIndex+0x20>
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	89 f0       	breq	.+34     	; 0x3f8 <distIndex+0x32>
     3d6:	42 c0       	rjmp	.+132    	; 0x45c <distIndex+0x96>
     3d8:	84 30       	cpi	r24, 0x04	; 4
     3da:	91 05       	cpc	r25, r1
     3dc:	51 f1       	breq	.+84     	; 0x432 <distIndex+0x6c>
     3de:	f4 f0       	brlt	.+60     	; 0x41c <distIndex+0x56>
     3e0:	05 97       	sbiw	r24, 0x05	; 5
     3e2:	91 f1       	breq	.+100    	; 0x448 <distIndex+0x82>
     3e4:	3b c0       	rjmp	.+118    	; 0x45c <distIndex+0x96>
	{
		case 0 : 
			pointsUsed[0] = 0;
     3e6:	ee e2       	ldi	r30, 0x2E	; 46
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
     3ea:	11 82       	std	Z+1, r1	; 0x01
     3ec:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	93 83       	std	Z+3, r25	; 0x03
     3f4:	82 83       	std	Z+2, r24	; 0x02
			break;
     3f6:	32 c0       	rjmp	.+100    	; 0x45c <distIndex+0x96>
			
		case 1 : 
			pointsUsed[0] = 0;
     3f8:	ee e2       	ldi	r30, 0x2E	; 46
     3fa:	f1 e0       	ldi	r31, 0x01	; 1
     3fc:	11 82       	std	Z+1, r1	; 0x01
     3fe:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	93 83       	std	Z+3, r25	; 0x03
     406:	82 83       	std	Z+2, r24	; 0x02
			break;
     408:	29 c0       	rjmp	.+82     	; 0x45c <distIndex+0x96>
			
		case 2 : 
			pointsUsed[0] = 0;
     40a:	ee e2       	ldi	r30, 0x2E	; 46
     40c:	f1 e0       	ldi	r31, 0x01	; 1
     40e:	11 82       	std	Z+1, r1	; 0x01
     410:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     412:	83 e0       	ldi	r24, 0x03	; 3
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	93 83       	std	Z+3, r25	; 0x03
     418:	82 83       	std	Z+2, r24	; 0x02
			break;
     41a:	20 c0       	rjmp	.+64     	; 0x45c <distIndex+0x96>
			
		case 3 : 
			pointsUsed[0] = 1;
     41c:	ee e2       	ldi	r30, 0x2E	; 46
     41e:	f1 e0       	ldi	r31, 0x01	; 1
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	91 83       	std	Z+1, r25	; 0x01
     426:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	93 83       	std	Z+3, r25	; 0x03
     42e:	82 83       	std	Z+2, r24	; 0x02
			break;
     430:	15 c0       	rjmp	.+42     	; 0x45c <distIndex+0x96>
			
		case 4 : 
			pointsUsed[0] = 1;
     432:	ee e2       	ldi	r30, 0x2E	; 46
     434:	f1 e0       	ldi	r31, 0x01	; 1
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	91 83       	std	Z+1, r25	; 0x01
     43c:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     43e:	83 e0       	ldi	r24, 0x03	; 3
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	93 83       	std	Z+3, r25	; 0x03
     444:	82 83       	std	Z+2, r24	; 0x02
			break;
     446:	0a c0       	rjmp	.+20     	; 0x45c <distIndex+0x96>
			
		case 5 :
			pointsUsed[0] = 2;
     448:	ee e2       	ldi	r30, 0x2E	; 46
     44a:	f1 e0       	ldi	r31, 0x01	; 1
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	91 83       	std	Z+1, r25	; 0x01
     452:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	93 83       	std	Z+3, r25	; 0x03
     45a:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     45c:	8e e2       	ldi	r24, 0x2E	; 46
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	08 95       	ret

00000462 <orientationCalculationFour>:


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
     462:	2f 92       	push	r2
     464:	3f 92       	push	r3
     466:	4f 92       	push	r4
     468:	5f 92       	push	r5
     46a:	6f 92       	push	r6
     46c:	7f 92       	push	r7
     46e:	8f 92       	push	r8
     470:	9f 92       	push	r9
     472:	af 92       	push	r10
     474:	bf 92       	push	r11
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	00 d0       	rcall	.+0      	; 0x488 <orientationCalculationFour+0x26>
     488:	00 d0       	rcall	.+0      	; 0x48a <orientationCalculationFour+0x28>
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	5c 01       	movw	r10, r24
     490:	4a 01       	movw	r8, r20
     492:	3a 83       	std	Y+2, r19	; 0x02
     494:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     496:	06 2f       	mov	r16, r22
     498:	17 2f       	mov	r17, r23
     49a:	f8 01       	movw	r30, r16
     49c:	41 90       	ld	r4, Z+
     49e:	51 90       	ld	r5, Z+
     4a0:	61 90       	ld	r6, Z+
     4a2:	71 90       	ld	r7, Z+
     4a4:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     4a6:	1c 82       	std	Y+4, r1	; 0x04
     4a8:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     4aa:	21 2c       	mov	r2, r1
     4ac:	31 2c       	mov	r3, r1
     4ae:	12 c0       	rjmp	.+36     	; 0x4d4 <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     4b0:	f8 01       	movw	r30, r16
     4b2:	c1 90       	ld	r12, Z+
     4b4:	d1 90       	ld	r13, Z+
     4b6:	e1 90       	ld	r14, Z+
     4b8:	f1 90       	ld	r15, Z+
     4ba:	8f 01       	movw	r16, r30
     4bc:	a7 01       	movw	r20, r14
     4be:	96 01       	movw	r18, r12
     4c0:	c3 01       	movw	r24, r6
     4c2:	b2 01       	movw	r22, r4
     4c4:	0e 94 66 13 	call	0x26cc	; 0x26cc <__gesf2>
     4c8:	18 16       	cp	r1, r24
     4ca:	24 f4       	brge	.+8      	; 0x4d4 <orientationCalculationFour+0x72>
     4cc:	26 01       	movw	r4, r12
     4ce:	37 01       	movw	r6, r14
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     4d0:	2b 80       	ldd	r2, Y+3	; 0x03
     4d2:	3c 80       	ldd	r3, Y+4	; 0x04
     4d4:	8b 81       	ldd	r24, Y+3	; 0x03
     4d6:	9c 81       	ldd	r25, Y+4	; 0x04
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	9c 83       	std	Y+4, r25	; 0x04
     4dc:	8b 83       	std	Y+3, r24	; 0x03
     4de:	06 97       	sbiw	r24, 0x06	; 6
     4e0:	39 f7       	brne	.-50     	; 0x4b0 <orientationCalculationFour+0x4e>
		}
	}
	
	//Find points used by shortest length	
	int* pointsShortRef;
	pointsShortRef = distIndex(indexMin);	
     4e2:	82 2d       	mov	r24, r2
     4e4:	93 2d       	mov	r25, r3
     4e6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <distIndex>
	int pointsShort[2] = {pointsShortRef[0], pointsShortRef[1]};	
     4ea:	fc 01       	movw	r30, r24
     4ec:	20 81       	ld	r18, Z
     4ee:	31 81       	ldd	r19, Z+1	; 0x01
     4f0:	42 81       	ldd	r20, Z+2	; 0x02
     4f2:	53 81       	ldd	r21, Z+3	; 0x03
	if (pointsShort[0] == pointsLong[0]){
     4f4:	f5 01       	movw	r30, r10
     4f6:	80 81       	ld	r24, Z
     4f8:	91 81       	ldd	r25, Z+1	; 0x01
     4fa:	28 17       	cp	r18, r24
     4fc:	39 07       	cpc	r19, r25
     4fe:	59 f4       	brne	.+22     	; 0x516 <orientationCalculationFour+0xb4>
		*top = pointsLong[0];
     500:	f4 01       	movw	r30, r8
     502:	31 83       	std	Z+1, r19	; 0x01
     504:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     506:	f5 01       	movw	r30, r10
     508:	82 81       	ldd	r24, Z+2	; 0x02
     50a:	93 81       	ldd	r25, Z+3	; 0x03
     50c:	e9 81       	ldd	r30, Y+1	; 0x01
     50e:	fa 81       	ldd	r31, Y+2	; 0x02
     510:	91 83       	std	Z+1, r25	; 0x01
     512:	80 83       	st	Z, r24
     514:	3c c0       	rjmp	.+120    	; 0x58e <orientationCalculationFour+0x12c>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     516:	f5 01       	movw	r30, r10
     518:	62 81       	ldd	r22, Z+2	; 0x02
     51a:	73 81       	ldd	r23, Z+3	; 0x03
     51c:	26 17       	cp	r18, r22
     51e:	37 07       	cpc	r19, r23
     520:	59 f4       	brne	.+22     	; 0x538 <orientationCalculationFour+0xd6>
			*top = pointsLong[1];
     522:	f4 01       	movw	r30, r8
     524:	31 83       	std	Z+1, r19	; 0x01
     526:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     528:	f5 01       	movw	r30, r10
     52a:	80 81       	ld	r24, Z
     52c:	91 81       	ldd	r25, Z+1	; 0x01
     52e:	e9 81       	ldd	r30, Y+1	; 0x01
     530:	fa 81       	ldd	r31, Y+2	; 0x02
     532:	91 83       	std	Z+1, r25	; 0x01
     534:	80 83       	st	Z, r24
     536:	2b c0       	rjmp	.+86     	; 0x58e <orientationCalculationFour+0x12c>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     538:	48 17       	cp	r20, r24
     53a:	59 07       	cpc	r21, r25
     53c:	59 f4       	brne	.+22     	; 0x554 <orientationCalculationFour+0xf2>
				*top = pointsLong[0];
     53e:	f4 01       	movw	r30, r8
     540:	51 83       	std	Z+1, r21	; 0x01
     542:	40 83       	st	Z, r20
				*bottom = pointsLong[1];
     544:	f5 01       	movw	r30, r10
     546:	82 81       	ldd	r24, Z+2	; 0x02
     548:	93 81       	ldd	r25, Z+3	; 0x03
     54a:	e9 81       	ldd	r30, Y+1	; 0x01
     54c:	fa 81       	ldd	r31, Y+2	; 0x02
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	80 83       	st	Z, r24
     552:	1d c0       	rjmp	.+58     	; 0x58e <orientationCalculationFour+0x12c>
			} else {
				if (pointsShort[1] == pointsLong[1])
     554:	46 17       	cp	r20, r22
     556:	57 07       	cpc	r21, r23
     558:	59 f4       	brne	.+22     	; 0x570 <orientationCalculationFour+0x10e>
				{
					*top = pointsLong[1];
     55a:	f4 01       	movw	r30, r8
     55c:	51 83       	std	Z+1, r21	; 0x01
     55e:	40 83       	st	Z, r20
					*bottom = pointsLong[0];
     560:	f5 01       	movw	r30, r10
     562:	80 81       	ld	r24, Z
     564:	91 81       	ldd	r25, Z+1	; 0x01
     566:	e9 81       	ldd	r30, Y+1	; 0x01
     568:	fa 81       	ldd	r31, Y+2	; 0x02
     56a:	91 83       	std	Z+1, r25	; 0x01
     56c:	80 83       	st	Z, r24
     56e:	0f c0       	rjmp	.+30     	; 0x58e <orientationCalculationFour+0x12c>
				} else {
						m_green(OFF);
     570:	6a 9a       	sbi	0x0d, 2	; 13
     572:	72 9a       	sbi	0x0e, 2	; 14
						*top = pointsLong[1];
     574:	f5 01       	movw	r30, r10
     576:	82 81       	ldd	r24, Z+2	; 0x02
     578:	93 81       	ldd	r25, Z+3	; 0x03
     57a:	f4 01       	movw	r30, r8
     57c:	91 83       	std	Z+1, r25	; 0x01
     57e:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     580:	f5 01       	movw	r30, r10
     582:	80 81       	ld	r24, Z
     584:	91 81       	ldd	r25, Z+1	; 0x01
     586:	e9 81       	ldd	r30, Y+1	; 0x01
     588:	fa 81       	ldd	r31, Y+2	; 0x02
     58a:	91 83       	std	Z+1, r25	; 0x01
     58c:	80 83       	st	Z, r24
				}
			}
		}
	}
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	bf 90       	pop	r11
     5a8:	af 90       	pop	r10
     5aa:	9f 90       	pop	r9
     5ac:	8f 90       	pop	r8
     5ae:	7f 90       	pop	r7
     5b0:	6f 90       	pop	r6
     5b2:	5f 90       	pop	r5
     5b4:	4f 90       	pop	r4
     5b6:	3f 90       	pop	r3
     5b8:	2f 90       	pop	r2
     5ba:	08 95       	ret

000005bc <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     5bc:	2f 92       	push	r2
     5be:	3f 92       	push	r3
     5c0:	4f 92       	push	r4
     5c2:	5f 92       	push	r5
     5c4:	6f 92       	push	r6
     5c6:	7f 92       	push	r7
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	c2 54       	subi	r28, 0x42	; 66
     5e6:	d1 09       	sbc	r29, r1
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     5f4:	fc 01       	movw	r30, r24
     5f6:	04 80       	ldd	r0, Z+4	; 0x04
     5f8:	f5 81       	ldd	r31, Z+5	; 0x05
     5fa:	e0 2d       	mov	r30, r0
     5fc:	fa a3       	std	Y+34, r31	; 0x22
     5fe:	e9 a3       	std	Y+33, r30	; 0x21
     600:	fc 01       	movw	r30, r24
     602:	00 81       	ld	r16, Z
     604:	11 81       	ldd	r17, Z+1	; 0x01
     606:	69 a1       	ldd	r22, Y+33	; 0x21
     608:	7a a1       	ldd	r23, Y+34	; 0x22
     60a:	60 1b       	sub	r22, r16
     60c:	71 0b       	sbc	r23, r17
     60e:	07 2e       	mov	r0, r23
     610:	00 0c       	add	r0, r0
     612:	88 0b       	sbc	r24, r24
     614:	99 0b       	sbc	r25, r25
     616:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     61a:	6b 01       	movw	r12, r22
     61c:	7c 01       	movw	r14, r24
     61e:	f2 01       	movw	r30, r4
     620:	06 80       	ldd	r0, Z+6	; 0x06
     622:	f7 81       	ldd	r31, Z+7	; 0x07
     624:	e0 2d       	mov	r30, r0
     626:	fe a3       	std	Y+38, r31	; 0x26
     628:	ed a3       	std	Y+37, r30	; 0x25
     62a:	f2 01       	movw	r30, r4
     62c:	22 80       	ldd	r2, Z+2	; 0x02
     62e:	33 80       	ldd	r3, Z+3	; 0x03
     630:	ad a0       	ldd	r10, Y+37	; 0x25
     632:	be a0       	ldd	r11, Y+38	; 0x26
     634:	a2 18       	sub	r10, r2
     636:	b3 08       	sbc	r11, r3
     638:	9b 01       	movw	r18, r22
     63a:	ac 01       	movw	r20, r24
     63c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     640:	69 a7       	std	Y+41, r22	; 0x29
     642:	7a a7       	std	Y+42, r23	; 0x2a
     644:	8b a7       	std	Y+43, r24	; 0x2b
     646:	9c a7       	std	Y+44, r25	; 0x2c
     648:	aa 9c       	mul	r10, r10
     64a:	40 01       	movw	r8, r0
     64c:	ab 9c       	mul	r10, r11
     64e:	90 0c       	add	r9, r0
     650:	90 0c       	add	r9, r0
     652:	11 24       	eor	r1, r1
     654:	09 2c       	mov	r0, r9
     656:	00 0c       	add	r0, r0
     658:	aa 08       	sbc	r10, r10
     65a:	bb 08       	sbc	r11, r11
     65c:	a7 01       	movw	r20, r14
     65e:	96 01       	movw	r18, r12
     660:	c7 01       	movw	r24, r14
     662:	b6 01       	movw	r22, r12
     664:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     668:	6b 01       	movw	r12, r22
     66a:	7c 01       	movw	r14, r24
     66c:	c5 01       	movw	r24, r10
     66e:	b4 01       	movw	r22, r8
     670:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     674:	9b 01       	movw	r18, r22
     676:	ac 01       	movw	r20, r24
     678:	c7 01       	movw	r24, r14
     67a:	b6 01       	movw	r22, r12
     67c:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
     680:	0e 94 ee 13 	call	0x27dc	; 0x27dc <sqrt>
     684:	6b af       	std	Y+59, r22	; 0x3b
     686:	7c af       	std	Y+60, r23	; 0x3c
     688:	8d af       	std	Y+61, r24	; 0x3d
     68a:	9e af       	std	Y+62, r25	; 0x3e
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     68c:	f2 01       	movw	r30, r4
     68e:	00 84       	ldd	r0, Z+8	; 0x08
     690:	f1 85       	ldd	r31, Z+9	; 0x09
     692:	e0 2d       	mov	r30, r0
     694:	fa a7       	std	Y+42, r31	; 0x2a
     696:	e9 a7       	std	Y+41, r30	; 0x29
     698:	bf 01       	movw	r22, r30
     69a:	60 1b       	sub	r22, r16
     69c:	71 0b       	sbc	r23, r17
     69e:	07 2e       	mov	r0, r23
     6a0:	00 0c       	add	r0, r0
     6a2:	88 0b       	sbc	r24, r24
     6a4:	99 0b       	sbc	r25, r25
     6a6:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     6aa:	6b 01       	movw	r12, r22
     6ac:	7c 01       	movw	r14, r24
     6ae:	f2 01       	movw	r30, r4
     6b0:	62 84       	ldd	r6, Z+10	; 0x0a
     6b2:	73 84       	ldd	r7, Z+11	; 0x0b
     6b4:	53 01       	movw	r10, r6
     6b6:	a2 18       	sub	r10, r2
     6b8:	b3 08       	sbc	r11, r3
     6ba:	9b 01       	movw	r18, r22
     6bc:	ac 01       	movw	r20, r24
     6be:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     6c2:	6d a7       	std	Y+45, r22	; 0x2d
     6c4:	7e a7       	std	Y+46, r23	; 0x2e
     6c6:	8f a7       	std	Y+47, r24	; 0x2f
     6c8:	98 ab       	std	Y+48, r25	; 0x30
     6ca:	aa 9c       	mul	r10, r10
     6cc:	40 01       	movw	r8, r0
     6ce:	ab 9c       	mul	r10, r11
     6d0:	90 0c       	add	r9, r0
     6d2:	90 0c       	add	r9, r0
     6d4:	11 24       	eor	r1, r1
     6d6:	09 2c       	mov	r0, r9
     6d8:	00 0c       	add	r0, r0
     6da:	aa 08       	sbc	r10, r10
     6dc:	bb 08       	sbc	r11, r11
     6de:	a7 01       	movw	r20, r14
     6e0:	96 01       	movw	r18, r12
     6e2:	c7 01       	movw	r24, r14
     6e4:	b6 01       	movw	r22, r12
     6e6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     6ea:	6b 01       	movw	r12, r22
     6ec:	7c 01       	movw	r14, r24
     6ee:	c5 01       	movw	r24, r10
     6f0:	b4 01       	movw	r22, r8
     6f2:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     6f6:	9b 01       	movw	r18, r22
     6f8:	ac 01       	movw	r20, r24
     6fa:	c7 01       	movw	r24, r14
     6fc:	b6 01       	movw	r22, r12
     6fe:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
     702:	0e 94 ee 13 	call	0x27dc	; 0x27dc <sqrt>
     706:	23 96       	adiw	r28, 0x03	; 3
     708:	6c af       	std	Y+60, r22	; 0x3c
     70a:	7d af       	std	Y+61, r23	; 0x3d
     70c:	8e af       	std	Y+62, r24	; 0x3e
     70e:	9f af       	std	Y+63, r25	; 0x3f
     710:	23 97       	sbiw	r28, 0x03	; 3
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     712:	f2 01       	movw	r30, r4
     714:	04 84       	ldd	r0, Z+12	; 0x0c
     716:	f5 85       	ldd	r31, Z+13	; 0x0d
     718:	e0 2d       	mov	r30, r0
     71a:	fe a7       	std	Y+46, r31	; 0x2e
     71c:	ed a7       	std	Y+45, r30	; 0x2d
     71e:	bf 01       	movw	r22, r30
     720:	60 1b       	sub	r22, r16
     722:	71 0b       	sbc	r23, r17
     724:	07 2e       	mov	r0, r23
     726:	00 0c       	add	r0, r0
     728:	88 0b       	sbc	r24, r24
     72a:	99 0b       	sbc	r25, r25
     72c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     730:	4b 01       	movw	r8, r22
     732:	5c 01       	movw	r10, r24
     734:	f2 01       	movw	r30, r4
     736:	06 84       	ldd	r0, Z+14	; 0x0e
     738:	f7 85       	ldd	r31, Z+15	; 0x0f
     73a:	e0 2d       	mov	r30, r0
     73c:	fa ab       	std	Y+50, r31	; 0x32
     73e:	e9 ab       	std	Y+49, r30	; 0x31
     740:	8f 01       	movw	r16, r30
     742:	02 19       	sub	r16, r2
     744:	13 09       	sbc	r17, r3
     746:	9b 01       	movw	r18, r22
     748:	ac 01       	movw	r20, r24
     74a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     74e:	6b ab       	std	Y+51, r22	; 0x33
     750:	7c ab       	std	Y+52, r23	; 0x34
     752:	8d ab       	std	Y+53, r24	; 0x35
     754:	9e ab       	std	Y+54, r25	; 0x36
     756:	00 9f       	mul	r16, r16
     758:	60 01       	movw	r12, r0
     75a:	01 9f       	mul	r16, r17
     75c:	d0 0c       	add	r13, r0
     75e:	d0 0c       	add	r13, r0
     760:	11 24       	eor	r1, r1
     762:	0d 2c       	mov	r0, r13
     764:	00 0c       	add	r0, r0
     766:	ee 08       	sbc	r14, r14
     768:	ff 08       	sbc	r15, r15
     76a:	a5 01       	movw	r20, r10
     76c:	94 01       	movw	r18, r8
     76e:	c5 01       	movw	r24, r10
     770:	b4 01       	movw	r22, r8
     772:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     776:	4b 01       	movw	r8, r22
     778:	5c 01       	movw	r10, r24
     77a:	c7 01       	movw	r24, r14
     77c:	b6 01       	movw	r22, r12
     77e:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     782:	9b 01       	movw	r18, r22
     784:	ac 01       	movw	r20, r24
     786:	c5 01       	movw	r24, r10
     788:	b4 01       	movw	r22, r8
     78a:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
     78e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <sqrt>
     792:	6b ab       	std	Y+51, r22	; 0x33
     794:	7c ab       	std	Y+52, r23	; 0x34
     796:	8d ab       	std	Y+53, r24	; 0x35
     798:	9e ab       	std	Y+54, r25	; 0x36
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     79a:	69 a5       	ldd	r22, Y+41	; 0x29
     79c:	7a a5       	ldd	r23, Y+42	; 0x2a
     79e:	29 a1       	ldd	r18, Y+33	; 0x21
     7a0:	3a a1       	ldd	r19, Y+34	; 0x22
     7a2:	62 1b       	sub	r22, r18
     7a4:	73 0b       	sbc	r23, r19
     7a6:	07 2e       	mov	r0, r23
     7a8:	00 0c       	add	r0, r0
     7aa:	88 0b       	sbc	r24, r24
     7ac:	99 0b       	sbc	r25, r25
     7ae:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     7b2:	4b 01       	movw	r8, r22
     7b4:	5c 01       	movw	r10, r24
     7b6:	83 01       	movw	r16, r6
     7b8:	4d a1       	ldd	r20, Y+37	; 0x25
     7ba:	5e a1       	ldd	r21, Y+38	; 0x26
     7bc:	04 1b       	sub	r16, r20
     7be:	15 0b       	sbc	r17, r21
     7c0:	9b 01       	movw	r18, r22
     7c2:	ac 01       	movw	r20, r24
     7c4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     7c8:	6f ab       	std	Y+55, r22	; 0x37
     7ca:	78 af       	std	Y+56, r23	; 0x38
     7cc:	89 af       	std	Y+57, r24	; 0x39
     7ce:	9a af       	std	Y+58, r25	; 0x3a
     7d0:	00 9f       	mul	r16, r16
     7d2:	60 01       	movw	r12, r0
     7d4:	01 9f       	mul	r16, r17
     7d6:	d0 0c       	add	r13, r0
     7d8:	d0 0c       	add	r13, r0
     7da:	11 24       	eor	r1, r1
     7dc:	0d 2c       	mov	r0, r13
     7de:	00 0c       	add	r0, r0
     7e0:	ee 08       	sbc	r14, r14
     7e2:	ff 08       	sbc	r15, r15
     7e4:	a5 01       	movw	r20, r10
     7e6:	94 01       	movw	r18, r8
     7e8:	c5 01       	movw	r24, r10
     7ea:	b4 01       	movw	r22, r8
     7ec:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     7f0:	4b 01       	movw	r8, r22
     7f2:	5c 01       	movw	r10, r24
     7f4:	c7 01       	movw	r24, r14
     7f6:	b6 01       	movw	r22, r12
     7f8:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     7fc:	9b 01       	movw	r18, r22
     7fe:	ac 01       	movw	r20, r24
     800:	c5 01       	movw	r24, r10
     802:	b4 01       	movw	r22, r8
     804:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
     808:	0e 94 ee 13 	call	0x27dc	; 0x27dc <sqrt>
     80c:	6f ab       	std	Y+55, r22	; 0x37
     80e:	78 af       	std	Y+56, r23	; 0x38
     810:	89 af       	std	Y+57, r24	; 0x39
     812:	9a af       	std	Y+58, r25	; 0x3a
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     814:	6d a5       	ldd	r22, Y+45	; 0x2d
     816:	7e a5       	ldd	r23, Y+46	; 0x2e
     818:	89 a1       	ldd	r24, Y+33	; 0x21
     81a:	9a a1       	ldd	r25, Y+34	; 0x22
     81c:	68 1b       	sub	r22, r24
     81e:	79 0b       	sbc	r23, r25
     820:	07 2e       	mov	r0, r23
     822:	00 0c       	add	r0, r0
     824:	88 0b       	sbc	r24, r24
     826:	99 0b       	sbc	r25, r25
     828:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     82c:	4b 01       	movw	r8, r22
     82e:	5c 01       	movw	r10, r24
     830:	09 a9       	ldd	r16, Y+49	; 0x31
     832:	1a a9       	ldd	r17, Y+50	; 0x32
     834:	ed a1       	ldd	r30, Y+37	; 0x25
     836:	fe a1       	ldd	r31, Y+38	; 0x26
     838:	0e 1b       	sub	r16, r30
     83a:	1f 0b       	sbc	r17, r31
     83c:	9b 01       	movw	r18, r22
     83e:	ac 01       	movw	r20, r24
     840:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     844:	69 a3       	std	Y+33, r22	; 0x21
     846:	7a a3       	std	Y+34, r23	; 0x22
     848:	8b a3       	std	Y+35, r24	; 0x23
     84a:	9c a3       	std	Y+36, r25	; 0x24
     84c:	00 9f       	mul	r16, r16
     84e:	60 01       	movw	r12, r0
     850:	01 9f       	mul	r16, r17
     852:	d0 0c       	add	r13, r0
     854:	d0 0c       	add	r13, r0
     856:	11 24       	eor	r1, r1
     858:	0d 2c       	mov	r0, r13
     85a:	00 0c       	add	r0, r0
     85c:	ee 08       	sbc	r14, r14
     85e:	ff 08       	sbc	r15, r15
     860:	a5 01       	movw	r20, r10
     862:	94 01       	movw	r18, r8
     864:	c5 01       	movw	r24, r10
     866:	b4 01       	movw	r22, r8
     868:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     86c:	4b 01       	movw	r8, r22
     86e:	5c 01       	movw	r10, r24
     870:	c7 01       	movw	r24, r14
     872:	b6 01       	movw	r22, r12
     874:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	c5 01       	movw	r24, r10
     87e:	b4 01       	movw	r22, r8
     880:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
     884:	0e 94 ee 13 	call	0x27dc	; 0x27dc <sqrt>
     888:	4b 01       	movw	r8, r22
     88a:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     88c:	6d a5       	ldd	r22, Y+45	; 0x2d
     88e:	7e a5       	ldd	r23, Y+46	; 0x2e
     890:	29 a5       	ldd	r18, Y+41	; 0x29
     892:	3a a5       	ldd	r19, Y+42	; 0x2a
     894:	62 1b       	sub	r22, r18
     896:	73 0b       	sbc	r23, r19
     898:	07 2e       	mov	r0, r23
     89a:	00 0c       	add	r0, r0
     89c:	88 0b       	sbc	r24, r24
     89e:	99 0b       	sbc	r25, r25
     8a0:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     8a4:	69 a3       	std	Y+33, r22	; 0x21
     8a6:	7a a3       	std	Y+34, r23	; 0x22
     8a8:	8b a3       	std	Y+35, r24	; 0x23
     8aa:	9c a3       	std	Y+36, r25	; 0x24
     8ac:	09 a9       	ldd	r16, Y+49	; 0x31
     8ae:	1a a9       	ldd	r17, Y+50	; 0x32
     8b0:	06 19       	sub	r16, r6
     8b2:	17 09       	sbc	r17, r7
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     8bc:	6d a3       	std	Y+37, r22	; 0x25
     8be:	7e a3       	std	Y+38, r23	; 0x26
     8c0:	8f a3       	std	Y+39, r24	; 0x27
     8c2:	98 a7       	std	Y+40, r25	; 0x28
     8c4:	00 9f       	mul	r16, r16
     8c6:	60 01       	movw	r12, r0
     8c8:	01 9f       	mul	r16, r17
     8ca:	d0 0c       	add	r13, r0
     8cc:	d0 0c       	add	r13, r0
     8ce:	11 24       	eor	r1, r1
     8d0:	0d 2c       	mov	r0, r13
     8d2:	00 0c       	add	r0, r0
     8d4:	ee 08       	sbc	r14, r14
     8d6:	ff 08       	sbc	r15, r15
     8d8:	29 a1       	ldd	r18, Y+33	; 0x21
     8da:	3a a1       	ldd	r19, Y+34	; 0x22
     8dc:	4b a1       	ldd	r20, Y+35	; 0x23
     8de:	5c a1       	ldd	r21, Y+36	; 0x24
     8e0:	ca 01       	movw	r24, r20
     8e2:	b9 01       	movw	r22, r18
     8e4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     8e8:	69 a3       	std	Y+33, r22	; 0x21
     8ea:	7a a3       	std	Y+34, r23	; 0x22
     8ec:	8b a3       	std	Y+35, r24	; 0x23
     8ee:	9c a3       	std	Y+36, r25	; 0x24
     8f0:	c7 01       	movw	r24, r14
     8f2:	b6 01       	movw	r22, r12
     8f4:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     8f8:	9b 01       	movw	r18, r22
     8fa:	ac 01       	movw	r20, r24
     8fc:	69 a1       	ldd	r22, Y+33	; 0x21
     8fe:	7a a1       	ldd	r23, Y+34	; 0x22
     900:	8b a1       	ldd	r24, Y+35	; 0x23
     902:	9c a1       	ldd	r25, Y+36	; 0x24
     904:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
     908:	0e 94 ee 13 	call	0x27dc	; 0x27dc <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     90c:	2b ad       	ldd	r18, Y+59	; 0x3b
     90e:	3c ad       	ldd	r19, Y+60	; 0x3c
     910:	4d ad       	ldd	r20, Y+61	; 0x3d
     912:	5e ad       	ldd	r21, Y+62	; 0x3e
     914:	29 83       	std	Y+1, r18	; 0x01
     916:	3a 83       	std	Y+2, r19	; 0x02
     918:	4b 83       	std	Y+3, r20	; 0x03
     91a:	5c 83       	std	Y+4, r21	; 0x04
     91c:	23 96       	adiw	r28, 0x03	; 3
     91e:	2c ad       	ldd	r18, Y+60	; 0x3c
     920:	3d ad       	ldd	r19, Y+61	; 0x3d
     922:	4e ad       	ldd	r20, Y+62	; 0x3e
     924:	5f ad       	ldd	r21, Y+63	; 0x3f
     926:	23 97       	sbiw	r28, 0x03	; 3
     928:	2d 83       	std	Y+5, r18	; 0x05
     92a:	3e 83       	std	Y+6, r19	; 0x06
     92c:	4f 83       	std	Y+7, r20	; 0x07
     92e:	58 87       	std	Y+8, r21	; 0x08
     930:	2b a9       	ldd	r18, Y+51	; 0x33
     932:	3c a9       	ldd	r19, Y+52	; 0x34
     934:	4d a9       	ldd	r20, Y+53	; 0x35
     936:	5e a9       	ldd	r21, Y+54	; 0x36
     938:	29 87       	std	Y+9, r18	; 0x09
     93a:	3a 87       	std	Y+10, r19	; 0x0a
     93c:	4b 87       	std	Y+11, r20	; 0x0b
     93e:	5c 87       	std	Y+12, r21	; 0x0c
     940:	2f a9       	ldd	r18, Y+55	; 0x37
     942:	38 ad       	ldd	r19, Y+56	; 0x38
     944:	49 ad       	ldd	r20, Y+57	; 0x39
     946:	5a ad       	ldd	r21, Y+58	; 0x3a
     948:	2d 87       	std	Y+13, r18	; 0x0d
     94a:	3e 87       	std	Y+14, r19	; 0x0e
     94c:	4f 87       	std	Y+15, r20	; 0x0f
     94e:	58 8b       	std	Y+16, r21	; 0x10
     950:	89 8a       	std	Y+17, r8	; 0x11
     952:	9a 8a       	std	Y+18, r9	; 0x12
     954:	ab 8a       	std	Y+19, r10	; 0x13
     956:	bc 8a       	std	Y+20, r11	; 0x14
     958:	6d 8b       	std	Y+21, r22	; 0x15
     95a:	7e 8b       	std	Y+22, r23	; 0x16
     95c:	8f 8b       	std	Y+23, r24	; 0x17
     95e:	98 8f       	std	Y+24, r25	; 0x18
     960:	ae 01       	movw	r20, r28
     962:	4f 5f       	subi	r20, 0xFF	; 255
     964:	5f 4f       	sbci	r21, 0xFF	; 255
     966:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     968:	00 e0       	ldi	r16, 0x00	; 0
     96a:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     96c:	61 2c       	mov	r6, r1
     96e:	71 2c       	mov	r7, r1
     970:	c1 2c       	mov	r12, r1
     972:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     974:	21 2c       	mov	r2, r1
     976:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     978:	f7 01       	movw	r30, r14
     97a:	81 90       	ld	r8, Z+
     97c:	91 90       	ld	r9, Z+
     97e:	a1 90       	ld	r10, Z+
     980:	b1 90       	ld	r11, Z+
     982:	7f 01       	movw	r14, r30
     984:	26 2d       	mov	r18, r6
     986:	37 2d       	mov	r19, r7
     988:	4c 2d       	mov	r20, r12
     98a:	5d 2d       	mov	r21, r13
     98c:	c5 01       	movw	r24, r10
     98e:	b4 01       	movw	r22, r8
     990:	0e 94 66 13 	call	0x26cc	; 0x26cc <__gesf2>
     994:	18 16       	cp	r1, r24
     996:	34 f4       	brge	.+12     	; 0x9a4 <fourPointCalc+0x3e8>
			indexMax = i;
			maxVal = distVect[i];
     998:	68 2c       	mov	r6, r8
     99a:	79 2c       	mov	r7, r9
     99c:	ca 2c       	mov	r12, r10
     99e:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     9a0:	20 2e       	mov	r2, r16
     9a2:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     9a4:	0f 5f       	subi	r16, 0xFF	; 255
     9a6:	1f 4f       	sbci	r17, 0xFF	; 255
     9a8:	06 30       	cpi	r16, 0x06	; 6
     9aa:	11 05       	cpc	r17, r1
     9ac:	29 f7       	brne	.-54     	; 0x978 <fourPointCalc+0x3bc>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLongRef; 
	pointsLongRef = distIndex(indexMax);
     9ae:	82 2d       	mov	r24, r2
     9b0:	93 2d       	mov	r25, r3
     9b2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <distIndex>
	
	int pointsLong[2] = {(pointsLongRef[0]), (pointsLongRef[1])};
     9b6:	fc 01       	movw	r30, r24
     9b8:	e0 80       	ld	r14, Z
     9ba:	f1 80       	ldd	r15, Z+1	; 0x01
     9bc:	fa 8e       	std	Y+26, r15	; 0x1a
     9be:	e9 8e       	std	Y+25, r14	; 0x19
     9c0:	02 81       	ldd	r16, Z+2	; 0x02
     9c2:	13 81       	ldd	r17, Z+3	; 0x03
     9c4:	1c 8f       	std	Y+28, r17	; 0x1c
     9c6:	0b 8f       	std	Y+27, r16	; 0x1b
	
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     9c8:	ee 0c       	add	r14, r14
     9ca:	ff 1c       	adc	r15, r15
     9cc:	ee 0c       	add	r14, r14
     9ce:	ff 1c       	adc	r15, r15
     9d0:	e4 0c       	add	r14, r4
     9d2:	f5 1c       	adc	r15, r5
     9d4:	00 0f       	add	r16, r16
     9d6:	11 1f       	adc	r17, r17
     9d8:	00 0f       	add	r16, r16
     9da:	11 1f       	adc	r17, r17
     9dc:	04 0d       	add	r16, r4
     9de:	15 1d       	adc	r17, r5
     9e0:	f7 01       	movw	r30, r14
     9e2:	60 81       	ld	r22, Z
     9e4:	71 81       	ldd	r23, Z+1	; 0x01
     9e6:	f8 01       	movw	r30, r16
     9e8:	80 81       	ld	r24, Z
     9ea:	91 81       	ldd	r25, Z+1	; 0x01
     9ec:	68 0f       	add	r22, r24
     9ee:	79 1f       	adc	r23, r25
     9f0:	77 23       	and	r23, r23
     9f2:	14 f4       	brge	.+4      	; 0x9f8 <fourPointCalc+0x43c>
     9f4:	6f 5f       	subi	r22, 0xFF	; 255
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	75 95       	asr	r23
     9fa:	67 95       	ror	r22
     9fc:	07 2e       	mov	r0, r23
     9fe:	00 0c       	add	r0, r0
     a00:	88 0b       	sbc	r24, r24
     a02:	99 0b       	sbc	r25, r25
     a04:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     a08:	4b 01       	movw	r8, r22
     a0a:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     a0c:	f7 01       	movw	r30, r14
     a0e:	62 81       	ldd	r22, Z+2	; 0x02
     a10:	73 81       	ldd	r23, Z+3	; 0x03
     a12:	f8 01       	movw	r30, r16
     a14:	82 81       	ldd	r24, Z+2	; 0x02
     a16:	93 81       	ldd	r25, Z+3	; 0x03
     a18:	68 0f       	add	r22, r24
     a1a:	79 1f       	adc	r23, r25
     a1c:	77 23       	and	r23, r23
     a1e:	14 f4       	brge	.+4      	; 0xa24 <fourPointCalc+0x468>
     a20:	6f 5f       	subi	r22, 0xFF	; 255
     a22:	7f 4f       	sbci	r23, 0xFF	; 255
     a24:	75 95       	asr	r23
     a26:	67 95       	ror	r22
     a28:	07 2e       	mov	r0, r23
     a2a:	00 0c       	add	r0, r0
     a2c:	88 0b       	sbc	r24, r24
     a2e:	99 0b       	sbc	r25, r25
     a30:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     a34:	69 a3       	std	Y+33, r22	; 0x21
     a36:	7a a3       	std	Y+34, r23	; 0x22
     a38:	8b a3       	std	Y+35, r24	; 0x23
     a3a:	9c a3       	std	Y+36, r25	; 0x24
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     a3c:	9e 01       	movw	r18, r28
     a3e:	21 5e       	subi	r18, 0xE1	; 225
     a40:	3f 4f       	sbci	r19, 0xFF	; 255
     a42:	ae 01       	movw	r20, r28
     a44:	43 5e       	subi	r20, 0xE3	; 227
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	be 01       	movw	r22, r28
     a4a:	6f 5f       	subi	r22, 0xFF	; 255
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	ce 01       	movw	r24, r28
     a50:	49 96       	adiw	r24, 0x19	; 25
     a52:	0e 94 31 02 	call	0x462	; 0x462 <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     a56:	0d 8d       	ldd	r16, Y+29	; 0x1d
     a58:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a5a:	00 0f       	add	r16, r16
     a5c:	11 1f       	adc	r17, r17
     a5e:	00 0f       	add	r16, r16
     a60:	11 1f       	adc	r17, r17
     a62:	04 0d       	add	r16, r4
     a64:	15 1d       	adc	r17, r5
     a66:	2f 8c       	ldd	r2, Y+31	; 0x1f
     a68:	38 a0       	ldd	r3, Y+32	; 0x20
     a6a:	22 0c       	add	r2, r2
     a6c:	33 1c       	adc	r3, r3
     a6e:	22 0c       	add	r2, r2
     a70:	33 1c       	adc	r3, r3
     a72:	24 0c       	add	r2, r4
     a74:	35 1c       	adc	r3, r5
     a76:	f8 01       	movw	r30, r16
     a78:	60 81       	ld	r22, Z
     a7a:	71 81       	ldd	r23, Z+1	; 0x01
     a7c:	f1 01       	movw	r30, r2
     a7e:	80 81       	ld	r24, Z
     a80:	91 81       	ldd	r25, Z+1	; 0x01
     a82:	68 1b       	sub	r22, r24
     a84:	79 0b       	sbc	r23, r25
     a86:	07 2e       	mov	r0, r23
     a88:	00 0c       	add	r0, r0
     a8a:	88 0b       	sbc	r24, r24
     a8c:	99 0b       	sbc	r25, r25
     a8e:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
     a92:	6b 01       	movw	r12, r22
     a94:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     a96:	f8 01       	movw	r30, r16
     a98:	62 81       	ldd	r22, Z+2	; 0x02
     a9a:	73 81       	ldd	r23, Z+3	; 0x03
     a9c:	f1 01       	movw	r30, r2
     a9e:	82 81       	ldd	r24, Z+2	; 0x02
     aa0:	93 81       	ldd	r25, Z+3	; 0x03
     aa2:	68 1b       	sub	r22, r24
     aa4:	79 0b       	sbc	r23, r25
     aa6:	07 2e       	mov	r0, r23
     aa8:	00 0c       	add	r0, r0
     aaa:	88 0b       	sbc	r24, r24
     aac:	99 0b       	sbc	r25, r25
     aae:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     ab2:	90 58       	subi	r25, 0x80	; 128
     ab4:	a7 01       	movw	r20, r14
     ab6:	96 01       	movw	r18, r12
     ab8:	0e 94 44 11 	call	0x2288	; 0x2288 <atan2>
	theta += M_PI/2.0;
     abc:	2b ed       	ldi	r18, 0xDB	; 219
     abe:	3f e0       	ldi	r19, 0x0F	; 15
     ac0:	49 ec       	ldi	r20, 0xC9	; 201
     ac2:	5f e3       	ldi	r21, 0x3F	; 63
     ac4:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
     ac8:	6b 01       	movw	r12, r22
     aca:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     acc:	a5 01       	movw	r20, r10
     ace:	94 01       	movw	r18, r8
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	94 e4       	ldi	r25, 0x44	; 68
     ad8:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
     adc:	4b 01       	movw	r8, r22
     ade:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     ae0:	29 a1       	ldd	r18, Y+33	; 0x21
     ae2:	3a a1       	ldd	r19, Y+34	; 0x22
     ae4:	4b a1       	ldd	r20, Y+35	; 0x23
     ae6:	5c a1       	ldd	r21, Y+36	; 0x24
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	8f eb       	ldi	r24, 0xBF	; 191
     aee:	93 e4       	ldi	r25, 0x43	; 67
     af0:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
     af4:	2b 01       	movw	r4, r22
     af6:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     af8:	c7 01       	movw	r24, r14
     afa:	b6 01       	movw	r22, r12
     afc:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <sin>
     b00:	69 a3       	std	Y+33, r22	; 0x21
     b02:	7a a3       	std	Y+34, r23	; 0x22
     b04:	8b a3       	std	Y+35, r24	; 0x23
     b06:	9c a3       	std	Y+36, r25	; 0x24
     b08:	c7 01       	movw	r24, r14
     b0a:	b6 01       	movw	r22, r12
     b0c:	0e 94 a8 11 	call	0x2350	; 0x2350 <cos>
     b10:	6d a3       	std	Y+37, r22	; 0x25
     b12:	7e a3       	std	Y+38, r23	; 0x26
     b14:	8f a3       	std	Y+39, r24	; 0x27
     b16:	98 a7       	std	Y+40, r25	; 0x28
     b18:	02 e3       	ldi	r16, 0x32	; 50
     b1a:	11 e0       	ldi	r17, 0x01	; 1
     b1c:	29 a1       	ldd	r18, Y+33	; 0x21
     b1e:	3a a1       	ldd	r19, Y+34	; 0x22
     b20:	4b a1       	ldd	r20, Y+35	; 0x23
     b22:	5c a1       	ldd	r21, Y+36	; 0x24
     b24:	c3 01       	movw	r24, r6
     b26:	b2 01       	movw	r22, r4
     b28:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     b2c:	69 a7       	std	Y+41, r22	; 0x29
     b2e:	7a a7       	std	Y+42, r23	; 0x2a
     b30:	8b a7       	std	Y+43, r24	; 0x2b
     b32:	9c a7       	std	Y+44, r25	; 0x2c
     b34:	2d a1       	ldd	r18, Y+37	; 0x25
     b36:	3e a1       	ldd	r19, Y+38	; 0x26
     b38:	4f a1       	ldd	r20, Y+39	; 0x27
     b3a:	58 a5       	ldd	r21, Y+40	; 0x28
     b3c:	c5 01       	movw	r24, r10
     b3e:	b4 01       	movw	r22, r8
     b40:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     b44:	9b 01       	movw	r18, r22
     b46:	ac 01       	movw	r20, r24
     b48:	69 a5       	ldd	r22, Y+41	; 0x29
     b4a:	7a a5       	ldd	r23, Y+42	; 0x2a
     b4c:	8b a5       	ldd	r24, Y+43	; 0x2b
     b4e:	9c a5       	ldd	r25, Y+44	; 0x2c
     b50:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
     b54:	f8 01       	movw	r30, r16
     b56:	60 83       	st	Z, r22
     b58:	71 83       	std	Z+1, r23	; 0x01
     b5a:	82 83       	std	Z+2, r24	; 0x02
     b5c:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     b5e:	2d a1       	ldd	r18, Y+37	; 0x25
     b60:	3e a1       	ldd	r19, Y+38	; 0x26
     b62:	4f a1       	ldd	r20, Y+39	; 0x27
     b64:	58 a5       	ldd	r21, Y+40	; 0x28
     b66:	c3 01       	movw	r24, r6
     b68:	b2 01       	movw	r22, r4
     b6a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     b6e:	2b 01       	movw	r4, r22
     b70:	3c 01       	movw	r6, r24
     b72:	29 a1       	ldd	r18, Y+33	; 0x21
     b74:	3a a1       	ldd	r19, Y+34	; 0x22
     b76:	4b a1       	ldd	r20, Y+35	; 0x23
     b78:	5c a1       	ldd	r21, Y+36	; 0x24
     b7a:	c5 01       	movw	r24, r10
     b7c:	b4 01       	movw	r22, r8
     b7e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
     b82:	9b 01       	movw	r18, r22
     b84:	ac 01       	movw	r20, r24
     b86:	c3 01       	movw	r24, r6
     b88:	b2 01       	movw	r22, r4
     b8a:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
     b8e:	f8 01       	movw	r30, r16
     b90:	64 83       	std	Z+4, r22	; 0x04
     b92:	75 83       	std	Z+5, r23	; 0x05
     b94:	86 83       	std	Z+6, r24	; 0x06
     b96:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta;
     b98:	f7 fa       	bst	r15, 7
     b9a:	f0 94       	com	r15
     b9c:	f7 f8       	bld	r15, 7
     b9e:	f0 94       	com	r15
     ba0:	c0 86       	std	Z+8, r12	; 0x08
     ba2:	d1 86       	std	Z+9, r13	; 0x09
     ba4:	e2 86       	std	Z+10, r14	; 0x0a
     ba6:	f3 86       	std	Z+11, r15	; 0x0b
	
	return centerFour;
}
     ba8:	c8 01       	movw	r24, r16
     baa:	ce 5b       	subi	r28, 0xBE	; 190
     bac:	df 4f       	sbci	r29, 0xFF	; 255
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	df 90       	pop	r13
     bc6:	cf 90       	pop	r12
     bc8:	bf 90       	pop	r11
     bca:	af 90       	pop	r10
     bcc:	9f 90       	pop	r9
     bce:	8f 90       	pop	r8
     bd0:	7f 90       	pop	r7
     bd2:	6f 90       	pop	r6
     bd4:	5f 90       	pop	r5
     bd6:	4f 90       	pop	r4
     bd8:	3f 90       	pop	r3
     bda:	2f 90       	pop	r2
     bdc:	08 95       	ret

00000bde <localization_calc>:
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
     bde:	4f 92       	push	r4
     be0:	5f 92       	push	r5
     be2:	6f 92       	push	r6
     be4:	7f 92       	push	r7
     be6:	af 92       	push	r10
     be8:	bf 92       	push	r11
     bea:	cf 92       	push	r12
     bec:	df 92       	push	r13
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	68 97       	sbiw	r28, 0x18	; 24
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     c0c:	0d b7       	in	r16, 0x3d	; 61
     c0e:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     c10:	80 81       	ld	r24, Z
     c12:	91 81       	ldd	r25, Z+1	; 0x01
     c14:	9a 83       	std	Y+2, r25	; 0x02
     c16:	89 83       	std	Y+1, r24	; 0x01
     c18:	80 85       	ldd	r24, Z+8	; 0x08
     c1a:	91 85       	ldd	r25, Z+9	; 0x09
     c1c:	9c 83       	std	Y+4, r25	; 0x04
     c1e:	8b 83       	std	Y+3, r24	; 0x03
     c20:	82 81       	ldd	r24, Z+2	; 0x02
     c22:	93 81       	ldd	r25, Z+3	; 0x03
     c24:	9e 83       	std	Y+6, r25	; 0x06
     c26:	8d 83       	std	Y+5, r24	; 0x05
     c28:	82 85       	ldd	r24, Z+10	; 0x0a
     c2a:	93 85       	ldd	r25, Z+11	; 0x0b
     c2c:	98 87       	std	Y+8, r25	; 0x08
     c2e:	8f 83       	std	Y+7, r24	; 0x07
     c30:	84 81       	ldd	r24, Z+4	; 0x04
     c32:	95 81       	ldd	r25, Z+5	; 0x05
     c34:	9a 87       	std	Y+10, r25	; 0x0a
     c36:	89 87       	std	Y+9, r24	; 0x09
     c38:	84 85       	ldd	r24, Z+12	; 0x0c
     c3a:	95 85       	ldd	r25, Z+13	; 0x0d
     c3c:	9c 87       	std	Y+12, r25	; 0x0c
     c3e:	8b 87       	std	Y+11, r24	; 0x0b
     c40:	86 81       	ldd	r24, Z+6	; 0x06
     c42:	97 81       	ldd	r25, Z+7	; 0x07
     c44:	9e 87       	std	Y+14, r25	; 0x0e
     c46:	8d 87       	std	Y+13, r24	; 0x0d
     c48:	86 85       	ldd	r24, Z+14	; 0x0e
     c4a:	97 85       	ldd	r25, Z+15	; 0x0f
     c4c:	98 8b       	std	Y+16, r25	; 0x10
     c4e:	8f 87       	std	Y+15, r24	; 0x0f
		{rawStarData[3], rawStarData[7]}
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     c50:	fe 01       	movw	r30, r28
     c52:	71 96       	adiw	r30, 0x11	; 17
     c54:	88 e0       	ldi	r24, 0x08	; 8
     c56:	df 01       	movw	r26, r30
     c58:	1d 92       	st	X+, r1
     c5a:	8a 95       	dec	r24
     c5c:	e9 f7       	brne	.-6      	; 0xc58 <localization_calc+0x7a>
     c5e:	70 97       	sbiw	r30, 0x10	; 16
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     c68:	40 81       	ld	r20, Z
     c6a:	51 81       	ldd	r21, Z+1	; 0x01
     c6c:	4f 3f       	cpi	r20, 0xFF	; 255
     c6e:	53 40       	sbci	r21, 0x03	; 3
     c70:	71 f0       	breq	.+28     	; 0xc8e <localization_calc+0xb0>
			pointIndices[numPoints] = i;
     c72:	dc 01       	movw	r26, r24
     c74:	aa 0f       	add	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	4c 0f       	add	r20, r28
     c7e:	5d 1f       	adc	r21, r29
     c80:	a4 0f       	add	r26, r20
     c82:	b5 1f       	adc	r27, r21
     c84:	51 96       	adiw	r26, 0x11	; 17
     c86:	3c 93       	st	X, r19
     c88:	2e 93       	st	-X, r18
     c8a:	50 97       	sbiw	r26, 0x10	; 16
			numPoints++;
     c8c:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     c8e:	2f 5f       	subi	r18, 0xFF	; 255
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
     c92:	34 96       	adiw	r30, 0x04	; 4
     c94:	24 30       	cpi	r18, 0x04	; 4
     c96:	31 05       	cpc	r19, r1
     c98:	39 f7       	brne	.-50     	; 0xc68 <localization_calc+0x8a>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	09 f4       	brne	.+2      	; 0xca0 <localization_calc+0xc2>
     c9e:	8b c0       	rjmp	.+278    	; 0xdb6 <localization_calc+0x1d8>
     ca0:	ed b6       	in	r14, 0x3d	; 61
     ca2:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     ca4:	6c 01       	movw	r12, r24
     ca6:	cc 0c       	add	r12, r12
     ca8:	dd 1c       	adc	r13, r13
     caa:	cc 0c       	add	r12, r12
     cac:	dd 1c       	adc	r13, r13
     cae:	ad b7       	in	r26, 0x3d	; 61
     cb0:	be b7       	in	r27, 0x3e	; 62
     cb2:	ac 19       	sub	r26, r12
     cb4:	bd 09       	sbc	r27, r13
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	be bf       	out	0x3e, r27	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	ad bf       	out	0x3d, r26	; 61
     cc0:	ed b7       	in	r30, 0x3d	; 61
     cc2:	fe b7       	in	r31, 0x3e	; 62
     cc4:	31 96       	adiw	r30, 0x01	; 1
     cc6:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     cc8:	18 16       	cp	r1, r24
     cca:	19 06       	cpc	r1, r25
     ccc:	24 f5       	brge	.+72     	; 0xd16 <localization_calc+0x138>
     cce:	9e 01       	movw	r18, r28
     cd0:	2f 5e       	subi	r18, 0xEF	; 239
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	df 01       	movw	r26, r30
     cd6:	ce 0e       	add	r12, r30
     cd8:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     cda:	f9 01       	movw	r30, r18
     cdc:	41 91       	ld	r20, Z+
     cde:	51 91       	ld	r21, Z+
     ce0:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     ce2:	fa 01       	movw	r30, r20
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	41 e0       	ldi	r20, 0x01	; 1
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	4c 0f       	add	r20, r28
     cf2:	5d 1f       	adc	r21, r29
     cf4:	e4 0f       	add	r30, r20
     cf6:	f5 1f       	adc	r31, r21
     cf8:	40 81       	ld	r20, Z
     cfa:	51 81       	ldd	r21, Z+1	; 0x01
     cfc:	11 96       	adiw	r26, 0x01	; 1
     cfe:	5c 93       	st	X, r21
     d00:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     d02:	42 81       	ldd	r20, Z+2	; 0x02
     d04:	53 81       	ldd	r21, Z+3	; 0x03
     d06:	13 96       	adiw	r26, 0x03	; 3
     d08:	5c 93       	st	X, r21
     d0a:	4e 93       	st	-X, r20
     d0c:	12 97       	sbiw	r26, 0x02	; 2
     d0e:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     d10:	ac 15       	cp	r26, r12
     d12:	bd 05       	cpc	r27, r13
     d14:	11 f7       	brne	.-60     	; 0xcda <localization_calc+0xfc>
			points[i][0] = pvect[index][0];
			points[i][1] = pvect[index][1];
		}
		
		
		m_red(ON);
     d16:	6e 9a       	sbi	0x0d, 6	; 13
     d18:	76 98       	cbi	0x0e, 6	; 14
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     d1a:	db 01       	movw	r26, r22
     d1c:	4d 90       	ld	r4, X+
     d1e:	5d 90       	ld	r5, X+
     d20:	6d 90       	ld	r6, X+
     d22:	7c 90       	ld	r7, X
     d24:	13 97       	sbiw	r26, 0x03	; 3
     d26:	ea e4       	ldi	r30, 0x4A	; 74
     d28:	f1 e0       	ldi	r31, 0x01	; 1
     d2a:	40 82       	st	Z, r4
     d2c:	51 82       	std	Z+1, r5	; 0x01
     d2e:	62 82       	std	Z+2, r6	; 0x02
     d30:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     d32:	14 96       	adiw	r26, 0x04	; 4
     d34:	4d 90       	ld	r4, X+
     d36:	5d 90       	ld	r5, X+
     d38:	6d 90       	ld	r6, X+
     d3a:	7c 90       	ld	r7, X
     d3c:	17 97       	sbiw	r26, 0x07	; 7
     d3e:	44 82       	std	Z+4, r4	; 0x04
     d40:	55 82       	std	Z+5, r5	; 0x05
     d42:	66 82       	std	Z+6, r6	; 0x06
     d44:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     d46:	18 96       	adiw	r26, 0x08	; 8
     d48:	4d 91       	ld	r20, X+
     d4a:	5d 91       	ld	r21, X+
     d4c:	6d 91       	ld	r22, X+
     d4e:	7c 91       	ld	r23, X
     d50:	1b 97       	sbiw	r26, 0x0b	; 11
     d52:	40 87       	std	Z+8, r20	; 0x08
     d54:	51 87       	std	Z+9, r21	; 0x09
     d56:	62 87       	std	Z+10, r22	; 0x0a
     d58:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     d5a:	04 97       	sbiw	r24, 0x04	; 4
     d5c:	29 f4       	brne	.+10     	; 0xd68 <localization_calc+0x18a>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     d5e:	c5 01       	movw	r24, r10
     d60:	0e 94 de 02 	call	0x5bc	; 0x5bc <fourPointCalc>
     d64:	dc 01       	movw	r26, r24
				break;
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <localization_calc+0x18e>
				
			case 3 : 
				//calcPointer = threePointCalc(points);
				calcPointer = &rc[0];
     d68:	aa e4       	ldi	r26, 0x4A	; 74
     d6a:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				calcPointer = &rc[0];
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     d6c:	4d 91       	ld	r20, X+
     d6e:	5d 91       	ld	r21, X+
     d70:	6d 91       	ld	r22, X+
     d72:	7c 91       	ld	r23, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	ee e3       	ldi	r30, 0x3E	; 62
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	40 83       	st	Z, r20
     d7c:	51 83       	std	Z+1, r21	; 0x01
     d7e:	62 83       	std	Z+2, r22	; 0x02
     d80:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     d82:	14 96       	adiw	r26, 0x04	; 4
     d84:	4d 91       	ld	r20, X+
     d86:	5d 91       	ld	r21, X+
     d88:	6d 91       	ld	r22, X+
     d8a:	7c 91       	ld	r23, X
     d8c:	17 97       	sbiw	r26, 0x07	; 7
     d8e:	44 83       	std	Z+4, r20	; 0x04
     d90:	55 83       	std	Z+5, r21	; 0x05
     d92:	66 83       	std	Z+6, r22	; 0x06
     d94:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     d96:	18 96       	adiw	r26, 0x08	; 8
     d98:	8d 91       	ld	r24, X+
     d9a:	9d 91       	ld	r25, X+
     d9c:	0d 90       	ld	r0, X+
     d9e:	bc 91       	ld	r27, X
     da0:	a0 2d       	mov	r26, r0
     da2:	80 87       	std	Z+8, r24	; 0x08
     da4:	91 87       	std	Z+9, r25	; 0x09
     da6:	a2 87       	std	Z+10, r26	; 0x0a
     da8:	b3 87       	std	Z+11, r27	; 0x0b
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	fe be       	out	0x3e, r15	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	ed be       	out	0x3d, r14	; 61
     db4:	22 c0       	rjmp	.+68     	; 0xdfa <localization_calc+0x21c>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     db6:	fb 01       	movw	r30, r22
     db8:	80 81       	ld	r24, Z
     dba:	91 81       	ldd	r25, Z+1	; 0x01
     dbc:	a2 81       	ldd	r26, Z+2	; 0x02
     dbe:	b3 81       	ldd	r27, Z+3	; 0x03
     dc0:	ee e3       	ldi	r30, 0x3E	; 62
     dc2:	f1 e0       	ldi	r31, 0x01	; 1
     dc4:	80 83       	st	Z, r24
     dc6:	91 83       	std	Z+1, r25	; 0x01
     dc8:	a2 83       	std	Z+2, r26	; 0x02
     dca:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     dcc:	db 01       	movw	r26, r22
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	cd 90       	ld	r12, X+
     dd2:	dd 90       	ld	r13, X+
     dd4:	ed 90       	ld	r14, X+
     dd6:	fc 90       	ld	r15, X
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	c4 82       	std	Z+4, r12	; 0x04
     ddc:	d5 82       	std	Z+5, r13	; 0x05
     dde:	e6 82       	std	Z+6, r14	; 0x06
     de0:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];
     de2:	18 96       	adiw	r26, 0x08	; 8
     de4:	4d 91       	ld	r20, X+
     de6:	5d 91       	ld	r21, X+
     de8:	6d 91       	ld	r22, X+
     dea:	7c 91       	ld	r23, X
     dec:	1b 97       	sbiw	r26, 0x0b	; 11
     dee:	40 87       	std	Z+8, r20	; 0x08
     df0:	51 87       	std	Z+9, r21	; 0x09
     df2:	62 87       	std	Z+10, r22	; 0x0a
     df4:	73 87       	std	Z+11, r23	; 0x0b
		m_red(OFF);	
     df6:	6e 9a       	sbi	0x0d, 6	; 13
     df8:	76 9a       	sbi	0x0e, 6	; 14
	
	return robotCenter;
	
	
	
}
     dfa:	8e e3       	ldi	r24, 0x3E	; 62
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	1e bf       	out	0x3e, r17	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0d bf       	out	0x3d, r16	; 61
     e08:	68 96       	adiw	r28, 0x18	; 24
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	df 90       	pop	r13
     e22:	cf 90       	pop	r12
     e24:	bf 90       	pop	r11
     e26:	af 90       	pop	r10
     e28:	7f 90       	pop	r7
     e2a:	6f 90       	pop	r6
     e2c:	5f 90       	pop	r5
     e2e:	4f 90       	pop	r4
     e30:	08 95       	ret

00000e32 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
     e32:	6e 9a       	sbi	0x0d, 6	; 13
     e34:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey();
     e36:	0e 94 f5 00 	call	0x1ea	; 0x1ea <initialize_robockey>

	/* Confirm successful initialization(s) */
	m_green(ON);
     e3a:	6a 9a       	sbi	0x0d, 2	; 13
     e3c:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
     e3e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <update_position>
		if (check(TIFR3,OCF3A)){	// Check if timestep has completed
     e42:	c1 9b       	sbis	0x18, 1	; 24
     e44:	fc cf       	rjmp	.-8      	; 0xe3e <main+0xc>
			set(TIFR3,OCF3A);		// Reset flag
     e46:	c1 9a       	sbi	0x18, 1	; 24
			run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd, game_pause); // Update control
     e48:	a0 90 0a 01 	lds	r10, 0x010A
     e4c:	b0 90 0b 01 	lds	r11, 0x010B
     e50:	c0 90 0c 01 	lds	r12, 0x010C
     e54:	d0 90 0d 01 	lds	r13, 0x010D
     e58:	e0 90 0e 01 	lds	r14, 0x010E
     e5c:	f0 90 0f 01 	lds	r15, 0x010F
     e60:	00 91 10 01 	lds	r16, 0x0110
     e64:	10 91 11 01 	lds	r17, 0x0111
     e68:	20 91 6b 01 	lds	r18, 0x016B
     e6c:	30 91 6c 01 	lds	r19, 0x016C
     e70:	40 91 6d 01 	lds	r20, 0x016D
     e74:	50 91 6e 01 	lds	r21, 0x016E
     e78:	60 91 6f 01 	lds	r22, 0x016F
     e7c:	70 91 70 01 	lds	r23, 0x0170
     e80:	80 91 71 01 	lds	r24, 0x0171
     e84:	90 91 72 01 	lds	r25, 0x0172
     e88:	e0 91 01 01 	lds	r30, 0x0101
     e8c:	ef 93       	push	r30
     e8e:	e0 91 00 01 	lds	r30, 0x0100
     e92:	ef 93       	push	r30
     e94:	e0 91 66 01 	lds	r30, 0x0166
     e98:	ef 93       	push	r30
     e9a:	e0 91 65 01 	lds	r30, 0x0165
     e9e:	ef 93       	push	r30
     ea0:	e0 91 64 01 	lds	r30, 0x0164
     ea4:	ef 93       	push	r30
     ea6:	e0 91 63 01 	lds	r30, 0x0163
     eaa:	ef 93       	push	r30
     eac:	e0 91 05 01 	lds	r30, 0x0105
     eb0:	ef 93       	push	r30
     eb2:	e0 91 04 01 	lds	r30, 0x0104
     eb6:	ef 93       	push	r30
     eb8:	e0 91 03 01 	lds	r30, 0x0103
     ebc:	ef 93       	push	r30
     ebe:	e0 91 02 01 	lds	r30, 0x0102
     ec2:	ef 93       	push	r30
     ec4:	e0 91 6a 01 	lds	r30, 0x016A
     ec8:	ef 93       	push	r30
     eca:	e0 91 69 01 	lds	r30, 0x0169
     ece:	ef 93       	push	r30
     ed0:	e0 91 68 01 	lds	r30, 0x0168
     ed4:	ef 93       	push	r30
     ed6:	e0 91 67 01 	lds	r30, 0x0167
     eda:	ef 93       	push	r30
     edc:	e0 91 09 01 	lds	r30, 0x0109
     ee0:	ef 93       	push	r30
     ee2:	e0 91 08 01 	lds	r30, 0x0108
     ee6:	ef 93       	push	r30
     ee8:	e0 91 07 01 	lds	r30, 0x0107
     eec:	ef 93       	push	r30
     eee:	e0 91 06 01 	lds	r30, 0x0106
     ef2:	ef 93       	push	r30
     ef4:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <run_motor_control_loop>
     ef8:	8d b7       	in	r24, 0x3d	; 61
     efa:	9e b7       	in	r25, 0x3e	; 62
     efc:	42 96       	adiw	r24, 0x12	; 18
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	9e bf       	out	0x3e, r25	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	8d bf       	out	0x3d, r24	; 61
     f08:	9a cf       	rjmp	.-204    	; 0xe3e <main+0xc>

00000f0a <play>:
	// Assign Defending goal
	// Flash color of LED for defending goal
}

void play(void)
{
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	2c 97       	sbiw	r28, 0x0c	; 12
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
	// Light LED of defending goal
	// Play
	update_position();
     f1e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <update_position>
	float position_buffer[3];
	get_position(position_buffer);
     f22:	ce 01       	movw	r24, r28
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	0e 94 69 08 	call	0x10d2	; 0x10d2 <get_position>
	if (position_buffer[0]>0) {
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	a9 01       	movw	r20, r18
     f30:	69 81       	ldd	r22, Y+1	; 0x01
     f32:	7a 81       	ldd	r23, Y+2	; 0x02
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	0e 94 66 13 	call	0x26cc	; 0x26cc <__gesf2>
     f3c:	18 16       	cp	r1, r24
     f3e:	6c f4       	brge	.+26     	; 0xf5a <play+0x50>
		x_target = -350;
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	af ea       	ldi	r26, 0xAF	; 175
     f46:	b3 ec       	ldi	r27, 0xC3	; 195
     f48:	80 93 6f 01 	sts	0x016F, r24
     f4c:	90 93 70 01 	sts	0x0170, r25
     f50:	a0 93 71 01 	sts	0x0171, r26
     f54:	b0 93 72 01 	sts	0x0172, r27
     f58:	0c c0       	rjmp	.+24     	; 0xf72 <play+0x68>
		} else {
		x_target = 350;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	af ea       	ldi	r26, 0xAF	; 175
     f60:	b3 e4       	ldi	r27, 0x43	; 67
     f62:	80 93 6f 01 	sts	0x016F, r24
     f66:	90 93 70 01 	sts	0x0170, r25
     f6a:	a0 93 71 01 	sts	0x0171, r26
     f6e:	b0 93 72 01 	sts	0x0172, r27
	}
	game_pause = 0;
     f72:	10 92 01 01 	sts	0x0101, r1
     f76:	10 92 00 01 	sts	0x0100, r1
}
     f7a:	2c 96       	adiw	r28, 0x0c	; 12
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
     f8c:	80 91 58 01 	lds	r24, 0x0158
     f90:	83 3a       	cpi	r24, 0xA3	; 163
     f92:	f9 f0       	breq	.+62     	; 0xfd2 <update_game_state+0x46>
     f94:	28 f4       	brcc	.+10     	; 0xfa0 <update_game_state+0x14>
     f96:	81 3a       	cpi	r24, 0xA1	; 161
     f98:	51 f0       	breq	.+20     	; 0xfae <update_game_state+0x22>
     f9a:	82 3a       	cpi	r24, 0xA2	; 162
     f9c:	59 f0       	breq	.+22     	; 0xfb4 <update_game_state+0x28>
     f9e:	08 95       	ret
     fa0:	86 3a       	cpi	r24, 0xA6	; 166
     fa2:	69 f1       	breq	.+90     	; 0xffe <update_game_state+0x72>
     fa4:	87 3a       	cpi	r24, 0xA7	; 167
     fa6:	91 f1       	breq	.+100    	; 0x100c <update_game_state+0x80>
     fa8:	84 3a       	cpi	r24, 0xA4	; 164
     faa:	b1 f5       	brne	.+108    	; 0x1018 <update_game_state+0x8c>
     fac:	21 c0       	rjmp	.+66     	; 0xff0 <update_game_state+0x64>
		case 0xA0: // Comm Test
		comm_test();
		break;
		case 0xA1: // Play
		play();
     fae:	0e 94 85 07 	call	0xf0a	; 0xf0a <play>
		break;
     fb2:	08 95       	ret
		case 0xA2: // Goal R
		SR = buffer[1];
     fb4:	e9 e5       	ldi	r30, 0x59	; 89
     fb6:	f1 e0       	ldi	r31, 0x01	; 1
     fb8:	81 81       	ldd	r24, Z+1	; 0x01
     fba:	80 93 57 01 	sts	0x0157, r24
		SB = buffer[2];
     fbe:	82 81       	ldd	r24, Z+2	; 0x02
     fc0:	80 93 56 01 	sts	0x0156, r24
}

void pause(void)
{
	// Stop within 3  seconds
	game_pause = 1;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	90 93 01 01 	sts	0x0101, r25
     fcc:	80 93 00 01 	sts	0x0100, r24
     fd0:	08 95       	ret
		SR = buffer[1];
		SB = buffer[2];
		pause();
		break;
		case 0xA3: // Goal B
		SR = buffer[1];
     fd2:	e9 e5       	ldi	r30, 0x59	; 89
     fd4:	f1 e0       	ldi	r31, 0x01	; 1
     fd6:	81 81       	ldd	r24, Z+1	; 0x01
     fd8:	80 93 57 01 	sts	0x0157, r24
		SB = buffer[2];
     fdc:	82 81       	ldd	r24, Z+2	; 0x02
     fde:	80 93 56 01 	sts	0x0156, r24
}

void pause(void)
{
	// Stop within 3  seconds
	game_pause = 1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	90 93 01 01 	sts	0x0101, r25
     fea:	80 93 00 01 	sts	0x0100, r24
     fee:	08 95       	ret
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	90 93 01 01 	sts	0x0101, r25
     ff8:	80 93 00 01 	sts	0x0100, r24
     ffc:	08 95       	ret

void halftime(void)
{
	// Stop play
	// Switch assigned goal
	game_pause = 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	90 93 01 01 	sts	0x0101, r25
    1006:	80 93 00 01 	sts	0x0100, r24
    100a:	08 95       	ret

void game_over(void)
{
	// Stop play
	// Do a victory dance based on score?
	game_pause = 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	90 93 01 01 	sts	0x0101, r25
    1014:	80 93 00 01 	sts	0x0100, r24
    1018:	08 95       	ret

0000101a <wireless_recieve>:
************************************************************/

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    101a:	6a e0       	ldi	r22, 0x0A	; 10
    101c:	89 e5       	ldi	r24, 0x59	; 89
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	0e 94 9b 0c 	call	0x1936	; 0x1936 <m_rf_read>
	game_state = buffer[0];
    1024:	80 91 59 01 	lds	r24, 0x0159
    1028:	80 93 58 01 	sts	0x0158, r24
	update_game_state();
    102c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <update_game_state>
    1030:	08 95       	ret

00001032 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    103c:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
    103e:	2a 9a       	sbi	0x05, 2	; 5
}
    1040:	0f 90       	pop	r0
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	0f 90       	pop	r0
    1046:	1f 90       	pop	r1
    1048:	18 95       	reti

0000104a <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    104a:	1f 92       	push	r1
    104c:	0f 92       	push	r0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	0f 92       	push	r0
    1052:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    1054:	28 98       	cbi	0x05, 0	; 5
}
    1056:	0f 90       	pop	r0
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	0f 90       	pop	r0
    105c:	1f 90       	pop	r1
    105e:	18 95       	reti

00001060 <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    1060:	1f 92       	push	r1
    1062:	0f 92       	push	r0
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	0f 92       	push	r0
    1068:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    106a:	2a 98       	cbi	0x05, 2	; 5
}
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <__vector_3>:

/* Recieve Wireless Comm */
ISR(INT2_vect){
    1076:	1f 92       	push	r1
    1078:	0f 92       	push	r0
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	0f 92       	push	r0
    107e:	11 24       	eor	r1, r1
    1080:	2f 93       	push	r18
    1082:	3f 93       	push	r19
    1084:	4f 93       	push	r20
    1086:	5f 93       	push	r21
    1088:	6f 93       	push	r22
    108a:	7f 93       	push	r23
    108c:	8f 93       	push	r24
    108e:	9f 93       	push	r25
    1090:	af 93       	push	r26
    1092:	bf 93       	push	r27
    1094:	ef 93       	push	r30
    1096:	ff 93       	push	r31
	wireless_recieve();
    1098:	0e 94 0d 08 	call	0x101a	; 0x101a <wireless_recieve>
}
    109c:	ff 91       	pop	r31
    109e:	ef 91       	pop	r30
    10a0:	bf 91       	pop	r27
    10a2:	af 91       	pop	r26
    10a4:	9f 91       	pop	r25
    10a6:	8f 91       	pop	r24
    10a8:	7f 91       	pop	r23
    10aa:	6f 91       	pop	r22
    10ac:	5f 91       	pop	r21
    10ae:	4f 91       	pop	r20
    10b0:	3f 91       	pop	r19
    10b2:	2f 91       	pop	r18
    10b4:	0f 90       	pop	r0
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	0f 90       	pop	r0
    10ba:	1f 90       	pop	r1
    10bc:	18 95       	reti

000010be <__vector_29>:

/* Switch ADC Input Pin Each time reading finishes */
ISR(ADC_vect){
    10be:	1f 92       	push	r1
    10c0:	0f 92       	push	r0
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	0f 92       	push	r0
    10c6:	11 24       	eor	r1, r1
// 		float puck_buffer[2];
// 		get_puck_location(puck_buffer);
// 		x_target = puck_buffer[0];
// 		y_target = puck_buffer[1];
// 	}
}
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	0f 90       	pop	r0
    10ce:	1f 90       	pop	r1
    10d0:	18 95       	reti

000010d2 <get_position>:
/************************************************************
Public Functions
************************************************************/

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    10d2:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    10d4:	80 91 83 01 	lds	r24, 0x0183
    10d8:	90 91 84 01 	lds	r25, 0x0184
    10dc:	a0 91 85 01 	lds	r26, 0x0185
    10e0:	b0 91 86 01 	lds	r27, 0x0186
    10e4:	80 83       	st	Z, r24
    10e6:	91 83       	std	Z+1, r25	; 0x01
    10e8:	a2 83       	std	Z+2, r26	; 0x02
    10ea:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    10ec:	80 91 7f 01 	lds	r24, 0x017F
    10f0:	90 91 80 01 	lds	r25, 0x0180
    10f4:	a0 91 81 01 	lds	r26, 0x0181
    10f8:	b0 91 82 01 	lds	r27, 0x0182
    10fc:	84 83       	std	Z+4, r24	; 0x04
    10fe:	95 83       	std	Z+5, r25	; 0x05
    1100:	a6 83       	std	Z+6, r26	; 0x06
    1102:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    1104:	80 91 7b 01 	lds	r24, 0x017B
    1108:	90 91 7c 01 	lds	r25, 0x017C
    110c:	a0 91 7d 01 	lds	r26, 0x017D
    1110:	b0 91 7e 01 	lds	r27, 0x017E
    1114:	80 87       	std	Z+8, r24	; 0x08
    1116:	91 87       	std	Z+9, r25	; 0x09
    1118:	a2 87       	std	Z+10, r26	; 0x0a
    111a:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	08 95       	ret

00001120 <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    1120:	8f 92       	push	r8
    1122:	9f 92       	push	r9
    1124:	af 92       	push	r10
    1126:	bf 92       	push	r11
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	6b 01       	movw	r12, r22
    1132:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    1134:	4b 01       	movw	r8, r22
    1136:	5c 01       	movw	r10, r24
    1138:	e8 94       	clt
    113a:	b7 f8       	bld	r11, 7
    113c:	2b ed       	ldi	r18, 0xDB	; 219
    113e:	3f e0       	ldi	r19, 0x0F	; 15
    1140:	49 e4       	ldi	r20, 0x49	; 73
    1142:	50 e4       	ldi	r21, 0x40	; 64
    1144:	c5 01       	movw	r24, r10
    1146:	b4 01       	movw	r22, r8
    1148:	0e 94 66 13 	call	0x26cc	; 0x26cc <__gesf2>
    114c:	18 16       	cp	r1, r24
    114e:	bc f4       	brge	.+46     	; 0x117e <theta_error_correction+0x5e>
    1150:	2b ed       	ldi	r18, 0xDB	; 219
    1152:	3f e0       	ldi	r19, 0x0F	; 15
    1154:	49 ec       	ldi	r20, 0xC9	; 201
    1156:	50 e4       	ldi	r21, 0x40	; 64
    1158:	c7 01       	movw	r24, r14
    115a:	b6 01       	movw	r22, r12
    115c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    1160:	a5 01       	movw	r20, r10
    1162:	94 01       	movw	r18, r8
    1164:	0e 94 ad 11 	call	0x235a	; 0x235a <__divsf3>
    1168:	9b 01       	movw	r18, r22
    116a:	ac 01       	movw	r20, r24
    116c:	c7 01       	movw	r24, r14
    116e:	b6 01       	movw	r22, r12
    1170:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    1174:	56 2f       	mov	r21, r22
    1176:	47 2f       	mov	r20, r23
    1178:	38 2f       	mov	r19, r24
    117a:	29 2f       	mov	r18, r25
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <theta_error_correction+0x66>
	else{return error;}
    117e:	5c 2d       	mov	r21, r12
    1180:	4d 2d       	mov	r20, r13
    1182:	3e 2d       	mov	r19, r14
    1184:	2f 2d       	mov	r18, r15
}
    1186:	65 2f       	mov	r22, r21
    1188:	74 2f       	mov	r23, r20
    118a:	83 2f       	mov	r24, r19
    118c:	92 2f       	mov	r25, r18
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	cf 90       	pop	r12
    1196:	bf 90       	pop	r11
    1198:	af 90       	pop	r10
    119a:	9f 90       	pop	r9
    119c:	8f 90       	pop	r8
    119e:	08 95       	ret

000011a0 <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    11a0:	2f 92       	push	r2
    11a2:	3f 92       	push	r3
    11a4:	4f 92       	push	r4
    11a6:	5f 92       	push	r5
    11a8:	6f 92       	push	r6
    11aa:	7f 92       	push	r7
    11ac:	8f 92       	push	r8
    11ae:	9f 92       	push	r9
    11b0:	af 92       	push	r10
    11b2:	bf 92       	push	r11
    11b4:	cf 92       	push	r12
    11b6:	df 92       	push	r13
    11b8:	ef 92       	push	r14
    11ba:	ff 92       	push	r15
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	a8 97       	sbiw	r28, 0x28	; 40
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	0e 94 31 10 	call	0x2062	; 0x2062 <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    11dc:	6b 81       	ldd	r22, Y+3	; 0x03
    11de:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    11e0:	0f 81       	ldd	r16, Y+7	; 0x07
    11e2:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    11e4:	49 85       	ldd	r20, Y+9	; 0x09
    11e6:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    11e8:	ad 85       	ldd	r26, Y+13	; 0x0d
    11ea:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    11ec:	2f 85       	ldd	r18, Y+15	; 0x0f
    11ee:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    11f0:	eb 89       	ldd	r30, Y+19	; 0x13
    11f2:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    11f4:	8d 89       	ldd	r24, Y+21	; 0x15
    11f6:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    11f8:	e9 80       	ldd	r14, Y+1	; 0x01
    11fa:	fa 80       	ldd	r15, Y+2	; 0x02
    11fc:	fa 8e       	std	Y+26, r15	; 0x1a
    11fe:	e9 8e       	std	Y+25, r14	; 0x19
    1200:	1c 8f       	std	Y+28, r17	; 0x1c
    1202:	0b 8f       	std	Y+27, r16	; 0x1b
    1204:	be 8f       	std	Y+30, r27	; 0x1e
    1206:	ad 8f       	std	Y+29, r26	; 0x1d
    1208:	f8 a3       	std	Y+32, r31	; 0x20
    120a:	ef 8f       	std	Y+31, r30	; 0x1f
    120c:	7a a3       	std	Y+34, r23	; 0x22
    120e:	69 a3       	std	Y+33, r22	; 0x21
    1210:	5c a3       	std	Y+36, r21	; 0x24
    1212:	4b a3       	std	Y+35, r20	; 0x23
    1214:	3e a3       	std	Y+38, r19	; 0x26
    1216:	2d a3       	std	Y+37, r18	; 0x25
    1218:	98 a7       	std	Y+40, r25	; 0x28
    121a:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    121c:	6a e1       	ldi	r22, 0x1A	; 26
    121e:	71 e0       	ldi	r23, 0x01	; 1
    1220:	ce 01       	movw	r24, r28
    1222:	49 96       	adiw	r24, 0x19	; 25
    1224:	0e 94 ef 05 	call	0xbde	; 0xbde <localization_calc>
    1228:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    122a:	fc 01       	movw	r30, r24
    122c:	80 85       	ldd	r24, Z+8	; 0x08
    122e:	91 85       	ldd	r25, Z+9	; 0x09
    1230:	a2 85       	ldd	r26, Z+10	; 0x0a
    1232:	b3 85       	ldd	r27, Z+11	; 0x0b
    1234:	0f 2e       	mov	r0, r31
    1236:	fa e1       	ldi	r31, 0x1A	; 26
    1238:	2f 2e       	mov	r2, r31
    123a:	f1 e0       	ldi	r31, 0x01	; 1
    123c:	3f 2e       	mov	r3, r31
    123e:	f0 2d       	mov	r31, r0
    1240:	f1 01       	movw	r30, r2
    1242:	80 87       	std	Z+8, r24	; 0x08
    1244:	91 87       	std	Z+9, r25	; 0x09
    1246:	a2 87       	std	Z+10, r26	; 0x0a
    1248:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    124a:	f8 01       	movw	r30, r16
    124c:	60 85       	ldd	r22, Z+8	; 0x08
    124e:	71 85       	ldd	r23, Z+9	; 0x09
    1250:	82 85       	ldd	r24, Z+10	; 0x0a
    1252:	93 85       	ldd	r25, Z+11	; 0x0b
    1254:	0e 94 90 08 	call	0x1120	; 0x1120 <theta_error_correction>
    1258:	2b 01       	movw	r4, r22
    125a:	3c 01       	movw	r6, r24
    125c:	f8 01       	movw	r30, r16
    125e:	60 87       	std	Z+8, r22	; 0x08
    1260:	71 87       	std	Z+9, r23	; 0x09
    1262:	82 87       	std	Z+10, r24	; 0x0a
    1264:	93 87       	std	Z+11, r25	; 0x0b
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1266:	24 ea       	ldi	r18, 0xA4	; 164
    1268:	30 e7       	ldi	r19, 0x70	; 112
    126a:	4d e7       	ldi	r20, 0x7D	; 125
    126c:	5f e3       	ldi	r21, 0x3F	; 63
    126e:	60 81       	ld	r22, Z
    1270:	71 81       	ldd	r23, Z+1	; 0x01
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	93 81       	ldd	r25, Z+3	; 0x03
    1276:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    127a:	4b 01       	movw	r8, r22
    127c:	5c 01       	movw	r10, r24
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	37 ed       	ldi	r19, 0xD7	; 215
    1282:	43 e2       	ldi	r20, 0x23	; 35
    1284:	5c e3       	ldi	r21, 0x3C	; 60
    1286:	60 91 83 01 	lds	r22, 0x0183
    128a:	70 91 84 01 	lds	r23, 0x0184
    128e:	80 91 85 01 	lds	r24, 0x0185
    1292:	90 91 86 01 	lds	r25, 0x0186
    1296:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    129a:	9b 01       	movw	r18, r22
    129c:	ac 01       	movw	r20, r24
    129e:	c5 01       	movw	r24, r10
    12a0:	b4 01       	movw	r22, r8
    12a2:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
    12a6:	4b 01       	movw	r8, r22
    12a8:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    12aa:	60 93 83 01 	sts	0x0183, r22
    12ae:	70 93 84 01 	sts	0x0184, r23
    12b2:	80 93 85 01 	sts	0x0185, r24
    12b6:	90 93 86 01 	sts	0x0186, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    12ba:	24 ea       	ldi	r18, 0xA4	; 164
    12bc:	30 e7       	ldi	r19, 0x70	; 112
    12be:	4d e7       	ldi	r20, 0x7D	; 125
    12c0:	5f e3       	ldi	r21, 0x3F	; 63
    12c2:	f8 01       	movw	r30, r16
    12c4:	64 81       	ldd	r22, Z+4	; 0x04
    12c6:	75 81       	ldd	r23, Z+5	; 0x05
    12c8:	86 81       	ldd	r24, Z+6	; 0x06
    12ca:	97 81       	ldd	r25, Z+7	; 0x07
    12cc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    12d0:	6b 01       	movw	r12, r22
    12d2:	7c 01       	movw	r14, r24
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	37 ed       	ldi	r19, 0xD7	; 215
    12d8:	43 e2       	ldi	r20, 0x23	; 35
    12da:	5c e3       	ldi	r21, 0x3C	; 60
    12dc:	60 91 7f 01 	lds	r22, 0x017F
    12e0:	70 91 80 01 	lds	r23, 0x0180
    12e4:	80 91 81 01 	lds	r24, 0x0181
    12e8:	90 91 82 01 	lds	r25, 0x0182
    12ec:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    12f0:	9b 01       	movw	r18, r22
    12f2:	ac 01       	movw	r20, r24
    12f4:	c7 01       	movw	r24, r14
    12f6:	b6 01       	movw	r22, r12
    12f8:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
    12fc:	6b 01       	movw	r12, r22
    12fe:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    1300:	60 93 7f 01 	sts	0x017F, r22
    1304:	70 93 80 01 	sts	0x0180, r23
    1308:	80 93 81 01 	sts	0x0181, r24
    130c:	90 93 82 01 	sts	0x0182, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1310:	24 ea       	ldi	r18, 0xA4	; 164
    1312:	30 e7       	ldi	r19, 0x70	; 112
    1314:	4d e7       	ldi	r20, 0x7D	; 125
    1316:	5f e3       	ldi	r21, 0x3F	; 63
    1318:	c3 01       	movw	r24, r6
    131a:	b2 01       	movw	r22, r4
    131c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    1320:	2b 01       	movw	r4, r22
    1322:	3c 01       	movw	r6, r24
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	37 ed       	ldi	r19, 0xD7	; 215
    1328:	43 e2       	ldi	r20, 0x23	; 35
    132a:	5c e3       	ldi	r21, 0x3C	; 60
    132c:	60 91 7b 01 	lds	r22, 0x017B
    1330:	70 91 7c 01 	lds	r23, 0x017C
    1334:	80 91 7d 01 	lds	r24, 0x017D
    1338:	90 91 7e 01 	lds	r25, 0x017E
    133c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    1340:	9b 01       	movw	r18, r22
    1342:	ac 01       	movw	r20, r24
    1344:	c3 01       	movw	r24, r6
    1346:	b2 01       	movw	r22, r4
    1348:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    134c:	60 93 7b 01 	sts	0x017B, r22
    1350:	70 93 7c 01 	sts	0x017C, r23
    1354:	80 93 7d 01 	sts	0x017D, r24
    1358:	90 93 7e 01 	sts	0x017E, r25
	
	robotCenterPrev[0] = x;
    135c:	f1 01       	movw	r30, r2
    135e:	80 82       	st	Z, r8
    1360:	91 82       	std	Z+1, r9	; 0x01
    1362:	a2 82       	std	Z+2, r10	; 0x02
    1364:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    1366:	c4 82       	std	Z+4, r12	; 0x04
    1368:	d5 82       	std	Z+5, r13	; 0x05
    136a:	e6 82       	std	Z+6, r14	; 0x06
    136c:	f7 82       	std	Z+7, r15	; 0x07
}
    136e:	a8 96       	adiw	r28, 0x28	; 40
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	df 90       	pop	r13
    1388:	cf 90       	pop	r12
    138a:	bf 90       	pop	r11
    138c:	af 90       	pop	r10
    138e:	9f 90       	pop	r9
    1390:	8f 90       	pop	r8
    1392:	7f 90       	pop	r7
    1394:	6f 90       	pop	r6
    1396:	5f 90       	pop	r5
    1398:	4f 90       	pop	r4
    139a:	3f 90       	pop	r3
    139c:	2f 90       	pop	r2
    139e:	08 95       	ret

000013a0 <run_motor_control_loop>:



/* PID Control */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd, int game_pause)
{
    13a0:	4f 92       	push	r4
    13a2:	5f 92       	push	r5
    13a4:	6f 92       	push	r6
    13a6:	7f 92       	push	r7
    13a8:	8f 92       	push	r8
    13aa:	9f 92       	push	r9
    13ac:	af 92       	push	r10
    13ae:	bf 92       	push	r11
    13b0:	cf 92       	push	r12
    13b2:	df 92       	push	r13
    13b4:	ef 92       	push	r14
    13b6:	ff 92       	push	r15
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	64 97       	sbiw	r28, 0x14	; 20
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	29 01       	movw	r4, r18
    13d2:	3a 01       	movw	r6, r20
    13d4:	ed 86       	std	Y+13, r14	; 0x0d
    13d6:	fe 86       	std	Y+14, r15	; 0x0e
    13d8:	0f 87       	std	Y+15, r16	; 0x0f
    13da:	18 8b       	std	Y+16, r17	; 0x10
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    13dc:	20 91 83 01 	lds	r18, 0x0183
    13e0:	30 91 84 01 	lds	r19, 0x0184
    13e4:	40 91 85 01 	lds	r20, 0x0185
    13e8:	50 91 86 01 	lds	r21, 0x0186
    13ec:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    13f0:	6d 83       	std	Y+5, r22	; 0x05
    13f2:	7e 83       	std	Y+6, r23	; 0x06
    13f4:	8f 83       	std	Y+7, r24	; 0x07
    13f6:	98 87       	std	Y+8, r25	; 0x08
    13f8:	20 91 7f 01 	lds	r18, 0x017F
    13fc:	30 91 80 01 	lds	r19, 0x0180
    1400:	40 91 81 01 	lds	r20, 0x0181
    1404:	50 91 82 01 	lds	r21, 0x0182
    1408:	c3 01       	movw	r24, r6
    140a:	b2 01       	movw	r22, r4
    140c:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    1410:	69 87       	std	Y+9, r22	; 0x09
    1412:	7a 87       	std	Y+10, r23	; 0x0a
    1414:	8b 87       	std	Y+11, r24	; 0x0b
    1416:	9c 87       	std	Y+12, r25	; 0x0c
    1418:	2d 81       	ldd	r18, Y+5	; 0x05
    141a:	3e 81       	ldd	r19, Y+6	; 0x06
    141c:	4f 81       	ldd	r20, Y+7	; 0x07
    141e:	58 85       	ldd	r21, Y+8	; 0x08
    1420:	0e 94 44 11 	call	0x2288	; 0x2288 <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    1424:	20 91 7b 01 	lds	r18, 0x017B
    1428:	30 91 7c 01 	lds	r19, 0x017C
    142c:	40 91 7d 01 	lds	r20, 0x017D
    1430:	50 91 7e 01 	lds	r21, 0x017E
    1434:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
	theta_error = theta_error_correction(theta_error);
    1438:	0e 94 90 08 	call	0x1120	; 0x1120 <theta_error_correction>
    143c:	69 83       	std	Y+1, r22	; 0x01
    143e:	7a 83       	std	Y+2, r23	; 0x02
    1440:	8b 83       	std	Y+3, r24	; 0x03
    1442:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    1444:	2b 01       	movw	r4, r22
    1446:	3c 01       	movw	r6, r24
    1448:	e8 94       	clt
    144a:	77 f8       	bld	r7, 7
    144c:	a6 01       	movw	r20, r12
    144e:	95 01       	movw	r18, r10
    1450:	c3 01       	movw	r24, r6
    1452:	b2 01       	movw	r22, r4
    1454:	0e 94 66 13 	call	0x26cc	; 0x26cc <__gesf2>
    1458:	18 16       	cp	r1, r24
    145a:	84 f4       	brge	.+32     	; 0x147c <run_motor_control_loop+0xdc>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    145c:	29 81       	ldd	r18, Y+1	; 0x01
    145e:	3a 81       	ldd	r19, Y+2	; 0x02
    1460:	4b 81       	ldd	r20, Y+3	; 0x03
    1462:	5c 81       	ldd	r21, Y+4	; 0x04
    1464:	c3 01       	movw	r24, r6
    1466:	b2 01       	movw	r22, r4
    1468:	0e 94 ad 11 	call	0x235a	; 0x235a <__divsf3>
    146c:	a6 01       	movw	r20, r12
    146e:	95 01       	movw	r18, r10
    1470:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    1474:	69 83       	std	Y+1, r22	; 0x01
    1476:	7a 83       	std	Y+2, r23	; 0x02
    1478:	8b 83       	std	Y+3, r24	; 0x03
    147a:	9c 83       	std	Y+4, r25	; 0x04
	}

	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    147c:	29 81       	ldd	r18, Y+1	; 0x01
    147e:	3a 81       	ldd	r19, Y+2	; 0x02
    1480:	4b 81       	ldd	r20, Y+3	; 0x03
    1482:	5c 81       	ldd	r21, Y+4	; 0x04
    1484:	6f a1       	ldd	r22, Y+39	; 0x27
    1486:	78 a5       	ldd	r23, Y+40	; 0x28
    1488:	89 a5       	ldd	r24, Y+41	; 0x29
    148a:	9a a5       	ldd	r25, Y+42	; 0x2a
    148c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    1490:	6b 01       	movw	r12, r22
    1492:	7c 01       	movw	r14, r24
	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
		theta_error = fabs(theta_error)/theta_error*max_theta;
	}

	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
    1494:	20 91 77 01 	lds	r18, 0x0177
    1498:	30 91 78 01 	lds	r19, 0x0178
    149c:	40 91 79 01 	lds	r20, 0x0179
    14a0:	50 91 7a 01 	lds	r21, 0x017A
    14a4:	69 81       	ldd	r22, Y+1	; 0x01
    14a6:	7a 81       	ldd	r23, Y+2	; 0x02
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	9c 81       	ldd	r25, Y+4	; 0x04
    14ac:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    14b0:	2f e6       	ldi	r18, 0x6F	; 111
    14b2:	32 e1       	ldi	r19, 0x12	; 18
    14b4:	43 e8       	ldi	r20, 0x83	; 131
    14b6:	5a e3       	ldi	r21, 0x3A	; 58
    14b8:	0e 94 ad 11 	call	0x235a	; 0x235a <__divsf3>
    14bc:	9b 01       	movw	r18, r22
    14be:	ac 01       	movw	r20, r24
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    14c0:	6b a5       	ldd	r22, Y+43	; 0x2b
    14c2:	7c a5       	ldd	r23, Y+44	; 0x2c
    14c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    14c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    14c8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    14cc:	9b 01       	movw	r18, r22
    14ce:	ac 01       	movw	r20, r24
    14d0:	c7 01       	movw	r24, r14
    14d2:	b6 01       	movw	r22, r12
    14d4:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
	previous_theta_error = theta_error;
    14d8:	29 81       	ldd	r18, Y+1	; 0x01
    14da:	3a 81       	ldd	r19, Y+2	; 0x02
    14dc:	4b 81       	ldd	r20, Y+3	; 0x03
    14de:	5c 81       	ldd	r21, Y+4	; 0x04
    14e0:	20 93 77 01 	sts	0x0177, r18
    14e4:	30 93 78 01 	sts	0x0178, r19
    14e8:	40 93 79 01 	sts	0x0179, r20
    14ec:	50 93 7a 01 	sts	0x017A, r21
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    14f0:	2b ed       	ldi	r18, 0xDB	; 219
    14f2:	3f e0       	ldi	r19, 0x0F	; 15
    14f4:	49 e4       	ldi	r20, 0x49	; 73
    14f6:	50 e4       	ldi	r21, 0x40	; 64
    14f8:	0e 94 ad 11 	call	0x235a	; 0x235a <__divsf3>
    14fc:	2b 01       	movw	r4, r22
    14fe:	3c 01       	movw	r6, r24
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	b0 58       	subi	r27, 0x80	; 128
    1506:	89 8b       	std	Y+17, r24	; 0x11
    1508:	9a 8b       	std	Y+18, r25	; 0x12
    150a:	ab 8b       	std	Y+19, r26	; 0x13
    150c:	bc 8b       	std	Y+20, r27	; 0x14
	right_duty_cycle = angular_output;
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    150e:	69 81       	ldd	r22, Y+1	; 0x01
    1510:	7a 81       	ldd	r23, Y+2	; 0x02
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	0e 94 a8 11 	call	0x2350	; 0x2350 <cos>
    151a:	6b 01       	movw	r12, r22
    151c:	7c 01       	movw	r14, r24
    151e:	29 85       	ldd	r18, Y+9	; 0x09
    1520:	3a 85       	ldd	r19, Y+10	; 0x0a
    1522:	4b 85       	ldd	r20, Y+11	; 0x0b
    1524:	5c 85       	ldd	r21, Y+12	; 0x0c
    1526:	ca 01       	movw	r24, r20
    1528:	b9 01       	movw	r22, r18
    152a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    152e:	4b 01       	movw	r8, r22
    1530:	5c 01       	movw	r10, r24
    1532:	2d 81       	ldd	r18, Y+5	; 0x05
    1534:	3e 81       	ldd	r19, Y+6	; 0x06
    1536:	4f 81       	ldd	r20, Y+7	; 0x07
    1538:	58 85       	ldd	r21, Y+8	; 0x08
    153a:	ca 01       	movw	r24, r20
    153c:	b9 01       	movw	r22, r18
    153e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    1542:	9b 01       	movw	r18, r22
    1544:	ac 01       	movw	r20, r24
    1546:	c5 01       	movw	r24, r10
    1548:	b4 01       	movw	r22, r8
    154a:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
    154e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <sqrt>
    1552:	9b 01       	movw	r18, r22
    1554:	ac 01       	movw	r20, r24
    1556:	c7 01       	movw	r24, r14
    1558:	b6 01       	movw	r22, r12
    155a:	9f 77       	andi	r25, 0x7F	; 127
    155c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    1560:	6b 01       	movw	r12, r22
    1562:	7c 01       	movw	r14, r24
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    1564:	9b 01       	movw	r18, r22
    1566:	ac 01       	movw	r20, r24
    1568:	6f a5       	ldd	r22, Y+47	; 0x2f
    156a:	78 a9       	ldd	r23, Y+48	; 0x30
    156c:	89 a9       	ldd	r24, Y+49	; 0x31
    156e:	9a a9       	ldd	r25, Y+50	; 0x32
    1570:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    1574:	4b 01       	movw	r8, r22
    1576:	5c 01       	movw	r10, r24
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
    1578:	20 91 73 01 	lds	r18, 0x0173
    157c:	30 91 74 01 	lds	r19, 0x0174
    1580:	40 91 75 01 	lds	r20, 0x0175
    1584:	50 91 76 01 	lds	r21, 0x0176
    1588:	c7 01       	movw	r24, r14
    158a:	b6 01       	movw	r22, r12
    158c:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    1590:	2f e6       	ldi	r18, 0x6F	; 111
    1592:	32 e1       	ldi	r19, 0x12	; 18
    1594:	43 e8       	ldi	r20, 0x83	; 131
    1596:	5a e3       	ldi	r21, 0x3A	; 58
    1598:	0e 94 ad 11 	call	0x235a	; 0x235a <__divsf3>
    159c:	9b 01       	movw	r18, r22
    159e:	ac 01       	movw	r20, r24
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    15a0:	6b a9       	ldd	r22, Y+51	; 0x33
    15a2:	7c a9       	ldd	r23, Y+52	; 0x34
    15a4:	8d a9       	ldd	r24, Y+53	; 0x35
    15a6:	9e a9       	ldd	r25, Y+54	; 0x36
    15a8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    15ac:	9b 01       	movw	r18, r22
    15ae:	ac 01       	movw	r20, r24
    15b0:	c5 01       	movw	r24, r10
    15b2:	b4 01       	movw	r22, r8
    15b4:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    15b8:	4b 01       	movw	r8, r22
    15ba:	5c 01       	movw	r10, r24
	previous_linear_error = linear_error;
    15bc:	c0 92 73 01 	sts	0x0173, r12
    15c0:	d0 92 74 01 	sts	0x0174, r13
    15c4:	e0 92 75 01 	sts	0x0175, r14
    15c8:	f0 92 76 01 	sts	0x0176, r15
	if(linear_output>40.0){linear_output=40.0;}
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	52 e4       	ldi	r21, 0x42	; 66
    15d4:	0e 94 66 13 	call	0x26cc	; 0x26cc <__gesf2>
    15d8:	18 16       	cp	r1, r24
    15da:	44 f4       	brge	.+16     	; 0x15ec <run_motor_control_loop+0x24c>
    15dc:	0f 2e       	mov	r0, r31
    15de:	81 2c       	mov	r8, r1
    15e0:	91 2c       	mov	r9, r1
    15e2:	f0 e2       	ldi	r31, 0x20	; 32
    15e4:	af 2e       	mov	r10, r31
    15e6:	f2 e4       	ldi	r31, 0x42	; 66
    15e8:	bf 2e       	mov	r11, r31
    15ea:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	52 e4       	ldi	r21, 0x42	; 66
    15f4:	c5 01       	movw	r24, r10
    15f6:	b4 01       	movw	r22, r8
    15f8:	0e 94 ad 11 	call	0x235a	; 0x235a <__divsf3>
    15fc:	6b 01       	movw	r12, r22
    15fe:	7c 01       	movw	r14, r24
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    1600:	69 81       	ldd	r22, Y+1	; 0x01
    1602:	7a 81       	ldd	r23, Y+2	; 0x02
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	9f 77       	andi	r25, 0x7F	; 127
    160a:	2b ed       	ldi	r18, 0xDB	; 219
    160c:	3f e0       	ldi	r19, 0x0F	; 15
    160e:	49 ec       	ldi	r20, 0xC9	; 201
    1610:	5f e3       	ldi	r21, 0x3F	; 63
    1612:	0e 94 a3 11 	call	0x2346	; 0x2346 <__cmpsf2>
    1616:	88 23       	and	r24, r24
    1618:	ec f4       	brge	.+58     	; 0x1654 <run_motor_control_loop+0x2b4>
		left_duty_cycle += linear_output;
    161a:	a3 01       	movw	r20, r6
    161c:	92 01       	movw	r18, r4
    161e:	c7 01       	movw	r24, r14
    1620:	b6 01       	movw	r22, r12
    1622:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    1626:	60 93 16 01 	sts	0x0116, r22
    162a:	70 93 17 01 	sts	0x0117, r23
    162e:	80 93 18 01 	sts	0x0118, r24
    1632:	90 93 19 01 	sts	0x0119, r25
		right_duty_cycle += linear_output;
    1636:	a7 01       	movw	r20, r14
    1638:	96 01       	movw	r18, r12
    163a:	c3 01       	movw	r24, r6
    163c:	b2 01       	movw	r22, r4
    163e:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
    1642:	60 93 12 01 	sts	0x0112, r22
    1646:	70 93 13 01 	sts	0x0113, r23
    164a:	80 93 14 01 	sts	0x0114, r24
    164e:	90 93 15 01 	sts	0x0115, r25
    1652:	1e c0       	rjmp	.+60     	; 0x1690 <run_motor_control_loop+0x2f0>
		} else{
		left_duty_cycle -= linear_output;
    1654:	a7 01       	movw	r20, r14
    1656:	96 01       	movw	r18, r12
    1658:	69 89       	ldd	r22, Y+17	; 0x11
    165a:	7a 89       	ldd	r23, Y+18	; 0x12
    165c:	8b 89       	ldd	r24, Y+19	; 0x13
    165e:	9c 89       	ldd	r25, Y+20	; 0x14
    1660:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    1664:	60 93 16 01 	sts	0x0116, r22
    1668:	70 93 17 01 	sts	0x0117, r23
    166c:	80 93 18 01 	sts	0x0118, r24
    1670:	90 93 19 01 	sts	0x0119, r25
		right_duty_cycle -= linear_output;
    1674:	a7 01       	movw	r20, r14
    1676:	96 01       	movw	r18, r12
    1678:	c3 01       	movw	r24, r6
    167a:	b2 01       	movw	r22, r4
    167c:	0e 94 c4 10 	call	0x2188	; 0x2188 <__subsf3>
    1680:	60 93 12 01 	sts	0x0112, r22
    1684:	70 93 13 01 	sts	0x0113, r23
    1688:	80 93 14 01 	sts	0x0114, r24
    168c:	90 93 15 01 	sts	0x0115, r25
	}
	
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	a9 01       	movw	r20, r18
    1696:	60 91 16 01 	lds	r22, 0x0116
    169a:	70 91 17 01 	lds	r23, 0x0117
    169e:	80 91 18 01 	lds	r24, 0x0118
    16a2:	90 91 19 01 	lds	r25, 0x0119
    16a6:	0e 94 a3 11 	call	0x2346	; 0x2346 <__cmpsf2>
    16aa:	88 23       	and	r24, r24
    16ac:	14 f4       	brge	.+4      	; 0x16b2 <run_motor_control_loop+0x312>
    16ae:	29 98       	cbi	0x05, 1	; 5
    16b0:	01 c0       	rjmp	.+2      	; 0x16b4 <run_motor_control_loop+0x314>
	else{set(PORTB,1);}
    16b2:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	a9 01       	movw	r20, r18
    16ba:	60 91 12 01 	lds	r22, 0x0112
    16be:	70 91 13 01 	lds	r23, 0x0113
    16c2:	80 91 14 01 	lds	r24, 0x0114
    16c6:	90 91 15 01 	lds	r25, 0x0115
    16ca:	0e 94 a3 11 	call	0x2346	; 0x2346 <__cmpsf2>
    16ce:	88 23       	and	r24, r24
    16d0:	14 f4       	brge	.+4      	; 0x16d6 <run_motor_control_loop+0x336>
    16d2:	2b 98       	cbi	0x05, 3	; 5
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <run_motor_control_loop+0x338>
	else{set(PORTB,3);}
    16d6:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    16d8:	80 90 16 01 	lds	r8, 0x0116
    16dc:	90 90 17 01 	lds	r9, 0x0117
    16e0:	a0 90 18 01 	lds	r10, 0x0118
    16e4:	b0 90 19 01 	lds	r11, 0x0119
    16e8:	e8 94       	clt
    16ea:	b7 f8       	bld	r11, 7
    16ec:	80 92 16 01 	sts	0x0116, r8
    16f0:	90 92 17 01 	sts	0x0117, r9
    16f4:	a0 92 18 01 	sts	0x0118, r10
    16f8:	b0 92 19 01 	sts	0x0119, r11
	right_duty_cycle = fabs(right_duty_cycle);
    16fc:	c0 90 12 01 	lds	r12, 0x0112
    1700:	d0 90 13 01 	lds	r13, 0x0113
    1704:	e0 90 14 01 	lds	r14, 0x0114
    1708:	f0 90 15 01 	lds	r15, 0x0115
    170c:	e8 94       	clt
    170e:	f7 f8       	bld	r15, 7
    1710:	c0 92 12 01 	sts	0x0112, r12
    1714:	d0 92 13 01 	sts	0x0113, r13
    1718:	e0 92 14 01 	sts	0x0114, r14
    171c:	f0 92 15 01 	sts	0x0115, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    1720:	a7 01       	movw	r20, r14
    1722:	96 01       	movw	r18, r12
    1724:	c5 01       	movw	r24, r10
    1726:	b4 01       	movw	r22, r8
    1728:	0e 94 66 13 	call	0x26cc	; 0x26cc <__gesf2>
    172c:	18 16       	cp	r1, r24
    172e:	2c f0       	brlt	.+10     	; 0x173a <run_motor_control_loop+0x39a>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    1730:	1c 2d       	mov	r17, r12
    1732:	0d 2d       	mov	r16, r13
    1734:	7e 2c       	mov	r7, r14
    1736:	6f 2c       	mov	r6, r15
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <run_motor_control_loop+0x3a2>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    173a:	18 2d       	mov	r17, r8
    173c:	09 2d       	mov	r16, r9
    173e:	7a 2c       	mov	r7, r10
    1740:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    1742:	2d 85       	ldd	r18, Y+13	; 0x0d
    1744:	3e 85       	ldd	r19, Y+14	; 0x0e
    1746:	4f 85       	ldd	r20, Y+15	; 0x0f
    1748:	58 89       	ldd	r21, Y+16	; 0x10
    174a:	61 2f       	mov	r22, r17
    174c:	70 2f       	mov	r23, r16
    174e:	87 2d       	mov	r24, r7
    1750:	96 2d       	mov	r25, r6
    1752:	0e 94 66 13 	call	0x26cc	; 0x26cc <__gesf2>
    1756:	18 16       	cp	r1, r24
    1758:	64 f5       	brge	.+88     	; 0x17b2 <run_motor_control_loop+0x412>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    175a:	21 2f       	mov	r18, r17
    175c:	30 2f       	mov	r19, r16
    175e:	47 2d       	mov	r20, r7
    1760:	56 2d       	mov	r21, r6
    1762:	c5 01       	movw	r24, r10
    1764:	b4 01       	movw	r22, r8
    1766:	0e 94 ad 11 	call	0x235a	; 0x235a <__divsf3>
    176a:	2d 85       	ldd	r18, Y+13	; 0x0d
    176c:	3e 85       	ldd	r19, Y+14	; 0x0e
    176e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1770:	58 89       	ldd	r21, Y+16	; 0x10
    1772:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    1776:	60 93 16 01 	sts	0x0116, r22
    177a:	70 93 17 01 	sts	0x0117, r23
    177e:	80 93 18 01 	sts	0x0118, r24
    1782:	90 93 19 01 	sts	0x0119, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    1786:	21 2f       	mov	r18, r17
    1788:	30 2f       	mov	r19, r16
    178a:	47 2d       	mov	r20, r7
    178c:	56 2d       	mov	r21, r6
    178e:	c7 01       	movw	r24, r14
    1790:	b6 01       	movw	r22, r12
    1792:	0e 94 ad 11 	call	0x235a	; 0x235a <__divsf3>
    1796:	2d 85       	ldd	r18, Y+13	; 0x0d
    1798:	3e 85       	ldd	r19, Y+14	; 0x0e
    179a:	4f 85       	ldd	r20, Y+15	; 0x0f
    179c:	58 89       	ldd	r21, Y+16	; 0x10
    179e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    17a2:	60 93 12 01 	sts	0x0112, r22
    17a6:	70 93 13 01 	sts	0x0113, r23
    17aa:	80 93 14 01 	sts	0x0114, r24
    17ae:	90 93 15 01 	sts	0x0115, r25
	}
	
	// Check game state
	if (game_pause)
    17b2:	8f a9       	ldd	r24, Y+55	; 0x37
    17b4:	98 ad       	ldd	r25, Y+56	; 0x38
    17b6:	89 2b       	or	r24, r25
    17b8:	81 f0       	breq	.+32     	; 0x17da <run_motor_control_loop+0x43a>
	{
		left_duty_cycle = 0;
    17ba:	10 92 16 01 	sts	0x0116, r1
    17be:	10 92 17 01 	sts	0x0117, r1
    17c2:	10 92 18 01 	sts	0x0118, r1
    17c6:	10 92 19 01 	sts	0x0119, r1
		right_duty_cycle = 0;
    17ca:	10 92 12 01 	sts	0x0112, r1
    17ce:	10 92 13 01 	sts	0x0113, r1
    17d2:	10 92 14 01 	sts	0x0114, r1
    17d6:	10 92 15 01 	sts	0x0115, r1
	}

	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    17da:	08 e8       	ldi	r16, 0x88	; 136
    17dc:	10 e0       	ldi	r17, 0x00	; 0
    17de:	d8 01       	movw	r26, r16
    17e0:	6d 91       	ld	r22, X+
    17e2:	7c 91       	ld	r23, X
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 4e 12 	call	0x249c	; 0x249c <__floatunsisf>
    17ec:	20 91 16 01 	lds	r18, 0x0116
    17f0:	30 91 17 01 	lds	r19, 0x0117
    17f4:	40 91 18 01 	lds	r20, 0x0118
    17f8:	50 91 19 01 	lds	r21, 0x0119
    17fc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    1800:	0e 94 1f 12 	call	0x243e	; 0x243e <__fixunssfsi>
    1804:	70 93 8b 00 	sts	0x008B, r23
    1808:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    180c:	f8 01       	movw	r30, r16
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 4e 12 	call	0x249c	; 0x249c <__floatunsisf>
    181a:	20 91 12 01 	lds	r18, 0x0112
    181e:	30 91 13 01 	lds	r19, 0x0113
    1822:	40 91 14 01 	lds	r20, 0x0114
    1826:	50 91 15 01 	lds	r21, 0x0115
    182a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    182e:	0e 94 1f 12 	call	0x243e	; 0x243e <__fixunssfsi>
    1832:	70 93 8d 00 	sts	0x008D, r23
    1836:	60 93 8c 00 	sts	0x008C, r22

}
    183a:	64 96       	adiw	r28, 0x14	; 20
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	bf 90       	pop	r11
    1858:	af 90       	pop	r10
    185a:	9f 90       	pop	r9
    185c:	8f 90       	pop	r8
    185e:	7f 90       	pop	r7
    1860:	6f 90       	pop	r6
    1862:	5f 90       	pop	r5
    1864:	4f 90       	pop	r4
    1866:	08 95       	ret

00001868 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    1868:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    186a:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    186c:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    186e:	8c e0       	ldi	r24, 0x0C	; 12
    1870:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    1874:	e9 e6       	ldi	r30, 0x69	; 105
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	80 62       	ori	r24, 0x20	; 32
    187c:	80 83       	st	Z, r24
    187e:	80 81       	ld	r24, Z
    1880:	8f 7e       	andi	r24, 0xEF	; 239
    1882:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1884:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    1886:	78 94       	sei
    1888:	08 95       	ret

0000188a <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    188a:	1f 93       	push	r17
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	18 2f       	mov	r17, r24
    1892:	d6 2f       	mov	r29, r22
    1894:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1896:	0e 94 34 0c 	call	0x1868	; 0x1868 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    189a:	94 ea       	ldi	r25, 0xA4	; 164
    189c:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    18a0:	ec eb       	ldi	r30, 0xBC	; 188
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	90 81       	ld	r25, Z
    18a6:	99 23       	and	r25, r25
    18a8:	ec f7       	brge	.-6      	; 0x18a4 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    18aa:	90 e5       	ldi	r25, 0x50	; 80
    18ac:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    18b0:	94 e8       	ldi	r25, 0x84	; 132
    18b2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    18b6:	ec eb       	ldi	r30, 0xBC	; 188
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	90 81       	ld	r25, Z
    18bc:	99 23       	and	r25, r25
    18be:	ec f7       	brge	.-6      	; 0x18ba <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    18c0:	90 91 b9 00 	lds	r25, 0x00B9
    18c4:	98 7f       	andi	r25, 0xF8	; 248
    18c6:	90 32       	cpi	r25, 0x20	; 32
    18c8:	29 f4       	brne	.+10     	; 0x18d4 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    18ca:	84 e9       	ldi	r24, 0x94	; 148
    18cc:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	2d c0       	rjmp	.+90     	; 0x192e <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    18da:	84 e8       	ldi	r24, 0x84	; 132
    18dc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    18e0:	ec eb       	ldi	r30, 0xBC	; 188
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	90 81       	ld	r25, Z
    18e6:	99 23       	and	r25, r25
    18e8:	ec f7       	brge	.-6      	; 0x18e4 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    18ea:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    18ee:	84 e8       	ldi	r24, 0x84	; 132
    18f0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    18f4:	ec eb       	ldi	r30, 0xBC	; 188
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	88 23       	and	r24, r24
    18fc:	ec f7       	brge	.-6      	; 0x18f8 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    18fe:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1902:	84 e8       	ldi	r24, 0x84	; 132
    1904:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1908:	ec eb       	ldi	r30, 0xBC	; 188
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	88 23       	and	r24, r24
    1910:	ec f7       	brge	.-6      	; 0x190c <m_rf_open+0x82>
	
	TWDR = packet_length;
    1912:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1916:	84 e8       	ldi	r24, 0x84	; 132
    1918:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    191c:	ec eb       	ldi	r30, 0xBC	; 188
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	88 23       	and	r24, r24
    1924:	ec f7       	brge	.-6      	; 0x1920 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1926:	84 e9       	ldi	r24, 0x94	; 148
    1928:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	08 95       	ret

00001936 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    193c:	84 ea       	ldi	r24, 0xA4	; 164
    193e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1942:	ec eb       	ldi	r30, 0xBC	; 188
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	90 81       	ld	r25, Z
    1948:	99 23       	and	r25, r25
    194a:	ec f7       	brge	.-6      	; 0x1946 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    194c:	81 e5       	ldi	r24, 0x51	; 81
    194e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1952:	84 e8       	ldi	r24, 0x84	; 132
    1954:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1958:	ec eb       	ldi	r30, 0xBC	; 188
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	90 81       	ld	r25, Z
    195e:	99 23       	and	r25, r25
    1960:	ec f7       	brge	.-6      	; 0x195c <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1962:	80 91 b9 00 	lds	r24, 0x00B9
    1966:	88 7f       	andi	r24, 0xF8	; 248
    1968:	88 34       	cpi	r24, 0x48	; 72
    196a:	29 f4       	brne	.+10     	; 0x1976 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    196c:	84 e9       	ldi	r24, 0x94	; 148
    196e:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	41 c0       	rjmp	.+130    	; 0x19f8 <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1976:	84 ec       	ldi	r24, 0xC4	; 196
    1978:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    197c:	ec eb       	ldi	r30, 0xBC	; 188
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	90 81       	ld	r25, Z
    1982:	99 23       	and	r25, r25
    1984:	ec f7       	brge	.-6      	; 0x1980 <m_rf_read+0x4a>
	bytes = TWDR;
    1986:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    198a:	46 13       	cpse	r20, r22
    198c:	09 c0       	rjmp	.+18     	; 0x19a0 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    198e:	84 2f       	mov	r24, r20
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	18 16       	cp	r1, r24
    1996:	19 06       	cpc	r1, r25
    1998:	44 f0       	brlt	.+16     	; 0x19aa <m_rf_read+0x74>
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	50 e0       	ldi	r21, 0x00	; 0
    199e:	1a c0       	rjmp	.+52     	; 0x19d4 <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    19a0:	84 e9       	ldi	r24, 0x94	; 148
    19a2:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	27 c0       	rjmp	.+78     	; 0x19f8 <m_rf_read+0xc2>
    19aa:	d9 01       	movw	r26, r18
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	41 50       	subi	r20, 0x01	; 1
    19b0:	51 09       	sbc	r21, r1
    19b2:	b9 01       	movw	r22, r18
    19b4:	64 0f       	add	r22, r20
    19b6:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    19b8:	ec eb       	ldi	r30, 0xBC	; 188
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    19be:	cb eb       	ldi	r28, 0xBB	; 187
    19c0:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    19c2:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    19c4:	90 81       	ld	r25, Z
    19c6:	99 23       	and	r25, r25
    19c8:	ec f7       	brge	.-6      	; 0x19c4 <m_rf_read+0x8e>
		buffer[i] = TWDR;
    19ca:	98 81       	ld	r25, Y
    19cc:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    19ce:	a6 17       	cp	r26, r22
    19d0:	b7 07       	cpc	r27, r23
    19d2:	b9 f7       	brne	.-18     	; 0x19c2 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    19d4:	84 e8       	ldi	r24, 0x84	; 132
    19d6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    19da:	ec eb       	ldi	r30, 0xBC	; 188
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	90 81       	ld	r25, Z
    19e0:	99 23       	and	r25, r25
    19e2:	ec f7       	brge	.-6      	; 0x19de <m_rf_read+0xa8>
	buffer[i++] = TWDR;
    19e4:	80 91 bb 00 	lds	r24, 0x00BB
    19e8:	f9 01       	movw	r30, r18
    19ea:	e4 0f       	add	r30, r20
    19ec:	f5 1f       	adc	r31, r21
    19ee:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    19f0:	84 e9       	ldi	r24, 0x94	; 148
    19f2:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
}
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	08 95       	ret

000019fe <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    1a04:	80 ea       	ldi	r24, 0xA0	; 160
    1a06:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    1a0a:	82 e1       	ldi	r24, 0x12	; 18
    1a0c:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1a0e:	09 b4       	in	r0, 0x29	; 41
    1a10:	00 fe       	sbrs	r0, 0
    1a12:	fd cf       	rjmp	.-6      	; 0x1a0e <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1a14:	80 e9       	ldi	r24, 0x90	; 144
    1a16:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1a1a:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1a1e:	10 92 89 01 	sts	0x0189, r1
	cdc_line_rtsdtr = 0;
    1a22:	10 92 87 01 	sts	0x0187, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    1a26:	8c e0       	ldi	r24, 0x0C	; 12
    1a28:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1a2c:	78 94       	sei
    1a2e:	08 95       	ret

00001a30 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1a30:	1f 92       	push	r1
    1a32:	0f 92       	push	r0
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	0f 92       	push	r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	8f 93       	push	r24
    1a3c:	9f 93       	push	r25
    1a3e:	ef 93       	push	r30
    1a40:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1a42:	e1 ee       	ldi	r30, 0xE1	; 225
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
        UDINT = 0;
    1a48:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1a4a:	83 ff       	sbrs	r24, 3
    1a4c:	11 c0       	rjmp	.+34     	; 0x1a70 <__vector_10+0x40>
		UENUM = 0;
    1a4e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1a58:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1a5c:	92 e1       	ldi	r25, 0x12	; 18
    1a5e:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1a62:	98 e0       	ldi	r25, 0x08	; 8
    1a64:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1a68:	10 92 89 01 	sts	0x0189, r1
		cdc_line_rtsdtr = 0;
    1a6c:	10 92 87 01 	sts	0x0187, r1
        }
	if (intbits & (1<<SOFI)) {
    1a70:	82 ff       	sbrs	r24, 2
    1a72:	13 c0       	rjmp	.+38     	; 0x1a9a <__vector_10+0x6a>
		if (usb_configuration) {
    1a74:	80 91 89 01 	lds	r24, 0x0189
    1a78:	88 23       	and	r24, r24
    1a7a:	79 f0       	breq	.+30     	; 0x1a9a <__vector_10+0x6a>
			t = transmit_flush_timer;
    1a7c:	80 91 88 01 	lds	r24, 0x0188
			if (t) {
    1a80:	88 23       	and	r24, r24
    1a82:	59 f0       	breq	.+22     	; 0x1a9a <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1a84:	81 50       	subi	r24, 0x01	; 1
    1a86:	80 93 88 01 	sts	0x0188, r24
				if (!t) {
    1a8a:	81 11       	cpse	r24, r1
    1a8c:	06 c0       	rjmp	.+12     	; 0x1a9a <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1a8e:	84 e0       	ldi	r24, 0x04	; 4
    1a90:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1a94:	8a e3       	ldi	r24, 0x3A	; 58
    1a96:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1a9a:	ff 91       	pop	r31
    1a9c:	ef 91       	pop	r30
    1a9e:	9f 91       	pop	r25
    1aa0:	8f 91       	pop	r24
    1aa2:	0f 90       	pop	r0
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	0f 90       	pop	r0
    1aa8:	1f 90       	pop	r1
    1aaa:	18 95       	reti

00001aac <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1aac:	1f 92       	push	r1
    1aae:	0f 92       	push	r0
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	0f 92       	push	r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	2f 93       	push	r18
    1abc:	3f 93       	push	r19
    1abe:	4f 93       	push	r20
    1ac0:	5f 93       	push	r21
    1ac2:	6f 93       	push	r22
    1ac4:	7f 93       	push	r23
    1ac6:	8f 93       	push	r24
    1ac8:	9f 93       	push	r25
    1aca:	af 93       	push	r26
    1acc:	bf 93       	push	r27
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	ef 93       	push	r30
    1ad4:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1ad6:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1ada:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1ade:	83 ff       	sbrs	r24, 3
    1ae0:	4c c1       	rjmp	.+664    	; 0x1d7a <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    1ae2:	e1 ef       	ldi	r30, 0xF1	; 241
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    1ae8:	80 81       	ld	r24, Z
                wValue = UEDATX;
    1aea:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1aec:	90 81       	ld	r25, Z
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    1af2:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    1af4:	90 81       	ld	r25, Z
    1af6:	50 e0       	ldi	r21, 0x00	; 0
    1af8:	59 2b       	or	r21, r25
                wLength = UEDATX;
    1afa:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    1afc:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1afe:	92 ef       	ldi	r25, 0xF2	; 242
    1b00:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    1b04:	86 30       	cpi	r24, 0x06	; 6
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <__vector_11+0x5e>
    1b08:	58 c0       	rjmp	.+176    	; 0x1bba <__vector_11+0x10e>
    1b0a:	04 c0       	rjmp	.+8      	; 0x1b14 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1b0c:	81 e2       	ldi	r24, 0x21	; 33
    1b0e:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1b12:	3a c1       	rjmp	.+628    	; 0x1d88 <__vector_11+0x2dc>
    1b14:	66 e0       	ldi	r22, 0x06	; 6
    1b16:	88 ef       	ldi	r24, 0xF8	; 248
    1b18:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	a5 91       	lpm	r26, Z+
    1b1e:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    1b20:	2a 17       	cp	r18, r26
    1b22:	3b 07       	cpc	r19, r27
    1b24:	11 f0       	breq	.+4      	; 0x1b2a <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    1b26:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1b28:	23 c0       	rjmp	.+70     	; 0x1b70 <__vector_11+0xc4>
				}
				list += 2;
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1b2e:	a5 91       	lpm	r26, Z+
    1b30:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    1b32:	4a 17       	cp	r20, r26
    1b34:	5b 07       	cpc	r21, r27
    1b36:	11 f0       	breq	.+4      	; 0x1b3c <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    1b38:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1b3a:	1a c0       	rjmp	.+52     	; 0x1b70 <__vector_11+0xc4>
				}
				list += 2;
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1b40:	45 91       	lpm	r20, Z+
    1b42:	54 91       	lpm	r21, Z
				list += 2;
    1b44:	fc 01       	movw	r30, r24
    1b46:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1b48:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1b4a:	87 2f       	mov	r24, r23
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1b50:	8f 3f       	cpi	r24, 0xFF	; 255
    1b52:	91 05       	cpc	r25, r1
    1b54:	19 f0       	breq	.+6      	; 0x1b5c <__vector_11+0xb0>
    1b56:	10 f0       	brcs	.+4      	; 0x1b5c <__vector_11+0xb0>
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	82 17       	cp	r24, r18
    1b5e:	08 f4       	brcc	.+2      	; 0x1b62 <__vector_11+0xb6>
    1b60:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1b62:	a8 ee       	ldi	r26, 0xE8	; 232
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1b66:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b68:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1b6a:	c1 ef       	ldi	r28, 0xF1	; 241
    1b6c:	d0 e0       	ldi	r29, 0x00	; 0
    1b6e:	03 c0       	rjmp	.+6      	; 0x1b76 <__vector_11+0xca>
    1b70:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1b72:	99 f6       	brne	.-90     	; 0x1b1a <__vector_11+0x6e>
    1b74:	cb cf       	rjmp	.-106    	; 0x1b0c <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1b76:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1b78:	98 2f       	mov	r25, r24
    1b7a:	95 70       	andi	r25, 0x05	; 5
    1b7c:	e1 f3       	breq	.-8      	; 0x1b76 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    1b7e:	82 fd       	sbrc	r24, 2
    1b80:	03 c1       	rjmp	.+518    	; 0x1d88 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1b82:	32 2f       	mov	r19, r18
    1b84:	21 31       	cpi	r18, 0x11	; 17
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <__vector_11+0xde>
    1b88:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    1b8a:	33 23       	and	r19, r19
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <__vector_11+0xe4>
    1b8e:	f9 c0       	rjmp	.+498    	; 0x1d82 <__vector_11+0x2d6>
    1b90:	fa 01       	movw	r30, r20
    1b92:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    1b94:	94 91       	lpm	r25, Z
    1b96:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1b98:	81 50       	subi	r24, 0x01	; 1
    1b9a:	31 96       	adiw	r30, 0x01	; 1
    1b9c:	81 11       	cpse	r24, r1
    1b9e:	fa cf       	rjmp	.-12     	; 0x1b94 <__vector_11+0xe8>
    1ba0:	8f ef       	ldi	r24, 0xFF	; 255
    1ba2:	83 0f       	add	r24, r19
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	48 0f       	add	r20, r24
    1baa:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1bac:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1bae:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1bb0:	21 11       	cpse	r18, r1
    1bb2:	e1 cf       	rjmp	.-62     	; 0x1b76 <__vector_11+0xca>
    1bb4:	30 31       	cpi	r19, 0x10	; 16
    1bb6:	f9 f2       	breq	.-66     	; 0x1b76 <__vector_11+0xca>
    1bb8:	e7 c0       	rjmp	.+462    	; 0x1d88 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1bba:	85 30       	cpi	r24, 0x05	; 5
    1bbc:	61 f4       	brne	.+24     	; 0x1bd6 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1bbe:	8e ef       	ldi	r24, 0xFE	; 254
    1bc0:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1bc4:	e8 ee       	ldi	r30, 0xE8	; 232
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	80 ff       	sbrs	r24, 0
    1bcc:	fd cf       	rjmp	.-6      	; 0x1bc8 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1bce:	20 68       	ori	r18, 0x80	; 128
    1bd0:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1bd4:	d9 c0       	rjmp	.+434    	; 0x1d88 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1bd6:	89 30       	cpi	r24, 0x09	; 9
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <__vector_11+0x130>
    1bda:	35 c0       	rjmp	.+106    	; 0x1c46 <__vector_11+0x19a>
    1bdc:	61 11       	cpse	r22, r1
    1bde:	cd c0       	rjmp	.+410    	; 0x1d7a <__vector_11+0x2ce>
			usb_configuration = wValue;
    1be0:	20 93 89 01 	sts	0x0189, r18
			cdc_line_rtsdtr = 0;
    1be4:	10 92 87 01 	sts	0x0187, r1
			transmit_flush_timer = 0;
    1be8:	10 92 88 01 	sts	0x0188, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1bec:	8e ef       	ldi	r24, 0xFE	; 254
    1bee:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1bf4:	21 ea       	ldi	r18, 0xA1	; 161
    1bf6:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1bf8:	c9 ee       	ldi	r28, 0xE9	; 233
    1bfa:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1bfc:	ab ee       	ldi	r26, 0xEB	; 235
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1c00:	0c ee       	ldi	r16, 0xEC	; 236
    1c02:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1c04:	6d ee       	ldi	r22, 0xED	; 237
    1c06:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1c08:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    1c0a:	a9 01       	movw	r20, r18
    1c0c:	4f 5f       	subi	r20, 0xFF	; 255
    1c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c10:	f9 01       	movw	r30, r18
    1c12:	94 91       	lpm	r25, Z
				UECONX = en;
    1c14:	9c 93       	st	X, r25
				if (en) {
    1c16:	99 23       	and	r25, r25
    1c18:	61 f0       	breq	.+24     	; 0x1c32 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    1c1a:	fa 01       	movw	r30, r20
    1c1c:	44 91       	lpm	r20, Z
    1c1e:	f8 01       	movw	r30, r16
    1c20:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    1c22:	f9 01       	movw	r30, r18
    1c24:	32 96       	adiw	r30, 0x02	; 2
    1c26:	94 91       	lpm	r25, Z
    1c28:	2d 5f       	subi	r18, 0xFD	; 253
    1c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2c:	fb 01       	movw	r30, r22
    1c2e:	90 83       	st	Z, r25
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1c32:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1c34:	8f 5f       	subi	r24, 0xFF	; 255
    1c36:	85 30       	cpi	r24, 0x05	; 5
    1c38:	39 f7       	brne	.-50     	; 0x1c08 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1c3a:	ea ee       	ldi	r30, 0xEA	; 234
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	8e e1       	ldi	r24, 0x1E	; 30
    1c40:	80 83       	st	Z, r24
        		UERST = 0;
    1c42:	10 82       	st	Z, r1
			return;
    1c44:	a1 c0       	rjmp	.+322    	; 0x1d88 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1c46:	88 30       	cpi	r24, 0x08	; 8
    1c48:	81 f4       	brne	.+32     	; 0x1c6a <__vector_11+0x1be>
    1c4a:	60 38       	cpi	r22, 0x80	; 128
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <__vector_11+0x1a4>
    1c4e:	95 c0       	rjmp	.+298    	; 0x1d7a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c50:	e8 ee       	ldi	r30, 0xE8	; 232
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	80 ff       	sbrs	r24, 0
    1c58:	fd cf       	rjmp	.-6      	; 0x1c54 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1c5a:	80 91 89 01 	lds	r24, 0x0189
    1c5e:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c62:	8e ef       	ldi	r24, 0xFE	; 254
    1c64:	80 93 e8 00 	sts	0x00E8, r24
    1c68:	8f c0       	rjmp	.+286    	; 0x1d88 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1c6a:	81 32       	cpi	r24, 0x21	; 33
    1c6c:	b9 f4       	brne	.+46     	; 0x1c9c <__vector_11+0x1f0>
    1c6e:	61 3a       	cpi	r22, 0xA1	; 161
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <__vector_11+0x1c8>
    1c72:	83 c0       	rjmp	.+262    	; 0x1d7a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c74:	e8 ee       	ldi	r30, 0xE8	; 232
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 ff       	sbrs	r24, 0
    1c7c:	fd cf       	rjmp	.-6      	; 0x1c78 <__vector_11+0x1cc>
    1c7e:	e6 e2       	ldi	r30, 0x26	; 38
    1c80:	f1 e0       	ldi	r31, 0x01	; 1
    1c82:	2d e2       	ldi	r18, 0x2D	; 45
    1c84:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1c86:	a1 ef       	ldi	r26, 0xF1	; 241
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	81 91       	ld	r24, Z+
    1c8c:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1c8e:	e2 17       	cp	r30, r18
    1c90:	f3 07       	cpc	r31, r19
    1c92:	d9 f7       	brne	.-10     	; 0x1c8a <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c94:	8e ef       	ldi	r24, 0xFE	; 254
    1c96:	80 93 e8 00 	sts	0x00E8, r24
    1c9a:	76 c0       	rjmp	.+236    	; 0x1d88 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1c9c:	80 32       	cpi	r24, 0x20	; 32
    1c9e:	d1 f4       	brne	.+52     	; 0x1cd4 <__vector_11+0x228>
    1ca0:	61 32       	cpi	r22, 0x21	; 33
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <__vector_11+0x1fa>
    1ca4:	6a c0       	rjmp	.+212    	; 0x1d7a <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1ca6:	e8 ee       	ldi	r30, 0xE8	; 232
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	82 ff       	sbrs	r24, 2
    1cae:	fd cf       	rjmp	.-6      	; 0x1caa <__vector_11+0x1fe>
    1cb0:	e6 e2       	ldi	r30, 0x26	; 38
    1cb2:	f1 e0       	ldi	r31, 0x01	; 1
    1cb4:	2d e2       	ldi	r18, 0x2D	; 45
    1cb6:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1cb8:	a1 ef       	ldi	r26, 0xF1	; 241
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	8c 91       	ld	r24, X
    1cbe:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1cc0:	e2 17       	cp	r30, r18
    1cc2:	f3 07       	cpc	r31, r19
    1cc4:	d9 f7       	brne	.-10     	; 0x1cbc <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1cc6:	e8 ee       	ldi	r30, 0xE8	; 232
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	8b ef       	ldi	r24, 0xFB	; 251
    1ccc:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1cce:	8e ef       	ldi	r24, 0xFE	; 254
    1cd0:	80 83       	st	Z, r24
    1cd2:	5a c0       	rjmp	.+180    	; 0x1d88 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1cd4:	82 32       	cpi	r24, 0x22	; 34
    1cd6:	71 f4       	brne	.+28     	; 0x1cf4 <__vector_11+0x248>
    1cd8:	61 32       	cpi	r22, 0x21	; 33
    1cda:	09 f0       	breq	.+2      	; 0x1cde <__vector_11+0x232>
    1cdc:	4e c0       	rjmp	.+156    	; 0x1d7a <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    1cde:	20 93 87 01 	sts	0x0187, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1ce2:	e8 ee       	ldi	r30, 0xE8	; 232
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	80 ff       	sbrs	r24, 0
    1cea:	fd cf       	rjmp	.-6      	; 0x1ce6 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1cec:	8e ef       	ldi	r24, 0xFE	; 254
    1cee:	80 93 e8 00 	sts	0x00E8, r24
    1cf2:	4a c0       	rjmp	.+148    	; 0x1d88 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1cf4:	81 11       	cpse	r24, r1
    1cf6:	1a c0       	rjmp	.+52     	; 0x1d2c <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1cf8:	e8 ee       	ldi	r30, 0xE8	; 232
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	80 ff       	sbrs	r24, 0
    1d00:	fd cf       	rjmp	.-6      	; 0x1cfc <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1d02:	62 38       	cpi	r22, 0x82	; 130
    1d04:	51 f4       	brne	.+20     	; 0x1d1a <__vector_11+0x26e>
				UENUM = wIndex;
    1d06:	e9 ee       	ldi	r30, 0xE9	; 233
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    1d0c:	80 91 eb 00 	lds	r24, 0x00EB
    1d10:	85 fb       	bst	r24, 5
    1d12:	88 27       	eor	r24, r24
    1d14:	80 f9       	bld	r24, 0
				UENUM = 0;
    1d16:	10 82       	st	Z, r1
    1d18:	01 c0       	rjmp	.+2      	; 0x1d1c <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1d1c:	e1 ef       	ldi	r30, 0xF1	; 241
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 83       	st	Z, r24
			UEDATX = 0;
    1d22:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d24:	8e ef       	ldi	r24, 0xFE	; 254
    1d26:	80 93 e8 00 	sts	0x00E8, r24
    1d2a:	2e c0       	rjmp	.+92     	; 0x1d88 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1d2c:	98 2f       	mov	r25, r24
    1d2e:	9d 7f       	andi	r25, 0xFD	; 253
    1d30:	91 30       	cpi	r25, 0x01	; 1
    1d32:	19 f5       	brne	.+70     	; 0x1d7a <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    1d34:	62 30       	cpi	r22, 0x02	; 2
    1d36:	09 f5       	brne	.+66     	; 0x1d7a <__vector_11+0x2ce>
    1d38:	23 2b       	or	r18, r19
    1d3a:	f9 f4       	brne	.+62     	; 0x1d7a <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    1d3c:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1d3e:	9f ef       	ldi	r25, 0xFF	; 255
    1d40:	94 0f       	add	r25, r20
    1d42:	94 30       	cpi	r25, 0x04	; 4
    1d44:	d0 f4       	brcc	.+52     	; 0x1d7a <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d46:	9e ef       	ldi	r25, 0xFE	; 254
    1d48:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1d4c:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    1d50:	83 30       	cpi	r24, 0x03	; 3
    1d52:	21 f4       	brne	.+8      	; 0x1d5c <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1d54:	81 e2       	ldi	r24, 0x21	; 33
    1d56:	80 93 eb 00 	sts	0x00EB, r24
    1d5a:	16 c0       	rjmp	.+44     	; 0x1d88 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1d5c:	89 e1       	ldi	r24, 0x19	; 25
    1d5e:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <__vector_11+0x2c0>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	4a 95       	dec	r20
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <__vector_11+0x2bc>
    1d70:	ea ee       	ldi	r30, 0xEA	; 234
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 83       	st	Z, r24
					UERST = 0;
    1d76:	10 82       	st	Z, r1
    1d78:	07 c0       	rjmp	.+14     	; 0x1d88 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1d7a:	81 e2       	ldi	r24, 0x21	; 33
    1d7c:	80 93 eb 00 	sts	0x00EB, r24
    1d80:	03 c0       	rjmp	.+6      	; 0x1d88 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d82:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1d84:	21 11       	cpse	r18, r1
    1d86:	f7 ce       	rjmp	.-530    	; 0x1b76 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1d88:	ff 91       	pop	r31
    1d8a:	ef 91       	pop	r30
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	bf 91       	pop	r27
    1d92:	af 91       	pop	r26
    1d94:	9f 91       	pop	r25
    1d96:	8f 91       	pop	r24
    1d98:	7f 91       	pop	r23
    1d9a:	6f 91       	pop	r22
    1d9c:	5f 91       	pop	r21
    1d9e:	4f 91       	pop	r20
    1da0:	3f 91       	pop	r19
    1da2:	2f 91       	pop	r18
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	0f 90       	pop	r0
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	0f 90       	pop	r0
    1dae:	1f 90       	pop	r1
    1db0:	18 95       	reti

00001db2 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1db6:	ec eb       	ldi	r30, 0xBC	; 188
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	88 23       	and	r24, r24
    1dbe:	34 f0       	brlt	.+12     	; 0x1dcc <twi_wait+0x1a>
    1dc0:	2f 5f       	subi	r18, 0xFF	; 255
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	29 3e       	cpi	r18, 0xE9	; 233
    1dc6:	83 e0       	ldi	r24, 0x03	; 3
    1dc8:	38 07       	cpc	r19, r24
    1dca:	b9 f7       	brne	.-18     	; 0x1dba <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	28 3e       	cpi	r18, 0xE8	; 232
    1dd0:	33 40       	sbci	r19, 0x03	; 3
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <twi_wait+0x24>
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1dd6:	08 95       	ret

00001dd8 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1dd8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1ddc:	84 e8       	ldi	r24, 0x84	; 132
    1dde:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1de2:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <twi_wait>
    1de6:	88 23       	and	r24, r24
    1de8:	19 f0       	breq	.+6      	; 0x1df0 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1dea:	80 91 b9 00 	lds	r24, 0x00B9
    1dee:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    1df0:	08 95       	ret

00001df2 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1df2:	cf 93       	push	r28
    1df4:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1df6:	94 ea       	ldi	r25, 0xA4	; 164
    1df8:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1dfc:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <twi_wait>
    1e00:	88 23       	and	r24, r24
    1e02:	61 f0       	breq	.+24     	; 0x1e1c <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1e04:	8c 2f       	mov	r24, r28
    1e06:	88 0f       	add	r24, r24
    1e08:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1e0c:	80 32       	cpi	r24, 0x20	; 32
    1e0e:	29 f4       	brne	.+10     	; 0x1e1a <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1e10:	84 e9       	ldi	r24, 0x94	; 148
    1e12:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <start_write+0x2a>
	}	
	return 1;	// success
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
}	
    1e1c:	cf 91       	pop	r28
    1e1e:	08 95       	ret

00001e20 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1e20:	0e 94 34 0c 	call	0x1868	; 0x1868 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1e24:	88 e5       	ldi	r24, 0x58	; 88
    1e26:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <start_write>
    1e2a:	88 23       	and	r24, r24
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <m_wii_open+0x10>
    1e2e:	cd c0       	rjmp	.+410    	; 0x1fca <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    1e30:	80 e3       	ldi	r24, 0x30	; 48
    1e32:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1e36:	88 23       	and	r24, r24
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <m_wii_open+0x1c>
    1e3a:	c9 c0       	rjmp	.+402    	; 0x1fce <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1e42:	88 23       	and	r24, r24
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <m_wii_open+0x28>
    1e46:	c5 c0       	rjmp	.+394    	; 0x1fd2 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1e48:	84 e9       	ldi	r24, 0x94	; 148
    1e4a:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e4e:	83 ec       	ldi	r24, 0xC3	; 195
    1e50:	99 e0       	ldi	r25, 0x09	; 9
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <m_wii_open+0x32>
    1e56:	00 c0       	rjmp	.+0      	; 0x1e58 <m_wii_open+0x38>
    1e58:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1e5a:	88 e5       	ldi	r24, 0x58	; 88
    1e5c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <start_write>
    1e60:	88 23       	and	r24, r24
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <m_wii_open+0x46>
    1e64:	b8 c0       	rjmp	.+368    	; 0x1fd6 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1e6c:	88 23       	and	r24, r24
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <m_wii_open+0x52>
    1e70:	b4 c0       	rjmp	.+360    	; 0x1fda <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1e78:	88 23       	and	r24, r24
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <m_wii_open+0x5e>
    1e7c:	b0 c0       	rjmp	.+352    	; 0x1fde <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1e84:	88 23       	and	r24, r24
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <m_wii_open+0x6a>
    1e88:	ac c0       	rjmp	.+344    	; 0x1fe2 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1e90:	88 23       	and	r24, r24
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <m_wii_open+0x76>
    1e94:	a8 c0       	rjmp	.+336    	; 0x1fe6 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1e9c:	88 23       	and	r24, r24
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <m_wii_open+0x82>
    1ea0:	a4 c0       	rjmp	.+328    	; 0x1fea <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1ea8:	88 23       	and	r24, r24
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <m_wii_open+0x8e>
    1eac:	a0 c0       	rjmp	.+320    	; 0x1fee <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1eb4:	88 23       	and	r24, r24
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <m_wii_open+0x9a>
    1eb8:	9c c0       	rjmp	.+312    	; 0x1ff2 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    1eba:	80 e9       	ldi	r24, 0x90	; 144
    1ebc:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1ec0:	88 23       	and	r24, r24
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <m_wii_open+0xa6>
    1ec4:	98 c0       	rjmp	.+304    	; 0x1ff6 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1ec6:	84 e9       	ldi	r24, 0x94	; 148
    1ec8:	80 93 bc 00 	sts	0x00BC, r24
    1ecc:	83 ec       	ldi	r24, 0xC3	; 195
    1ece:	99 e0       	ldi	r25, 0x09	; 9
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <m_wii_open+0xb0>
    1ed4:	00 c0       	rjmp	.+0      	; 0x1ed6 <m_wii_open+0xb6>
    1ed6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1ed8:	88 e5       	ldi	r24, 0x58	; 88
    1eda:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <start_write>
    1ede:	88 23       	and	r24, r24
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <m_wii_open+0xc4>
    1ee2:	8b c0       	rjmp	.+278    	; 0x1ffa <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    1ee4:	87 e0       	ldi	r24, 0x07	; 7
    1ee6:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1eea:	88 23       	and	r24, r24
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <m_wii_open+0xd0>
    1eee:	87 c0       	rjmp	.+270    	; 0x1ffe <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1ef6:	88 23       	and	r24, r24
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <m_wii_open+0xdc>
    1efa:	83 c0       	rjmp	.+262    	; 0x2002 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    1efc:	81 e4       	ldi	r24, 0x41	; 65
    1efe:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1f02:	88 23       	and	r24, r24
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <m_wii_open+0xe8>
    1f06:	7f c0       	rjmp	.+254    	; 0x2006 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1f08:	84 e9       	ldi	r24, 0x94	; 148
    1f0a:	80 93 bc 00 	sts	0x00BC, r24
    1f0e:	83 ec       	ldi	r24, 0xC3	; 195
    1f10:	99 e0       	ldi	r25, 0x09	; 9
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <m_wii_open+0xf2>
    1f16:	00 c0       	rjmp	.+0      	; 0x1f18 <m_wii_open+0xf8>
    1f18:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1f1a:	88 e5       	ldi	r24, 0x58	; 88
    1f1c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <start_write>
    1f20:	88 23       	and	r24, r24
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <m_wii_open+0x106>
    1f24:	72 c0       	rjmp	.+228    	; 0x200a <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    1f26:	8a e1       	ldi	r24, 0x1A	; 26
    1f28:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1f2c:	88 23       	and	r24, r24
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <m_wii_open+0x112>
    1f30:	6e c0       	rjmp	.+220    	; 0x200e <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    1f32:	80 e4       	ldi	r24, 0x40	; 64
    1f34:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1f38:	88 23       	and	r24, r24
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <m_wii_open+0x11e>
    1f3c:	6a c0       	rjmp	.+212    	; 0x2012 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1f44:	88 23       	and	r24, r24
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <m_wii_open+0x12a>
    1f48:	66 c0       	rjmp	.+204    	; 0x2016 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1f4a:	84 e9       	ldi	r24, 0x94	; 148
    1f4c:	80 93 bc 00 	sts	0x00BC, r24
    1f50:	83 ec       	ldi	r24, 0xC3	; 195
    1f52:	99 e0       	ldi	r25, 0x09	; 9
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <m_wii_open+0x134>
    1f58:	00 c0       	rjmp	.+0      	; 0x1f5a <m_wii_open+0x13a>
    1f5a:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1f5c:	88 e5       	ldi	r24, 0x58	; 88
    1f5e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <start_write>
    1f62:	88 23       	and	r24, r24
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <m_wii_open+0x148>
    1f66:	59 c0       	rjmp	.+178    	; 0x201a <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    1f68:	83 e3       	ldi	r24, 0x33	; 51
    1f6a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1f6e:	88 23       	and	r24, r24
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <m_wii_open+0x154>
    1f72:	55 c0       	rjmp	.+170    	; 0x201e <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    1f74:	83 e0       	ldi	r24, 0x03	; 3
    1f76:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1f7a:	88 23       	and	r24, r24
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <m_wii_open+0x160>
    1f7e:	51 c0       	rjmp	.+162    	; 0x2022 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1f80:	84 e9       	ldi	r24, 0x94	; 148
    1f82:	80 93 bc 00 	sts	0x00BC, r24
    1f86:	83 ec       	ldi	r24, 0xC3	; 195
    1f88:	99 e0       	ldi	r25, 0x09	; 9
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <m_wii_open+0x16a>
    1f8e:	00 c0       	rjmp	.+0      	; 0x1f90 <m_wii_open+0x170>
    1f90:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1f92:	88 e5       	ldi	r24, 0x58	; 88
    1f94:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <start_write>
    1f98:	88 23       	and	r24, r24
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <m_wii_open+0x17e>
    1f9c:	44 c0       	rjmp	.+136    	; 0x2026 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    1f9e:	80 e3       	ldi	r24, 0x30	; 48
    1fa0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1fa4:	88 23       	and	r24, r24
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <m_wii_open+0x18a>
    1fa8:	40 c0       	rjmp	.+128    	; 0x202a <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    1faa:	88 e0       	ldi	r24, 0x08	; 8
    1fac:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    1fb0:	88 23       	and	r24, r24
    1fb2:	e9 f1       	breq	.+122    	; 0x202e <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1fb4:	84 e9       	ldi	r24, 0x94	; 148
    1fb6:	80 93 bc 00 	sts	0x00BC, r24
    1fba:	83 ec       	ldi	r24, 0xC3	; 195
    1fbc:	99 e0       	ldi	r25, 0x09	; 9
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <m_wii_open+0x19e>
    1fc2:	00 c0       	rjmp	.+0      	; 0x1fc4 <m_wii_open+0x1a4>
    1fc4:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    202e:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2030:	08 95       	ret

00002032 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2032:	cf 93       	push	r28
    2034:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2036:	84 ea       	ldi	r24, 0xA4	; 164
    2038:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    203c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <twi_wait>
    2040:	88 23       	and	r24, r24
    2042:	69 f0       	breq	.+26     	; 0x205e <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2044:	8c 2f       	mov	r24, r28
    2046:	88 0f       	add	r24, r24
    2048:	8f 5f       	subi	r24, 0xFF	; 255
    204a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    204e:	88 34       	cpi	r24, 0x48	; 72
    2050:	29 f4       	brne	.+10     	; 0x205c <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2052:	84 e9       	ldi	r24, 0x94	; 148
    2054:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	01 c0       	rjmp	.+2      	; 0x205e <start_read+0x2c>
	}	
	return 1;	// success
    205c:	81 e0       	ldi	r24, 0x01	; 1
}	
    205e:	cf 91       	pop	r28
    2060:	08 95       	ret

00002062 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2062:	0f 93       	push	r16
    2064:	1f 93       	push	r17
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	60 97       	sbiw	r28, 0x10	; 16
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    207c:	fe 01       	movw	r30, r28
    207e:	31 96       	adiw	r30, 0x01	; 1
    2080:	80 e1       	ldi	r24, 0x10	; 16
    2082:	df 01       	movw	r26, r30
    2084:	1d 92       	st	X+, r1
    2086:	8a 95       	dec	r24
    2088:	e9 f7       	brne	.-6      	; 0x2084 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    208a:	88 e5       	ldi	r24, 0x58	; 88
    208c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <start_write>
    2090:	88 23       	and	r24, r24
    2092:	09 f4       	brne	.+2      	; 0x2096 <m_wii_read+0x34>
    2094:	69 c0       	rjmp	.+210    	; 0x2168 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    2096:	86 e3       	ldi	r24, 0x36	; 54
    2098:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <send_byte>
    209c:	88 23       	and	r24, r24
    209e:	09 f4       	brne	.+2      	; 0x20a2 <m_wii_read+0x40>
    20a0:	65 c0       	rjmp	.+202    	; 0x216c <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    20a2:	84 e9       	ldi	r24, 0x94	; 148
    20a4:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20a8:	b8 e0       	ldi	r27, 0x08	; 8
    20aa:	ba 95       	dec	r27
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <m_wii_read+0x48>
    20ae:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    20b0:	88 e5       	ldi	r24, 0x58	; 88
    20b2:	0e 94 19 10 	call	0x2032	; 0x2032 <start_read>
    20b6:	88 23       	and	r24, r24
    20b8:	09 f4       	brne	.+2      	; 0x20bc <m_wii_read+0x5a>
    20ba:	5a c0       	rjmp	.+180    	; 0x2170 <m_wii_read+0x10e>
    20bc:	be 01       	movw	r22, r28
    20be:	6f 5f       	subi	r22, 0xFF	; 255
    20c0:	7f 4f       	sbci	r23, 0xFF	; 255
    20c2:	ae 01       	movw	r20, r28
    20c4:	40 5f       	subi	r20, 0xF0	; 240
    20c6:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    20c8:	ec eb       	ldi	r30, 0xBC	; 188
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    20ce:	2b eb       	ldi	r18, 0xBB	; 187
    20d0:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    20d2:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    20d4:	90 81       	ld	r25, Z
    20d6:	99 23       	and	r25, r25
    20d8:	ec f7       	brge	.-6      	; 0x20d4 <m_wii_read+0x72>
		temp[i] = TWDR;
    20da:	d9 01       	movw	r26, r18
    20dc:	9c 91       	ld	r25, X
    20de:	db 01       	movw	r26, r22
    20e0:	9d 93       	st	X+, r25
    20e2:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    20e4:	a4 17       	cp	r26, r20
    20e6:	b5 07       	cpc	r27, r21
    20e8:	a1 f7       	brne	.-24     	; 0x20d2 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    20ea:	84 e8       	ldi	r24, 0x84	; 132
    20ec:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    20f0:	ec eb       	ldi	r30, 0xBC	; 188
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	88 23       	and	r24, r24
    20f8:	ec f7       	brge	.-6      	; 0x20f4 <m_wii_read+0x92>
	temp[15] = TWDR;
    20fa:	80 91 bb 00 	lds	r24, 0x00BB
    20fe:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2100:	84 e9       	ldi	r24, 0x94	; 148
    2102:	80 93 bc 00 	sts	0x00BC, r24
    2106:	be 01       	movw	r22, r28
    2108:	6c 5f       	subi	r22, 0xFC	; 252
    210a:	7f 4f       	sbci	r23, 0xFF	; 255
    210c:	f8 01       	movw	r30, r16
    210e:	08 5e       	subi	r16, 0xE8	; 232
    2110:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2112:	db 01       	movw	r26, r22
    2114:	2c 91       	ld	r18, X
    2116:	32 2f       	mov	r19, r18
    2118:	30 73       	andi	r19, 0x30	; 48
    211a:	cb 01       	movw	r24, r22
    211c:	02 97       	sbiw	r24, 0x02	; 2
    211e:	dc 01       	movw	r26, r24
    2120:	8c 91       	ld	r24, X
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	b0 e1       	ldi	r27, 0x10	; 16
    2126:	3b 9f       	mul	r19, r27
    2128:	80 0d       	add	r24, r0
    212a:	91 1d       	adc	r25, r1
    212c:	11 24       	eor	r1, r1
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2132:	42 2f       	mov	r20, r18
    2134:	40 7c       	andi	r20, 0xC0	; 192
    2136:	50 e0       	ldi	r21, 0x00	; 0
    2138:	44 0f       	add	r20, r20
    213a:	55 1f       	adc	r21, r21
    213c:	44 0f       	add	r20, r20
    213e:	55 1f       	adc	r21, r21
    2140:	cb 01       	movw	r24, r22
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	dc 01       	movw	r26, r24
    2146:	8c 91       	ld	r24, X
    2148:	48 0f       	add	r20, r24
    214a:	51 1d       	adc	r21, r1
    214c:	53 83       	std	Z+3, r21	; 0x03
    214e:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2150:	2f 70       	andi	r18, 0x0F	; 15
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	35 83       	std	Z+5, r19	; 0x05
    2156:	24 83       	std	Z+4, r18	; 0x04
    2158:	6d 5f       	subi	r22, 0xFD	; 253
    215a:	7f 4f       	sbci	r23, 0xFF	; 255
    215c:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    215e:	e0 17       	cp	r30, r16
    2160:	f1 07       	cpc	r31, r17
    2162:	b9 f6       	brne	.-82     	; 0x2112 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	05 c0       	rjmp	.+10     	; 0x2172 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	03 c0       	rjmp	.+6      	; 0x2172 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	01 c0       	rjmp	.+2      	; 0x2172 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2170:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2172:	60 96       	adiw	r28, 0x10	; 16
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	0f 91       	pop	r16
    2186:	08 95       	ret

00002188 <__subsf3>:
    2188:	50 58       	subi	r21, 0x80	; 128

0000218a <__addsf3>:
    218a:	bb 27       	eor	r27, r27
    218c:	aa 27       	eor	r26, r26
    218e:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__addsf3x>
    2192:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__fp_round>
    2196:	0e 94 df 12 	call	0x25be	; 0x25be <__fp_pscA>
    219a:	38 f0       	brcs	.+14     	; 0x21aa <__addsf3+0x20>
    219c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__fp_pscB>
    21a0:	20 f0       	brcs	.+8      	; 0x21aa <__addsf3+0x20>
    21a2:	39 f4       	brne	.+14     	; 0x21b2 <__addsf3+0x28>
    21a4:	9f 3f       	cpi	r25, 0xFF	; 255
    21a6:	19 f4       	brne	.+6      	; 0x21ae <__addsf3+0x24>
    21a8:	26 f4       	brtc	.+8      	; 0x21b2 <__addsf3+0x28>
    21aa:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_nan>
    21ae:	0e f4       	brtc	.+2      	; 0x21b2 <__addsf3+0x28>
    21b0:	e0 95       	com	r30
    21b2:	e7 fb       	bst	r30, 7
    21b4:	0c 94 af 12 	jmp	0x255e	; 0x255e <__fp_inf>

000021b8 <__addsf3x>:
    21b8:	e9 2f       	mov	r30, r25
    21ba:	0e 94 3d 13 	call	0x267a	; 0x267a <__fp_split3>
    21be:	58 f3       	brcs	.-42     	; 0x2196 <__addsf3+0xc>
    21c0:	ba 17       	cp	r27, r26
    21c2:	62 07       	cpc	r22, r18
    21c4:	73 07       	cpc	r23, r19
    21c6:	84 07       	cpc	r24, r20
    21c8:	95 07       	cpc	r25, r21
    21ca:	20 f0       	brcs	.+8      	; 0x21d4 <__addsf3x+0x1c>
    21cc:	79 f4       	brne	.+30     	; 0x21ec <__addsf3x+0x34>
    21ce:	a6 f5       	brtc	.+104    	; 0x2238 <__addsf3x+0x80>
    21d0:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__fp_zero>
    21d4:	0e f4       	brtc	.+2      	; 0x21d8 <__addsf3x+0x20>
    21d6:	e0 95       	com	r30
    21d8:	0b 2e       	mov	r0, r27
    21da:	ba 2f       	mov	r27, r26
    21dc:	a0 2d       	mov	r26, r0
    21de:	0b 01       	movw	r0, r22
    21e0:	b9 01       	movw	r22, r18
    21e2:	90 01       	movw	r18, r0
    21e4:	0c 01       	movw	r0, r24
    21e6:	ca 01       	movw	r24, r20
    21e8:	a0 01       	movw	r20, r0
    21ea:	11 24       	eor	r1, r1
    21ec:	ff 27       	eor	r31, r31
    21ee:	59 1b       	sub	r21, r25
    21f0:	99 f0       	breq	.+38     	; 0x2218 <__addsf3x+0x60>
    21f2:	59 3f       	cpi	r21, 0xF9	; 249
    21f4:	50 f4       	brcc	.+20     	; 0x220a <__addsf3x+0x52>
    21f6:	50 3e       	cpi	r21, 0xE0	; 224
    21f8:	68 f1       	brcs	.+90     	; 0x2254 <__addsf3x+0x9c>
    21fa:	1a 16       	cp	r1, r26
    21fc:	f0 40       	sbci	r31, 0x00	; 0
    21fe:	a2 2f       	mov	r26, r18
    2200:	23 2f       	mov	r18, r19
    2202:	34 2f       	mov	r19, r20
    2204:	44 27       	eor	r20, r20
    2206:	58 5f       	subi	r21, 0xF8	; 248
    2208:	f3 cf       	rjmp	.-26     	; 0x21f0 <__addsf3x+0x38>
    220a:	46 95       	lsr	r20
    220c:	37 95       	ror	r19
    220e:	27 95       	ror	r18
    2210:	a7 95       	ror	r26
    2212:	f0 40       	sbci	r31, 0x00	; 0
    2214:	53 95       	inc	r21
    2216:	c9 f7       	brne	.-14     	; 0x220a <__addsf3x+0x52>
    2218:	7e f4       	brtc	.+30     	; 0x2238 <__addsf3x+0x80>
    221a:	1f 16       	cp	r1, r31
    221c:	ba 0b       	sbc	r27, r26
    221e:	62 0b       	sbc	r22, r18
    2220:	73 0b       	sbc	r23, r19
    2222:	84 0b       	sbc	r24, r20
    2224:	ba f0       	brmi	.+46     	; 0x2254 <__addsf3x+0x9c>
    2226:	91 50       	subi	r25, 0x01	; 1
    2228:	a1 f0       	breq	.+40     	; 0x2252 <__addsf3x+0x9a>
    222a:	ff 0f       	add	r31, r31
    222c:	bb 1f       	adc	r27, r27
    222e:	66 1f       	adc	r22, r22
    2230:	77 1f       	adc	r23, r23
    2232:	88 1f       	adc	r24, r24
    2234:	c2 f7       	brpl	.-16     	; 0x2226 <__addsf3x+0x6e>
    2236:	0e c0       	rjmp	.+28     	; 0x2254 <__addsf3x+0x9c>
    2238:	ba 0f       	add	r27, r26
    223a:	62 1f       	adc	r22, r18
    223c:	73 1f       	adc	r23, r19
    223e:	84 1f       	adc	r24, r20
    2240:	48 f4       	brcc	.+18     	; 0x2254 <__addsf3x+0x9c>
    2242:	87 95       	ror	r24
    2244:	77 95       	ror	r23
    2246:	67 95       	ror	r22
    2248:	b7 95       	ror	r27
    224a:	f7 95       	ror	r31
    224c:	9e 3f       	cpi	r25, 0xFE	; 254
    224e:	08 f0       	brcs	.+2      	; 0x2252 <__addsf3x+0x9a>
    2250:	b0 cf       	rjmp	.-160    	; 0x21b2 <__addsf3+0x28>
    2252:	93 95       	inc	r25
    2254:	88 0f       	add	r24, r24
    2256:	08 f0       	brcs	.+2      	; 0x225a <__addsf3x+0xa2>
    2258:	99 27       	eor	r25, r25
    225a:	ee 0f       	add	r30, r30
    225c:	97 95       	ror	r25
    225e:	87 95       	ror	r24
    2260:	08 95       	ret
    2262:	0e 94 df 12 	call	0x25be	; 0x25be <__fp_pscA>
    2266:	60 f0       	brcs	.+24     	; 0x2280 <__addsf3x+0xc8>
    2268:	80 e8       	ldi	r24, 0x80	; 128
    226a:	91 e0       	ldi	r25, 0x01	; 1
    226c:	09 f4       	brne	.+2      	; 0x2270 <__addsf3x+0xb8>
    226e:	9e ef       	ldi	r25, 0xFE	; 254
    2270:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__fp_pscB>
    2274:	28 f0       	brcs	.+10     	; 0x2280 <__addsf3x+0xc8>
    2276:	40 e8       	ldi	r20, 0x80	; 128
    2278:	51 e0       	ldi	r21, 0x01	; 1
    227a:	71 f4       	brne	.+28     	; 0x2298 <atan2+0x10>
    227c:	5e ef       	ldi	r21, 0xFE	; 254
    227e:	0c c0       	rjmp	.+24     	; 0x2298 <atan2+0x10>
    2280:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_nan>
    2284:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__fp_zero>

00002288 <atan2>:
    2288:	e9 2f       	mov	r30, r25
    228a:	e0 78       	andi	r30, 0x80	; 128
    228c:	0e 94 3d 13 	call	0x267a	; 0x267a <__fp_split3>
    2290:	40 f3       	brcs	.-48     	; 0x2262 <__addsf3x+0xaa>
    2292:	09 2e       	mov	r0, r25
    2294:	05 2a       	or	r0, r21
    2296:	b1 f3       	breq	.-20     	; 0x2284 <__addsf3x+0xcc>
    2298:	26 17       	cp	r18, r22
    229a:	37 07       	cpc	r19, r23
    229c:	48 07       	cpc	r20, r24
    229e:	59 07       	cpc	r21, r25
    22a0:	38 f0       	brcs	.+14     	; 0x22b0 <atan2+0x28>
    22a2:	0e 2e       	mov	r0, r30
    22a4:	07 f8       	bld	r0, 7
    22a6:	e0 25       	eor	r30, r0
    22a8:	69 f0       	breq	.+26     	; 0x22c4 <atan2+0x3c>
    22aa:	e0 25       	eor	r30, r0
    22ac:	e0 64       	ori	r30, 0x40	; 64
    22ae:	0a c0       	rjmp	.+20     	; 0x22c4 <atan2+0x3c>
    22b0:	ef 63       	ori	r30, 0x3F	; 63
    22b2:	07 f8       	bld	r0, 7
    22b4:	00 94       	com	r0
    22b6:	07 fa       	bst	r0, 7
    22b8:	db 01       	movw	r26, r22
    22ba:	b9 01       	movw	r22, r18
    22bc:	9d 01       	movw	r18, r26
    22be:	dc 01       	movw	r26, r24
    22c0:	ca 01       	movw	r24, r20
    22c2:	ad 01       	movw	r20, r26
    22c4:	ef 93       	push	r30
    22c6:	0e 94 c4 11 	call	0x2388	; 0x2388 <__divsf3_pse>
    22ca:	0e 94 18 13 	call	0x2630	; 0x2630 <__fp_round>
    22ce:	0e 94 74 11 	call	0x22e8	; 0x22e8 <atan>
    22d2:	5f 91       	pop	r21
    22d4:	55 23       	and	r21, r21
    22d6:	39 f0       	breq	.+14     	; 0x22e6 <atan2+0x5e>
    22d8:	2b ed       	ldi	r18, 0xDB	; 219
    22da:	3f e0       	ldi	r19, 0x0F	; 15
    22dc:	49 e4       	ldi	r20, 0x49	; 73
    22de:	50 fd       	sbrc	r21, 0
    22e0:	49 ec       	ldi	r20, 0xC9	; 201
    22e2:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__addsf3>
    22e6:	08 95       	ret

000022e8 <atan>:
    22e8:	df 93       	push	r29
    22ea:	dd 27       	eor	r29, r29
    22ec:	b9 2f       	mov	r27, r25
    22ee:	bf 77       	andi	r27, 0x7F	; 127
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	16 16       	cp	r1, r22
    22f6:	17 06       	cpc	r1, r23
    22f8:	48 07       	cpc	r20, r24
    22fa:	5b 07       	cpc	r21, r27
    22fc:	18 f4       	brcc	.+6      	; 0x2304 <atan+0x1c>
    22fe:	d9 2f       	mov	r29, r25
    2300:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <inverse>
    2304:	9f 93       	push	r25
    2306:	8f 93       	push	r24
    2308:	7f 93       	push	r23
    230a:	6f 93       	push	r22
    230c:	0e 94 2e 14 	call	0x285c	; 0x285c <square>
    2310:	ec ea       	ldi	r30, 0xAC	; 172
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	0e 94 b8 12 	call	0x2570	; 0x2570 <__fp_powser>
    2318:	0e 94 18 13 	call	0x2630	; 0x2630 <__fp_round>
    231c:	2f 91       	pop	r18
    231e:	3f 91       	pop	r19
    2320:	4f 91       	pop	r20
    2322:	5f 91       	pop	r21
    2324:	0e 94 86 13 	call	0x270c	; 0x270c <__mulsf3x>
    2328:	dd 23       	and	r29, r29
    232a:	51 f0       	breq	.+20     	; 0x2340 <atan+0x58>
    232c:	90 58       	subi	r25, 0x80	; 128
    232e:	a2 ea       	ldi	r26, 0xA2	; 162
    2330:	2a ed       	ldi	r18, 0xDA	; 218
    2332:	3f e0       	ldi	r19, 0x0F	; 15
    2334:	49 ec       	ldi	r20, 0xC9	; 201
    2336:	5f e3       	ldi	r21, 0x3F	; 63
    2338:	d0 78       	andi	r29, 0x80	; 128
    233a:	5d 27       	eor	r21, r29
    233c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__addsf3x>
    2340:	df 91       	pop	r29
    2342:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__fp_round>

00002346 <__cmpsf2>:
    2346:	0e 94 8b 12 	call	0x2516	; 0x2516 <__fp_cmp>
    234a:	08 f4       	brcc	.+2      	; 0x234e <__cmpsf2+0x8>
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	08 95       	ret

00002350 <cos>:
    2350:	0e 94 ef 12 	call	0x25de	; 0x25de <__fp_rempio2>
    2354:	e3 95       	inc	r30
    2356:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__fp_sinus>

0000235a <__divsf3>:
    235a:	0e 94 c1 11 	call	0x2382	; 0x2382 <__divsf3x>
    235e:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__fp_round>
    2362:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__fp_pscB>
    2366:	58 f0       	brcs	.+22     	; 0x237e <__divsf3+0x24>
    2368:	0e 94 df 12 	call	0x25be	; 0x25be <__fp_pscA>
    236c:	40 f0       	brcs	.+16     	; 0x237e <__divsf3+0x24>
    236e:	29 f4       	brne	.+10     	; 0x237a <__divsf3+0x20>
    2370:	5f 3f       	cpi	r21, 0xFF	; 255
    2372:	29 f0       	breq	.+10     	; 0x237e <__divsf3+0x24>
    2374:	0c 94 af 12 	jmp	0x255e	; 0x255e <__fp_inf>
    2378:	51 11       	cpse	r21, r1
    237a:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__fp_szero>
    237e:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_nan>

00002382 <__divsf3x>:
    2382:	0e 94 3d 13 	call	0x267a	; 0x267a <__fp_split3>
    2386:	68 f3       	brcs	.-38     	; 0x2362 <__divsf3+0x8>

00002388 <__divsf3_pse>:
    2388:	99 23       	and	r25, r25
    238a:	b1 f3       	breq	.-20     	; 0x2378 <__divsf3+0x1e>
    238c:	55 23       	and	r21, r21
    238e:	91 f3       	breq	.-28     	; 0x2374 <__divsf3+0x1a>
    2390:	95 1b       	sub	r25, r21
    2392:	55 0b       	sbc	r21, r21
    2394:	bb 27       	eor	r27, r27
    2396:	aa 27       	eor	r26, r26
    2398:	62 17       	cp	r22, r18
    239a:	73 07       	cpc	r23, r19
    239c:	84 07       	cpc	r24, r20
    239e:	38 f0       	brcs	.+14     	; 0x23ae <__divsf3_pse+0x26>
    23a0:	9f 5f       	subi	r25, 0xFF	; 255
    23a2:	5f 4f       	sbci	r21, 0xFF	; 255
    23a4:	22 0f       	add	r18, r18
    23a6:	33 1f       	adc	r19, r19
    23a8:	44 1f       	adc	r20, r20
    23aa:	aa 1f       	adc	r26, r26
    23ac:	a9 f3       	breq	.-22     	; 0x2398 <__divsf3_pse+0x10>
    23ae:	35 d0       	rcall	.+106    	; 0x241a <__divsf3_pse+0x92>
    23b0:	0e 2e       	mov	r0, r30
    23b2:	3a f0       	brmi	.+14     	; 0x23c2 <__divsf3_pse+0x3a>
    23b4:	e0 e8       	ldi	r30, 0x80	; 128
    23b6:	32 d0       	rcall	.+100    	; 0x241c <__divsf3_pse+0x94>
    23b8:	91 50       	subi	r25, 0x01	; 1
    23ba:	50 40       	sbci	r21, 0x00	; 0
    23bc:	e6 95       	lsr	r30
    23be:	00 1c       	adc	r0, r0
    23c0:	ca f7       	brpl	.-14     	; 0x23b4 <__divsf3_pse+0x2c>
    23c2:	2b d0       	rcall	.+86     	; 0x241a <__divsf3_pse+0x92>
    23c4:	fe 2f       	mov	r31, r30
    23c6:	29 d0       	rcall	.+82     	; 0x241a <__divsf3_pse+0x92>
    23c8:	66 0f       	add	r22, r22
    23ca:	77 1f       	adc	r23, r23
    23cc:	88 1f       	adc	r24, r24
    23ce:	bb 1f       	adc	r27, r27
    23d0:	26 17       	cp	r18, r22
    23d2:	37 07       	cpc	r19, r23
    23d4:	48 07       	cpc	r20, r24
    23d6:	ab 07       	cpc	r26, r27
    23d8:	b0 e8       	ldi	r27, 0x80	; 128
    23da:	09 f0       	breq	.+2      	; 0x23de <__divsf3_pse+0x56>
    23dc:	bb 0b       	sbc	r27, r27
    23de:	80 2d       	mov	r24, r0
    23e0:	bf 01       	movw	r22, r30
    23e2:	ff 27       	eor	r31, r31
    23e4:	93 58       	subi	r25, 0x83	; 131
    23e6:	5f 4f       	sbci	r21, 0xFF	; 255
    23e8:	3a f0       	brmi	.+14     	; 0x23f8 <__divsf3_pse+0x70>
    23ea:	9e 3f       	cpi	r25, 0xFE	; 254
    23ec:	51 05       	cpc	r21, r1
    23ee:	78 f0       	brcs	.+30     	; 0x240e <__divsf3_pse+0x86>
    23f0:	0c 94 af 12 	jmp	0x255e	; 0x255e <__fp_inf>
    23f4:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__fp_szero>
    23f8:	5f 3f       	cpi	r21, 0xFF	; 255
    23fa:	e4 f3       	brlt	.-8      	; 0x23f4 <__divsf3_pse+0x6c>
    23fc:	98 3e       	cpi	r25, 0xE8	; 232
    23fe:	d4 f3       	brlt	.-12     	; 0x23f4 <__divsf3_pse+0x6c>
    2400:	86 95       	lsr	r24
    2402:	77 95       	ror	r23
    2404:	67 95       	ror	r22
    2406:	b7 95       	ror	r27
    2408:	f7 95       	ror	r31
    240a:	9f 5f       	subi	r25, 0xFF	; 255
    240c:	c9 f7       	brne	.-14     	; 0x2400 <__divsf3_pse+0x78>
    240e:	88 0f       	add	r24, r24
    2410:	91 1d       	adc	r25, r1
    2412:	96 95       	lsr	r25
    2414:	87 95       	ror	r24
    2416:	97 f9       	bld	r25, 7
    2418:	08 95       	ret
    241a:	e1 e0       	ldi	r30, 0x01	; 1
    241c:	66 0f       	add	r22, r22
    241e:	77 1f       	adc	r23, r23
    2420:	88 1f       	adc	r24, r24
    2422:	bb 1f       	adc	r27, r27
    2424:	62 17       	cp	r22, r18
    2426:	73 07       	cpc	r23, r19
    2428:	84 07       	cpc	r24, r20
    242a:	ba 07       	cpc	r27, r26
    242c:	20 f0       	brcs	.+8      	; 0x2436 <__divsf3_pse+0xae>
    242e:	62 1b       	sub	r22, r18
    2430:	73 0b       	sbc	r23, r19
    2432:	84 0b       	sbc	r24, r20
    2434:	ba 0b       	sbc	r27, r26
    2436:	ee 1f       	adc	r30, r30
    2438:	88 f7       	brcc	.-30     	; 0x241c <__divsf3_pse+0x94>
    243a:	e0 95       	com	r30
    243c:	08 95       	ret

0000243e <__fixunssfsi>:
    243e:	0e 94 45 13 	call	0x268a	; 0x268a <__fp_splitA>
    2442:	88 f0       	brcs	.+34     	; 0x2466 <__fixunssfsi+0x28>
    2444:	9f 57       	subi	r25, 0x7F	; 127
    2446:	98 f0       	brcs	.+38     	; 0x246e <__fixunssfsi+0x30>
    2448:	b9 2f       	mov	r27, r25
    244a:	99 27       	eor	r25, r25
    244c:	b7 51       	subi	r27, 0x17	; 23
    244e:	b0 f0       	brcs	.+44     	; 0x247c <__fixunssfsi+0x3e>
    2450:	e1 f0       	breq	.+56     	; 0x248a <__fixunssfsi+0x4c>
    2452:	66 0f       	add	r22, r22
    2454:	77 1f       	adc	r23, r23
    2456:	88 1f       	adc	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	1a f0       	brmi	.+6      	; 0x2462 <__fixunssfsi+0x24>
    245c:	ba 95       	dec	r27
    245e:	c9 f7       	brne	.-14     	; 0x2452 <__fixunssfsi+0x14>
    2460:	14 c0       	rjmp	.+40     	; 0x248a <__fixunssfsi+0x4c>
    2462:	b1 30       	cpi	r27, 0x01	; 1
    2464:	91 f0       	breq	.+36     	; 0x248a <__fixunssfsi+0x4c>
    2466:	0e 94 5f 13 	call	0x26be	; 0x26be <__fp_zero>
    246a:	b1 e0       	ldi	r27, 0x01	; 1
    246c:	08 95       	ret
    246e:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__fp_zero>
    2472:	67 2f       	mov	r22, r23
    2474:	78 2f       	mov	r23, r24
    2476:	88 27       	eor	r24, r24
    2478:	b8 5f       	subi	r27, 0xF8	; 248
    247a:	39 f0       	breq	.+14     	; 0x248a <__fixunssfsi+0x4c>
    247c:	b9 3f       	cpi	r27, 0xF9	; 249
    247e:	cc f3       	brlt	.-14     	; 0x2472 <__fixunssfsi+0x34>
    2480:	86 95       	lsr	r24
    2482:	77 95       	ror	r23
    2484:	67 95       	ror	r22
    2486:	b3 95       	inc	r27
    2488:	d9 f7       	brne	.-10     	; 0x2480 <__fixunssfsi+0x42>
    248a:	3e f4       	brtc	.+14     	; 0x249a <__fixunssfsi+0x5c>
    248c:	90 95       	com	r25
    248e:	80 95       	com	r24
    2490:	70 95       	com	r23
    2492:	61 95       	neg	r22
    2494:	7f 4f       	sbci	r23, 0xFF	; 255
    2496:	8f 4f       	sbci	r24, 0xFF	; 255
    2498:	9f 4f       	sbci	r25, 0xFF	; 255
    249a:	08 95       	ret

0000249c <__floatunsisf>:
    249c:	e8 94       	clt
    249e:	09 c0       	rjmp	.+18     	; 0x24b2 <__floatsisf+0x12>

000024a0 <__floatsisf>:
    24a0:	97 fb       	bst	r25, 7
    24a2:	3e f4       	brtc	.+14     	; 0x24b2 <__floatsisf+0x12>
    24a4:	90 95       	com	r25
    24a6:	80 95       	com	r24
    24a8:	70 95       	com	r23
    24aa:	61 95       	neg	r22
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	8f 4f       	sbci	r24, 0xFF	; 255
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	99 23       	and	r25, r25
    24b4:	a9 f0       	breq	.+42     	; 0x24e0 <__floatsisf+0x40>
    24b6:	f9 2f       	mov	r31, r25
    24b8:	96 e9       	ldi	r25, 0x96	; 150
    24ba:	bb 27       	eor	r27, r27
    24bc:	93 95       	inc	r25
    24be:	f6 95       	lsr	r31
    24c0:	87 95       	ror	r24
    24c2:	77 95       	ror	r23
    24c4:	67 95       	ror	r22
    24c6:	b7 95       	ror	r27
    24c8:	f1 11       	cpse	r31, r1
    24ca:	f8 cf       	rjmp	.-16     	; 0x24bc <__floatsisf+0x1c>
    24cc:	fa f4       	brpl	.+62     	; 0x250c <__floatsisf+0x6c>
    24ce:	bb 0f       	add	r27, r27
    24d0:	11 f4       	brne	.+4      	; 0x24d6 <__floatsisf+0x36>
    24d2:	60 ff       	sbrs	r22, 0
    24d4:	1b c0       	rjmp	.+54     	; 0x250c <__floatsisf+0x6c>
    24d6:	6f 5f       	subi	r22, 0xFF	; 255
    24d8:	7f 4f       	sbci	r23, 0xFF	; 255
    24da:	8f 4f       	sbci	r24, 0xFF	; 255
    24dc:	9f 4f       	sbci	r25, 0xFF	; 255
    24de:	16 c0       	rjmp	.+44     	; 0x250c <__floatsisf+0x6c>
    24e0:	88 23       	and	r24, r24
    24e2:	11 f0       	breq	.+4      	; 0x24e8 <__floatsisf+0x48>
    24e4:	96 e9       	ldi	r25, 0x96	; 150
    24e6:	11 c0       	rjmp	.+34     	; 0x250a <__floatsisf+0x6a>
    24e8:	77 23       	and	r23, r23
    24ea:	21 f0       	breq	.+8      	; 0x24f4 <__floatsisf+0x54>
    24ec:	9e e8       	ldi	r25, 0x8E	; 142
    24ee:	87 2f       	mov	r24, r23
    24f0:	76 2f       	mov	r23, r22
    24f2:	05 c0       	rjmp	.+10     	; 0x24fe <__floatsisf+0x5e>
    24f4:	66 23       	and	r22, r22
    24f6:	71 f0       	breq	.+28     	; 0x2514 <__floatsisf+0x74>
    24f8:	96 e8       	ldi	r25, 0x86	; 134
    24fa:	86 2f       	mov	r24, r22
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	2a f0       	brmi	.+10     	; 0x250c <__floatsisf+0x6c>
    2502:	9a 95       	dec	r25
    2504:	66 0f       	add	r22, r22
    2506:	77 1f       	adc	r23, r23
    2508:	88 1f       	adc	r24, r24
    250a:	da f7       	brpl	.-10     	; 0x2502 <__floatsisf+0x62>
    250c:	88 0f       	add	r24, r24
    250e:	96 95       	lsr	r25
    2510:	87 95       	ror	r24
    2512:	97 f9       	bld	r25, 7
    2514:	08 95       	ret

00002516 <__fp_cmp>:
    2516:	99 0f       	add	r25, r25
    2518:	00 08       	sbc	r0, r0
    251a:	55 0f       	add	r21, r21
    251c:	aa 0b       	sbc	r26, r26
    251e:	e0 e8       	ldi	r30, 0x80	; 128
    2520:	fe ef       	ldi	r31, 0xFE	; 254
    2522:	16 16       	cp	r1, r22
    2524:	17 06       	cpc	r1, r23
    2526:	e8 07       	cpc	r30, r24
    2528:	f9 07       	cpc	r31, r25
    252a:	c0 f0       	brcs	.+48     	; 0x255c <__fp_cmp+0x46>
    252c:	12 16       	cp	r1, r18
    252e:	13 06       	cpc	r1, r19
    2530:	e4 07       	cpc	r30, r20
    2532:	f5 07       	cpc	r31, r21
    2534:	98 f0       	brcs	.+38     	; 0x255c <__fp_cmp+0x46>
    2536:	62 1b       	sub	r22, r18
    2538:	73 0b       	sbc	r23, r19
    253a:	84 0b       	sbc	r24, r20
    253c:	95 0b       	sbc	r25, r21
    253e:	39 f4       	brne	.+14     	; 0x254e <__fp_cmp+0x38>
    2540:	0a 26       	eor	r0, r26
    2542:	61 f0       	breq	.+24     	; 0x255c <__fp_cmp+0x46>
    2544:	23 2b       	or	r18, r19
    2546:	24 2b       	or	r18, r20
    2548:	25 2b       	or	r18, r21
    254a:	21 f4       	brne	.+8      	; 0x2554 <__fp_cmp+0x3e>
    254c:	08 95       	ret
    254e:	0a 26       	eor	r0, r26
    2550:	09 f4       	brne	.+2      	; 0x2554 <__fp_cmp+0x3e>
    2552:	a1 40       	sbci	r26, 0x01	; 1
    2554:	a6 95       	lsr	r26
    2556:	8f ef       	ldi	r24, 0xFF	; 255
    2558:	81 1d       	adc	r24, r1
    255a:	81 1d       	adc	r24, r1
    255c:	08 95       	ret

0000255e <__fp_inf>:
    255e:	97 f9       	bld	r25, 7
    2560:	9f 67       	ori	r25, 0x7F	; 127
    2562:	80 e8       	ldi	r24, 0x80	; 128
    2564:	70 e0       	ldi	r23, 0x00	; 0
    2566:	60 e0       	ldi	r22, 0x00	; 0
    2568:	08 95       	ret

0000256a <__fp_nan>:
    256a:	9f ef       	ldi	r25, 0xFF	; 255
    256c:	80 ec       	ldi	r24, 0xC0	; 192
    256e:	08 95       	ret

00002570 <__fp_powser>:
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	1f 93       	push	r17
    2576:	0f 93       	push	r16
    2578:	ff 92       	push	r15
    257a:	ef 92       	push	r14
    257c:	df 92       	push	r13
    257e:	7b 01       	movw	r14, r22
    2580:	8c 01       	movw	r16, r24
    2582:	68 94       	set
    2584:	06 c0       	rjmp	.+12     	; 0x2592 <__fp_powser+0x22>
    2586:	da 2e       	mov	r13, r26
    2588:	ef 01       	movw	r28, r30
    258a:	0e 94 86 13 	call	0x270c	; 0x270c <__mulsf3x>
    258e:	fe 01       	movw	r30, r28
    2590:	e8 94       	clt
    2592:	a5 91       	lpm	r26, Z+
    2594:	25 91       	lpm	r18, Z+
    2596:	35 91       	lpm	r19, Z+
    2598:	45 91       	lpm	r20, Z+
    259a:	55 91       	lpm	r21, Z+
    259c:	a6 f3       	brts	.-24     	; 0x2586 <__fp_powser+0x16>
    259e:	ef 01       	movw	r28, r30
    25a0:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__addsf3x>
    25a4:	fe 01       	movw	r30, r28
    25a6:	97 01       	movw	r18, r14
    25a8:	a8 01       	movw	r20, r16
    25aa:	da 94       	dec	r13
    25ac:	69 f7       	brne	.-38     	; 0x2588 <__fp_powser+0x18>
    25ae:	df 90       	pop	r13
    25b0:	ef 90       	pop	r14
    25b2:	ff 90       	pop	r15
    25b4:	0f 91       	pop	r16
    25b6:	1f 91       	pop	r17
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <__fp_pscA>:
    25be:	00 24       	eor	r0, r0
    25c0:	0a 94       	dec	r0
    25c2:	16 16       	cp	r1, r22
    25c4:	17 06       	cpc	r1, r23
    25c6:	18 06       	cpc	r1, r24
    25c8:	09 06       	cpc	r0, r25
    25ca:	08 95       	ret

000025cc <__fp_pscB>:
    25cc:	00 24       	eor	r0, r0
    25ce:	0a 94       	dec	r0
    25d0:	12 16       	cp	r1, r18
    25d2:	13 06       	cpc	r1, r19
    25d4:	14 06       	cpc	r1, r20
    25d6:	05 06       	cpc	r0, r21
    25d8:	08 95       	ret
    25da:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_nan>

000025de <__fp_rempio2>:
    25de:	0e 94 45 13 	call	0x268a	; 0x268a <__fp_splitA>
    25e2:	d8 f3       	brcs	.-10     	; 0x25da <__fp_pscB+0xe>
    25e4:	e8 94       	clt
    25e6:	e0 e0       	ldi	r30, 0x00	; 0
    25e8:	bb 27       	eor	r27, r27
    25ea:	9f 57       	subi	r25, 0x7F	; 127
    25ec:	f0 f0       	brcs	.+60     	; 0x262a <__fp_rempio2+0x4c>
    25ee:	2a ed       	ldi	r18, 0xDA	; 218
    25f0:	3f e0       	ldi	r19, 0x0F	; 15
    25f2:	49 ec       	ldi	r20, 0xC9	; 201
    25f4:	06 c0       	rjmp	.+12     	; 0x2602 <__fp_rempio2+0x24>
    25f6:	ee 0f       	add	r30, r30
    25f8:	bb 0f       	add	r27, r27
    25fa:	66 1f       	adc	r22, r22
    25fc:	77 1f       	adc	r23, r23
    25fe:	88 1f       	adc	r24, r24
    2600:	28 f0       	brcs	.+10     	; 0x260c <__fp_rempio2+0x2e>
    2602:	b2 3a       	cpi	r27, 0xA2	; 162
    2604:	62 07       	cpc	r22, r18
    2606:	73 07       	cpc	r23, r19
    2608:	84 07       	cpc	r24, r20
    260a:	28 f0       	brcs	.+10     	; 0x2616 <__fp_rempio2+0x38>
    260c:	b2 5a       	subi	r27, 0xA2	; 162
    260e:	62 0b       	sbc	r22, r18
    2610:	73 0b       	sbc	r23, r19
    2612:	84 0b       	sbc	r24, r20
    2614:	e3 95       	inc	r30
    2616:	9a 95       	dec	r25
    2618:	72 f7       	brpl	.-36     	; 0x25f6 <__fp_rempio2+0x18>
    261a:	80 38       	cpi	r24, 0x80	; 128
    261c:	30 f4       	brcc	.+12     	; 0x262a <__fp_rempio2+0x4c>
    261e:	9a 95       	dec	r25
    2620:	bb 0f       	add	r27, r27
    2622:	66 1f       	adc	r22, r22
    2624:	77 1f       	adc	r23, r23
    2626:	88 1f       	adc	r24, r24
    2628:	d2 f7       	brpl	.-12     	; 0x261e <__fp_rempio2+0x40>
    262a:	90 48       	sbci	r25, 0x80	; 128
    262c:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__fp_mpack_finite>

00002630 <__fp_round>:
    2630:	09 2e       	mov	r0, r25
    2632:	03 94       	inc	r0
    2634:	00 0c       	add	r0, r0
    2636:	11 f4       	brne	.+4      	; 0x263c <__fp_round+0xc>
    2638:	88 23       	and	r24, r24
    263a:	52 f0       	brmi	.+20     	; 0x2650 <__fp_round+0x20>
    263c:	bb 0f       	add	r27, r27
    263e:	40 f4       	brcc	.+16     	; 0x2650 <__fp_round+0x20>
    2640:	bf 2b       	or	r27, r31
    2642:	11 f4       	brne	.+4      	; 0x2648 <__fp_round+0x18>
    2644:	60 ff       	sbrs	r22, 0
    2646:	04 c0       	rjmp	.+8      	; 0x2650 <__fp_round+0x20>
    2648:	6f 5f       	subi	r22, 0xFF	; 255
    264a:	7f 4f       	sbci	r23, 0xFF	; 255
    264c:	8f 4f       	sbci	r24, 0xFF	; 255
    264e:	9f 4f       	sbci	r25, 0xFF	; 255
    2650:	08 95       	ret

00002652 <__fp_sinus>:
    2652:	ef 93       	push	r30
    2654:	e0 ff       	sbrs	r30, 0
    2656:	07 c0       	rjmp	.+14     	; 0x2666 <__fp_sinus+0x14>
    2658:	a2 ea       	ldi	r26, 0xA2	; 162
    265a:	2a ed       	ldi	r18, 0xDA	; 218
    265c:	3f e0       	ldi	r19, 0x0F	; 15
    265e:	49 ec       	ldi	r20, 0xC9	; 201
    2660:	5f eb       	ldi	r21, 0xBF	; 191
    2662:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__addsf3x>
    2666:	0e 94 18 13 	call	0x2630	; 0x2630 <__fp_round>
    266a:	0f 90       	pop	r0
    266c:	03 94       	inc	r0
    266e:	01 fc       	sbrc	r0, 1
    2670:	90 58       	subi	r25, 0x80	; 128
    2672:	e9 ed       	ldi	r30, 0xD9	; 217
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	0c 94 47 14 	jmp	0x288e	; 0x288e <__fp_powsodd>

0000267a <__fp_split3>:
    267a:	57 fd       	sbrc	r21, 7
    267c:	90 58       	subi	r25, 0x80	; 128
    267e:	44 0f       	add	r20, r20
    2680:	55 1f       	adc	r21, r21
    2682:	59 f0       	breq	.+22     	; 0x269a <__fp_splitA+0x10>
    2684:	5f 3f       	cpi	r21, 0xFF	; 255
    2686:	71 f0       	breq	.+28     	; 0x26a4 <__fp_splitA+0x1a>
    2688:	47 95       	ror	r20

0000268a <__fp_splitA>:
    268a:	88 0f       	add	r24, r24
    268c:	97 fb       	bst	r25, 7
    268e:	99 1f       	adc	r25, r25
    2690:	61 f0       	breq	.+24     	; 0x26aa <__fp_splitA+0x20>
    2692:	9f 3f       	cpi	r25, 0xFF	; 255
    2694:	79 f0       	breq	.+30     	; 0x26b4 <__fp_splitA+0x2a>
    2696:	87 95       	ror	r24
    2698:	08 95       	ret
    269a:	12 16       	cp	r1, r18
    269c:	13 06       	cpc	r1, r19
    269e:	14 06       	cpc	r1, r20
    26a0:	55 1f       	adc	r21, r21
    26a2:	f2 cf       	rjmp	.-28     	; 0x2688 <__fp_split3+0xe>
    26a4:	46 95       	lsr	r20
    26a6:	f1 df       	rcall	.-30     	; 0x268a <__fp_splitA>
    26a8:	08 c0       	rjmp	.+16     	; 0x26ba <__fp_splitA+0x30>
    26aa:	16 16       	cp	r1, r22
    26ac:	17 06       	cpc	r1, r23
    26ae:	18 06       	cpc	r1, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	f1 cf       	rjmp	.-30     	; 0x2696 <__fp_splitA+0xc>
    26b4:	86 95       	lsr	r24
    26b6:	71 05       	cpc	r23, r1
    26b8:	61 05       	cpc	r22, r1
    26ba:	08 94       	sec
    26bc:	08 95       	ret

000026be <__fp_zero>:
    26be:	e8 94       	clt

000026c0 <__fp_szero>:
    26c0:	bb 27       	eor	r27, r27
    26c2:	66 27       	eor	r22, r22
    26c4:	77 27       	eor	r23, r23
    26c6:	cb 01       	movw	r24, r22
    26c8:	97 f9       	bld	r25, 7
    26ca:	08 95       	ret

000026cc <__gesf2>:
    26cc:	0e 94 8b 12 	call	0x2516	; 0x2516 <__fp_cmp>
    26d0:	08 f4       	brcc	.+2      	; 0x26d4 <__gesf2+0x8>
    26d2:	8f ef       	ldi	r24, 0xFF	; 255
    26d4:	08 95       	ret

000026d6 <inverse>:
    26d6:	9b 01       	movw	r18, r22
    26d8:	ac 01       	movw	r20, r24
    26da:	60 e0       	ldi	r22, 0x00	; 0
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	80 e8       	ldi	r24, 0x80	; 128
    26e0:	9f e3       	ldi	r25, 0x3F	; 63
    26e2:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__divsf3>

000026e6 <__mulsf3>:
    26e6:	0e 94 86 13 	call	0x270c	; 0x270c <__mulsf3x>
    26ea:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__fp_round>
    26ee:	0e 94 df 12 	call	0x25be	; 0x25be <__fp_pscA>
    26f2:	38 f0       	brcs	.+14     	; 0x2702 <__mulsf3+0x1c>
    26f4:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__fp_pscB>
    26f8:	20 f0       	brcs	.+8      	; 0x2702 <__mulsf3+0x1c>
    26fa:	95 23       	and	r25, r21
    26fc:	11 f0       	breq	.+4      	; 0x2702 <__mulsf3+0x1c>
    26fe:	0c 94 af 12 	jmp	0x255e	; 0x255e <__fp_inf>
    2702:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_nan>
    2706:	11 24       	eor	r1, r1
    2708:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__fp_szero>

0000270c <__mulsf3x>:
    270c:	0e 94 3d 13 	call	0x267a	; 0x267a <__fp_split3>
    2710:	70 f3       	brcs	.-36     	; 0x26ee <__mulsf3+0x8>

00002712 <__mulsf3_pse>:
    2712:	95 9f       	mul	r25, r21
    2714:	c1 f3       	breq	.-16     	; 0x2706 <__mulsf3+0x20>
    2716:	95 0f       	add	r25, r21
    2718:	50 e0       	ldi	r21, 0x00	; 0
    271a:	55 1f       	adc	r21, r21
    271c:	62 9f       	mul	r22, r18
    271e:	f0 01       	movw	r30, r0
    2720:	72 9f       	mul	r23, r18
    2722:	bb 27       	eor	r27, r27
    2724:	f0 0d       	add	r31, r0
    2726:	b1 1d       	adc	r27, r1
    2728:	63 9f       	mul	r22, r19
    272a:	aa 27       	eor	r26, r26
    272c:	f0 0d       	add	r31, r0
    272e:	b1 1d       	adc	r27, r1
    2730:	aa 1f       	adc	r26, r26
    2732:	64 9f       	mul	r22, r20
    2734:	66 27       	eor	r22, r22
    2736:	b0 0d       	add	r27, r0
    2738:	a1 1d       	adc	r26, r1
    273a:	66 1f       	adc	r22, r22
    273c:	82 9f       	mul	r24, r18
    273e:	22 27       	eor	r18, r18
    2740:	b0 0d       	add	r27, r0
    2742:	a1 1d       	adc	r26, r1
    2744:	62 1f       	adc	r22, r18
    2746:	73 9f       	mul	r23, r19
    2748:	b0 0d       	add	r27, r0
    274a:	a1 1d       	adc	r26, r1
    274c:	62 1f       	adc	r22, r18
    274e:	83 9f       	mul	r24, r19
    2750:	a0 0d       	add	r26, r0
    2752:	61 1d       	adc	r22, r1
    2754:	22 1f       	adc	r18, r18
    2756:	74 9f       	mul	r23, r20
    2758:	33 27       	eor	r19, r19
    275a:	a0 0d       	add	r26, r0
    275c:	61 1d       	adc	r22, r1
    275e:	23 1f       	adc	r18, r19
    2760:	84 9f       	mul	r24, r20
    2762:	60 0d       	add	r22, r0
    2764:	21 1d       	adc	r18, r1
    2766:	82 2f       	mov	r24, r18
    2768:	76 2f       	mov	r23, r22
    276a:	6a 2f       	mov	r22, r26
    276c:	11 24       	eor	r1, r1
    276e:	9f 57       	subi	r25, 0x7F	; 127
    2770:	50 40       	sbci	r21, 0x00	; 0
    2772:	9a f0       	brmi	.+38     	; 0x279a <__mulsf3_pse+0x88>
    2774:	f1 f0       	breq	.+60     	; 0x27b2 <__mulsf3_pse+0xa0>
    2776:	88 23       	and	r24, r24
    2778:	4a f0       	brmi	.+18     	; 0x278c <__mulsf3_pse+0x7a>
    277a:	ee 0f       	add	r30, r30
    277c:	ff 1f       	adc	r31, r31
    277e:	bb 1f       	adc	r27, r27
    2780:	66 1f       	adc	r22, r22
    2782:	77 1f       	adc	r23, r23
    2784:	88 1f       	adc	r24, r24
    2786:	91 50       	subi	r25, 0x01	; 1
    2788:	50 40       	sbci	r21, 0x00	; 0
    278a:	a9 f7       	brne	.-22     	; 0x2776 <__mulsf3_pse+0x64>
    278c:	9e 3f       	cpi	r25, 0xFE	; 254
    278e:	51 05       	cpc	r21, r1
    2790:	80 f0       	brcs	.+32     	; 0x27b2 <__mulsf3_pse+0xa0>
    2792:	0c 94 af 12 	jmp	0x255e	; 0x255e <__fp_inf>
    2796:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__fp_szero>
    279a:	5f 3f       	cpi	r21, 0xFF	; 255
    279c:	e4 f3       	brlt	.-8      	; 0x2796 <__mulsf3_pse+0x84>
    279e:	98 3e       	cpi	r25, 0xE8	; 232
    27a0:	d4 f3       	brlt	.-12     	; 0x2796 <__mulsf3_pse+0x84>
    27a2:	86 95       	lsr	r24
    27a4:	77 95       	ror	r23
    27a6:	67 95       	ror	r22
    27a8:	b7 95       	ror	r27
    27aa:	f7 95       	ror	r31
    27ac:	e7 95       	ror	r30
    27ae:	9f 5f       	subi	r25, 0xFF	; 255
    27b0:	c1 f7       	brne	.-16     	; 0x27a2 <__mulsf3_pse+0x90>
    27b2:	fe 2b       	or	r31, r30
    27b4:	88 0f       	add	r24, r24
    27b6:	91 1d       	adc	r25, r1
    27b8:	96 95       	lsr	r25
    27ba:	87 95       	ror	r24
    27bc:	97 f9       	bld	r25, 7
    27be:	08 95       	ret

000027c0 <sin>:
    27c0:	9f 93       	push	r25
    27c2:	0e 94 ef 12 	call	0x25de	; 0x25de <__fp_rempio2>
    27c6:	0f 90       	pop	r0
    27c8:	07 fc       	sbrc	r0, 7
    27ca:	ee 5f       	subi	r30, 0xFE	; 254
    27cc:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__fp_sinus>
    27d0:	19 f4       	brne	.+6      	; 0x27d8 <sin+0x18>
    27d2:	16 f4       	brtc	.+4      	; 0x27d8 <sin+0x18>
    27d4:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_nan>
    27d8:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__fp_mpack>

000027dc <sqrt>:
    27dc:	0e 94 45 13 	call	0x268a	; 0x268a <__fp_splitA>
    27e0:	b8 f3       	brcs	.-18     	; 0x27d0 <sin+0x10>
    27e2:	99 23       	and	r25, r25
    27e4:	c9 f3       	breq	.-14     	; 0x27d8 <sin+0x18>
    27e6:	b6 f3       	brts	.-20     	; 0x27d4 <sin+0x14>
    27e8:	9f 57       	subi	r25, 0x7F	; 127
    27ea:	55 0b       	sbc	r21, r21
    27ec:	87 ff       	sbrs	r24, 7
    27ee:	0e 94 40 14 	call	0x2880	; 0x2880 <__fp_norm2>
    27f2:	00 24       	eor	r0, r0
    27f4:	a0 e6       	ldi	r26, 0x60	; 96
    27f6:	40 ea       	ldi	r20, 0xA0	; 160
    27f8:	90 01       	movw	r18, r0
    27fa:	80 58       	subi	r24, 0x80	; 128
    27fc:	56 95       	lsr	r21
    27fe:	97 95       	ror	r25
    2800:	28 f4       	brcc	.+10     	; 0x280c <sqrt+0x30>
    2802:	80 5c       	subi	r24, 0xC0	; 192
    2804:	66 0f       	add	r22, r22
    2806:	77 1f       	adc	r23, r23
    2808:	88 1f       	adc	r24, r24
    280a:	20 f0       	brcs	.+8      	; 0x2814 <sqrt+0x38>
    280c:	26 17       	cp	r18, r22
    280e:	37 07       	cpc	r19, r23
    2810:	48 07       	cpc	r20, r24
    2812:	30 f4       	brcc	.+12     	; 0x2820 <sqrt+0x44>
    2814:	62 1b       	sub	r22, r18
    2816:	73 0b       	sbc	r23, r19
    2818:	84 0b       	sbc	r24, r20
    281a:	20 29       	or	r18, r0
    281c:	31 29       	or	r19, r1
    281e:	4a 2b       	or	r20, r26
    2820:	a6 95       	lsr	r26
    2822:	17 94       	ror	r1
    2824:	07 94       	ror	r0
    2826:	20 25       	eor	r18, r0
    2828:	31 25       	eor	r19, r1
    282a:	4a 27       	eor	r20, r26
    282c:	58 f7       	brcc	.-42     	; 0x2804 <sqrt+0x28>
    282e:	66 0f       	add	r22, r22
    2830:	77 1f       	adc	r23, r23
    2832:	88 1f       	adc	r24, r24
    2834:	20 f0       	brcs	.+8      	; 0x283e <sqrt+0x62>
    2836:	26 17       	cp	r18, r22
    2838:	37 07       	cpc	r19, r23
    283a:	48 07       	cpc	r20, r24
    283c:	30 f4       	brcc	.+12     	; 0x284a <sqrt+0x6e>
    283e:	62 0b       	sbc	r22, r18
    2840:	73 0b       	sbc	r23, r19
    2842:	84 0b       	sbc	r24, r20
    2844:	20 0d       	add	r18, r0
    2846:	31 1d       	adc	r19, r1
    2848:	41 1d       	adc	r20, r1
    284a:	a0 95       	com	r26
    284c:	81 f7       	brne	.-32     	; 0x282e <sqrt+0x52>
    284e:	b9 01       	movw	r22, r18
    2850:	84 2f       	mov	r24, r20
    2852:	91 58       	subi	r25, 0x81	; 129
    2854:	88 0f       	add	r24, r24
    2856:	96 95       	lsr	r25
    2858:	87 95       	ror	r24
    285a:	08 95       	ret

0000285c <square>:
    285c:	9b 01       	movw	r18, r22
    285e:	ac 01       	movw	r20, r24
    2860:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__mulsf3>

00002864 <__fp_mpack>:
    2864:	9f 3f       	cpi	r25, 0xFF	; 255
    2866:	31 f0       	breq	.+12     	; 0x2874 <__fp_mpack_finite+0xc>

00002868 <__fp_mpack_finite>:
    2868:	91 50       	subi	r25, 0x01	; 1
    286a:	20 f4       	brcc	.+8      	; 0x2874 <__fp_mpack_finite+0xc>
    286c:	87 95       	ror	r24
    286e:	77 95       	ror	r23
    2870:	67 95       	ror	r22
    2872:	b7 95       	ror	r27
    2874:	88 0f       	add	r24, r24
    2876:	91 1d       	adc	r25, r1
    2878:	96 95       	lsr	r25
    287a:	87 95       	ror	r24
    287c:	97 f9       	bld	r25, 7
    287e:	08 95       	ret

00002880 <__fp_norm2>:
    2880:	91 50       	subi	r25, 0x01	; 1
    2882:	50 40       	sbci	r21, 0x00	; 0
    2884:	66 0f       	add	r22, r22
    2886:	77 1f       	adc	r23, r23
    2888:	88 1f       	adc	r24, r24
    288a:	d2 f7       	brpl	.-12     	; 0x2880 <__fp_norm2>
    288c:	08 95       	ret

0000288e <__fp_powsodd>:
    288e:	9f 93       	push	r25
    2890:	8f 93       	push	r24
    2892:	7f 93       	push	r23
    2894:	6f 93       	push	r22
    2896:	ff 93       	push	r31
    2898:	ef 93       	push	r30
    289a:	9b 01       	movw	r18, r22
    289c:	ac 01       	movw	r20, r24
    289e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__mulsf3>
    28a2:	ef 91       	pop	r30
    28a4:	ff 91       	pop	r31
    28a6:	0e 94 b8 12 	call	0x2570	; 0x2570 <__fp_powser>
    28aa:	2f 91       	pop	r18
    28ac:	3f 91       	pop	r19
    28ae:	4f 91       	pop	r20
    28b0:	5f 91       	pop	r21
    28b2:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__mulsf3>

000028b6 <_exit>:
    28b6:	f8 94       	cli

000028b8 <__stop_program>:
    28b8:	ff cf       	rjmp	.-2      	; 0x28b8 <__stop_program>
