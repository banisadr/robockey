
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00003780  00003814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003780  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  00800166  00800166  0000387a  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000387a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000038dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  0000391c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003507  00000000  00000000  00003c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f97  00000000  00000000  00007193  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000151e  00000000  00000000  0000812a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd8  00000000  00000000  00009648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d8a  00000000  00000000  0000a220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040e4  00000000  00000000  0000afaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000f08e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__ctors_end>
       4:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
       8:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
       c:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__vector_3>
      10:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      14:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      18:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      1c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      20:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      24:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      28:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__vector_10>
      2c:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__vector_11>
      30:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      34:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      38:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      3c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      40:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      44:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__vector_17>
      48:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__vector_18>
      4c:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_19>
      50:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      54:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      58:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      5c:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__vector_23>
      60:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      64:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      68:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      6c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      70:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      74:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      78:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      7c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      80:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      84:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      88:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      8c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      90:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      94:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      98:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      9c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      a0:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      a4:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      a8:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      ac:	f3 08       	sbc	r15, r3
      ae:	f6 08       	sbc	r15, r6
      b0:	f9 08       	sbc	r15, r9
      b2:	04 09       	sbc	r16, r4
      b4:	0f 09       	sbc	r16, r15
      b6:	26 09       	sbc	r18, r6
      b8:	12 09       	sbc	r17, r2
      ba:	15 09       	sbc	r17, r5
      bc:	26 09       	sbc	r18, r6
      be:	18 09       	sbc	r17, r8
      c0:	6f 16       	cp	r6, r31
      c2:	8f 16       	cp	r8, r31
      c4:	af 16       	cp	r10, r31
      c6:	cf 16       	cp	r12, r31
      c8:	ef 16       	cp	r14, r31
      ca:	0f 17       	cp	r16, r31
      cc:	2f 17       	cp	r18, r31
      ce:	4f 17       	cp	r20, r31
      d0:	6f 17       	cp	r22, r31
      d2:	8f 17       	cp	r24, r31
      d4:	af 17       	cp	r26, r31
      d6:	cf 17       	cp	r28, r31
      d8:	08 4a       	sbci	r16, 0xA8	; 168
      da:	d7 3b       	cpi	r29, 0xB7	; 183
      dc:	3b ce       	rjmp	.-906    	; 0xfffffd54 <__eeprom_end+0xff7efd54>
      de:	01 6e       	ori	r16, 0xE1	; 225
      e0:	84 bc       	out	0x24, r8	; 36
      e2:	bf fd       	.word	0xfdbf	; ????
      e4:	c1 2f       	mov	r28, r17
      e6:	3d 6c       	ori	r19, 0xCD	; 205
      e8:	74 31       	cpi	r23, 0x14	; 20
      ea:	9a bd       	out	0x2a, r25	; 42
      ec:	56 83       	std	Z+6, r21	; 0x06
      ee:	3d da       	rcall	.-2950   	; 0xfffff56a <__eeprom_end+0xff7ef56a>
      f0:	3d 00       	.word	0x003d	; ????
      f2:	c7 7f       	andi	r28, 0xF7	; 247
      f4:	11 be       	out	0x31, r1	; 49
      f6:	d9 e4       	ldi	r29, 0x49	; 73
      f8:	bb 4c       	sbci	r27, 0xCB	; 203
      fa:	3e 91       	ld	r19, -X
      fc:	6b aa       	std	Y+51, r6	; 0x33
      fe:	aa be       	out	0x3a, r10	; 58
     100:	00 00       	nop
     102:	00 80       	ld	r0, Z
     104:	3f 05       	cpc	r19, r15
     106:	a8 4c       	sbci	r26, 0xC8	; 200
     108:	cd b2       	in	r12, 0x1d	; 29
     10a:	d4 4e       	sbci	r29, 0xE4	; 228
     10c:	b9 38       	cpi	r27, 0x89	; 137
     10e:	36 a9       	ldd	r19, Z+54	; 0x36
     110:	02 0c       	add	r0, r2
     112:	50 b9       	out	0x00, r21	; 0
     114:	91 86       	std	Z+9, r9	; 0x09
     116:	88 08       	sbc	r8, r8
     118:	3c a6       	std	Y+44, r3	; 0x2c
     11a:	aa aa       	std	Y+50, r10	; 0x32
     11c:	2a be       	out	0x3a, r2	; 58
     11e:	00 00       	nop
     120:	00 80       	ld	r0, Z
     122:	3f 00       	.word	0x003f	; ????

00000124 <__trampolines_end>:
     124:	00 01       	movw	r0, r0
     126:	00 00       	nop
     128:	bb 01       	movw	r22, r22
     12a:	12 00       	.word	0x0012	; ????
     12c:	02 00       	.word	0x0002	; ????
     12e:	00 78       	andi	r16, 0x80	; 128
     130:	01 43       	sbci	r16, 0x31	; 49
     132:	00 03       	mulsu	r16, r16
     134:	00 00       	nop
     136:	74 01       	movw	r14, r8
     138:	04 01       	movw	r0, r8
     13a:	03 09       	sbc	r16, r3
     13c:	04 60       	ori	r16, 0x04	; 4
     13e:	01 12       	cpse	r0, r17
     140:	02 03       	mulsu	r16, r18
     142:	09 04       	cpc	r0, r9
     144:	58 01       	movw	r10, r16
     146:	06 03       	mulsu	r16, r22
     148:	03 09       	sbc	r16, r3
     14a:	04 4e       	sbci	r16, 0xE4	; 228
     14c:	01 08       	sbc	r0, r1

0000014e <string3>:
     14e:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000158 <string2>:
     158:	06 03 4d 00 32 00 00 00                             ..M.2...

00000160 <string1>:
     160:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     170:	65 00 00 00                                         e...

00000174 <string0>:
     174:	04 03 09 04                                         ....

00000178 <config1_descriptor>:
     178:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     188:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     198:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1a8:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1b8:	40 00 00                                            @..

000001bb <device_descriptor>:
     1bb:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1cb:	03 01                                               ..

000001cd <endpoint_config_table>:
     1cd:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001d8 <__ctors_end>:
     1d8:	11 24       	eor	r1, r1
     1da:	1f be       	out	0x3f, r1	; 63
     1dc:	cf ef       	ldi	r28, 0xFF	; 255
     1de:	da e0       	ldi	r29, 0x0A	; 10
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	cd bf       	out	0x3d, r28	; 61

000001e4 <__do_copy_data>:
     1e4:	11 e0       	ldi	r17, 0x01	; 1
     1e6:	a0 e0       	ldi	r26, 0x00	; 0
     1e8:	b1 e0       	ldi	r27, 0x01	; 1
     1ea:	e0 e8       	ldi	r30, 0x80	; 128
     1ec:	f7 e3       	ldi	r31, 0x37	; 55
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <__do_copy_data+0x10>
     1f0:	05 90       	lpm	r0, Z+
     1f2:	0d 92       	st	X+, r0
     1f4:	a6 36       	cpi	r26, 0x66	; 102
     1f6:	b1 07       	cpc	r27, r17
     1f8:	d9 f7       	brne	.-10     	; 0x1f0 <__do_copy_data+0xc>

000001fa <__do_clear_bss>:
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	a6 e6       	ldi	r26, 0x66	; 102
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	01 c0       	rjmp	.+2      	; 0x204 <.do_clear_bss_start>

00000202 <.do_clear_bss_loop>:
     202:	1d 92       	st	X+, r1

00000204 <.do_clear_bss_start>:
     204:	ab 3f       	cpi	r26, 0xFB	; 251
     206:	b2 07       	cpc	r27, r18
     208:	e1 f7       	brne	.-8      	; 0x202 <.do_clear_bss_loop>
     20a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <main>
     20e:	0c 94 be 1b 	jmp	0x377c	; 0x377c <_exit>

00000212 <__bad_interrupt>:
     212:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000216 <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(char self) {
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	c8 2f       	mov	r28, r24
/************************************************************
Initialization of Pins and System Clock
************************************************************/

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     21c:	e1 e6       	ldi	r30, 0x61	; 97
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	90 e8       	ldi	r25, 0x80	; 128
     222:	90 83       	st	Z, r25
     224:	10 82       	st	Z, r1

	// Disable JTAG
	m_disableJTAG(); // turn off JTAG port and allow access to F4-F7 as GPIO
     226:	95 bf       	out	0x35, r25	; 53
     228:	95 bf       	out	0x35, r25	; 53
	
	//Set to Input
	clear(DDRD,0); // D0
     22a:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     22c:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     22e:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     230:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     232:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     234:	23 9a       	sbi	0x04, 3	; 4
	
	set(DDRC,6); //C6 Red positioning LED
     236:	3e 9a       	sbi	0x07, 6	; 7
	set(DDRC,7); //C7 Blue positioning LED 
     238:	3f 9a       	sbi	0x07, 7	; 7
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     23a:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     23c:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     23e:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     240:	2b 98       	cbi	0x05, 3	; 5
	
	clear(PORTC,6); //Start with positioning LED off
     242:	46 98       	cbi	0x08, 6	; 8
	clear(PORTC,7); 
     244:	47 98       	cbi	0x08, 7	; 8

/************************************************************
Setup Subsystems
************************************************************/

	m_bus_init();
     246:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <m_bus_init>
	while(!m_wii_open());
     24a:	0e 94 88 13 	call	0x2710	; 0x2710 <m_wii_open>
     24e:	88 23       	and	r24, r24
     250:	e1 f3       	breq	.-8      	; 0x24a <initialize_robockey+0x34>
	sei();
     252:	78 94       	sei
	m_usb_init();
     254:	0e 94 77 11 	call	0x22ee	; 0x22ee <m_usb_init>
	if(self == RED_BULL){
     258:	c1 11       	cpse	r28, r1
     25a:	08 c0       	rjmp	.+16     	; 0x26c <initialize_robockey+0x56>
		while(!m_rf_open(CHANNEL,RXADDRESS_RED_BULL,PACKET_LENGTH)); // Configure mRF
     25c:	4a e0       	ldi	r20, 0x0A	; 10
     25e:	60 e2       	ldi	r22, 0x20	; 32
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <m_rf_open>
     266:	88 23       	and	r24, r24
     268:	c9 f3       	breq	.-14     	; 0x25c <initialize_robockey+0x46>
     26a:	13 c0       	rjmp	.+38     	; 0x292 <initialize_robockey+0x7c>
	}
	if(self == GREEN_MONSTER){
     26c:	c1 30       	cpi	r28, 0x01	; 1
     26e:	41 f4       	brne	.+16     	; 0x280 <initialize_robockey+0x6a>
		while(!m_rf_open(CHANNEL,RXADDRESS_GREEN_MONSTER,PACKET_LENGTH)); // Configure mRF
     270:	4a e0       	ldi	r20, 0x0A	; 10
     272:	61 e2       	ldi	r22, 0x21	; 33
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <m_rf_open>
     27a:	88 23       	and	r24, r24
     27c:	c9 f3       	breq	.-14     	; 0x270 <initialize_robockey+0x5a>
     27e:	09 c0       	rjmp	.+18     	; 0x292 <initialize_robockey+0x7c>
	}
	if(self == BLUE_WHALE){
     280:	c2 30       	cpi	r28, 0x02	; 2
     282:	39 f4       	brne	.+14     	; 0x292 <initialize_robockey+0x7c>
		while(!m_rf_open(CHANNEL,RXADDRESS_BLUE_WHALE,PACKET_LENGTH)); // Configure mRF
     284:	4a e0       	ldi	r20, 0x0A	; 10
     286:	62 e2       	ldi	r22, 0x22	; 34
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <m_rf_open>
     28e:	88 23       	and	r24, r24
     290:	c9 f3       	breq	.-14     	; 0x284 <initialize_robockey+0x6e>
/************************************************************
Timer1 Initialization for PWM Motor Control
************************************************************/

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     292:	e1 e8       	ldi	r30, 0x81	; 129
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	8b 7f       	andi	r24, 0xFB	; 251
     29a:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     29c:	80 81       	ld	r24, Z
     29e:	8d 7f       	andi	r24, 0xFD	; 253
     2a0:	80 83       	st	Z, r24
	clear(TCCR1B,CS10);
     2a2:	80 81       	ld	r24, Z
     2a4:	8e 7f       	andi	r24, 0xFE	; 254
     2a6:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     2a8:	80 81       	ld	r24, Z
     2aa:	8f 7e       	andi	r24, 0xEF	; 239
     2ac:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     2ae:	80 81       	ld	r24, Z
     2b0:	88 60       	ori	r24, 0x08	; 8
     2b2:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     2b4:	e0 e8       	ldi	r30, 0x80	; 128
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	8d 7f       	andi	r24, 0xFD	; 253
     2bc:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     2be:	80 81       	ld	r24, Z
     2c0:	8e 7f       	andi	r24, 0xFE	; 254
     2c2:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     2c4:	80 81       	ld	r24, Z
     2c6:	8f 7d       	andi	r24, 0xDF	; 223
     2c8:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     2ca:	80 81       	ld	r24, Z
     2cc:	8f 7e       	andi	r24, 0xEF	; 239
     2ce:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     2d0:	c8 e8       	ldi	r28, 0x88	; 136
     2d2:	d0 e0       	ldi	r29, 0x00	; 0
     2d4:	8a ea       	ldi	r24, 0xAA	; 170
     2d6:	99 e2       	ldi	r25, 0x29	; 41
     2d8:	99 83       	std	Y+1, r25	; 0x01
     2da:	88 83       	st	Y, r24
	OCR1B = (float)OCR1A*0.1;
     2dc:	68 81       	ld	r22, Y
     2de:	79 81       	ldd	r23, Y+1	; 0x01
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 ab 19 	call	0x3356	; 0x3356 <__floatunsisf>
     2e8:	2d ec       	ldi	r18, 0xCD	; 205
     2ea:	3c ec       	ldi	r19, 0xCC	; 204
     2ec:	4c ec       	ldi	r20, 0xCC	; 204
     2ee:	5d e3       	ldi	r21, 0x3D	; 61
     2f0:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     2f4:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
     2f8:	70 93 8b 00 	sts	0x008B, r23
     2fc:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     300:	68 81       	ld	r22, Y
     302:	79 81       	ldd	r23, Y+1	; 0x01
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 ab 19 	call	0x3356	; 0x3356 <__floatunsisf>
     30c:	2d ec       	ldi	r18, 0xCD	; 205
     30e:	3c ec       	ldi	r19, 0xCC	; 204
     310:	4c ec       	ldi	r20, 0xCC	; 204
     312:	5d e3       	ldi	r21, 0x3D	; 61
     314:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     318:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
     31c:	70 93 8d 00 	sts	0x008D, r23
     320:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     324:	ef e6       	ldi	r30, 0x6F	; 111
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	82 60       	ori	r24, 0x02	; 2
     32c:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     32e:	80 81       	ld	r24, Z
     330:	84 60       	ori	r24, 0x04	; 4
     332:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     334:	80 81       	ld	r24, Z
     336:	88 60       	ori	r24, 0x08	; 8
     338:	80 83       	st	Z, r24

/************************************************************
Timer3 Initialization for fixed timestep calculations
************************************************************/

	clear(TCCR3B,CS32); // prescale /1
     33a:	e1 e9       	ldi	r30, 0x91	; 145
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	80 81       	ld	r24, Z
     340:	8b 7f       	andi	r24, 0xFB	; 251
     342:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     344:	80 81       	ld	r24, Z
     346:	8d 7f       	andi	r24, 0xFD	; 253
     348:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     34a:	80 81       	ld	r24, Z
     34c:	81 60       	ori	r24, 0x01	; 1
     34e:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     350:	80 81       	ld	r24, Z
     352:	8f 7e       	andi	r24, 0xEF	; 239
     354:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     356:	80 81       	ld	r24, Z
     358:	88 60       	ori	r24, 0x08	; 8
     35a:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     35c:	e0 e9       	ldi	r30, 0x90	; 144
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	8d 7f       	andi	r24, 0xFD	; 253
     364:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     366:	80 81       	ld	r24, Z
     368:	8e 7f       	andi	r24, 0xFE	; 254
     36a:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     36c:	80 e8       	ldi	r24, 0x80	; 128
     36e:	9e e3       	ldi	r25, 0x3E	; 62
     370:	90 93 99 00 	sts	0x0099, r25
     374:	80 93 98 00 	sts	0x0098, r24

/************************************************************
Timer0 Initialization for COMM test 
************************************************************/
	clear(TCCR0B,CS02); //start with timer off
     378:	85 b5       	in	r24, 0x25	; 37
     37a:	8b 7f       	andi	r24, 0xFB	; 251
     37c:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS01);
     37e:	85 b5       	in	r24, 0x25	; 37
     380:	8d 7f       	andi	r24, 0xFD	; 253
     382:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS00);
     384:	85 b5       	in	r24, 0x25	; 37
     386:	8e 7f       	andi	r24, 0xFE	; 254
     388:	85 bd       	out	0x25, r24	; 37
	
	clear(TCCR0B,WGM02); //Up to OCR0A mode 
     38a:	85 b5       	in	r24, 0x25	; 37
     38c:	87 7f       	andi	r24, 0xF7	; 247
     38e:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0A,WGM01);
     390:	84 b5       	in	r24, 0x24	; 36
     392:	8d 7f       	andi	r24, 0xFD	; 253
     394:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A,WGM00);
     396:	84 b5       	in	r24, 0x24	; 36
     398:	8e 7f       	andi	r24, 0xFE	; 254
     39a:	84 bd       	out	0x24, r24	; 36
		
	set(TIMSK0,TOIE0); //enable interupt at OCR0A
     39c:	ee e6       	ldi	r30, 0x6E	; 110
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	81 60       	ori	r24, 0x01	; 1
     3a4:	80 83       	st	Z, r24
	
/************************************************************
Setup ADC
************************************************************/
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
     3a6:	cc e7       	ldi	r28, 0x7C	; 124
     3a8:	d0 e0       	ldi	r29, 0x00	; 0
     3aa:	88 81       	ld	r24, Y
     3ac:	8f 77       	andi	r24, 0x7F	; 127
     3ae:	88 83       	st	Y, r24
	set(ADMUX,REFS0);
     3b0:	88 81       	ld	r24, Y
     3b2:	80 64       	ori	r24, 0x40	; 64
     3b4:	88 83       	st	Y, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
     3b6:	ea e7       	ldi	r30, 0x7A	; 122
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	8b 7f       	andi	r24, 0xFB	; 251
     3be:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     3c0:	80 81       	ld	r24, Z
     3c2:	82 60       	ori	r24, 0x02	; 2
     3c4:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     3c6:	80 81       	ld	r24, Z
     3c8:	81 60       	ori	r24, 0x01	; 1
     3ca:	80 83       	st	Z, r24
	
	// Disable Digital input to:
	set(DIDR0,ADC0D); // ADC0
     3cc:	ae e7       	ldi	r26, 0x7E	; 126
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	8c 91       	ld	r24, X
     3d2:	81 60       	ori	r24, 0x01	; 1
     3d4:	8c 93       	st	X, r24
	set(DIDR0,ADC1D); // ADC1
     3d6:	8c 91       	ld	r24, X
     3d8:	82 60       	ori	r24, 0x02	; 2
     3da:	8c 93       	st	X, r24
	set(DIDR0,ADC4D); // ADC4
     3dc:	8c 91       	ld	r24, X
     3de:	80 61       	ori	r24, 0x10	; 16
     3e0:	8c 93       	st	X, r24
	set(DIDR0,ADC5D); // ADC5
     3e2:	8c 91       	ld	r24, X
     3e4:	80 62       	ori	r24, 0x20	; 32
     3e6:	8c 93       	st	X, r24
	set(DIDR0,ADC6D); // ADC6
     3e8:	8c 91       	ld	r24, X
     3ea:	80 64       	ori	r24, 0x40	; 64
     3ec:	8c 93       	st	X, r24
	set(DIDR0,ADC7D); // ADC7
     3ee:	8c 91       	ld	r24, X
     3f0:	80 68       	ori	r24, 0x80	; 128
     3f2:	8c 93       	st	X, r24
	set(DIDR2,ADC8D); // ADC8
     3f4:	ad e7       	ldi	r26, 0x7D	; 125
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	8c 91       	ld	r24, X
     3fa:	81 60       	ori	r24, 0x01	; 1
     3fc:	8c 93       	st	X, r24
	set(DIDR2,ADC9D); // ADC9
     3fe:	8c 91       	ld	r24, X
     400:	82 60       	ori	r24, 0x02	; 2
     402:	8c 93       	st	X, r24
	set(DIDR2,ADC10D); // ADC10
     404:	8c 91       	ld	r24, X
     406:	84 60       	ori	r24, 0x04	; 4
     408:	8c 93       	st	X, r24
	set(DIDR2,ADC11D); // ADC11
     40a:	8c 91       	ld	r24, X
     40c:	88 60       	ori	r24, 0x08	; 8
     40e:	8c 93       	st	X, r24
	set(DIDR2,ADC12D); // ADC812
     410:	8c 91       	ld	r24, X
     412:	80 61       	ori	r24, 0x10	; 16
     414:	8c 93       	st	X, r24
	set(DIDR2,ADC13D); // ADC13
     416:	8c 91       	ld	r24, X
     418:	80 62       	ori	r24, 0x20	; 32
     41a:	8c 93       	st	X, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
     41c:	80 81       	ld	r24, Z
     41e:	8f 7d       	andi	r24, 0xDF	; 223
     420:	80 83       	st	Z, r24
	
	set(ADCSRB,MUX5); // Select ADC13 at pin B6
     422:	ab e7       	ldi	r26, 0x7B	; 123
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	8c 91       	ld	r24, X
     428:	80 62       	ori	r24, 0x20	; 32
     42a:	8c 93       	st	X, r24
	set(ADMUX,MUX2); // Transistor 4
     42c:	88 81       	ld	r24, Y
     42e:	84 60       	ori	r24, 0x04	; 4
     430:	88 83       	st	Y, r24
	clear(ADMUX,MUX1);
     432:	88 81       	ld	r24, Y
     434:	8d 7f       	andi	r24, 0xFD	; 253
     436:	88 83       	st	Y, r24
	set(ADMUX,MUX0);
     438:	88 81       	ld	r24, Y
     43a:	81 60       	ori	r24, 0x01	; 1
     43c:	88 83       	st	Y, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
     43e:	80 81       	ld	r24, Z
     440:	80 68       	ori	r24, 0x80	; 128
     442:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
     444:	80 81       	ld	r24, Z
     446:	80 64       	ori	r24, 0x40	; 64
     448:	80 83       	st	Z, r24

}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <positioning_LED>:
Positioning LED Color
************************************************************/

void positioning_LED(int color)
{
	switch(color)
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	91 05       	cpc	r25, r1
     454:	41 f0       	breq	.+16     	; 0x466 <positioning_LED+0x16>
     456:	82 30       	cpi	r24, 0x02	; 2
     458:	91 05       	cpc	r25, r1
     45a:	41 f0       	breq	.+16     	; 0x46c <positioning_LED+0x1c>
     45c:	89 2b       	or	r24, r25
     45e:	41 f4       	brne	.+16     	; 0x470 <positioning_LED+0x20>
	{ 
		case OFF:	//OFF
			clear(PORTD,3);
     460:	5b 98       	cbi	0x0b, 3	; 11
			clear(PORTD,5);
     462:	5d 98       	cbi	0x0b, 5	; 11
			break;
     464:	08 95       	ret
		
		case BLUE:	//BLUE
			set(PORTD,5);
     466:	5d 9a       	sbi	0x0b, 5	; 11
			clear(PORTD,3);
     468:	5b 98       	cbi	0x0b, 3	; 11
			break;
     46a:	08 95       	ret
			
		case RED: //RED
			clear(PORTD,5);
     46c:	5d 98       	cbi	0x0b, 5	; 11
			set(PORTD,3);
     46e:	5b 9a       	sbi	0x0b, 3	; 11
     470:	08 95       	ret

00000472 <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	91 05       	cpc	r25, r1
     476:	f9 f0       	breq	.+62     	; 0x4b6 <distIndex+0x44>
     478:	2c f4       	brge	.+10     	; 0x484 <distIndex+0x12>
     47a:	00 97       	sbiw	r24, 0x00	; 0
     47c:	51 f0       	breq	.+20     	; 0x492 <distIndex+0x20>
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	89 f0       	breq	.+34     	; 0x4a4 <distIndex+0x32>
     482:	42 c0       	rjmp	.+132    	; 0x508 <distIndex+0x96>
     484:	84 30       	cpi	r24, 0x04	; 4
     486:	91 05       	cpc	r25, r1
     488:	51 f1       	breq	.+84     	; 0x4de <distIndex+0x6c>
     48a:	f4 f0       	brlt	.+60     	; 0x4c8 <distIndex+0x56>
     48c:	05 97       	sbiw	r24, 0x05	; 5
     48e:	91 f1       	breq	.+100    	; 0x4f4 <distIndex+0x82>
     490:	3b c0       	rjmp	.+118    	; 0x508 <distIndex+0x96>
	{
		case 0 : 
			pointsUsed[0] = 0;
     492:	e6 e6       	ldi	r30, 0x66	; 102
     494:	f1 e0       	ldi	r31, 0x01	; 1
     496:	11 82       	std	Z+1, r1	; 0x01
     498:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	93 83       	std	Z+3, r25	; 0x03
     4a0:	82 83       	std	Z+2, r24	; 0x02
			break;
     4a2:	32 c0       	rjmp	.+100    	; 0x508 <distIndex+0x96>
			
		case 1 : 
			pointsUsed[0] = 0;
     4a4:	e6 e6       	ldi	r30, 0x66	; 102
     4a6:	f1 e0       	ldi	r31, 0x01	; 1
     4a8:	11 82       	std	Z+1, r1	; 0x01
     4aa:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     4ac:	82 e0       	ldi	r24, 0x02	; 2
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	93 83       	std	Z+3, r25	; 0x03
     4b2:	82 83       	std	Z+2, r24	; 0x02
			break;
     4b4:	29 c0       	rjmp	.+82     	; 0x508 <distIndex+0x96>
			
		case 2 : 
			pointsUsed[0] = 0;
     4b6:	e6 e6       	ldi	r30, 0x66	; 102
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	11 82       	std	Z+1, r1	; 0x01
     4bc:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     4be:	83 e0       	ldi	r24, 0x03	; 3
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	93 83       	std	Z+3, r25	; 0x03
     4c4:	82 83       	std	Z+2, r24	; 0x02
			break;
     4c6:	20 c0       	rjmp	.+64     	; 0x508 <distIndex+0x96>
			
		case 3 : 
			pointsUsed[0] = 1;
     4c8:	e6 e6       	ldi	r30, 0x66	; 102
     4ca:	f1 e0       	ldi	r31, 0x01	; 1
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	91 83       	std	Z+1, r25	; 0x01
     4d2:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	93 83       	std	Z+3, r25	; 0x03
     4da:	82 83       	std	Z+2, r24	; 0x02
			break;
     4dc:	15 c0       	rjmp	.+42     	; 0x508 <distIndex+0x96>
			
		case 4 : 
			pointsUsed[0] = 1;
     4de:	e6 e6       	ldi	r30, 0x66	; 102
     4e0:	f1 e0       	ldi	r31, 0x01	; 1
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	91 83       	std	Z+1, r25	; 0x01
     4e8:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     4ea:	83 e0       	ldi	r24, 0x03	; 3
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	93 83       	std	Z+3, r25	; 0x03
     4f0:	82 83       	std	Z+2, r24	; 0x02
			break;
     4f2:	0a c0       	rjmp	.+20     	; 0x508 <distIndex+0x96>
			
		case 5 :
			pointsUsed[0] = 2;
     4f4:	e6 e6       	ldi	r30, 0x66	; 102
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	91 83       	std	Z+1, r25	; 0x01
     4fe:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     500:	83 e0       	ldi	r24, 0x03	; 3
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	93 83       	std	Z+3, r25	; 0x03
     506:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     508:	86 e6       	ldi	r24, 0x66	; 102
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	08 95       	ret

0000050e <orientationCalculationFour>:


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
     50e:	2f 92       	push	r2
     510:	3f 92       	push	r3
     512:	4f 92       	push	r4
     514:	5f 92       	push	r5
     516:	6f 92       	push	r6
     518:	7f 92       	push	r7
     51a:	8f 92       	push	r8
     51c:	9f 92       	push	r9
     51e:	af 92       	push	r10
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	00 d0       	rcall	.+0      	; 0x534 <orientationCalculationFour+0x26>
     534:	00 d0       	rcall	.+0      	; 0x536 <orientationCalculationFour+0x28>
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	5c 01       	movw	r10, r24
     53c:	4a 01       	movw	r8, r20
     53e:	3a 83       	std	Y+2, r19	; 0x02
     540:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     542:	06 2f       	mov	r16, r22
     544:	17 2f       	mov	r17, r23
     546:	f8 01       	movw	r30, r16
     548:	41 90       	ld	r4, Z+
     54a:	51 90       	ld	r5, Z+
     54c:	61 90       	ld	r6, Z+
     54e:	71 90       	ld	r7, Z+
     550:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     552:	1c 82       	std	Y+4, r1	; 0x04
     554:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     556:	21 2c       	mov	r2, r1
     558:	31 2c       	mov	r3, r1
     55a:	12 c0       	rjmp	.+36     	; 0x580 <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     55c:	f8 01       	movw	r30, r16
     55e:	c1 90       	ld	r12, Z+
     560:	d1 90       	ld	r13, Z+
     562:	e1 90       	ld	r14, Z+
     564:	f1 90       	ld	r15, Z+
     566:	8f 01       	movw	r16, r30
     568:	a7 01       	movw	r20, r14
     56a:	96 01       	movw	r18, r12
     56c:	c3 01       	movw	r24, r6
     56e:	b2 01       	movw	r22, r4
     570:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__gesf2>
     574:	18 16       	cp	r1, r24
     576:	24 f4       	brge	.+8      	; 0x580 <orientationCalculationFour+0x72>
     578:	26 01       	movw	r4, r12
     57a:	37 01       	movw	r6, r14
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     57c:	2b 80       	ldd	r2, Y+3	; 0x03
     57e:	3c 80       	ldd	r3, Y+4	; 0x04
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	9c 81       	ldd	r25, Y+4	; 0x04
     584:	01 96       	adiw	r24, 0x01	; 1
     586:	9c 83       	std	Y+4, r25	; 0x04
     588:	8b 83       	std	Y+3, r24	; 0x03
     58a:	06 97       	sbiw	r24, 0x06	; 6
     58c:	39 f7       	brne	.-50     	; 0x55c <orientationCalculationFour+0x4e>
		}
	}
	
	//Find points used by shortest length	
	int* pointsShortRef;
	pointsShortRef = distIndex(indexMin);	
     58e:	82 2d       	mov	r24, r2
     590:	93 2d       	mov	r25, r3
     592:	0e 94 39 02 	call	0x472	; 0x472 <distIndex>
	int pointsShort[2] = {pointsShortRef[0], pointsShortRef[1]};	
     596:	fc 01       	movw	r30, r24
     598:	20 81       	ld	r18, Z
     59a:	31 81       	ldd	r19, Z+1	; 0x01
     59c:	62 81       	ldd	r22, Z+2	; 0x02
     59e:	73 81       	ldd	r23, Z+3	; 0x03
	if (pointsShort[0] == pointsLong[0]){
     5a0:	f5 01       	movw	r30, r10
     5a2:	40 81       	ld	r20, Z
     5a4:	51 81       	ldd	r21, Z+1	; 0x01
     5a6:	24 17       	cp	r18, r20
     5a8:	35 07       	cpc	r19, r21
     5aa:	59 f4       	brne	.+22     	; 0x5c2 <orientationCalculationFour+0xb4>
		*top = pointsLong[0];
     5ac:	f4 01       	movw	r30, r8
     5ae:	31 83       	std	Z+1, r19	; 0x01
     5b0:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     5b2:	f5 01       	movw	r30, r10
     5b4:	82 81       	ldd	r24, Z+2	; 0x02
     5b6:	93 81       	ldd	r25, Z+3	; 0x03
     5b8:	e9 81       	ldd	r30, Y+1	; 0x01
     5ba:	fa 81       	ldd	r31, Y+2	; 0x02
     5bc:	91 83       	std	Z+1, r25	; 0x01
     5be:	80 83       	st	Z, r24
     5c0:	37 c0       	rjmp	.+110    	; 0x630 <orientationCalculationFour+0x122>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     5c2:	f5 01       	movw	r30, r10
     5c4:	82 81       	ldd	r24, Z+2	; 0x02
     5c6:	93 81       	ldd	r25, Z+3	; 0x03
     5c8:	28 17       	cp	r18, r24
     5ca:	39 07       	cpc	r19, r25
     5cc:	59 f4       	brne	.+22     	; 0x5e4 <orientationCalculationFour+0xd6>
			*top = pointsLong[1];
     5ce:	f4 01       	movw	r30, r8
     5d0:	31 83       	std	Z+1, r19	; 0x01
     5d2:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     5d4:	f5 01       	movw	r30, r10
     5d6:	80 81       	ld	r24, Z
     5d8:	91 81       	ldd	r25, Z+1	; 0x01
     5da:	e9 81       	ldd	r30, Y+1	; 0x01
     5dc:	fa 81       	ldd	r31, Y+2	; 0x02
     5de:	91 83       	std	Z+1, r25	; 0x01
     5e0:	80 83       	st	Z, r24
     5e2:	26 c0       	rjmp	.+76     	; 0x630 <orientationCalculationFour+0x122>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     5e4:	64 17       	cp	r22, r20
     5e6:	75 07       	cpc	r23, r21
     5e8:	59 f4       	brne	.+22     	; 0x600 <orientationCalculationFour+0xf2>
				*top = pointsLong[0];
     5ea:	f4 01       	movw	r30, r8
     5ec:	71 83       	std	Z+1, r23	; 0x01
     5ee:	60 83       	st	Z, r22
				*bottom = pointsLong[1];
     5f0:	f5 01       	movw	r30, r10
     5f2:	82 81       	ldd	r24, Z+2	; 0x02
     5f4:	93 81       	ldd	r25, Z+3	; 0x03
     5f6:	e9 81       	ldd	r30, Y+1	; 0x01
     5f8:	fa 81       	ldd	r31, Y+2	; 0x02
     5fa:	91 83       	std	Z+1, r25	; 0x01
     5fc:	80 83       	st	Z, r24
     5fe:	18 c0       	rjmp	.+48     	; 0x630 <orientationCalculationFour+0x122>
			} else {
				if (pointsShort[1] == pointsLong[1])
     600:	68 17       	cp	r22, r24
     602:	79 07       	cpc	r23, r25
     604:	59 f4       	brne	.+22     	; 0x61c <orientationCalculationFour+0x10e>
				{
					*top = pointsLong[1];
     606:	f4 01       	movw	r30, r8
     608:	71 83       	std	Z+1, r23	; 0x01
     60a:	60 83       	st	Z, r22
					*bottom = pointsLong[0];
     60c:	f5 01       	movw	r30, r10
     60e:	80 81       	ld	r24, Z
     610:	91 81       	ldd	r25, Z+1	; 0x01
     612:	e9 81       	ldd	r30, Y+1	; 0x01
     614:	fa 81       	ldd	r31, Y+2	; 0x02
     616:	91 83       	std	Z+1, r25	; 0x01
     618:	80 83       	st	Z, r24
     61a:	0a c0       	rjmp	.+20     	; 0x630 <orientationCalculationFour+0x122>
				} else {
						*top = pointsLong[1];
     61c:	f4 01       	movw	r30, r8
     61e:	91 83       	std	Z+1, r25	; 0x01
     620:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     622:	f5 01       	movw	r30, r10
     624:	80 81       	ld	r24, Z
     626:	91 81       	ldd	r25, Z+1	; 0x01
     628:	e9 81       	ldd	r30, Y+1	; 0x01
     62a:	fa 81       	ldd	r31, Y+2	; 0x02
     62c:	91 83       	std	Z+1, r25	; 0x01
     62e:	80 83       	st	Z, r24
				}
			}
		}
	}
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	df 90       	pop	r13
     646:	cf 90       	pop	r12
     648:	bf 90       	pop	r11
     64a:	af 90       	pop	r10
     64c:	9f 90       	pop	r9
     64e:	8f 90       	pop	r8
     650:	7f 90       	pop	r7
     652:	6f 90       	pop	r6
     654:	5f 90       	pop	r5
     656:	4f 90       	pop	r4
     658:	3f 90       	pop	r3
     65a:	2f 90       	pop	r2
     65c:	08 95       	ret

0000065e <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     65e:	2f 92       	push	r2
     660:	3f 92       	push	r3
     662:	4f 92       	push	r4
     664:	5f 92       	push	r5
     666:	6f 92       	push	r6
     668:	7f 92       	push	r7
     66a:	8f 92       	push	r8
     66c:	9f 92       	push	r9
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	c2 54       	subi	r28, 0x42	; 66
     688:	d1 09       	sbc	r29, r1
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
     694:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     696:	fc 01       	movw	r30, r24
     698:	04 80       	ldd	r0, Z+4	; 0x04
     69a:	f5 81       	ldd	r31, Z+5	; 0x05
     69c:	e0 2d       	mov	r30, r0
     69e:	fa a3       	std	Y+34, r31	; 0x22
     6a0:	e9 a3       	std	Y+33, r30	; 0x21
     6a2:	fc 01       	movw	r30, r24
     6a4:	00 81       	ld	r16, Z
     6a6:	11 81       	ldd	r17, Z+1	; 0x01
     6a8:	69 a1       	ldd	r22, Y+33	; 0x21
     6aa:	7a a1       	ldd	r23, Y+34	; 0x22
     6ac:	60 1b       	sub	r22, r16
     6ae:	71 0b       	sbc	r23, r17
     6b0:	07 2e       	mov	r0, r23
     6b2:	00 0c       	add	r0, r0
     6b4:	88 0b       	sbc	r24, r24
     6b6:	99 0b       	sbc	r25, r25
     6b8:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     6bc:	6b 01       	movw	r12, r22
     6be:	7c 01       	movw	r14, r24
     6c0:	f2 01       	movw	r30, r4
     6c2:	06 80       	ldd	r0, Z+6	; 0x06
     6c4:	f7 81       	ldd	r31, Z+7	; 0x07
     6c6:	e0 2d       	mov	r30, r0
     6c8:	fe a3       	std	Y+38, r31	; 0x26
     6ca:	ed a3       	std	Y+37, r30	; 0x25
     6cc:	f2 01       	movw	r30, r4
     6ce:	22 80       	ldd	r2, Z+2	; 0x02
     6d0:	33 80       	ldd	r3, Z+3	; 0x03
     6d2:	ad a0       	ldd	r10, Y+37	; 0x25
     6d4:	be a0       	ldd	r11, Y+38	; 0x26
     6d6:	a2 18       	sub	r10, r2
     6d8:	b3 08       	sbc	r11, r3
     6da:	9b 01       	movw	r18, r22
     6dc:	ac 01       	movw	r20, r24
     6de:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     6e2:	69 a7       	std	Y+41, r22	; 0x29
     6e4:	7a a7       	std	Y+42, r23	; 0x2a
     6e6:	8b a7       	std	Y+43, r24	; 0x2b
     6e8:	9c a7       	std	Y+44, r25	; 0x2c
     6ea:	aa 9c       	mul	r10, r10
     6ec:	40 01       	movw	r8, r0
     6ee:	ab 9c       	mul	r10, r11
     6f0:	90 0c       	add	r9, r0
     6f2:	90 0c       	add	r9, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	09 2c       	mov	r0, r9
     6f8:	00 0c       	add	r0, r0
     6fa:	aa 08       	sbc	r10, r10
     6fc:	bb 08       	sbc	r11, r11
     6fe:	a7 01       	movw	r20, r14
     700:	96 01       	movw	r18, r12
     702:	c7 01       	movw	r24, r14
     704:	b6 01       	movw	r22, r12
     706:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     70a:	6b 01       	movw	r12, r22
     70c:	7c 01       	movw	r14, r24
     70e:	c5 01       	movw	r24, r10
     710:	b4 01       	movw	r22, r8
     712:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     716:	9b 01       	movw	r18, r22
     718:	ac 01       	movw	r20, r24
     71a:	c7 01       	movw	r24, r14
     71c:	b6 01       	movw	r22, r12
     71e:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
     722:	0e 94 4b 1b 	call	0x3696	; 0x3696 <sqrt>
     726:	6b af       	std	Y+59, r22	; 0x3b
     728:	7c af       	std	Y+60, r23	; 0x3c
     72a:	8d af       	std	Y+61, r24	; 0x3d
     72c:	9e af       	std	Y+62, r25	; 0x3e
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     72e:	f2 01       	movw	r30, r4
     730:	00 84       	ldd	r0, Z+8	; 0x08
     732:	f1 85       	ldd	r31, Z+9	; 0x09
     734:	e0 2d       	mov	r30, r0
     736:	fa a7       	std	Y+42, r31	; 0x2a
     738:	e9 a7       	std	Y+41, r30	; 0x29
     73a:	bf 01       	movw	r22, r30
     73c:	60 1b       	sub	r22, r16
     73e:	71 0b       	sbc	r23, r17
     740:	07 2e       	mov	r0, r23
     742:	00 0c       	add	r0, r0
     744:	88 0b       	sbc	r24, r24
     746:	99 0b       	sbc	r25, r25
     748:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     74c:	6b 01       	movw	r12, r22
     74e:	7c 01       	movw	r14, r24
     750:	f2 01       	movw	r30, r4
     752:	62 84       	ldd	r6, Z+10	; 0x0a
     754:	73 84       	ldd	r7, Z+11	; 0x0b
     756:	53 01       	movw	r10, r6
     758:	a2 18       	sub	r10, r2
     75a:	b3 08       	sbc	r11, r3
     75c:	9b 01       	movw	r18, r22
     75e:	ac 01       	movw	r20, r24
     760:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     764:	6d a7       	std	Y+45, r22	; 0x2d
     766:	7e a7       	std	Y+46, r23	; 0x2e
     768:	8f a7       	std	Y+47, r24	; 0x2f
     76a:	98 ab       	std	Y+48, r25	; 0x30
     76c:	aa 9c       	mul	r10, r10
     76e:	40 01       	movw	r8, r0
     770:	ab 9c       	mul	r10, r11
     772:	90 0c       	add	r9, r0
     774:	90 0c       	add	r9, r0
     776:	11 24       	eor	r1, r1
     778:	09 2c       	mov	r0, r9
     77a:	00 0c       	add	r0, r0
     77c:	aa 08       	sbc	r10, r10
     77e:	bb 08       	sbc	r11, r11
     780:	a7 01       	movw	r20, r14
     782:	96 01       	movw	r18, r12
     784:	c7 01       	movw	r24, r14
     786:	b6 01       	movw	r22, r12
     788:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     78c:	6b 01       	movw	r12, r22
     78e:	7c 01       	movw	r14, r24
     790:	c5 01       	movw	r24, r10
     792:	b4 01       	movw	r22, r8
     794:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     798:	9b 01       	movw	r18, r22
     79a:	ac 01       	movw	r20, r24
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
     7a4:	0e 94 4b 1b 	call	0x3696	; 0x3696 <sqrt>
     7a8:	23 96       	adiw	r28, 0x03	; 3
     7aa:	6c af       	std	Y+60, r22	; 0x3c
     7ac:	7d af       	std	Y+61, r23	; 0x3d
     7ae:	8e af       	std	Y+62, r24	; 0x3e
     7b0:	9f af       	std	Y+63, r25	; 0x3f
     7b2:	23 97       	sbiw	r28, 0x03	; 3
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     7b4:	f2 01       	movw	r30, r4
     7b6:	04 84       	ldd	r0, Z+12	; 0x0c
     7b8:	f5 85       	ldd	r31, Z+13	; 0x0d
     7ba:	e0 2d       	mov	r30, r0
     7bc:	fe a7       	std	Y+46, r31	; 0x2e
     7be:	ed a7       	std	Y+45, r30	; 0x2d
     7c0:	bf 01       	movw	r22, r30
     7c2:	60 1b       	sub	r22, r16
     7c4:	71 0b       	sbc	r23, r17
     7c6:	07 2e       	mov	r0, r23
     7c8:	00 0c       	add	r0, r0
     7ca:	88 0b       	sbc	r24, r24
     7cc:	99 0b       	sbc	r25, r25
     7ce:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     7d2:	4b 01       	movw	r8, r22
     7d4:	5c 01       	movw	r10, r24
     7d6:	f2 01       	movw	r30, r4
     7d8:	06 84       	ldd	r0, Z+14	; 0x0e
     7da:	f7 85       	ldd	r31, Z+15	; 0x0f
     7dc:	e0 2d       	mov	r30, r0
     7de:	fa ab       	std	Y+50, r31	; 0x32
     7e0:	e9 ab       	std	Y+49, r30	; 0x31
     7e2:	8f 01       	movw	r16, r30
     7e4:	02 19       	sub	r16, r2
     7e6:	13 09       	sbc	r17, r3
     7e8:	9b 01       	movw	r18, r22
     7ea:	ac 01       	movw	r20, r24
     7ec:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     7f0:	6b ab       	std	Y+51, r22	; 0x33
     7f2:	7c ab       	std	Y+52, r23	; 0x34
     7f4:	8d ab       	std	Y+53, r24	; 0x35
     7f6:	9e ab       	std	Y+54, r25	; 0x36
     7f8:	00 9f       	mul	r16, r16
     7fa:	60 01       	movw	r12, r0
     7fc:	01 9f       	mul	r16, r17
     7fe:	d0 0c       	add	r13, r0
     800:	d0 0c       	add	r13, r0
     802:	11 24       	eor	r1, r1
     804:	0d 2c       	mov	r0, r13
     806:	00 0c       	add	r0, r0
     808:	ee 08       	sbc	r14, r14
     80a:	ff 08       	sbc	r15, r15
     80c:	a5 01       	movw	r20, r10
     80e:	94 01       	movw	r18, r8
     810:	c5 01       	movw	r24, r10
     812:	b4 01       	movw	r22, r8
     814:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     818:	4b 01       	movw	r8, r22
     81a:	5c 01       	movw	r10, r24
     81c:	c7 01       	movw	r24, r14
     81e:	b6 01       	movw	r22, r12
     820:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     824:	9b 01       	movw	r18, r22
     826:	ac 01       	movw	r20, r24
     828:	c5 01       	movw	r24, r10
     82a:	b4 01       	movw	r22, r8
     82c:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
     830:	0e 94 4b 1b 	call	0x3696	; 0x3696 <sqrt>
     834:	6b ab       	std	Y+51, r22	; 0x33
     836:	7c ab       	std	Y+52, r23	; 0x34
     838:	8d ab       	std	Y+53, r24	; 0x35
     83a:	9e ab       	std	Y+54, r25	; 0x36
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     83c:	69 a5       	ldd	r22, Y+41	; 0x29
     83e:	7a a5       	ldd	r23, Y+42	; 0x2a
     840:	29 a1       	ldd	r18, Y+33	; 0x21
     842:	3a a1       	ldd	r19, Y+34	; 0x22
     844:	62 1b       	sub	r22, r18
     846:	73 0b       	sbc	r23, r19
     848:	07 2e       	mov	r0, r23
     84a:	00 0c       	add	r0, r0
     84c:	88 0b       	sbc	r24, r24
     84e:	99 0b       	sbc	r25, r25
     850:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     854:	4b 01       	movw	r8, r22
     856:	5c 01       	movw	r10, r24
     858:	83 01       	movw	r16, r6
     85a:	4d a1       	ldd	r20, Y+37	; 0x25
     85c:	5e a1       	ldd	r21, Y+38	; 0x26
     85e:	04 1b       	sub	r16, r20
     860:	15 0b       	sbc	r17, r21
     862:	9b 01       	movw	r18, r22
     864:	ac 01       	movw	r20, r24
     866:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     86a:	6f ab       	std	Y+55, r22	; 0x37
     86c:	78 af       	std	Y+56, r23	; 0x38
     86e:	89 af       	std	Y+57, r24	; 0x39
     870:	9a af       	std	Y+58, r25	; 0x3a
     872:	00 9f       	mul	r16, r16
     874:	60 01       	movw	r12, r0
     876:	01 9f       	mul	r16, r17
     878:	d0 0c       	add	r13, r0
     87a:	d0 0c       	add	r13, r0
     87c:	11 24       	eor	r1, r1
     87e:	0d 2c       	mov	r0, r13
     880:	00 0c       	add	r0, r0
     882:	ee 08       	sbc	r14, r14
     884:	ff 08       	sbc	r15, r15
     886:	a5 01       	movw	r20, r10
     888:	94 01       	movw	r18, r8
     88a:	c5 01       	movw	r24, r10
     88c:	b4 01       	movw	r22, r8
     88e:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     892:	4b 01       	movw	r8, r22
     894:	5c 01       	movw	r10, r24
     896:	c7 01       	movw	r24, r14
     898:	b6 01       	movw	r22, r12
     89a:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
     8a2:	c5 01       	movw	r24, r10
     8a4:	b4 01       	movw	r22, r8
     8a6:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
     8aa:	0e 94 4b 1b 	call	0x3696	; 0x3696 <sqrt>
     8ae:	6f ab       	std	Y+55, r22	; 0x37
     8b0:	78 af       	std	Y+56, r23	; 0x38
     8b2:	89 af       	std	Y+57, r24	; 0x39
     8b4:	9a af       	std	Y+58, r25	; 0x3a
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     8b6:	6d a5       	ldd	r22, Y+45	; 0x2d
     8b8:	7e a5       	ldd	r23, Y+46	; 0x2e
     8ba:	89 a1       	ldd	r24, Y+33	; 0x21
     8bc:	9a a1       	ldd	r25, Y+34	; 0x22
     8be:	68 1b       	sub	r22, r24
     8c0:	79 0b       	sbc	r23, r25
     8c2:	07 2e       	mov	r0, r23
     8c4:	00 0c       	add	r0, r0
     8c6:	88 0b       	sbc	r24, r24
     8c8:	99 0b       	sbc	r25, r25
     8ca:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     8ce:	4b 01       	movw	r8, r22
     8d0:	5c 01       	movw	r10, r24
     8d2:	09 a9       	ldd	r16, Y+49	; 0x31
     8d4:	1a a9       	ldd	r17, Y+50	; 0x32
     8d6:	ed a1       	ldd	r30, Y+37	; 0x25
     8d8:	fe a1       	ldd	r31, Y+38	; 0x26
     8da:	0e 1b       	sub	r16, r30
     8dc:	1f 0b       	sbc	r17, r31
     8de:	9b 01       	movw	r18, r22
     8e0:	ac 01       	movw	r20, r24
     8e2:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     8e6:	69 a3       	std	Y+33, r22	; 0x21
     8e8:	7a a3       	std	Y+34, r23	; 0x22
     8ea:	8b a3       	std	Y+35, r24	; 0x23
     8ec:	9c a3       	std	Y+36, r25	; 0x24
     8ee:	00 9f       	mul	r16, r16
     8f0:	60 01       	movw	r12, r0
     8f2:	01 9f       	mul	r16, r17
     8f4:	d0 0c       	add	r13, r0
     8f6:	d0 0c       	add	r13, r0
     8f8:	11 24       	eor	r1, r1
     8fa:	0d 2c       	mov	r0, r13
     8fc:	00 0c       	add	r0, r0
     8fe:	ee 08       	sbc	r14, r14
     900:	ff 08       	sbc	r15, r15
     902:	a5 01       	movw	r20, r10
     904:	94 01       	movw	r18, r8
     906:	c5 01       	movw	r24, r10
     908:	b4 01       	movw	r22, r8
     90a:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     90e:	4b 01       	movw	r8, r22
     910:	5c 01       	movw	r10, r24
     912:	c7 01       	movw	r24, r14
     914:	b6 01       	movw	r22, r12
     916:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	c5 01       	movw	r24, r10
     920:	b4 01       	movw	r22, r8
     922:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
     926:	0e 94 4b 1b 	call	0x3696	; 0x3696 <sqrt>
     92a:	4b 01       	movw	r8, r22
     92c:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     92e:	6d a5       	ldd	r22, Y+45	; 0x2d
     930:	7e a5       	ldd	r23, Y+46	; 0x2e
     932:	29 a5       	ldd	r18, Y+41	; 0x29
     934:	3a a5       	ldd	r19, Y+42	; 0x2a
     936:	62 1b       	sub	r22, r18
     938:	73 0b       	sbc	r23, r19
     93a:	07 2e       	mov	r0, r23
     93c:	00 0c       	add	r0, r0
     93e:	88 0b       	sbc	r24, r24
     940:	99 0b       	sbc	r25, r25
     942:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     946:	69 a3       	std	Y+33, r22	; 0x21
     948:	7a a3       	std	Y+34, r23	; 0x22
     94a:	8b a3       	std	Y+35, r24	; 0x23
     94c:	9c a3       	std	Y+36, r25	; 0x24
     94e:	09 a9       	ldd	r16, Y+49	; 0x31
     950:	1a a9       	ldd	r17, Y+50	; 0x32
     952:	06 19       	sub	r16, r6
     954:	17 09       	sbc	r17, r7
     956:	9b 01       	movw	r18, r22
     958:	ac 01       	movw	r20, r24
     95a:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     95e:	6d a3       	std	Y+37, r22	; 0x25
     960:	7e a3       	std	Y+38, r23	; 0x26
     962:	8f a3       	std	Y+39, r24	; 0x27
     964:	98 a7       	std	Y+40, r25	; 0x28
     966:	00 9f       	mul	r16, r16
     968:	60 01       	movw	r12, r0
     96a:	01 9f       	mul	r16, r17
     96c:	d0 0c       	add	r13, r0
     96e:	d0 0c       	add	r13, r0
     970:	11 24       	eor	r1, r1
     972:	0d 2c       	mov	r0, r13
     974:	00 0c       	add	r0, r0
     976:	ee 08       	sbc	r14, r14
     978:	ff 08       	sbc	r15, r15
     97a:	29 a1       	ldd	r18, Y+33	; 0x21
     97c:	3a a1       	ldd	r19, Y+34	; 0x22
     97e:	4b a1       	ldd	r20, Y+35	; 0x23
     980:	5c a1       	ldd	r21, Y+36	; 0x24
     982:	ca 01       	movw	r24, r20
     984:	b9 01       	movw	r22, r18
     986:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     98a:	69 a3       	std	Y+33, r22	; 0x21
     98c:	7a a3       	std	Y+34, r23	; 0x22
     98e:	8b a3       	std	Y+35, r24	; 0x23
     990:	9c a3       	std	Y+36, r25	; 0x24
     992:	c7 01       	movw	r24, r14
     994:	b6 01       	movw	r22, r12
     996:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	69 a1       	ldd	r22, Y+33	; 0x21
     9a0:	7a a1       	ldd	r23, Y+34	; 0x22
     9a2:	8b a1       	ldd	r24, Y+35	; 0x23
     9a4:	9c a1       	ldd	r25, Y+36	; 0x24
     9a6:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
     9aa:	0e 94 4b 1b 	call	0x3696	; 0x3696 <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     9ae:	2b ad       	ldd	r18, Y+59	; 0x3b
     9b0:	3c ad       	ldd	r19, Y+60	; 0x3c
     9b2:	4d ad       	ldd	r20, Y+61	; 0x3d
     9b4:	5e ad       	ldd	r21, Y+62	; 0x3e
     9b6:	29 83       	std	Y+1, r18	; 0x01
     9b8:	3a 83       	std	Y+2, r19	; 0x02
     9ba:	4b 83       	std	Y+3, r20	; 0x03
     9bc:	5c 83       	std	Y+4, r21	; 0x04
     9be:	23 96       	adiw	r28, 0x03	; 3
     9c0:	2c ad       	ldd	r18, Y+60	; 0x3c
     9c2:	3d ad       	ldd	r19, Y+61	; 0x3d
     9c4:	4e ad       	ldd	r20, Y+62	; 0x3e
     9c6:	5f ad       	ldd	r21, Y+63	; 0x3f
     9c8:	23 97       	sbiw	r28, 0x03	; 3
     9ca:	2d 83       	std	Y+5, r18	; 0x05
     9cc:	3e 83       	std	Y+6, r19	; 0x06
     9ce:	4f 83       	std	Y+7, r20	; 0x07
     9d0:	58 87       	std	Y+8, r21	; 0x08
     9d2:	2b a9       	ldd	r18, Y+51	; 0x33
     9d4:	3c a9       	ldd	r19, Y+52	; 0x34
     9d6:	4d a9       	ldd	r20, Y+53	; 0x35
     9d8:	5e a9       	ldd	r21, Y+54	; 0x36
     9da:	29 87       	std	Y+9, r18	; 0x09
     9dc:	3a 87       	std	Y+10, r19	; 0x0a
     9de:	4b 87       	std	Y+11, r20	; 0x0b
     9e0:	5c 87       	std	Y+12, r21	; 0x0c
     9e2:	2f a9       	ldd	r18, Y+55	; 0x37
     9e4:	38 ad       	ldd	r19, Y+56	; 0x38
     9e6:	49 ad       	ldd	r20, Y+57	; 0x39
     9e8:	5a ad       	ldd	r21, Y+58	; 0x3a
     9ea:	2d 87       	std	Y+13, r18	; 0x0d
     9ec:	3e 87       	std	Y+14, r19	; 0x0e
     9ee:	4f 87       	std	Y+15, r20	; 0x0f
     9f0:	58 8b       	std	Y+16, r21	; 0x10
     9f2:	89 8a       	std	Y+17, r8	; 0x11
     9f4:	9a 8a       	std	Y+18, r9	; 0x12
     9f6:	ab 8a       	std	Y+19, r10	; 0x13
     9f8:	bc 8a       	std	Y+20, r11	; 0x14
     9fa:	6d 8b       	std	Y+21, r22	; 0x15
     9fc:	7e 8b       	std	Y+22, r23	; 0x16
     9fe:	8f 8b       	std	Y+23, r24	; 0x17
     a00:	98 8f       	std	Y+24, r25	; 0x18
     a02:	ae 01       	movw	r20, r28
     a04:	4f 5f       	subi	r20, 0xFF	; 255
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
     a08:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     a0a:	00 e0       	ldi	r16, 0x00	; 0
     a0c:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     a0e:	61 2c       	mov	r6, r1
     a10:	71 2c       	mov	r7, r1
     a12:	c1 2c       	mov	r12, r1
     a14:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     a16:	21 2c       	mov	r2, r1
     a18:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     a1a:	f7 01       	movw	r30, r14
     a1c:	81 90       	ld	r8, Z+
     a1e:	91 90       	ld	r9, Z+
     a20:	a1 90       	ld	r10, Z+
     a22:	b1 90       	ld	r11, Z+
     a24:	7f 01       	movw	r14, r30
     a26:	26 2d       	mov	r18, r6
     a28:	37 2d       	mov	r19, r7
     a2a:	4c 2d       	mov	r20, r12
     a2c:	5d 2d       	mov	r21, r13
     a2e:	c5 01       	movw	r24, r10
     a30:	b4 01       	movw	r22, r8
     a32:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__gesf2>
     a36:	18 16       	cp	r1, r24
     a38:	34 f4       	brge	.+12     	; 0xa46 <fourPointCalc+0x3e8>
			indexMax = i;
			maxVal = distVect[i];
     a3a:	68 2c       	mov	r6, r8
     a3c:	79 2c       	mov	r7, r9
     a3e:	ca 2c       	mov	r12, r10
     a40:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     a42:	20 2e       	mov	r2, r16
     a44:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     a46:	0f 5f       	subi	r16, 0xFF	; 255
     a48:	1f 4f       	sbci	r17, 0xFF	; 255
     a4a:	06 30       	cpi	r16, 0x06	; 6
     a4c:	11 05       	cpc	r17, r1
     a4e:	29 f7       	brne	.-54     	; 0xa1a <fourPointCalc+0x3bc>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLongRef; 
	pointsLongRef = distIndex(indexMax);
     a50:	82 2d       	mov	r24, r2
     a52:	93 2d       	mov	r25, r3
     a54:	0e 94 39 02 	call	0x472	; 0x472 <distIndex>
	
	int pointsLong[2] = {(pointsLongRef[0]), (pointsLongRef[1])};
     a58:	fc 01       	movw	r30, r24
     a5a:	e0 80       	ld	r14, Z
     a5c:	f1 80       	ldd	r15, Z+1	; 0x01
     a5e:	fa 8e       	std	Y+26, r15	; 0x1a
     a60:	e9 8e       	std	Y+25, r14	; 0x19
     a62:	02 81       	ldd	r16, Z+2	; 0x02
     a64:	13 81       	ldd	r17, Z+3	; 0x03
     a66:	1c 8f       	std	Y+28, r17	; 0x1c
     a68:	0b 8f       	std	Y+27, r16	; 0x1b
	
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     a6a:	ee 0c       	add	r14, r14
     a6c:	ff 1c       	adc	r15, r15
     a6e:	ee 0c       	add	r14, r14
     a70:	ff 1c       	adc	r15, r15
     a72:	e4 0c       	add	r14, r4
     a74:	f5 1c       	adc	r15, r5
     a76:	00 0f       	add	r16, r16
     a78:	11 1f       	adc	r17, r17
     a7a:	00 0f       	add	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	04 0d       	add	r16, r4
     a80:	15 1d       	adc	r17, r5
     a82:	f7 01       	movw	r30, r14
     a84:	60 81       	ld	r22, Z
     a86:	71 81       	ldd	r23, Z+1	; 0x01
     a88:	f8 01       	movw	r30, r16
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	68 0f       	add	r22, r24
     a90:	79 1f       	adc	r23, r25
     a92:	77 23       	and	r23, r23
     a94:	14 f4       	brge	.+4      	; 0xa9a <fourPointCalc+0x43c>
     a96:	6f 5f       	subi	r22, 0xFF	; 255
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	75 95       	asr	r23
     a9c:	67 95       	ror	r22
     a9e:	07 2e       	mov	r0, r23
     aa0:	00 0c       	add	r0, r0
     aa2:	88 0b       	sbc	r24, r24
     aa4:	99 0b       	sbc	r25, r25
     aa6:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     aaa:	4b 01       	movw	r8, r22
     aac:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     aae:	f7 01       	movw	r30, r14
     ab0:	62 81       	ldd	r22, Z+2	; 0x02
     ab2:	73 81       	ldd	r23, Z+3	; 0x03
     ab4:	f8 01       	movw	r30, r16
     ab6:	82 81       	ldd	r24, Z+2	; 0x02
     ab8:	93 81       	ldd	r25, Z+3	; 0x03
     aba:	68 0f       	add	r22, r24
     abc:	79 1f       	adc	r23, r25
     abe:	77 23       	and	r23, r23
     ac0:	14 f4       	brge	.+4      	; 0xac6 <fourPointCalc+0x468>
     ac2:	6f 5f       	subi	r22, 0xFF	; 255
     ac4:	7f 4f       	sbci	r23, 0xFF	; 255
     ac6:	75 95       	asr	r23
     ac8:	67 95       	ror	r22
     aca:	07 2e       	mov	r0, r23
     acc:	00 0c       	add	r0, r0
     ace:	88 0b       	sbc	r24, r24
     ad0:	99 0b       	sbc	r25, r25
     ad2:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     ad6:	69 a3       	std	Y+33, r22	; 0x21
     ad8:	7a a3       	std	Y+34, r23	; 0x22
     ada:	8b a3       	std	Y+35, r24	; 0x23
     adc:	9c a3       	std	Y+36, r25	; 0x24
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     ade:	9e 01       	movw	r18, r28
     ae0:	21 5e       	subi	r18, 0xE1	; 225
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	ae 01       	movw	r20, r28
     ae6:	43 5e       	subi	r20, 0xE3	; 227
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	be 01       	movw	r22, r28
     aec:	6f 5f       	subi	r22, 0xFF	; 255
     aee:	7f 4f       	sbci	r23, 0xFF	; 255
     af0:	ce 01       	movw	r24, r28
     af2:	49 96       	adiw	r24, 0x19	; 25
     af4:	0e 94 87 02 	call	0x50e	; 0x50e <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     af8:	0d 8d       	ldd	r16, Y+29	; 0x1d
     afa:	1e 8d       	ldd	r17, Y+30	; 0x1e
     afc:	00 0f       	add	r16, r16
     afe:	11 1f       	adc	r17, r17
     b00:	00 0f       	add	r16, r16
     b02:	11 1f       	adc	r17, r17
     b04:	04 0d       	add	r16, r4
     b06:	15 1d       	adc	r17, r5
     b08:	2f 8c       	ldd	r2, Y+31	; 0x1f
     b0a:	38 a0       	ldd	r3, Y+32	; 0x20
     b0c:	22 0c       	add	r2, r2
     b0e:	33 1c       	adc	r3, r3
     b10:	22 0c       	add	r2, r2
     b12:	33 1c       	adc	r3, r3
     b14:	24 0c       	add	r2, r4
     b16:	35 1c       	adc	r3, r5
     b18:	f8 01       	movw	r30, r16
     b1a:	60 81       	ld	r22, Z
     b1c:	71 81       	ldd	r23, Z+1	; 0x01
     b1e:	f1 01       	movw	r30, r2
     b20:	80 81       	ld	r24, Z
     b22:	91 81       	ldd	r25, Z+1	; 0x01
     b24:	68 1b       	sub	r22, r24
     b26:	79 0b       	sbc	r23, r25
     b28:	07 2e       	mov	r0, r23
     b2a:	00 0c       	add	r0, r0
     b2c:	88 0b       	sbc	r24, r24
     b2e:	99 0b       	sbc	r25, r25
     b30:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
     b34:	6b 01       	movw	r12, r22
     b36:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     b38:	f8 01       	movw	r30, r16
     b3a:	62 81       	ldd	r22, Z+2	; 0x02
     b3c:	73 81       	ldd	r23, Z+3	; 0x03
     b3e:	f1 01       	movw	r30, r2
     b40:	82 81       	ldd	r24, Z+2	; 0x02
     b42:	93 81       	ldd	r25, Z+3	; 0x03
     b44:	68 1b       	sub	r22, r24
     b46:	79 0b       	sbc	r23, r25
     b48:	07 2e       	mov	r0, r23
     b4a:	00 0c       	add	r0, r0
     b4c:	88 0b       	sbc	r24, r24
     b4e:	99 0b       	sbc	r25, r25
     b50:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     b54:	90 58       	subi	r25, 0x80	; 128
     b56:	a7 01       	movw	r20, r14
     b58:	96 01       	movw	r18, r12
     b5a:	0e 94 a1 18 	call	0x3142	; 0x3142 <atan2>
	theta += M_PI/2.0;
     b5e:	2b ed       	ldi	r18, 0xDB	; 219
     b60:	3f e0       	ldi	r19, 0x0F	; 15
     b62:	49 ec       	ldi	r20, 0xC9	; 201
     b64:	5f e3       	ldi	r21, 0x3F	; 63
     b66:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
     b6a:	6b 01       	movw	r12, r22
     b6c:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     b6e:	a5 01       	movw	r20, r10
     b70:	94 01       	movw	r18, r8
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	94 e4       	ldi	r25, 0x44	; 68
     b7a:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
     b7e:	4b 01       	movw	r8, r22
     b80:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     b82:	29 a1       	ldd	r18, Y+33	; 0x21
     b84:	3a a1       	ldd	r19, Y+34	; 0x22
     b86:	4b a1       	ldd	r20, Y+35	; 0x23
     b88:	5c a1       	ldd	r21, Y+36	; 0x24
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	8f eb       	ldi	r24, 0xBF	; 191
     b90:	93 e4       	ldi	r25, 0x43	; 67
     b92:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
     b96:	2b 01       	movw	r4, r22
     b98:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     b9a:	c7 01       	movw	r24, r14
     b9c:	b6 01       	movw	r22, r12
     b9e:	0e 94 3d 1b 	call	0x367a	; 0x367a <sin>
     ba2:	69 a3       	std	Y+33, r22	; 0x21
     ba4:	7a a3       	std	Y+34, r23	; 0x22
     ba6:	8b a3       	std	Y+35, r24	; 0x23
     ba8:	9c a3       	std	Y+36, r25	; 0x24
     baa:	c7 01       	movw	r24, r14
     bac:	b6 01       	movw	r22, r12
     bae:	0e 94 05 19 	call	0x320a	; 0x320a <cos>
     bb2:	6d a3       	std	Y+37, r22	; 0x25
     bb4:	7e a3       	std	Y+38, r23	; 0x26
     bb6:	8f a3       	std	Y+39, r24	; 0x27
     bb8:	98 a7       	std	Y+40, r25	; 0x28
     bba:	0a e6       	ldi	r16, 0x6A	; 106
     bbc:	11 e0       	ldi	r17, 0x01	; 1
     bbe:	29 a1       	ldd	r18, Y+33	; 0x21
     bc0:	3a a1       	ldd	r19, Y+34	; 0x22
     bc2:	4b a1       	ldd	r20, Y+35	; 0x23
     bc4:	5c a1       	ldd	r21, Y+36	; 0x24
     bc6:	c3 01       	movw	r24, r6
     bc8:	b2 01       	movw	r22, r4
     bca:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     bce:	69 a7       	std	Y+41, r22	; 0x29
     bd0:	7a a7       	std	Y+42, r23	; 0x2a
     bd2:	8b a7       	std	Y+43, r24	; 0x2b
     bd4:	9c a7       	std	Y+44, r25	; 0x2c
     bd6:	2d a1       	ldd	r18, Y+37	; 0x25
     bd8:	3e a1       	ldd	r19, Y+38	; 0x26
     bda:	4f a1       	ldd	r20, Y+39	; 0x27
     bdc:	58 a5       	ldd	r21, Y+40	; 0x28
     bde:	c5 01       	movw	r24, r10
     be0:	b4 01       	movw	r22, r8
     be2:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     be6:	9b 01       	movw	r18, r22
     be8:	ac 01       	movw	r20, r24
     bea:	69 a5       	ldd	r22, Y+41	; 0x29
     bec:	7a a5       	ldd	r23, Y+42	; 0x2a
     bee:	8b a5       	ldd	r24, Y+43	; 0x2b
     bf0:	9c a5       	ldd	r25, Y+44	; 0x2c
     bf2:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
     bf6:	f8 01       	movw	r30, r16
     bf8:	60 83       	st	Z, r22
     bfa:	71 83       	std	Z+1, r23	; 0x01
     bfc:	82 83       	std	Z+2, r24	; 0x02
     bfe:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     c00:	2d a1       	ldd	r18, Y+37	; 0x25
     c02:	3e a1       	ldd	r19, Y+38	; 0x26
     c04:	4f a1       	ldd	r20, Y+39	; 0x27
     c06:	58 a5       	ldd	r21, Y+40	; 0x28
     c08:	c3 01       	movw	r24, r6
     c0a:	b2 01       	movw	r22, r4
     c0c:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     c10:	2b 01       	movw	r4, r22
     c12:	3c 01       	movw	r6, r24
     c14:	29 a1       	ldd	r18, Y+33	; 0x21
     c16:	3a a1       	ldd	r19, Y+34	; 0x22
     c18:	4b a1       	ldd	r20, Y+35	; 0x23
     c1a:	5c a1       	ldd	r21, Y+36	; 0x24
     c1c:	c5 01       	movw	r24, r10
     c1e:	b4 01       	movw	r22, r8
     c20:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
     c24:	9b 01       	movw	r18, r22
     c26:	ac 01       	movw	r20, r24
     c28:	c3 01       	movw	r24, r6
     c2a:	b2 01       	movw	r22, r4
     c2c:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
     c30:	f8 01       	movw	r30, r16
     c32:	64 83       	std	Z+4, r22	; 0x04
     c34:	75 83       	std	Z+5, r23	; 0x05
     c36:	86 83       	std	Z+6, r24	; 0x06
     c38:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta;
     c3a:	f7 fa       	bst	r15, 7
     c3c:	f0 94       	com	r15
     c3e:	f7 f8       	bld	r15, 7
     c40:	f0 94       	com	r15
     c42:	c0 86       	std	Z+8, r12	; 0x08
     c44:	d1 86       	std	Z+9, r13	; 0x09
     c46:	e2 86       	std	Z+10, r14	; 0x0a
     c48:	f3 86       	std	Z+11, r15	; 0x0b
	
	return centerFour;
}
     c4a:	c8 01       	movw	r24, r16
     c4c:	ce 5b       	subi	r28, 0xBE	; 190
     c4e:	df 4f       	sbci	r29, 0xFF	; 255
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	bf 90       	pop	r11
     c6c:	af 90       	pop	r10
     c6e:	9f 90       	pop	r9
     c70:	8f 90       	pop	r8
     c72:	7f 90       	pop	r7
     c74:	6f 90       	pop	r6
     c76:	5f 90       	pop	r5
     c78:	4f 90       	pop	r4
     c7a:	3f 90       	pop	r3
     c7c:	2f 90       	pop	r2
     c7e:	08 95       	ret

00000c80 <localization_calc>:
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
     c80:	4f 92       	push	r4
     c82:	5f 92       	push	r5
     c84:	6f 92       	push	r6
     c86:	7f 92       	push	r7
     c88:	af 92       	push	r10
     c8a:	bf 92       	push	r11
     c8c:	cf 92       	push	r12
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	68 97       	sbiw	r28, 0x18	; 24
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     cae:	0d b7       	in	r16, 0x3d	; 61
     cb0:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     cb2:	80 81       	ld	r24, Z
     cb4:	91 81       	ldd	r25, Z+1	; 0x01
     cb6:	9a 83       	std	Y+2, r25	; 0x02
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	80 85       	ldd	r24, Z+8	; 0x08
     cbc:	91 85       	ldd	r25, Z+9	; 0x09
     cbe:	9c 83       	std	Y+4, r25	; 0x04
     cc0:	8b 83       	std	Y+3, r24	; 0x03
     cc2:	82 81       	ldd	r24, Z+2	; 0x02
     cc4:	93 81       	ldd	r25, Z+3	; 0x03
     cc6:	9e 83       	std	Y+6, r25	; 0x06
     cc8:	8d 83       	std	Y+5, r24	; 0x05
     cca:	82 85       	ldd	r24, Z+10	; 0x0a
     ccc:	93 85       	ldd	r25, Z+11	; 0x0b
     cce:	98 87       	std	Y+8, r25	; 0x08
     cd0:	8f 83       	std	Y+7, r24	; 0x07
     cd2:	84 81       	ldd	r24, Z+4	; 0x04
     cd4:	95 81       	ldd	r25, Z+5	; 0x05
     cd6:	9a 87       	std	Y+10, r25	; 0x0a
     cd8:	89 87       	std	Y+9, r24	; 0x09
     cda:	84 85       	ldd	r24, Z+12	; 0x0c
     cdc:	95 85       	ldd	r25, Z+13	; 0x0d
     cde:	9c 87       	std	Y+12, r25	; 0x0c
     ce0:	8b 87       	std	Y+11, r24	; 0x0b
     ce2:	86 81       	ldd	r24, Z+6	; 0x06
     ce4:	97 81       	ldd	r25, Z+7	; 0x07
     ce6:	9e 87       	std	Y+14, r25	; 0x0e
     ce8:	8d 87       	std	Y+13, r24	; 0x0d
     cea:	86 85       	ldd	r24, Z+14	; 0x0e
     cec:	97 85       	ldd	r25, Z+15	; 0x0f
     cee:	98 8b       	std	Y+16, r25	; 0x10
     cf0:	8f 87       	std	Y+15, r24	; 0x0f
		{rawStarData[3], rawStarData[7]}
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     cf2:	fe 01       	movw	r30, r28
     cf4:	71 96       	adiw	r30, 0x11	; 17
     cf6:	88 e0       	ldi	r24, 0x08	; 8
     cf8:	df 01       	movw	r26, r30
     cfa:	1d 92       	st	X+, r1
     cfc:	8a 95       	dec	r24
     cfe:	e9 f7       	brne	.-6      	; 0xcfa <localization_calc+0x7a>
     d00:	70 97       	sbiw	r30, 0x10	; 16
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     d0a:	40 81       	ld	r20, Z
     d0c:	51 81       	ldd	r21, Z+1	; 0x01
     d0e:	4f 3f       	cpi	r20, 0xFF	; 255
     d10:	53 40       	sbci	r21, 0x03	; 3
     d12:	71 f0       	breq	.+28     	; 0xd30 <localization_calc+0xb0>
			pointIndices[numPoints] = i;
     d14:	dc 01       	movw	r26, r24
     d16:	aa 0f       	add	r26, r26
     d18:	bb 1f       	adc	r27, r27
     d1a:	41 e0       	ldi	r20, 0x01	; 1
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	4c 0f       	add	r20, r28
     d20:	5d 1f       	adc	r21, r29
     d22:	a4 0f       	add	r26, r20
     d24:	b5 1f       	adc	r27, r21
     d26:	51 96       	adiw	r26, 0x11	; 17
     d28:	3c 93       	st	X, r19
     d2a:	2e 93       	st	-X, r18
     d2c:	50 97       	sbiw	r26, 0x10	; 16
			numPoints++;
     d2e:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     d30:	2f 5f       	subi	r18, 0xFF	; 255
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	34 96       	adiw	r30, 0x04	; 4
     d36:	24 30       	cpi	r18, 0x04	; 4
     d38:	31 05       	cpc	r19, r1
     d3a:	39 f7       	brne	.-50     	; 0xd0a <localization_calc+0x8a>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	09 f4       	brne	.+2      	; 0xd42 <localization_calc+0xc2>
     d40:	89 c0       	rjmp	.+274    	; 0xe54 <localization_calc+0x1d4>
     d42:	ed b6       	in	r14, 0x3d	; 61
     d44:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     d46:	6c 01       	movw	r12, r24
     d48:	cc 0c       	add	r12, r12
     d4a:	dd 1c       	adc	r13, r13
     d4c:	cc 0c       	add	r12, r12
     d4e:	dd 1c       	adc	r13, r13
     d50:	ad b7       	in	r26, 0x3d	; 61
     d52:	be b7       	in	r27, 0x3e	; 62
     d54:	ac 19       	sub	r26, r12
     d56:	bd 09       	sbc	r27, r13
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	be bf       	out	0x3e, r27	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	ad bf       	out	0x3d, r26	; 61
     d62:	ed b7       	in	r30, 0x3d	; 61
     d64:	fe b7       	in	r31, 0x3e	; 62
     d66:	31 96       	adiw	r30, 0x01	; 1
     d68:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     d6a:	18 16       	cp	r1, r24
     d6c:	19 06       	cpc	r1, r25
     d6e:	24 f5       	brge	.+72     	; 0xdb8 <localization_calc+0x138>
     d70:	9e 01       	movw	r18, r28
     d72:	2f 5e       	subi	r18, 0xEF	; 239
     d74:	3f 4f       	sbci	r19, 0xFF	; 255
     d76:	df 01       	movw	r26, r30
     d78:	ce 0e       	add	r12, r30
     d7a:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     d7c:	f9 01       	movw	r30, r18
     d7e:	41 91       	ld	r20, Z+
     d80:	51 91       	ld	r21, Z+
     d82:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     d84:	fa 01       	movw	r30, r20
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	4c 0f       	add	r20, r28
     d94:	5d 1f       	adc	r21, r29
     d96:	e4 0f       	add	r30, r20
     d98:	f5 1f       	adc	r31, r21
     d9a:	40 81       	ld	r20, Z
     d9c:	51 81       	ldd	r21, Z+1	; 0x01
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	5c 93       	st	X, r21
     da2:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     da4:	42 81       	ldd	r20, Z+2	; 0x02
     da6:	53 81       	ldd	r21, Z+3	; 0x03
     da8:	13 96       	adiw	r26, 0x03	; 3
     daa:	5c 93       	st	X, r21
     dac:	4e 93       	st	-X, r20
     dae:	12 97       	sbiw	r26, 0x02	; 2
     db0:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     db2:	ac 15       	cp	r26, r12
     db4:	bd 05       	cpc	r27, r13
     db6:	11 f7       	brne	.-60     	; 0xd7c <localization_calc+0xfc>
			points[i][1] = pvect[index][1];
		}
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     db8:	db 01       	movw	r26, r22
     dba:	4d 90       	ld	r4, X+
     dbc:	5d 90       	ld	r5, X+
     dbe:	6d 90       	ld	r6, X+
     dc0:	7c 90       	ld	r7, X
     dc2:	13 97       	sbiw	r26, 0x03	; 3
     dc4:	e2 e8       	ldi	r30, 0x82	; 130
     dc6:	f1 e0       	ldi	r31, 0x01	; 1
     dc8:	40 82       	st	Z, r4
     dca:	51 82       	std	Z+1, r5	; 0x01
     dcc:	62 82       	std	Z+2, r6	; 0x02
     dce:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     dd0:	14 96       	adiw	r26, 0x04	; 4
     dd2:	4d 90       	ld	r4, X+
     dd4:	5d 90       	ld	r5, X+
     dd6:	6d 90       	ld	r6, X+
     dd8:	7c 90       	ld	r7, X
     dda:	17 97       	sbiw	r26, 0x07	; 7
     ddc:	44 82       	std	Z+4, r4	; 0x04
     dde:	55 82       	std	Z+5, r5	; 0x05
     de0:	66 82       	std	Z+6, r6	; 0x06
     de2:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     de4:	18 96       	adiw	r26, 0x08	; 8
     de6:	4d 91       	ld	r20, X+
     de8:	5d 91       	ld	r21, X+
     dea:	6d 91       	ld	r22, X+
     dec:	7c 91       	ld	r23, X
     dee:	1b 97       	sbiw	r26, 0x0b	; 11
     df0:	40 87       	std	Z+8, r20	; 0x08
     df2:	51 87       	std	Z+9, r21	; 0x09
     df4:	62 87       	std	Z+10, r22	; 0x0a
     df6:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     df8:	04 97       	sbiw	r24, 0x04	; 4
     dfa:	29 f4       	brne	.+10     	; 0xe06 <localization_calc+0x186>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     dfc:	c5 01       	movw	r24, r10
     dfe:	0e 94 2f 03 	call	0x65e	; 0x65e <fourPointCalc>
     e02:	dc 01       	movw	r26, r24
				break;
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <localization_calc+0x18a>
				
			case 3 : 
				//calcPointer = threePointCalc(points);
				calcPointer = &rc[0];
     e06:	a2 e8       	ldi	r26, 0x82	; 130
     e08:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				calcPointer = &rc[0];
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     e0a:	4d 91       	ld	r20, X+
     e0c:	5d 91       	ld	r21, X+
     e0e:	6d 91       	ld	r22, X+
     e10:	7c 91       	ld	r23, X
     e12:	13 97       	sbiw	r26, 0x03	; 3
     e14:	e6 e7       	ldi	r30, 0x76	; 118
     e16:	f1 e0       	ldi	r31, 0x01	; 1
     e18:	40 83       	st	Z, r20
     e1a:	51 83       	std	Z+1, r21	; 0x01
     e1c:	62 83       	std	Z+2, r22	; 0x02
     e1e:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     e20:	14 96       	adiw	r26, 0x04	; 4
     e22:	4d 91       	ld	r20, X+
     e24:	5d 91       	ld	r21, X+
     e26:	6d 91       	ld	r22, X+
     e28:	7c 91       	ld	r23, X
     e2a:	17 97       	sbiw	r26, 0x07	; 7
     e2c:	44 83       	std	Z+4, r20	; 0x04
     e2e:	55 83       	std	Z+5, r21	; 0x05
     e30:	66 83       	std	Z+6, r22	; 0x06
     e32:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     e34:	18 96       	adiw	r26, 0x08	; 8
     e36:	8d 91       	ld	r24, X+
     e38:	9d 91       	ld	r25, X+
     e3a:	0d 90       	ld	r0, X+
     e3c:	bc 91       	ld	r27, X
     e3e:	a0 2d       	mov	r26, r0
     e40:	80 87       	std	Z+8, r24	; 0x08
     e42:	91 87       	std	Z+9, r25	; 0x09
     e44:	a2 87       	std	Z+10, r26	; 0x0a
     e46:	b3 87       	std	Z+11, r27	; 0x0b
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	fe be       	out	0x3e, r15	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	ed be       	out	0x3d, r14	; 61
     e52:	20 c0       	rjmp	.+64     	; 0xe94 <localization_calc+0x214>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     e54:	fb 01       	movw	r30, r22
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	a2 81       	ldd	r26, Z+2	; 0x02
     e5c:	b3 81       	ldd	r27, Z+3	; 0x03
     e5e:	e6 e7       	ldi	r30, 0x76	; 118
     e60:	f1 e0       	ldi	r31, 0x01	; 1
     e62:	80 83       	st	Z, r24
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	a2 83       	std	Z+2, r26	; 0x02
     e68:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     e6a:	db 01       	movw	r26, r22
     e6c:	14 96       	adiw	r26, 0x04	; 4
     e6e:	cd 90       	ld	r12, X+
     e70:	dd 90       	ld	r13, X+
     e72:	ed 90       	ld	r14, X+
     e74:	fc 90       	ld	r15, X
     e76:	17 97       	sbiw	r26, 0x07	; 7
     e78:	c4 82       	std	Z+4, r12	; 0x04
     e7a:	d5 82       	std	Z+5, r13	; 0x05
     e7c:	e6 82       	std	Z+6, r14	; 0x06
     e7e:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];	
     e80:	18 96       	adiw	r26, 0x08	; 8
     e82:	4d 91       	ld	r20, X+
     e84:	5d 91       	ld	r21, X+
     e86:	6d 91       	ld	r22, X+
     e88:	7c 91       	ld	r23, X
     e8a:	1b 97       	sbiw	r26, 0x0b	; 11
     e8c:	40 87       	std	Z+8, r20	; 0x08
     e8e:	51 87       	std	Z+9, r21	; 0x09
     e90:	62 87       	std	Z+10, r22	; 0x0a
     e92:	73 87       	std	Z+11, r23	; 0x0b
	
	return robotCenter;
	
	
	
}
     e94:	86 e7       	ldi	r24, 0x76	; 118
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	1e bf       	out	0x3e, r17	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0d bf       	out	0x3d, r16	; 61
     ea2:	68 96       	adiw	r28, 0x18	; 24
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	bf 90       	pop	r11
     ec0:	af 90       	pop	r10
     ec2:	7f 90       	pop	r7
     ec4:	6f 90       	pop	r6
     ec6:	5f 90       	pop	r5
     ec8:	4f 90       	pop	r4
     eca:	08 95       	ret

00000ecc <motor_update>:
Initialization of Subsystem Components
************************************************************/

/* Called On Timer 3 Rollover */
void motor_update(void)
{
     ecc:	af 92       	push	r10
     ece:	bf 92       	push	r11
     ed0:	cf 92       	push	r12
     ed2:	df 92       	push	r13
     ed4:	ef 92       	push	r14
     ed6:	ff 92       	push	r15
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
	set(TIFR3,OCF3A);		// Reset flag
     edc:	c1 9a       	sbi	0x18, 1	; 24
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd); // Update control
     ede:	a0 90 18 01 	lds	r10, 0x0118
     ee2:	b0 90 19 01 	lds	r11, 0x0119
     ee6:	c0 90 1a 01 	lds	r12, 0x011A
     eea:	d0 90 1b 01 	lds	r13, 0x011B
     eee:	e0 90 1c 01 	lds	r14, 0x011C
     ef2:	f0 90 1d 01 	lds	r15, 0x011D
     ef6:	00 91 1e 01 	lds	r16, 0x011E
     efa:	10 91 1f 01 	lds	r17, 0x011F
     efe:	20 91 c0 01 	lds	r18, 0x01C0
     f02:	30 91 c1 01 	lds	r19, 0x01C1
     f06:	40 91 c2 01 	lds	r20, 0x01C2
     f0a:	50 91 c3 01 	lds	r21, 0x01C3
     f0e:	60 91 c4 01 	lds	r22, 0x01C4
     f12:	70 91 c5 01 	lds	r23, 0x01C5
     f16:	80 91 c6 01 	lds	r24, 0x01C6
     f1a:	90 91 c7 01 	lds	r25, 0x01C7
     f1e:	e0 91 0f 01 	lds	r30, 0x010F
     f22:	ef 93       	push	r30
     f24:	e0 91 0e 01 	lds	r30, 0x010E
     f28:	ef 93       	push	r30
     f2a:	e0 91 0d 01 	lds	r30, 0x010D
     f2e:	ef 93       	push	r30
     f30:	e0 91 0c 01 	lds	r30, 0x010C
     f34:	ef 93       	push	r30
     f36:	e0 91 13 01 	lds	r30, 0x0113
     f3a:	ef 93       	push	r30
     f3c:	e0 91 12 01 	lds	r30, 0x0112
     f40:	ef 93       	push	r30
     f42:	e0 91 11 01 	lds	r30, 0x0111
     f46:	ef 93       	push	r30
     f48:	e0 91 10 01 	lds	r30, 0x0110
     f4c:	ef 93       	push	r30
     f4e:	e0 91 bf 01 	lds	r30, 0x01BF
     f52:	ef 93       	push	r30
     f54:	e0 91 be 01 	lds	r30, 0x01BE
     f58:	ef 93       	push	r30
     f5a:	e0 91 bd 01 	lds	r30, 0x01BD
     f5e:	ef 93       	push	r30
     f60:	e0 91 bc 01 	lds	r30, 0x01BC
     f64:	ef 93       	push	r30
     f66:	e0 91 17 01 	lds	r30, 0x0117
     f6a:	ef 93       	push	r30
     f6c:	e0 91 16 01 	lds	r30, 0x0116
     f70:	ef 93       	push	r30
     f72:	e0 91 15 01 	lds	r30, 0x0115
     f76:	ef 93       	push	r30
     f78:	e0 91 14 01 	lds	r30, 0x0114
     f7c:	ef 93       	push	r30
     f7e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <run_motor_control_loop>
     f82:	8d b7       	in	r24, 0x3d	; 61
     f84:	9e b7       	in	r25, 0x3e	; 62
     f86:	40 96       	adiw	r24, 0x10	; 16
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	9e bf       	out	0x3e, r25	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	8d bf       	out	0x3d, r24	; 61

}
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	ff 90       	pop	r15
     f98:	ef 90       	pop	r14
     f9a:	df 90       	pop	r13
     f9c:	cf 90       	pop	r12
     f9e:	bf 90       	pop	r11
     fa0:	af 90       	pop	r10
     fa2:	08 95       	ret

00000fa4 <adc_update>:
	}
}

/* Called on ADC Conversion Completion */
void adc_update(void)
{
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	28 97       	sbiw	r28, 0x08	; 8
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
	set(ADCSRA,ADIF);	 // Reset flag
     fb8:	ea e7       	ldi	r30, 0x7A	; 122
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	80 61       	ori	r24, 0x10	; 16
     fc0:	80 83       	st	Z, r24
	if(adc_switch()){
     fc2:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <adc_switch>
     fc6:	88 23       	and	r24, r24
     fc8:	f1 f1       	breq	.+124    	; 0x1046 <adc_update+0xa2>
		float puck_buffer[2];
		puck_dist = get_puck_location(puck_buffer);
     fca:	ce 01       	movw	r24, r28
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <get_puck_location>
     fd2:	ac 01       	movw	r20, r24
     fd4:	90 93 97 01 	sts	0x0197, r25
     fd8:	80 93 96 01 	sts	0x0196, r24
		x_puck = puck_buffer[0];
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	ab 81       	ldd	r26, Y+3	; 0x03
     fe2:	bc 81       	ldd	r27, Y+4	; 0x04
     fe4:	80 93 9c 01 	sts	0x019C, r24
     fe8:	90 93 9d 01 	sts	0x019D, r25
     fec:	a0 93 9e 01 	sts	0x019E, r26
     ff0:	b0 93 9f 01 	sts	0x019F, r27
		y_puck = puck_buffer[1];
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	af 81       	ldd	r26, Y+7	; 0x07
     ffa:	b8 85       	ldd	r27, Y+8	; 0x08
     ffc:	80 93 98 01 	sts	0x0198, r24
    1000:	90 93 99 01 	sts	0x0199, r25
    1004:	a0 93 9a 01 	sts	0x019A, r26
    1008:	b0 93 9b 01 	sts	0x019B, r27
		
		//Update other bots on status
		send_buffer[2] = team_puck_capture_buffer[self];
    100c:	80 91 c8 01 	lds	r24, 0x01C8
    1010:	90 91 c9 01 	lds	r25, 0x01C9
    1014:	fc 01       	movw	r30, r24
    1016:	ed 56       	subi	r30, 0x6D	; 109
    1018:	fe 4f       	sbci	r31, 0xFE	; 254
    101a:	20 81       	ld	r18, Z
    101c:	20 93 04 01 	sts	0x0104, r18
		send_buffer[3] = (char)(puck_dist/4);
    1020:	9a 01       	movw	r18, r20
    1022:	55 23       	and	r21, r21
    1024:	14 f4       	brge	.+4      	; 0x102a <adc_update+0x86>
    1026:	2d 5f       	subi	r18, 0xFD	; 253
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	35 95       	asr	r19
    102c:	27 95       	ror	r18
    102e:	35 95       	asr	r19
    1030:	27 95       	ror	r18
    1032:	20 93 05 01 	sts	0x0105, r18
		team_puck_dist_buffer[self] = (char)(puck_dist/4);
    1036:	fc 01       	movw	r30, r24
    1038:	e0 57       	subi	r30, 0x70	; 112
    103a:	fe 4f       	sbci	r31, 0xFE	; 254
    103c:	20 83       	st	Z, r18
		wireless_send(self,send_buffer);
    103e:	62 e0       	ldi	r22, 0x02	; 2
    1040:	71 e0       	ldi	r23, 0x01	; 1
    1042:	0e 94 f7 17 	call	0x2fee	; 0x2fee <wireless_send>
	}
}
    1046:	28 96       	adiw	r28, 0x08	; 8
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <play>:
void play(void)
{
	/* Light LED of defending goal */
	
	/* Play */
	set(TCCR1B,CS10);
    1058:	e1 e8       	ldi	r30, 0x81	; 129
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	81 60       	ori	r24, 0x01	; 1
    1060:	80 83       	st	Z, r24
	positioning_LED(goal);
    1062:	80 91 a2 01 	lds	r24, 0x01A2
    1066:	90 91 a3 01 	lds	r25, 0x01A3
    106a:	0e 94 28 02 	call	0x450	; 0x450 <positioning_LED>
    106e:	08 95       	ret

00001070 <pause>:
}

void pause(void)
{
	/* Stop within 3  seconds */
	clear(TCCR1B,CS10);
    1070:	e1 e8       	ldi	r30, 0x81	; 129
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8e 7f       	andi	r24, 0xFE	; 254
    1078:	80 83       	st	Z, r24
	clear(PORTB,0); // B0 Left motor off
    107a:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,2); // B2 Right motor off
    107c:	2a 98       	cbi	0x05, 2	; 5
	positioning_LED(OFF);
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 28 02 	call	0x450	; 0x450 <positioning_LED>
    1086:	08 95       	ret

00001088 <halftime>:
}

void halftime(void)
{
	/* Stop play */
	pause();
    1088:	0e 94 38 08 	call	0x1070	; 0x1070 <pause>
	
	/* Switch assigned goal */
	if (x_goal>0) {
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	a9 01       	movw	r20, r18
    1092:	60 91 a8 01 	lds	r22, 0x01A8
    1096:	70 91 a9 01 	lds	r23, 0x01A9
    109a:	80 91 aa 01 	lds	r24, 0x01AA
    109e:	90 91 ab 01 	lds	r25, 0x01AB
    10a2:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__gesf2>
    10a6:	18 16       	cp	r1, r24
    10a8:	9c f4       	brge	.+38     	; 0x10d0 <halftime+0x48>
		x_goal = -1*GOAL_X_DIST;
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a8 ec       	ldi	r26, 0xC8	; 200
    10b0:	b3 ec       	ldi	r27, 0xC3	; 195
    10b2:	80 93 a8 01 	sts	0x01A8, r24
    10b6:	90 93 a9 01 	sts	0x01A9, r25
    10ba:	a0 93 aa 01 	sts	0x01AA, r26
    10be:	b0 93 ab 01 	sts	0x01AB, r27
		goal = RED;
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	90 93 a3 01 	sts	0x01A3, r25
    10ca:	80 93 a2 01 	sts	0x01A2, r24
    10ce:	08 95       	ret
		} else {
		x_goal = GOAL_X_DIST;
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a8 ec       	ldi	r26, 0xC8	; 200
    10d6:	b3 e4       	ldi	r27, 0x43	; 67
    10d8:	80 93 a8 01 	sts	0x01A8, r24
    10dc:	90 93 a9 01 	sts	0x01A9, r25
    10e0:	a0 93 aa 01 	sts	0x01AA, r26
    10e4:	b0 93 ab 01 	sts	0x01AB, r27
		goal = BLUE;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	90 93 a3 01 	sts	0x01A3, r25
    10f0:	80 93 a2 01 	sts	0x01A2, r24
    10f4:	08 95       	ret

000010f6 <select_goal>:
	
	// Do a victory dance based on score?	
}

void select_goal(void) 
{
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	2c 97       	sbiw	r28, 0x0c	; 12
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
	goal_init = 1;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	90 93 a1 01 	sts	0x01A1, r25
    1112:	80 93 a0 01 	sts	0x01A0, r24
	/* Assign Defending goal */
	update_position();
    1116:	0e 94 b1 0c 	call	0x1962	; 0x1962 <update_position>
	
	float position_buffer[3];
	get_position(position_buffer);
    111a:	ce 01       	movw	r24, r28
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	0e 94 4a 0c 	call	0x1894	; 0x1894 <get_position>
	//m_usb_tx_int((int)position_buffer[0]);
	
	if (position_buffer[0]>0) {
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	a9 01       	movw	r20, r18
    1128:	69 81       	ldd	r22, Y+1	; 0x01
    112a:	7a 81       	ldd	r23, Y+2	; 0x02
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__gesf2>
    1134:	18 16       	cp	r1, r24
    1136:	9c f4       	brge	.+38     	; 0x115e <select_goal+0x68>
		x_goal = -1*GOAL_X_DIST;
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	a8 ec       	ldi	r26, 0xC8	; 200
    113e:	b3 ec       	ldi	r27, 0xC3	; 195
    1140:	80 93 a8 01 	sts	0x01A8, r24
    1144:	90 93 a9 01 	sts	0x01A9, r25
    1148:	a0 93 aa 01 	sts	0x01AA, r26
    114c:	b0 93 ab 01 	sts	0x01AB, r27
		goal = RED;
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	90 93 a3 01 	sts	0x01A3, r25
    1158:	80 93 a2 01 	sts	0x01A2, r24
    115c:	12 c0       	rjmp	.+36     	; 0x1182 <select_goal+0x8c>
		//positioning_LED(RED);
		} else {
		x_goal = GOAL_X_DIST;
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a8 ec       	ldi	r26, 0xC8	; 200
    1164:	b3 e4       	ldi	r27, 0x43	; 67
    1166:	80 93 a8 01 	sts	0x01A8, r24
    116a:	90 93 a9 01 	sts	0x01A9, r25
    116e:	a0 93 aa 01 	sts	0x01AA, r26
    1172:	b0 93 ab 01 	sts	0x01AB, r27
		goal = BLUE;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	90 93 a3 01 	sts	0x01A3, r25
    117e:	80 93 a2 01 	sts	0x01A2, r24
		//positioning_LED(BLUE);
	}
	
	goal_init = 1;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	90 93 a1 01 	sts	0x01A1, r25
    118a:	80 93 a0 01 	sts	0x01A0, r24
}
    118e:	2c 96       	adiw	r28, 0x0c	; 12
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <comm_test>:
	}
}

void comm_test(void)
{
	if (!goal_init){
    11a0:	80 91 a0 01 	lds	r24, 0x01A0
    11a4:	90 91 a1 01 	lds	r25, 0x01A1
    11a8:	89 2b       	or	r24, r25
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <comm_test+0x10>
		select_goal();
    11ac:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <select_goal>
	}
	/* Flash color of LED for defending goal */
	set(TCCR0B,CS02); //start timer 
    11b0:	85 b5       	in	r24, 0x25	; 37
    11b2:	84 60       	ori	r24, 0x04	; 4
    11b4:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS00);
    11b6:	85 b5       	in	r24, 0x25	; 37
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	85 bd       	out	0x25, r24	; 37
	positioning_LED(goal); //turn on LED 
    11bc:	80 91 a2 01 	lds	r24, 0x01A2
    11c0:	90 91 a3 01 	lds	r25, 0x01A3
    11c4:	0e 94 28 02 	call	0x450	; 0x450 <positioning_LED>
    11c8:	08 95       	ret

000011ca <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(buffer[0]){
    11ca:	e0 91 b2 01 	lds	r30, 0x01B2
    11ce:	8e 2f       	mov	r24, r30
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	fc 01       	movw	r30, r24
    11d4:	e0 5a       	subi	r30, 0xA0	; 160
    11d6:	f1 09       	sbc	r31, r1
    11d8:	ea 30       	cpi	r30, 0x0A	; 10
    11da:	f1 05       	cpc	r31, r1
    11dc:	b8 f5       	brcc	.+110    	; 0x124c <update_game_state+0x82>
    11de:	ea 5a       	subi	r30, 0xAA	; 170
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__tablejump2__>
		case 0xA0: // Comm Test
			comm_test();
    11e6:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <comm_test>
			break;
    11ea:	08 95       	ret
		case 0xA1: // Play
			play();
    11ec:	0e 94 2c 08 	call	0x1058	; 0x1058 <play>
			break;
    11f0:	08 95       	ret
		case 0xA2: // Goal R
			SR = buffer[1];
    11f2:	e2 eb       	ldi	r30, 0xB2	; 178
    11f4:	f1 e0       	ldi	r31, 0x01	; 1
    11f6:	81 81       	ldd	r24, Z+1	; 0x01
    11f8:	80 93 b1 01 	sts	0x01B1, r24
			SB = buffer[2];
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
    11fe:	80 93 b0 01 	sts	0x01B0, r24
			pause();
    1202:	0e 94 38 08 	call	0x1070	; 0x1070 <pause>
			break;
    1206:	08 95       	ret
		case 0xA3: // Goal B
			SR = buffer[1];
    1208:	e2 eb       	ldi	r30, 0xB2	; 178
    120a:	f1 e0       	ldi	r31, 0x01	; 1
    120c:	81 81       	ldd	r24, Z+1	; 0x01
    120e:	80 93 b1 01 	sts	0x01B1, r24
			SB = buffer[2];
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	80 93 b0 01 	sts	0x01B0, r24
			pause();
    1218:	0e 94 38 08 	call	0x1070	; 0x1070 <pause>
			break;
    121c:	08 95       	ret
		case 0xA4: // Pause
			pause();
    121e:	0e 94 38 08 	call	0x1070	; 0x1070 <pause>
			break;
    1222:	08 95       	ret
		case 0xA6: // Halftime
			halftime();
    1224:	0e 94 44 08 	call	0x1088	; 0x1088 <halftime>
			break;
    1228:	08 95       	ret
}

void game_over(void)
{
	// Stop play
	pause();
    122a:	0e 94 38 08 	call	0x1070	; 0x1070 <pause>
    122e:	08 95       	ret
			game_over();
			break;
		case 0xA8: // Enemy Positions
			break;
		case 0xA9: ;// Receiving comms from other bots
			int incoming_bot = buffer[1];
    1230:	e2 eb       	ldi	r30, 0xB2	; 178
    1232:	f1 e0       	ldi	r31, 0x01	; 1
    1234:	81 81       	ldd	r24, Z+1	; 0x01
    1236:	90 e0       	ldi	r25, 0x00	; 0
			team_puck_capture_buffer[incoming_bot] = buffer[2];
    1238:	dc 01       	movw	r26, r24
    123a:	ad 56       	subi	r26, 0x6D	; 109
    123c:	be 4f       	sbci	r27, 0xFE	; 254
    123e:	22 81       	ldd	r18, Z+2	; 0x02
    1240:	2c 93       	st	X, r18
			team_puck_dist_buffer[incoming_bot] = buffer[3];
    1242:	dc 01       	movw	r26, r24
    1244:	a0 57       	subi	r26, 0x70	; 112
    1246:	be 4f       	sbci	r27, 0xFE	; 254
    1248:	23 81       	ldd	r18, Z+3	; 0x03
    124a:	2c 93       	st	X, r18
    124c:	08 95       	ret

0000124e <attack_action>:
	
	goal_init = 1;
}

void attack_action(){
	if (has_puck())
    124e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <has_puck>
    1252:	88 23       	and	r24, r24
    1254:	09 f4       	brne	.+2      	; 0x1258 <attack_action+0xa>
    1256:	73 c0       	rjmp	.+230    	; 0x133e <attack_action+0xf0>
	{
		team_puck_capture_buffer[self] = 1;
    1258:	e0 91 c8 01 	lds	r30, 0x01C8
    125c:	f0 91 c9 01 	lds	r31, 0x01C9
    1260:	ed 56       	subi	r30, 0x6D	; 109
    1262:	fe 4f       	sbci	r31, 0xFE	; 254
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	80 83       	st	Z, r24
		x_target = x_goal;
    1268:	80 91 a8 01 	lds	r24, 0x01A8
    126c:	90 91 a9 01 	lds	r25, 0x01A9
    1270:	a0 91 aa 01 	lds	r26, 0x01AA
    1274:	b0 91 ab 01 	lds	r27, 0x01AB
    1278:	80 93 c4 01 	sts	0x01C4, r24
    127c:	90 93 c5 01 	sts	0x01C5, r25
    1280:	a0 93 c6 01 	sts	0x01C6, r26
    1284:	b0 93 c7 01 	sts	0x01C7, r27
		y_target = y_goal;
    1288:	80 91 a4 01 	lds	r24, 0x01A4
    128c:	90 91 a5 01 	lds	r25, 0x01A5
    1290:	a0 91 a6 01 	lds	r26, 0x01A6
    1294:	b0 91 a7 01 	lds	r27, 0x01A7
    1298:	80 93 c0 01 	sts	0x01C0, r24
    129c:	90 93 c1 01 	sts	0x01C1, r25
    12a0:	a0 93 c2 01 	sts	0x01C2, r26
    12a4:	b0 93 c3 01 	sts	0x01C3, r27
		max_theta = M_PI/2;
    12a8:	8b ed       	ldi	r24, 0xDB	; 219
    12aa:	9f e0       	ldi	r25, 0x0F	; 15
    12ac:	a9 ec       	ldi	r26, 0xC9	; 201
    12ae:	bf e3       	ldi	r27, 0x3F	; 63
    12b0:	80 93 18 01 	sts	0x0118, r24
    12b4:	90 93 19 01 	sts	0x0119, r25
    12b8:	a0 93 1a 01 	sts	0x011A, r26
    12bc:	b0 93 1b 01 	sts	0x011B, r27
		theta_kd = 0.05;
    12c0:	8d ec       	ldi	r24, 0xCD	; 205
    12c2:	9c ec       	ldi	r25, 0xCC	; 204
    12c4:	ac e4       	ldi	r26, 0x4C	; 76
    12c6:	bd e3       	ldi	r27, 0x3D	; 61
    12c8:	80 93 bc 01 	sts	0x01BC, r24
    12cc:	90 93 bd 01 	sts	0x01BD, r25
    12d0:	a0 93 be 01 	sts	0x01BE, r26
    12d4:	b0 93 bf 01 	sts	0x01BF, r27
		theta_kp = 1.2;
    12d8:	8a e9       	ldi	r24, 0x9A	; 154
    12da:	99 e9       	ldi	r25, 0x99	; 153
    12dc:	a9 e9       	ldi	r26, 0x99	; 153
    12de:	bf e3       	ldi	r27, 0x3F	; 63
    12e0:	80 93 14 01 	sts	0x0114, r24
    12e4:	90 93 15 01 	sts	0x0115, r25
    12e8:	a0 93 16 01 	sts	0x0116, r26
    12ec:	b0 93 17 01 	sts	0x0117, r27
		linear_kd = 0.01;
    12f0:	8a e0       	ldi	r24, 0x0A	; 10
    12f2:	97 ed       	ldi	r25, 0xD7	; 215
    12f4:	a3 e2       	ldi	r26, 0x23	; 35
    12f6:	bc e3       	ldi	r27, 0x3C	; 60
    12f8:	80 93 0c 01 	sts	0x010C, r24
    12fc:	90 93 0d 01 	sts	0x010D, r25
    1300:	a0 93 0e 01 	sts	0x010E, r26
    1304:	b0 93 0f 01 	sts	0x010F, r27
		linear_kp = 0.2;
    1308:	8d ec       	ldi	r24, 0xCD	; 205
    130a:	9c ec       	ldi	r25, 0xCC	; 204
    130c:	ac e4       	ldi	r26, 0x4C	; 76
    130e:	be e3       	ldi	r27, 0x3E	; 62
    1310:	80 93 10 01 	sts	0x0110, r24
    1314:	90 93 11 01 	sts	0x0111, r25
    1318:	a0 93 12 01 	sts	0x0112, r26
    131c:	b0 93 13 01 	sts	0x0113, r27
		max_duty_cycle = DUTY_CYCLE_PUCK;
    1320:	8d ec       	ldi	r24, 0xCD	; 205
    1322:	9c ec       	ldi	r25, 0xCC	; 204
    1324:	ac ec       	ldi	r26, 0xCC	; 204
    1326:	be e3       	ldi	r27, 0x3E	; 62
    1328:	80 93 1c 01 	sts	0x011C, r24
    132c:	90 93 1d 01 	sts	0x011D, r25
    1330:	a0 93 1e 01 	sts	0x011E, r26
    1334:	b0 93 1f 01 	sts	0x011F, r27
		m_green(OFF);
    1338:	6a 9a       	sbi	0x0d, 2	; 13
    133a:	72 9a       	sbi	0x0e, 2	; 14
    133c:	08 95       	ret
		return;
	
	}

	if (!has_puck())
    133e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <has_puck>
    1342:	81 11       	cpse	r24, r1
    1344:	6d c0       	rjmp	.+218    	; 0x1420 <attack_action+0x1d2>
	{
		team_puck_capture_buffer[self] = 0;
    1346:	e0 91 c8 01 	lds	r30, 0x01C8
    134a:	f0 91 c9 01 	lds	r31, 0x01C9
    134e:	ed 56       	subi	r30, 0x6D	; 109
    1350:	fe 4f       	sbci	r31, 0xFE	; 254
    1352:	10 82       	st	Z, r1
		x_target = x_puck;
    1354:	80 91 9c 01 	lds	r24, 0x019C
    1358:	90 91 9d 01 	lds	r25, 0x019D
    135c:	a0 91 9e 01 	lds	r26, 0x019E
    1360:	b0 91 9f 01 	lds	r27, 0x019F
    1364:	80 93 c4 01 	sts	0x01C4, r24
    1368:	90 93 c5 01 	sts	0x01C5, r25
    136c:	a0 93 c6 01 	sts	0x01C6, r26
    1370:	b0 93 c7 01 	sts	0x01C7, r27
		y_target = y_puck;
    1374:	80 91 98 01 	lds	r24, 0x0198
    1378:	90 91 99 01 	lds	r25, 0x0199
    137c:	a0 91 9a 01 	lds	r26, 0x019A
    1380:	b0 91 9b 01 	lds	r27, 0x019B
    1384:	80 93 c0 01 	sts	0x01C0, r24
    1388:	90 93 c1 01 	sts	0x01C1, r25
    138c:	a0 93 c2 01 	sts	0x01C2, r26
    1390:	b0 93 c3 01 	sts	0x01C3, r27
		max_theta = M_PI;
    1394:	8b ed       	ldi	r24, 0xDB	; 219
    1396:	9f e0       	ldi	r25, 0x0F	; 15
    1398:	a9 e4       	ldi	r26, 0x49	; 73
    139a:	b0 e4       	ldi	r27, 0x40	; 64
    139c:	80 93 18 01 	sts	0x0118, r24
    13a0:	90 93 19 01 	sts	0x0119, r25
    13a4:	a0 93 1a 01 	sts	0x011A, r26
    13a8:	b0 93 1b 01 	sts	0x011B, r27
		theta_kd = 0;
    13ac:	10 92 bc 01 	sts	0x01BC, r1
    13b0:	10 92 bd 01 	sts	0x01BD, r1
    13b4:	10 92 be 01 	sts	0x01BE, r1
    13b8:	10 92 bf 01 	sts	0x01BF, r1
		theta_kp = 1.8;
    13bc:	86 e6       	ldi	r24, 0x66	; 102
    13be:	96 e6       	ldi	r25, 0x66	; 102
    13c0:	a6 ee       	ldi	r26, 0xE6	; 230
    13c2:	bf e3       	ldi	r27, 0x3F	; 63
    13c4:	80 93 14 01 	sts	0x0114, r24
    13c8:	90 93 15 01 	sts	0x0115, r25
    13cc:	a0 93 16 01 	sts	0x0116, r26
    13d0:	b0 93 17 01 	sts	0x0117, r27
		linear_kd = 0.01;
    13d4:	8a e0       	ldi	r24, 0x0A	; 10
    13d6:	97 ed       	ldi	r25, 0xD7	; 215
    13d8:	a3 e2       	ldi	r26, 0x23	; 35
    13da:	bc e3       	ldi	r27, 0x3C	; 60
    13dc:	80 93 0c 01 	sts	0x010C, r24
    13e0:	90 93 0d 01 	sts	0x010D, r25
    13e4:	a0 93 0e 01 	sts	0x010E, r26
    13e8:	b0 93 0f 01 	sts	0x010F, r27
		linear_kp = 0.2;
    13ec:	8d ec       	ldi	r24, 0xCD	; 205
    13ee:	9c ec       	ldi	r25, 0xCC	; 204
    13f0:	ac e4       	ldi	r26, 0x4C	; 76
    13f2:	be e3       	ldi	r27, 0x3E	; 62
    13f4:	80 93 10 01 	sts	0x0110, r24
    13f8:	90 93 11 01 	sts	0x0111, r25
    13fc:	a0 93 12 01 	sts	0x0112, r26
    1400:	b0 93 13 01 	sts	0x0113, r27
		max_duty_cycle = DUTY_CYCLE_SEEK;
    1404:	8d ec       	ldi	r24, 0xCD	; 205
    1406:	9c ec       	ldi	r25, 0xCC	; 204
    1408:	ac ec       	ldi	r26, 0xCC	; 204
    140a:	be e3       	ldi	r27, 0x3E	; 62
    140c:	80 93 1c 01 	sts	0x011C, r24
    1410:	90 93 1d 01 	sts	0x011D, r25
    1414:	a0 93 1e 01 	sts	0x011E, r26
    1418:	b0 93 1f 01 	sts	0x011F, r27
		m_green(ON);
    141c:	6a 9a       	sbi	0x0d, 2	; 13
    141e:	72 98       	cbi	0x0e, 2	; 14
    1420:	08 95       	ret

00001422 <home_dist>:
	m_green(OFF);
	return goalie_home;
}

float home_dist()
{	
    1422:	4f 92       	push	r4
    1424:	5f 92       	push	r5
    1426:	6f 92       	push	r6
    1428:	7f 92       	push	r7
    142a:	8f 92       	push	r8
    142c:	9f 92       	push	r9
    142e:	af 92       	push	r10
    1430:	bf 92       	push	r11
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	2c 97       	sbiw	r28, 0x0c	; 12
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
	/* Calculates the distance to from your own goal */
	float position_buffer[3];
	get_position(position_buffer);
    144e:	ce 01       	movw	r24, r28
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	0e 94 4a 0c 	call	0x1894	; 0x1894 <get_position>
	float x = position_buffer[0];
	float y = position_buffer[1];
	return sqrtf((x+x_goal)*(x+x_goal)+(y-y_goal)*(y-y_goal));
    1456:	20 91 a8 01 	lds	r18, 0x01A8
    145a:	30 91 a9 01 	lds	r19, 0x01A9
    145e:	40 91 aa 01 	lds	r20, 0x01AA
    1462:	50 91 ab 01 	lds	r21, 0x01AB
    1466:	69 81       	ldd	r22, Y+1	; 0x01
    1468:	7a 81       	ldd	r23, Y+2	; 0x02
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
    1472:	4b 01       	movw	r8, r22
    1474:	5c 01       	movw	r10, r24
    1476:	20 91 a4 01 	lds	r18, 0x01A4
    147a:	30 91 a5 01 	lds	r19, 0x01A5
    147e:	40 91 a6 01 	lds	r20, 0x01A6
    1482:	50 91 a7 01 	lds	r21, 0x01A7
    1486:	6d 81       	ldd	r22, Y+5	; 0x05
    1488:	7e 81       	ldd	r23, Y+6	; 0x06
    148a:	8f 81       	ldd	r24, Y+7	; 0x07
    148c:	98 85       	ldd	r25, Y+8	; 0x08
    148e:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
    1492:	6b 01       	movw	r12, r22
    1494:	7c 01       	movw	r14, r24
    1496:	a5 01       	movw	r20, r10
    1498:	94 01       	movw	r18, r8
    149a:	c5 01       	movw	r24, r10
    149c:	b4 01       	movw	r22, r8
    149e:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    14a2:	4b 01       	movw	r8, r22
    14a4:	5c 01       	movw	r10, r24
    14a6:	a7 01       	movw	r20, r14
    14a8:	96 01       	movw	r18, r12
    14aa:	c7 01       	movw	r24, r14
    14ac:	b6 01       	movw	r22, r12
    14ae:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    14b2:	9b 01       	movw	r18, r22
    14b4:	ac 01       	movw	r20, r24
    14b6:	c5 01       	movw	r24, r10
    14b8:	b4 01       	movw	r22, r8
    14ba:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
    14be:	0e 94 4b 1b 	call	0x3696	; 0x3696 <sqrt>
}
    14c2:	2c 96       	adiw	r28, 0x0c	; 12
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	df 90       	pop	r13
    14d8:	cf 90       	pop	r12
    14da:	bf 90       	pop	r11
    14dc:	af 90       	pop	r10
    14de:	9f 90       	pop	r9
    14e0:	8f 90       	pop	r8
    14e2:	7f 90       	pop	r7
    14e4:	6f 90       	pop	r6
    14e6:	5f 90       	pop	r5
    14e8:	4f 90       	pop	r4
    14ea:	08 95       	ret

000014ec <goalie_action>:
		return;
	}
}

int goalie_action(int goalie_home)
{
    14ec:	cf 92       	push	r12
    14ee:	df 92       	push	r13
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	ec 01       	movw	r28, r24
	/* If the puck is within range, become an attacker and get the puck */
	if (puck_dist > 90){	
    14fa:	80 91 96 01 	lds	r24, 0x0196
    14fe:	90 91 97 01 	lds	r25, 0x0197
    1502:	8b 35       	cpi	r24, 0x5B	; 91
    1504:	91 05       	cpc	r25, r1
    1506:	3c f0       	brlt	.+14     	; 0x1516 <goalie_action+0x2a>
		role = ATTACK;
    1508:	10 92 01 01 	sts	0x0101, r1
    150c:	10 92 00 01 	sts	0x0100, r1
		return goalie_home;
    1510:	8c 2f       	mov	r24, r28
    1512:	9d 2f       	mov	r25, r29
    1514:	01 c1       	rjmp	.+514    	; 0x1718 <goalie_action+0x22c>
	}
	
	float dist = home_dist();	//find distance from own goal
    1516:	0e 94 11 0a 	call	0x1422	; 0x1422 <home_dist>
    151a:	6b 01       	movw	r12, r22
    151c:	7c 01       	movw	r14, r24
	//m_usb_tx_string("\n distance");
	//m_usb_tx_int((int) dist);
	
	/* If the goalie is far from our goal, and hasn't registered as home, return home*/
	if (dist > 150 && (!goalie_home)) {	
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	46 e1       	ldi	r20, 0x16	; 22
    1524:	53 e4       	ldi	r21, 0x43	; 67
    1526:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__gesf2>
    152a:	18 16       	cp	r1, r24
    152c:	0c f0       	brlt	.+2      	; 0x1530 <goalie_action+0x44>
    152e:	82 c0       	rjmp	.+260    	; 0x1634 <goalie_action+0x148>
    1530:	20 97       	sbiw	r28, 0x00	; 0
    1532:	09 f0       	breq	.+2      	; 0x1536 <goalie_action+0x4a>
    1534:	7f c0       	rjmp	.+254    	; 0x1634 <goalie_action+0x148>
		x_target = -x_goal*0.8;
    1536:	80 91 a8 01 	lds	r24, 0x01A8
    153a:	90 91 a9 01 	lds	r25, 0x01A9
    153e:	a0 91 aa 01 	lds	r26, 0x01AA
    1542:	b0 91 ab 01 	lds	r27, 0x01AB
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	90 58       	subi	r25, 0x80	; 128
    154c:	2d ec       	ldi	r18, 0xCD	; 205
    154e:	3c ec       	ldi	r19, 0xCC	; 204
    1550:	4c e4       	ldi	r20, 0x4C	; 76
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1558:	60 93 c4 01 	sts	0x01C4, r22
    155c:	70 93 c5 01 	sts	0x01C5, r23
    1560:	80 93 c6 01 	sts	0x01C6, r24
    1564:	90 93 c7 01 	sts	0x01C7, r25
		y_target = y_goal;
    1568:	80 91 a4 01 	lds	r24, 0x01A4
    156c:	90 91 a5 01 	lds	r25, 0x01A5
    1570:	a0 91 a6 01 	lds	r26, 0x01A6
    1574:	b0 91 a7 01 	lds	r27, 0x01A7
    1578:	80 93 c0 01 	sts	0x01C0, r24
    157c:	90 93 c1 01 	sts	0x01C1, r25
    1580:	a0 93 c2 01 	sts	0x01C2, r26
    1584:	b0 93 c3 01 	sts	0x01C3, r27
		max_theta = M_PI;
    1588:	8b ed       	ldi	r24, 0xDB	; 219
    158a:	9f e0       	ldi	r25, 0x0F	; 15
    158c:	a9 e4       	ldi	r26, 0x49	; 73
    158e:	b0 e4       	ldi	r27, 0x40	; 64
    1590:	80 93 18 01 	sts	0x0118, r24
    1594:	90 93 19 01 	sts	0x0119, r25
    1598:	a0 93 1a 01 	sts	0x011A, r26
    159c:	b0 93 1b 01 	sts	0x011B, r27
		theta_kd = 0.01;
    15a0:	8a e0       	ldi	r24, 0x0A	; 10
    15a2:	97 ed       	ldi	r25, 0xD7	; 215
    15a4:	a3 e2       	ldi	r26, 0x23	; 35
    15a6:	bc e3       	ldi	r27, 0x3C	; 60
    15a8:	80 93 bc 01 	sts	0x01BC, r24
    15ac:	90 93 bd 01 	sts	0x01BD, r25
    15b0:	a0 93 be 01 	sts	0x01BE, r26
    15b4:	b0 93 bf 01 	sts	0x01BF, r27
		theta_kp = 1.8;
    15b8:	46 e6       	ldi	r20, 0x66	; 102
    15ba:	56 e6       	ldi	r21, 0x66	; 102
    15bc:	66 ee       	ldi	r22, 0xE6	; 230
    15be:	7f e3       	ldi	r23, 0x3F	; 63
    15c0:	40 93 14 01 	sts	0x0114, r20
    15c4:	50 93 15 01 	sts	0x0115, r21
    15c8:	60 93 16 01 	sts	0x0116, r22
    15cc:	70 93 17 01 	sts	0x0117, r23
		linear_kd = 0.01;
    15d0:	80 93 0c 01 	sts	0x010C, r24
    15d4:	90 93 0d 01 	sts	0x010D, r25
    15d8:	a0 93 0e 01 	sts	0x010E, r26
    15dc:	b0 93 0f 01 	sts	0x010F, r27
		linear_kp = 0.2;
    15e0:	8d ec       	ldi	r24, 0xCD	; 205
    15e2:	9c ec       	ldi	r25, 0xCC	; 204
    15e4:	ac e4       	ldi	r26, 0x4C	; 76
    15e6:	be e3       	ldi	r27, 0x3E	; 62
    15e8:	80 93 10 01 	sts	0x0110, r24
    15ec:	90 93 11 01 	sts	0x0111, r25
    15f0:	a0 93 12 01 	sts	0x0112, r26
    15f4:	b0 93 13 01 	sts	0x0113, r27
		max_duty_cycle = DUTY_CYCLE_PUCK;
    15f8:	8d ec       	ldi	r24, 0xCD	; 205
    15fa:	9c ec       	ldi	r25, 0xCC	; 204
    15fc:	ac ec       	ldi	r26, 0xCC	; 204
    15fe:	be e3       	ldi	r27, 0x3E	; 62
    1600:	80 93 1c 01 	sts	0x011C, r24
    1604:	90 93 1d 01 	sts	0x011D, r25
    1608:	a0 93 1e 01 	sts	0x011E, r26
    160c:	b0 93 1f 01 	sts	0x011F, r27
		m_green(ON)
    1610:	6a 9a       	sbi	0x0d, 2	; 13
    1612:	72 98       	cbi	0x0e, 2	; 14
		
		if (dist < 155){	//If you are within 5 pixels of home, consider yourself home
    1614:	d1 e0       	ldi	r29, 0x01	; 1
    1616:	c0 e0       	ldi	r28, 0x00	; 0
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4b e1       	ldi	r20, 0x1B	; 27
    161e:	53 e4       	ldi	r21, 0x43	; 67
    1620:	c7 01       	movw	r24, r14
    1622:	b6 01       	movw	r22, r12
    1624:	0e 94 00 19 	call	0x3200	; 0x3200 <__cmpsf2>
    1628:	88 23       	and	r24, r24
    162a:	0c f0       	brlt	.+2      	; 0x162e <goalie_action+0x142>
    162c:	d0 e0       	ldi	r29, 0x00	; 0
int goalie_action(int goalie_home)
{
	/* If the puck is within range, become an attacker and get the puck */
	if (puck_dist > 90){	
		role = ATTACK;
		return goalie_home;
    162e:	8d 2f       	mov	r24, r29
    1630:	9c 2f       	mov	r25, r28
    1632:	72 c0       	rjmp	.+228    	; 0x1718 <goalie_action+0x22c>
		}
		return goalie_home;
	}
	
	/* If goalie is home, turn off linear motion */
	linear_kd = 0.0;
    1634:	10 92 0c 01 	sts	0x010C, r1
    1638:	10 92 0d 01 	sts	0x010D, r1
    163c:	10 92 0e 01 	sts	0x010E, r1
    1640:	10 92 0f 01 	sts	0x010F, r1
	linear_kp = 0.0;
    1644:	10 92 10 01 	sts	0x0110, r1
    1648:	10 92 11 01 	sts	0x0111, r1
    164c:	10 92 12 01 	sts	0x0112, r1
    1650:	10 92 13 01 	sts	0x0113, r1
	theta_kd = 0.02;
    1654:	8a e0       	ldi	r24, 0x0A	; 10
    1656:	97 ed       	ldi	r25, 0xD7	; 215
    1658:	a3 ea       	ldi	r26, 0xA3	; 163
    165a:	bc e3       	ldi	r27, 0x3C	; 60
    165c:	80 93 bc 01 	sts	0x01BC, r24
    1660:	90 93 bd 01 	sts	0x01BD, r25
    1664:	a0 93 be 01 	sts	0x01BE, r26
    1668:	b0 93 bf 01 	sts	0x01BF, r27
	theta_kp = 0.8;
    166c:	8d ec       	ldi	r24, 0xCD	; 205
    166e:	9c ec       	ldi	r25, 0xCC	; 204
    1670:	ac e4       	ldi	r26, 0x4C	; 76
    1672:	bf e3       	ldi	r27, 0x3F	; 63
    1674:	80 93 14 01 	sts	0x0114, r24
    1678:	90 93 15 01 	sts	0x0115, r25
    167c:	a0 93 16 01 	sts	0x0116, r26
    1680:	b0 93 17 01 	sts	0x0117, r27
	
	/* If the robot drifts away from its own goal, return home*/
	if (dist > 160){
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e2       	ldi	r20, 0x20	; 32
    168a:	53 e4       	ldi	r21, 0x43	; 67
    168c:	c7 01       	movw	r24, r14
    168e:	b6 01       	movw	r22, r12
    1690:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__gesf2>
    1694:	18 16       	cp	r1, r24
    1696:	f4 f1       	brlt	.+124    	; 0x1714 <goalie_action+0x228>
		goalie_home = 0;
		return goalie_home;
	}
	
	/* if the puck is visible, face the puck */
	if (puck_dist>60){
    1698:	80 91 96 01 	lds	r24, 0x0196
    169c:	90 91 97 01 	lds	r25, 0x0197
    16a0:	cd 97       	sbiw	r24, 0x3d	; 61
    16a2:	1c f1       	brlt	.+70     	; 0x16ea <goalie_action+0x1fe>
		x_target = x_puck;
    16a4:	80 91 9c 01 	lds	r24, 0x019C
    16a8:	90 91 9d 01 	lds	r25, 0x019D
    16ac:	a0 91 9e 01 	lds	r26, 0x019E
    16b0:	b0 91 9f 01 	lds	r27, 0x019F
    16b4:	80 93 c4 01 	sts	0x01C4, r24
    16b8:	90 93 c5 01 	sts	0x01C5, r25
    16bc:	a0 93 c6 01 	sts	0x01C6, r26
    16c0:	b0 93 c7 01 	sts	0x01C7, r27
		y_target = y_puck;
    16c4:	80 91 98 01 	lds	r24, 0x0198
    16c8:	90 91 99 01 	lds	r25, 0x0199
    16cc:	a0 91 9a 01 	lds	r26, 0x019A
    16d0:	b0 91 9b 01 	lds	r27, 0x019B
    16d4:	80 93 c0 01 	sts	0x01C0, r24
    16d8:	90 93 c1 01 	sts	0x01C1, r25
    16dc:	a0 93 c2 01 	sts	0x01C2, r26
    16e0:	b0 93 c3 01 	sts	0x01C3, r27
		return goalie_home;
    16e4:	8c 2f       	mov	r24, r28
    16e6:	9d 2f       	mov	r25, r29
    16e8:	17 c0       	rjmp	.+46     	; 0x1718 <goalie_action+0x22c>
	}
	
	/*otherwise, face the center */
	x_target = 0;
    16ea:	10 92 c4 01 	sts	0x01C4, r1
    16ee:	10 92 c5 01 	sts	0x01C5, r1
    16f2:	10 92 c6 01 	sts	0x01C6, r1
    16f6:	10 92 c7 01 	sts	0x01C7, r1
	y_target = 0;
    16fa:	10 92 c0 01 	sts	0x01C0, r1
    16fe:	10 92 c1 01 	sts	0x01C1, r1
    1702:	10 92 c2 01 	sts	0x01C2, r1
    1706:	10 92 c3 01 	sts	0x01C3, r1

	m_green(OFF);
    170a:	6a 9a       	sbi	0x0d, 2	; 13
    170c:	72 9a       	sbi	0x0e, 2	; 14
	return goalie_home;
    170e:	8c 2f       	mov	r24, r28
    1710:	9d 2f       	mov	r25, r29
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <goalie_action+0x22c>
	theta_kp = 0.8;
	
	/* If the robot drifts away from its own goal, return home*/
	if (dist > 160){
		goalie_home = 0;
		return goalie_home;
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
	x_target = 0;
	y_target = 0;

	m_green(OFF);
	return goalie_home;
}
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	cf 90       	pop	r12
    1724:	08 95       	ret

00001726 <bot_behavior_update>:

/* Update Targets, Gains, and Max Vals */
void bot_behavior_update()
{
	static int goalie_home = 0;
	switch (role) {
    1726:	80 91 00 01 	lds	r24, 0x0100
    172a:	90 91 01 01 	lds	r25, 0x0101
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	19 f0       	breq	.+6      	; 0x1738 <bot_behavior_update+0x12>
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	21 f0       	breq	.+8      	; 0x173e <bot_behavior_update+0x18>
    1736:	08 95       	ret
		case ATTACK: 
			attack_action();
    1738:	0e 94 27 09 	call	0x124e	; 0x124e <attack_action>
			break;		
    173c:	08 95       	ret
		case GOALIE: 
			goalie_home = goalie_action(goalie_home);
    173e:	80 91 8e 01 	lds	r24, 0x018E
    1742:	90 91 8f 01 	lds	r25, 0x018F
    1746:	0e 94 76 0a 	call	0x14ec	; 0x14ec <goalie_action>
    174a:	90 93 8f 01 	sts	0x018F, r25
    174e:	80 93 8e 01 	sts	0x018E, r24
    1752:	08 95       	ret

00001754 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
    1754:	6e 9a       	sbi	0x0d, 6	; 13
    1756:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey(self);
    1758:	80 91 c8 01 	lds	r24, 0x01C8
    175c:	0e 94 0b 01 	call	0x216	; 0x216 <initialize_robockey>
	pause();
    1760:	0e 94 38 08 	call	0x1070	; 0x1070 <pause>

	/* Confirm successful initialization(s) */
	m_green(ON);
    1764:	6a 9a       	sbi	0x0d, 2	; 13
    1766:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    1768:	ca e7       	ldi	r28, 0x7A	; 122
    176a:	d0 e0       	ldi	r29, 0x00	; 0
		bot_behavior_update();
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
		if (wifi_flag) {
			wifi_flag = 0;
			m_red(TOGGLE);
    176c:	10 e4       	ldi	r17, 0x40	; 64
	/* Confirm successful initialization(s) */
	m_green(ON);

	/* Run */
	while (1){
		update_position();
    176e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <update_position>
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    1772:	88 81       	ld	r24, Y
    1774:	84 fd       	sbrc	r24, 4
    1776:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <adc_update>
		bot_behavior_update();
    177a:	0e 94 93 0b 	call	0x1726	; 0x1726 <bot_behavior_update>
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
    177e:	c1 99       	sbic	0x18, 1	; 24
    1780:	0e 94 66 07 	call	0xecc	; 0xecc <motor_update>
		if (wifi_flag) {
    1784:	80 91 ae 01 	lds	r24, 0x01AE
    1788:	90 91 af 01 	lds	r25, 0x01AF
    178c:	89 2b       	or	r24, r25
    178e:	79 f3       	breq	.-34     	; 0x176e <main+0x1a>
			wifi_flag = 0;
    1790:	10 92 af 01 	sts	0x01AF, r1
    1794:	10 92 ae 01 	sts	0x01AE, r1
			m_red(TOGGLE);
    1798:	6e 9a       	sbi	0x0d, 6	; 13
    179a:	8e b1       	in	r24, 0x0e	; 14
    179c:	81 27       	eor	r24, r17
    179e:	8e b9       	out	0x0e, r24	; 14
			m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    17a0:	6a e0       	ldi	r22, 0x0A	; 10
    17a2:	82 eb       	ldi	r24, 0xB2	; 178
    17a4:	91 e0       	ldi	r25, 0x01	; 1
    17a6:	0e 94 c2 10 	call	0x2184	; 0x2184 <m_rf_read>
			update_game_state();			
    17aa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <update_game_state>
    17ae:	df cf       	rjmp	.-66     	; 0x176e <main+0x1a>

000017b0 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    17b0:	1f 92       	push	r1
    17b2:	0f 92       	push	r0
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	0f 92       	push	r0
    17b8:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    17ba:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
    17bc:	2a 9a       	sbi	0x05, 2	; 5
}
    17be:	0f 90       	pop	r0
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	0f 90       	pop	r0
    17c4:	1f 90       	pop	r1
    17c6:	18 95       	reti

000017c8 <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    17c8:	1f 92       	push	r1
    17ca:	0f 92       	push	r0
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	0f 92       	push	r0
    17d0:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    17d2:	28 98       	cbi	0x05, 0	; 5
}
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    17e8:	2a 98       	cbi	0x05, 2	; 5
}
    17ea:	0f 90       	pop	r0
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	0f 90       	pop	r0
    17f0:	1f 90       	pop	r1
    17f2:	18 95       	reti

000017f4 <__vector_3>:


/* Recieve Wireless Comm */
ISR(INT2_vect){
    17f4:	1f 92       	push	r1
    17f6:	0f 92       	push	r0
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	0f 92       	push	r0
    17fc:	11 24       	eor	r1, r1
    17fe:	8f 93       	push	r24
    1800:	9f 93       	push	r25
	wifi_flag = 1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	90 93 af 01 	sts	0x01AF, r25
    180a:	80 93 ae 01 	sts	0x01AE, r24
}
    180e:	9f 91       	pop	r25
    1810:	8f 91       	pop	r24
    1812:	0f 90       	pop	r0
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	0f 90       	pop	r0
    1818:	1f 90       	pop	r1
    181a:	18 95       	reti

0000181c <__vector_23>:

ISR(TIMER0_OVF_vect){
    181c:	1f 92       	push	r1
    181e:	0f 92       	push	r0
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	0f 92       	push	r0
    1824:	11 24       	eor	r1, r1
    1826:	2f 93       	push	r18
    1828:	3f 93       	push	r19
    182a:	4f 93       	push	r20
    182c:	5f 93       	push	r21
    182e:	6f 93       	push	r22
    1830:	7f 93       	push	r23
    1832:	8f 93       	push	r24
    1834:	9f 93       	push	r25
    1836:	af 93       	push	r26
    1838:	bf 93       	push	r27
    183a:	ef 93       	push	r30
    183c:	ff 93       	push	r31
	
	if (tim0_counts < 20) {
    183e:	80 91 ac 01 	lds	r24, 0x01AC
    1842:	90 91 ad 01 	lds	r25, 0x01AD
    1846:	84 31       	cpi	r24, 0x14	; 20
    1848:	91 05       	cpc	r25, r1
    184a:	34 f4       	brge	.+12     	; 0x1858 <__vector_23+0x3c>
		tim0_counts++; //increment timer counter
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	90 93 ad 01 	sts	0x01AD, r25
    1852:	80 93 ac 01 	sts	0x01AC, r24
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <__vector_23+0x56>
		
	} else {
		positioning_LED(OFF); //turn LED off
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 28 02 	call	0x450	; 0x450 <positioning_LED>
		
		clear(TCCR0B,CS02); //turn timer off
    1860:	85 b5       	in	r24, 0x25	; 37
    1862:	8b 7f       	andi	r24, 0xFB	; 251
    1864:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS01);
    1866:	85 b5       	in	r24, 0x25	; 37
    1868:	8d 7f       	andi	r24, 0xFD	; 253
    186a:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS00);
    186c:	85 b5       	in	r24, 0x25	; 37
    186e:	8e 7f       	andi	r24, 0xFE	; 254
    1870:	85 bd       	out	0x25, r24	; 37
	}
}
    1872:	ff 91       	pop	r31
    1874:	ef 91       	pop	r30
    1876:	bf 91       	pop	r27
    1878:	af 91       	pop	r26
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	7f 91       	pop	r23
    1880:	6f 91       	pop	r22
    1882:	5f 91       	pop	r21
    1884:	4f 91       	pop	r20
    1886:	3f 91       	pop	r19
    1888:	2f 91       	pop	r18
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	0f 90       	pop	r0
    1890:	1f 90       	pop	r1
    1892:	18 95       	reti

00001894 <get_position>:
/************************************************************
Public Functions
************************************************************/

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    1894:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    1896:	80 91 da 01 	lds	r24, 0x01DA
    189a:	90 91 db 01 	lds	r25, 0x01DB
    189e:	a0 91 dc 01 	lds	r26, 0x01DC
    18a2:	b0 91 dd 01 	lds	r27, 0x01DD
    18a6:	80 83       	st	Z, r24
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	a2 83       	std	Z+2, r26	; 0x02
    18ac:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    18ae:	80 91 d6 01 	lds	r24, 0x01D6
    18b2:	90 91 d7 01 	lds	r25, 0x01D7
    18b6:	a0 91 d8 01 	lds	r26, 0x01D8
    18ba:	b0 91 d9 01 	lds	r27, 0x01D9
    18be:	84 83       	std	Z+4, r24	; 0x04
    18c0:	95 83       	std	Z+5, r25	; 0x05
    18c2:	a6 83       	std	Z+6, r26	; 0x06
    18c4:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    18c6:	80 91 d2 01 	lds	r24, 0x01D2
    18ca:	90 91 d3 01 	lds	r25, 0x01D3
    18ce:	a0 91 d4 01 	lds	r26, 0x01D4
    18d2:	b0 91 d5 01 	lds	r27, 0x01D5
    18d6:	80 87       	std	Z+8, r24	; 0x08
    18d8:	91 87       	std	Z+9, r25	; 0x09
    18da:	a2 87       	std	Z+10, r26	; 0x0a
    18dc:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	08 95       	ret

000018e2 <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    18e2:	8f 92       	push	r8
    18e4:	9f 92       	push	r9
    18e6:	af 92       	push	r10
    18e8:	bf 92       	push	r11
    18ea:	cf 92       	push	r12
    18ec:	df 92       	push	r13
    18ee:	ef 92       	push	r14
    18f0:	ff 92       	push	r15
    18f2:	6b 01       	movw	r12, r22
    18f4:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    18f6:	4b 01       	movw	r8, r22
    18f8:	5c 01       	movw	r10, r24
    18fa:	e8 94       	clt
    18fc:	b7 f8       	bld	r11, 7
    18fe:	2b ed       	ldi	r18, 0xDB	; 219
    1900:	3f e0       	ldi	r19, 0x0F	; 15
    1902:	49 e4       	ldi	r20, 0x49	; 73
    1904:	50 e4       	ldi	r21, 0x40	; 64
    1906:	c5 01       	movw	r24, r10
    1908:	b4 01       	movw	r22, r8
    190a:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__gesf2>
    190e:	18 16       	cp	r1, r24
    1910:	bc f4       	brge	.+46     	; 0x1940 <theta_error_correction+0x5e>
    1912:	2b ed       	ldi	r18, 0xDB	; 219
    1914:	3f e0       	ldi	r19, 0x0F	; 15
    1916:	49 ec       	ldi	r20, 0xC9	; 201
    1918:	50 e4       	ldi	r21, 0x40	; 64
    191a:	c7 01       	movw	r24, r14
    191c:	b6 01       	movw	r22, r12
    191e:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1922:	a5 01       	movw	r20, r10
    1924:	94 01       	movw	r18, r8
    1926:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    192a:	9b 01       	movw	r18, r22
    192c:	ac 01       	movw	r20, r24
    192e:	c7 01       	movw	r24, r14
    1930:	b6 01       	movw	r22, r12
    1932:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
    1936:	56 2f       	mov	r21, r22
    1938:	47 2f       	mov	r20, r23
    193a:	38 2f       	mov	r19, r24
    193c:	29 2f       	mov	r18, r25
    193e:	04 c0       	rjmp	.+8      	; 0x1948 <theta_error_correction+0x66>
	else{return error;}
    1940:	5c 2d       	mov	r21, r12
    1942:	4d 2d       	mov	r20, r13
    1944:	3e 2d       	mov	r19, r14
    1946:	2f 2d       	mov	r18, r15
}
    1948:	65 2f       	mov	r22, r21
    194a:	74 2f       	mov	r23, r20
    194c:	83 2f       	mov	r24, r19
    194e:	92 2f       	mov	r25, r18
    1950:	ff 90       	pop	r15
    1952:	ef 90       	pop	r14
    1954:	df 90       	pop	r13
    1956:	cf 90       	pop	r12
    1958:	bf 90       	pop	r11
    195a:	af 90       	pop	r10
    195c:	9f 90       	pop	r9
    195e:	8f 90       	pop	r8
    1960:	08 95       	ret

00001962 <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    1962:	2f 92       	push	r2
    1964:	3f 92       	push	r3
    1966:	4f 92       	push	r4
    1968:	5f 92       	push	r5
    196a:	6f 92       	push	r6
    196c:	7f 92       	push	r7
    196e:	8f 92       	push	r8
    1970:	9f 92       	push	r9
    1972:	af 92       	push	r10
    1974:	bf 92       	push	r11
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	a8 97       	sbiw	r28, 0x28	; 40
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    1996:	ce 01       	movw	r24, r28
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	0e 94 a9 14 	call	0x2952	; 0x2952 <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    199e:	6b 81       	ldd	r22, Y+3	; 0x03
    19a0:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    19a2:	0f 81       	ldd	r16, Y+7	; 0x07
    19a4:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    19a6:	49 85       	ldd	r20, Y+9	; 0x09
    19a8:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    19aa:	ad 85       	ldd	r26, Y+13	; 0x0d
    19ac:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    19ae:	2f 85       	ldd	r18, Y+15	; 0x0f
    19b0:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    19b2:	eb 89       	ldd	r30, Y+19	; 0x13
    19b4:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    19b6:	8d 89       	ldd	r24, Y+21	; 0x15
    19b8:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    19ba:	e9 80       	ldd	r14, Y+1	; 0x01
    19bc:	fa 80       	ldd	r15, Y+2	; 0x02
    19be:	fa 8e       	std	Y+26, r15	; 0x1a
    19c0:	e9 8e       	std	Y+25, r14	; 0x19
    19c2:	1c 8f       	std	Y+28, r17	; 0x1c
    19c4:	0b 8f       	std	Y+27, r16	; 0x1b
    19c6:	be 8f       	std	Y+30, r27	; 0x1e
    19c8:	ad 8f       	std	Y+29, r26	; 0x1d
    19ca:	f8 a3       	std	Y+32, r31	; 0x20
    19cc:	ef 8f       	std	Y+31, r30	; 0x1f
    19ce:	7a a3       	std	Y+34, r23	; 0x22
    19d0:	69 a3       	std	Y+33, r22	; 0x21
    19d2:	5c a3       	std	Y+36, r21	; 0x24
    19d4:	4b a3       	std	Y+35, r20	; 0x23
    19d6:	3e a3       	std	Y+38, r19	; 0x26
    19d8:	2d a3       	std	Y+37, r18	; 0x25
    19da:	98 a7       	std	Y+40, r25	; 0x28
    19dc:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    19de:	68 e2       	ldi	r22, 0x28	; 40
    19e0:	71 e0       	ldi	r23, 0x01	; 1
    19e2:	ce 01       	movw	r24, r28
    19e4:	49 96       	adiw	r24, 0x19	; 25
    19e6:	0e 94 40 06 	call	0xc80	; 0xc80 <localization_calc>
    19ea:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    19ec:	fc 01       	movw	r30, r24
    19ee:	80 85       	ldd	r24, Z+8	; 0x08
    19f0:	91 85       	ldd	r25, Z+9	; 0x09
    19f2:	a2 85       	ldd	r26, Z+10	; 0x0a
    19f4:	b3 85       	ldd	r27, Z+11	; 0x0b
    19f6:	0f 2e       	mov	r0, r31
    19f8:	f8 e2       	ldi	r31, 0x28	; 40
    19fa:	2f 2e       	mov	r2, r31
    19fc:	f1 e0       	ldi	r31, 0x01	; 1
    19fe:	3f 2e       	mov	r3, r31
    1a00:	f0 2d       	mov	r31, r0
    1a02:	f1 01       	movw	r30, r2
    1a04:	80 87       	std	Z+8, r24	; 0x08
    1a06:	91 87       	std	Z+9, r25	; 0x09
    1a08:	a2 87       	std	Z+10, r26	; 0x0a
    1a0a:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	60 85       	ldd	r22, Z+8	; 0x08
    1a10:	71 85       	ldd	r23, Z+9	; 0x09
    1a12:	82 85       	ldd	r24, Z+10	; 0x0a
    1a14:	93 85       	ldd	r25, Z+11	; 0x0b
    1a16:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <theta_error_correction>
    1a1a:	2b 01       	movw	r4, r22
    1a1c:	3c 01       	movw	r6, r24
    1a1e:	f8 01       	movw	r30, r16
    1a20:	60 87       	std	Z+8, r22	; 0x08
    1a22:	71 87       	std	Z+9, r23	; 0x09
    1a24:	82 87       	std	Z+10, r24	; 0x0a
    1a26:	93 87       	std	Z+11, r25	; 0x0b
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1a28:	24 ea       	ldi	r18, 0xA4	; 164
    1a2a:	30 e7       	ldi	r19, 0x70	; 112
    1a2c:	4d e7       	ldi	r20, 0x7D	; 125
    1a2e:	5f e3       	ldi	r21, 0x3F	; 63
    1a30:	60 81       	ld	r22, Z
    1a32:	71 81       	ldd	r23, Z+1	; 0x01
    1a34:	82 81       	ldd	r24, Z+2	; 0x02
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1a3c:	4b 01       	movw	r8, r22
    1a3e:	5c 01       	movw	r10, r24
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	37 ed       	ldi	r19, 0xD7	; 215
    1a44:	43 e2       	ldi	r20, 0x23	; 35
    1a46:	5c e3       	ldi	r21, 0x3C	; 60
    1a48:	60 91 da 01 	lds	r22, 0x01DA
    1a4c:	70 91 db 01 	lds	r23, 0x01DB
    1a50:	80 91 dc 01 	lds	r24, 0x01DC
    1a54:	90 91 dd 01 	lds	r25, 0x01DD
    1a58:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1a5c:	9b 01       	movw	r18, r22
    1a5e:	ac 01       	movw	r20, r24
    1a60:	c5 01       	movw	r24, r10
    1a62:	b4 01       	movw	r22, r8
    1a64:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
    1a68:	4b 01       	movw	r8, r22
    1a6a:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    1a6c:	60 93 da 01 	sts	0x01DA, r22
    1a70:	70 93 db 01 	sts	0x01DB, r23
    1a74:	80 93 dc 01 	sts	0x01DC, r24
    1a78:	90 93 dd 01 	sts	0x01DD, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1a7c:	24 ea       	ldi	r18, 0xA4	; 164
    1a7e:	30 e7       	ldi	r19, 0x70	; 112
    1a80:	4d e7       	ldi	r20, 0x7D	; 125
    1a82:	5f e3       	ldi	r21, 0x3F	; 63
    1a84:	f8 01       	movw	r30, r16
    1a86:	64 81       	ldd	r22, Z+4	; 0x04
    1a88:	75 81       	ldd	r23, Z+5	; 0x05
    1a8a:	86 81       	ldd	r24, Z+6	; 0x06
    1a8c:	97 81       	ldd	r25, Z+7	; 0x07
    1a8e:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1a92:	6b 01       	movw	r12, r22
    1a94:	7c 01       	movw	r14, r24
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	37 ed       	ldi	r19, 0xD7	; 215
    1a9a:	43 e2       	ldi	r20, 0x23	; 35
    1a9c:	5c e3       	ldi	r21, 0x3C	; 60
    1a9e:	60 91 d6 01 	lds	r22, 0x01D6
    1aa2:	70 91 d7 01 	lds	r23, 0x01D7
    1aa6:	80 91 d8 01 	lds	r24, 0x01D8
    1aaa:	90 91 d9 01 	lds	r25, 0x01D9
    1aae:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1ab2:	9b 01       	movw	r18, r22
    1ab4:	ac 01       	movw	r20, r24
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	b6 01       	movw	r22, r12
    1aba:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
    1abe:	6b 01       	movw	r12, r22
    1ac0:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    1ac2:	60 93 d6 01 	sts	0x01D6, r22
    1ac6:	70 93 d7 01 	sts	0x01D7, r23
    1aca:	80 93 d8 01 	sts	0x01D8, r24
    1ace:	90 93 d9 01 	sts	0x01D9, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1ad2:	24 ea       	ldi	r18, 0xA4	; 164
    1ad4:	30 e7       	ldi	r19, 0x70	; 112
    1ad6:	4d e7       	ldi	r20, 0x7D	; 125
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	c3 01       	movw	r24, r6
    1adc:	b2 01       	movw	r22, r4
    1ade:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1ae2:	2b 01       	movw	r4, r22
    1ae4:	3c 01       	movw	r6, r24
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	37 ed       	ldi	r19, 0xD7	; 215
    1aea:	43 e2       	ldi	r20, 0x23	; 35
    1aec:	5c e3       	ldi	r21, 0x3C	; 60
    1aee:	60 91 d2 01 	lds	r22, 0x01D2
    1af2:	70 91 d3 01 	lds	r23, 0x01D3
    1af6:	80 91 d4 01 	lds	r24, 0x01D4
    1afa:	90 91 d5 01 	lds	r25, 0x01D5
    1afe:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1b02:	9b 01       	movw	r18, r22
    1b04:	ac 01       	movw	r20, r24
    1b06:	c3 01       	movw	r24, r6
    1b08:	b2 01       	movw	r22, r4
    1b0a:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    1b0e:	60 93 d2 01 	sts	0x01D2, r22
    1b12:	70 93 d3 01 	sts	0x01D3, r23
    1b16:	80 93 d4 01 	sts	0x01D4, r24
    1b1a:	90 93 d5 01 	sts	0x01D5, r25
	
	robotCenterPrev[0] = x;
    1b1e:	f1 01       	movw	r30, r2
    1b20:	80 82       	st	Z, r8
    1b22:	91 82       	std	Z+1, r9	; 0x01
    1b24:	a2 82       	std	Z+2, r10	; 0x02
    1b26:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    1b28:	c4 82       	std	Z+4, r12	; 0x04
    1b2a:	d5 82       	std	Z+5, r13	; 0x05
    1b2c:	e6 82       	std	Z+6, r14	; 0x06
    1b2e:	f7 82       	std	Z+7, r15	; 0x07
}
    1b30:	a8 96       	adiw	r28, 0x28	; 40
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	df 90       	pop	r13
    1b4a:	cf 90       	pop	r12
    1b4c:	bf 90       	pop	r11
    1b4e:	af 90       	pop	r10
    1b50:	9f 90       	pop	r9
    1b52:	8f 90       	pop	r8
    1b54:	7f 90       	pop	r7
    1b56:	6f 90       	pop	r6
    1b58:	5f 90       	pop	r5
    1b5a:	4f 90       	pop	r4
    1b5c:	3f 90       	pop	r3
    1b5e:	2f 90       	pop	r2
    1b60:	08 95       	ret

00001b62 <run_motor_control_loop>:



/* PID Control */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd)
{
    1b62:	4f 92       	push	r4
    1b64:	5f 92       	push	r5
    1b66:	6f 92       	push	r6
    1b68:	7f 92       	push	r7
    1b6a:	8f 92       	push	r8
    1b6c:	9f 92       	push	r9
    1b6e:	af 92       	push	r10
    1b70:	bf 92       	push	r11
    1b72:	cf 92       	push	r12
    1b74:	df 92       	push	r13
    1b76:	ef 92       	push	r14
    1b78:	ff 92       	push	r15
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	68 97       	sbiw	r28, 0x18	; 24
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	29 01       	movw	r4, r18
    1b94:	3a 01       	movw	r6, r20
    1b96:	e9 8a       	std	Y+17, r14	; 0x11
    1b98:	fa 8a       	std	Y+18, r15	; 0x12
    1b9a:	0b 8b       	std	Y+19, r16	; 0x13
    1b9c:	1c 8b       	std	Y+20, r17	; 0x14
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    1b9e:	20 91 da 01 	lds	r18, 0x01DA
    1ba2:	30 91 db 01 	lds	r19, 0x01DB
    1ba6:	40 91 dc 01 	lds	r20, 0x01DC
    1baa:	50 91 dd 01 	lds	r21, 0x01DD
    1bae:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
    1bb2:	6d 83       	std	Y+5, r22	; 0x05
    1bb4:	7e 83       	std	Y+6, r23	; 0x06
    1bb6:	8f 83       	std	Y+7, r24	; 0x07
    1bb8:	98 87       	std	Y+8, r25	; 0x08
    1bba:	20 91 d6 01 	lds	r18, 0x01D6
    1bbe:	30 91 d7 01 	lds	r19, 0x01D7
    1bc2:	40 91 d8 01 	lds	r20, 0x01D8
    1bc6:	50 91 d9 01 	lds	r21, 0x01D9
    1bca:	c3 01       	movw	r24, r6
    1bcc:	b2 01       	movw	r22, r4
    1bce:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
    1bd2:	69 87       	std	Y+9, r22	; 0x09
    1bd4:	7a 87       	std	Y+10, r23	; 0x0a
    1bd6:	8b 87       	std	Y+11, r24	; 0x0b
    1bd8:	9c 87       	std	Y+12, r25	; 0x0c
    1bda:	2d 81       	ldd	r18, Y+5	; 0x05
    1bdc:	3e 81       	ldd	r19, Y+6	; 0x06
    1bde:	4f 81       	ldd	r20, Y+7	; 0x07
    1be0:	58 85       	ldd	r21, Y+8	; 0x08
    1be2:	0e 94 a1 18 	call	0x3142	; 0x3142 <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    1be6:	20 91 d2 01 	lds	r18, 0x01D2
    1bea:	30 91 d3 01 	lds	r19, 0x01D3
    1bee:	40 91 d4 01 	lds	r20, 0x01D4
    1bf2:	50 91 d5 01 	lds	r21, 0x01D5
    1bf6:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
	theta_error = theta_error_correction(theta_error);
    1bfa:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <theta_error_correction>
    1bfe:	69 83       	std	Y+1, r22	; 0x01
    1c00:	7a 83       	std	Y+2, r23	; 0x02
    1c02:	8b 83       	std	Y+3, r24	; 0x03
    1c04:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    1c06:	2b 01       	movw	r4, r22
    1c08:	3c 01       	movw	r6, r24
    1c0a:	e8 94       	clt
    1c0c:	77 f8       	bld	r7, 7
    1c0e:	a6 01       	movw	r20, r12
    1c10:	95 01       	movw	r18, r10
    1c12:	c3 01       	movw	r24, r6
    1c14:	b2 01       	movw	r22, r4
    1c16:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__gesf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	84 f4       	brge	.+32     	; 0x1c3e <run_motor_control_loop+0xdc>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    1c1e:	29 81       	ldd	r18, Y+1	; 0x01
    1c20:	3a 81       	ldd	r19, Y+2	; 0x02
    1c22:	4b 81       	ldd	r20, Y+3	; 0x03
    1c24:	5c 81       	ldd	r21, Y+4	; 0x04
    1c26:	c3 01       	movw	r24, r6
    1c28:	b2 01       	movw	r22, r4
    1c2a:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    1c2e:	a6 01       	movw	r20, r12
    1c30:	95 01       	movw	r18, r10
    1c32:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1c36:	69 83       	std	Y+1, r22	; 0x01
    1c38:	7a 83       	std	Y+2, r23	; 0x02
    1c3a:	8b 83       	std	Y+3, r24	; 0x03
    1c3c:	9c 83       	std	Y+4, r25	; 0x04
	}

	float angular_derivative = (theta_error-previous_theta_error)/TIMESTEP;
    1c3e:	20 91 ce 01 	lds	r18, 0x01CE
    1c42:	30 91 cf 01 	lds	r19, 0x01CF
    1c46:	40 91 d0 01 	lds	r20, 0x01D0
    1c4a:	50 91 d1 01 	lds	r21, 0x01D1
    1c4e:	69 81       	ldd	r22, Y+1	; 0x01
    1c50:	7a 81       	ldd	r23, Y+2	; 0x02
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	9c 81       	ldd	r25, Y+4	; 0x04
    1c56:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
    1c5a:	2f e6       	ldi	r18, 0x6F	; 111
    1c5c:	32 e1       	ldi	r19, 0x12	; 18
    1c5e:	43 e8       	ldi	r20, 0x83	; 131
    1c60:	5a e3       	ldi	r21, 0x3A	; 58
    1c62:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    1c66:	6d 8b       	std	Y+21, r22	; 0x15
    1c68:	7e 8b       	std	Y+22, r23	; 0x16
    1c6a:	8f 8b       	std	Y+23, r24	; 0x17
    1c6c:	98 8f       	std	Y+24, r25	; 0x18
	float angular_output = theta_kp*theta_error - theta_kd*angular_derivative; //If output > 0, turn left
    1c6e:	29 81       	ldd	r18, Y+1	; 0x01
    1c70:	3a 81       	ldd	r19, Y+2	; 0x02
    1c72:	4b 81       	ldd	r20, Y+3	; 0x03
    1c74:	5c 81       	ldd	r21, Y+4	; 0x04
    1c76:	6b a5       	ldd	r22, Y+43	; 0x2b
    1c78:	7c a5       	ldd	r23, Y+44	; 0x2c
    1c7a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c7c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c7e:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1c82:	6b 01       	movw	r12, r22
    1c84:	7c 01       	movw	r14, r24
    1c86:	2d 89       	ldd	r18, Y+21	; 0x15
    1c88:	3e 89       	ldd	r19, Y+22	; 0x16
    1c8a:	4f 89       	ldd	r20, Y+23	; 0x17
    1c8c:	58 8d       	ldd	r21, Y+24	; 0x18
    1c8e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1c90:	78 a9       	ldd	r23, Y+48	; 0x30
    1c92:	89 a9       	ldd	r24, Y+49	; 0x31
    1c94:	9a a9       	ldd	r25, Y+50	; 0x32
    1c96:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1c9a:	9b 01       	movw	r18, r22
    1c9c:	ac 01       	movw	r20, r24
    1c9e:	c7 01       	movw	r24, r14
    1ca0:	b6 01       	movw	r22, r12
    1ca2:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
	previous_theta_error = theta_error;
    1ca6:	29 81       	ldd	r18, Y+1	; 0x01
    1ca8:	3a 81       	ldd	r19, Y+2	; 0x02
    1caa:	4b 81       	ldd	r20, Y+3	; 0x03
    1cac:	5c 81       	ldd	r21, Y+4	; 0x04
    1cae:	20 93 ce 01 	sts	0x01CE, r18
    1cb2:	30 93 cf 01 	sts	0x01CF, r19
    1cb6:	40 93 d0 01 	sts	0x01D0, r20
    1cba:	50 93 d1 01 	sts	0x01D1, r21
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    1cbe:	2b ed       	ldi	r18, 0xDB	; 219
    1cc0:	3f e0       	ldi	r19, 0x0F	; 15
    1cc2:	49 e4       	ldi	r20, 0x49	; 73
    1cc4:	50 e4       	ldi	r21, 0x40	; 64
    1cc6:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    1cca:	6d 87       	std	Y+13, r22	; 0x0d
    1ccc:	7e 87       	std	Y+14, r23	; 0x0e
    1cce:	8f 87       	std	Y+15, r24	; 0x0f
    1cd0:	98 8b       	std	Y+16, r25	; 0x10

	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    1cd2:	69 81       	ldd	r22, Y+1	; 0x01
    1cd4:	7a 81       	ldd	r23, Y+2	; 0x02
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	0e 94 05 19 	call	0x320a	; 0x320a <cos>
    1cde:	2b 01       	movw	r4, r22
    1ce0:	3c 01       	movw	r6, r24
    1ce2:	29 85       	ldd	r18, Y+9	; 0x09
    1ce4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ce6:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ce8:	5c 85       	ldd	r21, Y+12	; 0x0c
    1cea:	ca 01       	movw	r24, r20
    1cec:	b9 01       	movw	r22, r18
    1cee:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1cf2:	6b 01       	movw	r12, r22
    1cf4:	7c 01       	movw	r14, r24
    1cf6:	2d 81       	ldd	r18, Y+5	; 0x05
    1cf8:	3e 81       	ldd	r19, Y+6	; 0x06
    1cfa:	4f 81       	ldd	r20, Y+7	; 0x07
    1cfc:	58 85       	ldd	r21, Y+8	; 0x08
    1cfe:	ca 01       	movw	r24, r20
    1d00:	b9 01       	movw	r22, r18
    1d02:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1d06:	9b 01       	movw	r18, r22
    1d08:	ac 01       	movw	r20, r24
    1d0a:	c7 01       	movw	r24, r14
    1d0c:	b6 01       	movw	r22, r12
    1d0e:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
    1d12:	0e 94 4b 1b 	call	0x3696	; 0x3696 <sqrt>
    1d16:	9b 01       	movw	r18, r22
    1d18:	ac 01       	movw	r20, r24
    1d1a:	c3 01       	movw	r24, r6
    1d1c:	b2 01       	movw	r22, r4
    1d1e:	9f 77       	andi	r25, 0x7F	; 127
    1d20:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1d24:	6b 01       	movw	r12, r22
    1d26:	7c 01       	movw	r14, r24
	if (has_puck()) {
    1d28:	0e 94 34 16 	call	0x2c68	; 0x2c68 <has_puck>
    1d2c:	88 23       	and	r24, r24
    1d2e:	e1 f0       	breq	.+56     	; 0x1d68 <run_motor_control_loop+0x206>
		if (linear_error<0){
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	a9 01       	movw	r20, r18
    1d36:	c7 01       	movw	r24, r14
    1d38:	b6 01       	movw	r22, r12
    1d3a:	0e 94 00 19 	call	0x3200	; 0x3200 <__cmpsf2>
    1d3e:	88 23       	and	r24, r24
    1d40:	5c f0       	brlt	.+22     	; 0x1d58 <run_motor_control_loop+0x1f6>
			linear_error = 30;
		} else {
			linear_error += 30;
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 ef       	ldi	r20, 0xF0	; 240
    1d48:	51 e4       	ldi	r21, 0x41	; 65
    1d4a:	c7 01       	movw	r24, r14
    1d4c:	b6 01       	movw	r22, r12
    1d4e:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
    1d52:	6b 01       	movw	r12, r22
    1d54:	7c 01       	movw	r14, r24
    1d56:	08 c0       	rjmp	.+16     	; 0x1d68 <run_motor_control_loop+0x206>
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	if (has_puck()) {
		if (linear_error<0){
			linear_error = 30;
    1d58:	0f 2e       	mov	r0, r31
    1d5a:	c1 2c       	mov	r12, r1
    1d5c:	d1 2c       	mov	r13, r1
    1d5e:	f0 ef       	ldi	r31, 0xF0	; 240
    1d60:	ef 2e       	mov	r14, r31
    1d62:	f1 e4       	ldi	r31, 0x41	; 65
    1d64:	ff 2e       	mov	r15, r31
    1d66:	f0 2d       	mov	r31, r0
		} else {
			linear_error += 30;
		}
	}
	float linear_derivative = (linear_error-previous_linear_error)/TIMESTEP;
    1d68:	20 91 ca 01 	lds	r18, 0x01CA
    1d6c:	30 91 cb 01 	lds	r19, 0x01CB
    1d70:	40 91 cc 01 	lds	r20, 0x01CC
    1d74:	50 91 cd 01 	lds	r21, 0x01CD
    1d78:	c7 01       	movw	r24, r14
    1d7a:	b6 01       	movw	r22, r12
    1d7c:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
    1d80:	2f e6       	ldi	r18, 0x6F	; 111
    1d82:	32 e1       	ldi	r19, 0x12	; 18
    1d84:	43 e8       	ldi	r20, 0x83	; 131
    1d86:	5a e3       	ldi	r21, 0x3A	; 58
    1d88:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    1d8c:	4b 01       	movw	r8, r22
    1d8e:	5c 01       	movw	r10, r24
	float linear_output = linear_kp*linear_error - linear_kd*linear_derivative;
    1d90:	a7 01       	movw	r20, r14
    1d92:	96 01       	movw	r18, r12
    1d94:	6b a9       	ldd	r22, Y+51	; 0x33
    1d96:	7c a9       	ldd	r23, Y+52	; 0x34
    1d98:	8d a9       	ldd	r24, Y+53	; 0x35
    1d9a:	9e a9       	ldd	r25, Y+54	; 0x36
    1d9c:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1da0:	2b 01       	movw	r4, r22
    1da2:	3c 01       	movw	r6, r24
    1da4:	a5 01       	movw	r20, r10
    1da6:	94 01       	movw	r18, r8
    1da8:	6f a9       	ldd	r22, Y+55	; 0x37
    1daa:	78 ad       	ldd	r23, Y+56	; 0x38
    1dac:	89 ad       	ldd	r24, Y+57	; 0x39
    1dae:	9a ad       	ldd	r25, Y+58	; 0x3a
    1db0:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1db4:	9b 01       	movw	r18, r22
    1db6:	ac 01       	movw	r20, r24
    1db8:	c3 01       	movw	r24, r6
    1dba:	b2 01       	movw	r22, r4
    1dbc:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
    1dc0:	2b 01       	movw	r4, r22
    1dc2:	3c 01       	movw	r6, r24
	previous_linear_error = linear_error;
    1dc4:	c0 92 ca 01 	sts	0x01CA, r12
    1dc8:	d0 92 cb 01 	sts	0x01CB, r13
    1dcc:	e0 92 cc 01 	sts	0x01CC, r14
    1dd0:	f0 92 cd 01 	sts	0x01CD, r15
	if(linear_output>40.0){linear_output=40.0;}
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	52 e4       	ldi	r21, 0x42	; 66
    1ddc:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__gesf2>
    1de0:	18 16       	cp	r1, r24
    1de2:	44 f4       	brge	.+16     	; 0x1df4 <run_motor_control_loop+0x292>
    1de4:	0f 2e       	mov	r0, r31
    1de6:	41 2c       	mov	r4, r1
    1de8:	51 2c       	mov	r5, r1
    1dea:	f0 e2       	ldi	r31, 0x20	; 32
    1dec:	6f 2e       	mov	r6, r31
    1dee:	f2 e4       	ldi	r31, 0x42	; 66
    1df0:	7f 2e       	mov	r7, r31
    1df2:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	52 e4       	ldi	r21, 0x42	; 66
    1dfc:	c3 01       	movw	r24, r6
    1dfe:	b2 01       	movw	r22, r4
    1e00:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    1e04:	6b 01       	movw	r12, r22
    1e06:	7c 01       	movw	r14, r24
	
	if (linear_derivative < 0.1 && angular_derivative < 0.01) {
    1e08:	2d ec       	ldi	r18, 0xCD	; 205
    1e0a:	3c ec       	ldi	r19, 0xCC	; 204
    1e0c:	4c ec       	ldi	r20, 0xCC	; 204
    1e0e:	5d e3       	ldi	r21, 0x3D	; 61
    1e10:	c5 01       	movw	r24, r10
    1e12:	b4 01       	movw	r22, r8
    1e14:	0e 94 00 19 	call	0x3200	; 0x3200 <__cmpsf2>
    1e18:	88 23       	and	r24, r24
    1e1a:	0c f5       	brge	.+66     	; 0x1e5e <run_motor_control_loop+0x2fc>
    1e1c:	2a e0       	ldi	r18, 0x0A	; 10
    1e1e:	37 ed       	ldi	r19, 0xD7	; 215
    1e20:	43 e2       	ldi	r20, 0x23	; 35
    1e22:	5c e3       	ldi	r21, 0x3C	; 60
    1e24:	6d 89       	ldd	r22, Y+21	; 0x15
    1e26:	7e 89       	ldd	r23, Y+22	; 0x16
    1e28:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2c:	0e 94 00 19 	call	0x3200	; 0x3200 <__cmpsf2>
    1e30:	88 23       	and	r24, r24
    1e32:	ac f4       	brge	.+42     	; 0x1e5e <run_motor_control_loop+0x2fc>
		angular_output = 0.2*fabs(theta_error)/theta_error;
    1e34:	2d ec       	ldi	r18, 0xCD	; 205
    1e36:	3c ec       	ldi	r19, 0xCC	; 204
    1e38:	4c e4       	ldi	r20, 0x4C	; 76
    1e3a:	5e e3       	ldi	r21, 0x3E	; 62
    1e3c:	69 81       	ldd	r22, Y+1	; 0x01
    1e3e:	7a 81       	ldd	r23, Y+2	; 0x02
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	9f 77       	andi	r25, 0x7F	; 127
    1e46:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1e4a:	29 81       	ldd	r18, Y+1	; 0x01
    1e4c:	3a 81       	ldd	r19, Y+2	; 0x02
    1e4e:	4b 81       	ldd	r20, Y+3	; 0x03
    1e50:	5c 81       	ldd	r21, Y+4	; 0x04
    1e52:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    1e56:	6d 87       	std	Y+13, r22	; 0x0d
    1e58:	7e 87       	std	Y+14, r23	; 0x0e
    1e5a:	8f 87       	std	Y+15, r24	; 0x0f
    1e5c:	98 8b       	std	Y+16, r25	; 0x10
	}
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    1e5e:	8d 84       	ldd	r8, Y+13	; 0x0d
    1e60:	9e 84       	ldd	r9, Y+14	; 0x0e
    1e62:	af 84       	ldd	r10, Y+15	; 0x0f
    1e64:	b8 88       	ldd	r11, Y+16	; 0x10
    1e66:	b7 fa       	bst	r11, 7
    1e68:	b0 94       	com	r11
    1e6a:	b7 f8       	bld	r11, 7
    1e6c:	b0 94       	com	r11
	right_duty_cycle = angular_output;
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    1e6e:	69 81       	ldd	r22, Y+1	; 0x01
    1e70:	7a 81       	ldd	r23, Y+2	; 0x02
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	9f 77       	andi	r25, 0x7F	; 127
    1e78:	2b ed       	ldi	r18, 0xDB	; 219
    1e7a:	3f e0       	ldi	r19, 0x0F	; 15
    1e7c:	49 ec       	ldi	r20, 0xC9	; 201
    1e7e:	5f e3       	ldi	r21, 0x3F	; 63
    1e80:	0e 94 00 19 	call	0x3200	; 0x3200 <__cmpsf2>
    1e84:	88 23       	and	r24, r24
    1e86:	0c f5       	brge	.+66     	; 0x1eca <run_motor_control_loop+0x368>
		left_duty_cycle += linear_output;
    1e88:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e8a:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e8c:	4f 85       	ldd	r20, Y+15	; 0x0f
    1e8e:	58 89       	ldd	r21, Y+16	; 0x10
    1e90:	c7 01       	movw	r24, r14
    1e92:	b6 01       	movw	r22, r12
    1e94:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
    1e98:	60 93 24 01 	sts	0x0124, r22
    1e9c:	70 93 25 01 	sts	0x0125, r23
    1ea0:	80 93 26 01 	sts	0x0126, r24
    1ea4:	90 93 27 01 	sts	0x0127, r25
		right_duty_cycle += linear_output;
    1ea8:	a7 01       	movw	r20, r14
    1eaa:	96 01       	movw	r18, r12
    1eac:	6d 85       	ldd	r22, Y+13	; 0x0d
    1eae:	7e 85       	ldd	r23, Y+14	; 0x0e
    1eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb2:	98 89       	ldd	r25, Y+16	; 0x10
    1eb4:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
    1eb8:	60 93 20 01 	sts	0x0120, r22
    1ebc:	70 93 21 01 	sts	0x0121, r23
    1ec0:	80 93 22 01 	sts	0x0122, r24
    1ec4:	90 93 23 01 	sts	0x0123, r25
    1ec8:	1e c0       	rjmp	.+60     	; 0x1f06 <run_motor_control_loop+0x3a4>
		} else{
		left_duty_cycle -= linear_output;
    1eca:	a7 01       	movw	r20, r14
    1ecc:	96 01       	movw	r18, r12
    1ece:	c5 01       	movw	r24, r10
    1ed0:	b4 01       	movw	r22, r8
    1ed2:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
    1ed6:	60 93 24 01 	sts	0x0124, r22
    1eda:	70 93 25 01 	sts	0x0125, r23
    1ede:	80 93 26 01 	sts	0x0126, r24
    1ee2:	90 93 27 01 	sts	0x0127, r25
		right_duty_cycle -= linear_output;
    1ee6:	a7 01       	movw	r20, r14
    1ee8:	96 01       	movw	r18, r12
    1eea:	6d 85       	ldd	r22, Y+13	; 0x0d
    1eec:	7e 85       	ldd	r23, Y+14	; 0x0e
    1eee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef0:	98 89       	ldd	r25, Y+16	; 0x10
    1ef2:	0e 94 21 18 	call	0x3042	; 0x3042 <__subsf3>
    1ef6:	60 93 20 01 	sts	0x0120, r22
    1efa:	70 93 21 01 	sts	0x0121, r23
    1efe:	80 93 22 01 	sts	0x0122, r24
    1f02:	90 93 23 01 	sts	0x0123, r25
	
	//If it has the puck, don't let either of the motors spin backwards 

		
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	a9 01       	movw	r20, r18
    1f0c:	60 91 24 01 	lds	r22, 0x0124
    1f10:	70 91 25 01 	lds	r23, 0x0125
    1f14:	80 91 26 01 	lds	r24, 0x0126
    1f18:	90 91 27 01 	lds	r25, 0x0127
    1f1c:	0e 94 00 19 	call	0x3200	; 0x3200 <__cmpsf2>
    1f20:	88 23       	and	r24, r24
    1f22:	14 f4       	brge	.+4      	; 0x1f28 <run_motor_control_loop+0x3c6>
    1f24:	29 98       	cbi	0x05, 1	; 5
    1f26:	01 c0       	rjmp	.+2      	; 0x1f2a <run_motor_control_loop+0x3c8>
	else{set(PORTB,1);}
    1f28:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	a9 01       	movw	r20, r18
    1f30:	60 91 20 01 	lds	r22, 0x0120
    1f34:	70 91 21 01 	lds	r23, 0x0121
    1f38:	80 91 22 01 	lds	r24, 0x0122
    1f3c:	90 91 23 01 	lds	r25, 0x0123
    1f40:	0e 94 00 19 	call	0x3200	; 0x3200 <__cmpsf2>
    1f44:	88 23       	and	r24, r24
    1f46:	14 f4       	brge	.+4      	; 0x1f4c <run_motor_control_loop+0x3ea>
    1f48:	2b 98       	cbi	0x05, 3	; 5
    1f4a:	01 c0       	rjmp	.+2      	; 0x1f4e <run_motor_control_loop+0x3ec>
	else{set(PORTB,3);}
    1f4c:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    1f4e:	80 90 24 01 	lds	r8, 0x0124
    1f52:	90 90 25 01 	lds	r9, 0x0125
    1f56:	a0 90 26 01 	lds	r10, 0x0126
    1f5a:	b0 90 27 01 	lds	r11, 0x0127
    1f5e:	e8 94       	clt
    1f60:	b7 f8       	bld	r11, 7
    1f62:	80 92 24 01 	sts	0x0124, r8
    1f66:	90 92 25 01 	sts	0x0125, r9
    1f6a:	a0 92 26 01 	sts	0x0126, r10
    1f6e:	b0 92 27 01 	sts	0x0127, r11
	right_duty_cycle = fabs(right_duty_cycle);
    1f72:	c0 90 20 01 	lds	r12, 0x0120
    1f76:	d0 90 21 01 	lds	r13, 0x0121
    1f7a:	e0 90 22 01 	lds	r14, 0x0122
    1f7e:	f0 90 23 01 	lds	r15, 0x0123
    1f82:	e8 94       	clt
    1f84:	f7 f8       	bld	r15, 7
    1f86:	c0 92 20 01 	sts	0x0120, r12
    1f8a:	d0 92 21 01 	sts	0x0121, r13
    1f8e:	e0 92 22 01 	sts	0x0122, r14
    1f92:	f0 92 23 01 	sts	0x0123, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    1f96:	a7 01       	movw	r20, r14
    1f98:	96 01       	movw	r18, r12
    1f9a:	c5 01       	movw	r24, r10
    1f9c:	b4 01       	movw	r22, r8
    1f9e:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__gesf2>
    1fa2:	18 16       	cp	r1, r24
    1fa4:	2c f0       	brlt	.+10     	; 0x1fb0 <run_motor_control_loop+0x44e>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    1fa6:	1c 2d       	mov	r17, r12
    1fa8:	0d 2d       	mov	r16, r13
    1faa:	7e 2c       	mov	r7, r14
    1fac:	6f 2c       	mov	r6, r15
    1fae:	04 c0       	rjmp	.+8      	; 0x1fb8 <run_motor_control_loop+0x456>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    1fb0:	18 2d       	mov	r17, r8
    1fb2:	09 2d       	mov	r16, r9
    1fb4:	7a 2c       	mov	r7, r10
    1fb6:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    1fb8:	29 89       	ldd	r18, Y+17	; 0x11
    1fba:	3a 89       	ldd	r19, Y+18	; 0x12
    1fbc:	4b 89       	ldd	r20, Y+19	; 0x13
    1fbe:	5c 89       	ldd	r21, Y+20	; 0x14
    1fc0:	61 2f       	mov	r22, r17
    1fc2:	70 2f       	mov	r23, r16
    1fc4:	87 2d       	mov	r24, r7
    1fc6:	96 2d       	mov	r25, r6
    1fc8:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__gesf2>
    1fcc:	18 16       	cp	r1, r24
    1fce:	64 f5       	brge	.+88     	; 0x2028 <run_motor_control_loop+0x4c6>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    1fd0:	21 2f       	mov	r18, r17
    1fd2:	30 2f       	mov	r19, r16
    1fd4:	47 2d       	mov	r20, r7
    1fd6:	56 2d       	mov	r21, r6
    1fd8:	c5 01       	movw	r24, r10
    1fda:	b4 01       	movw	r22, r8
    1fdc:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    1fe0:	29 89       	ldd	r18, Y+17	; 0x11
    1fe2:	3a 89       	ldd	r19, Y+18	; 0x12
    1fe4:	4b 89       	ldd	r20, Y+19	; 0x13
    1fe6:	5c 89       	ldd	r21, Y+20	; 0x14
    1fe8:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    1fec:	60 93 24 01 	sts	0x0124, r22
    1ff0:	70 93 25 01 	sts	0x0125, r23
    1ff4:	80 93 26 01 	sts	0x0126, r24
    1ff8:	90 93 27 01 	sts	0x0127, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    1ffc:	21 2f       	mov	r18, r17
    1ffe:	30 2f       	mov	r19, r16
    2000:	47 2d       	mov	r20, r7
    2002:	56 2d       	mov	r21, r6
    2004:	c7 01       	movw	r24, r14
    2006:	b6 01       	movw	r22, r12
    2008:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    200c:	29 89       	ldd	r18, Y+17	; 0x11
    200e:	3a 89       	ldd	r19, Y+18	; 0x12
    2010:	4b 89       	ldd	r20, Y+19	; 0x13
    2012:	5c 89       	ldd	r21, Y+20	; 0x14
    2014:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    2018:	60 93 20 01 	sts	0x0120, r22
    201c:	70 93 21 01 	sts	0x0121, r23
    2020:	80 93 22 01 	sts	0x0122, r24
    2024:	90 93 23 01 	sts	0x0123, r25
	}
	


	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    2028:	08 e8       	ldi	r16, 0x88	; 136
    202a:	10 e0       	ldi	r17, 0x00	; 0
    202c:	f8 01       	movw	r30, r16
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	0e 94 ab 19 	call	0x3356	; 0x3356 <__floatunsisf>
    203a:	20 91 24 01 	lds	r18, 0x0124
    203e:	30 91 25 01 	lds	r19, 0x0125
    2042:	40 91 26 01 	lds	r20, 0x0126
    2046:	50 91 27 01 	lds	r21, 0x0127
    204a:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    204e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2052:	70 93 8b 00 	sts	0x008B, r23
    2056:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    205a:	f8 01       	movw	r30, r16
    205c:	60 81       	ld	r22, Z
    205e:	71 81       	ldd	r23, Z+1	; 0x01
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 ab 19 	call	0x3356	; 0x3356 <__floatunsisf>
    2068:	20 91 20 01 	lds	r18, 0x0120
    206c:	30 91 21 01 	lds	r19, 0x0121
    2070:	40 91 22 01 	lds	r20, 0x0122
    2074:	50 91 23 01 	lds	r21, 0x0123
    2078:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    207c:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixunssfsi>
    2080:	70 93 8d 00 	sts	0x008D, r23
    2084:	60 93 8c 00 	sts	0x008C, r22

}
    2088:	68 96       	adiw	r28, 0x18	; 24
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	ff 90       	pop	r15
    209e:	ef 90       	pop	r14
    20a0:	df 90       	pop	r13
    20a2:	cf 90       	pop	r12
    20a4:	bf 90       	pop	r11
    20a6:	af 90       	pop	r10
    20a8:	9f 90       	pop	r9
    20aa:	8f 90       	pop	r8
    20ac:	7f 90       	pop	r7
    20ae:	6f 90       	pop	r6
    20b0:	5f 90       	pop	r5
    20b2:	4f 90       	pop	r4
    20b4:	08 95       	ret

000020b6 <m_bus_init>:
    20b6:	58 9a       	sbi	0x0b, 0	; 11
    20b8:	59 9a       	sbi	0x0b, 1	; 11
    20ba:	5a 9a       	sbi	0x0b, 2	; 11
    20bc:	8c e0       	ldi	r24, 0x0C	; 12
    20be:	80 93 b8 00 	sts	0x00B8, r24
    20c2:	e9 e6       	ldi	r30, 0x69	; 105
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	80 62       	ori	r24, 0x20	; 32
    20ca:	80 83       	st	Z, r24
    20cc:	80 81       	ld	r24, Z
    20ce:	8f 7e       	andi	r24, 0xEF	; 239
    20d0:	80 83       	st	Z, r24
    20d2:	ea 9a       	sbi	0x1d, 2	; 29
    20d4:	78 94       	sei
    20d6:	08 95       	ret

000020d8 <m_rf_open>:
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	18 2f       	mov	r17, r24
    20e0:	d6 2f       	mov	r29, r22
    20e2:	c4 2f       	mov	r28, r20
    20e4:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <m_bus_init>
    20e8:	94 ea       	ldi	r25, 0xA4	; 164
    20ea:	90 93 bc 00 	sts	0x00BC, r25
    20ee:	ec eb       	ldi	r30, 0xBC	; 188
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	90 81       	ld	r25, Z
    20f4:	99 23       	and	r25, r25
    20f6:	ec f7       	brge	.-6      	; 0x20f2 <m_rf_open+0x1a>
    20f8:	90 e5       	ldi	r25, 0x50	; 80
    20fa:	90 93 bb 00 	sts	0x00BB, r25
    20fe:	94 e8       	ldi	r25, 0x84	; 132
    2100:	90 93 bc 00 	sts	0x00BC, r25
    2104:	ec eb       	ldi	r30, 0xBC	; 188
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	90 81       	ld	r25, Z
    210a:	99 23       	and	r25, r25
    210c:	ec f7       	brge	.-6      	; 0x2108 <m_rf_open+0x30>
    210e:	90 91 b9 00 	lds	r25, 0x00B9
    2112:	98 7f       	andi	r25, 0xF8	; 248
    2114:	90 32       	cpi	r25, 0x20	; 32
    2116:	29 f4       	brne	.+10     	; 0x2122 <m_rf_open+0x4a>
    2118:	84 e9       	ldi	r24, 0x94	; 148
    211a:	80 93 bc 00 	sts	0x00BC, r24
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	2d c0       	rjmp	.+90     	; 0x217c <m_rf_open+0xa4>
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	80 93 bb 00 	sts	0x00BB, r24
    2128:	84 e8       	ldi	r24, 0x84	; 132
    212a:	80 93 bc 00 	sts	0x00BC, r24
    212e:	ec eb       	ldi	r30, 0xBC	; 188
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	90 81       	ld	r25, Z
    2134:	99 23       	and	r25, r25
    2136:	ec f7       	brge	.-6      	; 0x2132 <m_rf_open+0x5a>
    2138:	10 93 bb 00 	sts	0x00BB, r17
    213c:	84 e8       	ldi	r24, 0x84	; 132
    213e:	80 93 bc 00 	sts	0x00BC, r24
    2142:	ec eb       	ldi	r30, 0xBC	; 188
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	88 23       	and	r24, r24
    214a:	ec f7       	brge	.-6      	; 0x2146 <m_rf_open+0x6e>
    214c:	d0 93 bb 00 	sts	0x00BB, r29
    2150:	84 e8       	ldi	r24, 0x84	; 132
    2152:	80 93 bc 00 	sts	0x00BC, r24
    2156:	ec eb       	ldi	r30, 0xBC	; 188
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	88 23       	and	r24, r24
    215e:	ec f7       	brge	.-6      	; 0x215a <m_rf_open+0x82>
    2160:	c0 93 bb 00 	sts	0x00BB, r28
    2164:	84 e8       	ldi	r24, 0x84	; 132
    2166:	80 93 bc 00 	sts	0x00BC, r24
    216a:	ec eb       	ldi	r30, 0xBC	; 188
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	88 23       	and	r24, r24
    2172:	ec f7       	brge	.-6      	; 0x216e <m_rf_open+0x96>
    2174:	84 e9       	ldi	r24, 0x94	; 148
    2176:	80 93 bc 00 	sts	0x00BC, r24
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	df 91       	pop	r29
    217e:	cf 91       	pop	r28
    2180:	1f 91       	pop	r17
    2182:	08 95       	ret

00002184 <m_rf_read>:
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	9c 01       	movw	r18, r24
    218a:	84 ea       	ldi	r24, 0xA4	; 164
    218c:	80 93 bc 00 	sts	0x00BC, r24
    2190:	ec eb       	ldi	r30, 0xBC	; 188
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	90 81       	ld	r25, Z
    2196:	99 23       	and	r25, r25
    2198:	ec f7       	brge	.-6      	; 0x2194 <m_rf_read+0x10>
    219a:	81 e5       	ldi	r24, 0x51	; 81
    219c:	80 93 bb 00 	sts	0x00BB, r24
    21a0:	84 e8       	ldi	r24, 0x84	; 132
    21a2:	80 93 bc 00 	sts	0x00BC, r24
    21a6:	ec eb       	ldi	r30, 0xBC	; 188
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	90 81       	ld	r25, Z
    21ac:	99 23       	and	r25, r25
    21ae:	ec f7       	brge	.-6      	; 0x21aa <m_rf_read+0x26>
    21b0:	80 91 b9 00 	lds	r24, 0x00B9
    21b4:	88 7f       	andi	r24, 0xF8	; 248
    21b6:	88 34       	cpi	r24, 0x48	; 72
    21b8:	29 f4       	brne	.+10     	; 0x21c4 <m_rf_read+0x40>
    21ba:	84 e9       	ldi	r24, 0x94	; 148
    21bc:	80 93 bc 00 	sts	0x00BC, r24
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	41 c0       	rjmp	.+130    	; 0x2246 <m_rf_read+0xc2>
    21c4:	84 ec       	ldi	r24, 0xC4	; 196
    21c6:	80 93 bc 00 	sts	0x00BC, r24
    21ca:	ec eb       	ldi	r30, 0xBC	; 188
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	90 81       	ld	r25, Z
    21d0:	99 23       	and	r25, r25
    21d2:	ec f7       	brge	.-6      	; 0x21ce <m_rf_read+0x4a>
    21d4:	40 91 bb 00 	lds	r20, 0x00BB
    21d8:	46 13       	cpse	r20, r22
    21da:	09 c0       	rjmp	.+18     	; 0x21ee <m_rf_read+0x6a>
    21dc:	84 2f       	mov	r24, r20
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	18 16       	cp	r1, r24
    21e4:	19 06       	cpc	r1, r25
    21e6:	44 f0       	brlt	.+16     	; 0x21f8 <m_rf_read+0x74>
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	1a c0       	rjmp	.+52     	; 0x2222 <m_rf_read+0x9e>
    21ee:	84 e9       	ldi	r24, 0x94	; 148
    21f0:	80 93 bc 00 	sts	0x00BC, r24
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	27 c0       	rjmp	.+78     	; 0x2246 <m_rf_read+0xc2>
    21f8:	d9 01       	movw	r26, r18
    21fa:	50 e0       	ldi	r21, 0x00	; 0
    21fc:	41 50       	subi	r20, 0x01	; 1
    21fe:	51 09       	sbc	r21, r1
    2200:	b9 01       	movw	r22, r18
    2202:	64 0f       	add	r22, r20
    2204:	75 1f       	adc	r23, r21
    2206:	ec eb       	ldi	r30, 0xBC	; 188
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	84 ec       	ldi	r24, 0xC4	; 196
    220c:	cb eb       	ldi	r28, 0xBB	; 187
    220e:	d0 e0       	ldi	r29, 0x00	; 0
    2210:	80 83       	st	Z, r24
    2212:	90 81       	ld	r25, Z
    2214:	99 23       	and	r25, r25
    2216:	ec f7       	brge	.-6      	; 0x2212 <m_rf_read+0x8e>
    2218:	98 81       	ld	r25, Y
    221a:	9d 93       	st	X+, r25
    221c:	a6 17       	cp	r26, r22
    221e:	b7 07       	cpc	r27, r23
    2220:	b9 f7       	brne	.-18     	; 0x2210 <m_rf_read+0x8c>
    2222:	84 e8       	ldi	r24, 0x84	; 132
    2224:	80 93 bc 00 	sts	0x00BC, r24
    2228:	ec eb       	ldi	r30, 0xBC	; 188
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	90 81       	ld	r25, Z
    222e:	99 23       	and	r25, r25
    2230:	ec f7       	brge	.-6      	; 0x222c <m_rf_read+0xa8>
    2232:	80 91 bb 00 	lds	r24, 0x00BB
    2236:	f9 01       	movw	r30, r18
    2238:	e4 0f       	add	r30, r20
    223a:	f5 1f       	adc	r31, r21
    223c:	80 83       	st	Z, r24
    223e:	84 e9       	ldi	r24, 0x94	; 148
    2240:	80 93 bc 00 	sts	0x00BC, r24
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	08 95       	ret

0000224c <m_rf_send>:
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	f8 94       	cli
    2252:	94 ea       	ldi	r25, 0xA4	; 164
    2254:	90 93 bc 00 	sts	0x00BC, r25
    2258:	ec eb       	ldi	r30, 0xBC	; 188
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	90 81       	ld	r25, Z
    225e:	99 23       	and	r25, r25
    2260:	ec f7       	brge	.-6      	; 0x225c <m_rf_send+0x10>
    2262:	90 e5       	ldi	r25, 0x50	; 80
    2264:	90 93 bb 00 	sts	0x00BB, r25
    2268:	94 e8       	ldi	r25, 0x84	; 132
    226a:	90 93 bc 00 	sts	0x00BC, r25
    226e:	ec eb       	ldi	r30, 0xBC	; 188
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	90 81       	ld	r25, Z
    2274:	99 23       	and	r25, r25
    2276:	ec f7       	brge	.-6      	; 0x2272 <m_rf_send+0x26>
    2278:	90 91 b9 00 	lds	r25, 0x00B9
    227c:	98 7f       	andi	r25, 0xF8	; 248
    227e:	90 32       	cpi	r25, 0x20	; 32
    2280:	31 f4       	brne	.+12     	; 0x228e <m_rf_send+0x42>
    2282:	84 e9       	ldi	r24, 0x94	; 148
    2284:	80 93 bc 00 	sts	0x00BC, r24
    2288:	78 94       	sei
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	2d c0       	rjmp	.+90     	; 0x22e8 <m_rf_send+0x9c>
    228e:	93 e0       	ldi	r25, 0x03	; 3
    2290:	90 93 bb 00 	sts	0x00BB, r25
    2294:	94 e8       	ldi	r25, 0x84	; 132
    2296:	90 93 bc 00 	sts	0x00BC, r25
    229a:	ec eb       	ldi	r30, 0xBC	; 188
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	90 81       	ld	r25, Z
    22a0:	99 23       	and	r25, r25
    22a2:	ec f7       	brge	.-6      	; 0x229e <m_rf_send+0x52>
    22a4:	80 93 bb 00 	sts	0x00BB, r24
    22a8:	84 e8       	ldi	r24, 0x84	; 132
    22aa:	80 93 bc 00 	sts	0x00BC, r24
    22ae:	ec eb       	ldi	r30, 0xBC	; 188
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	88 23       	and	r24, r24
    22b6:	ec f7       	brge	.-6      	; 0x22b2 <m_rf_send+0x66>
    22b8:	44 23       	and	r20, r20
    22ba:	89 f0       	breq	.+34     	; 0x22de <m_rf_send+0x92>
    22bc:	db 01       	movw	r26, r22
    22be:	64 0f       	add	r22, r20
    22c0:	71 1d       	adc	r23, r1
    22c2:	cb eb       	ldi	r28, 0xBB	; 187
    22c4:	d0 e0       	ldi	r29, 0x00	; 0
    22c6:	ec eb       	ldi	r30, 0xBC	; 188
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	94 e8       	ldi	r25, 0x84	; 132
    22cc:	8d 91       	ld	r24, X+
    22ce:	88 83       	st	Y, r24
    22d0:	90 83       	st	Z, r25
    22d2:	80 81       	ld	r24, Z
    22d4:	88 23       	and	r24, r24
    22d6:	ec f7       	brge	.-6      	; 0x22d2 <m_rf_send+0x86>
    22d8:	a6 17       	cp	r26, r22
    22da:	b7 07       	cpc	r27, r23
    22dc:	b9 f7       	brne	.-18     	; 0x22cc <m_rf_send+0x80>
    22de:	84 e9       	ldi	r24, 0x94	; 148
    22e0:	80 93 bc 00 	sts	0x00BC, r24
    22e4:	78 94       	sei
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	08 95       	ret

000022ee <m_usb_init>:
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	80 93 d7 00 	sts	0x00D7, r24
    22f4:	80 ea       	ldi	r24, 0xA0	; 160
    22f6:	80 93 d8 00 	sts	0x00D8, r24
    22fa:	82 e1       	ldi	r24, 0x12	; 18
    22fc:	89 bd       	out	0x29, r24	; 41
    22fe:	09 b4       	in	r0, 0x29	; 41
    2300:	00 fe       	sbrs	r0, 0
    2302:	fd cf       	rjmp	.-6      	; 0x22fe <m_usb_init+0x10>
    2304:	80 e9       	ldi	r24, 0x90	; 144
    2306:	80 93 d8 00 	sts	0x00D8, r24
    230a:	10 92 e0 00 	sts	0x00E0, r1
    230e:	10 92 e0 01 	sts	0x01E0, r1
    2312:	10 92 de 01 	sts	0x01DE, r1
    2316:	8c e0       	ldi	r24, 0x0C	; 12
    2318:	80 93 e2 00 	sts	0x00E2, r24
    231c:	78 94       	sei
    231e:	08 95       	ret

00002320 <__vector_10>:
    2320:	1f 92       	push	r1
    2322:	0f 92       	push	r0
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	0f 92       	push	r0
    2328:	11 24       	eor	r1, r1
    232a:	8f 93       	push	r24
    232c:	9f 93       	push	r25
    232e:	ef 93       	push	r30
    2330:	ff 93       	push	r31
    2332:	e1 ee       	ldi	r30, 0xE1	; 225
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	10 82       	st	Z, r1
    233a:	83 ff       	sbrs	r24, 3
    233c:	11 c0       	rjmp	.+34     	; 0x2360 <__vector_10+0x40>
    233e:	10 92 e9 00 	sts	0x00E9, r1
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	90 93 eb 00 	sts	0x00EB, r25
    2348:	10 92 ec 00 	sts	0x00EC, r1
    234c:	92 e1       	ldi	r25, 0x12	; 18
    234e:	90 93 ed 00 	sts	0x00ED, r25
    2352:	98 e0       	ldi	r25, 0x08	; 8
    2354:	90 93 f0 00 	sts	0x00F0, r25
    2358:	10 92 e0 01 	sts	0x01E0, r1
    235c:	10 92 de 01 	sts	0x01DE, r1
    2360:	82 ff       	sbrs	r24, 2
    2362:	13 c0       	rjmp	.+38     	; 0x238a <__vector_10+0x6a>
    2364:	80 91 e0 01 	lds	r24, 0x01E0
    2368:	88 23       	and	r24, r24
    236a:	79 f0       	breq	.+30     	; 0x238a <__vector_10+0x6a>
    236c:	80 91 df 01 	lds	r24, 0x01DF
    2370:	88 23       	and	r24, r24
    2372:	59 f0       	breq	.+22     	; 0x238a <__vector_10+0x6a>
    2374:	81 50       	subi	r24, 0x01	; 1
    2376:	80 93 df 01 	sts	0x01DF, r24
    237a:	81 11       	cpse	r24, r1
    237c:	06 c0       	rjmp	.+12     	; 0x238a <__vector_10+0x6a>
    237e:	84 e0       	ldi	r24, 0x04	; 4
    2380:	80 93 e9 00 	sts	0x00E9, r24
    2384:	8a e3       	ldi	r24, 0x3A	; 58
    2386:	80 93 e8 00 	sts	0x00E8, r24
    238a:	ff 91       	pop	r31
    238c:	ef 91       	pop	r30
    238e:	9f 91       	pop	r25
    2390:	8f 91       	pop	r24
    2392:	0f 90       	pop	r0
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	0f 90       	pop	r0
    2398:	1f 90       	pop	r1
    239a:	18 95       	reti

0000239c <__vector_11>:
    239c:	1f 92       	push	r1
    239e:	0f 92       	push	r0
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	0f 92       	push	r0
    23a4:	11 24       	eor	r1, r1
    23a6:	0f 93       	push	r16
    23a8:	1f 93       	push	r17
    23aa:	2f 93       	push	r18
    23ac:	3f 93       	push	r19
    23ae:	4f 93       	push	r20
    23b0:	5f 93       	push	r21
    23b2:	6f 93       	push	r22
    23b4:	7f 93       	push	r23
    23b6:	8f 93       	push	r24
    23b8:	9f 93       	push	r25
    23ba:	af 93       	push	r26
    23bc:	bf 93       	push	r27
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	ef 93       	push	r30
    23c4:	ff 93       	push	r31
    23c6:	10 92 e9 00 	sts	0x00E9, r1
    23ca:	80 91 e8 00 	lds	r24, 0x00E8
    23ce:	83 ff       	sbrs	r24, 3
    23d0:	4c c1       	rjmp	.+664    	; 0x266a <__vector_11+0x2ce>
    23d2:	e1 ef       	ldi	r30, 0xF1	; 241
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	60 81       	ld	r22, Z
    23d8:	80 81       	ld	r24, Z
    23da:	20 81       	ld	r18, Z
    23dc:	90 81       	ld	r25, Z
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	39 2b       	or	r19, r25
    23e2:	40 81       	ld	r20, Z
    23e4:	90 81       	ld	r25, Z
    23e6:	50 e0       	ldi	r21, 0x00	; 0
    23e8:	59 2b       	or	r21, r25
    23ea:	70 81       	ld	r23, Z
    23ec:	c0 81       	ld	r28, Z
    23ee:	92 ef       	ldi	r25, 0xF2	; 242
    23f0:	90 93 e8 00 	sts	0x00E8, r25
    23f4:	86 30       	cpi	r24, 0x06	; 6
    23f6:	09 f0       	breq	.+2      	; 0x23fa <__vector_11+0x5e>
    23f8:	58 c0       	rjmp	.+176    	; 0x24aa <__vector_11+0x10e>
    23fa:	04 c0       	rjmp	.+8      	; 0x2404 <__vector_11+0x68>
    23fc:	81 e2       	ldi	r24, 0x21	; 33
    23fe:	80 93 eb 00 	sts	0x00EB, r24
    2402:	3a c1       	rjmp	.+628    	; 0x2678 <__vector_11+0x2dc>
    2404:	66 e0       	ldi	r22, 0x06	; 6
    2406:	84 e2       	ldi	r24, 0x24	; 36
    2408:	91 e0       	ldi	r25, 0x01	; 1
    240a:	fc 01       	movw	r30, r24
    240c:	a5 91       	lpm	r26, Z+
    240e:	b4 91       	lpm	r27, Z
    2410:	2a 17       	cp	r18, r26
    2412:	3b 07       	cpc	r19, r27
    2414:	11 f0       	breq	.+4      	; 0x241a <__vector_11+0x7e>
    2416:	07 96       	adiw	r24, 0x07	; 7
    2418:	23 c0       	rjmp	.+70     	; 0x2460 <__vector_11+0xc4>
    241a:	fc 01       	movw	r30, r24
    241c:	32 96       	adiw	r30, 0x02	; 2
    241e:	a5 91       	lpm	r26, Z+
    2420:	b4 91       	lpm	r27, Z
    2422:	4a 17       	cp	r20, r26
    2424:	5b 07       	cpc	r21, r27
    2426:	11 f0       	breq	.+4      	; 0x242c <__vector_11+0x90>
    2428:	07 96       	adiw	r24, 0x07	; 7
    242a:	1a c0       	rjmp	.+52     	; 0x2460 <__vector_11+0xc4>
    242c:	fc 01       	movw	r30, r24
    242e:	34 96       	adiw	r30, 0x04	; 4
    2430:	45 91       	lpm	r20, Z+
    2432:	54 91       	lpm	r21, Z
    2434:	fc 01       	movw	r30, r24
    2436:	36 96       	adiw	r30, 0x06	; 6
    2438:	24 91       	lpm	r18, Z
    243a:	87 2f       	mov	r24, r23
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9c 2b       	or	r25, r28
    2440:	8f 3f       	cpi	r24, 0xFF	; 255
    2442:	91 05       	cpc	r25, r1
    2444:	19 f0       	breq	.+6      	; 0x244c <__vector_11+0xb0>
    2446:	10 f0       	brcs	.+4      	; 0x244c <__vector_11+0xb0>
    2448:	8f ef       	ldi	r24, 0xFF	; 255
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	82 17       	cp	r24, r18
    244e:	08 f4       	brcc	.+2      	; 0x2452 <__vector_11+0xb6>
    2450:	28 2f       	mov	r18, r24
    2452:	a8 ee       	ldi	r26, 0xE8	; 232
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	70 e1       	ldi	r23, 0x10	; 16
    2458:	6e ef       	ldi	r22, 0xFE	; 254
    245a:	c1 ef       	ldi	r28, 0xF1	; 241
    245c:	d0 e0       	ldi	r29, 0x00	; 0
    245e:	03 c0       	rjmp	.+6      	; 0x2466 <__vector_11+0xca>
    2460:	61 50       	subi	r22, 0x01	; 1
    2462:	99 f6       	brne	.-90     	; 0x240a <__vector_11+0x6e>
    2464:	cb cf       	rjmp	.-106    	; 0x23fc <__vector_11+0x60>
    2466:	8c 91       	ld	r24, X
    2468:	98 2f       	mov	r25, r24
    246a:	95 70       	andi	r25, 0x05	; 5
    246c:	e1 f3       	breq	.-8      	; 0x2466 <__vector_11+0xca>
    246e:	82 fd       	sbrc	r24, 2
    2470:	03 c1       	rjmp	.+518    	; 0x2678 <__vector_11+0x2dc>
    2472:	32 2f       	mov	r19, r18
    2474:	21 31       	cpi	r18, 0x11	; 17
    2476:	08 f0       	brcs	.+2      	; 0x247a <__vector_11+0xde>
    2478:	37 2f       	mov	r19, r23
    247a:	33 23       	and	r19, r19
    247c:	09 f4       	brne	.+2      	; 0x2480 <__vector_11+0xe4>
    247e:	f9 c0       	rjmp	.+498    	; 0x2672 <__vector_11+0x2d6>
    2480:	fa 01       	movw	r30, r20
    2482:	83 2f       	mov	r24, r19
    2484:	94 91       	lpm	r25, Z
    2486:	98 83       	st	Y, r25
    2488:	81 50       	subi	r24, 0x01	; 1
    248a:	31 96       	adiw	r30, 0x01	; 1
    248c:	81 11       	cpse	r24, r1
    248e:	fa cf       	rjmp	.-12     	; 0x2484 <__vector_11+0xe8>
    2490:	8f ef       	ldi	r24, 0xFF	; 255
    2492:	83 0f       	add	r24, r19
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	01 96       	adiw	r24, 0x01	; 1
    2498:	48 0f       	add	r20, r24
    249a:	59 1f       	adc	r21, r25
    249c:	23 1b       	sub	r18, r19
    249e:	6c 93       	st	X, r22
    24a0:	21 11       	cpse	r18, r1
    24a2:	e1 cf       	rjmp	.-62     	; 0x2466 <__vector_11+0xca>
    24a4:	30 31       	cpi	r19, 0x10	; 16
    24a6:	f9 f2       	breq	.-66     	; 0x2466 <__vector_11+0xca>
    24a8:	e7 c0       	rjmp	.+462    	; 0x2678 <__vector_11+0x2dc>
    24aa:	85 30       	cpi	r24, 0x05	; 5
    24ac:	61 f4       	brne	.+24     	; 0x24c6 <__vector_11+0x12a>
    24ae:	8e ef       	ldi	r24, 0xFE	; 254
    24b0:	80 93 e8 00 	sts	0x00E8, r24
    24b4:	e8 ee       	ldi	r30, 0xE8	; 232
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	80 ff       	sbrs	r24, 0
    24bc:	fd cf       	rjmp	.-6      	; 0x24b8 <__vector_11+0x11c>
    24be:	20 68       	ori	r18, 0x80	; 128
    24c0:	20 93 e3 00 	sts	0x00E3, r18
    24c4:	d9 c0       	rjmp	.+434    	; 0x2678 <__vector_11+0x2dc>
    24c6:	89 30       	cpi	r24, 0x09	; 9
    24c8:	09 f0       	breq	.+2      	; 0x24cc <__vector_11+0x130>
    24ca:	35 c0       	rjmp	.+106    	; 0x2536 <__vector_11+0x19a>
    24cc:	61 11       	cpse	r22, r1
    24ce:	cd c0       	rjmp	.+410    	; 0x266a <__vector_11+0x2ce>
    24d0:	20 93 e0 01 	sts	0x01E0, r18
    24d4:	10 92 de 01 	sts	0x01DE, r1
    24d8:	10 92 df 01 	sts	0x01DF, r1
    24dc:	8e ef       	ldi	r24, 0xFE	; 254
    24de:	80 93 e8 00 	sts	0x00E8, r24
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	2d ec       	ldi	r18, 0xCD	; 205
    24e6:	31 e0       	ldi	r19, 0x01	; 1
    24e8:	c9 ee       	ldi	r28, 0xE9	; 233
    24ea:	d0 e0       	ldi	r29, 0x00	; 0
    24ec:	ab ee       	ldi	r26, 0xEB	; 235
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	0c ee       	ldi	r16, 0xEC	; 236
    24f2:	10 e0       	ldi	r17, 0x00	; 0
    24f4:	6d ee       	ldi	r22, 0xED	; 237
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	88 83       	st	Y, r24
    24fa:	a9 01       	movw	r20, r18
    24fc:	4f 5f       	subi	r20, 0xFF	; 255
    24fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2500:	f9 01       	movw	r30, r18
    2502:	94 91       	lpm	r25, Z
    2504:	9c 93       	st	X, r25
    2506:	99 23       	and	r25, r25
    2508:	61 f0       	breq	.+24     	; 0x2522 <__vector_11+0x186>
    250a:	fa 01       	movw	r30, r20
    250c:	44 91       	lpm	r20, Z
    250e:	f8 01       	movw	r30, r16
    2510:	40 83       	st	Z, r20
    2512:	f9 01       	movw	r30, r18
    2514:	32 96       	adiw	r30, 0x02	; 2
    2516:	94 91       	lpm	r25, Z
    2518:	2d 5f       	subi	r18, 0xFD	; 253
    251a:	3f 4f       	sbci	r19, 0xFF	; 255
    251c:	fb 01       	movw	r30, r22
    251e:	90 83       	st	Z, r25
    2520:	01 c0       	rjmp	.+2      	; 0x2524 <__vector_11+0x188>
    2522:	9a 01       	movw	r18, r20
    2524:	8f 5f       	subi	r24, 0xFF	; 255
    2526:	85 30       	cpi	r24, 0x05	; 5
    2528:	39 f7       	brne	.-50     	; 0x24f8 <__vector_11+0x15c>
    252a:	ea ee       	ldi	r30, 0xEA	; 234
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	8e e1       	ldi	r24, 0x1E	; 30
    2530:	80 83       	st	Z, r24
    2532:	10 82       	st	Z, r1
    2534:	a1 c0       	rjmp	.+322    	; 0x2678 <__vector_11+0x2dc>
    2536:	88 30       	cpi	r24, 0x08	; 8
    2538:	81 f4       	brne	.+32     	; 0x255a <__vector_11+0x1be>
    253a:	60 38       	cpi	r22, 0x80	; 128
    253c:	09 f0       	breq	.+2      	; 0x2540 <__vector_11+0x1a4>
    253e:	95 c0       	rjmp	.+298    	; 0x266a <__vector_11+0x2ce>
    2540:	e8 ee       	ldi	r30, 0xE8	; 232
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	80 ff       	sbrs	r24, 0
    2548:	fd cf       	rjmp	.-6      	; 0x2544 <__vector_11+0x1a8>
    254a:	80 91 e0 01 	lds	r24, 0x01E0
    254e:	80 93 f1 00 	sts	0x00F1, r24
    2552:	8e ef       	ldi	r24, 0xFE	; 254
    2554:	80 93 e8 00 	sts	0x00E8, r24
    2558:	8f c0       	rjmp	.+286    	; 0x2678 <__vector_11+0x2dc>
    255a:	81 32       	cpi	r24, 0x21	; 33
    255c:	b9 f4       	brne	.+46     	; 0x258c <__vector_11+0x1f0>
    255e:	61 3a       	cpi	r22, 0xA1	; 161
    2560:	09 f0       	breq	.+2      	; 0x2564 <__vector_11+0x1c8>
    2562:	83 c0       	rjmp	.+262    	; 0x266a <__vector_11+0x2ce>
    2564:	e8 ee       	ldi	r30, 0xE8	; 232
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	80 ff       	sbrs	r24, 0
    256c:	fd cf       	rjmp	.-6      	; 0x2568 <__vector_11+0x1cc>
    256e:	e4 e3       	ldi	r30, 0x34	; 52
    2570:	f1 e0       	ldi	r31, 0x01	; 1
    2572:	2b e3       	ldi	r18, 0x3B	; 59
    2574:	31 e0       	ldi	r19, 0x01	; 1
    2576:	a1 ef       	ldi	r26, 0xF1	; 241
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	81 91       	ld	r24, Z+
    257c:	8c 93       	st	X, r24
    257e:	e2 17       	cp	r30, r18
    2580:	f3 07       	cpc	r31, r19
    2582:	d9 f7       	brne	.-10     	; 0x257a <__vector_11+0x1de>
    2584:	8e ef       	ldi	r24, 0xFE	; 254
    2586:	80 93 e8 00 	sts	0x00E8, r24
    258a:	76 c0       	rjmp	.+236    	; 0x2678 <__vector_11+0x2dc>
    258c:	80 32       	cpi	r24, 0x20	; 32
    258e:	d1 f4       	brne	.+52     	; 0x25c4 <__vector_11+0x228>
    2590:	61 32       	cpi	r22, 0x21	; 33
    2592:	09 f0       	breq	.+2      	; 0x2596 <__vector_11+0x1fa>
    2594:	6a c0       	rjmp	.+212    	; 0x266a <__vector_11+0x2ce>
    2596:	e8 ee       	ldi	r30, 0xE8	; 232
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	82 ff       	sbrs	r24, 2
    259e:	fd cf       	rjmp	.-6      	; 0x259a <__vector_11+0x1fe>
    25a0:	e4 e3       	ldi	r30, 0x34	; 52
    25a2:	f1 e0       	ldi	r31, 0x01	; 1
    25a4:	2b e3       	ldi	r18, 0x3B	; 59
    25a6:	31 e0       	ldi	r19, 0x01	; 1
    25a8:	a1 ef       	ldi	r26, 0xF1	; 241
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	8c 91       	ld	r24, X
    25ae:	81 93       	st	Z+, r24
    25b0:	e2 17       	cp	r30, r18
    25b2:	f3 07       	cpc	r31, r19
    25b4:	d9 f7       	brne	.-10     	; 0x25ac <__vector_11+0x210>
    25b6:	e8 ee       	ldi	r30, 0xE8	; 232
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	8b ef       	ldi	r24, 0xFB	; 251
    25bc:	80 83       	st	Z, r24
    25be:	8e ef       	ldi	r24, 0xFE	; 254
    25c0:	80 83       	st	Z, r24
    25c2:	5a c0       	rjmp	.+180    	; 0x2678 <__vector_11+0x2dc>
    25c4:	82 32       	cpi	r24, 0x22	; 34
    25c6:	71 f4       	brne	.+28     	; 0x25e4 <__vector_11+0x248>
    25c8:	61 32       	cpi	r22, 0x21	; 33
    25ca:	09 f0       	breq	.+2      	; 0x25ce <__vector_11+0x232>
    25cc:	4e c0       	rjmp	.+156    	; 0x266a <__vector_11+0x2ce>
    25ce:	20 93 de 01 	sts	0x01DE, r18
    25d2:	e8 ee       	ldi	r30, 0xE8	; 232
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	80 ff       	sbrs	r24, 0
    25da:	fd cf       	rjmp	.-6      	; 0x25d6 <__vector_11+0x23a>
    25dc:	8e ef       	ldi	r24, 0xFE	; 254
    25de:	80 93 e8 00 	sts	0x00E8, r24
    25e2:	4a c0       	rjmp	.+148    	; 0x2678 <__vector_11+0x2dc>
    25e4:	81 11       	cpse	r24, r1
    25e6:	1a c0       	rjmp	.+52     	; 0x261c <__vector_11+0x280>
    25e8:	e8 ee       	ldi	r30, 0xE8	; 232
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	80 ff       	sbrs	r24, 0
    25f0:	fd cf       	rjmp	.-6      	; 0x25ec <__vector_11+0x250>
    25f2:	62 38       	cpi	r22, 0x82	; 130
    25f4:	51 f4       	brne	.+20     	; 0x260a <__vector_11+0x26e>
    25f6:	e9 ee       	ldi	r30, 0xE9	; 233
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	40 83       	st	Z, r20
    25fc:	80 91 eb 00 	lds	r24, 0x00EB
    2600:	85 fb       	bst	r24, 5
    2602:	88 27       	eor	r24, r24
    2604:	80 f9       	bld	r24, 0
    2606:	10 82       	st	Z, r1
    2608:	01 c0       	rjmp	.+2      	; 0x260c <__vector_11+0x270>
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	e1 ef       	ldi	r30, 0xF1	; 241
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 83       	st	Z, r24
    2612:	10 82       	st	Z, r1
    2614:	8e ef       	ldi	r24, 0xFE	; 254
    2616:	80 93 e8 00 	sts	0x00E8, r24
    261a:	2e c0       	rjmp	.+92     	; 0x2678 <__vector_11+0x2dc>
    261c:	98 2f       	mov	r25, r24
    261e:	9d 7f       	andi	r25, 0xFD	; 253
    2620:	91 30       	cpi	r25, 0x01	; 1
    2622:	19 f5       	brne	.+70     	; 0x266a <__vector_11+0x2ce>
    2624:	62 30       	cpi	r22, 0x02	; 2
    2626:	09 f5       	brne	.+66     	; 0x266a <__vector_11+0x2ce>
    2628:	23 2b       	or	r18, r19
    262a:	f9 f4       	brne	.+62     	; 0x266a <__vector_11+0x2ce>
    262c:	4f 77       	andi	r20, 0x7F	; 127
    262e:	9f ef       	ldi	r25, 0xFF	; 255
    2630:	94 0f       	add	r25, r20
    2632:	94 30       	cpi	r25, 0x04	; 4
    2634:	d0 f4       	brcc	.+52     	; 0x266a <__vector_11+0x2ce>
    2636:	9e ef       	ldi	r25, 0xFE	; 254
    2638:	90 93 e8 00 	sts	0x00E8, r25
    263c:	40 93 e9 00 	sts	0x00E9, r20
    2640:	83 30       	cpi	r24, 0x03	; 3
    2642:	21 f4       	brne	.+8      	; 0x264c <__vector_11+0x2b0>
    2644:	81 e2       	ldi	r24, 0x21	; 33
    2646:	80 93 eb 00 	sts	0x00EB, r24
    264a:	16 c0       	rjmp	.+44     	; 0x2678 <__vector_11+0x2dc>
    264c:	89 e1       	ldi	r24, 0x19	; 25
    264e:	80 93 eb 00 	sts	0x00EB, r24
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	02 c0       	rjmp	.+4      	; 0x265c <__vector_11+0x2c0>
    2658:	88 0f       	add	r24, r24
    265a:	99 1f       	adc	r25, r25
    265c:	4a 95       	dec	r20
    265e:	e2 f7       	brpl	.-8      	; 0x2658 <__vector_11+0x2bc>
    2660:	ea ee       	ldi	r30, 0xEA	; 234
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 83       	st	Z, r24
    2666:	10 82       	st	Z, r1
    2668:	07 c0       	rjmp	.+14     	; 0x2678 <__vector_11+0x2dc>
    266a:	81 e2       	ldi	r24, 0x21	; 33
    266c:	80 93 eb 00 	sts	0x00EB, r24
    2670:	03 c0       	rjmp	.+6      	; 0x2678 <__vector_11+0x2dc>
    2672:	6c 93       	st	X, r22
    2674:	21 11       	cpse	r18, r1
    2676:	f7 ce       	rjmp	.-530    	; 0x2466 <__vector_11+0xca>
    2678:	ff 91       	pop	r31
    267a:	ef 91       	pop	r30
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
    2680:	bf 91       	pop	r27
    2682:	af 91       	pop	r26
    2684:	9f 91       	pop	r25
    2686:	8f 91       	pop	r24
    2688:	7f 91       	pop	r23
    268a:	6f 91       	pop	r22
    268c:	5f 91       	pop	r21
    268e:	4f 91       	pop	r20
    2690:	3f 91       	pop	r19
    2692:	2f 91       	pop	r18
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	0f 90       	pop	r0
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	0f 90       	pop	r0
    269e:	1f 90       	pop	r1
    26a0:	18 95       	reti

000026a2 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    26a6:	ec eb       	ldi	r30, 0xBC	; 188
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	88 23       	and	r24, r24
    26ae:	34 f0       	brlt	.+12     	; 0x26bc <twi_wait+0x1a>
    26b0:	2f 5f       	subi	r18, 0xFF	; 255
    26b2:	3f 4f       	sbci	r19, 0xFF	; 255
    26b4:	29 3e       	cpi	r18, 0xE9	; 233
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	38 07       	cpc	r19, r24
    26ba:	b9 f7       	brne	.-18     	; 0x26aa <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	28 3e       	cpi	r18, 0xE8	; 232
    26c0:	33 40       	sbci	r19, 0x03	; 3
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <twi_wait+0x24>
    26c4:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    26c6:	08 95       	ret

000026c8 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    26c8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    26cc:	84 e8       	ldi	r24, 0x84	; 132
    26ce:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    26d2:	0e 94 51 13 	call	0x26a2	; 0x26a2 <twi_wait>
    26d6:	88 23       	and	r24, r24
    26d8:	19 f0       	breq	.+6      	; 0x26e0 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    26da:	80 91 b9 00 	lds	r24, 0x00B9
    26de:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    26e0:	08 95       	ret

000026e2 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    26e2:	cf 93       	push	r28
    26e4:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    26e6:	94 ea       	ldi	r25, 0xA4	; 164
    26e8:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    26ec:	0e 94 51 13 	call	0x26a2	; 0x26a2 <twi_wait>
    26f0:	88 23       	and	r24, r24
    26f2:	61 f0       	breq	.+24     	; 0x270c <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    26f4:	8c 2f       	mov	r24, r28
    26f6:	88 0f       	add	r24, r24
    26f8:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    26fc:	80 32       	cpi	r24, 0x20	; 32
    26fe:	29 f4       	brne	.+10     	; 0x270a <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2700:	84 e9       	ldi	r24, 0x94	; 148
    2702:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	01 c0       	rjmp	.+2      	; 0x270c <start_write+0x2a>
	}	
	return 1;	// success
    270a:	81 e0       	ldi	r24, 0x01	; 1
}	
    270c:	cf 91       	pop	r28
    270e:	08 95       	ret

00002710 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    2710:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2714:	88 e5       	ldi	r24, 0x58	; 88
    2716:	0e 94 71 13 	call	0x26e2	; 0x26e2 <start_write>
    271a:	88 23       	and	r24, r24
    271c:	09 f4       	brne	.+2      	; 0x2720 <m_wii_open+0x10>
    271e:	cd c0       	rjmp	.+410    	; 0x28ba <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    2720:	80 e3       	ldi	r24, 0x30	; 48
    2722:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    2726:	88 23       	and	r24, r24
    2728:	09 f4       	brne	.+2      	; 0x272c <m_wii_open+0x1c>
    272a:	c9 c0       	rjmp	.+402    	; 0x28be <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    2732:	88 23       	and	r24, r24
    2734:	09 f4       	brne	.+2      	; 0x2738 <m_wii_open+0x28>
    2736:	c5 c0       	rjmp	.+394    	; 0x28c2 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2738:	84 e9       	ldi	r24, 0x94	; 148
    273a:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    273e:	83 ec       	ldi	r24, 0xC3	; 195
    2740:	99 e0       	ldi	r25, 0x09	; 9
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <m_wii_open+0x32>
    2746:	00 c0       	rjmp	.+0      	; 0x2748 <m_wii_open+0x38>
    2748:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    274a:	88 e5       	ldi	r24, 0x58	; 88
    274c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <start_write>
    2750:	88 23       	and	r24, r24
    2752:	09 f4       	brne	.+2      	; 0x2756 <m_wii_open+0x46>
    2754:	b8 c0       	rjmp	.+368    	; 0x28c6 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    275c:	88 23       	and	r24, r24
    275e:	09 f4       	brne	.+2      	; 0x2762 <m_wii_open+0x52>
    2760:	b4 c0       	rjmp	.+360    	; 0x28ca <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    2768:	88 23       	and	r24, r24
    276a:	09 f4       	brne	.+2      	; 0x276e <m_wii_open+0x5e>
    276c:	b0 c0       	rjmp	.+352    	; 0x28ce <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    2774:	88 23       	and	r24, r24
    2776:	09 f4       	brne	.+2      	; 0x277a <m_wii_open+0x6a>
    2778:	ac c0       	rjmp	.+344    	; 0x28d2 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    2780:	88 23       	and	r24, r24
    2782:	09 f4       	brne	.+2      	; 0x2786 <m_wii_open+0x76>
    2784:	a8 c0       	rjmp	.+336    	; 0x28d6 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    278c:	88 23       	and	r24, r24
    278e:	09 f4       	brne	.+2      	; 0x2792 <m_wii_open+0x82>
    2790:	a4 c0       	rjmp	.+328    	; 0x28da <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    2798:	88 23       	and	r24, r24
    279a:	09 f4       	brne	.+2      	; 0x279e <m_wii_open+0x8e>
    279c:	a0 c0       	rjmp	.+320    	; 0x28de <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    27a4:	88 23       	and	r24, r24
    27a6:	09 f4       	brne	.+2      	; 0x27aa <m_wii_open+0x9a>
    27a8:	9c c0       	rjmp	.+312    	; 0x28e2 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    27aa:	80 e9       	ldi	r24, 0x90	; 144
    27ac:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    27b0:	88 23       	and	r24, r24
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <m_wii_open+0xa6>
    27b4:	98 c0       	rjmp	.+304    	; 0x28e6 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    27b6:	84 e9       	ldi	r24, 0x94	; 148
    27b8:	80 93 bc 00 	sts	0x00BC, r24
    27bc:	83 ec       	ldi	r24, 0xC3	; 195
    27be:	99 e0       	ldi	r25, 0x09	; 9
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <m_wii_open+0xb0>
    27c4:	00 c0       	rjmp	.+0      	; 0x27c6 <m_wii_open+0xb6>
    27c6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    27c8:	88 e5       	ldi	r24, 0x58	; 88
    27ca:	0e 94 71 13 	call	0x26e2	; 0x26e2 <start_write>
    27ce:	88 23       	and	r24, r24
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <m_wii_open+0xc4>
    27d2:	8b c0       	rjmp	.+278    	; 0x28ea <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    27d4:	87 e0       	ldi	r24, 0x07	; 7
    27d6:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    27da:	88 23       	and	r24, r24
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <m_wii_open+0xd0>
    27de:	87 c0       	rjmp	.+270    	; 0x28ee <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    27e6:	88 23       	and	r24, r24
    27e8:	09 f4       	brne	.+2      	; 0x27ec <m_wii_open+0xdc>
    27ea:	83 c0       	rjmp	.+262    	; 0x28f2 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    27ec:	81 e4       	ldi	r24, 0x41	; 65
    27ee:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    27f2:	88 23       	and	r24, r24
    27f4:	09 f4       	brne	.+2      	; 0x27f8 <m_wii_open+0xe8>
    27f6:	7f c0       	rjmp	.+254    	; 0x28f6 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    27f8:	84 e9       	ldi	r24, 0x94	; 148
    27fa:	80 93 bc 00 	sts	0x00BC, r24
    27fe:	83 ec       	ldi	r24, 0xC3	; 195
    2800:	99 e0       	ldi	r25, 0x09	; 9
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <m_wii_open+0xf2>
    2806:	00 c0       	rjmp	.+0      	; 0x2808 <m_wii_open+0xf8>
    2808:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    280a:	88 e5       	ldi	r24, 0x58	; 88
    280c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <start_write>
    2810:	88 23       	and	r24, r24
    2812:	09 f4       	brne	.+2      	; 0x2816 <m_wii_open+0x106>
    2814:	72 c0       	rjmp	.+228    	; 0x28fa <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    2816:	8a e1       	ldi	r24, 0x1A	; 26
    2818:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    281c:	88 23       	and	r24, r24
    281e:	09 f4       	brne	.+2      	; 0x2822 <m_wii_open+0x112>
    2820:	6e c0       	rjmp	.+220    	; 0x28fe <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    2822:	80 e4       	ldi	r24, 0x40	; 64
    2824:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    2828:	88 23       	and	r24, r24
    282a:	09 f4       	brne	.+2      	; 0x282e <m_wii_open+0x11e>
    282c:	6a c0       	rjmp	.+212    	; 0x2902 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    2834:	88 23       	and	r24, r24
    2836:	09 f4       	brne	.+2      	; 0x283a <m_wii_open+0x12a>
    2838:	66 c0       	rjmp	.+204    	; 0x2906 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    283a:	84 e9       	ldi	r24, 0x94	; 148
    283c:	80 93 bc 00 	sts	0x00BC, r24
    2840:	83 ec       	ldi	r24, 0xC3	; 195
    2842:	99 e0       	ldi	r25, 0x09	; 9
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <m_wii_open+0x134>
    2848:	00 c0       	rjmp	.+0      	; 0x284a <m_wii_open+0x13a>
    284a:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    284c:	88 e5       	ldi	r24, 0x58	; 88
    284e:	0e 94 71 13 	call	0x26e2	; 0x26e2 <start_write>
    2852:	88 23       	and	r24, r24
    2854:	09 f4       	brne	.+2      	; 0x2858 <m_wii_open+0x148>
    2856:	59 c0       	rjmp	.+178    	; 0x290a <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    2858:	83 e3       	ldi	r24, 0x33	; 51
    285a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    285e:	88 23       	and	r24, r24
    2860:	09 f4       	brne	.+2      	; 0x2864 <m_wii_open+0x154>
    2862:	55 c0       	rjmp	.+170    	; 0x290e <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    2864:	83 e0       	ldi	r24, 0x03	; 3
    2866:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    286a:	88 23       	and	r24, r24
    286c:	09 f4       	brne	.+2      	; 0x2870 <m_wii_open+0x160>
    286e:	51 c0       	rjmp	.+162    	; 0x2912 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2870:	84 e9       	ldi	r24, 0x94	; 148
    2872:	80 93 bc 00 	sts	0x00BC, r24
    2876:	83 ec       	ldi	r24, 0xC3	; 195
    2878:	99 e0       	ldi	r25, 0x09	; 9
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <m_wii_open+0x16a>
    287e:	00 c0       	rjmp	.+0      	; 0x2880 <m_wii_open+0x170>
    2880:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2882:	88 e5       	ldi	r24, 0x58	; 88
    2884:	0e 94 71 13 	call	0x26e2	; 0x26e2 <start_write>
    2888:	88 23       	and	r24, r24
    288a:	09 f4       	brne	.+2      	; 0x288e <m_wii_open+0x17e>
    288c:	44 c0       	rjmp	.+136    	; 0x2916 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    288e:	80 e3       	ldi	r24, 0x30	; 48
    2890:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    2894:	88 23       	and	r24, r24
    2896:	09 f4       	brne	.+2      	; 0x289a <m_wii_open+0x18a>
    2898:	40 c0       	rjmp	.+128    	; 0x291a <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    289a:	88 e0       	ldi	r24, 0x08	; 8
    289c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    28a0:	88 23       	and	r24, r24
    28a2:	e9 f1       	breq	.+122    	; 0x291e <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    28a4:	84 e9       	ldi	r24, 0x94	; 148
    28a6:	80 93 bc 00 	sts	0x00BC, r24
    28aa:	83 ec       	ldi	r24, 0xC3	; 195
    28ac:	99 e0       	ldi	r25, 0x09	; 9
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <m_wii_open+0x19e>
    28b2:	00 c0       	rjmp	.+0      	; 0x28b4 <m_wii_open+0x1a4>
    28b4:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    291e:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2920:	08 95       	ret

00002922 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2922:	cf 93       	push	r28
    2924:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2926:	84 ea       	ldi	r24, 0xA4	; 164
    2928:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    292c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <twi_wait>
    2930:	88 23       	and	r24, r24
    2932:	69 f0       	breq	.+26     	; 0x294e <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2934:	8c 2f       	mov	r24, r28
    2936:	88 0f       	add	r24, r24
    2938:	8f 5f       	subi	r24, 0xFF	; 255
    293a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    293e:	88 34       	cpi	r24, 0x48	; 72
    2940:	29 f4       	brne	.+10     	; 0x294c <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2942:	84 e9       	ldi	r24, 0x94	; 148
    2944:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	01 c0       	rjmp	.+2      	; 0x294e <start_read+0x2c>
	}	
	return 1;	// success
    294c:	81 e0       	ldi	r24, 0x01	; 1
}	
    294e:	cf 91       	pop	r28
    2950:	08 95       	ret

00002952 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2952:	0f 93       	push	r16
    2954:	1f 93       	push	r17
    2956:	cf 93       	push	r28
    2958:	df 93       	push	r29
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	60 97       	sbiw	r28, 0x10	; 16
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    296c:	fe 01       	movw	r30, r28
    296e:	31 96       	adiw	r30, 0x01	; 1
    2970:	80 e1       	ldi	r24, 0x10	; 16
    2972:	df 01       	movw	r26, r30
    2974:	1d 92       	st	X+, r1
    2976:	8a 95       	dec	r24
    2978:	e9 f7       	brne	.-6      	; 0x2974 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    297a:	88 e5       	ldi	r24, 0x58	; 88
    297c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <start_write>
    2980:	88 23       	and	r24, r24
    2982:	09 f4       	brne	.+2      	; 0x2986 <m_wii_read+0x34>
    2984:	69 c0       	rjmp	.+210    	; 0x2a58 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    2986:	86 e3       	ldi	r24, 0x36	; 54
    2988:	0e 94 64 13 	call	0x26c8	; 0x26c8 <send_byte>
    298c:	88 23       	and	r24, r24
    298e:	09 f4       	brne	.+2      	; 0x2992 <m_wii_read+0x40>
    2990:	65 c0       	rjmp	.+202    	; 0x2a5c <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2992:	84 e9       	ldi	r24, 0x94	; 148
    2994:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2998:	b8 e0       	ldi	r27, 0x08	; 8
    299a:	ba 95       	dec	r27
    299c:	f1 f7       	brne	.-4      	; 0x299a <m_wii_read+0x48>
    299e:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    29a0:	88 e5       	ldi	r24, 0x58	; 88
    29a2:	0e 94 91 14 	call	0x2922	; 0x2922 <start_read>
    29a6:	88 23       	and	r24, r24
    29a8:	09 f4       	brne	.+2      	; 0x29ac <m_wii_read+0x5a>
    29aa:	5a c0       	rjmp	.+180    	; 0x2a60 <m_wii_read+0x10e>
    29ac:	be 01       	movw	r22, r28
    29ae:	6f 5f       	subi	r22, 0xFF	; 255
    29b0:	7f 4f       	sbci	r23, 0xFF	; 255
    29b2:	ae 01       	movw	r20, r28
    29b4:	40 5f       	subi	r20, 0xF0	; 240
    29b6:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    29b8:	ec eb       	ldi	r30, 0xBC	; 188
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    29be:	2b eb       	ldi	r18, 0xBB	; 187
    29c0:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    29c2:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    29c4:	90 81       	ld	r25, Z
    29c6:	99 23       	and	r25, r25
    29c8:	ec f7       	brge	.-6      	; 0x29c4 <m_wii_read+0x72>
		temp[i] = TWDR;
    29ca:	d9 01       	movw	r26, r18
    29cc:	9c 91       	ld	r25, X
    29ce:	db 01       	movw	r26, r22
    29d0:	9d 93       	st	X+, r25
    29d2:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    29d4:	a4 17       	cp	r26, r20
    29d6:	b5 07       	cpc	r27, r21
    29d8:	a1 f7       	brne	.-24     	; 0x29c2 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    29da:	84 e8       	ldi	r24, 0x84	; 132
    29dc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    29e0:	ec eb       	ldi	r30, 0xBC	; 188
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	88 23       	and	r24, r24
    29e8:	ec f7       	brge	.-6      	; 0x29e4 <m_wii_read+0x92>
	temp[15] = TWDR;
    29ea:	80 91 bb 00 	lds	r24, 0x00BB
    29ee:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    29f0:	84 e9       	ldi	r24, 0x94	; 148
    29f2:	80 93 bc 00 	sts	0x00BC, r24
    29f6:	be 01       	movw	r22, r28
    29f8:	6c 5f       	subi	r22, 0xFC	; 252
    29fa:	7f 4f       	sbci	r23, 0xFF	; 255
    29fc:	f8 01       	movw	r30, r16
    29fe:	08 5e       	subi	r16, 0xE8	; 232
    2a00:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2a02:	db 01       	movw	r26, r22
    2a04:	2c 91       	ld	r18, X
    2a06:	32 2f       	mov	r19, r18
    2a08:	30 73       	andi	r19, 0x30	; 48
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	02 97       	sbiw	r24, 0x02	; 2
    2a0e:	dc 01       	movw	r26, r24
    2a10:	8c 91       	ld	r24, X
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	b0 e1       	ldi	r27, 0x10	; 16
    2a16:	3b 9f       	mul	r19, r27
    2a18:	80 0d       	add	r24, r0
    2a1a:	91 1d       	adc	r25, r1
    2a1c:	11 24       	eor	r1, r1
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2a22:	42 2f       	mov	r20, r18
    2a24:	40 7c       	andi	r20, 0xC0	; 192
    2a26:	50 e0       	ldi	r21, 0x00	; 0
    2a28:	44 0f       	add	r20, r20
    2a2a:	55 1f       	adc	r21, r21
    2a2c:	44 0f       	add	r20, r20
    2a2e:	55 1f       	adc	r21, r21
    2a30:	cb 01       	movw	r24, r22
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	dc 01       	movw	r26, r24
    2a36:	8c 91       	ld	r24, X
    2a38:	48 0f       	add	r20, r24
    2a3a:	51 1d       	adc	r21, r1
    2a3c:	53 83       	std	Z+3, r21	; 0x03
    2a3e:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2a40:	2f 70       	andi	r18, 0x0F	; 15
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	35 83       	std	Z+5, r19	; 0x05
    2a46:	24 83       	std	Z+4, r18	; 0x04
    2a48:	6d 5f       	subi	r22, 0xFD	; 253
    2a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4c:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2a4e:	e0 17       	cp	r30, r16
    2a50:	f1 07       	cpc	r31, r17
    2a52:	b9 f6       	brne	.-82     	; 0x2a02 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	03 c0       	rjmp	.+6      	; 0x2a62 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	01 c0       	rjmp	.+2      	; 0x2a62 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2a60:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2a62:	60 96       	adiw	r28, 0x10	; 16
    2a64:	0f b6       	in	r0, 0x3f	; 63
    2a66:	f8 94       	cli
    2a68:	de bf       	out	0x3e, r29	; 62
    2a6a:	0f be       	out	0x3f, r0	; 63
    2a6c:	cd bf       	out	0x3d, r28	; 61
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	1f 91       	pop	r17
    2a74:	0f 91       	pop	r16
    2a76:	08 95       	ret

00002a78 <get_puck_location>:
Public Functions
************************************************************/

/* Returns x,y, location of puck (angle more accurate) */
int get_puck_location(float* puck_buffer)
{
    2a78:	2f 92       	push	r2
    2a7a:	3f 92       	push	r3
    2a7c:	4f 92       	push	r4
    2a7e:	5f 92       	push	r5
    2a80:	6f 92       	push	r6
    2a82:	7f 92       	push	r7
    2a84:	8f 92       	push	r8
    2a86:	9f 92       	push	r9
    2a88:	af 92       	push	r10
    2a8a:	bf 92       	push	r11
    2a8c:	cf 92       	push	r12
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	62 97       	sbiw	r28, 0x12	; 18
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	9a 8b       	std	Y+18, r25	; 0x12
    2aae:	89 8b       	std	Y+17, r24	; 0x11
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	01 96       	adiw	r24, 0x01	; 1
    2ab4:	0e 94 4a 0c 	call	0x1894	; 0x1894 <get_position>
    2ab8:	0f 2e       	mov	r0, r31
    2aba:	f5 ee       	ldi	r31, 0xE5	; 229
    2abc:	8f 2e       	mov	r8, r31
    2abe:	f1 e0       	ldi	r31, 0x01	; 1
    2ac0:	9f 2e       	mov	r9, r31
    2ac2:	f0 2d       	mov	r31, r0
    2ac4:	0f 2e       	mov	r0, r31
    2ac6:	fd e3       	ldi	r31, 0x3D	; 61
    2ac8:	ef 2e       	mov	r14, r31
    2aca:	f1 e0       	ldi	r31, 0x01	; 1
    2acc:	ff 2e       	mov	r15, r31
    2ace:	f0 2d       	mov	r31, r0
    2ad0:	0f 2e       	mov	r0, r31
    2ad2:	f5 e6       	ldi	r31, 0x65	; 101
    2ad4:	af 2e       	mov	r10, r31
    2ad6:	f1 e0       	ldi	r31, 0x01	; 1
    2ad8:	bf 2e       	mov	r11, r31
    2ada:	f0 2d       	mov	r31, r0

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
    2adc:	1d 86       	std	Y+13, r1	; 0x0d
    2ade:	1e 86       	std	Y+14, r1	; 0x0e
    2ae0:	1f 86       	std	Y+15, r1	; 0x0f
    2ae2:	18 8a       	std	Y+16, r1	; 0x10
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
    2ae4:	c1 2c       	mov	r12, r1
    2ae6:	d1 2c       	mov	r13, r1
{
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
    2ae8:	21 2c       	mov	r2, r1
    2aea:	31 2c       	mov	r3, r1
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
		scaler += transistor_vals[i];
    2aec:	f4 01       	movw	r30, r8
    2aee:	01 91       	ld	r16, Z+
    2af0:	11 91       	ld	r17, Z+
    2af2:	4f 01       	movw	r8, r30
    2af4:	c0 0e       	add	r12, r16
    2af6:	d1 1e       	adc	r13, r17
		global_theta += transistor_angles[i] * (float)transistor_vals[i];
    2af8:	f7 01       	movw	r30, r14
    2afa:	41 90       	ld	r4, Z+
    2afc:	51 90       	ld	r5, Z+
    2afe:	61 90       	ld	r6, Z+
    2b00:	71 90       	ld	r7, Z+
    2b02:	7f 01       	movw	r14, r30
    2b04:	b8 01       	movw	r22, r16
    2b06:	01 2e       	mov	r0, r17
    2b08:	00 0c       	add	r0, r0
    2b0a:	88 0b       	sbc	r24, r24
    2b0c:	99 0b       	sbc	r25, r25
    2b0e:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
    2b12:	9b 01       	movw	r18, r22
    2b14:	ac 01       	movw	r20, r24
    2b16:	c3 01       	movw	r24, r6
    2b18:	b2 01       	movw	r22, r4
    2b1a:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    2b1e:	9b 01       	movw	r18, r22
    2b20:	ac 01       	movw	r20, r24
    2b22:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b24:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b28:	98 89       	ldd	r25, Y+16	; 0x10
    2b2a:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
    2b2e:	6d 87       	std	Y+13, r22	; 0x0d
    2b30:	7e 87       	std	Y+14, r23	; 0x0e
    2b32:	8f 87       	std	Y+15, r24	; 0x0f
    2b34:	98 8b       	std	Y+16, r25	; 0x10
    2b36:	20 16       	cp	r2, r16
    2b38:	31 06       	cpc	r3, r17
    2b3a:	0c f4       	brge	.+2      	; 0x2b3e <get_puck_location+0xc6>
    2b3c:	18 01       	movw	r2, r16

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
    2b3e:	ea 14       	cp	r14, r10
    2b40:	fb 04       	cpc	r15, r11
    2b42:	a1 f6       	brne	.-88     	; 0x2aec <get_puck_location+0x74>
	}
	global_theta = global_theta/((float)scaler);


	/* If no puck found */
	if(max_val<100){
    2b44:	f4 e6       	ldi	r31, 0x64	; 100
    2b46:	2f 16       	cp	r2, r31
    2b48:	31 04       	cpc	r3, r1
    2b4a:	6c f4       	brge	.+26     	; 0x2b66 <get_puck_location+0xee>
		puck_buffer[0] = 0;
    2b4c:	e9 89       	ldd	r30, Y+17	; 0x11
    2b4e:	fa 89       	ldd	r31, Y+18	; 0x12
    2b50:	10 82       	st	Z, r1
    2b52:	11 82       	std	Z+1, r1	; 0x01
    2b54:	12 82       	std	Z+2, r1	; 0x02
    2b56:	13 82       	std	Z+3, r1	; 0x03
		puck_buffer[1] = 0;
    2b58:	14 82       	std	Z+4, r1	; 0x04
    2b5a:	15 82       	std	Z+5, r1	; 0x05
    2b5c:	16 82       	std	Z+6, r1	; 0x06
    2b5e:	17 82       	std	Z+7, r1	; 0x07
		return 0;
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	68 c0       	rjmp	.+208    	; 0x2c36 <get_puck_location+0x1be>

		if(transistor_vals[i]>max_val){
			max_val = transistor_vals[i];
		}
	}
	global_theta = global_theta/((float)scaler);
    2b66:	b6 01       	movw	r22, r12
    2b68:	dd 0c       	add	r13, r13
    2b6a:	88 0b       	sbc	r24, r24
    2b6c:	99 0b       	sbc	r25, r25
    2b6e:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
    2b72:	9b 01       	movw	r18, r22
    2b74:	ac 01       	movw	r20, r24
    2b76:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b78:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b7c:	98 89       	ldd	r25, Y+16	; 0x10
    2b7e:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
		puck_buffer[1] = 0;
		return 0;
	}

	/* Create vector pointing to puck in global coordinates */
	global_theta += position_buffer[2];
    2b82:	29 85       	ldd	r18, Y+9	; 0x09
    2b84:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b86:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b88:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b8a:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
    2b8e:	4b 01       	movw	r8, r22
    2b90:	5c 01       	movw	r10, r24
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/200.0 + position_buffer[0]; // Assign X val
    2b92:	0e 94 05 19 	call	0x320a	; 0x320a <cos>
    2b96:	2b 01       	movw	r4, r22
    2b98:	3c 01       	movw	r6, r24
    2b9a:	6f ef       	ldi	r22, 0xFF	; 255
    2b9c:	73 e0       	ldi	r23, 0x03	; 3
    2b9e:	62 19       	sub	r22, r2
    2ba0:	73 09       	sbc	r23, r3
    2ba2:	07 2e       	mov	r0, r23
    2ba4:	00 0c       	add	r0, r0
    2ba6:	88 0b       	sbc	r24, r24
    2ba8:	99 0b       	sbc	r25, r25
    2baa:	0e 94 ad 19 	call	0x335a	; 0x335a <__floatsisf>
    2bae:	6b 01       	movw	r12, r22
    2bb0:	7c 01       	movw	r14, r24
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	4f e2       	ldi	r20, 0x2F	; 47
    2bb8:	54 e4       	ldi	r21, 0x44	; 68
    2bba:	c3 01       	movw	r24, r6
    2bbc:	b2 01       	movw	r22, r4
    2bbe:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    2bc2:	a7 01       	movw	r20, r14
    2bc4:	96 01       	movw	r18, r12
    2bc6:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	48 e4       	ldi	r20, 0x48	; 72
    2bd0:	53 e4       	ldi	r21, 0x43	; 67
    2bd2:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    2bd6:	29 81       	ldd	r18, Y+1	; 0x01
    2bd8:	3a 81       	ldd	r19, Y+2	; 0x02
    2bda:	4b 81       	ldd	r20, Y+3	; 0x03
    2bdc:	5c 81       	ldd	r21, Y+4	; 0x04
    2bde:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
    2be2:	e9 89       	ldd	r30, Y+17	; 0x11
    2be4:	fa 89       	ldd	r31, Y+18	; 0x12
    2be6:	60 83       	st	Z, r22
    2be8:	71 83       	std	Z+1, r23	; 0x01
    2bea:	82 83       	std	Z+2, r24	; 0x02
    2bec:	93 83       	std	Z+3, r25	; 0x03
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/200.0 + position_buffer[1]; // Assign Y val
    2bee:	c5 01       	movw	r24, r10
    2bf0:	b4 01       	movw	r22, r8
    2bf2:	0e 94 3d 1b 	call	0x367a	; 0x367a <sin>
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	4f e2       	ldi	r20, 0x2F	; 47
    2bfc:	54 e4       	ldi	r21, 0x44	; 68
    2bfe:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    2c02:	9b 01       	movw	r18, r22
    2c04:	ac 01       	movw	r20, r24
    2c06:	c7 01       	movw	r24, r14
    2c08:	b6 01       	movw	r22, r12
    2c0a:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	48 e4       	ldi	r20, 0x48	; 72
    2c14:	53 e4       	ldi	r21, 0x43	; 67
    2c16:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    2c1a:	2d 81       	ldd	r18, Y+5	; 0x05
    2c1c:	3e 81       	ldd	r19, Y+6	; 0x06
    2c1e:	4f 81       	ldd	r20, Y+7	; 0x07
    2c20:	58 85       	ldd	r21, Y+8	; 0x08
    2c22:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3>
    2c26:	e9 89       	ldd	r30, Y+17	; 0x11
    2c28:	fa 89       	ldd	r31, Y+18	; 0x12
    2c2a:	64 83       	std	Z+4, r22	; 0x04
    2c2c:	75 83       	std	Z+5, r23	; 0x05
    2c2e:	86 83       	std	Z+6, r24	; 0x06
    2c30:	97 83       	std	Z+7, r25	; 0x07
	
	return max_val;
    2c32:	82 2d       	mov	r24, r2
    2c34:	93 2d       	mov	r25, r3

}
    2c36:	62 96       	adiw	r28, 0x12	; 18
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	ff 90       	pop	r15
    2c4c:	ef 90       	pop	r14
    2c4e:	df 90       	pop	r13
    2c50:	cf 90       	pop	r12
    2c52:	bf 90       	pop	r11
    2c54:	af 90       	pop	r10
    2c56:	9f 90       	pop	r9
    2c58:	8f 90       	pop	r8
    2c5a:	7f 90       	pop	r7
    2c5c:	6f 90       	pop	r6
    2c5e:	5f 90       	pop	r5
    2c60:	4f 90       	pop	r4
    2c62:	3f 90       	pop	r3
    2c64:	2f 90       	pop	r2
    2c66:	08 95       	ret

00002c68 <has_puck>:

/* Return 1 If Has Puck */
char has_puck(void)
{
	static int had_puck = 5;
	if(check(ADCSRA,ADEN)){		//check if ADC is enabled 
    2c68:	80 91 7a 00 	lds	r24, 0x007A
    2c6c:	88 23       	and	r24, r24
    2c6e:	14 f5       	brge	.+68     	; 0x2cb4 <has_puck+0x4c>
		if(((transistor_3 + transistor_9) > HAS_PUCK_THRESHOLD)){
    2c70:	20 91 e3 01 	lds	r18, 0x01E3
    2c74:	30 91 e4 01 	lds	r19, 0x01E4
    2c78:	80 91 e1 01 	lds	r24, 0x01E1
    2c7c:	90 91 e2 01 	lds	r25, 0x01E2
    2c80:	82 0f       	add	r24, r18
    2c82:	93 1f       	adc	r25, r19
    2c84:	85 36       	cpi	r24, 0x65	; 101
    2c86:	91 05       	cpc	r25, r1
    2c88:	44 f0       	brlt	.+16     	; 0x2c9a <has_puck+0x32>
			had_puck = 5;
    2c8a:	85 e0       	ldi	r24, 0x05	; 5
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	90 93 3c 01 	sts	0x013C, r25
    2c92:	80 93 3b 01 	sts	0x013B, r24
			return 1;
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	08 95       	ret
		}
		if(had_puck){
    2c9a:	80 91 3b 01 	lds	r24, 0x013B
    2c9e:	90 91 3c 01 	lds	r25, 0x013C
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	49 f0       	breq	.+18     	; 0x2cb8 <has_puck+0x50>
			had_puck -= 1;
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	90 93 3c 01 	sts	0x013C, r25
    2cac:	80 93 3b 01 	sts	0x013B, r24
			return 1;
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	08 95       	ret
		}
	}
	return 0;
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	08 95       	ret
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
}
    2cba:	08 95       	ret

00002cbc <adc_switch>:
/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated

	clear(ADCSRA,ADEN); // Disable ADC subsystem
    2cbc:	ea e7       	ldi	r30, 0x7A	; 122
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	8f 77       	andi	r24, 0x7F	; 127
    2cc4:	80 83       	st	Z, r24
	
	switch(state){
    2cc6:	e0 91 f9 01 	lds	r30, 0x01F9
    2cca:	f0 91 fa 01 	lds	r31, 0x01FA
    2cce:	ec 30       	cpi	r30, 0x0C	; 12
    2cd0:	f1 05       	cpc	r31, r1
    2cd2:	08 f0       	brcs	.+2      	; 0x2cd6 <adc_switch+0x1a>
    2cd4:	82 c1       	rjmp	.+772    	; 0x2fda <adc_switch+0x31e>
    2cd6:	e0 5a       	subi	r30, 0xA0	; 160
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__tablejump2__>

		case 0:
			state = 1;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	90 93 fa 01 	sts	0x01FA, r25
    2ce6:	80 93 f9 01 	sts	0x01F9, r24
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
    2cea:	eb e7       	ldi	r30, 0x7B	; 123
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	8f 7d       	andi	r24, 0xDF	; 223
    2cf2:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 8
    2cf4:	ec e7       	ldi	r30, 0x7C	; 124
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	8b 7f       	andi	r24, 0xFB	; 251
    2cfc:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2cfe:	80 81       	ld	r24, Z
    2d00:	8d 7f       	andi	r24, 0xFD	; 253
    2d02:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2d04:	80 81       	ld	r24, Z
    2d06:	8e 7f       	andi	r24, 0xFE	; 254
    2d08:	80 83       	st	Z, r24
			transistor_vals[2] = ADC;			
    2d0a:	80 91 78 00 	lds	r24, 0x0078
    2d0e:	90 91 79 00 	lds	r25, 0x0079
    2d12:	90 93 ea 01 	sts	0x01EA, r25
    2d16:	80 93 e9 01 	sts	0x01E9, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
			clear(ADMUX,MUX2); // Transistor 8
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[2] = ADC;			
			break;
    2d1c:	5f c1       	rjmp	.+702    	; 0x2fdc <adc_switch+0x320>

		case 1:
			state = 2;
    2d1e:	82 e0       	ldi	r24, 0x02	; 2
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	90 93 fa 01 	sts	0x01FA, r25
    2d26:	80 93 f9 01 	sts	0x01F9, r24
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
    2d2a:	eb e7       	ldi	r30, 0x7B	; 123
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	8f 7d       	andi	r24, 0xDF	; 223
    2d32:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 9
    2d34:	ec e7       	ldi	r30, 0x7C	; 124
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	8b 7f       	andi	r24, 0xFB	; 251
    2d3c:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2d3e:	80 81       	ld	r24, Z
    2d40:	8d 7f       	andi	r24, 0xFD	; 253
    2d42:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2d44:	80 81       	ld	r24, Z
    2d46:	81 60       	ori	r24, 0x01	; 1
    2d48:	80 83       	st	Z, r24
			transistor_vals[4] = ADC;			
    2d4a:	80 91 78 00 	lds	r24, 0x0078
    2d4e:	90 91 79 00 	lds	r25, 0x0079
    2d52:	90 93 ee 01 	sts	0x01EE, r25
    2d56:	80 93 ed 01 	sts	0x01ED, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
			clear(ADMUX,MUX2); // Transistor 9
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[4] = ADC;			
			break;
    2d5c:	3f c1       	rjmp	.+638    	; 0x2fdc <adc_switch+0x320>

		case 2:
			state = 3;
    2d5e:	83 e0       	ldi	r24, 0x03	; 3
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	90 93 fa 01 	sts	0x01FA, r25
    2d66:	80 93 f9 01 	sts	0x01F9, r24
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
    2d6a:	eb e7       	ldi	r30, 0x7B	; 123
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	8f 7d       	andi	r24, 0xDF	; 223
    2d72:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 10
    2d74:	ec e7       	ldi	r30, 0x7C	; 124
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	84 60       	ori	r24, 0x04	; 4
    2d7c:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2d7e:	80 81       	ld	r24, Z
    2d80:	8d 7f       	andi	r24, 0xFD	; 253
    2d82:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2d84:	80 81       	ld	r24, Z
    2d86:	8e 7f       	andi	r24, 0xFE	; 254
    2d88:	80 83       	st	Z, r24
			transistor_9 = ADC;			
    2d8a:	80 91 78 00 	lds	r24, 0x0078
    2d8e:	90 91 79 00 	lds	r25, 0x0079
    2d92:	90 93 e2 01 	sts	0x01E2, r25
    2d96:	80 93 e1 01 	sts	0x01E1, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
			set(ADMUX,MUX2); // Transistor 10
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_9 = ADC;			
			break;
    2d9c:	1f c1       	rjmp	.+574    	; 0x2fdc <adc_switch+0x320>

		case 3:
			state = 4;
    2d9e:	84 e0       	ldi	r24, 0x04	; 4
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	90 93 fa 01 	sts	0x01FA, r25
    2da6:	80 93 f9 01 	sts	0x01F9, r24
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
    2daa:	eb e7       	ldi	r30, 0x7B	; 123
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	8f 7d       	andi	r24, 0xDF	; 223
    2db2:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 13
    2db4:	ec e7       	ldi	r30, 0x7C	; 124
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	84 60       	ori	r24, 0x04	; 4
    2dbc:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2dbe:	80 81       	ld	r24, Z
    2dc0:	8d 7f       	andi	r24, 0xFD	; 253
    2dc2:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2dc4:	80 81       	ld	r24, Z
    2dc6:	81 60       	ori	r24, 0x01	; 1
    2dc8:	80 83       	st	Z, r24
			transistor_vals[5] = ADC;			
    2dca:	80 91 78 00 	lds	r24, 0x0078
    2dce:	90 91 79 00 	lds	r25, 0x0079
    2dd2:	90 93 f0 01 	sts	0x01F0, r25
    2dd6:	80 93 ef 01 	sts	0x01EF, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2dda:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
			set(ADMUX,MUX2); // Transistor 13
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[5] = ADC;			
			break;
    2ddc:	ff c0       	rjmp	.+510    	; 0x2fdc <adc_switch+0x320>

		case 4:
			state = 5;
    2dde:	85 e0       	ldi	r24, 0x05	; 5
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	90 93 fa 01 	sts	0x01FA, r25
    2de6:	80 93 f9 01 	sts	0x01F9, r24
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
    2dea:	eb e7       	ldi	r30, 0x7B	; 123
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	8f 7d       	andi	r24, 0xDF	; 223
    2df2:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 14
    2df4:	ec e7       	ldi	r30, 0x7C	; 124
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	84 60       	ori	r24, 0x04	; 4
    2dfc:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2dfe:	80 81       	ld	r24, Z
    2e00:	82 60       	ori	r24, 0x02	; 2
    2e02:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2e04:	80 81       	ld	r24, Z
    2e06:	8e 7f       	andi	r24, 0xFE	; 254
    2e08:	80 83       	st	Z, r24
			transistor_vals[7] = ADC;			
    2e0a:	80 91 78 00 	lds	r24, 0x0078
    2e0e:	90 91 79 00 	lds	r25, 0x0079
    2e12:	90 93 f4 01 	sts	0x01F4, r25
    2e16:	80 93 f3 01 	sts	0x01F3, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
			set(ADMUX,MUX2); // Transistor 14
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[7] = ADC;			
			break;
    2e1c:	df c0       	rjmp	.+446    	; 0x2fdc <adc_switch+0x320>

		case 5:
			state = 6;
    2e1e:	86 e0       	ldi	r24, 0x06	; 6
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	90 93 fa 01 	sts	0x01FA, r25
    2e26:	80 93 f9 01 	sts	0x01F9, r24
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
    2e2a:	eb e7       	ldi	r30, 0x7B	; 123
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	8f 7d       	andi	r24, 0xDF	; 223
    2e32:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 15
    2e34:	ec e7       	ldi	r30, 0x7C	; 124
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	84 60       	ori	r24, 0x04	; 4
    2e3c:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2e3e:	80 81       	ld	r24, Z
    2e40:	82 60       	ori	r24, 0x02	; 2
    2e42:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2e44:	80 81       	ld	r24, Z
    2e46:	81 60       	ori	r24, 0x01	; 1
    2e48:	80 83       	st	Z, r24
			transistor_vals[8] = ADC;			
    2e4a:	80 91 78 00 	lds	r24, 0x0078
    2e4e:	90 91 79 00 	lds	r25, 0x0079
    2e52:	90 93 f6 01 	sts	0x01F6, r25
    2e56:	80 93 f5 01 	sts	0x01F5, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
			set(ADMUX,MUX2); // Transistor 15
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[8] = ADC;			
			break;
    2e5c:	bf c0       	rjmp	.+382    	; 0x2fdc <adc_switch+0x320>

		case 6:
			state = 7;
    2e5e:	87 e0       	ldi	r24, 0x07	; 7
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	90 93 fa 01 	sts	0x01FA, r25
    2e66:	80 93 f9 01 	sts	0x01F9, r24
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
    2e6a:	eb e7       	ldi	r30, 0x7B	; 123
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	80 62       	ori	r24, 0x20	; 32
    2e72:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 1, 16
    2e74:	ec e7       	ldi	r30, 0x7C	; 124
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	8b 7f       	andi	r24, 0xFB	; 251
    2e7c:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2e7e:	80 81       	ld	r24, Z
    2e80:	8d 7f       	andi	r24, 0xFD	; 253
    2e82:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2e84:	80 81       	ld	r24, Z
    2e86:	8e 7f       	andi	r24, 0xFE	; 254
    2e88:	80 83       	st	Z, r24
			transistor_vals[9] = ADC;			
    2e8a:	80 91 78 00 	lds	r24, 0x0078
    2e8e:	90 91 79 00 	lds	r25, 0x0079
    2e92:	90 93 f8 01 	sts	0x01F8, r25
    2e96:	80 93 f7 01 	sts	0x01F7, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
			clear(ADMUX,MUX2); // Transistor 1, 16
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[9] = ADC;			
			break;
    2e9c:	9f c0       	rjmp	.+318    	; 0x2fdc <adc_switch+0x320>

		case 7:
			state = 8;
    2e9e:	88 e0       	ldi	r24, 0x08	; 8
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	90 93 fa 01 	sts	0x01FA, r25
    2ea6:	80 93 f9 01 	sts	0x01F9, r24
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
    2eaa:	eb e7       	ldi	r30, 0x7B	; 123
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	80 62       	ori	r24, 0x20	; 32
    2eb2:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 11, 12
    2eb4:	ec e7       	ldi	r30, 0x7C	; 124
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	8b 7f       	andi	r24, 0xFB	; 251
    2ebc:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2ebe:	80 81       	ld	r24, Z
    2ec0:	8d 7f       	andi	r24, 0xFD	; 253
    2ec2:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2ec4:	80 81       	ld	r24, Z
    2ec6:	81 60       	ori	r24, 0x01	; 1
    2ec8:	80 83       	st	Z, r24
			transistor_vals[0] = ADC;			
    2eca:	80 91 78 00 	lds	r24, 0x0078
    2ece:	90 91 79 00 	lds	r25, 0x0079
    2ed2:	90 93 e6 01 	sts	0x01E6, r25
    2ed6:	80 93 e5 01 	sts	0x01E5, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2eda:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
			clear(ADMUX,MUX2); // Transistor 11, 12
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[0] = ADC;			
			break;
    2edc:	7f c0       	rjmp	.+254    	; 0x2fdc <adc_switch+0x320>

		case 8:
			state = 9;
    2ede:	89 e0       	ldi	r24, 0x09	; 9
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	90 93 fa 01 	sts	0x01FA, r25
    2ee6:	80 93 f9 01 	sts	0x01F9, r24
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
    2eea:	eb e7       	ldi	r30, 0x7B	; 123
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	80 62       	ori	r24, 0x20	; 32
    2ef2:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
    2ef4:	ec e7       	ldi	r30, 0x7C	; 124
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	8b 7f       	andi	r24, 0xFB	; 251
    2efc:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2efe:	80 81       	ld	r24, Z
    2f00:	82 60       	ori	r24, 0x02	; 2
    2f02:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2f04:	80 81       	ld	r24, Z
    2f06:	8e 7f       	andi	r24, 0xFE	; 254
    2f08:	80 83       	st	Z, r24
			transistor_vals[6] = ADC;			
    2f0a:	80 91 78 00 	lds	r24, 0x0078
    2f0e:	90 91 79 00 	lds	r25, 0x0079
    2f12:	90 93 f2 01 	sts	0x01F2, r25
    2f16:	80 93 f1 01 	sts	0x01F1, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[6] = ADC;			
			break;
    2f1c:	5f c0       	rjmp	.+190    	; 0x2fdc <adc_switch+0x320>

		case 9:
			state = 10;
    2f1e:	8a e0       	ldi	r24, 0x0A	; 10
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	90 93 fa 01 	sts	0x01FA, r25
    2f26:	80 93 f9 01 	sts	0x01F9, r24
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
    2f2a:	eb e7       	ldi	r30, 0x7B	; 123
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	80 62       	ori	r24, 0x20	; 32
    2f32:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 2
    2f34:	ec e7       	ldi	r30, 0x7C	; 124
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	8b 7f       	andi	r24, 0xFB	; 251
    2f3c:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2f3e:	80 81       	ld	r24, Z
    2f40:	82 60       	ori	r24, 0x02	; 2
    2f42:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2f44:	80 81       	ld	r24, Z
    2f46:	81 60       	ori	r24, 0x01	; 1
    2f48:	80 83       	st	Z, r24
			transistor_vals[3] = ADC;			
    2f4a:	80 91 78 00 	lds	r24, 0x0078
    2f4e:	90 91 79 00 	lds	r25, 0x0079
    2f52:	90 93 ec 01 	sts	0x01EC, r25
    2f56:	80 93 eb 01 	sts	0x01EB, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
			clear(ADMUX,MUX2); // Transistor 2
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[3] = ADC;			
			break;
    2f5c:	3f c0       	rjmp	.+126    	; 0x2fdc <adc_switch+0x320>

		case 10:
			state = 11;
    2f5e:	8b e0       	ldi	r24, 0x0B	; 11
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	90 93 fa 01 	sts	0x01FA, r25
    2f66:	80 93 f9 01 	sts	0x01F9, r24
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
    2f6a:	eb e7       	ldi	r30, 0x7B	; 123
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	80 62       	ori	r24, 0x20	; 32
    2f72:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 3
    2f74:	ec e7       	ldi	r30, 0x7C	; 124
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	80 81       	ld	r24, Z
    2f7a:	84 60       	ori	r24, 0x04	; 4
    2f7c:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2f7e:	80 81       	ld	r24, Z
    2f80:	8d 7f       	andi	r24, 0xFD	; 253
    2f82:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2f84:	80 81       	ld	r24, Z
    2f86:	8e 7f       	andi	r24, 0xFE	; 254
    2f88:	80 83       	st	Z, r24
			transistor_vals[1] = ADC;			
    2f8a:	80 91 78 00 	lds	r24, 0x0078
    2f8e:	90 91 79 00 	lds	r25, 0x0079
    2f92:	90 93 e8 01 	sts	0x01E8, r25
    2f96:	80 93 e7 01 	sts	0x01E7, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
			set(ADMUX,MUX2); // Transistor 3
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[1] = ADC;			
			break;
    2f9c:	1f c0       	rjmp	.+62     	; 0x2fdc <adc_switch+0x320>

		case 11:
			state = 0;
    2f9e:	10 92 fa 01 	sts	0x01FA, r1
    2fa2:	10 92 f9 01 	sts	0x01F9, r1
			set(ADCSRB,MUX5); // Select ADC13 at pin B6
    2fa6:	eb e7       	ldi	r30, 0x7B	; 123
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	80 62       	ori	r24, 0x20	; 32
    2fae:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 4
    2fb0:	ec e7       	ldi	r30, 0x7C	; 124
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
    2fb6:	84 60       	ori	r24, 0x04	; 4
    2fb8:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2fba:	80 81       	ld	r24, Z
    2fbc:	8d 7f       	andi	r24, 0xFD	; 253
    2fbe:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2fc0:	80 81       	ld	r24, Z
    2fc2:	81 60       	ori	r24, 0x01	; 1
    2fc4:	80 83       	st	Z, r24
			transistor_3 = ADC;			
    2fc6:	80 91 78 00 	lds	r24, 0x0078
    2fca:	90 91 79 00 	lds	r25, 0x0079
    2fce:	90 93 e4 01 	sts	0x01E4, r25
    2fd2:	80 93 e3 01 	sts	0x01E3, r24
			return_val = 1;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
			// m_usb_tx_string("  IR14: ");
			// m_usb_tx_int(transistor_vals[8]);
			// m_usb_tx_string("  IR15: ");
			// m_usb_tx_int(transistor_vals[9]);

			break;
    2fd8:	01 c0       	rjmp	.+2      	; 0x2fdc <adc_switch+0x320>
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2fda:	80 e0       	ldi	r24, 0x00	; 0
			// m_usb_tx_int(transistor_vals[9]);

			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
    2fdc:	ea e7       	ldi	r30, 0x7A	; 122
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	90 81       	ld	r25, Z
    2fe2:	90 68       	ori	r25, 0x80	; 128
    2fe4:	90 83       	st	Z, r25
	set(ADCSRA,ADSC); // Begin new conversion
    2fe6:	90 81       	ld	r25, Z
    2fe8:	90 64       	ori	r25, 0x40	; 64
    2fea:	90 83       	st	Z, r25

	return return_val;
}
    2fec:	08 95       	ret

00002fee <wireless_send>:
Public Functions
************************************************************/

/* Send Wireless Data */
void wireless_send(int sending_bot, char* send_buffer)
{
    2fee:	cf 93       	push	r28
    2ff0:	df 93       	push	r29
    2ff2:	eb 01       	movw	r28, r22
	if (sending_bot == RED_BULL)
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	51 f4       	brne	.+20     	; 0x300c <wireless_send+0x1e>
	{
		m_rf_send(RXADDRESS_BLUE_WHALE,send_buffer,PACKET_LENGTH); // Send RF Signal
    2ff8:	4a e0       	ldi	r20, 0x0A	; 10
    2ffa:	82 e2       	ldi	r24, 0x22	; 34
    2ffc:	0e 94 26 11 	call	0x224c	; 0x224c <m_rf_send>
		m_rf_send(RXADDRESS_GREEN_MONSTER,send_buffer,PACKET_LENGTH); // Send RF Signal
    3000:	4a e0       	ldi	r20, 0x0A	; 10
    3002:	be 01       	movw	r22, r28
    3004:	81 e2       	ldi	r24, 0x21	; 33
    3006:	0e 94 26 11 	call	0x224c	; 0x224c <m_rf_send>
    300a:	18 c0       	rjmp	.+48     	; 0x303c <wireless_send+0x4e>
	}
	if (sending_bot == GREEN_MONSTER)
    300c:	81 30       	cpi	r24, 0x01	; 1
    300e:	91 05       	cpc	r25, r1
    3010:	51 f4       	brne	.+20     	; 0x3026 <wireless_send+0x38>
	{
		m_rf_send(RXADDRESS_BLUE_WHALE,send_buffer,PACKET_LENGTH); // Send RF Signal
    3012:	4a e0       	ldi	r20, 0x0A	; 10
    3014:	82 e2       	ldi	r24, 0x22	; 34
    3016:	0e 94 26 11 	call	0x224c	; 0x224c <m_rf_send>
		m_rf_send(RXADDRESS_RED_BULL,send_buffer,PACKET_LENGTH); // Send RF Signal	
    301a:	4a e0       	ldi	r20, 0x0A	; 10
    301c:	be 01       	movw	r22, r28
    301e:	80 e2       	ldi	r24, 0x20	; 32
    3020:	0e 94 26 11 	call	0x224c	; 0x224c <m_rf_send>
    3024:	0b c0       	rjmp	.+22     	; 0x303c <wireless_send+0x4e>
	}
	if (sending_bot == BLUE_WHALE)
    3026:	02 97       	sbiw	r24, 0x02	; 2
    3028:	49 f4       	brne	.+18     	; 0x303c <wireless_send+0x4e>
	{
		m_rf_send(RXADDRESS_GREEN_MONSTER,send_buffer,PACKET_LENGTH); // Send RF Signal
    302a:	4a e0       	ldi	r20, 0x0A	; 10
    302c:	81 e2       	ldi	r24, 0x21	; 33
    302e:	0e 94 26 11 	call	0x224c	; 0x224c <m_rf_send>
		m_rf_send(RXADDRESS_RED_BULL,send_buffer,PACKET_LENGTH); // Send RF Signal
    3032:	4a e0       	ldi	r20, 0x0A	; 10
    3034:	be 01       	movw	r22, r28
    3036:	80 e2       	ldi	r24, 0x20	; 32
    3038:	0e 94 26 11 	call	0x224c	; 0x224c <m_rf_send>
	}
}
    303c:	df 91       	pop	r29
    303e:	cf 91       	pop	r28
    3040:	08 95       	ret

00003042 <__subsf3>:
    3042:	50 58       	subi	r21, 0x80	; 128

00003044 <__addsf3>:
    3044:	bb 27       	eor	r27, r27
    3046:	aa 27       	eor	r26, r26
    3048:	0e 94 39 18 	call	0x3072	; 0x3072 <__addsf3x>
    304c:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__fp_round>
    3050:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__fp_pscA>
    3054:	38 f0       	brcs	.+14     	; 0x3064 <__addsf3+0x20>
    3056:	0e 94 43 1a 	call	0x3486	; 0x3486 <__fp_pscB>
    305a:	20 f0       	brcs	.+8      	; 0x3064 <__addsf3+0x20>
    305c:	39 f4       	brne	.+14     	; 0x306c <__addsf3+0x28>
    305e:	9f 3f       	cpi	r25, 0xFF	; 255
    3060:	19 f4       	brne	.+6      	; 0x3068 <__addsf3+0x24>
    3062:	26 f4       	brtc	.+8      	; 0x306c <__addsf3+0x28>
    3064:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__fp_nan>
    3068:	0e f4       	brtc	.+2      	; 0x306c <__addsf3+0x28>
    306a:	e0 95       	com	r30
    306c:	e7 fb       	bst	r30, 7
    306e:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__fp_inf>

00003072 <__addsf3x>:
    3072:	e9 2f       	mov	r30, r25
    3074:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__fp_split3>
    3078:	58 f3       	brcs	.-42     	; 0x3050 <__addsf3+0xc>
    307a:	ba 17       	cp	r27, r26
    307c:	62 07       	cpc	r22, r18
    307e:	73 07       	cpc	r23, r19
    3080:	84 07       	cpc	r24, r20
    3082:	95 07       	cpc	r25, r21
    3084:	20 f0       	brcs	.+8      	; 0x308e <__addsf3x+0x1c>
    3086:	79 f4       	brne	.+30     	; 0x30a6 <__addsf3x+0x34>
    3088:	a6 f5       	brtc	.+104    	; 0x30f2 <__addsf3x+0x80>
    308a:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__fp_zero>
    308e:	0e f4       	brtc	.+2      	; 0x3092 <__addsf3x+0x20>
    3090:	e0 95       	com	r30
    3092:	0b 2e       	mov	r0, r27
    3094:	ba 2f       	mov	r27, r26
    3096:	a0 2d       	mov	r26, r0
    3098:	0b 01       	movw	r0, r22
    309a:	b9 01       	movw	r22, r18
    309c:	90 01       	movw	r18, r0
    309e:	0c 01       	movw	r0, r24
    30a0:	ca 01       	movw	r24, r20
    30a2:	a0 01       	movw	r20, r0
    30a4:	11 24       	eor	r1, r1
    30a6:	ff 27       	eor	r31, r31
    30a8:	59 1b       	sub	r21, r25
    30aa:	99 f0       	breq	.+38     	; 0x30d2 <__addsf3x+0x60>
    30ac:	59 3f       	cpi	r21, 0xF9	; 249
    30ae:	50 f4       	brcc	.+20     	; 0x30c4 <__addsf3x+0x52>
    30b0:	50 3e       	cpi	r21, 0xE0	; 224
    30b2:	68 f1       	brcs	.+90     	; 0x310e <__addsf3x+0x9c>
    30b4:	1a 16       	cp	r1, r26
    30b6:	f0 40       	sbci	r31, 0x00	; 0
    30b8:	a2 2f       	mov	r26, r18
    30ba:	23 2f       	mov	r18, r19
    30bc:	34 2f       	mov	r19, r20
    30be:	44 27       	eor	r20, r20
    30c0:	58 5f       	subi	r21, 0xF8	; 248
    30c2:	f3 cf       	rjmp	.-26     	; 0x30aa <__addsf3x+0x38>
    30c4:	46 95       	lsr	r20
    30c6:	37 95       	ror	r19
    30c8:	27 95       	ror	r18
    30ca:	a7 95       	ror	r26
    30cc:	f0 40       	sbci	r31, 0x00	; 0
    30ce:	53 95       	inc	r21
    30d0:	c9 f7       	brne	.-14     	; 0x30c4 <__addsf3x+0x52>
    30d2:	7e f4       	brtc	.+30     	; 0x30f2 <__addsf3x+0x80>
    30d4:	1f 16       	cp	r1, r31
    30d6:	ba 0b       	sbc	r27, r26
    30d8:	62 0b       	sbc	r22, r18
    30da:	73 0b       	sbc	r23, r19
    30dc:	84 0b       	sbc	r24, r20
    30de:	ba f0       	brmi	.+46     	; 0x310e <__addsf3x+0x9c>
    30e0:	91 50       	subi	r25, 0x01	; 1
    30e2:	a1 f0       	breq	.+40     	; 0x310c <__addsf3x+0x9a>
    30e4:	ff 0f       	add	r31, r31
    30e6:	bb 1f       	adc	r27, r27
    30e8:	66 1f       	adc	r22, r22
    30ea:	77 1f       	adc	r23, r23
    30ec:	88 1f       	adc	r24, r24
    30ee:	c2 f7       	brpl	.-16     	; 0x30e0 <__addsf3x+0x6e>
    30f0:	0e c0       	rjmp	.+28     	; 0x310e <__addsf3x+0x9c>
    30f2:	ba 0f       	add	r27, r26
    30f4:	62 1f       	adc	r22, r18
    30f6:	73 1f       	adc	r23, r19
    30f8:	84 1f       	adc	r24, r20
    30fa:	48 f4       	brcc	.+18     	; 0x310e <__addsf3x+0x9c>
    30fc:	87 95       	ror	r24
    30fe:	77 95       	ror	r23
    3100:	67 95       	ror	r22
    3102:	b7 95       	ror	r27
    3104:	f7 95       	ror	r31
    3106:	9e 3f       	cpi	r25, 0xFE	; 254
    3108:	08 f0       	brcs	.+2      	; 0x310c <__addsf3x+0x9a>
    310a:	b0 cf       	rjmp	.-160    	; 0x306c <__addsf3+0x28>
    310c:	93 95       	inc	r25
    310e:	88 0f       	add	r24, r24
    3110:	08 f0       	brcs	.+2      	; 0x3114 <__addsf3x+0xa2>
    3112:	99 27       	eor	r25, r25
    3114:	ee 0f       	add	r30, r30
    3116:	97 95       	ror	r25
    3118:	87 95       	ror	r24
    311a:	08 95       	ret
    311c:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__fp_pscA>
    3120:	60 f0       	brcs	.+24     	; 0x313a <__addsf3x+0xc8>
    3122:	80 e8       	ldi	r24, 0x80	; 128
    3124:	91 e0       	ldi	r25, 0x01	; 1
    3126:	09 f4       	brne	.+2      	; 0x312a <__addsf3x+0xb8>
    3128:	9e ef       	ldi	r25, 0xFE	; 254
    312a:	0e 94 43 1a 	call	0x3486	; 0x3486 <__fp_pscB>
    312e:	28 f0       	brcs	.+10     	; 0x313a <__addsf3x+0xc8>
    3130:	40 e8       	ldi	r20, 0x80	; 128
    3132:	51 e0       	ldi	r21, 0x01	; 1
    3134:	71 f4       	brne	.+28     	; 0x3152 <atan2+0x10>
    3136:	5e ef       	ldi	r21, 0xFE	; 254
    3138:	0c c0       	rjmp	.+24     	; 0x3152 <atan2+0x10>
    313a:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__fp_nan>
    313e:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__fp_zero>

00003142 <atan2>:
    3142:	e9 2f       	mov	r30, r25
    3144:	e0 78       	andi	r30, 0x80	; 128
    3146:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__fp_split3>
    314a:	40 f3       	brcs	.-48     	; 0x311c <__addsf3x+0xaa>
    314c:	09 2e       	mov	r0, r25
    314e:	05 2a       	or	r0, r21
    3150:	b1 f3       	breq	.-20     	; 0x313e <__addsf3x+0xcc>
    3152:	26 17       	cp	r18, r22
    3154:	37 07       	cpc	r19, r23
    3156:	48 07       	cpc	r20, r24
    3158:	59 07       	cpc	r21, r25
    315a:	38 f0       	brcs	.+14     	; 0x316a <atan2+0x28>
    315c:	0e 2e       	mov	r0, r30
    315e:	07 f8       	bld	r0, 7
    3160:	e0 25       	eor	r30, r0
    3162:	69 f0       	breq	.+26     	; 0x317e <atan2+0x3c>
    3164:	e0 25       	eor	r30, r0
    3166:	e0 64       	ori	r30, 0x40	; 64
    3168:	0a c0       	rjmp	.+20     	; 0x317e <atan2+0x3c>
    316a:	ef 63       	ori	r30, 0x3F	; 63
    316c:	07 f8       	bld	r0, 7
    316e:	00 94       	com	r0
    3170:	07 fa       	bst	r0, 7
    3172:	db 01       	movw	r26, r22
    3174:	b9 01       	movw	r22, r18
    3176:	9d 01       	movw	r18, r26
    3178:	dc 01       	movw	r26, r24
    317a:	ca 01       	movw	r24, r20
    317c:	ad 01       	movw	r20, r26
    317e:	ef 93       	push	r30
    3180:	0e 94 21 19 	call	0x3242	; 0x3242 <__divsf3_pse>
    3184:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__fp_round>
    3188:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <atan>
    318c:	5f 91       	pop	r21
    318e:	55 23       	and	r21, r21
    3190:	39 f0       	breq	.+14     	; 0x31a0 <atan2+0x5e>
    3192:	2b ed       	ldi	r18, 0xDB	; 219
    3194:	3f e0       	ldi	r19, 0x0F	; 15
    3196:	49 e4       	ldi	r20, 0x49	; 73
    3198:	50 fd       	sbrc	r21, 0
    319a:	49 ec       	ldi	r20, 0xC9	; 201
    319c:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__addsf3>
    31a0:	08 95       	ret

000031a2 <atan>:
    31a2:	df 93       	push	r29
    31a4:	dd 27       	eor	r29, r29
    31a6:	b9 2f       	mov	r27, r25
    31a8:	bf 77       	andi	r27, 0x7F	; 127
    31aa:	40 e8       	ldi	r20, 0x80	; 128
    31ac:	5f e3       	ldi	r21, 0x3F	; 63
    31ae:	16 16       	cp	r1, r22
    31b0:	17 06       	cpc	r1, r23
    31b2:	48 07       	cpc	r20, r24
    31b4:	5b 07       	cpc	r21, r27
    31b6:	18 f4       	brcc	.+6      	; 0x31be <atan+0x1c>
    31b8:	d9 2f       	mov	r29, r25
    31ba:	0e 94 c8 1a 	call	0x3590	; 0x3590 <inverse>
    31be:	9f 93       	push	r25
    31c0:	8f 93       	push	r24
    31c2:	7f 93       	push	r23
    31c4:	6f 93       	push	r22
    31c6:	0e 94 8b 1b 	call	0x3716	; 0x3716 <square>
    31ca:	e8 ed       	ldi	r30, 0xD8	; 216
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	0e 94 15 1a 	call	0x342a	; 0x342a <__fp_powser>
    31d2:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__fp_round>
    31d6:	2f 91       	pop	r18
    31d8:	3f 91       	pop	r19
    31da:	4f 91       	pop	r20
    31dc:	5f 91       	pop	r21
    31de:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__mulsf3x>
    31e2:	dd 23       	and	r29, r29
    31e4:	51 f0       	breq	.+20     	; 0x31fa <atan+0x58>
    31e6:	90 58       	subi	r25, 0x80	; 128
    31e8:	a2 ea       	ldi	r26, 0xA2	; 162
    31ea:	2a ed       	ldi	r18, 0xDA	; 218
    31ec:	3f e0       	ldi	r19, 0x0F	; 15
    31ee:	49 ec       	ldi	r20, 0xC9	; 201
    31f0:	5f e3       	ldi	r21, 0x3F	; 63
    31f2:	d0 78       	andi	r29, 0x80	; 128
    31f4:	5d 27       	eor	r21, r29
    31f6:	0e 94 39 18 	call	0x3072	; 0x3072 <__addsf3x>
    31fa:	df 91       	pop	r29
    31fc:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__fp_round>

00003200 <__cmpsf2>:
    3200:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__fp_cmp>
    3204:	08 f4       	brcc	.+2      	; 0x3208 <__cmpsf2+0x8>
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	08 95       	ret

0000320a <cos>:
    320a:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__fp_rempio2>
    320e:	e3 95       	inc	r30
    3210:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__fp_sinus>

00003214 <__divsf3>:
    3214:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3x>
    3218:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__fp_round>
    321c:	0e 94 43 1a 	call	0x3486	; 0x3486 <__fp_pscB>
    3220:	58 f0       	brcs	.+22     	; 0x3238 <__divsf3+0x24>
    3222:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__fp_pscA>
    3226:	40 f0       	brcs	.+16     	; 0x3238 <__divsf3+0x24>
    3228:	29 f4       	brne	.+10     	; 0x3234 <__divsf3+0x20>
    322a:	5f 3f       	cpi	r21, 0xFF	; 255
    322c:	29 f0       	breq	.+10     	; 0x3238 <__divsf3+0x24>
    322e:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__fp_inf>
    3232:	51 11       	cpse	r21, r1
    3234:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__fp_szero>
    3238:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__fp_nan>

0000323c <__divsf3x>:
    323c:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__fp_split3>
    3240:	68 f3       	brcs	.-38     	; 0x321c <__divsf3+0x8>

00003242 <__divsf3_pse>:
    3242:	99 23       	and	r25, r25
    3244:	b1 f3       	breq	.-20     	; 0x3232 <__divsf3+0x1e>
    3246:	55 23       	and	r21, r21
    3248:	91 f3       	breq	.-28     	; 0x322e <__divsf3+0x1a>
    324a:	95 1b       	sub	r25, r21
    324c:	55 0b       	sbc	r21, r21
    324e:	bb 27       	eor	r27, r27
    3250:	aa 27       	eor	r26, r26
    3252:	62 17       	cp	r22, r18
    3254:	73 07       	cpc	r23, r19
    3256:	84 07       	cpc	r24, r20
    3258:	38 f0       	brcs	.+14     	; 0x3268 <__divsf3_pse+0x26>
    325a:	9f 5f       	subi	r25, 0xFF	; 255
    325c:	5f 4f       	sbci	r21, 0xFF	; 255
    325e:	22 0f       	add	r18, r18
    3260:	33 1f       	adc	r19, r19
    3262:	44 1f       	adc	r20, r20
    3264:	aa 1f       	adc	r26, r26
    3266:	a9 f3       	breq	.-22     	; 0x3252 <__divsf3_pse+0x10>
    3268:	35 d0       	rcall	.+106    	; 0x32d4 <__divsf3_pse+0x92>
    326a:	0e 2e       	mov	r0, r30
    326c:	3a f0       	brmi	.+14     	; 0x327c <__divsf3_pse+0x3a>
    326e:	e0 e8       	ldi	r30, 0x80	; 128
    3270:	32 d0       	rcall	.+100    	; 0x32d6 <__divsf3_pse+0x94>
    3272:	91 50       	subi	r25, 0x01	; 1
    3274:	50 40       	sbci	r21, 0x00	; 0
    3276:	e6 95       	lsr	r30
    3278:	00 1c       	adc	r0, r0
    327a:	ca f7       	brpl	.-14     	; 0x326e <__divsf3_pse+0x2c>
    327c:	2b d0       	rcall	.+86     	; 0x32d4 <__divsf3_pse+0x92>
    327e:	fe 2f       	mov	r31, r30
    3280:	29 d0       	rcall	.+82     	; 0x32d4 <__divsf3_pse+0x92>
    3282:	66 0f       	add	r22, r22
    3284:	77 1f       	adc	r23, r23
    3286:	88 1f       	adc	r24, r24
    3288:	bb 1f       	adc	r27, r27
    328a:	26 17       	cp	r18, r22
    328c:	37 07       	cpc	r19, r23
    328e:	48 07       	cpc	r20, r24
    3290:	ab 07       	cpc	r26, r27
    3292:	b0 e8       	ldi	r27, 0x80	; 128
    3294:	09 f0       	breq	.+2      	; 0x3298 <__divsf3_pse+0x56>
    3296:	bb 0b       	sbc	r27, r27
    3298:	80 2d       	mov	r24, r0
    329a:	bf 01       	movw	r22, r30
    329c:	ff 27       	eor	r31, r31
    329e:	93 58       	subi	r25, 0x83	; 131
    32a0:	5f 4f       	sbci	r21, 0xFF	; 255
    32a2:	3a f0       	brmi	.+14     	; 0x32b2 <__divsf3_pse+0x70>
    32a4:	9e 3f       	cpi	r25, 0xFE	; 254
    32a6:	51 05       	cpc	r21, r1
    32a8:	78 f0       	brcs	.+30     	; 0x32c8 <__divsf3_pse+0x86>
    32aa:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__fp_inf>
    32ae:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__fp_szero>
    32b2:	5f 3f       	cpi	r21, 0xFF	; 255
    32b4:	e4 f3       	brlt	.-8      	; 0x32ae <__divsf3_pse+0x6c>
    32b6:	98 3e       	cpi	r25, 0xE8	; 232
    32b8:	d4 f3       	brlt	.-12     	; 0x32ae <__divsf3_pse+0x6c>
    32ba:	86 95       	lsr	r24
    32bc:	77 95       	ror	r23
    32be:	67 95       	ror	r22
    32c0:	b7 95       	ror	r27
    32c2:	f7 95       	ror	r31
    32c4:	9f 5f       	subi	r25, 0xFF	; 255
    32c6:	c9 f7       	brne	.-14     	; 0x32ba <__divsf3_pse+0x78>
    32c8:	88 0f       	add	r24, r24
    32ca:	91 1d       	adc	r25, r1
    32cc:	96 95       	lsr	r25
    32ce:	87 95       	ror	r24
    32d0:	97 f9       	bld	r25, 7
    32d2:	08 95       	ret
    32d4:	e1 e0       	ldi	r30, 0x01	; 1
    32d6:	66 0f       	add	r22, r22
    32d8:	77 1f       	adc	r23, r23
    32da:	88 1f       	adc	r24, r24
    32dc:	bb 1f       	adc	r27, r27
    32de:	62 17       	cp	r22, r18
    32e0:	73 07       	cpc	r23, r19
    32e2:	84 07       	cpc	r24, r20
    32e4:	ba 07       	cpc	r27, r26
    32e6:	20 f0       	brcs	.+8      	; 0x32f0 <__divsf3_pse+0xae>
    32e8:	62 1b       	sub	r22, r18
    32ea:	73 0b       	sbc	r23, r19
    32ec:	84 0b       	sbc	r24, r20
    32ee:	ba 0b       	sbc	r27, r26
    32f0:	ee 1f       	adc	r30, r30
    32f2:	88 f7       	brcc	.-30     	; 0x32d6 <__divsf3_pse+0x94>
    32f4:	e0 95       	com	r30
    32f6:	08 95       	ret

000032f8 <__fixunssfsi>:
    32f8:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__fp_splitA>
    32fc:	88 f0       	brcs	.+34     	; 0x3320 <__fixunssfsi+0x28>
    32fe:	9f 57       	subi	r25, 0x7F	; 127
    3300:	98 f0       	brcs	.+38     	; 0x3328 <__fixunssfsi+0x30>
    3302:	b9 2f       	mov	r27, r25
    3304:	99 27       	eor	r25, r25
    3306:	b7 51       	subi	r27, 0x17	; 23
    3308:	b0 f0       	brcs	.+44     	; 0x3336 <__fixunssfsi+0x3e>
    330a:	e1 f0       	breq	.+56     	; 0x3344 <__fixunssfsi+0x4c>
    330c:	66 0f       	add	r22, r22
    330e:	77 1f       	adc	r23, r23
    3310:	88 1f       	adc	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	1a f0       	brmi	.+6      	; 0x331c <__fixunssfsi+0x24>
    3316:	ba 95       	dec	r27
    3318:	c9 f7       	brne	.-14     	; 0x330c <__fixunssfsi+0x14>
    331a:	14 c0       	rjmp	.+40     	; 0x3344 <__fixunssfsi+0x4c>
    331c:	b1 30       	cpi	r27, 0x01	; 1
    331e:	91 f0       	breq	.+36     	; 0x3344 <__fixunssfsi+0x4c>
    3320:	0e 94 bc 1a 	call	0x3578	; 0x3578 <__fp_zero>
    3324:	b1 e0       	ldi	r27, 0x01	; 1
    3326:	08 95       	ret
    3328:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__fp_zero>
    332c:	67 2f       	mov	r22, r23
    332e:	78 2f       	mov	r23, r24
    3330:	88 27       	eor	r24, r24
    3332:	b8 5f       	subi	r27, 0xF8	; 248
    3334:	39 f0       	breq	.+14     	; 0x3344 <__fixunssfsi+0x4c>
    3336:	b9 3f       	cpi	r27, 0xF9	; 249
    3338:	cc f3       	brlt	.-14     	; 0x332c <__fixunssfsi+0x34>
    333a:	86 95       	lsr	r24
    333c:	77 95       	ror	r23
    333e:	67 95       	ror	r22
    3340:	b3 95       	inc	r27
    3342:	d9 f7       	brne	.-10     	; 0x333a <__fixunssfsi+0x42>
    3344:	3e f4       	brtc	.+14     	; 0x3354 <__fixunssfsi+0x5c>
    3346:	90 95       	com	r25
    3348:	80 95       	com	r24
    334a:	70 95       	com	r23
    334c:	61 95       	neg	r22
    334e:	7f 4f       	sbci	r23, 0xFF	; 255
    3350:	8f 4f       	sbci	r24, 0xFF	; 255
    3352:	9f 4f       	sbci	r25, 0xFF	; 255
    3354:	08 95       	ret

00003356 <__floatunsisf>:
    3356:	e8 94       	clt
    3358:	09 c0       	rjmp	.+18     	; 0x336c <__floatsisf+0x12>

0000335a <__floatsisf>:
    335a:	97 fb       	bst	r25, 7
    335c:	3e f4       	brtc	.+14     	; 0x336c <__floatsisf+0x12>
    335e:	90 95       	com	r25
    3360:	80 95       	com	r24
    3362:	70 95       	com	r23
    3364:	61 95       	neg	r22
    3366:	7f 4f       	sbci	r23, 0xFF	; 255
    3368:	8f 4f       	sbci	r24, 0xFF	; 255
    336a:	9f 4f       	sbci	r25, 0xFF	; 255
    336c:	99 23       	and	r25, r25
    336e:	a9 f0       	breq	.+42     	; 0x339a <__floatsisf+0x40>
    3370:	f9 2f       	mov	r31, r25
    3372:	96 e9       	ldi	r25, 0x96	; 150
    3374:	bb 27       	eor	r27, r27
    3376:	93 95       	inc	r25
    3378:	f6 95       	lsr	r31
    337a:	87 95       	ror	r24
    337c:	77 95       	ror	r23
    337e:	67 95       	ror	r22
    3380:	b7 95       	ror	r27
    3382:	f1 11       	cpse	r31, r1
    3384:	f8 cf       	rjmp	.-16     	; 0x3376 <__floatsisf+0x1c>
    3386:	fa f4       	brpl	.+62     	; 0x33c6 <__floatsisf+0x6c>
    3388:	bb 0f       	add	r27, r27
    338a:	11 f4       	brne	.+4      	; 0x3390 <__floatsisf+0x36>
    338c:	60 ff       	sbrs	r22, 0
    338e:	1b c0       	rjmp	.+54     	; 0x33c6 <__floatsisf+0x6c>
    3390:	6f 5f       	subi	r22, 0xFF	; 255
    3392:	7f 4f       	sbci	r23, 0xFF	; 255
    3394:	8f 4f       	sbci	r24, 0xFF	; 255
    3396:	9f 4f       	sbci	r25, 0xFF	; 255
    3398:	16 c0       	rjmp	.+44     	; 0x33c6 <__floatsisf+0x6c>
    339a:	88 23       	and	r24, r24
    339c:	11 f0       	breq	.+4      	; 0x33a2 <__floatsisf+0x48>
    339e:	96 e9       	ldi	r25, 0x96	; 150
    33a0:	11 c0       	rjmp	.+34     	; 0x33c4 <__floatsisf+0x6a>
    33a2:	77 23       	and	r23, r23
    33a4:	21 f0       	breq	.+8      	; 0x33ae <__floatsisf+0x54>
    33a6:	9e e8       	ldi	r25, 0x8E	; 142
    33a8:	87 2f       	mov	r24, r23
    33aa:	76 2f       	mov	r23, r22
    33ac:	05 c0       	rjmp	.+10     	; 0x33b8 <__floatsisf+0x5e>
    33ae:	66 23       	and	r22, r22
    33b0:	71 f0       	breq	.+28     	; 0x33ce <__floatsisf+0x74>
    33b2:	96 e8       	ldi	r25, 0x86	; 134
    33b4:	86 2f       	mov	r24, r22
    33b6:	70 e0       	ldi	r23, 0x00	; 0
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	2a f0       	brmi	.+10     	; 0x33c6 <__floatsisf+0x6c>
    33bc:	9a 95       	dec	r25
    33be:	66 0f       	add	r22, r22
    33c0:	77 1f       	adc	r23, r23
    33c2:	88 1f       	adc	r24, r24
    33c4:	da f7       	brpl	.-10     	; 0x33bc <__floatsisf+0x62>
    33c6:	88 0f       	add	r24, r24
    33c8:	96 95       	lsr	r25
    33ca:	87 95       	ror	r24
    33cc:	97 f9       	bld	r25, 7
    33ce:	08 95       	ret

000033d0 <__fp_cmp>:
    33d0:	99 0f       	add	r25, r25
    33d2:	00 08       	sbc	r0, r0
    33d4:	55 0f       	add	r21, r21
    33d6:	aa 0b       	sbc	r26, r26
    33d8:	e0 e8       	ldi	r30, 0x80	; 128
    33da:	fe ef       	ldi	r31, 0xFE	; 254
    33dc:	16 16       	cp	r1, r22
    33de:	17 06       	cpc	r1, r23
    33e0:	e8 07       	cpc	r30, r24
    33e2:	f9 07       	cpc	r31, r25
    33e4:	c0 f0       	brcs	.+48     	; 0x3416 <__fp_cmp+0x46>
    33e6:	12 16       	cp	r1, r18
    33e8:	13 06       	cpc	r1, r19
    33ea:	e4 07       	cpc	r30, r20
    33ec:	f5 07       	cpc	r31, r21
    33ee:	98 f0       	brcs	.+38     	; 0x3416 <__fp_cmp+0x46>
    33f0:	62 1b       	sub	r22, r18
    33f2:	73 0b       	sbc	r23, r19
    33f4:	84 0b       	sbc	r24, r20
    33f6:	95 0b       	sbc	r25, r21
    33f8:	39 f4       	brne	.+14     	; 0x3408 <__fp_cmp+0x38>
    33fa:	0a 26       	eor	r0, r26
    33fc:	61 f0       	breq	.+24     	; 0x3416 <__fp_cmp+0x46>
    33fe:	23 2b       	or	r18, r19
    3400:	24 2b       	or	r18, r20
    3402:	25 2b       	or	r18, r21
    3404:	21 f4       	brne	.+8      	; 0x340e <__fp_cmp+0x3e>
    3406:	08 95       	ret
    3408:	0a 26       	eor	r0, r26
    340a:	09 f4       	brne	.+2      	; 0x340e <__fp_cmp+0x3e>
    340c:	a1 40       	sbci	r26, 0x01	; 1
    340e:	a6 95       	lsr	r26
    3410:	8f ef       	ldi	r24, 0xFF	; 255
    3412:	81 1d       	adc	r24, r1
    3414:	81 1d       	adc	r24, r1
    3416:	08 95       	ret

00003418 <__fp_inf>:
    3418:	97 f9       	bld	r25, 7
    341a:	9f 67       	ori	r25, 0x7F	; 127
    341c:	80 e8       	ldi	r24, 0x80	; 128
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	08 95       	ret

00003424 <__fp_nan>:
    3424:	9f ef       	ldi	r25, 0xFF	; 255
    3426:	80 ec       	ldi	r24, 0xC0	; 192
    3428:	08 95       	ret

0000342a <__fp_powser>:
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	1f 93       	push	r17
    3430:	0f 93       	push	r16
    3432:	ff 92       	push	r15
    3434:	ef 92       	push	r14
    3436:	df 92       	push	r13
    3438:	7b 01       	movw	r14, r22
    343a:	8c 01       	movw	r16, r24
    343c:	68 94       	set
    343e:	06 c0       	rjmp	.+12     	; 0x344c <__fp_powser+0x22>
    3440:	da 2e       	mov	r13, r26
    3442:	ef 01       	movw	r28, r30
    3444:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__mulsf3x>
    3448:	fe 01       	movw	r30, r28
    344a:	e8 94       	clt
    344c:	a5 91       	lpm	r26, Z+
    344e:	25 91       	lpm	r18, Z+
    3450:	35 91       	lpm	r19, Z+
    3452:	45 91       	lpm	r20, Z+
    3454:	55 91       	lpm	r21, Z+
    3456:	a6 f3       	brts	.-24     	; 0x3440 <__fp_powser+0x16>
    3458:	ef 01       	movw	r28, r30
    345a:	0e 94 39 18 	call	0x3072	; 0x3072 <__addsf3x>
    345e:	fe 01       	movw	r30, r28
    3460:	97 01       	movw	r18, r14
    3462:	a8 01       	movw	r20, r16
    3464:	da 94       	dec	r13
    3466:	69 f7       	brne	.-38     	; 0x3442 <__fp_powser+0x18>
    3468:	df 90       	pop	r13
    346a:	ef 90       	pop	r14
    346c:	ff 90       	pop	r15
    346e:	0f 91       	pop	r16
    3470:	1f 91       	pop	r17
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <__fp_pscA>:
    3478:	00 24       	eor	r0, r0
    347a:	0a 94       	dec	r0
    347c:	16 16       	cp	r1, r22
    347e:	17 06       	cpc	r1, r23
    3480:	18 06       	cpc	r1, r24
    3482:	09 06       	cpc	r0, r25
    3484:	08 95       	ret

00003486 <__fp_pscB>:
    3486:	00 24       	eor	r0, r0
    3488:	0a 94       	dec	r0
    348a:	12 16       	cp	r1, r18
    348c:	13 06       	cpc	r1, r19
    348e:	14 06       	cpc	r1, r20
    3490:	05 06       	cpc	r0, r21
    3492:	08 95       	ret
    3494:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__fp_nan>

00003498 <__fp_rempio2>:
    3498:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__fp_splitA>
    349c:	d8 f3       	brcs	.-10     	; 0x3494 <__fp_pscB+0xe>
    349e:	e8 94       	clt
    34a0:	e0 e0       	ldi	r30, 0x00	; 0
    34a2:	bb 27       	eor	r27, r27
    34a4:	9f 57       	subi	r25, 0x7F	; 127
    34a6:	f0 f0       	brcs	.+60     	; 0x34e4 <__fp_rempio2+0x4c>
    34a8:	2a ed       	ldi	r18, 0xDA	; 218
    34aa:	3f e0       	ldi	r19, 0x0F	; 15
    34ac:	49 ec       	ldi	r20, 0xC9	; 201
    34ae:	06 c0       	rjmp	.+12     	; 0x34bc <__fp_rempio2+0x24>
    34b0:	ee 0f       	add	r30, r30
    34b2:	bb 0f       	add	r27, r27
    34b4:	66 1f       	adc	r22, r22
    34b6:	77 1f       	adc	r23, r23
    34b8:	88 1f       	adc	r24, r24
    34ba:	28 f0       	brcs	.+10     	; 0x34c6 <__fp_rempio2+0x2e>
    34bc:	b2 3a       	cpi	r27, 0xA2	; 162
    34be:	62 07       	cpc	r22, r18
    34c0:	73 07       	cpc	r23, r19
    34c2:	84 07       	cpc	r24, r20
    34c4:	28 f0       	brcs	.+10     	; 0x34d0 <__fp_rempio2+0x38>
    34c6:	b2 5a       	subi	r27, 0xA2	; 162
    34c8:	62 0b       	sbc	r22, r18
    34ca:	73 0b       	sbc	r23, r19
    34cc:	84 0b       	sbc	r24, r20
    34ce:	e3 95       	inc	r30
    34d0:	9a 95       	dec	r25
    34d2:	72 f7       	brpl	.-36     	; 0x34b0 <__fp_rempio2+0x18>
    34d4:	80 38       	cpi	r24, 0x80	; 128
    34d6:	30 f4       	brcc	.+12     	; 0x34e4 <__fp_rempio2+0x4c>
    34d8:	9a 95       	dec	r25
    34da:	bb 0f       	add	r27, r27
    34dc:	66 1f       	adc	r22, r22
    34de:	77 1f       	adc	r23, r23
    34e0:	88 1f       	adc	r24, r24
    34e2:	d2 f7       	brpl	.-12     	; 0x34d8 <__fp_rempio2+0x40>
    34e4:	90 48       	sbci	r25, 0x80	; 128
    34e6:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <__fp_mpack_finite>

000034ea <__fp_round>:
    34ea:	09 2e       	mov	r0, r25
    34ec:	03 94       	inc	r0
    34ee:	00 0c       	add	r0, r0
    34f0:	11 f4       	brne	.+4      	; 0x34f6 <__fp_round+0xc>
    34f2:	88 23       	and	r24, r24
    34f4:	52 f0       	brmi	.+20     	; 0x350a <__fp_round+0x20>
    34f6:	bb 0f       	add	r27, r27
    34f8:	40 f4       	brcc	.+16     	; 0x350a <__fp_round+0x20>
    34fa:	bf 2b       	or	r27, r31
    34fc:	11 f4       	brne	.+4      	; 0x3502 <__fp_round+0x18>
    34fe:	60 ff       	sbrs	r22, 0
    3500:	04 c0       	rjmp	.+8      	; 0x350a <__fp_round+0x20>
    3502:	6f 5f       	subi	r22, 0xFF	; 255
    3504:	7f 4f       	sbci	r23, 0xFF	; 255
    3506:	8f 4f       	sbci	r24, 0xFF	; 255
    3508:	9f 4f       	sbci	r25, 0xFF	; 255
    350a:	08 95       	ret

0000350c <__fp_sinus>:
    350c:	ef 93       	push	r30
    350e:	e0 ff       	sbrs	r30, 0
    3510:	07 c0       	rjmp	.+14     	; 0x3520 <__fp_sinus+0x14>
    3512:	a2 ea       	ldi	r26, 0xA2	; 162
    3514:	2a ed       	ldi	r18, 0xDA	; 218
    3516:	3f e0       	ldi	r19, 0x0F	; 15
    3518:	49 ec       	ldi	r20, 0xC9	; 201
    351a:	5f eb       	ldi	r21, 0xBF	; 191
    351c:	0e 94 39 18 	call	0x3072	; 0x3072 <__addsf3x>
    3520:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__fp_round>
    3524:	0f 90       	pop	r0
    3526:	03 94       	inc	r0
    3528:	01 fc       	sbrc	r0, 1
    352a:	90 58       	subi	r25, 0x80	; 128
    352c:	e5 e0       	ldi	r30, 0x05	; 5
    352e:	f1 e0       	ldi	r31, 0x01	; 1
    3530:	0c 94 a4 1b 	jmp	0x3748	; 0x3748 <__fp_powsodd>

00003534 <__fp_split3>:
    3534:	57 fd       	sbrc	r21, 7
    3536:	90 58       	subi	r25, 0x80	; 128
    3538:	44 0f       	add	r20, r20
    353a:	55 1f       	adc	r21, r21
    353c:	59 f0       	breq	.+22     	; 0x3554 <__fp_splitA+0x10>
    353e:	5f 3f       	cpi	r21, 0xFF	; 255
    3540:	71 f0       	breq	.+28     	; 0x355e <__fp_splitA+0x1a>
    3542:	47 95       	ror	r20

00003544 <__fp_splitA>:
    3544:	88 0f       	add	r24, r24
    3546:	97 fb       	bst	r25, 7
    3548:	99 1f       	adc	r25, r25
    354a:	61 f0       	breq	.+24     	; 0x3564 <__fp_splitA+0x20>
    354c:	9f 3f       	cpi	r25, 0xFF	; 255
    354e:	79 f0       	breq	.+30     	; 0x356e <__fp_splitA+0x2a>
    3550:	87 95       	ror	r24
    3552:	08 95       	ret
    3554:	12 16       	cp	r1, r18
    3556:	13 06       	cpc	r1, r19
    3558:	14 06       	cpc	r1, r20
    355a:	55 1f       	adc	r21, r21
    355c:	f2 cf       	rjmp	.-28     	; 0x3542 <__fp_split3+0xe>
    355e:	46 95       	lsr	r20
    3560:	f1 df       	rcall	.-30     	; 0x3544 <__fp_splitA>
    3562:	08 c0       	rjmp	.+16     	; 0x3574 <__fp_splitA+0x30>
    3564:	16 16       	cp	r1, r22
    3566:	17 06       	cpc	r1, r23
    3568:	18 06       	cpc	r1, r24
    356a:	99 1f       	adc	r25, r25
    356c:	f1 cf       	rjmp	.-30     	; 0x3550 <__fp_splitA+0xc>
    356e:	86 95       	lsr	r24
    3570:	71 05       	cpc	r23, r1
    3572:	61 05       	cpc	r22, r1
    3574:	08 94       	sec
    3576:	08 95       	ret

00003578 <__fp_zero>:
    3578:	e8 94       	clt

0000357a <__fp_szero>:
    357a:	bb 27       	eor	r27, r27
    357c:	66 27       	eor	r22, r22
    357e:	77 27       	eor	r23, r23
    3580:	cb 01       	movw	r24, r22
    3582:	97 f9       	bld	r25, 7
    3584:	08 95       	ret

00003586 <__gesf2>:
    3586:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__fp_cmp>
    358a:	08 f4       	brcc	.+2      	; 0x358e <__gesf2+0x8>
    358c:	8f ef       	ldi	r24, 0xFF	; 255
    358e:	08 95       	ret

00003590 <inverse>:
    3590:	9b 01       	movw	r18, r22
    3592:	ac 01       	movw	r20, r24
    3594:	60 e0       	ldi	r22, 0x00	; 0
    3596:	70 e0       	ldi	r23, 0x00	; 0
    3598:	80 e8       	ldi	r24, 0x80	; 128
    359a:	9f e3       	ldi	r25, 0x3F	; 63
    359c:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__divsf3>

000035a0 <__mulsf3>:
    35a0:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__mulsf3x>
    35a4:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__fp_round>
    35a8:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__fp_pscA>
    35ac:	38 f0       	brcs	.+14     	; 0x35bc <__mulsf3+0x1c>
    35ae:	0e 94 43 1a 	call	0x3486	; 0x3486 <__fp_pscB>
    35b2:	20 f0       	brcs	.+8      	; 0x35bc <__mulsf3+0x1c>
    35b4:	95 23       	and	r25, r21
    35b6:	11 f0       	breq	.+4      	; 0x35bc <__mulsf3+0x1c>
    35b8:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__fp_inf>
    35bc:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__fp_nan>
    35c0:	11 24       	eor	r1, r1
    35c2:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__fp_szero>

000035c6 <__mulsf3x>:
    35c6:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__fp_split3>
    35ca:	70 f3       	brcs	.-36     	; 0x35a8 <__mulsf3+0x8>

000035cc <__mulsf3_pse>:
    35cc:	95 9f       	mul	r25, r21
    35ce:	c1 f3       	breq	.-16     	; 0x35c0 <__mulsf3+0x20>
    35d0:	95 0f       	add	r25, r21
    35d2:	50 e0       	ldi	r21, 0x00	; 0
    35d4:	55 1f       	adc	r21, r21
    35d6:	62 9f       	mul	r22, r18
    35d8:	f0 01       	movw	r30, r0
    35da:	72 9f       	mul	r23, r18
    35dc:	bb 27       	eor	r27, r27
    35de:	f0 0d       	add	r31, r0
    35e0:	b1 1d       	adc	r27, r1
    35e2:	63 9f       	mul	r22, r19
    35e4:	aa 27       	eor	r26, r26
    35e6:	f0 0d       	add	r31, r0
    35e8:	b1 1d       	adc	r27, r1
    35ea:	aa 1f       	adc	r26, r26
    35ec:	64 9f       	mul	r22, r20
    35ee:	66 27       	eor	r22, r22
    35f0:	b0 0d       	add	r27, r0
    35f2:	a1 1d       	adc	r26, r1
    35f4:	66 1f       	adc	r22, r22
    35f6:	82 9f       	mul	r24, r18
    35f8:	22 27       	eor	r18, r18
    35fa:	b0 0d       	add	r27, r0
    35fc:	a1 1d       	adc	r26, r1
    35fe:	62 1f       	adc	r22, r18
    3600:	73 9f       	mul	r23, r19
    3602:	b0 0d       	add	r27, r0
    3604:	a1 1d       	adc	r26, r1
    3606:	62 1f       	adc	r22, r18
    3608:	83 9f       	mul	r24, r19
    360a:	a0 0d       	add	r26, r0
    360c:	61 1d       	adc	r22, r1
    360e:	22 1f       	adc	r18, r18
    3610:	74 9f       	mul	r23, r20
    3612:	33 27       	eor	r19, r19
    3614:	a0 0d       	add	r26, r0
    3616:	61 1d       	adc	r22, r1
    3618:	23 1f       	adc	r18, r19
    361a:	84 9f       	mul	r24, r20
    361c:	60 0d       	add	r22, r0
    361e:	21 1d       	adc	r18, r1
    3620:	82 2f       	mov	r24, r18
    3622:	76 2f       	mov	r23, r22
    3624:	6a 2f       	mov	r22, r26
    3626:	11 24       	eor	r1, r1
    3628:	9f 57       	subi	r25, 0x7F	; 127
    362a:	50 40       	sbci	r21, 0x00	; 0
    362c:	9a f0       	brmi	.+38     	; 0x3654 <__mulsf3_pse+0x88>
    362e:	f1 f0       	breq	.+60     	; 0x366c <__mulsf3_pse+0xa0>
    3630:	88 23       	and	r24, r24
    3632:	4a f0       	brmi	.+18     	; 0x3646 <__mulsf3_pse+0x7a>
    3634:	ee 0f       	add	r30, r30
    3636:	ff 1f       	adc	r31, r31
    3638:	bb 1f       	adc	r27, r27
    363a:	66 1f       	adc	r22, r22
    363c:	77 1f       	adc	r23, r23
    363e:	88 1f       	adc	r24, r24
    3640:	91 50       	subi	r25, 0x01	; 1
    3642:	50 40       	sbci	r21, 0x00	; 0
    3644:	a9 f7       	brne	.-22     	; 0x3630 <__mulsf3_pse+0x64>
    3646:	9e 3f       	cpi	r25, 0xFE	; 254
    3648:	51 05       	cpc	r21, r1
    364a:	80 f0       	brcs	.+32     	; 0x366c <__mulsf3_pse+0xa0>
    364c:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__fp_inf>
    3650:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__fp_szero>
    3654:	5f 3f       	cpi	r21, 0xFF	; 255
    3656:	e4 f3       	brlt	.-8      	; 0x3650 <__mulsf3_pse+0x84>
    3658:	98 3e       	cpi	r25, 0xE8	; 232
    365a:	d4 f3       	brlt	.-12     	; 0x3650 <__mulsf3_pse+0x84>
    365c:	86 95       	lsr	r24
    365e:	77 95       	ror	r23
    3660:	67 95       	ror	r22
    3662:	b7 95       	ror	r27
    3664:	f7 95       	ror	r31
    3666:	e7 95       	ror	r30
    3668:	9f 5f       	subi	r25, 0xFF	; 255
    366a:	c1 f7       	brne	.-16     	; 0x365c <__mulsf3_pse+0x90>
    366c:	fe 2b       	or	r31, r30
    366e:	88 0f       	add	r24, r24
    3670:	91 1d       	adc	r25, r1
    3672:	96 95       	lsr	r25
    3674:	87 95       	ror	r24
    3676:	97 f9       	bld	r25, 7
    3678:	08 95       	ret

0000367a <sin>:
    367a:	9f 93       	push	r25
    367c:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__fp_rempio2>
    3680:	0f 90       	pop	r0
    3682:	07 fc       	sbrc	r0, 7
    3684:	ee 5f       	subi	r30, 0xFE	; 254
    3686:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__fp_sinus>
    368a:	19 f4       	brne	.+6      	; 0x3692 <sin+0x18>
    368c:	16 f4       	brtc	.+4      	; 0x3692 <sin+0x18>
    368e:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__fp_nan>
    3692:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <__fp_mpack>

00003696 <sqrt>:
    3696:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__fp_splitA>
    369a:	b8 f3       	brcs	.-18     	; 0x368a <sin+0x10>
    369c:	99 23       	and	r25, r25
    369e:	c9 f3       	breq	.-14     	; 0x3692 <sin+0x18>
    36a0:	b6 f3       	brts	.-20     	; 0x368e <sin+0x14>
    36a2:	9f 57       	subi	r25, 0x7F	; 127
    36a4:	55 0b       	sbc	r21, r21
    36a6:	87 ff       	sbrs	r24, 7
    36a8:	0e 94 9d 1b 	call	0x373a	; 0x373a <__fp_norm2>
    36ac:	00 24       	eor	r0, r0
    36ae:	a0 e6       	ldi	r26, 0x60	; 96
    36b0:	40 ea       	ldi	r20, 0xA0	; 160
    36b2:	90 01       	movw	r18, r0
    36b4:	80 58       	subi	r24, 0x80	; 128
    36b6:	56 95       	lsr	r21
    36b8:	97 95       	ror	r25
    36ba:	28 f4       	brcc	.+10     	; 0x36c6 <sqrt+0x30>
    36bc:	80 5c       	subi	r24, 0xC0	; 192
    36be:	66 0f       	add	r22, r22
    36c0:	77 1f       	adc	r23, r23
    36c2:	88 1f       	adc	r24, r24
    36c4:	20 f0       	brcs	.+8      	; 0x36ce <sqrt+0x38>
    36c6:	26 17       	cp	r18, r22
    36c8:	37 07       	cpc	r19, r23
    36ca:	48 07       	cpc	r20, r24
    36cc:	30 f4       	brcc	.+12     	; 0x36da <sqrt+0x44>
    36ce:	62 1b       	sub	r22, r18
    36d0:	73 0b       	sbc	r23, r19
    36d2:	84 0b       	sbc	r24, r20
    36d4:	20 29       	or	r18, r0
    36d6:	31 29       	or	r19, r1
    36d8:	4a 2b       	or	r20, r26
    36da:	a6 95       	lsr	r26
    36dc:	17 94       	ror	r1
    36de:	07 94       	ror	r0
    36e0:	20 25       	eor	r18, r0
    36e2:	31 25       	eor	r19, r1
    36e4:	4a 27       	eor	r20, r26
    36e6:	58 f7       	brcc	.-42     	; 0x36be <sqrt+0x28>
    36e8:	66 0f       	add	r22, r22
    36ea:	77 1f       	adc	r23, r23
    36ec:	88 1f       	adc	r24, r24
    36ee:	20 f0       	brcs	.+8      	; 0x36f8 <sqrt+0x62>
    36f0:	26 17       	cp	r18, r22
    36f2:	37 07       	cpc	r19, r23
    36f4:	48 07       	cpc	r20, r24
    36f6:	30 f4       	brcc	.+12     	; 0x3704 <sqrt+0x6e>
    36f8:	62 0b       	sbc	r22, r18
    36fa:	73 0b       	sbc	r23, r19
    36fc:	84 0b       	sbc	r24, r20
    36fe:	20 0d       	add	r18, r0
    3700:	31 1d       	adc	r19, r1
    3702:	41 1d       	adc	r20, r1
    3704:	a0 95       	com	r26
    3706:	81 f7       	brne	.-32     	; 0x36e8 <sqrt+0x52>
    3708:	b9 01       	movw	r22, r18
    370a:	84 2f       	mov	r24, r20
    370c:	91 58       	subi	r25, 0x81	; 129
    370e:	88 0f       	add	r24, r24
    3710:	96 95       	lsr	r25
    3712:	87 95       	ror	r24
    3714:	08 95       	ret

00003716 <square>:
    3716:	9b 01       	movw	r18, r22
    3718:	ac 01       	movw	r20, r24
    371a:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__mulsf3>

0000371e <__fp_mpack>:
    371e:	9f 3f       	cpi	r25, 0xFF	; 255
    3720:	31 f0       	breq	.+12     	; 0x372e <__fp_mpack_finite+0xc>

00003722 <__fp_mpack_finite>:
    3722:	91 50       	subi	r25, 0x01	; 1
    3724:	20 f4       	brcc	.+8      	; 0x372e <__fp_mpack_finite+0xc>
    3726:	87 95       	ror	r24
    3728:	77 95       	ror	r23
    372a:	67 95       	ror	r22
    372c:	b7 95       	ror	r27
    372e:	88 0f       	add	r24, r24
    3730:	91 1d       	adc	r25, r1
    3732:	96 95       	lsr	r25
    3734:	87 95       	ror	r24
    3736:	97 f9       	bld	r25, 7
    3738:	08 95       	ret

0000373a <__fp_norm2>:
    373a:	91 50       	subi	r25, 0x01	; 1
    373c:	50 40       	sbci	r21, 0x00	; 0
    373e:	66 0f       	add	r22, r22
    3740:	77 1f       	adc	r23, r23
    3742:	88 1f       	adc	r24, r24
    3744:	d2 f7       	brpl	.-12     	; 0x373a <__fp_norm2>
    3746:	08 95       	ret

00003748 <__fp_powsodd>:
    3748:	9f 93       	push	r25
    374a:	8f 93       	push	r24
    374c:	7f 93       	push	r23
    374e:	6f 93       	push	r22
    3750:	ff 93       	push	r31
    3752:	ef 93       	push	r30
    3754:	9b 01       	movw	r18, r22
    3756:	ac 01       	movw	r20, r24
    3758:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <__mulsf3>
    375c:	ef 91       	pop	r30
    375e:	ff 91       	pop	r31
    3760:	0e 94 15 1a 	call	0x342a	; 0x342a <__fp_powser>
    3764:	2f 91       	pop	r18
    3766:	3f 91       	pop	r19
    3768:	4f 91       	pop	r20
    376a:	5f 91       	pop	r21
    376c:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__mulsf3>

00003770 <__tablejump2__>:
    3770:	ee 0f       	add	r30, r30
    3772:	ff 1f       	adc	r31, r31
    3774:	05 90       	lpm	r0, Z+
    3776:	f4 91       	lpm	r31, Z
    3778:	e0 2d       	mov	r30, r0
    377a:	09 94       	ijmp

0000377c <_exit>:
    377c:	f8 94       	cli

0000377e <__stop_program>:
    377e:	ff cf       	rjmp	.-2      	; 0x377e <__stop_program>
