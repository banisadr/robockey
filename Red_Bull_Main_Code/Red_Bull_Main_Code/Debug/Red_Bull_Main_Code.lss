
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00002f78  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000088  00800154  00800154  00003060  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  00003100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003086  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e69  00000000  00000000  000064be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013b8  00000000  00000000  00007327  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b00  00000000  00000000  000086e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c7f  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d9e  00000000  00000000  00009e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  0000dbfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__ctors_end>
       4:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
       8:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
       c:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__vector_3>
      10:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      14:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      18:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      1c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      20:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      24:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      28:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__vector_10>
      2c:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__vector_11>
      30:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      34:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      38:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      3c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      40:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      44:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__vector_17>
      48:	0c 94 25 09 	jmp	0x124a	; 0x124a <__vector_18>
      4c:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__vector_19>
      50:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      54:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      58:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      5c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      60:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      64:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      68:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      6c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      70:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      74:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      78:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      7c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      80:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      84:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      88:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      8c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      90:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      94:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      98:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      9c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      a0:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      a4:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      a8:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      ac:	95 12       	cpse	r9, r21
      ae:	b5 12       	cpse	r11, r21
      b0:	d5 12       	cpse	r13, r21
      b2:	f5 12       	cpse	r15, r21
      b4:	15 13       	cpse	r17, r21
      b6:	35 13       	cpse	r19, r21
      b8:	55 13       	cpse	r21, r21
      ba:	75 13       	cpse	r23, r21
      bc:	95 13       	cpse	r25, r21
      be:	b5 13       	cpse	r27, r21
      c0:	d5 13       	cpse	r29, r21
      c2:	f5 13       	cpse	r31, r21
      c4:	08 4a       	sbci	r16, 0xA8	; 168
      c6:	d7 3b       	cpi	r29, 0xB7	; 183
      c8:	3b ce       	rjmp	.-906    	; 0xfffffd40 <__eeprom_end+0xff7efd40>
      ca:	01 6e       	ori	r16, 0xE1	; 225
      cc:	84 bc       	out	0x24, r8	; 36
      ce:	bf fd       	.word	0xfdbf	; ????
      d0:	c1 2f       	mov	r28, r17
      d2:	3d 6c       	ori	r19, 0xCD	; 205
      d4:	74 31       	cpi	r23, 0x14	; 20
      d6:	9a bd       	out	0x2a, r25	; 42
      d8:	56 83       	std	Z+6, r21	; 0x06
      da:	3d da       	rcall	.-2950   	; 0xfffff556 <__eeprom_end+0xff7ef556>
      dc:	3d 00       	.word	0x003d	; ????
      de:	c7 7f       	andi	r28, 0xF7	; 247
      e0:	11 be       	out	0x31, r1	; 49
      e2:	d9 e4       	ldi	r29, 0x49	; 73
      e4:	bb 4c       	sbci	r27, 0xCB	; 203
      e6:	3e 91       	ld	r19, -X
      e8:	6b aa       	std	Y+51, r6	; 0x33
      ea:	aa be       	out	0x3a, r10	; 58
      ec:	00 00       	nop
      ee:	00 80       	ld	r0, Z
      f0:	3f 05       	cpc	r19, r15
      f2:	a8 4c       	sbci	r26, 0xC8	; 200
      f4:	cd b2       	in	r12, 0x1d	; 29
      f6:	d4 4e       	sbci	r29, 0xE4	; 228
      f8:	b9 38       	cpi	r27, 0x89	; 137
      fa:	36 a9       	ldd	r19, Z+54	; 0x36
      fc:	02 0c       	add	r0, r2
      fe:	50 b9       	out	0x00, r21	; 0
     100:	91 86       	std	Z+9, r9	; 0x09
     102:	88 08       	sbc	r8, r8
     104:	3c a6       	std	Y+44, r3	; 0x2c
     106:	aa aa       	std	Y+50, r10	; 0x32
     108:	2a be       	out	0x3a, r2	; 58
     10a:	00 00       	nop
     10c:	00 80       	ld	r0, Z
     10e:	3f 00       	.word	0x003f	; ????

00000110 <__trampolines_end>:
     110:	00 01       	movw	r0, r0
     112:	00 00       	nop
     114:	a7 01       	movw	r20, r14
     116:	12 00       	.word	0x0012	; ????
     118:	02 00       	.word	0x0002	; ????
     11a:	00 64       	ori	r16, 0x40	; 64
     11c:	01 43       	sbci	r16, 0x31	; 49
     11e:	00 03       	mulsu	r16, r16
     120:	00 00       	nop
     122:	60 01       	movw	r12, r0
     124:	04 01       	movw	r0, r8
     126:	03 09       	sbc	r16, r3
     128:	04 4c       	sbci	r16, 0xC4	; 196
     12a:	01 12       	cpse	r0, r17
     12c:	02 03       	mulsu	r16, r18
     12e:	09 04       	cpc	r0, r9
     130:	44 01       	movw	r8, r8
     132:	06 03       	mulsu	r16, r22
     134:	03 09       	sbc	r16, r3
     136:	04 3a       	cpi	r16, 0xA4	; 164
     138:	01 08       	sbc	r0, r1

0000013a <string3>:
     13a:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000144 <string2>:
     144:	06 03 4d 00 32 00 00 00                             ..M.2...

0000014c <string1>:
     14c:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     15c:	65 00 00 00                                         e...

00000160 <string0>:
     160:	04 03 09 04                                         ....

00000164 <config1_descriptor>:
     164:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     174:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     184:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     194:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1a4:	40 00 00                                            @..

000001a7 <device_descriptor>:
     1a7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1b7:	03 01                                               ..

000001b9 <endpoint_config_table>:
     1b9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001c4 <__ctors_end>:
     1c4:	11 24       	eor	r1, r1
     1c6:	1f be       	out	0x3f, r1	; 63
     1c8:	cf ef       	ldi	r28, 0xFF	; 255
     1ca:	da e0       	ldi	r29, 0x0A	; 10
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	cd bf       	out	0x3d, r28	; 61

000001d0 <__do_copy_data>:
     1d0:	11 e0       	ldi	r17, 0x01	; 1
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b1 e0       	ldi	r27, 0x01	; 1
     1d6:	e8 e7       	ldi	r30, 0x78	; 120
     1d8:	ff e2       	ldi	r31, 0x2F	; 47
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__do_copy_data+0x10>
     1dc:	05 90       	lpm	r0, Z+
     1de:	0d 92       	st	X+, r0
     1e0:	a4 35       	cpi	r26, 0x54	; 84
     1e2:	b1 07       	cpc	r27, r17
     1e4:	d9 f7       	brne	.-10     	; 0x1dc <__do_copy_data+0xc>

000001e6 <__do_clear_bss>:
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	a4 e5       	ldi	r26, 0x54	; 84
     1ea:	b1 e0       	ldi	r27, 0x01	; 1
     1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <.do_clear_bss_start>

000001ee <.do_clear_bss_loop>:
     1ee:	1d 92       	st	X+, r1

000001f0 <.do_clear_bss_start>:
     1f0:	ac 3d       	cpi	r26, 0xDC	; 220
     1f2:	b2 07       	cpc	r27, r18
     1f4:	e1 f7       	brne	.-8      	; 0x1ee <.do_clear_bss_loop>
     1f6:	0e 94 00 09 	call	0x1200	; 0x1200 <main>
     1fa:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <_exit>

000001fe <__bad_interrupt>:
     1fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000202 <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(void) {
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
/************************************************************
Initialization of Pins and System Clock
************************************************************/

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     20a:	e1 e6       	ldi	r30, 0x61	; 97
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	80 83       	st	Z, r24
     212:	10 82       	st	Z, r1

	// Disable JTAG
	m_disableJTAG(); // turn off JTAG port and allow access to F4-F7 as GPIO
     214:	85 bf       	out	0x35, r24	; 53
     216:	85 bf       	out	0x35, r24	; 53
	
	//Set to Input
	clear(DDRD,0); // D0
     218:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     21a:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     21c:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     21e:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     220:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     222:	23 9a       	sbi	0x04, 3	; 4
	
	set(DDRC,6); //C6 Red positioning LED
     224:	3e 9a       	sbi	0x07, 6	; 7
	set(DDRC,7); //C7 Blue positioning LED 
     226:	3f 9a       	sbi	0x07, 7	; 7
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     228:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     22a:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     22c:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     22e:	2b 98       	cbi	0x05, 3	; 5
	
	clear(PORTC,6); //Start with positioning LED off
     230:	46 98       	cbi	0x08, 6	; 8
	clear(PORTC,7); 
     232:	47 98       	cbi	0x08, 7	; 8

/************************************************************
Setup Subsystems
************************************************************/

	m_bus_init();
     234:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <m_bus_init>
	while(!m_wii_open());
     238:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <m_wii_open>
     23c:	88 23       	and	r24, r24
     23e:	e1 f3       	breq	.-8      	; 0x238 <initialize_robockey+0x36>
	sei();
     240:	78 94       	sei
	m_usb_init();
     242:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <m_usb_init>
	while(!m_rf_open(CHANNEL,RXADDRESS_1,PACKET_LENGTH)); // Configure mRF
     246:	4a e0       	ldi	r20, 0x0A	; 10
     248:	60 e2       	ldi	r22, 0x20	; 32
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <m_rf_open>
     250:	88 23       	and	r24, r24
     252:	c9 f3       	breq	.-14     	; 0x246 <initialize_robockey+0x44>
/************************************************************
Timer1 Initialization for PWM Motor Control
************************************************************/

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     254:	e1 e8       	ldi	r30, 0x81	; 129
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	8b 7f       	andi	r24, 0xFB	; 251
     25c:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     25e:	80 81       	ld	r24, Z
     260:	8d 7f       	andi	r24, 0xFD	; 253
     262:	80 83       	st	Z, r24
	clear(TCCR1B,CS10);
     264:	80 81       	ld	r24, Z
     266:	8e 7f       	andi	r24, 0xFE	; 254
     268:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     26a:	80 81       	ld	r24, Z
     26c:	8f 7e       	andi	r24, 0xEF	; 239
     26e:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     270:	80 81       	ld	r24, Z
     272:	88 60       	ori	r24, 0x08	; 8
     274:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     276:	e0 e8       	ldi	r30, 0x80	; 128
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	8d 7f       	andi	r24, 0xFD	; 253
     27e:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     280:	80 81       	ld	r24, Z
     282:	8e 7f       	andi	r24, 0xFE	; 254
     284:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     286:	80 81       	ld	r24, Z
     288:	8f 7d       	andi	r24, 0xDF	; 223
     28a:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     28c:	80 81       	ld	r24, Z
     28e:	8f 7e       	andi	r24, 0xEF	; 239
     290:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     292:	08 e8       	ldi	r16, 0x88	; 136
     294:	10 e0       	ldi	r17, 0x00	; 0
     296:	c0 e8       	ldi	r28, 0x80	; 128
     298:	de e3       	ldi	r29, 0x3E	; 62
     29a:	f8 01       	movw	r30, r16
     29c:	d1 83       	std	Z+1, r29	; 0x01
     29e:	c0 83       	st	Z, r28
	OCR1B = (float)OCR1A*0.1;
     2a0:	60 81       	ld	r22, Z
     2a2:	71 81       	ldd	r23, Z+1	; 0x01
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__floatunsisf>
     2ac:	2d ec       	ldi	r18, 0xCD	; 205
     2ae:	3c ec       	ldi	r19, 0xCC	; 204
     2b0:	4c ec       	ldi	r20, 0xCC	; 204
     2b2:	5d e3       	ldi	r21, 0x3D	; 61
     2b4:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     2b8:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__fixunssfsi>
     2bc:	70 93 8b 00 	sts	0x008B, r23
     2c0:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     2c4:	f8 01       	movw	r30, r16
     2c6:	60 81       	ld	r22, Z
     2c8:	71 81       	ldd	r23, Z+1	; 0x01
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__floatunsisf>
     2d2:	2d ec       	ldi	r18, 0xCD	; 205
     2d4:	3c ec       	ldi	r19, 0xCC	; 204
     2d6:	4c ec       	ldi	r20, 0xCC	; 204
     2d8:	5d e3       	ldi	r21, 0x3D	; 61
     2da:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     2de:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__fixunssfsi>
     2e2:	70 93 8d 00 	sts	0x008D, r23
     2e6:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     2ea:	ef e6       	ldi	r30, 0x6F	; 111
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	82 60       	ori	r24, 0x02	; 2
     2f2:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     2f4:	80 81       	ld	r24, Z
     2f6:	84 60       	ori	r24, 0x04	; 4
     2f8:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     2fa:	80 81       	ld	r24, Z
     2fc:	88 60       	ori	r24, 0x08	; 8
     2fe:	80 83       	st	Z, r24

/************************************************************
Timer3 Initialization for fixed timestep calculations
************************************************************/

	clear(TCCR3B,CS32); // prescale /1
     300:	e1 e9       	ldi	r30, 0x91	; 145
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	8b 7f       	andi	r24, 0xFB	; 251
     308:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     30a:	80 81       	ld	r24, Z
     30c:	8d 7f       	andi	r24, 0xFD	; 253
     30e:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     310:	80 81       	ld	r24, Z
     312:	81 60       	ori	r24, 0x01	; 1
     314:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     316:	80 81       	ld	r24, Z
     318:	8f 7e       	andi	r24, 0xEF	; 239
     31a:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     31c:	80 81       	ld	r24, Z
     31e:	88 60       	ori	r24, 0x08	; 8
     320:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     322:	e0 e9       	ldi	r30, 0x90	; 144
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	8d 7f       	andi	r24, 0xFD	; 253
     32a:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     32c:	80 81       	ld	r24, Z
     32e:	8e 7f       	andi	r24, 0xFE	; 254
     330:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     332:	d0 93 99 00 	sts	0x0099, r29
     336:	c0 93 98 00 	sts	0x0098, r28

/************************************************************
Setup ADC
************************************************************/
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
     33a:	cc e7       	ldi	r28, 0x7C	; 124
     33c:	d0 e0       	ldi	r29, 0x00	; 0
     33e:	88 81       	ld	r24, Y
     340:	8f 77       	andi	r24, 0x7F	; 127
     342:	88 83       	st	Y, r24
	set(ADMUX,REFS0);
     344:	88 81       	ld	r24, Y
     346:	80 64       	ori	r24, 0x40	; 64
     348:	88 83       	st	Y, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
     34a:	ea e7       	ldi	r30, 0x7A	; 122
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	8b 7f       	andi	r24, 0xFB	; 251
     352:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     354:	80 81       	ld	r24, Z
     356:	82 60       	ori	r24, 0x02	; 2
     358:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     35a:	80 81       	ld	r24, Z
     35c:	81 60       	ori	r24, 0x01	; 1
     35e:	80 83       	st	Z, r24
	
	// Disable Digital input to:
	set(DIDR0,ADC0D); // ADC0
     360:	ae e7       	ldi	r26, 0x7E	; 126
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	8c 91       	ld	r24, X
     366:	81 60       	ori	r24, 0x01	; 1
     368:	8c 93       	st	X, r24
	set(DIDR0,ADC1D); // ADC1
     36a:	8c 91       	ld	r24, X
     36c:	82 60       	ori	r24, 0x02	; 2
     36e:	8c 93       	st	X, r24
	set(DIDR0,ADC4D); // ADC4
     370:	8c 91       	ld	r24, X
     372:	80 61       	ori	r24, 0x10	; 16
     374:	8c 93       	st	X, r24
	set(DIDR0,ADC5D); // ADC5
     376:	8c 91       	ld	r24, X
     378:	80 62       	ori	r24, 0x20	; 32
     37a:	8c 93       	st	X, r24
	set(DIDR0,ADC6D); // ADC6
     37c:	8c 91       	ld	r24, X
     37e:	80 64       	ori	r24, 0x40	; 64
     380:	8c 93       	st	X, r24
	set(DIDR0,ADC7D); // ADC7
     382:	8c 91       	ld	r24, X
     384:	80 68       	ori	r24, 0x80	; 128
     386:	8c 93       	st	X, r24
	set(DIDR2,ADC8D); // ADC8
     388:	ad e7       	ldi	r26, 0x7D	; 125
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	8c 91       	ld	r24, X
     38e:	81 60       	ori	r24, 0x01	; 1
     390:	8c 93       	st	X, r24
	set(DIDR2,ADC9D); // ADC9
     392:	8c 91       	ld	r24, X
     394:	82 60       	ori	r24, 0x02	; 2
     396:	8c 93       	st	X, r24
	set(DIDR2,ADC10D); // ADC10
     398:	8c 91       	ld	r24, X
     39a:	84 60       	ori	r24, 0x04	; 4
     39c:	8c 93       	st	X, r24
	set(DIDR2,ADC11D); // ADC11
     39e:	8c 91       	ld	r24, X
     3a0:	88 60       	ori	r24, 0x08	; 8
     3a2:	8c 93       	st	X, r24
	set(DIDR2,ADC12D); // ADC812
     3a4:	8c 91       	ld	r24, X
     3a6:	80 61       	ori	r24, 0x10	; 16
     3a8:	8c 93       	st	X, r24
	set(DIDR2,ADC13D); // ADC13
     3aa:	8c 91       	ld	r24, X
     3ac:	80 62       	ori	r24, 0x20	; 32
     3ae:	8c 93       	st	X, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
     3b0:	80 81       	ld	r24, Z
     3b2:	8f 7d       	andi	r24, 0xDF	; 223
     3b4:	80 83       	st	Z, r24
	
	set(ADCSRB,MUX5); // Select ADC13 at pin B6
     3b6:	ab e7       	ldi	r26, 0x7B	; 123
     3b8:	b0 e0       	ldi	r27, 0x00	; 0
     3ba:	8c 91       	ld	r24, X
     3bc:	80 62       	ori	r24, 0x20	; 32
     3be:	8c 93       	st	X, r24
	set(ADMUX,MUX2); // Transistor 4
     3c0:	88 81       	ld	r24, Y
     3c2:	84 60       	ori	r24, 0x04	; 4
     3c4:	88 83       	st	Y, r24
	clear(ADMUX,MUX1);
     3c6:	88 81       	ld	r24, Y
     3c8:	8d 7f       	andi	r24, 0xFD	; 253
     3ca:	88 83       	st	Y, r24
	set(ADMUX,MUX0);
     3cc:	88 81       	ld	r24, Y
     3ce:	81 60       	ori	r24, 0x01	; 1
     3d0:	88 83       	st	Y, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
     3d2:	80 81       	ld	r24, Z
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
     3d8:	80 81       	ld	r24, Z
     3da:	80 64       	ori	r24, 0x40	; 64
     3dc:	80 83       	st	Z, r24
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	08 95       	ret

000003e8 <distIndex>:
     3e8:	82 30       	cpi	r24, 0x02	; 2
     3ea:	91 05       	cpc	r25, r1
     3ec:	f9 f0       	breq	.+62     	; 0x42c <distIndex+0x44>
     3ee:	2c f4       	brge	.+10     	; 0x3fa <distIndex+0x12>
     3f0:	00 97       	sbiw	r24, 0x00	; 0
     3f2:	51 f0       	breq	.+20     	; 0x408 <distIndex+0x20>
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	89 f0       	breq	.+34     	; 0x41a <distIndex+0x32>
     3f8:	42 c0       	rjmp	.+132    	; 0x47e <distIndex+0x96>
     3fa:	84 30       	cpi	r24, 0x04	; 4
     3fc:	91 05       	cpc	r25, r1
     3fe:	51 f1       	breq	.+84     	; 0x454 <distIndex+0x6c>
     400:	f4 f0       	brlt	.+60     	; 0x43e <distIndex+0x56>
     402:	05 97       	sbiw	r24, 0x05	; 5
     404:	91 f1       	breq	.+100    	; 0x46a <distIndex+0x82>
     406:	3b c0       	rjmp	.+118    	; 0x47e <distIndex+0x96>
     408:	e4 e5       	ldi	r30, 0x54	; 84
     40a:	f1 e0       	ldi	r31, 0x01	; 1
     40c:	11 82       	std	Z+1, r1	; 0x01
     40e:	10 82       	st	Z, r1
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	93 83       	std	Z+3, r25	; 0x03
     416:	82 83       	std	Z+2, r24	; 0x02
     418:	32 c0       	rjmp	.+100    	; 0x47e <distIndex+0x96>
     41a:	e4 e5       	ldi	r30, 0x54	; 84
     41c:	f1 e0       	ldi	r31, 0x01	; 1
     41e:	11 82       	std	Z+1, r1	; 0x01
     420:	10 82       	st	Z, r1
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	93 83       	std	Z+3, r25	; 0x03
     428:	82 83       	std	Z+2, r24	; 0x02
     42a:	29 c0       	rjmp	.+82     	; 0x47e <distIndex+0x96>
     42c:	e4 e5       	ldi	r30, 0x54	; 84
     42e:	f1 e0       	ldi	r31, 0x01	; 1
     430:	11 82       	std	Z+1, r1	; 0x01
     432:	10 82       	st	Z, r1
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	93 83       	std	Z+3, r25	; 0x03
     43a:	82 83       	std	Z+2, r24	; 0x02
     43c:	20 c0       	rjmp	.+64     	; 0x47e <distIndex+0x96>
     43e:	e4 e5       	ldi	r30, 0x54	; 84
     440:	f1 e0       	ldi	r31, 0x01	; 1
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	91 83       	std	Z+1, r25	; 0x01
     448:	80 83       	st	Z, r24
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	93 83       	std	Z+3, r25	; 0x03
     450:	82 83       	std	Z+2, r24	; 0x02
     452:	15 c0       	rjmp	.+42     	; 0x47e <distIndex+0x96>
     454:	e4 e5       	ldi	r30, 0x54	; 84
     456:	f1 e0       	ldi	r31, 0x01	; 1
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	91 83       	std	Z+1, r25	; 0x01
     45e:	80 83       	st	Z, r24
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	93 83       	std	Z+3, r25	; 0x03
     466:	82 83       	std	Z+2, r24	; 0x02
     468:	0a c0       	rjmp	.+20     	; 0x47e <distIndex+0x96>
     46a:	e4 e5       	ldi	r30, 0x54	; 84
     46c:	f1 e0       	ldi	r31, 0x01	; 1
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	91 83       	std	Z+1, r25	; 0x01
     474:	80 83       	st	Z, r24
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	93 83       	std	Z+3, r25	; 0x03
     47c:	82 83       	std	Z+2, r24	; 0x02
     47e:	84 e5       	ldi	r24, 0x54	; 84
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	08 95       	ret

00000484 <orientationCalculationFour>:
     484:	2f 92       	push	r2
     486:	3f 92       	push	r3
     488:	4f 92       	push	r4
     48a:	5f 92       	push	r5
     48c:	6f 92       	push	r6
     48e:	7f 92       	push	r7
     490:	8f 92       	push	r8
     492:	9f 92       	push	r9
     494:	af 92       	push	r10
     496:	bf 92       	push	r11
     498:	cf 92       	push	r12
     49a:	df 92       	push	r13
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <orientationCalculationFour+0x26>
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <orientationCalculationFour+0x28>
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	5c 01       	movw	r10, r24
     4b2:	4a 01       	movw	r8, r20
     4b4:	3a 83       	std	Y+2, r19	; 0x02
     4b6:	29 83       	std	Y+1, r18	; 0x01
     4b8:	06 2f       	mov	r16, r22
     4ba:	17 2f       	mov	r17, r23
     4bc:	f8 01       	movw	r30, r16
     4be:	41 90       	ld	r4, Z+
     4c0:	51 90       	ld	r5, Z+
     4c2:	61 90       	ld	r6, Z+
     4c4:	71 90       	ld	r7, Z+
     4c6:	8f 01       	movw	r16, r30
     4c8:	1c 82       	std	Y+4, r1	; 0x04
     4ca:	1b 82       	std	Y+3, r1	; 0x03
     4cc:	21 2c       	mov	r2, r1
     4ce:	31 2c       	mov	r3, r1
     4d0:	12 c0       	rjmp	.+36     	; 0x4f6 <orientationCalculationFour+0x72>
     4d2:	f8 01       	movw	r30, r16
     4d4:	c1 90       	ld	r12, Z+
     4d6:	d1 90       	ld	r13, Z+
     4d8:	e1 90       	ld	r14, Z+
     4da:	f1 90       	ld	r15, Z+
     4dc:	8f 01       	movw	r16, r30
     4de:	a7 01       	movw	r20, r14
     4e0:	96 01       	movw	r18, r12
     4e2:	c3 01       	movw	r24, r6
     4e4:	b2 01       	movw	r22, r4
     4e6:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
     4ea:	18 16       	cp	r1, r24
     4ec:	24 f4       	brge	.+8      	; 0x4f6 <orientationCalculationFour+0x72>
     4ee:	26 01       	movw	r4, r12
     4f0:	37 01       	movw	r6, r14
     4f2:	2b 80       	ldd	r2, Y+3	; 0x03
     4f4:	3c 80       	ldd	r3, Y+4	; 0x04
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
     4f8:	9c 81       	ldd	r25, Y+4	; 0x04
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	9c 83       	std	Y+4, r25	; 0x04
     4fe:	8b 83       	std	Y+3, r24	; 0x03
     500:	06 97       	sbiw	r24, 0x06	; 6
     502:	39 f7       	brne	.-50     	; 0x4d2 <orientationCalculationFour+0x4e>
     504:	82 2d       	mov	r24, r2
     506:	93 2d       	mov	r25, r3
     508:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <distIndex>
     50c:	fc 01       	movw	r30, r24
     50e:	20 81       	ld	r18, Z
     510:	31 81       	ldd	r19, Z+1	; 0x01
     512:	62 81       	ldd	r22, Z+2	; 0x02
     514:	73 81       	ldd	r23, Z+3	; 0x03
     516:	f5 01       	movw	r30, r10
     518:	40 81       	ld	r20, Z
     51a:	51 81       	ldd	r21, Z+1	; 0x01
     51c:	24 17       	cp	r18, r20
     51e:	35 07       	cpc	r19, r21
     520:	59 f4       	brne	.+22     	; 0x538 <orientationCalculationFour+0xb4>
     522:	f4 01       	movw	r30, r8
     524:	31 83       	std	Z+1, r19	; 0x01
     526:	20 83       	st	Z, r18
     528:	f5 01       	movw	r30, r10
     52a:	82 81       	ldd	r24, Z+2	; 0x02
     52c:	93 81       	ldd	r25, Z+3	; 0x03
     52e:	e9 81       	ldd	r30, Y+1	; 0x01
     530:	fa 81       	ldd	r31, Y+2	; 0x02
     532:	91 83       	std	Z+1, r25	; 0x01
     534:	80 83       	st	Z, r24
     536:	37 c0       	rjmp	.+110    	; 0x5a6 <orientationCalculationFour+0x122>
     538:	f5 01       	movw	r30, r10
     53a:	82 81       	ldd	r24, Z+2	; 0x02
     53c:	93 81       	ldd	r25, Z+3	; 0x03
     53e:	28 17       	cp	r18, r24
     540:	39 07       	cpc	r19, r25
     542:	59 f4       	brne	.+22     	; 0x55a <orientationCalculationFour+0xd6>
     544:	f4 01       	movw	r30, r8
     546:	31 83       	std	Z+1, r19	; 0x01
     548:	20 83       	st	Z, r18
     54a:	f5 01       	movw	r30, r10
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	e9 81       	ldd	r30, Y+1	; 0x01
     552:	fa 81       	ldd	r31, Y+2	; 0x02
     554:	91 83       	std	Z+1, r25	; 0x01
     556:	80 83       	st	Z, r24
     558:	26 c0       	rjmp	.+76     	; 0x5a6 <orientationCalculationFour+0x122>
     55a:	64 17       	cp	r22, r20
     55c:	75 07       	cpc	r23, r21
     55e:	59 f4       	brne	.+22     	; 0x576 <orientationCalculationFour+0xf2>
     560:	f4 01       	movw	r30, r8
     562:	71 83       	std	Z+1, r23	; 0x01
     564:	60 83       	st	Z, r22
     566:	f5 01       	movw	r30, r10
     568:	82 81       	ldd	r24, Z+2	; 0x02
     56a:	93 81       	ldd	r25, Z+3	; 0x03
     56c:	e9 81       	ldd	r30, Y+1	; 0x01
     56e:	fa 81       	ldd	r31, Y+2	; 0x02
     570:	91 83       	std	Z+1, r25	; 0x01
     572:	80 83       	st	Z, r24
     574:	18 c0       	rjmp	.+48     	; 0x5a6 <orientationCalculationFour+0x122>
     576:	68 17       	cp	r22, r24
     578:	79 07       	cpc	r23, r25
     57a:	59 f4       	brne	.+22     	; 0x592 <orientationCalculationFour+0x10e>
     57c:	f4 01       	movw	r30, r8
     57e:	71 83       	std	Z+1, r23	; 0x01
     580:	60 83       	st	Z, r22
     582:	f5 01       	movw	r30, r10
     584:	80 81       	ld	r24, Z
     586:	91 81       	ldd	r25, Z+1	; 0x01
     588:	e9 81       	ldd	r30, Y+1	; 0x01
     58a:	fa 81       	ldd	r31, Y+2	; 0x02
     58c:	91 83       	std	Z+1, r25	; 0x01
     58e:	80 83       	st	Z, r24
     590:	0a c0       	rjmp	.+20     	; 0x5a6 <orientationCalculationFour+0x122>
     592:	f4 01       	movw	r30, r8
     594:	91 83       	std	Z+1, r25	; 0x01
     596:	80 83       	st	Z, r24
     598:	f5 01       	movw	r30, r10
     59a:	80 81       	ld	r24, Z
     59c:	91 81       	ldd	r25, Z+1	; 0x01
     59e:	e9 81       	ldd	r30, Y+1	; 0x01
     5a0:	fa 81       	ldd	r31, Y+2	; 0x02
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	80 83       	st	Z, r24
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	bf 90       	pop	r11
     5c0:	af 90       	pop	r10
     5c2:	9f 90       	pop	r9
     5c4:	8f 90       	pop	r8
     5c6:	7f 90       	pop	r7
     5c8:	6f 90       	pop	r6
     5ca:	5f 90       	pop	r5
     5cc:	4f 90       	pop	r4
     5ce:	3f 90       	pop	r3
     5d0:	2f 90       	pop	r2
     5d2:	08 95       	ret

000005d4 <fourPointCalc>:
     5d4:	2f 92       	push	r2
     5d6:	3f 92       	push	r3
     5d8:	4f 92       	push	r4
     5da:	5f 92       	push	r5
     5dc:	6f 92       	push	r6
     5de:	7f 92       	push	r7
     5e0:	8f 92       	push	r8
     5e2:	9f 92       	push	r9
     5e4:	af 92       	push	r10
     5e6:	bf 92       	push	r11
     5e8:	cf 92       	push	r12
     5ea:	df 92       	push	r13
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	c2 54       	subi	r28, 0x42	; 66
     5fe:	d1 09       	sbc	r29, r1
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	de bf       	out	0x3e, r29	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	cd bf       	out	0x3d, r28	; 61
     60a:	2c 01       	movw	r4, r24
     60c:	fc 01       	movw	r30, r24
     60e:	04 80       	ldd	r0, Z+4	; 0x04
     610:	f5 81       	ldd	r31, Z+5	; 0x05
     612:	e0 2d       	mov	r30, r0
     614:	fa a3       	std	Y+34, r31	; 0x22
     616:	e9 a3       	std	Y+33, r30	; 0x21
     618:	fc 01       	movw	r30, r24
     61a:	00 81       	ld	r16, Z
     61c:	11 81       	ldd	r17, Z+1	; 0x01
     61e:	69 a1       	ldd	r22, Y+33	; 0x21
     620:	7a a1       	ldd	r23, Y+34	; 0x22
     622:	60 1b       	sub	r22, r16
     624:	71 0b       	sbc	r23, r17
     626:	07 2e       	mov	r0, r23
     628:	00 0c       	add	r0, r0
     62a:	88 0b       	sbc	r24, r24
     62c:	99 0b       	sbc	r25, r25
     62e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     632:	6b 01       	movw	r12, r22
     634:	7c 01       	movw	r14, r24
     636:	f2 01       	movw	r30, r4
     638:	06 80       	ldd	r0, Z+6	; 0x06
     63a:	f7 81       	ldd	r31, Z+7	; 0x07
     63c:	e0 2d       	mov	r30, r0
     63e:	fe a3       	std	Y+38, r31	; 0x26
     640:	ed a3       	std	Y+37, r30	; 0x25
     642:	f2 01       	movw	r30, r4
     644:	22 80       	ldd	r2, Z+2	; 0x02
     646:	33 80       	ldd	r3, Z+3	; 0x03
     648:	ad a0       	ldd	r10, Y+37	; 0x25
     64a:	be a0       	ldd	r11, Y+38	; 0x26
     64c:	a2 18       	sub	r10, r2
     64e:	b3 08       	sbc	r11, r3
     650:	9b 01       	movw	r18, r22
     652:	ac 01       	movw	r20, r24
     654:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     658:	69 a7       	std	Y+41, r22	; 0x29
     65a:	7a a7       	std	Y+42, r23	; 0x2a
     65c:	8b a7       	std	Y+43, r24	; 0x2b
     65e:	9c a7       	std	Y+44, r25	; 0x2c
     660:	aa 9c       	mul	r10, r10
     662:	40 01       	movw	r8, r0
     664:	ab 9c       	mul	r10, r11
     666:	90 0c       	add	r9, r0
     668:	90 0c       	add	r9, r0
     66a:	11 24       	eor	r1, r1
     66c:	09 2c       	mov	r0, r9
     66e:	00 0c       	add	r0, r0
     670:	aa 08       	sbc	r10, r10
     672:	bb 08       	sbc	r11, r11
     674:	a7 01       	movw	r20, r14
     676:	96 01       	movw	r18, r12
     678:	c7 01       	movw	r24, r14
     67a:	b6 01       	movw	r22, r12
     67c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     680:	6b 01       	movw	r12, r22
     682:	7c 01       	movw	r14, r24
     684:	c5 01       	movw	r24, r10
     686:	b4 01       	movw	r22, r8
     688:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     68c:	9b 01       	movw	r18, r22
     68e:	ac 01       	movw	r20, r24
     690:	c7 01       	movw	r24, r14
     692:	b6 01       	movw	r22, r12
     694:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
     698:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <sqrt>
     69c:	6b af       	std	Y+59, r22	; 0x3b
     69e:	7c af       	std	Y+60, r23	; 0x3c
     6a0:	8d af       	std	Y+61, r24	; 0x3d
     6a2:	9e af       	std	Y+62, r25	; 0x3e
     6a4:	f2 01       	movw	r30, r4
     6a6:	00 84       	ldd	r0, Z+8	; 0x08
     6a8:	f1 85       	ldd	r31, Z+9	; 0x09
     6aa:	e0 2d       	mov	r30, r0
     6ac:	fa a7       	std	Y+42, r31	; 0x2a
     6ae:	e9 a7       	std	Y+41, r30	; 0x29
     6b0:	bf 01       	movw	r22, r30
     6b2:	60 1b       	sub	r22, r16
     6b4:	71 0b       	sbc	r23, r17
     6b6:	07 2e       	mov	r0, r23
     6b8:	00 0c       	add	r0, r0
     6ba:	88 0b       	sbc	r24, r24
     6bc:	99 0b       	sbc	r25, r25
     6be:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     6c2:	6b 01       	movw	r12, r22
     6c4:	7c 01       	movw	r14, r24
     6c6:	f2 01       	movw	r30, r4
     6c8:	62 84       	ldd	r6, Z+10	; 0x0a
     6ca:	73 84       	ldd	r7, Z+11	; 0x0b
     6cc:	53 01       	movw	r10, r6
     6ce:	a2 18       	sub	r10, r2
     6d0:	b3 08       	sbc	r11, r3
     6d2:	9b 01       	movw	r18, r22
     6d4:	ac 01       	movw	r20, r24
     6d6:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     6da:	6d a7       	std	Y+45, r22	; 0x2d
     6dc:	7e a7       	std	Y+46, r23	; 0x2e
     6de:	8f a7       	std	Y+47, r24	; 0x2f
     6e0:	98 ab       	std	Y+48, r25	; 0x30
     6e2:	aa 9c       	mul	r10, r10
     6e4:	40 01       	movw	r8, r0
     6e6:	ab 9c       	mul	r10, r11
     6e8:	90 0c       	add	r9, r0
     6ea:	90 0c       	add	r9, r0
     6ec:	11 24       	eor	r1, r1
     6ee:	09 2c       	mov	r0, r9
     6f0:	00 0c       	add	r0, r0
     6f2:	aa 08       	sbc	r10, r10
     6f4:	bb 08       	sbc	r11, r11
     6f6:	a7 01       	movw	r20, r14
     6f8:	96 01       	movw	r18, r12
     6fa:	c7 01       	movw	r24, r14
     6fc:	b6 01       	movw	r22, r12
     6fe:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     702:	6b 01       	movw	r12, r22
     704:	7c 01       	movw	r14, r24
     706:	c5 01       	movw	r24, r10
     708:	b4 01       	movw	r22, r8
     70a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     70e:	9b 01       	movw	r18, r22
     710:	ac 01       	movw	r20, r24
     712:	c7 01       	movw	r24, r14
     714:	b6 01       	movw	r22, r12
     716:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
     71a:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <sqrt>
     71e:	23 96       	adiw	r28, 0x03	; 3
     720:	6c af       	std	Y+60, r22	; 0x3c
     722:	7d af       	std	Y+61, r23	; 0x3d
     724:	8e af       	std	Y+62, r24	; 0x3e
     726:	9f af       	std	Y+63, r25	; 0x3f
     728:	23 97       	sbiw	r28, 0x03	; 3
     72a:	f2 01       	movw	r30, r4
     72c:	04 84       	ldd	r0, Z+12	; 0x0c
     72e:	f5 85       	ldd	r31, Z+13	; 0x0d
     730:	e0 2d       	mov	r30, r0
     732:	fe a7       	std	Y+46, r31	; 0x2e
     734:	ed a7       	std	Y+45, r30	; 0x2d
     736:	bf 01       	movw	r22, r30
     738:	60 1b       	sub	r22, r16
     73a:	71 0b       	sbc	r23, r17
     73c:	07 2e       	mov	r0, r23
     73e:	00 0c       	add	r0, r0
     740:	88 0b       	sbc	r24, r24
     742:	99 0b       	sbc	r25, r25
     744:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     748:	4b 01       	movw	r8, r22
     74a:	5c 01       	movw	r10, r24
     74c:	f2 01       	movw	r30, r4
     74e:	06 84       	ldd	r0, Z+14	; 0x0e
     750:	f7 85       	ldd	r31, Z+15	; 0x0f
     752:	e0 2d       	mov	r30, r0
     754:	fa ab       	std	Y+50, r31	; 0x32
     756:	e9 ab       	std	Y+49, r30	; 0x31
     758:	8f 01       	movw	r16, r30
     75a:	02 19       	sub	r16, r2
     75c:	13 09       	sbc	r17, r3
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     766:	6b ab       	std	Y+51, r22	; 0x33
     768:	7c ab       	std	Y+52, r23	; 0x34
     76a:	8d ab       	std	Y+53, r24	; 0x35
     76c:	9e ab       	std	Y+54, r25	; 0x36
     76e:	00 9f       	mul	r16, r16
     770:	60 01       	movw	r12, r0
     772:	01 9f       	mul	r16, r17
     774:	d0 0c       	add	r13, r0
     776:	d0 0c       	add	r13, r0
     778:	11 24       	eor	r1, r1
     77a:	0d 2c       	mov	r0, r13
     77c:	00 0c       	add	r0, r0
     77e:	ee 08       	sbc	r14, r14
     780:	ff 08       	sbc	r15, r15
     782:	a5 01       	movw	r20, r10
     784:	94 01       	movw	r18, r8
     786:	c5 01       	movw	r24, r10
     788:	b4 01       	movw	r22, r8
     78a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     78e:	4b 01       	movw	r8, r22
     790:	5c 01       	movw	r10, r24
     792:	c7 01       	movw	r24, r14
     794:	b6 01       	movw	r22, r12
     796:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     79a:	9b 01       	movw	r18, r22
     79c:	ac 01       	movw	r20, r24
     79e:	c5 01       	movw	r24, r10
     7a0:	b4 01       	movw	r22, r8
     7a2:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
     7a6:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <sqrt>
     7aa:	6b ab       	std	Y+51, r22	; 0x33
     7ac:	7c ab       	std	Y+52, r23	; 0x34
     7ae:	8d ab       	std	Y+53, r24	; 0x35
     7b0:	9e ab       	std	Y+54, r25	; 0x36
     7b2:	69 a5       	ldd	r22, Y+41	; 0x29
     7b4:	7a a5       	ldd	r23, Y+42	; 0x2a
     7b6:	29 a1       	ldd	r18, Y+33	; 0x21
     7b8:	3a a1       	ldd	r19, Y+34	; 0x22
     7ba:	62 1b       	sub	r22, r18
     7bc:	73 0b       	sbc	r23, r19
     7be:	07 2e       	mov	r0, r23
     7c0:	00 0c       	add	r0, r0
     7c2:	88 0b       	sbc	r24, r24
     7c4:	99 0b       	sbc	r25, r25
     7c6:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     7ca:	4b 01       	movw	r8, r22
     7cc:	5c 01       	movw	r10, r24
     7ce:	83 01       	movw	r16, r6
     7d0:	4d a1       	ldd	r20, Y+37	; 0x25
     7d2:	5e a1       	ldd	r21, Y+38	; 0x26
     7d4:	04 1b       	sub	r16, r20
     7d6:	15 0b       	sbc	r17, r21
     7d8:	9b 01       	movw	r18, r22
     7da:	ac 01       	movw	r20, r24
     7dc:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     7e0:	6f ab       	std	Y+55, r22	; 0x37
     7e2:	78 af       	std	Y+56, r23	; 0x38
     7e4:	89 af       	std	Y+57, r24	; 0x39
     7e6:	9a af       	std	Y+58, r25	; 0x3a
     7e8:	00 9f       	mul	r16, r16
     7ea:	60 01       	movw	r12, r0
     7ec:	01 9f       	mul	r16, r17
     7ee:	d0 0c       	add	r13, r0
     7f0:	d0 0c       	add	r13, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	0d 2c       	mov	r0, r13
     7f6:	00 0c       	add	r0, r0
     7f8:	ee 08       	sbc	r14, r14
     7fa:	ff 08       	sbc	r15, r15
     7fc:	a5 01       	movw	r20, r10
     7fe:	94 01       	movw	r18, r8
     800:	c5 01       	movw	r24, r10
     802:	b4 01       	movw	r22, r8
     804:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     808:	4b 01       	movw	r8, r22
     80a:	5c 01       	movw	r10, r24
     80c:	c7 01       	movw	r24, r14
     80e:	b6 01       	movw	r22, r12
     810:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     814:	9b 01       	movw	r18, r22
     816:	ac 01       	movw	r20, r24
     818:	c5 01       	movw	r24, r10
     81a:	b4 01       	movw	r22, r8
     81c:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
     820:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <sqrt>
     824:	6f ab       	std	Y+55, r22	; 0x37
     826:	78 af       	std	Y+56, r23	; 0x38
     828:	89 af       	std	Y+57, r24	; 0x39
     82a:	9a af       	std	Y+58, r25	; 0x3a
     82c:	6d a5       	ldd	r22, Y+45	; 0x2d
     82e:	7e a5       	ldd	r23, Y+46	; 0x2e
     830:	89 a1       	ldd	r24, Y+33	; 0x21
     832:	9a a1       	ldd	r25, Y+34	; 0x22
     834:	68 1b       	sub	r22, r24
     836:	79 0b       	sbc	r23, r25
     838:	07 2e       	mov	r0, r23
     83a:	00 0c       	add	r0, r0
     83c:	88 0b       	sbc	r24, r24
     83e:	99 0b       	sbc	r25, r25
     840:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     844:	4b 01       	movw	r8, r22
     846:	5c 01       	movw	r10, r24
     848:	09 a9       	ldd	r16, Y+49	; 0x31
     84a:	1a a9       	ldd	r17, Y+50	; 0x32
     84c:	ed a1       	ldd	r30, Y+37	; 0x25
     84e:	fe a1       	ldd	r31, Y+38	; 0x26
     850:	0e 1b       	sub	r16, r30
     852:	1f 0b       	sbc	r17, r31
     854:	9b 01       	movw	r18, r22
     856:	ac 01       	movw	r20, r24
     858:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     85c:	69 a3       	std	Y+33, r22	; 0x21
     85e:	7a a3       	std	Y+34, r23	; 0x22
     860:	8b a3       	std	Y+35, r24	; 0x23
     862:	9c a3       	std	Y+36, r25	; 0x24
     864:	00 9f       	mul	r16, r16
     866:	60 01       	movw	r12, r0
     868:	01 9f       	mul	r16, r17
     86a:	d0 0c       	add	r13, r0
     86c:	d0 0c       	add	r13, r0
     86e:	11 24       	eor	r1, r1
     870:	0d 2c       	mov	r0, r13
     872:	00 0c       	add	r0, r0
     874:	ee 08       	sbc	r14, r14
     876:	ff 08       	sbc	r15, r15
     878:	a5 01       	movw	r20, r10
     87a:	94 01       	movw	r18, r8
     87c:	c5 01       	movw	r24, r10
     87e:	b4 01       	movw	r22, r8
     880:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     884:	4b 01       	movw	r8, r22
     886:	5c 01       	movw	r10, r24
     888:	c7 01       	movw	r24, r14
     88a:	b6 01       	movw	r22, r12
     88c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     890:	9b 01       	movw	r18, r22
     892:	ac 01       	movw	r20, r24
     894:	c5 01       	movw	r24, r10
     896:	b4 01       	movw	r22, r8
     898:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
     89c:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <sqrt>
     8a0:	4b 01       	movw	r8, r22
     8a2:	5c 01       	movw	r10, r24
     8a4:	6d a5       	ldd	r22, Y+45	; 0x2d
     8a6:	7e a5       	ldd	r23, Y+46	; 0x2e
     8a8:	29 a5       	ldd	r18, Y+41	; 0x29
     8aa:	3a a5       	ldd	r19, Y+42	; 0x2a
     8ac:	62 1b       	sub	r22, r18
     8ae:	73 0b       	sbc	r23, r19
     8b0:	07 2e       	mov	r0, r23
     8b2:	00 0c       	add	r0, r0
     8b4:	88 0b       	sbc	r24, r24
     8b6:	99 0b       	sbc	r25, r25
     8b8:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     8bc:	69 a3       	std	Y+33, r22	; 0x21
     8be:	7a a3       	std	Y+34, r23	; 0x22
     8c0:	8b a3       	std	Y+35, r24	; 0x23
     8c2:	9c a3       	std	Y+36, r25	; 0x24
     8c4:	09 a9       	ldd	r16, Y+49	; 0x31
     8c6:	1a a9       	ldd	r17, Y+50	; 0x32
     8c8:	06 19       	sub	r16, r6
     8ca:	17 09       	sbc	r17, r7
     8cc:	9b 01       	movw	r18, r22
     8ce:	ac 01       	movw	r20, r24
     8d0:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     8d4:	6d a3       	std	Y+37, r22	; 0x25
     8d6:	7e a3       	std	Y+38, r23	; 0x26
     8d8:	8f a3       	std	Y+39, r24	; 0x27
     8da:	98 a7       	std	Y+40, r25	; 0x28
     8dc:	00 9f       	mul	r16, r16
     8de:	60 01       	movw	r12, r0
     8e0:	01 9f       	mul	r16, r17
     8e2:	d0 0c       	add	r13, r0
     8e4:	d0 0c       	add	r13, r0
     8e6:	11 24       	eor	r1, r1
     8e8:	0d 2c       	mov	r0, r13
     8ea:	00 0c       	add	r0, r0
     8ec:	ee 08       	sbc	r14, r14
     8ee:	ff 08       	sbc	r15, r15
     8f0:	29 a1       	ldd	r18, Y+33	; 0x21
     8f2:	3a a1       	ldd	r19, Y+34	; 0x22
     8f4:	4b a1       	ldd	r20, Y+35	; 0x23
     8f6:	5c a1       	ldd	r21, Y+36	; 0x24
     8f8:	ca 01       	movw	r24, r20
     8fa:	b9 01       	movw	r22, r18
     8fc:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     900:	69 a3       	std	Y+33, r22	; 0x21
     902:	7a a3       	std	Y+34, r23	; 0x22
     904:	8b a3       	std	Y+35, r24	; 0x23
     906:	9c a3       	std	Y+36, r25	; 0x24
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     910:	9b 01       	movw	r18, r22
     912:	ac 01       	movw	r20, r24
     914:	69 a1       	ldd	r22, Y+33	; 0x21
     916:	7a a1       	ldd	r23, Y+34	; 0x22
     918:	8b a1       	ldd	r24, Y+35	; 0x23
     91a:	9c a1       	ldd	r25, Y+36	; 0x24
     91c:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
     920:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <sqrt>
     924:	2b ad       	ldd	r18, Y+59	; 0x3b
     926:	3c ad       	ldd	r19, Y+60	; 0x3c
     928:	4d ad       	ldd	r20, Y+61	; 0x3d
     92a:	5e ad       	ldd	r21, Y+62	; 0x3e
     92c:	29 83       	std	Y+1, r18	; 0x01
     92e:	3a 83       	std	Y+2, r19	; 0x02
     930:	4b 83       	std	Y+3, r20	; 0x03
     932:	5c 83       	std	Y+4, r21	; 0x04
     934:	23 96       	adiw	r28, 0x03	; 3
     936:	2c ad       	ldd	r18, Y+60	; 0x3c
     938:	3d ad       	ldd	r19, Y+61	; 0x3d
     93a:	4e ad       	ldd	r20, Y+62	; 0x3e
     93c:	5f ad       	ldd	r21, Y+63	; 0x3f
     93e:	23 97       	sbiw	r28, 0x03	; 3
     940:	2d 83       	std	Y+5, r18	; 0x05
     942:	3e 83       	std	Y+6, r19	; 0x06
     944:	4f 83       	std	Y+7, r20	; 0x07
     946:	58 87       	std	Y+8, r21	; 0x08
     948:	2b a9       	ldd	r18, Y+51	; 0x33
     94a:	3c a9       	ldd	r19, Y+52	; 0x34
     94c:	4d a9       	ldd	r20, Y+53	; 0x35
     94e:	5e a9       	ldd	r21, Y+54	; 0x36
     950:	29 87       	std	Y+9, r18	; 0x09
     952:	3a 87       	std	Y+10, r19	; 0x0a
     954:	4b 87       	std	Y+11, r20	; 0x0b
     956:	5c 87       	std	Y+12, r21	; 0x0c
     958:	2f a9       	ldd	r18, Y+55	; 0x37
     95a:	38 ad       	ldd	r19, Y+56	; 0x38
     95c:	49 ad       	ldd	r20, Y+57	; 0x39
     95e:	5a ad       	ldd	r21, Y+58	; 0x3a
     960:	2d 87       	std	Y+13, r18	; 0x0d
     962:	3e 87       	std	Y+14, r19	; 0x0e
     964:	4f 87       	std	Y+15, r20	; 0x0f
     966:	58 8b       	std	Y+16, r21	; 0x10
     968:	89 8a       	std	Y+17, r8	; 0x11
     96a:	9a 8a       	std	Y+18, r9	; 0x12
     96c:	ab 8a       	std	Y+19, r10	; 0x13
     96e:	bc 8a       	std	Y+20, r11	; 0x14
     970:	6d 8b       	std	Y+21, r22	; 0x15
     972:	7e 8b       	std	Y+22, r23	; 0x16
     974:	8f 8b       	std	Y+23, r24	; 0x17
     976:	98 8f       	std	Y+24, r25	; 0x18
     978:	ae 01       	movw	r20, r28
     97a:	4f 5f       	subi	r20, 0xFF	; 255
     97c:	5f 4f       	sbci	r21, 0xFF	; 255
     97e:	7a 01       	movw	r14, r20
     980:	00 e0       	ldi	r16, 0x00	; 0
     982:	10 e0       	ldi	r17, 0x00	; 0
     984:	61 2c       	mov	r6, r1
     986:	71 2c       	mov	r7, r1
     988:	c1 2c       	mov	r12, r1
     98a:	d1 2c       	mov	r13, r1
     98c:	21 2c       	mov	r2, r1
     98e:	31 2c       	mov	r3, r1
     990:	f7 01       	movw	r30, r14
     992:	81 90       	ld	r8, Z+
     994:	91 90       	ld	r9, Z+
     996:	a1 90       	ld	r10, Z+
     998:	b1 90       	ld	r11, Z+
     99a:	7f 01       	movw	r14, r30
     99c:	26 2d       	mov	r18, r6
     99e:	37 2d       	mov	r19, r7
     9a0:	4c 2d       	mov	r20, r12
     9a2:	5d 2d       	mov	r21, r13
     9a4:	c5 01       	movw	r24, r10
     9a6:	b4 01       	movw	r22, r8
     9a8:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
     9ac:	18 16       	cp	r1, r24
     9ae:	34 f4       	brge	.+12     	; 0x9bc <fourPointCalc+0x3e8>
     9b0:	68 2c       	mov	r6, r8
     9b2:	79 2c       	mov	r7, r9
     9b4:	ca 2c       	mov	r12, r10
     9b6:	db 2c       	mov	r13, r11
     9b8:	20 2e       	mov	r2, r16
     9ba:	31 2e       	mov	r3, r17
     9bc:	0f 5f       	subi	r16, 0xFF	; 255
     9be:	1f 4f       	sbci	r17, 0xFF	; 255
     9c0:	06 30       	cpi	r16, 0x06	; 6
     9c2:	11 05       	cpc	r17, r1
     9c4:	29 f7       	brne	.-54     	; 0x990 <fourPointCalc+0x3bc>
     9c6:	82 2d       	mov	r24, r2
     9c8:	93 2d       	mov	r25, r3
     9ca:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <distIndex>
     9ce:	fc 01       	movw	r30, r24
     9d0:	e0 80       	ld	r14, Z
     9d2:	f1 80       	ldd	r15, Z+1	; 0x01
     9d4:	fa 8e       	std	Y+26, r15	; 0x1a
     9d6:	e9 8e       	std	Y+25, r14	; 0x19
     9d8:	02 81       	ldd	r16, Z+2	; 0x02
     9da:	13 81       	ldd	r17, Z+3	; 0x03
     9dc:	1c 8f       	std	Y+28, r17	; 0x1c
     9de:	0b 8f       	std	Y+27, r16	; 0x1b
     9e0:	ee 0c       	add	r14, r14
     9e2:	ff 1c       	adc	r15, r15
     9e4:	ee 0c       	add	r14, r14
     9e6:	ff 1c       	adc	r15, r15
     9e8:	e4 0c       	add	r14, r4
     9ea:	f5 1c       	adc	r15, r5
     9ec:	00 0f       	add	r16, r16
     9ee:	11 1f       	adc	r17, r17
     9f0:	00 0f       	add	r16, r16
     9f2:	11 1f       	adc	r17, r17
     9f4:	04 0d       	add	r16, r4
     9f6:	15 1d       	adc	r17, r5
     9f8:	f7 01       	movw	r30, r14
     9fa:	60 81       	ld	r22, Z
     9fc:	71 81       	ldd	r23, Z+1	; 0x01
     9fe:	f8 01       	movw	r30, r16
     a00:	80 81       	ld	r24, Z
     a02:	91 81       	ldd	r25, Z+1	; 0x01
     a04:	68 0f       	add	r22, r24
     a06:	79 1f       	adc	r23, r25
     a08:	77 23       	and	r23, r23
     a0a:	14 f4       	brge	.+4      	; 0xa10 <fourPointCalc+0x43c>
     a0c:	6f 5f       	subi	r22, 0xFF	; 255
     a0e:	7f 4f       	sbci	r23, 0xFF	; 255
     a10:	75 95       	asr	r23
     a12:	67 95       	ror	r22
     a14:	07 2e       	mov	r0, r23
     a16:	00 0c       	add	r0, r0
     a18:	88 0b       	sbc	r24, r24
     a1a:	99 0b       	sbc	r25, r25
     a1c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     a20:	4b 01       	movw	r8, r22
     a22:	5c 01       	movw	r10, r24
     a24:	f7 01       	movw	r30, r14
     a26:	62 81       	ldd	r22, Z+2	; 0x02
     a28:	73 81       	ldd	r23, Z+3	; 0x03
     a2a:	f8 01       	movw	r30, r16
     a2c:	82 81       	ldd	r24, Z+2	; 0x02
     a2e:	93 81       	ldd	r25, Z+3	; 0x03
     a30:	68 0f       	add	r22, r24
     a32:	79 1f       	adc	r23, r25
     a34:	77 23       	and	r23, r23
     a36:	14 f4       	brge	.+4      	; 0xa3c <fourPointCalc+0x468>
     a38:	6f 5f       	subi	r22, 0xFF	; 255
     a3a:	7f 4f       	sbci	r23, 0xFF	; 255
     a3c:	75 95       	asr	r23
     a3e:	67 95       	ror	r22
     a40:	07 2e       	mov	r0, r23
     a42:	00 0c       	add	r0, r0
     a44:	88 0b       	sbc	r24, r24
     a46:	99 0b       	sbc	r25, r25
     a48:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     a4c:	69 a3       	std	Y+33, r22	; 0x21
     a4e:	7a a3       	std	Y+34, r23	; 0x22
     a50:	8b a3       	std	Y+35, r24	; 0x23
     a52:	9c a3       	std	Y+36, r25	; 0x24
     a54:	9e 01       	movw	r18, r28
     a56:	21 5e       	subi	r18, 0xE1	; 225
     a58:	3f 4f       	sbci	r19, 0xFF	; 255
     a5a:	ae 01       	movw	r20, r28
     a5c:	43 5e       	subi	r20, 0xE3	; 227
     a5e:	5f 4f       	sbci	r21, 0xFF	; 255
     a60:	be 01       	movw	r22, r28
     a62:	6f 5f       	subi	r22, 0xFF	; 255
     a64:	7f 4f       	sbci	r23, 0xFF	; 255
     a66:	ce 01       	movw	r24, r28
     a68:	49 96       	adiw	r24, 0x19	; 25
     a6a:	0e 94 42 02 	call	0x484	; 0x484 <orientationCalculationFour>
     a6e:	0d 8d       	ldd	r16, Y+29	; 0x1d
     a70:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a72:	00 0f       	add	r16, r16
     a74:	11 1f       	adc	r17, r17
     a76:	00 0f       	add	r16, r16
     a78:	11 1f       	adc	r17, r17
     a7a:	04 0d       	add	r16, r4
     a7c:	15 1d       	adc	r17, r5
     a7e:	2f 8c       	ldd	r2, Y+31	; 0x1f
     a80:	38 a0       	ldd	r3, Y+32	; 0x20
     a82:	22 0c       	add	r2, r2
     a84:	33 1c       	adc	r3, r3
     a86:	22 0c       	add	r2, r2
     a88:	33 1c       	adc	r3, r3
     a8a:	24 0c       	add	r2, r4
     a8c:	35 1c       	adc	r3, r5
     a8e:	f8 01       	movw	r30, r16
     a90:	60 81       	ld	r22, Z
     a92:	71 81       	ldd	r23, Z+1	; 0x01
     a94:	f1 01       	movw	r30, r2
     a96:	80 81       	ld	r24, Z
     a98:	91 81       	ldd	r25, Z+1	; 0x01
     a9a:	68 1b       	sub	r22, r24
     a9c:	79 0b       	sbc	r23, r25
     a9e:	07 2e       	mov	r0, r23
     aa0:	00 0c       	add	r0, r0
     aa2:	88 0b       	sbc	r24, r24
     aa4:	99 0b       	sbc	r25, r25
     aa6:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     aaa:	6b 01       	movw	r12, r22
     aac:	7c 01       	movw	r14, r24
     aae:	f8 01       	movw	r30, r16
     ab0:	62 81       	ldd	r22, Z+2	; 0x02
     ab2:	73 81       	ldd	r23, Z+3	; 0x03
     ab4:	f1 01       	movw	r30, r2
     ab6:	82 81       	ldd	r24, Z+2	; 0x02
     ab8:	93 81       	ldd	r25, Z+3	; 0x03
     aba:	68 1b       	sub	r22, r24
     abc:	79 0b       	sbc	r23, r25
     abe:	07 2e       	mov	r0, r23
     ac0:	00 0c       	add	r0, r0
     ac2:	88 0b       	sbc	r24, r24
     ac4:	99 0b       	sbc	r25, r25
     ac6:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
     aca:	90 58       	subi	r25, 0x80	; 128
     acc:	a7 01       	movw	r20, r14
     ace:	96 01       	movw	r18, r12
     ad0:	0e 94 9d 14 	call	0x293a	; 0x293a <atan2>
     ad4:	2b ed       	ldi	r18, 0xDB	; 219
     ad6:	3f e0       	ldi	r19, 0x0F	; 15
     ad8:	49 ec       	ldi	r20, 0xC9	; 201
     ada:	5f e3       	ldi	r21, 0x3F	; 63
     adc:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
     ae0:	6b 01       	movw	r12, r22
     ae2:	7c 01       	movw	r14, r24
     ae4:	a5 01       	movw	r20, r10
     ae6:	94 01       	movw	r18, r8
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	94 e4       	ldi	r25, 0x44	; 68
     af0:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
     af4:	4b 01       	movw	r8, r22
     af6:	5c 01       	movw	r10, r24
     af8:	29 a1       	ldd	r18, Y+33	; 0x21
     afa:	3a a1       	ldd	r19, Y+34	; 0x22
     afc:	4b a1       	ldd	r20, Y+35	; 0x23
     afe:	5c a1       	ldd	r21, Y+36	; 0x24
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	8f eb       	ldi	r24, 0xBF	; 191
     b06:	93 e4       	ldi	r25, 0x43	; 67
     b08:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
     b0c:	2b 01       	movw	r4, r22
     b0e:	3c 01       	movw	r6, r24
     b10:	c7 01       	movw	r24, r14
     b12:	b6 01       	movw	r22, r12
     b14:	0e 94 39 17 	call	0x2e72	; 0x2e72 <sin>
     b18:	69 a3       	std	Y+33, r22	; 0x21
     b1a:	7a a3       	std	Y+34, r23	; 0x22
     b1c:	8b a3       	std	Y+35, r24	; 0x23
     b1e:	9c a3       	std	Y+36, r25	; 0x24
     b20:	c7 01       	movw	r24, r14
     b22:	b6 01       	movw	r22, r12
     b24:	0e 94 01 15 	call	0x2a02	; 0x2a02 <cos>
     b28:	6d a3       	std	Y+37, r22	; 0x25
     b2a:	7e a3       	std	Y+38, r23	; 0x26
     b2c:	8f a3       	std	Y+39, r24	; 0x27
     b2e:	98 a7       	std	Y+40, r25	; 0x28
     b30:	08 e5       	ldi	r16, 0x58	; 88
     b32:	11 e0       	ldi	r17, 0x01	; 1
     b34:	29 a1       	ldd	r18, Y+33	; 0x21
     b36:	3a a1       	ldd	r19, Y+34	; 0x22
     b38:	4b a1       	ldd	r20, Y+35	; 0x23
     b3a:	5c a1       	ldd	r21, Y+36	; 0x24
     b3c:	c3 01       	movw	r24, r6
     b3e:	b2 01       	movw	r22, r4
     b40:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     b44:	69 a7       	std	Y+41, r22	; 0x29
     b46:	7a a7       	std	Y+42, r23	; 0x2a
     b48:	8b a7       	std	Y+43, r24	; 0x2b
     b4a:	9c a7       	std	Y+44, r25	; 0x2c
     b4c:	2d a1       	ldd	r18, Y+37	; 0x25
     b4e:	3e a1       	ldd	r19, Y+38	; 0x26
     b50:	4f a1       	ldd	r20, Y+39	; 0x27
     b52:	58 a5       	ldd	r21, Y+40	; 0x28
     b54:	c5 01       	movw	r24, r10
     b56:	b4 01       	movw	r22, r8
     b58:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     b5c:	9b 01       	movw	r18, r22
     b5e:	ac 01       	movw	r20, r24
     b60:	69 a5       	ldd	r22, Y+41	; 0x29
     b62:	7a a5       	ldd	r23, Y+42	; 0x2a
     b64:	8b a5       	ldd	r24, Y+43	; 0x2b
     b66:	9c a5       	ldd	r25, Y+44	; 0x2c
     b68:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
     b6c:	f8 01       	movw	r30, r16
     b6e:	60 83       	st	Z, r22
     b70:	71 83       	std	Z+1, r23	; 0x01
     b72:	82 83       	std	Z+2, r24	; 0x02
     b74:	93 83       	std	Z+3, r25	; 0x03
     b76:	2d a1       	ldd	r18, Y+37	; 0x25
     b78:	3e a1       	ldd	r19, Y+38	; 0x26
     b7a:	4f a1       	ldd	r20, Y+39	; 0x27
     b7c:	58 a5       	ldd	r21, Y+40	; 0x28
     b7e:	c3 01       	movw	r24, r6
     b80:	b2 01       	movw	r22, r4
     b82:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     b86:	2b 01       	movw	r4, r22
     b88:	3c 01       	movw	r6, r24
     b8a:	29 a1       	ldd	r18, Y+33	; 0x21
     b8c:	3a a1       	ldd	r19, Y+34	; 0x22
     b8e:	4b a1       	ldd	r20, Y+35	; 0x23
     b90:	5c a1       	ldd	r21, Y+36	; 0x24
     b92:	c5 01       	movw	r24, r10
     b94:	b4 01       	movw	r22, r8
     b96:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
     b9a:	9b 01       	movw	r18, r22
     b9c:	ac 01       	movw	r20, r24
     b9e:	c3 01       	movw	r24, r6
     ba0:	b2 01       	movw	r22, r4
     ba2:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
     ba6:	f8 01       	movw	r30, r16
     ba8:	64 83       	std	Z+4, r22	; 0x04
     baa:	75 83       	std	Z+5, r23	; 0x05
     bac:	86 83       	std	Z+6, r24	; 0x06
     bae:	97 83       	std	Z+7, r25	; 0x07
     bb0:	f7 fa       	bst	r15, 7
     bb2:	f0 94       	com	r15
     bb4:	f7 f8       	bld	r15, 7
     bb6:	f0 94       	com	r15
     bb8:	c0 86       	std	Z+8, r12	; 0x08
     bba:	d1 86       	std	Z+9, r13	; 0x09
     bbc:	e2 86       	std	Z+10, r14	; 0x0a
     bbe:	f3 86       	std	Z+11, r15	; 0x0b
     bc0:	c8 01       	movw	r24, r16
     bc2:	ce 5b       	subi	r28, 0xBE	; 190
     bc4:	df 4f       	sbci	r29, 0xFF	; 255
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	bf 90       	pop	r11
     be2:	af 90       	pop	r10
     be4:	9f 90       	pop	r9
     be6:	8f 90       	pop	r8
     be8:	7f 90       	pop	r7
     bea:	6f 90       	pop	r6
     bec:	5f 90       	pop	r5
     bee:	4f 90       	pop	r4
     bf0:	3f 90       	pop	r3
     bf2:	2f 90       	pop	r2
     bf4:	08 95       	ret

00000bf6 <localization_calc>:
     bf6:	4f 92       	push	r4
     bf8:	5f 92       	push	r5
     bfa:	6f 92       	push	r6
     bfc:	7f 92       	push	r7
     bfe:	af 92       	push	r10
     c00:	bf 92       	push	r11
     c02:	cf 92       	push	r12
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	68 97       	sbiw	r28, 0x18	; 24
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
     c22:	fc 01       	movw	r30, r24
     c24:	0d b7       	in	r16, 0x3d	; 61
     c26:	1e b7       	in	r17, 0x3e	; 62
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	9a 83       	std	Y+2, r25	; 0x02
     c2e:	89 83       	std	Y+1, r24	; 0x01
     c30:	80 85       	ldd	r24, Z+8	; 0x08
     c32:	91 85       	ldd	r25, Z+9	; 0x09
     c34:	9c 83       	std	Y+4, r25	; 0x04
     c36:	8b 83       	std	Y+3, r24	; 0x03
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	9e 83       	std	Y+6, r25	; 0x06
     c3e:	8d 83       	std	Y+5, r24	; 0x05
     c40:	82 85       	ldd	r24, Z+10	; 0x0a
     c42:	93 85       	ldd	r25, Z+11	; 0x0b
     c44:	98 87       	std	Y+8, r25	; 0x08
     c46:	8f 83       	std	Y+7, r24	; 0x07
     c48:	84 81       	ldd	r24, Z+4	; 0x04
     c4a:	95 81       	ldd	r25, Z+5	; 0x05
     c4c:	9a 87       	std	Y+10, r25	; 0x0a
     c4e:	89 87       	std	Y+9, r24	; 0x09
     c50:	84 85       	ldd	r24, Z+12	; 0x0c
     c52:	95 85       	ldd	r25, Z+13	; 0x0d
     c54:	9c 87       	std	Y+12, r25	; 0x0c
     c56:	8b 87       	std	Y+11, r24	; 0x0b
     c58:	86 81       	ldd	r24, Z+6	; 0x06
     c5a:	97 81       	ldd	r25, Z+7	; 0x07
     c5c:	9e 87       	std	Y+14, r25	; 0x0e
     c5e:	8d 87       	std	Y+13, r24	; 0x0d
     c60:	86 85       	ldd	r24, Z+14	; 0x0e
     c62:	97 85       	ldd	r25, Z+15	; 0x0f
     c64:	98 8b       	std	Y+16, r25	; 0x10
     c66:	8f 87       	std	Y+15, r24	; 0x0f
     c68:	fe 01       	movw	r30, r28
     c6a:	71 96       	adiw	r30, 0x11	; 17
     c6c:	88 e0       	ldi	r24, 0x08	; 8
     c6e:	df 01       	movw	r26, r30
     c70:	1d 92       	st	X+, r1
     c72:	8a 95       	dec	r24
     c74:	e9 f7       	brne	.-6      	; 0xc70 <localization_calc+0x7a>
     c76:	70 97       	sbiw	r30, 0x10	; 16
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	4f 3f       	cpi	r20, 0xFF	; 255
     c86:	53 40       	sbci	r21, 0x03	; 3
     c88:	71 f0       	breq	.+28     	; 0xca6 <localization_calc+0xb0>
     c8a:	dc 01       	movw	r26, r24
     c8c:	aa 0f       	add	r26, r26
     c8e:	bb 1f       	adc	r27, r27
     c90:	41 e0       	ldi	r20, 0x01	; 1
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	4c 0f       	add	r20, r28
     c96:	5d 1f       	adc	r21, r29
     c98:	a4 0f       	add	r26, r20
     c9a:	b5 1f       	adc	r27, r21
     c9c:	51 96       	adiw	r26, 0x11	; 17
     c9e:	3c 93       	st	X, r19
     ca0:	2e 93       	st	-X, r18
     ca2:	50 97       	sbiw	r26, 0x10	; 16
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	2f 5f       	subi	r18, 0xFF	; 255
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	34 96       	adiw	r30, 0x04	; 4
     cac:	24 30       	cpi	r18, 0x04	; 4
     cae:	31 05       	cpc	r19, r1
     cb0:	39 f7       	brne	.-50     	; 0xc80 <localization_calc+0x8a>
     cb2:	00 97       	sbiw	r24, 0x00	; 0
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <localization_calc+0xc2>
     cb6:	89 c0       	rjmp	.+274    	; 0xdca <localization_calc+0x1d4>
     cb8:	ed b6       	in	r14, 0x3d	; 61
     cba:	fe b6       	in	r15, 0x3e	; 62
     cbc:	6c 01       	movw	r12, r24
     cbe:	cc 0c       	add	r12, r12
     cc0:	dd 1c       	adc	r13, r13
     cc2:	cc 0c       	add	r12, r12
     cc4:	dd 1c       	adc	r13, r13
     cc6:	ad b7       	in	r26, 0x3d	; 61
     cc8:	be b7       	in	r27, 0x3e	; 62
     cca:	ac 19       	sub	r26, r12
     ccc:	bd 09       	sbc	r27, r13
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	be bf       	out	0x3e, r27	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	ad bf       	out	0x3d, r26	; 61
     cd8:	ed b7       	in	r30, 0x3d	; 61
     cda:	fe b7       	in	r31, 0x3e	; 62
     cdc:	31 96       	adiw	r30, 0x01	; 1
     cde:	5f 01       	movw	r10, r30
     ce0:	18 16       	cp	r1, r24
     ce2:	19 06       	cpc	r1, r25
     ce4:	24 f5       	brge	.+72     	; 0xd2e <localization_calc+0x138>
     ce6:	9e 01       	movw	r18, r28
     ce8:	2f 5e       	subi	r18, 0xEF	; 239
     cea:	3f 4f       	sbci	r19, 0xFF	; 255
     cec:	df 01       	movw	r26, r30
     cee:	ce 0e       	add	r12, r30
     cf0:	df 1e       	adc	r13, r31
     cf2:	f9 01       	movw	r30, r18
     cf4:	41 91       	ld	r20, Z+
     cf6:	51 91       	ld	r21, Z+
     cf8:	9f 01       	movw	r18, r30
     cfa:	fa 01       	movw	r30, r20
     cfc:	ee 0f       	add	r30, r30
     cfe:	ff 1f       	adc	r31, r31
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	4c 0f       	add	r20, r28
     d0a:	5d 1f       	adc	r21, r29
     d0c:	e4 0f       	add	r30, r20
     d0e:	f5 1f       	adc	r31, r21
     d10:	40 81       	ld	r20, Z
     d12:	51 81       	ldd	r21, Z+1	; 0x01
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	5c 93       	st	X, r21
     d18:	4e 93       	st	-X, r20
     d1a:	42 81       	ldd	r20, Z+2	; 0x02
     d1c:	53 81       	ldd	r21, Z+3	; 0x03
     d1e:	13 96       	adiw	r26, 0x03	; 3
     d20:	5c 93       	st	X, r21
     d22:	4e 93       	st	-X, r20
     d24:	12 97       	sbiw	r26, 0x02	; 2
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	ac 15       	cp	r26, r12
     d2a:	bd 05       	cpc	r27, r13
     d2c:	11 f7       	brne	.-60     	; 0xcf2 <localization_calc+0xfc>
     d2e:	db 01       	movw	r26, r22
     d30:	4d 90       	ld	r4, X+
     d32:	5d 90       	ld	r5, X+
     d34:	6d 90       	ld	r6, X+
     d36:	7c 90       	ld	r7, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	e0 e7       	ldi	r30, 0x70	; 112
     d3c:	f1 e0       	ldi	r31, 0x01	; 1
     d3e:	40 82       	st	Z, r4
     d40:	51 82       	std	Z+1, r5	; 0x01
     d42:	62 82       	std	Z+2, r6	; 0x02
     d44:	73 82       	std	Z+3, r7	; 0x03
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	4d 90       	ld	r4, X+
     d4a:	5d 90       	ld	r5, X+
     d4c:	6d 90       	ld	r6, X+
     d4e:	7c 90       	ld	r7, X
     d50:	17 97       	sbiw	r26, 0x07	; 7
     d52:	44 82       	std	Z+4, r4	; 0x04
     d54:	55 82       	std	Z+5, r5	; 0x05
     d56:	66 82       	std	Z+6, r6	; 0x06
     d58:	77 82       	std	Z+7, r7	; 0x07
     d5a:	18 96       	adiw	r26, 0x08	; 8
     d5c:	4d 91       	ld	r20, X+
     d5e:	5d 91       	ld	r21, X+
     d60:	6d 91       	ld	r22, X+
     d62:	7c 91       	ld	r23, X
     d64:	1b 97       	sbiw	r26, 0x0b	; 11
     d66:	40 87       	std	Z+8, r20	; 0x08
     d68:	51 87       	std	Z+9, r21	; 0x09
     d6a:	62 87       	std	Z+10, r22	; 0x0a
     d6c:	73 87       	std	Z+11, r23	; 0x0b
     d6e:	04 97       	sbiw	r24, 0x04	; 4
     d70:	29 f4       	brne	.+10     	; 0xd7c <localization_calc+0x186>
     d72:	c5 01       	movw	r24, r10
     d74:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <fourPointCalc>
     d78:	dc 01       	movw	r26, r24
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <localization_calc+0x18a>
     d7c:	a0 e7       	ldi	r26, 0x70	; 112
     d7e:	b1 e0       	ldi	r27, 0x01	; 1
     d80:	4d 91       	ld	r20, X+
     d82:	5d 91       	ld	r21, X+
     d84:	6d 91       	ld	r22, X+
     d86:	7c 91       	ld	r23, X
     d88:	13 97       	sbiw	r26, 0x03	; 3
     d8a:	e4 e6       	ldi	r30, 0x64	; 100
     d8c:	f1 e0       	ldi	r31, 0x01	; 1
     d8e:	40 83       	st	Z, r20
     d90:	51 83       	std	Z+1, r21	; 0x01
     d92:	62 83       	std	Z+2, r22	; 0x02
     d94:	73 83       	std	Z+3, r23	; 0x03
     d96:	14 96       	adiw	r26, 0x04	; 4
     d98:	4d 91       	ld	r20, X+
     d9a:	5d 91       	ld	r21, X+
     d9c:	6d 91       	ld	r22, X+
     d9e:	7c 91       	ld	r23, X
     da0:	17 97       	sbiw	r26, 0x07	; 7
     da2:	44 83       	std	Z+4, r20	; 0x04
     da4:	55 83       	std	Z+5, r21	; 0x05
     da6:	66 83       	std	Z+6, r22	; 0x06
     da8:	77 83       	std	Z+7, r23	; 0x07
     daa:	18 96       	adiw	r26, 0x08	; 8
     dac:	8d 91       	ld	r24, X+
     dae:	9d 91       	ld	r25, X+
     db0:	0d 90       	ld	r0, X+
     db2:	bc 91       	ld	r27, X
     db4:	a0 2d       	mov	r26, r0
     db6:	80 87       	std	Z+8, r24	; 0x08
     db8:	91 87       	std	Z+9, r25	; 0x09
     dba:	a2 87       	std	Z+10, r26	; 0x0a
     dbc:	b3 87       	std	Z+11, r27	; 0x0b
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	fe be       	out	0x3e, r15	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	ed be       	out	0x3d, r14	; 61
     dc8:	20 c0       	rjmp	.+64     	; 0xe0a <localization_calc+0x214>
     dca:	fb 01       	movw	r30, r22
     dcc:	80 81       	ld	r24, Z
     dce:	91 81       	ldd	r25, Z+1	; 0x01
     dd0:	a2 81       	ldd	r26, Z+2	; 0x02
     dd2:	b3 81       	ldd	r27, Z+3	; 0x03
     dd4:	e4 e6       	ldi	r30, 0x64	; 100
     dd6:	f1 e0       	ldi	r31, 0x01	; 1
     dd8:	80 83       	st	Z, r24
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	a2 83       	std	Z+2, r26	; 0x02
     dde:	b3 83       	std	Z+3, r27	; 0x03
     de0:	db 01       	movw	r26, r22
     de2:	14 96       	adiw	r26, 0x04	; 4
     de4:	cd 90       	ld	r12, X+
     de6:	dd 90       	ld	r13, X+
     de8:	ed 90       	ld	r14, X+
     dea:	fc 90       	ld	r15, X
     dec:	17 97       	sbiw	r26, 0x07	; 7
     dee:	c4 82       	std	Z+4, r12	; 0x04
     df0:	d5 82       	std	Z+5, r13	; 0x05
     df2:	e6 82       	std	Z+6, r14	; 0x06
     df4:	f7 82       	std	Z+7, r15	; 0x07
     df6:	18 96       	adiw	r26, 0x08	; 8
     df8:	4d 91       	ld	r20, X+
     dfa:	5d 91       	ld	r21, X+
     dfc:	6d 91       	ld	r22, X+
     dfe:	7c 91       	ld	r23, X
     e00:	1b 97       	sbiw	r26, 0x0b	; 11
     e02:	40 87       	std	Z+8, r20	; 0x08
     e04:	51 87       	std	Z+9, r21	; 0x09
     e06:	62 87       	std	Z+10, r22	; 0x0a
     e08:	73 87       	std	Z+11, r23	; 0x0b
     e0a:	84 e6       	ldi	r24, 0x64	; 100
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	1e bf       	out	0x3e, r17	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0d bf       	out	0x3d, r16	; 61
     e18:	68 96       	adiw	r28, 0x18	; 24
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	df 90       	pop	r13
     e32:	cf 90       	pop	r12
     e34:	bf 90       	pop	r11
     e36:	af 90       	pop	r10
     e38:	7f 90       	pop	r7
     e3a:	6f 90       	pop	r6
     e3c:	5f 90       	pop	r5
     e3e:	4f 90       	pop	r4
     e40:	08 95       	ret

00000e42 <motor_update>:
Initialization of Subsystem Components
************************************************************/

/* Called On Timer 3 Rollover */
void motor_update(void)
{
     e42:	af 92       	push	r10
     e44:	bf 92       	push	r11
     e46:	cf 92       	push	r12
     e48:	df 92       	push	r13
     e4a:	ef 92       	push	r14
     e4c:	ff 92       	push	r15
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
	set(TIFR3,OCF3A);		// Reset flag
     e52:	c1 9a       	sbi	0x18, 1	; 24
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd); // Update control
     e54:	a0 90 08 01 	lds	r10, 0x0108
     e58:	b0 90 09 01 	lds	r11, 0x0109
     e5c:	c0 90 0a 01 	lds	r12, 0x010A
     e60:	d0 90 0b 01 	lds	r13, 0x010B
     e64:	e0 90 0c 01 	lds	r14, 0x010C
     e68:	f0 90 0d 01 	lds	r15, 0x010D
     e6c:	00 91 0e 01 	lds	r16, 0x010E
     e70:	10 91 0f 01 	lds	r17, 0x010F
     e74:	20 91 a3 01 	lds	r18, 0x01A3
     e78:	30 91 a4 01 	lds	r19, 0x01A4
     e7c:	40 91 a5 01 	lds	r20, 0x01A5
     e80:	50 91 a6 01 	lds	r21, 0x01A6
     e84:	60 91 a7 01 	lds	r22, 0x01A7
     e88:	70 91 a8 01 	lds	r23, 0x01A8
     e8c:	80 91 a9 01 	lds	r24, 0x01A9
     e90:	90 91 aa 01 	lds	r25, 0x01AA
     e94:	e0 91 9e 01 	lds	r30, 0x019E
     e98:	ef 93       	push	r30
     e9a:	e0 91 9d 01 	lds	r30, 0x019D
     e9e:	ef 93       	push	r30
     ea0:	e0 91 9c 01 	lds	r30, 0x019C
     ea4:	ef 93       	push	r30
     ea6:	e0 91 9b 01 	lds	r30, 0x019B
     eaa:	ef 93       	push	r30
     eac:	e0 91 03 01 	lds	r30, 0x0103
     eb0:	ef 93       	push	r30
     eb2:	e0 91 02 01 	lds	r30, 0x0102
     eb6:	ef 93       	push	r30
     eb8:	e0 91 01 01 	lds	r30, 0x0101
     ebc:	ef 93       	push	r30
     ebe:	e0 91 00 01 	lds	r30, 0x0100
     ec2:	ef 93       	push	r30
     ec4:	e0 91 a2 01 	lds	r30, 0x01A2
     ec8:	ef 93       	push	r30
     eca:	e0 91 a1 01 	lds	r30, 0x01A1
     ece:	ef 93       	push	r30
     ed0:	e0 91 a0 01 	lds	r30, 0x01A0
     ed4:	ef 93       	push	r30
     ed6:	e0 91 9f 01 	lds	r30, 0x019F
     eda:	ef 93       	push	r30
     edc:	e0 91 07 01 	lds	r30, 0x0107
     ee0:	ef 93       	push	r30
     ee2:	e0 91 06 01 	lds	r30, 0x0106
     ee6:	ef 93       	push	r30
     ee8:	e0 91 05 01 	lds	r30, 0x0105
     eec:	ef 93       	push	r30
     eee:	e0 91 04 01 	lds	r30, 0x0104
     ef2:	ef 93       	push	r30
     ef4:	0e 94 c6 0a 	call	0x158c	; 0x158c <run_motor_control_loop>
     ef8:	8d b7       	in	r24, 0x3d	; 61
     efa:	9e b7       	in	r25, 0x3e	; 62
     efc:	40 96       	adiw	r24, 0x10	; 16
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	9e bf       	out	0x3e, r25	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	8d bf       	out	0x3d, r24	; 61
}
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	bf 90       	pop	r11
     f16:	af 90       	pop	r10
     f18:	08 95       	ret

00000f1a <bot_behavior_update>:

/* Update Targets, Gains, and Max Vals */
void bot_behavior_update()
{
	if (has_puck())
     f1a:	0e 94 74 12 	call	0x24e8	; 0x24e8 <has_puck>
     f1e:	88 23       	and	r24, r24
     f20:	c9 f1       	breq	.+114    	; 0xf94 <bot_behavior_update+0x7a>
	{
		x_target = x_goal;
     f22:	80 91 8a 01 	lds	r24, 0x018A
     f26:	90 91 8b 01 	lds	r25, 0x018B
     f2a:	a0 91 8c 01 	lds	r26, 0x018C
     f2e:	b0 91 8d 01 	lds	r27, 0x018D
     f32:	80 93 a7 01 	sts	0x01A7, r24
     f36:	90 93 a8 01 	sts	0x01A8, r25
     f3a:	a0 93 a9 01 	sts	0x01A9, r26
     f3e:	b0 93 aa 01 	sts	0x01AA, r27
		y_target = y_goal;
     f42:	80 91 86 01 	lds	r24, 0x0186
     f46:	90 91 87 01 	lds	r25, 0x0187
     f4a:	a0 91 88 01 	lds	r26, 0x0188
     f4e:	b0 91 89 01 	lds	r27, 0x0189
     f52:	80 93 a3 01 	sts	0x01A3, r24
     f56:	90 93 a4 01 	sts	0x01A4, r25
     f5a:	a0 93 a5 01 	sts	0x01A5, r26
     f5e:	b0 93 a6 01 	sts	0x01A6, r27
		max_theta = M_PI/3;
     f62:	82 e9       	ldi	r24, 0x92	; 146
     f64:	9a e0       	ldi	r25, 0x0A	; 10
     f66:	a6 e8       	ldi	r26, 0x86	; 134
     f68:	bf e3       	ldi	r27, 0x3F	; 63
     f6a:	80 93 08 01 	sts	0x0108, r24
     f6e:	90 93 09 01 	sts	0x0109, r25
     f72:	a0 93 0a 01 	sts	0x010A, r26
     f76:	b0 93 0b 01 	sts	0x010B, r27
		max_duty_cycle = 0.7;
     f7a:	83 e3       	ldi	r24, 0x33	; 51
     f7c:	93 e3       	ldi	r25, 0x33	; 51
     f7e:	a3 e3       	ldi	r26, 0x33	; 51
     f80:	bf e3       	ldi	r27, 0x3F	; 63
     f82:	80 93 0c 01 	sts	0x010C, r24
     f86:	90 93 0d 01 	sts	0x010D, r25
     f8a:	a0 93 0e 01 	sts	0x010E, r26
     f8e:	b0 93 0f 01 	sts	0x010F, r27
		return;
     f92:	08 95       	ret
	}
	
	if (!has_puck())
     f94:	0e 94 74 12 	call	0x24e8	; 0x24e8 <has_puck>
     f98:	81 11       	cpse	r24, r1
     f9a:	38 c0       	rjmp	.+112    	; 0x100c <bot_behavior_update+0xf2>
	{
		x_target = x_puck;
     f9c:	80 91 80 01 	lds	r24, 0x0180
     fa0:	90 91 81 01 	lds	r25, 0x0181
     fa4:	a0 91 82 01 	lds	r26, 0x0182
     fa8:	b0 91 83 01 	lds	r27, 0x0183
     fac:	80 93 a7 01 	sts	0x01A7, r24
     fb0:	90 93 a8 01 	sts	0x01A8, r25
     fb4:	a0 93 a9 01 	sts	0x01A9, r26
     fb8:	b0 93 aa 01 	sts	0x01AA, r27
		y_target = y_puck;
     fbc:	80 91 7c 01 	lds	r24, 0x017C
     fc0:	90 91 7d 01 	lds	r25, 0x017D
     fc4:	a0 91 7e 01 	lds	r26, 0x017E
     fc8:	b0 91 7f 01 	lds	r27, 0x017F
     fcc:	80 93 a3 01 	sts	0x01A3, r24
     fd0:	90 93 a4 01 	sts	0x01A4, r25
     fd4:	a0 93 a5 01 	sts	0x01A5, r26
     fd8:	b0 93 a6 01 	sts	0x01A6, r27
		max_theta = M_PI;
     fdc:	8b ed       	ldi	r24, 0xDB	; 219
     fde:	9f e0       	ldi	r25, 0x0F	; 15
     fe0:	a9 e4       	ldi	r26, 0x49	; 73
     fe2:	b0 e4       	ldi	r27, 0x40	; 64
     fe4:	80 93 08 01 	sts	0x0108, r24
     fe8:	90 93 09 01 	sts	0x0109, r25
     fec:	a0 93 0a 01 	sts	0x010A, r26
     ff0:	b0 93 0b 01 	sts	0x010B, r27
		max_duty_cycle = 0.99;
     ff4:	84 ea       	ldi	r24, 0xA4	; 164
     ff6:	90 e7       	ldi	r25, 0x70	; 112
     ff8:	ad e7       	ldi	r26, 0x7D	; 125
     ffa:	bf e3       	ldi	r27, 0x3F	; 63
     ffc:	80 93 0c 01 	sts	0x010C, r24
    1000:	90 93 0d 01 	sts	0x010D, r25
    1004:	a0 93 0e 01 	sts	0x010E, r26
    1008:	b0 93 0f 01 	sts	0x010F, r27
    100c:	08 95       	ret

0000100e <adc_update>:
	}
}

/* Called on ADC Conversion Completion */
void adc_update(void)
{
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	28 97       	sbiw	r28, 0x08	; 8
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
	set(ADCSRA,ADIF);	 // Reset flag
    1022:	ea e7       	ldi	r30, 0x7A	; 122
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	80 61       	ori	r24, 0x10	; 16
    102a:	80 83       	st	Z, r24
	if(adc_switch()){
    102c:	0e 94 84 12 	call	0x2508	; 0x2508 <adc_switch>
    1030:	88 23       	and	r24, r24
    1032:	e1 f0       	breq	.+56     	; 0x106c <adc_update+0x5e>
		float puck_buffer[2];
		get_puck_location(puck_buffer);
    1034:	ce 01       	movw	r24, r28
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	0e 94 a6 11 	call	0x234c	; 0x234c <get_puck_location>
		x_puck = puck_buffer[0];
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	ab 81       	ldd	r26, Y+3	; 0x03
    1042:	bc 81       	ldd	r27, Y+4	; 0x04
    1044:	80 93 80 01 	sts	0x0180, r24
    1048:	90 93 81 01 	sts	0x0181, r25
    104c:	a0 93 82 01 	sts	0x0182, r26
    1050:	b0 93 83 01 	sts	0x0183, r27
		y_puck = puck_buffer[1];
    1054:	8d 81       	ldd	r24, Y+5	; 0x05
    1056:	9e 81       	ldd	r25, Y+6	; 0x06
    1058:	af 81       	ldd	r26, Y+7	; 0x07
    105a:	b8 85       	ldd	r27, Y+8	; 0x08
    105c:	80 93 7c 01 	sts	0x017C, r24
    1060:	90 93 7d 01 	sts	0x017D, r25
    1064:	a0 93 7e 01 	sts	0x017E, r26
    1068:	b0 93 7f 01 	sts	0x017F, r27
	}
}
    106c:	28 96       	adiw	r28, 0x08	; 8
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <play>:
void play(void)
{
	/* Light LED of defending goal */
	
	/* Play */
	set(TCCR1B,CS10);
    107e:	e1 e8       	ldi	r30, 0x81	; 129
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	81 60       	ori	r24, 0x01	; 1
    1086:	80 83       	st	Z, r24
    1088:	08 95       	ret

0000108a <pause>:
}

void pause(void)
{
	/* Stop within 3  seconds */
	clear(TCCR1B,CS10);
    108a:	e1 e8       	ldi	r30, 0x81	; 129
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8e 7f       	andi	r24, 0xFE	; 254
    1092:	80 83       	st	Z, r24
	clear(PORTB,0); // B0 Left motor off
    1094:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,2); // B2 Right motor off
    1096:	2a 98       	cbi	0x05, 2	; 5
    1098:	08 95       	ret

0000109a <halftime>:
}

void halftime(void)
{
	/* Stop play */
	pause();
    109a:	0e 94 45 08 	call	0x108a	; 0x108a <pause>
	
	/* Switch assigned goal */
	if (x_goal>0) {
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	a9 01       	movw	r20, r18
    10a4:	60 91 8a 01 	lds	r22, 0x018A
    10a8:	70 91 8b 01 	lds	r23, 0x018B
    10ac:	80 91 8c 01 	lds	r24, 0x018C
    10b0:	90 91 8d 01 	lds	r25, 0x018D
    10b4:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    10b8:	18 16       	cp	r1, r24
    10ba:	6c f4       	brge	.+26     	; 0x10d6 <halftime+0x3c>
		x_goal = -1*GOAL_X_DIST;
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	af ea       	ldi	r26, 0xAF	; 175
    10c2:	b3 ec       	ldi	r27, 0xC3	; 195
    10c4:	80 93 8a 01 	sts	0x018A, r24
    10c8:	90 93 8b 01 	sts	0x018B, r25
    10cc:	a0 93 8c 01 	sts	0x018C, r26
    10d0:	b0 93 8d 01 	sts	0x018D, r27
    10d4:	08 95       	ret
		} else {
		x_goal = GOAL_X_DIST;
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	af ea       	ldi	r26, 0xAF	; 175
    10dc:	b3 e4       	ldi	r27, 0x43	; 67
    10de:	80 93 8a 01 	sts	0x018A, r24
    10e2:	90 93 8b 01 	sts	0x018B, r25
    10e6:	a0 93 8c 01 	sts	0x018C, r26
    10ea:	b0 93 8d 01 	sts	0x018D, r27
    10ee:	08 95       	ret

000010f0 <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
    10f0:	80 91 90 01 	lds	r24, 0x0190
    10f4:	83 3a       	cpi	r24, 0xA3	; 163
    10f6:	d9 f0       	breq	.+54     	; 0x112e <update_game_state+0x3e>
    10f8:	28 f4       	brcc	.+10     	; 0x1104 <update_game_state+0x14>
    10fa:	81 3a       	cpi	r24, 0xA1	; 161
    10fc:	51 f0       	breq	.+20     	; 0x1112 <update_game_state+0x22>
    10fe:	82 3a       	cpi	r24, 0xA2	; 162
    1100:	59 f0       	breq	.+22     	; 0x1118 <update_game_state+0x28>
    1102:	08 95       	ret
    1104:	86 3a       	cpi	r24, 0xA6	; 166
    1106:	09 f1       	breq	.+66     	; 0x114a <update_game_state+0x5a>
    1108:	87 3a       	cpi	r24, 0xA7	; 167
    110a:	11 f1       	breq	.+68     	; 0x1150 <update_game_state+0x60>
    110c:	84 3a       	cpi	r24, 0xA4	; 164
    110e:	11 f5       	brne	.+68     	; 0x1154 <update_game_state+0x64>
    1110:	19 c0       	rjmp	.+50     	; 0x1144 <update_game_state+0x54>
		case 0xA0: // Comm Test
		comm_test();
		break;
		case 0xA1: // Play
		play();
    1112:	0e 94 3f 08 	call	0x107e	; 0x107e <play>
		break;
    1116:	08 95       	ret
		case 0xA2: // Goal R
		SR = buffer[1];
    1118:	e1 e9       	ldi	r30, 0x91	; 145
    111a:	f1 e0       	ldi	r31, 0x01	; 1
    111c:	81 81       	ldd	r24, Z+1	; 0x01
    111e:	80 93 8f 01 	sts	0x018F, r24
		SB = buffer[2];
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	80 93 8e 01 	sts	0x018E, r24
		pause();
    1128:	0e 94 45 08 	call	0x108a	; 0x108a <pause>
		break;
    112c:	08 95       	ret
		case 0xA3: // Goal B
		SR = buffer[1];
    112e:	e1 e9       	ldi	r30, 0x91	; 145
    1130:	f1 e0       	ldi	r31, 0x01	; 1
    1132:	81 81       	ldd	r24, Z+1	; 0x01
    1134:	80 93 8f 01 	sts	0x018F, r24
		SB = buffer[2];
    1138:	82 81       	ldd	r24, Z+2	; 0x02
    113a:	80 93 8e 01 	sts	0x018E, r24
		pause();
    113e:	0e 94 45 08 	call	0x108a	; 0x108a <pause>
		break;
    1142:	08 95       	ret
		case 0xA4: // Pause
		pause();
    1144:	0e 94 45 08 	call	0x108a	; 0x108a <pause>
		break;
    1148:	08 95       	ret
		case 0xA6: // Halftime
		halftime();
    114a:	0e 94 4d 08 	call	0x109a	; 0x109a <halftime>
		break;
    114e:	08 95       	ret
}

void game_over(void)
{
	// Stop play
	pause();
    1150:	0e 94 45 08 	call	0x108a	; 0x108a <pause>
    1154:	08 95       	ret

00001156 <wireless_recieve>:
}

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    1156:	6a e0       	ldi	r22, 0x0A	; 10
    1158:	81 e9       	ldi	r24, 0x91	; 145
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <m_rf_read>
	game_state = buffer[0];
    1160:	80 91 91 01 	lds	r24, 0x0191
    1164:	80 93 90 01 	sts	0x0190, r24
	update_game_state();
    1168:	0e 94 78 08 	call	0x10f0	; 0x10f0 <update_game_state>
    116c:	08 95       	ret

0000116e <select_goal>:
			break;
	}
}

void select_goal(void) 
{
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	2c 97       	sbiw	r28, 0x0c	; 12
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
	/* Assign Defending goal */
	update_position();
    1182:	0e 94 c6 09 	call	0x138c	; 0x138c <update_position>
	float position_buffer[3];
	get_position(position_buffer);
    1186:	ce 01       	movw	r24, r28
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	0e 94 5f 09 	call	0x12be	; 0x12be <get_position>
	if (position_buffer[0]>0) {
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	a9 01       	movw	r20, r18
    1194:	69 81       	ldd	r22, Y+1	; 0x01
    1196:	7a 81       	ldd	r23, Y+2	; 0x02
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    11a0:	18 16       	cp	r1, r24
    11a2:	9c f4       	brge	.+38     	; 0x11ca <select_goal+0x5c>
		x_goal = -1*GOAL_X_DIST;
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	af ea       	ldi	r26, 0xAF	; 175
    11aa:	b3 ec       	ldi	r27, 0xC3	; 195
    11ac:	80 93 8a 01 	sts	0x018A, r24
    11b0:	90 93 8b 01 	sts	0x018B, r25
    11b4:	a0 93 8c 01 	sts	0x018C, r26
    11b8:	b0 93 8d 01 	sts	0x018D, r27
		goal = RED;
    11bc:	82 e0       	ldi	r24, 0x02	; 2
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	90 93 85 01 	sts	0x0185, r25
    11c4:	80 93 84 01 	sts	0x0184, r24
    11c8:	12 c0       	rjmp	.+36     	; 0x11ee <select_goal+0x80>
		} else {
		x_goal = GOAL_X_DIST;
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	af ea       	ldi	r26, 0xAF	; 175
    11d0:	b3 e4       	ldi	r27, 0x43	; 67
    11d2:	80 93 8a 01 	sts	0x018A, r24
    11d6:	90 93 8b 01 	sts	0x018B, r25
    11da:	a0 93 8c 01 	sts	0x018C, r26
    11de:	b0 93 8d 01 	sts	0x018D, r27
		goal = BLUE;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	90 93 85 01 	sts	0x0185, r25
    11ea:	80 93 84 01 	sts	0x0184, r24
	}
}
    11ee:	2c 96       	adiw	r28, 0x0c	; 12
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
    1200:	6e 9a       	sbi	0x0d, 6	; 13
    1202:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey();
    1204:	0e 94 01 01 	call	0x202	; 0x202 <initialize_robockey>
	pause();
    1208:	0e 94 45 08 	call	0x108a	; 0x108a <pause>

	/* Confirm successful initialization(s) */
	m_green(ON);
    120c:	6a 9a       	sbi	0x0d, 2	; 13
    120e:	72 98       	cbi	0x0e, 2	; 14
	
	/* Set opposite side as target goal */
	select_goal(); 
    1210:	0e 94 b7 08 	call	0x116e	; 0x116e <select_goal>

	/* Run */
	while (1){
		update_position();
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    1214:	ca e7       	ldi	r28, 0x7A	; 122
    1216:	d0 e0       	ldi	r29, 0x00	; 0
	/* Set opposite side as target goal */
	select_goal(); 

	/* Run */
	while (1){
		update_position();
    1218:	0e 94 c6 09 	call	0x138c	; 0x138c <update_position>
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    121c:	88 81       	ld	r24, Y
    121e:	84 fd       	sbrc	r24, 4
    1220:	0e 94 07 08 	call	0x100e	; 0x100e <adc_update>
		bot_behavior_update();
    1224:	0e 94 8d 07 	call	0xf1a	; 0xf1a <bot_behavior_update>
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
    1228:	c1 9b       	sbis	0x18, 1	; 24
    122a:	f6 cf       	rjmp	.-20     	; 0x1218 <main+0x18>
    122c:	0e 94 21 07 	call	0xe42	; 0xe42 <motor_update>
    1230:	f3 cf       	rjmp	.-26     	; 0x1218 <main+0x18>

00001232 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    1232:	1f 92       	push	r1
    1234:	0f 92       	push	r0
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	0f 92       	push	r0
    123a:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    123c:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
    123e:	2a 9a       	sbi	0x05, 2	; 5
}
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	0f 90       	pop	r0
    1246:	1f 90       	pop	r1
    1248:	18 95       	reti

0000124a <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    124a:	1f 92       	push	r1
    124c:	0f 92       	push	r0
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	0f 92       	push	r0
    1252:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    1254:	28 98       	cbi	0x05, 0	; 5
}
    1256:	0f 90       	pop	r0
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	0f 90       	pop	r0
    125c:	1f 90       	pop	r1
    125e:	18 95       	reti

00001260 <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    1260:	1f 92       	push	r1
    1262:	0f 92       	push	r0
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	0f 92       	push	r0
    1268:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    126a:	2a 98       	cbi	0x05, 2	; 5
}
    126c:	0f 90       	pop	r0
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	0f 90       	pop	r0
    1272:	1f 90       	pop	r1
    1274:	18 95       	reti

00001276 <__vector_3>:

/* Recieve Wireless Comm */
ISR(INT2_vect){
    1276:	1f 92       	push	r1
    1278:	0f 92       	push	r0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	0f 92       	push	r0
    127e:	11 24       	eor	r1, r1
    1280:	2f 93       	push	r18
    1282:	3f 93       	push	r19
    1284:	4f 93       	push	r20
    1286:	5f 93       	push	r21
    1288:	6f 93       	push	r22
    128a:	7f 93       	push	r23
    128c:	8f 93       	push	r24
    128e:	9f 93       	push	r25
    1290:	af 93       	push	r26
    1292:	bf 93       	push	r27
    1294:	ef 93       	push	r30
    1296:	ff 93       	push	r31
	wireless_recieve();
    1298:	0e 94 ab 08 	call	0x1156	; 0x1156 <wireless_recieve>
}
    129c:	ff 91       	pop	r31
    129e:	ef 91       	pop	r30
    12a0:	bf 91       	pop	r27
    12a2:	af 91       	pop	r26
    12a4:	9f 91       	pop	r25
    12a6:	8f 91       	pop	r24
    12a8:	7f 91       	pop	r23
    12aa:	6f 91       	pop	r22
    12ac:	5f 91       	pop	r21
    12ae:	4f 91       	pop	r20
    12b0:	3f 91       	pop	r19
    12b2:	2f 91       	pop	r18
    12b4:	0f 90       	pop	r0
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	0f 90       	pop	r0
    12ba:	1f 90       	pop	r1
    12bc:	18 95       	reti

000012be <get_position>:
/************************************************************
Public Functions
************************************************************/

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    12be:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    12c0:	80 91 bb 01 	lds	r24, 0x01BB
    12c4:	90 91 bc 01 	lds	r25, 0x01BC
    12c8:	a0 91 bd 01 	lds	r26, 0x01BD
    12cc:	b0 91 be 01 	lds	r27, 0x01BE
    12d0:	80 83       	st	Z, r24
    12d2:	91 83       	std	Z+1, r25	; 0x01
    12d4:	a2 83       	std	Z+2, r26	; 0x02
    12d6:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    12d8:	80 91 b7 01 	lds	r24, 0x01B7
    12dc:	90 91 b8 01 	lds	r25, 0x01B8
    12e0:	a0 91 b9 01 	lds	r26, 0x01B9
    12e4:	b0 91 ba 01 	lds	r27, 0x01BA
    12e8:	84 83       	std	Z+4, r24	; 0x04
    12ea:	95 83       	std	Z+5, r25	; 0x05
    12ec:	a6 83       	std	Z+6, r26	; 0x06
    12ee:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    12f0:	80 91 b3 01 	lds	r24, 0x01B3
    12f4:	90 91 b4 01 	lds	r25, 0x01B4
    12f8:	a0 91 b5 01 	lds	r26, 0x01B5
    12fc:	b0 91 b6 01 	lds	r27, 0x01B6
    1300:	80 87       	std	Z+8, r24	; 0x08
    1302:	91 87       	std	Z+9, r25	; 0x09
    1304:	a2 87       	std	Z+10, r26	; 0x0a
    1306:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	08 95       	ret

0000130c <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    130c:	8f 92       	push	r8
    130e:	9f 92       	push	r9
    1310:	af 92       	push	r10
    1312:	bf 92       	push	r11
    1314:	cf 92       	push	r12
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	6b 01       	movw	r12, r22
    131e:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    1320:	4b 01       	movw	r8, r22
    1322:	5c 01       	movw	r10, r24
    1324:	e8 94       	clt
    1326:	b7 f8       	bld	r11, 7
    1328:	2b ed       	ldi	r18, 0xDB	; 219
    132a:	3f e0       	ldi	r19, 0x0F	; 15
    132c:	49 e4       	ldi	r20, 0x49	; 73
    132e:	50 e4       	ldi	r21, 0x40	; 64
    1330:	c5 01       	movw	r24, r10
    1332:	b4 01       	movw	r22, r8
    1334:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    1338:	18 16       	cp	r1, r24
    133a:	bc f4       	brge	.+46     	; 0x136a <theta_error_correction+0x5e>
    133c:	2b ed       	ldi	r18, 0xDB	; 219
    133e:	3f e0       	ldi	r19, 0x0F	; 15
    1340:	49 ec       	ldi	r20, 0xC9	; 201
    1342:	50 e4       	ldi	r21, 0x40	; 64
    1344:	c7 01       	movw	r24, r14
    1346:	b6 01       	movw	r22, r12
    1348:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    134c:	a5 01       	movw	r20, r10
    134e:	94 01       	movw	r18, r8
    1350:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__divsf3>
    1354:	9b 01       	movw	r18, r22
    1356:	ac 01       	movw	r20, r24
    1358:	c7 01       	movw	r24, r14
    135a:	b6 01       	movw	r22, r12
    135c:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
    1360:	56 2f       	mov	r21, r22
    1362:	47 2f       	mov	r20, r23
    1364:	38 2f       	mov	r19, r24
    1366:	29 2f       	mov	r18, r25
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <theta_error_correction+0x66>
	else{return error;}
    136a:	5c 2d       	mov	r21, r12
    136c:	4d 2d       	mov	r20, r13
    136e:	3e 2d       	mov	r19, r14
    1370:	2f 2d       	mov	r18, r15
}
    1372:	65 2f       	mov	r22, r21
    1374:	74 2f       	mov	r23, r20
    1376:	83 2f       	mov	r24, r19
    1378:	92 2f       	mov	r25, r18
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	cf 90       	pop	r12
    1382:	bf 90       	pop	r11
    1384:	af 90       	pop	r10
    1386:	9f 90       	pop	r9
    1388:	8f 90       	pop	r8
    138a:	08 95       	ret

0000138c <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    138c:	2f 92       	push	r2
    138e:	3f 92       	push	r3
    1390:	4f 92       	push	r4
    1392:	5f 92       	push	r5
    1394:	6f 92       	push	r6
    1396:	7f 92       	push	r7
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	a8 97       	sbiw	r28, 0x28	; 40
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    13c0:	ce 01       	movw	r24, r28
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	0e 94 13 11 	call	0x2226	; 0x2226 <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    13c8:	6b 81       	ldd	r22, Y+3	; 0x03
    13ca:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    13cc:	0f 81       	ldd	r16, Y+7	; 0x07
    13ce:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    13d0:	49 85       	ldd	r20, Y+9	; 0x09
    13d2:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    13d4:	ad 85       	ldd	r26, Y+13	; 0x0d
    13d6:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    13d8:	2f 85       	ldd	r18, Y+15	; 0x0f
    13da:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    13dc:	eb 89       	ldd	r30, Y+19	; 0x13
    13de:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    13e0:	8d 89       	ldd	r24, Y+21	; 0x15
    13e2:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    13e4:	e9 80       	ldd	r14, Y+1	; 0x01
    13e6:	fa 80       	ldd	r15, Y+2	; 0x02
    13e8:	fa 8e       	std	Y+26, r15	; 0x1a
    13ea:	e9 8e       	std	Y+25, r14	; 0x19
    13ec:	1c 8f       	std	Y+28, r17	; 0x1c
    13ee:	0b 8f       	std	Y+27, r16	; 0x1b
    13f0:	be 8f       	std	Y+30, r27	; 0x1e
    13f2:	ad 8f       	std	Y+29, r26	; 0x1d
    13f4:	f8 a3       	std	Y+32, r31	; 0x20
    13f6:	ef 8f       	std	Y+31, r30	; 0x1f
    13f8:	7a a3       	std	Y+34, r23	; 0x22
    13fa:	69 a3       	std	Y+33, r22	; 0x21
    13fc:	5c a3       	std	Y+36, r21	; 0x24
    13fe:	4b a3       	std	Y+35, r20	; 0x23
    1400:	3e a3       	std	Y+38, r19	; 0x26
    1402:	2d a3       	std	Y+37, r18	; 0x25
    1404:	98 a7       	std	Y+40, r25	; 0x28
    1406:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    1408:	68 e1       	ldi	r22, 0x18	; 24
    140a:	71 e0       	ldi	r23, 0x01	; 1
    140c:	ce 01       	movw	r24, r28
    140e:	49 96       	adiw	r24, 0x19	; 25
    1410:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <localization_calc>
    1414:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    1416:	fc 01       	movw	r30, r24
    1418:	80 85       	ldd	r24, Z+8	; 0x08
    141a:	91 85       	ldd	r25, Z+9	; 0x09
    141c:	a2 85       	ldd	r26, Z+10	; 0x0a
    141e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1420:	0f 2e       	mov	r0, r31
    1422:	f8 e1       	ldi	r31, 0x18	; 24
    1424:	2f 2e       	mov	r2, r31
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	3f 2e       	mov	r3, r31
    142a:	f0 2d       	mov	r31, r0
    142c:	f1 01       	movw	r30, r2
    142e:	80 87       	std	Z+8, r24	; 0x08
    1430:	91 87       	std	Z+9, r25	; 0x09
    1432:	a2 87       	std	Z+10, r26	; 0x0a
    1434:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    1436:	f8 01       	movw	r30, r16
    1438:	60 85       	ldd	r22, Z+8	; 0x08
    143a:	71 85       	ldd	r23, Z+9	; 0x09
    143c:	82 85       	ldd	r24, Z+10	; 0x0a
    143e:	93 85       	ldd	r25, Z+11	; 0x0b
    1440:	0e 94 86 09 	call	0x130c	; 0x130c <theta_error_correction>
    1444:	2b 01       	movw	r4, r22
    1446:	3c 01       	movw	r6, r24
    1448:	f8 01       	movw	r30, r16
    144a:	60 87       	std	Z+8, r22	; 0x08
    144c:	71 87       	std	Z+9, r23	; 0x09
    144e:	82 87       	std	Z+10, r24	; 0x0a
    1450:	93 87       	std	Z+11, r25	; 0x0b
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1452:	24 ea       	ldi	r18, 0xA4	; 164
    1454:	30 e7       	ldi	r19, 0x70	; 112
    1456:	4d e7       	ldi	r20, 0x7D	; 125
    1458:	5f e3       	ldi	r21, 0x3F	; 63
    145a:	60 81       	ld	r22, Z
    145c:	71 81       	ldd	r23, Z+1	; 0x01
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	93 81       	ldd	r25, Z+3	; 0x03
    1462:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    1466:	4b 01       	movw	r8, r22
    1468:	5c 01       	movw	r10, r24
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	37 ed       	ldi	r19, 0xD7	; 215
    146e:	43 e2       	ldi	r20, 0x23	; 35
    1470:	5c e3       	ldi	r21, 0x3C	; 60
    1472:	60 91 bb 01 	lds	r22, 0x01BB
    1476:	70 91 bc 01 	lds	r23, 0x01BC
    147a:	80 91 bd 01 	lds	r24, 0x01BD
    147e:	90 91 be 01 	lds	r25, 0x01BE
    1482:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    1486:	9b 01       	movw	r18, r22
    1488:	ac 01       	movw	r20, r24
    148a:	c5 01       	movw	r24, r10
    148c:	b4 01       	movw	r22, r8
    148e:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
    1492:	4b 01       	movw	r8, r22
    1494:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    1496:	60 93 bb 01 	sts	0x01BB, r22
    149a:	70 93 bc 01 	sts	0x01BC, r23
    149e:	80 93 bd 01 	sts	0x01BD, r24
    14a2:	90 93 be 01 	sts	0x01BE, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    14a6:	24 ea       	ldi	r18, 0xA4	; 164
    14a8:	30 e7       	ldi	r19, 0x70	; 112
    14aa:	4d e7       	ldi	r20, 0x7D	; 125
    14ac:	5f e3       	ldi	r21, 0x3F	; 63
    14ae:	f8 01       	movw	r30, r16
    14b0:	64 81       	ldd	r22, Z+4	; 0x04
    14b2:	75 81       	ldd	r23, Z+5	; 0x05
    14b4:	86 81       	ldd	r24, Z+6	; 0x06
    14b6:	97 81       	ldd	r25, Z+7	; 0x07
    14b8:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    14bc:	6b 01       	movw	r12, r22
    14be:	7c 01       	movw	r14, r24
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	37 ed       	ldi	r19, 0xD7	; 215
    14c4:	43 e2       	ldi	r20, 0x23	; 35
    14c6:	5c e3       	ldi	r21, 0x3C	; 60
    14c8:	60 91 b7 01 	lds	r22, 0x01B7
    14cc:	70 91 b8 01 	lds	r23, 0x01B8
    14d0:	80 91 b9 01 	lds	r24, 0x01B9
    14d4:	90 91 ba 01 	lds	r25, 0x01BA
    14d8:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    14dc:	9b 01       	movw	r18, r22
    14de:	ac 01       	movw	r20, r24
    14e0:	c7 01       	movw	r24, r14
    14e2:	b6 01       	movw	r22, r12
    14e4:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
    14e8:	6b 01       	movw	r12, r22
    14ea:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    14ec:	60 93 b7 01 	sts	0x01B7, r22
    14f0:	70 93 b8 01 	sts	0x01B8, r23
    14f4:	80 93 b9 01 	sts	0x01B9, r24
    14f8:	90 93 ba 01 	sts	0x01BA, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    14fc:	24 ea       	ldi	r18, 0xA4	; 164
    14fe:	30 e7       	ldi	r19, 0x70	; 112
    1500:	4d e7       	ldi	r20, 0x7D	; 125
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	c3 01       	movw	r24, r6
    1506:	b2 01       	movw	r22, r4
    1508:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    150c:	2b 01       	movw	r4, r22
    150e:	3c 01       	movw	r6, r24
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	37 ed       	ldi	r19, 0xD7	; 215
    1514:	43 e2       	ldi	r20, 0x23	; 35
    1516:	5c e3       	ldi	r21, 0x3C	; 60
    1518:	60 91 b3 01 	lds	r22, 0x01B3
    151c:	70 91 b4 01 	lds	r23, 0x01B4
    1520:	80 91 b5 01 	lds	r24, 0x01B5
    1524:	90 91 b6 01 	lds	r25, 0x01B6
    1528:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    152c:	9b 01       	movw	r18, r22
    152e:	ac 01       	movw	r20, r24
    1530:	c3 01       	movw	r24, r6
    1532:	b2 01       	movw	r22, r4
    1534:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    1538:	60 93 b3 01 	sts	0x01B3, r22
    153c:	70 93 b4 01 	sts	0x01B4, r23
    1540:	80 93 b5 01 	sts	0x01B5, r24
    1544:	90 93 b6 01 	sts	0x01B6, r25
	
	robotCenterPrev[0] = x;
    1548:	f1 01       	movw	r30, r2
    154a:	80 82       	st	Z, r8
    154c:	91 82       	std	Z+1, r9	; 0x01
    154e:	a2 82       	std	Z+2, r10	; 0x02
    1550:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    1552:	c4 82       	std	Z+4, r12	; 0x04
    1554:	d5 82       	std	Z+5, r13	; 0x05
    1556:	e6 82       	std	Z+6, r14	; 0x06
    1558:	f7 82       	std	Z+7, r15	; 0x07
}
    155a:	a8 96       	adiw	r28, 0x28	; 40
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	ff 90       	pop	r15
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	bf 90       	pop	r11
    1578:	af 90       	pop	r10
    157a:	9f 90       	pop	r9
    157c:	8f 90       	pop	r8
    157e:	7f 90       	pop	r7
    1580:	6f 90       	pop	r6
    1582:	5f 90       	pop	r5
    1584:	4f 90       	pop	r4
    1586:	3f 90       	pop	r3
    1588:	2f 90       	pop	r2
    158a:	08 95       	ret

0000158c <run_motor_control_loop>:



/* PID Control */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd)
{
    158c:	4f 92       	push	r4
    158e:	5f 92       	push	r5
    1590:	6f 92       	push	r6
    1592:	7f 92       	push	r7
    1594:	8f 92       	push	r8
    1596:	9f 92       	push	r9
    1598:	af 92       	push	r10
    159a:	bf 92       	push	r11
    159c:	cf 92       	push	r12
    159e:	df 92       	push	r13
    15a0:	ef 92       	push	r14
    15a2:	ff 92       	push	r15
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	64 97       	sbiw	r28, 0x14	; 20
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	29 01       	movw	r4, r18
    15be:	3a 01       	movw	r6, r20
    15c0:	ed 86       	std	Y+13, r14	; 0x0d
    15c2:	fe 86       	std	Y+14, r15	; 0x0e
    15c4:	0f 87       	std	Y+15, r16	; 0x0f
    15c6:	18 8b       	std	Y+16, r17	; 0x10
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    15c8:	20 91 bb 01 	lds	r18, 0x01BB
    15cc:	30 91 bc 01 	lds	r19, 0x01BC
    15d0:	40 91 bd 01 	lds	r20, 0x01BD
    15d4:	50 91 be 01 	lds	r21, 0x01BE
    15d8:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
    15dc:	6d 83       	std	Y+5, r22	; 0x05
    15de:	7e 83       	std	Y+6, r23	; 0x06
    15e0:	8f 83       	std	Y+7, r24	; 0x07
    15e2:	98 87       	std	Y+8, r25	; 0x08
    15e4:	20 91 b7 01 	lds	r18, 0x01B7
    15e8:	30 91 b8 01 	lds	r19, 0x01B8
    15ec:	40 91 b9 01 	lds	r20, 0x01B9
    15f0:	50 91 ba 01 	lds	r21, 0x01BA
    15f4:	c3 01       	movw	r24, r6
    15f6:	b2 01       	movw	r22, r4
    15f8:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
    15fc:	69 87       	std	Y+9, r22	; 0x09
    15fe:	7a 87       	std	Y+10, r23	; 0x0a
    1600:	8b 87       	std	Y+11, r24	; 0x0b
    1602:	9c 87       	std	Y+12, r25	; 0x0c
    1604:	2d 81       	ldd	r18, Y+5	; 0x05
    1606:	3e 81       	ldd	r19, Y+6	; 0x06
    1608:	4f 81       	ldd	r20, Y+7	; 0x07
    160a:	58 85       	ldd	r21, Y+8	; 0x08
    160c:	0e 94 9d 14 	call	0x293a	; 0x293a <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    1610:	20 91 b3 01 	lds	r18, 0x01B3
    1614:	30 91 b4 01 	lds	r19, 0x01B4
    1618:	40 91 b5 01 	lds	r20, 0x01B5
    161c:	50 91 b6 01 	lds	r21, 0x01B6
    1620:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
	theta_error = theta_error_correction(theta_error);
    1624:	0e 94 86 09 	call	0x130c	; 0x130c <theta_error_correction>
    1628:	69 83       	std	Y+1, r22	; 0x01
    162a:	7a 83       	std	Y+2, r23	; 0x02
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    1630:	2b 01       	movw	r4, r22
    1632:	3c 01       	movw	r6, r24
    1634:	e8 94       	clt
    1636:	77 f8       	bld	r7, 7
    1638:	a6 01       	movw	r20, r12
    163a:	95 01       	movw	r18, r10
    163c:	c3 01       	movw	r24, r6
    163e:	b2 01       	movw	r22, r4
    1640:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    1644:	18 16       	cp	r1, r24
    1646:	84 f4       	brge	.+32     	; 0x1668 <run_motor_control_loop+0xdc>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    1648:	29 81       	ldd	r18, Y+1	; 0x01
    164a:	3a 81       	ldd	r19, Y+2	; 0x02
    164c:	4b 81       	ldd	r20, Y+3	; 0x03
    164e:	5c 81       	ldd	r21, Y+4	; 0x04
    1650:	c3 01       	movw	r24, r6
    1652:	b2 01       	movw	r22, r4
    1654:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__divsf3>
    1658:	a6 01       	movw	r20, r12
    165a:	95 01       	movw	r18, r10
    165c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    1660:	69 83       	std	Y+1, r22	; 0x01
    1662:	7a 83       	std	Y+2, r23	; 0x02
    1664:	8b 83       	std	Y+3, r24	; 0x03
    1666:	9c 83       	std	Y+4, r25	; 0x04
	}

	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    1668:	29 81       	ldd	r18, Y+1	; 0x01
    166a:	3a 81       	ldd	r19, Y+2	; 0x02
    166c:	4b 81       	ldd	r20, Y+3	; 0x03
    166e:	5c 81       	ldd	r21, Y+4	; 0x04
    1670:	6f a1       	ldd	r22, Y+39	; 0x27
    1672:	78 a5       	ldd	r23, Y+40	; 0x28
    1674:	89 a5       	ldd	r24, Y+41	; 0x29
    1676:	9a a5       	ldd	r25, Y+42	; 0x2a
    1678:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    167c:	6b 01       	movw	r12, r22
    167e:	7c 01       	movw	r14, r24
	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
		theta_error = fabs(theta_error)/theta_error*max_theta;
	}

	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
    1680:	20 91 af 01 	lds	r18, 0x01AF
    1684:	30 91 b0 01 	lds	r19, 0x01B0
    1688:	40 91 b1 01 	lds	r20, 0x01B1
    168c:	50 91 b2 01 	lds	r21, 0x01B2
    1690:	69 81       	ldd	r22, Y+1	; 0x01
    1692:	7a 81       	ldd	r23, Y+2	; 0x02
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
    169c:	2f e6       	ldi	r18, 0x6F	; 111
    169e:	32 e1       	ldi	r19, 0x12	; 18
    16a0:	43 e8       	ldi	r20, 0x83	; 131
    16a2:	5a e3       	ldi	r21, 0x3A	; 58
    16a4:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__divsf3>
    16a8:	9b 01       	movw	r18, r22
    16aa:	ac 01       	movw	r20, r24
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    16ac:	6b a5       	ldd	r22, Y+43	; 0x2b
    16ae:	7c a5       	ldd	r23, Y+44	; 0x2c
    16b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    16b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    16b4:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    16b8:	9b 01       	movw	r18, r22
    16ba:	ac 01       	movw	r20, r24
    16bc:	c7 01       	movw	r24, r14
    16be:	b6 01       	movw	r22, r12
    16c0:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
	previous_theta_error = theta_error;
    16c4:	29 81       	ldd	r18, Y+1	; 0x01
    16c6:	3a 81       	ldd	r19, Y+2	; 0x02
    16c8:	4b 81       	ldd	r20, Y+3	; 0x03
    16ca:	5c 81       	ldd	r21, Y+4	; 0x04
    16cc:	20 93 af 01 	sts	0x01AF, r18
    16d0:	30 93 b0 01 	sts	0x01B0, r19
    16d4:	40 93 b1 01 	sts	0x01B1, r20
    16d8:	50 93 b2 01 	sts	0x01B2, r21
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    16dc:	2b ed       	ldi	r18, 0xDB	; 219
    16de:	3f e0       	ldi	r19, 0x0F	; 15
    16e0:	49 e4       	ldi	r20, 0x49	; 73
    16e2:	50 e4       	ldi	r21, 0x40	; 64
    16e4:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__divsf3>
    16e8:	2b 01       	movw	r4, r22
    16ea:	3c 01       	movw	r6, r24
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	b0 58       	subi	r27, 0x80	; 128
    16f2:	89 8b       	std	Y+17, r24	; 0x11
    16f4:	9a 8b       	std	Y+18, r25	; 0x12
    16f6:	ab 8b       	std	Y+19, r26	; 0x13
    16f8:	bc 8b       	std	Y+20, r27	; 0x14
	right_duty_cycle = angular_output;
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    16fa:	69 81       	ldd	r22, Y+1	; 0x01
    16fc:	7a 81       	ldd	r23, Y+2	; 0x02
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	0e 94 01 15 	call	0x2a02	; 0x2a02 <cos>
    1706:	6b 01       	movw	r12, r22
    1708:	7c 01       	movw	r14, r24
    170a:	29 85       	ldd	r18, Y+9	; 0x09
    170c:	3a 85       	ldd	r19, Y+10	; 0x0a
    170e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1710:	5c 85       	ldd	r21, Y+12	; 0x0c
    1712:	ca 01       	movw	r24, r20
    1714:	b9 01       	movw	r22, r18
    1716:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    171a:	4b 01       	movw	r8, r22
    171c:	5c 01       	movw	r10, r24
    171e:	2d 81       	ldd	r18, Y+5	; 0x05
    1720:	3e 81       	ldd	r19, Y+6	; 0x06
    1722:	4f 81       	ldd	r20, Y+7	; 0x07
    1724:	58 85       	ldd	r21, Y+8	; 0x08
    1726:	ca 01       	movw	r24, r20
    1728:	b9 01       	movw	r22, r18
    172a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    172e:	9b 01       	movw	r18, r22
    1730:	ac 01       	movw	r20, r24
    1732:	c5 01       	movw	r24, r10
    1734:	b4 01       	movw	r22, r8
    1736:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
    173a:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <sqrt>
    173e:	9b 01       	movw	r18, r22
    1740:	ac 01       	movw	r20, r24
    1742:	c7 01       	movw	r24, r14
    1744:	b6 01       	movw	r22, r12
    1746:	9f 77       	andi	r25, 0x7F	; 127
    1748:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    174c:	6b 01       	movw	r12, r22
    174e:	7c 01       	movw	r14, r24
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    1750:	9b 01       	movw	r18, r22
    1752:	ac 01       	movw	r20, r24
    1754:	6f a5       	ldd	r22, Y+47	; 0x2f
    1756:	78 a9       	ldd	r23, Y+48	; 0x30
    1758:	89 a9       	ldd	r24, Y+49	; 0x31
    175a:	9a a9       	ldd	r25, Y+50	; 0x32
    175c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    1760:	4b 01       	movw	r8, r22
    1762:	5c 01       	movw	r10, r24
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
    1764:	20 91 ab 01 	lds	r18, 0x01AB
    1768:	30 91 ac 01 	lds	r19, 0x01AC
    176c:	40 91 ad 01 	lds	r20, 0x01AD
    1770:	50 91 ae 01 	lds	r21, 0x01AE
    1774:	c7 01       	movw	r24, r14
    1776:	b6 01       	movw	r22, r12
    1778:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
    177c:	2f e6       	ldi	r18, 0x6F	; 111
    177e:	32 e1       	ldi	r19, 0x12	; 18
    1780:	43 e8       	ldi	r20, 0x83	; 131
    1782:	5a e3       	ldi	r21, 0x3A	; 58
    1784:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__divsf3>
    1788:	9b 01       	movw	r18, r22
    178a:	ac 01       	movw	r20, r24
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    178c:	6b a9       	ldd	r22, Y+51	; 0x33
    178e:	7c a9       	ldd	r23, Y+52	; 0x34
    1790:	8d a9       	ldd	r24, Y+53	; 0x35
    1792:	9e a9       	ldd	r25, Y+54	; 0x36
    1794:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    1798:	9b 01       	movw	r18, r22
    179a:	ac 01       	movw	r20, r24
    179c:	c5 01       	movw	r24, r10
    179e:	b4 01       	movw	r22, r8
    17a0:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
    17a4:	4b 01       	movw	r8, r22
    17a6:	5c 01       	movw	r10, r24
	previous_linear_error = linear_error;
    17a8:	c0 92 ab 01 	sts	0x01AB, r12
    17ac:	d0 92 ac 01 	sts	0x01AC, r13
    17b0:	e0 92 ad 01 	sts	0x01AD, r14
    17b4:	f0 92 ae 01 	sts	0x01AE, r15
	if(linear_output>40.0){linear_output=40.0;}
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e2       	ldi	r20, 0x20	; 32
    17be:	52 e4       	ldi	r21, 0x42	; 66
    17c0:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    17c4:	18 16       	cp	r1, r24
    17c6:	44 f4       	brge	.+16     	; 0x17d8 <run_motor_control_loop+0x24c>
    17c8:	0f 2e       	mov	r0, r31
    17ca:	81 2c       	mov	r8, r1
    17cc:	91 2c       	mov	r9, r1
    17ce:	f0 e2       	ldi	r31, 0x20	; 32
    17d0:	af 2e       	mov	r10, r31
    17d2:	f2 e4       	ldi	r31, 0x42	; 66
    17d4:	bf 2e       	mov	r11, r31
    17d6:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e2       	ldi	r20, 0x20	; 32
    17de:	52 e4       	ldi	r21, 0x42	; 66
    17e0:	c5 01       	movw	r24, r10
    17e2:	b4 01       	movw	r22, r8
    17e4:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__divsf3>
    17e8:	6b 01       	movw	r12, r22
    17ea:	7c 01       	movw	r14, r24
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    17ec:	69 81       	ldd	r22, Y+1	; 0x01
    17ee:	7a 81       	ldd	r23, Y+2	; 0x02
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	9f 77       	andi	r25, 0x7F	; 127
    17f6:	2b ed       	ldi	r18, 0xDB	; 219
    17f8:	3f e0       	ldi	r19, 0x0F	; 15
    17fa:	49 ec       	ldi	r20, 0xC9	; 201
    17fc:	5f e3       	ldi	r21, 0x3F	; 63
    17fe:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__cmpsf2>
    1802:	88 23       	and	r24, r24
    1804:	ec f4       	brge	.+58     	; 0x1840 <run_motor_control_loop+0x2b4>
		left_duty_cycle += linear_output;
    1806:	a3 01       	movw	r20, r6
    1808:	92 01       	movw	r18, r4
    180a:	c7 01       	movw	r24, r14
    180c:	b6 01       	movw	r22, r12
    180e:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
    1812:	60 93 14 01 	sts	0x0114, r22
    1816:	70 93 15 01 	sts	0x0115, r23
    181a:	80 93 16 01 	sts	0x0116, r24
    181e:	90 93 17 01 	sts	0x0117, r25
		right_duty_cycle += linear_output;
    1822:	a7 01       	movw	r20, r14
    1824:	96 01       	movw	r18, r12
    1826:	c3 01       	movw	r24, r6
    1828:	b2 01       	movw	r22, r4
    182a:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
    182e:	60 93 10 01 	sts	0x0110, r22
    1832:	70 93 11 01 	sts	0x0111, r23
    1836:	80 93 12 01 	sts	0x0112, r24
    183a:	90 93 13 01 	sts	0x0113, r25
    183e:	1e c0       	rjmp	.+60     	; 0x187c <run_motor_control_loop+0x2f0>
		} else{
		left_duty_cycle -= linear_output;
    1840:	a7 01       	movw	r20, r14
    1842:	96 01       	movw	r18, r12
    1844:	69 89       	ldd	r22, Y+17	; 0x11
    1846:	7a 89       	ldd	r23, Y+18	; 0x12
    1848:	8b 89       	ldd	r24, Y+19	; 0x13
    184a:	9c 89       	ldd	r25, Y+20	; 0x14
    184c:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
    1850:	60 93 14 01 	sts	0x0114, r22
    1854:	70 93 15 01 	sts	0x0115, r23
    1858:	80 93 16 01 	sts	0x0116, r24
    185c:	90 93 17 01 	sts	0x0117, r25
		right_duty_cycle -= linear_output;
    1860:	a7 01       	movw	r20, r14
    1862:	96 01       	movw	r18, r12
    1864:	c3 01       	movw	r24, r6
    1866:	b2 01       	movw	r22, r4
    1868:	0e 94 1d 14 	call	0x283a	; 0x283a <__subsf3>
    186c:	60 93 10 01 	sts	0x0110, r22
    1870:	70 93 11 01 	sts	0x0111, r23
    1874:	80 93 12 01 	sts	0x0112, r24
    1878:	90 93 13 01 	sts	0x0113, r25
	}
	
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	a9 01       	movw	r20, r18
    1882:	60 91 14 01 	lds	r22, 0x0114
    1886:	70 91 15 01 	lds	r23, 0x0115
    188a:	80 91 16 01 	lds	r24, 0x0116
    188e:	90 91 17 01 	lds	r25, 0x0117
    1892:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__cmpsf2>
    1896:	88 23       	and	r24, r24
    1898:	14 f4       	brge	.+4      	; 0x189e <run_motor_control_loop+0x312>
    189a:	29 98       	cbi	0x05, 1	; 5
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <run_motor_control_loop+0x314>
	else{set(PORTB,1);}
    189e:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	a9 01       	movw	r20, r18
    18a6:	60 91 10 01 	lds	r22, 0x0110
    18aa:	70 91 11 01 	lds	r23, 0x0111
    18ae:	80 91 12 01 	lds	r24, 0x0112
    18b2:	90 91 13 01 	lds	r25, 0x0113
    18b6:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__cmpsf2>
    18ba:	88 23       	and	r24, r24
    18bc:	14 f4       	brge	.+4      	; 0x18c2 <run_motor_control_loop+0x336>
    18be:	2b 98       	cbi	0x05, 3	; 5
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <run_motor_control_loop+0x338>
	else{set(PORTB,3);}
    18c2:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    18c4:	80 90 14 01 	lds	r8, 0x0114
    18c8:	90 90 15 01 	lds	r9, 0x0115
    18cc:	a0 90 16 01 	lds	r10, 0x0116
    18d0:	b0 90 17 01 	lds	r11, 0x0117
    18d4:	e8 94       	clt
    18d6:	b7 f8       	bld	r11, 7
    18d8:	80 92 14 01 	sts	0x0114, r8
    18dc:	90 92 15 01 	sts	0x0115, r9
    18e0:	a0 92 16 01 	sts	0x0116, r10
    18e4:	b0 92 17 01 	sts	0x0117, r11
	right_duty_cycle = fabs(right_duty_cycle);
    18e8:	c0 90 10 01 	lds	r12, 0x0110
    18ec:	d0 90 11 01 	lds	r13, 0x0111
    18f0:	e0 90 12 01 	lds	r14, 0x0112
    18f4:	f0 90 13 01 	lds	r15, 0x0113
    18f8:	e8 94       	clt
    18fa:	f7 f8       	bld	r15, 7
    18fc:	c0 92 10 01 	sts	0x0110, r12
    1900:	d0 92 11 01 	sts	0x0111, r13
    1904:	e0 92 12 01 	sts	0x0112, r14
    1908:	f0 92 13 01 	sts	0x0113, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    190c:	a7 01       	movw	r20, r14
    190e:	96 01       	movw	r18, r12
    1910:	c5 01       	movw	r24, r10
    1912:	b4 01       	movw	r22, r8
    1914:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    1918:	18 16       	cp	r1, r24
    191a:	2c f0       	brlt	.+10     	; 0x1926 <run_motor_control_loop+0x39a>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    191c:	1c 2d       	mov	r17, r12
    191e:	0d 2d       	mov	r16, r13
    1920:	7e 2c       	mov	r7, r14
    1922:	6f 2c       	mov	r6, r15
    1924:	04 c0       	rjmp	.+8      	; 0x192e <run_motor_control_loop+0x3a2>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    1926:	18 2d       	mov	r17, r8
    1928:	09 2d       	mov	r16, r9
    192a:	7a 2c       	mov	r7, r10
    192c:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    192e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1930:	3e 85       	ldd	r19, Y+14	; 0x0e
    1932:	4f 85       	ldd	r20, Y+15	; 0x0f
    1934:	58 89       	ldd	r21, Y+16	; 0x10
    1936:	61 2f       	mov	r22, r17
    1938:	70 2f       	mov	r23, r16
    193a:	87 2d       	mov	r24, r7
    193c:	96 2d       	mov	r25, r6
    193e:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    1942:	18 16       	cp	r1, r24
    1944:	64 f5       	brge	.+88     	; 0x199e <run_motor_control_loop+0x412>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    1946:	21 2f       	mov	r18, r17
    1948:	30 2f       	mov	r19, r16
    194a:	47 2d       	mov	r20, r7
    194c:	56 2d       	mov	r21, r6
    194e:	c5 01       	movw	r24, r10
    1950:	b4 01       	movw	r22, r8
    1952:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__divsf3>
    1956:	2d 85       	ldd	r18, Y+13	; 0x0d
    1958:	3e 85       	ldd	r19, Y+14	; 0x0e
    195a:	4f 85       	ldd	r20, Y+15	; 0x0f
    195c:	58 89       	ldd	r21, Y+16	; 0x10
    195e:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    1962:	60 93 14 01 	sts	0x0114, r22
    1966:	70 93 15 01 	sts	0x0115, r23
    196a:	80 93 16 01 	sts	0x0116, r24
    196e:	90 93 17 01 	sts	0x0117, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    1972:	21 2f       	mov	r18, r17
    1974:	30 2f       	mov	r19, r16
    1976:	47 2d       	mov	r20, r7
    1978:	56 2d       	mov	r21, r6
    197a:	c7 01       	movw	r24, r14
    197c:	b6 01       	movw	r22, r12
    197e:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__divsf3>
    1982:	2d 85       	ldd	r18, Y+13	; 0x0d
    1984:	3e 85       	ldd	r19, Y+14	; 0x0e
    1986:	4f 85       	ldd	r20, Y+15	; 0x0f
    1988:	58 89       	ldd	r21, Y+16	; 0x10
    198a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    198e:	60 93 10 01 	sts	0x0110, r22
    1992:	70 93 11 01 	sts	0x0111, r23
    1996:	80 93 12 01 	sts	0x0112, r24
    199a:	90 93 13 01 	sts	0x0113, r25
	}

	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    199e:	08 e8       	ldi	r16, 0x88	; 136
    19a0:	10 e0       	ldi	r17, 0x00	; 0
    19a2:	d8 01       	movw	r26, r16
    19a4:	6d 91       	ld	r22, X+
    19a6:	7c 91       	ld	r23, X
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__floatunsisf>
    19b0:	20 91 14 01 	lds	r18, 0x0114
    19b4:	30 91 15 01 	lds	r19, 0x0115
    19b8:	40 91 16 01 	lds	r20, 0x0116
    19bc:	50 91 17 01 	lds	r21, 0x0117
    19c0:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    19c4:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__fixunssfsi>
    19c8:	70 93 8b 00 	sts	0x008B, r23
    19cc:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    19d0:	f8 01       	movw	r30, r16
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__floatunsisf>
    19de:	20 91 10 01 	lds	r18, 0x0110
    19e2:	30 91 11 01 	lds	r19, 0x0111
    19e6:	40 91 12 01 	lds	r20, 0x0112
    19ea:	50 91 13 01 	lds	r21, 0x0113
    19ee:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    19f2:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__fixunssfsi>
    19f6:	70 93 8d 00 	sts	0x008D, r23
    19fa:	60 93 8c 00 	sts	0x008C, r22

}
    19fe:	64 96       	adiw	r28, 0x14	; 20
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	df 90       	pop	r13
    1a18:	cf 90       	pop	r12
    1a1a:	bf 90       	pop	r11
    1a1c:	af 90       	pop	r10
    1a1e:	9f 90       	pop	r9
    1a20:	8f 90       	pop	r8
    1a22:	7f 90       	pop	r7
    1a24:	6f 90       	pop	r6
    1a26:	5f 90       	pop	r5
    1a28:	4f 90       	pop	r4
    1a2a:	08 95       	ret

00001a2c <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    1a2c:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1a2e:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1a30:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1a32:	8c e0       	ldi	r24, 0x0C	; 12
    1a34:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    1a38:	e9 e6       	ldi	r30, 0x69	; 105
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	80 62       	ori	r24, 0x20	; 32
    1a40:	80 83       	st	Z, r24
    1a42:	80 81       	ld	r24, Z
    1a44:	8f 7e       	andi	r24, 0xEF	; 239
    1a46:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1a48:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    1a4a:	78 94       	sei
    1a4c:	08 95       	ret

00001a4e <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	18 2f       	mov	r17, r24
    1a56:	d6 2f       	mov	r29, r22
    1a58:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1a5a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1a5e:	94 ea       	ldi	r25, 0xA4	; 164
    1a60:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1a64:	ec eb       	ldi	r30, 0xBC	; 188
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	90 81       	ld	r25, Z
    1a6a:	99 23       	and	r25, r25
    1a6c:	ec f7       	brge	.-6      	; 0x1a68 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1a6e:	90 e5       	ldi	r25, 0x50	; 80
    1a70:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a74:	94 e8       	ldi	r25, 0x84	; 132
    1a76:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1a7a:	ec eb       	ldi	r30, 0xBC	; 188
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	90 81       	ld	r25, Z
    1a80:	99 23       	and	r25, r25
    1a82:	ec f7       	brge	.-6      	; 0x1a7e <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1a84:	90 91 b9 00 	lds	r25, 0x00B9
    1a88:	98 7f       	andi	r25, 0xF8	; 248
    1a8a:	90 32       	cpi	r25, 0x20	; 32
    1a8c:	29 f4       	brne	.+10     	; 0x1a98 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1a8e:	84 e9       	ldi	r24, 0x94	; 148
    1a90:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	2d c0       	rjmp	.+90     	; 0x1af2 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a9e:	84 e8       	ldi	r24, 0x84	; 132
    1aa0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1aa4:	ec eb       	ldi	r30, 0xBC	; 188
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	90 81       	ld	r25, Z
    1aaa:	99 23       	and	r25, r25
    1aac:	ec f7       	brge	.-6      	; 0x1aa8 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1aae:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ab2:	84 e8       	ldi	r24, 0x84	; 132
    1ab4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1ab8:	ec eb       	ldi	r30, 0xBC	; 188
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	88 23       	and	r24, r24
    1ac0:	ec f7       	brge	.-6      	; 0x1abc <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1ac2:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ac6:	84 e8       	ldi	r24, 0x84	; 132
    1ac8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1acc:	ec eb       	ldi	r30, 0xBC	; 188
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	88 23       	and	r24, r24
    1ad4:	ec f7       	brge	.-6      	; 0x1ad0 <m_rf_open+0x82>
	
	TWDR = packet_length;
    1ad6:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ada:	84 e8       	ldi	r24, 0x84	; 132
    1adc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1ae0:	ec eb       	ldi	r30, 0xBC	; 188
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	88 23       	and	r24, r24
    1ae8:	ec f7       	brge	.-6      	; 0x1ae4 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1aea:	84 e9       	ldi	r24, 0x94	; 148
    1aec:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
}
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	1f 91       	pop	r17
    1af8:	08 95       	ret

00001afa <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1b00:	84 ea       	ldi	r24, 0xA4	; 164
    1b02:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1b06:	ec eb       	ldi	r30, 0xBC	; 188
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	90 81       	ld	r25, Z
    1b0c:	99 23       	and	r25, r25
    1b0e:	ec f7       	brge	.-6      	; 0x1b0a <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1b10:	81 e5       	ldi	r24, 0x51	; 81
    1b12:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1b16:	84 e8       	ldi	r24, 0x84	; 132
    1b18:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1b1c:	ec eb       	ldi	r30, 0xBC	; 188
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	90 81       	ld	r25, Z
    1b22:	99 23       	and	r25, r25
    1b24:	ec f7       	brge	.-6      	; 0x1b20 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1b26:	80 91 b9 00 	lds	r24, 0x00B9
    1b2a:	88 7f       	andi	r24, 0xF8	; 248
    1b2c:	88 34       	cpi	r24, 0x48	; 72
    1b2e:	29 f4       	brne	.+10     	; 0x1b3a <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1b30:	84 e9       	ldi	r24, 0x94	; 148
    1b32:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	41 c0       	rjmp	.+130    	; 0x1bbc <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1b3a:	84 ec       	ldi	r24, 0xC4	; 196
    1b3c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1b40:	ec eb       	ldi	r30, 0xBC	; 188
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	90 81       	ld	r25, Z
    1b46:	99 23       	and	r25, r25
    1b48:	ec f7       	brge	.-6      	; 0x1b44 <m_rf_read+0x4a>
	bytes = TWDR;
    1b4a:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1b4e:	46 13       	cpse	r20, r22
    1b50:	09 c0       	rjmp	.+18     	; 0x1b64 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1b52:	84 2f       	mov	r24, r20
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	18 16       	cp	r1, r24
    1b5a:	19 06       	cpc	r1, r25
    1b5c:	44 f0       	brlt	.+16     	; 0x1b6e <m_rf_read+0x74>
    1b5e:	40 e0       	ldi	r20, 0x00	; 0
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	1a c0       	rjmp	.+52     	; 0x1b98 <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1b64:	84 e9       	ldi	r24, 0x94	; 148
    1b66:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	27 c0       	rjmp	.+78     	; 0x1bbc <m_rf_read+0xc2>
    1b6e:	d9 01       	movw	r26, r18
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	41 50       	subi	r20, 0x01	; 1
    1b74:	51 09       	sbc	r21, r1
    1b76:	b9 01       	movw	r22, r18
    1b78:	64 0f       	add	r22, r20
    1b7a:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1b7c:	ec eb       	ldi	r30, 0xBC	; 188
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1b82:	cb eb       	ldi	r28, 0xBB	; 187
    1b84:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1b86:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1b88:	90 81       	ld	r25, Z
    1b8a:	99 23       	and	r25, r25
    1b8c:	ec f7       	brge	.-6      	; 0x1b88 <m_rf_read+0x8e>
		buffer[i] = TWDR;
    1b8e:	98 81       	ld	r25, Y
    1b90:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1b92:	a6 17       	cp	r26, r22
    1b94:	b7 07       	cpc	r27, r23
    1b96:	b9 f7       	brne	.-18     	; 0x1b86 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1b98:	84 e8       	ldi	r24, 0x84	; 132
    1b9a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1b9e:	ec eb       	ldi	r30, 0xBC	; 188
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	90 81       	ld	r25, Z
    1ba4:	99 23       	and	r25, r25
    1ba6:	ec f7       	brge	.-6      	; 0x1ba2 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
    1ba8:	80 91 bb 00 	lds	r24, 0x00BB
    1bac:	f9 01       	movw	r30, r18
    1bae:	e4 0f       	add	r30, r20
    1bb0:	f5 1f       	adc	r31, r21
    1bb2:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1bb4:	84 e9       	ldi	r24, 0x94	; 148
    1bb6:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
}
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    1bc8:	80 ea       	ldi	r24, 0xA0	; 160
    1bca:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    1bce:	82 e1       	ldi	r24, 0x12	; 18
    1bd0:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1bd2:	09 b4       	in	r0, 0x29	; 41
    1bd4:	00 fe       	sbrs	r0, 0
    1bd6:	fd cf       	rjmp	.-6      	; 0x1bd2 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1bd8:	80 e9       	ldi	r24, 0x90	; 144
    1bda:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1bde:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1be2:	10 92 c1 01 	sts	0x01C1, r1
	cdc_line_rtsdtr = 0;
    1be6:	10 92 bf 01 	sts	0x01BF, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    1bea:	8c e0       	ldi	r24, 0x0C	; 12
    1bec:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1bf0:	78 94       	sei
    1bf2:	08 95       	ret

00001bf4 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1bf4:	1f 92       	push	r1
    1bf6:	0f 92       	push	r0
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	0f 92       	push	r0
    1bfc:	11 24       	eor	r1, r1
    1bfe:	8f 93       	push	r24
    1c00:	9f 93       	push	r25
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1c06:	e1 ee       	ldi	r30, 0xE1	; 225
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
        UDINT = 0;
    1c0c:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1c0e:	83 ff       	sbrs	r24, 3
    1c10:	11 c0       	rjmp	.+34     	; 0x1c34 <__vector_10+0x40>
		UENUM = 0;
    1c12:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1c16:	91 e0       	ldi	r25, 0x01	; 1
    1c18:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1c1c:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1c20:	92 e1       	ldi	r25, 0x12	; 18
    1c22:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1c26:	98 e0       	ldi	r25, 0x08	; 8
    1c28:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1c2c:	10 92 c1 01 	sts	0x01C1, r1
		cdc_line_rtsdtr = 0;
    1c30:	10 92 bf 01 	sts	0x01BF, r1
        }
	if (intbits & (1<<SOFI)) {
    1c34:	82 ff       	sbrs	r24, 2
    1c36:	13 c0       	rjmp	.+38     	; 0x1c5e <__vector_10+0x6a>
		if (usb_configuration) {
    1c38:	80 91 c1 01 	lds	r24, 0x01C1
    1c3c:	88 23       	and	r24, r24
    1c3e:	79 f0       	breq	.+30     	; 0x1c5e <__vector_10+0x6a>
			t = transmit_flush_timer;
    1c40:	80 91 c0 01 	lds	r24, 0x01C0
			if (t) {
    1c44:	88 23       	and	r24, r24
    1c46:	59 f0       	breq	.+22     	; 0x1c5e <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1c48:	81 50       	subi	r24, 0x01	; 1
    1c4a:	80 93 c0 01 	sts	0x01C0, r24
				if (!t) {
    1c4e:	81 11       	cpse	r24, r1
    1c50:	06 c0       	rjmp	.+12     	; 0x1c5e <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1c52:	84 e0       	ldi	r24, 0x04	; 4
    1c54:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1c58:	8a e3       	ldi	r24, 0x3A	; 58
    1c5a:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1c5e:	ff 91       	pop	r31
    1c60:	ef 91       	pop	r30
    1c62:	9f 91       	pop	r25
    1c64:	8f 91       	pop	r24
    1c66:	0f 90       	pop	r0
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	0f 90       	pop	r0
    1c6c:	1f 90       	pop	r1
    1c6e:	18 95       	reti

00001c70 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1c70:	1f 92       	push	r1
    1c72:	0f 92       	push	r0
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	0f 92       	push	r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	2f 93       	push	r18
    1c80:	3f 93       	push	r19
    1c82:	4f 93       	push	r20
    1c84:	5f 93       	push	r21
    1c86:	6f 93       	push	r22
    1c88:	7f 93       	push	r23
    1c8a:	8f 93       	push	r24
    1c8c:	9f 93       	push	r25
    1c8e:	af 93       	push	r26
    1c90:	bf 93       	push	r27
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	ef 93       	push	r30
    1c98:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1c9a:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1c9e:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1ca2:	83 ff       	sbrs	r24, 3
    1ca4:	4c c1       	rjmp	.+664    	; 0x1f3e <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    1ca6:	e1 ef       	ldi	r30, 0xF1	; 241
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    1cac:	80 81       	ld	r24, Z
                wValue = UEDATX;
    1cae:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1cb0:	90 81       	ld	r25, Z
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    1cb6:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    1cb8:	90 81       	ld	r25, Z
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	59 2b       	or	r21, r25
                wLength = UEDATX;
    1cbe:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    1cc0:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1cc2:	92 ef       	ldi	r25, 0xF2	; 242
    1cc4:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    1cc8:	86 30       	cpi	r24, 0x06	; 6
    1cca:	09 f0       	breq	.+2      	; 0x1cce <__vector_11+0x5e>
    1ccc:	58 c0       	rjmp	.+176    	; 0x1d7e <__vector_11+0x10e>
    1cce:	04 c0       	rjmp	.+8      	; 0x1cd8 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1cd0:	81 e2       	ldi	r24, 0x21	; 33
    1cd2:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1cd6:	3a c1       	rjmp	.+628    	; 0x1f4c <__vector_11+0x2dc>
    1cd8:	66 e0       	ldi	r22, 0x06	; 6
    1cda:	80 e1       	ldi	r24, 0x10	; 16
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
				}
				desc_val = pgm_read_word(list);
    1cde:	fc 01       	movw	r30, r24
    1ce0:	a5 91       	lpm	r26, Z+
    1ce2:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    1ce4:	2a 17       	cp	r18, r26
    1ce6:	3b 07       	cpc	r19, r27
    1ce8:	11 f0       	breq	.+4      	; 0x1cee <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    1cea:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1cec:	23 c0       	rjmp	.+70     	; 0x1d34 <__vector_11+0xc4>
				}
				list += 2;
    1cee:	fc 01       	movw	r30, r24
    1cf0:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1cf2:	a5 91       	lpm	r26, Z+
    1cf4:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    1cf6:	4a 17       	cp	r20, r26
    1cf8:	5b 07       	cpc	r21, r27
    1cfa:	11 f0       	breq	.+4      	; 0x1d00 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    1cfc:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1cfe:	1a c0       	rjmp	.+52     	; 0x1d34 <__vector_11+0xc4>
				}
				list += 2;
    1d00:	fc 01       	movw	r30, r24
    1d02:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1d04:	45 91       	lpm	r20, Z+
    1d06:	54 91       	lpm	r21, Z
				list += 2;
    1d08:	fc 01       	movw	r30, r24
    1d0a:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1d0c:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1d0e:	87 2f       	mov	r24, r23
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1d14:	8f 3f       	cpi	r24, 0xFF	; 255
    1d16:	91 05       	cpc	r25, r1
    1d18:	19 f0       	breq	.+6      	; 0x1d20 <__vector_11+0xb0>
    1d1a:	10 f0       	brcs	.+4      	; 0x1d20 <__vector_11+0xb0>
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	82 17       	cp	r24, r18
    1d22:	08 f4       	brcc	.+2      	; 0x1d26 <__vector_11+0xb6>
    1d24:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1d26:	a8 ee       	ldi	r26, 0xE8	; 232
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1d2a:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d2c:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1d2e:	c1 ef       	ldi	r28, 0xF1	; 241
    1d30:	d0 e0       	ldi	r29, 0x00	; 0
    1d32:	03 c0       	rjmp	.+6      	; 0x1d3a <__vector_11+0xca>
    1d34:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1d36:	99 f6       	brne	.-90     	; 0x1cde <__vector_11+0x6e>
    1d38:	cb cf       	rjmp	.-106    	; 0x1cd0 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1d3a:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1d3c:	98 2f       	mov	r25, r24
    1d3e:	95 70       	andi	r25, 0x05	; 5
    1d40:	e1 f3       	breq	.-8      	; 0x1d3a <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    1d42:	82 fd       	sbrc	r24, 2
    1d44:	03 c1       	rjmp	.+518    	; 0x1f4c <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1d46:	32 2f       	mov	r19, r18
    1d48:	21 31       	cpi	r18, 0x11	; 17
    1d4a:	08 f0       	brcs	.+2      	; 0x1d4e <__vector_11+0xde>
    1d4c:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    1d4e:	33 23       	and	r19, r19
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <__vector_11+0xe4>
    1d52:	f9 c0       	rjmp	.+498    	; 0x1f46 <__vector_11+0x2d6>
    1d54:	fa 01       	movw	r30, r20
    1d56:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    1d58:	94 91       	lpm	r25, Z
    1d5a:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1d5c:	81 50       	subi	r24, 0x01	; 1
    1d5e:	31 96       	adiw	r30, 0x01	; 1
    1d60:	81 11       	cpse	r24, r1
    1d62:	fa cf       	rjmp	.-12     	; 0x1d58 <__vector_11+0xe8>
    1d64:	8f ef       	ldi	r24, 0xFF	; 255
    1d66:	83 0f       	add	r24, r19
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	48 0f       	add	r20, r24
    1d6e:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1d70:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d72:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1d74:	21 11       	cpse	r18, r1
    1d76:	e1 cf       	rjmp	.-62     	; 0x1d3a <__vector_11+0xca>
    1d78:	30 31       	cpi	r19, 0x10	; 16
    1d7a:	f9 f2       	breq	.-66     	; 0x1d3a <__vector_11+0xca>
    1d7c:	e7 c0       	rjmp	.+462    	; 0x1f4c <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1d7e:	85 30       	cpi	r24, 0x05	; 5
    1d80:	61 f4       	brne	.+24     	; 0x1d9a <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d82:	8e ef       	ldi	r24, 0xFE	; 254
    1d84:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1d88:	e8 ee       	ldi	r30, 0xE8	; 232
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	80 ff       	sbrs	r24, 0
    1d90:	fd cf       	rjmp	.-6      	; 0x1d8c <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1d92:	20 68       	ori	r18, 0x80	; 128
    1d94:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1d98:	d9 c0       	rjmp	.+434    	; 0x1f4c <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1d9a:	89 30       	cpi	r24, 0x09	; 9
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <__vector_11+0x130>
    1d9e:	35 c0       	rjmp	.+106    	; 0x1e0a <__vector_11+0x19a>
    1da0:	61 11       	cpse	r22, r1
    1da2:	cd c0       	rjmp	.+410    	; 0x1f3e <__vector_11+0x2ce>
			usb_configuration = wValue;
    1da4:	20 93 c1 01 	sts	0x01C1, r18
			cdc_line_rtsdtr = 0;
    1da8:	10 92 bf 01 	sts	0x01BF, r1
			transmit_flush_timer = 0;
    1dac:	10 92 c0 01 	sts	0x01C0, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1db0:	8e ef       	ldi	r24, 0xFE	; 254
    1db2:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1db6:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1db8:	29 eb       	ldi	r18, 0xB9	; 185
    1dba:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1dbc:	c9 ee       	ldi	r28, 0xE9	; 233
    1dbe:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1dc0:	ab ee       	ldi	r26, 0xEB	; 235
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1dc4:	0c ee       	ldi	r16, 0xEC	; 236
    1dc6:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1dc8:	6d ee       	ldi	r22, 0xED	; 237
    1dca:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1dcc:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    1dce:	a9 01       	movw	r20, r18
    1dd0:	4f 5f       	subi	r20, 0xFF	; 255
    1dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd4:	f9 01       	movw	r30, r18
    1dd6:	94 91       	lpm	r25, Z
				UECONX = en;
    1dd8:	9c 93       	st	X, r25
				if (en) {
    1dda:	99 23       	and	r25, r25
    1ddc:	61 f0       	breq	.+24     	; 0x1df6 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    1dde:	fa 01       	movw	r30, r20
    1de0:	44 91       	lpm	r20, Z
    1de2:	f8 01       	movw	r30, r16
    1de4:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    1de6:	f9 01       	movw	r30, r18
    1de8:	32 96       	adiw	r30, 0x02	; 2
    1dea:	94 91       	lpm	r25, Z
    1dec:	2d 5f       	subi	r18, 0xFD	; 253
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
    1df0:	fb 01       	movw	r30, r22
    1df2:	90 83       	st	Z, r25
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1df6:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1df8:	8f 5f       	subi	r24, 0xFF	; 255
    1dfa:	85 30       	cpi	r24, 0x05	; 5
    1dfc:	39 f7       	brne	.-50     	; 0x1dcc <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1dfe:	ea ee       	ldi	r30, 0xEA	; 234
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	8e e1       	ldi	r24, 0x1E	; 30
    1e04:	80 83       	st	Z, r24
        		UERST = 0;
    1e06:	10 82       	st	Z, r1
			return;
    1e08:	a1 c0       	rjmp	.+322    	; 0x1f4c <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1e0a:	88 30       	cpi	r24, 0x08	; 8
    1e0c:	81 f4       	brne	.+32     	; 0x1e2e <__vector_11+0x1be>
    1e0e:	60 38       	cpi	r22, 0x80	; 128
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <__vector_11+0x1a4>
    1e12:	95 c0       	rjmp	.+298    	; 0x1f3e <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1e14:	e8 ee       	ldi	r30, 0xE8	; 232
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	80 ff       	sbrs	r24, 0
    1e1c:	fd cf       	rjmp	.-6      	; 0x1e18 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1e1e:	80 91 c1 01 	lds	r24, 0x01C1
    1e22:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e26:	8e ef       	ldi	r24, 0xFE	; 254
    1e28:	80 93 e8 00 	sts	0x00E8, r24
    1e2c:	8f c0       	rjmp	.+286    	; 0x1f4c <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1e2e:	81 32       	cpi	r24, 0x21	; 33
    1e30:	b9 f4       	brne	.+46     	; 0x1e60 <__vector_11+0x1f0>
    1e32:	61 3a       	cpi	r22, 0xA1	; 161
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <__vector_11+0x1c8>
    1e36:	83 c0       	rjmp	.+262    	; 0x1f3e <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1e38:	e8 ee       	ldi	r30, 0xE8	; 232
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 ff       	sbrs	r24, 0
    1e40:	fd cf       	rjmp	.-6      	; 0x1e3c <__vector_11+0x1cc>
    1e42:	e4 e2       	ldi	r30, 0x24	; 36
    1e44:	f1 e0       	ldi	r31, 0x01	; 1
    1e46:	2b e2       	ldi	r18, 0x2B	; 43
    1e48:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1e4a:	a1 ef       	ldi	r26, 0xF1	; 241
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	81 91       	ld	r24, Z+
    1e50:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1e52:	e2 17       	cp	r30, r18
    1e54:	f3 07       	cpc	r31, r19
    1e56:	d9 f7       	brne	.-10     	; 0x1e4e <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e58:	8e ef       	ldi	r24, 0xFE	; 254
    1e5a:	80 93 e8 00 	sts	0x00E8, r24
    1e5e:	76 c0       	rjmp	.+236    	; 0x1f4c <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1e60:	80 32       	cpi	r24, 0x20	; 32
    1e62:	d1 f4       	brne	.+52     	; 0x1e98 <__vector_11+0x228>
    1e64:	61 32       	cpi	r22, 0x21	; 33
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <__vector_11+0x1fa>
    1e68:	6a c0       	rjmp	.+212    	; 0x1f3e <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1e6a:	e8 ee       	ldi	r30, 0xE8	; 232
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	82 ff       	sbrs	r24, 2
    1e72:	fd cf       	rjmp	.-6      	; 0x1e6e <__vector_11+0x1fe>
    1e74:	e4 e2       	ldi	r30, 0x24	; 36
    1e76:	f1 e0       	ldi	r31, 0x01	; 1
    1e78:	2b e2       	ldi	r18, 0x2B	; 43
    1e7a:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1e7c:	a1 ef       	ldi	r26, 0xF1	; 241
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	8c 91       	ld	r24, X
    1e82:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1e84:	e2 17       	cp	r30, r18
    1e86:	f3 07       	cpc	r31, r19
    1e88:	d9 f7       	brne	.-10     	; 0x1e80 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1e8a:	e8 ee       	ldi	r30, 0xE8	; 232
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	8b ef       	ldi	r24, 0xFB	; 251
    1e90:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e92:	8e ef       	ldi	r24, 0xFE	; 254
    1e94:	80 83       	st	Z, r24
    1e96:	5a c0       	rjmp	.+180    	; 0x1f4c <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1e98:	82 32       	cpi	r24, 0x22	; 34
    1e9a:	71 f4       	brne	.+28     	; 0x1eb8 <__vector_11+0x248>
    1e9c:	61 32       	cpi	r22, 0x21	; 33
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <__vector_11+0x232>
    1ea0:	4e c0       	rjmp	.+156    	; 0x1f3e <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    1ea2:	20 93 bf 01 	sts	0x01BF, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1ea6:	e8 ee       	ldi	r30, 0xE8	; 232
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	80 ff       	sbrs	r24, 0
    1eae:	fd cf       	rjmp	.-6      	; 0x1eaa <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1eb0:	8e ef       	ldi	r24, 0xFE	; 254
    1eb2:	80 93 e8 00 	sts	0x00E8, r24
    1eb6:	4a c0       	rjmp	.+148    	; 0x1f4c <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1eb8:	81 11       	cpse	r24, r1
    1eba:	1a c0       	rjmp	.+52     	; 0x1ef0 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1ebc:	e8 ee       	ldi	r30, 0xE8	; 232
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	80 ff       	sbrs	r24, 0
    1ec4:	fd cf       	rjmp	.-6      	; 0x1ec0 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1ec6:	62 38       	cpi	r22, 0x82	; 130
    1ec8:	51 f4       	brne	.+20     	; 0x1ede <__vector_11+0x26e>
				UENUM = wIndex;
    1eca:	e9 ee       	ldi	r30, 0xE9	; 233
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    1ed0:	80 91 eb 00 	lds	r24, 0x00EB
    1ed4:	85 fb       	bst	r24, 5
    1ed6:	88 27       	eor	r24, r24
    1ed8:	80 f9       	bld	r24, 0
				UENUM = 0;
    1eda:	10 82       	st	Z, r1
    1edc:	01 c0       	rjmp	.+2      	; 0x1ee0 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1ede:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1ee0:	e1 ef       	ldi	r30, 0xF1	; 241
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 83       	st	Z, r24
			UEDATX = 0;
    1ee6:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ee8:	8e ef       	ldi	r24, 0xFE	; 254
    1eea:	80 93 e8 00 	sts	0x00E8, r24
    1eee:	2e c0       	rjmp	.+92     	; 0x1f4c <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1ef0:	98 2f       	mov	r25, r24
    1ef2:	9d 7f       	andi	r25, 0xFD	; 253
    1ef4:	91 30       	cpi	r25, 0x01	; 1
    1ef6:	19 f5       	brne	.+70     	; 0x1f3e <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    1ef8:	62 30       	cpi	r22, 0x02	; 2
    1efa:	09 f5       	brne	.+66     	; 0x1f3e <__vector_11+0x2ce>
    1efc:	23 2b       	or	r18, r19
    1efe:	f9 f4       	brne	.+62     	; 0x1f3e <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    1f00:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1f02:	9f ef       	ldi	r25, 0xFF	; 255
    1f04:	94 0f       	add	r25, r20
    1f06:	94 30       	cpi	r25, 0x04	; 4
    1f08:	d0 f4       	brcc	.+52     	; 0x1f3e <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1f0a:	9e ef       	ldi	r25, 0xFE	; 254
    1f0c:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1f10:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    1f14:	83 30       	cpi	r24, 0x03	; 3
    1f16:	21 f4       	brne	.+8      	; 0x1f20 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1f18:	81 e2       	ldi	r24, 0x21	; 33
    1f1a:	80 93 eb 00 	sts	0x00EB, r24
    1f1e:	16 c0       	rjmp	.+44     	; 0x1f4c <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1f20:	89 e1       	ldi	r24, 0x19	; 25
    1f22:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <__vector_11+0x2c0>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	4a 95       	dec	r20
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <__vector_11+0x2bc>
    1f34:	ea ee       	ldi	r30, 0xEA	; 234
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 83       	st	Z, r24
					UERST = 0;
    1f3a:	10 82       	st	Z, r1
    1f3c:	07 c0       	rjmp	.+14     	; 0x1f4c <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1f3e:	81 e2       	ldi	r24, 0x21	; 33
    1f40:	80 93 eb 00 	sts	0x00EB, r24
    1f44:	03 c0       	rjmp	.+6      	; 0x1f4c <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1f46:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1f48:	21 11       	cpse	r18, r1
    1f4a:	f7 ce       	rjmp	.-530    	; 0x1d3a <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1f4c:	ff 91       	pop	r31
    1f4e:	ef 91       	pop	r30
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	bf 91       	pop	r27
    1f56:	af 91       	pop	r26
    1f58:	9f 91       	pop	r25
    1f5a:	8f 91       	pop	r24
    1f5c:	7f 91       	pop	r23
    1f5e:	6f 91       	pop	r22
    1f60:	5f 91       	pop	r21
    1f62:	4f 91       	pop	r20
    1f64:	3f 91       	pop	r19
    1f66:	2f 91       	pop	r18
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	0f 90       	pop	r0
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	0f 90       	pop	r0
    1f72:	1f 90       	pop	r1
    1f74:	18 95       	reti

00001f76 <twi_wait>:
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	ec eb       	ldi	r30, 0xBC	; 188
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	88 23       	and	r24, r24
    1f82:	34 f0       	brlt	.+12     	; 0x1f90 <twi_wait+0x1a>
    1f84:	2f 5f       	subi	r18, 0xFF	; 255
    1f86:	3f 4f       	sbci	r19, 0xFF	; 255
    1f88:	29 3e       	cpi	r18, 0xE9	; 233
    1f8a:	83 e0       	ldi	r24, 0x03	; 3
    1f8c:	38 07       	cpc	r19, r24
    1f8e:	b9 f7       	brne	.-18     	; 0x1f7e <twi_wait+0x8>
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	28 3e       	cpi	r18, 0xE8	; 232
    1f94:	33 40       	sbci	r19, 0x03	; 3
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <twi_wait+0x24>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	08 95       	ret

00001f9c <send_byte>:
    1f9c:	80 93 bb 00 	sts	0x00BB, r24
    1fa0:	84 e8       	ldi	r24, 0x84	; 132
    1fa2:	80 93 bc 00 	sts	0x00BC, r24
    1fa6:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <twi_wait>
    1faa:	88 23       	and	r24, r24
    1fac:	19 f0       	breq	.+6      	; 0x1fb4 <send_byte+0x18>
    1fae:	80 91 b9 00 	lds	r24, 0x00B9
    1fb2:	88 7f       	andi	r24, 0xF8	; 248
    1fb4:	08 95       	ret

00001fb6 <start_write>:
    1fb6:	cf 93       	push	r28
    1fb8:	c8 2f       	mov	r28, r24
    1fba:	94 ea       	ldi	r25, 0xA4	; 164
    1fbc:	90 93 bc 00 	sts	0x00BC, r25
    1fc0:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <twi_wait>
    1fc4:	88 23       	and	r24, r24
    1fc6:	61 f0       	breq	.+24     	; 0x1fe0 <start_write+0x2a>
    1fc8:	8c 2f       	mov	r24, r28
    1fca:	88 0f       	add	r24, r24
    1fcc:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    1fd0:	80 32       	cpi	r24, 0x20	; 32
    1fd2:	29 f4       	brne	.+10     	; 0x1fde <start_write+0x28>
    1fd4:	84 e9       	ldi	r24, 0x94	; 148
    1fd6:	80 93 bc 00 	sts	0x00BC, r24
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	01 c0       	rjmp	.+2      	; 0x1fe0 <start_write+0x2a>
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	cf 91       	pop	r28
    1fe2:	08 95       	ret

00001fe4 <m_wii_open>:
    1fe4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <m_bus_init>
    1fe8:	88 e5       	ldi	r24, 0x58	; 88
    1fea:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <start_write>
    1fee:	88 23       	and	r24, r24
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <m_wii_open+0x10>
    1ff2:	cd c0       	rjmp	.+410    	; 0x218e <m_wii_open+0x1aa>
    1ff4:	80 e3       	ldi	r24, 0x30	; 48
    1ff6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    1ffa:	88 23       	and	r24, r24
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <m_wii_open+0x1c>
    1ffe:	c9 c0       	rjmp	.+402    	; 0x2192 <m_wii_open+0x1ae>
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    2006:	88 23       	and	r24, r24
    2008:	09 f4       	brne	.+2      	; 0x200c <m_wii_open+0x28>
    200a:	c5 c0       	rjmp	.+394    	; 0x2196 <m_wii_open+0x1b2>
    200c:	84 e9       	ldi	r24, 0x94	; 148
    200e:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2012:	83 ec       	ldi	r24, 0xC3	; 195
    2014:	99 e0       	ldi	r25, 0x09	; 9
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <m_wii_open+0x32>
    201a:	00 c0       	rjmp	.+0      	; 0x201c <m_wii_open+0x38>
    201c:	00 00       	nop
    201e:	88 e5       	ldi	r24, 0x58	; 88
    2020:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <start_write>
    2024:	88 23       	and	r24, r24
    2026:	09 f4       	brne	.+2      	; 0x202a <m_wii_open+0x46>
    2028:	b8 c0       	rjmp	.+368    	; 0x219a <m_wii_open+0x1b6>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    2030:	88 23       	and	r24, r24
    2032:	09 f4       	brne	.+2      	; 0x2036 <m_wii_open+0x52>
    2034:	b4 c0       	rjmp	.+360    	; 0x219e <m_wii_open+0x1ba>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    203c:	88 23       	and	r24, r24
    203e:	09 f4       	brne	.+2      	; 0x2042 <m_wii_open+0x5e>
    2040:	b0 c0       	rjmp	.+352    	; 0x21a2 <m_wii_open+0x1be>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    2048:	88 23       	and	r24, r24
    204a:	09 f4       	brne	.+2      	; 0x204e <m_wii_open+0x6a>
    204c:	ac c0       	rjmp	.+344    	; 0x21a6 <m_wii_open+0x1c2>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    2054:	88 23       	and	r24, r24
    2056:	09 f4       	brne	.+2      	; 0x205a <m_wii_open+0x76>
    2058:	a8 c0       	rjmp	.+336    	; 0x21aa <m_wii_open+0x1c6>
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    2060:	88 23       	and	r24, r24
    2062:	09 f4       	brne	.+2      	; 0x2066 <m_wii_open+0x82>
    2064:	a4 c0       	rjmp	.+328    	; 0x21ae <m_wii_open+0x1ca>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    206c:	88 23       	and	r24, r24
    206e:	09 f4       	brne	.+2      	; 0x2072 <m_wii_open+0x8e>
    2070:	a0 c0       	rjmp	.+320    	; 0x21b2 <m_wii_open+0x1ce>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    2078:	88 23       	and	r24, r24
    207a:	09 f4       	brne	.+2      	; 0x207e <m_wii_open+0x9a>
    207c:	9c c0       	rjmp	.+312    	; 0x21b6 <m_wii_open+0x1d2>
    207e:	80 e9       	ldi	r24, 0x90	; 144
    2080:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    2084:	88 23       	and	r24, r24
    2086:	09 f4       	brne	.+2      	; 0x208a <m_wii_open+0xa6>
    2088:	98 c0       	rjmp	.+304    	; 0x21ba <m_wii_open+0x1d6>
    208a:	84 e9       	ldi	r24, 0x94	; 148
    208c:	80 93 bc 00 	sts	0x00BC, r24
    2090:	83 ec       	ldi	r24, 0xC3	; 195
    2092:	99 e0       	ldi	r25, 0x09	; 9
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <m_wii_open+0xb0>
    2098:	00 c0       	rjmp	.+0      	; 0x209a <m_wii_open+0xb6>
    209a:	00 00       	nop
    209c:	88 e5       	ldi	r24, 0x58	; 88
    209e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <start_write>
    20a2:	88 23       	and	r24, r24
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <m_wii_open+0xc4>
    20a6:	8b c0       	rjmp	.+278    	; 0x21be <m_wii_open+0x1da>
    20a8:	87 e0       	ldi	r24, 0x07	; 7
    20aa:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    20ae:	88 23       	and	r24, r24
    20b0:	09 f4       	brne	.+2      	; 0x20b4 <m_wii_open+0xd0>
    20b2:	87 c0       	rjmp	.+270    	; 0x21c2 <m_wii_open+0x1de>
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    20ba:	88 23       	and	r24, r24
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <m_wii_open+0xdc>
    20be:	83 c0       	rjmp	.+262    	; 0x21c6 <m_wii_open+0x1e2>
    20c0:	81 e4       	ldi	r24, 0x41	; 65
    20c2:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    20c6:	88 23       	and	r24, r24
    20c8:	09 f4       	brne	.+2      	; 0x20cc <m_wii_open+0xe8>
    20ca:	7f c0       	rjmp	.+254    	; 0x21ca <m_wii_open+0x1e6>
    20cc:	84 e9       	ldi	r24, 0x94	; 148
    20ce:	80 93 bc 00 	sts	0x00BC, r24
    20d2:	83 ec       	ldi	r24, 0xC3	; 195
    20d4:	99 e0       	ldi	r25, 0x09	; 9
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <m_wii_open+0xf2>
    20da:	00 c0       	rjmp	.+0      	; 0x20dc <m_wii_open+0xf8>
    20dc:	00 00       	nop
    20de:	88 e5       	ldi	r24, 0x58	; 88
    20e0:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <start_write>
    20e4:	88 23       	and	r24, r24
    20e6:	09 f4       	brne	.+2      	; 0x20ea <m_wii_open+0x106>
    20e8:	72 c0       	rjmp	.+228    	; 0x21ce <m_wii_open+0x1ea>
    20ea:	8a e1       	ldi	r24, 0x1A	; 26
    20ec:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    20f0:	88 23       	and	r24, r24
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <m_wii_open+0x112>
    20f4:	6e c0       	rjmp	.+220    	; 0x21d2 <m_wii_open+0x1ee>
    20f6:	80 e4       	ldi	r24, 0x40	; 64
    20f8:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    20fc:	88 23       	and	r24, r24
    20fe:	09 f4       	brne	.+2      	; 0x2102 <m_wii_open+0x11e>
    2100:	6a c0       	rjmp	.+212    	; 0x21d6 <m_wii_open+0x1f2>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    2108:	88 23       	and	r24, r24
    210a:	09 f4       	brne	.+2      	; 0x210e <m_wii_open+0x12a>
    210c:	66 c0       	rjmp	.+204    	; 0x21da <m_wii_open+0x1f6>
    210e:	84 e9       	ldi	r24, 0x94	; 148
    2110:	80 93 bc 00 	sts	0x00BC, r24
    2114:	83 ec       	ldi	r24, 0xC3	; 195
    2116:	99 e0       	ldi	r25, 0x09	; 9
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <m_wii_open+0x134>
    211c:	00 c0       	rjmp	.+0      	; 0x211e <m_wii_open+0x13a>
    211e:	00 00       	nop
    2120:	88 e5       	ldi	r24, 0x58	; 88
    2122:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <start_write>
    2126:	88 23       	and	r24, r24
    2128:	09 f4       	brne	.+2      	; 0x212c <m_wii_open+0x148>
    212a:	59 c0       	rjmp	.+178    	; 0x21de <m_wii_open+0x1fa>
    212c:	83 e3       	ldi	r24, 0x33	; 51
    212e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    2132:	88 23       	and	r24, r24
    2134:	09 f4       	brne	.+2      	; 0x2138 <m_wii_open+0x154>
    2136:	55 c0       	rjmp	.+170    	; 0x21e2 <m_wii_open+0x1fe>
    2138:	83 e0       	ldi	r24, 0x03	; 3
    213a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    213e:	88 23       	and	r24, r24
    2140:	09 f4       	brne	.+2      	; 0x2144 <m_wii_open+0x160>
    2142:	51 c0       	rjmp	.+162    	; 0x21e6 <m_wii_open+0x202>
    2144:	84 e9       	ldi	r24, 0x94	; 148
    2146:	80 93 bc 00 	sts	0x00BC, r24
    214a:	83 ec       	ldi	r24, 0xC3	; 195
    214c:	99 e0       	ldi	r25, 0x09	; 9
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <m_wii_open+0x16a>
    2152:	00 c0       	rjmp	.+0      	; 0x2154 <m_wii_open+0x170>
    2154:	00 00       	nop
    2156:	88 e5       	ldi	r24, 0x58	; 88
    2158:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <start_write>
    215c:	88 23       	and	r24, r24
    215e:	09 f4       	brne	.+2      	; 0x2162 <m_wii_open+0x17e>
    2160:	44 c0       	rjmp	.+136    	; 0x21ea <m_wii_open+0x206>
    2162:	80 e3       	ldi	r24, 0x30	; 48
    2164:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    2168:	88 23       	and	r24, r24
    216a:	09 f4       	brne	.+2      	; 0x216e <m_wii_open+0x18a>
    216c:	40 c0       	rjmp	.+128    	; 0x21ee <m_wii_open+0x20a>
    216e:	88 e0       	ldi	r24, 0x08	; 8
    2170:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    2174:	88 23       	and	r24, r24
    2176:	e9 f1       	breq	.+122    	; 0x21f2 <m_wii_open+0x20e>
    2178:	84 e9       	ldi	r24, 0x94	; 148
    217a:	80 93 bc 00 	sts	0x00BC, r24
    217e:	83 ec       	ldi	r24, 0xC3	; 195
    2180:	99 e0       	ldi	r25, 0x09	; 9
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <m_wii_open+0x19e>
    2186:	00 c0       	rjmp	.+0      	; 0x2188 <m_wii_open+0x1a4>
    2188:	00 00       	nop
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	08 95       	ret
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	08 95       	ret
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	08 95       	ret
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	08 95       	ret
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	08 95       	ret
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	08 95       	ret
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	08 95       	ret
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	08 95       	ret
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	08 95       	ret
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	08 95       	ret
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	08 95       	ret
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	08 95       	ret
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	08 95       	ret
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	08 95       	ret
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	08 95       	ret
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	08 95       	ret
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	08 95       	ret
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	08 95       	ret
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	08 95       	ret
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	08 95       	ret
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	08 95       	ret
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	08 95       	ret
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	08 95       	ret
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	08 95       	ret
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	08 95       	ret
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	08 95       	ret
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	08 95       	ret

000021f6 <start_read>:
    21f6:	cf 93       	push	r28
    21f8:	c8 2f       	mov	r28, r24
    21fa:	84 ea       	ldi	r24, 0xA4	; 164
    21fc:	80 93 bc 00 	sts	0x00BC, r24
    2200:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <twi_wait>
    2204:	88 23       	and	r24, r24
    2206:	69 f0       	breq	.+26     	; 0x2222 <start_read+0x2c>
    2208:	8c 2f       	mov	r24, r28
    220a:	88 0f       	add	r24, r24
    220c:	8f 5f       	subi	r24, 0xFF	; 255
    220e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    2212:	88 34       	cpi	r24, 0x48	; 72
    2214:	29 f4       	brne	.+10     	; 0x2220 <start_read+0x2a>
    2216:	84 e9       	ldi	r24, 0x94	; 148
    2218:	80 93 bc 00 	sts	0x00BC, r24
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	01 c0       	rjmp	.+2      	; 0x2222 <start_read+0x2c>
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <m_wii_read>:
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	60 97       	sbiw	r28, 0x10	; 16
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	8c 01       	movw	r16, r24
    2240:	fe 01       	movw	r30, r28
    2242:	31 96       	adiw	r30, 0x01	; 1
    2244:	80 e1       	ldi	r24, 0x10	; 16
    2246:	df 01       	movw	r26, r30
    2248:	1d 92       	st	X+, r1
    224a:	8a 95       	dec	r24
    224c:	e9 f7       	brne	.-6      	; 0x2248 <m_wii_read+0x22>
    224e:	88 e5       	ldi	r24, 0x58	; 88
    2250:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <start_write>
    2254:	88 23       	and	r24, r24
    2256:	09 f4       	brne	.+2      	; 0x225a <m_wii_read+0x34>
    2258:	69 c0       	rjmp	.+210    	; 0x232c <m_wii_read+0x106>
    225a:	86 e3       	ldi	r24, 0x36	; 54
    225c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_byte>
    2260:	88 23       	and	r24, r24
    2262:	09 f4       	brne	.+2      	; 0x2266 <m_wii_read+0x40>
    2264:	65 c0       	rjmp	.+202    	; 0x2330 <m_wii_read+0x10a>
    2266:	84 e9       	ldi	r24, 0x94	; 148
    2268:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    226c:	b8 e0       	ldi	r27, 0x08	; 8
    226e:	ba 95       	dec	r27
    2270:	f1 f7       	brne	.-4      	; 0x226e <m_wii_read+0x48>
    2272:	00 00       	nop
    2274:	88 e5       	ldi	r24, 0x58	; 88
    2276:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <start_read>
    227a:	88 23       	and	r24, r24
    227c:	09 f4       	brne	.+2      	; 0x2280 <m_wii_read+0x5a>
    227e:	5a c0       	rjmp	.+180    	; 0x2334 <m_wii_read+0x10e>
    2280:	be 01       	movw	r22, r28
    2282:	6f 5f       	subi	r22, 0xFF	; 255
    2284:	7f 4f       	sbci	r23, 0xFF	; 255
    2286:	ae 01       	movw	r20, r28
    2288:	40 5f       	subi	r20, 0xF0	; 240
    228a:	5f 4f       	sbci	r21, 0xFF	; 255
    228c:	ec eb       	ldi	r30, 0xBC	; 188
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	84 ec       	ldi	r24, 0xC4	; 196
    2292:	2b eb       	ldi	r18, 0xBB	; 187
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	80 83       	st	Z, r24
    2298:	90 81       	ld	r25, Z
    229a:	99 23       	and	r25, r25
    229c:	ec f7       	brge	.-6      	; 0x2298 <m_wii_read+0x72>
    229e:	d9 01       	movw	r26, r18
    22a0:	9c 91       	ld	r25, X
    22a2:	db 01       	movw	r26, r22
    22a4:	9d 93       	st	X+, r25
    22a6:	bd 01       	movw	r22, r26
    22a8:	a4 17       	cp	r26, r20
    22aa:	b5 07       	cpc	r27, r21
    22ac:	a1 f7       	brne	.-24     	; 0x2296 <m_wii_read+0x70>
    22ae:	84 e8       	ldi	r24, 0x84	; 132
    22b0:	80 93 bc 00 	sts	0x00BC, r24
    22b4:	ec eb       	ldi	r30, 0xBC	; 188
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	88 23       	and	r24, r24
    22bc:	ec f7       	brge	.-6      	; 0x22b8 <m_wii_read+0x92>
    22be:	80 91 bb 00 	lds	r24, 0x00BB
    22c2:	88 8b       	std	Y+16, r24	; 0x10
    22c4:	84 e9       	ldi	r24, 0x94	; 148
    22c6:	80 93 bc 00 	sts	0x00BC, r24
    22ca:	be 01       	movw	r22, r28
    22cc:	6c 5f       	subi	r22, 0xFC	; 252
    22ce:	7f 4f       	sbci	r23, 0xFF	; 255
    22d0:	f8 01       	movw	r30, r16
    22d2:	08 5e       	subi	r16, 0xE8	; 232
    22d4:	1f 4f       	sbci	r17, 0xFF	; 255
    22d6:	db 01       	movw	r26, r22
    22d8:	2c 91       	ld	r18, X
    22da:	32 2f       	mov	r19, r18
    22dc:	30 73       	andi	r19, 0x30	; 48
    22de:	cb 01       	movw	r24, r22
    22e0:	02 97       	sbiw	r24, 0x02	; 2
    22e2:	dc 01       	movw	r26, r24
    22e4:	8c 91       	ld	r24, X
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	b0 e1       	ldi	r27, 0x10	; 16
    22ea:	3b 9f       	mul	r19, r27
    22ec:	80 0d       	add	r24, r0
    22ee:	91 1d       	adc	r25, r1
    22f0:	11 24       	eor	r1, r1
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24
    22f6:	42 2f       	mov	r20, r18
    22f8:	40 7c       	andi	r20, 0xC0	; 192
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	44 0f       	add	r20, r20
    22fe:	55 1f       	adc	r21, r21
    2300:	44 0f       	add	r20, r20
    2302:	55 1f       	adc	r21, r21
    2304:	cb 01       	movw	r24, r22
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	dc 01       	movw	r26, r24
    230a:	8c 91       	ld	r24, X
    230c:	48 0f       	add	r20, r24
    230e:	51 1d       	adc	r21, r1
    2310:	53 83       	std	Z+3, r21	; 0x03
    2312:	42 83       	std	Z+2, r20	; 0x02
    2314:	2f 70       	andi	r18, 0x0F	; 15
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	35 83       	std	Z+5, r19	; 0x05
    231a:	24 83       	std	Z+4, r18	; 0x04
    231c:	6d 5f       	subi	r22, 0xFD	; 253
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	36 96       	adiw	r30, 0x06	; 6
    2322:	e0 17       	cp	r30, r16
    2324:	f1 07       	cpc	r31, r17
    2326:	b9 f6       	brne	.-82     	; 0x22d6 <m_wii_read+0xb0>
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <m_wii_read+0x110>
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	03 c0       	rjmp	.+6      	; 0x2336 <m_wii_read+0x110>
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	01 c0       	rjmp	.+2      	; 0x2336 <m_wii_read+0x110>
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	60 96       	adiw	r28, 0x10	; 16
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	1f 91       	pop	r17
    2348:	0f 91       	pop	r16
    234a:	08 95       	ret

0000234c <get_puck_location>:
Public Functions
************************************************************/

/* Returns x,y, location of puck (angle more accurate) */
void get_puck_location(float* puck_buffer)
{
    234c:	2f 92       	push	r2
    234e:	3f 92       	push	r3
    2350:	4f 92       	push	r4
    2352:	5f 92       	push	r5
    2354:	6f 92       	push	r6
    2356:	7f 92       	push	r7
    2358:	8f 92       	push	r8
    235a:	9f 92       	push	r9
    235c:	af 92       	push	r10
    235e:	bf 92       	push	r11
    2360:	cf 92       	push	r12
    2362:	df 92       	push	r13
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	62 97       	sbiw	r28, 0x12	; 18
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	9a 8b       	std	Y+18, r25	; 0x12
    2382:	89 8b       	std	Y+17, r24	; 0x11
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta
    2384:	ce 01       	movw	r24, r28
    2386:	01 96       	adiw	r24, 0x01	; 1
    2388:	0e 94 5f 09 	call	0x12be	; 0x12be <get_position>
    238c:	0f 2e       	mov	r0, r31
    238e:	f6 ec       	ldi	r31, 0xC6	; 198
    2390:	8f 2e       	mov	r8, r31
    2392:	f1 e0       	ldi	r31, 0x01	; 1
    2394:	9f 2e       	mov	r9, r31
    2396:	f0 2d       	mov	r31, r0
    2398:	0f 2e       	mov	r0, r31
    239a:	fb e2       	ldi	r31, 0x2B	; 43
    239c:	ef 2e       	mov	r14, r31
    239e:	f1 e0       	ldi	r31, 0x01	; 1
    23a0:	ff 2e       	mov	r15, r31
    23a2:	f0 2d       	mov	r31, r0
    23a4:	0f 2e       	mov	r0, r31
    23a6:	f3 e5       	ldi	r31, 0x53	; 83
    23a8:	af 2e       	mov	r10, r31
    23aa:	f1 e0       	ldi	r31, 0x01	; 1
    23ac:	bf 2e       	mov	r11, r31
    23ae:	f0 2d       	mov	r31, r0

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
    23b0:	1d 86       	std	Y+13, r1	; 0x0d
    23b2:	1e 86       	std	Y+14, r1	; 0x0e
    23b4:	1f 86       	std	Y+15, r1	; 0x0f
    23b6:	18 8a       	std	Y+16, r1	; 0x10
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
    23b8:	c1 2c       	mov	r12, r1
    23ba:	d1 2c       	mov	r13, r1
{
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
    23bc:	21 2c       	mov	r2, r1
    23be:	31 2c       	mov	r3, r1
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
		scaler += transistor_vals[i];
    23c0:	f4 01       	movw	r30, r8
    23c2:	01 91       	ld	r16, Z+
    23c4:	11 91       	ld	r17, Z+
    23c6:	4f 01       	movw	r8, r30
    23c8:	c0 0e       	add	r12, r16
    23ca:	d1 1e       	adc	r13, r17
		global_theta += transistor_angles[i] * (float)transistor_vals[i];
    23cc:	f7 01       	movw	r30, r14
    23ce:	41 90       	ld	r4, Z+
    23d0:	51 90       	ld	r5, Z+
    23d2:	61 90       	ld	r6, Z+
    23d4:	71 90       	ld	r7, Z+
    23d6:	7f 01       	movw	r14, r30
    23d8:	b8 01       	movw	r22, r16
    23da:	01 2e       	mov	r0, r17
    23dc:	00 0c       	add	r0, r0
    23de:	88 0b       	sbc	r24, r24
    23e0:	99 0b       	sbc	r25, r25
    23e2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
    23e6:	9b 01       	movw	r18, r22
    23e8:	ac 01       	movw	r20, r24
    23ea:	c3 01       	movw	r24, r6
    23ec:	b2 01       	movw	r22, r4
    23ee:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    23f2:	9b 01       	movw	r18, r22
    23f4:	ac 01       	movw	r20, r24
    23f6:	6d 85       	ldd	r22, Y+13	; 0x0d
    23f8:	7e 85       	ldd	r23, Y+14	; 0x0e
    23fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    23fc:	98 89       	ldd	r25, Y+16	; 0x10
    23fe:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
    2402:	6d 87       	std	Y+13, r22	; 0x0d
    2404:	7e 87       	std	Y+14, r23	; 0x0e
    2406:	8f 87       	std	Y+15, r24	; 0x0f
    2408:	98 8b       	std	Y+16, r25	; 0x10
    240a:	20 16       	cp	r2, r16
    240c:	31 06       	cpc	r3, r17
    240e:	0c f4       	brge	.+2      	; 0x2412 <get_puck_location+0xc6>
    2410:	18 01       	movw	r2, r16

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
    2412:	ea 14       	cp	r14, r10
    2414:	fb 04       	cpc	r15, r11
    2416:	a1 f6       	brne	.-88     	; 0x23c0 <get_puck_location+0x74>
	}
	global_theta = global_theta/((float)scaler);


	/* If no puck found */
	if(max_val<100){
    2418:	f4 e6       	ldi	r31, 0x64	; 100
    241a:	2f 16       	cp	r2, r31
    241c:	31 04       	cpc	r3, r1
    241e:	5c f4       	brge	.+22     	; 0x2436 <get_puck_location+0xea>
		puck_buffer[0] = 0;
    2420:	e9 89       	ldd	r30, Y+17	; 0x11
    2422:	fa 89       	ldd	r31, Y+18	; 0x12
    2424:	10 82       	st	Z, r1
    2426:	11 82       	std	Z+1, r1	; 0x01
    2428:	12 82       	std	Z+2, r1	; 0x02
    242a:	13 82       	std	Z+3, r1	; 0x03
		puck_buffer[1] = 0;
    242c:	14 82       	std	Z+4, r1	; 0x04
    242e:	15 82       	std	Z+5, r1	; 0x05
    2430:	16 82       	std	Z+6, r1	; 0x06
    2432:	17 82       	std	Z+7, r1	; 0x07
    2434:	40 c0       	rjmp	.+128    	; 0x24b6 <get_puck_location+0x16a>

		if(transistor_vals[i]>max_val){
			max_val = transistor_vals[i];
		}
	}
	global_theta = global_theta/((float)scaler);
    2436:	b6 01       	movw	r22, r12
    2438:	dd 0c       	add	r13, r13
    243a:	88 0b       	sbc	r24, r24
    243c:	99 0b       	sbc	r25, r25
    243e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__floatsisf>
    2442:	9b 01       	movw	r18, r22
    2444:	ac 01       	movw	r20, r24
    2446:	6d 85       	ldd	r22, Y+13	; 0x0d
    2448:	7e 85       	ldd	r23, Y+14	; 0x0e
    244a:	8f 85       	ldd	r24, Y+15	; 0x0f
    244c:	98 89       	ldd	r25, Y+16	; 0x10
    244e:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__divsf3>
		puck_buffer[1] = 0;
		return;
	}

	/* Create vector pointing to puck in global coordinates */
	global_theta += position_buffer[2];
    2452:	29 85       	ldd	r18, Y+9	; 0x09
    2454:	3a 85       	ldd	r19, Y+10	; 0x0a
    2456:	4b 85       	ldd	r20, Y+11	; 0x0b
    2458:	5c 85       	ldd	r21, Y+12	; 0x0c
    245a:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
    245e:	6b 01       	movw	r12, r22
    2460:	7c 01       	movw	r14, r24
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN + position_buffer[0]; // Assign X val
    2462:	0e 94 01 15 	call	0x2a02	; 0x2a02 <cos>
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	4f e2       	ldi	r20, 0x2F	; 47
    246c:	54 e4       	ldi	r21, 0x44	; 68
    246e:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    2472:	29 81       	ldd	r18, Y+1	; 0x01
    2474:	3a 81       	ldd	r19, Y+2	; 0x02
    2476:	4b 81       	ldd	r20, Y+3	; 0x03
    2478:	5c 81       	ldd	r21, Y+4	; 0x04
    247a:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
    247e:	e9 89       	ldd	r30, Y+17	; 0x11
    2480:	fa 89       	ldd	r31, Y+18	; 0x12
    2482:	60 83       	st	Z, r22
    2484:	71 83       	std	Z+1, r23	; 0x01
    2486:	82 83       	std	Z+2, r24	; 0x02
    2488:	93 83       	std	Z+3, r25	; 0x03
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN + position_buffer[1]; // Assign Y val
    248a:	c7 01       	movw	r24, r14
    248c:	b6 01       	movw	r22, r12
    248e:	0e 94 39 17 	call	0x2e72	; 0x2e72 <sin>
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4f e2       	ldi	r20, 0x2F	; 47
    2498:	54 e4       	ldi	r21, 0x44	; 68
    249a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    249e:	2d 81       	ldd	r18, Y+5	; 0x05
    24a0:	3e 81       	ldd	r19, Y+6	; 0x06
    24a2:	4f 81       	ldd	r20, Y+7	; 0x07
    24a4:	58 85       	ldd	r21, Y+8	; 0x08
    24a6:	0e 94 1e 14 	call	0x283c	; 0x283c <__addsf3>
    24aa:	e9 89       	ldd	r30, Y+17	; 0x11
    24ac:	fa 89       	ldd	r31, Y+18	; 0x12
    24ae:	64 83       	std	Z+4, r22	; 0x04
    24b0:	75 83       	std	Z+5, r23	; 0x05
    24b2:	86 83       	std	Z+6, r24	; 0x06
    24b4:	97 83       	std	Z+7, r25	; 0x07

}
    24b6:	62 96       	adiw	r28, 0x12	; 18
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	1f 91       	pop	r17
    24c8:	0f 91       	pop	r16
    24ca:	ff 90       	pop	r15
    24cc:	ef 90       	pop	r14
    24ce:	df 90       	pop	r13
    24d0:	cf 90       	pop	r12
    24d2:	bf 90       	pop	r11
    24d4:	af 90       	pop	r10
    24d6:	9f 90       	pop	r9
    24d8:	8f 90       	pop	r8
    24da:	7f 90       	pop	r7
    24dc:	6f 90       	pop	r6
    24de:	5f 90       	pop	r5
    24e0:	4f 90       	pop	r4
    24e2:	3f 90       	pop	r3
    24e4:	2f 90       	pop	r2
    24e6:	08 95       	ret

000024e8 <has_puck>:

/* Return 1 If Has Puck */
char has_puck(void)
{
	if((transistor_3 + transistor_9) > HAS_PUCK_THRESHOLD){
    24e8:	20 91 c4 01 	lds	r18, 0x01C4
    24ec:	30 91 c5 01 	lds	r19, 0x01C5
    24f0:	80 91 c2 01 	lds	r24, 0x01C2
    24f4:	90 91 c3 01 	lds	r25, 0x01C3
    24f8:	28 0f       	add	r18, r24
    24fa:	39 1f       	adc	r19, r25
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	2b 33       	cpi	r18, 0x3B	; 59
    2500:	37 40       	sbci	r19, 0x07	; 7
    2502:	0c f4       	brge	.+2      	; 0x2506 <has_puck+0x1e>
    2504:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	return 0;
}
    2506:	08 95       	ret

00002508 <adc_switch>:
/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated

	clear(ADCSRA,ADEN); // Disable ADC subsystem
    2508:	ea e7       	ldi	r30, 0x7A	; 122
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	8f 77       	andi	r24, 0x7F	; 127
    2510:	80 83       	st	Z, r24
	
	switch(state){
    2512:	e0 91 da 01 	lds	r30, 0x01DA
    2516:	f0 91 db 01 	lds	r31, 0x01DB
    251a:	ec 30       	cpi	r30, 0x0C	; 12
    251c:	f1 05       	cpc	r31, r1
    251e:	08 f0       	brcs	.+2      	; 0x2522 <adc_switch+0x1a>
    2520:	82 c1       	rjmp	.+772    	; 0x2826 <adc_switch+0x31e>
    2522:	ea 5a       	subi	r30, 0xAA	; 170
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__tablejump2__>

		case 0:
			state = 1;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	90 93 db 01 	sts	0x01DB, r25
    2532:	80 93 da 01 	sts	0x01DA, r24
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
    2536:	eb e7       	ldi	r30, 0x7B	; 123
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	8f 7d       	andi	r24, 0xDF	; 223
    253e:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 8
    2540:	ec e7       	ldi	r30, 0x7C	; 124
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	8b 7f       	andi	r24, 0xFB	; 251
    2548:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    254a:	80 81       	ld	r24, Z
    254c:	8d 7f       	andi	r24, 0xFD	; 253
    254e:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2550:	80 81       	ld	r24, Z
    2552:	8e 7f       	andi	r24, 0xFE	; 254
    2554:	80 83       	st	Z, r24
			transistor_vals[2] = ADC;			
    2556:	80 91 78 00 	lds	r24, 0x0078
    255a:	90 91 79 00 	lds	r25, 0x0079
    255e:	90 93 cb 01 	sts	0x01CB, r25
    2562:	80 93 ca 01 	sts	0x01CA, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2566:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
			clear(ADMUX,MUX2); // Transistor 8
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[2] = ADC;			
			break;
    2568:	5f c1       	rjmp	.+702    	; 0x2828 <adc_switch+0x320>

		case 1:
			state = 2;
    256a:	82 e0       	ldi	r24, 0x02	; 2
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	90 93 db 01 	sts	0x01DB, r25
    2572:	80 93 da 01 	sts	0x01DA, r24
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
    2576:	eb e7       	ldi	r30, 0x7B	; 123
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	8f 7d       	andi	r24, 0xDF	; 223
    257e:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 9
    2580:	ec e7       	ldi	r30, 0x7C	; 124
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	8b 7f       	andi	r24, 0xFB	; 251
    2588:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    258a:	80 81       	ld	r24, Z
    258c:	8d 7f       	andi	r24, 0xFD	; 253
    258e:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2590:	80 81       	ld	r24, Z
    2592:	81 60       	ori	r24, 0x01	; 1
    2594:	80 83       	st	Z, r24
			transistor_vals[4] = ADC;			
    2596:	80 91 78 00 	lds	r24, 0x0078
    259a:	90 91 79 00 	lds	r25, 0x0079
    259e:	90 93 cf 01 	sts	0x01CF, r25
    25a2:	80 93 ce 01 	sts	0x01CE, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    25a6:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
			clear(ADMUX,MUX2); // Transistor 9
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[4] = ADC;			
			break;
    25a8:	3f c1       	rjmp	.+638    	; 0x2828 <adc_switch+0x320>

		case 2:
			state = 3;
    25aa:	83 e0       	ldi	r24, 0x03	; 3
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	90 93 db 01 	sts	0x01DB, r25
    25b2:	80 93 da 01 	sts	0x01DA, r24
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
    25b6:	eb e7       	ldi	r30, 0x7B	; 123
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	8f 7d       	andi	r24, 0xDF	; 223
    25be:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 10
    25c0:	ec e7       	ldi	r30, 0x7C	; 124
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	84 60       	ori	r24, 0x04	; 4
    25c8:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    25ca:	80 81       	ld	r24, Z
    25cc:	8d 7f       	andi	r24, 0xFD	; 253
    25ce:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    25d0:	80 81       	ld	r24, Z
    25d2:	8e 7f       	andi	r24, 0xFE	; 254
    25d4:	80 83       	st	Z, r24
			transistor_9 = ADC;			
    25d6:	80 91 78 00 	lds	r24, 0x0078
    25da:	90 91 79 00 	lds	r25, 0x0079
    25de:	90 93 c3 01 	sts	0x01C3, r25
    25e2:	80 93 c2 01 	sts	0x01C2, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    25e6:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
			set(ADMUX,MUX2); // Transistor 10
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_9 = ADC;			
			break;
    25e8:	1f c1       	rjmp	.+574    	; 0x2828 <adc_switch+0x320>

		case 3:
			state = 4;
    25ea:	84 e0       	ldi	r24, 0x04	; 4
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	90 93 db 01 	sts	0x01DB, r25
    25f2:	80 93 da 01 	sts	0x01DA, r24
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
    25f6:	eb e7       	ldi	r30, 0x7B	; 123
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	8f 7d       	andi	r24, 0xDF	; 223
    25fe:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 13
    2600:	ec e7       	ldi	r30, 0x7C	; 124
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	84 60       	ori	r24, 0x04	; 4
    2608:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    260a:	80 81       	ld	r24, Z
    260c:	8d 7f       	andi	r24, 0xFD	; 253
    260e:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2610:	80 81       	ld	r24, Z
    2612:	81 60       	ori	r24, 0x01	; 1
    2614:	80 83       	st	Z, r24
			transistor_vals[5] = ADC;			
    2616:	80 91 78 00 	lds	r24, 0x0078
    261a:	90 91 79 00 	lds	r25, 0x0079
    261e:	90 93 d1 01 	sts	0x01D1, r25
    2622:	80 93 d0 01 	sts	0x01D0, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2626:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
			set(ADMUX,MUX2); // Transistor 13
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[5] = ADC;			
			break;
    2628:	ff c0       	rjmp	.+510    	; 0x2828 <adc_switch+0x320>

		case 4:
			state = 5;
    262a:	85 e0       	ldi	r24, 0x05	; 5
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	90 93 db 01 	sts	0x01DB, r25
    2632:	80 93 da 01 	sts	0x01DA, r24
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
    2636:	eb e7       	ldi	r30, 0x7B	; 123
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	8f 7d       	andi	r24, 0xDF	; 223
    263e:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 14
    2640:	ec e7       	ldi	r30, 0x7C	; 124
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	84 60       	ori	r24, 0x04	; 4
    2648:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    264a:	80 81       	ld	r24, Z
    264c:	82 60       	ori	r24, 0x02	; 2
    264e:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2650:	80 81       	ld	r24, Z
    2652:	8e 7f       	andi	r24, 0xFE	; 254
    2654:	80 83       	st	Z, r24
			transistor_vals[7] = ADC;			
    2656:	80 91 78 00 	lds	r24, 0x0078
    265a:	90 91 79 00 	lds	r25, 0x0079
    265e:	90 93 d5 01 	sts	0x01D5, r25
    2662:	80 93 d4 01 	sts	0x01D4, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2666:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
			set(ADMUX,MUX2); // Transistor 14
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[7] = ADC;			
			break;
    2668:	df c0       	rjmp	.+446    	; 0x2828 <adc_switch+0x320>

		case 5:
			state = 6;
    266a:	86 e0       	ldi	r24, 0x06	; 6
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	90 93 db 01 	sts	0x01DB, r25
    2672:	80 93 da 01 	sts	0x01DA, r24
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
    2676:	eb e7       	ldi	r30, 0x7B	; 123
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8f 7d       	andi	r24, 0xDF	; 223
    267e:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 15
    2680:	ec e7       	ldi	r30, 0x7C	; 124
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	84 60       	ori	r24, 0x04	; 4
    2688:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    268a:	80 81       	ld	r24, Z
    268c:	82 60       	ori	r24, 0x02	; 2
    268e:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2690:	80 81       	ld	r24, Z
    2692:	81 60       	ori	r24, 0x01	; 1
    2694:	80 83       	st	Z, r24
			transistor_vals[8] = ADC;			
    2696:	80 91 78 00 	lds	r24, 0x0078
    269a:	90 91 79 00 	lds	r25, 0x0079
    269e:	90 93 d7 01 	sts	0x01D7, r25
    26a2:	80 93 d6 01 	sts	0x01D6, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    26a6:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
			set(ADMUX,MUX2); // Transistor 15
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[8] = ADC;			
			break;
    26a8:	bf c0       	rjmp	.+382    	; 0x2828 <adc_switch+0x320>

		case 6:
			state = 7;
    26aa:	87 e0       	ldi	r24, 0x07	; 7
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	90 93 db 01 	sts	0x01DB, r25
    26b2:	80 93 da 01 	sts	0x01DA, r24
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
    26b6:	eb e7       	ldi	r30, 0x7B	; 123
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	80 62       	ori	r24, 0x20	; 32
    26be:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 1, 16
    26c0:	ec e7       	ldi	r30, 0x7C	; 124
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	8b 7f       	andi	r24, 0xFB	; 251
    26c8:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    26ca:	80 81       	ld	r24, Z
    26cc:	8d 7f       	andi	r24, 0xFD	; 253
    26ce:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    26d0:	80 81       	ld	r24, Z
    26d2:	8e 7f       	andi	r24, 0xFE	; 254
    26d4:	80 83       	st	Z, r24
			transistor_vals[9] = ADC;			
    26d6:	80 91 78 00 	lds	r24, 0x0078
    26da:	90 91 79 00 	lds	r25, 0x0079
    26de:	90 93 d9 01 	sts	0x01D9, r25
    26e2:	80 93 d8 01 	sts	0x01D8, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    26e6:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
			clear(ADMUX,MUX2); // Transistor 1, 16
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[9] = ADC;			
			break;
    26e8:	9f c0       	rjmp	.+318    	; 0x2828 <adc_switch+0x320>

		case 7:
			state = 8;
    26ea:	88 e0       	ldi	r24, 0x08	; 8
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	90 93 db 01 	sts	0x01DB, r25
    26f2:	80 93 da 01 	sts	0x01DA, r24
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
    26f6:	eb e7       	ldi	r30, 0x7B	; 123
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	80 62       	ori	r24, 0x20	; 32
    26fe:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 11, 12
    2700:	ec e7       	ldi	r30, 0x7C	; 124
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	8b 7f       	andi	r24, 0xFB	; 251
    2708:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    270a:	80 81       	ld	r24, Z
    270c:	8d 7f       	andi	r24, 0xFD	; 253
    270e:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2710:	80 81       	ld	r24, Z
    2712:	81 60       	ori	r24, 0x01	; 1
    2714:	80 83       	st	Z, r24
			transistor_vals[0] = ADC;			
    2716:	80 91 78 00 	lds	r24, 0x0078
    271a:	90 91 79 00 	lds	r25, 0x0079
    271e:	90 93 c7 01 	sts	0x01C7, r25
    2722:	80 93 c6 01 	sts	0x01C6, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2726:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
			clear(ADMUX,MUX2); // Transistor 11, 12
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[0] = ADC;			
			break;
    2728:	7f c0       	rjmp	.+254    	; 0x2828 <adc_switch+0x320>

		case 8:
			state = 9;
    272a:	89 e0       	ldi	r24, 0x09	; 9
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	90 93 db 01 	sts	0x01DB, r25
    2732:	80 93 da 01 	sts	0x01DA, r24
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
    2736:	eb e7       	ldi	r30, 0x7B	; 123
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	80 62       	ori	r24, 0x20	; 32
    273e:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
    2740:	ec e7       	ldi	r30, 0x7C	; 124
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	8b 7f       	andi	r24, 0xFB	; 251
    2748:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    274a:	80 81       	ld	r24, Z
    274c:	82 60       	ori	r24, 0x02	; 2
    274e:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2750:	80 81       	ld	r24, Z
    2752:	8e 7f       	andi	r24, 0xFE	; 254
    2754:	80 83       	st	Z, r24
			transistor_vals[6] = ADC;			
    2756:	80 91 78 00 	lds	r24, 0x0078
    275a:	90 91 79 00 	lds	r25, 0x0079
    275e:	90 93 d3 01 	sts	0x01D3, r25
    2762:	80 93 d2 01 	sts	0x01D2, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2766:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[6] = ADC;			
			break;
    2768:	5f c0       	rjmp	.+190    	; 0x2828 <adc_switch+0x320>

		case 9:
			state = 10;
    276a:	8a e0       	ldi	r24, 0x0A	; 10
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	90 93 db 01 	sts	0x01DB, r25
    2772:	80 93 da 01 	sts	0x01DA, r24
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
    2776:	eb e7       	ldi	r30, 0x7B	; 123
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	80 62       	ori	r24, 0x20	; 32
    277e:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 2
    2780:	ec e7       	ldi	r30, 0x7C	; 124
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	8b 7f       	andi	r24, 0xFB	; 251
    2788:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    278a:	80 81       	ld	r24, Z
    278c:	82 60       	ori	r24, 0x02	; 2
    278e:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2790:	80 81       	ld	r24, Z
    2792:	81 60       	ori	r24, 0x01	; 1
    2794:	80 83       	st	Z, r24
			transistor_vals[3] = ADC;			
    2796:	80 91 78 00 	lds	r24, 0x0078
    279a:	90 91 79 00 	lds	r25, 0x0079
    279e:	90 93 cd 01 	sts	0x01CD, r25
    27a2:	80 93 cc 01 	sts	0x01CC, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    27a6:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
			clear(ADMUX,MUX2); // Transistor 2
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[3] = ADC;			
			break;
    27a8:	3f c0       	rjmp	.+126    	; 0x2828 <adc_switch+0x320>

		case 10:
			state = 11;
    27aa:	8b e0       	ldi	r24, 0x0B	; 11
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	90 93 db 01 	sts	0x01DB, r25
    27b2:	80 93 da 01 	sts	0x01DA, r24
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
    27b6:	eb e7       	ldi	r30, 0x7B	; 123
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	80 62       	ori	r24, 0x20	; 32
    27be:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 3
    27c0:	ec e7       	ldi	r30, 0x7C	; 124
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	84 60       	ori	r24, 0x04	; 4
    27c8:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    27ca:	80 81       	ld	r24, Z
    27cc:	8d 7f       	andi	r24, 0xFD	; 253
    27ce:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    27d0:	80 81       	ld	r24, Z
    27d2:	8e 7f       	andi	r24, 0xFE	; 254
    27d4:	80 83       	st	Z, r24
			transistor_vals[1] = ADC;			
    27d6:	80 91 78 00 	lds	r24, 0x0078
    27da:	90 91 79 00 	lds	r25, 0x0079
    27de:	90 93 c9 01 	sts	0x01C9, r25
    27e2:	80 93 c8 01 	sts	0x01C8, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    27e6:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
			set(ADMUX,MUX2); // Transistor 3
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[1] = ADC;			
			break;
    27e8:	1f c0       	rjmp	.+62     	; 0x2828 <adc_switch+0x320>

		case 11:
			state = 0;
    27ea:	10 92 db 01 	sts	0x01DB, r1
    27ee:	10 92 da 01 	sts	0x01DA, r1
			set(ADCSRB,MUX5); // Select ADC13 at pin B6
    27f2:	eb e7       	ldi	r30, 0x7B	; 123
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	80 62       	ori	r24, 0x20	; 32
    27fa:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 4
    27fc:	ec e7       	ldi	r30, 0x7C	; 124
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	84 60       	ori	r24, 0x04	; 4
    2804:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2806:	80 81       	ld	r24, Z
    2808:	8d 7f       	andi	r24, 0xFD	; 253
    280a:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    280c:	80 81       	ld	r24, Z
    280e:	81 60       	ori	r24, 0x01	; 1
    2810:	80 83       	st	Z, r24
			transistor_3 = ADC;			
    2812:	80 91 78 00 	lds	r24, 0x0078
    2816:	90 91 79 00 	lds	r25, 0x0079
    281a:	90 93 c5 01 	sts	0x01C5, r25
    281e:	80 93 c4 01 	sts	0x01C4, r24
			return_val = 1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
			// m_usb_tx_string("  IR14: ");
			// m_usb_tx_int(transistor_vals[8]);
			// m_usb_tx_string("  IR15: ");
			// m_usb_tx_int(transistor_vals[9]);

			break;
    2824:	01 c0       	rjmp	.+2      	; 0x2828 <adc_switch+0x320>
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2826:	80 e0       	ldi	r24, 0x00	; 0
			// m_usb_tx_int(transistor_vals[9]);

			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
    2828:	ea e7       	ldi	r30, 0x7A	; 122
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	90 81       	ld	r25, Z
    282e:	90 68       	ori	r25, 0x80	; 128
    2830:	90 83       	st	Z, r25
	set(ADCSRA,ADSC); // Begin new conversion
    2832:	90 81       	ld	r25, Z
    2834:	90 64       	ori	r25, 0x40	; 64
    2836:	90 83       	st	Z, r25

	return return_val;
}
    2838:	08 95       	ret

0000283a <__subsf3>:
    283a:	50 58       	subi	r21, 0x80	; 128

0000283c <__addsf3>:
    283c:	bb 27       	eor	r27, r27
    283e:	aa 27       	eor	r26, r26
    2840:	0e 94 35 14 	call	0x286a	; 0x286a <__addsf3x>
    2844:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__fp_round>
    2848:	0e 94 38 16 	call	0x2c70	; 0x2c70 <__fp_pscA>
    284c:	38 f0       	brcs	.+14     	; 0x285c <__addsf3+0x20>
    284e:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__fp_pscB>
    2852:	20 f0       	brcs	.+8      	; 0x285c <__addsf3+0x20>
    2854:	39 f4       	brne	.+14     	; 0x2864 <__addsf3+0x28>
    2856:	9f 3f       	cpi	r25, 0xFF	; 255
    2858:	19 f4       	brne	.+6      	; 0x2860 <__addsf3+0x24>
    285a:	26 f4       	brtc	.+8      	; 0x2864 <__addsf3+0x28>
    285c:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__fp_nan>
    2860:	0e f4       	brtc	.+2      	; 0x2864 <__addsf3+0x28>
    2862:	e0 95       	com	r30
    2864:	e7 fb       	bst	r30, 7
    2866:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__fp_inf>

0000286a <__addsf3x>:
    286a:	e9 2f       	mov	r30, r25
    286c:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__fp_split3>
    2870:	58 f3       	brcs	.-42     	; 0x2848 <__addsf3+0xc>
    2872:	ba 17       	cp	r27, r26
    2874:	62 07       	cpc	r22, r18
    2876:	73 07       	cpc	r23, r19
    2878:	84 07       	cpc	r24, r20
    287a:	95 07       	cpc	r25, r21
    287c:	20 f0       	brcs	.+8      	; 0x2886 <__addsf3x+0x1c>
    287e:	79 f4       	brne	.+30     	; 0x289e <__addsf3x+0x34>
    2880:	a6 f5       	brtc	.+104    	; 0x28ea <__addsf3x+0x80>
    2882:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__fp_zero>
    2886:	0e f4       	brtc	.+2      	; 0x288a <__addsf3x+0x20>
    2888:	e0 95       	com	r30
    288a:	0b 2e       	mov	r0, r27
    288c:	ba 2f       	mov	r27, r26
    288e:	a0 2d       	mov	r26, r0
    2890:	0b 01       	movw	r0, r22
    2892:	b9 01       	movw	r22, r18
    2894:	90 01       	movw	r18, r0
    2896:	0c 01       	movw	r0, r24
    2898:	ca 01       	movw	r24, r20
    289a:	a0 01       	movw	r20, r0
    289c:	11 24       	eor	r1, r1
    289e:	ff 27       	eor	r31, r31
    28a0:	59 1b       	sub	r21, r25
    28a2:	99 f0       	breq	.+38     	; 0x28ca <__addsf3x+0x60>
    28a4:	59 3f       	cpi	r21, 0xF9	; 249
    28a6:	50 f4       	brcc	.+20     	; 0x28bc <__addsf3x+0x52>
    28a8:	50 3e       	cpi	r21, 0xE0	; 224
    28aa:	68 f1       	brcs	.+90     	; 0x2906 <__addsf3x+0x9c>
    28ac:	1a 16       	cp	r1, r26
    28ae:	f0 40       	sbci	r31, 0x00	; 0
    28b0:	a2 2f       	mov	r26, r18
    28b2:	23 2f       	mov	r18, r19
    28b4:	34 2f       	mov	r19, r20
    28b6:	44 27       	eor	r20, r20
    28b8:	58 5f       	subi	r21, 0xF8	; 248
    28ba:	f3 cf       	rjmp	.-26     	; 0x28a2 <__addsf3x+0x38>
    28bc:	46 95       	lsr	r20
    28be:	37 95       	ror	r19
    28c0:	27 95       	ror	r18
    28c2:	a7 95       	ror	r26
    28c4:	f0 40       	sbci	r31, 0x00	; 0
    28c6:	53 95       	inc	r21
    28c8:	c9 f7       	brne	.-14     	; 0x28bc <__addsf3x+0x52>
    28ca:	7e f4       	brtc	.+30     	; 0x28ea <__addsf3x+0x80>
    28cc:	1f 16       	cp	r1, r31
    28ce:	ba 0b       	sbc	r27, r26
    28d0:	62 0b       	sbc	r22, r18
    28d2:	73 0b       	sbc	r23, r19
    28d4:	84 0b       	sbc	r24, r20
    28d6:	ba f0       	brmi	.+46     	; 0x2906 <__addsf3x+0x9c>
    28d8:	91 50       	subi	r25, 0x01	; 1
    28da:	a1 f0       	breq	.+40     	; 0x2904 <__addsf3x+0x9a>
    28dc:	ff 0f       	add	r31, r31
    28de:	bb 1f       	adc	r27, r27
    28e0:	66 1f       	adc	r22, r22
    28e2:	77 1f       	adc	r23, r23
    28e4:	88 1f       	adc	r24, r24
    28e6:	c2 f7       	brpl	.-16     	; 0x28d8 <__addsf3x+0x6e>
    28e8:	0e c0       	rjmp	.+28     	; 0x2906 <__addsf3x+0x9c>
    28ea:	ba 0f       	add	r27, r26
    28ec:	62 1f       	adc	r22, r18
    28ee:	73 1f       	adc	r23, r19
    28f0:	84 1f       	adc	r24, r20
    28f2:	48 f4       	brcc	.+18     	; 0x2906 <__addsf3x+0x9c>
    28f4:	87 95       	ror	r24
    28f6:	77 95       	ror	r23
    28f8:	67 95       	ror	r22
    28fa:	b7 95       	ror	r27
    28fc:	f7 95       	ror	r31
    28fe:	9e 3f       	cpi	r25, 0xFE	; 254
    2900:	08 f0       	brcs	.+2      	; 0x2904 <__addsf3x+0x9a>
    2902:	b0 cf       	rjmp	.-160    	; 0x2864 <__addsf3+0x28>
    2904:	93 95       	inc	r25
    2906:	88 0f       	add	r24, r24
    2908:	08 f0       	brcs	.+2      	; 0x290c <__addsf3x+0xa2>
    290a:	99 27       	eor	r25, r25
    290c:	ee 0f       	add	r30, r30
    290e:	97 95       	ror	r25
    2910:	87 95       	ror	r24
    2912:	08 95       	ret
    2914:	0e 94 38 16 	call	0x2c70	; 0x2c70 <__fp_pscA>
    2918:	60 f0       	brcs	.+24     	; 0x2932 <__addsf3x+0xc8>
    291a:	80 e8       	ldi	r24, 0x80	; 128
    291c:	91 e0       	ldi	r25, 0x01	; 1
    291e:	09 f4       	brne	.+2      	; 0x2922 <__addsf3x+0xb8>
    2920:	9e ef       	ldi	r25, 0xFE	; 254
    2922:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__fp_pscB>
    2926:	28 f0       	brcs	.+10     	; 0x2932 <__addsf3x+0xc8>
    2928:	40 e8       	ldi	r20, 0x80	; 128
    292a:	51 e0       	ldi	r21, 0x01	; 1
    292c:	71 f4       	brne	.+28     	; 0x294a <atan2+0x10>
    292e:	5e ef       	ldi	r21, 0xFE	; 254
    2930:	0c c0       	rjmp	.+24     	; 0x294a <atan2+0x10>
    2932:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__fp_nan>
    2936:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__fp_zero>

0000293a <atan2>:
    293a:	e9 2f       	mov	r30, r25
    293c:	e0 78       	andi	r30, 0x80	; 128
    293e:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__fp_split3>
    2942:	40 f3       	brcs	.-48     	; 0x2914 <__addsf3x+0xaa>
    2944:	09 2e       	mov	r0, r25
    2946:	05 2a       	or	r0, r21
    2948:	b1 f3       	breq	.-20     	; 0x2936 <__addsf3x+0xcc>
    294a:	26 17       	cp	r18, r22
    294c:	37 07       	cpc	r19, r23
    294e:	48 07       	cpc	r20, r24
    2950:	59 07       	cpc	r21, r25
    2952:	38 f0       	brcs	.+14     	; 0x2962 <atan2+0x28>
    2954:	0e 2e       	mov	r0, r30
    2956:	07 f8       	bld	r0, 7
    2958:	e0 25       	eor	r30, r0
    295a:	69 f0       	breq	.+26     	; 0x2976 <atan2+0x3c>
    295c:	e0 25       	eor	r30, r0
    295e:	e0 64       	ori	r30, 0x40	; 64
    2960:	0a c0       	rjmp	.+20     	; 0x2976 <atan2+0x3c>
    2962:	ef 63       	ori	r30, 0x3F	; 63
    2964:	07 f8       	bld	r0, 7
    2966:	00 94       	com	r0
    2968:	07 fa       	bst	r0, 7
    296a:	db 01       	movw	r26, r22
    296c:	b9 01       	movw	r22, r18
    296e:	9d 01       	movw	r18, r26
    2970:	dc 01       	movw	r26, r24
    2972:	ca 01       	movw	r24, r20
    2974:	ad 01       	movw	r20, r26
    2976:	ef 93       	push	r30
    2978:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <__divsf3_pse>
    297c:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__fp_round>
    2980:	0e 94 cd 14 	call	0x299a	; 0x299a <atan>
    2984:	5f 91       	pop	r21
    2986:	55 23       	and	r21, r21
    2988:	39 f0       	breq	.+14     	; 0x2998 <atan2+0x5e>
    298a:	2b ed       	ldi	r18, 0xDB	; 219
    298c:	3f e0       	ldi	r19, 0x0F	; 15
    298e:	49 e4       	ldi	r20, 0x49	; 73
    2990:	50 fd       	sbrc	r21, 0
    2992:	49 ec       	ldi	r20, 0xC9	; 201
    2994:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__addsf3>
    2998:	08 95       	ret

0000299a <atan>:
    299a:	df 93       	push	r29
    299c:	dd 27       	eor	r29, r29
    299e:	b9 2f       	mov	r27, r25
    29a0:	bf 77       	andi	r27, 0x7F	; 127
    29a2:	40 e8       	ldi	r20, 0x80	; 128
    29a4:	5f e3       	ldi	r21, 0x3F	; 63
    29a6:	16 16       	cp	r1, r22
    29a8:	17 06       	cpc	r1, r23
    29aa:	48 07       	cpc	r20, r24
    29ac:	5b 07       	cpc	r21, r27
    29ae:	18 f4       	brcc	.+6      	; 0x29b6 <atan+0x1c>
    29b0:	d9 2f       	mov	r29, r25
    29b2:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <inverse>
    29b6:	9f 93       	push	r25
    29b8:	8f 93       	push	r24
    29ba:	7f 93       	push	r23
    29bc:	6f 93       	push	r22
    29be:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <square>
    29c2:	e4 ec       	ldi	r30, 0xC4	; 196
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__fp_powser>
    29ca:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__fp_round>
    29ce:	2f 91       	pop	r18
    29d0:	3f 91       	pop	r19
    29d2:	4f 91       	pop	r20
    29d4:	5f 91       	pop	r21
    29d6:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__mulsf3x>
    29da:	dd 23       	and	r29, r29
    29dc:	51 f0       	breq	.+20     	; 0x29f2 <atan+0x58>
    29de:	90 58       	subi	r25, 0x80	; 128
    29e0:	a2 ea       	ldi	r26, 0xA2	; 162
    29e2:	2a ed       	ldi	r18, 0xDA	; 218
    29e4:	3f e0       	ldi	r19, 0x0F	; 15
    29e6:	49 ec       	ldi	r20, 0xC9	; 201
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	d0 78       	andi	r29, 0x80	; 128
    29ec:	5d 27       	eor	r21, r29
    29ee:	0e 94 35 14 	call	0x286a	; 0x286a <__addsf3x>
    29f2:	df 91       	pop	r29
    29f4:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__fp_round>

000029f8 <__cmpsf2>:
    29f8:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__fp_cmp>
    29fc:	08 f4       	brcc	.+2      	; 0x2a00 <__cmpsf2+0x8>
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	08 95       	ret

00002a02 <cos>:
    2a02:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__fp_rempio2>
    2a06:	e3 95       	inc	r30
    2a08:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__fp_sinus>

00002a0c <__divsf3>:
    2a0c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__divsf3x>
    2a10:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__fp_round>
    2a14:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__fp_pscB>
    2a18:	58 f0       	brcs	.+22     	; 0x2a30 <__divsf3+0x24>
    2a1a:	0e 94 38 16 	call	0x2c70	; 0x2c70 <__fp_pscA>
    2a1e:	40 f0       	brcs	.+16     	; 0x2a30 <__divsf3+0x24>
    2a20:	29 f4       	brne	.+10     	; 0x2a2c <__divsf3+0x20>
    2a22:	5f 3f       	cpi	r21, 0xFF	; 255
    2a24:	29 f0       	breq	.+10     	; 0x2a30 <__divsf3+0x24>
    2a26:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__fp_inf>
    2a2a:	51 11       	cpse	r21, r1
    2a2c:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__fp_szero>
    2a30:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__fp_nan>

00002a34 <__divsf3x>:
    2a34:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__fp_split3>
    2a38:	68 f3       	brcs	.-38     	; 0x2a14 <__divsf3+0x8>

00002a3a <__divsf3_pse>:
    2a3a:	99 23       	and	r25, r25
    2a3c:	b1 f3       	breq	.-20     	; 0x2a2a <__divsf3+0x1e>
    2a3e:	55 23       	and	r21, r21
    2a40:	91 f3       	breq	.-28     	; 0x2a26 <__divsf3+0x1a>
    2a42:	95 1b       	sub	r25, r21
    2a44:	55 0b       	sbc	r21, r21
    2a46:	bb 27       	eor	r27, r27
    2a48:	aa 27       	eor	r26, r26
    2a4a:	62 17       	cp	r22, r18
    2a4c:	73 07       	cpc	r23, r19
    2a4e:	84 07       	cpc	r24, r20
    2a50:	38 f0       	brcs	.+14     	; 0x2a60 <__divsf3_pse+0x26>
    2a52:	9f 5f       	subi	r25, 0xFF	; 255
    2a54:	5f 4f       	sbci	r21, 0xFF	; 255
    2a56:	22 0f       	add	r18, r18
    2a58:	33 1f       	adc	r19, r19
    2a5a:	44 1f       	adc	r20, r20
    2a5c:	aa 1f       	adc	r26, r26
    2a5e:	a9 f3       	breq	.-22     	; 0x2a4a <__divsf3_pse+0x10>
    2a60:	35 d0       	rcall	.+106    	; 0x2acc <__divsf3_pse+0x92>
    2a62:	0e 2e       	mov	r0, r30
    2a64:	3a f0       	brmi	.+14     	; 0x2a74 <__divsf3_pse+0x3a>
    2a66:	e0 e8       	ldi	r30, 0x80	; 128
    2a68:	32 d0       	rcall	.+100    	; 0x2ace <__divsf3_pse+0x94>
    2a6a:	91 50       	subi	r25, 0x01	; 1
    2a6c:	50 40       	sbci	r21, 0x00	; 0
    2a6e:	e6 95       	lsr	r30
    2a70:	00 1c       	adc	r0, r0
    2a72:	ca f7       	brpl	.-14     	; 0x2a66 <__divsf3_pse+0x2c>
    2a74:	2b d0       	rcall	.+86     	; 0x2acc <__divsf3_pse+0x92>
    2a76:	fe 2f       	mov	r31, r30
    2a78:	29 d0       	rcall	.+82     	; 0x2acc <__divsf3_pse+0x92>
    2a7a:	66 0f       	add	r22, r22
    2a7c:	77 1f       	adc	r23, r23
    2a7e:	88 1f       	adc	r24, r24
    2a80:	bb 1f       	adc	r27, r27
    2a82:	26 17       	cp	r18, r22
    2a84:	37 07       	cpc	r19, r23
    2a86:	48 07       	cpc	r20, r24
    2a88:	ab 07       	cpc	r26, r27
    2a8a:	b0 e8       	ldi	r27, 0x80	; 128
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <__divsf3_pse+0x56>
    2a8e:	bb 0b       	sbc	r27, r27
    2a90:	80 2d       	mov	r24, r0
    2a92:	bf 01       	movw	r22, r30
    2a94:	ff 27       	eor	r31, r31
    2a96:	93 58       	subi	r25, 0x83	; 131
    2a98:	5f 4f       	sbci	r21, 0xFF	; 255
    2a9a:	3a f0       	brmi	.+14     	; 0x2aaa <__divsf3_pse+0x70>
    2a9c:	9e 3f       	cpi	r25, 0xFE	; 254
    2a9e:	51 05       	cpc	r21, r1
    2aa0:	78 f0       	brcs	.+30     	; 0x2ac0 <__divsf3_pse+0x86>
    2aa2:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__fp_inf>
    2aa6:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__fp_szero>
    2aaa:	5f 3f       	cpi	r21, 0xFF	; 255
    2aac:	e4 f3       	brlt	.-8      	; 0x2aa6 <__divsf3_pse+0x6c>
    2aae:	98 3e       	cpi	r25, 0xE8	; 232
    2ab0:	d4 f3       	brlt	.-12     	; 0x2aa6 <__divsf3_pse+0x6c>
    2ab2:	86 95       	lsr	r24
    2ab4:	77 95       	ror	r23
    2ab6:	67 95       	ror	r22
    2ab8:	b7 95       	ror	r27
    2aba:	f7 95       	ror	r31
    2abc:	9f 5f       	subi	r25, 0xFF	; 255
    2abe:	c9 f7       	brne	.-14     	; 0x2ab2 <__divsf3_pse+0x78>
    2ac0:	88 0f       	add	r24, r24
    2ac2:	91 1d       	adc	r25, r1
    2ac4:	96 95       	lsr	r25
    2ac6:	87 95       	ror	r24
    2ac8:	97 f9       	bld	r25, 7
    2aca:	08 95       	ret
    2acc:	e1 e0       	ldi	r30, 0x01	; 1
    2ace:	66 0f       	add	r22, r22
    2ad0:	77 1f       	adc	r23, r23
    2ad2:	88 1f       	adc	r24, r24
    2ad4:	bb 1f       	adc	r27, r27
    2ad6:	62 17       	cp	r22, r18
    2ad8:	73 07       	cpc	r23, r19
    2ada:	84 07       	cpc	r24, r20
    2adc:	ba 07       	cpc	r27, r26
    2ade:	20 f0       	brcs	.+8      	; 0x2ae8 <__divsf3_pse+0xae>
    2ae0:	62 1b       	sub	r22, r18
    2ae2:	73 0b       	sbc	r23, r19
    2ae4:	84 0b       	sbc	r24, r20
    2ae6:	ba 0b       	sbc	r27, r26
    2ae8:	ee 1f       	adc	r30, r30
    2aea:	88 f7       	brcc	.-30     	; 0x2ace <__divsf3_pse+0x94>
    2aec:	e0 95       	com	r30
    2aee:	08 95       	ret

00002af0 <__fixunssfsi>:
    2af0:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fp_splitA>
    2af4:	88 f0       	brcs	.+34     	; 0x2b18 <__fixunssfsi+0x28>
    2af6:	9f 57       	subi	r25, 0x7F	; 127
    2af8:	98 f0       	brcs	.+38     	; 0x2b20 <__fixunssfsi+0x30>
    2afa:	b9 2f       	mov	r27, r25
    2afc:	99 27       	eor	r25, r25
    2afe:	b7 51       	subi	r27, 0x17	; 23
    2b00:	b0 f0       	brcs	.+44     	; 0x2b2e <__fixunssfsi+0x3e>
    2b02:	e1 f0       	breq	.+56     	; 0x2b3c <__fixunssfsi+0x4c>
    2b04:	66 0f       	add	r22, r22
    2b06:	77 1f       	adc	r23, r23
    2b08:	88 1f       	adc	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	1a f0       	brmi	.+6      	; 0x2b14 <__fixunssfsi+0x24>
    2b0e:	ba 95       	dec	r27
    2b10:	c9 f7       	brne	.-14     	; 0x2b04 <__fixunssfsi+0x14>
    2b12:	14 c0       	rjmp	.+40     	; 0x2b3c <__fixunssfsi+0x4c>
    2b14:	b1 30       	cpi	r27, 0x01	; 1
    2b16:	91 f0       	breq	.+36     	; 0x2b3c <__fixunssfsi+0x4c>
    2b18:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__fp_zero>
    2b1c:	b1 e0       	ldi	r27, 0x01	; 1
    2b1e:	08 95       	ret
    2b20:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__fp_zero>
    2b24:	67 2f       	mov	r22, r23
    2b26:	78 2f       	mov	r23, r24
    2b28:	88 27       	eor	r24, r24
    2b2a:	b8 5f       	subi	r27, 0xF8	; 248
    2b2c:	39 f0       	breq	.+14     	; 0x2b3c <__fixunssfsi+0x4c>
    2b2e:	b9 3f       	cpi	r27, 0xF9	; 249
    2b30:	cc f3       	brlt	.-14     	; 0x2b24 <__fixunssfsi+0x34>
    2b32:	86 95       	lsr	r24
    2b34:	77 95       	ror	r23
    2b36:	67 95       	ror	r22
    2b38:	b3 95       	inc	r27
    2b3a:	d9 f7       	brne	.-10     	; 0x2b32 <__fixunssfsi+0x42>
    2b3c:	3e f4       	brtc	.+14     	; 0x2b4c <__fixunssfsi+0x5c>
    2b3e:	90 95       	com	r25
    2b40:	80 95       	com	r24
    2b42:	70 95       	com	r23
    2b44:	61 95       	neg	r22
    2b46:	7f 4f       	sbci	r23, 0xFF	; 255
    2b48:	8f 4f       	sbci	r24, 0xFF	; 255
    2b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4c:	08 95       	ret

00002b4e <__floatunsisf>:
    2b4e:	e8 94       	clt
    2b50:	09 c0       	rjmp	.+18     	; 0x2b64 <__floatsisf+0x12>

00002b52 <__floatsisf>:
    2b52:	97 fb       	bst	r25, 7
    2b54:	3e f4       	brtc	.+14     	; 0x2b64 <__floatsisf+0x12>
    2b56:	90 95       	com	r25
    2b58:	80 95       	com	r24
    2b5a:	70 95       	com	r23
    2b5c:	61 95       	neg	r22
    2b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b60:	8f 4f       	sbci	r24, 0xFF	; 255
    2b62:	9f 4f       	sbci	r25, 0xFF	; 255
    2b64:	99 23       	and	r25, r25
    2b66:	a9 f0       	breq	.+42     	; 0x2b92 <__floatsisf+0x40>
    2b68:	f9 2f       	mov	r31, r25
    2b6a:	96 e9       	ldi	r25, 0x96	; 150
    2b6c:	bb 27       	eor	r27, r27
    2b6e:	93 95       	inc	r25
    2b70:	f6 95       	lsr	r31
    2b72:	87 95       	ror	r24
    2b74:	77 95       	ror	r23
    2b76:	67 95       	ror	r22
    2b78:	b7 95       	ror	r27
    2b7a:	f1 11       	cpse	r31, r1
    2b7c:	f8 cf       	rjmp	.-16     	; 0x2b6e <__floatsisf+0x1c>
    2b7e:	fa f4       	brpl	.+62     	; 0x2bbe <__floatsisf+0x6c>
    2b80:	bb 0f       	add	r27, r27
    2b82:	11 f4       	brne	.+4      	; 0x2b88 <__floatsisf+0x36>
    2b84:	60 ff       	sbrs	r22, 0
    2b86:	1b c0       	rjmp	.+54     	; 0x2bbe <__floatsisf+0x6c>
    2b88:	6f 5f       	subi	r22, 0xFF	; 255
    2b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b90:	16 c0       	rjmp	.+44     	; 0x2bbe <__floatsisf+0x6c>
    2b92:	88 23       	and	r24, r24
    2b94:	11 f0       	breq	.+4      	; 0x2b9a <__floatsisf+0x48>
    2b96:	96 e9       	ldi	r25, 0x96	; 150
    2b98:	11 c0       	rjmp	.+34     	; 0x2bbc <__floatsisf+0x6a>
    2b9a:	77 23       	and	r23, r23
    2b9c:	21 f0       	breq	.+8      	; 0x2ba6 <__floatsisf+0x54>
    2b9e:	9e e8       	ldi	r25, 0x8E	; 142
    2ba0:	87 2f       	mov	r24, r23
    2ba2:	76 2f       	mov	r23, r22
    2ba4:	05 c0       	rjmp	.+10     	; 0x2bb0 <__floatsisf+0x5e>
    2ba6:	66 23       	and	r22, r22
    2ba8:	71 f0       	breq	.+28     	; 0x2bc6 <__floatsisf+0x74>
    2baa:	96 e8       	ldi	r25, 0x86	; 134
    2bac:	86 2f       	mov	r24, r22
    2bae:	70 e0       	ldi	r23, 0x00	; 0
    2bb0:	60 e0       	ldi	r22, 0x00	; 0
    2bb2:	2a f0       	brmi	.+10     	; 0x2bbe <__floatsisf+0x6c>
    2bb4:	9a 95       	dec	r25
    2bb6:	66 0f       	add	r22, r22
    2bb8:	77 1f       	adc	r23, r23
    2bba:	88 1f       	adc	r24, r24
    2bbc:	da f7       	brpl	.-10     	; 0x2bb4 <__floatsisf+0x62>
    2bbe:	88 0f       	add	r24, r24
    2bc0:	96 95       	lsr	r25
    2bc2:	87 95       	ror	r24
    2bc4:	97 f9       	bld	r25, 7
    2bc6:	08 95       	ret

00002bc8 <__fp_cmp>:
    2bc8:	99 0f       	add	r25, r25
    2bca:	00 08       	sbc	r0, r0
    2bcc:	55 0f       	add	r21, r21
    2bce:	aa 0b       	sbc	r26, r26
    2bd0:	e0 e8       	ldi	r30, 0x80	; 128
    2bd2:	fe ef       	ldi	r31, 0xFE	; 254
    2bd4:	16 16       	cp	r1, r22
    2bd6:	17 06       	cpc	r1, r23
    2bd8:	e8 07       	cpc	r30, r24
    2bda:	f9 07       	cpc	r31, r25
    2bdc:	c0 f0       	brcs	.+48     	; 0x2c0e <__fp_cmp+0x46>
    2bde:	12 16       	cp	r1, r18
    2be0:	13 06       	cpc	r1, r19
    2be2:	e4 07       	cpc	r30, r20
    2be4:	f5 07       	cpc	r31, r21
    2be6:	98 f0       	brcs	.+38     	; 0x2c0e <__fp_cmp+0x46>
    2be8:	62 1b       	sub	r22, r18
    2bea:	73 0b       	sbc	r23, r19
    2bec:	84 0b       	sbc	r24, r20
    2bee:	95 0b       	sbc	r25, r21
    2bf0:	39 f4       	brne	.+14     	; 0x2c00 <__fp_cmp+0x38>
    2bf2:	0a 26       	eor	r0, r26
    2bf4:	61 f0       	breq	.+24     	; 0x2c0e <__fp_cmp+0x46>
    2bf6:	23 2b       	or	r18, r19
    2bf8:	24 2b       	or	r18, r20
    2bfa:	25 2b       	or	r18, r21
    2bfc:	21 f4       	brne	.+8      	; 0x2c06 <__fp_cmp+0x3e>
    2bfe:	08 95       	ret
    2c00:	0a 26       	eor	r0, r26
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <__fp_cmp+0x3e>
    2c04:	a1 40       	sbci	r26, 0x01	; 1
    2c06:	a6 95       	lsr	r26
    2c08:	8f ef       	ldi	r24, 0xFF	; 255
    2c0a:	81 1d       	adc	r24, r1
    2c0c:	81 1d       	adc	r24, r1
    2c0e:	08 95       	ret

00002c10 <__fp_inf>:
    2c10:	97 f9       	bld	r25, 7
    2c12:	9f 67       	ori	r25, 0x7F	; 127
    2c14:	80 e8       	ldi	r24, 0x80	; 128
    2c16:	70 e0       	ldi	r23, 0x00	; 0
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	08 95       	ret

00002c1c <__fp_nan>:
    2c1c:	9f ef       	ldi	r25, 0xFF	; 255
    2c1e:	80 ec       	ldi	r24, 0xC0	; 192
    2c20:	08 95       	ret

00002c22 <__fp_powser>:
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	1f 93       	push	r17
    2c28:	0f 93       	push	r16
    2c2a:	ff 92       	push	r15
    2c2c:	ef 92       	push	r14
    2c2e:	df 92       	push	r13
    2c30:	7b 01       	movw	r14, r22
    2c32:	8c 01       	movw	r16, r24
    2c34:	68 94       	set
    2c36:	06 c0       	rjmp	.+12     	; 0x2c44 <__fp_powser+0x22>
    2c38:	da 2e       	mov	r13, r26
    2c3a:	ef 01       	movw	r28, r30
    2c3c:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__mulsf3x>
    2c40:	fe 01       	movw	r30, r28
    2c42:	e8 94       	clt
    2c44:	a5 91       	lpm	r26, Z+
    2c46:	25 91       	lpm	r18, Z+
    2c48:	35 91       	lpm	r19, Z+
    2c4a:	45 91       	lpm	r20, Z+
    2c4c:	55 91       	lpm	r21, Z+
    2c4e:	a6 f3       	brts	.-24     	; 0x2c38 <__fp_powser+0x16>
    2c50:	ef 01       	movw	r28, r30
    2c52:	0e 94 35 14 	call	0x286a	; 0x286a <__addsf3x>
    2c56:	fe 01       	movw	r30, r28
    2c58:	97 01       	movw	r18, r14
    2c5a:	a8 01       	movw	r20, r16
    2c5c:	da 94       	dec	r13
    2c5e:	69 f7       	brne	.-38     	; 0x2c3a <__fp_powser+0x18>
    2c60:	df 90       	pop	r13
    2c62:	ef 90       	pop	r14
    2c64:	ff 90       	pop	r15
    2c66:	0f 91       	pop	r16
    2c68:	1f 91       	pop	r17
    2c6a:	cf 91       	pop	r28
    2c6c:	df 91       	pop	r29
    2c6e:	08 95       	ret

00002c70 <__fp_pscA>:
    2c70:	00 24       	eor	r0, r0
    2c72:	0a 94       	dec	r0
    2c74:	16 16       	cp	r1, r22
    2c76:	17 06       	cpc	r1, r23
    2c78:	18 06       	cpc	r1, r24
    2c7a:	09 06       	cpc	r0, r25
    2c7c:	08 95       	ret

00002c7e <__fp_pscB>:
    2c7e:	00 24       	eor	r0, r0
    2c80:	0a 94       	dec	r0
    2c82:	12 16       	cp	r1, r18
    2c84:	13 06       	cpc	r1, r19
    2c86:	14 06       	cpc	r1, r20
    2c88:	05 06       	cpc	r0, r21
    2c8a:	08 95       	ret
    2c8c:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__fp_nan>

00002c90 <__fp_rempio2>:
    2c90:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fp_splitA>
    2c94:	d8 f3       	brcs	.-10     	; 0x2c8c <__fp_pscB+0xe>
    2c96:	e8 94       	clt
    2c98:	e0 e0       	ldi	r30, 0x00	; 0
    2c9a:	bb 27       	eor	r27, r27
    2c9c:	9f 57       	subi	r25, 0x7F	; 127
    2c9e:	f0 f0       	brcs	.+60     	; 0x2cdc <__fp_rempio2+0x4c>
    2ca0:	2a ed       	ldi	r18, 0xDA	; 218
    2ca2:	3f e0       	ldi	r19, 0x0F	; 15
    2ca4:	49 ec       	ldi	r20, 0xC9	; 201
    2ca6:	06 c0       	rjmp	.+12     	; 0x2cb4 <__fp_rempio2+0x24>
    2ca8:	ee 0f       	add	r30, r30
    2caa:	bb 0f       	add	r27, r27
    2cac:	66 1f       	adc	r22, r22
    2cae:	77 1f       	adc	r23, r23
    2cb0:	88 1f       	adc	r24, r24
    2cb2:	28 f0       	brcs	.+10     	; 0x2cbe <__fp_rempio2+0x2e>
    2cb4:	b2 3a       	cpi	r27, 0xA2	; 162
    2cb6:	62 07       	cpc	r22, r18
    2cb8:	73 07       	cpc	r23, r19
    2cba:	84 07       	cpc	r24, r20
    2cbc:	28 f0       	brcs	.+10     	; 0x2cc8 <__fp_rempio2+0x38>
    2cbe:	b2 5a       	subi	r27, 0xA2	; 162
    2cc0:	62 0b       	sbc	r22, r18
    2cc2:	73 0b       	sbc	r23, r19
    2cc4:	84 0b       	sbc	r24, r20
    2cc6:	e3 95       	inc	r30
    2cc8:	9a 95       	dec	r25
    2cca:	72 f7       	brpl	.-36     	; 0x2ca8 <__fp_rempio2+0x18>
    2ccc:	80 38       	cpi	r24, 0x80	; 128
    2cce:	30 f4       	brcc	.+12     	; 0x2cdc <__fp_rempio2+0x4c>
    2cd0:	9a 95       	dec	r25
    2cd2:	bb 0f       	add	r27, r27
    2cd4:	66 1f       	adc	r22, r22
    2cd6:	77 1f       	adc	r23, r23
    2cd8:	88 1f       	adc	r24, r24
    2cda:	d2 f7       	brpl	.-12     	; 0x2cd0 <__fp_rempio2+0x40>
    2cdc:	90 48       	sbci	r25, 0x80	; 128
    2cde:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__fp_mpack_finite>

00002ce2 <__fp_round>:
    2ce2:	09 2e       	mov	r0, r25
    2ce4:	03 94       	inc	r0
    2ce6:	00 0c       	add	r0, r0
    2ce8:	11 f4       	brne	.+4      	; 0x2cee <__fp_round+0xc>
    2cea:	88 23       	and	r24, r24
    2cec:	52 f0       	brmi	.+20     	; 0x2d02 <__fp_round+0x20>
    2cee:	bb 0f       	add	r27, r27
    2cf0:	40 f4       	brcc	.+16     	; 0x2d02 <__fp_round+0x20>
    2cf2:	bf 2b       	or	r27, r31
    2cf4:	11 f4       	brne	.+4      	; 0x2cfa <__fp_round+0x18>
    2cf6:	60 ff       	sbrs	r22, 0
    2cf8:	04 c0       	rjmp	.+8      	; 0x2d02 <__fp_round+0x20>
    2cfa:	6f 5f       	subi	r22, 0xFF	; 255
    2cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfe:	8f 4f       	sbci	r24, 0xFF	; 255
    2d00:	9f 4f       	sbci	r25, 0xFF	; 255
    2d02:	08 95       	ret

00002d04 <__fp_sinus>:
    2d04:	ef 93       	push	r30
    2d06:	e0 ff       	sbrs	r30, 0
    2d08:	07 c0       	rjmp	.+14     	; 0x2d18 <__fp_sinus+0x14>
    2d0a:	a2 ea       	ldi	r26, 0xA2	; 162
    2d0c:	2a ed       	ldi	r18, 0xDA	; 218
    2d0e:	3f e0       	ldi	r19, 0x0F	; 15
    2d10:	49 ec       	ldi	r20, 0xC9	; 201
    2d12:	5f eb       	ldi	r21, 0xBF	; 191
    2d14:	0e 94 35 14 	call	0x286a	; 0x286a <__addsf3x>
    2d18:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__fp_round>
    2d1c:	0f 90       	pop	r0
    2d1e:	03 94       	inc	r0
    2d20:	01 fc       	sbrc	r0, 1
    2d22:	90 58       	subi	r25, 0x80	; 128
    2d24:	e1 ef       	ldi	r30, 0xF1	; 241
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__fp_powsodd>

00002d2c <__fp_split3>:
    2d2c:	57 fd       	sbrc	r21, 7
    2d2e:	90 58       	subi	r25, 0x80	; 128
    2d30:	44 0f       	add	r20, r20
    2d32:	55 1f       	adc	r21, r21
    2d34:	59 f0       	breq	.+22     	; 0x2d4c <__fp_splitA+0x10>
    2d36:	5f 3f       	cpi	r21, 0xFF	; 255
    2d38:	71 f0       	breq	.+28     	; 0x2d56 <__fp_splitA+0x1a>
    2d3a:	47 95       	ror	r20

00002d3c <__fp_splitA>:
    2d3c:	88 0f       	add	r24, r24
    2d3e:	97 fb       	bst	r25, 7
    2d40:	99 1f       	adc	r25, r25
    2d42:	61 f0       	breq	.+24     	; 0x2d5c <__fp_splitA+0x20>
    2d44:	9f 3f       	cpi	r25, 0xFF	; 255
    2d46:	79 f0       	breq	.+30     	; 0x2d66 <__fp_splitA+0x2a>
    2d48:	87 95       	ror	r24
    2d4a:	08 95       	ret
    2d4c:	12 16       	cp	r1, r18
    2d4e:	13 06       	cpc	r1, r19
    2d50:	14 06       	cpc	r1, r20
    2d52:	55 1f       	adc	r21, r21
    2d54:	f2 cf       	rjmp	.-28     	; 0x2d3a <__fp_split3+0xe>
    2d56:	46 95       	lsr	r20
    2d58:	f1 df       	rcall	.-30     	; 0x2d3c <__fp_splitA>
    2d5a:	08 c0       	rjmp	.+16     	; 0x2d6c <__fp_splitA+0x30>
    2d5c:	16 16       	cp	r1, r22
    2d5e:	17 06       	cpc	r1, r23
    2d60:	18 06       	cpc	r1, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	f1 cf       	rjmp	.-30     	; 0x2d48 <__fp_splitA+0xc>
    2d66:	86 95       	lsr	r24
    2d68:	71 05       	cpc	r23, r1
    2d6a:	61 05       	cpc	r22, r1
    2d6c:	08 94       	sec
    2d6e:	08 95       	ret

00002d70 <__fp_zero>:
    2d70:	e8 94       	clt

00002d72 <__fp_szero>:
    2d72:	bb 27       	eor	r27, r27
    2d74:	66 27       	eor	r22, r22
    2d76:	77 27       	eor	r23, r23
    2d78:	cb 01       	movw	r24, r22
    2d7a:	97 f9       	bld	r25, 7
    2d7c:	08 95       	ret

00002d7e <__gesf2>:
    2d7e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__fp_cmp>
    2d82:	08 f4       	brcc	.+2      	; 0x2d86 <__gesf2+0x8>
    2d84:	8f ef       	ldi	r24, 0xFF	; 255
    2d86:	08 95       	ret

00002d88 <inverse>:
    2d88:	9b 01       	movw	r18, r22
    2d8a:	ac 01       	movw	r20, r24
    2d8c:	60 e0       	ldi	r22, 0x00	; 0
    2d8e:	70 e0       	ldi	r23, 0x00	; 0
    2d90:	80 e8       	ldi	r24, 0x80	; 128
    2d92:	9f e3       	ldi	r25, 0x3F	; 63
    2d94:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__divsf3>

00002d98 <__mulsf3>:
    2d98:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <__mulsf3x>
    2d9c:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__fp_round>
    2da0:	0e 94 38 16 	call	0x2c70	; 0x2c70 <__fp_pscA>
    2da4:	38 f0       	brcs	.+14     	; 0x2db4 <__mulsf3+0x1c>
    2da6:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__fp_pscB>
    2daa:	20 f0       	brcs	.+8      	; 0x2db4 <__mulsf3+0x1c>
    2dac:	95 23       	and	r25, r21
    2dae:	11 f0       	breq	.+4      	; 0x2db4 <__mulsf3+0x1c>
    2db0:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__fp_inf>
    2db4:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__fp_nan>
    2db8:	11 24       	eor	r1, r1
    2dba:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__fp_szero>

00002dbe <__mulsf3x>:
    2dbe:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__fp_split3>
    2dc2:	70 f3       	brcs	.-36     	; 0x2da0 <__mulsf3+0x8>

00002dc4 <__mulsf3_pse>:
    2dc4:	95 9f       	mul	r25, r21
    2dc6:	c1 f3       	breq	.-16     	; 0x2db8 <__mulsf3+0x20>
    2dc8:	95 0f       	add	r25, r21
    2dca:	50 e0       	ldi	r21, 0x00	; 0
    2dcc:	55 1f       	adc	r21, r21
    2dce:	62 9f       	mul	r22, r18
    2dd0:	f0 01       	movw	r30, r0
    2dd2:	72 9f       	mul	r23, r18
    2dd4:	bb 27       	eor	r27, r27
    2dd6:	f0 0d       	add	r31, r0
    2dd8:	b1 1d       	adc	r27, r1
    2dda:	63 9f       	mul	r22, r19
    2ddc:	aa 27       	eor	r26, r26
    2dde:	f0 0d       	add	r31, r0
    2de0:	b1 1d       	adc	r27, r1
    2de2:	aa 1f       	adc	r26, r26
    2de4:	64 9f       	mul	r22, r20
    2de6:	66 27       	eor	r22, r22
    2de8:	b0 0d       	add	r27, r0
    2dea:	a1 1d       	adc	r26, r1
    2dec:	66 1f       	adc	r22, r22
    2dee:	82 9f       	mul	r24, r18
    2df0:	22 27       	eor	r18, r18
    2df2:	b0 0d       	add	r27, r0
    2df4:	a1 1d       	adc	r26, r1
    2df6:	62 1f       	adc	r22, r18
    2df8:	73 9f       	mul	r23, r19
    2dfa:	b0 0d       	add	r27, r0
    2dfc:	a1 1d       	adc	r26, r1
    2dfe:	62 1f       	adc	r22, r18
    2e00:	83 9f       	mul	r24, r19
    2e02:	a0 0d       	add	r26, r0
    2e04:	61 1d       	adc	r22, r1
    2e06:	22 1f       	adc	r18, r18
    2e08:	74 9f       	mul	r23, r20
    2e0a:	33 27       	eor	r19, r19
    2e0c:	a0 0d       	add	r26, r0
    2e0e:	61 1d       	adc	r22, r1
    2e10:	23 1f       	adc	r18, r19
    2e12:	84 9f       	mul	r24, r20
    2e14:	60 0d       	add	r22, r0
    2e16:	21 1d       	adc	r18, r1
    2e18:	82 2f       	mov	r24, r18
    2e1a:	76 2f       	mov	r23, r22
    2e1c:	6a 2f       	mov	r22, r26
    2e1e:	11 24       	eor	r1, r1
    2e20:	9f 57       	subi	r25, 0x7F	; 127
    2e22:	50 40       	sbci	r21, 0x00	; 0
    2e24:	9a f0       	brmi	.+38     	; 0x2e4c <__mulsf3_pse+0x88>
    2e26:	f1 f0       	breq	.+60     	; 0x2e64 <__mulsf3_pse+0xa0>
    2e28:	88 23       	and	r24, r24
    2e2a:	4a f0       	brmi	.+18     	; 0x2e3e <__mulsf3_pse+0x7a>
    2e2c:	ee 0f       	add	r30, r30
    2e2e:	ff 1f       	adc	r31, r31
    2e30:	bb 1f       	adc	r27, r27
    2e32:	66 1f       	adc	r22, r22
    2e34:	77 1f       	adc	r23, r23
    2e36:	88 1f       	adc	r24, r24
    2e38:	91 50       	subi	r25, 0x01	; 1
    2e3a:	50 40       	sbci	r21, 0x00	; 0
    2e3c:	a9 f7       	brne	.-22     	; 0x2e28 <__mulsf3_pse+0x64>
    2e3e:	9e 3f       	cpi	r25, 0xFE	; 254
    2e40:	51 05       	cpc	r21, r1
    2e42:	80 f0       	brcs	.+32     	; 0x2e64 <__mulsf3_pse+0xa0>
    2e44:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__fp_inf>
    2e48:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__fp_szero>
    2e4c:	5f 3f       	cpi	r21, 0xFF	; 255
    2e4e:	e4 f3       	brlt	.-8      	; 0x2e48 <__mulsf3_pse+0x84>
    2e50:	98 3e       	cpi	r25, 0xE8	; 232
    2e52:	d4 f3       	brlt	.-12     	; 0x2e48 <__mulsf3_pse+0x84>
    2e54:	86 95       	lsr	r24
    2e56:	77 95       	ror	r23
    2e58:	67 95       	ror	r22
    2e5a:	b7 95       	ror	r27
    2e5c:	f7 95       	ror	r31
    2e5e:	e7 95       	ror	r30
    2e60:	9f 5f       	subi	r25, 0xFF	; 255
    2e62:	c1 f7       	brne	.-16     	; 0x2e54 <__mulsf3_pse+0x90>
    2e64:	fe 2b       	or	r31, r30
    2e66:	88 0f       	add	r24, r24
    2e68:	91 1d       	adc	r25, r1
    2e6a:	96 95       	lsr	r25
    2e6c:	87 95       	ror	r24
    2e6e:	97 f9       	bld	r25, 7
    2e70:	08 95       	ret

00002e72 <sin>:
    2e72:	9f 93       	push	r25
    2e74:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__fp_rempio2>
    2e78:	0f 90       	pop	r0
    2e7a:	07 fc       	sbrc	r0, 7
    2e7c:	ee 5f       	subi	r30, 0xFE	; 254
    2e7e:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__fp_sinus>
    2e82:	19 f4       	brne	.+6      	; 0x2e8a <sin+0x18>
    2e84:	16 f4       	brtc	.+4      	; 0x2e8a <sin+0x18>
    2e86:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__fp_nan>
    2e8a:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__fp_mpack>

00002e8e <sqrt>:
    2e8e:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fp_splitA>
    2e92:	b8 f3       	brcs	.-18     	; 0x2e82 <sin+0x10>
    2e94:	99 23       	and	r25, r25
    2e96:	c9 f3       	breq	.-14     	; 0x2e8a <sin+0x18>
    2e98:	b6 f3       	brts	.-20     	; 0x2e86 <sin+0x14>
    2e9a:	9f 57       	subi	r25, 0x7F	; 127
    2e9c:	55 0b       	sbc	r21, r21
    2e9e:	87 ff       	sbrs	r24, 7
    2ea0:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__fp_norm2>
    2ea4:	00 24       	eor	r0, r0
    2ea6:	a0 e6       	ldi	r26, 0x60	; 96
    2ea8:	40 ea       	ldi	r20, 0xA0	; 160
    2eaa:	90 01       	movw	r18, r0
    2eac:	80 58       	subi	r24, 0x80	; 128
    2eae:	56 95       	lsr	r21
    2eb0:	97 95       	ror	r25
    2eb2:	28 f4       	brcc	.+10     	; 0x2ebe <sqrt+0x30>
    2eb4:	80 5c       	subi	r24, 0xC0	; 192
    2eb6:	66 0f       	add	r22, r22
    2eb8:	77 1f       	adc	r23, r23
    2eba:	88 1f       	adc	r24, r24
    2ebc:	20 f0       	brcs	.+8      	; 0x2ec6 <sqrt+0x38>
    2ebe:	26 17       	cp	r18, r22
    2ec0:	37 07       	cpc	r19, r23
    2ec2:	48 07       	cpc	r20, r24
    2ec4:	30 f4       	brcc	.+12     	; 0x2ed2 <sqrt+0x44>
    2ec6:	62 1b       	sub	r22, r18
    2ec8:	73 0b       	sbc	r23, r19
    2eca:	84 0b       	sbc	r24, r20
    2ecc:	20 29       	or	r18, r0
    2ece:	31 29       	or	r19, r1
    2ed0:	4a 2b       	or	r20, r26
    2ed2:	a6 95       	lsr	r26
    2ed4:	17 94       	ror	r1
    2ed6:	07 94       	ror	r0
    2ed8:	20 25       	eor	r18, r0
    2eda:	31 25       	eor	r19, r1
    2edc:	4a 27       	eor	r20, r26
    2ede:	58 f7       	brcc	.-42     	; 0x2eb6 <sqrt+0x28>
    2ee0:	66 0f       	add	r22, r22
    2ee2:	77 1f       	adc	r23, r23
    2ee4:	88 1f       	adc	r24, r24
    2ee6:	20 f0       	brcs	.+8      	; 0x2ef0 <sqrt+0x62>
    2ee8:	26 17       	cp	r18, r22
    2eea:	37 07       	cpc	r19, r23
    2eec:	48 07       	cpc	r20, r24
    2eee:	30 f4       	brcc	.+12     	; 0x2efc <sqrt+0x6e>
    2ef0:	62 0b       	sbc	r22, r18
    2ef2:	73 0b       	sbc	r23, r19
    2ef4:	84 0b       	sbc	r24, r20
    2ef6:	20 0d       	add	r18, r0
    2ef8:	31 1d       	adc	r19, r1
    2efa:	41 1d       	adc	r20, r1
    2efc:	a0 95       	com	r26
    2efe:	81 f7       	brne	.-32     	; 0x2ee0 <sqrt+0x52>
    2f00:	b9 01       	movw	r22, r18
    2f02:	84 2f       	mov	r24, r20
    2f04:	91 58       	subi	r25, 0x81	; 129
    2f06:	88 0f       	add	r24, r24
    2f08:	96 95       	lsr	r25
    2f0a:	87 95       	ror	r24
    2f0c:	08 95       	ret

00002f0e <square>:
    2f0e:	9b 01       	movw	r18, r22
    2f10:	ac 01       	movw	r20, r24
    2f12:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__mulsf3>

00002f16 <__fp_mpack>:
    2f16:	9f 3f       	cpi	r25, 0xFF	; 255
    2f18:	31 f0       	breq	.+12     	; 0x2f26 <__fp_mpack_finite+0xc>

00002f1a <__fp_mpack_finite>:
    2f1a:	91 50       	subi	r25, 0x01	; 1
    2f1c:	20 f4       	brcc	.+8      	; 0x2f26 <__fp_mpack_finite+0xc>
    2f1e:	87 95       	ror	r24
    2f20:	77 95       	ror	r23
    2f22:	67 95       	ror	r22
    2f24:	b7 95       	ror	r27
    2f26:	88 0f       	add	r24, r24
    2f28:	91 1d       	adc	r25, r1
    2f2a:	96 95       	lsr	r25
    2f2c:	87 95       	ror	r24
    2f2e:	97 f9       	bld	r25, 7
    2f30:	08 95       	ret

00002f32 <__fp_norm2>:
    2f32:	91 50       	subi	r25, 0x01	; 1
    2f34:	50 40       	sbci	r21, 0x00	; 0
    2f36:	66 0f       	add	r22, r22
    2f38:	77 1f       	adc	r23, r23
    2f3a:	88 1f       	adc	r24, r24
    2f3c:	d2 f7       	brpl	.-12     	; 0x2f32 <__fp_norm2>
    2f3e:	08 95       	ret

00002f40 <__fp_powsodd>:
    2f40:	9f 93       	push	r25
    2f42:	8f 93       	push	r24
    2f44:	7f 93       	push	r23
    2f46:	6f 93       	push	r22
    2f48:	ff 93       	push	r31
    2f4a:	ef 93       	push	r30
    2f4c:	9b 01       	movw	r18, r22
    2f4e:	ac 01       	movw	r20, r24
    2f50:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3>
    2f54:	ef 91       	pop	r30
    2f56:	ff 91       	pop	r31
    2f58:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__fp_powser>
    2f5c:	2f 91       	pop	r18
    2f5e:	3f 91       	pop	r19
    2f60:	4f 91       	pop	r20
    2f62:	5f 91       	pop	r21
    2f64:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__mulsf3>

00002f68 <__tablejump2__>:
    2f68:	ee 0f       	add	r30, r30
    2f6a:	ff 1f       	adc	r31, r31
    2f6c:	05 90       	lpm	r0, Z+
    2f6e:	f4 91       	lpm	r31, Z
    2f70:	e0 2d       	mov	r30, r0
    2f72:	09 94       	ijmp

00002f74 <_exit>:
    2f74:	f8 94       	cli

00002f76 <__stop_program>:
    2f76:	ff cf       	rjmp	.-2      	; 0x2f76 <__stop_program>
