
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00003552  000035e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003552  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008b  0080015a  0080015a  00003640  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00003640  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000036a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  000036e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003377  00000000  00000000  00003a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e6f  00000000  00000000  00006d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000144f  00000000  00000000  00007c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b28  00000000  00000000  00009058  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cce  00000000  00000000  00009b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003dd2  00000000  00000000  0000a84e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  0000e620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 21 01 	jmp	0x242	; 0x242 <__ctors_end>
       4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       c:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__vector_3>
      10:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      14:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      18:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      1c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      20:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      24:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      28:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__vector_10>
      2c:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__vector_11>
      30:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      38:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      3c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      40:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      44:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__vector_17>
      48:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__vector_18>
      4c:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__vector_19>
      50:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      54:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      58:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      5c:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__vector_23>
      60:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      64:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      68:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      6c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      70:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      74:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      78:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      7c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      80:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      84:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      88:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      8c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      90:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      94:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      98:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      9c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ac:	97 09       	sbc	r25, r7
      ae:	9a 09       	sbc	r25, r10
      b0:	9d 09       	sbc	r25, r13
      b2:	a8 09       	sbc	r26, r8
      b4:	b3 09       	sbc	r27, r3
      b6:	bb 09       	sbc	r27, r11
      b8:	b6 09       	sbc	r27, r6
      ba:	b9 09       	sbc	r27, r9
      bc:	de 14       	cp	r13, r14
      be:	fe 14       	cp	r15, r14
      c0:	1e 15       	cp	r17, r14
      c2:	3e 15       	cp	r19, r14
      c4:	5e 15       	cp	r21, r14
      c6:	7e 15       	cp	r23, r14
      c8:	9e 15       	cp	r25, r14
      ca:	be 15       	cp	r27, r14
      cc:	de 15       	cp	r29, r14
      ce:	fe 15       	cp	r31, r14
      d0:	1e 16       	cp	r1, r30
      d2:	3e 16       	cp	r3, r30
      d4:	08 4a       	sbci	r16, 0xA8	; 168
      d6:	d7 3b       	cpi	r29, 0xB7	; 183
      d8:	3b ce       	rjmp	.-906    	; 0xfffffd50 <__eeprom_end+0xff7efd50>
      da:	01 6e       	ori	r16, 0xE1	; 225
      dc:	84 bc       	out	0x24, r8	; 36
      de:	bf fd       	.word	0xfdbf	; ????
      e0:	c1 2f       	mov	r28, r17
      e2:	3d 6c       	ori	r19, 0xCD	; 205
      e4:	74 31       	cpi	r23, 0x14	; 20
      e6:	9a bd       	out	0x2a, r25	; 42
      e8:	56 83       	std	Z+6, r21	; 0x06
      ea:	3d da       	rcall	.-2950   	; 0xfffff566 <__eeprom_end+0xff7ef566>
      ec:	3d 00       	.word	0x003d	; ????
      ee:	c7 7f       	andi	r28, 0xF7	; 247
      f0:	11 be       	out	0x31, r1	; 49
      f2:	d9 e4       	ldi	r29, 0x49	; 73
      f4:	bb 4c       	sbci	r27, 0xCB	; 203
      f6:	3e 91       	ld	r19, -X
      f8:	6b aa       	std	Y+51, r6	; 0x33
      fa:	aa be       	out	0x3a, r10	; 58
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 00       	.word	0x003f	; ????

00000120 <__trampolines_end>:
     120:	00 01       	movw	r0, r0
     122:	00 00       	nop
     124:	b7 01       	movw	r22, r14
     126:	12 00       	.word	0x0012	; ????
     128:	02 00       	.word	0x0002	; ????
     12a:	00 74       	andi	r16, 0x40	; 64
     12c:	01 43       	sbci	r16, 0x31	; 49
     12e:	00 03       	mulsu	r16, r16
     130:	00 00       	nop
     132:	70 01       	movw	r14, r0
     134:	04 01       	movw	r0, r8
     136:	03 09       	sbc	r16, r3
     138:	04 5c       	subi	r16, 0xC4	; 196
     13a:	01 12       	cpse	r0, r17
     13c:	02 03       	mulsu	r16, r18
     13e:	09 04       	cpc	r0, r9
     140:	54 01       	movw	r10, r8
     142:	06 03       	mulsu	r16, r22
     144:	03 09       	sbc	r16, r3
     146:	04 4a       	sbci	r16, 0xA4	; 164
     148:	01 08       	sbc	r0, r1

0000014a <string3>:
     14a:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000154 <string2>:
     154:	06 03 4d 00 32 00 00 00                             ..M.2...

0000015c <string1>:
     15c:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     16c:	65 00 00 00                                         e...

00000170 <string0>:
     170:	04 03 09 04                                         ....

00000174 <config1_descriptor>:
     174:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     184:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     194:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1a4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1b4:	40 00 00                                            @..

000001b7 <device_descriptor>:
     1b7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1c7:	03 01                                               ..

000001c9 <endpoint_config_table>:
     1c9:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000001d3 <__c.2073>:
     1d3:	20 20 49 52 31 35 3a 20 00                            IR15: .

000001dc <__c.2071>:
     1dc:	20 20 49 52 31 34 3a 20 00                            IR14: .

000001e5 <__c.2069>:
     1e5:	20 20 49 52 31 33 3a 20 00                            IR13: .

000001ee <__c.2067>:
     1ee:	20 20 49 52 31 31 2c 31 32 3a 20 00                   IR11,12: .

000001fa <__c.2065>:
     1fa:	20 20 49 52 31 30 3a 20 00                            IR10: .

00000203 <__c.2063>:
     203:	20 20 49 52 39 3a 20 00                               IR9: .

0000020b <__c.2061>:
     20b:	20 20 49 52 38 3a 20 00                               IR8: .

00000213 <__c.2059>:
     213:	20 20 49 52 35 2c 36 2c 37 3a 20 00                   IR5,6,7: .

0000021f <__c.2057>:
     21f:	20 20 49 52 34 3a 20 00                               IR4: .

00000227 <__c.2055>:
     227:	20 20 49 52 33 3a 20 00                               IR3: .

0000022f <__c.2053>:
     22f:	20 20 49 52 32 3a 20 00                               IR2: .

00000237 <__c.2051>:
     237:	0a 49 52 31 2c 31 36 3a 20 00 00                    .IR1,16: ..

00000242 <__ctors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	da e0       	ldi	r29, 0x0A	; 10
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61

0000024e <__do_copy_data>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	a0 e0       	ldi	r26, 0x00	; 0
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	e2 e5       	ldi	r30, 0x52	; 82
     256:	f5 e3       	ldi	r31, 0x35	; 53
     258:	02 c0       	rjmp	.+4      	; 0x25e <__do_copy_data+0x10>
     25a:	05 90       	lpm	r0, Z+
     25c:	0d 92       	st	X+, r0
     25e:	aa 35       	cpi	r26, 0x5A	; 90
     260:	b1 07       	cpc	r27, r17
     262:	d9 f7       	brne	.-10     	; 0x25a <__do_copy_data+0xc>

00000264 <__do_clear_bss>:
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	aa e5       	ldi	r26, 0x5A	; 90
     268:	b1 e0       	ldi	r27, 0x01	; 1
     26a:	01 c0       	rjmp	.+2      	; 0x26e <.do_clear_bss_start>

0000026c <.do_clear_bss_loop>:
     26c:	1d 92       	st	X+, r1

0000026e <.do_clear_bss_start>:
     26e:	a5 3e       	cpi	r26, 0xE5	; 229
     270:	b2 07       	cpc	r27, r18
     272:	e1 f7       	brne	.-8      	; 0x26c <.do_clear_bss_loop>
     274:	0e 94 c8 09 	call	0x1390	; 0x1390 <main>
     278:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <_exit>

0000027c <__bad_interrupt>:
     27c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000280 <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(void) {
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
/************************************************************
Initialization of Pins and System Clock
************************************************************/

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     284:	e1 e6       	ldi	r30, 0x61	; 97
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 e8       	ldi	r24, 0x80	; 128
     28a:	80 83       	st	Z, r24
     28c:	10 82       	st	Z, r1

	// Disable JTAG
	m_disableJTAG(); // turn off JTAG port and allow access to F4-F7 as GPIO
     28e:	85 bf       	out	0x35, r24	; 53
     290:	85 bf       	out	0x35, r24	; 53
	
	//Set to Input
	clear(DDRD,0); // D0
     292:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     294:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     296:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     298:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     29a:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     29c:	23 9a       	sbi	0x04, 3	; 4
	
	set(DDRC,6); //C6 Red positioning LED
     29e:	3e 9a       	sbi	0x07, 6	; 7
	set(DDRC,7); //C7 Blue positioning LED 
     2a0:	3f 9a       	sbi	0x07, 7	; 7
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     2a2:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     2a4:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     2a6:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     2a8:	2b 98       	cbi	0x05, 3	; 5
	
	clear(PORTC,6); //Start with positioning LED off
     2aa:	46 98       	cbi	0x08, 6	; 8
	clear(PORTC,7); 
     2ac:	47 98       	cbi	0x08, 7	; 8

/************************************************************
Setup Subsystems
************************************************************/

	m_bus_init();
     2ae:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <m_bus_init>
	while(!m_wii_open());
     2b2:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <m_wii_open>
     2b6:	88 23       	and	r24, r24
     2b8:	e1 f3       	breq	.-8      	; 0x2b2 <initialize_robockey+0x32>
	sei();
     2ba:	78 94       	sei
	m_usb_init();
     2bc:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <m_usb_init>
	while(!m_rf_open(CHANNEL,RXADDRESS_1,PACKET_LENGTH)); // Configure mRF
     2c0:	4a e0       	ldi	r20, 0x0A	; 10
     2c2:	60 e2       	ldi	r22, 0x20	; 32
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <m_rf_open>
     2ca:	88 23       	and	r24, r24
     2cc:	c9 f3       	breq	.-14     	; 0x2c0 <initialize_robockey+0x40>
/************************************************************
Timer1 Initialization for PWM Motor Control
************************************************************/

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     2ce:	e1 e8       	ldi	r30, 0x81	; 129
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	8b 7f       	andi	r24, 0xFB	; 251
     2d6:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     2d8:	80 81       	ld	r24, Z
     2da:	8d 7f       	andi	r24, 0xFD	; 253
     2dc:	80 83       	st	Z, r24
	clear(TCCR1B,CS10);
     2de:	80 81       	ld	r24, Z
     2e0:	8e 7f       	andi	r24, 0xFE	; 254
     2e2:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     2e4:	80 81       	ld	r24, Z
     2e6:	8f 7e       	andi	r24, 0xEF	; 239
     2e8:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     2ea:	80 81       	ld	r24, Z
     2ec:	88 60       	ori	r24, 0x08	; 8
     2ee:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     2f0:	e0 e8       	ldi	r30, 0x80	; 128
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8d 7f       	andi	r24, 0xFD	; 253
     2f8:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     2fa:	80 81       	ld	r24, Z
     2fc:	8e 7f       	andi	r24, 0xFE	; 254
     2fe:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     300:	80 81       	ld	r24, Z
     302:	8f 7d       	andi	r24, 0xDF	; 223
     304:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     306:	80 81       	ld	r24, Z
     308:	8f 7e       	andi	r24, 0xEF	; 239
     30a:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     30c:	c8 e8       	ldi	r28, 0x88	; 136
     30e:	d0 e0       	ldi	r29, 0x00	; 0
     310:	8a ea       	ldi	r24, 0xAA	; 170
     312:	99 e2       	ldi	r25, 0x29	; 41
     314:	99 83       	std	Y+1, r25	; 0x01
     316:	88 83       	st	Y, r24
	OCR1B = (float)OCR1A*0.1;
     318:	68 81       	ld	r22, Y
     31a:	79 81       	ldd	r23, Y+1	; 0x01
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 5f 18 	call	0x30be	; 0x30be <__floatunsisf>
     324:	2d ec       	ldi	r18, 0xCD	; 205
     326:	3c ec       	ldi	r19, 0xCC	; 204
     328:	4c ec       	ldi	r20, 0xCC	; 204
     32a:	5d e3       	ldi	r21, 0x3D	; 61
     32c:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     330:	0e 94 30 18 	call	0x3060	; 0x3060 <__fixunssfsi>
     334:	70 93 8b 00 	sts	0x008B, r23
     338:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     33c:	68 81       	ld	r22, Y
     33e:	79 81       	ldd	r23, Y+1	; 0x01
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 5f 18 	call	0x30be	; 0x30be <__floatunsisf>
     348:	2d ec       	ldi	r18, 0xCD	; 205
     34a:	3c ec       	ldi	r19, 0xCC	; 204
     34c:	4c ec       	ldi	r20, 0xCC	; 204
     34e:	5d e3       	ldi	r21, 0x3D	; 61
     350:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     354:	0e 94 30 18 	call	0x3060	; 0x3060 <__fixunssfsi>
     358:	70 93 8d 00 	sts	0x008D, r23
     35c:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     360:	ef e6       	ldi	r30, 0x6F	; 111
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	80 81       	ld	r24, Z
     366:	82 60       	ori	r24, 0x02	; 2
     368:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     36a:	80 81       	ld	r24, Z
     36c:	84 60       	ori	r24, 0x04	; 4
     36e:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     370:	80 81       	ld	r24, Z
     372:	88 60       	ori	r24, 0x08	; 8
     374:	80 83       	st	Z, r24

/************************************************************
Timer3 Initialization for fixed timestep calculations
************************************************************/

	clear(TCCR3B,CS32); // prescale /1
     376:	e1 e9       	ldi	r30, 0x91	; 145
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	80 81       	ld	r24, Z
     37c:	8b 7f       	andi	r24, 0xFB	; 251
     37e:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     380:	80 81       	ld	r24, Z
     382:	8d 7f       	andi	r24, 0xFD	; 253
     384:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     386:	80 81       	ld	r24, Z
     388:	81 60       	ori	r24, 0x01	; 1
     38a:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     38c:	80 81       	ld	r24, Z
     38e:	8f 7e       	andi	r24, 0xEF	; 239
     390:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     392:	80 81       	ld	r24, Z
     394:	88 60       	ori	r24, 0x08	; 8
     396:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     398:	e0 e9       	ldi	r30, 0x90	; 144
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	80 81       	ld	r24, Z
     39e:	8d 7f       	andi	r24, 0xFD	; 253
     3a0:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     3a2:	80 81       	ld	r24, Z
     3a4:	8e 7f       	andi	r24, 0xFE	; 254
     3a6:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     3a8:	80 e8       	ldi	r24, 0x80	; 128
     3aa:	9e e3       	ldi	r25, 0x3E	; 62
     3ac:	90 93 99 00 	sts	0x0099, r25
     3b0:	80 93 98 00 	sts	0x0098, r24

/************************************************************
Timer0 Initialization for COMM test 
************************************************************/
	clear(TCCR0B,CS02); //start with timer off
     3b4:	85 b5       	in	r24, 0x25	; 37
     3b6:	8b 7f       	andi	r24, 0xFB	; 251
     3b8:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS01);
     3ba:	85 b5       	in	r24, 0x25	; 37
     3bc:	8d 7f       	andi	r24, 0xFD	; 253
     3be:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS00);
     3c0:	85 b5       	in	r24, 0x25	; 37
     3c2:	8e 7f       	andi	r24, 0xFE	; 254
     3c4:	85 bd       	out	0x25, r24	; 37
	
	clear(TCCR0B,WGM02); //Up to OCR0A mode 
     3c6:	85 b5       	in	r24, 0x25	; 37
     3c8:	87 7f       	andi	r24, 0xF7	; 247
     3ca:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0A,WGM01);
     3cc:	84 b5       	in	r24, 0x24	; 36
     3ce:	8d 7f       	andi	r24, 0xFD	; 253
     3d0:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A,WGM00);
     3d2:	84 b5       	in	r24, 0x24	; 36
     3d4:	8e 7f       	andi	r24, 0xFE	; 254
     3d6:	84 bd       	out	0x24, r24	; 36
		
	set(TIMSK0,TOIE0); //enable interupt at OCR0A
     3d8:	ee e6       	ldi	r30, 0x6E	; 110
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	81 60       	ori	r24, 0x01	; 1
     3e0:	80 83       	st	Z, r24
	
/************************************************************
Setup ADC
************************************************************/
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
     3e2:	cc e7       	ldi	r28, 0x7C	; 124
     3e4:	d0 e0       	ldi	r29, 0x00	; 0
     3e6:	88 81       	ld	r24, Y
     3e8:	8f 77       	andi	r24, 0x7F	; 127
     3ea:	88 83       	st	Y, r24
	set(ADMUX,REFS0);
     3ec:	88 81       	ld	r24, Y
     3ee:	80 64       	ori	r24, 0x40	; 64
     3f0:	88 83       	st	Y, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
     3f2:	ea e7       	ldi	r30, 0x7A	; 122
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	8b 7f       	andi	r24, 0xFB	; 251
     3fa:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     3fc:	80 81       	ld	r24, Z
     3fe:	82 60       	ori	r24, 0x02	; 2
     400:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     402:	80 81       	ld	r24, Z
     404:	81 60       	ori	r24, 0x01	; 1
     406:	80 83       	st	Z, r24
	
	// Disable Digital input to:
	set(DIDR0,ADC0D); // ADC0
     408:	ae e7       	ldi	r26, 0x7E	; 126
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	8c 91       	ld	r24, X
     40e:	81 60       	ori	r24, 0x01	; 1
     410:	8c 93       	st	X, r24
	set(DIDR0,ADC1D); // ADC1
     412:	8c 91       	ld	r24, X
     414:	82 60       	ori	r24, 0x02	; 2
     416:	8c 93       	st	X, r24
	set(DIDR0,ADC4D); // ADC4
     418:	8c 91       	ld	r24, X
     41a:	80 61       	ori	r24, 0x10	; 16
     41c:	8c 93       	st	X, r24
	set(DIDR0,ADC5D); // ADC5
     41e:	8c 91       	ld	r24, X
     420:	80 62       	ori	r24, 0x20	; 32
     422:	8c 93       	st	X, r24
	set(DIDR0,ADC6D); // ADC6
     424:	8c 91       	ld	r24, X
     426:	80 64       	ori	r24, 0x40	; 64
     428:	8c 93       	st	X, r24
	set(DIDR0,ADC7D); // ADC7
     42a:	8c 91       	ld	r24, X
     42c:	80 68       	ori	r24, 0x80	; 128
     42e:	8c 93       	st	X, r24
	set(DIDR2,ADC8D); // ADC8
     430:	ad e7       	ldi	r26, 0x7D	; 125
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	8c 91       	ld	r24, X
     436:	81 60       	ori	r24, 0x01	; 1
     438:	8c 93       	st	X, r24
	set(DIDR2,ADC9D); // ADC9
     43a:	8c 91       	ld	r24, X
     43c:	82 60       	ori	r24, 0x02	; 2
     43e:	8c 93       	st	X, r24
	set(DIDR2,ADC10D); // ADC10
     440:	8c 91       	ld	r24, X
     442:	84 60       	ori	r24, 0x04	; 4
     444:	8c 93       	st	X, r24
	set(DIDR2,ADC11D); // ADC11
     446:	8c 91       	ld	r24, X
     448:	88 60       	ori	r24, 0x08	; 8
     44a:	8c 93       	st	X, r24
	set(DIDR2,ADC12D); // ADC812
     44c:	8c 91       	ld	r24, X
     44e:	80 61       	ori	r24, 0x10	; 16
     450:	8c 93       	st	X, r24
	set(DIDR2,ADC13D); // ADC13
     452:	8c 91       	ld	r24, X
     454:	80 62       	ori	r24, 0x20	; 32
     456:	8c 93       	st	X, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
     458:	80 81       	ld	r24, Z
     45a:	8f 7d       	andi	r24, 0xDF	; 223
     45c:	80 83       	st	Z, r24
	
	set(ADCSRB,MUX5); // Select ADC13 at pin B6
     45e:	ab e7       	ldi	r26, 0x7B	; 123
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	8c 91       	ld	r24, X
     464:	80 62       	ori	r24, 0x20	; 32
     466:	8c 93       	st	X, r24
	set(ADMUX,MUX2); // Transistor 4
     468:	88 81       	ld	r24, Y
     46a:	84 60       	ori	r24, 0x04	; 4
     46c:	88 83       	st	Y, r24
	clear(ADMUX,MUX1);
     46e:	88 81       	ld	r24, Y
     470:	8d 7f       	andi	r24, 0xFD	; 253
     472:	88 83       	st	Y, r24
	set(ADMUX,MUX0);
     474:	88 81       	ld	r24, Y
     476:	81 60       	ori	r24, 0x01	; 1
     478:	88 83       	st	Y, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
     47a:	80 81       	ld	r24, Z
     47c:	80 68       	ori	r24, 0x80	; 128
     47e:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
     480:	80 81       	ld	r24, Z
     482:	80 64       	ori	r24, 0x40	; 64
     484:	80 83       	st	Z, r24
	
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     48c:	82 30       	cpi	r24, 0x02	; 2
     48e:	91 05       	cpc	r25, r1
     490:	f9 f0       	breq	.+62     	; 0x4d0 <distIndex+0x44>
     492:	2c f4       	brge	.+10     	; 0x49e <distIndex+0x12>
     494:	00 97       	sbiw	r24, 0x00	; 0
     496:	51 f0       	breq	.+20     	; 0x4ac <distIndex+0x20>
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	89 f0       	breq	.+34     	; 0x4be <distIndex+0x32>
     49c:	42 c0       	rjmp	.+132    	; 0x522 <distIndex+0x96>
     49e:	84 30       	cpi	r24, 0x04	; 4
     4a0:	91 05       	cpc	r25, r1
     4a2:	51 f1       	breq	.+84     	; 0x4f8 <distIndex+0x6c>
     4a4:	f4 f0       	brlt	.+60     	; 0x4e2 <distIndex+0x56>
     4a6:	05 97       	sbiw	r24, 0x05	; 5
     4a8:	91 f1       	breq	.+100    	; 0x50e <distIndex+0x82>
     4aa:	3b c0       	rjmp	.+118    	; 0x522 <distIndex+0x96>
	{
		case 0 : 
			pointsUsed[0] = 0;
     4ac:	ea e5       	ldi	r30, 0x5A	; 90
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
     4b0:	11 82       	std	Z+1, r1	; 0x01
     4b2:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	93 83       	std	Z+3, r25	; 0x03
     4ba:	82 83       	std	Z+2, r24	; 0x02
			break;
     4bc:	32 c0       	rjmp	.+100    	; 0x522 <distIndex+0x96>
			
		case 1 : 
			pointsUsed[0] = 0;
     4be:	ea e5       	ldi	r30, 0x5A	; 90
     4c0:	f1 e0       	ldi	r31, 0x01	; 1
     4c2:	11 82       	std	Z+1, r1	; 0x01
     4c4:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	93 83       	std	Z+3, r25	; 0x03
     4cc:	82 83       	std	Z+2, r24	; 0x02
			break;
     4ce:	29 c0       	rjmp	.+82     	; 0x522 <distIndex+0x96>
			
		case 2 : 
			pointsUsed[0] = 0;
     4d0:	ea e5       	ldi	r30, 0x5A	; 90
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	11 82       	std	Z+1, r1	; 0x01
     4d6:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	93 83       	std	Z+3, r25	; 0x03
     4de:	82 83       	std	Z+2, r24	; 0x02
			break;
     4e0:	20 c0       	rjmp	.+64     	; 0x522 <distIndex+0x96>
			
		case 3 : 
			pointsUsed[0] = 1;
     4e2:	ea e5       	ldi	r30, 0x5A	; 90
     4e4:	f1 e0       	ldi	r31, 0x01	; 1
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	91 83       	std	Z+1, r25	; 0x01
     4ec:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	93 83       	std	Z+3, r25	; 0x03
     4f4:	82 83       	std	Z+2, r24	; 0x02
			break;
     4f6:	15 c0       	rjmp	.+42     	; 0x522 <distIndex+0x96>
			
		case 4 : 
			pointsUsed[0] = 1;
     4f8:	ea e5       	ldi	r30, 0x5A	; 90
     4fa:	f1 e0       	ldi	r31, 0x01	; 1
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	91 83       	std	Z+1, r25	; 0x01
     502:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     504:	83 e0       	ldi	r24, 0x03	; 3
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	93 83       	std	Z+3, r25	; 0x03
     50a:	82 83       	std	Z+2, r24	; 0x02
			break;
     50c:	0a c0       	rjmp	.+20     	; 0x522 <distIndex+0x96>
			
		case 5 :
			pointsUsed[0] = 2;
     50e:	ea e5       	ldi	r30, 0x5A	; 90
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	91 83       	std	Z+1, r25	; 0x01
     518:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	93 83       	std	Z+3, r25	; 0x03
     520:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     522:	8a e5       	ldi	r24, 0x5A	; 90
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	08 95       	ret

00000528 <orientationCalculationFour>:


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
     528:	2f 92       	push	r2
     52a:	3f 92       	push	r3
     52c:	4f 92       	push	r4
     52e:	5f 92       	push	r5
     530:	6f 92       	push	r6
     532:	7f 92       	push	r7
     534:	8f 92       	push	r8
     536:	9f 92       	push	r9
     538:	af 92       	push	r10
     53a:	bf 92       	push	r11
     53c:	cf 92       	push	r12
     53e:	df 92       	push	r13
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	00 d0       	rcall	.+0      	; 0x54e <orientationCalculationFour+0x26>
     54e:	00 d0       	rcall	.+0      	; 0x550 <orientationCalculationFour+0x28>
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	5c 01       	movw	r10, r24
     556:	4a 01       	movw	r8, r20
     558:	3a 83       	std	Y+2, r19	; 0x02
     55a:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     55c:	06 2f       	mov	r16, r22
     55e:	17 2f       	mov	r17, r23
     560:	f8 01       	movw	r30, r16
     562:	41 90       	ld	r4, Z+
     564:	51 90       	ld	r5, Z+
     566:	61 90       	ld	r6, Z+
     568:	71 90       	ld	r7, Z+
     56a:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     56c:	1c 82       	std	Y+4, r1	; 0x04
     56e:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     570:	21 2c       	mov	r2, r1
     572:	31 2c       	mov	r3, r1
     574:	12 c0       	rjmp	.+36     	; 0x59a <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     576:	f8 01       	movw	r30, r16
     578:	c1 90       	ld	r12, Z+
     57a:	d1 90       	ld	r13, Z+
     57c:	e1 90       	ld	r14, Z+
     57e:	f1 90       	ld	r15, Z+
     580:	8f 01       	movw	r16, r30
     582:	a7 01       	movw	r20, r14
     584:	96 01       	movw	r18, r12
     586:	c3 01       	movw	r24, r6
     588:	b2 01       	movw	r22, r4
     58a:	0e 94 77 19 	call	0x32ee	; 0x32ee <__gesf2>
     58e:	18 16       	cp	r1, r24
     590:	24 f4       	brge	.+8      	; 0x59a <orientationCalculationFour+0x72>
     592:	26 01       	movw	r4, r12
     594:	37 01       	movw	r6, r14
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     596:	2b 80       	ldd	r2, Y+3	; 0x03
     598:	3c 80       	ldd	r3, Y+4	; 0x04
     59a:	8b 81       	ldd	r24, Y+3	; 0x03
     59c:	9c 81       	ldd	r25, Y+4	; 0x04
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	9c 83       	std	Y+4, r25	; 0x04
     5a2:	8b 83       	std	Y+3, r24	; 0x03
     5a4:	06 97       	sbiw	r24, 0x06	; 6
     5a6:	39 f7       	brne	.-50     	; 0x576 <orientationCalculationFour+0x4e>
		}
	}
	
	//Find points used by shortest length	
	int* pointsShortRef;
	pointsShortRef = distIndex(indexMin);	
     5a8:	82 2d       	mov	r24, r2
     5aa:	93 2d       	mov	r25, r3
     5ac:	0e 94 46 02 	call	0x48c	; 0x48c <distIndex>
	int pointsShort[2] = {pointsShortRef[0], pointsShortRef[1]};	
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 81       	ld	r18, Z
     5b4:	31 81       	ldd	r19, Z+1	; 0x01
     5b6:	62 81       	ldd	r22, Z+2	; 0x02
     5b8:	73 81       	ldd	r23, Z+3	; 0x03
	if (pointsShort[0] == pointsLong[0]){
     5ba:	f5 01       	movw	r30, r10
     5bc:	40 81       	ld	r20, Z
     5be:	51 81       	ldd	r21, Z+1	; 0x01
     5c0:	24 17       	cp	r18, r20
     5c2:	35 07       	cpc	r19, r21
     5c4:	59 f4       	brne	.+22     	; 0x5dc <orientationCalculationFour+0xb4>
		*top = pointsLong[0];
     5c6:	f4 01       	movw	r30, r8
     5c8:	31 83       	std	Z+1, r19	; 0x01
     5ca:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     5cc:	f5 01       	movw	r30, r10
     5ce:	82 81       	ldd	r24, Z+2	; 0x02
     5d0:	93 81       	ldd	r25, Z+3	; 0x03
     5d2:	e9 81       	ldd	r30, Y+1	; 0x01
     5d4:	fa 81       	ldd	r31, Y+2	; 0x02
     5d6:	91 83       	std	Z+1, r25	; 0x01
     5d8:	80 83       	st	Z, r24
     5da:	37 c0       	rjmp	.+110    	; 0x64a <orientationCalculationFour+0x122>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     5dc:	f5 01       	movw	r30, r10
     5de:	82 81       	ldd	r24, Z+2	; 0x02
     5e0:	93 81       	ldd	r25, Z+3	; 0x03
     5e2:	28 17       	cp	r18, r24
     5e4:	39 07       	cpc	r19, r25
     5e6:	59 f4       	brne	.+22     	; 0x5fe <orientationCalculationFour+0xd6>
			*top = pointsLong[1];
     5e8:	f4 01       	movw	r30, r8
     5ea:	31 83       	std	Z+1, r19	; 0x01
     5ec:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     5ee:	f5 01       	movw	r30, r10
     5f0:	80 81       	ld	r24, Z
     5f2:	91 81       	ldd	r25, Z+1	; 0x01
     5f4:	e9 81       	ldd	r30, Y+1	; 0x01
     5f6:	fa 81       	ldd	r31, Y+2	; 0x02
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	80 83       	st	Z, r24
     5fc:	26 c0       	rjmp	.+76     	; 0x64a <orientationCalculationFour+0x122>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     5fe:	64 17       	cp	r22, r20
     600:	75 07       	cpc	r23, r21
     602:	59 f4       	brne	.+22     	; 0x61a <orientationCalculationFour+0xf2>
				*top = pointsLong[0];
     604:	f4 01       	movw	r30, r8
     606:	71 83       	std	Z+1, r23	; 0x01
     608:	60 83       	st	Z, r22
				*bottom = pointsLong[1];
     60a:	f5 01       	movw	r30, r10
     60c:	82 81       	ldd	r24, Z+2	; 0x02
     60e:	93 81       	ldd	r25, Z+3	; 0x03
     610:	e9 81       	ldd	r30, Y+1	; 0x01
     612:	fa 81       	ldd	r31, Y+2	; 0x02
     614:	91 83       	std	Z+1, r25	; 0x01
     616:	80 83       	st	Z, r24
     618:	18 c0       	rjmp	.+48     	; 0x64a <orientationCalculationFour+0x122>
			} else {
				if (pointsShort[1] == pointsLong[1])
     61a:	68 17       	cp	r22, r24
     61c:	79 07       	cpc	r23, r25
     61e:	59 f4       	brne	.+22     	; 0x636 <orientationCalculationFour+0x10e>
				{
					*top = pointsLong[1];
     620:	f4 01       	movw	r30, r8
     622:	71 83       	std	Z+1, r23	; 0x01
     624:	60 83       	st	Z, r22
					*bottom = pointsLong[0];
     626:	f5 01       	movw	r30, r10
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	e9 81       	ldd	r30, Y+1	; 0x01
     62e:	fa 81       	ldd	r31, Y+2	; 0x02
     630:	91 83       	std	Z+1, r25	; 0x01
     632:	80 83       	st	Z, r24
     634:	0a c0       	rjmp	.+20     	; 0x64a <orientationCalculationFour+0x122>
				} else {
						*top = pointsLong[1];
     636:	f4 01       	movw	r30, r8
     638:	91 83       	std	Z+1, r25	; 0x01
     63a:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     63c:	f5 01       	movw	r30, r10
     63e:	80 81       	ld	r24, Z
     640:	91 81       	ldd	r25, Z+1	; 0x01
     642:	e9 81       	ldd	r30, Y+1	; 0x01
     644:	fa 81       	ldd	r31, Y+2	; 0x02
     646:	91 83       	std	Z+1, r25	; 0x01
     648:	80 83       	st	Z, r24
				}
			}
		}
	}
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	df 90       	pop	r13
     660:	cf 90       	pop	r12
     662:	bf 90       	pop	r11
     664:	af 90       	pop	r10
     666:	9f 90       	pop	r9
     668:	8f 90       	pop	r8
     66a:	7f 90       	pop	r7
     66c:	6f 90       	pop	r6
     66e:	5f 90       	pop	r5
     670:	4f 90       	pop	r4
     672:	3f 90       	pop	r3
     674:	2f 90       	pop	r2
     676:	08 95       	ret

00000678 <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     678:	2f 92       	push	r2
     67a:	3f 92       	push	r3
     67c:	4f 92       	push	r4
     67e:	5f 92       	push	r5
     680:	6f 92       	push	r6
     682:	7f 92       	push	r7
     684:	8f 92       	push	r8
     686:	9f 92       	push	r9
     688:	af 92       	push	r10
     68a:	bf 92       	push	r11
     68c:	cf 92       	push	r12
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	c2 54       	subi	r28, 0x42	; 66
     6a2:	d1 09       	sbc	r29, r1
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     6b0:	fc 01       	movw	r30, r24
     6b2:	04 80       	ldd	r0, Z+4	; 0x04
     6b4:	f5 81       	ldd	r31, Z+5	; 0x05
     6b6:	e0 2d       	mov	r30, r0
     6b8:	fa a3       	std	Y+34, r31	; 0x22
     6ba:	e9 a3       	std	Y+33, r30	; 0x21
     6bc:	fc 01       	movw	r30, r24
     6be:	00 81       	ld	r16, Z
     6c0:	11 81       	ldd	r17, Z+1	; 0x01
     6c2:	69 a1       	ldd	r22, Y+33	; 0x21
     6c4:	7a a1       	ldd	r23, Y+34	; 0x22
     6c6:	60 1b       	sub	r22, r16
     6c8:	71 0b       	sbc	r23, r17
     6ca:	07 2e       	mov	r0, r23
     6cc:	00 0c       	add	r0, r0
     6ce:	88 0b       	sbc	r24, r24
     6d0:	99 0b       	sbc	r25, r25
     6d2:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     6d6:	6b 01       	movw	r12, r22
     6d8:	7c 01       	movw	r14, r24
     6da:	f2 01       	movw	r30, r4
     6dc:	06 80       	ldd	r0, Z+6	; 0x06
     6de:	f7 81       	ldd	r31, Z+7	; 0x07
     6e0:	e0 2d       	mov	r30, r0
     6e2:	fe a3       	std	Y+38, r31	; 0x26
     6e4:	ed a3       	std	Y+37, r30	; 0x25
     6e6:	f2 01       	movw	r30, r4
     6e8:	22 80       	ldd	r2, Z+2	; 0x02
     6ea:	33 80       	ldd	r3, Z+3	; 0x03
     6ec:	ad a0       	ldd	r10, Y+37	; 0x25
     6ee:	be a0       	ldd	r11, Y+38	; 0x26
     6f0:	a2 18       	sub	r10, r2
     6f2:	b3 08       	sbc	r11, r3
     6f4:	9b 01       	movw	r18, r22
     6f6:	ac 01       	movw	r20, r24
     6f8:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     6fc:	69 a7       	std	Y+41, r22	; 0x29
     6fe:	7a a7       	std	Y+42, r23	; 0x2a
     700:	8b a7       	std	Y+43, r24	; 0x2b
     702:	9c a7       	std	Y+44, r25	; 0x2c
     704:	aa 9c       	mul	r10, r10
     706:	40 01       	movw	r8, r0
     708:	ab 9c       	mul	r10, r11
     70a:	90 0c       	add	r9, r0
     70c:	90 0c       	add	r9, r0
     70e:	11 24       	eor	r1, r1
     710:	09 2c       	mov	r0, r9
     712:	00 0c       	add	r0, r0
     714:	aa 08       	sbc	r10, r10
     716:	bb 08       	sbc	r11, r11
     718:	a7 01       	movw	r20, r14
     71a:	96 01       	movw	r18, r12
     71c:	c7 01       	movw	r24, r14
     71e:	b6 01       	movw	r22, r12
     720:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     724:	6b 01       	movw	r12, r22
     726:	7c 01       	movw	r14, r24
     728:	c5 01       	movw	r24, r10
     72a:	b4 01       	movw	r22, r8
     72c:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     730:	9b 01       	movw	r18, r22
     732:	ac 01       	movw	r20, r24
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
     73c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <sqrt>
     740:	6b af       	std	Y+59, r22	; 0x3b
     742:	7c af       	std	Y+60, r23	; 0x3c
     744:	8d af       	std	Y+61, r24	; 0x3d
     746:	9e af       	std	Y+62, r25	; 0x3e
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     748:	f2 01       	movw	r30, r4
     74a:	00 84       	ldd	r0, Z+8	; 0x08
     74c:	f1 85       	ldd	r31, Z+9	; 0x09
     74e:	e0 2d       	mov	r30, r0
     750:	fa a7       	std	Y+42, r31	; 0x2a
     752:	e9 a7       	std	Y+41, r30	; 0x29
     754:	bf 01       	movw	r22, r30
     756:	60 1b       	sub	r22, r16
     758:	71 0b       	sbc	r23, r17
     75a:	07 2e       	mov	r0, r23
     75c:	00 0c       	add	r0, r0
     75e:	88 0b       	sbc	r24, r24
     760:	99 0b       	sbc	r25, r25
     762:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     766:	6b 01       	movw	r12, r22
     768:	7c 01       	movw	r14, r24
     76a:	f2 01       	movw	r30, r4
     76c:	62 84       	ldd	r6, Z+10	; 0x0a
     76e:	73 84       	ldd	r7, Z+11	; 0x0b
     770:	53 01       	movw	r10, r6
     772:	a2 18       	sub	r10, r2
     774:	b3 08       	sbc	r11, r3
     776:	9b 01       	movw	r18, r22
     778:	ac 01       	movw	r20, r24
     77a:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     77e:	6d a7       	std	Y+45, r22	; 0x2d
     780:	7e a7       	std	Y+46, r23	; 0x2e
     782:	8f a7       	std	Y+47, r24	; 0x2f
     784:	98 ab       	std	Y+48, r25	; 0x30
     786:	aa 9c       	mul	r10, r10
     788:	40 01       	movw	r8, r0
     78a:	ab 9c       	mul	r10, r11
     78c:	90 0c       	add	r9, r0
     78e:	90 0c       	add	r9, r0
     790:	11 24       	eor	r1, r1
     792:	09 2c       	mov	r0, r9
     794:	00 0c       	add	r0, r0
     796:	aa 08       	sbc	r10, r10
     798:	bb 08       	sbc	r11, r11
     79a:	a7 01       	movw	r20, r14
     79c:	96 01       	movw	r18, r12
     79e:	c7 01       	movw	r24, r14
     7a0:	b6 01       	movw	r22, r12
     7a2:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     7a6:	6b 01       	movw	r12, r22
     7a8:	7c 01       	movw	r14, r24
     7aa:	c5 01       	movw	r24, r10
     7ac:	b4 01       	movw	r22, r8
     7ae:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     7b2:	9b 01       	movw	r18, r22
     7b4:	ac 01       	movw	r20, r24
     7b6:	c7 01       	movw	r24, r14
     7b8:	b6 01       	movw	r22, r12
     7ba:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
     7be:	0e 94 ff 19 	call	0x33fe	; 0x33fe <sqrt>
     7c2:	23 96       	adiw	r28, 0x03	; 3
     7c4:	6c af       	std	Y+60, r22	; 0x3c
     7c6:	7d af       	std	Y+61, r23	; 0x3d
     7c8:	8e af       	std	Y+62, r24	; 0x3e
     7ca:	9f af       	std	Y+63, r25	; 0x3f
     7cc:	23 97       	sbiw	r28, 0x03	; 3
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     7ce:	f2 01       	movw	r30, r4
     7d0:	04 84       	ldd	r0, Z+12	; 0x0c
     7d2:	f5 85       	ldd	r31, Z+13	; 0x0d
     7d4:	e0 2d       	mov	r30, r0
     7d6:	fe a7       	std	Y+46, r31	; 0x2e
     7d8:	ed a7       	std	Y+45, r30	; 0x2d
     7da:	bf 01       	movw	r22, r30
     7dc:	60 1b       	sub	r22, r16
     7de:	71 0b       	sbc	r23, r17
     7e0:	07 2e       	mov	r0, r23
     7e2:	00 0c       	add	r0, r0
     7e4:	88 0b       	sbc	r24, r24
     7e6:	99 0b       	sbc	r25, r25
     7e8:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     7ec:	4b 01       	movw	r8, r22
     7ee:	5c 01       	movw	r10, r24
     7f0:	f2 01       	movw	r30, r4
     7f2:	06 84       	ldd	r0, Z+14	; 0x0e
     7f4:	f7 85       	ldd	r31, Z+15	; 0x0f
     7f6:	e0 2d       	mov	r30, r0
     7f8:	fa ab       	std	Y+50, r31	; 0x32
     7fa:	e9 ab       	std	Y+49, r30	; 0x31
     7fc:	8f 01       	movw	r16, r30
     7fe:	02 19       	sub	r16, r2
     800:	13 09       	sbc	r17, r3
     802:	9b 01       	movw	r18, r22
     804:	ac 01       	movw	r20, r24
     806:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     80a:	6b ab       	std	Y+51, r22	; 0x33
     80c:	7c ab       	std	Y+52, r23	; 0x34
     80e:	8d ab       	std	Y+53, r24	; 0x35
     810:	9e ab       	std	Y+54, r25	; 0x36
     812:	00 9f       	mul	r16, r16
     814:	60 01       	movw	r12, r0
     816:	01 9f       	mul	r16, r17
     818:	d0 0c       	add	r13, r0
     81a:	d0 0c       	add	r13, r0
     81c:	11 24       	eor	r1, r1
     81e:	0d 2c       	mov	r0, r13
     820:	00 0c       	add	r0, r0
     822:	ee 08       	sbc	r14, r14
     824:	ff 08       	sbc	r15, r15
     826:	a5 01       	movw	r20, r10
     828:	94 01       	movw	r18, r8
     82a:	c5 01       	movw	r24, r10
     82c:	b4 01       	movw	r22, r8
     82e:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     832:	4b 01       	movw	r8, r22
     834:	5c 01       	movw	r10, r24
     836:	c7 01       	movw	r24, r14
     838:	b6 01       	movw	r22, r12
     83a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     83e:	9b 01       	movw	r18, r22
     840:	ac 01       	movw	r20, r24
     842:	c5 01       	movw	r24, r10
     844:	b4 01       	movw	r22, r8
     846:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
     84a:	0e 94 ff 19 	call	0x33fe	; 0x33fe <sqrt>
     84e:	6b ab       	std	Y+51, r22	; 0x33
     850:	7c ab       	std	Y+52, r23	; 0x34
     852:	8d ab       	std	Y+53, r24	; 0x35
     854:	9e ab       	std	Y+54, r25	; 0x36
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     856:	69 a5       	ldd	r22, Y+41	; 0x29
     858:	7a a5       	ldd	r23, Y+42	; 0x2a
     85a:	29 a1       	ldd	r18, Y+33	; 0x21
     85c:	3a a1       	ldd	r19, Y+34	; 0x22
     85e:	62 1b       	sub	r22, r18
     860:	73 0b       	sbc	r23, r19
     862:	07 2e       	mov	r0, r23
     864:	00 0c       	add	r0, r0
     866:	88 0b       	sbc	r24, r24
     868:	99 0b       	sbc	r25, r25
     86a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     86e:	4b 01       	movw	r8, r22
     870:	5c 01       	movw	r10, r24
     872:	83 01       	movw	r16, r6
     874:	4d a1       	ldd	r20, Y+37	; 0x25
     876:	5e a1       	ldd	r21, Y+38	; 0x26
     878:	04 1b       	sub	r16, r20
     87a:	15 0b       	sbc	r17, r21
     87c:	9b 01       	movw	r18, r22
     87e:	ac 01       	movw	r20, r24
     880:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     884:	6f ab       	std	Y+55, r22	; 0x37
     886:	78 af       	std	Y+56, r23	; 0x38
     888:	89 af       	std	Y+57, r24	; 0x39
     88a:	9a af       	std	Y+58, r25	; 0x3a
     88c:	00 9f       	mul	r16, r16
     88e:	60 01       	movw	r12, r0
     890:	01 9f       	mul	r16, r17
     892:	d0 0c       	add	r13, r0
     894:	d0 0c       	add	r13, r0
     896:	11 24       	eor	r1, r1
     898:	0d 2c       	mov	r0, r13
     89a:	00 0c       	add	r0, r0
     89c:	ee 08       	sbc	r14, r14
     89e:	ff 08       	sbc	r15, r15
     8a0:	a5 01       	movw	r20, r10
     8a2:	94 01       	movw	r18, r8
     8a4:	c5 01       	movw	r24, r10
     8a6:	b4 01       	movw	r22, r8
     8a8:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     8ac:	4b 01       	movw	r8, r22
     8ae:	5c 01       	movw	r10, r24
     8b0:	c7 01       	movw	r24, r14
     8b2:	b6 01       	movw	r22, r12
     8b4:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     8b8:	9b 01       	movw	r18, r22
     8ba:	ac 01       	movw	r20, r24
     8bc:	c5 01       	movw	r24, r10
     8be:	b4 01       	movw	r22, r8
     8c0:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
     8c4:	0e 94 ff 19 	call	0x33fe	; 0x33fe <sqrt>
     8c8:	6f ab       	std	Y+55, r22	; 0x37
     8ca:	78 af       	std	Y+56, r23	; 0x38
     8cc:	89 af       	std	Y+57, r24	; 0x39
     8ce:	9a af       	std	Y+58, r25	; 0x3a
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     8d0:	6d a5       	ldd	r22, Y+45	; 0x2d
     8d2:	7e a5       	ldd	r23, Y+46	; 0x2e
     8d4:	89 a1       	ldd	r24, Y+33	; 0x21
     8d6:	9a a1       	ldd	r25, Y+34	; 0x22
     8d8:	68 1b       	sub	r22, r24
     8da:	79 0b       	sbc	r23, r25
     8dc:	07 2e       	mov	r0, r23
     8de:	00 0c       	add	r0, r0
     8e0:	88 0b       	sbc	r24, r24
     8e2:	99 0b       	sbc	r25, r25
     8e4:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     8e8:	4b 01       	movw	r8, r22
     8ea:	5c 01       	movw	r10, r24
     8ec:	09 a9       	ldd	r16, Y+49	; 0x31
     8ee:	1a a9       	ldd	r17, Y+50	; 0x32
     8f0:	ed a1       	ldd	r30, Y+37	; 0x25
     8f2:	fe a1       	ldd	r31, Y+38	; 0x26
     8f4:	0e 1b       	sub	r16, r30
     8f6:	1f 0b       	sbc	r17, r31
     8f8:	9b 01       	movw	r18, r22
     8fa:	ac 01       	movw	r20, r24
     8fc:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     900:	69 a3       	std	Y+33, r22	; 0x21
     902:	7a a3       	std	Y+34, r23	; 0x22
     904:	8b a3       	std	Y+35, r24	; 0x23
     906:	9c a3       	std	Y+36, r25	; 0x24
     908:	00 9f       	mul	r16, r16
     90a:	60 01       	movw	r12, r0
     90c:	01 9f       	mul	r16, r17
     90e:	d0 0c       	add	r13, r0
     910:	d0 0c       	add	r13, r0
     912:	11 24       	eor	r1, r1
     914:	0d 2c       	mov	r0, r13
     916:	00 0c       	add	r0, r0
     918:	ee 08       	sbc	r14, r14
     91a:	ff 08       	sbc	r15, r15
     91c:	a5 01       	movw	r20, r10
     91e:	94 01       	movw	r18, r8
     920:	c5 01       	movw	r24, r10
     922:	b4 01       	movw	r22, r8
     924:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     928:	4b 01       	movw	r8, r22
     92a:	5c 01       	movw	r10, r24
     92c:	c7 01       	movw	r24, r14
     92e:	b6 01       	movw	r22, r12
     930:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     934:	9b 01       	movw	r18, r22
     936:	ac 01       	movw	r20, r24
     938:	c5 01       	movw	r24, r10
     93a:	b4 01       	movw	r22, r8
     93c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
     940:	0e 94 ff 19 	call	0x33fe	; 0x33fe <sqrt>
     944:	4b 01       	movw	r8, r22
     946:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     948:	6d a5       	ldd	r22, Y+45	; 0x2d
     94a:	7e a5       	ldd	r23, Y+46	; 0x2e
     94c:	29 a5       	ldd	r18, Y+41	; 0x29
     94e:	3a a5       	ldd	r19, Y+42	; 0x2a
     950:	62 1b       	sub	r22, r18
     952:	73 0b       	sbc	r23, r19
     954:	07 2e       	mov	r0, r23
     956:	00 0c       	add	r0, r0
     958:	88 0b       	sbc	r24, r24
     95a:	99 0b       	sbc	r25, r25
     95c:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     960:	69 a3       	std	Y+33, r22	; 0x21
     962:	7a a3       	std	Y+34, r23	; 0x22
     964:	8b a3       	std	Y+35, r24	; 0x23
     966:	9c a3       	std	Y+36, r25	; 0x24
     968:	09 a9       	ldd	r16, Y+49	; 0x31
     96a:	1a a9       	ldd	r17, Y+50	; 0x32
     96c:	06 19       	sub	r16, r6
     96e:	17 09       	sbc	r17, r7
     970:	9b 01       	movw	r18, r22
     972:	ac 01       	movw	r20, r24
     974:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     978:	6d a3       	std	Y+37, r22	; 0x25
     97a:	7e a3       	std	Y+38, r23	; 0x26
     97c:	8f a3       	std	Y+39, r24	; 0x27
     97e:	98 a7       	std	Y+40, r25	; 0x28
     980:	00 9f       	mul	r16, r16
     982:	60 01       	movw	r12, r0
     984:	01 9f       	mul	r16, r17
     986:	d0 0c       	add	r13, r0
     988:	d0 0c       	add	r13, r0
     98a:	11 24       	eor	r1, r1
     98c:	0d 2c       	mov	r0, r13
     98e:	00 0c       	add	r0, r0
     990:	ee 08       	sbc	r14, r14
     992:	ff 08       	sbc	r15, r15
     994:	29 a1       	ldd	r18, Y+33	; 0x21
     996:	3a a1       	ldd	r19, Y+34	; 0x22
     998:	4b a1       	ldd	r20, Y+35	; 0x23
     99a:	5c a1       	ldd	r21, Y+36	; 0x24
     99c:	ca 01       	movw	r24, r20
     99e:	b9 01       	movw	r22, r18
     9a0:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     9a4:	69 a3       	std	Y+33, r22	; 0x21
     9a6:	7a a3       	std	Y+34, r23	; 0x22
     9a8:	8b a3       	std	Y+35, r24	; 0x23
     9aa:	9c a3       	std	Y+36, r25	; 0x24
     9ac:	c7 01       	movw	r24, r14
     9ae:	b6 01       	movw	r22, r12
     9b0:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     9b4:	9b 01       	movw	r18, r22
     9b6:	ac 01       	movw	r20, r24
     9b8:	69 a1       	ldd	r22, Y+33	; 0x21
     9ba:	7a a1       	ldd	r23, Y+34	; 0x22
     9bc:	8b a1       	ldd	r24, Y+35	; 0x23
     9be:	9c a1       	ldd	r25, Y+36	; 0x24
     9c0:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
     9c4:	0e 94 ff 19 	call	0x33fe	; 0x33fe <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     9c8:	2b ad       	ldd	r18, Y+59	; 0x3b
     9ca:	3c ad       	ldd	r19, Y+60	; 0x3c
     9cc:	4d ad       	ldd	r20, Y+61	; 0x3d
     9ce:	5e ad       	ldd	r21, Y+62	; 0x3e
     9d0:	29 83       	std	Y+1, r18	; 0x01
     9d2:	3a 83       	std	Y+2, r19	; 0x02
     9d4:	4b 83       	std	Y+3, r20	; 0x03
     9d6:	5c 83       	std	Y+4, r21	; 0x04
     9d8:	23 96       	adiw	r28, 0x03	; 3
     9da:	2c ad       	ldd	r18, Y+60	; 0x3c
     9dc:	3d ad       	ldd	r19, Y+61	; 0x3d
     9de:	4e ad       	ldd	r20, Y+62	; 0x3e
     9e0:	5f ad       	ldd	r21, Y+63	; 0x3f
     9e2:	23 97       	sbiw	r28, 0x03	; 3
     9e4:	2d 83       	std	Y+5, r18	; 0x05
     9e6:	3e 83       	std	Y+6, r19	; 0x06
     9e8:	4f 83       	std	Y+7, r20	; 0x07
     9ea:	58 87       	std	Y+8, r21	; 0x08
     9ec:	2b a9       	ldd	r18, Y+51	; 0x33
     9ee:	3c a9       	ldd	r19, Y+52	; 0x34
     9f0:	4d a9       	ldd	r20, Y+53	; 0x35
     9f2:	5e a9       	ldd	r21, Y+54	; 0x36
     9f4:	29 87       	std	Y+9, r18	; 0x09
     9f6:	3a 87       	std	Y+10, r19	; 0x0a
     9f8:	4b 87       	std	Y+11, r20	; 0x0b
     9fa:	5c 87       	std	Y+12, r21	; 0x0c
     9fc:	2f a9       	ldd	r18, Y+55	; 0x37
     9fe:	38 ad       	ldd	r19, Y+56	; 0x38
     a00:	49 ad       	ldd	r20, Y+57	; 0x39
     a02:	5a ad       	ldd	r21, Y+58	; 0x3a
     a04:	2d 87       	std	Y+13, r18	; 0x0d
     a06:	3e 87       	std	Y+14, r19	; 0x0e
     a08:	4f 87       	std	Y+15, r20	; 0x0f
     a0a:	58 8b       	std	Y+16, r21	; 0x10
     a0c:	89 8a       	std	Y+17, r8	; 0x11
     a0e:	9a 8a       	std	Y+18, r9	; 0x12
     a10:	ab 8a       	std	Y+19, r10	; 0x13
     a12:	bc 8a       	std	Y+20, r11	; 0x14
     a14:	6d 8b       	std	Y+21, r22	; 0x15
     a16:	7e 8b       	std	Y+22, r23	; 0x16
     a18:	8f 8b       	std	Y+23, r24	; 0x17
     a1a:	98 8f       	std	Y+24, r25	; 0x18
     a1c:	ae 01       	movw	r20, r28
     a1e:	4f 5f       	subi	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     a24:	00 e0       	ldi	r16, 0x00	; 0
     a26:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     a28:	61 2c       	mov	r6, r1
     a2a:	71 2c       	mov	r7, r1
     a2c:	c1 2c       	mov	r12, r1
     a2e:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     a30:	21 2c       	mov	r2, r1
     a32:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     a34:	f7 01       	movw	r30, r14
     a36:	81 90       	ld	r8, Z+
     a38:	91 90       	ld	r9, Z+
     a3a:	a1 90       	ld	r10, Z+
     a3c:	b1 90       	ld	r11, Z+
     a3e:	7f 01       	movw	r14, r30
     a40:	26 2d       	mov	r18, r6
     a42:	37 2d       	mov	r19, r7
     a44:	4c 2d       	mov	r20, r12
     a46:	5d 2d       	mov	r21, r13
     a48:	c5 01       	movw	r24, r10
     a4a:	b4 01       	movw	r22, r8
     a4c:	0e 94 77 19 	call	0x32ee	; 0x32ee <__gesf2>
     a50:	18 16       	cp	r1, r24
     a52:	34 f4       	brge	.+12     	; 0xa60 <fourPointCalc+0x3e8>
			indexMax = i;
			maxVal = distVect[i];
     a54:	68 2c       	mov	r6, r8
     a56:	79 2c       	mov	r7, r9
     a58:	ca 2c       	mov	r12, r10
     a5a:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     a5c:	20 2e       	mov	r2, r16
     a5e:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     a60:	0f 5f       	subi	r16, 0xFF	; 255
     a62:	1f 4f       	sbci	r17, 0xFF	; 255
     a64:	06 30       	cpi	r16, 0x06	; 6
     a66:	11 05       	cpc	r17, r1
     a68:	29 f7       	brne	.-54     	; 0xa34 <fourPointCalc+0x3bc>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLongRef; 
	pointsLongRef = distIndex(indexMax);
     a6a:	82 2d       	mov	r24, r2
     a6c:	93 2d       	mov	r25, r3
     a6e:	0e 94 46 02 	call	0x48c	; 0x48c <distIndex>
	
	int pointsLong[2] = {(pointsLongRef[0]), (pointsLongRef[1])};
     a72:	fc 01       	movw	r30, r24
     a74:	e0 80       	ld	r14, Z
     a76:	f1 80       	ldd	r15, Z+1	; 0x01
     a78:	fa 8e       	std	Y+26, r15	; 0x1a
     a7a:	e9 8e       	std	Y+25, r14	; 0x19
     a7c:	02 81       	ldd	r16, Z+2	; 0x02
     a7e:	13 81       	ldd	r17, Z+3	; 0x03
     a80:	1c 8f       	std	Y+28, r17	; 0x1c
     a82:	0b 8f       	std	Y+27, r16	; 0x1b
	
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     a84:	ee 0c       	add	r14, r14
     a86:	ff 1c       	adc	r15, r15
     a88:	ee 0c       	add	r14, r14
     a8a:	ff 1c       	adc	r15, r15
     a8c:	e4 0c       	add	r14, r4
     a8e:	f5 1c       	adc	r15, r5
     a90:	00 0f       	add	r16, r16
     a92:	11 1f       	adc	r17, r17
     a94:	00 0f       	add	r16, r16
     a96:	11 1f       	adc	r17, r17
     a98:	04 0d       	add	r16, r4
     a9a:	15 1d       	adc	r17, r5
     a9c:	f7 01       	movw	r30, r14
     a9e:	60 81       	ld	r22, Z
     aa0:	71 81       	ldd	r23, Z+1	; 0x01
     aa2:	f8 01       	movw	r30, r16
     aa4:	80 81       	ld	r24, Z
     aa6:	91 81       	ldd	r25, Z+1	; 0x01
     aa8:	68 0f       	add	r22, r24
     aaa:	79 1f       	adc	r23, r25
     aac:	77 23       	and	r23, r23
     aae:	14 f4       	brge	.+4      	; 0xab4 <fourPointCalc+0x43c>
     ab0:	6f 5f       	subi	r22, 0xFF	; 255
     ab2:	7f 4f       	sbci	r23, 0xFF	; 255
     ab4:	75 95       	asr	r23
     ab6:	67 95       	ror	r22
     ab8:	07 2e       	mov	r0, r23
     aba:	00 0c       	add	r0, r0
     abc:	88 0b       	sbc	r24, r24
     abe:	99 0b       	sbc	r25, r25
     ac0:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     ac4:	4b 01       	movw	r8, r22
     ac6:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     ac8:	f7 01       	movw	r30, r14
     aca:	62 81       	ldd	r22, Z+2	; 0x02
     acc:	73 81       	ldd	r23, Z+3	; 0x03
     ace:	f8 01       	movw	r30, r16
     ad0:	82 81       	ldd	r24, Z+2	; 0x02
     ad2:	93 81       	ldd	r25, Z+3	; 0x03
     ad4:	68 0f       	add	r22, r24
     ad6:	79 1f       	adc	r23, r25
     ad8:	77 23       	and	r23, r23
     ada:	14 f4       	brge	.+4      	; 0xae0 <fourPointCalc+0x468>
     adc:	6f 5f       	subi	r22, 0xFF	; 255
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	75 95       	asr	r23
     ae2:	67 95       	ror	r22
     ae4:	07 2e       	mov	r0, r23
     ae6:	00 0c       	add	r0, r0
     ae8:	88 0b       	sbc	r24, r24
     aea:	99 0b       	sbc	r25, r25
     aec:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     af0:	69 a3       	std	Y+33, r22	; 0x21
     af2:	7a a3       	std	Y+34, r23	; 0x22
     af4:	8b a3       	std	Y+35, r24	; 0x23
     af6:	9c a3       	std	Y+36, r25	; 0x24
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     af8:	9e 01       	movw	r18, r28
     afa:	21 5e       	subi	r18, 0xE1	; 225
     afc:	3f 4f       	sbci	r19, 0xFF	; 255
     afe:	ae 01       	movw	r20, r28
     b00:	43 5e       	subi	r20, 0xE3	; 227
     b02:	5f 4f       	sbci	r21, 0xFF	; 255
     b04:	be 01       	movw	r22, r28
     b06:	6f 5f       	subi	r22, 0xFF	; 255
     b08:	7f 4f       	sbci	r23, 0xFF	; 255
     b0a:	ce 01       	movw	r24, r28
     b0c:	49 96       	adiw	r24, 0x19	; 25
     b0e:	0e 94 94 02 	call	0x528	; 0x528 <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     b12:	0d 8d       	ldd	r16, Y+29	; 0x1d
     b14:	1e 8d       	ldd	r17, Y+30	; 0x1e
     b16:	00 0f       	add	r16, r16
     b18:	11 1f       	adc	r17, r17
     b1a:	00 0f       	add	r16, r16
     b1c:	11 1f       	adc	r17, r17
     b1e:	04 0d       	add	r16, r4
     b20:	15 1d       	adc	r17, r5
     b22:	2f 8c       	ldd	r2, Y+31	; 0x1f
     b24:	38 a0       	ldd	r3, Y+32	; 0x20
     b26:	22 0c       	add	r2, r2
     b28:	33 1c       	adc	r3, r3
     b2a:	22 0c       	add	r2, r2
     b2c:	33 1c       	adc	r3, r3
     b2e:	24 0c       	add	r2, r4
     b30:	35 1c       	adc	r3, r5
     b32:	f8 01       	movw	r30, r16
     b34:	60 81       	ld	r22, Z
     b36:	71 81       	ldd	r23, Z+1	; 0x01
     b38:	f1 01       	movw	r30, r2
     b3a:	80 81       	ld	r24, Z
     b3c:	91 81       	ldd	r25, Z+1	; 0x01
     b3e:	68 1b       	sub	r22, r24
     b40:	79 0b       	sbc	r23, r25
     b42:	07 2e       	mov	r0, r23
     b44:	00 0c       	add	r0, r0
     b46:	88 0b       	sbc	r24, r24
     b48:	99 0b       	sbc	r25, r25
     b4a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
     b4e:	6b 01       	movw	r12, r22
     b50:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     b52:	f8 01       	movw	r30, r16
     b54:	62 81       	ldd	r22, Z+2	; 0x02
     b56:	73 81       	ldd	r23, Z+3	; 0x03
     b58:	f1 01       	movw	r30, r2
     b5a:	82 81       	ldd	r24, Z+2	; 0x02
     b5c:	93 81       	ldd	r25, Z+3	; 0x03
     b5e:	68 1b       	sub	r22, r24
     b60:	79 0b       	sbc	r23, r25
     b62:	07 2e       	mov	r0, r23
     b64:	00 0c       	add	r0, r0
     b66:	88 0b       	sbc	r24, r24
     b68:	99 0b       	sbc	r25, r25
     b6a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     b6e:	90 58       	subi	r25, 0x80	; 128
     b70:	a7 01       	movw	r20, r14
     b72:	96 01       	movw	r18, r12
     b74:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <atan2>
	theta += M_PI/2.0;
     b78:	2b ed       	ldi	r18, 0xDB	; 219
     b7a:	3f e0       	ldi	r19, 0x0F	; 15
     b7c:	49 ec       	ldi	r20, 0xC9	; 201
     b7e:	5f e3       	ldi	r21, 0x3F	; 63
     b80:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
     b84:	6b 01       	movw	r12, r22
     b86:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     b88:	a5 01       	movw	r20, r10
     b8a:	94 01       	movw	r18, r8
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	94 e4       	ldi	r25, 0x44	; 68
     b94:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
     b98:	4b 01       	movw	r8, r22
     b9a:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     b9c:	29 a1       	ldd	r18, Y+33	; 0x21
     b9e:	3a a1       	ldd	r19, Y+34	; 0x22
     ba0:	4b a1       	ldd	r20, Y+35	; 0x23
     ba2:	5c a1       	ldd	r21, Y+36	; 0x24
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	8f eb       	ldi	r24, 0xBF	; 191
     baa:	93 e4       	ldi	r25, 0x43	; 67
     bac:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
     bb0:	2b 01       	movw	r4, r22
     bb2:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     bb4:	c7 01       	movw	r24, r14
     bb6:	b6 01       	movw	r22, r12
     bb8:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <sin>
     bbc:	69 a3       	std	Y+33, r22	; 0x21
     bbe:	7a a3       	std	Y+34, r23	; 0x22
     bc0:	8b a3       	std	Y+35, r24	; 0x23
     bc2:	9c a3       	std	Y+36, r25	; 0x24
     bc4:	c7 01       	movw	r24, r14
     bc6:	b6 01       	movw	r22, r12
     bc8:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <cos>
     bcc:	6d a3       	std	Y+37, r22	; 0x25
     bce:	7e a3       	std	Y+38, r23	; 0x26
     bd0:	8f a3       	std	Y+39, r24	; 0x27
     bd2:	98 a7       	std	Y+40, r25	; 0x28
     bd4:	0e e5       	ldi	r16, 0x5E	; 94
     bd6:	11 e0       	ldi	r17, 0x01	; 1
     bd8:	29 a1       	ldd	r18, Y+33	; 0x21
     bda:	3a a1       	ldd	r19, Y+34	; 0x22
     bdc:	4b a1       	ldd	r20, Y+35	; 0x23
     bde:	5c a1       	ldd	r21, Y+36	; 0x24
     be0:	c3 01       	movw	r24, r6
     be2:	b2 01       	movw	r22, r4
     be4:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     be8:	69 a7       	std	Y+41, r22	; 0x29
     bea:	7a a7       	std	Y+42, r23	; 0x2a
     bec:	8b a7       	std	Y+43, r24	; 0x2b
     bee:	9c a7       	std	Y+44, r25	; 0x2c
     bf0:	2d a1       	ldd	r18, Y+37	; 0x25
     bf2:	3e a1       	ldd	r19, Y+38	; 0x26
     bf4:	4f a1       	ldd	r20, Y+39	; 0x27
     bf6:	58 a5       	ldd	r21, Y+40	; 0x28
     bf8:	c5 01       	movw	r24, r10
     bfa:	b4 01       	movw	r22, r8
     bfc:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     c00:	9b 01       	movw	r18, r22
     c02:	ac 01       	movw	r20, r24
     c04:	69 a5       	ldd	r22, Y+41	; 0x29
     c06:	7a a5       	ldd	r23, Y+42	; 0x2a
     c08:	8b a5       	ldd	r24, Y+43	; 0x2b
     c0a:	9c a5       	ldd	r25, Y+44	; 0x2c
     c0c:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
     c10:	f8 01       	movw	r30, r16
     c12:	60 83       	st	Z, r22
     c14:	71 83       	std	Z+1, r23	; 0x01
     c16:	82 83       	std	Z+2, r24	; 0x02
     c18:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     c1a:	2d a1       	ldd	r18, Y+37	; 0x25
     c1c:	3e a1       	ldd	r19, Y+38	; 0x26
     c1e:	4f a1       	ldd	r20, Y+39	; 0x27
     c20:	58 a5       	ldd	r21, Y+40	; 0x28
     c22:	c3 01       	movw	r24, r6
     c24:	b2 01       	movw	r22, r4
     c26:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     c2a:	2b 01       	movw	r4, r22
     c2c:	3c 01       	movw	r6, r24
     c2e:	29 a1       	ldd	r18, Y+33	; 0x21
     c30:	3a a1       	ldd	r19, Y+34	; 0x22
     c32:	4b a1       	ldd	r20, Y+35	; 0x23
     c34:	5c a1       	ldd	r21, Y+36	; 0x24
     c36:	c5 01       	movw	r24, r10
     c38:	b4 01       	movw	r22, r8
     c3a:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
     c3e:	9b 01       	movw	r18, r22
     c40:	ac 01       	movw	r20, r24
     c42:	c3 01       	movw	r24, r6
     c44:	b2 01       	movw	r22, r4
     c46:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
     c4a:	f8 01       	movw	r30, r16
     c4c:	64 83       	std	Z+4, r22	; 0x04
     c4e:	75 83       	std	Z+5, r23	; 0x05
     c50:	86 83       	std	Z+6, r24	; 0x06
     c52:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta;
     c54:	f7 fa       	bst	r15, 7
     c56:	f0 94       	com	r15
     c58:	f7 f8       	bld	r15, 7
     c5a:	f0 94       	com	r15
     c5c:	c0 86       	std	Z+8, r12	; 0x08
     c5e:	d1 86       	std	Z+9, r13	; 0x09
     c60:	e2 86       	std	Z+10, r14	; 0x0a
     c62:	f3 86       	std	Z+11, r15	; 0x0b
	
	return centerFour;
}
     c64:	c8 01       	movw	r24, r16
     c66:	ce 5b       	subi	r28, 0xBE	; 190
     c68:	df 4f       	sbci	r29, 0xFF	; 255
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	bf 90       	pop	r11
     c86:	af 90       	pop	r10
     c88:	9f 90       	pop	r9
     c8a:	8f 90       	pop	r8
     c8c:	7f 90       	pop	r7
     c8e:	6f 90       	pop	r6
     c90:	5f 90       	pop	r5
     c92:	4f 90       	pop	r4
     c94:	3f 90       	pop	r3
     c96:	2f 90       	pop	r2
     c98:	08 95       	ret

00000c9a <localization_calc>:
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
     c9a:	4f 92       	push	r4
     c9c:	5f 92       	push	r5
     c9e:	6f 92       	push	r6
     ca0:	7f 92       	push	r7
     ca2:	af 92       	push	r10
     ca4:	bf 92       	push	r11
     ca6:	cf 92       	push	r12
     ca8:	df 92       	push	r13
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	68 97       	sbiw	r28, 0x18	; 24
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     cc8:	0d b7       	in	r16, 0x3d	; 61
     cca:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     ccc:	80 81       	ld	r24, Z
     cce:	91 81       	ldd	r25, Z+1	; 0x01
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	80 85       	ldd	r24, Z+8	; 0x08
     cd6:	91 85       	ldd	r25, Z+9	; 0x09
     cd8:	9c 83       	std	Y+4, r25	; 0x04
     cda:	8b 83       	std	Y+3, r24	; 0x03
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	93 81       	ldd	r25, Z+3	; 0x03
     ce0:	9e 83       	std	Y+6, r25	; 0x06
     ce2:	8d 83       	std	Y+5, r24	; 0x05
     ce4:	82 85       	ldd	r24, Z+10	; 0x0a
     ce6:	93 85       	ldd	r25, Z+11	; 0x0b
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	8f 83       	std	Y+7, r24	; 0x07
     cec:	84 81       	ldd	r24, Z+4	; 0x04
     cee:	95 81       	ldd	r25, Z+5	; 0x05
     cf0:	9a 87       	std	Y+10, r25	; 0x0a
     cf2:	89 87       	std	Y+9, r24	; 0x09
     cf4:	84 85       	ldd	r24, Z+12	; 0x0c
     cf6:	95 85       	ldd	r25, Z+13	; 0x0d
     cf8:	9c 87       	std	Y+12, r25	; 0x0c
     cfa:	8b 87       	std	Y+11, r24	; 0x0b
     cfc:	86 81       	ldd	r24, Z+6	; 0x06
     cfe:	97 81       	ldd	r25, Z+7	; 0x07
     d00:	9e 87       	std	Y+14, r25	; 0x0e
     d02:	8d 87       	std	Y+13, r24	; 0x0d
     d04:	86 85       	ldd	r24, Z+14	; 0x0e
     d06:	97 85       	ldd	r25, Z+15	; 0x0f
     d08:	98 8b       	std	Y+16, r25	; 0x10
     d0a:	8f 87       	std	Y+15, r24	; 0x0f
		{rawStarData[3], rawStarData[7]}
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     d0c:	fe 01       	movw	r30, r28
     d0e:	71 96       	adiw	r30, 0x11	; 17
     d10:	88 e0       	ldi	r24, 0x08	; 8
     d12:	df 01       	movw	r26, r30
     d14:	1d 92       	st	X+, r1
     d16:	8a 95       	dec	r24
     d18:	e9 f7       	brne	.-6      	; 0xd14 <localization_calc+0x7a>
     d1a:	70 97       	sbiw	r30, 0x10	; 16
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     d24:	40 81       	ld	r20, Z
     d26:	51 81       	ldd	r21, Z+1	; 0x01
     d28:	4f 3f       	cpi	r20, 0xFF	; 255
     d2a:	53 40       	sbci	r21, 0x03	; 3
     d2c:	71 f0       	breq	.+28     	; 0xd4a <localization_calc+0xb0>
			pointIndices[numPoints] = i;
     d2e:	dc 01       	movw	r26, r24
     d30:	aa 0f       	add	r26, r26
     d32:	bb 1f       	adc	r27, r27
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	4c 0f       	add	r20, r28
     d3a:	5d 1f       	adc	r21, r29
     d3c:	a4 0f       	add	r26, r20
     d3e:	b5 1f       	adc	r27, r21
     d40:	51 96       	adiw	r26, 0x11	; 17
     d42:	3c 93       	st	X, r19
     d44:	2e 93       	st	-X, r18
     d46:	50 97       	sbiw	r26, 0x10	; 16
			numPoints++;
     d48:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     d4a:	2f 5f       	subi	r18, 0xFF	; 255
     d4c:	3f 4f       	sbci	r19, 0xFF	; 255
     d4e:	34 96       	adiw	r30, 0x04	; 4
     d50:	24 30       	cpi	r18, 0x04	; 4
     d52:	31 05       	cpc	r19, r1
     d54:	39 f7       	brne	.-50     	; 0xd24 <localization_calc+0x8a>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	09 f4       	brne	.+2      	; 0xd5c <localization_calc+0xc2>
     d5a:	89 c0       	rjmp	.+274    	; 0xe6e <localization_calc+0x1d4>
     d5c:	ed b6       	in	r14, 0x3d	; 61
     d5e:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     d60:	6c 01       	movw	r12, r24
     d62:	cc 0c       	add	r12, r12
     d64:	dd 1c       	adc	r13, r13
     d66:	cc 0c       	add	r12, r12
     d68:	dd 1c       	adc	r13, r13
     d6a:	ad b7       	in	r26, 0x3d	; 61
     d6c:	be b7       	in	r27, 0x3e	; 62
     d6e:	ac 19       	sub	r26, r12
     d70:	bd 09       	sbc	r27, r13
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	be bf       	out	0x3e, r27	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	ad bf       	out	0x3d, r26	; 61
     d7c:	ed b7       	in	r30, 0x3d	; 61
     d7e:	fe b7       	in	r31, 0x3e	; 62
     d80:	31 96       	adiw	r30, 0x01	; 1
     d82:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     d84:	18 16       	cp	r1, r24
     d86:	19 06       	cpc	r1, r25
     d88:	24 f5       	brge	.+72     	; 0xdd2 <localization_calc+0x138>
     d8a:	9e 01       	movw	r18, r28
     d8c:	2f 5e       	subi	r18, 0xEF	; 239
     d8e:	3f 4f       	sbci	r19, 0xFF	; 255
     d90:	df 01       	movw	r26, r30
     d92:	ce 0e       	add	r12, r30
     d94:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     d96:	f9 01       	movw	r30, r18
     d98:	41 91       	ld	r20, Z+
     d9a:	51 91       	ld	r21, Z+
     d9c:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     d9e:	fa 01       	movw	r30, r20
     da0:	ee 0f       	add	r30, r30
     da2:	ff 1f       	adc	r31, r31
     da4:	ee 0f       	add	r30, r30
     da6:	ff 1f       	adc	r31, r31
     da8:	41 e0       	ldi	r20, 0x01	; 1
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	4c 0f       	add	r20, r28
     dae:	5d 1f       	adc	r21, r29
     db0:	e4 0f       	add	r30, r20
     db2:	f5 1f       	adc	r31, r21
     db4:	40 81       	ld	r20, Z
     db6:	51 81       	ldd	r21, Z+1	; 0x01
     db8:	11 96       	adiw	r26, 0x01	; 1
     dba:	5c 93       	st	X, r21
     dbc:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     dbe:	42 81       	ldd	r20, Z+2	; 0x02
     dc0:	53 81       	ldd	r21, Z+3	; 0x03
     dc2:	13 96       	adiw	r26, 0x03	; 3
     dc4:	5c 93       	st	X, r21
     dc6:	4e 93       	st	-X, r20
     dc8:	12 97       	sbiw	r26, 0x02	; 2
     dca:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     dcc:	ac 15       	cp	r26, r12
     dce:	bd 05       	cpc	r27, r13
     dd0:	11 f7       	brne	.-60     	; 0xd96 <localization_calc+0xfc>
			points[i][1] = pvect[index][1];
		}
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     dd2:	db 01       	movw	r26, r22
     dd4:	4d 90       	ld	r4, X+
     dd6:	5d 90       	ld	r5, X+
     dd8:	6d 90       	ld	r6, X+
     dda:	7c 90       	ld	r7, X
     ddc:	13 97       	sbiw	r26, 0x03	; 3
     dde:	e6 e7       	ldi	r30, 0x76	; 118
     de0:	f1 e0       	ldi	r31, 0x01	; 1
     de2:	40 82       	st	Z, r4
     de4:	51 82       	std	Z+1, r5	; 0x01
     de6:	62 82       	std	Z+2, r6	; 0x02
     de8:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     dea:	14 96       	adiw	r26, 0x04	; 4
     dec:	4d 90       	ld	r4, X+
     dee:	5d 90       	ld	r5, X+
     df0:	6d 90       	ld	r6, X+
     df2:	7c 90       	ld	r7, X
     df4:	17 97       	sbiw	r26, 0x07	; 7
     df6:	44 82       	std	Z+4, r4	; 0x04
     df8:	55 82       	std	Z+5, r5	; 0x05
     dfa:	66 82       	std	Z+6, r6	; 0x06
     dfc:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     dfe:	18 96       	adiw	r26, 0x08	; 8
     e00:	4d 91       	ld	r20, X+
     e02:	5d 91       	ld	r21, X+
     e04:	6d 91       	ld	r22, X+
     e06:	7c 91       	ld	r23, X
     e08:	1b 97       	sbiw	r26, 0x0b	; 11
     e0a:	40 87       	std	Z+8, r20	; 0x08
     e0c:	51 87       	std	Z+9, r21	; 0x09
     e0e:	62 87       	std	Z+10, r22	; 0x0a
     e10:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     e12:	04 97       	sbiw	r24, 0x04	; 4
     e14:	29 f4       	brne	.+10     	; 0xe20 <localization_calc+0x186>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     e16:	c5 01       	movw	r24, r10
     e18:	0e 94 3c 03 	call	0x678	; 0x678 <fourPointCalc>
     e1c:	dc 01       	movw	r26, r24
				break;
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <localization_calc+0x18a>
				
			case 3 : 
				//calcPointer = threePointCalc(points);
				calcPointer = &rc[0];
     e20:	a6 e7       	ldi	r26, 0x76	; 118
     e22:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				calcPointer = &rc[0];
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     e24:	4d 91       	ld	r20, X+
     e26:	5d 91       	ld	r21, X+
     e28:	6d 91       	ld	r22, X+
     e2a:	7c 91       	ld	r23, X
     e2c:	13 97       	sbiw	r26, 0x03	; 3
     e2e:	ea e6       	ldi	r30, 0x6A	; 106
     e30:	f1 e0       	ldi	r31, 0x01	; 1
     e32:	40 83       	st	Z, r20
     e34:	51 83       	std	Z+1, r21	; 0x01
     e36:	62 83       	std	Z+2, r22	; 0x02
     e38:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     e3a:	14 96       	adiw	r26, 0x04	; 4
     e3c:	4d 91       	ld	r20, X+
     e3e:	5d 91       	ld	r21, X+
     e40:	6d 91       	ld	r22, X+
     e42:	7c 91       	ld	r23, X
     e44:	17 97       	sbiw	r26, 0x07	; 7
     e46:	44 83       	std	Z+4, r20	; 0x04
     e48:	55 83       	std	Z+5, r21	; 0x05
     e4a:	66 83       	std	Z+6, r22	; 0x06
     e4c:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     e4e:	18 96       	adiw	r26, 0x08	; 8
     e50:	8d 91       	ld	r24, X+
     e52:	9d 91       	ld	r25, X+
     e54:	0d 90       	ld	r0, X+
     e56:	bc 91       	ld	r27, X
     e58:	a0 2d       	mov	r26, r0
     e5a:	80 87       	std	Z+8, r24	; 0x08
     e5c:	91 87       	std	Z+9, r25	; 0x09
     e5e:	a2 87       	std	Z+10, r26	; 0x0a
     e60:	b3 87       	std	Z+11, r27	; 0x0b
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	fe be       	out	0x3e, r15	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	ed be       	out	0x3d, r14	; 61
     e6c:	20 c0       	rjmp	.+64     	; 0xeae <localization_calc+0x214>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     e6e:	fb 01       	movw	r30, r22
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	a2 81       	ldd	r26, Z+2	; 0x02
     e76:	b3 81       	ldd	r27, Z+3	; 0x03
     e78:	ea e6       	ldi	r30, 0x6A	; 106
     e7a:	f1 e0       	ldi	r31, 0x01	; 1
     e7c:	80 83       	st	Z, r24
     e7e:	91 83       	std	Z+1, r25	; 0x01
     e80:	a2 83       	std	Z+2, r26	; 0x02
     e82:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     e84:	db 01       	movw	r26, r22
     e86:	14 96       	adiw	r26, 0x04	; 4
     e88:	cd 90       	ld	r12, X+
     e8a:	dd 90       	ld	r13, X+
     e8c:	ed 90       	ld	r14, X+
     e8e:	fc 90       	ld	r15, X
     e90:	17 97       	sbiw	r26, 0x07	; 7
     e92:	c4 82       	std	Z+4, r12	; 0x04
     e94:	d5 82       	std	Z+5, r13	; 0x05
     e96:	e6 82       	std	Z+6, r14	; 0x06
     e98:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];	
     e9a:	18 96       	adiw	r26, 0x08	; 8
     e9c:	4d 91       	ld	r20, X+
     e9e:	5d 91       	ld	r21, X+
     ea0:	6d 91       	ld	r22, X+
     ea2:	7c 91       	ld	r23, X
     ea4:	1b 97       	sbiw	r26, 0x0b	; 11
     ea6:	40 87       	std	Z+8, r20	; 0x08
     ea8:	51 87       	std	Z+9, r21	; 0x09
     eaa:	62 87       	std	Z+10, r22	; 0x0a
     eac:	73 87       	std	Z+11, r23	; 0x0b
	
	return robotCenter;
	
	
	
}
     eae:	8a e6       	ldi	r24, 0x6A	; 106
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	1e bf       	out	0x3e, r17	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0d bf       	out	0x3d, r16	; 61
     ebc:	68 96       	adiw	r28, 0x18	; 24
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	df 90       	pop	r13
     ed6:	cf 90       	pop	r12
     ed8:	bf 90       	pop	r11
     eda:	af 90       	pop	r10
     edc:	7f 90       	pop	r7
     ede:	6f 90       	pop	r6
     ee0:	5f 90       	pop	r5
     ee2:	4f 90       	pop	r4
     ee4:	08 95       	ret

00000ee6 <motor_update>:
Initialization of Subsystem Components
************************************************************/

/* Called On Timer 3 Rollover */
void motor_update(void)
{
     ee6:	af 92       	push	r10
     ee8:	bf 92       	push	r11
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
	set(TIFR3,OCF3A);		// Reset flag
     ef6:	c1 9a       	sbi	0x18, 1	; 24
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd); // Update control
     ef8:	a0 90 0c 01 	lds	r10, 0x010C
     efc:	b0 90 0d 01 	lds	r11, 0x010D
     f00:	c0 90 0e 01 	lds	r12, 0x010E
     f04:	d0 90 0f 01 	lds	r13, 0x010F
     f08:	e0 90 10 01 	lds	r14, 0x0110
     f0c:	f0 90 11 01 	lds	r15, 0x0111
     f10:	00 91 12 01 	lds	r16, 0x0112
     f14:	10 91 13 01 	lds	r17, 0x0113
     f18:	20 91 ab 01 	lds	r18, 0x01AB
     f1c:	30 91 ac 01 	lds	r19, 0x01AC
     f20:	40 91 ad 01 	lds	r20, 0x01AD
     f24:	50 91 ae 01 	lds	r21, 0x01AE
     f28:	60 91 af 01 	lds	r22, 0x01AF
     f2c:	70 91 b0 01 	lds	r23, 0x01B0
     f30:	80 91 b1 01 	lds	r24, 0x01B1
     f34:	90 91 b2 01 	lds	r25, 0x01B2
     f38:	e0 91 03 01 	lds	r30, 0x0103
     f3c:	ef 93       	push	r30
     f3e:	e0 91 02 01 	lds	r30, 0x0102
     f42:	ef 93       	push	r30
     f44:	e0 91 01 01 	lds	r30, 0x0101
     f48:	ef 93       	push	r30
     f4a:	e0 91 00 01 	lds	r30, 0x0100
     f4e:	ef 93       	push	r30
     f50:	e0 91 07 01 	lds	r30, 0x0107
     f54:	ef 93       	push	r30
     f56:	e0 91 06 01 	lds	r30, 0x0106
     f5a:	ef 93       	push	r30
     f5c:	e0 91 05 01 	lds	r30, 0x0105
     f60:	ef 93       	push	r30
     f62:	e0 91 04 01 	lds	r30, 0x0104
     f66:	ef 93       	push	r30
     f68:	e0 91 aa 01 	lds	r30, 0x01AA
     f6c:	ef 93       	push	r30
     f6e:	e0 91 a9 01 	lds	r30, 0x01A9
     f72:	ef 93       	push	r30
     f74:	e0 91 a8 01 	lds	r30, 0x01A8
     f78:	ef 93       	push	r30
     f7a:	e0 91 a7 01 	lds	r30, 0x01A7
     f7e:	ef 93       	push	r30
     f80:	e0 91 0b 01 	lds	r30, 0x010B
     f84:	ef 93       	push	r30
     f86:	e0 91 0a 01 	lds	r30, 0x010A
     f8a:	ef 93       	push	r30
     f8c:	e0 91 09 01 	lds	r30, 0x0109
     f90:	ef 93       	push	r30
     f92:	e0 91 08 01 	lds	r30, 0x0108
     f96:	ef 93       	push	r30
     f98:	0e 94 c8 0b 	call	0x1790	; 0x1790 <run_motor_control_loop>
     f9c:	8d b7       	in	r24, 0x3d	; 61
     f9e:	9e b7       	in	r25, 0x3e	; 62
     fa0:	40 96       	adiw	r24, 0x10	; 16
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	9e bf       	out	0x3e, r25	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	8d bf       	out	0x3d, r24	; 61
}
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	df 90       	pop	r13
     fb6:	cf 90       	pop	r12
     fb8:	bf 90       	pop	r11
     fba:	af 90       	pop	r10
     fbc:	08 95       	ret

00000fbe <bot_behavior_update>:

/* Update Targets, Gains, and Max Vals */
void bot_behavior_update()
{
	if (has_puck())
     fbe:	0e 94 a1 14 	call	0x2942	; 0x2942 <has_puck>
     fc2:	88 23       	and	r24, r24
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <bot_behavior_update+0xa>
     fc6:	53 c0       	rjmp	.+166    	; 0x106e <bot_behavior_update+0xb0>
	{
		x_target = x_goal;
     fc8:	80 91 92 01 	lds	r24, 0x0192
     fcc:	90 91 93 01 	lds	r25, 0x0193
     fd0:	a0 91 94 01 	lds	r26, 0x0194
     fd4:	b0 91 95 01 	lds	r27, 0x0195
     fd8:	80 93 af 01 	sts	0x01AF, r24
     fdc:	90 93 b0 01 	sts	0x01B0, r25
     fe0:	a0 93 b1 01 	sts	0x01B1, r26
     fe4:	b0 93 b2 01 	sts	0x01B2, r27
		y_target = y_goal;
     fe8:	80 91 8e 01 	lds	r24, 0x018E
     fec:	90 91 8f 01 	lds	r25, 0x018F
     ff0:	a0 91 90 01 	lds	r26, 0x0190
     ff4:	b0 91 91 01 	lds	r27, 0x0191
     ff8:	80 93 ab 01 	sts	0x01AB, r24
     ffc:	90 93 ac 01 	sts	0x01AC, r25
    1000:	a0 93 ad 01 	sts	0x01AD, r26
    1004:	b0 93 ae 01 	sts	0x01AE, r27
		max_theta = M_PI/2;
    1008:	8b ed       	ldi	r24, 0xDB	; 219
    100a:	9f e0       	ldi	r25, 0x0F	; 15
    100c:	a9 ec       	ldi	r26, 0xC9	; 201
    100e:	bf e3       	ldi	r27, 0x3F	; 63
    1010:	80 93 0c 01 	sts	0x010C, r24
    1014:	90 93 0d 01 	sts	0x010D, r25
    1018:	a0 93 0e 01 	sts	0x010E, r26
    101c:	b0 93 0f 01 	sts	0x010F, r27
		theta_kd = 0.05;
    1020:	8d ec       	ldi	r24, 0xCD	; 205
    1022:	9c ec       	ldi	r25, 0xCC	; 204
    1024:	ac e4       	ldi	r26, 0x4C	; 76
    1026:	bd e3       	ldi	r27, 0x3D	; 61
    1028:	80 93 a7 01 	sts	0x01A7, r24
    102c:	90 93 a8 01 	sts	0x01A8, r25
    1030:	a0 93 a9 01 	sts	0x01A9, r26
    1034:	b0 93 aa 01 	sts	0x01AA, r27
		theta_kp = 1.2;
    1038:	8a e9       	ldi	r24, 0x9A	; 154
    103a:	99 e9       	ldi	r25, 0x99	; 153
    103c:	a9 e9       	ldi	r26, 0x99	; 153
    103e:	bf e3       	ldi	r27, 0x3F	; 63
    1040:	80 93 08 01 	sts	0x0108, r24
    1044:	90 93 09 01 	sts	0x0109, r25
    1048:	a0 93 0a 01 	sts	0x010A, r26
    104c:	b0 93 0b 01 	sts	0x010B, r27
		max_duty_cycle = DUTY_CYCLE_PUCK;
    1050:	8d ec       	ldi	r24, 0xCD	; 205
    1052:	9c ec       	ldi	r25, 0xCC	; 204
    1054:	ac e4       	ldi	r26, 0x4C	; 76
    1056:	bf e3       	ldi	r27, 0x3F	; 63
    1058:	80 93 10 01 	sts	0x0110, r24
    105c:	90 93 11 01 	sts	0x0111, r25
    1060:	a0 93 12 01 	sts	0x0112, r26
    1064:	b0 93 13 01 	sts	0x0113, r27
		m_green(OFF);
    1068:	6a 9a       	sbi	0x0d, 2	; 13
    106a:	72 9a       	sbi	0x0e, 2	; 14
    106c:	08 95       	ret
		return;
		
	}
	
	if (!has_puck())
    106e:	0e 94 a1 14 	call	0x2942	; 0x2942 <has_puck>
    1072:	81 11       	cpse	r24, r1
    1074:	4e c0       	rjmp	.+156    	; 0x1112 <bot_behavior_update+0x154>
	{
		x_target = x_puck;
    1076:	80 91 86 01 	lds	r24, 0x0186
    107a:	90 91 87 01 	lds	r25, 0x0187
    107e:	a0 91 88 01 	lds	r26, 0x0188
    1082:	b0 91 89 01 	lds	r27, 0x0189
    1086:	80 93 af 01 	sts	0x01AF, r24
    108a:	90 93 b0 01 	sts	0x01B0, r25
    108e:	a0 93 b1 01 	sts	0x01B1, r26
    1092:	b0 93 b2 01 	sts	0x01B2, r27
		y_target = y_puck;
    1096:	80 91 82 01 	lds	r24, 0x0182
    109a:	90 91 83 01 	lds	r25, 0x0183
    109e:	a0 91 84 01 	lds	r26, 0x0184
    10a2:	b0 91 85 01 	lds	r27, 0x0185
    10a6:	80 93 ab 01 	sts	0x01AB, r24
    10aa:	90 93 ac 01 	sts	0x01AC, r25
    10ae:	a0 93 ad 01 	sts	0x01AD, r26
    10b2:	b0 93 ae 01 	sts	0x01AE, r27
		max_theta = M_PI;
    10b6:	8b ed       	ldi	r24, 0xDB	; 219
    10b8:	9f e0       	ldi	r25, 0x0F	; 15
    10ba:	a9 e4       	ldi	r26, 0x49	; 73
    10bc:	b0 e4       	ldi	r27, 0x40	; 64
    10be:	80 93 0c 01 	sts	0x010C, r24
    10c2:	90 93 0d 01 	sts	0x010D, r25
    10c6:	a0 93 0e 01 	sts	0x010E, r26
    10ca:	b0 93 0f 01 	sts	0x010F, r27
		theta_kd = 0;
    10ce:	10 92 a7 01 	sts	0x01A7, r1
    10d2:	10 92 a8 01 	sts	0x01A8, r1
    10d6:	10 92 a9 01 	sts	0x01A9, r1
    10da:	10 92 aa 01 	sts	0x01AA, r1
		theta_kp = 1.8;
    10de:	86 e6       	ldi	r24, 0x66	; 102
    10e0:	96 e6       	ldi	r25, 0x66	; 102
    10e2:	a6 ee       	ldi	r26, 0xE6	; 230
    10e4:	bf e3       	ldi	r27, 0x3F	; 63
    10e6:	80 93 08 01 	sts	0x0108, r24
    10ea:	90 93 09 01 	sts	0x0109, r25
    10ee:	a0 93 0a 01 	sts	0x010A, r26
    10f2:	b0 93 0b 01 	sts	0x010B, r27
		max_duty_cycle = DUTY_CYCLE_SEEK;
    10f6:	8d ec       	ldi	r24, 0xCD	; 205
    10f8:	9c ec       	ldi	r25, 0xCC	; 204
    10fa:	ac e4       	ldi	r26, 0x4C	; 76
    10fc:	bf e3       	ldi	r27, 0x3F	; 63
    10fe:	80 93 10 01 	sts	0x0110, r24
    1102:	90 93 11 01 	sts	0x0111, r25
    1106:	a0 93 12 01 	sts	0x0112, r26
    110a:	b0 93 13 01 	sts	0x0113, r27
		m_green(ON);
    110e:	6a 9a       	sbi	0x0d, 2	; 13
    1110:	72 98       	cbi	0x0e, 2	; 14
    1112:	08 95       	ret

00001114 <adc_update>:
	}
}

/* Called on ADC Conversion Completion */
void adc_update(void)
{
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	28 97       	sbiw	r28, 0x08	; 8
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
	set(ADCSRA,ADIF);	 // Reset flag
    1128:	ea e7       	ldi	r30, 0x7A	; 122
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 61       	ori	r24, 0x10	; 16
    1130:	80 83       	st	Z, r24
	if(adc_switch()){
    1132:	0e 94 cb 14 	call	0x2996	; 0x2996 <adc_switch>
    1136:	88 23       	and	r24, r24
    1138:	e1 f0       	breq	.+56     	; 0x1172 <adc_update+0x5e>
		float puck_buffer[2];
		get_puck_location(puck_buffer);
    113a:	ce 01       	movw	r24, r28
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	0e 94 ad 13 	call	0x275a	; 0x275a <get_puck_location>
		x_puck = puck_buffer[0];
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	ab 81       	ldd	r26, Y+3	; 0x03
    1148:	bc 81       	ldd	r27, Y+4	; 0x04
    114a:	80 93 86 01 	sts	0x0186, r24
    114e:	90 93 87 01 	sts	0x0187, r25
    1152:	a0 93 88 01 	sts	0x0188, r26
    1156:	b0 93 89 01 	sts	0x0189, r27
		y_puck = puck_buffer[1];
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	9e 81       	ldd	r25, Y+6	; 0x06
    115e:	af 81       	ldd	r26, Y+7	; 0x07
    1160:	b8 85       	ldd	r27, Y+8	; 0x08
    1162:	80 93 82 01 	sts	0x0182, r24
    1166:	90 93 83 01 	sts	0x0183, r25
    116a:	a0 93 84 01 	sts	0x0184, r26
    116e:	b0 93 85 01 	sts	0x0185, r27
	}
}
    1172:	28 96       	adiw	r28, 0x08	; 8
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	08 95       	ret

00001184 <positioning_LED>:
	
}

void positioning_LED(int color)
{
	switch(color)
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	91 05       	cpc	r25, r1
    1188:	41 f0       	breq	.+16     	; 0x119a <positioning_LED+0x16>
    118a:	82 30       	cpi	r24, 0x02	; 2
    118c:	91 05       	cpc	r25, r1
    118e:	41 f0       	breq	.+16     	; 0x11a0 <positioning_LED+0x1c>
    1190:	89 2b       	or	r24, r25
    1192:	41 f4       	brne	.+16     	; 0x11a4 <positioning_LED+0x20>
	{ 
		case OFF:	//OFF
			clear(PORTC,7);
    1194:	47 98       	cbi	0x08, 7	; 8
			clear(PORTC,6);
    1196:	46 98       	cbi	0x08, 6	; 8
			break;
    1198:	08 95       	ret
		
		case BLUE:	//BLUE
			set(PORTC,6);
    119a:	46 9a       	sbi	0x08, 6	; 8
			clear(PORTC,7);
    119c:	47 98       	cbi	0x08, 7	; 8
			break;
    119e:	08 95       	ret
			
		case RED: //RED
			clear(PORTC,6);
    11a0:	46 98       	cbi	0x08, 6	; 8
			set(PORTC,7);
    11a2:	47 9a       	sbi	0x08, 7	; 8
    11a4:	08 95       	ret

000011a6 <play>:
void play(void)
{
	/* Light LED of defending goal */
	
	/* Play */
	set(TCCR1B,CS10);
    11a6:	e1 e8       	ldi	r30, 0x81	; 129
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	81 60       	ori	r24, 0x01	; 1
    11ae:	80 83       	st	Z, r24
	positioning_LED(goal);
    11b0:	80 91 8c 01 	lds	r24, 0x018C
    11b4:	90 91 8d 01 	lds	r25, 0x018D
    11b8:	0e 94 c2 08 	call	0x1184	; 0x1184 <positioning_LED>
    11bc:	08 95       	ret

000011be <pause>:
}

void pause(void)
{
	/* Stop within 3  seconds */
	clear(TCCR1B,CS10);
    11be:	e1 e8       	ldi	r30, 0x81	; 129
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	8e 7f       	andi	r24, 0xFE	; 254
    11c6:	80 83       	st	Z, r24
	clear(PORTB,0); // B0 Left motor off
    11c8:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,2); // B2 Right motor off
    11ca:	2a 98       	cbi	0x05, 2	; 5
	positioning_LED(OFF);
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 c2 08 	call	0x1184	; 0x1184 <positioning_LED>
    11d4:	08 95       	ret

000011d6 <halftime>:
}

void halftime(void)
{
	/* Stop play */
	pause();
    11d6:	0e 94 df 08 	call	0x11be	; 0x11be <pause>
	
	/* Switch assigned goal */
	if (x_goal>0) {
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	a9 01       	movw	r20, r18
    11e0:	60 91 92 01 	lds	r22, 0x0192
    11e4:	70 91 93 01 	lds	r23, 0x0193
    11e8:	80 91 94 01 	lds	r24, 0x0194
    11ec:	90 91 95 01 	lds	r25, 0x0195
    11f0:	0e 94 77 19 	call	0x32ee	; 0x32ee <__gesf2>
    11f4:	18 16       	cp	r1, r24
    11f6:	9c f4       	brge	.+38     	; 0x121e <halftime+0x48>
		x_goal = -1*GOAL_X_DIST;
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	a8 ec       	ldi	r26, 0xC8	; 200
    11fe:	b3 ec       	ldi	r27, 0xC3	; 195
    1200:	80 93 92 01 	sts	0x0192, r24
    1204:	90 93 93 01 	sts	0x0193, r25
    1208:	a0 93 94 01 	sts	0x0194, r26
    120c:	b0 93 95 01 	sts	0x0195, r27
		goal = RED;
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	90 93 8d 01 	sts	0x018D, r25
    1218:	80 93 8c 01 	sts	0x018C, r24
    121c:	08 95       	ret
		} else {
		x_goal = GOAL_X_DIST;
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a8 ec       	ldi	r26, 0xC8	; 200
    1224:	b3 e4       	ldi	r27, 0x43	; 67
    1226:	80 93 92 01 	sts	0x0192, r24
    122a:	90 93 93 01 	sts	0x0193, r25
    122e:	a0 93 94 01 	sts	0x0194, r26
    1232:	b0 93 95 01 	sts	0x0195, r27
		goal = BLUE;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	90 93 8d 01 	sts	0x018D, r25
    123e:	80 93 8c 01 	sts	0x018C, r24
    1242:	08 95       	ret

00001244 <select_goal>:
			break;
	}
}

void select_goal(void) 
{
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	2c 97       	sbiw	r28, 0x0c	; 12
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
	/* Assign Defending goal */
	update_position();
    1258:	0e 94 c8 0a 	call	0x1590	; 0x1590 <update_position>
	
	float position_buffer[3];
	get_position(position_buffer);
    125c:	ce 01       	movw	r24, r28
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <get_position>
	m_usb_tx_int((int)position_buffer[0]);
    1264:	69 81       	ldd	r22, Y+1	; 0x01
    1266:	7a 81       	ldd	r23, Y+2	; 0x02
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	0e 94 29 18 	call	0x3052	; 0x3052 <__fixsfsi>
    1270:	cb 01       	movw	r24, r22
    1272:	0e 94 8e 11 	call	0x231c	; 0x231c <m_usb_tx_int>
	
	if (position_buffer[0]>0) {
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	a9 01       	movw	r20, r18
    127c:	69 81       	ldd	r22, Y+1	; 0x01
    127e:	7a 81       	ldd	r23, Y+2	; 0x02
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	0e 94 77 19 	call	0x32ee	; 0x32ee <__gesf2>
    1288:	18 16       	cp	r1, r24
    128a:	9c f4       	brge	.+38     	; 0x12b2 <select_goal+0x6e>
		x_goal = -1*GOAL_X_DIST;
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a8 ec       	ldi	r26, 0xC8	; 200
    1292:	b3 ec       	ldi	r27, 0xC3	; 195
    1294:	80 93 92 01 	sts	0x0192, r24
    1298:	90 93 93 01 	sts	0x0193, r25
    129c:	a0 93 94 01 	sts	0x0194, r26
    12a0:	b0 93 95 01 	sts	0x0195, r27
		goal = RED;
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	90 93 8d 01 	sts	0x018D, r25
    12ac:	80 93 8c 01 	sts	0x018C, r24
    12b0:	12 c0       	rjmp	.+36     	; 0x12d6 <select_goal+0x92>
		//positioning_LED(RED);
		} else {
		x_goal = GOAL_X_DIST;
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a8 ec       	ldi	r26, 0xC8	; 200
    12b8:	b3 e4       	ldi	r27, 0x43	; 67
    12ba:	80 93 92 01 	sts	0x0192, r24
    12be:	90 93 93 01 	sts	0x0193, r25
    12c2:	a0 93 94 01 	sts	0x0194, r26
    12c6:	b0 93 95 01 	sts	0x0195, r27
		goal = BLUE;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	90 93 8d 01 	sts	0x018D, r25
    12d2:	80 93 8c 01 	sts	0x018C, r24
		//positioning_LED(BLUE);
	}
}
    12d6:	2c 96       	adiw	r28, 0x0c	; 12
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <comm_test>:
	}
}

void comm_test(void)
{
	if (!goal_init){
    12e8:	80 91 8a 01 	lds	r24, 0x018A
    12ec:	90 91 8b 01 	lds	r25, 0x018B
    12f0:	89 2b       	or	r24, r25
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <comm_test+0x10>
		select_goal();
    12f4:	0e 94 22 09 	call	0x1244	; 0x1244 <select_goal>
	}
	/* Flash color of LED for defending goal */
	set(TCCR0B,CS02); //start timer 
    12f8:	85 b5       	in	r24, 0x25	; 37
    12fa:	84 60       	ori	r24, 0x04	; 4
    12fc:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS00);
    12fe:	85 b5       	in	r24, 0x25	; 37
    1300:	81 60       	ori	r24, 0x01	; 1
    1302:	85 bd       	out	0x25, r24	; 37
	positioning_LED(goal); //turn on LED 
    1304:	80 91 8c 01 	lds	r24, 0x018C
    1308:	90 91 8d 01 	lds	r25, 0x018D
    130c:	0e 94 c2 08 	call	0x1184	; 0x1184 <positioning_LED>
    1310:	08 95       	ret

00001312 <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
    1312:	e0 91 9c 01 	lds	r30, 0x019C
    1316:	8e 2f       	mov	r24, r30
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	fc 01       	movw	r30, r24
    131c:	e0 5a       	subi	r30, 0xA0	; 160
    131e:	f1 09       	sbc	r31, r1
    1320:	e8 30       	cpi	r30, 0x08	; 8
    1322:	f1 05       	cpc	r31, r1
    1324:	40 f5       	brcc	.+80     	; 0x1376 <update_game_state+0x64>
    1326:	ea 5a       	subi	r30, 0xAA	; 170
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
    132a:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__tablejump2__>
		case 0xA0: // Comm Test
		comm_test();
    132e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <comm_test>
		break;
    1332:	08 95       	ret
		case 0xA1: // Play
		play();
    1334:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <play>
		break;
    1338:	08 95       	ret
		case 0xA2: // Goal R
		SR = buffer[1];
    133a:	ed e9       	ldi	r30, 0x9D	; 157
    133c:	f1 e0       	ldi	r31, 0x01	; 1
    133e:	81 81       	ldd	r24, Z+1	; 0x01
    1340:	80 93 9b 01 	sts	0x019B, r24
		SB = buffer[2];
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	80 93 9a 01 	sts	0x019A, r24
		pause();
    134a:	0e 94 df 08 	call	0x11be	; 0x11be <pause>
		break;
    134e:	08 95       	ret
		case 0xA3: // Goal B
		SR = buffer[1];
    1350:	ed e9       	ldi	r30, 0x9D	; 157
    1352:	f1 e0       	ldi	r31, 0x01	; 1
    1354:	81 81       	ldd	r24, Z+1	; 0x01
    1356:	80 93 9b 01 	sts	0x019B, r24
		SB = buffer[2];
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	80 93 9a 01 	sts	0x019A, r24
		pause();
    1360:	0e 94 df 08 	call	0x11be	; 0x11be <pause>
		break;
    1364:	08 95       	ret
		case 0xA4: // Pause
		pause();
    1366:	0e 94 df 08 	call	0x11be	; 0x11be <pause>
		break;
    136a:	08 95       	ret
		case 0xA6: // Halftime
		halftime();
    136c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <halftime>
		break;
    1370:	08 95       	ret
}

void game_over(void)
{
	// Stop play
	pause();
    1372:	0e 94 df 08 	call	0x11be	; 0x11be <pause>
    1376:	08 95       	ret

00001378 <wireless_recieve>:
}

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    1378:	6a e0       	ldi	r22, 0x0A	; 10
    137a:	8d e9       	ldi	r24, 0x9D	; 157
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <m_rf_read>
	game_state = buffer[0];
    1382:	80 91 9d 01 	lds	r24, 0x019D
    1386:	80 93 9c 01 	sts	0x019C, r24
	update_game_state();
    138a:	0e 94 89 09 	call	0x1312	; 0x1312 <update_game_state>
    138e:	08 95       	ret

00001390 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
    1390:	6e 9a       	sbi	0x0d, 6	; 13
    1392:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey();
    1394:	0e 94 40 01 	call	0x280	; 0x280 <initialize_robockey>
	pause();
    1398:	0e 94 df 08 	call	0x11be	; 0x11be <pause>

	/* Confirm successful initialization(s) */
	m_green(ON);
    139c:	6a 9a       	sbi	0x0d, 2	; 13
    139e:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    13a0:	ca e7       	ldi	r28, 0x7A	; 122
    13a2:	d0 e0       	ldi	r29, 0x00	; 0
		bot_behavior_update();
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
		if (wifi_flag) {
			wifi_flag = 0;
			m_red(TOGGLE);
    13a4:	10 e4       	ldi	r17, 0x40	; 64
	/* Confirm successful initialization(s) */
	m_green(ON);

	/* Run */
	while (1){
		update_position();
    13a6:	0e 94 c8 0a 	call	0x1590	; 0x1590 <update_position>
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    13aa:	88 81       	ld	r24, Y
    13ac:	84 fd       	sbrc	r24, 4
    13ae:	0e 94 8a 08 	call	0x1114	; 0x1114 <adc_update>
		bot_behavior_update();
    13b2:	0e 94 df 07 	call	0xfbe	; 0xfbe <bot_behavior_update>
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
    13b6:	c1 99       	sbic	0x18, 1	; 24
    13b8:	0e 94 73 07 	call	0xee6	; 0xee6 <motor_update>
		if (wifi_flag) {
    13bc:	80 91 98 01 	lds	r24, 0x0198
    13c0:	90 91 99 01 	lds	r25, 0x0199
    13c4:	89 2b       	or	r24, r25
    13c6:	79 f3       	breq	.-34     	; 0x13a6 <main+0x16>
			wifi_flag = 0;
    13c8:	10 92 99 01 	sts	0x0199, r1
    13cc:	10 92 98 01 	sts	0x0198, r1
			m_red(TOGGLE);
    13d0:	6e 9a       	sbi	0x0d, 6	; 13
    13d2:	8e b1       	in	r24, 0x0e	; 14
    13d4:	81 27       	eor	r24, r17
    13d6:	8e b9       	out	0x0e, r24	; 14
			wireless_recieve();
    13d8:	0e 94 bc 09 	call	0x1378	; 0x1378 <wireless_recieve>
    13dc:	e4 cf       	rjmp	.-56     	; 0x13a6 <main+0x16>

000013de <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    13de:	1f 92       	push	r1
    13e0:	0f 92       	push	r0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    13e8:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
    13ea:	2a 9a       	sbi	0x05, 2	; 5
}
    13ec:	0f 90       	pop	r0
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	0f 90       	pop	r0
    13f2:	1f 90       	pop	r1
    13f4:	18 95       	reti

000013f6 <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    13f6:	1f 92       	push	r1
    13f8:	0f 92       	push	r0
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	0f 92       	push	r0
    13fe:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    1400:	28 98       	cbi	0x05, 0	; 5
}
    1402:	0f 90       	pop	r0
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	0f 90       	pop	r0
    1408:	1f 90       	pop	r1
    140a:	18 95       	reti

0000140c <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    140c:	1f 92       	push	r1
    140e:	0f 92       	push	r0
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	0f 92       	push	r0
    1414:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    1416:	2a 98       	cbi	0x05, 2	; 5
}
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <__vector_3>:


/* Recieve Wireless Comm */
ISR(INT2_vect){
    1422:	1f 92       	push	r1
    1424:	0f 92       	push	r0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	0f 92       	push	r0
    142a:	11 24       	eor	r1, r1
    142c:	8f 93       	push	r24
    142e:	9f 93       	push	r25
	//m_red(TOGGLE);
	wifi_flag = 1;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	90 93 99 01 	sts	0x0199, r25
    1438:	80 93 98 01 	sts	0x0198, r24
}
    143c:	9f 91       	pop	r25
    143e:	8f 91       	pop	r24
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	0f 90       	pop	r0
    1446:	1f 90       	pop	r1
    1448:	18 95       	reti

0000144a <__vector_23>:

ISR(TIMER0_OVF_vect){
    144a:	1f 92       	push	r1
    144c:	0f 92       	push	r0
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	0f 92       	push	r0
    1452:	11 24       	eor	r1, r1
    1454:	2f 93       	push	r18
    1456:	3f 93       	push	r19
    1458:	4f 93       	push	r20
    145a:	5f 93       	push	r21
    145c:	6f 93       	push	r22
    145e:	7f 93       	push	r23
    1460:	8f 93       	push	r24
    1462:	9f 93       	push	r25
    1464:	af 93       	push	r26
    1466:	bf 93       	push	r27
    1468:	ef 93       	push	r30
    146a:	ff 93       	push	r31
	
	if (tim0_counts < 10) {
    146c:	80 91 96 01 	lds	r24, 0x0196
    1470:	90 91 97 01 	lds	r25, 0x0197
    1474:	8a 30       	cpi	r24, 0x0A	; 10
    1476:	91 05       	cpc	r25, r1
    1478:	34 f4       	brge	.+12     	; 0x1486 <__vector_23+0x3c>
		tim0_counts++; //increment timer counter
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	90 93 97 01 	sts	0x0197, r25
    1480:	80 93 96 01 	sts	0x0196, r24
    1484:	0d c0       	rjmp	.+26     	; 0x14a0 <__vector_23+0x56>
		
	} else {
		positioning_LED(OFF); //turn LED off
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 c2 08 	call	0x1184	; 0x1184 <positioning_LED>
		
		clear(TCCR0B,CS02); //turn timer off
    148e:	85 b5       	in	r24, 0x25	; 37
    1490:	8b 7f       	andi	r24, 0xFB	; 251
    1492:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS01);
    1494:	85 b5       	in	r24, 0x25	; 37
    1496:	8d 7f       	andi	r24, 0xFD	; 253
    1498:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS00);
    149a:	85 b5       	in	r24, 0x25	; 37
    149c:	8e 7f       	andi	r24, 0xFE	; 254
    149e:	85 bd       	out	0x25, r24	; 37
	}
}
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <get_position>:
/************************************************************
Public Functions
************************************************************/

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    14c2:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    14c4:	80 91 c3 01 	lds	r24, 0x01C3
    14c8:	90 91 c4 01 	lds	r25, 0x01C4
    14cc:	a0 91 c5 01 	lds	r26, 0x01C5
    14d0:	b0 91 c6 01 	lds	r27, 0x01C6
    14d4:	80 83       	st	Z, r24
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	a2 83       	std	Z+2, r26	; 0x02
    14da:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    14dc:	80 91 bf 01 	lds	r24, 0x01BF
    14e0:	90 91 c0 01 	lds	r25, 0x01C0
    14e4:	a0 91 c1 01 	lds	r26, 0x01C1
    14e8:	b0 91 c2 01 	lds	r27, 0x01C2
    14ec:	84 83       	std	Z+4, r24	; 0x04
    14ee:	95 83       	std	Z+5, r25	; 0x05
    14f0:	a6 83       	std	Z+6, r26	; 0x06
    14f2:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    14f4:	80 91 bb 01 	lds	r24, 0x01BB
    14f8:	90 91 bc 01 	lds	r25, 0x01BC
    14fc:	a0 91 bd 01 	lds	r26, 0x01BD
    1500:	b0 91 be 01 	lds	r27, 0x01BE
    1504:	80 87       	std	Z+8, r24	; 0x08
    1506:	91 87       	std	Z+9, r25	; 0x09
    1508:	a2 87       	std	Z+10, r26	; 0x0a
    150a:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	08 95       	ret

00001510 <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    1510:	8f 92       	push	r8
    1512:	9f 92       	push	r9
    1514:	af 92       	push	r10
    1516:	bf 92       	push	r11
    1518:	cf 92       	push	r12
    151a:	df 92       	push	r13
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	6b 01       	movw	r12, r22
    1522:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    1524:	4b 01       	movw	r8, r22
    1526:	5c 01       	movw	r10, r24
    1528:	e8 94       	clt
    152a:	b7 f8       	bld	r11, 7
    152c:	2b ed       	ldi	r18, 0xDB	; 219
    152e:	3f e0       	ldi	r19, 0x0F	; 15
    1530:	49 e4       	ldi	r20, 0x49	; 73
    1532:	50 e4       	ldi	r21, 0x40	; 64
    1534:	c5 01       	movw	r24, r10
    1536:	b4 01       	movw	r22, r8
    1538:	0e 94 77 19 	call	0x32ee	; 0x32ee <__gesf2>
    153c:	18 16       	cp	r1, r24
    153e:	bc f4       	brge	.+46     	; 0x156e <theta_error_correction+0x5e>
    1540:	2b ed       	ldi	r18, 0xDB	; 219
    1542:	3f e0       	ldi	r19, 0x0F	; 15
    1544:	49 ec       	ldi	r20, 0xC9	; 201
    1546:	50 e4       	ldi	r21, 0x40	; 64
    1548:	c7 01       	movw	r24, r14
    154a:	b6 01       	movw	r22, r12
    154c:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    1550:	a5 01       	movw	r20, r10
    1552:	94 01       	movw	r18, r8
    1554:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divsf3>
    1558:	9b 01       	movw	r18, r22
    155a:	ac 01       	movw	r20, r24
    155c:	c7 01       	movw	r24, r14
    155e:	b6 01       	movw	r22, r12
    1560:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
    1564:	56 2f       	mov	r21, r22
    1566:	47 2f       	mov	r20, r23
    1568:	38 2f       	mov	r19, r24
    156a:	29 2f       	mov	r18, r25
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <theta_error_correction+0x66>
	else{return error;}
    156e:	5c 2d       	mov	r21, r12
    1570:	4d 2d       	mov	r20, r13
    1572:	3e 2d       	mov	r19, r14
    1574:	2f 2d       	mov	r18, r15
}
    1576:	65 2f       	mov	r22, r21
    1578:	74 2f       	mov	r23, r20
    157a:	83 2f       	mov	r24, r19
    157c:	92 2f       	mov	r25, r18
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	cf 90       	pop	r12
    1586:	bf 90       	pop	r11
    1588:	af 90       	pop	r10
    158a:	9f 90       	pop	r9
    158c:	8f 90       	pop	r8
    158e:	08 95       	ret

00001590 <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    1590:	2f 92       	push	r2
    1592:	3f 92       	push	r3
    1594:	4f 92       	push	r4
    1596:	5f 92       	push	r5
    1598:	6f 92       	push	r6
    159a:	7f 92       	push	r7
    159c:	8f 92       	push	r8
    159e:	9f 92       	push	r9
    15a0:	af 92       	push	r10
    15a2:	bf 92       	push	r11
    15a4:	cf 92       	push	r12
    15a6:	df 92       	push	r13
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	a8 97       	sbiw	r28, 0x28	; 40
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    15c4:	ce 01       	movw	r24, r28
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	0e 94 1a 13 	call	0x2634	; 0x2634 <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    15cc:	6b 81       	ldd	r22, Y+3	; 0x03
    15ce:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    15d0:	0f 81       	ldd	r16, Y+7	; 0x07
    15d2:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    15d4:	49 85       	ldd	r20, Y+9	; 0x09
    15d6:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    15d8:	ad 85       	ldd	r26, Y+13	; 0x0d
    15da:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    15dc:	2f 85       	ldd	r18, Y+15	; 0x0f
    15de:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    15e0:	eb 89       	ldd	r30, Y+19	; 0x13
    15e2:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    15e4:	8d 89       	ldd	r24, Y+21	; 0x15
    15e6:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    15e8:	e9 80       	ldd	r14, Y+1	; 0x01
    15ea:	fa 80       	ldd	r15, Y+2	; 0x02
    15ec:	fa 8e       	std	Y+26, r15	; 0x1a
    15ee:	e9 8e       	std	Y+25, r14	; 0x19
    15f0:	1c 8f       	std	Y+28, r17	; 0x1c
    15f2:	0b 8f       	std	Y+27, r16	; 0x1b
    15f4:	be 8f       	std	Y+30, r27	; 0x1e
    15f6:	ad 8f       	std	Y+29, r26	; 0x1d
    15f8:	f8 a3       	std	Y+32, r31	; 0x20
    15fa:	ef 8f       	std	Y+31, r30	; 0x1f
    15fc:	7a a3       	std	Y+34, r23	; 0x22
    15fe:	69 a3       	std	Y+33, r22	; 0x21
    1600:	5c a3       	std	Y+36, r21	; 0x24
    1602:	4b a3       	std	Y+35, r20	; 0x23
    1604:	3e a3       	std	Y+38, r19	; 0x26
    1606:	2d a3       	std	Y+37, r18	; 0x25
    1608:	98 a7       	std	Y+40, r25	; 0x28
    160a:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    160c:	6c e1       	ldi	r22, 0x1C	; 28
    160e:	71 e0       	ldi	r23, 0x01	; 1
    1610:	ce 01       	movw	r24, r28
    1612:	49 96       	adiw	r24, 0x19	; 25
    1614:	0e 94 4d 06 	call	0xc9a	; 0xc9a <localization_calc>
    1618:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    161a:	fc 01       	movw	r30, r24
    161c:	80 85       	ldd	r24, Z+8	; 0x08
    161e:	91 85       	ldd	r25, Z+9	; 0x09
    1620:	a2 85       	ldd	r26, Z+10	; 0x0a
    1622:	b3 85       	ldd	r27, Z+11	; 0x0b
    1624:	0f 2e       	mov	r0, r31
    1626:	fc e1       	ldi	r31, 0x1C	; 28
    1628:	2f 2e       	mov	r2, r31
    162a:	f1 e0       	ldi	r31, 0x01	; 1
    162c:	3f 2e       	mov	r3, r31
    162e:	f0 2d       	mov	r31, r0
    1630:	f1 01       	movw	r30, r2
    1632:	80 87       	std	Z+8, r24	; 0x08
    1634:	91 87       	std	Z+9, r25	; 0x09
    1636:	a2 87       	std	Z+10, r26	; 0x0a
    1638:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    163a:	f8 01       	movw	r30, r16
    163c:	60 85       	ldd	r22, Z+8	; 0x08
    163e:	71 85       	ldd	r23, Z+9	; 0x09
    1640:	82 85       	ldd	r24, Z+10	; 0x0a
    1642:	93 85       	ldd	r25, Z+11	; 0x0b
    1644:	0e 94 88 0a 	call	0x1510	; 0x1510 <theta_error_correction>
    1648:	2b 01       	movw	r4, r22
    164a:	3c 01       	movw	r6, r24
    164c:	f8 01       	movw	r30, r16
    164e:	60 87       	std	Z+8, r22	; 0x08
    1650:	71 87       	std	Z+9, r23	; 0x09
    1652:	82 87       	std	Z+10, r24	; 0x0a
    1654:	93 87       	std	Z+11, r25	; 0x0b
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1656:	24 ea       	ldi	r18, 0xA4	; 164
    1658:	30 e7       	ldi	r19, 0x70	; 112
    165a:	4d e7       	ldi	r20, 0x7D	; 125
    165c:	5f e3       	ldi	r21, 0x3F	; 63
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    166a:	4b 01       	movw	r8, r22
    166c:	5c 01       	movw	r10, r24
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	37 ed       	ldi	r19, 0xD7	; 215
    1672:	43 e2       	ldi	r20, 0x23	; 35
    1674:	5c e3       	ldi	r21, 0x3C	; 60
    1676:	60 91 c3 01 	lds	r22, 0x01C3
    167a:	70 91 c4 01 	lds	r23, 0x01C4
    167e:	80 91 c5 01 	lds	r24, 0x01C5
    1682:	90 91 c6 01 	lds	r25, 0x01C6
    1686:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    168a:	9b 01       	movw	r18, r22
    168c:	ac 01       	movw	r20, r24
    168e:	c5 01       	movw	r24, r10
    1690:	b4 01       	movw	r22, r8
    1692:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
    1696:	4b 01       	movw	r8, r22
    1698:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    169a:	60 93 c3 01 	sts	0x01C3, r22
    169e:	70 93 c4 01 	sts	0x01C4, r23
    16a2:	80 93 c5 01 	sts	0x01C5, r24
    16a6:	90 93 c6 01 	sts	0x01C6, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    16aa:	24 ea       	ldi	r18, 0xA4	; 164
    16ac:	30 e7       	ldi	r19, 0x70	; 112
    16ae:	4d e7       	ldi	r20, 0x7D	; 125
    16b0:	5f e3       	ldi	r21, 0x3F	; 63
    16b2:	f8 01       	movw	r30, r16
    16b4:	64 81       	ldd	r22, Z+4	; 0x04
    16b6:	75 81       	ldd	r23, Z+5	; 0x05
    16b8:	86 81       	ldd	r24, Z+6	; 0x06
    16ba:	97 81       	ldd	r25, Z+7	; 0x07
    16bc:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    16c0:	6b 01       	movw	r12, r22
    16c2:	7c 01       	movw	r14, r24
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	37 ed       	ldi	r19, 0xD7	; 215
    16c8:	43 e2       	ldi	r20, 0x23	; 35
    16ca:	5c e3       	ldi	r21, 0x3C	; 60
    16cc:	60 91 bf 01 	lds	r22, 0x01BF
    16d0:	70 91 c0 01 	lds	r23, 0x01C0
    16d4:	80 91 c1 01 	lds	r24, 0x01C1
    16d8:	90 91 c2 01 	lds	r25, 0x01C2
    16dc:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    16e0:	9b 01       	movw	r18, r22
    16e2:	ac 01       	movw	r20, r24
    16e4:	c7 01       	movw	r24, r14
    16e6:	b6 01       	movw	r22, r12
    16e8:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
    16ec:	6b 01       	movw	r12, r22
    16ee:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    16f0:	60 93 bf 01 	sts	0x01BF, r22
    16f4:	70 93 c0 01 	sts	0x01C0, r23
    16f8:	80 93 c1 01 	sts	0x01C1, r24
    16fc:	90 93 c2 01 	sts	0x01C2, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1700:	24 ea       	ldi	r18, 0xA4	; 164
    1702:	30 e7       	ldi	r19, 0x70	; 112
    1704:	4d e7       	ldi	r20, 0x7D	; 125
    1706:	5f e3       	ldi	r21, 0x3F	; 63
    1708:	c3 01       	movw	r24, r6
    170a:	b2 01       	movw	r22, r4
    170c:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    1710:	2b 01       	movw	r4, r22
    1712:	3c 01       	movw	r6, r24
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	37 ed       	ldi	r19, 0xD7	; 215
    1718:	43 e2       	ldi	r20, 0x23	; 35
    171a:	5c e3       	ldi	r21, 0x3C	; 60
    171c:	60 91 bb 01 	lds	r22, 0x01BB
    1720:	70 91 bc 01 	lds	r23, 0x01BC
    1724:	80 91 bd 01 	lds	r24, 0x01BD
    1728:	90 91 be 01 	lds	r25, 0x01BE
    172c:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    1730:	9b 01       	movw	r18, r22
    1732:	ac 01       	movw	r20, r24
    1734:	c3 01       	movw	r24, r6
    1736:	b2 01       	movw	r22, r4
    1738:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    173c:	60 93 bb 01 	sts	0x01BB, r22
    1740:	70 93 bc 01 	sts	0x01BC, r23
    1744:	80 93 bd 01 	sts	0x01BD, r24
    1748:	90 93 be 01 	sts	0x01BE, r25
	
	robotCenterPrev[0] = x;
    174c:	f1 01       	movw	r30, r2
    174e:	80 82       	st	Z, r8
    1750:	91 82       	std	Z+1, r9	; 0x01
    1752:	a2 82       	std	Z+2, r10	; 0x02
    1754:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    1756:	c4 82       	std	Z+4, r12	; 0x04
    1758:	d5 82       	std	Z+5, r13	; 0x05
    175a:	e6 82       	std	Z+6, r14	; 0x06
    175c:	f7 82       	std	Z+7, r15	; 0x07
}
    175e:	a8 96       	adiw	r28, 0x28	; 40
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	bf 90       	pop	r11
    177c:	af 90       	pop	r10
    177e:	9f 90       	pop	r9
    1780:	8f 90       	pop	r8
    1782:	7f 90       	pop	r7
    1784:	6f 90       	pop	r6
    1786:	5f 90       	pop	r5
    1788:	4f 90       	pop	r4
    178a:	3f 90       	pop	r3
    178c:	2f 90       	pop	r2
    178e:	08 95       	ret

00001790 <run_motor_control_loop>:



/* PID Control */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd)
{
    1790:	4f 92       	push	r4
    1792:	5f 92       	push	r5
    1794:	6f 92       	push	r6
    1796:	7f 92       	push	r7
    1798:	8f 92       	push	r8
    179a:	9f 92       	push	r9
    179c:	af 92       	push	r10
    179e:	bf 92       	push	r11
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	68 97       	sbiw	r28, 0x18	; 24
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	29 01       	movw	r4, r18
    17c2:	3a 01       	movw	r6, r20
    17c4:	e9 8a       	std	Y+17, r14	; 0x11
    17c6:	fa 8a       	std	Y+18, r15	; 0x12
    17c8:	0b 8b       	std	Y+19, r16	; 0x13
    17ca:	1c 8b       	std	Y+20, r17	; 0x14
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    17cc:	20 91 c3 01 	lds	r18, 0x01C3
    17d0:	30 91 c4 01 	lds	r19, 0x01C4
    17d4:	40 91 c5 01 	lds	r20, 0x01C5
    17d8:	50 91 c6 01 	lds	r21, 0x01C6
    17dc:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
    17e0:	6d 83       	std	Y+5, r22	; 0x05
    17e2:	7e 83       	std	Y+6, r23	; 0x06
    17e4:	8f 83       	std	Y+7, r24	; 0x07
    17e6:	98 87       	std	Y+8, r25	; 0x08
    17e8:	20 91 bf 01 	lds	r18, 0x01BF
    17ec:	30 91 c0 01 	lds	r19, 0x01C0
    17f0:	40 91 c1 01 	lds	r20, 0x01C1
    17f4:	50 91 c2 01 	lds	r21, 0x01C2
    17f8:	c3 01       	movw	r24, r6
    17fa:	b2 01       	movw	r22, r4
    17fc:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
    1800:	69 87       	std	Y+9, r22	; 0x09
    1802:	7a 87       	std	Y+10, r23	; 0x0a
    1804:	8b 87       	std	Y+11, r24	; 0x0b
    1806:	9c 87       	std	Y+12, r25	; 0x0c
    1808:	2d 81       	ldd	r18, Y+5	; 0x05
    180a:	3e 81       	ldd	r19, Y+6	; 0x06
    180c:	4f 81       	ldd	r20, Y+7	; 0x07
    180e:	58 85       	ldd	r21, Y+8	; 0x08
    1810:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    1814:	20 91 bb 01 	lds	r18, 0x01BB
    1818:	30 91 bc 01 	lds	r19, 0x01BC
    181c:	40 91 bd 01 	lds	r20, 0x01BD
    1820:	50 91 be 01 	lds	r21, 0x01BE
    1824:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
	theta_error = theta_error_correction(theta_error);
    1828:	0e 94 88 0a 	call	0x1510	; 0x1510 <theta_error_correction>
    182c:	69 83       	std	Y+1, r22	; 0x01
    182e:	7a 83       	std	Y+2, r23	; 0x02
    1830:	8b 83       	std	Y+3, r24	; 0x03
    1832:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    1834:	2b 01       	movw	r4, r22
    1836:	3c 01       	movw	r6, r24
    1838:	e8 94       	clt
    183a:	77 f8       	bld	r7, 7
    183c:	a6 01       	movw	r20, r12
    183e:	95 01       	movw	r18, r10
    1840:	c3 01       	movw	r24, r6
    1842:	b2 01       	movw	r22, r4
    1844:	0e 94 77 19 	call	0x32ee	; 0x32ee <__gesf2>
    1848:	18 16       	cp	r1, r24
    184a:	84 f4       	brge	.+32     	; 0x186c <run_motor_control_loop+0xdc>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    184c:	29 81       	ldd	r18, Y+1	; 0x01
    184e:	3a 81       	ldd	r19, Y+2	; 0x02
    1850:	4b 81       	ldd	r20, Y+3	; 0x03
    1852:	5c 81       	ldd	r21, Y+4	; 0x04
    1854:	c3 01       	movw	r24, r6
    1856:	b2 01       	movw	r22, r4
    1858:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divsf3>
    185c:	a6 01       	movw	r20, r12
    185e:	95 01       	movw	r18, r10
    1860:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    1864:	69 83       	std	Y+1, r22	; 0x01
    1866:	7a 83       	std	Y+2, r23	; 0x02
    1868:	8b 83       	std	Y+3, r24	; 0x03
    186a:	9c 83       	std	Y+4, r25	; 0x04
	}

	float angular_derivative = (theta_error-previous_theta_error)/TIMESTEP;
    186c:	20 91 b7 01 	lds	r18, 0x01B7
    1870:	30 91 b8 01 	lds	r19, 0x01B8
    1874:	40 91 b9 01 	lds	r20, 0x01B9
    1878:	50 91 ba 01 	lds	r21, 0x01BA
    187c:	69 81       	ldd	r22, Y+1	; 0x01
    187e:	7a 81       	ldd	r23, Y+2	; 0x02
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
    1888:	2f e6       	ldi	r18, 0x6F	; 111
    188a:	32 e1       	ldi	r19, 0x12	; 18
    188c:	43 e8       	ldi	r20, 0x83	; 131
    188e:	5a e3       	ldi	r21, 0x3A	; 58
    1890:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divsf3>
    1894:	6d 8b       	std	Y+21, r22	; 0x15
    1896:	7e 8b       	std	Y+22, r23	; 0x16
    1898:	8f 8b       	std	Y+23, r24	; 0x17
    189a:	98 8f       	std	Y+24, r25	; 0x18
	float angular_output = theta_kp*theta_error - theta_kd*angular_derivative; //If output > 0, turn left
    189c:	29 81       	ldd	r18, Y+1	; 0x01
    189e:	3a 81       	ldd	r19, Y+2	; 0x02
    18a0:	4b 81       	ldd	r20, Y+3	; 0x03
    18a2:	5c 81       	ldd	r21, Y+4	; 0x04
    18a4:	6b a5       	ldd	r22, Y+43	; 0x2b
    18a6:	7c a5       	ldd	r23, Y+44	; 0x2c
    18a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    18aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    18ac:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    18b0:	6b 01       	movw	r12, r22
    18b2:	7c 01       	movw	r14, r24
    18b4:	2d 89       	ldd	r18, Y+21	; 0x15
    18b6:	3e 89       	ldd	r19, Y+22	; 0x16
    18b8:	4f 89       	ldd	r20, Y+23	; 0x17
    18ba:	58 8d       	ldd	r21, Y+24	; 0x18
    18bc:	6f a5       	ldd	r22, Y+47	; 0x2f
    18be:	78 a9       	ldd	r23, Y+48	; 0x30
    18c0:	89 a9       	ldd	r24, Y+49	; 0x31
    18c2:	9a a9       	ldd	r25, Y+50	; 0x32
    18c4:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    18c8:	9b 01       	movw	r18, r22
    18ca:	ac 01       	movw	r20, r24
    18cc:	c7 01       	movw	r24, r14
    18ce:	b6 01       	movw	r22, r12
    18d0:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
	previous_theta_error = theta_error;
    18d4:	29 81       	ldd	r18, Y+1	; 0x01
    18d6:	3a 81       	ldd	r19, Y+2	; 0x02
    18d8:	4b 81       	ldd	r20, Y+3	; 0x03
    18da:	5c 81       	ldd	r21, Y+4	; 0x04
    18dc:	20 93 b7 01 	sts	0x01B7, r18
    18e0:	30 93 b8 01 	sts	0x01B8, r19
    18e4:	40 93 b9 01 	sts	0x01B9, r20
    18e8:	50 93 ba 01 	sts	0x01BA, r21
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    18ec:	2b ed       	ldi	r18, 0xDB	; 219
    18ee:	3f e0       	ldi	r19, 0x0F	; 15
    18f0:	49 e4       	ldi	r20, 0x49	; 73
    18f2:	50 e4       	ldi	r21, 0x40	; 64
    18f4:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divsf3>
    18f8:	6d 87       	std	Y+13, r22	; 0x0d
    18fa:	7e 87       	std	Y+14, r23	; 0x0e
    18fc:	8f 87       	std	Y+15, r24	; 0x0f
    18fe:	98 8b       	std	Y+16, r25	; 0x10

	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    1900:	69 81       	ldd	r22, Y+1	; 0x01
    1902:	7a 81       	ldd	r23, Y+2	; 0x02
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <cos>
    190c:	2b 01       	movw	r4, r22
    190e:	3c 01       	movw	r6, r24
    1910:	29 85       	ldd	r18, Y+9	; 0x09
    1912:	3a 85       	ldd	r19, Y+10	; 0x0a
    1914:	4b 85       	ldd	r20, Y+11	; 0x0b
    1916:	5c 85       	ldd	r21, Y+12	; 0x0c
    1918:	ca 01       	movw	r24, r20
    191a:	b9 01       	movw	r22, r18
    191c:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    1920:	6b 01       	movw	r12, r22
    1922:	7c 01       	movw	r14, r24
    1924:	2d 81       	ldd	r18, Y+5	; 0x05
    1926:	3e 81       	ldd	r19, Y+6	; 0x06
    1928:	4f 81       	ldd	r20, Y+7	; 0x07
    192a:	58 85       	ldd	r21, Y+8	; 0x08
    192c:	ca 01       	movw	r24, r20
    192e:	b9 01       	movw	r22, r18
    1930:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    1934:	9b 01       	movw	r18, r22
    1936:	ac 01       	movw	r20, r24
    1938:	c7 01       	movw	r24, r14
    193a:	b6 01       	movw	r22, r12
    193c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
    1940:	0e 94 ff 19 	call	0x33fe	; 0x33fe <sqrt>
    1944:	9b 01       	movw	r18, r22
    1946:	ac 01       	movw	r20, r24
    1948:	c3 01       	movw	r24, r6
    194a:	b2 01       	movw	r22, r4
    194c:	9f 77       	andi	r25, 0x7F	; 127
    194e:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    1952:	6b 01       	movw	r12, r22
    1954:	7c 01       	movw	r14, r24
	if (has_puck()) {
    1956:	0e 94 a1 14 	call	0x2942	; 0x2942 <has_puck>
    195a:	88 23       	and	r24, r24
    195c:	e1 f0       	breq	.+56     	; 0x1996 <run_motor_control_loop+0x206>
		if (linear_error<0){
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	a9 01       	movw	r20, r18
    1964:	c7 01       	movw	r24, r14
    1966:	b6 01       	movw	r22, r12
    1968:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__cmpsf2>
    196c:	88 23       	and	r24, r24
    196e:	5c f0       	brlt	.+22     	; 0x1986 <run_motor_control_loop+0x1f6>
			linear_error = 30;
		} else {
			linear_error += 30;
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 ef       	ldi	r20, 0xF0	; 240
    1976:	51 e4       	ldi	r21, 0x41	; 65
    1978:	c7 01       	movw	r24, r14
    197a:	b6 01       	movw	r22, r12
    197c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
    1980:	6b 01       	movw	r12, r22
    1982:	7c 01       	movw	r14, r24
    1984:	08 c0       	rjmp	.+16     	; 0x1996 <run_motor_control_loop+0x206>
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	if (has_puck()) {
		if (linear_error<0){
			linear_error = 30;
    1986:	0f 2e       	mov	r0, r31
    1988:	c1 2c       	mov	r12, r1
    198a:	d1 2c       	mov	r13, r1
    198c:	f0 ef       	ldi	r31, 0xF0	; 240
    198e:	ef 2e       	mov	r14, r31
    1990:	f1 e4       	ldi	r31, 0x41	; 65
    1992:	ff 2e       	mov	r15, r31
    1994:	f0 2d       	mov	r31, r0
		} else {
			linear_error += 30;
		}
	}
	float linear_derivative = (linear_error-previous_linear_error)/TIMESTEP;
    1996:	20 91 b3 01 	lds	r18, 0x01B3
    199a:	30 91 b4 01 	lds	r19, 0x01B4
    199e:	40 91 b5 01 	lds	r20, 0x01B5
    19a2:	50 91 b6 01 	lds	r21, 0x01B6
    19a6:	c7 01       	movw	r24, r14
    19a8:	b6 01       	movw	r22, r12
    19aa:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
    19ae:	2f e6       	ldi	r18, 0x6F	; 111
    19b0:	32 e1       	ldi	r19, 0x12	; 18
    19b2:	43 e8       	ldi	r20, 0x83	; 131
    19b4:	5a e3       	ldi	r21, 0x3A	; 58
    19b6:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divsf3>
    19ba:	4b 01       	movw	r8, r22
    19bc:	5c 01       	movw	r10, r24
	float linear_output = linear_kp*linear_error - linear_kd*linear_derivative;
    19be:	a7 01       	movw	r20, r14
    19c0:	96 01       	movw	r18, r12
    19c2:	6b a9       	ldd	r22, Y+51	; 0x33
    19c4:	7c a9       	ldd	r23, Y+52	; 0x34
    19c6:	8d a9       	ldd	r24, Y+53	; 0x35
    19c8:	9e a9       	ldd	r25, Y+54	; 0x36
    19ca:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    19ce:	2b 01       	movw	r4, r22
    19d0:	3c 01       	movw	r6, r24
    19d2:	a5 01       	movw	r20, r10
    19d4:	94 01       	movw	r18, r8
    19d6:	6f a9       	ldd	r22, Y+55	; 0x37
    19d8:	78 ad       	ldd	r23, Y+56	; 0x38
    19da:	89 ad       	ldd	r24, Y+57	; 0x39
    19dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    19de:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    19e2:	9b 01       	movw	r18, r22
    19e4:	ac 01       	movw	r20, r24
    19e6:	c3 01       	movw	r24, r6
    19e8:	b2 01       	movw	r22, r4
    19ea:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
    19ee:	2b 01       	movw	r4, r22
    19f0:	3c 01       	movw	r6, r24
	previous_linear_error = linear_error;
    19f2:	c0 92 b3 01 	sts	0x01B3, r12
    19f6:	d0 92 b4 01 	sts	0x01B4, r13
    19fa:	e0 92 b5 01 	sts	0x01B5, r14
    19fe:	f0 92 b6 01 	sts	0x01B6, r15
	if(linear_output>40.0){linear_output=40.0;}
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	52 e4       	ldi	r21, 0x42	; 66
    1a0a:	0e 94 77 19 	call	0x32ee	; 0x32ee <__gesf2>
    1a0e:	18 16       	cp	r1, r24
    1a10:	44 f4       	brge	.+16     	; 0x1a22 <run_motor_control_loop+0x292>
    1a12:	0f 2e       	mov	r0, r31
    1a14:	41 2c       	mov	r4, r1
    1a16:	51 2c       	mov	r5, r1
    1a18:	f0 e2       	ldi	r31, 0x20	; 32
    1a1a:	6f 2e       	mov	r6, r31
    1a1c:	f2 e4       	ldi	r31, 0x42	; 66
    1a1e:	7f 2e       	mov	r7, r31
    1a20:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	52 e4       	ldi	r21, 0x42	; 66
    1a2a:	c3 01       	movw	r24, r6
    1a2c:	b2 01       	movw	r22, r4
    1a2e:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divsf3>
    1a32:	6b 01       	movw	r12, r22
    1a34:	7c 01       	movw	r14, r24
	
	if (linear_derivative < 0.1 && angular_derivative < 0.01) {
    1a36:	2d ec       	ldi	r18, 0xCD	; 205
    1a38:	3c ec       	ldi	r19, 0xCC	; 204
    1a3a:	4c ec       	ldi	r20, 0xCC	; 204
    1a3c:	5d e3       	ldi	r21, 0x3D	; 61
    1a3e:	c5 01       	movw	r24, r10
    1a40:	b4 01       	movw	r22, r8
    1a42:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__cmpsf2>
    1a46:	88 23       	and	r24, r24
    1a48:	0c f5       	brge	.+66     	; 0x1a8c <run_motor_control_loop+0x2fc>
    1a4a:	2a e0       	ldi	r18, 0x0A	; 10
    1a4c:	37 ed       	ldi	r19, 0xD7	; 215
    1a4e:	43 e2       	ldi	r20, 0x23	; 35
    1a50:	5c e3       	ldi	r21, 0x3C	; 60
    1a52:	6d 89       	ldd	r22, Y+21	; 0x15
    1a54:	7e 89       	ldd	r23, Y+22	; 0x16
    1a56:	8f 89       	ldd	r24, Y+23	; 0x17
    1a58:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__cmpsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	ac f4       	brge	.+42     	; 0x1a8c <run_motor_control_loop+0x2fc>
		angular_output = 0.2*fabs(theta_error)/theta_error;
    1a62:	2d ec       	ldi	r18, 0xCD	; 205
    1a64:	3c ec       	ldi	r19, 0xCC	; 204
    1a66:	4c e4       	ldi	r20, 0x4C	; 76
    1a68:	5e e3       	ldi	r21, 0x3E	; 62
    1a6a:	69 81       	ldd	r22, Y+1	; 0x01
    1a6c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	9c 81       	ldd	r25, Y+4	; 0x04
    1a72:	9f 77       	andi	r25, 0x7F	; 127
    1a74:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    1a78:	29 81       	ldd	r18, Y+1	; 0x01
    1a7a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a7c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a7e:	5c 81       	ldd	r21, Y+4	; 0x04
    1a80:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divsf3>
    1a84:	6d 87       	std	Y+13, r22	; 0x0d
    1a86:	7e 87       	std	Y+14, r23	; 0x0e
    1a88:	8f 87       	std	Y+15, r24	; 0x0f
    1a8a:	98 8b       	std	Y+16, r25	; 0x10
	}
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    1a8c:	8d 84       	ldd	r8, Y+13	; 0x0d
    1a8e:	9e 84       	ldd	r9, Y+14	; 0x0e
    1a90:	af 84       	ldd	r10, Y+15	; 0x0f
    1a92:	b8 88       	ldd	r11, Y+16	; 0x10
    1a94:	b7 fa       	bst	r11, 7
    1a96:	b0 94       	com	r11
    1a98:	b7 f8       	bld	r11, 7
    1a9a:	b0 94       	com	r11
	right_duty_cycle = angular_output;
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    1a9c:	69 81       	ldd	r22, Y+1	; 0x01
    1a9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa4:	9f 77       	andi	r25, 0x7F	; 127
    1aa6:	2b ed       	ldi	r18, 0xDB	; 219
    1aa8:	3f e0       	ldi	r19, 0x0F	; 15
    1aaa:	49 ec       	ldi	r20, 0xC9	; 201
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__cmpsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	0c f5       	brge	.+66     	; 0x1af8 <run_motor_control_loop+0x368>
		left_duty_cycle += linear_output;
    1ab6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ab8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1aba:	4f 85       	ldd	r20, Y+15	; 0x0f
    1abc:	58 89       	ldd	r21, Y+16	; 0x10
    1abe:	c7 01       	movw	r24, r14
    1ac0:	b6 01       	movw	r22, r12
    1ac2:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
    1ac6:	60 93 18 01 	sts	0x0118, r22
    1aca:	70 93 19 01 	sts	0x0119, r23
    1ace:	80 93 1a 01 	sts	0x011A, r24
    1ad2:	90 93 1b 01 	sts	0x011B, r25
		right_duty_cycle += linear_output;
    1ad6:	a7 01       	movw	r20, r14
    1ad8:	96 01       	movw	r18, r12
    1ada:	6d 85       	ldd	r22, Y+13	; 0x0d
    1adc:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ade:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae0:	98 89       	ldd	r25, Y+16	; 0x10
    1ae2:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
    1ae6:	60 93 14 01 	sts	0x0114, r22
    1aea:	70 93 15 01 	sts	0x0115, r23
    1aee:	80 93 16 01 	sts	0x0116, r24
    1af2:	90 93 17 01 	sts	0x0117, r25
    1af6:	1e c0       	rjmp	.+60     	; 0x1b34 <run_motor_control_loop+0x3a4>
		} else{
		left_duty_cycle -= linear_output;
    1af8:	a7 01       	movw	r20, r14
    1afa:	96 01       	movw	r18, r12
    1afc:	c5 01       	movw	r24, r10
    1afe:	b4 01       	movw	r22, r8
    1b00:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
    1b04:	60 93 18 01 	sts	0x0118, r22
    1b08:	70 93 19 01 	sts	0x0119, r23
    1b0c:	80 93 1a 01 	sts	0x011A, r24
    1b10:	90 93 1b 01 	sts	0x011B, r25
		right_duty_cycle -= linear_output;
    1b14:	a7 01       	movw	r20, r14
    1b16:	96 01       	movw	r18, r12
    1b18:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b1a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b1e:	98 89       	ldd	r25, Y+16	; 0x10
    1b20:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__subsf3>
    1b24:	60 93 14 01 	sts	0x0114, r22
    1b28:	70 93 15 01 	sts	0x0115, r23
    1b2c:	80 93 16 01 	sts	0x0116, r24
    1b30:	90 93 17 01 	sts	0x0117, r25
	
	//If it has the puck, don't let either of the motors spin backwards 

		
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	a9 01       	movw	r20, r18
    1b3a:	60 91 18 01 	lds	r22, 0x0118
    1b3e:	70 91 19 01 	lds	r23, 0x0119
    1b42:	80 91 1a 01 	lds	r24, 0x011A
    1b46:	90 91 1b 01 	lds	r25, 0x011B
    1b4a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__cmpsf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	14 f4       	brge	.+4      	; 0x1b56 <run_motor_control_loop+0x3c6>
    1b52:	29 98       	cbi	0x05, 1	; 5
    1b54:	01 c0       	rjmp	.+2      	; 0x1b58 <run_motor_control_loop+0x3c8>
	else{set(PORTB,1);}
    1b56:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	a9 01       	movw	r20, r18
    1b5e:	60 91 14 01 	lds	r22, 0x0114
    1b62:	70 91 15 01 	lds	r23, 0x0115
    1b66:	80 91 16 01 	lds	r24, 0x0116
    1b6a:	90 91 17 01 	lds	r25, 0x0117
    1b6e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__cmpsf2>
    1b72:	88 23       	and	r24, r24
    1b74:	14 f4       	brge	.+4      	; 0x1b7a <run_motor_control_loop+0x3ea>
    1b76:	2b 98       	cbi	0x05, 3	; 5
    1b78:	01 c0       	rjmp	.+2      	; 0x1b7c <run_motor_control_loop+0x3ec>
	else{set(PORTB,3);}
    1b7a:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    1b7c:	80 90 18 01 	lds	r8, 0x0118
    1b80:	90 90 19 01 	lds	r9, 0x0119
    1b84:	a0 90 1a 01 	lds	r10, 0x011A
    1b88:	b0 90 1b 01 	lds	r11, 0x011B
    1b8c:	e8 94       	clt
    1b8e:	b7 f8       	bld	r11, 7
    1b90:	80 92 18 01 	sts	0x0118, r8
    1b94:	90 92 19 01 	sts	0x0119, r9
    1b98:	a0 92 1a 01 	sts	0x011A, r10
    1b9c:	b0 92 1b 01 	sts	0x011B, r11
	right_duty_cycle = fabs(right_duty_cycle);
    1ba0:	c0 90 14 01 	lds	r12, 0x0114
    1ba4:	d0 90 15 01 	lds	r13, 0x0115
    1ba8:	e0 90 16 01 	lds	r14, 0x0116
    1bac:	f0 90 17 01 	lds	r15, 0x0117
    1bb0:	e8 94       	clt
    1bb2:	f7 f8       	bld	r15, 7
    1bb4:	c0 92 14 01 	sts	0x0114, r12
    1bb8:	d0 92 15 01 	sts	0x0115, r13
    1bbc:	e0 92 16 01 	sts	0x0116, r14
    1bc0:	f0 92 17 01 	sts	0x0117, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    1bc4:	a7 01       	movw	r20, r14
    1bc6:	96 01       	movw	r18, r12
    1bc8:	c5 01       	movw	r24, r10
    1bca:	b4 01       	movw	r22, r8
    1bcc:	0e 94 77 19 	call	0x32ee	; 0x32ee <__gesf2>
    1bd0:	18 16       	cp	r1, r24
    1bd2:	2c f0       	brlt	.+10     	; 0x1bde <run_motor_control_loop+0x44e>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    1bd4:	1c 2d       	mov	r17, r12
    1bd6:	0d 2d       	mov	r16, r13
    1bd8:	7e 2c       	mov	r7, r14
    1bda:	6f 2c       	mov	r6, r15
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <run_motor_control_loop+0x456>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    1bde:	18 2d       	mov	r17, r8
    1be0:	09 2d       	mov	r16, r9
    1be2:	7a 2c       	mov	r7, r10
    1be4:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    1be6:	29 89       	ldd	r18, Y+17	; 0x11
    1be8:	3a 89       	ldd	r19, Y+18	; 0x12
    1bea:	4b 89       	ldd	r20, Y+19	; 0x13
    1bec:	5c 89       	ldd	r21, Y+20	; 0x14
    1bee:	61 2f       	mov	r22, r17
    1bf0:	70 2f       	mov	r23, r16
    1bf2:	87 2d       	mov	r24, r7
    1bf4:	96 2d       	mov	r25, r6
    1bf6:	0e 94 77 19 	call	0x32ee	; 0x32ee <__gesf2>
    1bfa:	18 16       	cp	r1, r24
    1bfc:	64 f5       	brge	.+88     	; 0x1c56 <run_motor_control_loop+0x4c6>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    1bfe:	21 2f       	mov	r18, r17
    1c00:	30 2f       	mov	r19, r16
    1c02:	47 2d       	mov	r20, r7
    1c04:	56 2d       	mov	r21, r6
    1c06:	c5 01       	movw	r24, r10
    1c08:	b4 01       	movw	r22, r8
    1c0a:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divsf3>
    1c0e:	29 89       	ldd	r18, Y+17	; 0x11
    1c10:	3a 89       	ldd	r19, Y+18	; 0x12
    1c12:	4b 89       	ldd	r20, Y+19	; 0x13
    1c14:	5c 89       	ldd	r21, Y+20	; 0x14
    1c16:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    1c1a:	60 93 18 01 	sts	0x0118, r22
    1c1e:	70 93 19 01 	sts	0x0119, r23
    1c22:	80 93 1a 01 	sts	0x011A, r24
    1c26:	90 93 1b 01 	sts	0x011B, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    1c2a:	21 2f       	mov	r18, r17
    1c2c:	30 2f       	mov	r19, r16
    1c2e:	47 2d       	mov	r20, r7
    1c30:	56 2d       	mov	r21, r6
    1c32:	c7 01       	movw	r24, r14
    1c34:	b6 01       	movw	r22, r12
    1c36:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divsf3>
    1c3a:	29 89       	ldd	r18, Y+17	; 0x11
    1c3c:	3a 89       	ldd	r19, Y+18	; 0x12
    1c3e:	4b 89       	ldd	r20, Y+19	; 0x13
    1c40:	5c 89       	ldd	r21, Y+20	; 0x14
    1c42:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    1c46:	60 93 14 01 	sts	0x0114, r22
    1c4a:	70 93 15 01 	sts	0x0115, r23
    1c4e:	80 93 16 01 	sts	0x0116, r24
    1c52:	90 93 17 01 	sts	0x0117, r25
	}
	


	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    1c56:	08 e8       	ldi	r16, 0x88	; 136
    1c58:	10 e0       	ldi	r17, 0x00	; 0
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	0e 94 5f 18 	call	0x30be	; 0x30be <__floatunsisf>
    1c68:	20 91 18 01 	lds	r18, 0x0118
    1c6c:	30 91 19 01 	lds	r19, 0x0119
    1c70:	40 91 1a 01 	lds	r20, 0x011A
    1c74:	50 91 1b 01 	lds	r21, 0x011B
    1c78:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    1c7c:	0e 94 30 18 	call	0x3060	; 0x3060 <__fixunssfsi>
    1c80:	70 93 8b 00 	sts	0x008B, r23
    1c84:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    1c88:	f8 01       	movw	r30, r16
    1c8a:	60 81       	ld	r22, Z
    1c8c:	71 81       	ldd	r23, Z+1	; 0x01
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 5f 18 	call	0x30be	; 0x30be <__floatunsisf>
    1c96:	20 91 14 01 	lds	r18, 0x0114
    1c9a:	30 91 15 01 	lds	r19, 0x0115
    1c9e:	40 91 16 01 	lds	r20, 0x0116
    1ca2:	50 91 17 01 	lds	r21, 0x0117
    1ca6:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    1caa:	0e 94 30 18 	call	0x3060	; 0x3060 <__fixunssfsi>
    1cae:	70 93 8d 00 	sts	0x008D, r23
    1cb2:	60 93 8c 00 	sts	0x008C, r22

}
    1cb6:	68 96       	adiw	r28, 0x18	; 24
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	ff 90       	pop	r15
    1ccc:	ef 90       	pop	r14
    1cce:	df 90       	pop	r13
    1cd0:	cf 90       	pop	r12
    1cd2:	bf 90       	pop	r11
    1cd4:	af 90       	pop	r10
    1cd6:	9f 90       	pop	r9
    1cd8:	8f 90       	pop	r8
    1cda:	7f 90       	pop	r7
    1cdc:	6f 90       	pop	r6
    1cde:	5f 90       	pop	r5
    1ce0:	4f 90       	pop	r4
    1ce2:	08 95       	ret

00001ce4 <m_bus_init>:
    1ce4:	58 9a       	sbi	0x0b, 0	; 11
    1ce6:	59 9a       	sbi	0x0b, 1	; 11
    1ce8:	5a 9a       	sbi	0x0b, 2	; 11
    1cea:	8c e0       	ldi	r24, 0x0C	; 12
    1cec:	80 93 b8 00 	sts	0x00B8, r24
    1cf0:	e9 e6       	ldi	r30, 0x69	; 105
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	80 62       	ori	r24, 0x20	; 32
    1cf8:	80 83       	st	Z, r24
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8f 7e       	andi	r24, 0xEF	; 239
    1cfe:	80 83       	st	Z, r24
    1d00:	ea 9a       	sbi	0x1d, 2	; 29
    1d02:	78 94       	sei
    1d04:	08 95       	ret

00001d06 <m_rf_open>:
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	18 2f       	mov	r17, r24
    1d0e:	d6 2f       	mov	r29, r22
    1d10:	c4 2f       	mov	r28, r20
    1d12:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <m_bus_init>
    1d16:	94 ea       	ldi	r25, 0xA4	; 164
    1d18:	90 93 bc 00 	sts	0x00BC, r25
    1d1c:	ec eb       	ldi	r30, 0xBC	; 188
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	90 81       	ld	r25, Z
    1d22:	99 23       	and	r25, r25
    1d24:	ec f7       	brge	.-6      	; 0x1d20 <m_rf_open+0x1a>
    1d26:	90 e5       	ldi	r25, 0x50	; 80
    1d28:	90 93 bb 00 	sts	0x00BB, r25
    1d2c:	94 e8       	ldi	r25, 0x84	; 132
    1d2e:	90 93 bc 00 	sts	0x00BC, r25
    1d32:	ec eb       	ldi	r30, 0xBC	; 188
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	90 81       	ld	r25, Z
    1d38:	99 23       	and	r25, r25
    1d3a:	ec f7       	brge	.-6      	; 0x1d36 <m_rf_open+0x30>
    1d3c:	90 91 b9 00 	lds	r25, 0x00B9
    1d40:	98 7f       	andi	r25, 0xF8	; 248
    1d42:	90 32       	cpi	r25, 0x20	; 32
    1d44:	29 f4       	brne	.+10     	; 0x1d50 <m_rf_open+0x4a>
    1d46:	84 e9       	ldi	r24, 0x94	; 148
    1d48:	80 93 bc 00 	sts	0x00BC, r24
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	2d c0       	rjmp	.+90     	; 0x1daa <m_rf_open+0xa4>
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	80 93 bb 00 	sts	0x00BB, r24
    1d56:	84 e8       	ldi	r24, 0x84	; 132
    1d58:	80 93 bc 00 	sts	0x00BC, r24
    1d5c:	ec eb       	ldi	r30, 0xBC	; 188
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	90 81       	ld	r25, Z
    1d62:	99 23       	and	r25, r25
    1d64:	ec f7       	brge	.-6      	; 0x1d60 <m_rf_open+0x5a>
    1d66:	10 93 bb 00 	sts	0x00BB, r17
    1d6a:	84 e8       	ldi	r24, 0x84	; 132
    1d6c:	80 93 bc 00 	sts	0x00BC, r24
    1d70:	ec eb       	ldi	r30, 0xBC	; 188
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	88 23       	and	r24, r24
    1d78:	ec f7       	brge	.-6      	; 0x1d74 <m_rf_open+0x6e>
    1d7a:	d0 93 bb 00 	sts	0x00BB, r29
    1d7e:	84 e8       	ldi	r24, 0x84	; 132
    1d80:	80 93 bc 00 	sts	0x00BC, r24
    1d84:	ec eb       	ldi	r30, 0xBC	; 188
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	88 23       	and	r24, r24
    1d8c:	ec f7       	brge	.-6      	; 0x1d88 <m_rf_open+0x82>
    1d8e:	c0 93 bb 00 	sts	0x00BB, r28
    1d92:	84 e8       	ldi	r24, 0x84	; 132
    1d94:	80 93 bc 00 	sts	0x00BC, r24
    1d98:	ec eb       	ldi	r30, 0xBC	; 188
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	88 23       	and	r24, r24
    1da0:	ec f7       	brge	.-6      	; 0x1d9c <m_rf_open+0x96>
    1da2:	84 e9       	ldi	r24, 0x94	; 148
    1da4:	80 93 bc 00 	sts	0x00BC, r24
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	08 95       	ret

00001db2 <m_rf_read>:
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	9c 01       	movw	r18, r24
    1db8:	84 ea       	ldi	r24, 0xA4	; 164
    1dba:	80 93 bc 00 	sts	0x00BC, r24
    1dbe:	ec eb       	ldi	r30, 0xBC	; 188
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	90 81       	ld	r25, Z
    1dc4:	99 23       	and	r25, r25
    1dc6:	ec f7       	brge	.-6      	; 0x1dc2 <m_rf_read+0x10>
    1dc8:	81 e5       	ldi	r24, 0x51	; 81
    1dca:	80 93 bb 00 	sts	0x00BB, r24
    1dce:	84 e8       	ldi	r24, 0x84	; 132
    1dd0:	80 93 bc 00 	sts	0x00BC, r24
    1dd4:	ec eb       	ldi	r30, 0xBC	; 188
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	90 81       	ld	r25, Z
    1dda:	99 23       	and	r25, r25
    1ddc:	ec f7       	brge	.-6      	; 0x1dd8 <m_rf_read+0x26>
    1dde:	80 91 b9 00 	lds	r24, 0x00B9
    1de2:	88 7f       	andi	r24, 0xF8	; 248
    1de4:	88 34       	cpi	r24, 0x48	; 72
    1de6:	29 f4       	brne	.+10     	; 0x1df2 <m_rf_read+0x40>
    1de8:	84 e9       	ldi	r24, 0x94	; 148
    1dea:	80 93 bc 00 	sts	0x00BC, r24
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	41 c0       	rjmp	.+130    	; 0x1e74 <m_rf_read+0xc2>
    1df2:	84 ec       	ldi	r24, 0xC4	; 196
    1df4:	80 93 bc 00 	sts	0x00BC, r24
    1df8:	ec eb       	ldi	r30, 0xBC	; 188
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	90 81       	ld	r25, Z
    1dfe:	99 23       	and	r25, r25
    1e00:	ec f7       	brge	.-6      	; 0x1dfc <m_rf_read+0x4a>
    1e02:	40 91 bb 00 	lds	r20, 0x00BB
    1e06:	46 13       	cpse	r20, r22
    1e08:	09 c0       	rjmp	.+18     	; 0x1e1c <m_rf_read+0x6a>
    1e0a:	84 2f       	mov	r24, r20
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	18 16       	cp	r1, r24
    1e12:	19 06       	cpc	r1, r25
    1e14:	44 f0       	brlt	.+16     	; 0x1e26 <m_rf_read+0x74>
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	1a c0       	rjmp	.+52     	; 0x1e50 <m_rf_read+0x9e>
    1e1c:	84 e9       	ldi	r24, 0x94	; 148
    1e1e:	80 93 bc 00 	sts	0x00BC, r24
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	27 c0       	rjmp	.+78     	; 0x1e74 <m_rf_read+0xc2>
    1e26:	d9 01       	movw	r26, r18
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	41 50       	subi	r20, 0x01	; 1
    1e2c:	51 09       	sbc	r21, r1
    1e2e:	b9 01       	movw	r22, r18
    1e30:	64 0f       	add	r22, r20
    1e32:	75 1f       	adc	r23, r21
    1e34:	ec eb       	ldi	r30, 0xBC	; 188
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	84 ec       	ldi	r24, 0xC4	; 196
    1e3a:	cb eb       	ldi	r28, 0xBB	; 187
    1e3c:	d0 e0       	ldi	r29, 0x00	; 0
    1e3e:	80 83       	st	Z, r24
    1e40:	90 81       	ld	r25, Z
    1e42:	99 23       	and	r25, r25
    1e44:	ec f7       	brge	.-6      	; 0x1e40 <m_rf_read+0x8e>
    1e46:	98 81       	ld	r25, Y
    1e48:	9d 93       	st	X+, r25
    1e4a:	a6 17       	cp	r26, r22
    1e4c:	b7 07       	cpc	r27, r23
    1e4e:	b9 f7       	brne	.-18     	; 0x1e3e <m_rf_read+0x8c>
    1e50:	84 e8       	ldi	r24, 0x84	; 132
    1e52:	80 93 bc 00 	sts	0x00BC, r24
    1e56:	ec eb       	ldi	r30, 0xBC	; 188
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	90 81       	ld	r25, Z
    1e5c:	99 23       	and	r25, r25
    1e5e:	ec f7       	brge	.-6      	; 0x1e5a <m_rf_read+0xa8>
    1e60:	80 91 bb 00 	lds	r24, 0x00BB
    1e64:	f9 01       	movw	r30, r18
    1e66:	e4 0f       	add	r30, r20
    1e68:	f5 1f       	adc	r31, r21
    1e6a:	80 83       	st	Z, r24
    1e6c:	84 e9       	ldi	r24, 0x94	; 148
    1e6e:	80 93 bc 00 	sts	0x00BC, r24
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	08 95       	ret

00001e7a <m_usb_init>:
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	80 93 d7 00 	sts	0x00D7, r24
    1e80:	80 ea       	ldi	r24, 0xA0	; 160
    1e82:	80 93 d8 00 	sts	0x00D8, r24
    1e86:	82 e1       	ldi	r24, 0x12	; 18
    1e88:	89 bd       	out	0x29, r24	; 41
    1e8a:	09 b4       	in	r0, 0x29	; 41
    1e8c:	00 fe       	sbrs	r0, 0
    1e8e:	fd cf       	rjmp	.-6      	; 0x1e8a <m_usb_init+0x10>
    1e90:	80 e9       	ldi	r24, 0x90	; 144
    1e92:	80 93 d8 00 	sts	0x00D8, r24
    1e96:	10 92 e0 00 	sts	0x00E0, r1
    1e9a:	10 92 ca 01 	sts	0x01CA, r1
    1e9e:	10 92 c7 01 	sts	0x01C7, r1
    1ea2:	8c e0       	ldi	r24, 0x0C	; 12
    1ea4:	80 93 e2 00 	sts	0x00E2, r24
    1ea8:	78 94       	sei
    1eaa:	08 95       	ret

00001eac <m_usb_tx_char>:
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	90 91 ca 01 	lds	r25, 0x01CA
    1eb4:	99 23       	and	r25, r25
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <m_usb_tx_char+0xe>
    1eb8:	4c c0       	rjmp	.+152    	; 0x1f52 <m_usb_tx_char+0xa6>
    1eba:	9f b7       	in	r25, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	24 e0       	ldi	r18, 0x04	; 4
    1ec0:	20 93 e9 00 	sts	0x00E9, r18
    1ec4:	20 91 c8 01 	lds	r18, 0x01C8
    1ec8:	22 23       	and	r18, r18
    1eca:	49 f0       	breq	.+18     	; 0x1ede <m_usb_tx_char+0x32>
    1ecc:	20 91 e8 00 	lds	r18, 0x00E8
    1ed0:	25 fd       	sbrc	r18, 5
    1ed2:	03 c0       	rjmp	.+6      	; 0x1eda <m_usb_tx_char+0x2e>
    1ed4:	9f bf       	out	0x3f, r25	; 63
    1ed6:	8f ef       	ldi	r24, 0xFF	; 255
    1ed8:	41 c0       	rjmp	.+130    	; 0x1f5c <m_usb_tx_char+0xb0>
    1eda:	10 92 c8 01 	sts	0x01C8, r1
    1ede:	30 91 e4 00 	lds	r19, 0x00E4
    1ee2:	37 5e       	subi	r19, 0xE7	; 231
    1ee4:	20 91 e8 00 	lds	r18, 0x00E8
    1ee8:	25 fd       	sbrc	r18, 5
    1eea:	24 c0       	rjmp	.+72     	; 0x1f34 <m_usb_tx_char+0x88>
    1eec:	9f bf       	out	0x3f, r25	; 63
    1eee:	90 91 e4 00 	lds	r25, 0x00E4
    1ef2:	93 17       	cp	r25, r19
    1ef4:	81 f0       	breq	.+32     	; 0x1f16 <m_usb_tx_char+0x6a>
    1ef6:	90 91 ca 01 	lds	r25, 0x01CA
    1efa:	99 23       	and	r25, r25
    1efc:	61 f1       	breq	.+88     	; 0x1f56 <m_usb_tx_char+0xaa>
    1efe:	a9 ee       	ldi	r26, 0xE9	; 233
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	44 e0       	ldi	r20, 0x04	; 4
    1f04:	e8 ee       	ldi	r30, 0xE8	; 232
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	c4 ee       	ldi	r28, 0xE4	; 228
    1f0a:	d0 e0       	ldi	r29, 0x00	; 0
    1f0c:	0d c0       	rjmp	.+26     	; 0x1f28 <m_usb_tx_char+0x7c>
    1f0e:	9f bf       	out	0x3f, r25	; 63
    1f10:	98 81       	ld	r25, Y
    1f12:	93 13       	cpse	r25, r19
    1f14:	05 c0       	rjmp	.+10     	; 0x1f20 <m_usb_tx_char+0x74>
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	80 93 c8 01 	sts	0x01C8, r24
    1f1c:	8f ef       	ldi	r24, 0xFF	; 255
    1f1e:	1e c0       	rjmp	.+60     	; 0x1f5c <m_usb_tx_char+0xb0>
    1f20:	90 91 ca 01 	lds	r25, 0x01CA
    1f24:	99 23       	and	r25, r25
    1f26:	c9 f0       	breq	.+50     	; 0x1f5a <m_usb_tx_char+0xae>
    1f28:	9f b7       	in	r25, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	4c 93       	st	X, r20
    1f2e:	20 81       	ld	r18, Z
    1f30:	25 ff       	sbrs	r18, 5
    1f32:	ed cf       	rjmp	.-38     	; 0x1f0e <m_usb_tx_char+0x62>
    1f34:	80 93 f1 00 	sts	0x00F1, r24
    1f38:	80 91 e8 00 	lds	r24, 0x00E8
    1f3c:	85 fd       	sbrc	r24, 5
    1f3e:	03 c0       	rjmp	.+6      	; 0x1f46 <m_usb_tx_char+0x9a>
    1f40:	8a e3       	ldi	r24, 0x3A	; 58
    1f42:	80 93 e8 00 	sts	0x00E8, r24
    1f46:	85 e0       	ldi	r24, 0x05	; 5
    1f48:	80 93 c9 01 	sts	0x01C9, r24
    1f4c:	9f bf       	out	0x3f, r25	; 63
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	05 c0       	rjmp	.+10     	; 0x1f5c <m_usb_tx_char+0xb0>
    1f52:	8f ef       	ldi	r24, 0xFF	; 255
    1f54:	03 c0       	rjmp	.+6      	; 0x1f5c <m_usb_tx_char+0xb0>
    1f56:	8f ef       	ldi	r24, 0xFF	; 255
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <m_usb_tx_char+0xb0>
    1f5a:	8f ef       	ldi	r24, 0xFF	; 255
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	08 95       	ret

00001f62 <__vector_10>:
    1f62:	1f 92       	push	r1
    1f64:	0f 92       	push	r0
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	0f 92       	push	r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	8f 93       	push	r24
    1f6e:	9f 93       	push	r25
    1f70:	ef 93       	push	r30
    1f72:	ff 93       	push	r31
    1f74:	e1 ee       	ldi	r30, 0xE1	; 225
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	10 82       	st	Z, r1
    1f7c:	83 ff       	sbrs	r24, 3
    1f7e:	11 c0       	rjmp	.+34     	; 0x1fa2 <__vector_10+0x40>
    1f80:	10 92 e9 00 	sts	0x00E9, r1
    1f84:	91 e0       	ldi	r25, 0x01	; 1
    1f86:	90 93 eb 00 	sts	0x00EB, r25
    1f8a:	10 92 ec 00 	sts	0x00EC, r1
    1f8e:	92 e1       	ldi	r25, 0x12	; 18
    1f90:	90 93 ed 00 	sts	0x00ED, r25
    1f94:	98 e0       	ldi	r25, 0x08	; 8
    1f96:	90 93 f0 00 	sts	0x00F0, r25
    1f9a:	10 92 ca 01 	sts	0x01CA, r1
    1f9e:	10 92 c7 01 	sts	0x01C7, r1
    1fa2:	82 ff       	sbrs	r24, 2
    1fa4:	13 c0       	rjmp	.+38     	; 0x1fcc <__vector_10+0x6a>
    1fa6:	80 91 ca 01 	lds	r24, 0x01CA
    1faa:	88 23       	and	r24, r24
    1fac:	79 f0       	breq	.+30     	; 0x1fcc <__vector_10+0x6a>
    1fae:	80 91 c9 01 	lds	r24, 0x01C9
    1fb2:	88 23       	and	r24, r24
    1fb4:	59 f0       	breq	.+22     	; 0x1fcc <__vector_10+0x6a>
    1fb6:	81 50       	subi	r24, 0x01	; 1
    1fb8:	80 93 c9 01 	sts	0x01C9, r24
    1fbc:	81 11       	cpse	r24, r1
    1fbe:	06 c0       	rjmp	.+12     	; 0x1fcc <__vector_10+0x6a>
    1fc0:	84 e0       	ldi	r24, 0x04	; 4
    1fc2:	80 93 e9 00 	sts	0x00E9, r24
    1fc6:	8a e3       	ldi	r24, 0x3A	; 58
    1fc8:	80 93 e8 00 	sts	0x00E8, r24
    1fcc:	ff 91       	pop	r31
    1fce:	ef 91       	pop	r30
    1fd0:	9f 91       	pop	r25
    1fd2:	8f 91       	pop	r24
    1fd4:	0f 90       	pop	r0
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	0f 90       	pop	r0
    1fda:	1f 90       	pop	r1
    1fdc:	18 95       	reti

00001fde <__vector_11>:
    1fde:	1f 92       	push	r1
    1fe0:	0f 92       	push	r0
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	0f 92       	push	r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	2f 93       	push	r18
    1fee:	3f 93       	push	r19
    1ff0:	4f 93       	push	r20
    1ff2:	5f 93       	push	r21
    1ff4:	6f 93       	push	r22
    1ff6:	7f 93       	push	r23
    1ff8:	8f 93       	push	r24
    1ffa:	9f 93       	push	r25
    1ffc:	af 93       	push	r26
    1ffe:	bf 93       	push	r27
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	ef 93       	push	r30
    2006:	ff 93       	push	r31
    2008:	10 92 e9 00 	sts	0x00E9, r1
    200c:	80 91 e8 00 	lds	r24, 0x00E8
    2010:	83 ff       	sbrs	r24, 3
    2012:	4c c1       	rjmp	.+664    	; 0x22ac <__vector_11+0x2ce>
    2014:	e1 ef       	ldi	r30, 0xF1	; 241
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	60 81       	ld	r22, Z
    201a:	80 81       	ld	r24, Z
    201c:	20 81       	ld	r18, Z
    201e:	90 81       	ld	r25, Z
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	39 2b       	or	r19, r25
    2024:	40 81       	ld	r20, Z
    2026:	90 81       	ld	r25, Z
    2028:	50 e0       	ldi	r21, 0x00	; 0
    202a:	59 2b       	or	r21, r25
    202c:	70 81       	ld	r23, Z
    202e:	c0 81       	ld	r28, Z
    2030:	92 ef       	ldi	r25, 0xF2	; 242
    2032:	90 93 e8 00 	sts	0x00E8, r25
    2036:	86 30       	cpi	r24, 0x06	; 6
    2038:	09 f0       	breq	.+2      	; 0x203c <__vector_11+0x5e>
    203a:	58 c0       	rjmp	.+176    	; 0x20ec <__vector_11+0x10e>
    203c:	04 c0       	rjmp	.+8      	; 0x2046 <__vector_11+0x68>
    203e:	81 e2       	ldi	r24, 0x21	; 33
    2040:	80 93 eb 00 	sts	0x00EB, r24
    2044:	3a c1       	rjmp	.+628    	; 0x22ba <__vector_11+0x2dc>
    2046:	66 e0       	ldi	r22, 0x06	; 6
    2048:	80 e2       	ldi	r24, 0x20	; 32
    204a:	91 e0       	ldi	r25, 0x01	; 1
    204c:	fc 01       	movw	r30, r24
    204e:	a5 91       	lpm	r26, Z+
    2050:	b4 91       	lpm	r27, Z
    2052:	2a 17       	cp	r18, r26
    2054:	3b 07       	cpc	r19, r27
    2056:	11 f0       	breq	.+4      	; 0x205c <__vector_11+0x7e>
    2058:	07 96       	adiw	r24, 0x07	; 7
    205a:	23 c0       	rjmp	.+70     	; 0x20a2 <__vector_11+0xc4>
    205c:	fc 01       	movw	r30, r24
    205e:	32 96       	adiw	r30, 0x02	; 2
    2060:	a5 91       	lpm	r26, Z+
    2062:	b4 91       	lpm	r27, Z
    2064:	4a 17       	cp	r20, r26
    2066:	5b 07       	cpc	r21, r27
    2068:	11 f0       	breq	.+4      	; 0x206e <__vector_11+0x90>
    206a:	07 96       	adiw	r24, 0x07	; 7
    206c:	1a c0       	rjmp	.+52     	; 0x20a2 <__vector_11+0xc4>
    206e:	fc 01       	movw	r30, r24
    2070:	34 96       	adiw	r30, 0x04	; 4
    2072:	45 91       	lpm	r20, Z+
    2074:	54 91       	lpm	r21, Z
    2076:	fc 01       	movw	r30, r24
    2078:	36 96       	adiw	r30, 0x06	; 6
    207a:	24 91       	lpm	r18, Z
    207c:	87 2f       	mov	r24, r23
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9c 2b       	or	r25, r28
    2082:	8f 3f       	cpi	r24, 0xFF	; 255
    2084:	91 05       	cpc	r25, r1
    2086:	19 f0       	breq	.+6      	; 0x208e <__vector_11+0xb0>
    2088:	10 f0       	brcs	.+4      	; 0x208e <__vector_11+0xb0>
    208a:	8f ef       	ldi	r24, 0xFF	; 255
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	82 17       	cp	r24, r18
    2090:	08 f4       	brcc	.+2      	; 0x2094 <__vector_11+0xb6>
    2092:	28 2f       	mov	r18, r24
    2094:	a8 ee       	ldi	r26, 0xE8	; 232
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	70 e1       	ldi	r23, 0x10	; 16
    209a:	6e ef       	ldi	r22, 0xFE	; 254
    209c:	c1 ef       	ldi	r28, 0xF1	; 241
    209e:	d0 e0       	ldi	r29, 0x00	; 0
    20a0:	03 c0       	rjmp	.+6      	; 0x20a8 <__vector_11+0xca>
    20a2:	61 50       	subi	r22, 0x01	; 1
    20a4:	99 f6       	brne	.-90     	; 0x204c <__vector_11+0x6e>
    20a6:	cb cf       	rjmp	.-106    	; 0x203e <__vector_11+0x60>
    20a8:	8c 91       	ld	r24, X
    20aa:	98 2f       	mov	r25, r24
    20ac:	95 70       	andi	r25, 0x05	; 5
    20ae:	e1 f3       	breq	.-8      	; 0x20a8 <__vector_11+0xca>
    20b0:	82 fd       	sbrc	r24, 2
    20b2:	03 c1       	rjmp	.+518    	; 0x22ba <__vector_11+0x2dc>
    20b4:	32 2f       	mov	r19, r18
    20b6:	21 31       	cpi	r18, 0x11	; 17
    20b8:	08 f0       	brcs	.+2      	; 0x20bc <__vector_11+0xde>
    20ba:	37 2f       	mov	r19, r23
    20bc:	33 23       	and	r19, r19
    20be:	09 f4       	brne	.+2      	; 0x20c2 <__vector_11+0xe4>
    20c0:	f9 c0       	rjmp	.+498    	; 0x22b4 <__vector_11+0x2d6>
    20c2:	fa 01       	movw	r30, r20
    20c4:	83 2f       	mov	r24, r19
    20c6:	94 91       	lpm	r25, Z
    20c8:	98 83       	st	Y, r25
    20ca:	81 50       	subi	r24, 0x01	; 1
    20cc:	31 96       	adiw	r30, 0x01	; 1
    20ce:	81 11       	cpse	r24, r1
    20d0:	fa cf       	rjmp	.-12     	; 0x20c6 <__vector_11+0xe8>
    20d2:	8f ef       	ldi	r24, 0xFF	; 255
    20d4:	83 0f       	add	r24, r19
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	01 96       	adiw	r24, 0x01	; 1
    20da:	48 0f       	add	r20, r24
    20dc:	59 1f       	adc	r21, r25
    20de:	23 1b       	sub	r18, r19
    20e0:	6c 93       	st	X, r22
    20e2:	21 11       	cpse	r18, r1
    20e4:	e1 cf       	rjmp	.-62     	; 0x20a8 <__vector_11+0xca>
    20e6:	30 31       	cpi	r19, 0x10	; 16
    20e8:	f9 f2       	breq	.-66     	; 0x20a8 <__vector_11+0xca>
    20ea:	e7 c0       	rjmp	.+462    	; 0x22ba <__vector_11+0x2dc>
    20ec:	85 30       	cpi	r24, 0x05	; 5
    20ee:	61 f4       	brne	.+24     	; 0x2108 <__vector_11+0x12a>
    20f0:	8e ef       	ldi	r24, 0xFE	; 254
    20f2:	80 93 e8 00 	sts	0x00E8, r24
    20f6:	e8 ee       	ldi	r30, 0xE8	; 232
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	80 ff       	sbrs	r24, 0
    20fe:	fd cf       	rjmp	.-6      	; 0x20fa <__vector_11+0x11c>
    2100:	20 68       	ori	r18, 0x80	; 128
    2102:	20 93 e3 00 	sts	0x00E3, r18
    2106:	d9 c0       	rjmp	.+434    	; 0x22ba <__vector_11+0x2dc>
    2108:	89 30       	cpi	r24, 0x09	; 9
    210a:	09 f0       	breq	.+2      	; 0x210e <__vector_11+0x130>
    210c:	35 c0       	rjmp	.+106    	; 0x2178 <__vector_11+0x19a>
    210e:	61 11       	cpse	r22, r1
    2110:	cd c0       	rjmp	.+410    	; 0x22ac <__vector_11+0x2ce>
    2112:	20 93 ca 01 	sts	0x01CA, r18
    2116:	10 92 c7 01 	sts	0x01C7, r1
    211a:	10 92 c9 01 	sts	0x01C9, r1
    211e:	8e ef       	ldi	r24, 0xFE	; 254
    2120:	80 93 e8 00 	sts	0x00E8, r24
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	29 ec       	ldi	r18, 0xC9	; 201
    2128:	31 e0       	ldi	r19, 0x01	; 1
    212a:	c9 ee       	ldi	r28, 0xE9	; 233
    212c:	d0 e0       	ldi	r29, 0x00	; 0
    212e:	ab ee       	ldi	r26, 0xEB	; 235
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	0c ee       	ldi	r16, 0xEC	; 236
    2134:	10 e0       	ldi	r17, 0x00	; 0
    2136:	6d ee       	ldi	r22, 0xED	; 237
    2138:	70 e0       	ldi	r23, 0x00	; 0
    213a:	88 83       	st	Y, r24
    213c:	a9 01       	movw	r20, r18
    213e:	4f 5f       	subi	r20, 0xFF	; 255
    2140:	5f 4f       	sbci	r21, 0xFF	; 255
    2142:	f9 01       	movw	r30, r18
    2144:	94 91       	lpm	r25, Z
    2146:	9c 93       	st	X, r25
    2148:	99 23       	and	r25, r25
    214a:	61 f0       	breq	.+24     	; 0x2164 <__vector_11+0x186>
    214c:	fa 01       	movw	r30, r20
    214e:	44 91       	lpm	r20, Z
    2150:	f8 01       	movw	r30, r16
    2152:	40 83       	st	Z, r20
    2154:	f9 01       	movw	r30, r18
    2156:	32 96       	adiw	r30, 0x02	; 2
    2158:	94 91       	lpm	r25, Z
    215a:	2d 5f       	subi	r18, 0xFD	; 253
    215c:	3f 4f       	sbci	r19, 0xFF	; 255
    215e:	fb 01       	movw	r30, r22
    2160:	90 83       	st	Z, r25
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <__vector_11+0x188>
    2164:	9a 01       	movw	r18, r20
    2166:	8f 5f       	subi	r24, 0xFF	; 255
    2168:	85 30       	cpi	r24, 0x05	; 5
    216a:	39 f7       	brne	.-50     	; 0x213a <__vector_11+0x15c>
    216c:	ea ee       	ldi	r30, 0xEA	; 234
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	8e e1       	ldi	r24, 0x1E	; 30
    2172:	80 83       	st	Z, r24
    2174:	10 82       	st	Z, r1
    2176:	a1 c0       	rjmp	.+322    	; 0x22ba <__vector_11+0x2dc>
    2178:	88 30       	cpi	r24, 0x08	; 8
    217a:	81 f4       	brne	.+32     	; 0x219c <__vector_11+0x1be>
    217c:	60 38       	cpi	r22, 0x80	; 128
    217e:	09 f0       	breq	.+2      	; 0x2182 <__vector_11+0x1a4>
    2180:	95 c0       	rjmp	.+298    	; 0x22ac <__vector_11+0x2ce>
    2182:	e8 ee       	ldi	r30, 0xE8	; 232
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	80 ff       	sbrs	r24, 0
    218a:	fd cf       	rjmp	.-6      	; 0x2186 <__vector_11+0x1a8>
    218c:	80 91 ca 01 	lds	r24, 0x01CA
    2190:	80 93 f1 00 	sts	0x00F1, r24
    2194:	8e ef       	ldi	r24, 0xFE	; 254
    2196:	80 93 e8 00 	sts	0x00E8, r24
    219a:	8f c0       	rjmp	.+286    	; 0x22ba <__vector_11+0x2dc>
    219c:	81 32       	cpi	r24, 0x21	; 33
    219e:	b9 f4       	brne	.+46     	; 0x21ce <__vector_11+0x1f0>
    21a0:	61 3a       	cpi	r22, 0xA1	; 161
    21a2:	09 f0       	breq	.+2      	; 0x21a6 <__vector_11+0x1c8>
    21a4:	83 c0       	rjmp	.+262    	; 0x22ac <__vector_11+0x2ce>
    21a6:	e8 ee       	ldi	r30, 0xE8	; 232
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	80 ff       	sbrs	r24, 0
    21ae:	fd cf       	rjmp	.-6      	; 0x21aa <__vector_11+0x1cc>
    21b0:	e8 e2       	ldi	r30, 0x28	; 40
    21b2:	f1 e0       	ldi	r31, 0x01	; 1
    21b4:	2f e2       	ldi	r18, 0x2F	; 47
    21b6:	31 e0       	ldi	r19, 0x01	; 1
    21b8:	a1 ef       	ldi	r26, 0xF1	; 241
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	81 91       	ld	r24, Z+
    21be:	8c 93       	st	X, r24
    21c0:	e2 17       	cp	r30, r18
    21c2:	f3 07       	cpc	r31, r19
    21c4:	d9 f7       	brne	.-10     	; 0x21bc <__vector_11+0x1de>
    21c6:	8e ef       	ldi	r24, 0xFE	; 254
    21c8:	80 93 e8 00 	sts	0x00E8, r24
    21cc:	76 c0       	rjmp	.+236    	; 0x22ba <__vector_11+0x2dc>
    21ce:	80 32       	cpi	r24, 0x20	; 32
    21d0:	d1 f4       	brne	.+52     	; 0x2206 <__vector_11+0x228>
    21d2:	61 32       	cpi	r22, 0x21	; 33
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <__vector_11+0x1fa>
    21d6:	6a c0       	rjmp	.+212    	; 0x22ac <__vector_11+0x2ce>
    21d8:	e8 ee       	ldi	r30, 0xE8	; 232
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	82 ff       	sbrs	r24, 2
    21e0:	fd cf       	rjmp	.-6      	; 0x21dc <__vector_11+0x1fe>
    21e2:	e8 e2       	ldi	r30, 0x28	; 40
    21e4:	f1 e0       	ldi	r31, 0x01	; 1
    21e6:	2f e2       	ldi	r18, 0x2F	; 47
    21e8:	31 e0       	ldi	r19, 0x01	; 1
    21ea:	a1 ef       	ldi	r26, 0xF1	; 241
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	8c 91       	ld	r24, X
    21f0:	81 93       	st	Z+, r24
    21f2:	e2 17       	cp	r30, r18
    21f4:	f3 07       	cpc	r31, r19
    21f6:	d9 f7       	brne	.-10     	; 0x21ee <__vector_11+0x210>
    21f8:	e8 ee       	ldi	r30, 0xE8	; 232
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	8b ef       	ldi	r24, 0xFB	; 251
    21fe:	80 83       	st	Z, r24
    2200:	8e ef       	ldi	r24, 0xFE	; 254
    2202:	80 83       	st	Z, r24
    2204:	5a c0       	rjmp	.+180    	; 0x22ba <__vector_11+0x2dc>
    2206:	82 32       	cpi	r24, 0x22	; 34
    2208:	71 f4       	brne	.+28     	; 0x2226 <__vector_11+0x248>
    220a:	61 32       	cpi	r22, 0x21	; 33
    220c:	09 f0       	breq	.+2      	; 0x2210 <__vector_11+0x232>
    220e:	4e c0       	rjmp	.+156    	; 0x22ac <__vector_11+0x2ce>
    2210:	20 93 c7 01 	sts	0x01C7, r18
    2214:	e8 ee       	ldi	r30, 0xE8	; 232
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	80 ff       	sbrs	r24, 0
    221c:	fd cf       	rjmp	.-6      	; 0x2218 <__vector_11+0x23a>
    221e:	8e ef       	ldi	r24, 0xFE	; 254
    2220:	80 93 e8 00 	sts	0x00E8, r24
    2224:	4a c0       	rjmp	.+148    	; 0x22ba <__vector_11+0x2dc>
    2226:	81 11       	cpse	r24, r1
    2228:	1a c0       	rjmp	.+52     	; 0x225e <__vector_11+0x280>
    222a:	e8 ee       	ldi	r30, 0xE8	; 232
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	80 ff       	sbrs	r24, 0
    2232:	fd cf       	rjmp	.-6      	; 0x222e <__vector_11+0x250>
    2234:	62 38       	cpi	r22, 0x82	; 130
    2236:	51 f4       	brne	.+20     	; 0x224c <__vector_11+0x26e>
    2238:	e9 ee       	ldi	r30, 0xE9	; 233
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	40 83       	st	Z, r20
    223e:	80 91 eb 00 	lds	r24, 0x00EB
    2242:	85 fb       	bst	r24, 5
    2244:	88 27       	eor	r24, r24
    2246:	80 f9       	bld	r24, 0
    2248:	10 82       	st	Z, r1
    224a:	01 c0       	rjmp	.+2      	; 0x224e <__vector_11+0x270>
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	e1 ef       	ldi	r30, 0xF1	; 241
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 83       	st	Z, r24
    2254:	10 82       	st	Z, r1
    2256:	8e ef       	ldi	r24, 0xFE	; 254
    2258:	80 93 e8 00 	sts	0x00E8, r24
    225c:	2e c0       	rjmp	.+92     	; 0x22ba <__vector_11+0x2dc>
    225e:	98 2f       	mov	r25, r24
    2260:	9d 7f       	andi	r25, 0xFD	; 253
    2262:	91 30       	cpi	r25, 0x01	; 1
    2264:	19 f5       	brne	.+70     	; 0x22ac <__vector_11+0x2ce>
    2266:	62 30       	cpi	r22, 0x02	; 2
    2268:	09 f5       	brne	.+66     	; 0x22ac <__vector_11+0x2ce>
    226a:	23 2b       	or	r18, r19
    226c:	f9 f4       	brne	.+62     	; 0x22ac <__vector_11+0x2ce>
    226e:	4f 77       	andi	r20, 0x7F	; 127
    2270:	9f ef       	ldi	r25, 0xFF	; 255
    2272:	94 0f       	add	r25, r20
    2274:	94 30       	cpi	r25, 0x04	; 4
    2276:	d0 f4       	brcc	.+52     	; 0x22ac <__vector_11+0x2ce>
    2278:	9e ef       	ldi	r25, 0xFE	; 254
    227a:	90 93 e8 00 	sts	0x00E8, r25
    227e:	40 93 e9 00 	sts	0x00E9, r20
    2282:	83 30       	cpi	r24, 0x03	; 3
    2284:	21 f4       	brne	.+8      	; 0x228e <__vector_11+0x2b0>
    2286:	81 e2       	ldi	r24, 0x21	; 33
    2288:	80 93 eb 00 	sts	0x00EB, r24
    228c:	16 c0       	rjmp	.+44     	; 0x22ba <__vector_11+0x2dc>
    228e:	89 e1       	ldi	r24, 0x19	; 25
    2290:	80 93 eb 00 	sts	0x00EB, r24
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	02 c0       	rjmp	.+4      	; 0x229e <__vector_11+0x2c0>
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	4a 95       	dec	r20
    22a0:	e2 f7       	brpl	.-8      	; 0x229a <__vector_11+0x2bc>
    22a2:	ea ee       	ldi	r30, 0xEA	; 234
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 83       	st	Z, r24
    22a8:	10 82       	st	Z, r1
    22aa:	07 c0       	rjmp	.+14     	; 0x22ba <__vector_11+0x2dc>
    22ac:	81 e2       	ldi	r24, 0x21	; 33
    22ae:	80 93 eb 00 	sts	0x00EB, r24
    22b2:	03 c0       	rjmp	.+6      	; 0x22ba <__vector_11+0x2dc>
    22b4:	6c 93       	st	X, r22
    22b6:	21 11       	cpse	r18, r1
    22b8:	f7 ce       	rjmp	.-530    	; 0x20a8 <__vector_11+0xca>
    22ba:	ff 91       	pop	r31
    22bc:	ef 91       	pop	r30
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	bf 91       	pop	r27
    22c4:	af 91       	pop	r26
    22c6:	9f 91       	pop	r25
    22c8:	8f 91       	pop	r24
    22ca:	7f 91       	pop	r23
    22cc:	6f 91       	pop	r22
    22ce:	5f 91       	pop	r21
    22d0:	4f 91       	pop	r20
    22d2:	3f 91       	pop	r19
    22d4:	2f 91       	pop	r18
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	0f 90       	pop	r0
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	0f 90       	pop	r0
    22e0:	1f 90       	pop	r1
    22e2:	18 95       	reti

000022e4 <print_P>:
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	8c 01       	movw	r16, r24
    22ec:	0f 5f       	subi	r16, 0xFF	; 255
    22ee:	1f 4f       	sbci	r17, 0xFF	; 255
    22f0:	fc 01       	movw	r30, r24
    22f2:	c4 91       	lpm	r28, Z
    22f4:	cc 23       	and	r28, r28
    22f6:	71 f0       	breq	.+28     	; 0x2314 <print_P+0x30>
    22f8:	ca 30       	cpi	r28, 0x0A	; 10
    22fa:	19 f4       	brne	.+6      	; 0x2302 <print_P+0x1e>
    22fc:	8d e0       	ldi	r24, 0x0D	; 13
    22fe:	0e 94 56 0f 	call	0x1eac	; 0x1eac <m_usb_tx_char>
    2302:	8c 2f       	mov	r24, r28
    2304:	0e 94 56 0f 	call	0x1eac	; 0x1eac <m_usb_tx_char>
    2308:	f8 01       	movw	r30, r16
    230a:	c4 91       	lpm	r28, Z
    230c:	0f 5f       	subi	r16, 0xFF	; 255
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	c1 11       	cpse	r28, r1
    2312:	f2 cf       	rjmp	.-28     	; 0x22f8 <print_P+0x14>
    2314:	cf 91       	pop	r28
    2316:	1f 91       	pop	r17
    2318:	0f 91       	pop	r16
    231a:	08 95       	ret

0000231c <m_usb_tx_int>:
    231c:	ef 92       	push	r14
    231e:	ff 92       	push	r15
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	27 97       	sbiw	r28, 0x07	; 7
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	8e 01       	movw	r16, r28
    233a:	0f 5f       	subi	r16, 0xFF	; 255
    233c:	1f 4f       	sbci	r17, 0xFF	; 255
    233e:	27 e0       	ldi	r18, 0x07	; 7
    2340:	f8 01       	movw	r30, r16
    2342:	11 92       	st	Z+, r1
    2344:	2a 95       	dec	r18
    2346:	e9 f7       	brne	.-6      	; 0x2342 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2348:	4a e0       	ldi	r20, 0x0A	; 10
    234a:	b8 01       	movw	r22, r16
    234c:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__itoa_ncheck>
    2350:	7e 01       	movw	r14, r28
    2352:	f8 e0       	ldi	r31, 0x08	; 8
    2354:	ef 0e       	add	r14, r31
    2356:	f1 1c       	adc	r15, r1
    2358:	f8 01       	movw	r30, r16
    235a:	81 91       	ld	r24, Z+
    235c:	8f 01       	movw	r16, r30
    235e:	81 11       	cpse	r24, r1
    2360:	0e 94 56 0f 	call	0x1eac	; 0x1eac <m_usb_tx_char>
    2364:	0e 15       	cp	r16, r14
    2366:	1f 05       	cpc	r17, r15
    2368:	b9 f7       	brne	.-18     	; 0x2358 <m_usb_tx_int+0x3c>
    236a:	27 96       	adiw	r28, 0x07	; 7
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	df 91       	pop	r29
    2378:	cf 91       	pop	r28
    237a:	1f 91       	pop	r17
    237c:	0f 91       	pop	r16
    237e:	ff 90       	pop	r15
    2380:	ef 90       	pop	r14
    2382:	08 95       	ret

00002384 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    2388:	ec eb       	ldi	r30, 0xBC	; 188
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	88 23       	and	r24, r24
    2390:	34 f0       	brlt	.+12     	; 0x239e <twi_wait+0x1a>
    2392:	2f 5f       	subi	r18, 0xFF	; 255
    2394:	3f 4f       	sbci	r19, 0xFF	; 255
    2396:	29 3e       	cpi	r18, 0xE9	; 233
    2398:	83 e0       	ldi	r24, 0x03	; 3
    239a:	38 07       	cpc	r19, r24
    239c:	b9 f7       	brne	.-18     	; 0x238c <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	28 3e       	cpi	r18, 0xE8	; 232
    23a2:	33 40       	sbci	r19, 0x03	; 3
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <twi_wait+0x24>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    23a8:	08 95       	ret

000023aa <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    23aa:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    23ae:	84 e8       	ldi	r24, 0x84	; 132
    23b0:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    23b4:	0e 94 c2 11 	call	0x2384	; 0x2384 <twi_wait>
    23b8:	88 23       	and	r24, r24
    23ba:	19 f0       	breq	.+6      	; 0x23c2 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    23bc:	80 91 b9 00 	lds	r24, 0x00B9
    23c0:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    23c2:	08 95       	ret

000023c4 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    23c4:	cf 93       	push	r28
    23c6:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    23c8:	94 ea       	ldi	r25, 0xA4	; 164
    23ca:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    23ce:	0e 94 c2 11 	call	0x2384	; 0x2384 <twi_wait>
    23d2:	88 23       	and	r24, r24
    23d4:	61 f0       	breq	.+24     	; 0x23ee <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    23d6:	8c 2f       	mov	r24, r28
    23d8:	88 0f       	add	r24, r24
    23da:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    23de:	80 32       	cpi	r24, 0x20	; 32
    23e0:	29 f4       	brne	.+10     	; 0x23ec <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    23e2:	84 e9       	ldi	r24, 0x94	; 148
    23e4:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	01 c0       	rjmp	.+2      	; 0x23ee <start_write+0x2a>
	}	
	return 1;	// success
    23ec:	81 e0       	ldi	r24, 0x01	; 1
}	
    23ee:	cf 91       	pop	r28
    23f0:	08 95       	ret

000023f2 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    23f2:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    23f6:	88 e5       	ldi	r24, 0x58	; 88
    23f8:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <start_write>
    23fc:	88 23       	and	r24, r24
    23fe:	09 f4       	brne	.+2      	; 0x2402 <m_wii_open+0x10>
    2400:	cd c0       	rjmp	.+410    	; 0x259c <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    2402:	80 e3       	ldi	r24, 0x30	; 48
    2404:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    2408:	88 23       	and	r24, r24
    240a:	09 f4       	brne	.+2      	; 0x240e <m_wii_open+0x1c>
    240c:	c9 c0       	rjmp	.+402    	; 0x25a0 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    2414:	88 23       	and	r24, r24
    2416:	09 f4       	brne	.+2      	; 0x241a <m_wii_open+0x28>
    2418:	c5 c0       	rjmp	.+394    	; 0x25a4 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    241a:	84 e9       	ldi	r24, 0x94	; 148
    241c:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2420:	83 ec       	ldi	r24, 0xC3	; 195
    2422:	99 e0       	ldi	r25, 0x09	; 9
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <m_wii_open+0x32>
    2428:	00 c0       	rjmp	.+0      	; 0x242a <m_wii_open+0x38>
    242a:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    242c:	88 e5       	ldi	r24, 0x58	; 88
    242e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <start_write>
    2432:	88 23       	and	r24, r24
    2434:	09 f4       	brne	.+2      	; 0x2438 <m_wii_open+0x46>
    2436:	b8 c0       	rjmp	.+368    	; 0x25a8 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    243e:	88 23       	and	r24, r24
    2440:	09 f4       	brne	.+2      	; 0x2444 <m_wii_open+0x52>
    2442:	b4 c0       	rjmp	.+360    	; 0x25ac <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    244a:	88 23       	and	r24, r24
    244c:	09 f4       	brne	.+2      	; 0x2450 <m_wii_open+0x5e>
    244e:	b0 c0       	rjmp	.+352    	; 0x25b0 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    2456:	88 23       	and	r24, r24
    2458:	09 f4       	brne	.+2      	; 0x245c <m_wii_open+0x6a>
    245a:	ac c0       	rjmp	.+344    	; 0x25b4 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    2462:	88 23       	and	r24, r24
    2464:	09 f4       	brne	.+2      	; 0x2468 <m_wii_open+0x76>
    2466:	a8 c0       	rjmp	.+336    	; 0x25b8 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    246e:	88 23       	and	r24, r24
    2470:	09 f4       	brne	.+2      	; 0x2474 <m_wii_open+0x82>
    2472:	a4 c0       	rjmp	.+328    	; 0x25bc <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    247a:	88 23       	and	r24, r24
    247c:	09 f4       	brne	.+2      	; 0x2480 <m_wii_open+0x8e>
    247e:	a0 c0       	rjmp	.+320    	; 0x25c0 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    2486:	88 23       	and	r24, r24
    2488:	09 f4       	brne	.+2      	; 0x248c <m_wii_open+0x9a>
    248a:	9c c0       	rjmp	.+312    	; 0x25c4 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    248c:	80 e9       	ldi	r24, 0x90	; 144
    248e:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    2492:	88 23       	and	r24, r24
    2494:	09 f4       	brne	.+2      	; 0x2498 <m_wii_open+0xa6>
    2496:	98 c0       	rjmp	.+304    	; 0x25c8 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2498:	84 e9       	ldi	r24, 0x94	; 148
    249a:	80 93 bc 00 	sts	0x00BC, r24
    249e:	83 ec       	ldi	r24, 0xC3	; 195
    24a0:	99 e0       	ldi	r25, 0x09	; 9
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <m_wii_open+0xb0>
    24a6:	00 c0       	rjmp	.+0      	; 0x24a8 <m_wii_open+0xb6>
    24a8:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    24aa:	88 e5       	ldi	r24, 0x58	; 88
    24ac:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <start_write>
    24b0:	88 23       	and	r24, r24
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <m_wii_open+0xc4>
    24b4:	8b c0       	rjmp	.+278    	; 0x25cc <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    24b6:	87 e0       	ldi	r24, 0x07	; 7
    24b8:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    24bc:	88 23       	and	r24, r24
    24be:	09 f4       	brne	.+2      	; 0x24c2 <m_wii_open+0xd0>
    24c0:	87 c0       	rjmp	.+270    	; 0x25d0 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    24c8:	88 23       	and	r24, r24
    24ca:	09 f4       	brne	.+2      	; 0x24ce <m_wii_open+0xdc>
    24cc:	83 c0       	rjmp	.+262    	; 0x25d4 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    24ce:	81 e4       	ldi	r24, 0x41	; 65
    24d0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    24d4:	88 23       	and	r24, r24
    24d6:	09 f4       	brne	.+2      	; 0x24da <m_wii_open+0xe8>
    24d8:	7f c0       	rjmp	.+254    	; 0x25d8 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    24da:	84 e9       	ldi	r24, 0x94	; 148
    24dc:	80 93 bc 00 	sts	0x00BC, r24
    24e0:	83 ec       	ldi	r24, 0xC3	; 195
    24e2:	99 e0       	ldi	r25, 0x09	; 9
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <m_wii_open+0xf2>
    24e8:	00 c0       	rjmp	.+0      	; 0x24ea <m_wii_open+0xf8>
    24ea:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    24ec:	88 e5       	ldi	r24, 0x58	; 88
    24ee:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <start_write>
    24f2:	88 23       	and	r24, r24
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <m_wii_open+0x106>
    24f6:	72 c0       	rjmp	.+228    	; 0x25dc <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    24f8:	8a e1       	ldi	r24, 0x1A	; 26
    24fa:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    24fe:	88 23       	and	r24, r24
    2500:	09 f4       	brne	.+2      	; 0x2504 <m_wii_open+0x112>
    2502:	6e c0       	rjmp	.+220    	; 0x25e0 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    2504:	80 e4       	ldi	r24, 0x40	; 64
    2506:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    250a:	88 23       	and	r24, r24
    250c:	09 f4       	brne	.+2      	; 0x2510 <m_wii_open+0x11e>
    250e:	6a c0       	rjmp	.+212    	; 0x25e4 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    2516:	88 23       	and	r24, r24
    2518:	09 f4       	brne	.+2      	; 0x251c <m_wii_open+0x12a>
    251a:	66 c0       	rjmp	.+204    	; 0x25e8 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    251c:	84 e9       	ldi	r24, 0x94	; 148
    251e:	80 93 bc 00 	sts	0x00BC, r24
    2522:	83 ec       	ldi	r24, 0xC3	; 195
    2524:	99 e0       	ldi	r25, 0x09	; 9
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <m_wii_open+0x134>
    252a:	00 c0       	rjmp	.+0      	; 0x252c <m_wii_open+0x13a>
    252c:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    252e:	88 e5       	ldi	r24, 0x58	; 88
    2530:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <start_write>
    2534:	88 23       	and	r24, r24
    2536:	09 f4       	brne	.+2      	; 0x253a <m_wii_open+0x148>
    2538:	59 c0       	rjmp	.+178    	; 0x25ec <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    253a:	83 e3       	ldi	r24, 0x33	; 51
    253c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    2540:	88 23       	and	r24, r24
    2542:	09 f4       	brne	.+2      	; 0x2546 <m_wii_open+0x154>
    2544:	55 c0       	rjmp	.+170    	; 0x25f0 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    2546:	83 e0       	ldi	r24, 0x03	; 3
    2548:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    254c:	88 23       	and	r24, r24
    254e:	09 f4       	brne	.+2      	; 0x2552 <m_wii_open+0x160>
    2550:	51 c0       	rjmp	.+162    	; 0x25f4 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2552:	84 e9       	ldi	r24, 0x94	; 148
    2554:	80 93 bc 00 	sts	0x00BC, r24
    2558:	83 ec       	ldi	r24, 0xC3	; 195
    255a:	99 e0       	ldi	r25, 0x09	; 9
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <m_wii_open+0x16a>
    2560:	00 c0       	rjmp	.+0      	; 0x2562 <m_wii_open+0x170>
    2562:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2564:	88 e5       	ldi	r24, 0x58	; 88
    2566:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <start_write>
    256a:	88 23       	and	r24, r24
    256c:	09 f4       	brne	.+2      	; 0x2570 <m_wii_open+0x17e>
    256e:	44 c0       	rjmp	.+136    	; 0x25f8 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    2570:	80 e3       	ldi	r24, 0x30	; 48
    2572:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    2576:	88 23       	and	r24, r24
    2578:	09 f4       	brne	.+2      	; 0x257c <m_wii_open+0x18a>
    257a:	40 c0       	rjmp	.+128    	; 0x25fc <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    257c:	88 e0       	ldi	r24, 0x08	; 8
    257e:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    2582:	88 23       	and	r24, r24
    2584:	e9 f1       	breq	.+122    	; 0x2600 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2586:	84 e9       	ldi	r24, 0x94	; 148
    2588:	80 93 bc 00 	sts	0x00BC, r24
    258c:	83 ec       	ldi	r24, 0xC3	; 195
    258e:	99 e0       	ldi	r25, 0x09	; 9
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <m_wii_open+0x19e>
    2594:	00 c0       	rjmp	.+0      	; 0x2596 <m_wii_open+0x1a4>
    2596:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2600:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2602:	08 95       	ret

00002604 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2604:	cf 93       	push	r28
    2606:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2608:	84 ea       	ldi	r24, 0xA4	; 164
    260a:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    260e:	0e 94 c2 11 	call	0x2384	; 0x2384 <twi_wait>
    2612:	88 23       	and	r24, r24
    2614:	69 f0       	breq	.+26     	; 0x2630 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2616:	8c 2f       	mov	r24, r28
    2618:	88 0f       	add	r24, r24
    261a:	8f 5f       	subi	r24, 0xFF	; 255
    261c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2620:	88 34       	cpi	r24, 0x48	; 72
    2622:	29 f4       	brne	.+10     	; 0x262e <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2624:	84 e9       	ldi	r24, 0x94	; 148
    2626:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <start_read+0x2c>
	}	
	return 1;	// success
    262e:	81 e0       	ldi	r24, 0x01	; 1
}	
    2630:	cf 91       	pop	r28
    2632:	08 95       	ret

00002634 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2634:	0f 93       	push	r16
    2636:	1f 93       	push	r17
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	60 97       	sbiw	r28, 0x10	; 16
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    264e:	fe 01       	movw	r30, r28
    2650:	31 96       	adiw	r30, 0x01	; 1
    2652:	80 e1       	ldi	r24, 0x10	; 16
    2654:	df 01       	movw	r26, r30
    2656:	1d 92       	st	X+, r1
    2658:	8a 95       	dec	r24
    265a:	e9 f7       	brne	.-6      	; 0x2656 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    265c:	88 e5       	ldi	r24, 0x58	; 88
    265e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <start_write>
    2662:	88 23       	and	r24, r24
    2664:	09 f4       	brne	.+2      	; 0x2668 <m_wii_read+0x34>
    2666:	69 c0       	rjmp	.+210    	; 0x273a <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    2668:	86 e3       	ldi	r24, 0x36	; 54
    266a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <send_byte>
    266e:	88 23       	and	r24, r24
    2670:	09 f4       	brne	.+2      	; 0x2674 <m_wii_read+0x40>
    2672:	65 c0       	rjmp	.+202    	; 0x273e <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2674:	84 e9       	ldi	r24, 0x94	; 148
    2676:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    267a:	b8 e0       	ldi	r27, 0x08	; 8
    267c:	ba 95       	dec	r27
    267e:	f1 f7       	brne	.-4      	; 0x267c <m_wii_read+0x48>
    2680:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2682:	88 e5       	ldi	r24, 0x58	; 88
    2684:	0e 94 02 13 	call	0x2604	; 0x2604 <start_read>
    2688:	88 23       	and	r24, r24
    268a:	09 f4       	brne	.+2      	; 0x268e <m_wii_read+0x5a>
    268c:	5a c0       	rjmp	.+180    	; 0x2742 <m_wii_read+0x10e>
    268e:	be 01       	movw	r22, r28
    2690:	6f 5f       	subi	r22, 0xFF	; 255
    2692:	7f 4f       	sbci	r23, 0xFF	; 255
    2694:	ae 01       	movw	r20, r28
    2696:	40 5f       	subi	r20, 0xF0	; 240
    2698:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    269a:	ec eb       	ldi	r30, 0xBC	; 188
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    26a0:	2b eb       	ldi	r18, 0xBB	; 187
    26a2:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    26a4:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    26a6:	90 81       	ld	r25, Z
    26a8:	99 23       	and	r25, r25
    26aa:	ec f7       	brge	.-6      	; 0x26a6 <m_wii_read+0x72>
		temp[i] = TWDR;
    26ac:	d9 01       	movw	r26, r18
    26ae:	9c 91       	ld	r25, X
    26b0:	db 01       	movw	r26, r22
    26b2:	9d 93       	st	X+, r25
    26b4:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    26b6:	a4 17       	cp	r26, r20
    26b8:	b5 07       	cpc	r27, r21
    26ba:	a1 f7       	brne	.-24     	; 0x26a4 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    26bc:	84 e8       	ldi	r24, 0x84	; 132
    26be:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    26c2:	ec eb       	ldi	r30, 0xBC	; 188
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	88 23       	and	r24, r24
    26ca:	ec f7       	brge	.-6      	; 0x26c6 <m_wii_read+0x92>
	temp[15] = TWDR;
    26cc:	80 91 bb 00 	lds	r24, 0x00BB
    26d0:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    26d2:	84 e9       	ldi	r24, 0x94	; 148
    26d4:	80 93 bc 00 	sts	0x00BC, r24
    26d8:	be 01       	movw	r22, r28
    26da:	6c 5f       	subi	r22, 0xFC	; 252
    26dc:	7f 4f       	sbci	r23, 0xFF	; 255
    26de:	f8 01       	movw	r30, r16
    26e0:	08 5e       	subi	r16, 0xE8	; 232
    26e2:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    26e4:	db 01       	movw	r26, r22
    26e6:	2c 91       	ld	r18, X
    26e8:	32 2f       	mov	r19, r18
    26ea:	30 73       	andi	r19, 0x30	; 48
    26ec:	cb 01       	movw	r24, r22
    26ee:	02 97       	sbiw	r24, 0x02	; 2
    26f0:	dc 01       	movw	r26, r24
    26f2:	8c 91       	ld	r24, X
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	b0 e1       	ldi	r27, 0x10	; 16
    26f8:	3b 9f       	mul	r19, r27
    26fa:	80 0d       	add	r24, r0
    26fc:	91 1d       	adc	r25, r1
    26fe:	11 24       	eor	r1, r1
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2704:	42 2f       	mov	r20, r18
    2706:	40 7c       	andi	r20, 0xC0	; 192
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	44 0f       	add	r20, r20
    270c:	55 1f       	adc	r21, r21
    270e:	44 0f       	add	r20, r20
    2710:	55 1f       	adc	r21, r21
    2712:	cb 01       	movw	r24, r22
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	dc 01       	movw	r26, r24
    2718:	8c 91       	ld	r24, X
    271a:	48 0f       	add	r20, r24
    271c:	51 1d       	adc	r21, r1
    271e:	53 83       	std	Z+3, r21	; 0x03
    2720:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2722:	2f 70       	andi	r18, 0x0F	; 15
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	35 83       	std	Z+5, r19	; 0x05
    2728:	24 83       	std	Z+4, r18	; 0x04
    272a:	6d 5f       	subi	r22, 0xFD	; 253
    272c:	7f 4f       	sbci	r23, 0xFF	; 255
    272e:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2730:	e0 17       	cp	r30, r16
    2732:	f1 07       	cpc	r31, r17
    2734:	b9 f6       	brne	.-82     	; 0x26e4 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	03 c0       	rjmp	.+6      	; 0x2744 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	01 c0       	rjmp	.+2      	; 0x2744 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2742:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2744:	60 96       	adiw	r28, 0x10	; 16
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	1f 91       	pop	r17
    2756:	0f 91       	pop	r16
    2758:	08 95       	ret

0000275a <get_puck_location>:
Public Functions
************************************************************/

/* Returns x,y, location of puck (angle more accurate) */
void get_puck_location(float* puck_buffer)
{
    275a:	2f 92       	push	r2
    275c:	3f 92       	push	r3
    275e:	4f 92       	push	r4
    2760:	5f 92       	push	r5
    2762:	6f 92       	push	r6
    2764:	7f 92       	push	r7
    2766:	8f 92       	push	r8
    2768:	9f 92       	push	r9
    276a:	af 92       	push	r10
    276c:	bf 92       	push	r11
    276e:	cf 92       	push	r12
    2770:	df 92       	push	r13
    2772:	ef 92       	push	r14
    2774:	ff 92       	push	r15
    2776:	0f 93       	push	r16
    2778:	1f 93       	push	r17
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	62 97       	sbiw	r28, 0x12	; 18
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	9a 8b       	std	Y+18, r25	; 0x12
    2790:	89 8b       	std	Y+17, r24	; 0x11
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta
    2792:	ce 01       	movw	r24, r28
    2794:	01 96       	adiw	r24, 0x01	; 1
    2796:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <get_position>
    279a:	0f 2e       	mov	r0, r31
    279c:	ff ec       	ldi	r31, 0xCF	; 207
    279e:	8f 2e       	mov	r8, r31
    27a0:	f1 e0       	ldi	r31, 0x01	; 1
    27a2:	9f 2e       	mov	r9, r31
    27a4:	f0 2d       	mov	r31, r0
    27a6:	0f 2e       	mov	r0, r31
    27a8:	f1 e3       	ldi	r31, 0x31	; 49
    27aa:	ef 2e       	mov	r14, r31
    27ac:	f1 e0       	ldi	r31, 0x01	; 1
    27ae:	ff 2e       	mov	r15, r31
    27b0:	f0 2d       	mov	r31, r0
    27b2:	0f 2e       	mov	r0, r31
    27b4:	f9 e5       	ldi	r31, 0x59	; 89
    27b6:	af 2e       	mov	r10, r31
    27b8:	f1 e0       	ldi	r31, 0x01	; 1
    27ba:	bf 2e       	mov	r11, r31
    27bc:	f0 2d       	mov	r31, r0

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
    27be:	1d 86       	std	Y+13, r1	; 0x0d
    27c0:	1e 86       	std	Y+14, r1	; 0x0e
    27c2:	1f 86       	std	Y+15, r1	; 0x0f
    27c4:	18 8a       	std	Y+16, r1	; 0x10
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
    27c6:	c1 2c       	mov	r12, r1
    27c8:	d1 2c       	mov	r13, r1
{
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
    27ca:	21 2c       	mov	r2, r1
    27cc:	31 2c       	mov	r3, r1
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
		scaler += transistor_vals[i];
    27ce:	f4 01       	movw	r30, r8
    27d0:	01 91       	ld	r16, Z+
    27d2:	11 91       	ld	r17, Z+
    27d4:	4f 01       	movw	r8, r30
    27d6:	c0 0e       	add	r12, r16
    27d8:	d1 1e       	adc	r13, r17
		global_theta += transistor_angles[i] * (float)transistor_vals[i];
    27da:	f7 01       	movw	r30, r14
    27dc:	41 90       	ld	r4, Z+
    27de:	51 90       	ld	r5, Z+
    27e0:	61 90       	ld	r6, Z+
    27e2:	71 90       	ld	r7, Z+
    27e4:	7f 01       	movw	r14, r30
    27e6:	b8 01       	movw	r22, r16
    27e8:	01 2e       	mov	r0, r17
    27ea:	00 0c       	add	r0, r0
    27ec:	88 0b       	sbc	r24, r24
    27ee:	99 0b       	sbc	r25, r25
    27f0:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
    27f4:	9b 01       	movw	r18, r22
    27f6:	ac 01       	movw	r20, r24
    27f8:	c3 01       	movw	r24, r6
    27fa:	b2 01       	movw	r22, r4
    27fc:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    2800:	9b 01       	movw	r18, r22
    2802:	ac 01       	movw	r20, r24
    2804:	6d 85       	ldd	r22, Y+13	; 0x0d
    2806:	7e 85       	ldd	r23, Y+14	; 0x0e
    2808:	8f 85       	ldd	r24, Y+15	; 0x0f
    280a:	98 89       	ldd	r25, Y+16	; 0x10
    280c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
    2810:	6d 87       	std	Y+13, r22	; 0x0d
    2812:	7e 87       	std	Y+14, r23	; 0x0e
    2814:	8f 87       	std	Y+15, r24	; 0x0f
    2816:	98 8b       	std	Y+16, r25	; 0x10
    2818:	20 16       	cp	r2, r16
    281a:	31 06       	cpc	r3, r17
    281c:	0c f4       	brge	.+2      	; 0x2820 <get_puck_location+0xc6>
    281e:	18 01       	movw	r2, r16

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
    2820:	ea 14       	cp	r14, r10
    2822:	fb 04       	cpc	r15, r11
    2824:	a1 f6       	brne	.-88     	; 0x27ce <get_puck_location+0x74>
	}
	global_theta = global_theta/((float)scaler);


	/* If no puck found */
	if(max_val<100){
    2826:	f4 e6       	ldi	r31, 0x64	; 100
    2828:	2f 16       	cp	r2, r31
    282a:	31 04       	cpc	r3, r1
    282c:	5c f4       	brge	.+22     	; 0x2844 <get_puck_location+0xea>
		puck_buffer[0] = 0;
    282e:	e9 89       	ldd	r30, Y+17	; 0x11
    2830:	fa 89       	ldd	r31, Y+18	; 0x12
    2832:	10 82       	st	Z, r1
    2834:	11 82       	std	Z+1, r1	; 0x01
    2836:	12 82       	std	Z+2, r1	; 0x02
    2838:	13 82       	std	Z+3, r1	; 0x03
		puck_buffer[1] = 0;
    283a:	14 82       	std	Z+4, r1	; 0x04
    283c:	15 82       	std	Z+5, r1	; 0x05
    283e:	16 82       	std	Z+6, r1	; 0x06
    2840:	17 82       	std	Z+7, r1	; 0x07
    2842:	66 c0       	rjmp	.+204    	; 0x2910 <get_puck_location+0x1b6>

		if(transistor_vals[i]>max_val){
			max_val = transistor_vals[i];
		}
	}
	global_theta = global_theta/((float)scaler);
    2844:	b6 01       	movw	r22, r12
    2846:	dd 0c       	add	r13, r13
    2848:	88 0b       	sbc	r24, r24
    284a:	99 0b       	sbc	r25, r25
    284c:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
    2850:	9b 01       	movw	r18, r22
    2852:	ac 01       	movw	r20, r24
    2854:	6d 85       	ldd	r22, Y+13	; 0x0d
    2856:	7e 85       	ldd	r23, Y+14	; 0x0e
    2858:	8f 85       	ldd	r24, Y+15	; 0x0f
    285a:	98 89       	ldd	r25, Y+16	; 0x10
    285c:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divsf3>
		puck_buffer[1] = 0;
		return;
	}

	/* Create vector pointing to puck in global coordinates */
	global_theta += position_buffer[2];
    2860:	29 85       	ldd	r18, Y+9	; 0x09
    2862:	3a 85       	ldd	r19, Y+10	; 0x0a
    2864:	4b 85       	ldd	r20, Y+11	; 0x0b
    2866:	5c 85       	ldd	r21, Y+12	; 0x0c
    2868:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
    286c:	6b 01       	movw	r12, r22
    286e:	7c 01       	movw	r14, r24
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/200.0 + position_buffer[0]; // Assign X val
    2870:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <cos>
    2874:	4b 01       	movw	r8, r22
    2876:	5c 01       	movw	r10, r24
    2878:	6f ef       	ldi	r22, 0xFF	; 255
    287a:	73 e0       	ldi	r23, 0x03	; 3
    287c:	62 19       	sub	r22, r2
    287e:	73 09       	sbc	r23, r3
    2880:	07 2e       	mov	r0, r23
    2882:	00 0c       	add	r0, r0
    2884:	88 0b       	sbc	r24, r24
    2886:	99 0b       	sbc	r25, r25
    2888:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__floatsisf>
    288c:	2b 01       	movw	r4, r22
    288e:	3c 01       	movw	r6, r24
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4f e2       	ldi	r20, 0x2F	; 47
    2896:	54 e4       	ldi	r21, 0x44	; 68
    2898:	c5 01       	movw	r24, r10
    289a:	b4 01       	movw	r22, r8
    289c:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    28a0:	a3 01       	movw	r20, r6
    28a2:	92 01       	movw	r18, r4
    28a4:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	48 e4       	ldi	r20, 0x48	; 72
    28ae:	53 e4       	ldi	r21, 0x43	; 67
    28b0:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divsf3>
    28b4:	29 81       	ldd	r18, Y+1	; 0x01
    28b6:	3a 81       	ldd	r19, Y+2	; 0x02
    28b8:	4b 81       	ldd	r20, Y+3	; 0x03
    28ba:	5c 81       	ldd	r21, Y+4	; 0x04
    28bc:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
    28c0:	e9 89       	ldd	r30, Y+17	; 0x11
    28c2:	fa 89       	ldd	r31, Y+18	; 0x12
    28c4:	60 83       	st	Z, r22
    28c6:	71 83       	std	Z+1, r23	; 0x01
    28c8:	82 83       	std	Z+2, r24	; 0x02
    28ca:	93 83       	std	Z+3, r25	; 0x03
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/200.0 + position_buffer[1]; // Assign Y val
    28cc:	c7 01       	movw	r24, r14
    28ce:	b6 01       	movw	r22, r12
    28d0:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <sin>
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4f e2       	ldi	r20, 0x2F	; 47
    28da:	54 e4       	ldi	r21, 0x44	; 68
    28dc:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    28e0:	9b 01       	movw	r18, r22
    28e2:	ac 01       	movw	r20, r24
    28e4:	c3 01       	movw	r24, r6
    28e6:	b2 01       	movw	r22, r4
    28e8:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	48 e4       	ldi	r20, 0x48	; 72
    28f2:	53 e4       	ldi	r21, 0x43	; 67
    28f4:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divsf3>
    28f8:	2d 81       	ldd	r18, Y+5	; 0x05
    28fa:	3e 81       	ldd	r19, Y+6	; 0x06
    28fc:	4f 81       	ldd	r20, Y+7	; 0x07
    28fe:	58 85       	ldd	r21, Y+8	; 0x08
    2900:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__addsf3>
    2904:	e9 89       	ldd	r30, Y+17	; 0x11
    2906:	fa 89       	ldd	r31, Y+18	; 0x12
    2908:	64 83       	std	Z+4, r22	; 0x04
    290a:	75 83       	std	Z+5, r23	; 0x05
    290c:	86 83       	std	Z+6, r24	; 0x06
    290e:	97 83       	std	Z+7, r25	; 0x07

}
    2910:	62 96       	adiw	r28, 0x12	; 18
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	1f 91       	pop	r17
    2922:	0f 91       	pop	r16
    2924:	ff 90       	pop	r15
    2926:	ef 90       	pop	r14
    2928:	df 90       	pop	r13
    292a:	cf 90       	pop	r12
    292c:	bf 90       	pop	r11
    292e:	af 90       	pop	r10
    2930:	9f 90       	pop	r9
    2932:	8f 90       	pop	r8
    2934:	7f 90       	pop	r7
    2936:	6f 90       	pop	r6
    2938:	5f 90       	pop	r5
    293a:	4f 90       	pop	r4
    293c:	3f 90       	pop	r3
    293e:	2f 90       	pop	r2
    2940:	08 95       	ret

00002942 <has_puck>:

/* Return 1 If Has Puck */
char has_puck(void)
{
	static int had_puck = 5;
	if(check(ADCSRA,ADEN)){		//check if ADC is enabled 
    2942:	80 91 7a 00 	lds	r24, 0x007A
    2946:	88 23       	and	r24, r24
    2948:	14 f5       	brge	.+68     	; 0x298e <has_puck+0x4c>
		if(((transistor_3 + transistor_9) > HAS_PUCK_THRESHOLD)){
    294a:	20 91 cd 01 	lds	r18, 0x01CD
    294e:	30 91 ce 01 	lds	r19, 0x01CE
    2952:	80 91 cb 01 	lds	r24, 0x01CB
    2956:	90 91 cc 01 	lds	r25, 0x01CC
    295a:	82 0f       	add	r24, r18
    295c:	93 1f       	adc	r25, r19
    295e:	81 32       	cpi	r24, 0x21	; 33
    2960:	93 40       	sbci	r25, 0x03	; 3
    2962:	44 f0       	brlt	.+16     	; 0x2974 <has_puck+0x32>
			had_puck = 5;
    2964:	85 e0       	ldi	r24, 0x05	; 5
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	90 93 30 01 	sts	0x0130, r25
    296c:	80 93 2f 01 	sts	0x012F, r24
			return 1;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	08 95       	ret
		}
		if(had_puck){
    2974:	80 91 2f 01 	lds	r24, 0x012F
    2978:	90 91 30 01 	lds	r25, 0x0130
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	49 f0       	breq	.+18     	; 0x2992 <has_puck+0x50>
			had_puck -= 1;
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	90 93 30 01 	sts	0x0130, r25
    2986:	80 93 2f 01 	sts	0x012F, r24
			return 1;
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	08 95       	ret
		}
	}
	return 0;
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	08 95       	ret
    2992:	80 e0       	ldi	r24, 0x00	; 0
}
    2994:	08 95       	ret

00002996 <adc_switch>:

/* Control ADC Pin Switching */
char adc_switch(void)
{
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
	char return_val = 0; // Return if last pin has been updated

	clear(ADCSRA,ADEN); // Disable ADC subsystem
    299a:	ea e7       	ldi	r30, 0x7A	; 122
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	8f 77       	andi	r24, 0x7F	; 127
    29a2:	80 83       	st	Z, r24
	
	switch(state){
    29a4:	e0 91 e3 01 	lds	r30, 0x01E3
    29a8:	f0 91 e4 01 	lds	r31, 0x01E4
    29ac:	ec 30       	cpi	r30, 0x0C	; 12
    29ae:	f1 05       	cpc	r31, r1
    29b0:	08 f0       	brcs	.+2      	; 0x29b4 <adc_switch+0x1e>
    29b2:	e8 c1       	rjmp	.+976    	; 0x2d84 <adc_switch+0x3ee>
    29b4:	e2 5a       	subi	r30, 0xA2	; 162
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__tablejump2__>

		case 0:
			state = 1;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	90 93 e4 01 	sts	0x01E4, r25
    29c4:	80 93 e3 01 	sts	0x01E3, r24
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
    29c8:	eb e7       	ldi	r30, 0x7B	; 123
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	8f 7d       	andi	r24, 0xDF	; 223
    29d0:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 8
    29d2:	ec e7       	ldi	r30, 0x7C	; 124
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	8b 7f       	andi	r24, 0xFB	; 251
    29da:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    29dc:	80 81       	ld	r24, Z
    29de:	8d 7f       	andi	r24, 0xFD	; 253
    29e0:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    29e2:	80 81       	ld	r24, Z
    29e4:	8e 7f       	andi	r24, 0xFE	; 254
    29e6:	80 83       	st	Z, r24
			transistor_vals[2] = ADC;			
    29e8:	80 91 78 00 	lds	r24, 0x0078
    29ec:	90 91 79 00 	lds	r25, 0x0079
    29f0:	90 93 d4 01 	sts	0x01D4, r25
    29f4:	80 93 d3 01 	sts	0x01D3, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    29f8:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
			clear(ADMUX,MUX2); // Transistor 8
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[2] = ADC;			
			break;
    29fa:	c5 c1       	rjmp	.+906    	; 0x2d86 <adc_switch+0x3f0>

		case 1:
			state = 2;
    29fc:	82 e0       	ldi	r24, 0x02	; 2
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	90 93 e4 01 	sts	0x01E4, r25
    2a04:	80 93 e3 01 	sts	0x01E3, r24
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
    2a08:	eb e7       	ldi	r30, 0x7B	; 123
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	8f 7d       	andi	r24, 0xDF	; 223
    2a10:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 9
    2a12:	ec e7       	ldi	r30, 0x7C	; 124
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	8b 7f       	andi	r24, 0xFB	; 251
    2a1a:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2a1c:	80 81       	ld	r24, Z
    2a1e:	8d 7f       	andi	r24, 0xFD	; 253
    2a20:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2a22:	80 81       	ld	r24, Z
    2a24:	81 60       	ori	r24, 0x01	; 1
    2a26:	80 83       	st	Z, r24
			transistor_vals[4] = ADC;			
    2a28:	80 91 78 00 	lds	r24, 0x0078
    2a2c:	90 91 79 00 	lds	r25, 0x0079
    2a30:	90 93 d8 01 	sts	0x01D8, r25
    2a34:	80 93 d7 01 	sts	0x01D7, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2a38:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
			clear(ADMUX,MUX2); // Transistor 9
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[4] = ADC;			
			break;
    2a3a:	a5 c1       	rjmp	.+842    	; 0x2d86 <adc_switch+0x3f0>

		case 2:
			state = 3;
    2a3c:	83 e0       	ldi	r24, 0x03	; 3
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	90 93 e4 01 	sts	0x01E4, r25
    2a44:	80 93 e3 01 	sts	0x01E3, r24
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
    2a48:	eb e7       	ldi	r30, 0x7B	; 123
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	8f 7d       	andi	r24, 0xDF	; 223
    2a50:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 10
    2a52:	ec e7       	ldi	r30, 0x7C	; 124
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	84 60       	ori	r24, 0x04	; 4
    2a5a:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2a5c:	80 81       	ld	r24, Z
    2a5e:	8d 7f       	andi	r24, 0xFD	; 253
    2a60:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2a62:	80 81       	ld	r24, Z
    2a64:	8e 7f       	andi	r24, 0xFE	; 254
    2a66:	80 83       	st	Z, r24
			transistor_9 = ADC;			
    2a68:	80 91 78 00 	lds	r24, 0x0078
    2a6c:	90 91 79 00 	lds	r25, 0x0079
    2a70:	90 93 cc 01 	sts	0x01CC, r25
    2a74:	80 93 cb 01 	sts	0x01CB, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2a78:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
			set(ADMUX,MUX2); // Transistor 10
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_9 = ADC;			
			break;
    2a7a:	85 c1       	rjmp	.+778    	; 0x2d86 <adc_switch+0x3f0>

		case 3:
			state = 4;
    2a7c:	84 e0       	ldi	r24, 0x04	; 4
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	90 93 e4 01 	sts	0x01E4, r25
    2a84:	80 93 e3 01 	sts	0x01E3, r24
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
    2a88:	eb e7       	ldi	r30, 0x7B	; 123
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	8f 7d       	andi	r24, 0xDF	; 223
    2a90:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 13
    2a92:	ec e7       	ldi	r30, 0x7C	; 124
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	84 60       	ori	r24, 0x04	; 4
    2a9a:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2a9c:	80 81       	ld	r24, Z
    2a9e:	8d 7f       	andi	r24, 0xFD	; 253
    2aa0:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2aa2:	80 81       	ld	r24, Z
    2aa4:	81 60       	ori	r24, 0x01	; 1
    2aa6:	80 83       	st	Z, r24
			transistor_vals[5] = ADC;			
    2aa8:	80 91 78 00 	lds	r24, 0x0078
    2aac:	90 91 79 00 	lds	r25, 0x0079
    2ab0:	90 93 da 01 	sts	0x01DA, r25
    2ab4:	80 93 d9 01 	sts	0x01D9, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
			set(ADMUX,MUX2); // Transistor 13
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[5] = ADC;			
			break;
    2aba:	65 c1       	rjmp	.+714    	; 0x2d86 <adc_switch+0x3f0>

		case 4:
			state = 5;
    2abc:	85 e0       	ldi	r24, 0x05	; 5
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	90 93 e4 01 	sts	0x01E4, r25
    2ac4:	80 93 e3 01 	sts	0x01E3, r24
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
    2ac8:	eb e7       	ldi	r30, 0x7B	; 123
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	8f 7d       	andi	r24, 0xDF	; 223
    2ad0:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 14
    2ad2:	ec e7       	ldi	r30, 0x7C	; 124
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	84 60       	ori	r24, 0x04	; 4
    2ada:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2adc:	80 81       	ld	r24, Z
    2ade:	82 60       	ori	r24, 0x02	; 2
    2ae0:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2ae2:	80 81       	ld	r24, Z
    2ae4:	8e 7f       	andi	r24, 0xFE	; 254
    2ae6:	80 83       	st	Z, r24
			transistor_vals[7] = ADC;			
    2ae8:	80 91 78 00 	lds	r24, 0x0078
    2aec:	90 91 79 00 	lds	r25, 0x0079
    2af0:	90 93 de 01 	sts	0x01DE, r25
    2af4:	80 93 dd 01 	sts	0x01DD, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2af8:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
			set(ADMUX,MUX2); // Transistor 14
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[7] = ADC;			
			break;
    2afa:	45 c1       	rjmp	.+650    	; 0x2d86 <adc_switch+0x3f0>

		case 5:
			state = 6;
    2afc:	86 e0       	ldi	r24, 0x06	; 6
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	90 93 e4 01 	sts	0x01E4, r25
    2b04:	80 93 e3 01 	sts	0x01E3, r24
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
    2b08:	eb e7       	ldi	r30, 0x7B	; 123
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	8f 7d       	andi	r24, 0xDF	; 223
    2b10:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 15
    2b12:	ec e7       	ldi	r30, 0x7C	; 124
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	84 60       	ori	r24, 0x04	; 4
    2b1a:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2b1c:	80 81       	ld	r24, Z
    2b1e:	82 60       	ori	r24, 0x02	; 2
    2b20:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2b22:	80 81       	ld	r24, Z
    2b24:	81 60       	ori	r24, 0x01	; 1
    2b26:	80 83       	st	Z, r24
			transistor_vals[8] = ADC;			
    2b28:	80 91 78 00 	lds	r24, 0x0078
    2b2c:	90 91 79 00 	lds	r25, 0x0079
    2b30:	90 93 e0 01 	sts	0x01E0, r25
    2b34:	80 93 df 01 	sts	0x01DF, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2b38:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
			set(ADMUX,MUX2); // Transistor 15
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[8] = ADC;			
			break;
    2b3a:	25 c1       	rjmp	.+586    	; 0x2d86 <adc_switch+0x3f0>

		case 6:
			state = 7;
    2b3c:	87 e0       	ldi	r24, 0x07	; 7
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	90 93 e4 01 	sts	0x01E4, r25
    2b44:	80 93 e3 01 	sts	0x01E3, r24
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
    2b48:	eb e7       	ldi	r30, 0x7B	; 123
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	80 62       	ori	r24, 0x20	; 32
    2b50:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 1, 16
    2b52:	ec e7       	ldi	r30, 0x7C	; 124
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	8b 7f       	andi	r24, 0xFB	; 251
    2b5a:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2b5c:	80 81       	ld	r24, Z
    2b5e:	8d 7f       	andi	r24, 0xFD	; 253
    2b60:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2b62:	80 81       	ld	r24, Z
    2b64:	8e 7f       	andi	r24, 0xFE	; 254
    2b66:	80 83       	st	Z, r24
			transistor_vals[9] = ADC;			
    2b68:	80 91 78 00 	lds	r24, 0x0078
    2b6c:	90 91 79 00 	lds	r25, 0x0079
    2b70:	90 93 e2 01 	sts	0x01E2, r25
    2b74:	80 93 e1 01 	sts	0x01E1, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2b78:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
			clear(ADMUX,MUX2); // Transistor 1, 16
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[9] = ADC;			
			break;
    2b7a:	05 c1       	rjmp	.+522    	; 0x2d86 <adc_switch+0x3f0>

		case 7:
			state = 8;
    2b7c:	88 e0       	ldi	r24, 0x08	; 8
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	90 93 e4 01 	sts	0x01E4, r25
    2b84:	80 93 e3 01 	sts	0x01E3, r24
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
    2b88:	eb e7       	ldi	r30, 0x7B	; 123
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	80 62       	ori	r24, 0x20	; 32
    2b90:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 11, 12
    2b92:	ec e7       	ldi	r30, 0x7C	; 124
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	8b 7f       	andi	r24, 0xFB	; 251
    2b9a:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2b9c:	80 81       	ld	r24, Z
    2b9e:	8d 7f       	andi	r24, 0xFD	; 253
    2ba0:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2ba2:	80 81       	ld	r24, Z
    2ba4:	81 60       	ori	r24, 0x01	; 1
    2ba6:	80 83       	st	Z, r24
			transistor_vals[0] = ADC;			
    2ba8:	80 91 78 00 	lds	r24, 0x0078
    2bac:	90 91 79 00 	lds	r25, 0x0079
    2bb0:	90 93 d0 01 	sts	0x01D0, r25
    2bb4:	80 93 cf 01 	sts	0x01CF, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
			clear(ADMUX,MUX2); // Transistor 11, 12
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[0] = ADC;			
			break;
    2bba:	e5 c0       	rjmp	.+458    	; 0x2d86 <adc_switch+0x3f0>

		case 8:
			state = 9;
    2bbc:	89 e0       	ldi	r24, 0x09	; 9
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	90 93 e4 01 	sts	0x01E4, r25
    2bc4:	80 93 e3 01 	sts	0x01E3, r24
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
    2bc8:	eb e7       	ldi	r30, 0x7B	; 123
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	80 62       	ori	r24, 0x20	; 32
    2bd0:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
    2bd2:	ec e7       	ldi	r30, 0x7C	; 124
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	8b 7f       	andi	r24, 0xFB	; 251
    2bda:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2bdc:	80 81       	ld	r24, Z
    2bde:	82 60       	ori	r24, 0x02	; 2
    2be0:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2be2:	80 81       	ld	r24, Z
    2be4:	8e 7f       	andi	r24, 0xFE	; 254
    2be6:	80 83       	st	Z, r24
			transistor_vals[6] = ADC;			
    2be8:	80 91 78 00 	lds	r24, 0x0078
    2bec:	90 91 79 00 	lds	r25, 0x0079
    2bf0:	90 93 dc 01 	sts	0x01DC, r25
    2bf4:	80 93 db 01 	sts	0x01DB, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[6] = ADC;			
			break;
    2bfa:	c5 c0       	rjmp	.+394    	; 0x2d86 <adc_switch+0x3f0>

		case 9:
			state = 10;
    2bfc:	8a e0       	ldi	r24, 0x0A	; 10
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	90 93 e4 01 	sts	0x01E4, r25
    2c04:	80 93 e3 01 	sts	0x01E3, r24
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
    2c08:	eb e7       	ldi	r30, 0x7B	; 123
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	80 62       	ori	r24, 0x20	; 32
    2c10:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 2
    2c12:	ec e7       	ldi	r30, 0x7C	; 124
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	8b 7f       	andi	r24, 0xFB	; 251
    2c1a:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2c1c:	80 81       	ld	r24, Z
    2c1e:	82 60       	ori	r24, 0x02	; 2
    2c20:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2c22:	80 81       	ld	r24, Z
    2c24:	81 60       	ori	r24, 0x01	; 1
    2c26:	80 83       	st	Z, r24
			transistor_vals[3] = ADC;			
    2c28:	80 91 78 00 	lds	r24, 0x0078
    2c2c:	90 91 79 00 	lds	r25, 0x0079
    2c30:	90 93 d6 01 	sts	0x01D6, r25
    2c34:	80 93 d5 01 	sts	0x01D5, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2c38:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
			clear(ADMUX,MUX2); // Transistor 2
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[3] = ADC;			
			break;
    2c3a:	a5 c0       	rjmp	.+330    	; 0x2d86 <adc_switch+0x3f0>

		case 10:
			state = 11;
    2c3c:	8b e0       	ldi	r24, 0x0B	; 11
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	90 93 e4 01 	sts	0x01E4, r25
    2c44:	80 93 e3 01 	sts	0x01E3, r24
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
    2c48:	eb e7       	ldi	r30, 0x7B	; 123
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	80 62       	ori	r24, 0x20	; 32
    2c50:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 3
    2c52:	ec e7       	ldi	r30, 0x7C	; 124
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	80 81       	ld	r24, Z
    2c58:	84 60       	ori	r24, 0x04	; 4
    2c5a:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2c5c:	80 81       	ld	r24, Z
    2c5e:	8d 7f       	andi	r24, 0xFD	; 253
    2c60:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2c62:	80 81       	ld	r24, Z
    2c64:	8e 7f       	andi	r24, 0xFE	; 254
    2c66:	80 83       	st	Z, r24
			transistor_vals[1] = ADC;			
    2c68:	80 91 78 00 	lds	r24, 0x0078
    2c6c:	90 91 79 00 	lds	r25, 0x0079
    2c70:	90 93 d2 01 	sts	0x01D2, r25
    2c74:	80 93 d1 01 	sts	0x01D1, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2c78:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
			set(ADMUX,MUX2); // Transistor 3
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[1] = ADC;			
			break;
    2c7a:	85 c0       	rjmp	.+266    	; 0x2d86 <adc_switch+0x3f0>

		case 11:
			state = 0;
    2c7c:	10 92 e4 01 	sts	0x01E4, r1
    2c80:	10 92 e3 01 	sts	0x01E3, r1
			set(ADCSRB,MUX5); // Select ADC13 at pin B6
    2c84:	eb e7       	ldi	r30, 0x7B	; 123
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	80 62       	ori	r24, 0x20	; 32
    2c8c:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 4
    2c8e:	ec e7       	ldi	r30, 0x7C	; 124
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	84 60       	ori	r24, 0x04	; 4
    2c96:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2c98:	80 81       	ld	r24, Z
    2c9a:	8d 7f       	andi	r24, 0xFD	; 253
    2c9c:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2c9e:	80 81       	ld	r24, Z
    2ca0:	81 60       	ori	r24, 0x01	; 1
    2ca2:	80 83       	st	Z, r24
			transistor_3 = ADC;			
    2ca4:	80 91 78 00 	lds	r24, 0x0078
    2ca8:	90 91 79 00 	lds	r25, 0x0079
    2cac:	90 93 ce 01 	sts	0x01CE, r25
    2cb0:	80 93 cd 01 	sts	0x01CD, r24
			return_val = 1;

			m_usb_tx_string("\nIR1,16: ");
    2cb4:	87 e3       	ldi	r24, 0x37	; 55
    2cb6:	92 e0       	ldi	r25, 0x02	; 2
    2cb8:	0e 94 72 11 	call	0x22e4	; 0x22e4 <print_P>
			m_usb_tx_int(transistor_vals[0]);
    2cbc:	cf ec       	ldi	r28, 0xCF	; 207
    2cbe:	d1 e0       	ldi	r29, 0x01	; 1
    2cc0:	88 81       	ld	r24, Y
    2cc2:	99 81       	ldd	r25, Y+1	; 0x01
    2cc4:	0e 94 8e 11 	call	0x231c	; 0x231c <m_usb_tx_int>
			m_usb_tx_string("  IR2: ");
    2cc8:	8f e2       	ldi	r24, 0x2F	; 47
    2cca:	92 e0       	ldi	r25, 0x02	; 2
    2ccc:	0e 94 72 11 	call	0x22e4	; 0x22e4 <print_P>
			m_usb_tx_int(transistor_vals[1]);
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd4:	0e 94 8e 11 	call	0x231c	; 0x231c <m_usb_tx_int>
			m_usb_tx_string("  IR3: ");
    2cd8:	87 e2       	ldi	r24, 0x27	; 39
    2cda:	92 e0       	ldi	r25, 0x02	; 2
    2cdc:	0e 94 72 11 	call	0x22e4	; 0x22e4 <print_P>
			m_usb_tx_int(transistor_3);
    2ce0:	80 91 cd 01 	lds	r24, 0x01CD
    2ce4:	90 91 ce 01 	lds	r25, 0x01CE
    2ce8:	0e 94 8e 11 	call	0x231c	; 0x231c <m_usb_tx_int>
			m_usb_tx_string("  IR4: ");
    2cec:	8f e1       	ldi	r24, 0x1F	; 31
    2cee:	92 e0       	ldi	r25, 0x02	; 2
    2cf0:	0e 94 72 11 	call	0x22e4	; 0x22e4 <print_P>
			m_usb_tx_int(transistor_vals[2]);
    2cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cf8:	0e 94 8e 11 	call	0x231c	; 0x231c <m_usb_tx_int>
			m_usb_tx_string("  IR5,6,7: ");
    2cfc:	83 e1       	ldi	r24, 0x13	; 19
    2cfe:	92 e0       	ldi	r25, 0x02	; 2
    2d00:	0e 94 72 11 	call	0x22e4	; 0x22e4 <print_P>
			m_usb_tx_int(transistor_vals[3]);
    2d04:	8e 81       	ldd	r24, Y+6	; 0x06
    2d06:	9f 81       	ldd	r25, Y+7	; 0x07
    2d08:	0e 94 8e 11 	call	0x231c	; 0x231c <m_usb_tx_int>
			m_usb_tx_string("  IR8: ");
    2d0c:	8b e0       	ldi	r24, 0x0B	; 11
    2d0e:	92 e0       	ldi	r25, 0x02	; 2
    2d10:	0e 94 72 11 	call	0x22e4	; 0x22e4 <print_P>
			m_usb_tx_int(transistor_vals[4]);
    2d14:	88 85       	ldd	r24, Y+8	; 0x08
    2d16:	99 85       	ldd	r25, Y+9	; 0x09
    2d18:	0e 94 8e 11 	call	0x231c	; 0x231c <m_usb_tx_int>
			m_usb_tx_string("  IR9: ");
    2d1c:	83 e0       	ldi	r24, 0x03	; 3
    2d1e:	92 e0       	ldi	r25, 0x02	; 2
    2d20:	0e 94 72 11 	call	0x22e4	; 0x22e4 <print_P>
			m_usb_tx_int(transistor_9);
    2d24:	80 91 cb 01 	lds	r24, 0x01CB
    2d28:	90 91 cc 01 	lds	r25, 0x01CC
    2d2c:	0e 94 8e 11 	call	0x231c	; 0x231c <m_usb_tx_int>
			m_usb_tx_string("  IR10: ");
    2d30:	8a ef       	ldi	r24, 0xFA	; 250
    2d32:	91 e0       	ldi	r25, 0x01	; 1
    2d34:	0e 94 72 11 	call	0x22e4	; 0x22e4 <print_P>
			m_usb_tx_int(transistor_vals[5]);
    2d38:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d3c:	0e 94 8e 11 	call	0x231c	; 0x231c <m_usb_tx_int>
			m_usb_tx_string("  IR11,12: ");
    2d40:	8e ee       	ldi	r24, 0xEE	; 238
    2d42:	91 e0       	ldi	r25, 0x01	; 1
    2d44:	0e 94 72 11 	call	0x22e4	; 0x22e4 <print_P>
			m_usb_tx_int(transistor_vals[6]);
    2d48:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d4a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d4c:	0e 94 8e 11 	call	0x231c	; 0x231c <m_usb_tx_int>
			m_usb_tx_string("  IR13: ");
    2d50:	85 ee       	ldi	r24, 0xE5	; 229
    2d52:	91 e0       	ldi	r25, 0x01	; 1
    2d54:	0e 94 72 11 	call	0x22e4	; 0x22e4 <print_P>
			m_usb_tx_int(transistor_vals[7]);
    2d58:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d5c:	0e 94 8e 11 	call	0x231c	; 0x231c <m_usb_tx_int>
			m_usb_tx_string("  IR14: ");
    2d60:	8c ed       	ldi	r24, 0xDC	; 220
    2d62:	91 e0       	ldi	r25, 0x01	; 1
    2d64:	0e 94 72 11 	call	0x22e4	; 0x22e4 <print_P>
			m_usb_tx_int(transistor_vals[8]);
    2d68:	88 89       	ldd	r24, Y+16	; 0x10
    2d6a:	99 89       	ldd	r25, Y+17	; 0x11
    2d6c:	0e 94 8e 11 	call	0x231c	; 0x231c <m_usb_tx_int>
			m_usb_tx_string("  IR15: ");
    2d70:	83 ed       	ldi	r24, 0xD3	; 211
    2d72:	91 e0       	ldi	r25, 0x01	; 1
    2d74:	0e 94 72 11 	call	0x22e4	; 0x22e4 <print_P>
			m_usb_tx_int(transistor_vals[9]);
    2d78:	8a 89       	ldd	r24, Y+18	; 0x12
    2d7a:	9b 89       	ldd	r25, Y+19	; 0x13
    2d7c:	0e 94 8e 11 	call	0x231c	; 0x231c <m_usb_tx_int>
			set(ADCSRB,MUX5); // Select ADC13 at pin B6
			set(ADMUX,MUX2); // Transistor 4
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_3 = ADC;			
			return_val = 1;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
			m_usb_tx_string("  IR14: ");
			m_usb_tx_int(transistor_vals[8]);
			m_usb_tx_string("  IR15: ");
			m_usb_tx_int(transistor_vals[9]);

			break;
    2d82:	01 c0       	rjmp	.+2      	; 0x2d86 <adc_switch+0x3f0>
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d84:	80 e0       	ldi	r24, 0x00	; 0
			m_usb_tx_int(transistor_vals[9]);

			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
    2d86:	ea e7       	ldi	r30, 0x7A	; 122
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	90 81       	ld	r25, Z
    2d8c:	90 68       	ori	r25, 0x80	; 128
    2d8e:	90 83       	st	Z, r25
	set(ADCSRA,ADSC); // Begin new conversion
    2d90:	90 81       	ld	r25, Z
    2d92:	90 64       	ori	r25, 0x40	; 64
    2d94:	90 83       	st	Z, r25

	return return_val;
}
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	08 95       	ret

00002d9c <__subsf3>:
    2d9c:	50 58       	subi	r21, 0x80	; 128

00002d9e <__addsf3>:
    2d9e:	bb 27       	eor	r27, r27
    2da0:	aa 27       	eor	r26, r26
    2da2:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <__addsf3x>
    2da6:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__fp_round>
    2daa:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__fp_pscA>
    2dae:	38 f0       	brcs	.+14     	; 0x2dbe <__addsf3+0x20>
    2db0:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fp_pscB>
    2db4:	20 f0       	brcs	.+8      	; 0x2dbe <__addsf3+0x20>
    2db6:	39 f4       	brne	.+14     	; 0x2dc6 <__addsf3+0x28>
    2db8:	9f 3f       	cpi	r25, 0xFF	; 255
    2dba:	19 f4       	brne	.+6      	; 0x2dc2 <__addsf3+0x24>
    2dbc:	26 f4       	brtc	.+8      	; 0x2dc6 <__addsf3+0x28>
    2dbe:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_nan>
    2dc2:	0e f4       	brtc	.+2      	; 0x2dc6 <__addsf3+0x28>
    2dc4:	e0 95       	com	r30
    2dc6:	e7 fb       	bst	r30, 7
    2dc8:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__fp_inf>

00002dcc <__addsf3x>:
    2dcc:	e9 2f       	mov	r30, r25
    2dce:	0e 94 4e 19 	call	0x329c	; 0x329c <__fp_split3>
    2dd2:	58 f3       	brcs	.-42     	; 0x2daa <__addsf3+0xc>
    2dd4:	ba 17       	cp	r27, r26
    2dd6:	62 07       	cpc	r22, r18
    2dd8:	73 07       	cpc	r23, r19
    2dda:	84 07       	cpc	r24, r20
    2ddc:	95 07       	cpc	r25, r21
    2dde:	20 f0       	brcs	.+8      	; 0x2de8 <__addsf3x+0x1c>
    2de0:	79 f4       	brne	.+30     	; 0x2e00 <__addsf3x+0x34>
    2de2:	a6 f5       	brtc	.+104    	; 0x2e4c <__addsf3x+0x80>
    2de4:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <__fp_zero>
    2de8:	0e f4       	brtc	.+2      	; 0x2dec <__addsf3x+0x20>
    2dea:	e0 95       	com	r30
    2dec:	0b 2e       	mov	r0, r27
    2dee:	ba 2f       	mov	r27, r26
    2df0:	a0 2d       	mov	r26, r0
    2df2:	0b 01       	movw	r0, r22
    2df4:	b9 01       	movw	r22, r18
    2df6:	90 01       	movw	r18, r0
    2df8:	0c 01       	movw	r0, r24
    2dfa:	ca 01       	movw	r24, r20
    2dfc:	a0 01       	movw	r20, r0
    2dfe:	11 24       	eor	r1, r1
    2e00:	ff 27       	eor	r31, r31
    2e02:	59 1b       	sub	r21, r25
    2e04:	99 f0       	breq	.+38     	; 0x2e2c <__addsf3x+0x60>
    2e06:	59 3f       	cpi	r21, 0xF9	; 249
    2e08:	50 f4       	brcc	.+20     	; 0x2e1e <__addsf3x+0x52>
    2e0a:	50 3e       	cpi	r21, 0xE0	; 224
    2e0c:	68 f1       	brcs	.+90     	; 0x2e68 <__addsf3x+0x9c>
    2e0e:	1a 16       	cp	r1, r26
    2e10:	f0 40       	sbci	r31, 0x00	; 0
    2e12:	a2 2f       	mov	r26, r18
    2e14:	23 2f       	mov	r18, r19
    2e16:	34 2f       	mov	r19, r20
    2e18:	44 27       	eor	r20, r20
    2e1a:	58 5f       	subi	r21, 0xF8	; 248
    2e1c:	f3 cf       	rjmp	.-26     	; 0x2e04 <__addsf3x+0x38>
    2e1e:	46 95       	lsr	r20
    2e20:	37 95       	ror	r19
    2e22:	27 95       	ror	r18
    2e24:	a7 95       	ror	r26
    2e26:	f0 40       	sbci	r31, 0x00	; 0
    2e28:	53 95       	inc	r21
    2e2a:	c9 f7       	brne	.-14     	; 0x2e1e <__addsf3x+0x52>
    2e2c:	7e f4       	brtc	.+30     	; 0x2e4c <__addsf3x+0x80>
    2e2e:	1f 16       	cp	r1, r31
    2e30:	ba 0b       	sbc	r27, r26
    2e32:	62 0b       	sbc	r22, r18
    2e34:	73 0b       	sbc	r23, r19
    2e36:	84 0b       	sbc	r24, r20
    2e38:	ba f0       	brmi	.+46     	; 0x2e68 <__addsf3x+0x9c>
    2e3a:	91 50       	subi	r25, 0x01	; 1
    2e3c:	a1 f0       	breq	.+40     	; 0x2e66 <__addsf3x+0x9a>
    2e3e:	ff 0f       	add	r31, r31
    2e40:	bb 1f       	adc	r27, r27
    2e42:	66 1f       	adc	r22, r22
    2e44:	77 1f       	adc	r23, r23
    2e46:	88 1f       	adc	r24, r24
    2e48:	c2 f7       	brpl	.-16     	; 0x2e3a <__addsf3x+0x6e>
    2e4a:	0e c0       	rjmp	.+28     	; 0x2e68 <__addsf3x+0x9c>
    2e4c:	ba 0f       	add	r27, r26
    2e4e:	62 1f       	adc	r22, r18
    2e50:	73 1f       	adc	r23, r19
    2e52:	84 1f       	adc	r24, r20
    2e54:	48 f4       	brcc	.+18     	; 0x2e68 <__addsf3x+0x9c>
    2e56:	87 95       	ror	r24
    2e58:	77 95       	ror	r23
    2e5a:	67 95       	ror	r22
    2e5c:	b7 95       	ror	r27
    2e5e:	f7 95       	ror	r31
    2e60:	9e 3f       	cpi	r25, 0xFE	; 254
    2e62:	08 f0       	brcs	.+2      	; 0x2e66 <__addsf3x+0x9a>
    2e64:	b0 cf       	rjmp	.-160    	; 0x2dc6 <__addsf3+0x28>
    2e66:	93 95       	inc	r25
    2e68:	88 0f       	add	r24, r24
    2e6a:	08 f0       	brcs	.+2      	; 0x2e6e <__addsf3x+0xa2>
    2e6c:	99 27       	eor	r25, r25
    2e6e:	ee 0f       	add	r30, r30
    2e70:	97 95       	ror	r25
    2e72:	87 95       	ror	r24
    2e74:	08 95       	ret
    2e76:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__fp_pscA>
    2e7a:	60 f0       	brcs	.+24     	; 0x2e94 <__addsf3x+0xc8>
    2e7c:	80 e8       	ldi	r24, 0x80	; 128
    2e7e:	91 e0       	ldi	r25, 0x01	; 1
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <__addsf3x+0xb8>
    2e82:	9e ef       	ldi	r25, 0xFE	; 254
    2e84:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fp_pscB>
    2e88:	28 f0       	brcs	.+10     	; 0x2e94 <__addsf3x+0xc8>
    2e8a:	40 e8       	ldi	r20, 0x80	; 128
    2e8c:	51 e0       	ldi	r21, 0x01	; 1
    2e8e:	71 f4       	brne	.+28     	; 0x2eac <atan2+0x10>
    2e90:	5e ef       	ldi	r21, 0xFE	; 254
    2e92:	0c c0       	rjmp	.+24     	; 0x2eac <atan2+0x10>
    2e94:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_nan>
    2e98:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <__fp_zero>

00002e9c <atan2>:
    2e9c:	e9 2f       	mov	r30, r25
    2e9e:	e0 78       	andi	r30, 0x80	; 128
    2ea0:	0e 94 4e 19 	call	0x329c	; 0x329c <__fp_split3>
    2ea4:	40 f3       	brcs	.-48     	; 0x2e76 <__addsf3x+0xaa>
    2ea6:	09 2e       	mov	r0, r25
    2ea8:	05 2a       	or	r0, r21
    2eaa:	b1 f3       	breq	.-20     	; 0x2e98 <__addsf3x+0xcc>
    2eac:	26 17       	cp	r18, r22
    2eae:	37 07       	cpc	r19, r23
    2eb0:	48 07       	cpc	r20, r24
    2eb2:	59 07       	cpc	r21, r25
    2eb4:	38 f0       	brcs	.+14     	; 0x2ec4 <atan2+0x28>
    2eb6:	0e 2e       	mov	r0, r30
    2eb8:	07 f8       	bld	r0, 7
    2eba:	e0 25       	eor	r30, r0
    2ebc:	69 f0       	breq	.+26     	; 0x2ed8 <atan2+0x3c>
    2ebe:	e0 25       	eor	r30, r0
    2ec0:	e0 64       	ori	r30, 0x40	; 64
    2ec2:	0a c0       	rjmp	.+20     	; 0x2ed8 <atan2+0x3c>
    2ec4:	ef 63       	ori	r30, 0x3F	; 63
    2ec6:	07 f8       	bld	r0, 7
    2ec8:	00 94       	com	r0
    2eca:	07 fa       	bst	r0, 7
    2ecc:	db 01       	movw	r26, r22
    2ece:	b9 01       	movw	r22, r18
    2ed0:	9d 01       	movw	r18, r26
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	ca 01       	movw	r24, r20
    2ed6:	ad 01       	movw	r20, r26
    2ed8:	ef 93       	push	r30
    2eda:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <__divsf3_pse>
    2ede:	0e 94 29 19 	call	0x3252	; 0x3252 <__fp_round>
    2ee2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <atan>
    2ee6:	5f 91       	pop	r21
    2ee8:	55 23       	and	r21, r21
    2eea:	39 f0       	breq	.+14     	; 0x2efa <atan2+0x5e>
    2eec:	2b ed       	ldi	r18, 0xDB	; 219
    2eee:	3f e0       	ldi	r19, 0x0F	; 15
    2ef0:	49 e4       	ldi	r20, 0x49	; 73
    2ef2:	50 fd       	sbrc	r21, 0
    2ef4:	49 ec       	ldi	r20, 0xC9	; 201
    2ef6:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__addsf3>
    2efa:	08 95       	ret

00002efc <atan>:
    2efc:	df 93       	push	r29
    2efe:	dd 27       	eor	r29, r29
    2f00:	b9 2f       	mov	r27, r25
    2f02:	bf 77       	andi	r27, 0x7F	; 127
    2f04:	40 e8       	ldi	r20, 0x80	; 128
    2f06:	5f e3       	ldi	r21, 0x3F	; 63
    2f08:	16 16       	cp	r1, r22
    2f0a:	17 06       	cpc	r1, r23
    2f0c:	48 07       	cpc	r20, r24
    2f0e:	5b 07       	cpc	r21, r27
    2f10:	18 f4       	brcc	.+6      	; 0x2f18 <atan+0x1c>
    2f12:	d9 2f       	mov	r29, r25
    2f14:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <inverse>
    2f18:	9f 93       	push	r25
    2f1a:	8f 93       	push	r24
    2f1c:	7f 93       	push	r23
    2f1e:	6f 93       	push	r22
    2f20:	0e 94 3f 1a 	call	0x347e	; 0x347e <square>
    2f24:	e4 ed       	ldi	r30, 0xD4	; 212
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	0e 94 c9 18 	call	0x3192	; 0x3192 <__fp_powser>
    2f2c:	0e 94 29 19 	call	0x3252	; 0x3252 <__fp_round>
    2f30:	2f 91       	pop	r18
    2f32:	3f 91       	pop	r19
    2f34:	4f 91       	pop	r20
    2f36:	5f 91       	pop	r21
    2f38:	0e 94 97 19 	call	0x332e	; 0x332e <__mulsf3x>
    2f3c:	dd 23       	and	r29, r29
    2f3e:	51 f0       	breq	.+20     	; 0x2f54 <atan+0x58>
    2f40:	90 58       	subi	r25, 0x80	; 128
    2f42:	a2 ea       	ldi	r26, 0xA2	; 162
    2f44:	2a ed       	ldi	r18, 0xDA	; 218
    2f46:	3f e0       	ldi	r19, 0x0F	; 15
    2f48:	49 ec       	ldi	r20, 0xC9	; 201
    2f4a:	5f e3       	ldi	r21, 0x3F	; 63
    2f4c:	d0 78       	andi	r29, 0x80	; 128
    2f4e:	5d 27       	eor	r21, r29
    2f50:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <__addsf3x>
    2f54:	df 91       	pop	r29
    2f56:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__fp_round>

00002f5a <__cmpsf2>:
    2f5a:	0e 94 9c 18 	call	0x3138	; 0x3138 <__fp_cmp>
    2f5e:	08 f4       	brcc	.+2      	; 0x2f62 <__cmpsf2+0x8>
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	08 95       	ret

00002f64 <cos>:
    2f64:	0e 94 00 19 	call	0x3200	; 0x3200 <__fp_rempio2>
    2f68:	e3 95       	inc	r30
    2f6a:	0c 94 3a 19 	jmp	0x3274	; 0x3274 <__fp_sinus>

00002f6e <__divsf3>:
    2f6e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3x>
    2f72:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__fp_round>
    2f76:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fp_pscB>
    2f7a:	58 f0       	brcs	.+22     	; 0x2f92 <__divsf3+0x24>
    2f7c:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__fp_pscA>
    2f80:	40 f0       	brcs	.+16     	; 0x2f92 <__divsf3+0x24>
    2f82:	29 f4       	brne	.+10     	; 0x2f8e <__divsf3+0x20>
    2f84:	5f 3f       	cpi	r21, 0xFF	; 255
    2f86:	29 f0       	breq	.+10     	; 0x2f92 <__divsf3+0x24>
    2f88:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__fp_inf>
    2f8c:	51 11       	cpse	r21, r1
    2f8e:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <__fp_szero>
    2f92:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_nan>

00002f96 <__divsf3x>:
    2f96:	0e 94 4e 19 	call	0x329c	; 0x329c <__fp_split3>
    2f9a:	68 f3       	brcs	.-38     	; 0x2f76 <__divsf3+0x8>

00002f9c <__divsf3_pse>:
    2f9c:	99 23       	and	r25, r25
    2f9e:	b1 f3       	breq	.-20     	; 0x2f8c <__divsf3+0x1e>
    2fa0:	55 23       	and	r21, r21
    2fa2:	91 f3       	breq	.-28     	; 0x2f88 <__divsf3+0x1a>
    2fa4:	95 1b       	sub	r25, r21
    2fa6:	55 0b       	sbc	r21, r21
    2fa8:	bb 27       	eor	r27, r27
    2faa:	aa 27       	eor	r26, r26
    2fac:	62 17       	cp	r22, r18
    2fae:	73 07       	cpc	r23, r19
    2fb0:	84 07       	cpc	r24, r20
    2fb2:	38 f0       	brcs	.+14     	; 0x2fc2 <__divsf3_pse+0x26>
    2fb4:	9f 5f       	subi	r25, 0xFF	; 255
    2fb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fb8:	22 0f       	add	r18, r18
    2fba:	33 1f       	adc	r19, r19
    2fbc:	44 1f       	adc	r20, r20
    2fbe:	aa 1f       	adc	r26, r26
    2fc0:	a9 f3       	breq	.-22     	; 0x2fac <__divsf3_pse+0x10>
    2fc2:	35 d0       	rcall	.+106    	; 0x302e <__divsf3_pse+0x92>
    2fc4:	0e 2e       	mov	r0, r30
    2fc6:	3a f0       	brmi	.+14     	; 0x2fd6 <__divsf3_pse+0x3a>
    2fc8:	e0 e8       	ldi	r30, 0x80	; 128
    2fca:	32 d0       	rcall	.+100    	; 0x3030 <__divsf3_pse+0x94>
    2fcc:	91 50       	subi	r25, 0x01	; 1
    2fce:	50 40       	sbci	r21, 0x00	; 0
    2fd0:	e6 95       	lsr	r30
    2fd2:	00 1c       	adc	r0, r0
    2fd4:	ca f7       	brpl	.-14     	; 0x2fc8 <__divsf3_pse+0x2c>
    2fd6:	2b d0       	rcall	.+86     	; 0x302e <__divsf3_pse+0x92>
    2fd8:	fe 2f       	mov	r31, r30
    2fda:	29 d0       	rcall	.+82     	; 0x302e <__divsf3_pse+0x92>
    2fdc:	66 0f       	add	r22, r22
    2fde:	77 1f       	adc	r23, r23
    2fe0:	88 1f       	adc	r24, r24
    2fe2:	bb 1f       	adc	r27, r27
    2fe4:	26 17       	cp	r18, r22
    2fe6:	37 07       	cpc	r19, r23
    2fe8:	48 07       	cpc	r20, r24
    2fea:	ab 07       	cpc	r26, r27
    2fec:	b0 e8       	ldi	r27, 0x80	; 128
    2fee:	09 f0       	breq	.+2      	; 0x2ff2 <__divsf3_pse+0x56>
    2ff0:	bb 0b       	sbc	r27, r27
    2ff2:	80 2d       	mov	r24, r0
    2ff4:	bf 01       	movw	r22, r30
    2ff6:	ff 27       	eor	r31, r31
    2ff8:	93 58       	subi	r25, 0x83	; 131
    2ffa:	5f 4f       	sbci	r21, 0xFF	; 255
    2ffc:	3a f0       	brmi	.+14     	; 0x300c <__divsf3_pse+0x70>
    2ffe:	9e 3f       	cpi	r25, 0xFE	; 254
    3000:	51 05       	cpc	r21, r1
    3002:	78 f0       	brcs	.+30     	; 0x3022 <__divsf3_pse+0x86>
    3004:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__fp_inf>
    3008:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <__fp_szero>
    300c:	5f 3f       	cpi	r21, 0xFF	; 255
    300e:	e4 f3       	brlt	.-8      	; 0x3008 <__divsf3_pse+0x6c>
    3010:	98 3e       	cpi	r25, 0xE8	; 232
    3012:	d4 f3       	brlt	.-12     	; 0x3008 <__divsf3_pse+0x6c>
    3014:	86 95       	lsr	r24
    3016:	77 95       	ror	r23
    3018:	67 95       	ror	r22
    301a:	b7 95       	ror	r27
    301c:	f7 95       	ror	r31
    301e:	9f 5f       	subi	r25, 0xFF	; 255
    3020:	c9 f7       	brne	.-14     	; 0x3014 <__divsf3_pse+0x78>
    3022:	88 0f       	add	r24, r24
    3024:	91 1d       	adc	r25, r1
    3026:	96 95       	lsr	r25
    3028:	87 95       	ror	r24
    302a:	97 f9       	bld	r25, 7
    302c:	08 95       	ret
    302e:	e1 e0       	ldi	r30, 0x01	; 1
    3030:	66 0f       	add	r22, r22
    3032:	77 1f       	adc	r23, r23
    3034:	88 1f       	adc	r24, r24
    3036:	bb 1f       	adc	r27, r27
    3038:	62 17       	cp	r22, r18
    303a:	73 07       	cpc	r23, r19
    303c:	84 07       	cpc	r24, r20
    303e:	ba 07       	cpc	r27, r26
    3040:	20 f0       	brcs	.+8      	; 0x304a <__divsf3_pse+0xae>
    3042:	62 1b       	sub	r22, r18
    3044:	73 0b       	sbc	r23, r19
    3046:	84 0b       	sbc	r24, r20
    3048:	ba 0b       	sbc	r27, r26
    304a:	ee 1f       	adc	r30, r30
    304c:	88 f7       	brcc	.-30     	; 0x3030 <__divsf3_pse+0x94>
    304e:	e0 95       	com	r30
    3050:	08 95       	ret

00003052 <__fixsfsi>:
    3052:	0e 94 30 18 	call	0x3060	; 0x3060 <__fixunssfsi>
    3056:	68 94       	set
    3058:	b1 11       	cpse	r27, r1
    305a:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <__fp_szero>
    305e:	08 95       	ret

00003060 <__fixunssfsi>:
    3060:	0e 94 56 19 	call	0x32ac	; 0x32ac <__fp_splitA>
    3064:	88 f0       	brcs	.+34     	; 0x3088 <__fixunssfsi+0x28>
    3066:	9f 57       	subi	r25, 0x7F	; 127
    3068:	98 f0       	brcs	.+38     	; 0x3090 <__fixunssfsi+0x30>
    306a:	b9 2f       	mov	r27, r25
    306c:	99 27       	eor	r25, r25
    306e:	b7 51       	subi	r27, 0x17	; 23
    3070:	b0 f0       	brcs	.+44     	; 0x309e <__fixunssfsi+0x3e>
    3072:	e1 f0       	breq	.+56     	; 0x30ac <__fixunssfsi+0x4c>
    3074:	66 0f       	add	r22, r22
    3076:	77 1f       	adc	r23, r23
    3078:	88 1f       	adc	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	1a f0       	brmi	.+6      	; 0x3084 <__fixunssfsi+0x24>
    307e:	ba 95       	dec	r27
    3080:	c9 f7       	brne	.-14     	; 0x3074 <__fixunssfsi+0x14>
    3082:	14 c0       	rjmp	.+40     	; 0x30ac <__fixunssfsi+0x4c>
    3084:	b1 30       	cpi	r27, 0x01	; 1
    3086:	91 f0       	breq	.+36     	; 0x30ac <__fixunssfsi+0x4c>
    3088:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__fp_zero>
    308c:	b1 e0       	ldi	r27, 0x01	; 1
    308e:	08 95       	ret
    3090:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <__fp_zero>
    3094:	67 2f       	mov	r22, r23
    3096:	78 2f       	mov	r23, r24
    3098:	88 27       	eor	r24, r24
    309a:	b8 5f       	subi	r27, 0xF8	; 248
    309c:	39 f0       	breq	.+14     	; 0x30ac <__fixunssfsi+0x4c>
    309e:	b9 3f       	cpi	r27, 0xF9	; 249
    30a0:	cc f3       	brlt	.-14     	; 0x3094 <__fixunssfsi+0x34>
    30a2:	86 95       	lsr	r24
    30a4:	77 95       	ror	r23
    30a6:	67 95       	ror	r22
    30a8:	b3 95       	inc	r27
    30aa:	d9 f7       	brne	.-10     	; 0x30a2 <__fixunssfsi+0x42>
    30ac:	3e f4       	brtc	.+14     	; 0x30bc <__fixunssfsi+0x5c>
    30ae:	90 95       	com	r25
    30b0:	80 95       	com	r24
    30b2:	70 95       	com	r23
    30b4:	61 95       	neg	r22
    30b6:	7f 4f       	sbci	r23, 0xFF	; 255
    30b8:	8f 4f       	sbci	r24, 0xFF	; 255
    30ba:	9f 4f       	sbci	r25, 0xFF	; 255
    30bc:	08 95       	ret

000030be <__floatunsisf>:
    30be:	e8 94       	clt
    30c0:	09 c0       	rjmp	.+18     	; 0x30d4 <__floatsisf+0x12>

000030c2 <__floatsisf>:
    30c2:	97 fb       	bst	r25, 7
    30c4:	3e f4       	brtc	.+14     	; 0x30d4 <__floatsisf+0x12>
    30c6:	90 95       	com	r25
    30c8:	80 95       	com	r24
    30ca:	70 95       	com	r23
    30cc:	61 95       	neg	r22
    30ce:	7f 4f       	sbci	r23, 0xFF	; 255
    30d0:	8f 4f       	sbci	r24, 0xFF	; 255
    30d2:	9f 4f       	sbci	r25, 0xFF	; 255
    30d4:	99 23       	and	r25, r25
    30d6:	a9 f0       	breq	.+42     	; 0x3102 <__floatsisf+0x40>
    30d8:	f9 2f       	mov	r31, r25
    30da:	96 e9       	ldi	r25, 0x96	; 150
    30dc:	bb 27       	eor	r27, r27
    30de:	93 95       	inc	r25
    30e0:	f6 95       	lsr	r31
    30e2:	87 95       	ror	r24
    30e4:	77 95       	ror	r23
    30e6:	67 95       	ror	r22
    30e8:	b7 95       	ror	r27
    30ea:	f1 11       	cpse	r31, r1
    30ec:	f8 cf       	rjmp	.-16     	; 0x30de <__floatsisf+0x1c>
    30ee:	fa f4       	brpl	.+62     	; 0x312e <__floatsisf+0x6c>
    30f0:	bb 0f       	add	r27, r27
    30f2:	11 f4       	brne	.+4      	; 0x30f8 <__floatsisf+0x36>
    30f4:	60 ff       	sbrs	r22, 0
    30f6:	1b c0       	rjmp	.+54     	; 0x312e <__floatsisf+0x6c>
    30f8:	6f 5f       	subi	r22, 0xFF	; 255
    30fa:	7f 4f       	sbci	r23, 0xFF	; 255
    30fc:	8f 4f       	sbci	r24, 0xFF	; 255
    30fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3100:	16 c0       	rjmp	.+44     	; 0x312e <__floatsisf+0x6c>
    3102:	88 23       	and	r24, r24
    3104:	11 f0       	breq	.+4      	; 0x310a <__floatsisf+0x48>
    3106:	96 e9       	ldi	r25, 0x96	; 150
    3108:	11 c0       	rjmp	.+34     	; 0x312c <__floatsisf+0x6a>
    310a:	77 23       	and	r23, r23
    310c:	21 f0       	breq	.+8      	; 0x3116 <__floatsisf+0x54>
    310e:	9e e8       	ldi	r25, 0x8E	; 142
    3110:	87 2f       	mov	r24, r23
    3112:	76 2f       	mov	r23, r22
    3114:	05 c0       	rjmp	.+10     	; 0x3120 <__floatsisf+0x5e>
    3116:	66 23       	and	r22, r22
    3118:	71 f0       	breq	.+28     	; 0x3136 <__floatsisf+0x74>
    311a:	96 e8       	ldi	r25, 0x86	; 134
    311c:	86 2f       	mov	r24, r22
    311e:	70 e0       	ldi	r23, 0x00	; 0
    3120:	60 e0       	ldi	r22, 0x00	; 0
    3122:	2a f0       	brmi	.+10     	; 0x312e <__floatsisf+0x6c>
    3124:	9a 95       	dec	r25
    3126:	66 0f       	add	r22, r22
    3128:	77 1f       	adc	r23, r23
    312a:	88 1f       	adc	r24, r24
    312c:	da f7       	brpl	.-10     	; 0x3124 <__floatsisf+0x62>
    312e:	88 0f       	add	r24, r24
    3130:	96 95       	lsr	r25
    3132:	87 95       	ror	r24
    3134:	97 f9       	bld	r25, 7
    3136:	08 95       	ret

00003138 <__fp_cmp>:
    3138:	99 0f       	add	r25, r25
    313a:	00 08       	sbc	r0, r0
    313c:	55 0f       	add	r21, r21
    313e:	aa 0b       	sbc	r26, r26
    3140:	e0 e8       	ldi	r30, 0x80	; 128
    3142:	fe ef       	ldi	r31, 0xFE	; 254
    3144:	16 16       	cp	r1, r22
    3146:	17 06       	cpc	r1, r23
    3148:	e8 07       	cpc	r30, r24
    314a:	f9 07       	cpc	r31, r25
    314c:	c0 f0       	brcs	.+48     	; 0x317e <__fp_cmp+0x46>
    314e:	12 16       	cp	r1, r18
    3150:	13 06       	cpc	r1, r19
    3152:	e4 07       	cpc	r30, r20
    3154:	f5 07       	cpc	r31, r21
    3156:	98 f0       	brcs	.+38     	; 0x317e <__fp_cmp+0x46>
    3158:	62 1b       	sub	r22, r18
    315a:	73 0b       	sbc	r23, r19
    315c:	84 0b       	sbc	r24, r20
    315e:	95 0b       	sbc	r25, r21
    3160:	39 f4       	brne	.+14     	; 0x3170 <__fp_cmp+0x38>
    3162:	0a 26       	eor	r0, r26
    3164:	61 f0       	breq	.+24     	; 0x317e <__fp_cmp+0x46>
    3166:	23 2b       	or	r18, r19
    3168:	24 2b       	or	r18, r20
    316a:	25 2b       	or	r18, r21
    316c:	21 f4       	brne	.+8      	; 0x3176 <__fp_cmp+0x3e>
    316e:	08 95       	ret
    3170:	0a 26       	eor	r0, r26
    3172:	09 f4       	brne	.+2      	; 0x3176 <__fp_cmp+0x3e>
    3174:	a1 40       	sbci	r26, 0x01	; 1
    3176:	a6 95       	lsr	r26
    3178:	8f ef       	ldi	r24, 0xFF	; 255
    317a:	81 1d       	adc	r24, r1
    317c:	81 1d       	adc	r24, r1
    317e:	08 95       	ret

00003180 <__fp_inf>:
    3180:	97 f9       	bld	r25, 7
    3182:	9f 67       	ori	r25, 0x7F	; 127
    3184:	80 e8       	ldi	r24, 0x80	; 128
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	60 e0       	ldi	r22, 0x00	; 0
    318a:	08 95       	ret

0000318c <__fp_nan>:
    318c:	9f ef       	ldi	r25, 0xFF	; 255
    318e:	80 ec       	ldi	r24, 0xC0	; 192
    3190:	08 95       	ret

00003192 <__fp_powser>:
    3192:	df 93       	push	r29
    3194:	cf 93       	push	r28
    3196:	1f 93       	push	r17
    3198:	0f 93       	push	r16
    319a:	ff 92       	push	r15
    319c:	ef 92       	push	r14
    319e:	df 92       	push	r13
    31a0:	7b 01       	movw	r14, r22
    31a2:	8c 01       	movw	r16, r24
    31a4:	68 94       	set
    31a6:	06 c0       	rjmp	.+12     	; 0x31b4 <__fp_powser+0x22>
    31a8:	da 2e       	mov	r13, r26
    31aa:	ef 01       	movw	r28, r30
    31ac:	0e 94 97 19 	call	0x332e	; 0x332e <__mulsf3x>
    31b0:	fe 01       	movw	r30, r28
    31b2:	e8 94       	clt
    31b4:	a5 91       	lpm	r26, Z+
    31b6:	25 91       	lpm	r18, Z+
    31b8:	35 91       	lpm	r19, Z+
    31ba:	45 91       	lpm	r20, Z+
    31bc:	55 91       	lpm	r21, Z+
    31be:	a6 f3       	brts	.-24     	; 0x31a8 <__fp_powser+0x16>
    31c0:	ef 01       	movw	r28, r30
    31c2:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <__addsf3x>
    31c6:	fe 01       	movw	r30, r28
    31c8:	97 01       	movw	r18, r14
    31ca:	a8 01       	movw	r20, r16
    31cc:	da 94       	dec	r13
    31ce:	69 f7       	brne	.-38     	; 0x31aa <__fp_powser+0x18>
    31d0:	df 90       	pop	r13
    31d2:	ef 90       	pop	r14
    31d4:	ff 90       	pop	r15
    31d6:	0f 91       	pop	r16
    31d8:	1f 91       	pop	r17
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	08 95       	ret

000031e0 <__fp_pscA>:
    31e0:	00 24       	eor	r0, r0
    31e2:	0a 94       	dec	r0
    31e4:	16 16       	cp	r1, r22
    31e6:	17 06       	cpc	r1, r23
    31e8:	18 06       	cpc	r1, r24
    31ea:	09 06       	cpc	r0, r25
    31ec:	08 95       	ret

000031ee <__fp_pscB>:
    31ee:	00 24       	eor	r0, r0
    31f0:	0a 94       	dec	r0
    31f2:	12 16       	cp	r1, r18
    31f4:	13 06       	cpc	r1, r19
    31f6:	14 06       	cpc	r1, r20
    31f8:	05 06       	cpc	r0, r21
    31fa:	08 95       	ret
    31fc:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_nan>

00003200 <__fp_rempio2>:
    3200:	0e 94 56 19 	call	0x32ac	; 0x32ac <__fp_splitA>
    3204:	d8 f3       	brcs	.-10     	; 0x31fc <__fp_pscB+0xe>
    3206:	e8 94       	clt
    3208:	e0 e0       	ldi	r30, 0x00	; 0
    320a:	bb 27       	eor	r27, r27
    320c:	9f 57       	subi	r25, 0x7F	; 127
    320e:	f0 f0       	brcs	.+60     	; 0x324c <__fp_rempio2+0x4c>
    3210:	2a ed       	ldi	r18, 0xDA	; 218
    3212:	3f e0       	ldi	r19, 0x0F	; 15
    3214:	49 ec       	ldi	r20, 0xC9	; 201
    3216:	06 c0       	rjmp	.+12     	; 0x3224 <__fp_rempio2+0x24>
    3218:	ee 0f       	add	r30, r30
    321a:	bb 0f       	add	r27, r27
    321c:	66 1f       	adc	r22, r22
    321e:	77 1f       	adc	r23, r23
    3220:	88 1f       	adc	r24, r24
    3222:	28 f0       	brcs	.+10     	; 0x322e <__fp_rempio2+0x2e>
    3224:	b2 3a       	cpi	r27, 0xA2	; 162
    3226:	62 07       	cpc	r22, r18
    3228:	73 07       	cpc	r23, r19
    322a:	84 07       	cpc	r24, r20
    322c:	28 f0       	brcs	.+10     	; 0x3238 <__fp_rempio2+0x38>
    322e:	b2 5a       	subi	r27, 0xA2	; 162
    3230:	62 0b       	sbc	r22, r18
    3232:	73 0b       	sbc	r23, r19
    3234:	84 0b       	sbc	r24, r20
    3236:	e3 95       	inc	r30
    3238:	9a 95       	dec	r25
    323a:	72 f7       	brpl	.-36     	; 0x3218 <__fp_rempio2+0x18>
    323c:	80 38       	cpi	r24, 0x80	; 128
    323e:	30 f4       	brcc	.+12     	; 0x324c <__fp_rempio2+0x4c>
    3240:	9a 95       	dec	r25
    3242:	bb 0f       	add	r27, r27
    3244:	66 1f       	adc	r22, r22
    3246:	77 1f       	adc	r23, r23
    3248:	88 1f       	adc	r24, r24
    324a:	d2 f7       	brpl	.-12     	; 0x3240 <__fp_rempio2+0x40>
    324c:	90 48       	sbci	r25, 0x80	; 128
    324e:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__fp_mpack_finite>

00003252 <__fp_round>:
    3252:	09 2e       	mov	r0, r25
    3254:	03 94       	inc	r0
    3256:	00 0c       	add	r0, r0
    3258:	11 f4       	brne	.+4      	; 0x325e <__fp_round+0xc>
    325a:	88 23       	and	r24, r24
    325c:	52 f0       	brmi	.+20     	; 0x3272 <__fp_round+0x20>
    325e:	bb 0f       	add	r27, r27
    3260:	40 f4       	brcc	.+16     	; 0x3272 <__fp_round+0x20>
    3262:	bf 2b       	or	r27, r31
    3264:	11 f4       	brne	.+4      	; 0x326a <__fp_round+0x18>
    3266:	60 ff       	sbrs	r22, 0
    3268:	04 c0       	rjmp	.+8      	; 0x3272 <__fp_round+0x20>
    326a:	6f 5f       	subi	r22, 0xFF	; 255
    326c:	7f 4f       	sbci	r23, 0xFF	; 255
    326e:	8f 4f       	sbci	r24, 0xFF	; 255
    3270:	9f 4f       	sbci	r25, 0xFF	; 255
    3272:	08 95       	ret

00003274 <__fp_sinus>:
    3274:	ef 93       	push	r30
    3276:	e0 ff       	sbrs	r30, 0
    3278:	07 c0       	rjmp	.+14     	; 0x3288 <__fp_sinus+0x14>
    327a:	a2 ea       	ldi	r26, 0xA2	; 162
    327c:	2a ed       	ldi	r18, 0xDA	; 218
    327e:	3f e0       	ldi	r19, 0x0F	; 15
    3280:	49 ec       	ldi	r20, 0xC9	; 201
    3282:	5f eb       	ldi	r21, 0xBF	; 191
    3284:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <__addsf3x>
    3288:	0e 94 29 19 	call	0x3252	; 0x3252 <__fp_round>
    328c:	0f 90       	pop	r0
    328e:	03 94       	inc	r0
    3290:	01 fc       	sbrc	r0, 1
    3292:	90 58       	subi	r25, 0x80	; 128
    3294:	e1 e0       	ldi	r30, 0x01	; 1
    3296:	f1 e0       	ldi	r31, 0x01	; 1
    3298:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__fp_powsodd>

0000329c <__fp_split3>:
    329c:	57 fd       	sbrc	r21, 7
    329e:	90 58       	subi	r25, 0x80	; 128
    32a0:	44 0f       	add	r20, r20
    32a2:	55 1f       	adc	r21, r21
    32a4:	59 f0       	breq	.+22     	; 0x32bc <__fp_splitA+0x10>
    32a6:	5f 3f       	cpi	r21, 0xFF	; 255
    32a8:	71 f0       	breq	.+28     	; 0x32c6 <__fp_splitA+0x1a>
    32aa:	47 95       	ror	r20

000032ac <__fp_splitA>:
    32ac:	88 0f       	add	r24, r24
    32ae:	97 fb       	bst	r25, 7
    32b0:	99 1f       	adc	r25, r25
    32b2:	61 f0       	breq	.+24     	; 0x32cc <__fp_splitA+0x20>
    32b4:	9f 3f       	cpi	r25, 0xFF	; 255
    32b6:	79 f0       	breq	.+30     	; 0x32d6 <__fp_splitA+0x2a>
    32b8:	87 95       	ror	r24
    32ba:	08 95       	ret
    32bc:	12 16       	cp	r1, r18
    32be:	13 06       	cpc	r1, r19
    32c0:	14 06       	cpc	r1, r20
    32c2:	55 1f       	adc	r21, r21
    32c4:	f2 cf       	rjmp	.-28     	; 0x32aa <__fp_split3+0xe>
    32c6:	46 95       	lsr	r20
    32c8:	f1 df       	rcall	.-30     	; 0x32ac <__fp_splitA>
    32ca:	08 c0       	rjmp	.+16     	; 0x32dc <__fp_splitA+0x30>
    32cc:	16 16       	cp	r1, r22
    32ce:	17 06       	cpc	r1, r23
    32d0:	18 06       	cpc	r1, r24
    32d2:	99 1f       	adc	r25, r25
    32d4:	f1 cf       	rjmp	.-30     	; 0x32b8 <__fp_splitA+0xc>
    32d6:	86 95       	lsr	r24
    32d8:	71 05       	cpc	r23, r1
    32da:	61 05       	cpc	r22, r1
    32dc:	08 94       	sec
    32de:	08 95       	ret

000032e0 <__fp_zero>:
    32e0:	e8 94       	clt

000032e2 <__fp_szero>:
    32e2:	bb 27       	eor	r27, r27
    32e4:	66 27       	eor	r22, r22
    32e6:	77 27       	eor	r23, r23
    32e8:	cb 01       	movw	r24, r22
    32ea:	97 f9       	bld	r25, 7
    32ec:	08 95       	ret

000032ee <__gesf2>:
    32ee:	0e 94 9c 18 	call	0x3138	; 0x3138 <__fp_cmp>
    32f2:	08 f4       	brcc	.+2      	; 0x32f6 <__gesf2+0x8>
    32f4:	8f ef       	ldi	r24, 0xFF	; 255
    32f6:	08 95       	ret

000032f8 <inverse>:
    32f8:	9b 01       	movw	r18, r22
    32fa:	ac 01       	movw	r20, r24
    32fc:	60 e0       	ldi	r22, 0x00	; 0
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	80 e8       	ldi	r24, 0x80	; 128
    3302:	9f e3       	ldi	r25, 0x3F	; 63
    3304:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__divsf3>

00003308 <__mulsf3>:
    3308:	0e 94 97 19 	call	0x332e	; 0x332e <__mulsf3x>
    330c:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__fp_round>
    3310:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__fp_pscA>
    3314:	38 f0       	brcs	.+14     	; 0x3324 <__mulsf3+0x1c>
    3316:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fp_pscB>
    331a:	20 f0       	brcs	.+8      	; 0x3324 <__mulsf3+0x1c>
    331c:	95 23       	and	r25, r21
    331e:	11 f0       	breq	.+4      	; 0x3324 <__mulsf3+0x1c>
    3320:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__fp_inf>
    3324:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_nan>
    3328:	11 24       	eor	r1, r1
    332a:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <__fp_szero>

0000332e <__mulsf3x>:
    332e:	0e 94 4e 19 	call	0x329c	; 0x329c <__fp_split3>
    3332:	70 f3       	brcs	.-36     	; 0x3310 <__mulsf3+0x8>

00003334 <__mulsf3_pse>:
    3334:	95 9f       	mul	r25, r21
    3336:	c1 f3       	breq	.-16     	; 0x3328 <__mulsf3+0x20>
    3338:	95 0f       	add	r25, r21
    333a:	50 e0       	ldi	r21, 0x00	; 0
    333c:	55 1f       	adc	r21, r21
    333e:	62 9f       	mul	r22, r18
    3340:	f0 01       	movw	r30, r0
    3342:	72 9f       	mul	r23, r18
    3344:	bb 27       	eor	r27, r27
    3346:	f0 0d       	add	r31, r0
    3348:	b1 1d       	adc	r27, r1
    334a:	63 9f       	mul	r22, r19
    334c:	aa 27       	eor	r26, r26
    334e:	f0 0d       	add	r31, r0
    3350:	b1 1d       	adc	r27, r1
    3352:	aa 1f       	adc	r26, r26
    3354:	64 9f       	mul	r22, r20
    3356:	66 27       	eor	r22, r22
    3358:	b0 0d       	add	r27, r0
    335a:	a1 1d       	adc	r26, r1
    335c:	66 1f       	adc	r22, r22
    335e:	82 9f       	mul	r24, r18
    3360:	22 27       	eor	r18, r18
    3362:	b0 0d       	add	r27, r0
    3364:	a1 1d       	adc	r26, r1
    3366:	62 1f       	adc	r22, r18
    3368:	73 9f       	mul	r23, r19
    336a:	b0 0d       	add	r27, r0
    336c:	a1 1d       	adc	r26, r1
    336e:	62 1f       	adc	r22, r18
    3370:	83 9f       	mul	r24, r19
    3372:	a0 0d       	add	r26, r0
    3374:	61 1d       	adc	r22, r1
    3376:	22 1f       	adc	r18, r18
    3378:	74 9f       	mul	r23, r20
    337a:	33 27       	eor	r19, r19
    337c:	a0 0d       	add	r26, r0
    337e:	61 1d       	adc	r22, r1
    3380:	23 1f       	adc	r18, r19
    3382:	84 9f       	mul	r24, r20
    3384:	60 0d       	add	r22, r0
    3386:	21 1d       	adc	r18, r1
    3388:	82 2f       	mov	r24, r18
    338a:	76 2f       	mov	r23, r22
    338c:	6a 2f       	mov	r22, r26
    338e:	11 24       	eor	r1, r1
    3390:	9f 57       	subi	r25, 0x7F	; 127
    3392:	50 40       	sbci	r21, 0x00	; 0
    3394:	9a f0       	brmi	.+38     	; 0x33bc <__mulsf3_pse+0x88>
    3396:	f1 f0       	breq	.+60     	; 0x33d4 <__mulsf3_pse+0xa0>
    3398:	88 23       	and	r24, r24
    339a:	4a f0       	brmi	.+18     	; 0x33ae <__mulsf3_pse+0x7a>
    339c:	ee 0f       	add	r30, r30
    339e:	ff 1f       	adc	r31, r31
    33a0:	bb 1f       	adc	r27, r27
    33a2:	66 1f       	adc	r22, r22
    33a4:	77 1f       	adc	r23, r23
    33a6:	88 1f       	adc	r24, r24
    33a8:	91 50       	subi	r25, 0x01	; 1
    33aa:	50 40       	sbci	r21, 0x00	; 0
    33ac:	a9 f7       	brne	.-22     	; 0x3398 <__mulsf3_pse+0x64>
    33ae:	9e 3f       	cpi	r25, 0xFE	; 254
    33b0:	51 05       	cpc	r21, r1
    33b2:	80 f0       	brcs	.+32     	; 0x33d4 <__mulsf3_pse+0xa0>
    33b4:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__fp_inf>
    33b8:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <__fp_szero>
    33bc:	5f 3f       	cpi	r21, 0xFF	; 255
    33be:	e4 f3       	brlt	.-8      	; 0x33b8 <__mulsf3_pse+0x84>
    33c0:	98 3e       	cpi	r25, 0xE8	; 232
    33c2:	d4 f3       	brlt	.-12     	; 0x33b8 <__mulsf3_pse+0x84>
    33c4:	86 95       	lsr	r24
    33c6:	77 95       	ror	r23
    33c8:	67 95       	ror	r22
    33ca:	b7 95       	ror	r27
    33cc:	f7 95       	ror	r31
    33ce:	e7 95       	ror	r30
    33d0:	9f 5f       	subi	r25, 0xFF	; 255
    33d2:	c1 f7       	brne	.-16     	; 0x33c4 <__mulsf3_pse+0x90>
    33d4:	fe 2b       	or	r31, r30
    33d6:	88 0f       	add	r24, r24
    33d8:	91 1d       	adc	r25, r1
    33da:	96 95       	lsr	r25
    33dc:	87 95       	ror	r24
    33de:	97 f9       	bld	r25, 7
    33e0:	08 95       	ret

000033e2 <sin>:
    33e2:	9f 93       	push	r25
    33e4:	0e 94 00 19 	call	0x3200	; 0x3200 <__fp_rempio2>
    33e8:	0f 90       	pop	r0
    33ea:	07 fc       	sbrc	r0, 7
    33ec:	ee 5f       	subi	r30, 0xFE	; 254
    33ee:	0c 94 3a 19 	jmp	0x3274	; 0x3274 <__fp_sinus>
    33f2:	19 f4       	brne	.+6      	; 0x33fa <sin+0x18>
    33f4:	16 f4       	brtc	.+4      	; 0x33fa <sin+0x18>
    33f6:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_nan>
    33fa:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__fp_mpack>

000033fe <sqrt>:
    33fe:	0e 94 56 19 	call	0x32ac	; 0x32ac <__fp_splitA>
    3402:	b8 f3       	brcs	.-18     	; 0x33f2 <sin+0x10>
    3404:	99 23       	and	r25, r25
    3406:	c9 f3       	breq	.-14     	; 0x33fa <sin+0x18>
    3408:	b6 f3       	brts	.-20     	; 0x33f6 <sin+0x14>
    340a:	9f 57       	subi	r25, 0x7F	; 127
    340c:	55 0b       	sbc	r21, r21
    340e:	87 ff       	sbrs	r24, 7
    3410:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__fp_norm2>
    3414:	00 24       	eor	r0, r0
    3416:	a0 e6       	ldi	r26, 0x60	; 96
    3418:	40 ea       	ldi	r20, 0xA0	; 160
    341a:	90 01       	movw	r18, r0
    341c:	80 58       	subi	r24, 0x80	; 128
    341e:	56 95       	lsr	r21
    3420:	97 95       	ror	r25
    3422:	28 f4       	brcc	.+10     	; 0x342e <sqrt+0x30>
    3424:	80 5c       	subi	r24, 0xC0	; 192
    3426:	66 0f       	add	r22, r22
    3428:	77 1f       	adc	r23, r23
    342a:	88 1f       	adc	r24, r24
    342c:	20 f0       	brcs	.+8      	; 0x3436 <sqrt+0x38>
    342e:	26 17       	cp	r18, r22
    3430:	37 07       	cpc	r19, r23
    3432:	48 07       	cpc	r20, r24
    3434:	30 f4       	brcc	.+12     	; 0x3442 <sqrt+0x44>
    3436:	62 1b       	sub	r22, r18
    3438:	73 0b       	sbc	r23, r19
    343a:	84 0b       	sbc	r24, r20
    343c:	20 29       	or	r18, r0
    343e:	31 29       	or	r19, r1
    3440:	4a 2b       	or	r20, r26
    3442:	a6 95       	lsr	r26
    3444:	17 94       	ror	r1
    3446:	07 94       	ror	r0
    3448:	20 25       	eor	r18, r0
    344a:	31 25       	eor	r19, r1
    344c:	4a 27       	eor	r20, r26
    344e:	58 f7       	brcc	.-42     	; 0x3426 <sqrt+0x28>
    3450:	66 0f       	add	r22, r22
    3452:	77 1f       	adc	r23, r23
    3454:	88 1f       	adc	r24, r24
    3456:	20 f0       	brcs	.+8      	; 0x3460 <sqrt+0x62>
    3458:	26 17       	cp	r18, r22
    345a:	37 07       	cpc	r19, r23
    345c:	48 07       	cpc	r20, r24
    345e:	30 f4       	brcc	.+12     	; 0x346c <sqrt+0x6e>
    3460:	62 0b       	sbc	r22, r18
    3462:	73 0b       	sbc	r23, r19
    3464:	84 0b       	sbc	r24, r20
    3466:	20 0d       	add	r18, r0
    3468:	31 1d       	adc	r19, r1
    346a:	41 1d       	adc	r20, r1
    346c:	a0 95       	com	r26
    346e:	81 f7       	brne	.-32     	; 0x3450 <sqrt+0x52>
    3470:	b9 01       	movw	r22, r18
    3472:	84 2f       	mov	r24, r20
    3474:	91 58       	subi	r25, 0x81	; 129
    3476:	88 0f       	add	r24, r24
    3478:	96 95       	lsr	r25
    347a:	87 95       	ror	r24
    347c:	08 95       	ret

0000347e <square>:
    347e:	9b 01       	movw	r18, r22
    3480:	ac 01       	movw	r20, r24
    3482:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__mulsf3>

00003486 <__fp_mpack>:
    3486:	9f 3f       	cpi	r25, 0xFF	; 255
    3488:	31 f0       	breq	.+12     	; 0x3496 <__fp_mpack_finite+0xc>

0000348a <__fp_mpack_finite>:
    348a:	91 50       	subi	r25, 0x01	; 1
    348c:	20 f4       	brcc	.+8      	; 0x3496 <__fp_mpack_finite+0xc>
    348e:	87 95       	ror	r24
    3490:	77 95       	ror	r23
    3492:	67 95       	ror	r22
    3494:	b7 95       	ror	r27
    3496:	88 0f       	add	r24, r24
    3498:	91 1d       	adc	r25, r1
    349a:	96 95       	lsr	r25
    349c:	87 95       	ror	r24
    349e:	97 f9       	bld	r25, 7
    34a0:	08 95       	ret

000034a2 <__fp_norm2>:
    34a2:	91 50       	subi	r25, 0x01	; 1
    34a4:	50 40       	sbci	r21, 0x00	; 0
    34a6:	66 0f       	add	r22, r22
    34a8:	77 1f       	adc	r23, r23
    34aa:	88 1f       	adc	r24, r24
    34ac:	d2 f7       	brpl	.-12     	; 0x34a2 <__fp_norm2>
    34ae:	08 95       	ret

000034b0 <__fp_powsodd>:
    34b0:	9f 93       	push	r25
    34b2:	8f 93       	push	r24
    34b4:	7f 93       	push	r23
    34b6:	6f 93       	push	r22
    34b8:	ff 93       	push	r31
    34ba:	ef 93       	push	r30
    34bc:	9b 01       	movw	r18, r22
    34be:	ac 01       	movw	r20, r24
    34c0:	0e 94 84 19 	call	0x3308	; 0x3308 <__mulsf3>
    34c4:	ef 91       	pop	r30
    34c6:	ff 91       	pop	r31
    34c8:	0e 94 c9 18 	call	0x3192	; 0x3192 <__fp_powser>
    34cc:	2f 91       	pop	r18
    34ce:	3f 91       	pop	r19
    34d0:	4f 91       	pop	r20
    34d2:	5f 91       	pop	r21
    34d4:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__mulsf3>

000034d8 <__tablejump2__>:
    34d8:	ee 0f       	add	r30, r30
    34da:	ff 1f       	adc	r31, r31
    34dc:	05 90       	lpm	r0, Z+
    34de:	f4 91       	lpm	r31, Z
    34e0:	e0 2d       	mov	r30, r0
    34e2:	09 94       	ijmp

000034e4 <__itoa_ncheck>:
    34e4:	bb 27       	eor	r27, r27
    34e6:	4a 30       	cpi	r20, 0x0A	; 10
    34e8:	31 f4       	brne	.+12     	; 0x34f6 <__itoa_ncheck+0x12>
    34ea:	99 23       	and	r25, r25
    34ec:	22 f4       	brpl	.+8      	; 0x34f6 <__itoa_ncheck+0x12>
    34ee:	bd e2       	ldi	r27, 0x2D	; 45
    34f0:	90 95       	com	r25
    34f2:	81 95       	neg	r24
    34f4:	9f 4f       	sbci	r25, 0xFF	; 255
    34f6:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__utoa_common>

000034fa <__utoa_ncheck>:
    34fa:	bb 27       	eor	r27, r27

000034fc <__utoa_common>:
    34fc:	fb 01       	movw	r30, r22
    34fe:	55 27       	eor	r21, r21
    3500:	aa 27       	eor	r26, r26
    3502:	88 0f       	add	r24, r24
    3504:	99 1f       	adc	r25, r25
    3506:	aa 1f       	adc	r26, r26
    3508:	a4 17       	cp	r26, r20
    350a:	10 f0       	brcs	.+4      	; 0x3510 <__utoa_common+0x14>
    350c:	a4 1b       	sub	r26, r20
    350e:	83 95       	inc	r24
    3510:	50 51       	subi	r21, 0x10	; 16
    3512:	b9 f7       	brne	.-18     	; 0x3502 <__utoa_common+0x6>
    3514:	a0 5d       	subi	r26, 0xD0	; 208
    3516:	aa 33       	cpi	r26, 0x3A	; 58
    3518:	08 f0       	brcs	.+2      	; 0x351c <__utoa_common+0x20>
    351a:	a9 5d       	subi	r26, 0xD9	; 217
    351c:	a1 93       	st	Z+, r26
    351e:	00 97       	sbiw	r24, 0x00	; 0
    3520:	79 f7       	brne	.-34     	; 0x3500 <__utoa_common+0x4>
    3522:	b1 11       	cpse	r27, r1
    3524:	b1 93       	st	Z+, r27
    3526:	11 92       	st	Z+, r1
    3528:	cb 01       	movw	r24, r22
    352a:	0c 94 97 1a 	jmp	0x352e	; 0x352e <strrev>

0000352e <strrev>:
    352e:	dc 01       	movw	r26, r24
    3530:	fc 01       	movw	r30, r24
    3532:	67 2f       	mov	r22, r23
    3534:	71 91       	ld	r23, Z+
    3536:	77 23       	and	r23, r23
    3538:	e1 f7       	brne	.-8      	; 0x3532 <strrev+0x4>
    353a:	32 97       	sbiw	r30, 0x02	; 2
    353c:	04 c0       	rjmp	.+8      	; 0x3546 <strrev+0x18>
    353e:	7c 91       	ld	r23, X
    3540:	6d 93       	st	X+, r22
    3542:	70 83       	st	Z, r23
    3544:	62 91       	ld	r22, -Z
    3546:	ae 17       	cp	r26, r30
    3548:	bf 07       	cpc	r27, r31
    354a:	c8 f3       	brcs	.-14     	; 0x353e <strrev+0x10>
    354c:	08 95       	ret

0000354e <_exit>:
    354e:	f8 94       	cli

00003550 <__stop_program>:
    3550:	ff cf       	rjmp	.-2      	; 0x3550 <__stop_program>
