
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00002e10  00002ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  00800156  00800156  00002efa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002efa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00002f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fbf  00000000  00000000  0000328c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e04  00000000  00000000  0000624b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000136a  00000000  00000000  0000704f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b34  00000000  00000000  000083bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be8  00000000  00000000  00008ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e7a  00000000  00000000  00009ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  0000d952  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__ctors_end>
       4:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
       8:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
       c:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_3>
      10:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      14:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      18:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      1c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      20:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      24:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      28:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__vector_10>
      2c:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__vector_11>
      30:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      34:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      38:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      3c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      40:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      44:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__vector_17>
      48:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__vector_18>
      4c:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__vector_19>
      50:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      54:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      58:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      5c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      60:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      64:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      68:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      6c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      70:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      74:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__vector_29>
      78:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      7c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      80:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__vector_32>
      84:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      88:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      8c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      90:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      94:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      98:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      9c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      a0:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      a4:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      a8:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      ac:	e1 11       	cpse	r30, r1
      ae:	01 12       	cpse	r0, r17
      b0:	21 12       	cpse	r2, r17
      b2:	41 12       	cpse	r4, r17
      b4:	61 12       	cpse	r6, r17
      b6:	81 12       	cpse	r8, r17
      b8:	a1 12       	cpse	r10, r17
      ba:	c1 12       	cpse	r12, r17
      bc:	e1 12       	cpse	r14, r17
      be:	01 13       	cpse	r16, r17
      c0:	21 13       	cpse	r18, r17
      c2:	41 13       	cpse	r20, r17
      c4:	08 4a       	sbci	r16, 0xA8	; 168
      c6:	d7 3b       	cpi	r29, 0xB7	; 183
      c8:	3b ce       	rjmp	.-906    	; 0xfffffd40 <__eeprom_end+0xff7efd40>
      ca:	01 6e       	ori	r16, 0xE1	; 225
      cc:	84 bc       	out	0x24, r8	; 36
      ce:	bf fd       	.word	0xfdbf	; ????
      d0:	c1 2f       	mov	r28, r17
      d2:	3d 6c       	ori	r19, 0xCD	; 205
      d4:	74 31       	cpi	r23, 0x14	; 20
      d6:	9a bd       	out	0x2a, r25	; 42
      d8:	56 83       	std	Z+6, r21	; 0x06
      da:	3d da       	rcall	.-2950   	; 0xfffff556 <__eeprom_end+0xff7ef556>
      dc:	3d 00       	.word	0x003d	; ????
      de:	c7 7f       	andi	r28, 0xF7	; 247
      e0:	11 be       	out	0x31, r1	; 49
      e2:	d9 e4       	ldi	r29, 0x49	; 73
      e4:	bb 4c       	sbci	r27, 0xCB	; 203
      e6:	3e 91       	ld	r19, -X
      e8:	6b aa       	std	Y+51, r6	; 0x33
      ea:	aa be       	out	0x3a, r10	; 58
      ec:	00 00       	nop
      ee:	00 80       	ld	r0, Z
      f0:	3f 05       	cpc	r19, r15
      f2:	a8 4c       	sbci	r26, 0xC8	; 200
      f4:	cd b2       	in	r12, 0x1d	; 29
      f6:	d4 4e       	sbci	r29, 0xE4	; 228
      f8:	b9 38       	cpi	r27, 0x89	; 137
      fa:	36 a9       	ldd	r19, Z+54	; 0x36
      fc:	02 0c       	add	r0, r2
      fe:	50 b9       	out	0x00, r21	; 0
     100:	91 86       	std	Z+9, r9	; 0x09
     102:	88 08       	sbc	r8, r8
     104:	3c a6       	std	Y+44, r3	; 0x2c
     106:	aa aa       	std	Y+50, r10	; 0x32
     108:	2a be       	out	0x3a, r2	; 58
     10a:	00 00       	nop
     10c:	00 80       	ld	r0, Z
     10e:	3f 00       	.word	0x003f	; ????

00000110 <__trampolines_end>:
     110:	00 01       	movw	r0, r0
     112:	00 00       	nop
     114:	a7 01       	movw	r20, r14
     116:	12 00       	.word	0x0012	; ????
     118:	02 00       	.word	0x0002	; ????
     11a:	00 64       	ori	r16, 0x40	; 64
     11c:	01 43       	sbci	r16, 0x31	; 49
     11e:	00 03       	mulsu	r16, r16
     120:	00 00       	nop
     122:	60 01       	movw	r12, r0
     124:	04 01       	movw	r0, r8
     126:	03 09       	sbc	r16, r3
     128:	04 4c       	sbci	r16, 0xC4	; 196
     12a:	01 12       	cpse	r0, r17
     12c:	02 03       	mulsu	r16, r18
     12e:	09 04       	cpc	r0, r9
     130:	44 01       	movw	r8, r8
     132:	06 03       	mulsu	r16, r22
     134:	03 09       	sbc	r16, r3
     136:	04 3a       	cpi	r16, 0xA4	; 164
     138:	01 08       	sbc	r0, r1

0000013a <string3>:
     13a:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000144 <string2>:
     144:	06 03 4d 00 32 00 00 00                             ..M.2...

0000014c <string1>:
     14c:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     15c:	65 00 00 00                                         e...

00000160 <string0>:
     160:	04 03 09 04                                         ....

00000164 <config1_descriptor>:
     164:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     174:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     184:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     194:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1a4:	40 00 00                                            @..

000001a7 <device_descriptor>:
     1a7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1b7:	03 01                                               ..

000001b9 <endpoint_config_table>:
     1b9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001c4 <__ctors_end>:
     1c4:	11 24       	eor	r1, r1
     1c6:	1f be       	out	0x3f, r1	; 63
     1c8:	cf ef       	ldi	r28, 0xFF	; 255
     1ca:	da e0       	ldi	r29, 0x0A	; 10
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	cd bf       	out	0x3d, r28	; 61

000001d0 <__do_copy_data>:
     1d0:	11 e0       	ldi	r17, 0x01	; 1
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b1 e0       	ldi	r27, 0x01	; 1
     1d6:	e0 e1       	ldi	r30, 0x10	; 16
     1d8:	fe e2       	ldi	r31, 0x2E	; 46
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__do_copy_data+0x10>
     1dc:	05 90       	lpm	r0, Z+
     1de:	0d 92       	st	X+, r0
     1e0:	a6 35       	cpi	r26, 0x56	; 86
     1e2:	b1 07       	cpc	r27, r17
     1e4:	d9 f7       	brne	.-10     	; 0x1dc <__do_copy_data+0xc>

000001e6 <__do_clear_bss>:
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	a6 e5       	ldi	r26, 0x56	; 86
     1ea:	b1 e0       	ldi	r27, 0x01	; 1
     1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <.do_clear_bss_start>

000001ee <.do_clear_bss_loop>:
     1ee:	1d 92       	st	X+, r1

000001f0 <.do_clear_bss_start>:
     1f0:	ac 3c       	cpi	r26, 0xCC	; 204
     1f2:	b2 07       	cpc	r27, r18
     1f4:	e1 f7       	brne	.-8      	; 0x1ee <.do_clear_bss_loop>
     1f6:	0e 94 2c 07 	call	0xe58	; 0xe58 <main>
     1fa:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <_exit>

000001fe <__bad_interrupt>:
     1fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000202 <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(void) {
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
/************************************************************
Initialization of Pins and System Clock
************************************************************/

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     20a:	e1 e6       	ldi	r30, 0x61	; 97
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	80 83       	st	Z, r24
     212:	10 82       	st	Z, r1
	
	//Set to Input
	clear(DDRD,0); // D0
     214:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     216:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     218:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     21a:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     21c:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     21e:	23 9a       	sbi	0x04, 3	; 4
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     220:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     222:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     224:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     226:	2b 98       	cbi	0x05, 3	; 5
	
	m_bus_init();
     228:	0e 94 bf 0c 	call	0x197e	; 0x197e <m_bus_init>
	while(!m_wii_open());
     22c:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <m_wii_open>
     230:	88 23       	and	r24, r24
     232:	e1 f3       	breq	.-8      	; 0x22c <initialize_robockey+0x2a>
	sei();
     234:	78 94       	sei

/************************************************************
Setup USB
************************************************************/

	m_usb_init();
     236:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <m_usb_init>
/************************************************************
Timer1 Initialization for PWM Motor Control
************************************************************/

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     23a:	e1 e8       	ldi	r30, 0x81	; 129
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	8b 7f       	andi	r24, 0xFB	; 251
     242:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     244:	80 81       	ld	r24, Z
     246:	8d 7f       	andi	r24, 0xFD	; 253
     248:	80 83       	st	Z, r24
	set(TCCR1B,CS10);
     24a:	80 81       	ld	r24, Z
     24c:	81 60       	ori	r24, 0x01	; 1
     24e:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     250:	80 81       	ld	r24, Z
     252:	8f 7e       	andi	r24, 0xEF	; 239
     254:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     256:	80 81       	ld	r24, Z
     258:	88 60       	ori	r24, 0x08	; 8
     25a:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     25c:	e0 e8       	ldi	r30, 0x80	; 128
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	8d 7f       	andi	r24, 0xFD	; 253
     264:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     266:	80 81       	ld	r24, Z
     268:	8e 7f       	andi	r24, 0xFE	; 254
     26a:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     26c:	80 81       	ld	r24, Z
     26e:	8f 7d       	andi	r24, 0xDF	; 223
     270:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     272:	80 81       	ld	r24, Z
     274:	8f 7e       	andi	r24, 0xEF	; 239
     276:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     278:	08 e8       	ldi	r16, 0x88	; 136
     27a:	10 e0       	ldi	r17, 0x00	; 0
     27c:	c0 e8       	ldi	r28, 0x80	; 128
     27e:	de e3       	ldi	r29, 0x3E	; 62
     280:	f8 01       	movw	r30, r16
     282:	d1 83       	std	Z+1, r29	; 0x01
     284:	c0 83       	st	Z, r28
	OCR1B = (float)OCR1A*0.1;
     286:	60 81       	ld	r22, Z
     288:	71 81       	ldd	r23, Z+1	; 0x01
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__floatunsisf>
     292:	2d ec       	ldi	r18, 0xCD	; 205
     294:	3c ec       	ldi	r19, 0xCC	; 204
     296:	4c ec       	ldi	r20, 0xCC	; 204
     298:	5d e3       	ldi	r21, 0x3D	; 61
     29a:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     29e:	0e 94 c4 14 	call	0x2988	; 0x2988 <__fixunssfsi>
     2a2:	70 93 8b 00 	sts	0x008B, r23
     2a6:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     2aa:	f8 01       	movw	r30, r16
     2ac:	60 81       	ld	r22, Z
     2ae:	71 81       	ldd	r23, Z+1	; 0x01
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__floatunsisf>
     2b8:	2d ec       	ldi	r18, 0xCD	; 205
     2ba:	3c ec       	ldi	r19, 0xCC	; 204
     2bc:	4c ec       	ldi	r20, 0xCC	; 204
     2be:	5d e3       	ldi	r21, 0x3D	; 61
     2c0:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     2c4:	0e 94 c4 14 	call	0x2988	; 0x2988 <__fixunssfsi>
     2c8:	70 93 8d 00 	sts	0x008D, r23
     2cc:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     2d0:	ef e6       	ldi	r30, 0x6F	; 111
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	80 81       	ld	r24, Z
     2d6:	82 60       	ori	r24, 0x02	; 2
     2d8:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     2da:	80 81       	ld	r24, Z
     2dc:	84 60       	ori	r24, 0x04	; 4
     2de:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     2e0:	80 81       	ld	r24, Z
     2e2:	88 60       	ori	r24, 0x08	; 8
     2e4:	80 83       	st	Z, r24

/************************************************************
Timer3 Initialization for fixed timestep calculations
************************************************************/

	clear(TCCR3B,CS32); // prescale /1
     2e6:	e1 e9       	ldi	r30, 0x91	; 145
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	8b 7f       	andi	r24, 0xFB	; 251
     2ee:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     2f0:	80 81       	ld	r24, Z
     2f2:	8d 7f       	andi	r24, 0xFD	; 253
     2f4:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     2f6:	80 81       	ld	r24, Z
     2f8:	81 60       	ori	r24, 0x01	; 1
     2fa:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     2fc:	80 81       	ld	r24, Z
     2fe:	8f 7e       	andi	r24, 0xEF	; 239
     300:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     302:	80 81       	ld	r24, Z
     304:	88 60       	ori	r24, 0x08	; 8
     306:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     308:	e0 e9       	ldi	r30, 0x90	; 144
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	8d 7f       	andi	r24, 0xFD	; 253
     310:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     312:	80 81       	ld	r24, Z
     314:	8e 7f       	andi	r24, 0xFE	; 254
     316:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     318:	d0 93 99 00 	sts	0x0099, r29
     31c:	c0 93 98 00 	sts	0x0098, r28

	set(TIMSK3,OCIE3A); // OCR3A interrupt vector
     320:	e1 e7       	ldi	r30, 0x71	; 113
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	80 81       	ld	r24, Z
     326:	82 60       	ori	r24, 0x02	; 2
     328:	80 83       	st	Z, r24

/************************************************************
Initialize the Wireless System
************************************************************/

	m_bus_init(); // Enable mBUS
     32a:	0e 94 bf 0c 	call	0x197e	; 0x197e <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS_1,PACKET_LENGTH); // Configure mRF
     32e:	4a e0       	ldi	r20, 0x0A	; 10
     330:	60 e2       	ldi	r22, 0x20	; 32
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <m_rf_open>

/************************************************************
Setup ADC
************************************************************/
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
     338:	cc e7       	ldi	r28, 0x7C	; 124
     33a:	d0 e0       	ldi	r29, 0x00	; 0
     33c:	88 81       	ld	r24, Y
     33e:	8f 77       	andi	r24, 0x7F	; 127
     340:	88 83       	st	Y, r24
	set(ADMUX,REFS0);
     342:	88 81       	ld	r24, Y
     344:	80 64       	ori	r24, 0x40	; 64
     346:	88 83       	st	Y, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
     348:	ea e7       	ldi	r30, 0x7A	; 122
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	8b 7f       	andi	r24, 0xFB	; 251
     350:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     352:	80 81       	ld	r24, Z
     354:	82 60       	ori	r24, 0x02	; 2
     356:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     358:	80 81       	ld	r24, Z
     35a:	81 60       	ori	r24, 0x01	; 1
     35c:	80 83       	st	Z, r24
	
	// Disable Digital input to:
	set(DIDR0,ADC0D); // ADC0
     35e:	ae e7       	ldi	r26, 0x7E	; 126
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	8c 91       	ld	r24, X
     364:	81 60       	ori	r24, 0x01	; 1
     366:	8c 93       	st	X, r24
	set(DIDR0,ADC1D); // ADC1
     368:	8c 91       	ld	r24, X
     36a:	82 60       	ori	r24, 0x02	; 2
     36c:	8c 93       	st	X, r24
	set(DIDR0,ADC4D); // ADC4
     36e:	8c 91       	ld	r24, X
     370:	80 61       	ori	r24, 0x10	; 16
     372:	8c 93       	st	X, r24
	set(DIDR0,ADC5D); // ADC5
     374:	8c 91       	ld	r24, X
     376:	80 62       	ori	r24, 0x20	; 32
     378:	8c 93       	st	X, r24
	set(DIDR0,ADC6D); // ADC6
     37a:	8c 91       	ld	r24, X
     37c:	80 64       	ori	r24, 0x40	; 64
     37e:	8c 93       	st	X, r24
	set(DIDR0,ADC7D); // ADC7
     380:	8c 91       	ld	r24, X
     382:	80 68       	ori	r24, 0x80	; 128
     384:	8c 93       	st	X, r24
	set(DIDR2,ADC8D); // ADC8
     386:	ad e7       	ldi	r26, 0x7D	; 125
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	8c 91       	ld	r24, X
     38c:	81 60       	ori	r24, 0x01	; 1
     38e:	8c 93       	st	X, r24
	set(DIDR2,ADC9D); // ADC9
     390:	8c 91       	ld	r24, X
     392:	82 60       	ori	r24, 0x02	; 2
     394:	8c 93       	st	X, r24
	set(DIDR2,ADC10D); // ADC10
     396:	8c 91       	ld	r24, X
     398:	84 60       	ori	r24, 0x04	; 4
     39a:	8c 93       	st	X, r24
	set(DIDR2,ADC11D); // ADC11
     39c:	8c 91       	ld	r24, X
     39e:	88 60       	ori	r24, 0x08	; 8
     3a0:	8c 93       	st	X, r24
	set(DIDR2,ADC12D); // ADC812
     3a2:	8c 91       	ld	r24, X
     3a4:	80 61       	ori	r24, 0x10	; 16
     3a6:	8c 93       	st	X, r24
	set(DIDR2,ADC13D); // ADC13
     3a8:	8c 91       	ld	r24, X
     3aa:	80 62       	ori	r24, 0x20	; 32
     3ac:	8c 93       	st	X, r24

	
	set(ADCSRA,ADIE); // Enable interrupt for when conversion is finished
     3ae:	80 81       	ld	r24, Z
     3b0:	88 60       	ori	r24, 0x08	; 8
     3b2:	80 83       	st	Z, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
     3b4:	80 81       	ld	r24, Z
     3b6:	8f 7d       	andi	r24, 0xDF	; 223
     3b8:	80 83       	st	Z, r24
	
	clear(ADCSRB,MUX5); // Select ADC0 at pin F4
     3ba:	ab e7       	ldi	r26, 0x7B	; 123
     3bc:	b0 e0       	ldi	r27, 0x00	; 0
     3be:	8c 91       	ld	r24, X
     3c0:	8f 7d       	andi	r24, 0xDF	; 223
     3c2:	8c 93       	st	X, r24
	clear(ADMUX,MUX2);
     3c4:	88 81       	ld	r24, Y
     3c6:	8b 7f       	andi	r24, 0xFB	; 251
     3c8:	88 83       	st	Y, r24
	clear(ADMUX,MUX1);
     3ca:	88 81       	ld	r24, Y
     3cc:	8d 7f       	andi	r24, 0xFD	; 253
     3ce:	88 83       	st	Y, r24
	clear(ADMUX,MUX0);
     3d0:	88 81       	ld	r24, Y
     3d2:	8e 7f       	andi	r24, 0xFE	; 254
     3d4:	88 83       	st	Y, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
     3d6:	80 81       	ld	r24, Z
     3d8:	80 68       	ori	r24, 0x80	; 128
     3da:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
     3dc:	80 81       	ld	r24, Z
     3de:	80 64       	ori	r24, 0x40	; 64
     3e0:	80 83       	st	Z, r24
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     3ec:	82 30       	cpi	r24, 0x02	; 2
     3ee:	91 05       	cpc	r25, r1
     3f0:	f9 f0       	breq	.+62     	; 0x430 <distIndex+0x44>
     3f2:	2c f4       	brge	.+10     	; 0x3fe <distIndex+0x12>
     3f4:	00 97       	sbiw	r24, 0x00	; 0
     3f6:	51 f0       	breq	.+20     	; 0x40c <distIndex+0x20>
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	89 f0       	breq	.+34     	; 0x41e <distIndex+0x32>
     3fc:	42 c0       	rjmp	.+132    	; 0x482 <distIndex+0x96>
     3fe:	84 30       	cpi	r24, 0x04	; 4
     400:	91 05       	cpc	r25, r1
     402:	51 f1       	breq	.+84     	; 0x458 <distIndex+0x6c>
     404:	f4 f0       	brlt	.+60     	; 0x442 <distIndex+0x56>
     406:	05 97       	sbiw	r24, 0x05	; 5
     408:	91 f1       	breq	.+100    	; 0x46e <distIndex+0x82>
     40a:	3b c0       	rjmp	.+118    	; 0x482 <distIndex+0x96>
	{
		case 0 : 
			pointsUsed[0] = 0;
     40c:	e6 e5       	ldi	r30, 0x56	; 86
     40e:	f1 e0       	ldi	r31, 0x01	; 1
     410:	11 82       	std	Z+1, r1	; 0x01
     412:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	93 83       	std	Z+3, r25	; 0x03
     41a:	82 83       	std	Z+2, r24	; 0x02
			break;
     41c:	32 c0       	rjmp	.+100    	; 0x482 <distIndex+0x96>
			
		case 1 : 
			pointsUsed[0] = 0;
     41e:	e6 e5       	ldi	r30, 0x56	; 86
     420:	f1 e0       	ldi	r31, 0x01	; 1
     422:	11 82       	std	Z+1, r1	; 0x01
     424:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	93 83       	std	Z+3, r25	; 0x03
     42c:	82 83       	std	Z+2, r24	; 0x02
			break;
     42e:	29 c0       	rjmp	.+82     	; 0x482 <distIndex+0x96>
			
		case 2 : 
			pointsUsed[0] = 0;
     430:	e6 e5       	ldi	r30, 0x56	; 86
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	11 82       	std	Z+1, r1	; 0x01
     436:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	93 83       	std	Z+3, r25	; 0x03
     43e:	82 83       	std	Z+2, r24	; 0x02
			break;
     440:	20 c0       	rjmp	.+64     	; 0x482 <distIndex+0x96>
			
		case 3 : 
			pointsUsed[0] = 1;
     442:	e6 e5       	ldi	r30, 0x56	; 86
     444:	f1 e0       	ldi	r31, 0x01	; 1
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	91 83       	std	Z+1, r25	; 0x01
     44c:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	93 83       	std	Z+3, r25	; 0x03
     454:	82 83       	std	Z+2, r24	; 0x02
			break;
     456:	15 c0       	rjmp	.+42     	; 0x482 <distIndex+0x96>
			
		case 4 : 
			pointsUsed[0] = 1;
     458:	e6 e5       	ldi	r30, 0x56	; 86
     45a:	f1 e0       	ldi	r31, 0x01	; 1
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	93 83       	std	Z+3, r25	; 0x03
     46a:	82 83       	std	Z+2, r24	; 0x02
			break;
     46c:	0a c0       	rjmp	.+20     	; 0x482 <distIndex+0x96>
			
		case 5 :
			pointsUsed[0] = 2;
     46e:	e6 e5       	ldi	r30, 0x56	; 86
     470:	f1 e0       	ldi	r31, 0x01	; 1
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	91 83       	std	Z+1, r25	; 0x01
     478:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	93 83       	std	Z+3, r25	; 0x03
     480:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     482:	86 e5       	ldi	r24, 0x56	; 86
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	08 95       	ret

00000488 <orientationCalculationFour>:


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
     488:	2f 92       	push	r2
     48a:	3f 92       	push	r3
     48c:	4f 92       	push	r4
     48e:	5f 92       	push	r5
     490:	6f 92       	push	r6
     492:	7f 92       	push	r7
     494:	8f 92       	push	r8
     496:	9f 92       	push	r9
     498:	af 92       	push	r10
     49a:	bf 92       	push	r11
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <orientationCalculationFour+0x26>
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <orientationCalculationFour+0x28>
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	5c 01       	movw	r10, r24
     4b6:	4a 01       	movw	r8, r20
     4b8:	3a 83       	std	Y+2, r19	; 0x02
     4ba:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     4bc:	06 2f       	mov	r16, r22
     4be:	17 2f       	mov	r17, r23
     4c0:	f8 01       	movw	r30, r16
     4c2:	41 90       	ld	r4, Z+
     4c4:	51 90       	ld	r5, Z+
     4c6:	61 90       	ld	r6, Z+
     4c8:	71 90       	ld	r7, Z+
     4ca:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     4cc:	1c 82       	std	Y+4, r1	; 0x04
     4ce:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     4d0:	21 2c       	mov	r2, r1
     4d2:	31 2c       	mov	r3, r1
     4d4:	12 c0       	rjmp	.+36     	; 0x4fa <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     4d6:	f8 01       	movw	r30, r16
     4d8:	c1 90       	ld	r12, Z+
     4da:	d1 90       	ld	r13, Z+
     4dc:	e1 90       	ld	r14, Z+
     4de:	f1 90       	ld	r15, Z+
     4e0:	8f 01       	movw	r16, r30
     4e2:	a7 01       	movw	r20, r14
     4e4:	96 01       	movw	r18, r12
     4e6:	c3 01       	movw	r24, r6
     4e8:	b2 01       	movw	r22, r4
     4ea:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
     4ee:	18 16       	cp	r1, r24
     4f0:	24 f4       	brge	.+8      	; 0x4fa <orientationCalculationFour+0x72>
     4f2:	26 01       	movw	r4, r12
     4f4:	37 01       	movw	r6, r14
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     4f6:	2b 80       	ldd	r2, Y+3	; 0x03
     4f8:	3c 80       	ldd	r3, Y+4	; 0x04
     4fa:	8b 81       	ldd	r24, Y+3	; 0x03
     4fc:	9c 81       	ldd	r25, Y+4	; 0x04
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	9c 83       	std	Y+4, r25	; 0x04
     502:	8b 83       	std	Y+3, r24	; 0x03
     504:	06 97       	sbiw	r24, 0x06	; 6
     506:	39 f7       	brne	.-50     	; 0x4d6 <orientationCalculationFour+0x4e>
		}
	}
	
	//Find points used by shortest length	
	int* pointsShortRef;
	pointsShortRef = distIndex(indexMin);	
     508:	82 2d       	mov	r24, r2
     50a:	93 2d       	mov	r25, r3
     50c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <distIndex>
	int pointsShort[2] = {pointsShortRef[0], pointsShortRef[1]};	
     510:	fc 01       	movw	r30, r24
     512:	20 81       	ld	r18, Z
     514:	31 81       	ldd	r19, Z+1	; 0x01
     516:	42 81       	ldd	r20, Z+2	; 0x02
     518:	53 81       	ldd	r21, Z+3	; 0x03
	if (pointsShort[0] == pointsLong[0]){
     51a:	f5 01       	movw	r30, r10
     51c:	80 81       	ld	r24, Z
     51e:	91 81       	ldd	r25, Z+1	; 0x01
     520:	28 17       	cp	r18, r24
     522:	39 07       	cpc	r19, r25
     524:	59 f4       	brne	.+22     	; 0x53c <orientationCalculationFour+0xb4>
		*top = pointsLong[0];
     526:	f4 01       	movw	r30, r8
     528:	31 83       	std	Z+1, r19	; 0x01
     52a:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     52c:	f5 01       	movw	r30, r10
     52e:	82 81       	ldd	r24, Z+2	; 0x02
     530:	93 81       	ldd	r25, Z+3	; 0x03
     532:	e9 81       	ldd	r30, Y+1	; 0x01
     534:	fa 81       	ldd	r31, Y+2	; 0x02
     536:	91 83       	std	Z+1, r25	; 0x01
     538:	80 83       	st	Z, r24
     53a:	3c c0       	rjmp	.+120    	; 0x5b4 <orientationCalculationFour+0x12c>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     53c:	f5 01       	movw	r30, r10
     53e:	62 81       	ldd	r22, Z+2	; 0x02
     540:	73 81       	ldd	r23, Z+3	; 0x03
     542:	26 17       	cp	r18, r22
     544:	37 07       	cpc	r19, r23
     546:	59 f4       	brne	.+22     	; 0x55e <orientationCalculationFour+0xd6>
			*top = pointsLong[1];
     548:	f4 01       	movw	r30, r8
     54a:	31 83       	std	Z+1, r19	; 0x01
     54c:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     54e:	f5 01       	movw	r30, r10
     550:	80 81       	ld	r24, Z
     552:	91 81       	ldd	r25, Z+1	; 0x01
     554:	e9 81       	ldd	r30, Y+1	; 0x01
     556:	fa 81       	ldd	r31, Y+2	; 0x02
     558:	91 83       	std	Z+1, r25	; 0x01
     55a:	80 83       	st	Z, r24
     55c:	2b c0       	rjmp	.+86     	; 0x5b4 <orientationCalculationFour+0x12c>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     55e:	48 17       	cp	r20, r24
     560:	59 07       	cpc	r21, r25
     562:	59 f4       	brne	.+22     	; 0x57a <orientationCalculationFour+0xf2>
				*top = pointsLong[0];
     564:	f4 01       	movw	r30, r8
     566:	51 83       	std	Z+1, r21	; 0x01
     568:	40 83       	st	Z, r20
				*bottom = pointsLong[1];
     56a:	f5 01       	movw	r30, r10
     56c:	82 81       	ldd	r24, Z+2	; 0x02
     56e:	93 81       	ldd	r25, Z+3	; 0x03
     570:	e9 81       	ldd	r30, Y+1	; 0x01
     572:	fa 81       	ldd	r31, Y+2	; 0x02
     574:	91 83       	std	Z+1, r25	; 0x01
     576:	80 83       	st	Z, r24
     578:	1d c0       	rjmp	.+58     	; 0x5b4 <orientationCalculationFour+0x12c>
			} else {
				if (pointsShort[1] == pointsLong[1])
     57a:	46 17       	cp	r20, r22
     57c:	57 07       	cpc	r21, r23
     57e:	59 f4       	brne	.+22     	; 0x596 <orientationCalculationFour+0x10e>
				{
					*top = pointsLong[1];
     580:	f4 01       	movw	r30, r8
     582:	51 83       	std	Z+1, r21	; 0x01
     584:	40 83       	st	Z, r20
					*bottom = pointsLong[0];
     586:	f5 01       	movw	r30, r10
     588:	80 81       	ld	r24, Z
     58a:	91 81       	ldd	r25, Z+1	; 0x01
     58c:	e9 81       	ldd	r30, Y+1	; 0x01
     58e:	fa 81       	ldd	r31, Y+2	; 0x02
     590:	91 83       	std	Z+1, r25	; 0x01
     592:	80 83       	st	Z, r24
     594:	0f c0       	rjmp	.+30     	; 0x5b4 <orientationCalculationFour+0x12c>
				} else {
						m_green(OFF);
     596:	6a 9a       	sbi	0x0d, 2	; 13
     598:	72 9a       	sbi	0x0e, 2	; 14
						*top = pointsLong[1];
     59a:	f5 01       	movw	r30, r10
     59c:	82 81       	ldd	r24, Z+2	; 0x02
     59e:	93 81       	ldd	r25, Z+3	; 0x03
     5a0:	f4 01       	movw	r30, r8
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     5a6:	f5 01       	movw	r30, r10
     5a8:	80 81       	ld	r24, Z
     5aa:	91 81       	ldd	r25, Z+1	; 0x01
     5ac:	e9 81       	ldd	r30, Y+1	; 0x01
     5ae:	fa 81       	ldd	r31, Y+2	; 0x02
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	80 83       	st	Z, r24
				}
			}
		}
	}
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	bf 90       	pop	r11
     5ce:	af 90       	pop	r10
     5d0:	9f 90       	pop	r9
     5d2:	8f 90       	pop	r8
     5d4:	7f 90       	pop	r7
     5d6:	6f 90       	pop	r6
     5d8:	5f 90       	pop	r5
     5da:	4f 90       	pop	r4
     5dc:	3f 90       	pop	r3
     5de:	2f 90       	pop	r2
     5e0:	08 95       	ret

000005e2 <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     5e2:	2f 92       	push	r2
     5e4:	3f 92       	push	r3
     5e6:	4f 92       	push	r4
     5e8:	5f 92       	push	r5
     5ea:	6f 92       	push	r6
     5ec:	7f 92       	push	r7
     5ee:	8f 92       	push	r8
     5f0:	9f 92       	push	r9
     5f2:	af 92       	push	r10
     5f4:	bf 92       	push	r11
     5f6:	cf 92       	push	r12
     5f8:	df 92       	push	r13
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	c2 54       	subi	r28, 0x42	; 66
     60c:	d1 09       	sbc	r29, r1
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
     618:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     61a:	fc 01       	movw	r30, r24
     61c:	04 80       	ldd	r0, Z+4	; 0x04
     61e:	f5 81       	ldd	r31, Z+5	; 0x05
     620:	e0 2d       	mov	r30, r0
     622:	fa a3       	std	Y+34, r31	; 0x22
     624:	e9 a3       	std	Y+33, r30	; 0x21
     626:	fc 01       	movw	r30, r24
     628:	00 81       	ld	r16, Z
     62a:	11 81       	ldd	r17, Z+1	; 0x01
     62c:	69 a1       	ldd	r22, Y+33	; 0x21
     62e:	7a a1       	ldd	r23, Y+34	; 0x22
     630:	60 1b       	sub	r22, r16
     632:	71 0b       	sbc	r23, r17
     634:	07 2e       	mov	r0, r23
     636:	00 0c       	add	r0, r0
     638:	88 0b       	sbc	r24, r24
     63a:	99 0b       	sbc	r25, r25
     63c:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     640:	6b 01       	movw	r12, r22
     642:	7c 01       	movw	r14, r24
     644:	f2 01       	movw	r30, r4
     646:	06 80       	ldd	r0, Z+6	; 0x06
     648:	f7 81       	ldd	r31, Z+7	; 0x07
     64a:	e0 2d       	mov	r30, r0
     64c:	fe a3       	std	Y+38, r31	; 0x26
     64e:	ed a3       	std	Y+37, r30	; 0x25
     650:	f2 01       	movw	r30, r4
     652:	22 80       	ldd	r2, Z+2	; 0x02
     654:	33 80       	ldd	r3, Z+3	; 0x03
     656:	ad a0       	ldd	r10, Y+37	; 0x25
     658:	be a0       	ldd	r11, Y+38	; 0x26
     65a:	a2 18       	sub	r10, r2
     65c:	b3 08       	sbc	r11, r3
     65e:	9b 01       	movw	r18, r22
     660:	ac 01       	movw	r20, r24
     662:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     666:	69 a7       	std	Y+41, r22	; 0x29
     668:	7a a7       	std	Y+42, r23	; 0x2a
     66a:	8b a7       	std	Y+43, r24	; 0x2b
     66c:	9c a7       	std	Y+44, r25	; 0x2c
     66e:	aa 9c       	mul	r10, r10
     670:	40 01       	movw	r8, r0
     672:	ab 9c       	mul	r10, r11
     674:	90 0c       	add	r9, r0
     676:	90 0c       	add	r9, r0
     678:	11 24       	eor	r1, r1
     67a:	09 2c       	mov	r0, r9
     67c:	00 0c       	add	r0, r0
     67e:	aa 08       	sbc	r10, r10
     680:	bb 08       	sbc	r11, r11
     682:	a7 01       	movw	r20, r14
     684:	96 01       	movw	r18, r12
     686:	c7 01       	movw	r24, r14
     688:	b6 01       	movw	r22, r12
     68a:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     68e:	6b 01       	movw	r12, r22
     690:	7c 01       	movw	r14, r24
     692:	c5 01       	movw	r24, r10
     694:	b4 01       	movw	r22, r8
     696:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     69a:	9b 01       	movw	r18, r22
     69c:	ac 01       	movw	r20, r24
     69e:	c7 01       	movw	r24, r14
     6a0:	b6 01       	movw	r22, r12
     6a2:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
     6a6:	0e 94 93 16 	call	0x2d26	; 0x2d26 <sqrt>
     6aa:	6b af       	std	Y+59, r22	; 0x3b
     6ac:	7c af       	std	Y+60, r23	; 0x3c
     6ae:	8d af       	std	Y+61, r24	; 0x3d
     6b0:	9e af       	std	Y+62, r25	; 0x3e
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     6b2:	f2 01       	movw	r30, r4
     6b4:	00 84       	ldd	r0, Z+8	; 0x08
     6b6:	f1 85       	ldd	r31, Z+9	; 0x09
     6b8:	e0 2d       	mov	r30, r0
     6ba:	fa a7       	std	Y+42, r31	; 0x2a
     6bc:	e9 a7       	std	Y+41, r30	; 0x29
     6be:	bf 01       	movw	r22, r30
     6c0:	60 1b       	sub	r22, r16
     6c2:	71 0b       	sbc	r23, r17
     6c4:	07 2e       	mov	r0, r23
     6c6:	00 0c       	add	r0, r0
     6c8:	88 0b       	sbc	r24, r24
     6ca:	99 0b       	sbc	r25, r25
     6cc:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     6d0:	6b 01       	movw	r12, r22
     6d2:	7c 01       	movw	r14, r24
     6d4:	f2 01       	movw	r30, r4
     6d6:	62 84       	ldd	r6, Z+10	; 0x0a
     6d8:	73 84       	ldd	r7, Z+11	; 0x0b
     6da:	53 01       	movw	r10, r6
     6dc:	a2 18       	sub	r10, r2
     6de:	b3 08       	sbc	r11, r3
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     6e8:	6d a7       	std	Y+45, r22	; 0x2d
     6ea:	7e a7       	std	Y+46, r23	; 0x2e
     6ec:	8f a7       	std	Y+47, r24	; 0x2f
     6ee:	98 ab       	std	Y+48, r25	; 0x30
     6f0:	aa 9c       	mul	r10, r10
     6f2:	40 01       	movw	r8, r0
     6f4:	ab 9c       	mul	r10, r11
     6f6:	90 0c       	add	r9, r0
     6f8:	90 0c       	add	r9, r0
     6fa:	11 24       	eor	r1, r1
     6fc:	09 2c       	mov	r0, r9
     6fe:	00 0c       	add	r0, r0
     700:	aa 08       	sbc	r10, r10
     702:	bb 08       	sbc	r11, r11
     704:	a7 01       	movw	r20, r14
     706:	96 01       	movw	r18, r12
     708:	c7 01       	movw	r24, r14
     70a:	b6 01       	movw	r22, r12
     70c:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     710:	6b 01       	movw	r12, r22
     712:	7c 01       	movw	r14, r24
     714:	c5 01       	movw	r24, r10
     716:	b4 01       	movw	r22, r8
     718:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     71c:	9b 01       	movw	r18, r22
     71e:	ac 01       	movw	r20, r24
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
     728:	0e 94 93 16 	call	0x2d26	; 0x2d26 <sqrt>
     72c:	23 96       	adiw	r28, 0x03	; 3
     72e:	6c af       	std	Y+60, r22	; 0x3c
     730:	7d af       	std	Y+61, r23	; 0x3d
     732:	8e af       	std	Y+62, r24	; 0x3e
     734:	9f af       	std	Y+63, r25	; 0x3f
     736:	23 97       	sbiw	r28, 0x03	; 3
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     738:	f2 01       	movw	r30, r4
     73a:	04 84       	ldd	r0, Z+12	; 0x0c
     73c:	f5 85       	ldd	r31, Z+13	; 0x0d
     73e:	e0 2d       	mov	r30, r0
     740:	fe a7       	std	Y+46, r31	; 0x2e
     742:	ed a7       	std	Y+45, r30	; 0x2d
     744:	bf 01       	movw	r22, r30
     746:	60 1b       	sub	r22, r16
     748:	71 0b       	sbc	r23, r17
     74a:	07 2e       	mov	r0, r23
     74c:	00 0c       	add	r0, r0
     74e:	88 0b       	sbc	r24, r24
     750:	99 0b       	sbc	r25, r25
     752:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     756:	4b 01       	movw	r8, r22
     758:	5c 01       	movw	r10, r24
     75a:	f2 01       	movw	r30, r4
     75c:	06 84       	ldd	r0, Z+14	; 0x0e
     75e:	f7 85       	ldd	r31, Z+15	; 0x0f
     760:	e0 2d       	mov	r30, r0
     762:	fa ab       	std	Y+50, r31	; 0x32
     764:	e9 ab       	std	Y+49, r30	; 0x31
     766:	8f 01       	movw	r16, r30
     768:	02 19       	sub	r16, r2
     76a:	13 09       	sbc	r17, r3
     76c:	9b 01       	movw	r18, r22
     76e:	ac 01       	movw	r20, r24
     770:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     774:	6b ab       	std	Y+51, r22	; 0x33
     776:	7c ab       	std	Y+52, r23	; 0x34
     778:	8d ab       	std	Y+53, r24	; 0x35
     77a:	9e ab       	std	Y+54, r25	; 0x36
     77c:	00 9f       	mul	r16, r16
     77e:	60 01       	movw	r12, r0
     780:	01 9f       	mul	r16, r17
     782:	d0 0c       	add	r13, r0
     784:	d0 0c       	add	r13, r0
     786:	11 24       	eor	r1, r1
     788:	0d 2c       	mov	r0, r13
     78a:	00 0c       	add	r0, r0
     78c:	ee 08       	sbc	r14, r14
     78e:	ff 08       	sbc	r15, r15
     790:	a5 01       	movw	r20, r10
     792:	94 01       	movw	r18, r8
     794:	c5 01       	movw	r24, r10
     796:	b4 01       	movw	r22, r8
     798:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     79c:	4b 01       	movw	r8, r22
     79e:	5c 01       	movw	r10, r24
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
     7a4:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     7a8:	9b 01       	movw	r18, r22
     7aa:	ac 01       	movw	r20, r24
     7ac:	c5 01       	movw	r24, r10
     7ae:	b4 01       	movw	r22, r8
     7b0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
     7b4:	0e 94 93 16 	call	0x2d26	; 0x2d26 <sqrt>
     7b8:	6b ab       	std	Y+51, r22	; 0x33
     7ba:	7c ab       	std	Y+52, r23	; 0x34
     7bc:	8d ab       	std	Y+53, r24	; 0x35
     7be:	9e ab       	std	Y+54, r25	; 0x36
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     7c0:	69 a5       	ldd	r22, Y+41	; 0x29
     7c2:	7a a5       	ldd	r23, Y+42	; 0x2a
     7c4:	29 a1       	ldd	r18, Y+33	; 0x21
     7c6:	3a a1       	ldd	r19, Y+34	; 0x22
     7c8:	62 1b       	sub	r22, r18
     7ca:	73 0b       	sbc	r23, r19
     7cc:	07 2e       	mov	r0, r23
     7ce:	00 0c       	add	r0, r0
     7d0:	88 0b       	sbc	r24, r24
     7d2:	99 0b       	sbc	r25, r25
     7d4:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     7d8:	4b 01       	movw	r8, r22
     7da:	5c 01       	movw	r10, r24
     7dc:	83 01       	movw	r16, r6
     7de:	4d a1       	ldd	r20, Y+37	; 0x25
     7e0:	5e a1       	ldd	r21, Y+38	; 0x26
     7e2:	04 1b       	sub	r16, r20
     7e4:	15 0b       	sbc	r17, r21
     7e6:	9b 01       	movw	r18, r22
     7e8:	ac 01       	movw	r20, r24
     7ea:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     7ee:	6f ab       	std	Y+55, r22	; 0x37
     7f0:	78 af       	std	Y+56, r23	; 0x38
     7f2:	89 af       	std	Y+57, r24	; 0x39
     7f4:	9a af       	std	Y+58, r25	; 0x3a
     7f6:	00 9f       	mul	r16, r16
     7f8:	60 01       	movw	r12, r0
     7fa:	01 9f       	mul	r16, r17
     7fc:	d0 0c       	add	r13, r0
     7fe:	d0 0c       	add	r13, r0
     800:	11 24       	eor	r1, r1
     802:	0d 2c       	mov	r0, r13
     804:	00 0c       	add	r0, r0
     806:	ee 08       	sbc	r14, r14
     808:	ff 08       	sbc	r15, r15
     80a:	a5 01       	movw	r20, r10
     80c:	94 01       	movw	r18, r8
     80e:	c5 01       	movw	r24, r10
     810:	b4 01       	movw	r22, r8
     812:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     816:	4b 01       	movw	r8, r22
     818:	5c 01       	movw	r10, r24
     81a:	c7 01       	movw	r24, r14
     81c:	b6 01       	movw	r22, r12
     81e:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     822:	9b 01       	movw	r18, r22
     824:	ac 01       	movw	r20, r24
     826:	c5 01       	movw	r24, r10
     828:	b4 01       	movw	r22, r8
     82a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
     82e:	0e 94 93 16 	call	0x2d26	; 0x2d26 <sqrt>
     832:	6f ab       	std	Y+55, r22	; 0x37
     834:	78 af       	std	Y+56, r23	; 0x38
     836:	89 af       	std	Y+57, r24	; 0x39
     838:	9a af       	std	Y+58, r25	; 0x3a
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     83a:	6d a5       	ldd	r22, Y+45	; 0x2d
     83c:	7e a5       	ldd	r23, Y+46	; 0x2e
     83e:	89 a1       	ldd	r24, Y+33	; 0x21
     840:	9a a1       	ldd	r25, Y+34	; 0x22
     842:	68 1b       	sub	r22, r24
     844:	79 0b       	sbc	r23, r25
     846:	07 2e       	mov	r0, r23
     848:	00 0c       	add	r0, r0
     84a:	88 0b       	sbc	r24, r24
     84c:	99 0b       	sbc	r25, r25
     84e:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     852:	4b 01       	movw	r8, r22
     854:	5c 01       	movw	r10, r24
     856:	09 a9       	ldd	r16, Y+49	; 0x31
     858:	1a a9       	ldd	r17, Y+50	; 0x32
     85a:	ed a1       	ldd	r30, Y+37	; 0x25
     85c:	fe a1       	ldd	r31, Y+38	; 0x26
     85e:	0e 1b       	sub	r16, r30
     860:	1f 0b       	sbc	r17, r31
     862:	9b 01       	movw	r18, r22
     864:	ac 01       	movw	r20, r24
     866:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     86a:	69 a3       	std	Y+33, r22	; 0x21
     86c:	7a a3       	std	Y+34, r23	; 0x22
     86e:	8b a3       	std	Y+35, r24	; 0x23
     870:	9c a3       	std	Y+36, r25	; 0x24
     872:	00 9f       	mul	r16, r16
     874:	60 01       	movw	r12, r0
     876:	01 9f       	mul	r16, r17
     878:	d0 0c       	add	r13, r0
     87a:	d0 0c       	add	r13, r0
     87c:	11 24       	eor	r1, r1
     87e:	0d 2c       	mov	r0, r13
     880:	00 0c       	add	r0, r0
     882:	ee 08       	sbc	r14, r14
     884:	ff 08       	sbc	r15, r15
     886:	a5 01       	movw	r20, r10
     888:	94 01       	movw	r18, r8
     88a:	c5 01       	movw	r24, r10
     88c:	b4 01       	movw	r22, r8
     88e:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     892:	4b 01       	movw	r8, r22
     894:	5c 01       	movw	r10, r24
     896:	c7 01       	movw	r24, r14
     898:	b6 01       	movw	r22, r12
     89a:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
     8a2:	c5 01       	movw	r24, r10
     8a4:	b4 01       	movw	r22, r8
     8a6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
     8aa:	0e 94 93 16 	call	0x2d26	; 0x2d26 <sqrt>
     8ae:	4b 01       	movw	r8, r22
     8b0:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     8b2:	6d a5       	ldd	r22, Y+45	; 0x2d
     8b4:	7e a5       	ldd	r23, Y+46	; 0x2e
     8b6:	29 a5       	ldd	r18, Y+41	; 0x29
     8b8:	3a a5       	ldd	r19, Y+42	; 0x2a
     8ba:	62 1b       	sub	r22, r18
     8bc:	73 0b       	sbc	r23, r19
     8be:	07 2e       	mov	r0, r23
     8c0:	00 0c       	add	r0, r0
     8c2:	88 0b       	sbc	r24, r24
     8c4:	99 0b       	sbc	r25, r25
     8c6:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     8ca:	69 a3       	std	Y+33, r22	; 0x21
     8cc:	7a a3       	std	Y+34, r23	; 0x22
     8ce:	8b a3       	std	Y+35, r24	; 0x23
     8d0:	9c a3       	std	Y+36, r25	; 0x24
     8d2:	09 a9       	ldd	r16, Y+49	; 0x31
     8d4:	1a a9       	ldd	r17, Y+50	; 0x32
     8d6:	06 19       	sub	r16, r6
     8d8:	17 09       	sbc	r17, r7
     8da:	9b 01       	movw	r18, r22
     8dc:	ac 01       	movw	r20, r24
     8de:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     8e2:	6d a3       	std	Y+37, r22	; 0x25
     8e4:	7e a3       	std	Y+38, r23	; 0x26
     8e6:	8f a3       	std	Y+39, r24	; 0x27
     8e8:	98 a7       	std	Y+40, r25	; 0x28
     8ea:	00 9f       	mul	r16, r16
     8ec:	60 01       	movw	r12, r0
     8ee:	01 9f       	mul	r16, r17
     8f0:	d0 0c       	add	r13, r0
     8f2:	d0 0c       	add	r13, r0
     8f4:	11 24       	eor	r1, r1
     8f6:	0d 2c       	mov	r0, r13
     8f8:	00 0c       	add	r0, r0
     8fa:	ee 08       	sbc	r14, r14
     8fc:	ff 08       	sbc	r15, r15
     8fe:	29 a1       	ldd	r18, Y+33	; 0x21
     900:	3a a1       	ldd	r19, Y+34	; 0x22
     902:	4b a1       	ldd	r20, Y+35	; 0x23
     904:	5c a1       	ldd	r21, Y+36	; 0x24
     906:	ca 01       	movw	r24, r20
     908:	b9 01       	movw	r22, r18
     90a:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     90e:	69 a3       	std	Y+33, r22	; 0x21
     910:	7a a3       	std	Y+34, r23	; 0x22
     912:	8b a3       	std	Y+35, r24	; 0x23
     914:	9c a3       	std	Y+36, r25	; 0x24
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     91e:	9b 01       	movw	r18, r22
     920:	ac 01       	movw	r20, r24
     922:	69 a1       	ldd	r22, Y+33	; 0x21
     924:	7a a1       	ldd	r23, Y+34	; 0x22
     926:	8b a1       	ldd	r24, Y+35	; 0x23
     928:	9c a1       	ldd	r25, Y+36	; 0x24
     92a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
     92e:	0e 94 93 16 	call	0x2d26	; 0x2d26 <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     932:	2b ad       	ldd	r18, Y+59	; 0x3b
     934:	3c ad       	ldd	r19, Y+60	; 0x3c
     936:	4d ad       	ldd	r20, Y+61	; 0x3d
     938:	5e ad       	ldd	r21, Y+62	; 0x3e
     93a:	29 83       	std	Y+1, r18	; 0x01
     93c:	3a 83       	std	Y+2, r19	; 0x02
     93e:	4b 83       	std	Y+3, r20	; 0x03
     940:	5c 83       	std	Y+4, r21	; 0x04
     942:	23 96       	adiw	r28, 0x03	; 3
     944:	2c ad       	ldd	r18, Y+60	; 0x3c
     946:	3d ad       	ldd	r19, Y+61	; 0x3d
     948:	4e ad       	ldd	r20, Y+62	; 0x3e
     94a:	5f ad       	ldd	r21, Y+63	; 0x3f
     94c:	23 97       	sbiw	r28, 0x03	; 3
     94e:	2d 83       	std	Y+5, r18	; 0x05
     950:	3e 83       	std	Y+6, r19	; 0x06
     952:	4f 83       	std	Y+7, r20	; 0x07
     954:	58 87       	std	Y+8, r21	; 0x08
     956:	2b a9       	ldd	r18, Y+51	; 0x33
     958:	3c a9       	ldd	r19, Y+52	; 0x34
     95a:	4d a9       	ldd	r20, Y+53	; 0x35
     95c:	5e a9       	ldd	r21, Y+54	; 0x36
     95e:	29 87       	std	Y+9, r18	; 0x09
     960:	3a 87       	std	Y+10, r19	; 0x0a
     962:	4b 87       	std	Y+11, r20	; 0x0b
     964:	5c 87       	std	Y+12, r21	; 0x0c
     966:	2f a9       	ldd	r18, Y+55	; 0x37
     968:	38 ad       	ldd	r19, Y+56	; 0x38
     96a:	49 ad       	ldd	r20, Y+57	; 0x39
     96c:	5a ad       	ldd	r21, Y+58	; 0x3a
     96e:	2d 87       	std	Y+13, r18	; 0x0d
     970:	3e 87       	std	Y+14, r19	; 0x0e
     972:	4f 87       	std	Y+15, r20	; 0x0f
     974:	58 8b       	std	Y+16, r21	; 0x10
     976:	89 8a       	std	Y+17, r8	; 0x11
     978:	9a 8a       	std	Y+18, r9	; 0x12
     97a:	ab 8a       	std	Y+19, r10	; 0x13
     97c:	bc 8a       	std	Y+20, r11	; 0x14
     97e:	6d 8b       	std	Y+21, r22	; 0x15
     980:	7e 8b       	std	Y+22, r23	; 0x16
     982:	8f 8b       	std	Y+23, r24	; 0x17
     984:	98 8f       	std	Y+24, r25	; 0x18
     986:	ae 01       	movw	r20, r28
     988:	4f 5f       	subi	r20, 0xFF	; 255
     98a:	5f 4f       	sbci	r21, 0xFF	; 255
     98c:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     98e:	00 e0       	ldi	r16, 0x00	; 0
     990:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     992:	61 2c       	mov	r6, r1
     994:	71 2c       	mov	r7, r1
     996:	c1 2c       	mov	r12, r1
     998:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     99a:	21 2c       	mov	r2, r1
     99c:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     99e:	f7 01       	movw	r30, r14
     9a0:	81 90       	ld	r8, Z+
     9a2:	91 90       	ld	r9, Z+
     9a4:	a1 90       	ld	r10, Z+
     9a6:	b1 90       	ld	r11, Z+
     9a8:	7f 01       	movw	r14, r30
     9aa:	26 2d       	mov	r18, r6
     9ac:	37 2d       	mov	r19, r7
     9ae:	4c 2d       	mov	r20, r12
     9b0:	5d 2d       	mov	r21, r13
     9b2:	c5 01       	movw	r24, r10
     9b4:	b4 01       	movw	r22, r8
     9b6:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
     9ba:	18 16       	cp	r1, r24
     9bc:	34 f4       	brge	.+12     	; 0x9ca <fourPointCalc+0x3e8>
			indexMax = i;
			maxVal = distVect[i];
     9be:	68 2c       	mov	r6, r8
     9c0:	79 2c       	mov	r7, r9
     9c2:	ca 2c       	mov	r12, r10
     9c4:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     9c6:	20 2e       	mov	r2, r16
     9c8:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     9ca:	0f 5f       	subi	r16, 0xFF	; 255
     9cc:	1f 4f       	sbci	r17, 0xFF	; 255
     9ce:	06 30       	cpi	r16, 0x06	; 6
     9d0:	11 05       	cpc	r17, r1
     9d2:	29 f7       	brne	.-54     	; 0x99e <fourPointCalc+0x3bc>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLongRef; 
	pointsLongRef = distIndex(indexMax);
     9d4:	82 2d       	mov	r24, r2
     9d6:	93 2d       	mov	r25, r3
     9d8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <distIndex>
	
	int pointsLong[2] = {(pointsLongRef[0]), (pointsLongRef[1])};
     9dc:	fc 01       	movw	r30, r24
     9de:	e0 80       	ld	r14, Z
     9e0:	f1 80       	ldd	r15, Z+1	; 0x01
     9e2:	fa 8e       	std	Y+26, r15	; 0x1a
     9e4:	e9 8e       	std	Y+25, r14	; 0x19
     9e6:	02 81       	ldd	r16, Z+2	; 0x02
     9e8:	13 81       	ldd	r17, Z+3	; 0x03
     9ea:	1c 8f       	std	Y+28, r17	; 0x1c
     9ec:	0b 8f       	std	Y+27, r16	; 0x1b
	
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     9ee:	ee 0c       	add	r14, r14
     9f0:	ff 1c       	adc	r15, r15
     9f2:	ee 0c       	add	r14, r14
     9f4:	ff 1c       	adc	r15, r15
     9f6:	e4 0c       	add	r14, r4
     9f8:	f5 1c       	adc	r15, r5
     9fa:	00 0f       	add	r16, r16
     9fc:	11 1f       	adc	r17, r17
     9fe:	00 0f       	add	r16, r16
     a00:	11 1f       	adc	r17, r17
     a02:	04 0d       	add	r16, r4
     a04:	15 1d       	adc	r17, r5
     a06:	f7 01       	movw	r30, r14
     a08:	60 81       	ld	r22, Z
     a0a:	71 81       	ldd	r23, Z+1	; 0x01
     a0c:	f8 01       	movw	r30, r16
     a0e:	80 81       	ld	r24, Z
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	68 0f       	add	r22, r24
     a14:	79 1f       	adc	r23, r25
     a16:	77 23       	and	r23, r23
     a18:	14 f4       	brge	.+4      	; 0xa1e <fourPointCalc+0x43c>
     a1a:	6f 5f       	subi	r22, 0xFF	; 255
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	75 95       	asr	r23
     a20:	67 95       	ror	r22
     a22:	07 2e       	mov	r0, r23
     a24:	00 0c       	add	r0, r0
     a26:	88 0b       	sbc	r24, r24
     a28:	99 0b       	sbc	r25, r25
     a2a:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     a2e:	4b 01       	movw	r8, r22
     a30:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     a32:	f7 01       	movw	r30, r14
     a34:	62 81       	ldd	r22, Z+2	; 0x02
     a36:	73 81       	ldd	r23, Z+3	; 0x03
     a38:	f8 01       	movw	r30, r16
     a3a:	82 81       	ldd	r24, Z+2	; 0x02
     a3c:	93 81       	ldd	r25, Z+3	; 0x03
     a3e:	68 0f       	add	r22, r24
     a40:	79 1f       	adc	r23, r25
     a42:	77 23       	and	r23, r23
     a44:	14 f4       	brge	.+4      	; 0xa4a <fourPointCalc+0x468>
     a46:	6f 5f       	subi	r22, 0xFF	; 255
     a48:	7f 4f       	sbci	r23, 0xFF	; 255
     a4a:	75 95       	asr	r23
     a4c:	67 95       	ror	r22
     a4e:	07 2e       	mov	r0, r23
     a50:	00 0c       	add	r0, r0
     a52:	88 0b       	sbc	r24, r24
     a54:	99 0b       	sbc	r25, r25
     a56:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     a5a:	69 a3       	std	Y+33, r22	; 0x21
     a5c:	7a a3       	std	Y+34, r23	; 0x22
     a5e:	8b a3       	std	Y+35, r24	; 0x23
     a60:	9c a3       	std	Y+36, r25	; 0x24
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     a62:	9e 01       	movw	r18, r28
     a64:	21 5e       	subi	r18, 0xE1	; 225
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	ae 01       	movw	r20, r28
     a6a:	43 5e       	subi	r20, 0xE3	; 227
     a6c:	5f 4f       	sbci	r21, 0xFF	; 255
     a6e:	be 01       	movw	r22, r28
     a70:	6f 5f       	subi	r22, 0xFF	; 255
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	ce 01       	movw	r24, r28
     a76:	49 96       	adiw	r24, 0x19	; 25
     a78:	0e 94 44 02 	call	0x488	; 0x488 <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     a7c:	0d 8d       	ldd	r16, Y+29	; 0x1d
     a7e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a80:	00 0f       	add	r16, r16
     a82:	11 1f       	adc	r17, r17
     a84:	00 0f       	add	r16, r16
     a86:	11 1f       	adc	r17, r17
     a88:	04 0d       	add	r16, r4
     a8a:	15 1d       	adc	r17, r5
     a8c:	2f 8c       	ldd	r2, Y+31	; 0x1f
     a8e:	38 a0       	ldd	r3, Y+32	; 0x20
     a90:	22 0c       	add	r2, r2
     a92:	33 1c       	adc	r3, r3
     a94:	22 0c       	add	r2, r2
     a96:	33 1c       	adc	r3, r3
     a98:	24 0c       	add	r2, r4
     a9a:	35 1c       	adc	r3, r5
     a9c:	f8 01       	movw	r30, r16
     a9e:	60 81       	ld	r22, Z
     aa0:	71 81       	ldd	r23, Z+1	; 0x01
     aa2:	f1 01       	movw	r30, r2
     aa4:	80 81       	ld	r24, Z
     aa6:	91 81       	ldd	r25, Z+1	; 0x01
     aa8:	68 1b       	sub	r22, r24
     aaa:	79 0b       	sbc	r23, r25
     aac:	07 2e       	mov	r0, r23
     aae:	00 0c       	add	r0, r0
     ab0:	88 0b       	sbc	r24, r24
     ab2:	99 0b       	sbc	r25, r25
     ab4:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
     ab8:	6b 01       	movw	r12, r22
     aba:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     abc:	f8 01       	movw	r30, r16
     abe:	62 81       	ldd	r22, Z+2	; 0x02
     ac0:	73 81       	ldd	r23, Z+3	; 0x03
     ac2:	f1 01       	movw	r30, r2
     ac4:	82 81       	ldd	r24, Z+2	; 0x02
     ac6:	93 81       	ldd	r25, Z+3	; 0x03
     ac8:	68 1b       	sub	r22, r24
     aca:	79 0b       	sbc	r23, r25
     acc:	07 2e       	mov	r0, r23
     ace:	00 0c       	add	r0, r0
     ad0:	88 0b       	sbc	r24, r24
     ad2:	99 0b       	sbc	r25, r25
     ad4:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     ad8:	90 58       	subi	r25, 0x80	; 128
     ada:	a7 01       	movw	r20, r14
     adc:	96 01       	movw	r18, r12
     ade:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <atan2>
	theta += M_PI/2.0;
     ae2:	2b ed       	ldi	r18, 0xDB	; 219
     ae4:	3f e0       	ldi	r19, 0x0F	; 15
     ae6:	49 ec       	ldi	r20, 0xC9	; 201
     ae8:	5f e3       	ldi	r21, 0x3F	; 63
     aea:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
     aee:	6b 01       	movw	r12, r22
     af0:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     af2:	a5 01       	movw	r20, r10
     af4:	94 01       	movw	r18, r8
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	94 e4       	ldi	r25, 0x44	; 68
     afe:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
     b02:	4b 01       	movw	r8, r22
     b04:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     b06:	29 a1       	ldd	r18, Y+33	; 0x21
     b08:	3a a1       	ldd	r19, Y+34	; 0x22
     b0a:	4b a1       	ldd	r20, Y+35	; 0x23
     b0c:	5c a1       	ldd	r21, Y+36	; 0x24
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	8f eb       	ldi	r24, 0xBF	; 191
     b14:	93 e4       	ldi	r25, 0x43	; 67
     b16:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
     b1a:	2b 01       	movw	r4, r22
     b1c:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     b1e:	c7 01       	movw	r24, r14
     b20:	b6 01       	movw	r22, r12
     b22:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <sin>
     b26:	69 a3       	std	Y+33, r22	; 0x21
     b28:	7a a3       	std	Y+34, r23	; 0x22
     b2a:	8b a3       	std	Y+35, r24	; 0x23
     b2c:	9c a3       	std	Y+36, r25	; 0x24
     b2e:	c7 01       	movw	r24, r14
     b30:	b6 01       	movw	r22, r12
     b32:	0e 94 4d 14 	call	0x289a	; 0x289a <cos>
     b36:	6d a3       	std	Y+37, r22	; 0x25
     b38:	7e a3       	std	Y+38, r23	; 0x26
     b3a:	8f a3       	std	Y+39, r24	; 0x27
     b3c:	98 a7       	std	Y+40, r25	; 0x28
     b3e:	0a e5       	ldi	r16, 0x5A	; 90
     b40:	11 e0       	ldi	r17, 0x01	; 1
     b42:	29 a1       	ldd	r18, Y+33	; 0x21
     b44:	3a a1       	ldd	r19, Y+34	; 0x22
     b46:	4b a1       	ldd	r20, Y+35	; 0x23
     b48:	5c a1       	ldd	r21, Y+36	; 0x24
     b4a:	c3 01       	movw	r24, r6
     b4c:	b2 01       	movw	r22, r4
     b4e:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     b52:	69 a7       	std	Y+41, r22	; 0x29
     b54:	7a a7       	std	Y+42, r23	; 0x2a
     b56:	8b a7       	std	Y+43, r24	; 0x2b
     b58:	9c a7       	std	Y+44, r25	; 0x2c
     b5a:	2d a1       	ldd	r18, Y+37	; 0x25
     b5c:	3e a1       	ldd	r19, Y+38	; 0x26
     b5e:	4f a1       	ldd	r20, Y+39	; 0x27
     b60:	58 a5       	ldd	r21, Y+40	; 0x28
     b62:	c5 01       	movw	r24, r10
     b64:	b4 01       	movw	r22, r8
     b66:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     b6a:	9b 01       	movw	r18, r22
     b6c:	ac 01       	movw	r20, r24
     b6e:	69 a5       	ldd	r22, Y+41	; 0x29
     b70:	7a a5       	ldd	r23, Y+42	; 0x2a
     b72:	8b a5       	ldd	r24, Y+43	; 0x2b
     b74:	9c a5       	ldd	r25, Y+44	; 0x2c
     b76:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
     b7a:	f8 01       	movw	r30, r16
     b7c:	60 83       	st	Z, r22
     b7e:	71 83       	std	Z+1, r23	; 0x01
     b80:	82 83       	std	Z+2, r24	; 0x02
     b82:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     b84:	2d a1       	ldd	r18, Y+37	; 0x25
     b86:	3e a1       	ldd	r19, Y+38	; 0x26
     b88:	4f a1       	ldd	r20, Y+39	; 0x27
     b8a:	58 a5       	ldd	r21, Y+40	; 0x28
     b8c:	c3 01       	movw	r24, r6
     b8e:	b2 01       	movw	r22, r4
     b90:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     b94:	2b 01       	movw	r4, r22
     b96:	3c 01       	movw	r6, r24
     b98:	29 a1       	ldd	r18, Y+33	; 0x21
     b9a:	3a a1       	ldd	r19, Y+34	; 0x22
     b9c:	4b a1       	ldd	r20, Y+35	; 0x23
     b9e:	5c a1       	ldd	r21, Y+36	; 0x24
     ba0:	c5 01       	movw	r24, r10
     ba2:	b4 01       	movw	r22, r8
     ba4:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	c3 01       	movw	r24, r6
     bae:	b2 01       	movw	r22, r4
     bb0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
     bb4:	f8 01       	movw	r30, r16
     bb6:	64 83       	std	Z+4, r22	; 0x04
     bb8:	75 83       	std	Z+5, r23	; 0x05
     bba:	86 83       	std	Z+6, r24	; 0x06
     bbc:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta;
     bbe:	f7 fa       	bst	r15, 7
     bc0:	f0 94       	com	r15
     bc2:	f7 f8       	bld	r15, 7
     bc4:	f0 94       	com	r15
     bc6:	c0 86       	std	Z+8, r12	; 0x08
     bc8:	d1 86       	std	Z+9, r13	; 0x09
     bca:	e2 86       	std	Z+10, r14	; 0x0a
     bcc:	f3 86       	std	Z+11, r15	; 0x0b
	
	return centerFour;
}
     bce:	c8 01       	movw	r24, r16
     bd0:	ce 5b       	subi	r28, 0xBE	; 190
     bd2:	df 4f       	sbci	r29, 0xFF	; 255
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	bf 90       	pop	r11
     bf0:	af 90       	pop	r10
     bf2:	9f 90       	pop	r9
     bf4:	8f 90       	pop	r8
     bf6:	7f 90       	pop	r7
     bf8:	6f 90       	pop	r6
     bfa:	5f 90       	pop	r5
     bfc:	4f 90       	pop	r4
     bfe:	3f 90       	pop	r3
     c00:	2f 90       	pop	r2
     c02:	08 95       	ret

00000c04 <localization_calc>:
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
     c04:	4f 92       	push	r4
     c06:	5f 92       	push	r5
     c08:	6f 92       	push	r6
     c0a:	7f 92       	push	r7
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	68 97       	sbiw	r28, 0x18	; 24
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     c32:	0d b7       	in	r16, 0x3d	; 61
     c34:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     c36:	80 81       	ld	r24, Z
     c38:	91 81       	ldd	r25, Z+1	; 0x01
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	80 85       	ldd	r24, Z+8	; 0x08
     c40:	91 85       	ldd	r25, Z+9	; 0x09
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	8b 83       	std	Y+3, r24	; 0x03
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	9e 83       	std	Y+6, r25	; 0x06
     c4c:	8d 83       	std	Y+5, r24	; 0x05
     c4e:	82 85       	ldd	r24, Z+10	; 0x0a
     c50:	93 85       	ldd	r25, Z+11	; 0x0b
     c52:	98 87       	std	Y+8, r25	; 0x08
     c54:	8f 83       	std	Y+7, r24	; 0x07
     c56:	84 81       	ldd	r24, Z+4	; 0x04
     c58:	95 81       	ldd	r25, Z+5	; 0x05
     c5a:	9a 87       	std	Y+10, r25	; 0x0a
     c5c:	89 87       	std	Y+9, r24	; 0x09
     c5e:	84 85       	ldd	r24, Z+12	; 0x0c
     c60:	95 85       	ldd	r25, Z+13	; 0x0d
     c62:	9c 87       	std	Y+12, r25	; 0x0c
     c64:	8b 87       	std	Y+11, r24	; 0x0b
     c66:	86 81       	ldd	r24, Z+6	; 0x06
     c68:	97 81       	ldd	r25, Z+7	; 0x07
     c6a:	9e 87       	std	Y+14, r25	; 0x0e
     c6c:	8d 87       	std	Y+13, r24	; 0x0d
     c6e:	86 85       	ldd	r24, Z+14	; 0x0e
     c70:	97 85       	ldd	r25, Z+15	; 0x0f
     c72:	98 8b       	std	Y+16, r25	; 0x10
     c74:	8f 87       	std	Y+15, r24	; 0x0f
		{rawStarData[3], rawStarData[7]}
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     c76:	fe 01       	movw	r30, r28
     c78:	71 96       	adiw	r30, 0x11	; 17
     c7a:	88 e0       	ldi	r24, 0x08	; 8
     c7c:	df 01       	movw	r26, r30
     c7e:	1d 92       	st	X+, r1
     c80:	8a 95       	dec	r24
     c82:	e9 f7       	brne	.-6      	; 0xc7e <localization_calc+0x7a>
     c84:	70 97       	sbiw	r30, 0x10	; 16
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     c8e:	40 81       	ld	r20, Z
     c90:	51 81       	ldd	r21, Z+1	; 0x01
     c92:	4f 3f       	cpi	r20, 0xFF	; 255
     c94:	53 40       	sbci	r21, 0x03	; 3
     c96:	71 f0       	breq	.+28     	; 0xcb4 <localization_calc+0xb0>
			pointIndices[numPoints] = i;
     c98:	dc 01       	movw	r26, r24
     c9a:	aa 0f       	add	r26, r26
     c9c:	bb 1f       	adc	r27, r27
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	4c 0f       	add	r20, r28
     ca4:	5d 1f       	adc	r21, r29
     ca6:	a4 0f       	add	r26, r20
     ca8:	b5 1f       	adc	r27, r21
     caa:	51 96       	adiw	r26, 0x11	; 17
     cac:	3c 93       	st	X, r19
     cae:	2e 93       	st	-X, r18
     cb0:	50 97       	sbiw	r26, 0x10	; 16
			numPoints++;
     cb2:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     cb4:	2f 5f       	subi	r18, 0xFF	; 255
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	34 96       	adiw	r30, 0x04	; 4
     cba:	24 30       	cpi	r18, 0x04	; 4
     cbc:	31 05       	cpc	r19, r1
     cbe:	39 f7       	brne	.-50     	; 0xc8e <localization_calc+0x8a>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <localization_calc+0xc2>
     cc4:	8b c0       	rjmp	.+278    	; 0xddc <localization_calc+0x1d8>
     cc6:	ed b6       	in	r14, 0x3d	; 61
     cc8:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     cca:	6c 01       	movw	r12, r24
     ccc:	cc 0c       	add	r12, r12
     cce:	dd 1c       	adc	r13, r13
     cd0:	cc 0c       	add	r12, r12
     cd2:	dd 1c       	adc	r13, r13
     cd4:	ad b7       	in	r26, 0x3d	; 61
     cd6:	be b7       	in	r27, 0x3e	; 62
     cd8:	ac 19       	sub	r26, r12
     cda:	bd 09       	sbc	r27, r13
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	be bf       	out	0x3e, r27	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	ad bf       	out	0x3d, r26	; 61
     ce6:	ed b7       	in	r30, 0x3d	; 61
     ce8:	fe b7       	in	r31, 0x3e	; 62
     cea:	31 96       	adiw	r30, 0x01	; 1
     cec:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     cee:	18 16       	cp	r1, r24
     cf0:	19 06       	cpc	r1, r25
     cf2:	24 f5       	brge	.+72     	; 0xd3c <localization_calc+0x138>
     cf4:	9e 01       	movw	r18, r28
     cf6:	2f 5e       	subi	r18, 0xEF	; 239
     cf8:	3f 4f       	sbci	r19, 0xFF	; 255
     cfa:	df 01       	movw	r26, r30
     cfc:	ce 0e       	add	r12, r30
     cfe:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     d00:	f9 01       	movw	r30, r18
     d02:	41 91       	ld	r20, Z+
     d04:	51 91       	ld	r21, Z+
     d06:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     d08:	fa 01       	movw	r30, r20
     d0a:	ee 0f       	add	r30, r30
     d0c:	ff 1f       	adc	r31, r31
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	41 e0       	ldi	r20, 0x01	; 1
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	4c 0f       	add	r20, r28
     d18:	5d 1f       	adc	r21, r29
     d1a:	e4 0f       	add	r30, r20
     d1c:	f5 1f       	adc	r31, r21
     d1e:	40 81       	ld	r20, Z
     d20:	51 81       	ldd	r21, Z+1	; 0x01
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	5c 93       	st	X, r21
     d26:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     d28:	42 81       	ldd	r20, Z+2	; 0x02
     d2a:	53 81       	ldd	r21, Z+3	; 0x03
     d2c:	13 96       	adiw	r26, 0x03	; 3
     d2e:	5c 93       	st	X, r21
     d30:	4e 93       	st	-X, r20
     d32:	12 97       	sbiw	r26, 0x02	; 2
     d34:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     d36:	ac 15       	cp	r26, r12
     d38:	bd 05       	cpc	r27, r13
     d3a:	11 f7       	brne	.-60     	; 0xd00 <localization_calc+0xfc>
			points[i][0] = pvect[index][0];
			points[i][1] = pvect[index][1];
		}
		
		
		m_red(ON);
     d3c:	6e 9a       	sbi	0x0d, 6	; 13
     d3e:	76 98       	cbi	0x0e, 6	; 14
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     d40:	db 01       	movw	r26, r22
     d42:	4d 90       	ld	r4, X+
     d44:	5d 90       	ld	r5, X+
     d46:	6d 90       	ld	r6, X+
     d48:	7c 90       	ld	r7, X
     d4a:	13 97       	sbiw	r26, 0x03	; 3
     d4c:	e2 e7       	ldi	r30, 0x72	; 114
     d4e:	f1 e0       	ldi	r31, 0x01	; 1
     d50:	40 82       	st	Z, r4
     d52:	51 82       	std	Z+1, r5	; 0x01
     d54:	62 82       	std	Z+2, r6	; 0x02
     d56:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     d58:	14 96       	adiw	r26, 0x04	; 4
     d5a:	4d 90       	ld	r4, X+
     d5c:	5d 90       	ld	r5, X+
     d5e:	6d 90       	ld	r6, X+
     d60:	7c 90       	ld	r7, X
     d62:	17 97       	sbiw	r26, 0x07	; 7
     d64:	44 82       	std	Z+4, r4	; 0x04
     d66:	55 82       	std	Z+5, r5	; 0x05
     d68:	66 82       	std	Z+6, r6	; 0x06
     d6a:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     d6c:	18 96       	adiw	r26, 0x08	; 8
     d6e:	4d 91       	ld	r20, X+
     d70:	5d 91       	ld	r21, X+
     d72:	6d 91       	ld	r22, X+
     d74:	7c 91       	ld	r23, X
     d76:	1b 97       	sbiw	r26, 0x0b	; 11
     d78:	40 87       	std	Z+8, r20	; 0x08
     d7a:	51 87       	std	Z+9, r21	; 0x09
     d7c:	62 87       	std	Z+10, r22	; 0x0a
     d7e:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     d80:	04 97       	sbiw	r24, 0x04	; 4
     d82:	29 f4       	brne	.+10     	; 0xd8e <localization_calc+0x18a>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     d84:	c5 01       	movw	r24, r10
     d86:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <fourPointCalc>
     d8a:	dc 01       	movw	r26, r24
				break;
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <localization_calc+0x18e>
				
			case 3 : 
				//calcPointer = threePointCalc(points);
				calcPointer = &rc[0];
     d8e:	a2 e7       	ldi	r26, 0x72	; 114
     d90:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				calcPointer = &rc[0];
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     d92:	4d 91       	ld	r20, X+
     d94:	5d 91       	ld	r21, X+
     d96:	6d 91       	ld	r22, X+
     d98:	7c 91       	ld	r23, X
     d9a:	13 97       	sbiw	r26, 0x03	; 3
     d9c:	e6 e6       	ldi	r30, 0x66	; 102
     d9e:	f1 e0       	ldi	r31, 0x01	; 1
     da0:	40 83       	st	Z, r20
     da2:	51 83       	std	Z+1, r21	; 0x01
     da4:	62 83       	std	Z+2, r22	; 0x02
     da6:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     da8:	14 96       	adiw	r26, 0x04	; 4
     daa:	4d 91       	ld	r20, X+
     dac:	5d 91       	ld	r21, X+
     dae:	6d 91       	ld	r22, X+
     db0:	7c 91       	ld	r23, X
     db2:	17 97       	sbiw	r26, 0x07	; 7
     db4:	44 83       	std	Z+4, r20	; 0x04
     db6:	55 83       	std	Z+5, r21	; 0x05
     db8:	66 83       	std	Z+6, r22	; 0x06
     dba:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     dbc:	18 96       	adiw	r26, 0x08	; 8
     dbe:	8d 91       	ld	r24, X+
     dc0:	9d 91       	ld	r25, X+
     dc2:	0d 90       	ld	r0, X+
     dc4:	bc 91       	ld	r27, X
     dc6:	a0 2d       	mov	r26, r0
     dc8:	80 87       	std	Z+8, r24	; 0x08
     dca:	91 87       	std	Z+9, r25	; 0x09
     dcc:	a2 87       	std	Z+10, r26	; 0x0a
     dce:	b3 87       	std	Z+11, r27	; 0x0b
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	fe be       	out	0x3e, r15	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	ed be       	out	0x3d, r14	; 61
     dda:	22 c0       	rjmp	.+68     	; 0xe20 <localization_calc+0x21c>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     ddc:	fb 01       	movw	r30, r22
     dde:	80 81       	ld	r24, Z
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	a2 81       	ldd	r26, Z+2	; 0x02
     de4:	b3 81       	ldd	r27, Z+3	; 0x03
     de6:	e6 e6       	ldi	r30, 0x66	; 102
     de8:	f1 e0       	ldi	r31, 0x01	; 1
     dea:	80 83       	st	Z, r24
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	a2 83       	std	Z+2, r26	; 0x02
     df0:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     df2:	db 01       	movw	r26, r22
     df4:	14 96       	adiw	r26, 0x04	; 4
     df6:	cd 90       	ld	r12, X+
     df8:	dd 90       	ld	r13, X+
     dfa:	ed 90       	ld	r14, X+
     dfc:	fc 90       	ld	r15, X
     dfe:	17 97       	sbiw	r26, 0x07	; 7
     e00:	c4 82       	std	Z+4, r12	; 0x04
     e02:	d5 82       	std	Z+5, r13	; 0x05
     e04:	e6 82       	std	Z+6, r14	; 0x06
     e06:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];
     e08:	18 96       	adiw	r26, 0x08	; 8
     e0a:	4d 91       	ld	r20, X+
     e0c:	5d 91       	ld	r21, X+
     e0e:	6d 91       	ld	r22, X+
     e10:	7c 91       	ld	r23, X
     e12:	1b 97       	sbiw	r26, 0x0b	; 11
     e14:	40 87       	std	Z+8, r20	; 0x08
     e16:	51 87       	std	Z+9, r21	; 0x09
     e18:	62 87       	std	Z+10, r22	; 0x0a
     e1a:	73 87       	std	Z+11, r23	; 0x0b
		m_red(OFF);	
     e1c:	6e 9a       	sbi	0x0d, 6	; 13
     e1e:	76 9a       	sbi	0x0e, 6	; 14
	
	return robotCenter;
	
	
	
}
     e20:	86 e6       	ldi	r24, 0x66	; 102
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	1e bf       	out	0x3e, r17	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0d bf       	out	0x3d, r16	; 61
     e2e:	68 96       	adiw	r28, 0x18	; 24
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	cf 90       	pop	r12
     e4a:	bf 90       	pop	r11
     e4c:	af 90       	pop	r10
     e4e:	7f 90       	pop	r7
     e50:	6f 90       	pop	r6
     e52:	5f 90       	pop	r5
     e54:	4f 90       	pop	r4
     e56:	08 95       	ret

00000e58 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
     e58:	6e 9a       	sbi	0x0d, 6	; 13
     e5a:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey();
     e5c:	0e 94 01 01 	call	0x202	; 0x202 <initialize_robockey>

	/* Confirm successful initialization(s) */
	m_green(ON);
     e60:	6a 9a       	sbi	0x0d, 2	; 13
     e62:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
     e64:	0e 94 59 09 	call	0x12b2	; 0x12b2 <update_position>
	}
     e68:	fd cf       	rjmp	.-6      	; 0xe64 <main+0xc>

00000e6a <play>:
	// Assign Defending goal
	// Flash color of LED for defending goal
}

void play(void)
{
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	2c 97       	sbiw	r28, 0x0c	; 12
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
	// Light LED of defending goal
	// Play
	update_position();
     e7e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <update_position>
	float position_buffer[3];
	get_position(position_buffer);
     e82:	ce 01       	movw	r24, r28
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <get_position>
	if (position_buffer[0]>0) {
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	a9 01       	movw	r20, r18
     e90:	69 81       	ldd	r22, Y+1	; 0x01
     e92:	7a 81       	ldd	r23, Y+2	; 0x02
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
     e9c:	18 16       	cp	r1, r24
     e9e:	6c f4       	brge	.+26     	; 0xeba <play+0x50>
		x_target = -350;
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	af ea       	ldi	r26, 0xAF	; 175
     ea6:	b3 ec       	ldi	r27, 0xC3	; 195
     ea8:	80 93 97 01 	sts	0x0197, r24
     eac:	90 93 98 01 	sts	0x0198, r25
     eb0:	a0 93 99 01 	sts	0x0199, r26
     eb4:	b0 93 9a 01 	sts	0x019A, r27
     eb8:	0c c0       	rjmp	.+24     	; 0xed2 <play+0x68>
		} else {
		x_target = 350;
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	af ea       	ldi	r26, 0xAF	; 175
     ec0:	b3 e4       	ldi	r27, 0x43	; 67
     ec2:	80 93 97 01 	sts	0x0197, r24
     ec6:	90 93 98 01 	sts	0x0198, r25
     eca:	a0 93 99 01 	sts	0x0199, r26
     ece:	b0 93 9a 01 	sts	0x019A, r27
	}
	game_pause = 0;
     ed2:	10 92 01 01 	sts	0x0101, r1
     ed6:	10 92 00 01 	sts	0x0100, r1
}
     eda:	2c 96       	adiw	r28, 0x0c	; 12
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	08 95       	ret

00000eec <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
     eec:	80 91 80 01 	lds	r24, 0x0180
     ef0:	83 3a       	cpi	r24, 0xA3	; 163
     ef2:	f9 f0       	breq	.+62     	; 0xf32 <update_game_state+0x46>
     ef4:	28 f4       	brcc	.+10     	; 0xf00 <update_game_state+0x14>
     ef6:	81 3a       	cpi	r24, 0xA1	; 161
     ef8:	51 f0       	breq	.+20     	; 0xf0e <update_game_state+0x22>
     efa:	82 3a       	cpi	r24, 0xA2	; 162
     efc:	59 f0       	breq	.+22     	; 0xf14 <update_game_state+0x28>
     efe:	08 95       	ret
     f00:	86 3a       	cpi	r24, 0xA6	; 166
     f02:	69 f1       	breq	.+90     	; 0xf5e <update_game_state+0x72>
     f04:	87 3a       	cpi	r24, 0xA7	; 167
     f06:	91 f1       	breq	.+100    	; 0xf6c <update_game_state+0x80>
     f08:	84 3a       	cpi	r24, 0xA4	; 164
     f0a:	b1 f5       	brne	.+108    	; 0xf78 <update_game_state+0x8c>
     f0c:	21 c0       	rjmp	.+66     	; 0xf50 <update_game_state+0x64>
		case 0xA0: // Comm Test
		comm_test();
		break;
		case 0xA1: // Play
		play();
     f0e:	0e 94 35 07 	call	0xe6a	; 0xe6a <play>
		break;
     f12:	08 95       	ret
		case 0xA2: // Goal R
		SR = buffer[1];
     f14:	e1 e8       	ldi	r30, 0x81	; 129
     f16:	f1 e0       	ldi	r31, 0x01	; 1
     f18:	81 81       	ldd	r24, Z+1	; 0x01
     f1a:	80 93 7f 01 	sts	0x017F, r24
		SB = buffer[2];
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
     f20:	80 93 7e 01 	sts	0x017E, r24
}

void pause(void)
{
	// Stop within 3  seconds
	game_pause = 1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	90 93 01 01 	sts	0x0101, r25
     f2c:	80 93 00 01 	sts	0x0100, r24
     f30:	08 95       	ret
		SR = buffer[1];
		SB = buffer[2];
		pause();
		break;
		case 0xA3: // Goal B
		SR = buffer[1];
     f32:	e1 e8       	ldi	r30, 0x81	; 129
     f34:	f1 e0       	ldi	r31, 0x01	; 1
     f36:	81 81       	ldd	r24, Z+1	; 0x01
     f38:	80 93 7f 01 	sts	0x017F, r24
		SB = buffer[2];
     f3c:	82 81       	ldd	r24, Z+2	; 0x02
     f3e:	80 93 7e 01 	sts	0x017E, r24
}

void pause(void)
{
	// Stop within 3  seconds
	game_pause = 1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	90 93 01 01 	sts	0x0101, r25
     f4a:	80 93 00 01 	sts	0x0100, r24
     f4e:	08 95       	ret
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	90 93 01 01 	sts	0x0101, r25
     f58:	80 93 00 01 	sts	0x0100, r24
     f5c:	08 95       	ret

void halftime(void)
{
	// Stop play
	// Switch assigned goal
	game_pause = 1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	90 93 01 01 	sts	0x0101, r25
     f66:	80 93 00 01 	sts	0x0100, r24
     f6a:	08 95       	ret

void game_over(void)
{
	// Stop play
	// Do a victory dance based on score?
	game_pause = 1;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	90 93 01 01 	sts	0x0101, r25
     f74:	80 93 00 01 	sts	0x0100, r24
     f78:	08 95       	ret

00000f7a <wireless_recieve>:
************************************************************/

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
     f7a:	6a e0       	ldi	r22, 0x0A	; 10
     f7c:	81 e8       	ldi	r24, 0x81	; 129
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <m_rf_read>
	game_state = buffer[0];
     f84:	80 91 81 01 	lds	r24, 0x0181
     f88:	80 93 80 01 	sts	0x0180, r24
	update_game_state();
     f8c:	0e 94 76 07 	call	0xeec	; 0xeec <update_game_state>
     f90:	08 95       	ret

00000f92 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
     f92:	1f 92       	push	r1
     f94:	0f 92       	push	r0
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	0f 92       	push	r0
     f9a:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
     f9c:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
     f9e:	2a 9a       	sbi	0x05, 2	; 5
}
     fa0:	0f 90       	pop	r0
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	0f 90       	pop	r0
     fa6:	1f 90       	pop	r1
     fa8:	18 95       	reti

00000faa <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
     fb4:	28 98       	cbi	0x05, 0	; 5
}
     fb6:	0f 90       	pop	r0
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	0f 90       	pop	r0
     fbc:	1f 90       	pop	r1
     fbe:	18 95       	reti

00000fc0 <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
     fc0:	1f 92       	push	r1
     fc2:	0f 92       	push	r0
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	0f 92       	push	r0
     fc8:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
     fca:	2a 98       	cbi	0x05, 2	; 5
}
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_3>:

/* Recieve Wireless Comm */
ISR(INT2_vect){
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	2f 93       	push	r18
     fe2:	3f 93       	push	r19
     fe4:	4f 93       	push	r20
     fe6:	5f 93       	push	r21
     fe8:	6f 93       	push	r22
     fea:	7f 93       	push	r23
     fec:	8f 93       	push	r24
     fee:	9f 93       	push	r25
     ff0:	af 93       	push	r26
     ff2:	bf 93       	push	r27
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
	wireless_recieve();
     ff8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <wireless_recieve>
}
     ffc:	ff 91       	pop	r31
     ffe:	ef 91       	pop	r30
    1000:	bf 91       	pop	r27
    1002:	af 91       	pop	r26
    1004:	9f 91       	pop	r25
    1006:	8f 91       	pop	r24
    1008:	7f 91       	pop	r23
    100a:	6f 91       	pop	r22
    100c:	5f 91       	pop	r21
    100e:	4f 91       	pop	r20
    1010:	3f 91       	pop	r19
    1012:	2f 91       	pop	r18
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	0f 90       	pop	r0
    101a:	1f 90       	pop	r1
    101c:	18 95       	reti

0000101e <__vector_32>:

/* Timer 3 Timestep Rollover */
ISR(TIMER3_COMPA_vect){
    101e:	1f 92       	push	r1
    1020:	0f 92       	push	r0
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	0f 92       	push	r0
    1026:	11 24       	eor	r1, r1
    1028:	af 92       	push	r10
    102a:	bf 92       	push	r11
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	2f 93       	push	r18
    103a:	3f 93       	push	r19
    103c:	4f 93       	push	r20
    103e:	5f 93       	push	r21
    1040:	6f 93       	push	r22
    1042:	7f 93       	push	r23
    1044:	8f 93       	push	r24
    1046:	9f 93       	push	r25
    1048:	af 93       	push	r26
    104a:	bf 93       	push	r27
    104c:	ef 93       	push	r30
    104e:	ff 93       	push	r31
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd, game_pause); // Update control
    1050:	a0 90 0a 01 	lds	r10, 0x010A
    1054:	b0 90 0b 01 	lds	r11, 0x010B
    1058:	c0 90 0c 01 	lds	r12, 0x010C
    105c:	d0 90 0d 01 	lds	r13, 0x010D
    1060:	e0 90 0e 01 	lds	r14, 0x010E
    1064:	f0 90 0f 01 	lds	r15, 0x010F
    1068:	00 91 10 01 	lds	r16, 0x0110
    106c:	10 91 11 01 	lds	r17, 0x0111
    1070:	20 91 93 01 	lds	r18, 0x0193
    1074:	30 91 94 01 	lds	r19, 0x0194
    1078:	40 91 95 01 	lds	r20, 0x0195
    107c:	50 91 96 01 	lds	r21, 0x0196
    1080:	60 91 97 01 	lds	r22, 0x0197
    1084:	70 91 98 01 	lds	r23, 0x0198
    1088:	80 91 99 01 	lds	r24, 0x0199
    108c:	90 91 9a 01 	lds	r25, 0x019A
    1090:	e0 91 01 01 	lds	r30, 0x0101
    1094:	ef 93       	push	r30
    1096:	e0 91 00 01 	lds	r30, 0x0100
    109a:	ef 93       	push	r30
    109c:	e0 91 8e 01 	lds	r30, 0x018E
    10a0:	ef 93       	push	r30
    10a2:	e0 91 8d 01 	lds	r30, 0x018D
    10a6:	ef 93       	push	r30
    10a8:	e0 91 8c 01 	lds	r30, 0x018C
    10ac:	ef 93       	push	r30
    10ae:	e0 91 8b 01 	lds	r30, 0x018B
    10b2:	ef 93       	push	r30
    10b4:	e0 91 05 01 	lds	r30, 0x0105
    10b8:	ef 93       	push	r30
    10ba:	e0 91 04 01 	lds	r30, 0x0104
    10be:	ef 93       	push	r30
    10c0:	e0 91 03 01 	lds	r30, 0x0103
    10c4:	ef 93       	push	r30
    10c6:	e0 91 02 01 	lds	r30, 0x0102
    10ca:	ef 93       	push	r30
    10cc:	e0 91 92 01 	lds	r30, 0x0192
    10d0:	ef 93       	push	r30
    10d2:	e0 91 91 01 	lds	r30, 0x0191
    10d6:	ef 93       	push	r30
    10d8:	e0 91 90 01 	lds	r30, 0x0190
    10dc:	ef 93       	push	r30
    10de:	e0 91 8f 01 	lds	r30, 0x018F
    10e2:	ef 93       	push	r30
    10e4:	e0 91 09 01 	lds	r30, 0x0109
    10e8:	ef 93       	push	r30
    10ea:	e0 91 08 01 	lds	r30, 0x0108
    10ee:	ef 93       	push	r30
    10f0:	e0 91 07 01 	lds	r30, 0x0107
    10f4:	ef 93       	push	r30
    10f6:	e0 91 06 01 	lds	r30, 0x0106
    10fa:	ef 93       	push	r30
    10fc:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <run_motor_control_loop>
    1100:	8d b7       	in	r24, 0x3d	; 61
    1102:	9e b7       	in	r25, 0x3e	; 62
    1104:	42 96       	adiw	r24, 0x12	; 18
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	9e bf       	out	0x3e, r25	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	8d bf       	out	0x3d, r24	; 61
}
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	bf 91       	pop	r27
    1116:	af 91       	pop	r26
    1118:	9f 91       	pop	r25
    111a:	8f 91       	pop	r24
    111c:	7f 91       	pop	r23
    111e:	6f 91       	pop	r22
    1120:	5f 91       	pop	r21
    1122:	4f 91       	pop	r20
    1124:	3f 91       	pop	r19
    1126:	2f 91       	pop	r18
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	df 90       	pop	r13
    1132:	cf 90       	pop	r12
    1134:	bf 90       	pop	r11
    1136:	af 90       	pop	r10
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	0f 90       	pop	r0
    113e:	1f 90       	pop	r1
    1140:	18 95       	reti

00001142 <__vector_29>:

/* Switch ADC Input Pin Each time reading finishes */
ISR(ADC_vect){
    1142:	1f 92       	push	r1
    1144:	0f 92       	push	r0
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	0f 92       	push	r0
    114a:	11 24       	eor	r1, r1
    114c:	2f 93       	push	r18
    114e:	3f 93       	push	r19
    1150:	4f 93       	push	r20
    1152:	5f 93       	push	r21
    1154:	6f 93       	push	r22
    1156:	7f 93       	push	r23
    1158:	8f 93       	push	r24
    115a:	9f 93       	push	r25
    115c:	af 93       	push	r26
    115e:	bf 93       	push	r27
    1160:	ef 93       	push	r30
    1162:	ff 93       	push	r31
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	28 97       	sbiw	r28, 0x08	; 8
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	cd bf       	out	0x3d, r28	; 61
	if(adc_switch()){
    1172:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <adc_switch>
    1176:	88 23       	and	r24, r24
    1178:	e1 f0       	breq	.+56     	; 0x11b2 <__vector_29+0x70>
		float puck_buffer[2];
		get_puck_location(puck_buffer);
    117a:	ce 01       	movw	r24, r28
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	0e 94 4f 11 	call	0x229e	; 0x229e <get_puck_location>
		x_target = puck_buffer[0];
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	ab 81       	ldd	r26, Y+3	; 0x03
    1188:	bc 81       	ldd	r27, Y+4	; 0x04
    118a:	80 93 97 01 	sts	0x0197, r24
    118e:	90 93 98 01 	sts	0x0198, r25
    1192:	a0 93 99 01 	sts	0x0199, r26
    1196:	b0 93 9a 01 	sts	0x019A, r27
		y_target = puck_buffer[1];
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	af 81       	ldd	r26, Y+7	; 0x07
    11a0:	b8 85       	ldd	r27, Y+8	; 0x08
    11a2:	80 93 93 01 	sts	0x0193, r24
    11a6:	90 93 94 01 	sts	0x0194, r25
    11aa:	a0 93 95 01 	sts	0x0195, r26
    11ae:	b0 93 96 01 	sts	0x0196, r27
	}
}
    11b2:	28 96       	adiw	r28, 0x08	; 8
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	ff 91       	pop	r31
    11c4:	ef 91       	pop	r30
    11c6:	bf 91       	pop	r27
    11c8:	af 91       	pop	r26
    11ca:	9f 91       	pop	r25
    11cc:	8f 91       	pop	r24
    11ce:	7f 91       	pop	r23
    11d0:	6f 91       	pop	r22
    11d2:	5f 91       	pop	r21
    11d4:	4f 91       	pop	r20
    11d6:	3f 91       	pop	r19
    11d8:	2f 91       	pop	r18
    11da:	0f 90       	pop	r0
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	0f 90       	pop	r0
    11e0:	1f 90       	pop	r1
    11e2:	18 95       	reti

000011e4 <get_position>:
/************************************************************
Public Functions
************************************************************/

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    11e4:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    11e6:	80 91 ab 01 	lds	r24, 0x01AB
    11ea:	90 91 ac 01 	lds	r25, 0x01AC
    11ee:	a0 91 ad 01 	lds	r26, 0x01AD
    11f2:	b0 91 ae 01 	lds	r27, 0x01AE
    11f6:	80 83       	st	Z, r24
    11f8:	91 83       	std	Z+1, r25	; 0x01
    11fa:	a2 83       	std	Z+2, r26	; 0x02
    11fc:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    11fe:	80 91 a7 01 	lds	r24, 0x01A7
    1202:	90 91 a8 01 	lds	r25, 0x01A8
    1206:	a0 91 a9 01 	lds	r26, 0x01A9
    120a:	b0 91 aa 01 	lds	r27, 0x01AA
    120e:	84 83       	std	Z+4, r24	; 0x04
    1210:	95 83       	std	Z+5, r25	; 0x05
    1212:	a6 83       	std	Z+6, r26	; 0x06
    1214:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    1216:	80 91 a3 01 	lds	r24, 0x01A3
    121a:	90 91 a4 01 	lds	r25, 0x01A4
    121e:	a0 91 a5 01 	lds	r26, 0x01A5
    1222:	b0 91 a6 01 	lds	r27, 0x01A6
    1226:	80 87       	std	Z+8, r24	; 0x08
    1228:	91 87       	std	Z+9, r25	; 0x09
    122a:	a2 87       	std	Z+10, r26	; 0x0a
    122c:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	08 95       	ret

00001232 <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    1232:	8f 92       	push	r8
    1234:	9f 92       	push	r9
    1236:	af 92       	push	r10
    1238:	bf 92       	push	r11
    123a:	cf 92       	push	r12
    123c:	df 92       	push	r13
    123e:	ef 92       	push	r14
    1240:	ff 92       	push	r15
    1242:	6b 01       	movw	r12, r22
    1244:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    1246:	4b 01       	movw	r8, r22
    1248:	5c 01       	movw	r10, r24
    124a:	e8 94       	clt
    124c:	b7 f8       	bld	r11, 7
    124e:	2b ed       	ldi	r18, 0xDB	; 219
    1250:	3f e0       	ldi	r19, 0x0F	; 15
    1252:	49 e4       	ldi	r20, 0x49	; 73
    1254:	50 e4       	ldi	r21, 0x40	; 64
    1256:	c5 01       	movw	r24, r10
    1258:	b4 01       	movw	r22, r8
    125a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    125e:	18 16       	cp	r1, r24
    1260:	bc f4       	brge	.+46     	; 0x1290 <theta_error_correction+0x5e>
    1262:	2b ed       	ldi	r18, 0xDB	; 219
    1264:	3f e0       	ldi	r19, 0x0F	; 15
    1266:	49 ec       	ldi	r20, 0xC9	; 201
    1268:	50 e4       	ldi	r21, 0x40	; 64
    126a:	c7 01       	movw	r24, r14
    126c:	b6 01       	movw	r22, r12
    126e:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    1272:	a5 01       	movw	r20, r10
    1274:	94 01       	movw	r18, r8
    1276:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__divsf3>
    127a:	9b 01       	movw	r18, r22
    127c:	ac 01       	movw	r20, r24
    127e:	c7 01       	movw	r24, r14
    1280:	b6 01       	movw	r22, r12
    1282:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
    1286:	56 2f       	mov	r21, r22
    1288:	47 2f       	mov	r20, r23
    128a:	38 2f       	mov	r19, r24
    128c:	29 2f       	mov	r18, r25
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <theta_error_correction+0x66>
	else{return error;}
    1290:	5c 2d       	mov	r21, r12
    1292:	4d 2d       	mov	r20, r13
    1294:	3e 2d       	mov	r19, r14
    1296:	2f 2d       	mov	r18, r15
}
    1298:	65 2f       	mov	r22, r21
    129a:	74 2f       	mov	r23, r20
    129c:	83 2f       	mov	r24, r19
    129e:	92 2f       	mov	r25, r18
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	df 90       	pop	r13
    12a6:	cf 90       	pop	r12
    12a8:	bf 90       	pop	r11
    12aa:	af 90       	pop	r10
    12ac:	9f 90       	pop	r9
    12ae:	8f 90       	pop	r8
    12b0:	08 95       	ret

000012b2 <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    12b2:	2f 92       	push	r2
    12b4:	3f 92       	push	r3
    12b6:	4f 92       	push	r4
    12b8:	5f 92       	push	r5
    12ba:	6f 92       	push	r6
    12bc:	7f 92       	push	r7
    12be:	8f 92       	push	r8
    12c0:	9f 92       	push	r9
    12c2:	af 92       	push	r10
    12c4:	bf 92       	push	r11
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	a8 97       	sbiw	r28, 0x28	; 40
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    12e6:	ce 01       	movw	r24, r28
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	0e 94 bc 10 	call	0x2178	; 0x2178 <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    12ee:	6b 81       	ldd	r22, Y+3	; 0x03
    12f0:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    12f2:	0f 81       	ldd	r16, Y+7	; 0x07
    12f4:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    12f6:	49 85       	ldd	r20, Y+9	; 0x09
    12f8:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    12fa:	ad 85       	ldd	r26, Y+13	; 0x0d
    12fc:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    12fe:	2f 85       	ldd	r18, Y+15	; 0x0f
    1300:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    1302:	eb 89       	ldd	r30, Y+19	; 0x13
    1304:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    1306:	8d 89       	ldd	r24, Y+21	; 0x15
    1308:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    130a:	e9 80       	ldd	r14, Y+1	; 0x01
    130c:	fa 80       	ldd	r15, Y+2	; 0x02
    130e:	fa 8e       	std	Y+26, r15	; 0x1a
    1310:	e9 8e       	std	Y+25, r14	; 0x19
    1312:	1c 8f       	std	Y+28, r17	; 0x1c
    1314:	0b 8f       	std	Y+27, r16	; 0x1b
    1316:	be 8f       	std	Y+30, r27	; 0x1e
    1318:	ad 8f       	std	Y+29, r26	; 0x1d
    131a:	f8 a3       	std	Y+32, r31	; 0x20
    131c:	ef 8f       	std	Y+31, r30	; 0x1f
    131e:	7a a3       	std	Y+34, r23	; 0x22
    1320:	69 a3       	std	Y+33, r22	; 0x21
    1322:	5c a3       	std	Y+36, r21	; 0x24
    1324:	4b a3       	std	Y+35, r20	; 0x23
    1326:	3e a3       	std	Y+38, r19	; 0x26
    1328:	2d a3       	std	Y+37, r18	; 0x25
    132a:	98 a7       	std	Y+40, r25	; 0x28
    132c:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    132e:	6a e1       	ldi	r22, 0x1A	; 26
    1330:	71 e0       	ldi	r23, 0x01	; 1
    1332:	ce 01       	movw	r24, r28
    1334:	49 96       	adiw	r24, 0x19	; 25
    1336:	0e 94 02 06 	call	0xc04	; 0xc04 <localization_calc>
    133a:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    133c:	fc 01       	movw	r30, r24
    133e:	80 85       	ldd	r24, Z+8	; 0x08
    1340:	91 85       	ldd	r25, Z+9	; 0x09
    1342:	a2 85       	ldd	r26, Z+10	; 0x0a
    1344:	b3 85       	ldd	r27, Z+11	; 0x0b
    1346:	0f 2e       	mov	r0, r31
    1348:	fa e1       	ldi	r31, 0x1A	; 26
    134a:	2f 2e       	mov	r2, r31
    134c:	f1 e0       	ldi	r31, 0x01	; 1
    134e:	3f 2e       	mov	r3, r31
    1350:	f0 2d       	mov	r31, r0
    1352:	f1 01       	movw	r30, r2
    1354:	80 87       	std	Z+8, r24	; 0x08
    1356:	91 87       	std	Z+9, r25	; 0x09
    1358:	a2 87       	std	Z+10, r26	; 0x0a
    135a:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    135c:	f8 01       	movw	r30, r16
    135e:	60 85       	ldd	r22, Z+8	; 0x08
    1360:	71 85       	ldd	r23, Z+9	; 0x09
    1362:	82 85       	ldd	r24, Z+10	; 0x0a
    1364:	93 85       	ldd	r25, Z+11	; 0x0b
    1366:	0e 94 19 09 	call	0x1232	; 0x1232 <theta_error_correction>
    136a:	2b 01       	movw	r4, r22
    136c:	3c 01       	movw	r6, r24
    136e:	f8 01       	movw	r30, r16
    1370:	60 87       	std	Z+8, r22	; 0x08
    1372:	71 87       	std	Z+9, r23	; 0x09
    1374:	82 87       	std	Z+10, r24	; 0x0a
    1376:	93 87       	std	Z+11, r25	; 0x0b
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1378:	24 ea       	ldi	r18, 0xA4	; 164
    137a:	30 e7       	ldi	r19, 0x70	; 112
    137c:	4d e7       	ldi	r20, 0x7D	; 125
    137e:	5f e3       	ldi	r21, 0x3F	; 63
    1380:	60 81       	ld	r22, Z
    1382:	71 81       	ldd	r23, Z+1	; 0x01
    1384:	82 81       	ldd	r24, Z+2	; 0x02
    1386:	93 81       	ldd	r25, Z+3	; 0x03
    1388:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    138c:	4b 01       	movw	r8, r22
    138e:	5c 01       	movw	r10, r24
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	37 ed       	ldi	r19, 0xD7	; 215
    1394:	43 e2       	ldi	r20, 0x23	; 35
    1396:	5c e3       	ldi	r21, 0x3C	; 60
    1398:	60 91 ab 01 	lds	r22, 0x01AB
    139c:	70 91 ac 01 	lds	r23, 0x01AC
    13a0:	80 91 ad 01 	lds	r24, 0x01AD
    13a4:	90 91 ae 01 	lds	r25, 0x01AE
    13a8:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    13ac:	9b 01       	movw	r18, r22
    13ae:	ac 01       	movw	r20, r24
    13b0:	c5 01       	movw	r24, r10
    13b2:	b4 01       	movw	r22, r8
    13b4:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
    13b8:	4b 01       	movw	r8, r22
    13ba:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    13bc:	60 93 ab 01 	sts	0x01AB, r22
    13c0:	70 93 ac 01 	sts	0x01AC, r23
    13c4:	80 93 ad 01 	sts	0x01AD, r24
    13c8:	90 93 ae 01 	sts	0x01AE, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    13cc:	24 ea       	ldi	r18, 0xA4	; 164
    13ce:	30 e7       	ldi	r19, 0x70	; 112
    13d0:	4d e7       	ldi	r20, 0x7D	; 125
    13d2:	5f e3       	ldi	r21, 0x3F	; 63
    13d4:	f8 01       	movw	r30, r16
    13d6:	64 81       	ldd	r22, Z+4	; 0x04
    13d8:	75 81       	ldd	r23, Z+5	; 0x05
    13da:	86 81       	ldd	r24, Z+6	; 0x06
    13dc:	97 81       	ldd	r25, Z+7	; 0x07
    13de:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    13e2:	6b 01       	movw	r12, r22
    13e4:	7c 01       	movw	r14, r24
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	37 ed       	ldi	r19, 0xD7	; 215
    13ea:	43 e2       	ldi	r20, 0x23	; 35
    13ec:	5c e3       	ldi	r21, 0x3C	; 60
    13ee:	60 91 a7 01 	lds	r22, 0x01A7
    13f2:	70 91 a8 01 	lds	r23, 0x01A8
    13f6:	80 91 a9 01 	lds	r24, 0x01A9
    13fa:	90 91 aa 01 	lds	r25, 0x01AA
    13fe:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    1402:	9b 01       	movw	r18, r22
    1404:	ac 01       	movw	r20, r24
    1406:	c7 01       	movw	r24, r14
    1408:	b6 01       	movw	r22, r12
    140a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
    140e:	6b 01       	movw	r12, r22
    1410:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    1412:	60 93 a7 01 	sts	0x01A7, r22
    1416:	70 93 a8 01 	sts	0x01A8, r23
    141a:	80 93 a9 01 	sts	0x01A9, r24
    141e:	90 93 aa 01 	sts	0x01AA, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1422:	24 ea       	ldi	r18, 0xA4	; 164
    1424:	30 e7       	ldi	r19, 0x70	; 112
    1426:	4d e7       	ldi	r20, 0x7D	; 125
    1428:	5f e3       	ldi	r21, 0x3F	; 63
    142a:	c3 01       	movw	r24, r6
    142c:	b2 01       	movw	r22, r4
    142e:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    1432:	2b 01       	movw	r4, r22
    1434:	3c 01       	movw	r6, r24
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	37 ed       	ldi	r19, 0xD7	; 215
    143a:	43 e2       	ldi	r20, 0x23	; 35
    143c:	5c e3       	ldi	r21, 0x3C	; 60
    143e:	60 91 a3 01 	lds	r22, 0x01A3
    1442:	70 91 a4 01 	lds	r23, 0x01A4
    1446:	80 91 a5 01 	lds	r24, 0x01A5
    144a:	90 91 a6 01 	lds	r25, 0x01A6
    144e:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    1452:	9b 01       	movw	r18, r22
    1454:	ac 01       	movw	r20, r24
    1456:	c3 01       	movw	r24, r6
    1458:	b2 01       	movw	r22, r4
    145a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    145e:	60 93 a3 01 	sts	0x01A3, r22
    1462:	70 93 a4 01 	sts	0x01A4, r23
    1466:	80 93 a5 01 	sts	0x01A5, r24
    146a:	90 93 a6 01 	sts	0x01A6, r25
	
	robotCenterPrev[0] = x;
    146e:	f1 01       	movw	r30, r2
    1470:	80 82       	st	Z, r8
    1472:	91 82       	std	Z+1, r9	; 0x01
    1474:	a2 82       	std	Z+2, r10	; 0x02
    1476:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    1478:	c4 82       	std	Z+4, r12	; 0x04
    147a:	d5 82       	std	Z+5, r13	; 0x05
    147c:	e6 82       	std	Z+6, r14	; 0x06
    147e:	f7 82       	std	Z+7, r15	; 0x07
}
    1480:	a8 96       	adiw	r28, 0x28	; 40
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	df 90       	pop	r13
    149a:	cf 90       	pop	r12
    149c:	bf 90       	pop	r11
    149e:	af 90       	pop	r10
    14a0:	9f 90       	pop	r9
    14a2:	8f 90       	pop	r8
    14a4:	7f 90       	pop	r7
    14a6:	6f 90       	pop	r6
    14a8:	5f 90       	pop	r5
    14aa:	4f 90       	pop	r4
    14ac:	3f 90       	pop	r3
    14ae:	2f 90       	pop	r2
    14b0:	08 95       	ret

000014b2 <run_motor_control_loop>:



/* PID Control */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd, int game_pause)
{
    14b2:	4f 92       	push	r4
    14b4:	5f 92       	push	r5
    14b6:	6f 92       	push	r6
    14b8:	7f 92       	push	r7
    14ba:	8f 92       	push	r8
    14bc:	9f 92       	push	r9
    14be:	af 92       	push	r10
    14c0:	bf 92       	push	r11
    14c2:	cf 92       	push	r12
    14c4:	df 92       	push	r13
    14c6:	ef 92       	push	r14
    14c8:	ff 92       	push	r15
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	64 97       	sbiw	r28, 0x14	; 20
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	29 01       	movw	r4, r18
    14e4:	3a 01       	movw	r6, r20
    14e6:	ed 86       	std	Y+13, r14	; 0x0d
    14e8:	fe 86       	std	Y+14, r15	; 0x0e
    14ea:	0f 87       	std	Y+15, r16	; 0x0f
    14ec:	18 8b       	std	Y+16, r17	; 0x10
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    14ee:	20 91 ab 01 	lds	r18, 0x01AB
    14f2:	30 91 ac 01 	lds	r19, 0x01AC
    14f6:	40 91 ad 01 	lds	r20, 0x01AD
    14fa:	50 91 ae 01 	lds	r21, 0x01AE
    14fe:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
    1502:	6d 83       	std	Y+5, r22	; 0x05
    1504:	7e 83       	std	Y+6, r23	; 0x06
    1506:	8f 83       	std	Y+7, r24	; 0x07
    1508:	98 87       	std	Y+8, r25	; 0x08
    150a:	20 91 a7 01 	lds	r18, 0x01A7
    150e:	30 91 a8 01 	lds	r19, 0x01A8
    1512:	40 91 a9 01 	lds	r20, 0x01A9
    1516:	50 91 aa 01 	lds	r21, 0x01AA
    151a:	c3 01       	movw	r24, r6
    151c:	b2 01       	movw	r22, r4
    151e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
    1522:	69 87       	std	Y+9, r22	; 0x09
    1524:	7a 87       	std	Y+10, r23	; 0x0a
    1526:	8b 87       	std	Y+11, r24	; 0x0b
    1528:	9c 87       	std	Y+12, r25	; 0x0c
    152a:	2d 81       	ldd	r18, Y+5	; 0x05
    152c:	3e 81       	ldd	r19, Y+6	; 0x06
    152e:	4f 81       	ldd	r20, Y+7	; 0x07
    1530:	58 85       	ldd	r21, Y+8	; 0x08
    1532:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    1536:	20 91 a3 01 	lds	r18, 0x01A3
    153a:	30 91 a4 01 	lds	r19, 0x01A4
    153e:	40 91 a5 01 	lds	r20, 0x01A5
    1542:	50 91 a6 01 	lds	r21, 0x01A6
    1546:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
    154a:	69 83       	std	Y+1, r22	; 0x01
    154c:	7a 83       	std	Y+2, r23	; 0x02
    154e:	8b 83       	std	Y+3, r24	; 0x03
    1550:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    1552:	2b 01       	movw	r4, r22
    1554:	3c 01       	movw	r6, r24
    1556:	e8 94       	clt
    1558:	77 f8       	bld	r7, 7
    155a:	a6 01       	movw	r20, r12
    155c:	95 01       	movw	r18, r10
    155e:	c3 01       	movw	r24, r6
    1560:	b2 01       	movw	r22, r4
    1562:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    1566:	18 16       	cp	r1, r24
    1568:	84 f4       	brge	.+32     	; 0x158a <run_motor_control_loop+0xd8>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    156a:	29 81       	ldd	r18, Y+1	; 0x01
    156c:	3a 81       	ldd	r19, Y+2	; 0x02
    156e:	4b 81       	ldd	r20, Y+3	; 0x03
    1570:	5c 81       	ldd	r21, Y+4	; 0x04
    1572:	c3 01       	movw	r24, r6
    1574:	b2 01       	movw	r22, r4
    1576:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__divsf3>
    157a:	a6 01       	movw	r20, r12
    157c:	95 01       	movw	r18, r10
    157e:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    1582:	69 83       	std	Y+1, r22	; 0x01
    1584:	7a 83       	std	Y+2, r23	; 0x02
    1586:	8b 83       	std	Y+3, r24	; 0x03
    1588:	9c 83       	std	Y+4, r25	; 0x04
	}

	theta_error = theta_error_correction(theta_error);
    158a:	69 81       	ldd	r22, Y+1	; 0x01
    158c:	7a 81       	ldd	r23, Y+2	; 0x02
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	0e 94 19 09 	call	0x1232	; 0x1232 <theta_error_correction>
    1596:	4b 01       	movw	r8, r22
    1598:	5c 01       	movw	r10, r24
	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    159a:	9b 01       	movw	r18, r22
    159c:	ac 01       	movw	r20, r24
    159e:	6f a1       	ldd	r22, Y+39	; 0x27
    15a0:	78 a5       	ldd	r23, Y+40	; 0x28
    15a2:	89 a5       	ldd	r24, Y+41	; 0x29
    15a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    15a6:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    15aa:	6b 01       	movw	r12, r22
    15ac:	7c 01       	movw	r14, r24
	if(fabs(theta_error)>max_theta){
		theta_error = fabs(theta_error)/theta_error*max_theta;
	}

	theta_error = theta_error_correction(theta_error);
	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
    15ae:	20 91 9f 01 	lds	r18, 0x019F
    15b2:	30 91 a0 01 	lds	r19, 0x01A0
    15b6:	40 91 a1 01 	lds	r20, 0x01A1
    15ba:	50 91 a2 01 	lds	r21, 0x01A2
    15be:	c5 01       	movw	r24, r10
    15c0:	b4 01       	movw	r22, r8
    15c2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
    15c6:	2f e6       	ldi	r18, 0x6F	; 111
    15c8:	32 e1       	ldi	r19, 0x12	; 18
    15ca:	43 e8       	ldi	r20, 0x83	; 131
    15cc:	5a e3       	ldi	r21, 0x3A	; 58
    15ce:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__divsf3>
    15d2:	9b 01       	movw	r18, r22
    15d4:	ac 01       	movw	r20, r24
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    15d6:	6b a5       	ldd	r22, Y+43	; 0x2b
    15d8:	7c a5       	ldd	r23, Y+44	; 0x2c
    15da:	8d a5       	ldd	r24, Y+45	; 0x2d
    15dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    15de:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    15e2:	9b 01       	movw	r18, r22
    15e4:	ac 01       	movw	r20, r24
    15e6:	c7 01       	movw	r24, r14
    15e8:	b6 01       	movw	r22, r12
    15ea:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
	previous_theta_error = theta_error;
    15ee:	80 92 9f 01 	sts	0x019F, r8
    15f2:	90 92 a0 01 	sts	0x01A0, r9
    15f6:	a0 92 a1 01 	sts	0x01A1, r10
    15fa:	b0 92 a2 01 	sts	0x01A2, r11
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    15fe:	2b ed       	ldi	r18, 0xDB	; 219
    1600:	3f e0       	ldi	r19, 0x0F	; 15
    1602:	49 e4       	ldi	r20, 0x49	; 73
    1604:	50 e4       	ldi	r21, 0x40	; 64
    1606:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__divsf3>
    160a:	69 83       	std	Y+1, r22	; 0x01
    160c:	7a 83       	std	Y+2, r23	; 0x02
    160e:	8b 83       	std	Y+3, r24	; 0x03
    1610:	9c 83       	std	Y+4, r25	; 0x04
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	b0 58       	subi	r27, 0x80	; 128
    1618:	89 8b       	std	Y+17, r24	; 0x11
    161a:	9a 8b       	std	Y+18, r25	; 0x12
    161c:	ab 8b       	std	Y+19, r26	; 0x13
    161e:	bc 8b       	std	Y+20, r27	; 0x14
	right_duty_cycle = angular_output;
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    1620:	c5 01       	movw	r24, r10
    1622:	b4 01       	movw	r22, r8
    1624:	0e 94 4d 14 	call	0x289a	; 0x289a <cos>
    1628:	2b 01       	movw	r4, r22
    162a:	3c 01       	movw	r6, r24
    162c:	29 85       	ldd	r18, Y+9	; 0x09
    162e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1630:	4b 85       	ldd	r20, Y+11	; 0x0b
    1632:	5c 85       	ldd	r21, Y+12	; 0x0c
    1634:	ca 01       	movw	r24, r20
    1636:	b9 01       	movw	r22, r18
    1638:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    163c:	6b 01       	movw	r12, r22
    163e:	7c 01       	movw	r14, r24
    1640:	2d 81       	ldd	r18, Y+5	; 0x05
    1642:	3e 81       	ldd	r19, Y+6	; 0x06
    1644:	4f 81       	ldd	r20, Y+7	; 0x07
    1646:	58 85       	ldd	r21, Y+8	; 0x08
    1648:	ca 01       	movw	r24, r20
    164a:	b9 01       	movw	r22, r18
    164c:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    1650:	9b 01       	movw	r18, r22
    1652:	ac 01       	movw	r20, r24
    1654:	c7 01       	movw	r24, r14
    1656:	b6 01       	movw	r22, r12
    1658:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
    165c:	0e 94 93 16 	call	0x2d26	; 0x2d26 <sqrt>
    1660:	9b 01       	movw	r18, r22
    1662:	ac 01       	movw	r20, r24
    1664:	c3 01       	movw	r24, r6
    1666:	b2 01       	movw	r22, r4
    1668:	9f 77       	andi	r25, 0x7F	; 127
    166a:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    166e:	6b 01       	movw	r12, r22
    1670:	7c 01       	movw	r14, r24
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    1672:	9b 01       	movw	r18, r22
    1674:	ac 01       	movw	r20, r24
    1676:	6f a5       	ldd	r22, Y+47	; 0x2f
    1678:	78 a9       	ldd	r23, Y+48	; 0x30
    167a:	89 a9       	ldd	r24, Y+49	; 0x31
    167c:	9a a9       	ldd	r25, Y+50	; 0x32
    167e:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    1682:	2b 01       	movw	r4, r22
    1684:	3c 01       	movw	r6, r24
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
    1686:	20 91 9b 01 	lds	r18, 0x019B
    168a:	30 91 9c 01 	lds	r19, 0x019C
    168e:	40 91 9d 01 	lds	r20, 0x019D
    1692:	50 91 9e 01 	lds	r21, 0x019E
    1696:	c7 01       	movw	r24, r14
    1698:	b6 01       	movw	r22, r12
    169a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
    169e:	2f e6       	ldi	r18, 0x6F	; 111
    16a0:	32 e1       	ldi	r19, 0x12	; 18
    16a2:	43 e8       	ldi	r20, 0x83	; 131
    16a4:	5a e3       	ldi	r21, 0x3A	; 58
    16a6:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__divsf3>
    16aa:	9b 01       	movw	r18, r22
    16ac:	ac 01       	movw	r20, r24
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    16ae:	6b a9       	ldd	r22, Y+51	; 0x33
    16b0:	7c a9       	ldd	r23, Y+52	; 0x34
    16b2:	8d a9       	ldd	r24, Y+53	; 0x35
    16b4:	9e a9       	ldd	r25, Y+54	; 0x36
    16b6:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    16ba:	9b 01       	movw	r18, r22
    16bc:	ac 01       	movw	r20, r24
    16be:	c3 01       	movw	r24, r6
    16c0:	b2 01       	movw	r22, r4
    16c2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
    16c6:	2b 01       	movw	r4, r22
    16c8:	3c 01       	movw	r6, r24
	previous_linear_error = linear_error;
    16ca:	c0 92 9b 01 	sts	0x019B, r12
    16ce:	d0 92 9c 01 	sts	0x019C, r13
    16d2:	e0 92 9d 01 	sts	0x019D, r14
    16d6:	f0 92 9e 01 	sts	0x019E, r15
	if(linear_output>40.0){linear_output=40.0;}
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e2       	ldi	r20, 0x20	; 32
    16e0:	52 e4       	ldi	r21, 0x42	; 66
    16e2:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	44 f4       	brge	.+16     	; 0x16fa <run_motor_control_loop+0x248>
    16ea:	0f 2e       	mov	r0, r31
    16ec:	41 2c       	mov	r4, r1
    16ee:	51 2c       	mov	r5, r1
    16f0:	f0 e2       	ldi	r31, 0x20	; 32
    16f2:	6f 2e       	mov	r6, r31
    16f4:	f2 e4       	ldi	r31, 0x42	; 66
    16f6:	7f 2e       	mov	r7, r31
    16f8:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	52 e4       	ldi	r21, 0x42	; 66
    1702:	c3 01       	movw	r24, r6
    1704:	b2 01       	movw	r22, r4
    1706:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__divsf3>
    170a:	6b 01       	movw	r12, r22
    170c:	7c 01       	movw	r14, r24
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    170e:	c5 01       	movw	r24, r10
    1710:	b4 01       	movw	r22, r8
    1712:	9f 77       	andi	r25, 0x7F	; 127
    1714:	2b ed       	ldi	r18, 0xDB	; 219
    1716:	3f e0       	ldi	r19, 0x0F	; 15
    1718:	49 ec       	ldi	r20, 0xC9	; 201
    171a:	5f e3       	ldi	r21, 0x3F	; 63
    171c:	0e 94 48 14 	call	0x2890	; 0x2890 <__cmpsf2>
    1720:	88 23       	and	r24, r24
    1722:	0c f5       	brge	.+66     	; 0x1766 <run_motor_control_loop+0x2b4>
		left_duty_cycle += linear_output;
    1724:	29 81       	ldd	r18, Y+1	; 0x01
    1726:	3a 81       	ldd	r19, Y+2	; 0x02
    1728:	4b 81       	ldd	r20, Y+3	; 0x03
    172a:	5c 81       	ldd	r21, Y+4	; 0x04
    172c:	c7 01       	movw	r24, r14
    172e:	b6 01       	movw	r22, r12
    1730:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
    1734:	60 93 16 01 	sts	0x0116, r22
    1738:	70 93 17 01 	sts	0x0117, r23
    173c:	80 93 18 01 	sts	0x0118, r24
    1740:	90 93 19 01 	sts	0x0119, r25
		right_duty_cycle += linear_output;
    1744:	a7 01       	movw	r20, r14
    1746:	96 01       	movw	r18, r12
    1748:	69 81       	ldd	r22, Y+1	; 0x01
    174a:	7a 81       	ldd	r23, Y+2	; 0x02
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
    1754:	60 93 12 01 	sts	0x0112, r22
    1758:	70 93 13 01 	sts	0x0113, r23
    175c:	80 93 14 01 	sts	0x0114, r24
    1760:	90 93 15 01 	sts	0x0115, r25
    1764:	20 c0       	rjmp	.+64     	; 0x17a6 <run_motor_control_loop+0x2f4>
		} else{
		left_duty_cycle -= linear_output;
    1766:	a7 01       	movw	r20, r14
    1768:	96 01       	movw	r18, r12
    176a:	69 89       	ldd	r22, Y+17	; 0x11
    176c:	7a 89       	ldd	r23, Y+18	; 0x12
    176e:	8b 89       	ldd	r24, Y+19	; 0x13
    1770:	9c 89       	ldd	r25, Y+20	; 0x14
    1772:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
    1776:	60 93 16 01 	sts	0x0116, r22
    177a:	70 93 17 01 	sts	0x0117, r23
    177e:	80 93 18 01 	sts	0x0118, r24
    1782:	90 93 19 01 	sts	0x0119, r25
		right_duty_cycle -= linear_output;
    1786:	a7 01       	movw	r20, r14
    1788:	96 01       	movw	r18, r12
    178a:	69 81       	ldd	r22, Y+1	; 0x01
    178c:	7a 81       	ldd	r23, Y+2	; 0x02
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__subsf3>
    1796:	60 93 12 01 	sts	0x0112, r22
    179a:	70 93 13 01 	sts	0x0113, r23
    179e:	80 93 14 01 	sts	0x0114, r24
    17a2:	90 93 15 01 	sts	0x0115, r25
	}
	
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	a9 01       	movw	r20, r18
    17ac:	60 91 16 01 	lds	r22, 0x0116
    17b0:	70 91 17 01 	lds	r23, 0x0117
    17b4:	80 91 18 01 	lds	r24, 0x0118
    17b8:	90 91 19 01 	lds	r25, 0x0119
    17bc:	0e 94 48 14 	call	0x2890	; 0x2890 <__cmpsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	14 f4       	brge	.+4      	; 0x17c8 <run_motor_control_loop+0x316>
    17c4:	29 98       	cbi	0x05, 1	; 5
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <run_motor_control_loop+0x318>
	else{set(PORTB,1);}
    17c8:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	a9 01       	movw	r20, r18
    17d0:	60 91 12 01 	lds	r22, 0x0112
    17d4:	70 91 13 01 	lds	r23, 0x0113
    17d8:	80 91 14 01 	lds	r24, 0x0114
    17dc:	90 91 15 01 	lds	r25, 0x0115
    17e0:	0e 94 48 14 	call	0x2890	; 0x2890 <__cmpsf2>
    17e4:	88 23       	and	r24, r24
    17e6:	14 f4       	brge	.+4      	; 0x17ec <run_motor_control_loop+0x33a>
    17e8:	2b 98       	cbi	0x05, 3	; 5
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <run_motor_control_loop+0x33c>
	else{set(PORTB,3);}
    17ec:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    17ee:	80 90 16 01 	lds	r8, 0x0116
    17f2:	90 90 17 01 	lds	r9, 0x0117
    17f6:	a0 90 18 01 	lds	r10, 0x0118
    17fa:	b0 90 19 01 	lds	r11, 0x0119
    17fe:	e8 94       	clt
    1800:	b7 f8       	bld	r11, 7
    1802:	80 92 16 01 	sts	0x0116, r8
    1806:	90 92 17 01 	sts	0x0117, r9
    180a:	a0 92 18 01 	sts	0x0118, r10
    180e:	b0 92 19 01 	sts	0x0119, r11
	right_duty_cycle = fabs(right_duty_cycle);
    1812:	c0 90 12 01 	lds	r12, 0x0112
    1816:	d0 90 13 01 	lds	r13, 0x0113
    181a:	e0 90 14 01 	lds	r14, 0x0114
    181e:	f0 90 15 01 	lds	r15, 0x0115
    1822:	e8 94       	clt
    1824:	f7 f8       	bld	r15, 7
    1826:	c0 92 12 01 	sts	0x0112, r12
    182a:	d0 92 13 01 	sts	0x0113, r13
    182e:	e0 92 14 01 	sts	0x0114, r14
    1832:	f0 92 15 01 	sts	0x0115, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    1836:	a7 01       	movw	r20, r14
    1838:	96 01       	movw	r18, r12
    183a:	c5 01       	movw	r24, r10
    183c:	b4 01       	movw	r22, r8
    183e:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    1842:	18 16       	cp	r1, r24
    1844:	2c f0       	brlt	.+10     	; 0x1850 <run_motor_control_loop+0x39e>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    1846:	1c 2d       	mov	r17, r12
    1848:	0d 2d       	mov	r16, r13
    184a:	7e 2c       	mov	r7, r14
    184c:	6f 2c       	mov	r6, r15
    184e:	04 c0       	rjmp	.+8      	; 0x1858 <run_motor_control_loop+0x3a6>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    1850:	18 2d       	mov	r17, r8
    1852:	09 2d       	mov	r16, r9
    1854:	7a 2c       	mov	r7, r10
    1856:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    1858:	2d 85       	ldd	r18, Y+13	; 0x0d
    185a:	3e 85       	ldd	r19, Y+14	; 0x0e
    185c:	4f 85       	ldd	r20, Y+15	; 0x0f
    185e:	58 89       	ldd	r21, Y+16	; 0x10
    1860:	61 2f       	mov	r22, r17
    1862:	70 2f       	mov	r23, r16
    1864:	87 2d       	mov	r24, r7
    1866:	96 2d       	mov	r25, r6
    1868:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    186c:	18 16       	cp	r1, r24
    186e:	64 f5       	brge	.+88     	; 0x18c8 <run_motor_control_loop+0x416>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    1870:	21 2f       	mov	r18, r17
    1872:	30 2f       	mov	r19, r16
    1874:	47 2d       	mov	r20, r7
    1876:	56 2d       	mov	r21, r6
    1878:	c5 01       	movw	r24, r10
    187a:	b4 01       	movw	r22, r8
    187c:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__divsf3>
    1880:	2d 85       	ldd	r18, Y+13	; 0x0d
    1882:	3e 85       	ldd	r19, Y+14	; 0x0e
    1884:	4f 85       	ldd	r20, Y+15	; 0x0f
    1886:	58 89       	ldd	r21, Y+16	; 0x10
    1888:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    188c:	60 93 16 01 	sts	0x0116, r22
    1890:	70 93 17 01 	sts	0x0117, r23
    1894:	80 93 18 01 	sts	0x0118, r24
    1898:	90 93 19 01 	sts	0x0119, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    189c:	21 2f       	mov	r18, r17
    189e:	30 2f       	mov	r19, r16
    18a0:	47 2d       	mov	r20, r7
    18a2:	56 2d       	mov	r21, r6
    18a4:	c7 01       	movw	r24, r14
    18a6:	b6 01       	movw	r22, r12
    18a8:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__divsf3>
    18ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    18ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    18b0:	4f 85       	ldd	r20, Y+15	; 0x0f
    18b2:	58 89       	ldd	r21, Y+16	; 0x10
    18b4:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    18b8:	60 93 12 01 	sts	0x0112, r22
    18bc:	70 93 13 01 	sts	0x0113, r23
    18c0:	80 93 14 01 	sts	0x0114, r24
    18c4:	90 93 15 01 	sts	0x0115, r25
	}
	
	// Check game state
	if (game_pause)
    18c8:	8f a9       	ldd	r24, Y+55	; 0x37
    18ca:	98 ad       	ldd	r25, Y+56	; 0x38
    18cc:	89 2b       	or	r24, r25
    18ce:	81 f0       	breq	.+32     	; 0x18f0 <run_motor_control_loop+0x43e>
	{
		left_duty_cycle = 0;
    18d0:	10 92 16 01 	sts	0x0116, r1
    18d4:	10 92 17 01 	sts	0x0117, r1
    18d8:	10 92 18 01 	sts	0x0118, r1
    18dc:	10 92 19 01 	sts	0x0119, r1
		right_duty_cycle = 0;
    18e0:	10 92 12 01 	sts	0x0112, r1
    18e4:	10 92 13 01 	sts	0x0113, r1
    18e8:	10 92 14 01 	sts	0x0114, r1
    18ec:	10 92 15 01 	sts	0x0115, r1
	}
	
	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    18f0:	08 e8       	ldi	r16, 0x88	; 136
    18f2:	10 e0       	ldi	r17, 0x00	; 0
    18f4:	d8 01       	movw	r26, r16
    18f6:	6d 91       	ld	r22, X+
    18f8:	7c 91       	ld	r23, X
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__floatunsisf>
    1902:	20 91 16 01 	lds	r18, 0x0116
    1906:	30 91 17 01 	lds	r19, 0x0117
    190a:	40 91 18 01 	lds	r20, 0x0118
    190e:	50 91 19 01 	lds	r21, 0x0119
    1912:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    1916:	0e 94 c4 14 	call	0x2988	; 0x2988 <__fixunssfsi>
    191a:	70 93 8b 00 	sts	0x008B, r23
    191e:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    1922:	f8 01       	movw	r30, r16
    1924:	60 81       	ld	r22, Z
    1926:	71 81       	ldd	r23, Z+1	; 0x01
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__floatunsisf>
    1930:	20 91 12 01 	lds	r18, 0x0112
    1934:	30 91 13 01 	lds	r19, 0x0113
    1938:	40 91 14 01 	lds	r20, 0x0114
    193c:	50 91 15 01 	lds	r21, 0x0115
    1940:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    1944:	0e 94 c4 14 	call	0x2988	; 0x2988 <__fixunssfsi>
    1948:	70 93 8d 00 	sts	0x008D, r23
    194c:	60 93 8c 00 	sts	0x008C, r22

}
    1950:	64 96       	adiw	r28, 0x14	; 20
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
    1964:	ff 90       	pop	r15
    1966:	ef 90       	pop	r14
    1968:	df 90       	pop	r13
    196a:	cf 90       	pop	r12
    196c:	bf 90       	pop	r11
    196e:	af 90       	pop	r10
    1970:	9f 90       	pop	r9
    1972:	8f 90       	pop	r8
    1974:	7f 90       	pop	r7
    1976:	6f 90       	pop	r6
    1978:	5f 90       	pop	r5
    197a:	4f 90       	pop	r4
    197c:	08 95       	ret

0000197e <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    197e:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1980:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1982:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1984:	8c e0       	ldi	r24, 0x0C	; 12
    1986:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    198a:	e9 e6       	ldi	r30, 0x69	; 105
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	80 62       	ori	r24, 0x20	; 32
    1992:	80 83       	st	Z, r24
    1994:	80 81       	ld	r24, Z
    1996:	8f 7e       	andi	r24, 0xEF	; 239
    1998:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    199a:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    199c:	78 94       	sei
    199e:	08 95       	ret

000019a0 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    19a0:	1f 93       	push	r17
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	18 2f       	mov	r17, r24
    19a8:	d6 2f       	mov	r29, r22
    19aa:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    19ac:	0e 94 bf 0c 	call	0x197e	; 0x197e <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    19b0:	94 ea       	ldi	r25, 0xA4	; 164
    19b2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    19b6:	ec eb       	ldi	r30, 0xBC	; 188
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	90 81       	ld	r25, Z
    19bc:	99 23       	and	r25, r25
    19be:	ec f7       	brge	.-6      	; 0x19ba <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    19c0:	90 e5       	ldi	r25, 0x50	; 80
    19c2:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    19c6:	94 e8       	ldi	r25, 0x84	; 132
    19c8:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    19cc:	ec eb       	ldi	r30, 0xBC	; 188
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	90 81       	ld	r25, Z
    19d2:	99 23       	and	r25, r25
    19d4:	ec f7       	brge	.-6      	; 0x19d0 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    19d6:	90 91 b9 00 	lds	r25, 0x00B9
    19da:	98 7f       	andi	r25, 0xF8	; 248
    19dc:	90 32       	cpi	r25, 0x20	; 32
    19de:	29 f4       	brne	.+10     	; 0x19ea <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    19e0:	84 e9       	ldi	r24, 0x94	; 148
    19e2:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	2d c0       	rjmp	.+90     	; 0x1a44 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    19f0:	84 e8       	ldi	r24, 0x84	; 132
    19f2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    19f6:	ec eb       	ldi	r30, 0xBC	; 188
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	90 81       	ld	r25, Z
    19fc:	99 23       	and	r25, r25
    19fe:	ec f7       	brge	.-6      	; 0x19fa <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1a00:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a04:	84 e8       	ldi	r24, 0x84	; 132
    1a06:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1a0a:	ec eb       	ldi	r30, 0xBC	; 188
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	88 23       	and	r24, r24
    1a12:	ec f7       	brge	.-6      	; 0x1a0e <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1a14:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a18:	84 e8       	ldi	r24, 0x84	; 132
    1a1a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1a1e:	ec eb       	ldi	r30, 0xBC	; 188
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	88 23       	and	r24, r24
    1a26:	ec f7       	brge	.-6      	; 0x1a22 <m_rf_open+0x82>
	
	TWDR = packet_length;
    1a28:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a2c:	84 e8       	ldi	r24, 0x84	; 132
    1a2e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1a32:	ec eb       	ldi	r30, 0xBC	; 188
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	88 23       	and	r24, r24
    1a3a:	ec f7       	brge	.-6      	; 0x1a36 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1a3c:	84 e9       	ldi	r24, 0x94	; 148
    1a3e:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
}
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	08 95       	ret

00001a4c <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1a52:	84 ea       	ldi	r24, 0xA4	; 164
    1a54:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1a58:	ec eb       	ldi	r30, 0xBC	; 188
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	90 81       	ld	r25, Z
    1a5e:	99 23       	and	r25, r25
    1a60:	ec f7       	brge	.-6      	; 0x1a5c <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1a62:	81 e5       	ldi	r24, 0x51	; 81
    1a64:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a68:	84 e8       	ldi	r24, 0x84	; 132
    1a6a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1a6e:	ec eb       	ldi	r30, 0xBC	; 188
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	90 81       	ld	r25, Z
    1a74:	99 23       	and	r25, r25
    1a76:	ec f7       	brge	.-6      	; 0x1a72 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1a78:	80 91 b9 00 	lds	r24, 0x00B9
    1a7c:	88 7f       	andi	r24, 0xF8	; 248
    1a7e:	88 34       	cpi	r24, 0x48	; 72
    1a80:	29 f4       	brne	.+10     	; 0x1a8c <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1a82:	84 e9       	ldi	r24, 0x94	; 148
    1a84:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	41 c0       	rjmp	.+130    	; 0x1b0e <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1a8c:	84 ec       	ldi	r24, 0xC4	; 196
    1a8e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1a92:	ec eb       	ldi	r30, 0xBC	; 188
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	90 81       	ld	r25, Z
    1a98:	99 23       	and	r25, r25
    1a9a:	ec f7       	brge	.-6      	; 0x1a96 <m_rf_read+0x4a>
	bytes = TWDR;
    1a9c:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1aa0:	46 13       	cpse	r20, r22
    1aa2:	09 c0       	rjmp	.+18     	; 0x1ab6 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1aa4:	84 2f       	mov	r24, r20
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	18 16       	cp	r1, r24
    1aac:	19 06       	cpc	r1, r25
    1aae:	44 f0       	brlt	.+16     	; 0x1ac0 <m_rf_read+0x74>
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	1a c0       	rjmp	.+52     	; 0x1aea <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1ab6:	84 e9       	ldi	r24, 0x94	; 148
    1ab8:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	27 c0       	rjmp	.+78     	; 0x1b0e <m_rf_read+0xc2>
    1ac0:	d9 01       	movw	r26, r18
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	41 50       	subi	r20, 0x01	; 1
    1ac6:	51 09       	sbc	r21, r1
    1ac8:	b9 01       	movw	r22, r18
    1aca:	64 0f       	add	r22, r20
    1acc:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1ace:	ec eb       	ldi	r30, 0xBC	; 188
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1ad4:	cb eb       	ldi	r28, 0xBB	; 187
    1ad6:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1ad8:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1ada:	90 81       	ld	r25, Z
    1adc:	99 23       	and	r25, r25
    1ade:	ec f7       	brge	.-6      	; 0x1ada <m_rf_read+0x8e>
		buffer[i] = TWDR;
    1ae0:	98 81       	ld	r25, Y
    1ae2:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1ae4:	a6 17       	cp	r26, r22
    1ae6:	b7 07       	cpc	r27, r23
    1ae8:	b9 f7       	brne	.-18     	; 0x1ad8 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1aea:	84 e8       	ldi	r24, 0x84	; 132
    1aec:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1af0:	ec eb       	ldi	r30, 0xBC	; 188
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	90 81       	ld	r25, Z
    1af6:	99 23       	and	r25, r25
    1af8:	ec f7       	brge	.-6      	; 0x1af4 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
    1afa:	80 91 bb 00 	lds	r24, 0x00BB
    1afe:	f9 01       	movw	r30, r18
    1b00:	e4 0f       	add	r30, r20
    1b02:	f5 1f       	adc	r31, r21
    1b04:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1b06:	84 e9       	ldi	r24, 0x94	; 148
    1b08:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
}
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	08 95       	ret

00001b14 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    1b1a:	80 ea       	ldi	r24, 0xA0	; 160
    1b1c:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    1b20:	82 e1       	ldi	r24, 0x12	; 18
    1b22:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1b24:	09 b4       	in	r0, 0x29	; 41
    1b26:	00 fe       	sbrs	r0, 0
    1b28:	fd cf       	rjmp	.-6      	; 0x1b24 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1b2a:	80 e9       	ldi	r24, 0x90	; 144
    1b2c:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1b30:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1b34:	10 92 b1 01 	sts	0x01B1, r1
	cdc_line_rtsdtr = 0;
    1b38:	10 92 af 01 	sts	0x01AF, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    1b3c:	8c e0       	ldi	r24, 0x0C	; 12
    1b3e:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1b42:	78 94       	sei
    1b44:	08 95       	ret

00001b46 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1b46:	1f 92       	push	r1
    1b48:	0f 92       	push	r0
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	0f 92       	push	r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	8f 93       	push	r24
    1b52:	9f 93       	push	r25
    1b54:	ef 93       	push	r30
    1b56:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1b58:	e1 ee       	ldi	r30, 0xE1	; 225
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
        UDINT = 0;
    1b5e:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1b60:	83 ff       	sbrs	r24, 3
    1b62:	11 c0       	rjmp	.+34     	; 0x1b86 <__vector_10+0x40>
		UENUM = 0;
    1b64:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1b68:	91 e0       	ldi	r25, 0x01	; 1
    1b6a:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1b6e:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1b72:	92 e1       	ldi	r25, 0x12	; 18
    1b74:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1b78:	98 e0       	ldi	r25, 0x08	; 8
    1b7a:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1b7e:	10 92 b1 01 	sts	0x01B1, r1
		cdc_line_rtsdtr = 0;
    1b82:	10 92 af 01 	sts	0x01AF, r1
        }
	if (intbits & (1<<SOFI)) {
    1b86:	82 ff       	sbrs	r24, 2
    1b88:	13 c0       	rjmp	.+38     	; 0x1bb0 <__vector_10+0x6a>
		if (usb_configuration) {
    1b8a:	80 91 b1 01 	lds	r24, 0x01B1
    1b8e:	88 23       	and	r24, r24
    1b90:	79 f0       	breq	.+30     	; 0x1bb0 <__vector_10+0x6a>
			t = transmit_flush_timer;
    1b92:	80 91 b0 01 	lds	r24, 0x01B0
			if (t) {
    1b96:	88 23       	and	r24, r24
    1b98:	59 f0       	breq	.+22     	; 0x1bb0 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1b9a:	81 50       	subi	r24, 0x01	; 1
    1b9c:	80 93 b0 01 	sts	0x01B0, r24
				if (!t) {
    1ba0:	81 11       	cpse	r24, r1
    1ba2:	06 c0       	rjmp	.+12     	; 0x1bb0 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1ba4:	84 e0       	ldi	r24, 0x04	; 4
    1ba6:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1baa:	8a e3       	ldi	r24, 0x3A	; 58
    1bac:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1bb0:	ff 91       	pop	r31
    1bb2:	ef 91       	pop	r30
    1bb4:	9f 91       	pop	r25
    1bb6:	8f 91       	pop	r24
    1bb8:	0f 90       	pop	r0
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	0f 90       	pop	r0
    1bbe:	1f 90       	pop	r1
    1bc0:	18 95       	reti

00001bc2 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1bc2:	1f 92       	push	r1
    1bc4:	0f 92       	push	r0
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	0f 92       	push	r0
    1bca:	11 24       	eor	r1, r1
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	2f 93       	push	r18
    1bd2:	3f 93       	push	r19
    1bd4:	4f 93       	push	r20
    1bd6:	5f 93       	push	r21
    1bd8:	6f 93       	push	r22
    1bda:	7f 93       	push	r23
    1bdc:	8f 93       	push	r24
    1bde:	9f 93       	push	r25
    1be0:	af 93       	push	r26
    1be2:	bf 93       	push	r27
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	ef 93       	push	r30
    1bea:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1bec:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1bf0:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1bf4:	83 ff       	sbrs	r24, 3
    1bf6:	4c c1       	rjmp	.+664    	; 0x1e90 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    1bf8:	e1 ef       	ldi	r30, 0xF1	; 241
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    1bfe:	80 81       	ld	r24, Z
                wValue = UEDATX;
    1c00:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1c02:	90 81       	ld	r25, Z
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    1c08:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    1c0a:	90 81       	ld	r25, Z
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	59 2b       	or	r21, r25
                wLength = UEDATX;
    1c10:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    1c12:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1c14:	92 ef       	ldi	r25, 0xF2	; 242
    1c16:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    1c1a:	86 30       	cpi	r24, 0x06	; 6
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <__vector_11+0x5e>
    1c1e:	58 c0       	rjmp	.+176    	; 0x1cd0 <__vector_11+0x10e>
    1c20:	04 c0       	rjmp	.+8      	; 0x1c2a <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1c22:	81 e2       	ldi	r24, 0x21	; 33
    1c24:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1c28:	3a c1       	rjmp	.+628    	; 0x1e9e <__vector_11+0x2dc>
    1c2a:	66 e0       	ldi	r22, 0x06	; 6
    1c2c:	80 e1       	ldi	r24, 0x10	; 16
    1c2e:	91 e0       	ldi	r25, 0x01	; 1
				}
				desc_val = pgm_read_word(list);
    1c30:	fc 01       	movw	r30, r24
    1c32:	a5 91       	lpm	r26, Z+
    1c34:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    1c36:	2a 17       	cp	r18, r26
    1c38:	3b 07       	cpc	r19, r27
    1c3a:	11 f0       	breq	.+4      	; 0x1c40 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    1c3c:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1c3e:	23 c0       	rjmp	.+70     	; 0x1c86 <__vector_11+0xc4>
				}
				list += 2;
    1c40:	fc 01       	movw	r30, r24
    1c42:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1c44:	a5 91       	lpm	r26, Z+
    1c46:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    1c48:	4a 17       	cp	r20, r26
    1c4a:	5b 07       	cpc	r21, r27
    1c4c:	11 f0       	breq	.+4      	; 0x1c52 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    1c4e:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1c50:	1a c0       	rjmp	.+52     	; 0x1c86 <__vector_11+0xc4>
				}
				list += 2;
    1c52:	fc 01       	movw	r30, r24
    1c54:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1c56:	45 91       	lpm	r20, Z+
    1c58:	54 91       	lpm	r21, Z
				list += 2;
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1c5e:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1c60:	87 2f       	mov	r24, r23
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1c66:	8f 3f       	cpi	r24, 0xFF	; 255
    1c68:	91 05       	cpc	r25, r1
    1c6a:	19 f0       	breq	.+6      	; 0x1c72 <__vector_11+0xb0>
    1c6c:	10 f0       	brcs	.+4      	; 0x1c72 <__vector_11+0xb0>
    1c6e:	8f ef       	ldi	r24, 0xFF	; 255
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	82 17       	cp	r24, r18
    1c74:	08 f4       	brcc	.+2      	; 0x1c78 <__vector_11+0xb6>
    1c76:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1c78:	a8 ee       	ldi	r26, 0xE8	; 232
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1c7c:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c7e:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1c80:	c1 ef       	ldi	r28, 0xF1	; 241
    1c82:	d0 e0       	ldi	r29, 0x00	; 0
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <__vector_11+0xca>
    1c86:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1c88:	99 f6       	brne	.-90     	; 0x1c30 <__vector_11+0x6e>
    1c8a:	cb cf       	rjmp	.-106    	; 0x1c22 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1c8c:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1c8e:	98 2f       	mov	r25, r24
    1c90:	95 70       	andi	r25, 0x05	; 5
    1c92:	e1 f3       	breq	.-8      	; 0x1c8c <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    1c94:	82 fd       	sbrc	r24, 2
    1c96:	03 c1       	rjmp	.+518    	; 0x1e9e <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1c98:	32 2f       	mov	r19, r18
    1c9a:	21 31       	cpi	r18, 0x11	; 17
    1c9c:	08 f0       	brcs	.+2      	; 0x1ca0 <__vector_11+0xde>
    1c9e:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    1ca0:	33 23       	and	r19, r19
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <__vector_11+0xe4>
    1ca4:	f9 c0       	rjmp	.+498    	; 0x1e98 <__vector_11+0x2d6>
    1ca6:	fa 01       	movw	r30, r20
    1ca8:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    1caa:	94 91       	lpm	r25, Z
    1cac:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1cae:	81 50       	subi	r24, 0x01	; 1
    1cb0:	31 96       	adiw	r30, 0x01	; 1
    1cb2:	81 11       	cpse	r24, r1
    1cb4:	fa cf       	rjmp	.-12     	; 0x1caa <__vector_11+0xe8>
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	83 0f       	add	r24, r19
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	01 96       	adiw	r24, 0x01	; 1
    1cbe:	48 0f       	add	r20, r24
    1cc0:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1cc2:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1cc4:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1cc6:	21 11       	cpse	r18, r1
    1cc8:	e1 cf       	rjmp	.-62     	; 0x1c8c <__vector_11+0xca>
    1cca:	30 31       	cpi	r19, 0x10	; 16
    1ccc:	f9 f2       	breq	.-66     	; 0x1c8c <__vector_11+0xca>
    1cce:	e7 c0       	rjmp	.+462    	; 0x1e9e <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1cd0:	85 30       	cpi	r24, 0x05	; 5
    1cd2:	61 f4       	brne	.+24     	; 0x1cec <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1cd4:	8e ef       	ldi	r24, 0xFE	; 254
    1cd6:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1cda:	e8 ee       	ldi	r30, 0xE8	; 232
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	80 ff       	sbrs	r24, 0
    1ce2:	fd cf       	rjmp	.-6      	; 0x1cde <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1ce4:	20 68       	ori	r18, 0x80	; 128
    1ce6:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1cea:	d9 c0       	rjmp	.+434    	; 0x1e9e <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1cec:	89 30       	cpi	r24, 0x09	; 9
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <__vector_11+0x130>
    1cf0:	35 c0       	rjmp	.+106    	; 0x1d5c <__vector_11+0x19a>
    1cf2:	61 11       	cpse	r22, r1
    1cf4:	cd c0       	rjmp	.+410    	; 0x1e90 <__vector_11+0x2ce>
			usb_configuration = wValue;
    1cf6:	20 93 b1 01 	sts	0x01B1, r18
			cdc_line_rtsdtr = 0;
    1cfa:	10 92 af 01 	sts	0x01AF, r1
			transmit_flush_timer = 0;
    1cfe:	10 92 b0 01 	sts	0x01B0, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d02:	8e ef       	ldi	r24, 0xFE	; 254
    1d04:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1d08:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1d0a:	29 eb       	ldi	r18, 0xB9	; 185
    1d0c:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1d0e:	c9 ee       	ldi	r28, 0xE9	; 233
    1d10:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1d12:	ab ee       	ldi	r26, 0xEB	; 235
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1d16:	0c ee       	ldi	r16, 0xEC	; 236
    1d18:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1d1a:	6d ee       	ldi	r22, 0xED	; 237
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1d1e:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    1d20:	a9 01       	movw	r20, r18
    1d22:	4f 5f       	subi	r20, 0xFF	; 255
    1d24:	5f 4f       	sbci	r21, 0xFF	; 255
    1d26:	f9 01       	movw	r30, r18
    1d28:	94 91       	lpm	r25, Z
				UECONX = en;
    1d2a:	9c 93       	st	X, r25
				if (en) {
    1d2c:	99 23       	and	r25, r25
    1d2e:	61 f0       	breq	.+24     	; 0x1d48 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    1d30:	fa 01       	movw	r30, r20
    1d32:	44 91       	lpm	r20, Z
    1d34:	f8 01       	movw	r30, r16
    1d36:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    1d38:	f9 01       	movw	r30, r18
    1d3a:	32 96       	adiw	r30, 0x02	; 2
    1d3c:	94 91       	lpm	r25, Z
    1d3e:	2d 5f       	subi	r18, 0xFD	; 253
    1d40:	3f 4f       	sbci	r19, 0xFF	; 255
    1d42:	fb 01       	movw	r30, r22
    1d44:	90 83       	st	Z, r25
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1d48:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1d4a:	8f 5f       	subi	r24, 0xFF	; 255
    1d4c:	85 30       	cpi	r24, 0x05	; 5
    1d4e:	39 f7       	brne	.-50     	; 0x1d1e <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1d50:	ea ee       	ldi	r30, 0xEA	; 234
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8e e1       	ldi	r24, 0x1E	; 30
    1d56:	80 83       	st	Z, r24
        		UERST = 0;
    1d58:	10 82       	st	Z, r1
			return;
    1d5a:	a1 c0       	rjmp	.+322    	; 0x1e9e <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1d5c:	88 30       	cpi	r24, 0x08	; 8
    1d5e:	81 f4       	brne	.+32     	; 0x1d80 <__vector_11+0x1be>
    1d60:	60 38       	cpi	r22, 0x80	; 128
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <__vector_11+0x1a4>
    1d64:	95 c0       	rjmp	.+298    	; 0x1e90 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1d66:	e8 ee       	ldi	r30, 0xE8	; 232
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	80 ff       	sbrs	r24, 0
    1d6e:	fd cf       	rjmp	.-6      	; 0x1d6a <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1d70:	80 91 b1 01 	lds	r24, 0x01B1
    1d74:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d78:	8e ef       	ldi	r24, 0xFE	; 254
    1d7a:	80 93 e8 00 	sts	0x00E8, r24
    1d7e:	8f c0       	rjmp	.+286    	; 0x1e9e <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1d80:	81 32       	cpi	r24, 0x21	; 33
    1d82:	b9 f4       	brne	.+46     	; 0x1db2 <__vector_11+0x1f0>
    1d84:	61 3a       	cpi	r22, 0xA1	; 161
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <__vector_11+0x1c8>
    1d88:	83 c0       	rjmp	.+262    	; 0x1e90 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1d8a:	e8 ee       	ldi	r30, 0xE8	; 232
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 ff       	sbrs	r24, 0
    1d92:	fd cf       	rjmp	.-6      	; 0x1d8e <__vector_11+0x1cc>
    1d94:	e6 e2       	ldi	r30, 0x26	; 38
    1d96:	f1 e0       	ldi	r31, 0x01	; 1
    1d98:	2d e2       	ldi	r18, 0x2D	; 45
    1d9a:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1d9c:	a1 ef       	ldi	r26, 0xF1	; 241
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	81 91       	ld	r24, Z+
    1da2:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1da4:	e2 17       	cp	r30, r18
    1da6:	f3 07       	cpc	r31, r19
    1da8:	d9 f7       	brne	.-10     	; 0x1da0 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1daa:	8e ef       	ldi	r24, 0xFE	; 254
    1dac:	80 93 e8 00 	sts	0x00E8, r24
    1db0:	76 c0       	rjmp	.+236    	; 0x1e9e <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1db2:	80 32       	cpi	r24, 0x20	; 32
    1db4:	d1 f4       	brne	.+52     	; 0x1dea <__vector_11+0x228>
    1db6:	61 32       	cpi	r22, 0x21	; 33
    1db8:	09 f0       	breq	.+2      	; 0x1dbc <__vector_11+0x1fa>
    1dba:	6a c0       	rjmp	.+212    	; 0x1e90 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1dbc:	e8 ee       	ldi	r30, 0xE8	; 232
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	82 ff       	sbrs	r24, 2
    1dc4:	fd cf       	rjmp	.-6      	; 0x1dc0 <__vector_11+0x1fe>
    1dc6:	e6 e2       	ldi	r30, 0x26	; 38
    1dc8:	f1 e0       	ldi	r31, 0x01	; 1
    1dca:	2d e2       	ldi	r18, 0x2D	; 45
    1dcc:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1dce:	a1 ef       	ldi	r26, 0xF1	; 241
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	8c 91       	ld	r24, X
    1dd4:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1dd6:	e2 17       	cp	r30, r18
    1dd8:	f3 07       	cpc	r31, r19
    1dda:	d9 f7       	brne	.-10     	; 0x1dd2 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1ddc:	e8 ee       	ldi	r30, 0xE8	; 232
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	8b ef       	ldi	r24, 0xFB	; 251
    1de2:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1de4:	8e ef       	ldi	r24, 0xFE	; 254
    1de6:	80 83       	st	Z, r24
    1de8:	5a c0       	rjmp	.+180    	; 0x1e9e <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1dea:	82 32       	cpi	r24, 0x22	; 34
    1dec:	71 f4       	brne	.+28     	; 0x1e0a <__vector_11+0x248>
    1dee:	61 32       	cpi	r22, 0x21	; 33
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <__vector_11+0x232>
    1df2:	4e c0       	rjmp	.+156    	; 0x1e90 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    1df4:	20 93 af 01 	sts	0x01AF, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1df8:	e8 ee       	ldi	r30, 0xE8	; 232
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	80 ff       	sbrs	r24, 0
    1e00:	fd cf       	rjmp	.-6      	; 0x1dfc <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e02:	8e ef       	ldi	r24, 0xFE	; 254
    1e04:	80 93 e8 00 	sts	0x00E8, r24
    1e08:	4a c0       	rjmp	.+148    	; 0x1e9e <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1e0a:	81 11       	cpse	r24, r1
    1e0c:	1a c0       	rjmp	.+52     	; 0x1e42 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1e0e:	e8 ee       	ldi	r30, 0xE8	; 232
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	80 ff       	sbrs	r24, 0
    1e16:	fd cf       	rjmp	.-6      	; 0x1e12 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1e18:	62 38       	cpi	r22, 0x82	; 130
    1e1a:	51 f4       	brne	.+20     	; 0x1e30 <__vector_11+0x26e>
				UENUM = wIndex;
    1e1c:	e9 ee       	ldi	r30, 0xE9	; 233
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    1e22:	80 91 eb 00 	lds	r24, 0x00EB
    1e26:	85 fb       	bst	r24, 5
    1e28:	88 27       	eor	r24, r24
    1e2a:	80 f9       	bld	r24, 0
				UENUM = 0;
    1e2c:	10 82       	st	Z, r1
    1e2e:	01 c0       	rjmp	.+2      	; 0x1e32 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1e30:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1e32:	e1 ef       	ldi	r30, 0xF1	; 241
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 83       	st	Z, r24
			UEDATX = 0;
    1e38:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e3a:	8e ef       	ldi	r24, 0xFE	; 254
    1e3c:	80 93 e8 00 	sts	0x00E8, r24
    1e40:	2e c0       	rjmp	.+92     	; 0x1e9e <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1e42:	98 2f       	mov	r25, r24
    1e44:	9d 7f       	andi	r25, 0xFD	; 253
    1e46:	91 30       	cpi	r25, 0x01	; 1
    1e48:	19 f5       	brne	.+70     	; 0x1e90 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    1e4a:	62 30       	cpi	r22, 0x02	; 2
    1e4c:	09 f5       	brne	.+66     	; 0x1e90 <__vector_11+0x2ce>
    1e4e:	23 2b       	or	r18, r19
    1e50:	f9 f4       	brne	.+62     	; 0x1e90 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    1e52:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1e54:	9f ef       	ldi	r25, 0xFF	; 255
    1e56:	94 0f       	add	r25, r20
    1e58:	94 30       	cpi	r25, 0x04	; 4
    1e5a:	d0 f4       	brcc	.+52     	; 0x1e90 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e5c:	9e ef       	ldi	r25, 0xFE	; 254
    1e5e:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1e62:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    1e66:	83 30       	cpi	r24, 0x03	; 3
    1e68:	21 f4       	brne	.+8      	; 0x1e72 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1e6a:	81 e2       	ldi	r24, 0x21	; 33
    1e6c:	80 93 eb 00 	sts	0x00EB, r24
    1e70:	16 c0       	rjmp	.+44     	; 0x1e9e <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1e72:	89 e1       	ldi	r24, 0x19	; 25
    1e74:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <__vector_11+0x2c0>
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	4a 95       	dec	r20
    1e84:	e2 f7       	brpl	.-8      	; 0x1e7e <__vector_11+0x2bc>
    1e86:	ea ee       	ldi	r30, 0xEA	; 234
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 83       	st	Z, r24
					UERST = 0;
    1e8c:	10 82       	st	Z, r1
    1e8e:	07 c0       	rjmp	.+14     	; 0x1e9e <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1e90:	81 e2       	ldi	r24, 0x21	; 33
    1e92:	80 93 eb 00 	sts	0x00EB, r24
    1e96:	03 c0       	rjmp	.+6      	; 0x1e9e <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e98:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1e9a:	21 11       	cpse	r18, r1
    1e9c:	f7 ce       	rjmp	.-530    	; 0x1c8c <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1e9e:	ff 91       	pop	r31
    1ea0:	ef 91       	pop	r30
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	bf 91       	pop	r27
    1ea8:	af 91       	pop	r26
    1eaa:	9f 91       	pop	r25
    1eac:	8f 91       	pop	r24
    1eae:	7f 91       	pop	r23
    1eb0:	6f 91       	pop	r22
    1eb2:	5f 91       	pop	r21
    1eb4:	4f 91       	pop	r20
    1eb6:	3f 91       	pop	r19
    1eb8:	2f 91       	pop	r18
    1eba:	1f 91       	pop	r17
    1ebc:	0f 91       	pop	r16
    1ebe:	0f 90       	pop	r0
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	0f 90       	pop	r0
    1ec4:	1f 90       	pop	r1
    1ec6:	18 95       	reti

00001ec8 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1ecc:	ec eb       	ldi	r30, 0xBC	; 188
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	88 23       	and	r24, r24
    1ed4:	34 f0       	brlt	.+12     	; 0x1ee2 <twi_wait+0x1a>
    1ed6:	2f 5f       	subi	r18, 0xFF	; 255
    1ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eda:	29 3e       	cpi	r18, 0xE9	; 233
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	38 07       	cpc	r19, r24
    1ee0:	b9 f7       	brne	.-18     	; 0x1ed0 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	28 3e       	cpi	r18, 0xE8	; 232
    1ee6:	33 40       	sbci	r19, 0x03	; 3
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <twi_wait+0x24>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1eec:	08 95       	ret

00001eee <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1eee:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1ef2:	84 e8       	ldi	r24, 0x84	; 132
    1ef4:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1ef8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <twi_wait>
    1efc:	88 23       	and	r24, r24
    1efe:	19 f0       	breq	.+6      	; 0x1f06 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1f00:	80 91 b9 00 	lds	r24, 0x00B9
    1f04:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    1f06:	08 95       	ret

00001f08 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1f08:	cf 93       	push	r28
    1f0a:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1f0c:	94 ea       	ldi	r25, 0xA4	; 164
    1f0e:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1f12:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <twi_wait>
    1f16:	88 23       	and	r24, r24
    1f18:	61 f0       	breq	.+24     	; 0x1f32 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1f1a:	8c 2f       	mov	r24, r28
    1f1c:	88 0f       	add	r24, r24
    1f1e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1f22:	80 32       	cpi	r24, 0x20	; 32
    1f24:	29 f4       	brne	.+10     	; 0x1f30 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1f26:	84 e9       	ldi	r24, 0x94	; 148
    1f28:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	01 c0       	rjmp	.+2      	; 0x1f32 <start_write+0x2a>
	}	
	return 1;	// success
    1f30:	81 e0       	ldi	r24, 0x01	; 1
}	
    1f32:	cf 91       	pop	r28
    1f34:	08 95       	ret

00001f36 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1f36:	0e 94 bf 0c 	call	0x197e	; 0x197e <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1f3a:	88 e5       	ldi	r24, 0x58	; 88
    1f3c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <start_write>
    1f40:	88 23       	and	r24, r24
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <m_wii_open+0x10>
    1f44:	cd c0       	rjmp	.+410    	; 0x20e0 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    1f46:	80 e3       	ldi	r24, 0x30	; 48
    1f48:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    1f4c:	88 23       	and	r24, r24
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <m_wii_open+0x1c>
    1f50:	c9 c0       	rjmp	.+402    	; 0x20e4 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    1f58:	88 23       	and	r24, r24
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <m_wii_open+0x28>
    1f5c:	c5 c0       	rjmp	.+394    	; 0x20e8 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1f5e:	84 e9       	ldi	r24, 0x94	; 148
    1f60:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f64:	83 ec       	ldi	r24, 0xC3	; 195
    1f66:	99 e0       	ldi	r25, 0x09	; 9
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <m_wii_open+0x32>
    1f6c:	00 c0       	rjmp	.+0      	; 0x1f6e <m_wii_open+0x38>
    1f6e:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1f70:	88 e5       	ldi	r24, 0x58	; 88
    1f72:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <start_write>
    1f76:	88 23       	and	r24, r24
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <m_wii_open+0x46>
    1f7a:	b8 c0       	rjmp	.+368    	; 0x20ec <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    1f82:	88 23       	and	r24, r24
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <m_wii_open+0x52>
    1f86:	b4 c0       	rjmp	.+360    	; 0x20f0 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    1f8e:	88 23       	and	r24, r24
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <m_wii_open+0x5e>
    1f92:	b0 c0       	rjmp	.+352    	; 0x20f4 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    1f9a:	88 23       	and	r24, r24
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <m_wii_open+0x6a>
    1f9e:	ac c0       	rjmp	.+344    	; 0x20f8 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    1fa6:	88 23       	and	r24, r24
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <m_wii_open+0x76>
    1faa:	a8 c0       	rjmp	.+336    	; 0x20fc <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    1fb2:	88 23       	and	r24, r24
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <m_wii_open+0x82>
    1fb6:	a4 c0       	rjmp	.+328    	; 0x2100 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    1fbe:	88 23       	and	r24, r24
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <m_wii_open+0x8e>
    1fc2:	a0 c0       	rjmp	.+320    	; 0x2104 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    1fca:	88 23       	and	r24, r24
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <m_wii_open+0x9a>
    1fce:	9c c0       	rjmp	.+312    	; 0x2108 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    1fd0:	80 e9       	ldi	r24, 0x90	; 144
    1fd2:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    1fd6:	88 23       	and	r24, r24
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <m_wii_open+0xa6>
    1fda:	98 c0       	rjmp	.+304    	; 0x210c <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1fdc:	84 e9       	ldi	r24, 0x94	; 148
    1fde:	80 93 bc 00 	sts	0x00BC, r24
    1fe2:	83 ec       	ldi	r24, 0xC3	; 195
    1fe4:	99 e0       	ldi	r25, 0x09	; 9
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <m_wii_open+0xb0>
    1fea:	00 c0       	rjmp	.+0      	; 0x1fec <m_wii_open+0xb6>
    1fec:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1fee:	88 e5       	ldi	r24, 0x58	; 88
    1ff0:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <start_write>
    1ff4:	88 23       	and	r24, r24
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <m_wii_open+0xc4>
    1ff8:	8b c0       	rjmp	.+278    	; 0x2110 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    1ffa:	87 e0       	ldi	r24, 0x07	; 7
    1ffc:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    2000:	88 23       	and	r24, r24
    2002:	09 f4       	brne	.+2      	; 0x2006 <m_wii_open+0xd0>
    2004:	87 c0       	rjmp	.+270    	; 0x2114 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    200c:	88 23       	and	r24, r24
    200e:	09 f4       	brne	.+2      	; 0x2012 <m_wii_open+0xdc>
    2010:	83 c0       	rjmp	.+262    	; 0x2118 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    2012:	81 e4       	ldi	r24, 0x41	; 65
    2014:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    2018:	88 23       	and	r24, r24
    201a:	09 f4       	brne	.+2      	; 0x201e <m_wii_open+0xe8>
    201c:	7f c0       	rjmp	.+254    	; 0x211c <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    201e:	84 e9       	ldi	r24, 0x94	; 148
    2020:	80 93 bc 00 	sts	0x00BC, r24
    2024:	83 ec       	ldi	r24, 0xC3	; 195
    2026:	99 e0       	ldi	r25, 0x09	; 9
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <m_wii_open+0xf2>
    202c:	00 c0       	rjmp	.+0      	; 0x202e <m_wii_open+0xf8>
    202e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2030:	88 e5       	ldi	r24, 0x58	; 88
    2032:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <start_write>
    2036:	88 23       	and	r24, r24
    2038:	09 f4       	brne	.+2      	; 0x203c <m_wii_open+0x106>
    203a:	72 c0       	rjmp	.+228    	; 0x2120 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    203c:	8a e1       	ldi	r24, 0x1A	; 26
    203e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    2042:	88 23       	and	r24, r24
    2044:	09 f4       	brne	.+2      	; 0x2048 <m_wii_open+0x112>
    2046:	6e c0       	rjmp	.+220    	; 0x2124 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    2048:	80 e4       	ldi	r24, 0x40	; 64
    204a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    204e:	88 23       	and	r24, r24
    2050:	09 f4       	brne	.+2      	; 0x2054 <m_wii_open+0x11e>
    2052:	6a c0       	rjmp	.+212    	; 0x2128 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    205a:	88 23       	and	r24, r24
    205c:	09 f4       	brne	.+2      	; 0x2060 <m_wii_open+0x12a>
    205e:	66 c0       	rjmp	.+204    	; 0x212c <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2060:	84 e9       	ldi	r24, 0x94	; 148
    2062:	80 93 bc 00 	sts	0x00BC, r24
    2066:	83 ec       	ldi	r24, 0xC3	; 195
    2068:	99 e0       	ldi	r25, 0x09	; 9
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <m_wii_open+0x134>
    206e:	00 c0       	rjmp	.+0      	; 0x2070 <m_wii_open+0x13a>
    2070:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2072:	88 e5       	ldi	r24, 0x58	; 88
    2074:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <start_write>
    2078:	88 23       	and	r24, r24
    207a:	09 f4       	brne	.+2      	; 0x207e <m_wii_open+0x148>
    207c:	59 c0       	rjmp	.+178    	; 0x2130 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    207e:	83 e3       	ldi	r24, 0x33	; 51
    2080:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    2084:	88 23       	and	r24, r24
    2086:	09 f4       	brne	.+2      	; 0x208a <m_wii_open+0x154>
    2088:	55 c0       	rjmp	.+170    	; 0x2134 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    208a:	83 e0       	ldi	r24, 0x03	; 3
    208c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    2090:	88 23       	and	r24, r24
    2092:	09 f4       	brne	.+2      	; 0x2096 <m_wii_open+0x160>
    2094:	51 c0       	rjmp	.+162    	; 0x2138 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2096:	84 e9       	ldi	r24, 0x94	; 148
    2098:	80 93 bc 00 	sts	0x00BC, r24
    209c:	83 ec       	ldi	r24, 0xC3	; 195
    209e:	99 e0       	ldi	r25, 0x09	; 9
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <m_wii_open+0x16a>
    20a4:	00 c0       	rjmp	.+0      	; 0x20a6 <m_wii_open+0x170>
    20a6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    20a8:	88 e5       	ldi	r24, 0x58	; 88
    20aa:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <start_write>
    20ae:	88 23       	and	r24, r24
    20b0:	09 f4       	brne	.+2      	; 0x20b4 <m_wii_open+0x17e>
    20b2:	44 c0       	rjmp	.+136    	; 0x213c <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    20b4:	80 e3       	ldi	r24, 0x30	; 48
    20b6:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    20ba:	88 23       	and	r24, r24
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <m_wii_open+0x18a>
    20be:	40 c0       	rjmp	.+128    	; 0x2140 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    20c0:	88 e0       	ldi	r24, 0x08	; 8
    20c2:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    20c6:	88 23       	and	r24, r24
    20c8:	e9 f1       	breq	.+122    	; 0x2144 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    20ca:	84 e9       	ldi	r24, 0x94	; 148
    20cc:	80 93 bc 00 	sts	0x00BC, r24
    20d0:	83 ec       	ldi	r24, 0xC3	; 195
    20d2:	99 e0       	ldi	r25, 0x09	; 9
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <m_wii_open+0x19e>
    20d8:	00 c0       	rjmp	.+0      	; 0x20da <m_wii_open+0x1a4>
    20da:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2144:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2146:	08 95       	ret

00002148 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2148:	cf 93       	push	r28
    214a:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    214c:	84 ea       	ldi	r24, 0xA4	; 164
    214e:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    2152:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <twi_wait>
    2156:	88 23       	and	r24, r24
    2158:	69 f0       	breq	.+26     	; 0x2174 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    215a:	8c 2f       	mov	r24, r28
    215c:	88 0f       	add	r24, r24
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2164:	88 34       	cpi	r24, 0x48	; 72
    2166:	29 f4       	brne	.+10     	; 0x2172 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2168:	84 e9       	ldi	r24, 0x94	; 148
    216a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	01 c0       	rjmp	.+2      	; 0x2174 <start_read+0x2c>
	}	
	return 1;	// success
    2172:	81 e0       	ldi	r24, 0x01	; 1
}	
    2174:	cf 91       	pop	r28
    2176:	08 95       	ret

00002178 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	60 97       	sbiw	r28, 0x10	; 16
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2192:	fe 01       	movw	r30, r28
    2194:	31 96       	adiw	r30, 0x01	; 1
    2196:	80 e1       	ldi	r24, 0x10	; 16
    2198:	df 01       	movw	r26, r30
    219a:	1d 92       	st	X+, r1
    219c:	8a 95       	dec	r24
    219e:	e9 f7       	brne	.-6      	; 0x219a <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    21a0:	88 e5       	ldi	r24, 0x58	; 88
    21a2:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <start_write>
    21a6:	88 23       	and	r24, r24
    21a8:	09 f4       	brne	.+2      	; 0x21ac <m_wii_read+0x34>
    21aa:	69 c0       	rjmp	.+210    	; 0x227e <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    21ac:	86 e3       	ldi	r24, 0x36	; 54
    21ae:	0e 94 77 0f 	call	0x1eee	; 0x1eee <send_byte>
    21b2:	88 23       	and	r24, r24
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <m_wii_read+0x40>
    21b6:	65 c0       	rjmp	.+202    	; 0x2282 <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    21b8:	84 e9       	ldi	r24, 0x94	; 148
    21ba:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21be:	b8 e0       	ldi	r27, 0x08	; 8
    21c0:	ba 95       	dec	r27
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <m_wii_read+0x48>
    21c4:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    21c6:	88 e5       	ldi	r24, 0x58	; 88
    21c8:	0e 94 a4 10 	call	0x2148	; 0x2148 <start_read>
    21cc:	88 23       	and	r24, r24
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <m_wii_read+0x5a>
    21d0:	5a c0       	rjmp	.+180    	; 0x2286 <m_wii_read+0x10e>
    21d2:	be 01       	movw	r22, r28
    21d4:	6f 5f       	subi	r22, 0xFF	; 255
    21d6:	7f 4f       	sbci	r23, 0xFF	; 255
    21d8:	ae 01       	movw	r20, r28
    21da:	40 5f       	subi	r20, 0xF0	; 240
    21dc:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    21de:	ec eb       	ldi	r30, 0xBC	; 188
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    21e4:	2b eb       	ldi	r18, 0xBB	; 187
    21e6:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    21e8:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    21ea:	90 81       	ld	r25, Z
    21ec:	99 23       	and	r25, r25
    21ee:	ec f7       	brge	.-6      	; 0x21ea <m_wii_read+0x72>
		temp[i] = TWDR;
    21f0:	d9 01       	movw	r26, r18
    21f2:	9c 91       	ld	r25, X
    21f4:	db 01       	movw	r26, r22
    21f6:	9d 93       	st	X+, r25
    21f8:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    21fa:	a4 17       	cp	r26, r20
    21fc:	b5 07       	cpc	r27, r21
    21fe:	a1 f7       	brne	.-24     	; 0x21e8 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2200:	84 e8       	ldi	r24, 0x84	; 132
    2202:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2206:	ec eb       	ldi	r30, 0xBC	; 188
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	88 23       	and	r24, r24
    220e:	ec f7       	brge	.-6      	; 0x220a <m_wii_read+0x92>
	temp[15] = TWDR;
    2210:	80 91 bb 00 	lds	r24, 0x00BB
    2214:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2216:	84 e9       	ldi	r24, 0x94	; 148
    2218:	80 93 bc 00 	sts	0x00BC, r24
    221c:	be 01       	movw	r22, r28
    221e:	6c 5f       	subi	r22, 0xFC	; 252
    2220:	7f 4f       	sbci	r23, 0xFF	; 255
    2222:	f8 01       	movw	r30, r16
    2224:	08 5e       	subi	r16, 0xE8	; 232
    2226:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2228:	db 01       	movw	r26, r22
    222a:	2c 91       	ld	r18, X
    222c:	32 2f       	mov	r19, r18
    222e:	30 73       	andi	r19, 0x30	; 48
    2230:	cb 01       	movw	r24, r22
    2232:	02 97       	sbiw	r24, 0x02	; 2
    2234:	dc 01       	movw	r26, r24
    2236:	8c 91       	ld	r24, X
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	b0 e1       	ldi	r27, 0x10	; 16
    223c:	3b 9f       	mul	r19, r27
    223e:	80 0d       	add	r24, r0
    2240:	91 1d       	adc	r25, r1
    2242:	11 24       	eor	r1, r1
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2248:	42 2f       	mov	r20, r18
    224a:	40 7c       	andi	r20, 0xC0	; 192
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	44 0f       	add	r20, r20
    2250:	55 1f       	adc	r21, r21
    2252:	44 0f       	add	r20, r20
    2254:	55 1f       	adc	r21, r21
    2256:	cb 01       	movw	r24, r22
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	dc 01       	movw	r26, r24
    225c:	8c 91       	ld	r24, X
    225e:	48 0f       	add	r20, r24
    2260:	51 1d       	adc	r21, r1
    2262:	53 83       	std	Z+3, r21	; 0x03
    2264:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2266:	2f 70       	andi	r18, 0x0F	; 15
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	35 83       	std	Z+5, r19	; 0x05
    226c:	24 83       	std	Z+4, r18	; 0x04
    226e:	6d 5f       	subi	r22, 0xFD	; 253
    2270:	7f 4f       	sbci	r23, 0xFF	; 255
    2272:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2274:	e0 17       	cp	r30, r16
    2276:	f1 07       	cpc	r31, r17
    2278:	b9 f6       	brne	.-82     	; 0x2228 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	05 c0       	rjmp	.+10     	; 0x2288 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	03 c0       	rjmp	.+6      	; 0x2288 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2286:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2288:	60 96       	adiw	r28, 0x10	; 16
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	08 95       	ret

0000229e <get_puck_location>:
Public Functions
************************************************************/

/* Returns x,y, location of puck (angle more accurate) */
void get_puck_location(float* puck_buffer)
{
    229e:	cf 92       	push	r12
    22a0:	df 92       	push	r13
    22a2:	ef 92       	push	r14
    22a4:	ff 92       	push	r15
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	2c 97       	sbiw	r28, 0x0c	; 12
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	8c 01       	movw	r16, r24
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta
    22c0:	ce 01       	movw	r24, r28
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <get_position>
    22c8:	e6 eb       	ldi	r30, 0xB6	; 182
    22ca:	f1 e0       	ldi	r31, 0x01	; 1

	/* Get Max Transistor */
	int index_max = -1;
	int max_val = 0;
	for(int i=0; i<12; i++){
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Get Max Transistor */
	int index_max = -1;
	int max_val = 0;
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	70 e0       	ldi	r23, 0x00	; 0
{
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Get Max Transistor */
	int index_max = -1;
    22d4:	8f ef       	ldi	r24, 0xFF	; 255
    22d6:	9f ef       	ldi	r25, 0xFF	; 255
	int max_val = 0;
	for(int i=0; i<12; i++){
		if(transistor_vals[i]>max_val){
    22d8:	41 91       	ld	r20, Z+
    22da:	51 91       	ld	r21, Z+
    22dc:	64 17       	cp	r22, r20
    22de:	75 07       	cpc	r23, r21
    22e0:	14 f4       	brge	.+4      	; 0x22e6 <get_puck_location+0x48>
			max_val = transistor_vals[i];
    22e2:	ba 01       	movw	r22, r20

	/* Get Max Transistor */
	int index_max = -1;
	int max_val = 0;
	for(int i=0; i<12; i++){
		if(transistor_vals[i]>max_val){
    22e4:	c9 01       	movw	r24, r18
	get_position(position_buffer); // get x, y, theta

	/* Get Max Transistor */
	int index_max = -1;
	int max_val = 0;
	for(int i=0; i<12; i++){
    22e6:	2f 5f       	subi	r18, 0xFF	; 255
    22e8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ea:	2c 30       	cpi	r18, 0x0C	; 12
    22ec:	31 05       	cpc	r19, r1
    22ee:	a1 f7       	brne	.-24     	; 0x22d8 <get_puck_location+0x3a>
			index_max = i;
		}
	}

	/* If no puck found */
	if(index_max == -1){
    22f0:	8f 3f       	cpi	r24, 0xFF	; 255
    22f2:	2f ef       	ldi	r18, 0xFF	; 255
    22f4:	92 07       	cpc	r25, r18
    22f6:	51 f4       	brne	.+20     	; 0x230c <get_puck_location+0x6e>
		puck_buffer[0] = 0;
    22f8:	f8 01       	movw	r30, r16
    22fa:	10 82       	st	Z, r1
    22fc:	11 82       	std	Z+1, r1	; 0x01
    22fe:	12 82       	std	Z+2, r1	; 0x02
    2300:	13 82       	std	Z+3, r1	; 0x03
		puck_buffer[1] = 0;
    2302:	14 82       	std	Z+4, r1	; 0x04
    2304:	15 82       	std	Z+5, r1	; 0x05
    2306:	16 82       	std	Z+6, r1	; 0x06
    2308:	17 82       	std	Z+7, r1	; 0x07
    230a:	3b c0       	rjmp	.+118    	; 0x2382 <get_puck_location+0xe4>
		return;
	}

	/* Create vector pointing to puck in global coordinates */
	float global_theta;
	global_theta = position_buffer[2] + transistor_angles[index_max];
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	fc 01       	movw	r30, r24
    2316:	e3 5d       	subi	r30, 0xD3	; 211
    2318:	fe 4f       	sbci	r31, 0xFE	; 254
    231a:	20 81       	ld	r18, Z
    231c:	31 81       	ldd	r19, Z+1	; 0x01
    231e:	42 81       	ldd	r20, Z+2	; 0x02
    2320:	53 81       	ldd	r21, Z+3	; 0x03
    2322:	69 85       	ldd	r22, Y+9	; 0x09
    2324:	7a 85       	ldd	r23, Y+10	; 0x0a
    2326:	8b 85       	ldd	r24, Y+11	; 0x0b
    2328:	9c 85       	ldd	r25, Y+12	; 0x0c
    232a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
    232e:	6b 01       	movw	r12, r22
    2330:	7c 01       	movw	r14, r24
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN + position_buffer[0]; // Assign X val
    2332:	0e 94 4d 14 	call	0x289a	; 0x289a <cos>
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e2       	ldi	r20, 0x20	; 32
    233c:	51 e4       	ldi	r21, 0x41	; 65
    233e:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    2342:	29 81       	ldd	r18, Y+1	; 0x01
    2344:	3a 81       	ldd	r19, Y+2	; 0x02
    2346:	4b 81       	ldd	r20, Y+3	; 0x03
    2348:	5c 81       	ldd	r21, Y+4	; 0x04
    234a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
    234e:	f8 01       	movw	r30, r16
    2350:	60 83       	st	Z, r22
    2352:	71 83       	std	Z+1, r23	; 0x01
    2354:	82 83       	std	Z+2, r24	; 0x02
    2356:	93 83       	std	Z+3, r25	; 0x03
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN + position_buffer[1]; // Assign Y val
    2358:	c7 01       	movw	r24, r14
    235a:	b6 01       	movw	r22, r12
    235c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <sin>
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e2       	ldi	r20, 0x20	; 32
    2366:	51 e4       	ldi	r21, 0x41	; 65
    2368:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    236c:	2d 81       	ldd	r18, Y+5	; 0x05
    236e:	3e 81       	ldd	r19, Y+6	; 0x06
    2370:	4f 81       	ldd	r20, Y+7	; 0x07
    2372:	58 85       	ldd	r21, Y+8	; 0x08
    2374:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__addsf3>
    2378:	f8 01       	movw	r30, r16
    237a:	64 83       	std	Z+4, r22	; 0x04
    237c:	75 83       	std	Z+5, r23	; 0x05
    237e:	86 83       	std	Z+6, r24	; 0x06
    2380:	97 83       	std	Z+7, r25	; 0x07
}
    2382:	2c 96       	adiw	r28, 0x0c	; 12
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	de bf       	out	0x3e, r29	; 62
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	cd bf       	out	0x3d, r28	; 61
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	1f 91       	pop	r17
    2394:	0f 91       	pop	r16
    2396:	ff 90       	pop	r15
    2398:	ef 90       	pop	r14
    239a:	df 90       	pop	r13
    239c:	cf 90       	pop	r12
    239e:	08 95       	ret

000023a0 <adc_switch>:
/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated

	clear(ADCSRA,ADEN); // Disable ADC subsystem
    23a0:	ea e7       	ldi	r30, 0x7A	; 122
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	8f 77       	andi	r24, 0x7F	; 127
    23a8:	80 83       	st	Z, r24
	
	switch(state){
    23aa:	e0 91 ca 01 	lds	r30, 0x01CA
    23ae:	f0 91 cb 01 	lds	r31, 0x01CB
    23b2:	ec 30       	cpi	r30, 0x0C	; 12
    23b4:	f1 05       	cpc	r31, r1
    23b6:	08 f0       	brcs	.+2      	; 0x23ba <adc_switch+0x1a>
    23b8:	82 c1       	rjmp	.+772    	; 0x26be <adc_switch+0x31e>
    23ba:	ea 5a       	subi	r30, 0xAA	; 170
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <__tablejump2__>
		case 0:
			state = 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	90 93 cb 01 	sts	0x01CB, r25
    23ca:	80 93 ca 01 	sts	0x01CA, r24
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
    23ce:	eb e7       	ldi	r30, 0x7B	; 123
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	8f 7d       	andi	r24, 0xDF	; 223
    23d6:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 8
    23d8:	ec e7       	ldi	r30, 0x7C	; 124
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	8b 7f       	andi	r24, 0xFB	; 251
    23e0:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    23e2:	80 81       	ld	r24, Z
    23e4:	8d 7f       	andi	r24, 0xFD	; 253
    23e6:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    23e8:	80 81       	ld	r24, Z
    23ea:	8e 7f       	andi	r24, 0xFE	; 254
    23ec:	80 83       	st	Z, r24
			transistor_vals[4] = ADC;
    23ee:	80 91 78 00 	lds	r24, 0x0078
    23f2:	90 91 79 00 	lds	r25, 0x0079
    23f6:	90 93 bf 01 	sts	0x01BF, r25
    23fa:	80 93 be 01 	sts	0x01BE, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    23fe:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
			clear(ADMUX,MUX2); // Transistor 8
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[4] = ADC;
			break;
    2400:	5f c1       	rjmp	.+702    	; 0x26c0 <adc_switch+0x320>
		case 1:
			state = 2;
    2402:	82 e0       	ldi	r24, 0x02	; 2
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	90 93 cb 01 	sts	0x01CB, r25
    240a:	80 93 ca 01 	sts	0x01CA, r24
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
    240e:	eb e7       	ldi	r30, 0x7B	; 123
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	8f 7d       	andi	r24, 0xDF	; 223
    2416:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 9
    2418:	ec e7       	ldi	r30, 0x7C	; 124
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	8b 7f       	andi	r24, 0xFB	; 251
    2420:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2422:	80 81       	ld	r24, Z
    2424:	8d 7f       	andi	r24, 0xFD	; 253
    2426:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2428:	80 81       	ld	r24, Z
    242a:	81 60       	ori	r24, 0x01	; 1
    242c:	80 83       	st	Z, r24
			transistor_9 = ADC;
    242e:	80 91 78 00 	lds	r24, 0x0078
    2432:	90 91 79 00 	lds	r25, 0x0079
    2436:	90 93 b3 01 	sts	0x01B3, r25
    243a:	80 93 b2 01 	sts	0x01B2, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    243e:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
			clear(ADMUX,MUX2); // Transistor 9
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_9 = ADC;
			break;
    2440:	3f c1       	rjmp	.+638    	; 0x26c0 <adc_switch+0x320>
		case 2:
			state = 3;
    2442:	83 e0       	ldi	r24, 0x03	; 3
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	90 93 cb 01 	sts	0x01CB, r25
    244a:	80 93 ca 01 	sts	0x01CA, r24
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
    244e:	eb e7       	ldi	r30, 0x7B	; 123
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	8f 7d       	andi	r24, 0xDF	; 223
    2456:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 10
    2458:	ec e7       	ldi	r30, 0x7C	; 124
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	84 60       	ori	r24, 0x04	; 4
    2460:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2462:	80 81       	ld	r24, Z
    2464:	8d 7f       	andi	r24, 0xFD	; 253
    2466:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2468:	80 81       	ld	r24, Z
    246a:	8e 7f       	andi	r24, 0xFE	; 254
    246c:	80 83       	st	Z, r24
			transistor_vals[5] = ADC;
    246e:	80 91 78 00 	lds	r24, 0x0078
    2472:	90 91 79 00 	lds	r25, 0x0079
    2476:	90 93 c1 01 	sts	0x01C1, r25
    247a:	80 93 c0 01 	sts	0x01C0, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    247e:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
			set(ADMUX,MUX2); // Transistor 10
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[5] = ADC;
			break;
    2480:	1f c1       	rjmp	.+574    	; 0x26c0 <adc_switch+0x320>
		case 3:
			state = 4;
    2482:	84 e0       	ldi	r24, 0x04	; 4
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	90 93 cb 01 	sts	0x01CB, r25
    248a:	80 93 ca 01 	sts	0x01CA, r24
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
    248e:	eb e7       	ldi	r30, 0x7B	; 123
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	8f 7d       	andi	r24, 0xDF	; 223
    2496:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 13
    2498:	ec e7       	ldi	r30, 0x7C	; 124
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	84 60       	ori	r24, 0x04	; 4
    24a0:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    24a2:	80 81       	ld	r24, Z
    24a4:	8d 7f       	andi	r24, 0xFD	; 253
    24a6:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    24a8:	80 81       	ld	r24, Z
    24aa:	81 60       	ori	r24, 0x01	; 1
    24ac:	80 83       	st	Z, r24
			transistor_vals[7] = ADC;
    24ae:	80 91 78 00 	lds	r24, 0x0078
    24b2:	90 91 79 00 	lds	r25, 0x0079
    24b6:	90 93 c5 01 	sts	0x01C5, r25
    24ba:	80 93 c4 01 	sts	0x01C4, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    24be:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
			set(ADMUX,MUX2); // Transistor 13
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[7] = ADC;
			break;
    24c0:	ff c0       	rjmp	.+510    	; 0x26c0 <adc_switch+0x320>
		case 4:
			state = 5;
    24c2:	85 e0       	ldi	r24, 0x05	; 5
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	90 93 cb 01 	sts	0x01CB, r25
    24ca:	80 93 ca 01 	sts	0x01CA, r24
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
    24ce:	eb e7       	ldi	r30, 0x7B	; 123
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	8f 7d       	andi	r24, 0xDF	; 223
    24d6:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 14
    24d8:	ec e7       	ldi	r30, 0x7C	; 124
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	84 60       	ori	r24, 0x04	; 4
    24e0:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    24e2:	80 81       	ld	r24, Z
    24e4:	82 60       	ori	r24, 0x02	; 2
    24e6:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    24e8:	80 81       	ld	r24, Z
    24ea:	8e 7f       	andi	r24, 0xFE	; 254
    24ec:	80 83       	st	Z, r24
			transistor_vals[8] = ADC;
    24ee:	80 91 78 00 	lds	r24, 0x0078
    24f2:	90 91 79 00 	lds	r25, 0x0079
    24f6:	90 93 c7 01 	sts	0x01C7, r25
    24fa:	80 93 c6 01 	sts	0x01C6, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    24fe:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
			set(ADMUX,MUX2); // Transistor 14
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[8] = ADC;
			break;
    2500:	df c0       	rjmp	.+446    	; 0x26c0 <adc_switch+0x320>
		case 5:
			state = 6;
    2502:	86 e0       	ldi	r24, 0x06	; 6
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	90 93 cb 01 	sts	0x01CB, r25
    250a:	80 93 ca 01 	sts	0x01CA, r24
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
    250e:	eb e7       	ldi	r30, 0x7B	; 123
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	8f 7d       	andi	r24, 0xDF	; 223
    2516:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 15
    2518:	ec e7       	ldi	r30, 0x7C	; 124
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	84 60       	ori	r24, 0x04	; 4
    2520:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2522:	80 81       	ld	r24, Z
    2524:	82 60       	ori	r24, 0x02	; 2
    2526:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2528:	80 81       	ld	r24, Z
    252a:	81 60       	ori	r24, 0x01	; 1
    252c:	80 83       	st	Z, r24
			transistor_vals[9] = ADC;
    252e:	80 91 78 00 	lds	r24, 0x0078
    2532:	90 91 79 00 	lds	r25, 0x0079
    2536:	90 93 c9 01 	sts	0x01C9, r25
    253a:	80 93 c8 01 	sts	0x01C8, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    253e:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
			set(ADMUX,MUX2); // Transistor 15
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[9] = ADC;
			break;
    2540:	bf c0       	rjmp	.+382    	; 0x26c0 <adc_switch+0x320>
		case 6:
			state = 7;
    2542:	87 e0       	ldi	r24, 0x07	; 7
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	90 93 cb 01 	sts	0x01CB, r25
    254a:	80 93 ca 01 	sts	0x01CA, r24
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
    254e:	eb e7       	ldi	r30, 0x7B	; 123
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	80 62       	ori	r24, 0x20	; 32
    2556:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 1, 16
    2558:	ec e7       	ldi	r30, 0x7C	; 124
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	8b 7f       	andi	r24, 0xFB	; 251
    2560:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2562:	80 81       	ld	r24, Z
    2564:	8d 7f       	andi	r24, 0xFD	; 253
    2566:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2568:	80 81       	ld	r24, Z
    256a:	8e 7f       	andi	r24, 0xFE	; 254
    256c:	80 83       	st	Z, r24
			transistor_vals[0] = ADC;
    256e:	80 91 78 00 	lds	r24, 0x0078
    2572:	90 91 79 00 	lds	r25, 0x0079
    2576:	90 93 b7 01 	sts	0x01B7, r25
    257a:	80 93 b6 01 	sts	0x01B6, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    257e:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
			clear(ADMUX,MUX2); // Transistor 1, 16
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[0] = ADC;
			break;
    2580:	9f c0       	rjmp	.+318    	; 0x26c0 <adc_switch+0x320>
		case 7:
			state = 8;
    2582:	88 e0       	ldi	r24, 0x08	; 8
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	90 93 cb 01 	sts	0x01CB, r25
    258a:	80 93 ca 01 	sts	0x01CA, r24
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
    258e:	eb e7       	ldi	r30, 0x7B	; 123
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	80 62       	ori	r24, 0x20	; 32
    2596:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 11, 12
    2598:	ec e7       	ldi	r30, 0x7C	; 124
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	8b 7f       	andi	r24, 0xFB	; 251
    25a0:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    25a2:	80 81       	ld	r24, Z
    25a4:	8d 7f       	andi	r24, 0xFD	; 253
    25a6:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    25a8:	80 81       	ld	r24, Z
    25aa:	81 60       	ori	r24, 0x01	; 1
    25ac:	80 83       	st	Z, r24
			transistor_vals[6] = ADC;
    25ae:	80 91 78 00 	lds	r24, 0x0078
    25b2:	90 91 79 00 	lds	r25, 0x0079
    25b6:	90 93 c3 01 	sts	0x01C3, r25
    25ba:	80 93 c2 01 	sts	0x01C2, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    25be:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
			clear(ADMUX,MUX2); // Transistor 11, 12
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[6] = ADC;
			break;
    25c0:	7f c0       	rjmp	.+254    	; 0x26c0 <adc_switch+0x320>
		case 8:
			state = 9;
    25c2:	89 e0       	ldi	r24, 0x09	; 9
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	90 93 cb 01 	sts	0x01CB, r25
    25ca:	80 93 ca 01 	sts	0x01CA, r24
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
    25ce:	eb e7       	ldi	r30, 0x7B	; 123
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	80 62       	ori	r24, 0x20	; 32
    25d6:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
    25d8:	ec e7       	ldi	r30, 0x7C	; 124
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	8b 7f       	andi	r24, 0xFB	; 251
    25e0:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    25e2:	80 81       	ld	r24, Z
    25e4:	82 60       	ori	r24, 0x02	; 2
    25e6:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    25e8:	80 81       	ld	r24, Z
    25ea:	8e 7f       	andi	r24, 0xFE	; 254
    25ec:	80 83       	st	Z, r24
			transistor_vals[3] = ADC;
    25ee:	80 91 78 00 	lds	r24, 0x0078
    25f2:	90 91 79 00 	lds	r25, 0x0079
    25f6:	90 93 bd 01 	sts	0x01BD, r25
    25fa:	80 93 bc 01 	sts	0x01BC, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    25fe:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[3] = ADC;
			break;
    2600:	5f c0       	rjmp	.+190    	; 0x26c0 <adc_switch+0x320>
		case 9:
			state = 10;
    2602:	8a e0       	ldi	r24, 0x0A	; 10
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	90 93 cb 01 	sts	0x01CB, r25
    260a:	80 93 ca 01 	sts	0x01CA, r24
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
    260e:	eb e7       	ldi	r30, 0x7B	; 123
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	80 62       	ori	r24, 0x20	; 32
    2616:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 2
    2618:	ec e7       	ldi	r30, 0x7C	; 124
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	8b 7f       	andi	r24, 0xFB	; 251
    2620:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2622:	80 81       	ld	r24, Z
    2624:	82 60       	ori	r24, 0x02	; 2
    2626:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2628:	80 81       	ld	r24, Z
    262a:	81 60       	ori	r24, 0x01	; 1
    262c:	80 83       	st	Z, r24
			transistor_vals[1] = ADC;
    262e:	80 91 78 00 	lds	r24, 0x0078
    2632:	90 91 79 00 	lds	r25, 0x0079
    2636:	90 93 b9 01 	sts	0x01B9, r25
    263a:	80 93 b8 01 	sts	0x01B8, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    263e:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
			clear(ADMUX,MUX2); // Transistor 2
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[1] = ADC;
			break;
    2640:	3f c0       	rjmp	.+126    	; 0x26c0 <adc_switch+0x320>
		case 10:
			state = 11;
    2642:	8b e0       	ldi	r24, 0x0B	; 11
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	90 93 cb 01 	sts	0x01CB, r25
    264a:	80 93 ca 01 	sts	0x01CA, r24
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
    264e:	eb e7       	ldi	r30, 0x7B	; 123
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	80 62       	ori	r24, 0x20	; 32
    2656:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 3
    2658:	ec e7       	ldi	r30, 0x7C	; 124
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	84 60       	ori	r24, 0x04	; 4
    2660:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2662:	80 81       	ld	r24, Z
    2664:	8d 7f       	andi	r24, 0xFD	; 253
    2666:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2668:	80 81       	ld	r24, Z
    266a:	8e 7f       	andi	r24, 0xFE	; 254
    266c:	80 83       	st	Z, r24
			transistor_3 = ADC;
    266e:	80 91 78 00 	lds	r24, 0x0078
    2672:	90 91 79 00 	lds	r25, 0x0079
    2676:	90 93 b5 01 	sts	0x01B5, r25
    267a:	80 93 b4 01 	sts	0x01B4, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    267e:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
			set(ADMUX,MUX2); // Transistor 3
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_3 = ADC;
			break;
    2680:	1f c0       	rjmp	.+62     	; 0x26c0 <adc_switch+0x320>
		case 11:
			state = 0;
    2682:	10 92 cb 01 	sts	0x01CB, r1
    2686:	10 92 ca 01 	sts	0x01CA, r1
			set(ADCSRB,MUX5); // Select ADC13 at pin B6
    268a:	eb e7       	ldi	r30, 0x7B	; 123
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	80 62       	ori	r24, 0x20	; 32
    2692:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 4
    2694:	ec e7       	ldi	r30, 0x7C	; 124
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	84 60       	ori	r24, 0x04	; 4
    269c:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    269e:	80 81       	ld	r24, Z
    26a0:	8d 7f       	andi	r24, 0xFD	; 253
    26a2:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    26a4:	80 81       	ld	r24, Z
    26a6:	81 60       	ori	r24, 0x01	; 1
    26a8:	80 83       	st	Z, r24
			transistor_vals[2] = ADC;
    26aa:	80 91 78 00 	lds	r24, 0x0078
    26ae:	90 91 79 00 	lds	r25, 0x0079
    26b2:	90 93 bb 01 	sts	0x01BB, r25
    26b6:	80 93 ba 01 	sts	0x01BA, r24
			return_val = 1;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
			break;
    26bc:	01 c0       	rjmp	.+2      	; 0x26c0 <adc_switch+0x320>
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    26be:	80 e0       	ldi	r24, 0x00	; 0
			transistor_vals[2] = ADC;
			return_val = 1;
			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
    26c0:	ea e7       	ldi	r30, 0x7A	; 122
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	90 81       	ld	r25, Z
    26c6:	90 68       	ori	r25, 0x80	; 128
    26c8:	90 83       	st	Z, r25
	set(ADCSRA,ADSC); // Begin new conversion
    26ca:	90 81       	ld	r25, Z
    26cc:	90 64       	ori	r25, 0x40	; 64
    26ce:	90 83       	st	Z, r25

	return return_val;
}
    26d0:	08 95       	ret

000026d2 <__subsf3>:
    26d2:	50 58       	subi	r21, 0x80	; 128

000026d4 <__addsf3>:
    26d4:	bb 27       	eor	r27, r27
    26d6:	aa 27       	eor	r26, r26
    26d8:	0e 94 81 13 	call	0x2702	; 0x2702 <__addsf3x>
    26dc:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__fp_round>
    26e0:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__fp_pscA>
    26e4:	38 f0       	brcs	.+14     	; 0x26f4 <__addsf3+0x20>
    26e6:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__fp_pscB>
    26ea:	20 f0       	brcs	.+8      	; 0x26f4 <__addsf3+0x20>
    26ec:	39 f4       	brne	.+14     	; 0x26fc <__addsf3+0x28>
    26ee:	9f 3f       	cpi	r25, 0xFF	; 255
    26f0:	19 f4       	brne	.+6      	; 0x26f8 <__addsf3+0x24>
    26f2:	26 f4       	brtc	.+8      	; 0x26fc <__addsf3+0x28>
    26f4:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__fp_nan>
    26f8:	0e f4       	brtc	.+2      	; 0x26fc <__addsf3+0x28>
    26fa:	e0 95       	com	r30
    26fc:	e7 fb       	bst	r30, 7
    26fe:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__fp_inf>

00002702 <__addsf3x>:
    2702:	e9 2f       	mov	r30, r25
    2704:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <__fp_split3>
    2708:	58 f3       	brcs	.-42     	; 0x26e0 <__addsf3+0xc>
    270a:	ba 17       	cp	r27, r26
    270c:	62 07       	cpc	r22, r18
    270e:	73 07       	cpc	r23, r19
    2710:	84 07       	cpc	r24, r20
    2712:	95 07       	cpc	r25, r21
    2714:	20 f0       	brcs	.+8      	; 0x271e <__addsf3x+0x1c>
    2716:	79 f4       	brne	.+30     	; 0x2736 <__addsf3x+0x34>
    2718:	a6 f5       	brtc	.+104    	; 0x2782 <__addsf3x+0x80>
    271a:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__fp_zero>
    271e:	0e f4       	brtc	.+2      	; 0x2722 <__addsf3x+0x20>
    2720:	e0 95       	com	r30
    2722:	0b 2e       	mov	r0, r27
    2724:	ba 2f       	mov	r27, r26
    2726:	a0 2d       	mov	r26, r0
    2728:	0b 01       	movw	r0, r22
    272a:	b9 01       	movw	r22, r18
    272c:	90 01       	movw	r18, r0
    272e:	0c 01       	movw	r0, r24
    2730:	ca 01       	movw	r24, r20
    2732:	a0 01       	movw	r20, r0
    2734:	11 24       	eor	r1, r1
    2736:	ff 27       	eor	r31, r31
    2738:	59 1b       	sub	r21, r25
    273a:	99 f0       	breq	.+38     	; 0x2762 <__addsf3x+0x60>
    273c:	59 3f       	cpi	r21, 0xF9	; 249
    273e:	50 f4       	brcc	.+20     	; 0x2754 <__addsf3x+0x52>
    2740:	50 3e       	cpi	r21, 0xE0	; 224
    2742:	68 f1       	brcs	.+90     	; 0x279e <__addsf3x+0x9c>
    2744:	1a 16       	cp	r1, r26
    2746:	f0 40       	sbci	r31, 0x00	; 0
    2748:	a2 2f       	mov	r26, r18
    274a:	23 2f       	mov	r18, r19
    274c:	34 2f       	mov	r19, r20
    274e:	44 27       	eor	r20, r20
    2750:	58 5f       	subi	r21, 0xF8	; 248
    2752:	f3 cf       	rjmp	.-26     	; 0x273a <__addsf3x+0x38>
    2754:	46 95       	lsr	r20
    2756:	37 95       	ror	r19
    2758:	27 95       	ror	r18
    275a:	a7 95       	ror	r26
    275c:	f0 40       	sbci	r31, 0x00	; 0
    275e:	53 95       	inc	r21
    2760:	c9 f7       	brne	.-14     	; 0x2754 <__addsf3x+0x52>
    2762:	7e f4       	brtc	.+30     	; 0x2782 <__addsf3x+0x80>
    2764:	1f 16       	cp	r1, r31
    2766:	ba 0b       	sbc	r27, r26
    2768:	62 0b       	sbc	r22, r18
    276a:	73 0b       	sbc	r23, r19
    276c:	84 0b       	sbc	r24, r20
    276e:	ba f0       	brmi	.+46     	; 0x279e <__addsf3x+0x9c>
    2770:	91 50       	subi	r25, 0x01	; 1
    2772:	a1 f0       	breq	.+40     	; 0x279c <__addsf3x+0x9a>
    2774:	ff 0f       	add	r31, r31
    2776:	bb 1f       	adc	r27, r27
    2778:	66 1f       	adc	r22, r22
    277a:	77 1f       	adc	r23, r23
    277c:	88 1f       	adc	r24, r24
    277e:	c2 f7       	brpl	.-16     	; 0x2770 <__addsf3x+0x6e>
    2780:	0e c0       	rjmp	.+28     	; 0x279e <__addsf3x+0x9c>
    2782:	ba 0f       	add	r27, r26
    2784:	62 1f       	adc	r22, r18
    2786:	73 1f       	adc	r23, r19
    2788:	84 1f       	adc	r24, r20
    278a:	48 f4       	brcc	.+18     	; 0x279e <__addsf3x+0x9c>
    278c:	87 95       	ror	r24
    278e:	77 95       	ror	r23
    2790:	67 95       	ror	r22
    2792:	b7 95       	ror	r27
    2794:	f7 95       	ror	r31
    2796:	9e 3f       	cpi	r25, 0xFE	; 254
    2798:	08 f0       	brcs	.+2      	; 0x279c <__addsf3x+0x9a>
    279a:	b0 cf       	rjmp	.-160    	; 0x26fc <__addsf3+0x28>
    279c:	93 95       	inc	r25
    279e:	88 0f       	add	r24, r24
    27a0:	08 f0       	brcs	.+2      	; 0x27a4 <__addsf3x+0xa2>
    27a2:	99 27       	eor	r25, r25
    27a4:	ee 0f       	add	r30, r30
    27a6:	97 95       	ror	r25
    27a8:	87 95       	ror	r24
    27aa:	08 95       	ret
    27ac:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__fp_pscA>
    27b0:	60 f0       	brcs	.+24     	; 0x27ca <__addsf3x+0xc8>
    27b2:	80 e8       	ldi	r24, 0x80	; 128
    27b4:	91 e0       	ldi	r25, 0x01	; 1
    27b6:	09 f4       	brne	.+2      	; 0x27ba <__addsf3x+0xb8>
    27b8:	9e ef       	ldi	r25, 0xFE	; 254
    27ba:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__fp_pscB>
    27be:	28 f0       	brcs	.+10     	; 0x27ca <__addsf3x+0xc8>
    27c0:	40 e8       	ldi	r20, 0x80	; 128
    27c2:	51 e0       	ldi	r21, 0x01	; 1
    27c4:	71 f4       	brne	.+28     	; 0x27e2 <atan2+0x10>
    27c6:	5e ef       	ldi	r21, 0xFE	; 254
    27c8:	0c c0       	rjmp	.+24     	; 0x27e2 <atan2+0x10>
    27ca:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__fp_nan>
    27ce:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__fp_zero>

000027d2 <atan2>:
    27d2:	e9 2f       	mov	r30, r25
    27d4:	e0 78       	andi	r30, 0x80	; 128
    27d6:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <__fp_split3>
    27da:	40 f3       	brcs	.-48     	; 0x27ac <__addsf3x+0xaa>
    27dc:	09 2e       	mov	r0, r25
    27de:	05 2a       	or	r0, r21
    27e0:	b1 f3       	breq	.-20     	; 0x27ce <__addsf3x+0xcc>
    27e2:	26 17       	cp	r18, r22
    27e4:	37 07       	cpc	r19, r23
    27e6:	48 07       	cpc	r20, r24
    27e8:	59 07       	cpc	r21, r25
    27ea:	38 f0       	brcs	.+14     	; 0x27fa <atan2+0x28>
    27ec:	0e 2e       	mov	r0, r30
    27ee:	07 f8       	bld	r0, 7
    27f0:	e0 25       	eor	r30, r0
    27f2:	69 f0       	breq	.+26     	; 0x280e <atan2+0x3c>
    27f4:	e0 25       	eor	r30, r0
    27f6:	e0 64       	ori	r30, 0x40	; 64
    27f8:	0a c0       	rjmp	.+20     	; 0x280e <atan2+0x3c>
    27fa:	ef 63       	ori	r30, 0x3F	; 63
    27fc:	07 f8       	bld	r0, 7
    27fe:	00 94       	com	r0
    2800:	07 fa       	bst	r0, 7
    2802:	db 01       	movw	r26, r22
    2804:	b9 01       	movw	r22, r18
    2806:	9d 01       	movw	r18, r26
    2808:	dc 01       	movw	r26, r24
    280a:	ca 01       	movw	r24, r20
    280c:	ad 01       	movw	r20, r26
    280e:	ef 93       	push	r30
    2810:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__divsf3_pse>
    2814:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__fp_round>
    2818:	0e 94 19 14 	call	0x2832	; 0x2832 <atan>
    281c:	5f 91       	pop	r21
    281e:	55 23       	and	r21, r21
    2820:	39 f0       	breq	.+14     	; 0x2830 <atan2+0x5e>
    2822:	2b ed       	ldi	r18, 0xDB	; 219
    2824:	3f e0       	ldi	r19, 0x0F	; 15
    2826:	49 e4       	ldi	r20, 0x49	; 73
    2828:	50 fd       	sbrc	r21, 0
    282a:	49 ec       	ldi	r20, 0xC9	; 201
    282c:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__addsf3>
    2830:	08 95       	ret

00002832 <atan>:
    2832:	df 93       	push	r29
    2834:	dd 27       	eor	r29, r29
    2836:	b9 2f       	mov	r27, r25
    2838:	bf 77       	andi	r27, 0x7F	; 127
    283a:	40 e8       	ldi	r20, 0x80	; 128
    283c:	5f e3       	ldi	r21, 0x3F	; 63
    283e:	16 16       	cp	r1, r22
    2840:	17 06       	cpc	r1, r23
    2842:	48 07       	cpc	r20, r24
    2844:	5b 07       	cpc	r21, r27
    2846:	18 f4       	brcc	.+6      	; 0x284e <atan+0x1c>
    2848:	d9 2f       	mov	r29, r25
    284a:	0e 94 10 16 	call	0x2c20	; 0x2c20 <inverse>
    284e:	9f 93       	push	r25
    2850:	8f 93       	push	r24
    2852:	7f 93       	push	r23
    2854:	6f 93       	push	r22
    2856:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <square>
    285a:	e4 ec       	ldi	r30, 0xC4	; 196
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fp_powser>
    2862:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__fp_round>
    2866:	2f 91       	pop	r18
    2868:	3f 91       	pop	r19
    286a:	4f 91       	pop	r20
    286c:	5f 91       	pop	r21
    286e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3x>
    2872:	dd 23       	and	r29, r29
    2874:	51 f0       	breq	.+20     	; 0x288a <atan+0x58>
    2876:	90 58       	subi	r25, 0x80	; 128
    2878:	a2 ea       	ldi	r26, 0xA2	; 162
    287a:	2a ed       	ldi	r18, 0xDA	; 218
    287c:	3f e0       	ldi	r19, 0x0F	; 15
    287e:	49 ec       	ldi	r20, 0xC9	; 201
    2880:	5f e3       	ldi	r21, 0x3F	; 63
    2882:	d0 78       	andi	r29, 0x80	; 128
    2884:	5d 27       	eor	r21, r29
    2886:	0e 94 81 13 	call	0x2702	; 0x2702 <__addsf3x>
    288a:	df 91       	pop	r29
    288c:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__fp_round>

00002890 <__cmpsf2>:
    2890:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__fp_cmp>
    2894:	08 f4       	brcc	.+2      	; 0x2898 <__cmpsf2+0x8>
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	08 95       	ret

0000289a <cos>:
    289a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fp_rempio2>
    289e:	e3 95       	inc	r30
    28a0:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__fp_sinus>

000028a4 <__divsf3>:
    28a4:	0e 94 66 14 	call	0x28cc	; 0x28cc <__divsf3x>
    28a8:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__fp_round>
    28ac:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__fp_pscB>
    28b0:	58 f0       	brcs	.+22     	; 0x28c8 <__divsf3+0x24>
    28b2:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__fp_pscA>
    28b6:	40 f0       	brcs	.+16     	; 0x28c8 <__divsf3+0x24>
    28b8:	29 f4       	brne	.+10     	; 0x28c4 <__divsf3+0x20>
    28ba:	5f 3f       	cpi	r21, 0xFF	; 255
    28bc:	29 f0       	breq	.+10     	; 0x28c8 <__divsf3+0x24>
    28be:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__fp_inf>
    28c2:	51 11       	cpse	r21, r1
    28c4:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__fp_szero>
    28c8:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__fp_nan>

000028cc <__divsf3x>:
    28cc:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <__fp_split3>
    28d0:	68 f3       	brcs	.-38     	; 0x28ac <__divsf3+0x8>

000028d2 <__divsf3_pse>:
    28d2:	99 23       	and	r25, r25
    28d4:	b1 f3       	breq	.-20     	; 0x28c2 <__divsf3+0x1e>
    28d6:	55 23       	and	r21, r21
    28d8:	91 f3       	breq	.-28     	; 0x28be <__divsf3+0x1a>
    28da:	95 1b       	sub	r25, r21
    28dc:	55 0b       	sbc	r21, r21
    28de:	bb 27       	eor	r27, r27
    28e0:	aa 27       	eor	r26, r26
    28e2:	62 17       	cp	r22, r18
    28e4:	73 07       	cpc	r23, r19
    28e6:	84 07       	cpc	r24, r20
    28e8:	38 f0       	brcs	.+14     	; 0x28f8 <__divsf3_pse+0x26>
    28ea:	9f 5f       	subi	r25, 0xFF	; 255
    28ec:	5f 4f       	sbci	r21, 0xFF	; 255
    28ee:	22 0f       	add	r18, r18
    28f0:	33 1f       	adc	r19, r19
    28f2:	44 1f       	adc	r20, r20
    28f4:	aa 1f       	adc	r26, r26
    28f6:	a9 f3       	breq	.-22     	; 0x28e2 <__divsf3_pse+0x10>
    28f8:	35 d0       	rcall	.+106    	; 0x2964 <__divsf3_pse+0x92>
    28fa:	0e 2e       	mov	r0, r30
    28fc:	3a f0       	brmi	.+14     	; 0x290c <__divsf3_pse+0x3a>
    28fe:	e0 e8       	ldi	r30, 0x80	; 128
    2900:	32 d0       	rcall	.+100    	; 0x2966 <__divsf3_pse+0x94>
    2902:	91 50       	subi	r25, 0x01	; 1
    2904:	50 40       	sbci	r21, 0x00	; 0
    2906:	e6 95       	lsr	r30
    2908:	00 1c       	adc	r0, r0
    290a:	ca f7       	brpl	.-14     	; 0x28fe <__divsf3_pse+0x2c>
    290c:	2b d0       	rcall	.+86     	; 0x2964 <__divsf3_pse+0x92>
    290e:	fe 2f       	mov	r31, r30
    2910:	29 d0       	rcall	.+82     	; 0x2964 <__divsf3_pse+0x92>
    2912:	66 0f       	add	r22, r22
    2914:	77 1f       	adc	r23, r23
    2916:	88 1f       	adc	r24, r24
    2918:	bb 1f       	adc	r27, r27
    291a:	26 17       	cp	r18, r22
    291c:	37 07       	cpc	r19, r23
    291e:	48 07       	cpc	r20, r24
    2920:	ab 07       	cpc	r26, r27
    2922:	b0 e8       	ldi	r27, 0x80	; 128
    2924:	09 f0       	breq	.+2      	; 0x2928 <__divsf3_pse+0x56>
    2926:	bb 0b       	sbc	r27, r27
    2928:	80 2d       	mov	r24, r0
    292a:	bf 01       	movw	r22, r30
    292c:	ff 27       	eor	r31, r31
    292e:	93 58       	subi	r25, 0x83	; 131
    2930:	5f 4f       	sbci	r21, 0xFF	; 255
    2932:	3a f0       	brmi	.+14     	; 0x2942 <__divsf3_pse+0x70>
    2934:	9e 3f       	cpi	r25, 0xFE	; 254
    2936:	51 05       	cpc	r21, r1
    2938:	78 f0       	brcs	.+30     	; 0x2958 <__divsf3_pse+0x86>
    293a:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__fp_inf>
    293e:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__fp_szero>
    2942:	5f 3f       	cpi	r21, 0xFF	; 255
    2944:	e4 f3       	brlt	.-8      	; 0x293e <__divsf3_pse+0x6c>
    2946:	98 3e       	cpi	r25, 0xE8	; 232
    2948:	d4 f3       	brlt	.-12     	; 0x293e <__divsf3_pse+0x6c>
    294a:	86 95       	lsr	r24
    294c:	77 95       	ror	r23
    294e:	67 95       	ror	r22
    2950:	b7 95       	ror	r27
    2952:	f7 95       	ror	r31
    2954:	9f 5f       	subi	r25, 0xFF	; 255
    2956:	c9 f7       	brne	.-14     	; 0x294a <__divsf3_pse+0x78>
    2958:	88 0f       	add	r24, r24
    295a:	91 1d       	adc	r25, r1
    295c:	96 95       	lsr	r25
    295e:	87 95       	ror	r24
    2960:	97 f9       	bld	r25, 7
    2962:	08 95       	ret
    2964:	e1 e0       	ldi	r30, 0x01	; 1
    2966:	66 0f       	add	r22, r22
    2968:	77 1f       	adc	r23, r23
    296a:	88 1f       	adc	r24, r24
    296c:	bb 1f       	adc	r27, r27
    296e:	62 17       	cp	r22, r18
    2970:	73 07       	cpc	r23, r19
    2972:	84 07       	cpc	r24, r20
    2974:	ba 07       	cpc	r27, r26
    2976:	20 f0       	brcs	.+8      	; 0x2980 <__divsf3_pse+0xae>
    2978:	62 1b       	sub	r22, r18
    297a:	73 0b       	sbc	r23, r19
    297c:	84 0b       	sbc	r24, r20
    297e:	ba 0b       	sbc	r27, r26
    2980:	ee 1f       	adc	r30, r30
    2982:	88 f7       	brcc	.-30     	; 0x2966 <__divsf3_pse+0x94>
    2984:	e0 95       	com	r30
    2986:	08 95       	ret

00002988 <__fixunssfsi>:
    2988:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <__fp_splitA>
    298c:	88 f0       	brcs	.+34     	; 0x29b0 <__fixunssfsi+0x28>
    298e:	9f 57       	subi	r25, 0x7F	; 127
    2990:	98 f0       	brcs	.+38     	; 0x29b8 <__fixunssfsi+0x30>
    2992:	b9 2f       	mov	r27, r25
    2994:	99 27       	eor	r25, r25
    2996:	b7 51       	subi	r27, 0x17	; 23
    2998:	b0 f0       	brcs	.+44     	; 0x29c6 <__fixunssfsi+0x3e>
    299a:	e1 f0       	breq	.+56     	; 0x29d4 <__fixunssfsi+0x4c>
    299c:	66 0f       	add	r22, r22
    299e:	77 1f       	adc	r23, r23
    29a0:	88 1f       	adc	r24, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	1a f0       	brmi	.+6      	; 0x29ac <__fixunssfsi+0x24>
    29a6:	ba 95       	dec	r27
    29a8:	c9 f7       	brne	.-14     	; 0x299c <__fixunssfsi+0x14>
    29aa:	14 c0       	rjmp	.+40     	; 0x29d4 <__fixunssfsi+0x4c>
    29ac:	b1 30       	cpi	r27, 0x01	; 1
    29ae:	91 f0       	breq	.+36     	; 0x29d4 <__fixunssfsi+0x4c>
    29b0:	0e 94 04 16 	call	0x2c08	; 0x2c08 <__fp_zero>
    29b4:	b1 e0       	ldi	r27, 0x01	; 1
    29b6:	08 95       	ret
    29b8:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__fp_zero>
    29bc:	67 2f       	mov	r22, r23
    29be:	78 2f       	mov	r23, r24
    29c0:	88 27       	eor	r24, r24
    29c2:	b8 5f       	subi	r27, 0xF8	; 248
    29c4:	39 f0       	breq	.+14     	; 0x29d4 <__fixunssfsi+0x4c>
    29c6:	b9 3f       	cpi	r27, 0xF9	; 249
    29c8:	cc f3       	brlt	.-14     	; 0x29bc <__fixunssfsi+0x34>
    29ca:	86 95       	lsr	r24
    29cc:	77 95       	ror	r23
    29ce:	67 95       	ror	r22
    29d0:	b3 95       	inc	r27
    29d2:	d9 f7       	brne	.-10     	; 0x29ca <__fixunssfsi+0x42>
    29d4:	3e f4       	brtc	.+14     	; 0x29e4 <__fixunssfsi+0x5c>
    29d6:	90 95       	com	r25
    29d8:	80 95       	com	r24
    29da:	70 95       	com	r23
    29dc:	61 95       	neg	r22
    29de:	7f 4f       	sbci	r23, 0xFF	; 255
    29e0:	8f 4f       	sbci	r24, 0xFF	; 255
    29e2:	9f 4f       	sbci	r25, 0xFF	; 255
    29e4:	08 95       	ret

000029e6 <__floatunsisf>:
    29e6:	e8 94       	clt
    29e8:	09 c0       	rjmp	.+18     	; 0x29fc <__floatsisf+0x12>

000029ea <__floatsisf>:
    29ea:	97 fb       	bst	r25, 7
    29ec:	3e f4       	brtc	.+14     	; 0x29fc <__floatsisf+0x12>
    29ee:	90 95       	com	r25
    29f0:	80 95       	com	r24
    29f2:	70 95       	com	r23
    29f4:	61 95       	neg	r22
    29f6:	7f 4f       	sbci	r23, 0xFF	; 255
    29f8:	8f 4f       	sbci	r24, 0xFF	; 255
    29fa:	9f 4f       	sbci	r25, 0xFF	; 255
    29fc:	99 23       	and	r25, r25
    29fe:	a9 f0       	breq	.+42     	; 0x2a2a <__floatsisf+0x40>
    2a00:	f9 2f       	mov	r31, r25
    2a02:	96 e9       	ldi	r25, 0x96	; 150
    2a04:	bb 27       	eor	r27, r27
    2a06:	93 95       	inc	r25
    2a08:	f6 95       	lsr	r31
    2a0a:	87 95       	ror	r24
    2a0c:	77 95       	ror	r23
    2a0e:	67 95       	ror	r22
    2a10:	b7 95       	ror	r27
    2a12:	f1 11       	cpse	r31, r1
    2a14:	f8 cf       	rjmp	.-16     	; 0x2a06 <__floatsisf+0x1c>
    2a16:	fa f4       	brpl	.+62     	; 0x2a56 <__floatsisf+0x6c>
    2a18:	bb 0f       	add	r27, r27
    2a1a:	11 f4       	brne	.+4      	; 0x2a20 <__floatsisf+0x36>
    2a1c:	60 ff       	sbrs	r22, 0
    2a1e:	1b c0       	rjmp	.+54     	; 0x2a56 <__floatsisf+0x6c>
    2a20:	6f 5f       	subi	r22, 0xFF	; 255
    2a22:	7f 4f       	sbci	r23, 0xFF	; 255
    2a24:	8f 4f       	sbci	r24, 0xFF	; 255
    2a26:	9f 4f       	sbci	r25, 0xFF	; 255
    2a28:	16 c0       	rjmp	.+44     	; 0x2a56 <__floatsisf+0x6c>
    2a2a:	88 23       	and	r24, r24
    2a2c:	11 f0       	breq	.+4      	; 0x2a32 <__floatsisf+0x48>
    2a2e:	96 e9       	ldi	r25, 0x96	; 150
    2a30:	11 c0       	rjmp	.+34     	; 0x2a54 <__floatsisf+0x6a>
    2a32:	77 23       	and	r23, r23
    2a34:	21 f0       	breq	.+8      	; 0x2a3e <__floatsisf+0x54>
    2a36:	9e e8       	ldi	r25, 0x8E	; 142
    2a38:	87 2f       	mov	r24, r23
    2a3a:	76 2f       	mov	r23, r22
    2a3c:	05 c0       	rjmp	.+10     	; 0x2a48 <__floatsisf+0x5e>
    2a3e:	66 23       	and	r22, r22
    2a40:	71 f0       	breq	.+28     	; 0x2a5e <__floatsisf+0x74>
    2a42:	96 e8       	ldi	r25, 0x86	; 134
    2a44:	86 2f       	mov	r24, r22
    2a46:	70 e0       	ldi	r23, 0x00	; 0
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	2a f0       	brmi	.+10     	; 0x2a56 <__floatsisf+0x6c>
    2a4c:	9a 95       	dec	r25
    2a4e:	66 0f       	add	r22, r22
    2a50:	77 1f       	adc	r23, r23
    2a52:	88 1f       	adc	r24, r24
    2a54:	da f7       	brpl	.-10     	; 0x2a4c <__floatsisf+0x62>
    2a56:	88 0f       	add	r24, r24
    2a58:	96 95       	lsr	r25
    2a5a:	87 95       	ror	r24
    2a5c:	97 f9       	bld	r25, 7
    2a5e:	08 95       	ret

00002a60 <__fp_cmp>:
    2a60:	99 0f       	add	r25, r25
    2a62:	00 08       	sbc	r0, r0
    2a64:	55 0f       	add	r21, r21
    2a66:	aa 0b       	sbc	r26, r26
    2a68:	e0 e8       	ldi	r30, 0x80	; 128
    2a6a:	fe ef       	ldi	r31, 0xFE	; 254
    2a6c:	16 16       	cp	r1, r22
    2a6e:	17 06       	cpc	r1, r23
    2a70:	e8 07       	cpc	r30, r24
    2a72:	f9 07       	cpc	r31, r25
    2a74:	c0 f0       	brcs	.+48     	; 0x2aa6 <__fp_cmp+0x46>
    2a76:	12 16       	cp	r1, r18
    2a78:	13 06       	cpc	r1, r19
    2a7a:	e4 07       	cpc	r30, r20
    2a7c:	f5 07       	cpc	r31, r21
    2a7e:	98 f0       	brcs	.+38     	; 0x2aa6 <__fp_cmp+0x46>
    2a80:	62 1b       	sub	r22, r18
    2a82:	73 0b       	sbc	r23, r19
    2a84:	84 0b       	sbc	r24, r20
    2a86:	95 0b       	sbc	r25, r21
    2a88:	39 f4       	brne	.+14     	; 0x2a98 <__fp_cmp+0x38>
    2a8a:	0a 26       	eor	r0, r26
    2a8c:	61 f0       	breq	.+24     	; 0x2aa6 <__fp_cmp+0x46>
    2a8e:	23 2b       	or	r18, r19
    2a90:	24 2b       	or	r18, r20
    2a92:	25 2b       	or	r18, r21
    2a94:	21 f4       	brne	.+8      	; 0x2a9e <__fp_cmp+0x3e>
    2a96:	08 95       	ret
    2a98:	0a 26       	eor	r0, r26
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <__fp_cmp+0x3e>
    2a9c:	a1 40       	sbci	r26, 0x01	; 1
    2a9e:	a6 95       	lsr	r26
    2aa0:	8f ef       	ldi	r24, 0xFF	; 255
    2aa2:	81 1d       	adc	r24, r1
    2aa4:	81 1d       	adc	r24, r1
    2aa6:	08 95       	ret

00002aa8 <__fp_inf>:
    2aa8:	97 f9       	bld	r25, 7
    2aaa:	9f 67       	ori	r25, 0x7F	; 127
    2aac:	80 e8       	ldi	r24, 0x80	; 128
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	60 e0       	ldi	r22, 0x00	; 0
    2ab2:	08 95       	ret

00002ab4 <__fp_nan>:
    2ab4:	9f ef       	ldi	r25, 0xFF	; 255
    2ab6:	80 ec       	ldi	r24, 0xC0	; 192
    2ab8:	08 95       	ret

00002aba <__fp_powser>:
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	1f 93       	push	r17
    2ac0:	0f 93       	push	r16
    2ac2:	ff 92       	push	r15
    2ac4:	ef 92       	push	r14
    2ac6:	df 92       	push	r13
    2ac8:	7b 01       	movw	r14, r22
    2aca:	8c 01       	movw	r16, r24
    2acc:	68 94       	set
    2ace:	06 c0       	rjmp	.+12     	; 0x2adc <__fp_powser+0x22>
    2ad0:	da 2e       	mov	r13, r26
    2ad2:	ef 01       	movw	r28, r30
    2ad4:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3x>
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e8 94       	clt
    2adc:	a5 91       	lpm	r26, Z+
    2ade:	25 91       	lpm	r18, Z+
    2ae0:	35 91       	lpm	r19, Z+
    2ae2:	45 91       	lpm	r20, Z+
    2ae4:	55 91       	lpm	r21, Z+
    2ae6:	a6 f3       	brts	.-24     	; 0x2ad0 <__fp_powser+0x16>
    2ae8:	ef 01       	movw	r28, r30
    2aea:	0e 94 81 13 	call	0x2702	; 0x2702 <__addsf3x>
    2aee:	fe 01       	movw	r30, r28
    2af0:	97 01       	movw	r18, r14
    2af2:	a8 01       	movw	r20, r16
    2af4:	da 94       	dec	r13
    2af6:	69 f7       	brne	.-38     	; 0x2ad2 <__fp_powser+0x18>
    2af8:	df 90       	pop	r13
    2afa:	ef 90       	pop	r14
    2afc:	ff 90       	pop	r15
    2afe:	0f 91       	pop	r16
    2b00:	1f 91       	pop	r17
    2b02:	cf 91       	pop	r28
    2b04:	df 91       	pop	r29
    2b06:	08 95       	ret

00002b08 <__fp_pscA>:
    2b08:	00 24       	eor	r0, r0
    2b0a:	0a 94       	dec	r0
    2b0c:	16 16       	cp	r1, r22
    2b0e:	17 06       	cpc	r1, r23
    2b10:	18 06       	cpc	r1, r24
    2b12:	09 06       	cpc	r0, r25
    2b14:	08 95       	ret

00002b16 <__fp_pscB>:
    2b16:	00 24       	eor	r0, r0
    2b18:	0a 94       	dec	r0
    2b1a:	12 16       	cp	r1, r18
    2b1c:	13 06       	cpc	r1, r19
    2b1e:	14 06       	cpc	r1, r20
    2b20:	05 06       	cpc	r0, r21
    2b22:	08 95       	ret
    2b24:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__fp_nan>

00002b28 <__fp_rempio2>:
    2b28:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <__fp_splitA>
    2b2c:	d8 f3       	brcs	.-10     	; 0x2b24 <__fp_pscB+0xe>
    2b2e:	e8 94       	clt
    2b30:	e0 e0       	ldi	r30, 0x00	; 0
    2b32:	bb 27       	eor	r27, r27
    2b34:	9f 57       	subi	r25, 0x7F	; 127
    2b36:	f0 f0       	brcs	.+60     	; 0x2b74 <__fp_rempio2+0x4c>
    2b38:	2a ed       	ldi	r18, 0xDA	; 218
    2b3a:	3f e0       	ldi	r19, 0x0F	; 15
    2b3c:	49 ec       	ldi	r20, 0xC9	; 201
    2b3e:	06 c0       	rjmp	.+12     	; 0x2b4c <__fp_rempio2+0x24>
    2b40:	ee 0f       	add	r30, r30
    2b42:	bb 0f       	add	r27, r27
    2b44:	66 1f       	adc	r22, r22
    2b46:	77 1f       	adc	r23, r23
    2b48:	88 1f       	adc	r24, r24
    2b4a:	28 f0       	brcs	.+10     	; 0x2b56 <__fp_rempio2+0x2e>
    2b4c:	b2 3a       	cpi	r27, 0xA2	; 162
    2b4e:	62 07       	cpc	r22, r18
    2b50:	73 07       	cpc	r23, r19
    2b52:	84 07       	cpc	r24, r20
    2b54:	28 f0       	brcs	.+10     	; 0x2b60 <__fp_rempio2+0x38>
    2b56:	b2 5a       	subi	r27, 0xA2	; 162
    2b58:	62 0b       	sbc	r22, r18
    2b5a:	73 0b       	sbc	r23, r19
    2b5c:	84 0b       	sbc	r24, r20
    2b5e:	e3 95       	inc	r30
    2b60:	9a 95       	dec	r25
    2b62:	72 f7       	brpl	.-36     	; 0x2b40 <__fp_rempio2+0x18>
    2b64:	80 38       	cpi	r24, 0x80	; 128
    2b66:	30 f4       	brcc	.+12     	; 0x2b74 <__fp_rempio2+0x4c>
    2b68:	9a 95       	dec	r25
    2b6a:	bb 0f       	add	r27, r27
    2b6c:	66 1f       	adc	r22, r22
    2b6e:	77 1f       	adc	r23, r23
    2b70:	88 1f       	adc	r24, r24
    2b72:	d2 f7       	brpl	.-12     	; 0x2b68 <__fp_rempio2+0x40>
    2b74:	90 48       	sbci	r25, 0x80	; 128
    2b76:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__fp_mpack_finite>

00002b7a <__fp_round>:
    2b7a:	09 2e       	mov	r0, r25
    2b7c:	03 94       	inc	r0
    2b7e:	00 0c       	add	r0, r0
    2b80:	11 f4       	brne	.+4      	; 0x2b86 <__fp_round+0xc>
    2b82:	88 23       	and	r24, r24
    2b84:	52 f0       	brmi	.+20     	; 0x2b9a <__fp_round+0x20>
    2b86:	bb 0f       	add	r27, r27
    2b88:	40 f4       	brcc	.+16     	; 0x2b9a <__fp_round+0x20>
    2b8a:	bf 2b       	or	r27, r31
    2b8c:	11 f4       	brne	.+4      	; 0x2b92 <__fp_round+0x18>
    2b8e:	60 ff       	sbrs	r22, 0
    2b90:	04 c0       	rjmp	.+8      	; 0x2b9a <__fp_round+0x20>
    2b92:	6f 5f       	subi	r22, 0xFF	; 255
    2b94:	7f 4f       	sbci	r23, 0xFF	; 255
    2b96:	8f 4f       	sbci	r24, 0xFF	; 255
    2b98:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9a:	08 95       	ret

00002b9c <__fp_sinus>:
    2b9c:	ef 93       	push	r30
    2b9e:	e0 ff       	sbrs	r30, 0
    2ba0:	07 c0       	rjmp	.+14     	; 0x2bb0 <__fp_sinus+0x14>
    2ba2:	a2 ea       	ldi	r26, 0xA2	; 162
    2ba4:	2a ed       	ldi	r18, 0xDA	; 218
    2ba6:	3f e0       	ldi	r19, 0x0F	; 15
    2ba8:	49 ec       	ldi	r20, 0xC9	; 201
    2baa:	5f eb       	ldi	r21, 0xBF	; 191
    2bac:	0e 94 81 13 	call	0x2702	; 0x2702 <__addsf3x>
    2bb0:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__fp_round>
    2bb4:	0f 90       	pop	r0
    2bb6:	03 94       	inc	r0
    2bb8:	01 fc       	sbrc	r0, 1
    2bba:	90 58       	subi	r25, 0x80	; 128
    2bbc:	e1 ef       	ldi	r30, 0xF1	; 241
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__fp_powsodd>

00002bc4 <__fp_split3>:
    2bc4:	57 fd       	sbrc	r21, 7
    2bc6:	90 58       	subi	r25, 0x80	; 128
    2bc8:	44 0f       	add	r20, r20
    2bca:	55 1f       	adc	r21, r21
    2bcc:	59 f0       	breq	.+22     	; 0x2be4 <__fp_splitA+0x10>
    2bce:	5f 3f       	cpi	r21, 0xFF	; 255
    2bd0:	71 f0       	breq	.+28     	; 0x2bee <__fp_splitA+0x1a>
    2bd2:	47 95       	ror	r20

00002bd4 <__fp_splitA>:
    2bd4:	88 0f       	add	r24, r24
    2bd6:	97 fb       	bst	r25, 7
    2bd8:	99 1f       	adc	r25, r25
    2bda:	61 f0       	breq	.+24     	; 0x2bf4 <__fp_splitA+0x20>
    2bdc:	9f 3f       	cpi	r25, 0xFF	; 255
    2bde:	79 f0       	breq	.+30     	; 0x2bfe <__fp_splitA+0x2a>
    2be0:	87 95       	ror	r24
    2be2:	08 95       	ret
    2be4:	12 16       	cp	r1, r18
    2be6:	13 06       	cpc	r1, r19
    2be8:	14 06       	cpc	r1, r20
    2bea:	55 1f       	adc	r21, r21
    2bec:	f2 cf       	rjmp	.-28     	; 0x2bd2 <__fp_split3+0xe>
    2bee:	46 95       	lsr	r20
    2bf0:	f1 df       	rcall	.-30     	; 0x2bd4 <__fp_splitA>
    2bf2:	08 c0       	rjmp	.+16     	; 0x2c04 <__fp_splitA+0x30>
    2bf4:	16 16       	cp	r1, r22
    2bf6:	17 06       	cpc	r1, r23
    2bf8:	18 06       	cpc	r1, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	f1 cf       	rjmp	.-30     	; 0x2be0 <__fp_splitA+0xc>
    2bfe:	86 95       	lsr	r24
    2c00:	71 05       	cpc	r23, r1
    2c02:	61 05       	cpc	r22, r1
    2c04:	08 94       	sec
    2c06:	08 95       	ret

00002c08 <__fp_zero>:
    2c08:	e8 94       	clt

00002c0a <__fp_szero>:
    2c0a:	bb 27       	eor	r27, r27
    2c0c:	66 27       	eor	r22, r22
    2c0e:	77 27       	eor	r23, r23
    2c10:	cb 01       	movw	r24, r22
    2c12:	97 f9       	bld	r25, 7
    2c14:	08 95       	ret

00002c16 <__gesf2>:
    2c16:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__fp_cmp>
    2c1a:	08 f4       	brcc	.+2      	; 0x2c1e <__gesf2+0x8>
    2c1c:	8f ef       	ldi	r24, 0xFF	; 255
    2c1e:	08 95       	ret

00002c20 <inverse>:
    2c20:	9b 01       	movw	r18, r22
    2c22:	ac 01       	movw	r20, r24
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	80 e8       	ldi	r24, 0x80	; 128
    2c2a:	9f e3       	ldi	r25, 0x3F	; 63
    2c2c:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <__divsf3>

00002c30 <__mulsf3>:
    2c30:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3x>
    2c34:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__fp_round>
    2c38:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__fp_pscA>
    2c3c:	38 f0       	brcs	.+14     	; 0x2c4c <__mulsf3+0x1c>
    2c3e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__fp_pscB>
    2c42:	20 f0       	brcs	.+8      	; 0x2c4c <__mulsf3+0x1c>
    2c44:	95 23       	and	r25, r21
    2c46:	11 f0       	breq	.+4      	; 0x2c4c <__mulsf3+0x1c>
    2c48:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__fp_inf>
    2c4c:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__fp_nan>
    2c50:	11 24       	eor	r1, r1
    2c52:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__fp_szero>

00002c56 <__mulsf3x>:
    2c56:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <__fp_split3>
    2c5a:	70 f3       	brcs	.-36     	; 0x2c38 <__mulsf3+0x8>

00002c5c <__mulsf3_pse>:
    2c5c:	95 9f       	mul	r25, r21
    2c5e:	c1 f3       	breq	.-16     	; 0x2c50 <__mulsf3+0x20>
    2c60:	95 0f       	add	r25, r21
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	55 1f       	adc	r21, r21
    2c66:	62 9f       	mul	r22, r18
    2c68:	f0 01       	movw	r30, r0
    2c6a:	72 9f       	mul	r23, r18
    2c6c:	bb 27       	eor	r27, r27
    2c6e:	f0 0d       	add	r31, r0
    2c70:	b1 1d       	adc	r27, r1
    2c72:	63 9f       	mul	r22, r19
    2c74:	aa 27       	eor	r26, r26
    2c76:	f0 0d       	add	r31, r0
    2c78:	b1 1d       	adc	r27, r1
    2c7a:	aa 1f       	adc	r26, r26
    2c7c:	64 9f       	mul	r22, r20
    2c7e:	66 27       	eor	r22, r22
    2c80:	b0 0d       	add	r27, r0
    2c82:	a1 1d       	adc	r26, r1
    2c84:	66 1f       	adc	r22, r22
    2c86:	82 9f       	mul	r24, r18
    2c88:	22 27       	eor	r18, r18
    2c8a:	b0 0d       	add	r27, r0
    2c8c:	a1 1d       	adc	r26, r1
    2c8e:	62 1f       	adc	r22, r18
    2c90:	73 9f       	mul	r23, r19
    2c92:	b0 0d       	add	r27, r0
    2c94:	a1 1d       	adc	r26, r1
    2c96:	62 1f       	adc	r22, r18
    2c98:	83 9f       	mul	r24, r19
    2c9a:	a0 0d       	add	r26, r0
    2c9c:	61 1d       	adc	r22, r1
    2c9e:	22 1f       	adc	r18, r18
    2ca0:	74 9f       	mul	r23, r20
    2ca2:	33 27       	eor	r19, r19
    2ca4:	a0 0d       	add	r26, r0
    2ca6:	61 1d       	adc	r22, r1
    2ca8:	23 1f       	adc	r18, r19
    2caa:	84 9f       	mul	r24, r20
    2cac:	60 0d       	add	r22, r0
    2cae:	21 1d       	adc	r18, r1
    2cb0:	82 2f       	mov	r24, r18
    2cb2:	76 2f       	mov	r23, r22
    2cb4:	6a 2f       	mov	r22, r26
    2cb6:	11 24       	eor	r1, r1
    2cb8:	9f 57       	subi	r25, 0x7F	; 127
    2cba:	50 40       	sbci	r21, 0x00	; 0
    2cbc:	9a f0       	brmi	.+38     	; 0x2ce4 <__mulsf3_pse+0x88>
    2cbe:	f1 f0       	breq	.+60     	; 0x2cfc <__mulsf3_pse+0xa0>
    2cc0:	88 23       	and	r24, r24
    2cc2:	4a f0       	brmi	.+18     	; 0x2cd6 <__mulsf3_pse+0x7a>
    2cc4:	ee 0f       	add	r30, r30
    2cc6:	ff 1f       	adc	r31, r31
    2cc8:	bb 1f       	adc	r27, r27
    2cca:	66 1f       	adc	r22, r22
    2ccc:	77 1f       	adc	r23, r23
    2cce:	88 1f       	adc	r24, r24
    2cd0:	91 50       	subi	r25, 0x01	; 1
    2cd2:	50 40       	sbci	r21, 0x00	; 0
    2cd4:	a9 f7       	brne	.-22     	; 0x2cc0 <__mulsf3_pse+0x64>
    2cd6:	9e 3f       	cpi	r25, 0xFE	; 254
    2cd8:	51 05       	cpc	r21, r1
    2cda:	80 f0       	brcs	.+32     	; 0x2cfc <__mulsf3_pse+0xa0>
    2cdc:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__fp_inf>
    2ce0:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__fp_szero>
    2ce4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ce6:	e4 f3       	brlt	.-8      	; 0x2ce0 <__mulsf3_pse+0x84>
    2ce8:	98 3e       	cpi	r25, 0xE8	; 232
    2cea:	d4 f3       	brlt	.-12     	; 0x2ce0 <__mulsf3_pse+0x84>
    2cec:	86 95       	lsr	r24
    2cee:	77 95       	ror	r23
    2cf0:	67 95       	ror	r22
    2cf2:	b7 95       	ror	r27
    2cf4:	f7 95       	ror	r31
    2cf6:	e7 95       	ror	r30
    2cf8:	9f 5f       	subi	r25, 0xFF	; 255
    2cfa:	c1 f7       	brne	.-16     	; 0x2cec <__mulsf3_pse+0x90>
    2cfc:	fe 2b       	or	r31, r30
    2cfe:	88 0f       	add	r24, r24
    2d00:	91 1d       	adc	r25, r1
    2d02:	96 95       	lsr	r25
    2d04:	87 95       	ror	r24
    2d06:	97 f9       	bld	r25, 7
    2d08:	08 95       	ret

00002d0a <sin>:
    2d0a:	9f 93       	push	r25
    2d0c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fp_rempio2>
    2d10:	0f 90       	pop	r0
    2d12:	07 fc       	sbrc	r0, 7
    2d14:	ee 5f       	subi	r30, 0xFE	; 254
    2d16:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__fp_sinus>
    2d1a:	19 f4       	brne	.+6      	; 0x2d22 <sin+0x18>
    2d1c:	16 f4       	brtc	.+4      	; 0x2d22 <sin+0x18>
    2d1e:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__fp_nan>
    2d22:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__fp_mpack>

00002d26 <sqrt>:
    2d26:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <__fp_splitA>
    2d2a:	b8 f3       	brcs	.-18     	; 0x2d1a <sin+0x10>
    2d2c:	99 23       	and	r25, r25
    2d2e:	c9 f3       	breq	.-14     	; 0x2d22 <sin+0x18>
    2d30:	b6 f3       	brts	.-20     	; 0x2d1e <sin+0x14>
    2d32:	9f 57       	subi	r25, 0x7F	; 127
    2d34:	55 0b       	sbc	r21, r21
    2d36:	87 ff       	sbrs	r24, 7
    2d38:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__fp_norm2>
    2d3c:	00 24       	eor	r0, r0
    2d3e:	a0 e6       	ldi	r26, 0x60	; 96
    2d40:	40 ea       	ldi	r20, 0xA0	; 160
    2d42:	90 01       	movw	r18, r0
    2d44:	80 58       	subi	r24, 0x80	; 128
    2d46:	56 95       	lsr	r21
    2d48:	97 95       	ror	r25
    2d4a:	28 f4       	brcc	.+10     	; 0x2d56 <sqrt+0x30>
    2d4c:	80 5c       	subi	r24, 0xC0	; 192
    2d4e:	66 0f       	add	r22, r22
    2d50:	77 1f       	adc	r23, r23
    2d52:	88 1f       	adc	r24, r24
    2d54:	20 f0       	brcs	.+8      	; 0x2d5e <sqrt+0x38>
    2d56:	26 17       	cp	r18, r22
    2d58:	37 07       	cpc	r19, r23
    2d5a:	48 07       	cpc	r20, r24
    2d5c:	30 f4       	brcc	.+12     	; 0x2d6a <sqrt+0x44>
    2d5e:	62 1b       	sub	r22, r18
    2d60:	73 0b       	sbc	r23, r19
    2d62:	84 0b       	sbc	r24, r20
    2d64:	20 29       	or	r18, r0
    2d66:	31 29       	or	r19, r1
    2d68:	4a 2b       	or	r20, r26
    2d6a:	a6 95       	lsr	r26
    2d6c:	17 94       	ror	r1
    2d6e:	07 94       	ror	r0
    2d70:	20 25       	eor	r18, r0
    2d72:	31 25       	eor	r19, r1
    2d74:	4a 27       	eor	r20, r26
    2d76:	58 f7       	brcc	.-42     	; 0x2d4e <sqrt+0x28>
    2d78:	66 0f       	add	r22, r22
    2d7a:	77 1f       	adc	r23, r23
    2d7c:	88 1f       	adc	r24, r24
    2d7e:	20 f0       	brcs	.+8      	; 0x2d88 <sqrt+0x62>
    2d80:	26 17       	cp	r18, r22
    2d82:	37 07       	cpc	r19, r23
    2d84:	48 07       	cpc	r20, r24
    2d86:	30 f4       	brcc	.+12     	; 0x2d94 <sqrt+0x6e>
    2d88:	62 0b       	sbc	r22, r18
    2d8a:	73 0b       	sbc	r23, r19
    2d8c:	84 0b       	sbc	r24, r20
    2d8e:	20 0d       	add	r18, r0
    2d90:	31 1d       	adc	r19, r1
    2d92:	41 1d       	adc	r20, r1
    2d94:	a0 95       	com	r26
    2d96:	81 f7       	brne	.-32     	; 0x2d78 <sqrt+0x52>
    2d98:	b9 01       	movw	r22, r18
    2d9a:	84 2f       	mov	r24, r20
    2d9c:	91 58       	subi	r25, 0x81	; 129
    2d9e:	88 0f       	add	r24, r24
    2da0:	96 95       	lsr	r25
    2da2:	87 95       	ror	r24
    2da4:	08 95       	ret

00002da6 <square>:
    2da6:	9b 01       	movw	r18, r22
    2da8:	ac 01       	movw	r20, r24
    2daa:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__mulsf3>

00002dae <__fp_mpack>:
    2dae:	9f 3f       	cpi	r25, 0xFF	; 255
    2db0:	31 f0       	breq	.+12     	; 0x2dbe <__fp_mpack_finite+0xc>

00002db2 <__fp_mpack_finite>:
    2db2:	91 50       	subi	r25, 0x01	; 1
    2db4:	20 f4       	brcc	.+8      	; 0x2dbe <__fp_mpack_finite+0xc>
    2db6:	87 95       	ror	r24
    2db8:	77 95       	ror	r23
    2dba:	67 95       	ror	r22
    2dbc:	b7 95       	ror	r27
    2dbe:	88 0f       	add	r24, r24
    2dc0:	91 1d       	adc	r25, r1
    2dc2:	96 95       	lsr	r25
    2dc4:	87 95       	ror	r24
    2dc6:	97 f9       	bld	r25, 7
    2dc8:	08 95       	ret

00002dca <__fp_norm2>:
    2dca:	91 50       	subi	r25, 0x01	; 1
    2dcc:	50 40       	sbci	r21, 0x00	; 0
    2dce:	66 0f       	add	r22, r22
    2dd0:	77 1f       	adc	r23, r23
    2dd2:	88 1f       	adc	r24, r24
    2dd4:	d2 f7       	brpl	.-12     	; 0x2dca <__fp_norm2>
    2dd6:	08 95       	ret

00002dd8 <__fp_powsodd>:
    2dd8:	9f 93       	push	r25
    2dda:	8f 93       	push	r24
    2ddc:	7f 93       	push	r23
    2dde:	6f 93       	push	r22
    2de0:	ff 93       	push	r31
    2de2:	ef 93       	push	r30
    2de4:	9b 01       	movw	r18, r22
    2de6:	ac 01       	movw	r20, r24
    2de8:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__mulsf3>
    2dec:	ef 91       	pop	r30
    2dee:	ff 91       	pop	r31
    2df0:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fp_powser>
    2df4:	2f 91       	pop	r18
    2df6:	3f 91       	pop	r19
    2df8:	4f 91       	pop	r20
    2dfa:	5f 91       	pop	r21
    2dfc:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__mulsf3>

00002e00 <__tablejump2__>:
    2e00:	ee 0f       	add	r30, r30
    2e02:	ff 1f       	adc	r31, r31
    2e04:	05 90       	lpm	r0, Z+
    2e06:	f4 91       	lpm	r31, Z
    2e08:	e0 2d       	mov	r30, r0
    2e0a:	09 94       	ijmp

00002e0c <_exit>:
    2e0c:	f8 94       	cli

00002e0e <__stop_program>:
    2e0e:	ff cf       	rjmp	.-2      	; 0x2e0e <__stop_program>
