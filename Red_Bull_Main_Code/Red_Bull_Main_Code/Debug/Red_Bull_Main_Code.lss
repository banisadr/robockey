
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00003a5c  00003af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  0080015a  0080015a  00003b4a  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00003b4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003bac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00003bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003530  00000000  00000000  00003f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001018  00000000  00000000  0000749c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001628  00000000  00000000  000084b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cc0  00000000  00000000  00009adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d3b  00000000  00000000  0000a79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004490  00000000  00000000  0000b4d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000f967  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__vector_3>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <__vector_10>
      2c:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__vector_11>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__vector_17>
      48:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__vector_18>
      4c:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <__vector_19>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__vector_23>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	92 0c       	add	r9, r2
      ae:	95 0c       	add	r9, r5
      b0:	98 0c       	add	r9, r8
      b2:	a3 0c       	add	r10, r3
      b4:	ae 0c       	add	r10, r14
      b6:	b6 0c       	add	r11, r6
      b8:	b1 0c       	add	r11, r1
      ba:	b4 0c       	add	r11, r4
      bc:	cb 17       	cp	r28, r27
      be:	eb 17       	cp	r30, r27
      c0:	0b 18       	sub	r0, r11
      c2:	2b 18       	sub	r2, r11
      c4:	4b 18       	sub	r4, r11
      c6:	6b 18       	sub	r6, r11
      c8:	8b 18       	sub	r8, r11
      ca:	ab 18       	sub	r10, r11
      cc:	cb 18       	sub	r12, r11
      ce:	eb 18       	sub	r14, r11
      d0:	0b 19       	sub	r16, r11
      d2:	2b 19       	sub	r18, r11
      d4:	08 4a       	sbci	r16, 0xA8	; 168
      d6:	d7 3b       	cpi	r29, 0xB7	; 183
      d8:	3b ce       	rjmp	.-906    	; 0xfffffd50 <__eeprom_end+0xff7efd50>
      da:	01 6e       	ori	r16, 0xE1	; 225
      dc:	84 bc       	out	0x24, r8	; 36
      de:	bf fd       	.word	0xfdbf	; ????
      e0:	c1 2f       	mov	r28, r17
      e2:	3d 6c       	ori	r19, 0xCD	; 205
      e4:	74 31       	cpi	r23, 0x14	; 20
      e6:	9a bd       	out	0x2a, r25	; 42
      e8:	56 83       	std	Z+6, r21	; 0x06
      ea:	3d da       	rcall	.-2950   	; 0xfffff566 <__eeprom_end+0xff7ef566>
      ec:	3d 00       	.word	0x003d	; ????
      ee:	c7 7f       	andi	r28, 0xF7	; 247
      f0:	11 be       	out	0x31, r1	; 49
      f2:	d9 e4       	ldi	r29, 0x49	; 73
      f4:	bb 4c       	sbci	r27, 0xCB	; 203
      f6:	3e 91       	ld	r19, -X
      f8:	6b aa       	std	Y+51, r6	; 0x33
      fa:	aa be       	out	0x3a, r10	; 58
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 00       	.word	0x003f	; ????

00000120 <__trampolines_end>:
     120:	00 01       	movw	r0, r0
     122:	00 00       	nop
     124:	b7 01       	movw	r22, r14
     126:	12 00       	.word	0x0012	; ????
     128:	02 00       	.word	0x0002	; ????
     12a:	00 74       	andi	r16, 0x40	; 64
     12c:	01 43       	sbci	r16, 0x31	; 49
     12e:	00 03       	mulsu	r16, r16
     130:	00 00       	nop
     132:	70 01       	movw	r14, r0
     134:	04 01       	movw	r0, r8
     136:	03 09       	sbc	r16, r3
     138:	04 5c       	subi	r16, 0xC4	; 196
     13a:	01 12       	cpse	r0, r17
     13c:	02 03       	mulsu	r16, r18
     13e:	09 04       	cpc	r0, r9
     140:	54 01       	movw	r10, r8
     142:	06 03       	mulsu	r16, r22
     144:	03 09       	sbc	r16, r3
     146:	04 4a       	sbci	r16, 0xA4	; 164
     148:	01 08       	sbc	r0, r1

0000014a <string3>:
     14a:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000154 <string2>:
     154:	06 03 4d 00 32 00 00 00                             ..M.2...

0000015c <string1>:
     15c:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     16c:	65 00 00 00                                         e...

00000170 <string0>:
     170:	04 03 09 04                                         ....

00000174 <config1_descriptor>:
     174:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     184:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     194:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1a4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1b4:	40 00 00                                            @..

000001b7 <device_descriptor>:
     1b7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1c7:	03 01                                               ..

000001c9 <endpoint_config_table>:
     1c9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	da e0       	ldi	r29, 0x0A	; 10
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	ec e5       	ldi	r30, 0x5C	; 92
     1e8:	fa e3       	ldi	r31, 0x3A	; 58
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	aa 35       	cpi	r26, 0x5A	; 90
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	aa e5       	ldi	r26, 0x5A	; 90
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a9 3e       	cpi	r26, 0xE9	; 233
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 c3 0c 	call	0x1986	; 0x1986 <main>
     20a:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <attack_action>:
************************************************************/


void attack_action(float x_goal, float y_goal, float x_puck, float y_puck, float* x_target, float* y_target, float* max_theta, 
	float* theta_kd, float* theta_kp, float* linear_kd, float* linear_kp, float* max_duty_cycle)
{
     212:	4f 92       	push	r4
     214:	5f 92       	push	r5
     216:	6f 92       	push	r6
     218:	7f 92       	push	r7
     21a:	8f 92       	push	r8
     21c:	9f 92       	push	r9
     21e:	af 92       	push	r10
     220:	bf 92       	push	r11
     222:	cf 92       	push	r12
     224:	df 92       	push	r13
     226:	ef 92       	push	r14
     228:	ff 92       	push	r15
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	28 97       	sbiw	r28, 0x08	; 8
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
     242:	2b 01       	movw	r4, r22
     244:	3c 01       	movw	r6, r24
     246:	29 83       	std	Y+1, r18	; 0x01
     248:	3a 83       	std	Y+2, r19	; 0x02
     24a:	4b 83       	std	Y+3, r20	; 0x03
     24c:	5c 83       	std	Y+4, r21	; 0x04
     24e:	ed 82       	std	Y+5, r14	; 0x05
     250:	fe 82       	std	Y+6, r15	; 0x06
     252:	0f 83       	std	Y+7, r16	; 0x07
     254:	18 87       	std	Y+8, r17	; 0x08
		if (has_puck())
     256:	0e 94 90 17 	call	0x2f20	; 0x2f20 <has_puck>
     25a:	88 23       	and	r24, r24
     25c:	09 f4       	brne	.+2      	; 0x260 <attack_action+0x4e>
     25e:	4f c0       	rjmp	.+158    	; 0x2fe <attack_action+0xec>
		{
			*x_target = x_goal;
     260:	d4 01       	movw	r26, r8
     262:	4d 92       	st	X+, r4
     264:	5d 92       	st	X+, r5
     266:	6d 92       	st	X+, r6
     268:	7c 92       	st	X, r7
     26a:	13 97       	sbiw	r26, 0x03	; 3
			*y_target = y_goal;
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	9a 81       	ldd	r25, Y+2	; 0x02
     270:	ab 81       	ldd	r26, Y+3	; 0x03
     272:	bc 81       	ldd	r27, Y+4	; 0x04
     274:	eb 8d       	ldd	r30, Y+27	; 0x1b
     276:	fc 8d       	ldd	r31, Y+28	; 0x1c
     278:	80 83       	st	Z, r24
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	a2 83       	std	Z+2, r26	; 0x02
     27e:	b3 83       	std	Z+3, r27	; 0x03
			*max_theta = M_PI/2;
     280:	8b ed       	ldi	r24, 0xDB	; 219
     282:	9f e0       	ldi	r25, 0x0F	; 15
     284:	a9 ec       	ldi	r26, 0xC9	; 201
     286:	bf e3       	ldi	r27, 0x3F	; 63
     288:	ed 8d       	ldd	r30, Y+29	; 0x1d
     28a:	fe 8d       	ldd	r31, Y+30	; 0x1e
     28c:	80 83       	st	Z, r24
     28e:	91 83       	std	Z+1, r25	; 0x01
     290:	a2 83       	std	Z+2, r26	; 0x02
     292:	b3 83       	std	Z+3, r27	; 0x03
			*theta_kd = 0.05;
     294:	8d ec       	ldi	r24, 0xCD	; 205
     296:	9c ec       	ldi	r25, 0xCC	; 204
     298:	ac e4       	ldi	r26, 0x4C	; 76
     29a:	bd e3       	ldi	r27, 0x3D	; 61
     29c:	ef 8d       	ldd	r30, Y+31	; 0x1f
     29e:	f8 a1       	ldd	r31, Y+32	; 0x20
     2a0:	80 83       	st	Z, r24
     2a2:	91 83       	std	Z+1, r25	; 0x01
     2a4:	a2 83       	std	Z+2, r26	; 0x02
     2a6:	b3 83       	std	Z+3, r27	; 0x03
			*theta_kp = 1.2;
     2a8:	8a e9       	ldi	r24, 0x9A	; 154
     2aa:	99 e9       	ldi	r25, 0x99	; 153
     2ac:	a9 e9       	ldi	r26, 0x99	; 153
     2ae:	bf e3       	ldi	r27, 0x3F	; 63
     2b0:	e9 a1       	ldd	r30, Y+33	; 0x21
     2b2:	fa a1       	ldd	r31, Y+34	; 0x22
     2b4:	80 83       	st	Z, r24
     2b6:	91 83       	std	Z+1, r25	; 0x01
     2b8:	a2 83       	std	Z+2, r26	; 0x02
     2ba:	b3 83       	std	Z+3, r27	; 0x03
			*linear_kd = 0.01;
     2bc:	8a e0       	ldi	r24, 0x0A	; 10
     2be:	97 ed       	ldi	r25, 0xD7	; 215
     2c0:	a3 e2       	ldi	r26, 0x23	; 35
     2c2:	bc e3       	ldi	r27, 0x3C	; 60
     2c4:	eb a1       	ldd	r30, Y+35	; 0x23
     2c6:	fc a1       	ldd	r31, Y+36	; 0x24
     2c8:	80 83       	st	Z, r24
     2ca:	91 83       	std	Z+1, r25	; 0x01
     2cc:	a2 83       	std	Z+2, r26	; 0x02
     2ce:	b3 83       	std	Z+3, r27	; 0x03
			*linear_kp = 0.2;
     2d0:	8d ec       	ldi	r24, 0xCD	; 205
     2d2:	9c ec       	ldi	r25, 0xCC	; 204
     2d4:	ac e4       	ldi	r26, 0x4C	; 76
     2d6:	be e3       	ldi	r27, 0x3E	; 62
     2d8:	ed a1       	ldd	r30, Y+37	; 0x25
     2da:	fe a1       	ldd	r31, Y+38	; 0x26
     2dc:	80 83       	st	Z, r24
     2de:	91 83       	std	Z+1, r25	; 0x01
     2e0:	a2 83       	std	Z+2, r26	; 0x02
     2e2:	b3 83       	std	Z+3, r27	; 0x03
			*max_duty_cycle = DUTY_CYCLE_PUCK;
     2e4:	8d ec       	ldi	r24, 0xCD	; 205
     2e6:	9c ec       	ldi	r25, 0xCC	; 204
     2e8:	ac e4       	ldi	r26, 0x4C	; 76
     2ea:	bf e3       	ldi	r27, 0x3F	; 63
     2ec:	ef a1       	ldd	r30, Y+39	; 0x27
     2ee:	f8 a5       	ldd	r31, Y+40	; 0x28
     2f0:	80 83       	st	Z, r24
     2f2:	91 83       	std	Z+1, r25	; 0x01
     2f4:	a2 83       	std	Z+2, r26	; 0x02
     2f6:	b3 83       	std	Z+3, r27	; 0x03
			m_green(OFF);
     2f8:	6a 9a       	sbi	0x0d, 2	; 13
     2fa:	72 9a       	sbi	0x0e, 2	; 14
     2fc:	4f c0       	rjmp	.+158    	; 0x39c <attack_action+0x18a>
			return;
			
		}
		
		if (!has_puck())
     2fe:	0e 94 90 17 	call	0x2f20	; 0x2f20 <has_puck>
     302:	81 11       	cpse	r24, r1
     304:	4b c0       	rjmp	.+150    	; 0x39c <attack_action+0x18a>
		{
			*x_target = x_puck;
     306:	8d 81       	ldd	r24, Y+5	; 0x05
     308:	9e 81       	ldd	r25, Y+6	; 0x06
     30a:	af 81       	ldd	r26, Y+7	; 0x07
     30c:	b8 85       	ldd	r27, Y+8	; 0x08
     30e:	f4 01       	movw	r30, r8
     310:	80 83       	st	Z, r24
     312:	91 83       	std	Z+1, r25	; 0x01
     314:	a2 83       	std	Z+2, r26	; 0x02
     316:	b3 83       	std	Z+3, r27	; 0x03
			*y_target = y_puck;
     318:	ab 8d       	ldd	r26, Y+27	; 0x1b
     31a:	bc 8d       	ldd	r27, Y+28	; 0x1c
     31c:	ad 92       	st	X+, r10
     31e:	bd 92       	st	X+, r11
     320:	cd 92       	st	X+, r12
     322:	dc 92       	st	X, r13
     324:	13 97       	sbiw	r26, 0x03	; 3
			*max_theta = M_PI;
     326:	8b ed       	ldi	r24, 0xDB	; 219
     328:	9f e0       	ldi	r25, 0x0F	; 15
     32a:	a9 e4       	ldi	r26, 0x49	; 73
     32c:	b0 e4       	ldi	r27, 0x40	; 64
     32e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     330:	fe 8d       	ldd	r31, Y+30	; 0x1e
     332:	80 83       	st	Z, r24
     334:	91 83       	std	Z+1, r25	; 0x01
     336:	a2 83       	std	Z+2, r26	; 0x02
     338:	b3 83       	std	Z+3, r27	; 0x03
			*theta_kd = 0;
     33a:	af 8d       	ldd	r26, Y+31	; 0x1f
     33c:	b8 a1       	ldd	r27, Y+32	; 0x20
     33e:	1d 92       	st	X+, r1
     340:	1d 92       	st	X+, r1
     342:	1d 92       	st	X+, r1
     344:	1c 92       	st	X, r1
     346:	13 97       	sbiw	r26, 0x03	; 3
			*theta_kp = 1.8;
     348:	86 e6       	ldi	r24, 0x66	; 102
     34a:	96 e6       	ldi	r25, 0x66	; 102
     34c:	a6 ee       	ldi	r26, 0xE6	; 230
     34e:	bf e3       	ldi	r27, 0x3F	; 63
     350:	e9 a1       	ldd	r30, Y+33	; 0x21
     352:	fa a1       	ldd	r31, Y+34	; 0x22
     354:	80 83       	st	Z, r24
     356:	91 83       	std	Z+1, r25	; 0x01
     358:	a2 83       	std	Z+2, r26	; 0x02
     35a:	b3 83       	std	Z+3, r27	; 0x03
			*linear_kd = 0.01;
     35c:	8a e0       	ldi	r24, 0x0A	; 10
     35e:	97 ed       	ldi	r25, 0xD7	; 215
     360:	a3 e2       	ldi	r26, 0x23	; 35
     362:	bc e3       	ldi	r27, 0x3C	; 60
     364:	eb a1       	ldd	r30, Y+35	; 0x23
     366:	fc a1       	ldd	r31, Y+36	; 0x24
     368:	80 83       	st	Z, r24
     36a:	91 83       	std	Z+1, r25	; 0x01
     36c:	a2 83       	std	Z+2, r26	; 0x02
     36e:	b3 83       	std	Z+3, r27	; 0x03
			*linear_kp = 0.2;
     370:	8d ec       	ldi	r24, 0xCD	; 205
     372:	9c ec       	ldi	r25, 0xCC	; 204
     374:	ac e4       	ldi	r26, 0x4C	; 76
     376:	be e3       	ldi	r27, 0x3E	; 62
     378:	ed a1       	ldd	r30, Y+37	; 0x25
     37a:	fe a1       	ldd	r31, Y+38	; 0x26
     37c:	80 83       	st	Z, r24
     37e:	91 83       	std	Z+1, r25	; 0x01
     380:	a2 83       	std	Z+2, r26	; 0x02
     382:	b3 83       	std	Z+3, r27	; 0x03
			*max_duty_cycle = DUTY_CYCLE_SEEK;
     384:	8d ec       	ldi	r24, 0xCD	; 205
     386:	9c ec       	ldi	r25, 0xCC	; 204
     388:	ac e4       	ldi	r26, 0x4C	; 76
     38a:	bf e3       	ldi	r27, 0x3F	; 63
     38c:	ef a1       	ldd	r30, Y+39	; 0x27
     38e:	f8 a5       	ldd	r31, Y+40	; 0x28
     390:	80 83       	st	Z, r24
     392:	91 83       	std	Z+1, r25	; 0x01
     394:	a2 83       	std	Z+2, r26	; 0x02
     396:	b3 83       	std	Z+3, r27	; 0x03
			m_green(ON);
     398:	6a 9a       	sbi	0x0d, 2	; 13
     39a:	72 98       	cbi	0x0e, 2	; 14
			return;
		}
     39c:	28 96       	adiw	r28, 0x08	; 8
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	de bf       	out	0x3e, r29	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	cd bf       	out	0x3d, r28	; 61
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	ff 90       	pop	r15
     3b2:	ef 90       	pop	r14
     3b4:	df 90       	pop	r13
     3b6:	cf 90       	pop	r12
     3b8:	bf 90       	pop	r11
     3ba:	af 90       	pop	r10
     3bc:	9f 90       	pop	r9
     3be:	8f 90       	pop	r8
     3c0:	7f 90       	pop	r7
     3c2:	6f 90       	pop	r6
     3c4:	5f 90       	pop	r5
     3c6:	4f 90       	pop	r4
     3c8:	08 95       	ret

000003ca <goalie_action>:
************************************************************/


void goalie_action(float x_goal, float y_goal, float x_puck, float y_puck, int puck_dist, float* x_target, float* y_target, 
	float* max_theta, float* theta_kd, float* theta_kp, float* linear_kd, float* linear_kp, float* max_duty_cycle, int* role)
{
     3ca:	4f 92       	push	r4
     3cc:	5f 92       	push	r5
     3ce:	6f 92       	push	r6
     3d0:	7f 92       	push	r7
     3d2:	8f 92       	push	r8
     3d4:	9f 92       	push	r9
     3d6:	af 92       	push	r10
     3d8:	bf 92       	push	r11
     3da:	cf 92       	push	r12
     3dc:	df 92       	push	r13
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	a0 97       	sbiw	r28, 0x20	; 32
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	2b 01       	movw	r4, r22
     3fc:	3c 01       	movw	r6, r24
     3fe:	29 8b       	std	Y+17, r18	; 0x11
     400:	3a 8b       	std	Y+18, r19	; 0x12
     402:	4b 8b       	std	Y+19, r20	; 0x13
     404:	5c 8b       	std	Y+20, r21	; 0x14
     406:	ed 8a       	std	Y+21, r14	; 0x15
     408:	fe 8a       	std	Y+22, r15	; 0x16
     40a:	0f 8b       	std	Y+23, r16	; 0x17
     40c:	18 8f       	std	Y+24, r17	; 0x18
	if (has_puck())
     40e:	0e 94 90 17 	call	0x2f20	; 0x2f20 <has_puck>
     412:	88 23       	and	r24, r24
     414:	09 f4       	brne	.+2      	; 0x418 <goalie_action+0x4e>
     416:	59 c0       	rjmp	.+178    	; 0x4ca <goalie_action+0x100>
	{	//If has the puck, turn into an attacker
		*role = GOALIE;
     418:	25 96       	adiw	r28, 0x05	; 5
     41a:	ae ad       	ldd	r26, Y+62	; 0x3e
     41c:	bf ad       	ldd	r27, Y+63	; 0x3f
     41e:	25 97       	sbiw	r28, 0x05	; 5
     420:	1d 92       	st	X+, r1
     422:	1c 92       	st	X, r1
		*x_target = x_goal;
     424:	eb a9       	ldd	r30, Y+51	; 0x33
     426:	fc a9       	ldd	r31, Y+52	; 0x34
     428:	40 82       	st	Z, r4
     42a:	51 82       	std	Z+1, r5	; 0x01
     42c:	62 82       	std	Z+2, r6	; 0x02
     42e:	73 82       	std	Z+3, r7	; 0x03
		*y_target = y_goal;
     430:	89 89       	ldd	r24, Y+17	; 0x11
     432:	9a 89       	ldd	r25, Y+18	; 0x12
     434:	ab 89       	ldd	r26, Y+19	; 0x13
     436:	bc 89       	ldd	r27, Y+20	; 0x14
     438:	ed a9       	ldd	r30, Y+53	; 0x35
     43a:	fe a9       	ldd	r31, Y+54	; 0x36
     43c:	80 83       	st	Z, r24
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	a2 83       	std	Z+2, r26	; 0x02
     442:	b3 83       	std	Z+3, r27	; 0x03
		*max_theta = M_PI/2;
     444:	8b ed       	ldi	r24, 0xDB	; 219
     446:	9f e0       	ldi	r25, 0x0F	; 15
     448:	a9 ec       	ldi	r26, 0xC9	; 201
     44a:	bf e3       	ldi	r27, 0x3F	; 63
     44c:	ef a9       	ldd	r30, Y+55	; 0x37
     44e:	f8 ad       	ldd	r31, Y+56	; 0x38
     450:	80 83       	st	Z, r24
     452:	91 83       	std	Z+1, r25	; 0x01
     454:	a2 83       	std	Z+2, r26	; 0x02
     456:	b3 83       	std	Z+3, r27	; 0x03
		*theta_kd = 0.05;
     458:	8d ec       	ldi	r24, 0xCD	; 205
     45a:	9c ec       	ldi	r25, 0xCC	; 204
     45c:	ac e4       	ldi	r26, 0x4C	; 76
     45e:	bd e3       	ldi	r27, 0x3D	; 61
     460:	e9 ad       	ldd	r30, Y+57	; 0x39
     462:	fa ad       	ldd	r31, Y+58	; 0x3a
     464:	80 83       	st	Z, r24
     466:	91 83       	std	Z+1, r25	; 0x01
     468:	a2 83       	std	Z+2, r26	; 0x02
     46a:	b3 83       	std	Z+3, r27	; 0x03
		*theta_kp = 1.2;
     46c:	8a e9       	ldi	r24, 0x9A	; 154
     46e:	99 e9       	ldi	r25, 0x99	; 153
     470:	a9 e9       	ldi	r26, 0x99	; 153
     472:	bf e3       	ldi	r27, 0x3F	; 63
     474:	eb ad       	ldd	r30, Y+59	; 0x3b
     476:	fc ad       	ldd	r31, Y+60	; 0x3c
     478:	80 83       	st	Z, r24
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	a2 83       	std	Z+2, r26	; 0x02
     47e:	b3 83       	std	Z+3, r27	; 0x03
		*linear_kd = 0.2;
     480:	8d ec       	ldi	r24, 0xCD	; 205
     482:	9c ec       	ldi	r25, 0xCC	; 204
     484:	ac e4       	ldi	r26, 0x4C	; 76
     486:	be e3       	ldi	r27, 0x3E	; 62
     488:	ed ad       	ldd	r30, Y+61	; 0x3d
     48a:	fe ad       	ldd	r31, Y+62	; 0x3e
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
		*linear_kp = 0.01;
     494:	8a e0       	ldi	r24, 0x0A	; 10
     496:	97 ed       	ldi	r25, 0xD7	; 215
     498:	a3 e2       	ldi	r26, 0x23	; 35
     49a:	bc e3       	ldi	r27, 0x3C	; 60
     49c:	21 96       	adiw	r28, 0x01	; 1
     49e:	ee ad       	ldd	r30, Y+62	; 0x3e
     4a0:	ff ad       	ldd	r31, Y+63	; 0x3f
     4a2:	21 97       	sbiw	r28, 0x01	; 1
     4a4:	80 83       	st	Z, r24
     4a6:	91 83       	std	Z+1, r25	; 0x01
     4a8:	a2 83       	std	Z+2, r26	; 0x02
     4aa:	b3 83       	std	Z+3, r27	; 0x03
		*max_duty_cycle = DUTY_CYCLE_PUCK;
     4ac:	8d ec       	ldi	r24, 0xCD	; 205
     4ae:	9c ec       	ldi	r25, 0xCC	; 204
     4b0:	ac e4       	ldi	r26, 0x4C	; 76
     4b2:	bf e3       	ldi	r27, 0x3F	; 63
     4b4:	23 96       	adiw	r28, 0x03	; 3
     4b6:	ee ad       	ldd	r30, Y+62	; 0x3e
     4b8:	ff ad       	ldd	r31, Y+63	; 0x3f
     4ba:	23 97       	sbiw	r28, 0x03	; 3
     4bc:	80 83       	st	Z, r24
     4be:	91 83       	std	Z+1, r25	; 0x01
     4c0:	a2 83       	std	Z+2, r26	; 0x02
     4c2:	b3 83       	std	Z+3, r27	; 0x03
		m_green(OFF);
     4c4:	6a 9a       	sbi	0x0d, 2	; 13
     4c6:	72 9a       	sbi	0x0e, 2	; 14
     4c8:	68 c1       	rjmp	.+720    	; 0x79a <goalie_action+0x3d0>
		return;
		
	}
	
	if (!has_puck())
     4ca:	0e 94 90 17 	call	0x2f20	; 0x2f20 <has_puck>
     4ce:	81 11       	cpse	r24, r1
     4d0:	64 c1       	rjmp	.+712    	; 0x79a <goalie_action+0x3d0>
	{	
		*role = GOALIE;
     4d2:	25 96       	adiw	r28, 0x05	; 5
     4d4:	ae ad       	ldd	r26, Y+62	; 0x3e
     4d6:	bf ad       	ldd	r27, Y+63	; 0x3f
     4d8:	25 97       	sbiw	r28, 0x05	; 5
     4da:	1d 92       	st	X+, r1
     4dc:	1c 92       	st	X, r1
// 	
		//If puck isn't close 
		
		/* Find current position */
		float position_buffer[3];
		get_position(position_buffer);
     4de:	ce 01       	movw	r24, r28
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <get_position>
		float x = position_buffer[0];
		float y = position_buffer[1];
		float theta = position_buffer[2];
		
		/*decide action based on displacement from goal*/
		float goalie_displacement = sqrt((x+x_goal)*(x+x_goal)+(y-y_goal)*(y-y_goal));
     4e6:	29 81       	ldd	r18, Y+1	; 0x01
     4e8:	3a 81       	ldd	r19, Y+2	; 0x02
     4ea:	4b 81       	ldd	r20, Y+3	; 0x03
     4ec:	5c 81       	ldd	r21, Y+4	; 0x04
     4ee:	c3 01       	movw	r24, r6
     4f0:	b2 01       	movw	r22, r4
     4f2:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
     4f6:	6d 87       	std	Y+13, r22	; 0x0d
     4f8:	7e 87       	std	Y+14, r23	; 0x0e
     4fa:	8f 87       	std	Y+15, r24	; 0x0f
     4fc:	98 8b       	std	Y+16, r25	; 0x10
     4fe:	29 89       	ldd	r18, Y+17	; 0x11
     500:	3a 89       	ldd	r19, Y+18	; 0x12
     502:	4b 89       	ldd	r20, Y+19	; 0x13
     504:	5c 89       	ldd	r21, Y+20	; 0x14
     506:	6d 81       	ldd	r22, Y+5	; 0x05
     508:	7e 81       	ldd	r23, Y+6	; 0x06
     50a:	8f 81       	ldd	r24, Y+7	; 0x07
     50c:	98 85       	ldd	r25, Y+8	; 0x08
     50e:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
     512:	69 8f       	std	Y+25, r22	; 0x19
     514:	7a 8f       	std	Y+26, r23	; 0x1a
     516:	8b 8f       	std	Y+27, r24	; 0x1b
     518:	9c 8f       	std	Y+28, r25	; 0x1c
     51a:	2d 85       	ldd	r18, Y+13	; 0x0d
     51c:	3e 85       	ldd	r19, Y+14	; 0x0e
     51e:	4f 85       	ldd	r20, Y+15	; 0x0f
     520:	58 89       	ldd	r21, Y+16	; 0x10
     522:	ca 01       	movw	r24, r20
     524:	b9 01       	movw	r22, r18
     526:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     52a:	6d 8f       	std	Y+29, r22	; 0x1d
     52c:	7e 8f       	std	Y+30, r23	; 0x1e
     52e:	8f 8f       	std	Y+31, r24	; 0x1f
     530:	98 a3       	std	Y+32, r25	; 0x20
     532:	2d 85       	ldd	r18, Y+13	; 0x0d
     534:	3e 85       	ldd	r19, Y+14	; 0x0e
     536:	4f 85       	ldd	r20, Y+15	; 0x0f
     538:	58 89       	ldd	r21, Y+16	; 0x10
     53a:	ca 01       	movw	r24, r20
     53c:	b9 01       	movw	r22, r18
     53e:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     542:	6d 87       	std	Y+13, r22	; 0x0d
     544:	7e 87       	std	Y+14, r23	; 0x0e
     546:	8f 87       	std	Y+15, r24	; 0x0f
     548:	98 8b       	std	Y+16, r25	; 0x10
     54a:	29 8d       	ldd	r18, Y+25	; 0x19
     54c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     54e:	4b 8d       	ldd	r20, Y+27	; 0x1b
     550:	5c 8d       	ldd	r21, Y+28	; 0x1c
     552:	ca 01       	movw	r24, r20
     554:	b9 01       	movw	r22, r18
     556:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     55a:	9b 01       	movw	r18, r22
     55c:	ac 01       	movw	r20, r24
     55e:	6d 85       	ldd	r22, Y+13	; 0x0d
     560:	7e 85       	ldd	r23, Y+14	; 0x0e
     562:	8f 85       	ldd	r24, Y+15	; 0x0f
     564:	98 89       	ldd	r25, Y+16	; 0x10
     566:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
     56a:	0e 94 84 1c 	call	0x3908	; 0x3908 <sqrt>
		
		if (goalie_displacement > 80) { //if you're far from the goal
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 ea       	ldi	r20, 0xA0	; 160
     574:	52 e4       	ldi	r21, 0x42	; 66
     576:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__gesf2>
     57a:	18 16       	cp	r1, r24
     57c:	0c f0       	brlt	.+2      	; 0x580 <goalie_action+0x1b6>
     57e:	54 c0       	rjmp	.+168    	; 0x628 <goalie_action+0x25e>
			*x_target = -x_goal;
     580:	77 fa       	bst	r7, 7
     582:	70 94       	com	r7
     584:	77 f8       	bld	r7, 7
     586:	70 94       	com	r7
     588:	eb a9       	ldd	r30, Y+51	; 0x33
     58a:	fc a9       	ldd	r31, Y+52	; 0x34
     58c:	40 82       	st	Z, r4
     58e:	51 82       	std	Z+1, r5	; 0x01
     590:	62 82       	std	Z+2, r6	; 0x02
     592:	73 82       	std	Z+3, r7	; 0x03
			*y_target = y_goal;
     594:	89 89       	ldd	r24, Y+17	; 0x11
     596:	9a 89       	ldd	r25, Y+18	; 0x12
     598:	ab 89       	ldd	r26, Y+19	; 0x13
     59a:	bc 89       	ldd	r27, Y+20	; 0x14
     59c:	ed a9       	ldd	r30, Y+53	; 0x35
     59e:	fe a9       	ldd	r31, Y+54	; 0x36
     5a0:	80 83       	st	Z, r24
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	a2 83       	std	Z+2, r26	; 0x02
     5a6:	b3 83       	std	Z+3, r27	; 0x03
			*max_theta = M_PI;
     5a8:	8b ed       	ldi	r24, 0xDB	; 219
     5aa:	9f e0       	ldi	r25, 0x0F	; 15
     5ac:	a9 e4       	ldi	r26, 0x49	; 73
     5ae:	b0 e4       	ldi	r27, 0x40	; 64
     5b0:	ef a9       	ldd	r30, Y+55	; 0x37
     5b2:	f8 ad       	ldd	r31, Y+56	; 0x38
     5b4:	80 83       	st	Z, r24
     5b6:	91 83       	std	Z+1, r25	; 0x01
     5b8:	a2 83       	std	Z+2, r26	; 0x02
     5ba:	b3 83       	std	Z+3, r27	; 0x03
			*theta_kd = 0;
     5bc:	a9 ad       	ldd	r26, Y+57	; 0x39
     5be:	ba ad       	ldd	r27, Y+58	; 0x3a
     5c0:	1d 92       	st	X+, r1
     5c2:	1d 92       	st	X+, r1
     5c4:	1d 92       	st	X+, r1
     5c6:	1c 92       	st	X, r1
     5c8:	13 97       	sbiw	r26, 0x03	; 3
			*theta_kp = 1.8;
     5ca:	86 e6       	ldi	r24, 0x66	; 102
     5cc:	96 e6       	ldi	r25, 0x66	; 102
     5ce:	a6 ee       	ldi	r26, 0xE6	; 230
     5d0:	bf e3       	ldi	r27, 0x3F	; 63
     5d2:	eb ad       	ldd	r30, Y+59	; 0x3b
     5d4:	fc ad       	ldd	r31, Y+60	; 0x3c
     5d6:	80 83       	st	Z, r24
     5d8:	91 83       	std	Z+1, r25	; 0x01
     5da:	a2 83       	std	Z+2, r26	; 0x02
     5dc:	b3 83       	std	Z+3, r27	; 0x03
			*linear_kd = 0.2;
     5de:	8d ec       	ldi	r24, 0xCD	; 205
     5e0:	9c ec       	ldi	r25, 0xCC	; 204
     5e2:	ac e4       	ldi	r26, 0x4C	; 76
     5e4:	be e3       	ldi	r27, 0x3E	; 62
     5e6:	ed ad       	ldd	r30, Y+61	; 0x3d
     5e8:	fe ad       	ldd	r31, Y+62	; 0x3e
     5ea:	80 83       	st	Z, r24
     5ec:	91 83       	std	Z+1, r25	; 0x01
     5ee:	a2 83       	std	Z+2, r26	; 0x02
     5f0:	b3 83       	std	Z+3, r27	; 0x03
			*linear_kp = 0.01;
     5f2:	8a e0       	ldi	r24, 0x0A	; 10
     5f4:	97 ed       	ldi	r25, 0xD7	; 215
     5f6:	a3 e2       	ldi	r26, 0x23	; 35
     5f8:	bc e3       	ldi	r27, 0x3C	; 60
     5fa:	21 96       	adiw	r28, 0x01	; 1
     5fc:	ee ad       	ldd	r30, Y+62	; 0x3e
     5fe:	ff ad       	ldd	r31, Y+63	; 0x3f
     600:	21 97       	sbiw	r28, 0x01	; 1
     602:	80 83       	st	Z, r24
     604:	91 83       	std	Z+1, r25	; 0x01
     606:	a2 83       	std	Z+2, r26	; 0x02
     608:	b3 83       	std	Z+3, r27	; 0x03
			*max_duty_cycle = DUTY_CYCLE_SEEK;
     60a:	8d ec       	ldi	r24, 0xCD	; 205
     60c:	9c ec       	ldi	r25, 0xCC	; 204
     60e:	ac e4       	ldi	r26, 0x4C	; 76
     610:	bf e3       	ldi	r27, 0x3F	; 63
     612:	23 96       	adiw	r28, 0x03	; 3
     614:	ee ad       	ldd	r30, Y+62	; 0x3e
     616:	ff ad       	ldd	r31, Y+63	; 0x3f
     618:	23 97       	sbiw	r28, 0x03	; 3
     61a:	80 83       	st	Z, r24
     61c:	91 83       	std	Z+1, r25	; 0x01
     61e:	a2 83       	std	Z+2, r26	; 0x02
     620:	b3 83       	std	Z+3, r27	; 0x03
			m_green(ON);
     622:	6a 9a       	sbi	0x0d, 2	; 13
     624:	72 98       	cbi	0x0e, 2	; 14
     626:	b9 c0       	rjmp	.+370    	; 0x79a <goalie_action+0x3d0>
			return;
		}
		if (puck_dist > 200)
     628:	f9 ec       	ldi	r31, 0xC9	; 201
     62a:	8f 16       	cp	r8, r31
     62c:	91 04       	cpc	r9, r1
     62e:	0c f4       	brge	.+2      	; 0x632 <goalie_action+0x268>
     630:	4d c0       	rjmp	.+154    	; 0x6cc <goalie_action+0x302>
		{	//If puck is in sight, face the puck
			*x_target = x_puck;
     632:	8d 89       	ldd	r24, Y+21	; 0x15
     634:	9e 89       	ldd	r25, Y+22	; 0x16
     636:	af 89       	ldd	r26, Y+23	; 0x17
     638:	b8 8d       	ldd	r27, Y+24	; 0x18
     63a:	eb a9       	ldd	r30, Y+51	; 0x33
     63c:	fc a9       	ldd	r31, Y+52	; 0x34
     63e:	80 83       	st	Z, r24
     640:	91 83       	std	Z+1, r25	; 0x01
     642:	a2 83       	std	Z+2, r26	; 0x02
     644:	b3 83       	std	Z+3, r27	; 0x03
			*y_target = y_puck;
     646:	ad a9       	ldd	r26, Y+53	; 0x35
     648:	be a9       	ldd	r27, Y+54	; 0x36
     64a:	ad 92       	st	X+, r10
     64c:	bd 92       	st	X+, r11
     64e:	cd 92       	st	X+, r12
     650:	dc 92       	st	X, r13
     652:	13 97       	sbiw	r26, 0x03	; 3
			*max_theta = M_PI;
     654:	8b ed       	ldi	r24, 0xDB	; 219
     656:	9f e0       	ldi	r25, 0x0F	; 15
     658:	a9 e4       	ldi	r26, 0x49	; 73
     65a:	b0 e4       	ldi	r27, 0x40	; 64
     65c:	ef a9       	ldd	r30, Y+55	; 0x37
     65e:	f8 ad       	ldd	r31, Y+56	; 0x38
     660:	80 83       	st	Z, r24
     662:	91 83       	std	Z+1, r25	; 0x01
     664:	a2 83       	std	Z+2, r26	; 0x02
     666:	b3 83       	std	Z+3, r27	; 0x03
			*theta_kd = 0.05;
     668:	8d ec       	ldi	r24, 0xCD	; 205
     66a:	9c ec       	ldi	r25, 0xCC	; 204
     66c:	ac e4       	ldi	r26, 0x4C	; 76
     66e:	bd e3       	ldi	r27, 0x3D	; 61
     670:	e9 ad       	ldd	r30, Y+57	; 0x39
     672:	fa ad       	ldd	r31, Y+58	; 0x3a
     674:	80 83       	st	Z, r24
     676:	91 83       	std	Z+1, r25	; 0x01
     678:	a2 83       	std	Z+2, r26	; 0x02
     67a:	b3 83       	std	Z+3, r27	; 0x03
			*theta_kp = 1.2;
     67c:	8a e9       	ldi	r24, 0x9A	; 154
     67e:	99 e9       	ldi	r25, 0x99	; 153
     680:	a9 e9       	ldi	r26, 0x99	; 153
     682:	bf e3       	ldi	r27, 0x3F	; 63
     684:	eb ad       	ldd	r30, Y+59	; 0x3b
     686:	fc ad       	ldd	r31, Y+60	; 0x3c
     688:	80 83       	st	Z, r24
     68a:	91 83       	std	Z+1, r25	; 0x01
     68c:	a2 83       	std	Z+2, r26	; 0x02
     68e:	b3 83       	std	Z+3, r27	; 0x03
			*linear_kd = 0.0;
     690:	ad ad       	ldd	r26, Y+61	; 0x3d
     692:	be ad       	ldd	r27, Y+62	; 0x3e
     694:	1d 92       	st	X+, r1
     696:	1d 92       	st	X+, r1
     698:	1d 92       	st	X+, r1
     69a:	1c 92       	st	X, r1
     69c:	13 97       	sbiw	r26, 0x03	; 3
			*linear_kp = 0.0;
     69e:	21 96       	adiw	r28, 0x01	; 1
     6a0:	ee ad       	ldd	r30, Y+62	; 0x3e
     6a2:	ff ad       	ldd	r31, Y+63	; 0x3f
     6a4:	21 97       	sbiw	r28, 0x01	; 1
     6a6:	10 82       	st	Z, r1
     6a8:	11 82       	std	Z+1, r1	; 0x01
     6aa:	12 82       	std	Z+2, r1	; 0x02
     6ac:	13 82       	std	Z+3, r1	; 0x03
			*max_duty_cycle = 0.5;
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	a0 e0       	ldi	r26, 0x00	; 0
     6b4:	bf e3       	ldi	r27, 0x3F	; 63
     6b6:	23 96       	adiw	r28, 0x03	; 3
     6b8:	ee ad       	ldd	r30, Y+62	; 0x3e
     6ba:	ff ad       	ldd	r31, Y+63	; 0x3f
     6bc:	23 97       	sbiw	r28, 0x03	; 3
     6be:	80 83       	st	Z, r24
     6c0:	91 83       	std	Z+1, r25	; 0x01
     6c2:	a2 83       	std	Z+2, r26	; 0x02
     6c4:	b3 83       	std	Z+3, r27	; 0x03
			m_green(ON);
     6c6:	6a 9a       	sbi	0x0d, 2	; 13
     6c8:	72 98       	cbi	0x0e, 2	; 14
     6ca:	67 c0       	rjmp	.+206    	; 0x79a <goalie_action+0x3d0>
			return;
			
		}	
		
		*max_theta = M_PI;
     6cc:	8b ed       	ldi	r24, 0xDB	; 219
     6ce:	9f e0       	ldi	r25, 0x0F	; 15
     6d0:	a9 e4       	ldi	r26, 0x49	; 73
     6d2:	b0 e4       	ldi	r27, 0x40	; 64
     6d4:	ef a9       	ldd	r30, Y+55	; 0x37
     6d6:	f8 ad       	ldd	r31, Y+56	; 0x38
     6d8:	80 83       	st	Z, r24
     6da:	91 83       	std	Z+1, r25	; 0x01
     6dc:	a2 83       	std	Z+2, r26	; 0x02
     6de:	b3 83       	std	Z+3, r27	; 0x03
		*theta_kd = 0.01;
     6e0:	8a e0       	ldi	r24, 0x0A	; 10
     6e2:	97 ed       	ldi	r25, 0xD7	; 215
     6e4:	a3 e2       	ldi	r26, 0x23	; 35
     6e6:	bc e3       	ldi	r27, 0x3C	; 60
     6e8:	e9 ad       	ldd	r30, Y+57	; 0x39
     6ea:	fa ad       	ldd	r31, Y+58	; 0x3a
     6ec:	80 83       	st	Z, r24
     6ee:	91 83       	std	Z+1, r25	; 0x01
     6f0:	a2 83       	std	Z+2, r26	; 0x02
     6f2:	b3 83       	std	Z+3, r27	; 0x03
		*theta_kp = 1.2;
     6f4:	8a e9       	ldi	r24, 0x9A	; 154
     6f6:	99 e9       	ldi	r25, 0x99	; 153
     6f8:	a9 e9       	ldi	r26, 0x99	; 153
     6fa:	bf e3       	ldi	r27, 0x3F	; 63
     6fc:	eb ad       	ldd	r30, Y+59	; 0x3b
     6fe:	fc ad       	ldd	r31, Y+60	; 0x3c
     700:	80 83       	st	Z, r24
     702:	91 83       	std	Z+1, r25	; 0x01
     704:	a2 83       	std	Z+2, r26	; 0x02
     706:	b3 83       	std	Z+3, r27	; 0x03
		*linear_kd = 0.0;
     708:	ad ad       	ldd	r26, Y+61	; 0x3d
     70a:	be ad       	ldd	r27, Y+62	; 0x3e
     70c:	1d 92       	st	X+, r1
     70e:	1d 92       	st	X+, r1
     710:	1d 92       	st	X+, r1
     712:	1c 92       	st	X, r1
     714:	13 97       	sbiw	r26, 0x03	; 3
		*linear_kp = 0.0;
     716:	21 96       	adiw	r28, 0x01	; 1
     718:	ee ad       	ldd	r30, Y+62	; 0x3e
     71a:	ff ad       	ldd	r31, Y+63	; 0x3f
     71c:	21 97       	sbiw	r28, 0x01	; 1
     71e:	10 82       	st	Z, r1
     720:	11 82       	std	Z+1, r1	; 0x01
     722:	12 82       	std	Z+2, r1	; 0x02
     724:	13 82       	std	Z+3, r1	; 0x03
		*max_duty_cycle = 0.5;
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	a0 e0       	ldi	r26, 0x00	; 0
     72c:	bf e3       	ldi	r27, 0x3F	; 63
     72e:	23 96       	adiw	r28, 0x03	; 3
     730:	ee ad       	ldd	r30, Y+62	; 0x3e
     732:	ff ad       	ldd	r31, Y+63	; 0x3f
     734:	23 97       	sbiw	r28, 0x03	; 3
     736:	80 83       	st	Z, r24
     738:	91 83       	std	Z+1, r25	; 0x01
     73a:	a2 83       	std	Z+2, r26	; 0x02
     73c:	b3 83       	std	Z+3, r27	; 0x03
		m_green(ON);
     73e:	6a 9a       	sbi	0x0d, 2	; 13
     740:	72 98       	cbi	0x0e, 2	; 14
			
		if (x_goal>0) {
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	a9 01       	movw	r20, r18
     748:	c3 01       	movw	r24, r6
     74a:	b2 01       	movw	r22, r4
     74c:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__gesf2>
     750:	18 16       	cp	r1, r24
     752:	94 f4       	brge	.+36     	; 0x778 <goalie_action+0x3ae>
			*x_target = 100;
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	a8 ec       	ldi	r26, 0xC8	; 200
     75a:	b2 e4       	ldi	r27, 0x42	; 66
     75c:	eb a9       	ldd	r30, Y+51	; 0x33
     75e:	fc a9       	ldd	r31, Y+52	; 0x34
     760:	80 83       	st	Z, r24
     762:	91 83       	std	Z+1, r25	; 0x01
     764:	a2 83       	std	Z+2, r26	; 0x02
     766:	b3 83       	std	Z+3, r27	; 0x03
			*y_target = 0;
     768:	ad a9       	ldd	r26, Y+53	; 0x35
     76a:	be a9       	ldd	r27, Y+54	; 0x36
     76c:	1d 92       	st	X+, r1
     76e:	1d 92       	st	X+, r1
     770:	1d 92       	st	X+, r1
     772:	1c 92       	st	X, r1
     774:	13 97       	sbiw	r26, 0x03	; 3
     776:	11 c0       	rjmp	.+34     	; 0x79a <goalie_action+0x3d0>
		} else {
			*x_target = -100;
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	a8 ec       	ldi	r26, 0xC8	; 200
     77e:	b2 ec       	ldi	r27, 0xC2	; 194
     780:	eb a9       	ldd	r30, Y+51	; 0x33
     782:	fc a9       	ldd	r31, Y+52	; 0x34
     784:	80 83       	st	Z, r24
     786:	91 83       	std	Z+1, r25	; 0x01
     788:	a2 83       	std	Z+2, r26	; 0x02
     78a:	b3 83       	std	Z+3, r27	; 0x03
			*y_target = 0;
     78c:	ad a9       	ldd	r26, Y+53	; 0x35
     78e:	be a9       	ldd	r27, Y+54	; 0x36
     790:	1d 92       	st	X+, r1
     792:	1d 92       	st	X+, r1
     794:	1d 92       	st	X+, r1
     796:	1c 92       	st	X, r1
     798:	13 97       	sbiw	r26, 0x03	; 3
			
			
			
	
	}
     79a:	a0 96       	adiw	r28, 0x20	; 32
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	bf 90       	pop	r11
     7b8:	af 90       	pop	r10
     7ba:	9f 90       	pop	r9
     7bc:	8f 90       	pop	r8
     7be:	7f 90       	pop	r7
     7c0:	6f 90       	pop	r6
     7c2:	5f 90       	pop	r5
     7c4:	4f 90       	pop	r4
     7c6:	08 95       	ret

000007c8 <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(void) {
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
/************************************************************
Initialization of Pins and System Clock
************************************************************/

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     7cc:	e1 e6       	ldi	r30, 0x61	; 97
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 e8       	ldi	r24, 0x80	; 128
     7d2:	80 83       	st	Z, r24
     7d4:	10 82       	st	Z, r1

	// Disable JTAG
	m_disableJTAG(); // turn off JTAG port and allow access to F4-F7 as GPIO
     7d6:	85 bf       	out	0x35, r24	; 53
     7d8:	85 bf       	out	0x35, r24	; 53
	
	//Set to Input
	clear(DDRD,0); // D0
     7da:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     7dc:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     7de:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     7e0:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     7e2:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     7e4:	23 9a       	sbi	0x04, 3	; 4
	
	set(DDRC,6); //C6 Red positioning LED
     7e6:	3e 9a       	sbi	0x07, 6	; 7
	set(DDRC,7); //C7 Blue positioning LED 
     7e8:	3f 9a       	sbi	0x07, 7	; 7
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     7ea:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     7ec:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     7ee:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     7f0:	2b 98       	cbi	0x05, 3	; 5
	
	clear(PORTC,6); //Start with positioning LED off
     7f2:	46 98       	cbi	0x08, 6	; 8
	clear(PORTC,7); 
     7f4:	47 98       	cbi	0x08, 7	; 8

/************************************************************
Setup Subsystems
************************************************************/

	m_bus_init();
     7f6:	0e 94 6d 11 	call	0x22da	; 0x22da <m_bus_init>
	while(!m_wii_open());
     7fa:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <m_wii_open>
     7fe:	88 23       	and	r24, r24
     800:	e1 f3       	breq	.-8      	; 0x7fa <initialize_robockey+0x32>
	sei();
     802:	78 94       	sei
	m_usb_init();
     804:	0e 94 38 12 	call	0x2470	; 0x2470 <m_usb_init>
	while(!m_rf_open(CHANNEL,RXADDRESS_1,PACKET_LENGTH)); // Configure mRF
     808:	4a e0       	ldi	r20, 0x0A	; 10
     80a:	60 e2       	ldi	r22, 0x20	; 32
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <m_rf_open>
     812:	88 23       	and	r24, r24
     814:	c9 f3       	breq	.-14     	; 0x808 <initialize_robockey+0x40>
/************************************************************
Timer1 Initialization for PWM Motor Control
************************************************************/

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     816:	e1 e8       	ldi	r30, 0x81	; 129
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	80 81       	ld	r24, Z
     81c:	8b 7f       	andi	r24, 0xFB	; 251
     81e:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     820:	80 81       	ld	r24, Z
     822:	8d 7f       	andi	r24, 0xFD	; 253
     824:	80 83       	st	Z, r24
	clear(TCCR1B,CS10);
     826:	80 81       	ld	r24, Z
     828:	8e 7f       	andi	r24, 0xFE	; 254
     82a:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     82c:	80 81       	ld	r24, Z
     82e:	8f 7e       	andi	r24, 0xEF	; 239
     830:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     832:	80 81       	ld	r24, Z
     834:	88 60       	ori	r24, 0x08	; 8
     836:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     838:	e0 e8       	ldi	r30, 0x80	; 128
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	80 81       	ld	r24, Z
     83e:	8d 7f       	andi	r24, 0xFD	; 253
     840:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     842:	80 81       	ld	r24, Z
     844:	8e 7f       	andi	r24, 0xFE	; 254
     846:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     848:	80 81       	ld	r24, Z
     84a:	8f 7d       	andi	r24, 0xDF	; 223
     84c:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     84e:	80 81       	ld	r24, Z
     850:	8f 7e       	andi	r24, 0xEF	; 239
     852:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     854:	c8 e8       	ldi	r28, 0x88	; 136
     856:	d0 e0       	ldi	r29, 0x00	; 0
     858:	8a ea       	ldi	r24, 0xAA	; 170
     85a:	99 e2       	ldi	r25, 0x29	; 41
     85c:	99 83       	std	Y+1, r25	; 0x01
     85e:	88 83       	st	Y, r24
	OCR1B = (float)OCR1A*0.1;
     860:	68 81       	ld	r22, Y
     862:	79 81       	ldd	r23, Y+1	; 0x01
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__floatunsisf>
     86c:	2d ec       	ldi	r18, 0xCD	; 205
     86e:	3c ec       	ldi	r19, 0xCC	; 204
     870:	4c ec       	ldi	r20, 0xCC	; 204
     872:	5d e3       	ldi	r21, 0x3D	; 61
     874:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     878:	0e 94 b5 1a 	call	0x356a	; 0x356a <__fixunssfsi>
     87c:	70 93 8b 00 	sts	0x008B, r23
     880:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     884:	68 81       	ld	r22, Y
     886:	79 81       	ldd	r23, Y+1	; 0x01
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__floatunsisf>
     890:	2d ec       	ldi	r18, 0xCD	; 205
     892:	3c ec       	ldi	r19, 0xCC	; 204
     894:	4c ec       	ldi	r20, 0xCC	; 204
     896:	5d e3       	ldi	r21, 0x3D	; 61
     898:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     89c:	0e 94 b5 1a 	call	0x356a	; 0x356a <__fixunssfsi>
     8a0:	70 93 8d 00 	sts	0x008D, r23
     8a4:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     8a8:	ef e6       	ldi	r30, 0x6F	; 111
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	82 60       	ori	r24, 0x02	; 2
     8b0:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     8b2:	80 81       	ld	r24, Z
     8b4:	84 60       	ori	r24, 0x04	; 4
     8b6:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     8b8:	80 81       	ld	r24, Z
     8ba:	88 60       	ori	r24, 0x08	; 8
     8bc:	80 83       	st	Z, r24

/************************************************************
Timer3 Initialization for fixed timestep calculations
************************************************************/

	clear(TCCR3B,CS32); // prescale /1
     8be:	e1 e9       	ldi	r30, 0x91	; 145
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	8b 7f       	andi	r24, 0xFB	; 251
     8c6:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     8c8:	80 81       	ld	r24, Z
     8ca:	8d 7f       	andi	r24, 0xFD	; 253
     8cc:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     8ce:	80 81       	ld	r24, Z
     8d0:	81 60       	ori	r24, 0x01	; 1
     8d2:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     8d4:	80 81       	ld	r24, Z
     8d6:	8f 7e       	andi	r24, 0xEF	; 239
     8d8:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     8da:	80 81       	ld	r24, Z
     8dc:	88 60       	ori	r24, 0x08	; 8
     8de:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     8e0:	e0 e9       	ldi	r30, 0x90	; 144
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	8d 7f       	andi	r24, 0xFD	; 253
     8e8:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     8ea:	80 81       	ld	r24, Z
     8ec:	8e 7f       	andi	r24, 0xFE	; 254
     8ee:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     8f0:	80 e8       	ldi	r24, 0x80	; 128
     8f2:	9e e3       	ldi	r25, 0x3E	; 62
     8f4:	90 93 99 00 	sts	0x0099, r25
     8f8:	80 93 98 00 	sts	0x0098, r24

/************************************************************
Timer0 Initialization for COMM test 
************************************************************/
	clear(TCCR0B,CS02); //start with timer off
     8fc:	85 b5       	in	r24, 0x25	; 37
     8fe:	8b 7f       	andi	r24, 0xFB	; 251
     900:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS01);
     902:	85 b5       	in	r24, 0x25	; 37
     904:	8d 7f       	andi	r24, 0xFD	; 253
     906:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS00);
     908:	85 b5       	in	r24, 0x25	; 37
     90a:	8e 7f       	andi	r24, 0xFE	; 254
     90c:	85 bd       	out	0x25, r24	; 37
	
	clear(TCCR0B,WGM02); //Up to OCR0A mode 
     90e:	85 b5       	in	r24, 0x25	; 37
     910:	87 7f       	andi	r24, 0xF7	; 247
     912:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0A,WGM01);
     914:	84 b5       	in	r24, 0x24	; 36
     916:	8d 7f       	andi	r24, 0xFD	; 253
     918:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A,WGM00);
     91a:	84 b5       	in	r24, 0x24	; 36
     91c:	8e 7f       	andi	r24, 0xFE	; 254
     91e:	84 bd       	out	0x24, r24	; 36
		
	set(TIMSK0,TOIE0); //enable interupt at OCR0A
     920:	ee e6       	ldi	r30, 0x6E	; 110
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	81 60       	ori	r24, 0x01	; 1
     928:	80 83       	st	Z, r24
	
/************************************************************
Setup ADC
************************************************************/
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
     92a:	cc e7       	ldi	r28, 0x7C	; 124
     92c:	d0 e0       	ldi	r29, 0x00	; 0
     92e:	88 81       	ld	r24, Y
     930:	8f 77       	andi	r24, 0x7F	; 127
     932:	88 83       	st	Y, r24
	set(ADMUX,REFS0);
     934:	88 81       	ld	r24, Y
     936:	80 64       	ori	r24, 0x40	; 64
     938:	88 83       	st	Y, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
     93a:	ea e7       	ldi	r30, 0x7A	; 122
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	8b 7f       	andi	r24, 0xFB	; 251
     942:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     944:	80 81       	ld	r24, Z
     946:	82 60       	ori	r24, 0x02	; 2
     948:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     94a:	80 81       	ld	r24, Z
     94c:	81 60       	ori	r24, 0x01	; 1
     94e:	80 83       	st	Z, r24
	
	// Disable Digital input to:
	set(DIDR0,ADC0D); // ADC0
     950:	ae e7       	ldi	r26, 0x7E	; 126
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	8c 91       	ld	r24, X
     956:	81 60       	ori	r24, 0x01	; 1
     958:	8c 93       	st	X, r24
	set(DIDR0,ADC1D); // ADC1
     95a:	8c 91       	ld	r24, X
     95c:	82 60       	ori	r24, 0x02	; 2
     95e:	8c 93       	st	X, r24
	set(DIDR0,ADC4D); // ADC4
     960:	8c 91       	ld	r24, X
     962:	80 61       	ori	r24, 0x10	; 16
     964:	8c 93       	st	X, r24
	set(DIDR0,ADC5D); // ADC5
     966:	8c 91       	ld	r24, X
     968:	80 62       	ori	r24, 0x20	; 32
     96a:	8c 93       	st	X, r24
	set(DIDR0,ADC6D); // ADC6
     96c:	8c 91       	ld	r24, X
     96e:	80 64       	ori	r24, 0x40	; 64
     970:	8c 93       	st	X, r24
	set(DIDR0,ADC7D); // ADC7
     972:	8c 91       	ld	r24, X
     974:	80 68       	ori	r24, 0x80	; 128
     976:	8c 93       	st	X, r24
	set(DIDR2,ADC8D); // ADC8
     978:	ad e7       	ldi	r26, 0x7D	; 125
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	8c 91       	ld	r24, X
     97e:	81 60       	ori	r24, 0x01	; 1
     980:	8c 93       	st	X, r24
	set(DIDR2,ADC9D); // ADC9
     982:	8c 91       	ld	r24, X
     984:	82 60       	ori	r24, 0x02	; 2
     986:	8c 93       	st	X, r24
	set(DIDR2,ADC10D); // ADC10
     988:	8c 91       	ld	r24, X
     98a:	84 60       	ori	r24, 0x04	; 4
     98c:	8c 93       	st	X, r24
	set(DIDR2,ADC11D); // ADC11
     98e:	8c 91       	ld	r24, X
     990:	88 60       	ori	r24, 0x08	; 8
     992:	8c 93       	st	X, r24
	set(DIDR2,ADC12D); // ADC812
     994:	8c 91       	ld	r24, X
     996:	80 61       	ori	r24, 0x10	; 16
     998:	8c 93       	st	X, r24
	set(DIDR2,ADC13D); // ADC13
     99a:	8c 91       	ld	r24, X
     99c:	80 62       	ori	r24, 0x20	; 32
     99e:	8c 93       	st	X, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
     9a0:	80 81       	ld	r24, Z
     9a2:	8f 7d       	andi	r24, 0xDF	; 223
     9a4:	80 83       	st	Z, r24
	
	set(ADCSRB,MUX5); // Select ADC13 at pin B6
     9a6:	ab e7       	ldi	r26, 0x7B	; 123
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	8c 91       	ld	r24, X
     9ac:	80 62       	ori	r24, 0x20	; 32
     9ae:	8c 93       	st	X, r24
	set(ADMUX,MUX2); // Transistor 4
     9b0:	88 81       	ld	r24, Y
     9b2:	84 60       	ori	r24, 0x04	; 4
     9b4:	88 83       	st	Y, r24
	clear(ADMUX,MUX1);
     9b6:	88 81       	ld	r24, Y
     9b8:	8d 7f       	andi	r24, 0xFD	; 253
     9ba:	88 83       	st	Y, r24
	set(ADMUX,MUX0);
     9bc:	88 81       	ld	r24, Y
     9be:	81 60       	ori	r24, 0x01	; 1
     9c0:	88 83       	st	Y, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
     9c2:	80 81       	ld	r24, Z
     9c4:	80 68       	ori	r24, 0x80	; 128
     9c6:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
     9c8:	80 81       	ld	r24, Z
     9ca:	80 64       	ori	r24, 0x40	; 64
     9cc:	80 83       	st	Z, r24
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <distIndex>:
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	91 05       	cpc	r25, r1
     9d8:	f9 f0       	breq	.+62     	; 0xa18 <distIndex+0x44>
     9da:	2c f4       	brge	.+10     	; 0x9e6 <distIndex+0x12>
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	51 f0       	breq	.+20     	; 0x9f4 <distIndex+0x20>
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	89 f0       	breq	.+34     	; 0xa06 <distIndex+0x32>
     9e4:	42 c0       	rjmp	.+132    	; 0xa6a <distIndex+0x96>
     9e6:	84 30       	cpi	r24, 0x04	; 4
     9e8:	91 05       	cpc	r25, r1
     9ea:	51 f1       	breq	.+84     	; 0xa40 <distIndex+0x6c>
     9ec:	f4 f0       	brlt	.+60     	; 0xa2a <distIndex+0x56>
     9ee:	05 97       	sbiw	r24, 0x05	; 5
     9f0:	91 f1       	breq	.+100    	; 0xa56 <distIndex+0x82>
     9f2:	3b c0       	rjmp	.+118    	; 0xa6a <distIndex+0x96>
     9f4:	ea e5       	ldi	r30, 0x5A	; 90
     9f6:	f1 e0       	ldi	r31, 0x01	; 1
     9f8:	11 82       	std	Z+1, r1	; 0x01
     9fa:	10 82       	st	Z, r1
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	93 83       	std	Z+3, r25	; 0x03
     a02:	82 83       	std	Z+2, r24	; 0x02
     a04:	32 c0       	rjmp	.+100    	; 0xa6a <distIndex+0x96>
     a06:	ea e5       	ldi	r30, 0x5A	; 90
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	11 82       	std	Z+1, r1	; 0x01
     a0c:	10 82       	st	Z, r1
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	93 83       	std	Z+3, r25	; 0x03
     a14:	82 83       	std	Z+2, r24	; 0x02
     a16:	29 c0       	rjmp	.+82     	; 0xa6a <distIndex+0x96>
     a18:	ea e5       	ldi	r30, 0x5A	; 90
     a1a:	f1 e0       	ldi	r31, 0x01	; 1
     a1c:	11 82       	std	Z+1, r1	; 0x01
     a1e:	10 82       	st	Z, r1
     a20:	83 e0       	ldi	r24, 0x03	; 3
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	93 83       	std	Z+3, r25	; 0x03
     a26:	82 83       	std	Z+2, r24	; 0x02
     a28:	20 c0       	rjmp	.+64     	; 0xa6a <distIndex+0x96>
     a2a:	ea e5       	ldi	r30, 0x5A	; 90
     a2c:	f1 e0       	ldi	r31, 0x01	; 1
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	91 83       	std	Z+1, r25	; 0x01
     a34:	80 83       	st	Z, r24
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	93 83       	std	Z+3, r25	; 0x03
     a3c:	82 83       	std	Z+2, r24	; 0x02
     a3e:	15 c0       	rjmp	.+42     	; 0xa6a <distIndex+0x96>
     a40:	ea e5       	ldi	r30, 0x5A	; 90
     a42:	f1 e0       	ldi	r31, 0x01	; 1
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	91 83       	std	Z+1, r25	; 0x01
     a4a:	80 83       	st	Z, r24
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	93 83       	std	Z+3, r25	; 0x03
     a52:	82 83       	std	Z+2, r24	; 0x02
     a54:	0a c0       	rjmp	.+20     	; 0xa6a <distIndex+0x96>
     a56:	ea e5       	ldi	r30, 0x5A	; 90
     a58:	f1 e0       	ldi	r31, 0x01	; 1
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	91 83       	std	Z+1, r25	; 0x01
     a60:	80 83       	st	Z, r24
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	93 83       	std	Z+3, r25	; 0x03
     a68:	82 83       	std	Z+2, r24	; 0x02
     a6a:	8a e5       	ldi	r24, 0x5A	; 90
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	08 95       	ret

00000a70 <orientationCalculationFour>:
     a70:	2f 92       	push	r2
     a72:	3f 92       	push	r3
     a74:	4f 92       	push	r4
     a76:	5f 92       	push	r5
     a78:	6f 92       	push	r6
     a7a:	7f 92       	push	r7
     a7c:	8f 92       	push	r8
     a7e:	9f 92       	push	r9
     a80:	af 92       	push	r10
     a82:	bf 92       	push	r11
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	00 d0       	rcall	.+0      	; 0xa96 <orientationCalculationFour+0x26>
     a96:	00 d0       	rcall	.+0      	; 0xa98 <orientationCalculationFour+0x28>
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	5c 01       	movw	r10, r24
     a9e:	4a 01       	movw	r8, r20
     aa0:	3a 83       	std	Y+2, r19	; 0x02
     aa2:	29 83       	std	Y+1, r18	; 0x01
     aa4:	06 2f       	mov	r16, r22
     aa6:	17 2f       	mov	r17, r23
     aa8:	f8 01       	movw	r30, r16
     aaa:	41 90       	ld	r4, Z+
     aac:	51 90       	ld	r5, Z+
     aae:	61 90       	ld	r6, Z+
     ab0:	71 90       	ld	r7, Z+
     ab2:	8f 01       	movw	r16, r30
     ab4:	1c 82       	std	Y+4, r1	; 0x04
     ab6:	1b 82       	std	Y+3, r1	; 0x03
     ab8:	21 2c       	mov	r2, r1
     aba:	31 2c       	mov	r3, r1
     abc:	12 c0       	rjmp	.+36     	; 0xae2 <orientationCalculationFour+0x72>
     abe:	f8 01       	movw	r30, r16
     ac0:	c1 90       	ld	r12, Z+
     ac2:	d1 90       	ld	r13, Z+
     ac4:	e1 90       	ld	r14, Z+
     ac6:	f1 90       	ld	r15, Z+
     ac8:	8f 01       	movw	r16, r30
     aca:	a7 01       	movw	r20, r14
     acc:	96 01       	movw	r18, r12
     ace:	c3 01       	movw	r24, r6
     ad0:	b2 01       	movw	r22, r4
     ad2:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__gesf2>
     ad6:	18 16       	cp	r1, r24
     ad8:	24 f4       	brge	.+8      	; 0xae2 <orientationCalculationFour+0x72>
     ada:	26 01       	movw	r4, r12
     adc:	37 01       	movw	r6, r14
     ade:	2b 80       	ldd	r2, Y+3	; 0x03
     ae0:	3c 80       	ldd	r3, Y+4	; 0x04
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	9c 81       	ldd	r25, Y+4	; 0x04
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	9c 83       	std	Y+4, r25	; 0x04
     aea:	8b 83       	std	Y+3, r24	; 0x03
     aec:	06 97       	sbiw	r24, 0x06	; 6
     aee:	39 f7       	brne	.-50     	; 0xabe <orientationCalculationFour+0x4e>
     af0:	82 2d       	mov	r24, r2
     af2:	93 2d       	mov	r25, r3
     af4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <distIndex>
     af8:	fc 01       	movw	r30, r24
     afa:	20 81       	ld	r18, Z
     afc:	31 81       	ldd	r19, Z+1	; 0x01
     afe:	62 81       	ldd	r22, Z+2	; 0x02
     b00:	73 81       	ldd	r23, Z+3	; 0x03
     b02:	f5 01       	movw	r30, r10
     b04:	40 81       	ld	r20, Z
     b06:	51 81       	ldd	r21, Z+1	; 0x01
     b08:	24 17       	cp	r18, r20
     b0a:	35 07       	cpc	r19, r21
     b0c:	59 f4       	brne	.+22     	; 0xb24 <__stack+0x25>
     b0e:	f4 01       	movw	r30, r8
     b10:	31 83       	std	Z+1, r19	; 0x01
     b12:	20 83       	st	Z, r18
     b14:	f5 01       	movw	r30, r10
     b16:	82 81       	ldd	r24, Z+2	; 0x02
     b18:	93 81       	ldd	r25, Z+3	; 0x03
     b1a:	e9 81       	ldd	r30, Y+1	; 0x01
     b1c:	fa 81       	ldd	r31, Y+2	; 0x02
     b1e:	91 83       	std	Z+1, r25	; 0x01
     b20:	80 83       	st	Z, r24
     b22:	37 c0       	rjmp	.+110    	; 0xb92 <__stack+0x93>
     b24:	f5 01       	movw	r30, r10
     b26:	82 81       	ldd	r24, Z+2	; 0x02
     b28:	93 81       	ldd	r25, Z+3	; 0x03
     b2a:	28 17       	cp	r18, r24
     b2c:	39 07       	cpc	r19, r25
     b2e:	59 f4       	brne	.+22     	; 0xb46 <__stack+0x47>
     b30:	f4 01       	movw	r30, r8
     b32:	31 83       	std	Z+1, r19	; 0x01
     b34:	20 83       	st	Z, r18
     b36:	f5 01       	movw	r30, r10
     b38:	80 81       	ld	r24, Z
     b3a:	91 81       	ldd	r25, Z+1	; 0x01
     b3c:	e9 81       	ldd	r30, Y+1	; 0x01
     b3e:	fa 81       	ldd	r31, Y+2	; 0x02
     b40:	91 83       	std	Z+1, r25	; 0x01
     b42:	80 83       	st	Z, r24
     b44:	26 c0       	rjmp	.+76     	; 0xb92 <__stack+0x93>
     b46:	64 17       	cp	r22, r20
     b48:	75 07       	cpc	r23, r21
     b4a:	59 f4       	brne	.+22     	; 0xb62 <__stack+0x63>
     b4c:	f4 01       	movw	r30, r8
     b4e:	71 83       	std	Z+1, r23	; 0x01
     b50:	60 83       	st	Z, r22
     b52:	f5 01       	movw	r30, r10
     b54:	82 81       	ldd	r24, Z+2	; 0x02
     b56:	93 81       	ldd	r25, Z+3	; 0x03
     b58:	e9 81       	ldd	r30, Y+1	; 0x01
     b5a:	fa 81       	ldd	r31, Y+2	; 0x02
     b5c:	91 83       	std	Z+1, r25	; 0x01
     b5e:	80 83       	st	Z, r24
     b60:	18 c0       	rjmp	.+48     	; 0xb92 <__stack+0x93>
     b62:	68 17       	cp	r22, r24
     b64:	79 07       	cpc	r23, r25
     b66:	59 f4       	brne	.+22     	; 0xb7e <__stack+0x7f>
     b68:	f4 01       	movw	r30, r8
     b6a:	71 83       	std	Z+1, r23	; 0x01
     b6c:	60 83       	st	Z, r22
     b6e:	f5 01       	movw	r30, r10
     b70:	80 81       	ld	r24, Z
     b72:	91 81       	ldd	r25, Z+1	; 0x01
     b74:	e9 81       	ldd	r30, Y+1	; 0x01
     b76:	fa 81       	ldd	r31, Y+2	; 0x02
     b78:	91 83       	std	Z+1, r25	; 0x01
     b7a:	80 83       	st	Z, r24
     b7c:	0a c0       	rjmp	.+20     	; 0xb92 <__stack+0x93>
     b7e:	f4 01       	movw	r30, r8
     b80:	91 83       	std	Z+1, r25	; 0x01
     b82:	80 83       	st	Z, r24
     b84:	f5 01       	movw	r30, r10
     b86:	80 81       	ld	r24, Z
     b88:	91 81       	ldd	r25, Z+1	; 0x01
     b8a:	e9 81       	ldd	r30, Y+1	; 0x01
     b8c:	fa 81       	ldd	r31, Y+2	; 0x02
     b8e:	91 83       	std	Z+1, r25	; 0x01
     b90:	80 83       	st	Z, r24
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	df 90       	pop	r13
     ba8:	cf 90       	pop	r12
     baa:	bf 90       	pop	r11
     bac:	af 90       	pop	r10
     bae:	9f 90       	pop	r9
     bb0:	8f 90       	pop	r8
     bb2:	7f 90       	pop	r7
     bb4:	6f 90       	pop	r6
     bb6:	5f 90       	pop	r5
     bb8:	4f 90       	pop	r4
     bba:	3f 90       	pop	r3
     bbc:	2f 90       	pop	r2
     bbe:	08 95       	ret

00000bc0 <fourPointCalc>:
     bc0:	2f 92       	push	r2
     bc2:	3f 92       	push	r3
     bc4:	4f 92       	push	r4
     bc6:	5f 92       	push	r5
     bc8:	6f 92       	push	r6
     bca:	7f 92       	push	r7
     bcc:	8f 92       	push	r8
     bce:	9f 92       	push	r9
     bd0:	af 92       	push	r10
     bd2:	bf 92       	push	r11
     bd4:	cf 92       	push	r12
     bd6:	df 92       	push	r13
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	c2 54       	subi	r28, 0x42	; 66
     bea:	d1 09       	sbc	r29, r1
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	2c 01       	movw	r4, r24
     bf8:	fc 01       	movw	r30, r24
     bfa:	04 80       	ldd	r0, Z+4	; 0x04
     bfc:	f5 81       	ldd	r31, Z+5	; 0x05
     bfe:	e0 2d       	mov	r30, r0
     c00:	fa a3       	std	Y+34, r31	; 0x22
     c02:	e9 a3       	std	Y+33, r30	; 0x21
     c04:	fc 01       	movw	r30, r24
     c06:	00 81       	ld	r16, Z
     c08:	11 81       	ldd	r17, Z+1	; 0x01
     c0a:	69 a1       	ldd	r22, Y+33	; 0x21
     c0c:	7a a1       	ldd	r23, Y+34	; 0x22
     c0e:	60 1b       	sub	r22, r16
     c10:	71 0b       	sbc	r23, r17
     c12:	07 2e       	mov	r0, r23
     c14:	00 0c       	add	r0, r0
     c16:	88 0b       	sbc	r24, r24
     c18:	99 0b       	sbc	r25, r25
     c1a:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
     c1e:	6b 01       	movw	r12, r22
     c20:	7c 01       	movw	r14, r24
     c22:	f2 01       	movw	r30, r4
     c24:	06 80       	ldd	r0, Z+6	; 0x06
     c26:	f7 81       	ldd	r31, Z+7	; 0x07
     c28:	e0 2d       	mov	r30, r0
     c2a:	fe a3       	std	Y+38, r31	; 0x26
     c2c:	ed a3       	std	Y+37, r30	; 0x25
     c2e:	f2 01       	movw	r30, r4
     c30:	22 80       	ldd	r2, Z+2	; 0x02
     c32:	33 80       	ldd	r3, Z+3	; 0x03
     c34:	ad a0       	ldd	r10, Y+37	; 0x25
     c36:	be a0       	ldd	r11, Y+38	; 0x26
     c38:	a2 18       	sub	r10, r2
     c3a:	b3 08       	sbc	r11, r3
     c3c:	9b 01       	movw	r18, r22
     c3e:	ac 01       	movw	r20, r24
     c40:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     c44:	69 a7       	std	Y+41, r22	; 0x29
     c46:	7a a7       	std	Y+42, r23	; 0x2a
     c48:	8b a7       	std	Y+43, r24	; 0x2b
     c4a:	9c a7       	std	Y+44, r25	; 0x2c
     c4c:	aa 9c       	mul	r10, r10
     c4e:	40 01       	movw	r8, r0
     c50:	ab 9c       	mul	r10, r11
     c52:	90 0c       	add	r9, r0
     c54:	90 0c       	add	r9, r0
     c56:	11 24       	eor	r1, r1
     c58:	09 2c       	mov	r0, r9
     c5a:	00 0c       	add	r0, r0
     c5c:	aa 08       	sbc	r10, r10
     c5e:	bb 08       	sbc	r11, r11
     c60:	a7 01       	movw	r20, r14
     c62:	96 01       	movw	r18, r12
     c64:	c7 01       	movw	r24, r14
     c66:	b6 01       	movw	r22, r12
     c68:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     c6c:	6b 01       	movw	r12, r22
     c6e:	7c 01       	movw	r14, r24
     c70:	c5 01       	movw	r24, r10
     c72:	b4 01       	movw	r22, r8
     c74:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
     c7c:	c7 01       	movw	r24, r14
     c7e:	b6 01       	movw	r22, r12
     c80:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
     c84:	0e 94 84 1c 	call	0x3908	; 0x3908 <sqrt>
     c88:	6b af       	std	Y+59, r22	; 0x3b
     c8a:	7c af       	std	Y+60, r23	; 0x3c
     c8c:	8d af       	std	Y+61, r24	; 0x3d
     c8e:	9e af       	std	Y+62, r25	; 0x3e
     c90:	f2 01       	movw	r30, r4
     c92:	00 84       	ldd	r0, Z+8	; 0x08
     c94:	f1 85       	ldd	r31, Z+9	; 0x09
     c96:	e0 2d       	mov	r30, r0
     c98:	fa a7       	std	Y+42, r31	; 0x2a
     c9a:	e9 a7       	std	Y+41, r30	; 0x29
     c9c:	bf 01       	movw	r22, r30
     c9e:	60 1b       	sub	r22, r16
     ca0:	71 0b       	sbc	r23, r17
     ca2:	07 2e       	mov	r0, r23
     ca4:	00 0c       	add	r0, r0
     ca6:	88 0b       	sbc	r24, r24
     ca8:	99 0b       	sbc	r25, r25
     caa:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
     cae:	6b 01       	movw	r12, r22
     cb0:	7c 01       	movw	r14, r24
     cb2:	f2 01       	movw	r30, r4
     cb4:	62 84       	ldd	r6, Z+10	; 0x0a
     cb6:	73 84       	ldd	r7, Z+11	; 0x0b
     cb8:	53 01       	movw	r10, r6
     cba:	a2 18       	sub	r10, r2
     cbc:	b3 08       	sbc	r11, r3
     cbe:	9b 01       	movw	r18, r22
     cc0:	ac 01       	movw	r20, r24
     cc2:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     cc6:	6d a7       	std	Y+45, r22	; 0x2d
     cc8:	7e a7       	std	Y+46, r23	; 0x2e
     cca:	8f a7       	std	Y+47, r24	; 0x2f
     ccc:	98 ab       	std	Y+48, r25	; 0x30
     cce:	aa 9c       	mul	r10, r10
     cd0:	40 01       	movw	r8, r0
     cd2:	ab 9c       	mul	r10, r11
     cd4:	90 0c       	add	r9, r0
     cd6:	90 0c       	add	r9, r0
     cd8:	11 24       	eor	r1, r1
     cda:	09 2c       	mov	r0, r9
     cdc:	00 0c       	add	r0, r0
     cde:	aa 08       	sbc	r10, r10
     ce0:	bb 08       	sbc	r11, r11
     ce2:	a7 01       	movw	r20, r14
     ce4:	96 01       	movw	r18, r12
     ce6:	c7 01       	movw	r24, r14
     ce8:	b6 01       	movw	r22, r12
     cea:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     cee:	6b 01       	movw	r12, r22
     cf0:	7c 01       	movw	r14, r24
     cf2:	c5 01       	movw	r24, r10
     cf4:	b4 01       	movw	r22, r8
     cf6:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
     cfa:	9b 01       	movw	r18, r22
     cfc:	ac 01       	movw	r20, r24
     cfe:	c7 01       	movw	r24, r14
     d00:	b6 01       	movw	r22, r12
     d02:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
     d06:	0e 94 84 1c 	call	0x3908	; 0x3908 <sqrt>
     d0a:	23 96       	adiw	r28, 0x03	; 3
     d0c:	6c af       	std	Y+60, r22	; 0x3c
     d0e:	7d af       	std	Y+61, r23	; 0x3d
     d10:	8e af       	std	Y+62, r24	; 0x3e
     d12:	9f af       	std	Y+63, r25	; 0x3f
     d14:	23 97       	sbiw	r28, 0x03	; 3
     d16:	f2 01       	movw	r30, r4
     d18:	04 84       	ldd	r0, Z+12	; 0x0c
     d1a:	f5 85       	ldd	r31, Z+13	; 0x0d
     d1c:	e0 2d       	mov	r30, r0
     d1e:	fe a7       	std	Y+46, r31	; 0x2e
     d20:	ed a7       	std	Y+45, r30	; 0x2d
     d22:	bf 01       	movw	r22, r30
     d24:	60 1b       	sub	r22, r16
     d26:	71 0b       	sbc	r23, r17
     d28:	07 2e       	mov	r0, r23
     d2a:	00 0c       	add	r0, r0
     d2c:	88 0b       	sbc	r24, r24
     d2e:	99 0b       	sbc	r25, r25
     d30:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
     d34:	4b 01       	movw	r8, r22
     d36:	5c 01       	movw	r10, r24
     d38:	f2 01       	movw	r30, r4
     d3a:	06 84       	ldd	r0, Z+14	; 0x0e
     d3c:	f7 85       	ldd	r31, Z+15	; 0x0f
     d3e:	e0 2d       	mov	r30, r0
     d40:	fa ab       	std	Y+50, r31	; 0x32
     d42:	e9 ab       	std	Y+49, r30	; 0x31
     d44:	8f 01       	movw	r16, r30
     d46:	02 19       	sub	r16, r2
     d48:	13 09       	sbc	r17, r3
     d4a:	9b 01       	movw	r18, r22
     d4c:	ac 01       	movw	r20, r24
     d4e:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     d52:	6b ab       	std	Y+51, r22	; 0x33
     d54:	7c ab       	std	Y+52, r23	; 0x34
     d56:	8d ab       	std	Y+53, r24	; 0x35
     d58:	9e ab       	std	Y+54, r25	; 0x36
     d5a:	00 9f       	mul	r16, r16
     d5c:	60 01       	movw	r12, r0
     d5e:	01 9f       	mul	r16, r17
     d60:	d0 0c       	add	r13, r0
     d62:	d0 0c       	add	r13, r0
     d64:	11 24       	eor	r1, r1
     d66:	0d 2c       	mov	r0, r13
     d68:	00 0c       	add	r0, r0
     d6a:	ee 08       	sbc	r14, r14
     d6c:	ff 08       	sbc	r15, r15
     d6e:	a5 01       	movw	r20, r10
     d70:	94 01       	movw	r18, r8
     d72:	c5 01       	movw	r24, r10
     d74:	b4 01       	movw	r22, r8
     d76:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     d7a:	4b 01       	movw	r8, r22
     d7c:	5c 01       	movw	r10, r24
     d7e:	c7 01       	movw	r24, r14
     d80:	b6 01       	movw	r22, r12
     d82:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
     d86:	9b 01       	movw	r18, r22
     d88:	ac 01       	movw	r20, r24
     d8a:	c5 01       	movw	r24, r10
     d8c:	b4 01       	movw	r22, r8
     d8e:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
     d92:	0e 94 84 1c 	call	0x3908	; 0x3908 <sqrt>
     d96:	6b ab       	std	Y+51, r22	; 0x33
     d98:	7c ab       	std	Y+52, r23	; 0x34
     d9a:	8d ab       	std	Y+53, r24	; 0x35
     d9c:	9e ab       	std	Y+54, r25	; 0x36
     d9e:	69 a5       	ldd	r22, Y+41	; 0x29
     da0:	7a a5       	ldd	r23, Y+42	; 0x2a
     da2:	29 a1       	ldd	r18, Y+33	; 0x21
     da4:	3a a1       	ldd	r19, Y+34	; 0x22
     da6:	62 1b       	sub	r22, r18
     da8:	73 0b       	sbc	r23, r19
     daa:	07 2e       	mov	r0, r23
     dac:	00 0c       	add	r0, r0
     dae:	88 0b       	sbc	r24, r24
     db0:	99 0b       	sbc	r25, r25
     db2:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
     db6:	4b 01       	movw	r8, r22
     db8:	5c 01       	movw	r10, r24
     dba:	83 01       	movw	r16, r6
     dbc:	4d a1       	ldd	r20, Y+37	; 0x25
     dbe:	5e a1       	ldd	r21, Y+38	; 0x26
     dc0:	04 1b       	sub	r16, r20
     dc2:	15 0b       	sbc	r17, r21
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     dcc:	6f ab       	std	Y+55, r22	; 0x37
     dce:	78 af       	std	Y+56, r23	; 0x38
     dd0:	89 af       	std	Y+57, r24	; 0x39
     dd2:	9a af       	std	Y+58, r25	; 0x3a
     dd4:	00 9f       	mul	r16, r16
     dd6:	60 01       	movw	r12, r0
     dd8:	01 9f       	mul	r16, r17
     dda:	d0 0c       	add	r13, r0
     ddc:	d0 0c       	add	r13, r0
     dde:	11 24       	eor	r1, r1
     de0:	0d 2c       	mov	r0, r13
     de2:	00 0c       	add	r0, r0
     de4:	ee 08       	sbc	r14, r14
     de6:	ff 08       	sbc	r15, r15
     de8:	a5 01       	movw	r20, r10
     dea:	94 01       	movw	r18, r8
     dec:	c5 01       	movw	r24, r10
     dee:	b4 01       	movw	r22, r8
     df0:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     df4:	4b 01       	movw	r8, r22
     df6:	5c 01       	movw	r10, r24
     df8:	c7 01       	movw	r24, r14
     dfa:	b6 01       	movw	r22, r12
     dfc:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
     e00:	9b 01       	movw	r18, r22
     e02:	ac 01       	movw	r20, r24
     e04:	c5 01       	movw	r24, r10
     e06:	b4 01       	movw	r22, r8
     e08:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
     e0c:	0e 94 84 1c 	call	0x3908	; 0x3908 <sqrt>
     e10:	6f ab       	std	Y+55, r22	; 0x37
     e12:	78 af       	std	Y+56, r23	; 0x38
     e14:	89 af       	std	Y+57, r24	; 0x39
     e16:	9a af       	std	Y+58, r25	; 0x3a
     e18:	6d a5       	ldd	r22, Y+45	; 0x2d
     e1a:	7e a5       	ldd	r23, Y+46	; 0x2e
     e1c:	89 a1       	ldd	r24, Y+33	; 0x21
     e1e:	9a a1       	ldd	r25, Y+34	; 0x22
     e20:	68 1b       	sub	r22, r24
     e22:	79 0b       	sbc	r23, r25
     e24:	07 2e       	mov	r0, r23
     e26:	00 0c       	add	r0, r0
     e28:	88 0b       	sbc	r24, r24
     e2a:	99 0b       	sbc	r25, r25
     e2c:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
     e30:	4b 01       	movw	r8, r22
     e32:	5c 01       	movw	r10, r24
     e34:	09 a9       	ldd	r16, Y+49	; 0x31
     e36:	1a a9       	ldd	r17, Y+50	; 0x32
     e38:	ed a1       	ldd	r30, Y+37	; 0x25
     e3a:	fe a1       	ldd	r31, Y+38	; 0x26
     e3c:	0e 1b       	sub	r16, r30
     e3e:	1f 0b       	sbc	r17, r31
     e40:	9b 01       	movw	r18, r22
     e42:	ac 01       	movw	r20, r24
     e44:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     e48:	69 a3       	std	Y+33, r22	; 0x21
     e4a:	7a a3       	std	Y+34, r23	; 0x22
     e4c:	8b a3       	std	Y+35, r24	; 0x23
     e4e:	9c a3       	std	Y+36, r25	; 0x24
     e50:	00 9f       	mul	r16, r16
     e52:	60 01       	movw	r12, r0
     e54:	01 9f       	mul	r16, r17
     e56:	d0 0c       	add	r13, r0
     e58:	d0 0c       	add	r13, r0
     e5a:	11 24       	eor	r1, r1
     e5c:	0d 2c       	mov	r0, r13
     e5e:	00 0c       	add	r0, r0
     e60:	ee 08       	sbc	r14, r14
     e62:	ff 08       	sbc	r15, r15
     e64:	a5 01       	movw	r20, r10
     e66:	94 01       	movw	r18, r8
     e68:	c5 01       	movw	r24, r10
     e6a:	b4 01       	movw	r22, r8
     e6c:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     e70:	4b 01       	movw	r8, r22
     e72:	5c 01       	movw	r10, r24
     e74:	c7 01       	movw	r24, r14
     e76:	b6 01       	movw	r22, r12
     e78:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
     e7c:	9b 01       	movw	r18, r22
     e7e:	ac 01       	movw	r20, r24
     e80:	c5 01       	movw	r24, r10
     e82:	b4 01       	movw	r22, r8
     e84:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
     e88:	0e 94 84 1c 	call	0x3908	; 0x3908 <sqrt>
     e8c:	4b 01       	movw	r8, r22
     e8e:	5c 01       	movw	r10, r24
     e90:	6d a5       	ldd	r22, Y+45	; 0x2d
     e92:	7e a5       	ldd	r23, Y+46	; 0x2e
     e94:	29 a5       	ldd	r18, Y+41	; 0x29
     e96:	3a a5       	ldd	r19, Y+42	; 0x2a
     e98:	62 1b       	sub	r22, r18
     e9a:	73 0b       	sbc	r23, r19
     e9c:	07 2e       	mov	r0, r23
     e9e:	00 0c       	add	r0, r0
     ea0:	88 0b       	sbc	r24, r24
     ea2:	99 0b       	sbc	r25, r25
     ea4:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
     ea8:	69 a3       	std	Y+33, r22	; 0x21
     eaa:	7a a3       	std	Y+34, r23	; 0x22
     eac:	8b a3       	std	Y+35, r24	; 0x23
     eae:	9c a3       	std	Y+36, r25	; 0x24
     eb0:	09 a9       	ldd	r16, Y+49	; 0x31
     eb2:	1a a9       	ldd	r17, Y+50	; 0x32
     eb4:	06 19       	sub	r16, r6
     eb6:	17 09       	sbc	r17, r7
     eb8:	9b 01       	movw	r18, r22
     eba:	ac 01       	movw	r20, r24
     ebc:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     ec0:	6d a3       	std	Y+37, r22	; 0x25
     ec2:	7e a3       	std	Y+38, r23	; 0x26
     ec4:	8f a3       	std	Y+39, r24	; 0x27
     ec6:	98 a7       	std	Y+40, r25	; 0x28
     ec8:	00 9f       	mul	r16, r16
     eca:	60 01       	movw	r12, r0
     ecc:	01 9f       	mul	r16, r17
     ece:	d0 0c       	add	r13, r0
     ed0:	d0 0c       	add	r13, r0
     ed2:	11 24       	eor	r1, r1
     ed4:	0d 2c       	mov	r0, r13
     ed6:	00 0c       	add	r0, r0
     ed8:	ee 08       	sbc	r14, r14
     eda:	ff 08       	sbc	r15, r15
     edc:	29 a1       	ldd	r18, Y+33	; 0x21
     ede:	3a a1       	ldd	r19, Y+34	; 0x22
     ee0:	4b a1       	ldd	r20, Y+35	; 0x23
     ee2:	5c a1       	ldd	r21, Y+36	; 0x24
     ee4:	ca 01       	movw	r24, r20
     ee6:	b9 01       	movw	r22, r18
     ee8:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
     eec:	69 a3       	std	Y+33, r22	; 0x21
     eee:	7a a3       	std	Y+34, r23	; 0x22
     ef0:	8b a3       	std	Y+35, r24	; 0x23
     ef2:	9c a3       	std	Y+36, r25	; 0x24
     ef4:	c7 01       	movw	r24, r14
     ef6:	b6 01       	movw	r22, r12
     ef8:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
     efc:	9b 01       	movw	r18, r22
     efe:	ac 01       	movw	r20, r24
     f00:	69 a1       	ldd	r22, Y+33	; 0x21
     f02:	7a a1       	ldd	r23, Y+34	; 0x22
     f04:	8b a1       	ldd	r24, Y+35	; 0x23
     f06:	9c a1       	ldd	r25, Y+36	; 0x24
     f08:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
     f0c:	0e 94 84 1c 	call	0x3908	; 0x3908 <sqrt>
     f10:	2b ad       	ldd	r18, Y+59	; 0x3b
     f12:	3c ad       	ldd	r19, Y+60	; 0x3c
     f14:	4d ad       	ldd	r20, Y+61	; 0x3d
     f16:	5e ad       	ldd	r21, Y+62	; 0x3e
     f18:	29 83       	std	Y+1, r18	; 0x01
     f1a:	3a 83       	std	Y+2, r19	; 0x02
     f1c:	4b 83       	std	Y+3, r20	; 0x03
     f1e:	5c 83       	std	Y+4, r21	; 0x04
     f20:	23 96       	adiw	r28, 0x03	; 3
     f22:	2c ad       	ldd	r18, Y+60	; 0x3c
     f24:	3d ad       	ldd	r19, Y+61	; 0x3d
     f26:	4e ad       	ldd	r20, Y+62	; 0x3e
     f28:	5f ad       	ldd	r21, Y+63	; 0x3f
     f2a:	23 97       	sbiw	r28, 0x03	; 3
     f2c:	2d 83       	std	Y+5, r18	; 0x05
     f2e:	3e 83       	std	Y+6, r19	; 0x06
     f30:	4f 83       	std	Y+7, r20	; 0x07
     f32:	58 87       	std	Y+8, r21	; 0x08
     f34:	2b a9       	ldd	r18, Y+51	; 0x33
     f36:	3c a9       	ldd	r19, Y+52	; 0x34
     f38:	4d a9       	ldd	r20, Y+53	; 0x35
     f3a:	5e a9       	ldd	r21, Y+54	; 0x36
     f3c:	29 87       	std	Y+9, r18	; 0x09
     f3e:	3a 87       	std	Y+10, r19	; 0x0a
     f40:	4b 87       	std	Y+11, r20	; 0x0b
     f42:	5c 87       	std	Y+12, r21	; 0x0c
     f44:	2f a9       	ldd	r18, Y+55	; 0x37
     f46:	38 ad       	ldd	r19, Y+56	; 0x38
     f48:	49 ad       	ldd	r20, Y+57	; 0x39
     f4a:	5a ad       	ldd	r21, Y+58	; 0x3a
     f4c:	2d 87       	std	Y+13, r18	; 0x0d
     f4e:	3e 87       	std	Y+14, r19	; 0x0e
     f50:	4f 87       	std	Y+15, r20	; 0x0f
     f52:	58 8b       	std	Y+16, r21	; 0x10
     f54:	89 8a       	std	Y+17, r8	; 0x11
     f56:	9a 8a       	std	Y+18, r9	; 0x12
     f58:	ab 8a       	std	Y+19, r10	; 0x13
     f5a:	bc 8a       	std	Y+20, r11	; 0x14
     f5c:	6d 8b       	std	Y+21, r22	; 0x15
     f5e:	7e 8b       	std	Y+22, r23	; 0x16
     f60:	8f 8b       	std	Y+23, r24	; 0x17
     f62:	98 8f       	std	Y+24, r25	; 0x18
     f64:	ae 01       	movw	r20, r28
     f66:	4f 5f       	subi	r20, 0xFF	; 255
     f68:	5f 4f       	sbci	r21, 0xFF	; 255
     f6a:	7a 01       	movw	r14, r20
     f6c:	00 e0       	ldi	r16, 0x00	; 0
     f6e:	10 e0       	ldi	r17, 0x00	; 0
     f70:	61 2c       	mov	r6, r1
     f72:	71 2c       	mov	r7, r1
     f74:	c1 2c       	mov	r12, r1
     f76:	d1 2c       	mov	r13, r1
     f78:	21 2c       	mov	r2, r1
     f7a:	31 2c       	mov	r3, r1
     f7c:	f7 01       	movw	r30, r14
     f7e:	81 90       	ld	r8, Z+
     f80:	91 90       	ld	r9, Z+
     f82:	a1 90       	ld	r10, Z+
     f84:	b1 90       	ld	r11, Z+
     f86:	7f 01       	movw	r14, r30
     f88:	26 2d       	mov	r18, r6
     f8a:	37 2d       	mov	r19, r7
     f8c:	4c 2d       	mov	r20, r12
     f8e:	5d 2d       	mov	r21, r13
     f90:	c5 01       	movw	r24, r10
     f92:	b4 01       	movw	r22, r8
     f94:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__gesf2>
     f98:	18 16       	cp	r1, r24
     f9a:	34 f4       	brge	.+12     	; 0xfa8 <fourPointCalc+0x3e8>
     f9c:	68 2c       	mov	r6, r8
     f9e:	79 2c       	mov	r7, r9
     fa0:	ca 2c       	mov	r12, r10
     fa2:	db 2c       	mov	r13, r11
     fa4:	20 2e       	mov	r2, r16
     fa6:	31 2e       	mov	r3, r17
     fa8:	0f 5f       	subi	r16, 0xFF	; 255
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	06 30       	cpi	r16, 0x06	; 6
     fae:	11 05       	cpc	r17, r1
     fb0:	29 f7       	brne	.-54     	; 0xf7c <fourPointCalc+0x3bc>
     fb2:	82 2d       	mov	r24, r2
     fb4:	93 2d       	mov	r25, r3
     fb6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <distIndex>
     fba:	fc 01       	movw	r30, r24
     fbc:	e0 80       	ld	r14, Z
     fbe:	f1 80       	ldd	r15, Z+1	; 0x01
     fc0:	fa 8e       	std	Y+26, r15	; 0x1a
     fc2:	e9 8e       	std	Y+25, r14	; 0x19
     fc4:	02 81       	ldd	r16, Z+2	; 0x02
     fc6:	13 81       	ldd	r17, Z+3	; 0x03
     fc8:	1c 8f       	std	Y+28, r17	; 0x1c
     fca:	0b 8f       	std	Y+27, r16	; 0x1b
     fcc:	ee 0c       	add	r14, r14
     fce:	ff 1c       	adc	r15, r15
     fd0:	ee 0c       	add	r14, r14
     fd2:	ff 1c       	adc	r15, r15
     fd4:	e4 0c       	add	r14, r4
     fd6:	f5 1c       	adc	r15, r5
     fd8:	00 0f       	add	r16, r16
     fda:	11 1f       	adc	r17, r17
     fdc:	00 0f       	add	r16, r16
     fde:	11 1f       	adc	r17, r17
     fe0:	04 0d       	add	r16, r4
     fe2:	15 1d       	adc	r17, r5
     fe4:	f7 01       	movw	r30, r14
     fe6:	60 81       	ld	r22, Z
     fe8:	71 81       	ldd	r23, Z+1	; 0x01
     fea:	f8 01       	movw	r30, r16
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	68 0f       	add	r22, r24
     ff2:	79 1f       	adc	r23, r25
     ff4:	77 23       	and	r23, r23
     ff6:	14 f4       	brge	.+4      	; 0xffc <fourPointCalc+0x43c>
     ff8:	6f 5f       	subi	r22, 0xFF	; 255
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	75 95       	asr	r23
     ffe:	67 95       	ror	r22
    1000:	07 2e       	mov	r0, r23
    1002:	00 0c       	add	r0, r0
    1004:	88 0b       	sbc	r24, r24
    1006:	99 0b       	sbc	r25, r25
    1008:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
    100c:	4b 01       	movw	r8, r22
    100e:	5c 01       	movw	r10, r24
    1010:	f7 01       	movw	r30, r14
    1012:	62 81       	ldd	r22, Z+2	; 0x02
    1014:	73 81       	ldd	r23, Z+3	; 0x03
    1016:	f8 01       	movw	r30, r16
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	68 0f       	add	r22, r24
    101e:	79 1f       	adc	r23, r25
    1020:	77 23       	and	r23, r23
    1022:	14 f4       	brge	.+4      	; 0x1028 <fourPointCalc+0x468>
    1024:	6f 5f       	subi	r22, 0xFF	; 255
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	75 95       	asr	r23
    102a:	67 95       	ror	r22
    102c:	07 2e       	mov	r0, r23
    102e:	00 0c       	add	r0, r0
    1030:	88 0b       	sbc	r24, r24
    1032:	99 0b       	sbc	r25, r25
    1034:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
    1038:	69 a3       	std	Y+33, r22	; 0x21
    103a:	7a a3       	std	Y+34, r23	; 0x22
    103c:	8b a3       	std	Y+35, r24	; 0x23
    103e:	9c a3       	std	Y+36, r25	; 0x24
    1040:	9e 01       	movw	r18, r28
    1042:	21 5e       	subi	r18, 0xE1	; 225
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	ae 01       	movw	r20, r28
    1048:	43 5e       	subi	r20, 0xE3	; 227
    104a:	5f 4f       	sbci	r21, 0xFF	; 255
    104c:	be 01       	movw	r22, r28
    104e:	6f 5f       	subi	r22, 0xFF	; 255
    1050:	7f 4f       	sbci	r23, 0xFF	; 255
    1052:	ce 01       	movw	r24, r28
    1054:	49 96       	adiw	r24, 0x19	; 25
    1056:	0e 94 38 05 	call	0xa70	; 0xa70 <orientationCalculationFour>
    105a:	0d 8d       	ldd	r16, Y+29	; 0x1d
    105c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    105e:	00 0f       	add	r16, r16
    1060:	11 1f       	adc	r17, r17
    1062:	00 0f       	add	r16, r16
    1064:	11 1f       	adc	r17, r17
    1066:	04 0d       	add	r16, r4
    1068:	15 1d       	adc	r17, r5
    106a:	2f 8c       	ldd	r2, Y+31	; 0x1f
    106c:	38 a0       	ldd	r3, Y+32	; 0x20
    106e:	22 0c       	add	r2, r2
    1070:	33 1c       	adc	r3, r3
    1072:	22 0c       	add	r2, r2
    1074:	33 1c       	adc	r3, r3
    1076:	24 0c       	add	r2, r4
    1078:	35 1c       	adc	r3, r5
    107a:	f8 01       	movw	r30, r16
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	f1 01       	movw	r30, r2
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	68 1b       	sub	r22, r24
    1088:	79 0b       	sbc	r23, r25
    108a:	07 2e       	mov	r0, r23
    108c:	00 0c       	add	r0, r0
    108e:	88 0b       	sbc	r24, r24
    1090:	99 0b       	sbc	r25, r25
    1092:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
    1096:	6b 01       	movw	r12, r22
    1098:	7c 01       	movw	r14, r24
    109a:	f8 01       	movw	r30, r16
    109c:	62 81       	ldd	r22, Z+2	; 0x02
    109e:	73 81       	ldd	r23, Z+3	; 0x03
    10a0:	f1 01       	movw	r30, r2
    10a2:	82 81       	ldd	r24, Z+2	; 0x02
    10a4:	93 81       	ldd	r25, Z+3	; 0x03
    10a6:	68 1b       	sub	r22, r24
    10a8:	79 0b       	sbc	r23, r25
    10aa:	07 2e       	mov	r0, r23
    10ac:	00 0c       	add	r0, r0
    10ae:	88 0b       	sbc	r24, r24
    10b0:	99 0b       	sbc	r25, r25
    10b2:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
    10b6:	90 58       	subi	r25, 0x80	; 128
    10b8:	a7 01       	movw	r20, r14
    10ba:	96 01       	movw	r18, r12
    10bc:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <atan2>
    10c0:	2b ed       	ldi	r18, 0xDB	; 219
    10c2:	3f e0       	ldi	r19, 0x0F	; 15
    10c4:	49 ec       	ldi	r20, 0xC9	; 201
    10c6:	5f e3       	ldi	r21, 0x3F	; 63
    10c8:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
    10cc:	6b 01       	movw	r12, r22
    10ce:	7c 01       	movw	r14, r24
    10d0:	a5 01       	movw	r20, r10
    10d2:	94 01       	movw	r18, r8
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	94 e4       	ldi	r25, 0x44	; 68
    10dc:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
    10e0:	4b 01       	movw	r8, r22
    10e2:	5c 01       	movw	r10, r24
    10e4:	29 a1       	ldd	r18, Y+33	; 0x21
    10e6:	3a a1       	ldd	r19, Y+34	; 0x22
    10e8:	4b a1       	ldd	r20, Y+35	; 0x23
    10ea:	5c a1       	ldd	r21, Y+36	; 0x24
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	8f eb       	ldi	r24, 0xBF	; 191
    10f2:	93 e4       	ldi	r25, 0x43	; 67
    10f4:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
    10f8:	2b 01       	movw	r4, r22
    10fa:	3c 01       	movw	r6, r24
    10fc:	c7 01       	movw	r24, r14
    10fe:	b6 01       	movw	r22, r12
    1100:	0e 94 76 1c 	call	0x38ec	; 0x38ec <sin>
    1104:	69 a3       	std	Y+33, r22	; 0x21
    1106:	7a a3       	std	Y+34, r23	; 0x22
    1108:	8b a3       	std	Y+35, r24	; 0x23
    110a:	9c a3       	std	Y+36, r25	; 0x24
    110c:	c7 01       	movw	r24, r14
    110e:	b6 01       	movw	r22, r12
    1110:	0e 94 37 1a 	call	0x346e	; 0x346e <cos>
    1114:	6d a3       	std	Y+37, r22	; 0x25
    1116:	7e a3       	std	Y+38, r23	; 0x26
    1118:	8f a3       	std	Y+39, r24	; 0x27
    111a:	98 a7       	std	Y+40, r25	; 0x28
    111c:	0e e5       	ldi	r16, 0x5E	; 94
    111e:	11 e0       	ldi	r17, 0x01	; 1
    1120:	29 a1       	ldd	r18, Y+33	; 0x21
    1122:	3a a1       	ldd	r19, Y+34	; 0x22
    1124:	4b a1       	ldd	r20, Y+35	; 0x23
    1126:	5c a1       	ldd	r21, Y+36	; 0x24
    1128:	c3 01       	movw	r24, r6
    112a:	b2 01       	movw	r22, r4
    112c:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1130:	69 a7       	std	Y+41, r22	; 0x29
    1132:	7a a7       	std	Y+42, r23	; 0x2a
    1134:	8b a7       	std	Y+43, r24	; 0x2b
    1136:	9c a7       	std	Y+44, r25	; 0x2c
    1138:	2d a1       	ldd	r18, Y+37	; 0x25
    113a:	3e a1       	ldd	r19, Y+38	; 0x26
    113c:	4f a1       	ldd	r20, Y+39	; 0x27
    113e:	58 a5       	ldd	r21, Y+40	; 0x28
    1140:	c5 01       	movw	r24, r10
    1142:	b4 01       	movw	r22, r8
    1144:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1148:	9b 01       	movw	r18, r22
    114a:	ac 01       	movw	r20, r24
    114c:	69 a5       	ldd	r22, Y+41	; 0x29
    114e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1150:	8b a5       	ldd	r24, Y+43	; 0x2b
    1152:	9c a5       	ldd	r25, Y+44	; 0x2c
    1154:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
    1158:	f8 01       	movw	r30, r16
    115a:	60 83       	st	Z, r22
    115c:	71 83       	std	Z+1, r23	; 0x01
    115e:	82 83       	std	Z+2, r24	; 0x02
    1160:	93 83       	std	Z+3, r25	; 0x03
    1162:	2d a1       	ldd	r18, Y+37	; 0x25
    1164:	3e a1       	ldd	r19, Y+38	; 0x26
    1166:	4f a1       	ldd	r20, Y+39	; 0x27
    1168:	58 a5       	ldd	r21, Y+40	; 0x28
    116a:	c3 01       	movw	r24, r6
    116c:	b2 01       	movw	r22, r4
    116e:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1172:	2b 01       	movw	r4, r22
    1174:	3c 01       	movw	r6, r24
    1176:	29 a1       	ldd	r18, Y+33	; 0x21
    1178:	3a a1       	ldd	r19, Y+34	; 0x22
    117a:	4b a1       	ldd	r20, Y+35	; 0x23
    117c:	5c a1       	ldd	r21, Y+36	; 0x24
    117e:	c5 01       	movw	r24, r10
    1180:	b4 01       	movw	r22, r8
    1182:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1186:	9b 01       	movw	r18, r22
    1188:	ac 01       	movw	r20, r24
    118a:	c3 01       	movw	r24, r6
    118c:	b2 01       	movw	r22, r4
    118e:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
    1192:	f8 01       	movw	r30, r16
    1194:	64 83       	std	Z+4, r22	; 0x04
    1196:	75 83       	std	Z+5, r23	; 0x05
    1198:	86 83       	std	Z+6, r24	; 0x06
    119a:	97 83       	std	Z+7, r25	; 0x07
    119c:	f7 fa       	bst	r15, 7
    119e:	f0 94       	com	r15
    11a0:	f7 f8       	bld	r15, 7
    11a2:	f0 94       	com	r15
    11a4:	c0 86       	std	Z+8, r12	; 0x08
    11a6:	d1 86       	std	Z+9, r13	; 0x09
    11a8:	e2 86       	std	Z+10, r14	; 0x0a
    11aa:	f3 86       	std	Z+11, r15	; 0x0b
    11ac:	c8 01       	movw	r24, r16
    11ae:	ce 5b       	subi	r28, 0xBE	; 190
    11b0:	df 4f       	sbci	r29, 0xFF	; 255
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	bf 90       	pop	r11
    11ce:	af 90       	pop	r10
    11d0:	9f 90       	pop	r9
    11d2:	8f 90       	pop	r8
    11d4:	7f 90       	pop	r7
    11d6:	6f 90       	pop	r6
    11d8:	5f 90       	pop	r5
    11da:	4f 90       	pop	r4
    11dc:	3f 90       	pop	r3
    11de:	2f 90       	pop	r2
    11e0:	08 95       	ret

000011e2 <localization_calc>:
    11e2:	4f 92       	push	r4
    11e4:	5f 92       	push	r5
    11e6:	6f 92       	push	r6
    11e8:	7f 92       	push	r7
    11ea:	af 92       	push	r10
    11ec:	bf 92       	push	r11
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	68 97       	sbiw	r28, 0x18	; 24
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	fc 01       	movw	r30, r24
    1210:	0d b7       	in	r16, 0x3d	; 61
    1212:	1e b7       	in	r17, 0x3e	; 62
    1214:	80 81       	ld	r24, Z
    1216:	91 81       	ldd	r25, Z+1	; 0x01
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	80 85       	ldd	r24, Z+8	; 0x08
    121e:	91 85       	ldd	r25, Z+9	; 0x09
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
    1224:	82 81       	ldd	r24, Z+2	; 0x02
    1226:	93 81       	ldd	r25, Z+3	; 0x03
    1228:	9e 83       	std	Y+6, r25	; 0x06
    122a:	8d 83       	std	Y+5, r24	; 0x05
    122c:	82 85       	ldd	r24, Z+10	; 0x0a
    122e:	93 85       	ldd	r25, Z+11	; 0x0b
    1230:	98 87       	std	Y+8, r25	; 0x08
    1232:	8f 83       	std	Y+7, r24	; 0x07
    1234:	84 81       	ldd	r24, Z+4	; 0x04
    1236:	95 81       	ldd	r25, Z+5	; 0x05
    1238:	9a 87       	std	Y+10, r25	; 0x0a
    123a:	89 87       	std	Y+9, r24	; 0x09
    123c:	84 85       	ldd	r24, Z+12	; 0x0c
    123e:	95 85       	ldd	r25, Z+13	; 0x0d
    1240:	9c 87       	std	Y+12, r25	; 0x0c
    1242:	8b 87       	std	Y+11, r24	; 0x0b
    1244:	86 81       	ldd	r24, Z+6	; 0x06
    1246:	97 81       	ldd	r25, Z+7	; 0x07
    1248:	9e 87       	std	Y+14, r25	; 0x0e
    124a:	8d 87       	std	Y+13, r24	; 0x0d
    124c:	86 85       	ldd	r24, Z+14	; 0x0e
    124e:	97 85       	ldd	r25, Z+15	; 0x0f
    1250:	98 8b       	std	Y+16, r25	; 0x10
    1252:	8f 87       	std	Y+15, r24	; 0x0f
    1254:	fe 01       	movw	r30, r28
    1256:	71 96       	adiw	r30, 0x11	; 17
    1258:	88 e0       	ldi	r24, 0x08	; 8
    125a:	df 01       	movw	r26, r30
    125c:	1d 92       	st	X+, r1
    125e:	8a 95       	dec	r24
    1260:	e9 f7       	brne	.-6      	; 0x125c <localization_calc+0x7a>
    1262:	70 97       	sbiw	r30, 0x10	; 16
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	40 81       	ld	r20, Z
    126e:	51 81       	ldd	r21, Z+1	; 0x01
    1270:	4f 3f       	cpi	r20, 0xFF	; 255
    1272:	53 40       	sbci	r21, 0x03	; 3
    1274:	71 f0       	breq	.+28     	; 0x1292 <localization_calc+0xb0>
    1276:	dc 01       	movw	r26, r24
    1278:	aa 0f       	add	r26, r26
    127a:	bb 1f       	adc	r27, r27
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	4c 0f       	add	r20, r28
    1282:	5d 1f       	adc	r21, r29
    1284:	a4 0f       	add	r26, r20
    1286:	b5 1f       	adc	r27, r21
    1288:	51 96       	adiw	r26, 0x11	; 17
    128a:	3c 93       	st	X, r19
    128c:	2e 93       	st	-X, r18
    128e:	50 97       	sbiw	r26, 0x10	; 16
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	2f 5f       	subi	r18, 0xFF	; 255
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	34 96       	adiw	r30, 0x04	; 4
    1298:	24 30       	cpi	r18, 0x04	; 4
    129a:	31 05       	cpc	r19, r1
    129c:	39 f7       	brne	.-50     	; 0x126c <localization_calc+0x8a>
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <localization_calc+0xc2>
    12a2:	89 c0       	rjmp	.+274    	; 0x13b6 <localization_calc+0x1d4>
    12a4:	ed b6       	in	r14, 0x3d	; 61
    12a6:	fe b6       	in	r15, 0x3e	; 62
    12a8:	6c 01       	movw	r12, r24
    12aa:	cc 0c       	add	r12, r12
    12ac:	dd 1c       	adc	r13, r13
    12ae:	cc 0c       	add	r12, r12
    12b0:	dd 1c       	adc	r13, r13
    12b2:	ad b7       	in	r26, 0x3d	; 61
    12b4:	be b7       	in	r27, 0x3e	; 62
    12b6:	ac 19       	sub	r26, r12
    12b8:	bd 09       	sbc	r27, r13
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	be bf       	out	0x3e, r27	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	ad bf       	out	0x3d, r26	; 61
    12c4:	ed b7       	in	r30, 0x3d	; 61
    12c6:	fe b7       	in	r31, 0x3e	; 62
    12c8:	31 96       	adiw	r30, 0x01	; 1
    12ca:	5f 01       	movw	r10, r30
    12cc:	18 16       	cp	r1, r24
    12ce:	19 06       	cpc	r1, r25
    12d0:	24 f5       	brge	.+72     	; 0x131a <localization_calc+0x138>
    12d2:	9e 01       	movw	r18, r28
    12d4:	2f 5e       	subi	r18, 0xEF	; 239
    12d6:	3f 4f       	sbci	r19, 0xFF	; 255
    12d8:	df 01       	movw	r26, r30
    12da:	ce 0e       	add	r12, r30
    12dc:	df 1e       	adc	r13, r31
    12de:	f9 01       	movw	r30, r18
    12e0:	41 91       	ld	r20, Z+
    12e2:	51 91       	ld	r21, Z+
    12e4:	9f 01       	movw	r18, r30
    12e6:	fa 01       	movw	r30, r20
    12e8:	ee 0f       	add	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	ee 0f       	add	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	41 e0       	ldi	r20, 0x01	; 1
    12f2:	50 e0       	ldi	r21, 0x00	; 0
    12f4:	4c 0f       	add	r20, r28
    12f6:	5d 1f       	adc	r21, r29
    12f8:	e4 0f       	add	r30, r20
    12fa:	f5 1f       	adc	r31, r21
    12fc:	40 81       	ld	r20, Z
    12fe:	51 81       	ldd	r21, Z+1	; 0x01
    1300:	11 96       	adiw	r26, 0x01	; 1
    1302:	5c 93       	st	X, r21
    1304:	4e 93       	st	-X, r20
    1306:	42 81       	ldd	r20, Z+2	; 0x02
    1308:	53 81       	ldd	r21, Z+3	; 0x03
    130a:	13 96       	adiw	r26, 0x03	; 3
    130c:	5c 93       	st	X, r21
    130e:	4e 93       	st	-X, r20
    1310:	12 97       	sbiw	r26, 0x02	; 2
    1312:	14 96       	adiw	r26, 0x04	; 4
    1314:	ac 15       	cp	r26, r12
    1316:	bd 05       	cpc	r27, r13
    1318:	11 f7       	brne	.-60     	; 0x12de <localization_calc+0xfc>
    131a:	db 01       	movw	r26, r22
    131c:	4d 90       	ld	r4, X+
    131e:	5d 90       	ld	r5, X+
    1320:	6d 90       	ld	r6, X+
    1322:	7c 90       	ld	r7, X
    1324:	13 97       	sbiw	r26, 0x03	; 3
    1326:	e6 e7       	ldi	r30, 0x76	; 118
    1328:	f1 e0       	ldi	r31, 0x01	; 1
    132a:	40 82       	st	Z, r4
    132c:	51 82       	std	Z+1, r5	; 0x01
    132e:	62 82       	std	Z+2, r6	; 0x02
    1330:	73 82       	std	Z+3, r7	; 0x03
    1332:	14 96       	adiw	r26, 0x04	; 4
    1334:	4d 90       	ld	r4, X+
    1336:	5d 90       	ld	r5, X+
    1338:	6d 90       	ld	r6, X+
    133a:	7c 90       	ld	r7, X
    133c:	17 97       	sbiw	r26, 0x07	; 7
    133e:	44 82       	std	Z+4, r4	; 0x04
    1340:	55 82       	std	Z+5, r5	; 0x05
    1342:	66 82       	std	Z+6, r6	; 0x06
    1344:	77 82       	std	Z+7, r7	; 0x07
    1346:	18 96       	adiw	r26, 0x08	; 8
    1348:	4d 91       	ld	r20, X+
    134a:	5d 91       	ld	r21, X+
    134c:	6d 91       	ld	r22, X+
    134e:	7c 91       	ld	r23, X
    1350:	1b 97       	sbiw	r26, 0x0b	; 11
    1352:	40 87       	std	Z+8, r20	; 0x08
    1354:	51 87       	std	Z+9, r21	; 0x09
    1356:	62 87       	std	Z+10, r22	; 0x0a
    1358:	73 87       	std	Z+11, r23	; 0x0b
    135a:	04 97       	sbiw	r24, 0x04	; 4
    135c:	29 f4       	brne	.+10     	; 0x1368 <localization_calc+0x186>
    135e:	c5 01       	movw	r24, r10
    1360:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <fourPointCalc>
    1364:	dc 01       	movw	r26, r24
    1366:	02 c0       	rjmp	.+4      	; 0x136c <localization_calc+0x18a>
    1368:	a6 e7       	ldi	r26, 0x76	; 118
    136a:	b1 e0       	ldi	r27, 0x01	; 1
    136c:	4d 91       	ld	r20, X+
    136e:	5d 91       	ld	r21, X+
    1370:	6d 91       	ld	r22, X+
    1372:	7c 91       	ld	r23, X
    1374:	13 97       	sbiw	r26, 0x03	; 3
    1376:	ea e6       	ldi	r30, 0x6A	; 106
    1378:	f1 e0       	ldi	r31, 0x01	; 1
    137a:	40 83       	st	Z, r20
    137c:	51 83       	std	Z+1, r21	; 0x01
    137e:	62 83       	std	Z+2, r22	; 0x02
    1380:	73 83       	std	Z+3, r23	; 0x03
    1382:	14 96       	adiw	r26, 0x04	; 4
    1384:	4d 91       	ld	r20, X+
    1386:	5d 91       	ld	r21, X+
    1388:	6d 91       	ld	r22, X+
    138a:	7c 91       	ld	r23, X
    138c:	17 97       	sbiw	r26, 0x07	; 7
    138e:	44 83       	std	Z+4, r20	; 0x04
    1390:	55 83       	std	Z+5, r21	; 0x05
    1392:	66 83       	std	Z+6, r22	; 0x06
    1394:	77 83       	std	Z+7, r23	; 0x07
    1396:	18 96       	adiw	r26, 0x08	; 8
    1398:	8d 91       	ld	r24, X+
    139a:	9d 91       	ld	r25, X+
    139c:	0d 90       	ld	r0, X+
    139e:	bc 91       	ld	r27, X
    13a0:	a0 2d       	mov	r26, r0
    13a2:	80 87       	std	Z+8, r24	; 0x08
    13a4:	91 87       	std	Z+9, r25	; 0x09
    13a6:	a2 87       	std	Z+10, r26	; 0x0a
    13a8:	b3 87       	std	Z+11, r27	; 0x0b
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	fe be       	out	0x3e, r15	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	ed be       	out	0x3d, r14	; 61
    13b4:	20 c0       	rjmp	.+64     	; 0x13f6 <localization_calc+0x214>
    13b6:	fb 01       	movw	r30, r22
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	a2 81       	ldd	r26, Z+2	; 0x02
    13be:	b3 81       	ldd	r27, Z+3	; 0x03
    13c0:	ea e6       	ldi	r30, 0x6A	; 106
    13c2:	f1 e0       	ldi	r31, 0x01	; 1
    13c4:	80 83       	st	Z, r24
    13c6:	91 83       	std	Z+1, r25	; 0x01
    13c8:	a2 83       	std	Z+2, r26	; 0x02
    13ca:	b3 83       	std	Z+3, r27	; 0x03
    13cc:	db 01       	movw	r26, r22
    13ce:	14 96       	adiw	r26, 0x04	; 4
    13d0:	cd 90       	ld	r12, X+
    13d2:	dd 90       	ld	r13, X+
    13d4:	ed 90       	ld	r14, X+
    13d6:	fc 90       	ld	r15, X
    13d8:	17 97       	sbiw	r26, 0x07	; 7
    13da:	c4 82       	std	Z+4, r12	; 0x04
    13dc:	d5 82       	std	Z+5, r13	; 0x05
    13de:	e6 82       	std	Z+6, r14	; 0x06
    13e0:	f7 82       	std	Z+7, r15	; 0x07
    13e2:	18 96       	adiw	r26, 0x08	; 8
    13e4:	4d 91       	ld	r20, X+
    13e6:	5d 91       	ld	r21, X+
    13e8:	6d 91       	ld	r22, X+
    13ea:	7c 91       	ld	r23, X
    13ec:	1b 97       	sbiw	r26, 0x0b	; 11
    13ee:	40 87       	std	Z+8, r20	; 0x08
    13f0:	51 87       	std	Z+9, r21	; 0x09
    13f2:	62 87       	std	Z+10, r22	; 0x0a
    13f4:	73 87       	std	Z+11, r23	; 0x0b
    13f6:	8a e6       	ldi	r24, 0x6A	; 106
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	1e bf       	out	0x3e, r17	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	0d bf       	out	0x3d, r16	; 61
    1404:	68 96       	adiw	r28, 0x18	; 24
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	df 90       	pop	r13
    141e:	cf 90       	pop	r12
    1420:	bf 90       	pop	r11
    1422:	af 90       	pop	r10
    1424:	7f 90       	pop	r7
    1426:	6f 90       	pop	r6
    1428:	5f 90       	pop	r5
    142a:	4f 90       	pop	r4
    142c:	08 95       	ret

0000142e <motor_update>:
Initialization of Subsystem Components
************************************************************/

/* Called On Timer 3 Rollover */
void motor_update(void)
{
    142e:	af 92       	push	r10
    1430:	bf 92       	push	r11
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
	set(TIFR3,OCF3A);		// Reset flag
    143e:	c1 9a       	sbi	0x18, 1	; 24
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd); // Update control
    1440:	a0 90 0c 01 	lds	r10, 0x010C
    1444:	b0 90 0d 01 	lds	r11, 0x010D
    1448:	c0 90 0e 01 	lds	r12, 0x010E
    144c:	d0 90 0f 01 	lds	r13, 0x010F
    1450:	e0 90 10 01 	lds	r14, 0x0110
    1454:	f0 90 11 01 	lds	r15, 0x0111
    1458:	00 91 12 01 	lds	r16, 0x0112
    145c:	10 91 13 01 	lds	r17, 0x0113
    1460:	20 91 af 01 	lds	r18, 0x01AF
    1464:	30 91 b0 01 	lds	r19, 0x01B0
    1468:	40 91 b1 01 	lds	r20, 0x01B1
    146c:	50 91 b2 01 	lds	r21, 0x01B2
    1470:	60 91 b3 01 	lds	r22, 0x01B3
    1474:	70 91 b4 01 	lds	r23, 0x01B4
    1478:	80 91 b5 01 	lds	r24, 0x01B5
    147c:	90 91 b6 01 	lds	r25, 0x01B6
    1480:	e0 91 03 01 	lds	r30, 0x0103
    1484:	ef 93       	push	r30
    1486:	e0 91 02 01 	lds	r30, 0x0102
    148a:	ef 93       	push	r30
    148c:	e0 91 01 01 	lds	r30, 0x0101
    1490:	ef 93       	push	r30
    1492:	e0 91 00 01 	lds	r30, 0x0100
    1496:	ef 93       	push	r30
    1498:	e0 91 07 01 	lds	r30, 0x0107
    149c:	ef 93       	push	r30
    149e:	e0 91 06 01 	lds	r30, 0x0106
    14a2:	ef 93       	push	r30
    14a4:	e0 91 05 01 	lds	r30, 0x0105
    14a8:	ef 93       	push	r30
    14aa:	e0 91 04 01 	lds	r30, 0x0104
    14ae:	ef 93       	push	r30
    14b0:	e0 91 ae 01 	lds	r30, 0x01AE
    14b4:	ef 93       	push	r30
    14b6:	e0 91 ad 01 	lds	r30, 0x01AD
    14ba:	ef 93       	push	r30
    14bc:	e0 91 ac 01 	lds	r30, 0x01AC
    14c0:	ef 93       	push	r30
    14c2:	e0 91 ab 01 	lds	r30, 0x01AB
    14c6:	ef 93       	push	r30
    14c8:	e0 91 0b 01 	lds	r30, 0x010B
    14cc:	ef 93       	push	r30
    14ce:	e0 91 0a 01 	lds	r30, 0x010A
    14d2:	ef 93       	push	r30
    14d4:	e0 91 09 01 	lds	r30, 0x0109
    14d8:	ef 93       	push	r30
    14da:	e0 91 08 01 	lds	r30, 0x0108
    14de:	ef 93       	push	r30
    14e0:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <run_motor_control_loop>
    14e4:	8d b7       	in	r24, 0x3d	; 61
    14e6:	9e b7       	in	r25, 0x3e	; 62
    14e8:	40 96       	adiw	r24, 0x10	; 16
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	9e bf       	out	0x3e, r25	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	8d bf       	out	0x3d, r24	; 61
}
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	ff 90       	pop	r15
    14fa:	ef 90       	pop	r14
    14fc:	df 90       	pop	r13
    14fe:	cf 90       	pop	r12
    1500:	bf 90       	pop	r11
    1502:	af 90       	pop	r10
    1504:	08 95       	ret

00001506 <adc_update>:

}

/* Called on ADC Conversion Completion */
void adc_update(void)
{
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	2c 97       	sbiw	r28, 0x0c	; 12
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
	set(ADCSRA,ADIF);	 // Reset flag
    151a:	ea e7       	ldi	r30, 0x7A	; 122
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	80 61       	ori	r24, 0x10	; 16
    1522:	80 83       	st	Z, r24
	if(adc_switch()){
    1524:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <adc_switch>
    1528:	88 23       	and	r24, r24
    152a:	31 f1       	breq	.+76     	; 0x1578 <adc_update+0x72>
		float puck_buffer[3];
		get_puck_location(puck_buffer);
    152c:	ce 01       	movw	r24, r28
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <get_puck_location>
		x_puck = puck_buffer[0];
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	ab 81       	ldd	r26, Y+3	; 0x03
    153a:	bc 81       	ldd	r27, Y+4	; 0x04
    153c:	80 93 8a 01 	sts	0x018A, r24
    1540:	90 93 8b 01 	sts	0x018B, r25
    1544:	a0 93 8c 01 	sts	0x018C, r26
    1548:	b0 93 8d 01 	sts	0x018D, r27
		y_puck = puck_buffer[1];
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	af 81       	ldd	r26, Y+7	; 0x07
    1552:	b8 85       	ldd	r27, Y+8	; 0x08
    1554:	80 93 86 01 	sts	0x0186, r24
    1558:	90 93 87 01 	sts	0x0187, r25
    155c:	a0 93 88 01 	sts	0x0188, r26
    1560:	b0 93 89 01 	sts	0x0189, r27
		puck_dist = puck_buffer[2];
    1564:	69 85       	ldd	r22, Y+9	; 0x09
    1566:	7a 85       	ldd	r23, Y+10	; 0x0a
    1568:	8b 85       	ldd	r24, Y+11	; 0x0b
    156a:	9c 85       	ldd	r25, Y+12	; 0x0c
    156c:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixsfsi>
    1570:	70 93 85 01 	sts	0x0185, r23
    1574:	60 93 84 01 	sts	0x0184, r22
	}
}
    1578:	2c 96       	adiw	r28, 0x0c	; 12
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	08 95       	ret

0000158a <positioning_LED>:
	
}

void positioning_LED(int color)
{
	switch(color)
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	91 05       	cpc	r25, r1
    158e:	41 f0       	breq	.+16     	; 0x15a0 <positioning_LED+0x16>
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	91 05       	cpc	r25, r1
    1594:	41 f0       	breq	.+16     	; 0x15a6 <positioning_LED+0x1c>
    1596:	89 2b       	or	r24, r25
    1598:	41 f4       	brne	.+16     	; 0x15aa <positioning_LED+0x20>
	{ 
		case OFF:	//OFF
			clear(PORTC,7);
    159a:	47 98       	cbi	0x08, 7	; 8
			clear(PORTC,6);
    159c:	46 98       	cbi	0x08, 6	; 8
			break;
    159e:	08 95       	ret
		
		case BLUE:	//BLUE
			set(PORTC,6);
    15a0:	46 9a       	sbi	0x08, 6	; 8
			clear(PORTC,7);
    15a2:	47 98       	cbi	0x08, 7	; 8
			break;
    15a4:	08 95       	ret
			
		case RED: //RED
			clear(PORTC,6);
    15a6:	46 98       	cbi	0x08, 6	; 8
			set(PORTC,7);
    15a8:	47 9a       	sbi	0x08, 7	; 8
    15aa:	08 95       	ret

000015ac <bot_behavior_update>:
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd); // Update control
}

/* Update Targets, Gains, and Max Vals */
void bot_behavior_update()
{
    15ac:	4f 92       	push	r4
    15ae:	5f 92       	push	r5
    15b0:	6f 92       	push	r6
    15b2:	7f 92       	push	r7
    15b4:	8f 92       	push	r8
    15b6:	9f 92       	push	r9
    15b8:	af 92       	push	r10
    15ba:	bf 92       	push	r11
    15bc:	cf 92       	push	r12
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
	switch (role) {
    15c8:	80 91 82 01 	lds	r24, 0x0182
    15cc:	90 91 83 01 	lds	r25, 0x0183
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <bot_behavior_update+0x2c>
    15d6:	5c c0       	rjmp	.+184    	; 0x1690 <bot_behavior_update+0xe4>
    15d8:	82 30       	cpi	r24, 0x02	; 2
    15da:	91 05       	cpc	r25, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <bot_behavior_update+0x34>
    15de:	a9 c0       	rjmp	.+338    	; 0x1732 <bot_behavior_update+0x186>
    15e0:	89 2b       	or	r24, r25
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <bot_behavior_update+0x3a>
    15e4:	ab c0       	rjmp	.+342    	; 0x173c <bot_behavior_update+0x190>
		case GOALIE:
			goalie_action(x_goal, y_goal, x_puck, y_puck, puck_dist, &x_target, &y_target, &max_theta, &theta_kd, &theta_kp, 
    15e6:	80 90 84 01 	lds	r8, 0x0184
    15ea:	90 90 85 01 	lds	r9, 0x0185
    15ee:	a0 90 86 01 	lds	r10, 0x0186
    15f2:	b0 90 87 01 	lds	r11, 0x0187
    15f6:	c0 90 88 01 	lds	r12, 0x0188
    15fa:	d0 90 89 01 	lds	r13, 0x0189
    15fe:	e0 90 8a 01 	lds	r14, 0x018A
    1602:	f0 90 8b 01 	lds	r15, 0x018B
    1606:	00 91 8c 01 	lds	r16, 0x018C
    160a:	10 91 8d 01 	lds	r17, 0x018D
    160e:	20 91 92 01 	lds	r18, 0x0192
    1612:	30 91 93 01 	lds	r19, 0x0193
    1616:	40 91 94 01 	lds	r20, 0x0194
    161a:	50 91 95 01 	lds	r21, 0x0195
    161e:	40 90 96 01 	lds	r4, 0x0196
    1622:	50 90 97 01 	lds	r5, 0x0197
    1626:	60 90 98 01 	lds	r6, 0x0198
    162a:	70 90 99 01 	lds	r7, 0x0199
    162e:	82 e8       	ldi	r24, 0x82	; 130
    1630:	91 e0       	ldi	r25, 0x01	; 1
    1632:	9f 93       	push	r25
    1634:	8f 93       	push	r24
    1636:	80 e1       	ldi	r24, 0x10	; 16
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	9f 93       	push	r25
    163c:	8f 93       	push	r24
    163e:	84 e0       	ldi	r24, 0x04	; 4
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	9f 93       	push	r25
    1644:	8f 93       	push	r24
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	91 e0       	ldi	r25, 0x01	; 1
    164a:	9f 93       	push	r25
    164c:	8f 93       	push	r24
    164e:	88 e0       	ldi	r24, 0x08	; 8
    1650:	91 e0       	ldi	r25, 0x01	; 1
    1652:	9f 93       	push	r25
    1654:	8f 93       	push	r24
    1656:	8b ea       	ldi	r24, 0xAB	; 171
    1658:	91 e0       	ldi	r25, 0x01	; 1
    165a:	9f 93       	push	r25
    165c:	8f 93       	push	r24
    165e:	8c e0       	ldi	r24, 0x0C	; 12
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	9f 93       	push	r25
    1664:	8f 93       	push	r24
    1666:	8f ea       	ldi	r24, 0xAF	; 175
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	9f 93       	push	r25
    166c:	8f 93       	push	r24
    166e:	83 eb       	ldi	r24, 0xB3	; 179
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	9f 93       	push	r25
    1674:	8f 93       	push	r24
    1676:	c3 01       	movw	r24, r6
    1678:	b2 01       	movw	r22, r4
    167a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <goalie_action>
				&linear_kd, &linear_kp, &max_duty_cycle, &role);
			break;
    167e:	8d b7       	in	r24, 0x3d	; 61
    1680:	9e b7       	in	r25, 0x3e	; 62
    1682:	42 96       	adiw	r24, 0x12	; 18
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	9e bf       	out	0x3e, r25	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	8d bf       	out	0x3d, r24	; 61
    168e:	5a c0       	rjmp	.+180    	; 0x1744 <bot_behavior_update+0x198>
			
		case ATTACK:
			attack_action(x_goal, y_goal, x_puck, y_puck, &x_target, &y_target, &max_theta, &theta_kd, &theta_kp, &linear_kd, &linear_kp, &max_duty_cycle);
    1690:	a0 90 86 01 	lds	r10, 0x0186
    1694:	b0 90 87 01 	lds	r11, 0x0187
    1698:	c0 90 88 01 	lds	r12, 0x0188
    169c:	d0 90 89 01 	lds	r13, 0x0189
    16a0:	e0 90 8a 01 	lds	r14, 0x018A
    16a4:	f0 90 8b 01 	lds	r15, 0x018B
    16a8:	00 91 8c 01 	lds	r16, 0x018C
    16ac:	10 91 8d 01 	lds	r17, 0x018D
    16b0:	20 91 92 01 	lds	r18, 0x0192
    16b4:	30 91 93 01 	lds	r19, 0x0193
    16b8:	40 91 94 01 	lds	r20, 0x0194
    16bc:	50 91 95 01 	lds	r21, 0x0195
    16c0:	60 91 96 01 	lds	r22, 0x0196
    16c4:	70 91 97 01 	lds	r23, 0x0197
    16c8:	80 91 98 01 	lds	r24, 0x0198
    16cc:	90 91 99 01 	lds	r25, 0x0199
    16d0:	e0 e1       	ldi	r30, 0x10	; 16
    16d2:	f1 e0       	ldi	r31, 0x01	; 1
    16d4:	ff 93       	push	r31
    16d6:	ef 93       	push	r30
    16d8:	e4 e0       	ldi	r30, 0x04	; 4
    16da:	f1 e0       	ldi	r31, 0x01	; 1
    16dc:	ff 93       	push	r31
    16de:	ef 93       	push	r30
    16e0:	e0 e0       	ldi	r30, 0x00	; 0
    16e2:	f1 e0       	ldi	r31, 0x01	; 1
    16e4:	ff 93       	push	r31
    16e6:	ef 93       	push	r30
    16e8:	e8 e0       	ldi	r30, 0x08	; 8
    16ea:	f1 e0       	ldi	r31, 0x01	; 1
    16ec:	ff 93       	push	r31
    16ee:	ef 93       	push	r30
    16f0:	eb ea       	ldi	r30, 0xAB	; 171
    16f2:	f1 e0       	ldi	r31, 0x01	; 1
    16f4:	ff 93       	push	r31
    16f6:	ef 93       	push	r30
    16f8:	ec e0       	ldi	r30, 0x0C	; 12
    16fa:	f1 e0       	ldi	r31, 0x01	; 1
    16fc:	ff 93       	push	r31
    16fe:	ef 93       	push	r30
    1700:	ef ea       	ldi	r30, 0xAF	; 175
    1702:	f1 e0       	ldi	r31, 0x01	; 1
    1704:	ff 93       	push	r31
    1706:	ef 93       	push	r30
    1708:	0f 2e       	mov	r0, r31
    170a:	f3 eb       	ldi	r31, 0xB3	; 179
    170c:	8f 2e       	mov	r8, r31
    170e:	f1 e0       	ldi	r31, 0x01	; 1
    1710:	9f 2e       	mov	r9, r31
    1712:	f0 2d       	mov	r31, r0
    1714:	0e 94 09 01 	call	0x212	; 0x212 <attack_action>
			positioning_LED(RED);
    1718:	82 e0       	ldi	r24, 0x02	; 2
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 c5 0a 	call	0x158a	; 0x158a <positioning_LED>
			break;
    1720:	8d b7       	in	r24, 0x3d	; 61
    1722:	9e b7       	in	r25, 0x3e	; 62
    1724:	0e 96       	adiw	r24, 0x0e	; 14
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	9e bf       	out	0x3e, r25	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	8d bf       	out	0x3d, r24	; 61
    1730:	09 c0       	rjmp	.+18     	; 0x1744 <bot_behavior_update+0x198>
			
		case DEFEND:
			positioning_LED(RED);
    1732:	82 e0       	ldi	r24, 0x02	; 2
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 c5 0a 	call	0x158a	; 0x158a <positioning_LED>
			break;
    173a:	04 c0       	rjmp	.+8      	; 0x1744 <bot_behavior_update+0x198>
			
		default:
			positioning_LED(RED);
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 c5 0a 	call	0x158a	; 0x158a <positioning_LED>
			break;
	}

}
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	df 90       	pop	r13
    174e:	cf 90       	pop	r12
    1750:	bf 90       	pop	r11
    1752:	af 90       	pop	r10
    1754:	9f 90       	pop	r9
    1756:	8f 90       	pop	r8
    1758:	7f 90       	pop	r7
    175a:	6f 90       	pop	r6
    175c:	5f 90       	pop	r5
    175e:	4f 90       	pop	r4
    1760:	08 95       	ret

00001762 <play>:
void play(void)
{
	/* Light LED of defending goal */
	
	/* Play */
	set(TCCR1B,CS10);
    1762:	e1 e8       	ldi	r30, 0x81	; 129
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	81 60       	ori	r24, 0x01	; 1
    176a:	80 83       	st	Z, r24
	positioning_LED(goal);
    176c:	80 91 90 01 	lds	r24, 0x0190
    1770:	90 91 91 01 	lds	r25, 0x0191
    1774:	0e 94 c5 0a 	call	0x158a	; 0x158a <positioning_LED>
	
	set(ADCSRB,MUX5); // Select ADC13 at pin B6
    1778:	eb e7       	ldi	r30, 0x7B	; 123
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	80 62       	ori	r24, 0x20	; 32
    1780:	80 83       	st	Z, r24
	set(ADMUX,MUX2); // Transistor 4
    1782:	ec e7       	ldi	r30, 0x7C	; 124
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	84 60       	ori	r24, 0x04	; 4
    178a:	80 83       	st	Z, r24
	clear(ADMUX,MUX1);
    178c:	80 81       	ld	r24, Z
    178e:	8d 7f       	andi	r24, 0xFD	; 253
    1790:	80 83       	st	Z, r24
	set(ADMUX,MUX0);
    1792:	80 81       	ld	r24, Z
    1794:	81 60       	ori	r24, 0x01	; 1
    1796:	80 83       	st	Z, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
    1798:	ea e7       	ldi	r30, 0x7A	; 122
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	80 68       	ori	r24, 0x80	; 128
    17a0:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
    17a2:	80 81       	ld	r24, Z
    17a4:	80 64       	ori	r24, 0x40	; 64
    17a6:	80 83       	st	Z, r24
    17a8:	08 95       	ret

000017aa <pause>:
}

void pause(void)
{
	/* Stop within 3  seconds */
	clear(TCCR1B,CS10);
    17aa:	e1 e8       	ldi	r30, 0x81	; 129
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8e 7f       	andi	r24, 0xFE	; 254
    17b2:	80 83       	st	Z, r24
	clear(PORTB,0); // B0 Left motor off
    17b4:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,2); // B2 Right motor off
    17b6:	2a 98       	cbi	0x05, 2	; 5
	positioning_LED(OFF);
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	0e 94 c5 0a 	call	0x158a	; 0x158a <positioning_LED>
	
	clear(ADCSRA,ADEN); // Disable ADC subsystem
    17c0:	ea e7       	ldi	r30, 0x7A	; 122
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8f 77       	andi	r24, 0x7F	; 127
    17c8:	80 83       	st	Z, r24
    17ca:	08 95       	ret

000017cc <halftime>:
}

void halftime(void)
{
	/* Stop play */
	pause();
    17cc:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <pause>
	
	/* Switch assigned goal */
	if (x_goal>0) {
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	a9 01       	movw	r20, r18
    17d6:	60 91 96 01 	lds	r22, 0x0196
    17da:	70 91 97 01 	lds	r23, 0x0197
    17de:	80 91 98 01 	lds	r24, 0x0198
    17e2:	90 91 99 01 	lds	r25, 0x0199
    17e6:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__gesf2>
    17ea:	18 16       	cp	r1, r24
    17ec:	9c f4       	brge	.+38     	; 0x1814 <halftime+0x48>
		x_goal = -1*GOAL_X_DIST;
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a8 ec       	ldi	r26, 0xC8	; 200
    17f4:	b3 ec       	ldi	r27, 0xC3	; 195
    17f6:	80 93 96 01 	sts	0x0196, r24
    17fa:	90 93 97 01 	sts	0x0197, r25
    17fe:	a0 93 98 01 	sts	0x0198, r26
    1802:	b0 93 99 01 	sts	0x0199, r27
		goal = RED;
    1806:	82 e0       	ldi	r24, 0x02	; 2
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	90 93 91 01 	sts	0x0191, r25
    180e:	80 93 90 01 	sts	0x0190, r24
    1812:	08 95       	ret
		} else {
		x_goal = GOAL_X_DIST;
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a8 ec       	ldi	r26, 0xC8	; 200
    181a:	b3 e4       	ldi	r27, 0x43	; 67
    181c:	80 93 96 01 	sts	0x0196, r24
    1820:	90 93 97 01 	sts	0x0197, r25
    1824:	a0 93 98 01 	sts	0x0198, r26
    1828:	b0 93 99 01 	sts	0x0199, r27
		goal = BLUE;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	90 93 91 01 	sts	0x0191, r25
    1834:	80 93 90 01 	sts	0x0190, r24
    1838:	08 95       	ret

0000183a <select_goal>:
			break;
	}
}

void select_goal(void) 
{
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	2c 97       	sbiw	r28, 0x0c	; 12
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
	/* Assign Defending goal */
	update_position();
    184e:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <update_position>
	
	float position_buffer[3];
	get_position(position_buffer);
    1852:	ce 01       	movw	r24, r28
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <get_position>
	m_usb_tx_int((int)position_buffer[0]);
    185a:	69 81       	ldd	r22, Y+1	; 0x01
    185c:	7a 81       	ldd	r23, Y+2	; 0x02
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixsfsi>
    1866:	cb 01       	movw	r24, r22
    1868:	0e 94 6d 14 	call	0x28da	; 0x28da <m_usb_tx_int>
	
	if (position_buffer[0]>0) {
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	a9 01       	movw	r20, r18
    1872:	69 81       	ldd	r22, Y+1	; 0x01
    1874:	7a 81       	ldd	r23, Y+2	; 0x02
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__gesf2>
    187e:	18 16       	cp	r1, r24
    1880:	9c f4       	brge	.+38     	; 0x18a8 <select_goal+0x6e>
		x_goal = -1*GOAL_X_DIST;
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a8 ec       	ldi	r26, 0xC8	; 200
    1888:	b3 ec       	ldi	r27, 0xC3	; 195
    188a:	80 93 96 01 	sts	0x0196, r24
    188e:	90 93 97 01 	sts	0x0197, r25
    1892:	a0 93 98 01 	sts	0x0198, r26
    1896:	b0 93 99 01 	sts	0x0199, r27
		goal = RED;
    189a:	82 e0       	ldi	r24, 0x02	; 2
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	90 93 91 01 	sts	0x0191, r25
    18a2:	80 93 90 01 	sts	0x0190, r24
    18a6:	12 c0       	rjmp	.+36     	; 0x18cc <select_goal+0x92>
		//positioning_LED(RED);
		} else {
		x_goal = GOAL_X_DIST;
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a8 ec       	ldi	r26, 0xC8	; 200
    18ae:	b3 e4       	ldi	r27, 0x43	; 67
    18b0:	80 93 96 01 	sts	0x0196, r24
    18b4:	90 93 97 01 	sts	0x0197, r25
    18b8:	a0 93 98 01 	sts	0x0198, r26
    18bc:	b0 93 99 01 	sts	0x0199, r27
		goal = BLUE;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	90 93 91 01 	sts	0x0191, r25
    18c8:	80 93 90 01 	sts	0x0190, r24
		//positioning_LED(BLUE);
	}
}
    18cc:	2c 96       	adiw	r28, 0x0c	; 12
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	08 95       	ret

000018de <comm_test>:
	}
}

void comm_test(void)
{
	if (!goal_init){
    18de:	80 91 8e 01 	lds	r24, 0x018E
    18e2:	90 91 8f 01 	lds	r25, 0x018F
    18e6:	89 2b       	or	r24, r25
    18e8:	11 f4       	brne	.+4      	; 0x18ee <comm_test+0x10>
		select_goal();
    18ea:	0e 94 1d 0c 	call	0x183a	; 0x183a <select_goal>
	}
	/* Flash color of LED for defending goal */
	set(TCCR0B,CS02); //start timer 
    18ee:	85 b5       	in	r24, 0x25	; 37
    18f0:	84 60       	ori	r24, 0x04	; 4
    18f2:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS00);
    18f4:	85 b5       	in	r24, 0x25	; 37
    18f6:	81 60       	ori	r24, 0x01	; 1
    18f8:	85 bd       	out	0x25, r24	; 37
	positioning_LED(goal); //turn on LED 
    18fa:	80 91 90 01 	lds	r24, 0x0190
    18fe:	90 91 91 01 	lds	r25, 0x0191
    1902:	0e 94 c5 0a 	call	0x158a	; 0x158a <positioning_LED>
    1906:	08 95       	ret

00001908 <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
    1908:	e0 91 a0 01 	lds	r30, 0x01A0
    190c:	8e 2f       	mov	r24, r30
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	fc 01       	movw	r30, r24
    1912:	e0 5a       	subi	r30, 0xA0	; 160
    1914:	f1 09       	sbc	r31, r1
    1916:	e8 30       	cpi	r30, 0x08	; 8
    1918:	f1 05       	cpc	r31, r1
    191a:	40 f5       	brcc	.+80     	; 0x196c <update_game_state+0x64>
    191c:	ea 5a       	subi	r30, 0xAA	; 170
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__tablejump2__>
		case 0xA0: // Comm Test
		comm_test();
    1924:	0e 94 6f 0c 	call	0x18de	; 0x18de <comm_test>
		break;
    1928:	08 95       	ret
		case 0xA1: // Play
		play();
    192a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <play>
		break;
    192e:	08 95       	ret
		case 0xA2: // Goal R
		SR = buffer[1];
    1930:	e1 ea       	ldi	r30, 0xA1	; 161
    1932:	f1 e0       	ldi	r31, 0x01	; 1
    1934:	81 81       	ldd	r24, Z+1	; 0x01
    1936:	80 93 9f 01 	sts	0x019F, r24
		SB = buffer[2];
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	80 93 9e 01 	sts	0x019E, r24
		pause();
    1940:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <pause>
		break;
    1944:	08 95       	ret
		case 0xA3: // Goal B
		SR = buffer[1];
    1946:	e1 ea       	ldi	r30, 0xA1	; 161
    1948:	f1 e0       	ldi	r31, 0x01	; 1
    194a:	81 81       	ldd	r24, Z+1	; 0x01
    194c:	80 93 9f 01 	sts	0x019F, r24
		SB = buffer[2];
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	80 93 9e 01 	sts	0x019E, r24
		pause();
    1956:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <pause>
		break;
    195a:	08 95       	ret
		case 0xA4: // Pause
		pause();
    195c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <pause>
		break;
    1960:	08 95       	ret
		case 0xA6: // Halftime
		halftime();
    1962:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <halftime>
		break;
    1966:	08 95       	ret
}

void game_over(void)
{
	// Stop play
	pause();
    1968:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <pause>
    196c:	08 95       	ret

0000196e <wireless_recieve>:
}

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    196e:	6a e0       	ldi	r22, 0x0A	; 10
    1970:	81 ea       	ldi	r24, 0xA1	; 161
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <m_rf_read>
	game_state = buffer[0];
    1978:	80 91 a1 01 	lds	r24, 0x01A1
    197c:	80 93 a0 01 	sts	0x01A0, r24
	update_game_state();
    1980:	0e 94 84 0c 	call	0x1908	; 0x1908 <update_game_state>
    1984:	08 95       	ret

00001986 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
    1986:	6e 9a       	sbi	0x0d, 6	; 13
    1988:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey();
    198a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <initialize_robockey>
	pause();
    198e:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <pause>

	/* Confirm successful initialization(s) */
	m_green(ON);
    1992:	6a 9a       	sbi	0x0d, 2	; 13
    1994:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    1996:	ca e7       	ldi	r28, 0x7A	; 122
    1998:	d0 e0       	ldi	r29, 0x00	; 0
		bot_behavior_update();
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
		if (wifi_flag) {
			wifi_flag = 0;
			m_red(TOGGLE);
    199a:	10 e4       	ldi	r17, 0x40	; 64
	/* Confirm successful initialization(s) */
	m_green(ON);

	/* Run */
	while (1){
		update_position();
    199c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <update_position>
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    19a0:	88 81       	ld	r24, Y
    19a2:	84 fd       	sbrc	r24, 4
    19a4:	0e 94 83 0a 	call	0x1506	; 0x1506 <adc_update>
		bot_behavior_update();
    19a8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <bot_behavior_update>
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
    19ac:	c1 99       	sbic	0x18, 1	; 24
    19ae:	0e 94 17 0a 	call	0x142e	; 0x142e <motor_update>
		if (wifi_flag) {
    19b2:	80 91 9c 01 	lds	r24, 0x019C
    19b6:	90 91 9d 01 	lds	r25, 0x019D
    19ba:	89 2b       	or	r24, r25
    19bc:	79 f3       	breq	.-34     	; 0x199c <main+0x16>
			wifi_flag = 0;
    19be:	10 92 9d 01 	sts	0x019D, r1
    19c2:	10 92 9c 01 	sts	0x019C, r1
			m_red(TOGGLE);
    19c6:	6e 9a       	sbi	0x0d, 6	; 13
    19c8:	8e b1       	in	r24, 0x0e	; 14
    19ca:	81 27       	eor	r24, r17
    19cc:	8e b9       	out	0x0e, r24	; 14
			wireless_recieve();
    19ce:	0e 94 b7 0c 	call	0x196e	; 0x196e <wireless_recieve>
    19d2:	e4 cf       	rjmp	.-56     	; 0x199c <main+0x16>

000019d4 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    19d4:	1f 92       	push	r1
    19d6:	0f 92       	push	r0
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	0f 92       	push	r0
    19dc:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    19de:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
    19e0:	2a 9a       	sbi	0x05, 2	; 5
}
    19e2:	0f 90       	pop	r0
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	0f 90       	pop	r0
    19e8:	1f 90       	pop	r1
    19ea:	18 95       	reti

000019ec <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    19ec:	1f 92       	push	r1
    19ee:	0f 92       	push	r0
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	0f 92       	push	r0
    19f4:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    19f6:	28 98       	cbi	0x05, 0	; 5
}
    19f8:	0f 90       	pop	r0
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	0f 90       	pop	r0
    19fe:	1f 90       	pop	r1
    1a00:	18 95       	reti

00001a02 <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    1a02:	1f 92       	push	r1
    1a04:	0f 92       	push	r0
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	0f 92       	push	r0
    1a0a:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    1a0c:	2a 98       	cbi	0x05, 2	; 5
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	0f 90       	pop	r0
    1a14:	1f 90       	pop	r1
    1a16:	18 95       	reti

00001a18 <__vector_3>:


/* Recieve Wireless Comm */
ISR(INT2_vect){
    1a18:	1f 92       	push	r1
    1a1a:	0f 92       	push	r0
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	0f 92       	push	r0
    1a20:	11 24       	eor	r1, r1
    1a22:	8f 93       	push	r24
    1a24:	9f 93       	push	r25
	//m_red(TOGGLE);
	wifi_flag = 1;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	90 93 9d 01 	sts	0x019D, r25
    1a2e:	80 93 9c 01 	sts	0x019C, r24
}
    1a32:	9f 91       	pop	r25
    1a34:	8f 91       	pop	r24
    1a36:	0f 90       	pop	r0
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	0f 90       	pop	r0
    1a3c:	1f 90       	pop	r1
    1a3e:	18 95       	reti

00001a40 <__vector_23>:

ISR(TIMER0_OVF_vect){
    1a40:	1f 92       	push	r1
    1a42:	0f 92       	push	r0
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	0f 92       	push	r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	2f 93       	push	r18
    1a4c:	3f 93       	push	r19
    1a4e:	4f 93       	push	r20
    1a50:	5f 93       	push	r21
    1a52:	6f 93       	push	r22
    1a54:	7f 93       	push	r23
    1a56:	8f 93       	push	r24
    1a58:	9f 93       	push	r25
    1a5a:	af 93       	push	r26
    1a5c:	bf 93       	push	r27
    1a5e:	ef 93       	push	r30
    1a60:	ff 93       	push	r31
	
	if (tim0_counts < 10) {
    1a62:	80 91 9a 01 	lds	r24, 0x019A
    1a66:	90 91 9b 01 	lds	r25, 0x019B
    1a6a:	8a 30       	cpi	r24, 0x0A	; 10
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	34 f4       	brge	.+12     	; 0x1a7c <__vector_23+0x3c>
		tim0_counts++; //increment timer counter
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	90 93 9b 01 	sts	0x019B, r25
    1a76:	80 93 9a 01 	sts	0x019A, r24
    1a7a:	0d c0       	rjmp	.+26     	; 0x1a96 <__vector_23+0x56>
		
	} else {
		positioning_LED(OFF); //turn LED off
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 c5 0a 	call	0x158a	; 0x158a <positioning_LED>
		
		clear(TCCR0B,CS02); //turn timer off
    1a84:	85 b5       	in	r24, 0x25	; 37
    1a86:	8b 7f       	andi	r24, 0xFB	; 251
    1a88:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS01);
    1a8a:	85 b5       	in	r24, 0x25	; 37
    1a8c:	8d 7f       	andi	r24, 0xFD	; 253
    1a8e:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS00);
    1a90:	85 b5       	in	r24, 0x25	; 37
    1a92:	8e 7f       	andi	r24, 0xFE	; 254
    1a94:	85 bd       	out	0x25, r24	; 37
	}
}
    1a96:	ff 91       	pop	r31
    1a98:	ef 91       	pop	r30
    1a9a:	bf 91       	pop	r27
    1a9c:	af 91       	pop	r26
    1a9e:	9f 91       	pop	r25
    1aa0:	8f 91       	pop	r24
    1aa2:	7f 91       	pop	r23
    1aa4:	6f 91       	pop	r22
    1aa6:	5f 91       	pop	r21
    1aa8:	4f 91       	pop	r20
    1aaa:	3f 91       	pop	r19
    1aac:	2f 91       	pop	r18
    1aae:	0f 90       	pop	r0
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	0f 90       	pop	r0
    1ab4:	1f 90       	pop	r1
    1ab6:	18 95       	reti

00001ab8 <get_position>:
/************************************************************
Public Functions
************************************************************/

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    1ab8:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    1aba:	80 91 c7 01 	lds	r24, 0x01C7
    1abe:	90 91 c8 01 	lds	r25, 0x01C8
    1ac2:	a0 91 c9 01 	lds	r26, 0x01C9
    1ac6:	b0 91 ca 01 	lds	r27, 0x01CA
    1aca:	80 83       	st	Z, r24
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	a2 83       	std	Z+2, r26	; 0x02
    1ad0:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    1ad2:	80 91 c3 01 	lds	r24, 0x01C3
    1ad6:	90 91 c4 01 	lds	r25, 0x01C4
    1ada:	a0 91 c5 01 	lds	r26, 0x01C5
    1ade:	b0 91 c6 01 	lds	r27, 0x01C6
    1ae2:	84 83       	std	Z+4, r24	; 0x04
    1ae4:	95 83       	std	Z+5, r25	; 0x05
    1ae6:	a6 83       	std	Z+6, r26	; 0x06
    1ae8:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    1aea:	80 91 bf 01 	lds	r24, 0x01BF
    1aee:	90 91 c0 01 	lds	r25, 0x01C0
    1af2:	a0 91 c1 01 	lds	r26, 0x01C1
    1af6:	b0 91 c2 01 	lds	r27, 0x01C2
    1afa:	80 87       	std	Z+8, r24	; 0x08
    1afc:	91 87       	std	Z+9, r25	; 0x09
    1afe:	a2 87       	std	Z+10, r26	; 0x0a
    1b00:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	08 95       	ret

00001b06 <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    1b06:	8f 92       	push	r8
    1b08:	9f 92       	push	r9
    1b0a:	af 92       	push	r10
    1b0c:	bf 92       	push	r11
    1b0e:	cf 92       	push	r12
    1b10:	df 92       	push	r13
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
    1b16:	6b 01       	movw	r12, r22
    1b18:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    1b1a:	4b 01       	movw	r8, r22
    1b1c:	5c 01       	movw	r10, r24
    1b1e:	e8 94       	clt
    1b20:	b7 f8       	bld	r11, 7
    1b22:	2b ed       	ldi	r18, 0xDB	; 219
    1b24:	3f e0       	ldi	r19, 0x0F	; 15
    1b26:	49 e4       	ldi	r20, 0x49	; 73
    1b28:	50 e4       	ldi	r21, 0x40	; 64
    1b2a:	c5 01       	movw	r24, r10
    1b2c:	b4 01       	movw	r22, r8
    1b2e:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__gesf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	bc f4       	brge	.+46     	; 0x1b64 <theta_error_correction+0x5e>
    1b36:	2b ed       	ldi	r18, 0xDB	; 219
    1b38:	3f e0       	ldi	r19, 0x0F	; 15
    1b3a:	49 ec       	ldi	r20, 0xC9	; 201
    1b3c:	50 e4       	ldi	r21, 0x40	; 64
    1b3e:	c7 01       	movw	r24, r14
    1b40:	b6 01       	movw	r22, r12
    1b42:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1b46:	a5 01       	movw	r20, r10
    1b48:	94 01       	movw	r18, r8
    1b4a:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__divsf3>
    1b4e:	9b 01       	movw	r18, r22
    1b50:	ac 01       	movw	r20, r24
    1b52:	c7 01       	movw	r24, r14
    1b54:	b6 01       	movw	r22, r12
    1b56:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
    1b5a:	56 2f       	mov	r21, r22
    1b5c:	47 2f       	mov	r20, r23
    1b5e:	38 2f       	mov	r19, r24
    1b60:	29 2f       	mov	r18, r25
    1b62:	04 c0       	rjmp	.+8      	; 0x1b6c <theta_error_correction+0x66>
	else{return error;}
    1b64:	5c 2d       	mov	r21, r12
    1b66:	4d 2d       	mov	r20, r13
    1b68:	3e 2d       	mov	r19, r14
    1b6a:	2f 2d       	mov	r18, r15
}
    1b6c:	65 2f       	mov	r22, r21
    1b6e:	74 2f       	mov	r23, r20
    1b70:	83 2f       	mov	r24, r19
    1b72:	92 2f       	mov	r25, r18
    1b74:	ff 90       	pop	r15
    1b76:	ef 90       	pop	r14
    1b78:	df 90       	pop	r13
    1b7a:	cf 90       	pop	r12
    1b7c:	bf 90       	pop	r11
    1b7e:	af 90       	pop	r10
    1b80:	9f 90       	pop	r9
    1b82:	8f 90       	pop	r8
    1b84:	08 95       	ret

00001b86 <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    1b86:	2f 92       	push	r2
    1b88:	3f 92       	push	r3
    1b8a:	4f 92       	push	r4
    1b8c:	5f 92       	push	r5
    1b8e:	6f 92       	push	r6
    1b90:	7f 92       	push	r7
    1b92:	8f 92       	push	r8
    1b94:	9f 92       	push	r9
    1b96:	af 92       	push	r10
    1b98:	bf 92       	push	r11
    1b9a:	cf 92       	push	r12
    1b9c:	df 92       	push	r13
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	a8 97       	sbiw	r28, 0x28	; 40
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    1bba:	ce 01       	movw	r24, r28
    1bbc:	01 96       	adiw	r24, 0x01	; 1
    1bbe:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    1bc2:	6b 81       	ldd	r22, Y+3	; 0x03
    1bc4:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    1bc6:	0f 81       	ldd	r16, Y+7	; 0x07
    1bc8:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    1bca:	49 85       	ldd	r20, Y+9	; 0x09
    1bcc:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    1bce:	ad 85       	ldd	r26, Y+13	; 0x0d
    1bd0:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    1bd2:	2f 85       	ldd	r18, Y+15	; 0x0f
    1bd4:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    1bd6:	eb 89       	ldd	r30, Y+19	; 0x13
    1bd8:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    1bda:	8d 89       	ldd	r24, Y+21	; 0x15
    1bdc:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    1bde:	e9 80       	ldd	r14, Y+1	; 0x01
    1be0:	fa 80       	ldd	r15, Y+2	; 0x02
    1be2:	fa 8e       	std	Y+26, r15	; 0x1a
    1be4:	e9 8e       	std	Y+25, r14	; 0x19
    1be6:	1c 8f       	std	Y+28, r17	; 0x1c
    1be8:	0b 8f       	std	Y+27, r16	; 0x1b
    1bea:	be 8f       	std	Y+30, r27	; 0x1e
    1bec:	ad 8f       	std	Y+29, r26	; 0x1d
    1bee:	f8 a3       	std	Y+32, r31	; 0x20
    1bf0:	ef 8f       	std	Y+31, r30	; 0x1f
    1bf2:	7a a3       	std	Y+34, r23	; 0x22
    1bf4:	69 a3       	std	Y+33, r22	; 0x21
    1bf6:	5c a3       	std	Y+36, r21	; 0x24
    1bf8:	4b a3       	std	Y+35, r20	; 0x23
    1bfa:	3e a3       	std	Y+38, r19	; 0x26
    1bfc:	2d a3       	std	Y+37, r18	; 0x25
    1bfe:	98 a7       	std	Y+40, r25	; 0x28
    1c00:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    1c02:	6c e1       	ldi	r22, 0x1C	; 28
    1c04:	71 e0       	ldi	r23, 0x01	; 1
    1c06:	ce 01       	movw	r24, r28
    1c08:	49 96       	adiw	r24, 0x19	; 25
    1c0a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <localization_calc>
    1c0e:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    1c10:	fc 01       	movw	r30, r24
    1c12:	80 85       	ldd	r24, Z+8	; 0x08
    1c14:	91 85       	ldd	r25, Z+9	; 0x09
    1c16:	a2 85       	ldd	r26, Z+10	; 0x0a
    1c18:	b3 85       	ldd	r27, Z+11	; 0x0b
    1c1a:	0f 2e       	mov	r0, r31
    1c1c:	fc e1       	ldi	r31, 0x1C	; 28
    1c1e:	2f 2e       	mov	r2, r31
    1c20:	f1 e0       	ldi	r31, 0x01	; 1
    1c22:	3f 2e       	mov	r3, r31
    1c24:	f0 2d       	mov	r31, r0
    1c26:	f1 01       	movw	r30, r2
    1c28:	80 87       	std	Z+8, r24	; 0x08
    1c2a:	91 87       	std	Z+9, r25	; 0x09
    1c2c:	a2 87       	std	Z+10, r26	; 0x0a
    1c2e:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    1c30:	f8 01       	movw	r30, r16
    1c32:	60 85       	ldd	r22, Z+8	; 0x08
    1c34:	71 85       	ldd	r23, Z+9	; 0x09
    1c36:	82 85       	ldd	r24, Z+10	; 0x0a
    1c38:	93 85       	ldd	r25, Z+11	; 0x0b
    1c3a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <theta_error_correction>
    1c3e:	2b 01       	movw	r4, r22
    1c40:	3c 01       	movw	r6, r24
    1c42:	f8 01       	movw	r30, r16
    1c44:	60 87       	std	Z+8, r22	; 0x08
    1c46:	71 87       	std	Z+9, r23	; 0x09
    1c48:	82 87       	std	Z+10, r24	; 0x0a
    1c4a:	93 87       	std	Z+11, r25	; 0x0b
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1c4c:	24 ea       	ldi	r18, 0xA4	; 164
    1c4e:	30 e7       	ldi	r19, 0x70	; 112
    1c50:	4d e7       	ldi	r20, 0x7D	; 125
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	60 81       	ld	r22, Z
    1c56:	71 81       	ldd	r23, Z+1	; 0x01
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1c60:	4b 01       	movw	r8, r22
    1c62:	5c 01       	movw	r10, r24
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	37 ed       	ldi	r19, 0xD7	; 215
    1c68:	43 e2       	ldi	r20, 0x23	; 35
    1c6a:	5c e3       	ldi	r21, 0x3C	; 60
    1c6c:	60 91 c7 01 	lds	r22, 0x01C7
    1c70:	70 91 c8 01 	lds	r23, 0x01C8
    1c74:	80 91 c9 01 	lds	r24, 0x01C9
    1c78:	90 91 ca 01 	lds	r25, 0x01CA
    1c7c:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1c80:	9b 01       	movw	r18, r22
    1c82:	ac 01       	movw	r20, r24
    1c84:	c5 01       	movw	r24, r10
    1c86:	b4 01       	movw	r22, r8
    1c88:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
    1c8c:	4b 01       	movw	r8, r22
    1c8e:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    1c90:	60 93 c7 01 	sts	0x01C7, r22
    1c94:	70 93 c8 01 	sts	0x01C8, r23
    1c98:	80 93 c9 01 	sts	0x01C9, r24
    1c9c:	90 93 ca 01 	sts	0x01CA, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1ca0:	24 ea       	ldi	r18, 0xA4	; 164
    1ca2:	30 e7       	ldi	r19, 0x70	; 112
    1ca4:	4d e7       	ldi	r20, 0x7D	; 125
    1ca6:	5f e3       	ldi	r21, 0x3F	; 63
    1ca8:	f8 01       	movw	r30, r16
    1caa:	64 81       	ldd	r22, Z+4	; 0x04
    1cac:	75 81       	ldd	r23, Z+5	; 0x05
    1cae:	86 81       	ldd	r24, Z+6	; 0x06
    1cb0:	97 81       	ldd	r25, Z+7	; 0x07
    1cb2:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1cb6:	6b 01       	movw	r12, r22
    1cb8:	7c 01       	movw	r14, r24
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	37 ed       	ldi	r19, 0xD7	; 215
    1cbe:	43 e2       	ldi	r20, 0x23	; 35
    1cc0:	5c e3       	ldi	r21, 0x3C	; 60
    1cc2:	60 91 c3 01 	lds	r22, 0x01C3
    1cc6:	70 91 c4 01 	lds	r23, 0x01C4
    1cca:	80 91 c5 01 	lds	r24, 0x01C5
    1cce:	90 91 c6 01 	lds	r25, 0x01C6
    1cd2:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1cd6:	9b 01       	movw	r18, r22
    1cd8:	ac 01       	movw	r20, r24
    1cda:	c7 01       	movw	r24, r14
    1cdc:	b6 01       	movw	r22, r12
    1cde:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
    1ce2:	6b 01       	movw	r12, r22
    1ce4:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    1ce6:	60 93 c3 01 	sts	0x01C3, r22
    1cea:	70 93 c4 01 	sts	0x01C4, r23
    1cee:	80 93 c5 01 	sts	0x01C5, r24
    1cf2:	90 93 c6 01 	sts	0x01C6, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1cf6:	24 ea       	ldi	r18, 0xA4	; 164
    1cf8:	30 e7       	ldi	r19, 0x70	; 112
    1cfa:	4d e7       	ldi	r20, 0x7D	; 125
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	c3 01       	movw	r24, r6
    1d00:	b2 01       	movw	r22, r4
    1d02:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1d06:	2b 01       	movw	r4, r22
    1d08:	3c 01       	movw	r6, r24
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	37 ed       	ldi	r19, 0xD7	; 215
    1d0e:	43 e2       	ldi	r20, 0x23	; 35
    1d10:	5c e3       	ldi	r21, 0x3C	; 60
    1d12:	60 91 bf 01 	lds	r22, 0x01BF
    1d16:	70 91 c0 01 	lds	r23, 0x01C0
    1d1a:	80 91 c1 01 	lds	r24, 0x01C1
    1d1e:	90 91 c2 01 	lds	r25, 0x01C2
    1d22:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1d26:	9b 01       	movw	r18, r22
    1d28:	ac 01       	movw	r20, r24
    1d2a:	c3 01       	movw	r24, r6
    1d2c:	b2 01       	movw	r22, r4
    1d2e:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    1d32:	60 93 bf 01 	sts	0x01BF, r22
    1d36:	70 93 c0 01 	sts	0x01C0, r23
    1d3a:	80 93 c1 01 	sts	0x01C1, r24
    1d3e:	90 93 c2 01 	sts	0x01C2, r25
	
	robotCenterPrev[0] = x;
    1d42:	f1 01       	movw	r30, r2
    1d44:	80 82       	st	Z, r8
    1d46:	91 82       	std	Z+1, r9	; 0x01
    1d48:	a2 82       	std	Z+2, r10	; 0x02
    1d4a:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    1d4c:	c4 82       	std	Z+4, r12	; 0x04
    1d4e:	d5 82       	std	Z+5, r13	; 0x05
    1d50:	e6 82       	std	Z+6, r14	; 0x06
    1d52:	f7 82       	std	Z+7, r15	; 0x07
}
    1d54:	a8 96       	adiw	r28, 0x28	; 40
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	ff 90       	pop	r15
    1d6a:	ef 90       	pop	r14
    1d6c:	df 90       	pop	r13
    1d6e:	cf 90       	pop	r12
    1d70:	bf 90       	pop	r11
    1d72:	af 90       	pop	r10
    1d74:	9f 90       	pop	r9
    1d76:	8f 90       	pop	r8
    1d78:	7f 90       	pop	r7
    1d7a:	6f 90       	pop	r6
    1d7c:	5f 90       	pop	r5
    1d7e:	4f 90       	pop	r4
    1d80:	3f 90       	pop	r3
    1d82:	2f 90       	pop	r2
    1d84:	08 95       	ret

00001d86 <run_motor_control_loop>:



/* PID Control */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd)
{
    1d86:	4f 92       	push	r4
    1d88:	5f 92       	push	r5
    1d8a:	6f 92       	push	r6
    1d8c:	7f 92       	push	r7
    1d8e:	8f 92       	push	r8
    1d90:	9f 92       	push	r9
    1d92:	af 92       	push	r10
    1d94:	bf 92       	push	r11
    1d96:	cf 92       	push	r12
    1d98:	df 92       	push	r13
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	68 97       	sbiw	r28, 0x18	; 24
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	29 01       	movw	r4, r18
    1db8:	3a 01       	movw	r6, r20
    1dba:	e9 8a       	std	Y+17, r14	; 0x11
    1dbc:	fa 8a       	std	Y+18, r15	; 0x12
    1dbe:	0b 8b       	std	Y+19, r16	; 0x13
    1dc0:	1c 8b       	std	Y+20, r17	; 0x14
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    1dc2:	20 91 c7 01 	lds	r18, 0x01C7
    1dc6:	30 91 c8 01 	lds	r19, 0x01C8
    1dca:	40 91 c9 01 	lds	r20, 0x01C9
    1dce:	50 91 ca 01 	lds	r21, 0x01CA
    1dd2:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
    1dd6:	6d 83       	std	Y+5, r22	; 0x05
    1dd8:	7e 83       	std	Y+6, r23	; 0x06
    1dda:	8f 83       	std	Y+7, r24	; 0x07
    1ddc:	98 87       	std	Y+8, r25	; 0x08
    1dde:	20 91 c3 01 	lds	r18, 0x01C3
    1de2:	30 91 c4 01 	lds	r19, 0x01C4
    1de6:	40 91 c5 01 	lds	r20, 0x01C5
    1dea:	50 91 c6 01 	lds	r21, 0x01C6
    1dee:	c3 01       	movw	r24, r6
    1df0:	b2 01       	movw	r22, r4
    1df2:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
    1df6:	69 87       	std	Y+9, r22	; 0x09
    1df8:	7a 87       	std	Y+10, r23	; 0x0a
    1dfa:	8b 87       	std	Y+11, r24	; 0x0b
    1dfc:	9c 87       	std	Y+12, r25	; 0x0c
    1dfe:	2d 81       	ldd	r18, Y+5	; 0x05
    1e00:	3e 81       	ldd	r19, Y+6	; 0x06
    1e02:	4f 81       	ldd	r20, Y+7	; 0x07
    1e04:	58 85       	ldd	r21, Y+8	; 0x08
    1e06:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    1e0a:	20 91 bf 01 	lds	r18, 0x01BF
    1e0e:	30 91 c0 01 	lds	r19, 0x01C0
    1e12:	40 91 c1 01 	lds	r20, 0x01C1
    1e16:	50 91 c2 01 	lds	r21, 0x01C2
    1e1a:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
	theta_error = theta_error_correction(theta_error);
    1e1e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <theta_error_correction>
    1e22:	69 83       	std	Y+1, r22	; 0x01
    1e24:	7a 83       	std	Y+2, r23	; 0x02
    1e26:	8b 83       	std	Y+3, r24	; 0x03
    1e28:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    1e2a:	2b 01       	movw	r4, r22
    1e2c:	3c 01       	movw	r6, r24
    1e2e:	e8 94       	clt
    1e30:	77 f8       	bld	r7, 7
    1e32:	a6 01       	movw	r20, r12
    1e34:	95 01       	movw	r18, r10
    1e36:	c3 01       	movw	r24, r6
    1e38:	b2 01       	movw	r22, r4
    1e3a:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__gesf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	84 f4       	brge	.+32     	; 0x1e62 <run_motor_control_loop+0xdc>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    1e42:	29 81       	ldd	r18, Y+1	; 0x01
    1e44:	3a 81       	ldd	r19, Y+2	; 0x02
    1e46:	4b 81       	ldd	r20, Y+3	; 0x03
    1e48:	5c 81       	ldd	r21, Y+4	; 0x04
    1e4a:	c3 01       	movw	r24, r6
    1e4c:	b2 01       	movw	r22, r4
    1e4e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__divsf3>
    1e52:	a6 01       	movw	r20, r12
    1e54:	95 01       	movw	r18, r10
    1e56:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1e5a:	69 83       	std	Y+1, r22	; 0x01
    1e5c:	7a 83       	std	Y+2, r23	; 0x02
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
    1e60:	9c 83       	std	Y+4, r25	; 0x04
	}

	float angular_derivative = (theta_error-previous_theta_error)/TIMESTEP;
    1e62:	20 91 bb 01 	lds	r18, 0x01BB
    1e66:	30 91 bc 01 	lds	r19, 0x01BC
    1e6a:	40 91 bd 01 	lds	r20, 0x01BD
    1e6e:	50 91 be 01 	lds	r21, 0x01BE
    1e72:	69 81       	ldd	r22, Y+1	; 0x01
    1e74:	7a 81       	ldd	r23, Y+2	; 0x02
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
    1e7e:	2f e6       	ldi	r18, 0x6F	; 111
    1e80:	32 e1       	ldi	r19, 0x12	; 18
    1e82:	43 e8       	ldi	r20, 0x83	; 131
    1e84:	5a e3       	ldi	r21, 0x3A	; 58
    1e86:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__divsf3>
    1e8a:	6d 8b       	std	Y+21, r22	; 0x15
    1e8c:	7e 8b       	std	Y+22, r23	; 0x16
    1e8e:	8f 8b       	std	Y+23, r24	; 0x17
    1e90:	98 8f       	std	Y+24, r25	; 0x18
	float angular_output = theta_kp*theta_error - theta_kd*angular_derivative; //If output > 0, turn left
    1e92:	29 81       	ldd	r18, Y+1	; 0x01
    1e94:	3a 81       	ldd	r19, Y+2	; 0x02
    1e96:	4b 81       	ldd	r20, Y+3	; 0x03
    1e98:	5c 81       	ldd	r21, Y+4	; 0x04
    1e9a:	6b a5       	ldd	r22, Y+43	; 0x2b
    1e9c:	7c a5       	ldd	r23, Y+44	; 0x2c
    1e9e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ea0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ea2:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1ea6:	6b 01       	movw	r12, r22
    1ea8:	7c 01       	movw	r14, r24
    1eaa:	2d 89       	ldd	r18, Y+21	; 0x15
    1eac:	3e 89       	ldd	r19, Y+22	; 0x16
    1eae:	4f 89       	ldd	r20, Y+23	; 0x17
    1eb0:	58 8d       	ldd	r21, Y+24	; 0x18
    1eb2:	6f a5       	ldd	r22, Y+47	; 0x2f
    1eb4:	78 a9       	ldd	r23, Y+48	; 0x30
    1eb6:	89 a9       	ldd	r24, Y+49	; 0x31
    1eb8:	9a a9       	ldd	r25, Y+50	; 0x32
    1eba:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1ebe:	9b 01       	movw	r18, r22
    1ec0:	ac 01       	movw	r20, r24
    1ec2:	c7 01       	movw	r24, r14
    1ec4:	b6 01       	movw	r22, r12
    1ec6:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
	previous_theta_error = theta_error;
    1eca:	29 81       	ldd	r18, Y+1	; 0x01
    1ecc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ece:	4b 81       	ldd	r20, Y+3	; 0x03
    1ed0:	5c 81       	ldd	r21, Y+4	; 0x04
    1ed2:	20 93 bb 01 	sts	0x01BB, r18
    1ed6:	30 93 bc 01 	sts	0x01BC, r19
    1eda:	40 93 bd 01 	sts	0x01BD, r20
    1ede:	50 93 be 01 	sts	0x01BE, r21
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    1ee2:	2b ed       	ldi	r18, 0xDB	; 219
    1ee4:	3f e0       	ldi	r19, 0x0F	; 15
    1ee6:	49 e4       	ldi	r20, 0x49	; 73
    1ee8:	50 e4       	ldi	r21, 0x40	; 64
    1eea:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__divsf3>
    1eee:	6d 87       	std	Y+13, r22	; 0x0d
    1ef0:	7e 87       	std	Y+14, r23	; 0x0e
    1ef2:	8f 87       	std	Y+15, r24	; 0x0f
    1ef4:	98 8b       	std	Y+16, r25	; 0x10

	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    1ef6:	69 81       	ldd	r22, Y+1	; 0x01
    1ef8:	7a 81       	ldd	r23, Y+2	; 0x02
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	0e 94 37 1a 	call	0x346e	; 0x346e <cos>
    1f02:	2b 01       	movw	r4, r22
    1f04:	3c 01       	movw	r6, r24
    1f06:	29 85       	ldd	r18, Y+9	; 0x09
    1f08:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f0a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f0c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f0e:	ca 01       	movw	r24, r20
    1f10:	b9 01       	movw	r22, r18
    1f12:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1f16:	6b 01       	movw	r12, r22
    1f18:	7c 01       	movw	r14, r24
    1f1a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f1c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f1e:	4f 81       	ldd	r20, Y+7	; 0x07
    1f20:	58 85       	ldd	r21, Y+8	; 0x08
    1f22:	ca 01       	movw	r24, r20
    1f24:	b9 01       	movw	r22, r18
    1f26:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1f2a:	9b 01       	movw	r18, r22
    1f2c:	ac 01       	movw	r20, r24
    1f2e:	c7 01       	movw	r24, r14
    1f30:	b6 01       	movw	r22, r12
    1f32:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
    1f36:	0e 94 84 1c 	call	0x3908	; 0x3908 <sqrt>
    1f3a:	9b 01       	movw	r18, r22
    1f3c:	ac 01       	movw	r20, r24
    1f3e:	c3 01       	movw	r24, r6
    1f40:	b2 01       	movw	r22, r4
    1f42:	9f 77       	andi	r25, 0x7F	; 127
    1f44:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1f48:	6b 01       	movw	r12, r22
    1f4a:	7c 01       	movw	r14, r24
	if (has_puck()) {
    1f4c:	0e 94 90 17 	call	0x2f20	; 0x2f20 <has_puck>
    1f50:	88 23       	and	r24, r24
    1f52:	e1 f0       	breq	.+56     	; 0x1f8c <run_motor_control_loop+0x206>
		if (linear_error<0){
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	a9 01       	movw	r20, r18
    1f5a:	c7 01       	movw	r24, r14
    1f5c:	b6 01       	movw	r22, r12
    1f5e:	0e 94 32 1a 	call	0x3464	; 0x3464 <__cmpsf2>
    1f62:	88 23       	and	r24, r24
    1f64:	5c f0       	brlt	.+22     	; 0x1f7c <run_motor_control_loop+0x1f6>
			linear_error = 30;
		} else {
			linear_error += 30;
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 ef       	ldi	r20, 0xF0	; 240
    1f6c:	51 e4       	ldi	r21, 0x41	; 65
    1f6e:	c7 01       	movw	r24, r14
    1f70:	b6 01       	movw	r22, r12
    1f72:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
    1f76:	6b 01       	movw	r12, r22
    1f78:	7c 01       	movw	r14, r24
    1f7a:	08 c0       	rjmp	.+16     	; 0x1f8c <run_motor_control_loop+0x206>
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	if (has_puck()) {
		if (linear_error<0){
			linear_error = 30;
    1f7c:	0f 2e       	mov	r0, r31
    1f7e:	c1 2c       	mov	r12, r1
    1f80:	d1 2c       	mov	r13, r1
    1f82:	f0 ef       	ldi	r31, 0xF0	; 240
    1f84:	ef 2e       	mov	r14, r31
    1f86:	f1 e4       	ldi	r31, 0x41	; 65
    1f88:	ff 2e       	mov	r15, r31
    1f8a:	f0 2d       	mov	r31, r0
		} else {
			linear_error += 30;
		}
	}
	float linear_derivative = (linear_error-previous_linear_error)/TIMESTEP;
    1f8c:	20 91 b7 01 	lds	r18, 0x01B7
    1f90:	30 91 b8 01 	lds	r19, 0x01B8
    1f94:	40 91 b9 01 	lds	r20, 0x01B9
    1f98:	50 91 ba 01 	lds	r21, 0x01BA
    1f9c:	c7 01       	movw	r24, r14
    1f9e:	b6 01       	movw	r22, r12
    1fa0:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
    1fa4:	2f e6       	ldi	r18, 0x6F	; 111
    1fa6:	32 e1       	ldi	r19, 0x12	; 18
    1fa8:	43 e8       	ldi	r20, 0x83	; 131
    1faa:	5a e3       	ldi	r21, 0x3A	; 58
    1fac:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__divsf3>
    1fb0:	4b 01       	movw	r8, r22
    1fb2:	5c 01       	movw	r10, r24
	float linear_output = linear_kp*linear_error - linear_kd*linear_derivative;
    1fb4:	a7 01       	movw	r20, r14
    1fb6:	96 01       	movw	r18, r12
    1fb8:	6b a9       	ldd	r22, Y+51	; 0x33
    1fba:	7c a9       	ldd	r23, Y+52	; 0x34
    1fbc:	8d a9       	ldd	r24, Y+53	; 0x35
    1fbe:	9e a9       	ldd	r25, Y+54	; 0x36
    1fc0:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1fc4:	2b 01       	movw	r4, r22
    1fc6:	3c 01       	movw	r6, r24
    1fc8:	a5 01       	movw	r20, r10
    1fca:	94 01       	movw	r18, r8
    1fcc:	6f a9       	ldd	r22, Y+55	; 0x37
    1fce:	78 ad       	ldd	r23, Y+56	; 0x38
    1fd0:	89 ad       	ldd	r24, Y+57	; 0x39
    1fd2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fd4:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    1fd8:	9b 01       	movw	r18, r22
    1fda:	ac 01       	movw	r20, r24
    1fdc:	c3 01       	movw	r24, r6
    1fde:	b2 01       	movw	r22, r4
    1fe0:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
    1fe4:	2b 01       	movw	r4, r22
    1fe6:	3c 01       	movw	r6, r24
	previous_linear_error = linear_error;
    1fe8:	c0 92 b7 01 	sts	0x01B7, r12
    1fec:	d0 92 b8 01 	sts	0x01B8, r13
    1ff0:	e0 92 b9 01 	sts	0x01B9, r14
    1ff4:	f0 92 ba 01 	sts	0x01BA, r15
	if(linear_output>40.0){linear_output=40.0;}
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e2       	ldi	r20, 0x20	; 32
    1ffe:	52 e4       	ldi	r21, 0x42	; 66
    2000:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__gesf2>
    2004:	18 16       	cp	r1, r24
    2006:	44 f4       	brge	.+16     	; 0x2018 <run_motor_control_loop+0x292>
    2008:	0f 2e       	mov	r0, r31
    200a:	41 2c       	mov	r4, r1
    200c:	51 2c       	mov	r5, r1
    200e:	f0 e2       	ldi	r31, 0x20	; 32
    2010:	6f 2e       	mov	r6, r31
    2012:	f2 e4       	ldi	r31, 0x42	; 66
    2014:	7f 2e       	mov	r7, r31
    2016:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e2       	ldi	r20, 0x20	; 32
    201e:	52 e4       	ldi	r21, 0x42	; 66
    2020:	c3 01       	movw	r24, r6
    2022:	b2 01       	movw	r22, r4
    2024:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__divsf3>
    2028:	6b 01       	movw	r12, r22
    202a:	7c 01       	movw	r14, r24
	
	
	
	
	if (linear_derivative < 0.1 && angular_derivative < 0.01) {
    202c:	2d ec       	ldi	r18, 0xCD	; 205
    202e:	3c ec       	ldi	r19, 0xCC	; 204
    2030:	4c ec       	ldi	r20, 0xCC	; 204
    2032:	5d e3       	ldi	r21, 0x3D	; 61
    2034:	c5 01       	movw	r24, r10
    2036:	b4 01       	movw	r22, r8
    2038:	0e 94 32 1a 	call	0x3464	; 0x3464 <__cmpsf2>
    203c:	88 23       	and	r24, r24
    203e:	0c f5       	brge	.+66     	; 0x2082 <run_motor_control_loop+0x2fc>
    2040:	2a e0       	ldi	r18, 0x0A	; 10
    2042:	37 ed       	ldi	r19, 0xD7	; 215
    2044:	43 e2       	ldi	r20, 0x23	; 35
    2046:	5c e3       	ldi	r21, 0x3C	; 60
    2048:	6d 89       	ldd	r22, Y+21	; 0x15
    204a:	7e 89       	ldd	r23, Y+22	; 0x16
    204c:	8f 89       	ldd	r24, Y+23	; 0x17
    204e:	98 8d       	ldd	r25, Y+24	; 0x18
    2050:	0e 94 32 1a 	call	0x3464	; 0x3464 <__cmpsf2>
    2054:	88 23       	and	r24, r24
    2056:	ac f4       	brge	.+42     	; 0x2082 <run_motor_control_loop+0x2fc>
		angular_output = 0.2*fabs(theta_error)/theta_error;
    2058:	2d ec       	ldi	r18, 0xCD	; 205
    205a:	3c ec       	ldi	r19, 0xCC	; 204
    205c:	4c e4       	ldi	r20, 0x4C	; 76
    205e:	5e e3       	ldi	r21, 0x3E	; 62
    2060:	69 81       	ldd	r22, Y+1	; 0x01
    2062:	7a 81       	ldd	r23, Y+2	; 0x02
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	9f 77       	andi	r25, 0x7F	; 127
    206a:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    206e:	29 81       	ldd	r18, Y+1	; 0x01
    2070:	3a 81       	ldd	r19, Y+2	; 0x02
    2072:	4b 81       	ldd	r20, Y+3	; 0x03
    2074:	5c 81       	ldd	r21, Y+4	; 0x04
    2076:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__divsf3>
    207a:	6d 87       	std	Y+13, r22	; 0x0d
    207c:	7e 87       	std	Y+14, r23	; 0x0e
    207e:	8f 87       	std	Y+15, r24	; 0x0f
    2080:	98 8b       	std	Y+16, r25	; 0x10
	}
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    2082:	8d 84       	ldd	r8, Y+13	; 0x0d
    2084:	9e 84       	ldd	r9, Y+14	; 0x0e
    2086:	af 84       	ldd	r10, Y+15	; 0x0f
    2088:	b8 88       	ldd	r11, Y+16	; 0x10
    208a:	b7 fa       	bst	r11, 7
    208c:	b0 94       	com	r11
    208e:	b7 f8       	bld	r11, 7
    2090:	b0 94       	com	r11
	right_duty_cycle = angular_output;
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    2092:	69 81       	ldd	r22, Y+1	; 0x01
    2094:	7a 81       	ldd	r23, Y+2	; 0x02
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	9c 81       	ldd	r25, Y+4	; 0x04
    209a:	9f 77       	andi	r25, 0x7F	; 127
    209c:	2b ed       	ldi	r18, 0xDB	; 219
    209e:	3f e0       	ldi	r19, 0x0F	; 15
    20a0:	49 ec       	ldi	r20, 0xC9	; 201
    20a2:	5f e3       	ldi	r21, 0x3F	; 63
    20a4:	0e 94 32 1a 	call	0x3464	; 0x3464 <__cmpsf2>
    20a8:	88 23       	and	r24, r24
    20aa:	0c f5       	brge	.+66     	; 0x20ee <run_motor_control_loop+0x368>
		left_duty_cycle += linear_output;
    20ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    20ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    20b0:	4f 85       	ldd	r20, Y+15	; 0x0f
    20b2:	58 89       	ldd	r21, Y+16	; 0x10
    20b4:	c7 01       	movw	r24, r14
    20b6:	b6 01       	movw	r22, r12
    20b8:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
    20bc:	60 93 18 01 	sts	0x0118, r22
    20c0:	70 93 19 01 	sts	0x0119, r23
    20c4:	80 93 1a 01 	sts	0x011A, r24
    20c8:	90 93 1b 01 	sts	0x011B, r25
		right_duty_cycle += linear_output;
    20cc:	a7 01       	movw	r20, r14
    20ce:	96 01       	movw	r18, r12
    20d0:	6d 85       	ldd	r22, Y+13	; 0x0d
    20d2:	7e 85       	ldd	r23, Y+14	; 0x0e
    20d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d6:	98 89       	ldd	r25, Y+16	; 0x10
    20d8:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
    20dc:	60 93 14 01 	sts	0x0114, r22
    20e0:	70 93 15 01 	sts	0x0115, r23
    20e4:	80 93 16 01 	sts	0x0116, r24
    20e8:	90 93 17 01 	sts	0x0117, r25
    20ec:	1e c0       	rjmp	.+60     	; 0x212a <run_motor_control_loop+0x3a4>
		} else{
		left_duty_cycle -= linear_output;
    20ee:	a7 01       	movw	r20, r14
    20f0:	96 01       	movw	r18, r12
    20f2:	c5 01       	movw	r24, r10
    20f4:	b4 01       	movw	r22, r8
    20f6:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
    20fa:	60 93 18 01 	sts	0x0118, r22
    20fe:	70 93 19 01 	sts	0x0119, r23
    2102:	80 93 1a 01 	sts	0x011A, r24
    2106:	90 93 1b 01 	sts	0x011B, r25
		right_duty_cycle -= linear_output;
    210a:	a7 01       	movw	r20, r14
    210c:	96 01       	movw	r18, r12
    210e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2110:	7e 85       	ldd	r23, Y+14	; 0x0e
    2112:	8f 85       	ldd	r24, Y+15	; 0x0f
    2114:	98 89       	ldd	r25, Y+16	; 0x10
    2116:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__subsf3>
    211a:	60 93 14 01 	sts	0x0114, r22
    211e:	70 93 15 01 	sts	0x0115, r23
    2122:	80 93 16 01 	sts	0x0116, r24
    2126:	90 93 17 01 	sts	0x0117, r25
	
	//If it has the puck, don't let either of the motors spin backwards 

		
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	a9 01       	movw	r20, r18
    2130:	60 91 18 01 	lds	r22, 0x0118
    2134:	70 91 19 01 	lds	r23, 0x0119
    2138:	80 91 1a 01 	lds	r24, 0x011A
    213c:	90 91 1b 01 	lds	r25, 0x011B
    2140:	0e 94 32 1a 	call	0x3464	; 0x3464 <__cmpsf2>
    2144:	88 23       	and	r24, r24
    2146:	14 f4       	brge	.+4      	; 0x214c <run_motor_control_loop+0x3c6>
    2148:	29 98       	cbi	0x05, 1	; 5
    214a:	01 c0       	rjmp	.+2      	; 0x214e <run_motor_control_loop+0x3c8>
	else{set(PORTB,1);}
    214c:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	a9 01       	movw	r20, r18
    2154:	60 91 14 01 	lds	r22, 0x0114
    2158:	70 91 15 01 	lds	r23, 0x0115
    215c:	80 91 16 01 	lds	r24, 0x0116
    2160:	90 91 17 01 	lds	r25, 0x0117
    2164:	0e 94 32 1a 	call	0x3464	; 0x3464 <__cmpsf2>
    2168:	88 23       	and	r24, r24
    216a:	14 f4       	brge	.+4      	; 0x2170 <run_motor_control_loop+0x3ea>
    216c:	2b 98       	cbi	0x05, 3	; 5
    216e:	01 c0       	rjmp	.+2      	; 0x2172 <run_motor_control_loop+0x3ec>
	else{set(PORTB,3);}
    2170:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    2172:	80 90 18 01 	lds	r8, 0x0118
    2176:	90 90 19 01 	lds	r9, 0x0119
    217a:	a0 90 1a 01 	lds	r10, 0x011A
    217e:	b0 90 1b 01 	lds	r11, 0x011B
    2182:	e8 94       	clt
    2184:	b7 f8       	bld	r11, 7
    2186:	80 92 18 01 	sts	0x0118, r8
    218a:	90 92 19 01 	sts	0x0119, r9
    218e:	a0 92 1a 01 	sts	0x011A, r10
    2192:	b0 92 1b 01 	sts	0x011B, r11
	right_duty_cycle = fabs(right_duty_cycle);
    2196:	c0 90 14 01 	lds	r12, 0x0114
    219a:	d0 90 15 01 	lds	r13, 0x0115
    219e:	e0 90 16 01 	lds	r14, 0x0116
    21a2:	f0 90 17 01 	lds	r15, 0x0117
    21a6:	e8 94       	clt
    21a8:	f7 f8       	bld	r15, 7
    21aa:	c0 92 14 01 	sts	0x0114, r12
    21ae:	d0 92 15 01 	sts	0x0115, r13
    21b2:	e0 92 16 01 	sts	0x0116, r14
    21b6:	f0 92 17 01 	sts	0x0117, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    21ba:	a7 01       	movw	r20, r14
    21bc:	96 01       	movw	r18, r12
    21be:	c5 01       	movw	r24, r10
    21c0:	b4 01       	movw	r22, r8
    21c2:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__gesf2>
    21c6:	18 16       	cp	r1, r24
    21c8:	2c f0       	brlt	.+10     	; 0x21d4 <run_motor_control_loop+0x44e>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    21ca:	1c 2d       	mov	r17, r12
    21cc:	0d 2d       	mov	r16, r13
    21ce:	7e 2c       	mov	r7, r14
    21d0:	6f 2c       	mov	r6, r15
    21d2:	04 c0       	rjmp	.+8      	; 0x21dc <run_motor_control_loop+0x456>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    21d4:	18 2d       	mov	r17, r8
    21d6:	09 2d       	mov	r16, r9
    21d8:	7a 2c       	mov	r7, r10
    21da:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    21dc:	29 89       	ldd	r18, Y+17	; 0x11
    21de:	3a 89       	ldd	r19, Y+18	; 0x12
    21e0:	4b 89       	ldd	r20, Y+19	; 0x13
    21e2:	5c 89       	ldd	r21, Y+20	; 0x14
    21e4:	61 2f       	mov	r22, r17
    21e6:	70 2f       	mov	r23, r16
    21e8:	87 2d       	mov	r24, r7
    21ea:	96 2d       	mov	r25, r6
    21ec:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__gesf2>
    21f0:	18 16       	cp	r1, r24
    21f2:	64 f5       	brge	.+88     	; 0x224c <run_motor_control_loop+0x4c6>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    21f4:	21 2f       	mov	r18, r17
    21f6:	30 2f       	mov	r19, r16
    21f8:	47 2d       	mov	r20, r7
    21fa:	56 2d       	mov	r21, r6
    21fc:	c5 01       	movw	r24, r10
    21fe:	b4 01       	movw	r22, r8
    2200:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__divsf3>
    2204:	29 89       	ldd	r18, Y+17	; 0x11
    2206:	3a 89       	ldd	r19, Y+18	; 0x12
    2208:	4b 89       	ldd	r20, Y+19	; 0x13
    220a:	5c 89       	ldd	r21, Y+20	; 0x14
    220c:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    2210:	60 93 18 01 	sts	0x0118, r22
    2214:	70 93 19 01 	sts	0x0119, r23
    2218:	80 93 1a 01 	sts	0x011A, r24
    221c:	90 93 1b 01 	sts	0x011B, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    2220:	21 2f       	mov	r18, r17
    2222:	30 2f       	mov	r19, r16
    2224:	47 2d       	mov	r20, r7
    2226:	56 2d       	mov	r21, r6
    2228:	c7 01       	movw	r24, r14
    222a:	b6 01       	movw	r22, r12
    222c:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__divsf3>
    2230:	29 89       	ldd	r18, Y+17	; 0x11
    2232:	3a 89       	ldd	r19, Y+18	; 0x12
    2234:	4b 89       	ldd	r20, Y+19	; 0x13
    2236:	5c 89       	ldd	r21, Y+20	; 0x14
    2238:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    223c:	60 93 14 01 	sts	0x0114, r22
    2240:	70 93 15 01 	sts	0x0115, r23
    2244:	80 93 16 01 	sts	0x0116, r24
    2248:	90 93 17 01 	sts	0x0117, r25
	}
	


	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    224c:	08 e8       	ldi	r16, 0x88	; 136
    224e:	10 e0       	ldi	r17, 0x00	; 0
    2250:	f8 01       	movw	r30, r16
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__floatunsisf>
    225e:	20 91 18 01 	lds	r18, 0x0118
    2262:	30 91 19 01 	lds	r19, 0x0119
    2266:	40 91 1a 01 	lds	r20, 0x011A
    226a:	50 91 1b 01 	lds	r21, 0x011B
    226e:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    2272:	0e 94 b5 1a 	call	0x356a	; 0x356a <__fixunssfsi>
    2276:	70 93 8b 00 	sts	0x008B, r23
    227a:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    227e:	f8 01       	movw	r30, r16
    2280:	60 81       	ld	r22, Z
    2282:	71 81       	ldd	r23, Z+1	; 0x01
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__floatunsisf>
    228c:	20 91 14 01 	lds	r18, 0x0114
    2290:	30 91 15 01 	lds	r19, 0x0115
    2294:	40 91 16 01 	lds	r20, 0x0116
    2298:	50 91 17 01 	lds	r21, 0x0117
    229c:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    22a0:	0e 94 b5 1a 	call	0x356a	; 0x356a <__fixunssfsi>
    22a4:	70 93 8d 00 	sts	0x008D, r23
    22a8:	60 93 8c 00 	sts	0x008C, r22

}
    22ac:	68 96       	adiw	r28, 0x18	; 24
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	1f 91       	pop	r17
    22be:	0f 91       	pop	r16
    22c0:	ff 90       	pop	r15
    22c2:	ef 90       	pop	r14
    22c4:	df 90       	pop	r13
    22c6:	cf 90       	pop	r12
    22c8:	bf 90       	pop	r11
    22ca:	af 90       	pop	r10
    22cc:	9f 90       	pop	r9
    22ce:	8f 90       	pop	r8
    22d0:	7f 90       	pop	r7
    22d2:	6f 90       	pop	r6
    22d4:	5f 90       	pop	r5
    22d6:	4f 90       	pop	r4
    22d8:	08 95       	ret

000022da <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    22da:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    22dc:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    22de:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    22e0:	8c e0       	ldi	r24, 0x0C	; 12
    22e2:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    22e6:	e9 e6       	ldi	r30, 0x69	; 105
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	80 62       	ori	r24, 0x20	; 32
    22ee:	80 83       	st	Z, r24
    22f0:	80 81       	ld	r24, Z
    22f2:	8f 7e       	andi	r24, 0xEF	; 239
    22f4:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    22f6:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    22f8:	78 94       	sei
    22fa:	08 95       	ret

000022fc <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    22fc:	1f 93       	push	r17
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	18 2f       	mov	r17, r24
    2304:	d6 2f       	mov	r29, r22
    2306:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    2308:	0e 94 6d 11 	call	0x22da	; 0x22da <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    230c:	94 ea       	ldi	r25, 0xA4	; 164
    230e:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2312:	ec eb       	ldi	r30, 0xBC	; 188
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	90 81       	ld	r25, Z
    2318:	99 23       	and	r25, r25
    231a:	ec f7       	brge	.-6      	; 0x2316 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    231c:	90 e5       	ldi	r25, 0x50	; 80
    231e:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2322:	94 e8       	ldi	r25, 0x84	; 132
    2324:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2328:	ec eb       	ldi	r30, 0xBC	; 188
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	90 81       	ld	r25, Z
    232e:	99 23       	and	r25, r25
    2330:	ec f7       	brge	.-6      	; 0x232c <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2332:	90 91 b9 00 	lds	r25, 0x00B9
    2336:	98 7f       	andi	r25, 0xF8	; 248
    2338:	90 32       	cpi	r25, 0x20	; 32
    233a:	29 f4       	brne	.+10     	; 0x2346 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    233c:	84 e9       	ldi	r24, 0x94	; 148
    233e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	2d c0       	rjmp	.+90     	; 0x23a0 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    234c:	84 e8       	ldi	r24, 0x84	; 132
    234e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2352:	ec eb       	ldi	r30, 0xBC	; 188
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	90 81       	ld	r25, Z
    2358:	99 23       	and	r25, r25
    235a:	ec f7       	brge	.-6      	; 0x2356 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    235c:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    2360:	84 e8       	ldi	r24, 0x84	; 132
    2362:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2366:	ec eb       	ldi	r30, 0xBC	; 188
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	88 23       	and	r24, r24
    236e:	ec f7       	brge	.-6      	; 0x236a <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    2370:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    2374:	84 e8       	ldi	r24, 0x84	; 132
    2376:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    237a:	ec eb       	ldi	r30, 0xBC	; 188
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	88 23       	and	r24, r24
    2382:	ec f7       	brge	.-6      	; 0x237e <m_rf_open+0x82>
	
	TWDR = packet_length;
    2384:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    2388:	84 e8       	ldi	r24, 0x84	; 132
    238a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    238e:	ec eb       	ldi	r30, 0xBC	; 188
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	88 23       	and	r24, r24
    2396:	ec f7       	brge	.-6      	; 0x2392 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2398:	84 e9       	ldi	r24, 0x94	; 148
    239a:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    239e:	81 e0       	ldi	r24, 0x01	; 1
}
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	08 95       	ret

000023a8 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    23a8:	cf 93       	push	r28
    23aa:	df 93       	push	r29
    23ac:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    23ae:	84 ea       	ldi	r24, 0xA4	; 164
    23b0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    23b4:	ec eb       	ldi	r30, 0xBC	; 188
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	90 81       	ld	r25, Z
    23ba:	99 23       	and	r25, r25
    23bc:	ec f7       	brge	.-6      	; 0x23b8 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    23be:	81 e5       	ldi	r24, 0x51	; 81
    23c0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    23c4:	84 e8       	ldi	r24, 0x84	; 132
    23c6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    23ca:	ec eb       	ldi	r30, 0xBC	; 188
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	90 81       	ld	r25, Z
    23d0:	99 23       	and	r25, r25
    23d2:	ec f7       	brge	.-6      	; 0x23ce <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    23d4:	80 91 b9 00 	lds	r24, 0x00B9
    23d8:	88 7f       	andi	r24, 0xF8	; 248
    23da:	88 34       	cpi	r24, 0x48	; 72
    23dc:	29 f4       	brne	.+10     	; 0x23e8 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    23de:	84 e9       	ldi	r24, 0x94	; 148
    23e0:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	41 c0       	rjmp	.+130    	; 0x246a <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    23e8:	84 ec       	ldi	r24, 0xC4	; 196
    23ea:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    23ee:	ec eb       	ldi	r30, 0xBC	; 188
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	90 81       	ld	r25, Z
    23f4:	99 23       	and	r25, r25
    23f6:	ec f7       	brge	.-6      	; 0x23f2 <m_rf_read+0x4a>
	bytes = TWDR;
    23f8:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    23fc:	46 13       	cpse	r20, r22
    23fe:	09 c0       	rjmp	.+18     	; 0x2412 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2400:	84 2f       	mov	r24, r20
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	18 16       	cp	r1, r24
    2408:	19 06       	cpc	r1, r25
    240a:	44 f0       	brlt	.+16     	; 0x241c <m_rf_read+0x74>
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	1a c0       	rjmp	.+52     	; 0x2446 <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2412:	84 e9       	ldi	r24, 0x94	; 148
    2414:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	27 c0       	rjmp	.+78     	; 0x246a <m_rf_read+0xc2>
    241c:	d9 01       	movw	r26, r18
    241e:	50 e0       	ldi	r21, 0x00	; 0
    2420:	41 50       	subi	r20, 0x01	; 1
    2422:	51 09       	sbc	r21, r1
    2424:	b9 01       	movw	r22, r18
    2426:	64 0f       	add	r22, r20
    2428:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    242a:	ec eb       	ldi	r30, 0xBC	; 188
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    2430:	cb eb       	ldi	r28, 0xBB	; 187
    2432:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2434:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2436:	90 81       	ld	r25, Z
    2438:	99 23       	and	r25, r25
    243a:	ec f7       	brge	.-6      	; 0x2436 <m_rf_read+0x8e>
		buffer[i] = TWDR;
    243c:	98 81       	ld	r25, Y
    243e:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2440:	a6 17       	cp	r26, r22
    2442:	b7 07       	cpc	r27, r23
    2444:	b9 f7       	brne	.-18     	; 0x2434 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2446:	84 e8       	ldi	r24, 0x84	; 132
    2448:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    244c:	ec eb       	ldi	r30, 0xBC	; 188
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	90 81       	ld	r25, Z
    2452:	99 23       	and	r25, r25
    2454:	ec f7       	brge	.-6      	; 0x2450 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
    2456:	80 91 bb 00 	lds	r24, 0x00BB
    245a:	f9 01       	movw	r30, r18
    245c:	e4 0f       	add	r30, r20
    245e:	f5 1f       	adc	r31, r21
    2460:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2462:	84 e9       	ldi	r24, 0x94	; 148
    2464:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    2468:	81 e0       	ldi	r24, 0x01	; 1
}
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	08 95       	ret

00002470 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    2476:	80 ea       	ldi	r24, 0xA0	; 160
    2478:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    247c:	82 e1       	ldi	r24, 0x12	; 18
    247e:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    2480:	09 b4       	in	r0, 0x29	; 41
    2482:	00 fe       	sbrs	r0, 0
    2484:	fd cf       	rjmp	.-6      	; 0x2480 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    2486:	80 e9       	ldi	r24, 0x90	; 144
    2488:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    248c:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    2490:	10 92 ce 01 	sts	0x01CE, r1
	cdc_line_rtsdtr = 0;
    2494:	10 92 cb 01 	sts	0x01CB, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    2498:	8c e0       	ldi	r24, 0x0C	; 12
    249a:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    249e:	78 94       	sei
    24a0:	08 95       	ret

000024a2 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    24a2:	cf 93       	push	r28
    24a4:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    24a6:	90 91 ce 01 	lds	r25, 0x01CE
    24aa:	99 23       	and	r25, r25
    24ac:	09 f4       	brne	.+2      	; 0x24b0 <m_usb_tx_char+0xe>
    24ae:	4c c0       	rjmp	.+152    	; 0x2548 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    24b0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    24b2:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    24b4:	24 e0       	ldi	r18, 0x04	; 4
    24b6:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    24ba:	20 91 cc 01 	lds	r18, 0x01CC
    24be:	22 23       	and	r18, r18
    24c0:	49 f0       	breq	.+18     	; 0x24d4 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    24c2:	20 91 e8 00 	lds	r18, 0x00E8
    24c6:	25 fd       	sbrc	r18, 5
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    24ca:	9f bf       	out	0x3f, r25	; 63
			return -1;
    24cc:	8f ef       	ldi	r24, 0xFF	; 255
    24ce:	41 c0       	rjmp	.+130    	; 0x2552 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    24d0:	10 92 cc 01 	sts	0x01CC, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    24d4:	30 91 e4 00 	lds	r19, 0x00E4
    24d8:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    24da:	20 91 e8 00 	lds	r18, 0x00E8
    24de:	25 fd       	sbrc	r18, 5
    24e0:	24 c0       	rjmp	.+72     	; 0x252a <m_usb_tx_char+0x88>
		SREG = intr_state;
    24e2:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    24e4:	90 91 e4 00 	lds	r25, 0x00E4
    24e8:	93 17       	cp	r25, r19
    24ea:	81 f0       	breq	.+32     	; 0x250c <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    24ec:	90 91 ce 01 	lds	r25, 0x01CE
    24f0:	99 23       	and	r25, r25
    24f2:	61 f1       	breq	.+88     	; 0x254c <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    24f4:	a9 ee       	ldi	r26, 0xE9	; 233
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    24fa:	e8 ee       	ldi	r30, 0xE8	; 232
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    24fe:	c4 ee       	ldi	r28, 0xE4	; 228
    2500:	d0 e0       	ldi	r29, 0x00	; 0
    2502:	0d c0       	rjmp	.+26     	; 0x251e <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    2504:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2506:	98 81       	ld	r25, Y
    2508:	93 13       	cpse	r25, r19
    250a:	05 c0       	rjmp	.+10     	; 0x2516 <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	80 93 cc 01 	sts	0x01CC, r24
			return -1;
    2512:	8f ef       	ldi	r24, 0xFF	; 255
    2514:	1e c0       	rjmp	.+60     	; 0x2552 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2516:	90 91 ce 01 	lds	r25, 0x01CE
    251a:	99 23       	and	r25, r25
    251c:	c9 f0       	breq	.+50     	; 0x2550 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    251e:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2520:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    2522:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2524:	20 81       	ld	r18, Z
    2526:	25 ff       	sbrs	r18, 5
    2528:	ed cf       	rjmp	.-38     	; 0x2504 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    252a:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    252e:	80 91 e8 00 	lds	r24, 0x00E8
    2532:	85 fd       	sbrc	r24, 5
    2534:	03 c0       	rjmp	.+6      	; 0x253c <m_usb_tx_char+0x9a>
    2536:	8a e3       	ldi	r24, 0x3A	; 58
    2538:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    253c:	85 e0       	ldi	r24, 0x05	; 5
    253e:	80 93 cd 01 	sts	0x01CD, r24
	SREG = intr_state;
    2542:	9f bf       	out	0x3f, r25	; 63
	return 0;
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	05 c0       	rjmp	.+10     	; 0x2552 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    2548:	8f ef       	ldi	r24, 0xFF	; 255
    254a:	03 c0       	rjmp	.+6      	; 0x2552 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    254c:	8f ef       	ldi	r24, 0xFF	; 255
    254e:	01 c0       	rjmp	.+2      	; 0x2552 <m_usb_tx_char+0xb0>
    2550:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	08 95       	ret

00002558 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    2558:	1f 92       	push	r1
    255a:	0f 92       	push	r0
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	0f 92       	push	r0
    2560:	11 24       	eor	r1, r1
    2562:	8f 93       	push	r24
    2564:	9f 93       	push	r25
    2566:	ef 93       	push	r30
    2568:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    256a:	e1 ee       	ldi	r30, 0xE1	; 225
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
        UDINT = 0;
    2570:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    2572:	83 ff       	sbrs	r24, 3
    2574:	11 c0       	rjmp	.+34     	; 0x2598 <__vector_10+0x40>
		UENUM = 0;
    2576:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    257a:	91 e0       	ldi	r25, 0x01	; 1
    257c:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    2580:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2584:	92 e1       	ldi	r25, 0x12	; 18
    2586:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    258a:	98 e0       	ldi	r25, 0x08	; 8
    258c:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    2590:	10 92 ce 01 	sts	0x01CE, r1
		cdc_line_rtsdtr = 0;
    2594:	10 92 cb 01 	sts	0x01CB, r1
        }
	if (intbits & (1<<SOFI)) {
    2598:	82 ff       	sbrs	r24, 2
    259a:	13 c0       	rjmp	.+38     	; 0x25c2 <__vector_10+0x6a>
		if (usb_configuration) {
    259c:	80 91 ce 01 	lds	r24, 0x01CE
    25a0:	88 23       	and	r24, r24
    25a2:	79 f0       	breq	.+30     	; 0x25c2 <__vector_10+0x6a>
			t = transmit_flush_timer;
    25a4:	80 91 cd 01 	lds	r24, 0x01CD
			if (t) {
    25a8:	88 23       	and	r24, r24
    25aa:	59 f0       	breq	.+22     	; 0x25c2 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    25ac:	81 50       	subi	r24, 0x01	; 1
    25ae:	80 93 cd 01 	sts	0x01CD, r24
				if (!t) {
    25b2:	81 11       	cpse	r24, r1
    25b4:	06 c0       	rjmp	.+12     	; 0x25c2 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    25b6:	84 e0       	ldi	r24, 0x04	; 4
    25b8:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    25bc:	8a e3       	ldi	r24, 0x3A	; 58
    25be:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    25c2:	ff 91       	pop	r31
    25c4:	ef 91       	pop	r30
    25c6:	9f 91       	pop	r25
    25c8:	8f 91       	pop	r24
    25ca:	0f 90       	pop	r0
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	0f 90       	pop	r0
    25d0:	1f 90       	pop	r1
    25d2:	18 95       	reti

000025d4 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    25d4:	1f 92       	push	r1
    25d6:	0f 92       	push	r0
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	0f 92       	push	r0
    25dc:	11 24       	eor	r1, r1
    25de:	0f 93       	push	r16
    25e0:	1f 93       	push	r17
    25e2:	2f 93       	push	r18
    25e4:	3f 93       	push	r19
    25e6:	4f 93       	push	r20
    25e8:	5f 93       	push	r21
    25ea:	6f 93       	push	r22
    25ec:	7f 93       	push	r23
    25ee:	8f 93       	push	r24
    25f0:	9f 93       	push	r25
    25f2:	af 93       	push	r26
    25f4:	bf 93       	push	r27
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29
    25fa:	ef 93       	push	r30
    25fc:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    25fe:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    2602:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    2606:	83 ff       	sbrs	r24, 3
    2608:	4c c1       	rjmp	.+664    	; 0x28a2 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    260a:	e1 ef       	ldi	r30, 0xF1	; 241
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    2610:	80 81       	ld	r24, Z
                wValue = UEDATX;
    2612:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    2614:	90 81       	ld	r25, Z
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    261a:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    261c:	90 81       	ld	r25, Z
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	59 2b       	or	r21, r25
                wLength = UEDATX;
    2622:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    2624:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    2626:	92 ef       	ldi	r25, 0xF2	; 242
    2628:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    262c:	86 30       	cpi	r24, 0x06	; 6
    262e:	09 f0       	breq	.+2      	; 0x2632 <__vector_11+0x5e>
    2630:	58 c0       	rjmp	.+176    	; 0x26e2 <__vector_11+0x10e>
    2632:	04 c0       	rjmp	.+8      	; 0x263c <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    2634:	81 e2       	ldi	r24, 0x21	; 33
    2636:	80 93 eb 00 	sts	0x00EB, r24
					return;
    263a:	3a c1       	rjmp	.+628    	; 0x28b0 <__vector_11+0x2dc>
    263c:	66 e0       	ldi	r22, 0x06	; 6
    263e:	80 e2       	ldi	r24, 0x20	; 32
    2640:	91 e0       	ldi	r25, 0x01	; 1
				}
				desc_val = pgm_read_word(list);
    2642:	fc 01       	movw	r30, r24
    2644:	a5 91       	lpm	r26, Z+
    2646:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    2648:	2a 17       	cp	r18, r26
    264a:	3b 07       	cpc	r19, r27
    264c:	11 f0       	breq	.+4      	; 0x2652 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    264e:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2650:	23 c0       	rjmp	.+70     	; 0x2698 <__vector_11+0xc4>
				}
				list += 2;
    2652:	fc 01       	movw	r30, r24
    2654:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    2656:	a5 91       	lpm	r26, Z+
    2658:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    265a:	4a 17       	cp	r20, r26
    265c:	5b 07       	cpc	r21, r27
    265e:	11 f0       	breq	.+4      	; 0x2664 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    2660:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2662:	1a c0       	rjmp	.+52     	; 0x2698 <__vector_11+0xc4>
				}
				list += 2;
    2664:	fc 01       	movw	r30, r24
    2666:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2668:	45 91       	lpm	r20, Z+
    266a:	54 91       	lpm	r21, Z
				list += 2;
    266c:	fc 01       	movw	r30, r24
    266e:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2670:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    2672:	87 2f       	mov	r24, r23
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2678:	8f 3f       	cpi	r24, 0xFF	; 255
    267a:	91 05       	cpc	r25, r1
    267c:	19 f0       	breq	.+6      	; 0x2684 <__vector_11+0xb0>
    267e:	10 f0       	brcs	.+4      	; 0x2684 <__vector_11+0xb0>
    2680:	8f ef       	ldi	r24, 0xFF	; 255
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	82 17       	cp	r24, r18
    2686:	08 f4       	brcc	.+2      	; 0x268a <__vector_11+0xb6>
    2688:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    268a:	a8 ee       	ldi	r26, 0xE8	; 232
    268c:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    268e:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2690:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2692:	c1 ef       	ldi	r28, 0xF1	; 241
    2694:	d0 e0       	ldi	r29, 0x00	; 0
    2696:	03 c0       	rjmp	.+6      	; 0x269e <__vector_11+0xca>
    2698:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    269a:	99 f6       	brne	.-90     	; 0x2642 <__vector_11+0x6e>
    269c:	cb cf       	rjmp	.-106    	; 0x2634 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    269e:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    26a0:	98 2f       	mov	r25, r24
    26a2:	95 70       	andi	r25, 0x05	; 5
    26a4:	e1 f3       	breq	.-8      	; 0x269e <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    26a6:	82 fd       	sbrc	r24, 2
    26a8:	03 c1       	rjmp	.+518    	; 0x28b0 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    26aa:	32 2f       	mov	r19, r18
    26ac:	21 31       	cpi	r18, 0x11	; 17
    26ae:	08 f0       	brcs	.+2      	; 0x26b2 <__vector_11+0xde>
    26b0:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    26b2:	33 23       	and	r19, r19
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <__vector_11+0xe4>
    26b6:	f9 c0       	rjmp	.+498    	; 0x28aa <__vector_11+0x2d6>
    26b8:	fa 01       	movw	r30, r20
    26ba:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    26bc:	94 91       	lpm	r25, Z
    26be:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    26c0:	81 50       	subi	r24, 0x01	; 1
    26c2:	31 96       	adiw	r30, 0x01	; 1
    26c4:	81 11       	cpse	r24, r1
    26c6:	fa cf       	rjmp	.-12     	; 0x26bc <__vector_11+0xe8>
    26c8:	8f ef       	ldi	r24, 0xFF	; 255
    26ca:	83 0f       	add	r24, r19
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	48 0f       	add	r20, r24
    26d2:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    26d4:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    26d6:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    26d8:	21 11       	cpse	r18, r1
    26da:	e1 cf       	rjmp	.-62     	; 0x269e <__vector_11+0xca>
    26dc:	30 31       	cpi	r19, 0x10	; 16
    26de:	f9 f2       	breq	.-66     	; 0x269e <__vector_11+0xca>
    26e0:	e7 c0       	rjmp	.+462    	; 0x28b0 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    26e2:	85 30       	cpi	r24, 0x05	; 5
    26e4:	61 f4       	brne	.+24     	; 0x26fe <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    26e6:	8e ef       	ldi	r24, 0xFE	; 254
    26e8:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    26ec:	e8 ee       	ldi	r30, 0xE8	; 232
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	80 ff       	sbrs	r24, 0
    26f4:	fd cf       	rjmp	.-6      	; 0x26f0 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    26f6:	20 68       	ori	r18, 0x80	; 128
    26f8:	20 93 e3 00 	sts	0x00E3, r18
			return;
    26fc:	d9 c0       	rjmp	.+434    	; 0x28b0 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    26fe:	89 30       	cpi	r24, 0x09	; 9
    2700:	09 f0       	breq	.+2      	; 0x2704 <__vector_11+0x130>
    2702:	35 c0       	rjmp	.+106    	; 0x276e <__vector_11+0x19a>
    2704:	61 11       	cpse	r22, r1
    2706:	cd c0       	rjmp	.+410    	; 0x28a2 <__vector_11+0x2ce>
			usb_configuration = wValue;
    2708:	20 93 ce 01 	sts	0x01CE, r18
			cdc_line_rtsdtr = 0;
    270c:	10 92 cb 01 	sts	0x01CB, r1
			transmit_flush_timer = 0;
    2710:	10 92 cd 01 	sts	0x01CD, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2714:	8e ef       	ldi	r24, 0xFE	; 254
    2716:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    271a:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    271c:	29 ec       	ldi	r18, 0xC9	; 201
    271e:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    2720:	c9 ee       	ldi	r28, 0xE9	; 233
    2722:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    2724:	ab ee       	ldi	r26, 0xEB	; 235
    2726:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    2728:	0c ee       	ldi	r16, 0xEC	; 236
    272a:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    272c:	6d ee       	ldi	r22, 0xED	; 237
    272e:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    2730:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    2732:	a9 01       	movw	r20, r18
    2734:	4f 5f       	subi	r20, 0xFF	; 255
    2736:	5f 4f       	sbci	r21, 0xFF	; 255
    2738:	f9 01       	movw	r30, r18
    273a:	94 91       	lpm	r25, Z
				UECONX = en;
    273c:	9c 93       	st	X, r25
				if (en) {
    273e:	99 23       	and	r25, r25
    2740:	61 f0       	breq	.+24     	; 0x275a <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    2742:	fa 01       	movw	r30, r20
    2744:	44 91       	lpm	r20, Z
    2746:	f8 01       	movw	r30, r16
    2748:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    274a:	f9 01       	movw	r30, r18
    274c:	32 96       	adiw	r30, 0x02	; 2
    274e:	94 91       	lpm	r25, Z
    2750:	2d 5f       	subi	r18, 0xFD	; 253
    2752:	3f 4f       	sbci	r19, 0xFF	; 255
    2754:	fb 01       	movw	r30, r22
    2756:	90 83       	st	Z, r25
    2758:	01 c0       	rjmp	.+2      	; 0x275c <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    275a:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    275c:	8f 5f       	subi	r24, 0xFF	; 255
    275e:	85 30       	cpi	r24, 0x05	; 5
    2760:	39 f7       	brne	.-50     	; 0x2730 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    2762:	ea ee       	ldi	r30, 0xEA	; 234
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	8e e1       	ldi	r24, 0x1E	; 30
    2768:	80 83       	st	Z, r24
        		UERST = 0;
    276a:	10 82       	st	Z, r1
			return;
    276c:	a1 c0       	rjmp	.+322    	; 0x28b0 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    276e:	88 30       	cpi	r24, 0x08	; 8
    2770:	81 f4       	brne	.+32     	; 0x2792 <__vector_11+0x1be>
    2772:	60 38       	cpi	r22, 0x80	; 128
    2774:	09 f0       	breq	.+2      	; 0x2778 <__vector_11+0x1a4>
    2776:	95 c0       	rjmp	.+298    	; 0x28a2 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2778:	e8 ee       	ldi	r30, 0xE8	; 232
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	80 ff       	sbrs	r24, 0
    2780:	fd cf       	rjmp	.-6      	; 0x277c <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    2782:	80 91 ce 01 	lds	r24, 0x01CE
    2786:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    278a:	8e ef       	ldi	r24, 0xFE	; 254
    278c:	80 93 e8 00 	sts	0x00E8, r24
    2790:	8f c0       	rjmp	.+286    	; 0x28b0 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    2792:	81 32       	cpi	r24, 0x21	; 33
    2794:	b9 f4       	brne	.+46     	; 0x27c4 <__vector_11+0x1f0>
    2796:	61 3a       	cpi	r22, 0xA1	; 161
    2798:	09 f0       	breq	.+2      	; 0x279c <__vector_11+0x1c8>
    279a:	83 c0       	rjmp	.+262    	; 0x28a2 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    279c:	e8 ee       	ldi	r30, 0xE8	; 232
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	80 ff       	sbrs	r24, 0
    27a4:	fd cf       	rjmp	.-6      	; 0x27a0 <__vector_11+0x1cc>
    27a6:	e8 e2       	ldi	r30, 0x28	; 40
    27a8:	f1 e0       	ldi	r31, 0x01	; 1
    27aa:	2f e2       	ldi	r18, 0x2F	; 47
    27ac:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    27ae:	a1 ef       	ldi	r26, 0xF1	; 241
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	81 91       	ld	r24, Z+
    27b4:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    27b6:	e2 17       	cp	r30, r18
    27b8:	f3 07       	cpc	r31, r19
    27ba:	d9 f7       	brne	.-10     	; 0x27b2 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    27bc:	8e ef       	ldi	r24, 0xFE	; 254
    27be:	80 93 e8 00 	sts	0x00E8, r24
    27c2:	76 c0       	rjmp	.+236    	; 0x28b0 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    27c4:	80 32       	cpi	r24, 0x20	; 32
    27c6:	d1 f4       	brne	.+52     	; 0x27fc <__vector_11+0x228>
    27c8:	61 32       	cpi	r22, 0x21	; 33
    27ca:	09 f0       	breq	.+2      	; 0x27ce <__vector_11+0x1fa>
    27cc:	6a c0       	rjmp	.+212    	; 0x28a2 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    27ce:	e8 ee       	ldi	r30, 0xE8	; 232
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	82 ff       	sbrs	r24, 2
    27d6:	fd cf       	rjmp	.-6      	; 0x27d2 <__vector_11+0x1fe>
    27d8:	e8 e2       	ldi	r30, 0x28	; 40
    27da:	f1 e0       	ldi	r31, 0x01	; 1
    27dc:	2f e2       	ldi	r18, 0x2F	; 47
    27de:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    27e0:	a1 ef       	ldi	r26, 0xF1	; 241
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	8c 91       	ld	r24, X
    27e6:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    27e8:	e2 17       	cp	r30, r18
    27ea:	f3 07       	cpc	r31, r19
    27ec:	d9 f7       	brne	.-10     	; 0x27e4 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    27ee:	e8 ee       	ldi	r30, 0xE8	; 232
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	8b ef       	ldi	r24, 0xFB	; 251
    27f4:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    27f6:	8e ef       	ldi	r24, 0xFE	; 254
    27f8:	80 83       	st	Z, r24
    27fa:	5a c0       	rjmp	.+180    	; 0x28b0 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    27fc:	82 32       	cpi	r24, 0x22	; 34
    27fe:	71 f4       	brne	.+28     	; 0x281c <__vector_11+0x248>
    2800:	61 32       	cpi	r22, 0x21	; 33
    2802:	09 f0       	breq	.+2      	; 0x2806 <__vector_11+0x232>
    2804:	4e c0       	rjmp	.+156    	; 0x28a2 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    2806:	20 93 cb 01 	sts	0x01CB, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    280a:	e8 ee       	ldi	r30, 0xE8	; 232
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	80 ff       	sbrs	r24, 0
    2812:	fd cf       	rjmp	.-6      	; 0x280e <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2814:	8e ef       	ldi	r24, 0xFE	; 254
    2816:	80 93 e8 00 	sts	0x00E8, r24
    281a:	4a c0       	rjmp	.+148    	; 0x28b0 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    281c:	81 11       	cpse	r24, r1
    281e:	1a c0       	rjmp	.+52     	; 0x2854 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2820:	e8 ee       	ldi	r30, 0xE8	; 232
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	80 ff       	sbrs	r24, 0
    2828:	fd cf       	rjmp	.-6      	; 0x2824 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    282a:	62 38       	cpi	r22, 0x82	; 130
    282c:	51 f4       	brne	.+20     	; 0x2842 <__vector_11+0x26e>
				UENUM = wIndex;
    282e:	e9 ee       	ldi	r30, 0xE9	; 233
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    2834:	80 91 eb 00 	lds	r24, 0x00EB
    2838:	85 fb       	bst	r24, 5
    283a:	88 27       	eor	r24, r24
    283c:	80 f9       	bld	r24, 0
				UENUM = 0;
    283e:	10 82       	st	Z, r1
    2840:	01 c0       	rjmp	.+2      	; 0x2844 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    2842:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    2844:	e1 ef       	ldi	r30, 0xF1	; 241
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 83       	st	Z, r24
			UEDATX = 0;
    284a:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    284c:	8e ef       	ldi	r24, 0xFE	; 254
    284e:	80 93 e8 00 	sts	0x00E8, r24
    2852:	2e c0       	rjmp	.+92     	; 0x28b0 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    2854:	98 2f       	mov	r25, r24
    2856:	9d 7f       	andi	r25, 0xFD	; 253
    2858:	91 30       	cpi	r25, 0x01	; 1
    285a:	19 f5       	brne	.+70     	; 0x28a2 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    285c:	62 30       	cpi	r22, 0x02	; 2
    285e:	09 f5       	brne	.+66     	; 0x28a2 <__vector_11+0x2ce>
    2860:	23 2b       	or	r18, r19
    2862:	f9 f4       	brne	.+62     	; 0x28a2 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    2864:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    2866:	9f ef       	ldi	r25, 0xFF	; 255
    2868:	94 0f       	add	r25, r20
    286a:	94 30       	cpi	r25, 0x04	; 4
    286c:	d0 f4       	brcc	.+52     	; 0x28a2 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    286e:	9e ef       	ldi	r25, 0xFE	; 254
    2870:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    2874:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    2878:	83 30       	cpi	r24, 0x03	; 3
    287a:	21 f4       	brne	.+8      	; 0x2884 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    287c:	81 e2       	ldi	r24, 0x21	; 33
    287e:	80 93 eb 00 	sts	0x00EB, r24
    2882:	16 c0       	rjmp	.+44     	; 0x28b0 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    2884:	89 e1       	ldi	r24, 0x19	; 25
    2886:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <__vector_11+0x2c0>
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	4a 95       	dec	r20
    2896:	e2 f7       	brpl	.-8      	; 0x2890 <__vector_11+0x2bc>
    2898:	ea ee       	ldi	r30, 0xEA	; 234
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 83       	st	Z, r24
					UERST = 0;
    289e:	10 82       	st	Z, r1
    28a0:	07 c0       	rjmp	.+14     	; 0x28b0 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    28a2:	81 e2       	ldi	r24, 0x21	; 33
    28a4:	80 93 eb 00 	sts	0x00EB, r24
    28a8:	03 c0       	rjmp	.+6      	; 0x28b0 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    28aa:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    28ac:	21 11       	cpse	r18, r1
    28ae:	f7 ce       	rjmp	.-530    	; 0x269e <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    28b0:	ff 91       	pop	r31
    28b2:	ef 91       	pop	r30
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	bf 91       	pop	r27
    28ba:	af 91       	pop	r26
    28bc:	9f 91       	pop	r25
    28be:	8f 91       	pop	r24
    28c0:	7f 91       	pop	r23
    28c2:	6f 91       	pop	r22
    28c4:	5f 91       	pop	r21
    28c6:	4f 91       	pop	r20
    28c8:	3f 91       	pop	r19
    28ca:	2f 91       	pop	r18
    28cc:	1f 91       	pop	r17
    28ce:	0f 91       	pop	r16
    28d0:	0f 90       	pop	r0
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	0f 90       	pop	r0
    28d6:	1f 90       	pop	r1
    28d8:	18 95       	reti

000028da <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    28da:	ef 92       	push	r14
    28dc:	ff 92       	push	r15
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	27 97       	sbiw	r28, 0x07	; 7
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	f8 94       	cli
    28f0:	de bf       	out	0x3e, r29	; 62
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    28f6:	8e 01       	movw	r16, r28
    28f8:	0f 5f       	subi	r16, 0xFF	; 255
    28fa:	1f 4f       	sbci	r17, 0xFF	; 255
    28fc:	27 e0       	ldi	r18, 0x07	; 7
    28fe:	f8 01       	movw	r30, r16
    2900:	11 92       	st	Z+, r1
    2902:	2a 95       	dec	r18
    2904:	e9 f7       	brne	.-6      	; 0x2900 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2906:	4a e0       	ldi	r20, 0x0A	; 10
    2908:	b8 01       	movw	r22, r16
    290a:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <__itoa_ncheck>
    290e:	7e 01       	movw	r14, r28
    2910:	f8 e0       	ldi	r31, 0x08	; 8
    2912:	ef 0e       	add	r14, r31
    2914:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    2916:	f8 01       	movw	r30, r16
    2918:	81 91       	ld	r24, Z+
    291a:	8f 01       	movw	r16, r30
    291c:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    291e:	0e 94 51 12 	call	0x24a2	; 0x24a2 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    2922:	0e 15       	cp	r16, r14
    2924:	1f 05       	cpc	r17, r15
    2926:	b9 f7       	brne	.-18     	; 0x2916 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    2928:	27 96       	adiw	r28, 0x07	; 7
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	1f 91       	pop	r17
    293a:	0f 91       	pop	r16
    293c:	ff 90       	pop	r15
    293e:	ef 90       	pop	r14
    2940:	08 95       	ret

00002942 <twi_wait>:
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	ec eb       	ldi	r30, 0xBC	; 188
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	88 23       	and	r24, r24
    294e:	34 f0       	brlt	.+12     	; 0x295c <twi_wait+0x1a>
    2950:	2f 5f       	subi	r18, 0xFF	; 255
    2952:	3f 4f       	sbci	r19, 0xFF	; 255
    2954:	29 3e       	cpi	r18, 0xE9	; 233
    2956:	83 e0       	ldi	r24, 0x03	; 3
    2958:	38 07       	cpc	r19, r24
    295a:	b9 f7       	brne	.-18     	; 0x294a <twi_wait+0x8>
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	28 3e       	cpi	r18, 0xE8	; 232
    2960:	33 40       	sbci	r19, 0x03	; 3
    2962:	09 f4       	brne	.+2      	; 0x2966 <twi_wait+0x24>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	08 95       	ret

00002968 <send_byte>:
    2968:	80 93 bb 00 	sts	0x00BB, r24
    296c:	84 e8       	ldi	r24, 0x84	; 132
    296e:	80 93 bc 00 	sts	0x00BC, r24
    2972:	0e 94 a1 14 	call	0x2942	; 0x2942 <twi_wait>
    2976:	88 23       	and	r24, r24
    2978:	19 f0       	breq	.+6      	; 0x2980 <send_byte+0x18>
    297a:	80 91 b9 00 	lds	r24, 0x00B9
    297e:	88 7f       	andi	r24, 0xF8	; 248
    2980:	08 95       	ret

00002982 <start_write>:
    2982:	cf 93       	push	r28
    2984:	c8 2f       	mov	r28, r24
    2986:	94 ea       	ldi	r25, 0xA4	; 164
    2988:	90 93 bc 00 	sts	0x00BC, r25
    298c:	0e 94 a1 14 	call	0x2942	; 0x2942 <twi_wait>
    2990:	88 23       	and	r24, r24
    2992:	61 f0       	breq	.+24     	; 0x29ac <start_write+0x2a>
    2994:	8c 2f       	mov	r24, r28
    2996:	88 0f       	add	r24, r24
    2998:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    299c:	80 32       	cpi	r24, 0x20	; 32
    299e:	29 f4       	brne	.+10     	; 0x29aa <start_write+0x28>
    29a0:	84 e9       	ldi	r24, 0x94	; 148
    29a2:	80 93 bc 00 	sts	0x00BC, r24
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	01 c0       	rjmp	.+2      	; 0x29ac <start_write+0x2a>
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	cf 91       	pop	r28
    29ae:	08 95       	ret

000029b0 <m_wii_open>:
    29b0:	0e 94 6d 11 	call	0x22da	; 0x22da <m_bus_init>
    29b4:	88 e5       	ldi	r24, 0x58	; 88
    29b6:	0e 94 c1 14 	call	0x2982	; 0x2982 <start_write>
    29ba:	88 23       	and	r24, r24
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <m_wii_open+0x10>
    29be:	cd c0       	rjmp	.+410    	; 0x2b5a <m_wii_open+0x1aa>
    29c0:	80 e3       	ldi	r24, 0x30	; 48
    29c2:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    29c6:	88 23       	and	r24, r24
    29c8:	09 f4       	brne	.+2      	; 0x29cc <m_wii_open+0x1c>
    29ca:	c9 c0       	rjmp	.+402    	; 0x2b5e <m_wii_open+0x1ae>
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    29d2:	88 23       	and	r24, r24
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <m_wii_open+0x28>
    29d6:	c5 c0       	rjmp	.+394    	; 0x2b62 <m_wii_open+0x1b2>
    29d8:	84 e9       	ldi	r24, 0x94	; 148
    29da:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    29de:	83 ec       	ldi	r24, 0xC3	; 195
    29e0:	99 e0       	ldi	r25, 0x09	; 9
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <m_wii_open+0x32>
    29e6:	00 c0       	rjmp	.+0      	; 0x29e8 <m_wii_open+0x38>
    29e8:	00 00       	nop
    29ea:	88 e5       	ldi	r24, 0x58	; 88
    29ec:	0e 94 c1 14 	call	0x2982	; 0x2982 <start_write>
    29f0:	88 23       	and	r24, r24
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <m_wii_open+0x46>
    29f4:	b8 c0       	rjmp	.+368    	; 0x2b66 <m_wii_open+0x1b6>
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    29fc:	88 23       	and	r24, r24
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <m_wii_open+0x52>
    2a00:	b4 c0       	rjmp	.+360    	; 0x2b6a <m_wii_open+0x1ba>
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2a08:	88 23       	and	r24, r24
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <m_wii_open+0x5e>
    2a0c:	b0 c0       	rjmp	.+352    	; 0x2b6e <m_wii_open+0x1be>
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2a14:	88 23       	and	r24, r24
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <m_wii_open+0x6a>
    2a18:	ac c0       	rjmp	.+344    	; 0x2b72 <m_wii_open+0x1c2>
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2a20:	88 23       	and	r24, r24
    2a22:	09 f4       	brne	.+2      	; 0x2a26 <m_wii_open+0x76>
    2a24:	a8 c0       	rjmp	.+336    	; 0x2b76 <m_wii_open+0x1c6>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2a2c:	88 23       	and	r24, r24
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <m_wii_open+0x82>
    2a30:	a4 c0       	rjmp	.+328    	; 0x2b7a <m_wii_open+0x1ca>
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2a38:	88 23       	and	r24, r24
    2a3a:	09 f4       	brne	.+2      	; 0x2a3e <m_wii_open+0x8e>
    2a3c:	a0 c0       	rjmp	.+320    	; 0x2b7e <m_wii_open+0x1ce>
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2a44:	88 23       	and	r24, r24
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <m_wii_open+0x9a>
    2a48:	9c c0       	rjmp	.+312    	; 0x2b82 <m_wii_open+0x1d2>
    2a4a:	80 e9       	ldi	r24, 0x90	; 144
    2a4c:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2a50:	88 23       	and	r24, r24
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <m_wii_open+0xa6>
    2a54:	98 c0       	rjmp	.+304    	; 0x2b86 <m_wii_open+0x1d6>
    2a56:	84 e9       	ldi	r24, 0x94	; 148
    2a58:	80 93 bc 00 	sts	0x00BC, r24
    2a5c:	83 ec       	ldi	r24, 0xC3	; 195
    2a5e:	99 e0       	ldi	r25, 0x09	; 9
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	f1 f7       	brne	.-4      	; 0x2a60 <m_wii_open+0xb0>
    2a64:	00 c0       	rjmp	.+0      	; 0x2a66 <m_wii_open+0xb6>
    2a66:	00 00       	nop
    2a68:	88 e5       	ldi	r24, 0x58	; 88
    2a6a:	0e 94 c1 14 	call	0x2982	; 0x2982 <start_write>
    2a6e:	88 23       	and	r24, r24
    2a70:	09 f4       	brne	.+2      	; 0x2a74 <m_wii_open+0xc4>
    2a72:	8b c0       	rjmp	.+278    	; 0x2b8a <m_wii_open+0x1da>
    2a74:	87 e0       	ldi	r24, 0x07	; 7
    2a76:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2a7a:	88 23       	and	r24, r24
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <m_wii_open+0xd0>
    2a7e:	87 c0       	rjmp	.+270    	; 0x2b8e <m_wii_open+0x1de>
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2a86:	88 23       	and	r24, r24
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <m_wii_open+0xdc>
    2a8a:	83 c0       	rjmp	.+262    	; 0x2b92 <m_wii_open+0x1e2>
    2a8c:	81 e4       	ldi	r24, 0x41	; 65
    2a8e:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2a92:	88 23       	and	r24, r24
    2a94:	09 f4       	brne	.+2      	; 0x2a98 <m_wii_open+0xe8>
    2a96:	7f c0       	rjmp	.+254    	; 0x2b96 <m_wii_open+0x1e6>
    2a98:	84 e9       	ldi	r24, 0x94	; 148
    2a9a:	80 93 bc 00 	sts	0x00BC, r24
    2a9e:	83 ec       	ldi	r24, 0xC3	; 195
    2aa0:	99 e0       	ldi	r25, 0x09	; 9
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <m_wii_open+0xf2>
    2aa6:	00 c0       	rjmp	.+0      	; 0x2aa8 <m_wii_open+0xf8>
    2aa8:	00 00       	nop
    2aaa:	88 e5       	ldi	r24, 0x58	; 88
    2aac:	0e 94 c1 14 	call	0x2982	; 0x2982 <start_write>
    2ab0:	88 23       	and	r24, r24
    2ab2:	09 f4       	brne	.+2      	; 0x2ab6 <m_wii_open+0x106>
    2ab4:	72 c0       	rjmp	.+228    	; 0x2b9a <m_wii_open+0x1ea>
    2ab6:	8a e1       	ldi	r24, 0x1A	; 26
    2ab8:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2abc:	88 23       	and	r24, r24
    2abe:	09 f4       	brne	.+2      	; 0x2ac2 <m_wii_open+0x112>
    2ac0:	6e c0       	rjmp	.+220    	; 0x2b9e <m_wii_open+0x1ee>
    2ac2:	80 e4       	ldi	r24, 0x40	; 64
    2ac4:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2ac8:	88 23       	and	r24, r24
    2aca:	09 f4       	brne	.+2      	; 0x2ace <m_wii_open+0x11e>
    2acc:	6a c0       	rjmp	.+212    	; 0x2ba2 <m_wii_open+0x1f2>
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2ad4:	88 23       	and	r24, r24
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <m_wii_open+0x12a>
    2ad8:	66 c0       	rjmp	.+204    	; 0x2ba6 <m_wii_open+0x1f6>
    2ada:	84 e9       	ldi	r24, 0x94	; 148
    2adc:	80 93 bc 00 	sts	0x00BC, r24
    2ae0:	83 ec       	ldi	r24, 0xC3	; 195
    2ae2:	99 e0       	ldi	r25, 0x09	; 9
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <m_wii_open+0x134>
    2ae8:	00 c0       	rjmp	.+0      	; 0x2aea <m_wii_open+0x13a>
    2aea:	00 00       	nop
    2aec:	88 e5       	ldi	r24, 0x58	; 88
    2aee:	0e 94 c1 14 	call	0x2982	; 0x2982 <start_write>
    2af2:	88 23       	and	r24, r24
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <m_wii_open+0x148>
    2af6:	59 c0       	rjmp	.+178    	; 0x2baa <m_wii_open+0x1fa>
    2af8:	83 e3       	ldi	r24, 0x33	; 51
    2afa:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2afe:	88 23       	and	r24, r24
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <m_wii_open+0x154>
    2b02:	55 c0       	rjmp	.+170    	; 0x2bae <m_wii_open+0x1fe>
    2b04:	83 e0       	ldi	r24, 0x03	; 3
    2b06:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2b0a:	88 23       	and	r24, r24
    2b0c:	09 f4       	brne	.+2      	; 0x2b10 <m_wii_open+0x160>
    2b0e:	51 c0       	rjmp	.+162    	; 0x2bb2 <m_wii_open+0x202>
    2b10:	84 e9       	ldi	r24, 0x94	; 148
    2b12:	80 93 bc 00 	sts	0x00BC, r24
    2b16:	83 ec       	ldi	r24, 0xC3	; 195
    2b18:	99 e0       	ldi	r25, 0x09	; 9
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <m_wii_open+0x16a>
    2b1e:	00 c0       	rjmp	.+0      	; 0x2b20 <m_wii_open+0x170>
    2b20:	00 00       	nop
    2b22:	88 e5       	ldi	r24, 0x58	; 88
    2b24:	0e 94 c1 14 	call	0x2982	; 0x2982 <start_write>
    2b28:	88 23       	and	r24, r24
    2b2a:	09 f4       	brne	.+2      	; 0x2b2e <m_wii_open+0x17e>
    2b2c:	44 c0       	rjmp	.+136    	; 0x2bb6 <m_wii_open+0x206>
    2b2e:	80 e3       	ldi	r24, 0x30	; 48
    2b30:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2b34:	88 23       	and	r24, r24
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <m_wii_open+0x18a>
    2b38:	40 c0       	rjmp	.+128    	; 0x2bba <m_wii_open+0x20a>
    2b3a:	88 e0       	ldi	r24, 0x08	; 8
    2b3c:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2b40:	88 23       	and	r24, r24
    2b42:	e9 f1       	breq	.+122    	; 0x2bbe <m_wii_open+0x20e>
    2b44:	84 e9       	ldi	r24, 0x94	; 148
    2b46:	80 93 bc 00 	sts	0x00BC, r24
    2b4a:	83 ec       	ldi	r24, 0xC3	; 195
    2b4c:	99 e0       	ldi	r25, 0x09	; 9
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <m_wii_open+0x19e>
    2b52:	00 c0       	rjmp	.+0      	; 0x2b54 <m_wii_open+0x1a4>
    2b54:	00 00       	nop
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	08 95       	ret
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	08 95       	ret
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	08 95       	ret
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	08 95       	ret
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	08 95       	ret
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	08 95       	ret
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	08 95       	ret
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	08 95       	ret
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	08 95       	ret
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	08 95       	ret
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	08 95       	ret
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	08 95       	ret
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	08 95       	ret
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	08 95       	ret
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	08 95       	ret
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	08 95       	ret
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	08 95       	ret
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	08 95       	ret
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	08 95       	ret
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	08 95       	ret
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	08 95       	ret
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	08 95       	ret
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	08 95       	ret
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	08 95       	ret
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	08 95       	ret
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	08 95       	ret
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	08 95       	ret

00002bc2 <start_read>:
    2bc2:	cf 93       	push	r28
    2bc4:	c8 2f       	mov	r28, r24
    2bc6:	84 ea       	ldi	r24, 0xA4	; 164
    2bc8:	80 93 bc 00 	sts	0x00BC, r24
    2bcc:	0e 94 a1 14 	call	0x2942	; 0x2942 <twi_wait>
    2bd0:	88 23       	and	r24, r24
    2bd2:	69 f0       	breq	.+26     	; 0x2bee <start_read+0x2c>
    2bd4:	8c 2f       	mov	r24, r28
    2bd6:	88 0f       	add	r24, r24
    2bd8:	8f 5f       	subi	r24, 0xFF	; 255
    2bda:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2bde:	88 34       	cpi	r24, 0x48	; 72
    2be0:	29 f4       	brne	.+10     	; 0x2bec <start_read+0x2a>
    2be2:	84 e9       	ldi	r24, 0x94	; 148
    2be4:	80 93 bc 00 	sts	0x00BC, r24
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	01 c0       	rjmp	.+2      	; 0x2bee <start_read+0x2c>
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	cf 91       	pop	r28
    2bf0:	08 95       	ret

00002bf2 <m_wii_read>:
    2bf2:	0f 93       	push	r16
    2bf4:	1f 93       	push	r17
    2bf6:	cf 93       	push	r28
    2bf8:	df 93       	push	r29
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	60 97       	sbiw	r28, 0x10	; 16
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	8c 01       	movw	r16, r24
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	31 96       	adiw	r30, 0x01	; 1
    2c10:	80 e1       	ldi	r24, 0x10	; 16
    2c12:	df 01       	movw	r26, r30
    2c14:	1d 92       	st	X+, r1
    2c16:	8a 95       	dec	r24
    2c18:	e9 f7       	brne	.-6      	; 0x2c14 <m_wii_read+0x22>
    2c1a:	88 e5       	ldi	r24, 0x58	; 88
    2c1c:	0e 94 c1 14 	call	0x2982	; 0x2982 <start_write>
    2c20:	88 23       	and	r24, r24
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <m_wii_read+0x34>
    2c24:	69 c0       	rjmp	.+210    	; 0x2cf8 <m_wii_read+0x106>
    2c26:	86 e3       	ldi	r24, 0x36	; 54
    2c28:	0e 94 b4 14 	call	0x2968	; 0x2968 <send_byte>
    2c2c:	88 23       	and	r24, r24
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <m_wii_read+0x40>
    2c30:	65 c0       	rjmp	.+202    	; 0x2cfc <m_wii_read+0x10a>
    2c32:	84 e9       	ldi	r24, 0x94	; 148
    2c34:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2c38:	b8 e0       	ldi	r27, 0x08	; 8
    2c3a:	ba 95       	dec	r27
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <m_wii_read+0x48>
    2c3e:	00 00       	nop
    2c40:	88 e5       	ldi	r24, 0x58	; 88
    2c42:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <start_read>
    2c46:	88 23       	and	r24, r24
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <m_wii_read+0x5a>
    2c4a:	5a c0       	rjmp	.+180    	; 0x2d00 <m_wii_read+0x10e>
    2c4c:	be 01       	movw	r22, r28
    2c4e:	6f 5f       	subi	r22, 0xFF	; 255
    2c50:	7f 4f       	sbci	r23, 0xFF	; 255
    2c52:	ae 01       	movw	r20, r28
    2c54:	40 5f       	subi	r20, 0xF0	; 240
    2c56:	5f 4f       	sbci	r21, 0xFF	; 255
    2c58:	ec eb       	ldi	r30, 0xBC	; 188
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	84 ec       	ldi	r24, 0xC4	; 196
    2c5e:	2b eb       	ldi	r18, 0xBB	; 187
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	80 83       	st	Z, r24
    2c64:	90 81       	ld	r25, Z
    2c66:	99 23       	and	r25, r25
    2c68:	ec f7       	brge	.-6      	; 0x2c64 <m_wii_read+0x72>
    2c6a:	d9 01       	movw	r26, r18
    2c6c:	9c 91       	ld	r25, X
    2c6e:	db 01       	movw	r26, r22
    2c70:	9d 93       	st	X+, r25
    2c72:	bd 01       	movw	r22, r26
    2c74:	a4 17       	cp	r26, r20
    2c76:	b5 07       	cpc	r27, r21
    2c78:	a1 f7       	brne	.-24     	; 0x2c62 <m_wii_read+0x70>
    2c7a:	84 e8       	ldi	r24, 0x84	; 132
    2c7c:	80 93 bc 00 	sts	0x00BC, r24
    2c80:	ec eb       	ldi	r30, 0xBC	; 188
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	88 23       	and	r24, r24
    2c88:	ec f7       	brge	.-6      	; 0x2c84 <m_wii_read+0x92>
    2c8a:	80 91 bb 00 	lds	r24, 0x00BB
    2c8e:	88 8b       	std	Y+16, r24	; 0x10
    2c90:	84 e9       	ldi	r24, 0x94	; 148
    2c92:	80 93 bc 00 	sts	0x00BC, r24
    2c96:	be 01       	movw	r22, r28
    2c98:	6c 5f       	subi	r22, 0xFC	; 252
    2c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9c:	f8 01       	movw	r30, r16
    2c9e:	08 5e       	subi	r16, 0xE8	; 232
    2ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca2:	db 01       	movw	r26, r22
    2ca4:	2c 91       	ld	r18, X
    2ca6:	32 2f       	mov	r19, r18
    2ca8:	30 73       	andi	r19, 0x30	; 48
    2caa:	cb 01       	movw	r24, r22
    2cac:	02 97       	sbiw	r24, 0x02	; 2
    2cae:	dc 01       	movw	r26, r24
    2cb0:	8c 91       	ld	r24, X
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	b0 e1       	ldi	r27, 0x10	; 16
    2cb6:	3b 9f       	mul	r19, r27
    2cb8:	80 0d       	add	r24, r0
    2cba:	91 1d       	adc	r25, r1
    2cbc:	11 24       	eor	r1, r1
    2cbe:	91 83       	std	Z+1, r25	; 0x01
    2cc0:	80 83       	st	Z, r24
    2cc2:	42 2f       	mov	r20, r18
    2cc4:	40 7c       	andi	r20, 0xC0	; 192
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	44 0f       	add	r20, r20
    2cca:	55 1f       	adc	r21, r21
    2ccc:	44 0f       	add	r20, r20
    2cce:	55 1f       	adc	r21, r21
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	8c 91       	ld	r24, X
    2cd8:	48 0f       	add	r20, r24
    2cda:	51 1d       	adc	r21, r1
    2cdc:	53 83       	std	Z+3, r21	; 0x03
    2cde:	42 83       	std	Z+2, r20	; 0x02
    2ce0:	2f 70       	andi	r18, 0x0F	; 15
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	35 83       	std	Z+5, r19	; 0x05
    2ce6:	24 83       	std	Z+4, r18	; 0x04
    2ce8:	6d 5f       	subi	r22, 0xFD	; 253
    2cea:	7f 4f       	sbci	r23, 0xFF	; 255
    2cec:	36 96       	adiw	r30, 0x06	; 6
    2cee:	e0 17       	cp	r30, r16
    2cf0:	f1 07       	cpc	r31, r17
    2cf2:	b9 f6       	brne	.-82     	; 0x2ca2 <m_wii_read+0xb0>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	05 c0       	rjmp	.+10     	; 0x2d02 <m_wii_read+0x110>
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	03 c0       	rjmp	.+6      	; 0x2d02 <m_wii_read+0x110>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	01 c0       	rjmp	.+2      	; 0x2d02 <m_wii_read+0x110>
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	60 96       	adiw	r28, 0x10	; 16
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	df 91       	pop	r29
    2d10:	cf 91       	pop	r28
    2d12:	1f 91       	pop	r17
    2d14:	0f 91       	pop	r16
    2d16:	08 95       	ret

00002d18 <get_puck_location>:
Public Functions
************************************************************/

/* Returns x,y, location of puck (angle more accurate) */
void get_puck_location(float* puck_buffer)
{
    2d18:	2f 92       	push	r2
    2d1a:	3f 92       	push	r3
    2d1c:	4f 92       	push	r4
    2d1e:	5f 92       	push	r5
    2d20:	6f 92       	push	r6
    2d22:	7f 92       	push	r7
    2d24:	8f 92       	push	r8
    2d26:	9f 92       	push	r9
    2d28:	af 92       	push	r10
    2d2a:	bf 92       	push	r11
    2d2c:	cf 92       	push	r12
    2d2e:	df 92       	push	r13
    2d30:	ef 92       	push	r14
    2d32:	ff 92       	push	r15
    2d34:	0f 93       	push	r16
    2d36:	1f 93       	push	r17
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    2d40:	62 97       	sbiw	r28, 0x12	; 18
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	de bf       	out	0x3e, r29	; 62
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	cd bf       	out	0x3d, r28	; 61
    2d4c:	9a 8b       	std	Y+18, r25	; 0x12
    2d4e:	89 8b       	std	Y+17, r24	; 0x11
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta
    2d50:	ce 01       	movw	r24, r28
    2d52:	01 96       	adiw	r24, 0x01	; 1
    2d54:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <get_position>
    2d58:	0f 2e       	mov	r0, r31
    2d5a:	f3 ed       	ldi	r31, 0xD3	; 211
    2d5c:	8f 2e       	mov	r8, r31
    2d5e:	f1 e0       	ldi	r31, 0x01	; 1
    2d60:	9f 2e       	mov	r9, r31
    2d62:	f0 2d       	mov	r31, r0
    2d64:	0f 2e       	mov	r0, r31
    2d66:	f1 e3       	ldi	r31, 0x31	; 49
    2d68:	ef 2e       	mov	r14, r31
    2d6a:	f1 e0       	ldi	r31, 0x01	; 1
    2d6c:	ff 2e       	mov	r15, r31
    2d6e:	f0 2d       	mov	r31, r0
    2d70:	0f 2e       	mov	r0, r31
    2d72:	f9 e5       	ldi	r31, 0x59	; 89
    2d74:	af 2e       	mov	r10, r31
    2d76:	f1 e0       	ldi	r31, 0x01	; 1
    2d78:	bf 2e       	mov	r11, r31
    2d7a:	f0 2d       	mov	r31, r0

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
    2d7c:	1d 86       	std	Y+13, r1	; 0x0d
    2d7e:	1e 86       	std	Y+14, r1	; 0x0e
    2d80:	1f 86       	std	Y+15, r1	; 0x0f
    2d82:	18 8a       	std	Y+16, r1	; 0x10
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
    2d84:	c1 2c       	mov	r12, r1
    2d86:	d1 2c       	mov	r13, r1
{
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
    2d88:	21 2c       	mov	r2, r1
    2d8a:	31 2c       	mov	r3, r1
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
		scaler += transistor_vals[i];
    2d8c:	f4 01       	movw	r30, r8
    2d8e:	01 91       	ld	r16, Z+
    2d90:	11 91       	ld	r17, Z+
    2d92:	4f 01       	movw	r8, r30
    2d94:	c0 0e       	add	r12, r16
    2d96:	d1 1e       	adc	r13, r17
		global_theta += transistor_angles[i] * (float)transistor_vals[i];
    2d98:	f7 01       	movw	r30, r14
    2d9a:	41 90       	ld	r4, Z+
    2d9c:	51 90       	ld	r5, Z+
    2d9e:	61 90       	ld	r6, Z+
    2da0:	71 90       	ld	r7, Z+
    2da2:	7f 01       	movw	r14, r30
    2da4:	b8 01       	movw	r22, r16
    2da6:	01 2e       	mov	r0, r17
    2da8:	00 0c       	add	r0, r0
    2daa:	88 0b       	sbc	r24, r24
    2dac:	99 0b       	sbc	r25, r25
    2dae:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
    2db2:	9b 01       	movw	r18, r22
    2db4:	ac 01       	movw	r20, r24
    2db6:	c3 01       	movw	r24, r6
    2db8:	b2 01       	movw	r22, r4
    2dba:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    2dbe:	9b 01       	movw	r18, r22
    2dc0:	ac 01       	movw	r20, r24
    2dc2:	6d 85       	ldd	r22, Y+13	; 0x0d
    2dc4:	7e 85       	ldd	r23, Y+14	; 0x0e
    2dc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dc8:	98 89       	ldd	r25, Y+16	; 0x10
    2dca:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
    2dce:	6d 87       	std	Y+13, r22	; 0x0d
    2dd0:	7e 87       	std	Y+14, r23	; 0x0e
    2dd2:	8f 87       	std	Y+15, r24	; 0x0f
    2dd4:	98 8b       	std	Y+16, r25	; 0x10
    2dd6:	20 16       	cp	r2, r16
    2dd8:	31 06       	cpc	r3, r17
    2dda:	0c f4       	brge	.+2      	; 0x2dde <get_puck_location+0xc6>
    2ddc:	18 01       	movw	r2, r16

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
    2dde:	ea 14       	cp	r14, r10
    2de0:	fb 04       	cpc	r15, r11
    2de2:	a1 f6       	brne	.-88     	; 0x2d8c <get_puck_location+0x74>
	}
	global_theta = global_theta/((float)scaler);


	/* If no puck found */
	if(max_val<100){
    2de4:	f4 e6       	ldi	r31, 0x64	; 100
    2de6:	2f 16       	cp	r2, r31
    2de8:	31 04       	cpc	r3, r1
    2dea:	7c f4       	brge	.+30     	; 0x2e0a <get_puck_location+0xf2>
		puck_buffer[0] = 0;
    2dec:	e9 89       	ldd	r30, Y+17	; 0x11
    2dee:	fa 89       	ldd	r31, Y+18	; 0x12
    2df0:	10 82       	st	Z, r1
    2df2:	11 82       	std	Z+1, r1	; 0x01
    2df4:	12 82       	std	Z+2, r1	; 0x02
    2df6:	13 82       	std	Z+3, r1	; 0x03
		puck_buffer[1] = 0;
    2df8:	14 82       	std	Z+4, r1	; 0x04
    2dfa:	15 82       	std	Z+5, r1	; 0x05
    2dfc:	16 82       	std	Z+6, r1	; 0x06
    2dfe:	17 82       	std	Z+7, r1	; 0x07
		puck_buffer[2] = 0;
    2e00:	10 86       	std	Z+8, r1	; 0x08
    2e02:	11 86       	std	Z+9, r1	; 0x09
    2e04:	12 86       	std	Z+10, r1	; 0x0a
    2e06:	13 86       	std	Z+11, r1	; 0x0b
    2e08:	72 c0       	rjmp	.+228    	; 0x2eee <get_puck_location+0x1d6>

		if(transistor_vals[i]>max_val){
			max_val = transistor_vals[i];
		}
	}
	global_theta = global_theta/((float)scaler);
    2e0a:	b6 01       	movw	r22, r12
    2e0c:	dd 0c       	add	r13, r13
    2e0e:	88 0b       	sbc	r24, r24
    2e10:	99 0b       	sbc	r25, r25
    2e12:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
    2e16:	9b 01       	movw	r18, r22
    2e18:	ac 01       	movw	r20, r24
    2e1a:	6d 85       	ldd	r22, Y+13	; 0x0d
    2e1c:	7e 85       	ldd	r23, Y+14	; 0x0e
    2e1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e20:	98 89       	ldd	r25, Y+16	; 0x10
    2e22:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__divsf3>
		puck_buffer[2] = 0;
		return;
	}

	/* Create vector pointing to puck in global coordinates */
	global_theta += position_buffer[2];
    2e26:	29 85       	ldd	r18, Y+9	; 0x09
    2e28:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e2a:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e2c:	5c 85       	ldd	r21, Y+12	; 0x0c
    2e2e:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
    2e32:	4b 01       	movw	r8, r22
    2e34:	5c 01       	movw	r10, r24
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/200.0 + position_buffer[0]; // Assign X val
    2e36:	0e 94 37 1a 	call	0x346e	; 0x346e <cos>
    2e3a:	2b 01       	movw	r4, r22
    2e3c:	3c 01       	movw	r6, r24
    2e3e:	6f ef       	ldi	r22, 0xFF	; 255
    2e40:	73 e0       	ldi	r23, 0x03	; 3
    2e42:	62 19       	sub	r22, r2
    2e44:	73 09       	sbc	r23, r3
    2e46:	07 2e       	mov	r0, r23
    2e48:	00 0c       	add	r0, r0
    2e4a:	88 0b       	sbc	r24, r24
    2e4c:	99 0b       	sbc	r25, r25
    2e4e:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
    2e52:	6b 01       	movw	r12, r22
    2e54:	7c 01       	movw	r14, r24
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	4f e2       	ldi	r20, 0x2F	; 47
    2e5c:	54 e4       	ldi	r21, 0x44	; 68
    2e5e:	c3 01       	movw	r24, r6
    2e60:	b2 01       	movw	r22, r4
    2e62:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    2e66:	a7 01       	movw	r20, r14
    2e68:	96 01       	movw	r18, r12
    2e6a:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	48 e4       	ldi	r20, 0x48	; 72
    2e74:	53 e4       	ldi	r21, 0x43	; 67
    2e76:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__divsf3>
    2e7a:	29 81       	ldd	r18, Y+1	; 0x01
    2e7c:	3a 81       	ldd	r19, Y+2	; 0x02
    2e7e:	4b 81       	ldd	r20, Y+3	; 0x03
    2e80:	5c 81       	ldd	r21, Y+4	; 0x04
    2e82:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
    2e86:	e9 89       	ldd	r30, Y+17	; 0x11
    2e88:	fa 89       	ldd	r31, Y+18	; 0x12
    2e8a:	60 83       	st	Z, r22
    2e8c:	71 83       	std	Z+1, r23	; 0x01
    2e8e:	82 83       	std	Z+2, r24	; 0x02
    2e90:	93 83       	std	Z+3, r25	; 0x03
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/200.0 + position_buffer[1]; // Assign Y val
    2e92:	c5 01       	movw	r24, r10
    2e94:	b4 01       	movw	r22, r8
    2e96:	0e 94 76 1c 	call	0x38ec	; 0x38ec <sin>
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	4f e2       	ldi	r20, 0x2F	; 47
    2ea0:	54 e4       	ldi	r21, 0x44	; 68
    2ea2:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    2ea6:	9b 01       	movw	r18, r22
    2ea8:	ac 01       	movw	r20, r24
    2eaa:	c7 01       	movw	r24, r14
    2eac:	b6 01       	movw	r22, r12
    2eae:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	48 e4       	ldi	r20, 0x48	; 72
    2eb8:	53 e4       	ldi	r21, 0x43	; 67
    2eba:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__divsf3>
    2ebe:	2d 81       	ldd	r18, Y+5	; 0x05
    2ec0:	3e 81       	ldd	r19, Y+6	; 0x06
    2ec2:	4f 81       	ldd	r20, Y+7	; 0x07
    2ec4:	58 85       	ldd	r21, Y+8	; 0x08
    2ec6:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__addsf3>
    2eca:	e9 89       	ldd	r30, Y+17	; 0x11
    2ecc:	fa 89       	ldd	r31, Y+18	; 0x12
    2ece:	64 83       	std	Z+4, r22	; 0x04
    2ed0:	75 83       	std	Z+5, r23	; 0x05
    2ed2:	86 83       	std	Z+6, r24	; 0x06
    2ed4:	97 83       	std	Z+7, r25	; 0x07
	puck_buffer[2] = max_val;
    2ed6:	b1 01       	movw	r22, r2
    2ed8:	33 0c       	add	r3, r3
    2eda:	88 0b       	sbc	r24, r24
    2edc:	99 0b       	sbc	r25, r25
    2ede:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__floatsisf>
    2ee2:	e9 89       	ldd	r30, Y+17	; 0x11
    2ee4:	fa 89       	ldd	r31, Y+18	; 0x12
    2ee6:	60 87       	std	Z+8, r22	; 0x08
    2ee8:	71 87       	std	Z+9, r23	; 0x09
    2eea:	82 87       	std	Z+10, r24	; 0x0a
    2eec:	93 87       	std	Z+11, r25	; 0x0b

}
    2eee:	62 96       	adiw	r28, 0x12	; 18
    2ef0:	0f b6       	in	r0, 0x3f	; 63
    2ef2:	f8 94       	cli
    2ef4:	de bf       	out	0x3e, r29	; 62
    2ef6:	0f be       	out	0x3f, r0	; 63
    2ef8:	cd bf       	out	0x3d, r28	; 61
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	1f 91       	pop	r17
    2f00:	0f 91       	pop	r16
    2f02:	ff 90       	pop	r15
    2f04:	ef 90       	pop	r14
    2f06:	df 90       	pop	r13
    2f08:	cf 90       	pop	r12
    2f0a:	bf 90       	pop	r11
    2f0c:	af 90       	pop	r10
    2f0e:	9f 90       	pop	r9
    2f10:	8f 90       	pop	r8
    2f12:	7f 90       	pop	r7
    2f14:	6f 90       	pop	r6
    2f16:	5f 90       	pop	r5
    2f18:	4f 90       	pop	r4
    2f1a:	3f 90       	pop	r3
    2f1c:	2f 90       	pop	r2
    2f1e:	08 95       	ret

00002f20 <has_puck>:

/* Return 1 If Has Puck */
char has_puck(void)
{
	static int had_puck = 5;
	if(check(ADCSRA,ADEN)){		//check if ADC is enabled 
    2f20:	80 91 7a 00 	lds	r24, 0x007A
    2f24:	88 23       	and	r24, r24
    2f26:	14 f5       	brge	.+68     	; 0x2f6c <has_puck+0x4c>
		if(((transistor_3 + transistor_9) > HAS_PUCK_THRESHOLD)){
    2f28:	20 91 d1 01 	lds	r18, 0x01D1
    2f2c:	30 91 d2 01 	lds	r19, 0x01D2
    2f30:	80 91 cf 01 	lds	r24, 0x01CF
    2f34:	90 91 d0 01 	lds	r25, 0x01D0
    2f38:	82 0f       	add	r24, r18
    2f3a:	93 1f       	adc	r25, r19
    2f3c:	81 32       	cpi	r24, 0x21	; 33
    2f3e:	93 40       	sbci	r25, 0x03	; 3
    2f40:	44 f0       	brlt	.+16     	; 0x2f52 <has_puck+0x32>
			had_puck = 5;
    2f42:	85 e0       	ldi	r24, 0x05	; 5
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	90 93 30 01 	sts	0x0130, r25
    2f4a:	80 93 2f 01 	sts	0x012F, r24
			return 1;
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	08 95       	ret
		}
		if(had_puck){
    2f52:	80 91 2f 01 	lds	r24, 0x012F
    2f56:	90 91 30 01 	lds	r25, 0x0130
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	49 f0       	breq	.+18     	; 0x2f70 <has_puck+0x50>
			had_puck -= 1;
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	90 93 30 01 	sts	0x0130, r25
    2f64:	80 93 2f 01 	sts	0x012F, r24
			return 1;
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	08 95       	ret
		}
	}
	return 0;
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	08 95       	ret
    2f70:	80 e0       	ldi	r24, 0x00	; 0
}
    2f72:	08 95       	ret

00002f74 <adc_switch>:
/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated

	clear(ADCSRA,ADEN); // Disable ADC subsystem
    2f74:	ea e7       	ldi	r30, 0x7A	; 122
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	80 81       	ld	r24, Z
    2f7a:	8f 77       	andi	r24, 0x7F	; 127
    2f7c:	80 83       	st	Z, r24
	
	switch(state){
    2f7e:	e0 91 e7 01 	lds	r30, 0x01E7
    2f82:	f0 91 e8 01 	lds	r31, 0x01E8
    2f86:	ec 30       	cpi	r30, 0x0C	; 12
    2f88:	f1 05       	cpc	r31, r1
    2f8a:	08 f0       	brcs	.+2      	; 0x2f8e <adc_switch+0x1a>
    2f8c:	82 c1       	rjmp	.+772    	; 0x3292 <adc_switch+0x31e>
    2f8e:	e2 5a       	subi	r30, 0xA2	; 162
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__tablejump2__>

		case 0:
			state = 1;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	90 93 e8 01 	sts	0x01E8, r25
    2f9e:	80 93 e7 01 	sts	0x01E7, r24
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
    2fa2:	eb e7       	ldi	r30, 0x7B	; 123
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	80 81       	ld	r24, Z
    2fa8:	8f 7d       	andi	r24, 0xDF	; 223
    2faa:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 8
    2fac:	ec e7       	ldi	r30, 0x7C	; 124
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	80 81       	ld	r24, Z
    2fb2:	8b 7f       	andi	r24, 0xFB	; 251
    2fb4:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2fb6:	80 81       	ld	r24, Z
    2fb8:	8d 7f       	andi	r24, 0xFD	; 253
    2fba:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2fbc:	80 81       	ld	r24, Z
    2fbe:	8e 7f       	andi	r24, 0xFE	; 254
    2fc0:	80 83       	st	Z, r24
			transistor_vals[2] = ADC;			
    2fc2:	80 91 78 00 	lds	r24, 0x0078
    2fc6:	90 91 79 00 	lds	r25, 0x0079
    2fca:	90 93 d8 01 	sts	0x01D8, r25
    2fce:	80 93 d7 01 	sts	0x01D7, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
			clear(ADMUX,MUX2); // Transistor 8
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[2] = ADC;			
			break;
    2fd4:	5f c1       	rjmp	.+702    	; 0x3294 <adc_switch+0x320>

		case 1:
			state = 2;
    2fd6:	82 e0       	ldi	r24, 0x02	; 2
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	90 93 e8 01 	sts	0x01E8, r25
    2fde:	80 93 e7 01 	sts	0x01E7, r24
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
    2fe2:	eb e7       	ldi	r30, 0x7B	; 123
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	8f 7d       	andi	r24, 0xDF	; 223
    2fea:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 9
    2fec:	ec e7       	ldi	r30, 0x7C	; 124
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	80 81       	ld	r24, Z
    2ff2:	8b 7f       	andi	r24, 0xFB	; 251
    2ff4:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2ff6:	80 81       	ld	r24, Z
    2ff8:	8d 7f       	andi	r24, 0xFD	; 253
    2ffa:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2ffc:	80 81       	ld	r24, Z
    2ffe:	81 60       	ori	r24, 0x01	; 1
    3000:	80 83       	st	Z, r24
			transistor_vals[4] = ADC;			
    3002:	80 91 78 00 	lds	r24, 0x0078
    3006:	90 91 79 00 	lds	r25, 0x0079
    300a:	90 93 dc 01 	sts	0x01DC, r25
    300e:	80 93 db 01 	sts	0x01DB, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    3012:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
			clear(ADMUX,MUX2); // Transistor 9
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[4] = ADC;			
			break;
    3014:	3f c1       	rjmp	.+638    	; 0x3294 <adc_switch+0x320>

		case 2:
			state = 3;
    3016:	83 e0       	ldi	r24, 0x03	; 3
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	90 93 e8 01 	sts	0x01E8, r25
    301e:	80 93 e7 01 	sts	0x01E7, r24
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
    3022:	eb e7       	ldi	r30, 0x7B	; 123
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	8f 7d       	andi	r24, 0xDF	; 223
    302a:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 10
    302c:	ec e7       	ldi	r30, 0x7C	; 124
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	84 60       	ori	r24, 0x04	; 4
    3034:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    3036:	80 81       	ld	r24, Z
    3038:	8d 7f       	andi	r24, 0xFD	; 253
    303a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    303c:	80 81       	ld	r24, Z
    303e:	8e 7f       	andi	r24, 0xFE	; 254
    3040:	80 83       	st	Z, r24
			transistor_9 = ADC;			
    3042:	80 91 78 00 	lds	r24, 0x0078
    3046:	90 91 79 00 	lds	r25, 0x0079
    304a:	90 93 d0 01 	sts	0x01D0, r25
    304e:	80 93 cf 01 	sts	0x01CF, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    3052:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
			set(ADMUX,MUX2); // Transistor 10
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_9 = ADC;			
			break;
    3054:	1f c1       	rjmp	.+574    	; 0x3294 <adc_switch+0x320>

		case 3:
			state = 4;
    3056:	84 e0       	ldi	r24, 0x04	; 4
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	90 93 e8 01 	sts	0x01E8, r25
    305e:	80 93 e7 01 	sts	0x01E7, r24
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
    3062:	eb e7       	ldi	r30, 0x7B	; 123
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	80 81       	ld	r24, Z
    3068:	8f 7d       	andi	r24, 0xDF	; 223
    306a:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 13
    306c:	ec e7       	ldi	r30, 0x7C	; 124
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	84 60       	ori	r24, 0x04	; 4
    3074:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    3076:	80 81       	ld	r24, Z
    3078:	8d 7f       	andi	r24, 0xFD	; 253
    307a:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    307c:	80 81       	ld	r24, Z
    307e:	81 60       	ori	r24, 0x01	; 1
    3080:	80 83       	st	Z, r24
			transistor_vals[5] = ADC;			
    3082:	80 91 78 00 	lds	r24, 0x0078
    3086:	90 91 79 00 	lds	r25, 0x0079
    308a:	90 93 de 01 	sts	0x01DE, r25
    308e:	80 93 dd 01 	sts	0x01DD, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    3092:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
			set(ADMUX,MUX2); // Transistor 13
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[5] = ADC;			
			break;
    3094:	ff c0       	rjmp	.+510    	; 0x3294 <adc_switch+0x320>

		case 4:
			state = 5;
    3096:	85 e0       	ldi	r24, 0x05	; 5
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	90 93 e8 01 	sts	0x01E8, r25
    309e:	80 93 e7 01 	sts	0x01E7, r24
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
    30a2:	eb e7       	ldi	r30, 0x7B	; 123
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 81       	ld	r24, Z
    30a8:	8f 7d       	andi	r24, 0xDF	; 223
    30aa:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 14
    30ac:	ec e7       	ldi	r30, 0x7C	; 124
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
    30b2:	84 60       	ori	r24, 0x04	; 4
    30b4:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    30b6:	80 81       	ld	r24, Z
    30b8:	82 60       	ori	r24, 0x02	; 2
    30ba:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    30bc:	80 81       	ld	r24, Z
    30be:	8e 7f       	andi	r24, 0xFE	; 254
    30c0:	80 83       	st	Z, r24
			transistor_vals[7] = ADC;			
    30c2:	80 91 78 00 	lds	r24, 0x0078
    30c6:	90 91 79 00 	lds	r25, 0x0079
    30ca:	90 93 e2 01 	sts	0x01E2, r25
    30ce:	80 93 e1 01 	sts	0x01E1, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    30d2:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
			set(ADMUX,MUX2); // Transistor 14
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[7] = ADC;			
			break;
    30d4:	df c0       	rjmp	.+446    	; 0x3294 <adc_switch+0x320>

		case 5:
			state = 6;
    30d6:	86 e0       	ldi	r24, 0x06	; 6
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	90 93 e8 01 	sts	0x01E8, r25
    30de:	80 93 e7 01 	sts	0x01E7, r24
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
    30e2:	eb e7       	ldi	r30, 0x7B	; 123
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	8f 7d       	andi	r24, 0xDF	; 223
    30ea:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 15
    30ec:	ec e7       	ldi	r30, 0x7C	; 124
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	84 60       	ori	r24, 0x04	; 4
    30f4:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    30f6:	80 81       	ld	r24, Z
    30f8:	82 60       	ori	r24, 0x02	; 2
    30fa:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    30fc:	80 81       	ld	r24, Z
    30fe:	81 60       	ori	r24, 0x01	; 1
    3100:	80 83       	st	Z, r24
			transistor_vals[8] = ADC;			
    3102:	80 91 78 00 	lds	r24, 0x0078
    3106:	90 91 79 00 	lds	r25, 0x0079
    310a:	90 93 e4 01 	sts	0x01E4, r25
    310e:	80 93 e3 01 	sts	0x01E3, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    3112:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
			set(ADMUX,MUX2); // Transistor 15
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[8] = ADC;			
			break;
    3114:	bf c0       	rjmp	.+382    	; 0x3294 <adc_switch+0x320>

		case 6:
			state = 7;
    3116:	87 e0       	ldi	r24, 0x07	; 7
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	90 93 e8 01 	sts	0x01E8, r25
    311e:	80 93 e7 01 	sts	0x01E7, r24
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
    3122:	eb e7       	ldi	r30, 0x7B	; 123
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	80 62       	ori	r24, 0x20	; 32
    312a:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 1, 16
    312c:	ec e7       	ldi	r30, 0x7C	; 124
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	8b 7f       	andi	r24, 0xFB	; 251
    3134:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    3136:	80 81       	ld	r24, Z
    3138:	8d 7f       	andi	r24, 0xFD	; 253
    313a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    313c:	80 81       	ld	r24, Z
    313e:	8e 7f       	andi	r24, 0xFE	; 254
    3140:	80 83       	st	Z, r24
			transistor_vals[9] = ADC;			
    3142:	80 91 78 00 	lds	r24, 0x0078
    3146:	90 91 79 00 	lds	r25, 0x0079
    314a:	90 93 e6 01 	sts	0x01E6, r25
    314e:	80 93 e5 01 	sts	0x01E5, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    3152:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
			clear(ADMUX,MUX2); // Transistor 1, 16
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[9] = ADC;			
			break;
    3154:	9f c0       	rjmp	.+318    	; 0x3294 <adc_switch+0x320>

		case 7:
			state = 8;
    3156:	88 e0       	ldi	r24, 0x08	; 8
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	90 93 e8 01 	sts	0x01E8, r25
    315e:	80 93 e7 01 	sts	0x01E7, r24
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
    3162:	eb e7       	ldi	r30, 0x7B	; 123
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	80 62       	ori	r24, 0x20	; 32
    316a:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 11, 12
    316c:	ec e7       	ldi	r30, 0x7C	; 124
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	8b 7f       	andi	r24, 0xFB	; 251
    3174:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    3176:	80 81       	ld	r24, Z
    3178:	8d 7f       	andi	r24, 0xFD	; 253
    317a:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    317c:	80 81       	ld	r24, Z
    317e:	81 60       	ori	r24, 0x01	; 1
    3180:	80 83       	st	Z, r24
			transistor_vals[0] = ADC;			
    3182:	80 91 78 00 	lds	r24, 0x0078
    3186:	90 91 79 00 	lds	r25, 0x0079
    318a:	90 93 d4 01 	sts	0x01D4, r25
    318e:	80 93 d3 01 	sts	0x01D3, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    3192:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
			clear(ADMUX,MUX2); // Transistor 11, 12
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[0] = ADC;			
			break;
    3194:	7f c0       	rjmp	.+254    	; 0x3294 <adc_switch+0x320>

		case 8:
			state = 9;
    3196:	89 e0       	ldi	r24, 0x09	; 9
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	90 93 e8 01 	sts	0x01E8, r25
    319e:	80 93 e7 01 	sts	0x01E7, r24
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
    31a2:	eb e7       	ldi	r30, 0x7B	; 123
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	80 81       	ld	r24, Z
    31a8:	80 62       	ori	r24, 0x20	; 32
    31aa:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
    31ac:	ec e7       	ldi	r30, 0x7C	; 124
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	8b 7f       	andi	r24, 0xFB	; 251
    31b4:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    31b6:	80 81       	ld	r24, Z
    31b8:	82 60       	ori	r24, 0x02	; 2
    31ba:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    31bc:	80 81       	ld	r24, Z
    31be:	8e 7f       	andi	r24, 0xFE	; 254
    31c0:	80 83       	st	Z, r24
			transistor_vals[6] = ADC;			
    31c2:	80 91 78 00 	lds	r24, 0x0078
    31c6:	90 91 79 00 	lds	r25, 0x0079
    31ca:	90 93 e0 01 	sts	0x01E0, r25
    31ce:	80 93 df 01 	sts	0x01DF, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    31d2:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[6] = ADC;			
			break;
    31d4:	5f c0       	rjmp	.+190    	; 0x3294 <adc_switch+0x320>

		case 9:
			state = 10;
    31d6:	8a e0       	ldi	r24, 0x0A	; 10
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	90 93 e8 01 	sts	0x01E8, r25
    31de:	80 93 e7 01 	sts	0x01E7, r24
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
    31e2:	eb e7       	ldi	r30, 0x7B	; 123
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	80 62       	ori	r24, 0x20	; 32
    31ea:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 2
    31ec:	ec e7       	ldi	r30, 0x7C	; 124
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	8b 7f       	andi	r24, 0xFB	; 251
    31f4:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    31f6:	80 81       	ld	r24, Z
    31f8:	82 60       	ori	r24, 0x02	; 2
    31fa:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    31fc:	80 81       	ld	r24, Z
    31fe:	81 60       	ori	r24, 0x01	; 1
    3200:	80 83       	st	Z, r24
			transistor_vals[3] = ADC;			
    3202:	80 91 78 00 	lds	r24, 0x0078
    3206:	90 91 79 00 	lds	r25, 0x0079
    320a:	90 93 da 01 	sts	0x01DA, r25
    320e:	80 93 d9 01 	sts	0x01D9, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    3212:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
			clear(ADMUX,MUX2); // Transistor 2
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[3] = ADC;			
			break;
    3214:	3f c0       	rjmp	.+126    	; 0x3294 <adc_switch+0x320>

		case 10:
			state = 11;
    3216:	8b e0       	ldi	r24, 0x0B	; 11
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	90 93 e8 01 	sts	0x01E8, r25
    321e:	80 93 e7 01 	sts	0x01E7, r24
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
    3222:	eb e7       	ldi	r30, 0x7B	; 123
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	80 81       	ld	r24, Z
    3228:	80 62       	ori	r24, 0x20	; 32
    322a:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 3
    322c:	ec e7       	ldi	r30, 0x7C	; 124
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	84 60       	ori	r24, 0x04	; 4
    3234:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    3236:	80 81       	ld	r24, Z
    3238:	8d 7f       	andi	r24, 0xFD	; 253
    323a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    323c:	80 81       	ld	r24, Z
    323e:	8e 7f       	andi	r24, 0xFE	; 254
    3240:	80 83       	st	Z, r24
			transistor_vals[1] = ADC;			
    3242:	80 91 78 00 	lds	r24, 0x0078
    3246:	90 91 79 00 	lds	r25, 0x0079
    324a:	90 93 d6 01 	sts	0x01D6, r25
    324e:	80 93 d5 01 	sts	0x01D5, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    3252:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
			set(ADMUX,MUX2); // Transistor 3
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[1] = ADC;			
			break;
    3254:	1f c0       	rjmp	.+62     	; 0x3294 <adc_switch+0x320>

		case 11:
			state = 0;
    3256:	10 92 e8 01 	sts	0x01E8, r1
    325a:	10 92 e7 01 	sts	0x01E7, r1
			set(ADCSRB,MUX5); // Select ADC13 at pin B6
    325e:	eb e7       	ldi	r30, 0x7B	; 123
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	80 62       	ori	r24, 0x20	; 32
    3266:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 4
    3268:	ec e7       	ldi	r30, 0x7C	; 124
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	84 60       	ori	r24, 0x04	; 4
    3270:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    3272:	80 81       	ld	r24, Z
    3274:	8d 7f       	andi	r24, 0xFD	; 253
    3276:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    3278:	80 81       	ld	r24, Z
    327a:	81 60       	ori	r24, 0x01	; 1
    327c:	80 83       	st	Z, r24
			transistor_3 = ADC;			
    327e:	80 91 78 00 	lds	r24, 0x0078
    3282:	90 91 79 00 	lds	r25, 0x0079
    3286:	90 93 d2 01 	sts	0x01D2, r25
    328a:	80 93 d1 01 	sts	0x01D1, r24
			return_val = 1;
    328e:	81 e0       	ldi	r24, 0x01	; 1
			// m_usb_tx_string("  IR14: ");
			// m_usb_tx_int(transistor_vals[8]);
			// m_usb_tx_string("  IR15: ");
			// m_usb_tx_int(transistor_vals[9]);

			break;
    3290:	01 c0       	rjmp	.+2      	; 0x3294 <adc_switch+0x320>
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    3292:	80 e0       	ldi	r24, 0x00	; 0
			// m_usb_tx_int(transistor_vals[9]);

			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
    3294:	ea e7       	ldi	r30, 0x7A	; 122
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	90 81       	ld	r25, Z
    329a:	90 68       	ori	r25, 0x80	; 128
    329c:	90 83       	st	Z, r25
	set(ADCSRA,ADSC); // Begin new conversion
    329e:	90 81       	ld	r25, Z
    32a0:	90 64       	ori	r25, 0x40	; 64
    32a2:	90 83       	st	Z, r25

	return return_val;
}
    32a4:	08 95       	ret

000032a6 <__subsf3>:
    32a6:	50 58       	subi	r21, 0x80	; 128

000032a8 <__addsf3>:
    32a8:	bb 27       	eor	r27, r27
    32aa:	aa 27       	eor	r26, r26
    32ac:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__addsf3x>
    32b0:	0c 94 ae 1b 	jmp	0x375c	; 0x375c <__fp_round>
    32b4:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__fp_pscA>
    32b8:	38 f0       	brcs	.+14     	; 0x32c8 <__addsf3+0x20>
    32ba:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <__fp_pscB>
    32be:	20 f0       	brcs	.+8      	; 0x32c8 <__addsf3+0x20>
    32c0:	39 f4       	brne	.+14     	; 0x32d0 <__addsf3+0x28>
    32c2:	9f 3f       	cpi	r25, 0xFF	; 255
    32c4:	19 f4       	brne	.+6      	; 0x32cc <__addsf3+0x24>
    32c6:	26 f4       	brtc	.+8      	; 0x32d0 <__addsf3+0x28>
    32c8:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__fp_nan>
    32cc:	0e f4       	brtc	.+2      	; 0x32d0 <__addsf3+0x28>
    32ce:	e0 95       	com	r30
    32d0:	e7 fb       	bst	r30, 7
    32d2:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__fp_inf>

000032d6 <__addsf3x>:
    32d6:	e9 2f       	mov	r30, r25
    32d8:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__fp_split3>
    32dc:	58 f3       	brcs	.-42     	; 0x32b4 <__addsf3+0xc>
    32de:	ba 17       	cp	r27, r26
    32e0:	62 07       	cpc	r22, r18
    32e2:	73 07       	cpc	r23, r19
    32e4:	84 07       	cpc	r24, r20
    32e6:	95 07       	cpc	r25, r21
    32e8:	20 f0       	brcs	.+8      	; 0x32f2 <__addsf3x+0x1c>
    32ea:	79 f4       	brne	.+30     	; 0x330a <__addsf3x+0x34>
    32ec:	a6 f5       	brtc	.+104    	; 0x3356 <__addsf3x+0x80>
    32ee:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <__fp_zero>
    32f2:	0e f4       	brtc	.+2      	; 0x32f6 <__addsf3x+0x20>
    32f4:	e0 95       	com	r30
    32f6:	0b 2e       	mov	r0, r27
    32f8:	ba 2f       	mov	r27, r26
    32fa:	a0 2d       	mov	r26, r0
    32fc:	0b 01       	movw	r0, r22
    32fe:	b9 01       	movw	r22, r18
    3300:	90 01       	movw	r18, r0
    3302:	0c 01       	movw	r0, r24
    3304:	ca 01       	movw	r24, r20
    3306:	a0 01       	movw	r20, r0
    3308:	11 24       	eor	r1, r1
    330a:	ff 27       	eor	r31, r31
    330c:	59 1b       	sub	r21, r25
    330e:	99 f0       	breq	.+38     	; 0x3336 <__addsf3x+0x60>
    3310:	59 3f       	cpi	r21, 0xF9	; 249
    3312:	50 f4       	brcc	.+20     	; 0x3328 <__addsf3x+0x52>
    3314:	50 3e       	cpi	r21, 0xE0	; 224
    3316:	68 f1       	brcs	.+90     	; 0x3372 <__addsf3x+0x9c>
    3318:	1a 16       	cp	r1, r26
    331a:	f0 40       	sbci	r31, 0x00	; 0
    331c:	a2 2f       	mov	r26, r18
    331e:	23 2f       	mov	r18, r19
    3320:	34 2f       	mov	r19, r20
    3322:	44 27       	eor	r20, r20
    3324:	58 5f       	subi	r21, 0xF8	; 248
    3326:	f3 cf       	rjmp	.-26     	; 0x330e <__addsf3x+0x38>
    3328:	46 95       	lsr	r20
    332a:	37 95       	ror	r19
    332c:	27 95       	ror	r18
    332e:	a7 95       	ror	r26
    3330:	f0 40       	sbci	r31, 0x00	; 0
    3332:	53 95       	inc	r21
    3334:	c9 f7       	brne	.-14     	; 0x3328 <__addsf3x+0x52>
    3336:	7e f4       	brtc	.+30     	; 0x3356 <__addsf3x+0x80>
    3338:	1f 16       	cp	r1, r31
    333a:	ba 0b       	sbc	r27, r26
    333c:	62 0b       	sbc	r22, r18
    333e:	73 0b       	sbc	r23, r19
    3340:	84 0b       	sbc	r24, r20
    3342:	ba f0       	brmi	.+46     	; 0x3372 <__addsf3x+0x9c>
    3344:	91 50       	subi	r25, 0x01	; 1
    3346:	a1 f0       	breq	.+40     	; 0x3370 <__addsf3x+0x9a>
    3348:	ff 0f       	add	r31, r31
    334a:	bb 1f       	adc	r27, r27
    334c:	66 1f       	adc	r22, r22
    334e:	77 1f       	adc	r23, r23
    3350:	88 1f       	adc	r24, r24
    3352:	c2 f7       	brpl	.-16     	; 0x3344 <__addsf3x+0x6e>
    3354:	0e c0       	rjmp	.+28     	; 0x3372 <__addsf3x+0x9c>
    3356:	ba 0f       	add	r27, r26
    3358:	62 1f       	adc	r22, r18
    335a:	73 1f       	adc	r23, r19
    335c:	84 1f       	adc	r24, r20
    335e:	48 f4       	brcc	.+18     	; 0x3372 <__addsf3x+0x9c>
    3360:	87 95       	ror	r24
    3362:	77 95       	ror	r23
    3364:	67 95       	ror	r22
    3366:	b7 95       	ror	r27
    3368:	f7 95       	ror	r31
    336a:	9e 3f       	cpi	r25, 0xFE	; 254
    336c:	08 f0       	brcs	.+2      	; 0x3370 <__addsf3x+0x9a>
    336e:	b0 cf       	rjmp	.-160    	; 0x32d0 <__addsf3+0x28>
    3370:	93 95       	inc	r25
    3372:	88 0f       	add	r24, r24
    3374:	08 f0       	brcs	.+2      	; 0x3378 <__addsf3x+0xa2>
    3376:	99 27       	eor	r25, r25
    3378:	ee 0f       	add	r30, r30
    337a:	97 95       	ror	r25
    337c:	87 95       	ror	r24
    337e:	08 95       	ret
    3380:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__fp_pscA>
    3384:	60 f0       	brcs	.+24     	; 0x339e <__addsf3x+0xc8>
    3386:	80 e8       	ldi	r24, 0x80	; 128
    3388:	91 e0       	ldi	r25, 0x01	; 1
    338a:	09 f4       	brne	.+2      	; 0x338e <__addsf3x+0xb8>
    338c:	9e ef       	ldi	r25, 0xFE	; 254
    338e:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <__fp_pscB>
    3392:	28 f0       	brcs	.+10     	; 0x339e <__addsf3x+0xc8>
    3394:	40 e8       	ldi	r20, 0x80	; 128
    3396:	51 e0       	ldi	r21, 0x01	; 1
    3398:	71 f4       	brne	.+28     	; 0x33b6 <atan2+0x10>
    339a:	5e ef       	ldi	r21, 0xFE	; 254
    339c:	0c c0       	rjmp	.+24     	; 0x33b6 <atan2+0x10>
    339e:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__fp_nan>
    33a2:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <__fp_zero>

000033a6 <atan2>:
    33a6:	e9 2f       	mov	r30, r25
    33a8:	e0 78       	andi	r30, 0x80	; 128
    33aa:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__fp_split3>
    33ae:	40 f3       	brcs	.-48     	; 0x3380 <__addsf3x+0xaa>
    33b0:	09 2e       	mov	r0, r25
    33b2:	05 2a       	or	r0, r21
    33b4:	b1 f3       	breq	.-20     	; 0x33a2 <__addsf3x+0xcc>
    33b6:	26 17       	cp	r18, r22
    33b8:	37 07       	cpc	r19, r23
    33ba:	48 07       	cpc	r20, r24
    33bc:	59 07       	cpc	r21, r25
    33be:	38 f0       	brcs	.+14     	; 0x33ce <atan2+0x28>
    33c0:	0e 2e       	mov	r0, r30
    33c2:	07 f8       	bld	r0, 7
    33c4:	e0 25       	eor	r30, r0
    33c6:	69 f0       	breq	.+26     	; 0x33e2 <atan2+0x3c>
    33c8:	e0 25       	eor	r30, r0
    33ca:	e0 64       	ori	r30, 0x40	; 64
    33cc:	0a c0       	rjmp	.+20     	; 0x33e2 <atan2+0x3c>
    33ce:	ef 63       	ori	r30, 0x3F	; 63
    33d0:	07 f8       	bld	r0, 7
    33d2:	00 94       	com	r0
    33d4:	07 fa       	bst	r0, 7
    33d6:	db 01       	movw	r26, r22
    33d8:	b9 01       	movw	r22, r18
    33da:	9d 01       	movw	r18, r26
    33dc:	dc 01       	movw	r26, r24
    33de:	ca 01       	movw	r24, r20
    33e0:	ad 01       	movw	r20, r26
    33e2:	ef 93       	push	r30
    33e4:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__divsf3_pse>
    33e8:	0e 94 ae 1b 	call	0x375c	; 0x375c <__fp_round>
    33ec:	0e 94 03 1a 	call	0x3406	; 0x3406 <atan>
    33f0:	5f 91       	pop	r21
    33f2:	55 23       	and	r21, r21
    33f4:	39 f0       	breq	.+14     	; 0x3404 <atan2+0x5e>
    33f6:	2b ed       	ldi	r18, 0xDB	; 219
    33f8:	3f e0       	ldi	r19, 0x0F	; 15
    33fa:	49 e4       	ldi	r20, 0x49	; 73
    33fc:	50 fd       	sbrc	r21, 0
    33fe:	49 ec       	ldi	r20, 0xC9	; 201
    3400:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__addsf3>
    3404:	08 95       	ret

00003406 <atan>:
    3406:	df 93       	push	r29
    3408:	dd 27       	eor	r29, r29
    340a:	b9 2f       	mov	r27, r25
    340c:	bf 77       	andi	r27, 0x7F	; 127
    340e:	40 e8       	ldi	r20, 0x80	; 128
    3410:	5f e3       	ldi	r21, 0x3F	; 63
    3412:	16 16       	cp	r1, r22
    3414:	17 06       	cpc	r1, r23
    3416:	48 07       	cpc	r20, r24
    3418:	5b 07       	cpc	r21, r27
    341a:	18 f4       	brcc	.+6      	; 0x3422 <atan+0x1c>
    341c:	d9 2f       	mov	r29, r25
    341e:	0e 94 01 1c 	call	0x3802	; 0x3802 <inverse>
    3422:	9f 93       	push	r25
    3424:	8f 93       	push	r24
    3426:	7f 93       	push	r23
    3428:	6f 93       	push	r22
    342a:	0e 94 c4 1c 	call	0x3988	; 0x3988 <square>
    342e:	e4 ed       	ldi	r30, 0xD4	; 212
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	0e 94 4e 1b 	call	0x369c	; 0x369c <__fp_powser>
    3436:	0e 94 ae 1b 	call	0x375c	; 0x375c <__fp_round>
    343a:	2f 91       	pop	r18
    343c:	3f 91       	pop	r19
    343e:	4f 91       	pop	r20
    3440:	5f 91       	pop	r21
    3442:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__mulsf3x>
    3446:	dd 23       	and	r29, r29
    3448:	51 f0       	breq	.+20     	; 0x345e <atan+0x58>
    344a:	90 58       	subi	r25, 0x80	; 128
    344c:	a2 ea       	ldi	r26, 0xA2	; 162
    344e:	2a ed       	ldi	r18, 0xDA	; 218
    3450:	3f e0       	ldi	r19, 0x0F	; 15
    3452:	49 ec       	ldi	r20, 0xC9	; 201
    3454:	5f e3       	ldi	r21, 0x3F	; 63
    3456:	d0 78       	andi	r29, 0x80	; 128
    3458:	5d 27       	eor	r21, r29
    345a:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__addsf3x>
    345e:	df 91       	pop	r29
    3460:	0c 94 ae 1b 	jmp	0x375c	; 0x375c <__fp_round>

00003464 <__cmpsf2>:
    3464:	0e 94 21 1b 	call	0x3642	; 0x3642 <__fp_cmp>
    3468:	08 f4       	brcc	.+2      	; 0x346c <__cmpsf2+0x8>
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	08 95       	ret

0000346e <cos>:
    346e:	0e 94 85 1b 	call	0x370a	; 0x370a <__fp_rempio2>
    3472:	e3 95       	inc	r30
    3474:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <__fp_sinus>

00003478 <__divsf3>:
    3478:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__divsf3x>
    347c:	0c 94 ae 1b 	jmp	0x375c	; 0x375c <__fp_round>
    3480:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <__fp_pscB>
    3484:	58 f0       	brcs	.+22     	; 0x349c <__divsf3+0x24>
    3486:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__fp_pscA>
    348a:	40 f0       	brcs	.+16     	; 0x349c <__divsf3+0x24>
    348c:	29 f4       	brne	.+10     	; 0x3498 <__divsf3+0x20>
    348e:	5f 3f       	cpi	r21, 0xFF	; 255
    3490:	29 f0       	breq	.+10     	; 0x349c <__divsf3+0x24>
    3492:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__fp_inf>
    3496:	51 11       	cpse	r21, r1
    3498:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__fp_szero>
    349c:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__fp_nan>

000034a0 <__divsf3x>:
    34a0:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__fp_split3>
    34a4:	68 f3       	brcs	.-38     	; 0x3480 <__divsf3+0x8>

000034a6 <__divsf3_pse>:
    34a6:	99 23       	and	r25, r25
    34a8:	b1 f3       	breq	.-20     	; 0x3496 <__divsf3+0x1e>
    34aa:	55 23       	and	r21, r21
    34ac:	91 f3       	breq	.-28     	; 0x3492 <__divsf3+0x1a>
    34ae:	95 1b       	sub	r25, r21
    34b0:	55 0b       	sbc	r21, r21
    34b2:	bb 27       	eor	r27, r27
    34b4:	aa 27       	eor	r26, r26
    34b6:	62 17       	cp	r22, r18
    34b8:	73 07       	cpc	r23, r19
    34ba:	84 07       	cpc	r24, r20
    34bc:	38 f0       	brcs	.+14     	; 0x34cc <__divsf3_pse+0x26>
    34be:	9f 5f       	subi	r25, 0xFF	; 255
    34c0:	5f 4f       	sbci	r21, 0xFF	; 255
    34c2:	22 0f       	add	r18, r18
    34c4:	33 1f       	adc	r19, r19
    34c6:	44 1f       	adc	r20, r20
    34c8:	aa 1f       	adc	r26, r26
    34ca:	a9 f3       	breq	.-22     	; 0x34b6 <__divsf3_pse+0x10>
    34cc:	35 d0       	rcall	.+106    	; 0x3538 <__divsf3_pse+0x92>
    34ce:	0e 2e       	mov	r0, r30
    34d0:	3a f0       	brmi	.+14     	; 0x34e0 <__divsf3_pse+0x3a>
    34d2:	e0 e8       	ldi	r30, 0x80	; 128
    34d4:	32 d0       	rcall	.+100    	; 0x353a <__divsf3_pse+0x94>
    34d6:	91 50       	subi	r25, 0x01	; 1
    34d8:	50 40       	sbci	r21, 0x00	; 0
    34da:	e6 95       	lsr	r30
    34dc:	00 1c       	adc	r0, r0
    34de:	ca f7       	brpl	.-14     	; 0x34d2 <__divsf3_pse+0x2c>
    34e0:	2b d0       	rcall	.+86     	; 0x3538 <__divsf3_pse+0x92>
    34e2:	fe 2f       	mov	r31, r30
    34e4:	29 d0       	rcall	.+82     	; 0x3538 <__divsf3_pse+0x92>
    34e6:	66 0f       	add	r22, r22
    34e8:	77 1f       	adc	r23, r23
    34ea:	88 1f       	adc	r24, r24
    34ec:	bb 1f       	adc	r27, r27
    34ee:	26 17       	cp	r18, r22
    34f0:	37 07       	cpc	r19, r23
    34f2:	48 07       	cpc	r20, r24
    34f4:	ab 07       	cpc	r26, r27
    34f6:	b0 e8       	ldi	r27, 0x80	; 128
    34f8:	09 f0       	breq	.+2      	; 0x34fc <__divsf3_pse+0x56>
    34fa:	bb 0b       	sbc	r27, r27
    34fc:	80 2d       	mov	r24, r0
    34fe:	bf 01       	movw	r22, r30
    3500:	ff 27       	eor	r31, r31
    3502:	93 58       	subi	r25, 0x83	; 131
    3504:	5f 4f       	sbci	r21, 0xFF	; 255
    3506:	3a f0       	brmi	.+14     	; 0x3516 <__divsf3_pse+0x70>
    3508:	9e 3f       	cpi	r25, 0xFE	; 254
    350a:	51 05       	cpc	r21, r1
    350c:	78 f0       	brcs	.+30     	; 0x352c <__divsf3_pse+0x86>
    350e:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__fp_inf>
    3512:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__fp_szero>
    3516:	5f 3f       	cpi	r21, 0xFF	; 255
    3518:	e4 f3       	brlt	.-8      	; 0x3512 <__divsf3_pse+0x6c>
    351a:	98 3e       	cpi	r25, 0xE8	; 232
    351c:	d4 f3       	brlt	.-12     	; 0x3512 <__divsf3_pse+0x6c>
    351e:	86 95       	lsr	r24
    3520:	77 95       	ror	r23
    3522:	67 95       	ror	r22
    3524:	b7 95       	ror	r27
    3526:	f7 95       	ror	r31
    3528:	9f 5f       	subi	r25, 0xFF	; 255
    352a:	c9 f7       	brne	.-14     	; 0x351e <__divsf3_pse+0x78>
    352c:	88 0f       	add	r24, r24
    352e:	91 1d       	adc	r25, r1
    3530:	96 95       	lsr	r25
    3532:	87 95       	ror	r24
    3534:	97 f9       	bld	r25, 7
    3536:	08 95       	ret
    3538:	e1 e0       	ldi	r30, 0x01	; 1
    353a:	66 0f       	add	r22, r22
    353c:	77 1f       	adc	r23, r23
    353e:	88 1f       	adc	r24, r24
    3540:	bb 1f       	adc	r27, r27
    3542:	62 17       	cp	r22, r18
    3544:	73 07       	cpc	r23, r19
    3546:	84 07       	cpc	r24, r20
    3548:	ba 07       	cpc	r27, r26
    354a:	20 f0       	brcs	.+8      	; 0x3554 <__divsf3_pse+0xae>
    354c:	62 1b       	sub	r22, r18
    354e:	73 0b       	sbc	r23, r19
    3550:	84 0b       	sbc	r24, r20
    3552:	ba 0b       	sbc	r27, r26
    3554:	ee 1f       	adc	r30, r30
    3556:	88 f7       	brcc	.-30     	; 0x353a <__divsf3_pse+0x94>
    3558:	e0 95       	com	r30
    355a:	08 95       	ret

0000355c <__fixsfsi>:
    355c:	0e 94 b5 1a 	call	0x356a	; 0x356a <__fixunssfsi>
    3560:	68 94       	set
    3562:	b1 11       	cpse	r27, r1
    3564:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__fp_szero>
    3568:	08 95       	ret

0000356a <__fixunssfsi>:
    356a:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <__fp_splitA>
    356e:	88 f0       	brcs	.+34     	; 0x3592 <__fixunssfsi+0x28>
    3570:	9f 57       	subi	r25, 0x7F	; 127
    3572:	98 f0       	brcs	.+38     	; 0x359a <__fixunssfsi+0x30>
    3574:	b9 2f       	mov	r27, r25
    3576:	99 27       	eor	r25, r25
    3578:	b7 51       	subi	r27, 0x17	; 23
    357a:	b0 f0       	brcs	.+44     	; 0x35a8 <__fixunssfsi+0x3e>
    357c:	e1 f0       	breq	.+56     	; 0x35b6 <__fixunssfsi+0x4c>
    357e:	66 0f       	add	r22, r22
    3580:	77 1f       	adc	r23, r23
    3582:	88 1f       	adc	r24, r24
    3584:	99 1f       	adc	r25, r25
    3586:	1a f0       	brmi	.+6      	; 0x358e <__fixunssfsi+0x24>
    3588:	ba 95       	dec	r27
    358a:	c9 f7       	brne	.-14     	; 0x357e <__fixunssfsi+0x14>
    358c:	14 c0       	rjmp	.+40     	; 0x35b6 <__fixunssfsi+0x4c>
    358e:	b1 30       	cpi	r27, 0x01	; 1
    3590:	91 f0       	breq	.+36     	; 0x35b6 <__fixunssfsi+0x4c>
    3592:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__fp_zero>
    3596:	b1 e0       	ldi	r27, 0x01	; 1
    3598:	08 95       	ret
    359a:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <__fp_zero>
    359e:	67 2f       	mov	r22, r23
    35a0:	78 2f       	mov	r23, r24
    35a2:	88 27       	eor	r24, r24
    35a4:	b8 5f       	subi	r27, 0xF8	; 248
    35a6:	39 f0       	breq	.+14     	; 0x35b6 <__fixunssfsi+0x4c>
    35a8:	b9 3f       	cpi	r27, 0xF9	; 249
    35aa:	cc f3       	brlt	.-14     	; 0x359e <__fixunssfsi+0x34>
    35ac:	86 95       	lsr	r24
    35ae:	77 95       	ror	r23
    35b0:	67 95       	ror	r22
    35b2:	b3 95       	inc	r27
    35b4:	d9 f7       	brne	.-10     	; 0x35ac <__fixunssfsi+0x42>
    35b6:	3e f4       	brtc	.+14     	; 0x35c6 <__fixunssfsi+0x5c>
    35b8:	90 95       	com	r25
    35ba:	80 95       	com	r24
    35bc:	70 95       	com	r23
    35be:	61 95       	neg	r22
    35c0:	7f 4f       	sbci	r23, 0xFF	; 255
    35c2:	8f 4f       	sbci	r24, 0xFF	; 255
    35c4:	9f 4f       	sbci	r25, 0xFF	; 255
    35c6:	08 95       	ret

000035c8 <__floatunsisf>:
    35c8:	e8 94       	clt
    35ca:	09 c0       	rjmp	.+18     	; 0x35de <__floatsisf+0x12>

000035cc <__floatsisf>:
    35cc:	97 fb       	bst	r25, 7
    35ce:	3e f4       	brtc	.+14     	; 0x35de <__floatsisf+0x12>
    35d0:	90 95       	com	r25
    35d2:	80 95       	com	r24
    35d4:	70 95       	com	r23
    35d6:	61 95       	neg	r22
    35d8:	7f 4f       	sbci	r23, 0xFF	; 255
    35da:	8f 4f       	sbci	r24, 0xFF	; 255
    35dc:	9f 4f       	sbci	r25, 0xFF	; 255
    35de:	99 23       	and	r25, r25
    35e0:	a9 f0       	breq	.+42     	; 0x360c <__floatsisf+0x40>
    35e2:	f9 2f       	mov	r31, r25
    35e4:	96 e9       	ldi	r25, 0x96	; 150
    35e6:	bb 27       	eor	r27, r27
    35e8:	93 95       	inc	r25
    35ea:	f6 95       	lsr	r31
    35ec:	87 95       	ror	r24
    35ee:	77 95       	ror	r23
    35f0:	67 95       	ror	r22
    35f2:	b7 95       	ror	r27
    35f4:	f1 11       	cpse	r31, r1
    35f6:	f8 cf       	rjmp	.-16     	; 0x35e8 <__floatsisf+0x1c>
    35f8:	fa f4       	brpl	.+62     	; 0x3638 <__floatsisf+0x6c>
    35fa:	bb 0f       	add	r27, r27
    35fc:	11 f4       	brne	.+4      	; 0x3602 <__floatsisf+0x36>
    35fe:	60 ff       	sbrs	r22, 0
    3600:	1b c0       	rjmp	.+54     	; 0x3638 <__floatsisf+0x6c>
    3602:	6f 5f       	subi	r22, 0xFF	; 255
    3604:	7f 4f       	sbci	r23, 0xFF	; 255
    3606:	8f 4f       	sbci	r24, 0xFF	; 255
    3608:	9f 4f       	sbci	r25, 0xFF	; 255
    360a:	16 c0       	rjmp	.+44     	; 0x3638 <__floatsisf+0x6c>
    360c:	88 23       	and	r24, r24
    360e:	11 f0       	breq	.+4      	; 0x3614 <__floatsisf+0x48>
    3610:	96 e9       	ldi	r25, 0x96	; 150
    3612:	11 c0       	rjmp	.+34     	; 0x3636 <__floatsisf+0x6a>
    3614:	77 23       	and	r23, r23
    3616:	21 f0       	breq	.+8      	; 0x3620 <__floatsisf+0x54>
    3618:	9e e8       	ldi	r25, 0x8E	; 142
    361a:	87 2f       	mov	r24, r23
    361c:	76 2f       	mov	r23, r22
    361e:	05 c0       	rjmp	.+10     	; 0x362a <__floatsisf+0x5e>
    3620:	66 23       	and	r22, r22
    3622:	71 f0       	breq	.+28     	; 0x3640 <__floatsisf+0x74>
    3624:	96 e8       	ldi	r25, 0x86	; 134
    3626:	86 2f       	mov	r24, r22
    3628:	70 e0       	ldi	r23, 0x00	; 0
    362a:	60 e0       	ldi	r22, 0x00	; 0
    362c:	2a f0       	brmi	.+10     	; 0x3638 <__floatsisf+0x6c>
    362e:	9a 95       	dec	r25
    3630:	66 0f       	add	r22, r22
    3632:	77 1f       	adc	r23, r23
    3634:	88 1f       	adc	r24, r24
    3636:	da f7       	brpl	.-10     	; 0x362e <__floatsisf+0x62>
    3638:	88 0f       	add	r24, r24
    363a:	96 95       	lsr	r25
    363c:	87 95       	ror	r24
    363e:	97 f9       	bld	r25, 7
    3640:	08 95       	ret

00003642 <__fp_cmp>:
    3642:	99 0f       	add	r25, r25
    3644:	00 08       	sbc	r0, r0
    3646:	55 0f       	add	r21, r21
    3648:	aa 0b       	sbc	r26, r26
    364a:	e0 e8       	ldi	r30, 0x80	; 128
    364c:	fe ef       	ldi	r31, 0xFE	; 254
    364e:	16 16       	cp	r1, r22
    3650:	17 06       	cpc	r1, r23
    3652:	e8 07       	cpc	r30, r24
    3654:	f9 07       	cpc	r31, r25
    3656:	c0 f0       	brcs	.+48     	; 0x3688 <__fp_cmp+0x46>
    3658:	12 16       	cp	r1, r18
    365a:	13 06       	cpc	r1, r19
    365c:	e4 07       	cpc	r30, r20
    365e:	f5 07       	cpc	r31, r21
    3660:	98 f0       	brcs	.+38     	; 0x3688 <__fp_cmp+0x46>
    3662:	62 1b       	sub	r22, r18
    3664:	73 0b       	sbc	r23, r19
    3666:	84 0b       	sbc	r24, r20
    3668:	95 0b       	sbc	r25, r21
    366a:	39 f4       	brne	.+14     	; 0x367a <__fp_cmp+0x38>
    366c:	0a 26       	eor	r0, r26
    366e:	61 f0       	breq	.+24     	; 0x3688 <__fp_cmp+0x46>
    3670:	23 2b       	or	r18, r19
    3672:	24 2b       	or	r18, r20
    3674:	25 2b       	or	r18, r21
    3676:	21 f4       	brne	.+8      	; 0x3680 <__fp_cmp+0x3e>
    3678:	08 95       	ret
    367a:	0a 26       	eor	r0, r26
    367c:	09 f4       	brne	.+2      	; 0x3680 <__fp_cmp+0x3e>
    367e:	a1 40       	sbci	r26, 0x01	; 1
    3680:	a6 95       	lsr	r26
    3682:	8f ef       	ldi	r24, 0xFF	; 255
    3684:	81 1d       	adc	r24, r1
    3686:	81 1d       	adc	r24, r1
    3688:	08 95       	ret

0000368a <__fp_inf>:
    368a:	97 f9       	bld	r25, 7
    368c:	9f 67       	ori	r25, 0x7F	; 127
    368e:	80 e8       	ldi	r24, 0x80	; 128
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	60 e0       	ldi	r22, 0x00	; 0
    3694:	08 95       	ret

00003696 <__fp_nan>:
    3696:	9f ef       	ldi	r25, 0xFF	; 255
    3698:	80 ec       	ldi	r24, 0xC0	; 192
    369a:	08 95       	ret

0000369c <__fp_powser>:
    369c:	df 93       	push	r29
    369e:	cf 93       	push	r28
    36a0:	1f 93       	push	r17
    36a2:	0f 93       	push	r16
    36a4:	ff 92       	push	r15
    36a6:	ef 92       	push	r14
    36a8:	df 92       	push	r13
    36aa:	7b 01       	movw	r14, r22
    36ac:	8c 01       	movw	r16, r24
    36ae:	68 94       	set
    36b0:	06 c0       	rjmp	.+12     	; 0x36be <__fp_powser+0x22>
    36b2:	da 2e       	mov	r13, r26
    36b4:	ef 01       	movw	r28, r30
    36b6:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__mulsf3x>
    36ba:	fe 01       	movw	r30, r28
    36bc:	e8 94       	clt
    36be:	a5 91       	lpm	r26, Z+
    36c0:	25 91       	lpm	r18, Z+
    36c2:	35 91       	lpm	r19, Z+
    36c4:	45 91       	lpm	r20, Z+
    36c6:	55 91       	lpm	r21, Z+
    36c8:	a6 f3       	brts	.-24     	; 0x36b2 <__fp_powser+0x16>
    36ca:	ef 01       	movw	r28, r30
    36cc:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__addsf3x>
    36d0:	fe 01       	movw	r30, r28
    36d2:	97 01       	movw	r18, r14
    36d4:	a8 01       	movw	r20, r16
    36d6:	da 94       	dec	r13
    36d8:	69 f7       	brne	.-38     	; 0x36b4 <__fp_powser+0x18>
    36da:	df 90       	pop	r13
    36dc:	ef 90       	pop	r14
    36de:	ff 90       	pop	r15
    36e0:	0f 91       	pop	r16
    36e2:	1f 91       	pop	r17
    36e4:	cf 91       	pop	r28
    36e6:	df 91       	pop	r29
    36e8:	08 95       	ret

000036ea <__fp_pscA>:
    36ea:	00 24       	eor	r0, r0
    36ec:	0a 94       	dec	r0
    36ee:	16 16       	cp	r1, r22
    36f0:	17 06       	cpc	r1, r23
    36f2:	18 06       	cpc	r1, r24
    36f4:	09 06       	cpc	r0, r25
    36f6:	08 95       	ret

000036f8 <__fp_pscB>:
    36f8:	00 24       	eor	r0, r0
    36fa:	0a 94       	dec	r0
    36fc:	12 16       	cp	r1, r18
    36fe:	13 06       	cpc	r1, r19
    3700:	14 06       	cpc	r1, r20
    3702:	05 06       	cpc	r0, r21
    3704:	08 95       	ret
    3706:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__fp_nan>

0000370a <__fp_rempio2>:
    370a:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <__fp_splitA>
    370e:	d8 f3       	brcs	.-10     	; 0x3706 <__fp_pscB+0xe>
    3710:	e8 94       	clt
    3712:	e0 e0       	ldi	r30, 0x00	; 0
    3714:	bb 27       	eor	r27, r27
    3716:	9f 57       	subi	r25, 0x7F	; 127
    3718:	f0 f0       	brcs	.+60     	; 0x3756 <__fp_rempio2+0x4c>
    371a:	2a ed       	ldi	r18, 0xDA	; 218
    371c:	3f e0       	ldi	r19, 0x0F	; 15
    371e:	49 ec       	ldi	r20, 0xC9	; 201
    3720:	06 c0       	rjmp	.+12     	; 0x372e <__fp_rempio2+0x24>
    3722:	ee 0f       	add	r30, r30
    3724:	bb 0f       	add	r27, r27
    3726:	66 1f       	adc	r22, r22
    3728:	77 1f       	adc	r23, r23
    372a:	88 1f       	adc	r24, r24
    372c:	28 f0       	brcs	.+10     	; 0x3738 <__fp_rempio2+0x2e>
    372e:	b2 3a       	cpi	r27, 0xA2	; 162
    3730:	62 07       	cpc	r22, r18
    3732:	73 07       	cpc	r23, r19
    3734:	84 07       	cpc	r24, r20
    3736:	28 f0       	brcs	.+10     	; 0x3742 <__fp_rempio2+0x38>
    3738:	b2 5a       	subi	r27, 0xA2	; 162
    373a:	62 0b       	sbc	r22, r18
    373c:	73 0b       	sbc	r23, r19
    373e:	84 0b       	sbc	r24, r20
    3740:	e3 95       	inc	r30
    3742:	9a 95       	dec	r25
    3744:	72 f7       	brpl	.-36     	; 0x3722 <__fp_rempio2+0x18>
    3746:	80 38       	cpi	r24, 0x80	; 128
    3748:	30 f4       	brcc	.+12     	; 0x3756 <__fp_rempio2+0x4c>
    374a:	9a 95       	dec	r25
    374c:	bb 0f       	add	r27, r27
    374e:	66 1f       	adc	r22, r22
    3750:	77 1f       	adc	r23, r23
    3752:	88 1f       	adc	r24, r24
    3754:	d2 f7       	brpl	.-12     	; 0x374a <__fp_rempio2+0x40>
    3756:	90 48       	sbci	r25, 0x80	; 128
    3758:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__fp_mpack_finite>

0000375c <__fp_round>:
    375c:	09 2e       	mov	r0, r25
    375e:	03 94       	inc	r0
    3760:	00 0c       	add	r0, r0
    3762:	11 f4       	brne	.+4      	; 0x3768 <__fp_round+0xc>
    3764:	88 23       	and	r24, r24
    3766:	52 f0       	brmi	.+20     	; 0x377c <__fp_round+0x20>
    3768:	bb 0f       	add	r27, r27
    376a:	40 f4       	brcc	.+16     	; 0x377c <__fp_round+0x20>
    376c:	bf 2b       	or	r27, r31
    376e:	11 f4       	brne	.+4      	; 0x3774 <__fp_round+0x18>
    3770:	60 ff       	sbrs	r22, 0
    3772:	04 c0       	rjmp	.+8      	; 0x377c <__fp_round+0x20>
    3774:	6f 5f       	subi	r22, 0xFF	; 255
    3776:	7f 4f       	sbci	r23, 0xFF	; 255
    3778:	8f 4f       	sbci	r24, 0xFF	; 255
    377a:	9f 4f       	sbci	r25, 0xFF	; 255
    377c:	08 95       	ret

0000377e <__fp_sinus>:
    377e:	ef 93       	push	r30
    3780:	e0 ff       	sbrs	r30, 0
    3782:	07 c0       	rjmp	.+14     	; 0x3792 <__fp_sinus+0x14>
    3784:	a2 ea       	ldi	r26, 0xA2	; 162
    3786:	2a ed       	ldi	r18, 0xDA	; 218
    3788:	3f e0       	ldi	r19, 0x0F	; 15
    378a:	49 ec       	ldi	r20, 0xC9	; 201
    378c:	5f eb       	ldi	r21, 0xBF	; 191
    378e:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__addsf3x>
    3792:	0e 94 ae 1b 	call	0x375c	; 0x375c <__fp_round>
    3796:	0f 90       	pop	r0
    3798:	03 94       	inc	r0
    379a:	01 fc       	sbrc	r0, 1
    379c:	90 58       	subi	r25, 0x80	; 128
    379e:	e1 e0       	ldi	r30, 0x01	; 1
    37a0:	f1 e0       	ldi	r31, 0x01	; 1
    37a2:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__fp_powsodd>

000037a6 <__fp_split3>:
    37a6:	57 fd       	sbrc	r21, 7
    37a8:	90 58       	subi	r25, 0x80	; 128
    37aa:	44 0f       	add	r20, r20
    37ac:	55 1f       	adc	r21, r21
    37ae:	59 f0       	breq	.+22     	; 0x37c6 <__fp_splitA+0x10>
    37b0:	5f 3f       	cpi	r21, 0xFF	; 255
    37b2:	71 f0       	breq	.+28     	; 0x37d0 <__fp_splitA+0x1a>
    37b4:	47 95       	ror	r20

000037b6 <__fp_splitA>:
    37b6:	88 0f       	add	r24, r24
    37b8:	97 fb       	bst	r25, 7
    37ba:	99 1f       	adc	r25, r25
    37bc:	61 f0       	breq	.+24     	; 0x37d6 <__fp_splitA+0x20>
    37be:	9f 3f       	cpi	r25, 0xFF	; 255
    37c0:	79 f0       	breq	.+30     	; 0x37e0 <__fp_splitA+0x2a>
    37c2:	87 95       	ror	r24
    37c4:	08 95       	ret
    37c6:	12 16       	cp	r1, r18
    37c8:	13 06       	cpc	r1, r19
    37ca:	14 06       	cpc	r1, r20
    37cc:	55 1f       	adc	r21, r21
    37ce:	f2 cf       	rjmp	.-28     	; 0x37b4 <__fp_split3+0xe>
    37d0:	46 95       	lsr	r20
    37d2:	f1 df       	rcall	.-30     	; 0x37b6 <__fp_splitA>
    37d4:	08 c0       	rjmp	.+16     	; 0x37e6 <__fp_splitA+0x30>
    37d6:	16 16       	cp	r1, r22
    37d8:	17 06       	cpc	r1, r23
    37da:	18 06       	cpc	r1, r24
    37dc:	99 1f       	adc	r25, r25
    37de:	f1 cf       	rjmp	.-30     	; 0x37c2 <__fp_splitA+0xc>
    37e0:	86 95       	lsr	r24
    37e2:	71 05       	cpc	r23, r1
    37e4:	61 05       	cpc	r22, r1
    37e6:	08 94       	sec
    37e8:	08 95       	ret

000037ea <__fp_zero>:
    37ea:	e8 94       	clt

000037ec <__fp_szero>:
    37ec:	bb 27       	eor	r27, r27
    37ee:	66 27       	eor	r22, r22
    37f0:	77 27       	eor	r23, r23
    37f2:	cb 01       	movw	r24, r22
    37f4:	97 f9       	bld	r25, 7
    37f6:	08 95       	ret

000037f8 <__gesf2>:
    37f8:	0e 94 21 1b 	call	0x3642	; 0x3642 <__fp_cmp>
    37fc:	08 f4       	brcc	.+2      	; 0x3800 <__gesf2+0x8>
    37fe:	8f ef       	ldi	r24, 0xFF	; 255
    3800:	08 95       	ret

00003802 <inverse>:
    3802:	9b 01       	movw	r18, r22
    3804:	ac 01       	movw	r20, r24
    3806:	60 e0       	ldi	r22, 0x00	; 0
    3808:	70 e0       	ldi	r23, 0x00	; 0
    380a:	80 e8       	ldi	r24, 0x80	; 128
    380c:	9f e3       	ldi	r25, 0x3F	; 63
    380e:	0c 94 3c 1a 	jmp	0x3478	; 0x3478 <__divsf3>

00003812 <__mulsf3>:
    3812:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__mulsf3x>
    3816:	0c 94 ae 1b 	jmp	0x375c	; 0x375c <__fp_round>
    381a:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__fp_pscA>
    381e:	38 f0       	brcs	.+14     	; 0x382e <__mulsf3+0x1c>
    3820:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <__fp_pscB>
    3824:	20 f0       	brcs	.+8      	; 0x382e <__mulsf3+0x1c>
    3826:	95 23       	and	r25, r21
    3828:	11 f0       	breq	.+4      	; 0x382e <__mulsf3+0x1c>
    382a:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__fp_inf>
    382e:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__fp_nan>
    3832:	11 24       	eor	r1, r1
    3834:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__fp_szero>

00003838 <__mulsf3x>:
    3838:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__fp_split3>
    383c:	70 f3       	brcs	.-36     	; 0x381a <__mulsf3+0x8>

0000383e <__mulsf3_pse>:
    383e:	95 9f       	mul	r25, r21
    3840:	c1 f3       	breq	.-16     	; 0x3832 <__mulsf3+0x20>
    3842:	95 0f       	add	r25, r21
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	55 1f       	adc	r21, r21
    3848:	62 9f       	mul	r22, r18
    384a:	f0 01       	movw	r30, r0
    384c:	72 9f       	mul	r23, r18
    384e:	bb 27       	eor	r27, r27
    3850:	f0 0d       	add	r31, r0
    3852:	b1 1d       	adc	r27, r1
    3854:	63 9f       	mul	r22, r19
    3856:	aa 27       	eor	r26, r26
    3858:	f0 0d       	add	r31, r0
    385a:	b1 1d       	adc	r27, r1
    385c:	aa 1f       	adc	r26, r26
    385e:	64 9f       	mul	r22, r20
    3860:	66 27       	eor	r22, r22
    3862:	b0 0d       	add	r27, r0
    3864:	a1 1d       	adc	r26, r1
    3866:	66 1f       	adc	r22, r22
    3868:	82 9f       	mul	r24, r18
    386a:	22 27       	eor	r18, r18
    386c:	b0 0d       	add	r27, r0
    386e:	a1 1d       	adc	r26, r1
    3870:	62 1f       	adc	r22, r18
    3872:	73 9f       	mul	r23, r19
    3874:	b0 0d       	add	r27, r0
    3876:	a1 1d       	adc	r26, r1
    3878:	62 1f       	adc	r22, r18
    387a:	83 9f       	mul	r24, r19
    387c:	a0 0d       	add	r26, r0
    387e:	61 1d       	adc	r22, r1
    3880:	22 1f       	adc	r18, r18
    3882:	74 9f       	mul	r23, r20
    3884:	33 27       	eor	r19, r19
    3886:	a0 0d       	add	r26, r0
    3888:	61 1d       	adc	r22, r1
    388a:	23 1f       	adc	r18, r19
    388c:	84 9f       	mul	r24, r20
    388e:	60 0d       	add	r22, r0
    3890:	21 1d       	adc	r18, r1
    3892:	82 2f       	mov	r24, r18
    3894:	76 2f       	mov	r23, r22
    3896:	6a 2f       	mov	r22, r26
    3898:	11 24       	eor	r1, r1
    389a:	9f 57       	subi	r25, 0x7F	; 127
    389c:	50 40       	sbci	r21, 0x00	; 0
    389e:	9a f0       	brmi	.+38     	; 0x38c6 <__mulsf3_pse+0x88>
    38a0:	f1 f0       	breq	.+60     	; 0x38de <__mulsf3_pse+0xa0>
    38a2:	88 23       	and	r24, r24
    38a4:	4a f0       	brmi	.+18     	; 0x38b8 <__mulsf3_pse+0x7a>
    38a6:	ee 0f       	add	r30, r30
    38a8:	ff 1f       	adc	r31, r31
    38aa:	bb 1f       	adc	r27, r27
    38ac:	66 1f       	adc	r22, r22
    38ae:	77 1f       	adc	r23, r23
    38b0:	88 1f       	adc	r24, r24
    38b2:	91 50       	subi	r25, 0x01	; 1
    38b4:	50 40       	sbci	r21, 0x00	; 0
    38b6:	a9 f7       	brne	.-22     	; 0x38a2 <__mulsf3_pse+0x64>
    38b8:	9e 3f       	cpi	r25, 0xFE	; 254
    38ba:	51 05       	cpc	r21, r1
    38bc:	80 f0       	brcs	.+32     	; 0x38de <__mulsf3_pse+0xa0>
    38be:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__fp_inf>
    38c2:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__fp_szero>
    38c6:	5f 3f       	cpi	r21, 0xFF	; 255
    38c8:	e4 f3       	brlt	.-8      	; 0x38c2 <__mulsf3_pse+0x84>
    38ca:	98 3e       	cpi	r25, 0xE8	; 232
    38cc:	d4 f3       	brlt	.-12     	; 0x38c2 <__mulsf3_pse+0x84>
    38ce:	86 95       	lsr	r24
    38d0:	77 95       	ror	r23
    38d2:	67 95       	ror	r22
    38d4:	b7 95       	ror	r27
    38d6:	f7 95       	ror	r31
    38d8:	e7 95       	ror	r30
    38da:	9f 5f       	subi	r25, 0xFF	; 255
    38dc:	c1 f7       	brne	.-16     	; 0x38ce <__mulsf3_pse+0x90>
    38de:	fe 2b       	or	r31, r30
    38e0:	88 0f       	add	r24, r24
    38e2:	91 1d       	adc	r25, r1
    38e4:	96 95       	lsr	r25
    38e6:	87 95       	ror	r24
    38e8:	97 f9       	bld	r25, 7
    38ea:	08 95       	ret

000038ec <sin>:
    38ec:	9f 93       	push	r25
    38ee:	0e 94 85 1b 	call	0x370a	; 0x370a <__fp_rempio2>
    38f2:	0f 90       	pop	r0
    38f4:	07 fc       	sbrc	r0, 7
    38f6:	ee 5f       	subi	r30, 0xFE	; 254
    38f8:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <__fp_sinus>
    38fc:	19 f4       	brne	.+6      	; 0x3904 <sin+0x18>
    38fe:	16 f4       	brtc	.+4      	; 0x3904 <sin+0x18>
    3900:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__fp_nan>
    3904:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__fp_mpack>

00003908 <sqrt>:
    3908:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <__fp_splitA>
    390c:	b8 f3       	brcs	.-18     	; 0x38fc <sin+0x10>
    390e:	99 23       	and	r25, r25
    3910:	c9 f3       	breq	.-14     	; 0x3904 <sin+0x18>
    3912:	b6 f3       	brts	.-20     	; 0x3900 <sin+0x14>
    3914:	9f 57       	subi	r25, 0x7F	; 127
    3916:	55 0b       	sbc	r21, r21
    3918:	87 ff       	sbrs	r24, 7
    391a:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__fp_norm2>
    391e:	00 24       	eor	r0, r0
    3920:	a0 e6       	ldi	r26, 0x60	; 96
    3922:	40 ea       	ldi	r20, 0xA0	; 160
    3924:	90 01       	movw	r18, r0
    3926:	80 58       	subi	r24, 0x80	; 128
    3928:	56 95       	lsr	r21
    392a:	97 95       	ror	r25
    392c:	28 f4       	brcc	.+10     	; 0x3938 <sqrt+0x30>
    392e:	80 5c       	subi	r24, 0xC0	; 192
    3930:	66 0f       	add	r22, r22
    3932:	77 1f       	adc	r23, r23
    3934:	88 1f       	adc	r24, r24
    3936:	20 f0       	brcs	.+8      	; 0x3940 <sqrt+0x38>
    3938:	26 17       	cp	r18, r22
    393a:	37 07       	cpc	r19, r23
    393c:	48 07       	cpc	r20, r24
    393e:	30 f4       	brcc	.+12     	; 0x394c <sqrt+0x44>
    3940:	62 1b       	sub	r22, r18
    3942:	73 0b       	sbc	r23, r19
    3944:	84 0b       	sbc	r24, r20
    3946:	20 29       	or	r18, r0
    3948:	31 29       	or	r19, r1
    394a:	4a 2b       	or	r20, r26
    394c:	a6 95       	lsr	r26
    394e:	17 94       	ror	r1
    3950:	07 94       	ror	r0
    3952:	20 25       	eor	r18, r0
    3954:	31 25       	eor	r19, r1
    3956:	4a 27       	eor	r20, r26
    3958:	58 f7       	brcc	.-42     	; 0x3930 <sqrt+0x28>
    395a:	66 0f       	add	r22, r22
    395c:	77 1f       	adc	r23, r23
    395e:	88 1f       	adc	r24, r24
    3960:	20 f0       	brcs	.+8      	; 0x396a <sqrt+0x62>
    3962:	26 17       	cp	r18, r22
    3964:	37 07       	cpc	r19, r23
    3966:	48 07       	cpc	r20, r24
    3968:	30 f4       	brcc	.+12     	; 0x3976 <sqrt+0x6e>
    396a:	62 0b       	sbc	r22, r18
    396c:	73 0b       	sbc	r23, r19
    396e:	84 0b       	sbc	r24, r20
    3970:	20 0d       	add	r18, r0
    3972:	31 1d       	adc	r19, r1
    3974:	41 1d       	adc	r20, r1
    3976:	a0 95       	com	r26
    3978:	81 f7       	brne	.-32     	; 0x395a <sqrt+0x52>
    397a:	b9 01       	movw	r22, r18
    397c:	84 2f       	mov	r24, r20
    397e:	91 58       	subi	r25, 0x81	; 129
    3980:	88 0f       	add	r24, r24
    3982:	96 95       	lsr	r25
    3984:	87 95       	ror	r24
    3986:	08 95       	ret

00003988 <square>:
    3988:	9b 01       	movw	r18, r22
    398a:	ac 01       	movw	r20, r24
    398c:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__mulsf3>

00003990 <__fp_mpack>:
    3990:	9f 3f       	cpi	r25, 0xFF	; 255
    3992:	31 f0       	breq	.+12     	; 0x39a0 <__fp_mpack_finite+0xc>

00003994 <__fp_mpack_finite>:
    3994:	91 50       	subi	r25, 0x01	; 1
    3996:	20 f4       	brcc	.+8      	; 0x39a0 <__fp_mpack_finite+0xc>
    3998:	87 95       	ror	r24
    399a:	77 95       	ror	r23
    399c:	67 95       	ror	r22
    399e:	b7 95       	ror	r27
    39a0:	88 0f       	add	r24, r24
    39a2:	91 1d       	adc	r25, r1
    39a4:	96 95       	lsr	r25
    39a6:	87 95       	ror	r24
    39a8:	97 f9       	bld	r25, 7
    39aa:	08 95       	ret

000039ac <__fp_norm2>:
    39ac:	91 50       	subi	r25, 0x01	; 1
    39ae:	50 40       	sbci	r21, 0x00	; 0
    39b0:	66 0f       	add	r22, r22
    39b2:	77 1f       	adc	r23, r23
    39b4:	88 1f       	adc	r24, r24
    39b6:	d2 f7       	brpl	.-12     	; 0x39ac <__fp_norm2>
    39b8:	08 95       	ret

000039ba <__fp_powsodd>:
    39ba:	9f 93       	push	r25
    39bc:	8f 93       	push	r24
    39be:	7f 93       	push	r23
    39c0:	6f 93       	push	r22
    39c2:	ff 93       	push	r31
    39c4:	ef 93       	push	r30
    39c6:	9b 01       	movw	r18, r22
    39c8:	ac 01       	movw	r20, r24
    39ca:	0e 94 09 1c 	call	0x3812	; 0x3812 <__mulsf3>
    39ce:	ef 91       	pop	r30
    39d0:	ff 91       	pop	r31
    39d2:	0e 94 4e 1b 	call	0x369c	; 0x369c <__fp_powser>
    39d6:	2f 91       	pop	r18
    39d8:	3f 91       	pop	r19
    39da:	4f 91       	pop	r20
    39dc:	5f 91       	pop	r21
    39de:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__mulsf3>

000039e2 <__tablejump2__>:
    39e2:	ee 0f       	add	r30, r30
    39e4:	ff 1f       	adc	r31, r31
    39e6:	05 90       	lpm	r0, Z+
    39e8:	f4 91       	lpm	r31, Z
    39ea:	e0 2d       	mov	r30, r0
    39ec:	09 94       	ijmp

000039ee <__itoa_ncheck>:
    39ee:	bb 27       	eor	r27, r27
    39f0:	4a 30       	cpi	r20, 0x0A	; 10
    39f2:	31 f4       	brne	.+12     	; 0x3a00 <__itoa_ncheck+0x12>
    39f4:	99 23       	and	r25, r25
    39f6:	22 f4       	brpl	.+8      	; 0x3a00 <__itoa_ncheck+0x12>
    39f8:	bd e2       	ldi	r27, 0x2D	; 45
    39fa:	90 95       	com	r25
    39fc:	81 95       	neg	r24
    39fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3a00:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__utoa_common>

00003a04 <__utoa_ncheck>:
    3a04:	bb 27       	eor	r27, r27

00003a06 <__utoa_common>:
    3a06:	fb 01       	movw	r30, r22
    3a08:	55 27       	eor	r21, r21
    3a0a:	aa 27       	eor	r26, r26
    3a0c:	88 0f       	add	r24, r24
    3a0e:	99 1f       	adc	r25, r25
    3a10:	aa 1f       	adc	r26, r26
    3a12:	a4 17       	cp	r26, r20
    3a14:	10 f0       	brcs	.+4      	; 0x3a1a <__utoa_common+0x14>
    3a16:	a4 1b       	sub	r26, r20
    3a18:	83 95       	inc	r24
    3a1a:	50 51       	subi	r21, 0x10	; 16
    3a1c:	b9 f7       	brne	.-18     	; 0x3a0c <__utoa_common+0x6>
    3a1e:	a0 5d       	subi	r26, 0xD0	; 208
    3a20:	aa 33       	cpi	r26, 0x3A	; 58
    3a22:	08 f0       	brcs	.+2      	; 0x3a26 <__utoa_common+0x20>
    3a24:	a9 5d       	subi	r26, 0xD9	; 217
    3a26:	a1 93       	st	Z+, r26
    3a28:	00 97       	sbiw	r24, 0x00	; 0
    3a2a:	79 f7       	brne	.-34     	; 0x3a0a <__utoa_common+0x4>
    3a2c:	b1 11       	cpse	r27, r1
    3a2e:	b1 93       	st	Z+, r27
    3a30:	11 92       	st	Z+, r1
    3a32:	cb 01       	movw	r24, r22
    3a34:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <strrev>

00003a38 <strrev>:
    3a38:	dc 01       	movw	r26, r24
    3a3a:	fc 01       	movw	r30, r24
    3a3c:	67 2f       	mov	r22, r23
    3a3e:	71 91       	ld	r23, Z+
    3a40:	77 23       	and	r23, r23
    3a42:	e1 f7       	brne	.-8      	; 0x3a3c <strrev+0x4>
    3a44:	32 97       	sbiw	r30, 0x02	; 2
    3a46:	04 c0       	rjmp	.+8      	; 0x3a50 <strrev+0x18>
    3a48:	7c 91       	ld	r23, X
    3a4a:	6d 93       	st	X+, r22
    3a4c:	70 83       	st	Z, r23
    3a4e:	62 91       	ld	r22, -Z
    3a50:	ae 17       	cp	r26, r30
    3a52:	bf 07       	cpc	r27, r31
    3a54:	c8 f3       	brcs	.-14     	; 0x3a48 <strrev+0x10>
    3a56:	08 95       	ret

00003a58 <_exit>:
    3a58:	f8 94       	cli

00003a5a <__stop_program>:
    3a5a:	ff cf       	rjmp	.-2      	; 0x3a5a <__stop_program>
