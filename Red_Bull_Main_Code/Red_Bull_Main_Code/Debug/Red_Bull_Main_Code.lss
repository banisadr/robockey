
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  0000374e  000037e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000374e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800162  00800162  00003844  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00003844  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000038a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  000038e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000327c  00000000  00000000  00003c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e7e  00000000  00000000  00006ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001465  00000000  00000000  00007d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b54  00000000  00000000  00009184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cea  00000000  00000000  00009cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004024  00000000  00000000  0000a9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000e9e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__vector_3>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__vector_10>
      2c:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__vector_11>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_17>
      48:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__vector_18>
      4c:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__vector_19>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__vector_23>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	f6 09       	sbc	r31, r6
      ae:	f9 09       	sbc	r31, r9
      b0:	fc 09       	sbc	r31, r12
      b2:	07 0a       	sbc	r0, r23
      b4:	12 0a       	sbc	r1, r18
      b6:	1a 0a       	sbc	r1, r26
      b8:	15 0a       	sbc	r1, r21
      ba:	18 0a       	sbc	r1, r24
      bc:	44 16       	cp	r4, r20
      be:	64 16       	cp	r6, r20
      c0:	84 16       	cp	r8, r20
      c2:	a4 16       	cp	r10, r20
      c4:	c4 16       	cp	r12, r20
      c6:	e4 16       	cp	r14, r20
      c8:	04 17       	cp	r16, r20
      ca:	24 17       	cp	r18, r20
      cc:	44 17       	cp	r20, r20
      ce:	64 17       	cp	r22, r20
      d0:	84 17       	cp	r24, r20
      d2:	a4 17       	cp	r26, r20
      d4:	08 4a       	sbci	r16, 0xA8	; 168
      d6:	d7 3b       	cpi	r29, 0xB7	; 183
      d8:	3b ce       	rjmp	.-906    	; 0xfffffd50 <__eeprom_end+0xff7efd50>
      da:	01 6e       	ori	r16, 0xE1	; 225
      dc:	84 bc       	out	0x24, r8	; 36
      de:	bf fd       	.word	0xfdbf	; ????
      e0:	c1 2f       	mov	r28, r17
      e2:	3d 6c       	ori	r19, 0xCD	; 205
      e4:	74 31       	cpi	r23, 0x14	; 20
      e6:	9a bd       	out	0x2a, r25	; 42
      e8:	56 83       	std	Z+6, r21	; 0x06
      ea:	3d da       	rcall	.-2950   	; 0xfffff566 <__eeprom_end+0xff7ef566>
      ec:	3d 00       	.word	0x003d	; ????
      ee:	c7 7f       	andi	r28, 0xF7	; 247
      f0:	11 be       	out	0x31, r1	; 49
      f2:	d9 e4       	ldi	r29, 0x49	; 73
      f4:	bb 4c       	sbci	r27, 0xCB	; 203
      f6:	3e 91       	ld	r19, -X
      f8:	6b aa       	std	Y+51, r6	; 0x33
      fa:	aa be       	out	0x3a, r10	; 58
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 00       	.word	0x003f	; ????

00000120 <__trampolines_end>:
     120:	00 01       	movw	r0, r0
     122:	00 00       	nop
     124:	b7 01       	movw	r22, r14
     126:	12 00       	.word	0x0012	; ????
     128:	02 00       	.word	0x0002	; ????
     12a:	00 74       	andi	r16, 0x40	; 64
     12c:	01 43       	sbci	r16, 0x31	; 49
     12e:	00 03       	mulsu	r16, r16
     130:	00 00       	nop
     132:	70 01       	movw	r14, r0
     134:	04 01       	movw	r0, r8
     136:	03 09       	sbc	r16, r3
     138:	04 5c       	subi	r16, 0xC4	; 196
     13a:	01 12       	cpse	r0, r17
     13c:	02 03       	mulsu	r16, r18
     13e:	09 04       	cpc	r0, r9
     140:	54 01       	movw	r10, r8
     142:	06 03       	mulsu	r16, r22
     144:	03 09       	sbc	r16, r3
     146:	04 4a       	sbci	r16, 0xA4	; 164
     148:	01 08       	sbc	r0, r1

0000014a <string3>:
     14a:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000154 <string2>:
     154:	06 03 4d 00 32 00 00 00                             ..M.2...

0000015c <string1>:
     15c:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     16c:	65 00 00 00                                         e...

00000170 <string0>:
     170:	04 03 09 04                                         ....

00000174 <config1_descriptor>:
     174:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     184:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     194:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1a4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1b4:	40 00 00                                            @..

000001b7 <device_descriptor>:
     1b7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1c7:	03 01                                               ..

000001c9 <endpoint_config_table>:
     1c9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	da e0       	ldi	r29, 0x0A	; 10
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	ee e4       	ldi	r30, 0x4E	; 78
     1e8:	f7 e3       	ldi	r31, 0x37	; 55
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a2 36       	cpi	r26, 0x62	; 98
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	a2 e6       	ldi	r26, 0x62	; 98
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ab 3e       	cpi	r26, 0xEB	; 235
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 27 0a 	call	0x144e	; 0x144e <main>
     20a:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(int self) {
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	ec 01       	movw	r28, r24
/************************************************************
Initialization of Pins and System Clock
************************************************************/

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     218:	e1 e6       	ldi	r30, 0x61	; 97
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	90 e8       	ldi	r25, 0x80	; 128
     21e:	90 83       	st	Z, r25
     220:	10 82       	st	Z, r1

	// Disable JTAG
	m_disableJTAG(); // turn off JTAG port and allow access to F4-F7 as GPIO
     222:	95 bf       	out	0x35, r25	; 53
     224:	95 bf       	out	0x35, r25	; 53
	
	//Set to Input
	clear(DDRD,0); // D0
     226:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     228:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     22a:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     22c:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     22e:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     230:	23 9a       	sbi	0x04, 3	; 4
	
	set(DDRD,3); //C6 Red positioning LED
     232:	53 9a       	sbi	0x0a, 3	; 10
	set(DDRD,5); //C7 Blue positioning LED 
     234:	55 9a       	sbi	0x0a, 5	; 10
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     236:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     238:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     23a:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     23c:	2b 98       	cbi	0x05, 3	; 5
	
	clear(PORTC,6); //Start with positioning LED off
     23e:	46 98       	cbi	0x08, 6	; 8
	clear(PORTC,7); 
     240:	47 98       	cbi	0x08, 7	; 8

/************************************************************
Setup Subsystems
************************************************************/

	m_bus_init();
     242:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <m_bus_init>
	while(!m_wii_open());
     246:	0e 94 44 12 	call	0x2488	; 0x2488 <m_wii_open>
     24a:	88 23       	and	r24, r24
     24c:	e1 f3       	breq	.-8      	; 0x246 <initialize_robockey+0x34>
	sei();
     24e:	78 94       	sei
	m_usb_init();
     250:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <m_usb_init>
	if (self == RED_BULL)
     254:	20 97       	sbiw	r28, 0x00	; 0
     256:	41 f4       	brne	.+16     	; 0x268 <initialize_robockey+0x56>
	{
		while(!m_rf_open(CHANNEL,RXADDRESS_RED_BULL,PACKET_LENGTH)); // Configure mRF
     258:	4a e0       	ldi	r20, 0x0A	; 10
     25a:	60 e2       	ldi	r22, 0x20	; 32
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <m_rf_open>
     262:	88 23       	and	r24, r24
     264:	c9 f3       	breq	.-14     	; 0x258 <initialize_robockey+0x46>
     266:	14 c0       	rjmp	.+40     	; 0x290 <initialize_robockey+0x7e>
	}
	if (self == GREEN_MONSTER)
     268:	c1 30       	cpi	r28, 0x01	; 1
     26a:	d1 05       	cpc	r29, r1
     26c:	41 f4       	brne	.+16     	; 0x27e <initialize_robockey+0x6c>
	{
		while(!m_rf_open(CHANNEL,RXADDRESS_GREEN_MONSTER,PACKET_LENGTH)); // Configure mRF
     26e:	4a e0       	ldi	r20, 0x0A	; 10
     270:	61 e2       	ldi	r22, 0x21	; 33
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <m_rf_open>
     278:	88 23       	and	r24, r24
     27a:	c9 f3       	breq	.-14     	; 0x26e <initialize_robockey+0x5c>
     27c:	09 c0       	rjmp	.+18     	; 0x290 <initialize_robockey+0x7e>
	}
	if (self == BLUE_WHALE)
     27e:	22 97       	sbiw	r28, 0x02	; 2
     280:	39 f4       	brne	.+14     	; 0x290 <initialize_robockey+0x7e>
	{
		while(!m_rf_open(CHANNEL,RXADDRESS_BLUE_WHALE,PACKET_LENGTH)); // Configure mRF
     282:	4a e0       	ldi	r20, 0x0A	; 10
     284:	62 e2       	ldi	r22, 0x22	; 34
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <m_rf_open>
     28c:	88 23       	and	r24, r24
     28e:	c9 f3       	breq	.-14     	; 0x282 <initialize_robockey+0x70>
/************************************************************
Timer1 Initialization for PWM Motor Control
************************************************************/

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     290:	e1 e8       	ldi	r30, 0x81	; 129
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	8b 7f       	andi	r24, 0xFB	; 251
     298:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     29a:	80 81       	ld	r24, Z
     29c:	8d 7f       	andi	r24, 0xFD	; 253
     29e:	80 83       	st	Z, r24
	clear(TCCR1B,CS10);
     2a0:	80 81       	ld	r24, Z
     2a2:	8e 7f       	andi	r24, 0xFE	; 254
     2a4:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     2a6:	80 81       	ld	r24, Z
     2a8:	8f 7e       	andi	r24, 0xEF	; 239
     2aa:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     2ac:	80 81       	ld	r24, Z
     2ae:	88 60       	ori	r24, 0x08	; 8
     2b0:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     2b2:	e0 e8       	ldi	r30, 0x80	; 128
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	8d 7f       	andi	r24, 0xFD	; 253
     2ba:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     2bc:	80 81       	ld	r24, Z
     2be:	8e 7f       	andi	r24, 0xFE	; 254
     2c0:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     2c2:	80 81       	ld	r24, Z
     2c4:	8f 7d       	andi	r24, 0xDF	; 223
     2c6:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     2c8:	80 81       	ld	r24, Z
     2ca:	8f 7e       	andi	r24, 0xEF	; 239
     2cc:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     2ce:	c8 e8       	ldi	r28, 0x88	; 136
     2d0:	d0 e0       	ldi	r29, 0x00	; 0
     2d2:	8a ea       	ldi	r24, 0xAA	; 170
     2d4:	99 e2       	ldi	r25, 0x29	; 41
     2d6:	99 83       	std	Y+1, r25	; 0x01
     2d8:	88 83       	st	Y, r24
	OCR1B = (float)OCR1A*0.1;
     2da:	68 81       	ld	r22, Y
     2dc:	79 81       	ldd	r23, Y+1	; 0x01
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatunsisf>
     2e6:	2d ec       	ldi	r18, 0xCD	; 205
     2e8:	3c ec       	ldi	r19, 0xCC	; 204
     2ea:	4c ec       	ldi	r20, 0xCC	; 204
     2ec:	5d e3       	ldi	r21, 0x3D	; 61
     2ee:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     2f2:	0e 94 2e 19 	call	0x325c	; 0x325c <__fixunssfsi>
     2f6:	70 93 8b 00 	sts	0x008B, r23
     2fa:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     2fe:	68 81       	ld	r22, Y
     300:	79 81       	ldd	r23, Y+1	; 0x01
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatunsisf>
     30a:	2d ec       	ldi	r18, 0xCD	; 205
     30c:	3c ec       	ldi	r19, 0xCC	; 204
     30e:	4c ec       	ldi	r20, 0xCC	; 204
     310:	5d e3       	ldi	r21, 0x3D	; 61
     312:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     316:	0e 94 2e 19 	call	0x325c	; 0x325c <__fixunssfsi>
     31a:	70 93 8d 00 	sts	0x008D, r23
     31e:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     322:	ef e6       	ldi	r30, 0x6F	; 111
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	82 60       	ori	r24, 0x02	; 2
     32a:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     32c:	80 81       	ld	r24, Z
     32e:	84 60       	ori	r24, 0x04	; 4
     330:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     332:	80 81       	ld	r24, Z
     334:	88 60       	ori	r24, 0x08	; 8
     336:	80 83       	st	Z, r24

/************************************************************
Timer3 Initialization for fixed timestep calculations
************************************************************/

	clear(TCCR3B,CS32); // prescale /1
     338:	e1 e9       	ldi	r30, 0x91	; 145
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8b 7f       	andi	r24, 0xFB	; 251
     340:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     348:	80 81       	ld	r24, Z
     34a:	81 60       	ori	r24, 0x01	; 1
     34c:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     34e:	80 81       	ld	r24, Z
     350:	8f 7e       	andi	r24, 0xEF	; 239
     352:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     354:	80 81       	ld	r24, Z
     356:	88 60       	ori	r24, 0x08	; 8
     358:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     35a:	e0 e9       	ldi	r30, 0x90	; 144
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	8d 7f       	andi	r24, 0xFD	; 253
     362:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     364:	80 81       	ld	r24, Z
     366:	8e 7f       	andi	r24, 0xFE	; 254
     368:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     36a:	80 e8       	ldi	r24, 0x80	; 128
     36c:	9e e3       	ldi	r25, 0x3E	; 62
     36e:	90 93 99 00 	sts	0x0099, r25
     372:	80 93 98 00 	sts	0x0098, r24

/************************************************************
Timer0 Initialization for COMM test 
************************************************************/
	clear(TCCR0B,CS02); //start with timer off
     376:	85 b5       	in	r24, 0x25	; 37
     378:	8b 7f       	andi	r24, 0xFB	; 251
     37a:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS01);
     37c:	85 b5       	in	r24, 0x25	; 37
     37e:	8d 7f       	andi	r24, 0xFD	; 253
     380:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS00);
     382:	85 b5       	in	r24, 0x25	; 37
     384:	8e 7f       	andi	r24, 0xFE	; 254
     386:	85 bd       	out	0x25, r24	; 37
	
	clear(TCCR0B,WGM02); //Up to OCR0A mode 
     388:	85 b5       	in	r24, 0x25	; 37
     38a:	87 7f       	andi	r24, 0xF7	; 247
     38c:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0A,WGM01);
     38e:	84 b5       	in	r24, 0x24	; 36
     390:	8d 7f       	andi	r24, 0xFD	; 253
     392:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A,WGM00);
     394:	84 b5       	in	r24, 0x24	; 36
     396:	8e 7f       	andi	r24, 0xFE	; 254
     398:	84 bd       	out	0x24, r24	; 36
		
	set(TIMSK0,TOIE0); //enable interupt at OCR0A
     39a:	ee e6       	ldi	r30, 0x6E	; 110
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	80 83       	st	Z, r24
	
/************************************************************
Setup ADC
************************************************************/
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
     3a4:	cc e7       	ldi	r28, 0x7C	; 124
     3a6:	d0 e0       	ldi	r29, 0x00	; 0
     3a8:	88 81       	ld	r24, Y
     3aa:	8f 77       	andi	r24, 0x7F	; 127
     3ac:	88 83       	st	Y, r24
	set(ADMUX,REFS0);
     3ae:	88 81       	ld	r24, Y
     3b0:	80 64       	ori	r24, 0x40	; 64
     3b2:	88 83       	st	Y, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
     3b4:	ea e7       	ldi	r30, 0x7A	; 122
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	8b 7f       	andi	r24, 0xFB	; 251
     3bc:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     3be:	80 81       	ld	r24, Z
     3c0:	82 60       	ori	r24, 0x02	; 2
     3c2:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     3c4:	80 81       	ld	r24, Z
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	80 83       	st	Z, r24
	
	// Disable Digital input to:
	set(DIDR0,ADC0D); // ADC0
     3ca:	ae e7       	ldi	r26, 0x7E	; 126
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	8c 91       	ld	r24, X
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	8c 93       	st	X, r24
	set(DIDR0,ADC1D); // ADC1
     3d4:	8c 91       	ld	r24, X
     3d6:	82 60       	ori	r24, 0x02	; 2
     3d8:	8c 93       	st	X, r24
	set(DIDR0,ADC4D); // ADC4
     3da:	8c 91       	ld	r24, X
     3dc:	80 61       	ori	r24, 0x10	; 16
     3de:	8c 93       	st	X, r24
	set(DIDR0,ADC5D); // ADC5
     3e0:	8c 91       	ld	r24, X
     3e2:	80 62       	ori	r24, 0x20	; 32
     3e4:	8c 93       	st	X, r24
	set(DIDR0,ADC6D); // ADC6
     3e6:	8c 91       	ld	r24, X
     3e8:	80 64       	ori	r24, 0x40	; 64
     3ea:	8c 93       	st	X, r24
	set(DIDR0,ADC7D); // ADC7
     3ec:	8c 91       	ld	r24, X
     3ee:	80 68       	ori	r24, 0x80	; 128
     3f0:	8c 93       	st	X, r24
	set(DIDR2,ADC8D); // ADC8
     3f2:	ad e7       	ldi	r26, 0x7D	; 125
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	8c 91       	ld	r24, X
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	8c 93       	st	X, r24
	set(DIDR2,ADC9D); // ADC9
     3fc:	8c 91       	ld	r24, X
     3fe:	82 60       	ori	r24, 0x02	; 2
     400:	8c 93       	st	X, r24
	set(DIDR2,ADC10D); // ADC10
     402:	8c 91       	ld	r24, X
     404:	84 60       	ori	r24, 0x04	; 4
     406:	8c 93       	st	X, r24
	set(DIDR2,ADC11D); // ADC11
     408:	8c 91       	ld	r24, X
     40a:	88 60       	ori	r24, 0x08	; 8
     40c:	8c 93       	st	X, r24
	set(DIDR2,ADC12D); // ADC812
     40e:	8c 91       	ld	r24, X
     410:	80 61       	ori	r24, 0x10	; 16
     412:	8c 93       	st	X, r24
	set(DIDR2,ADC13D); // ADC13
     414:	8c 91       	ld	r24, X
     416:	80 62       	ori	r24, 0x20	; 32
     418:	8c 93       	st	X, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
     41a:	80 81       	ld	r24, Z
     41c:	8f 7d       	andi	r24, 0xDF	; 223
     41e:	80 83       	st	Z, r24
	
	set(ADCSRB,MUX5); // Select ADC13 at pin B6
     420:	ab e7       	ldi	r26, 0x7B	; 123
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	8c 91       	ld	r24, X
     426:	80 62       	ori	r24, 0x20	; 32
     428:	8c 93       	st	X, r24
	set(ADMUX,MUX2); // Transistor 4
     42a:	88 81       	ld	r24, Y
     42c:	84 60       	ori	r24, 0x04	; 4
     42e:	88 83       	st	Y, r24
	clear(ADMUX,MUX1);
     430:	88 81       	ld	r24, Y
     432:	8d 7f       	andi	r24, 0xFD	; 253
     434:	88 83       	st	Y, r24
	set(ADMUX,MUX0);
     436:	88 81       	ld	r24, Y
     438:	81 60       	ori	r24, 0x01	; 1
     43a:	88 83       	st	Y, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
     43c:	80 81       	ld	r24, Z
     43e:	80 68       	ori	r24, 0x80	; 128
     440:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
     442:	80 81       	ld	r24, Z
     444:	80 64       	ori	r24, 0x40	; 64
     446:	80 83       	st	Z, r24
	
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <distIndex>:
     44e:	82 30       	cpi	r24, 0x02	; 2
     450:	91 05       	cpc	r25, r1
     452:	f9 f0       	breq	.+62     	; 0x492 <distIndex+0x44>
     454:	2c f4       	brge	.+10     	; 0x460 <distIndex+0x12>
     456:	00 97       	sbiw	r24, 0x00	; 0
     458:	51 f0       	breq	.+20     	; 0x46e <distIndex+0x20>
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	89 f0       	breq	.+34     	; 0x480 <distIndex+0x32>
     45e:	42 c0       	rjmp	.+132    	; 0x4e4 <distIndex+0x96>
     460:	84 30       	cpi	r24, 0x04	; 4
     462:	91 05       	cpc	r25, r1
     464:	51 f1       	breq	.+84     	; 0x4ba <distIndex+0x6c>
     466:	f4 f0       	brlt	.+60     	; 0x4a4 <distIndex+0x56>
     468:	05 97       	sbiw	r24, 0x05	; 5
     46a:	91 f1       	breq	.+100    	; 0x4d0 <distIndex+0x82>
     46c:	3b c0       	rjmp	.+118    	; 0x4e4 <distIndex+0x96>
     46e:	e2 e6       	ldi	r30, 0x62	; 98
     470:	f1 e0       	ldi	r31, 0x01	; 1
     472:	11 82       	std	Z+1, r1	; 0x01
     474:	10 82       	st	Z, r1
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	93 83       	std	Z+3, r25	; 0x03
     47c:	82 83       	std	Z+2, r24	; 0x02
     47e:	32 c0       	rjmp	.+100    	; 0x4e4 <distIndex+0x96>
     480:	e2 e6       	ldi	r30, 0x62	; 98
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	11 82       	std	Z+1, r1	; 0x01
     486:	10 82       	st	Z, r1
     488:	82 e0       	ldi	r24, 0x02	; 2
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	93 83       	std	Z+3, r25	; 0x03
     48e:	82 83       	std	Z+2, r24	; 0x02
     490:	29 c0       	rjmp	.+82     	; 0x4e4 <distIndex+0x96>
     492:	e2 e6       	ldi	r30, 0x62	; 98
     494:	f1 e0       	ldi	r31, 0x01	; 1
     496:	11 82       	std	Z+1, r1	; 0x01
     498:	10 82       	st	Z, r1
     49a:	83 e0       	ldi	r24, 0x03	; 3
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	93 83       	std	Z+3, r25	; 0x03
     4a0:	82 83       	std	Z+2, r24	; 0x02
     4a2:	20 c0       	rjmp	.+64     	; 0x4e4 <distIndex+0x96>
     4a4:	e2 e6       	ldi	r30, 0x62	; 98
     4a6:	f1 e0       	ldi	r31, 0x01	; 1
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	91 83       	std	Z+1, r25	; 0x01
     4ae:	80 83       	st	Z, r24
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	93 83       	std	Z+3, r25	; 0x03
     4b6:	82 83       	std	Z+2, r24	; 0x02
     4b8:	15 c0       	rjmp	.+42     	; 0x4e4 <distIndex+0x96>
     4ba:	e2 e6       	ldi	r30, 0x62	; 98
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	91 83       	std	Z+1, r25	; 0x01
     4c4:	80 83       	st	Z, r24
     4c6:	83 e0       	ldi	r24, 0x03	; 3
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	93 83       	std	Z+3, r25	; 0x03
     4cc:	82 83       	std	Z+2, r24	; 0x02
     4ce:	0a c0       	rjmp	.+20     	; 0x4e4 <distIndex+0x96>
     4d0:	e2 e6       	ldi	r30, 0x62	; 98
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	91 83       	std	Z+1, r25	; 0x01
     4da:	80 83       	st	Z, r24
     4dc:	83 e0       	ldi	r24, 0x03	; 3
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	93 83       	std	Z+3, r25	; 0x03
     4e2:	82 83       	std	Z+2, r24	; 0x02
     4e4:	82 e6       	ldi	r24, 0x62	; 98
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	08 95       	ret

000004ea <orientationCalculationFour>:
     4ea:	2f 92       	push	r2
     4ec:	3f 92       	push	r3
     4ee:	4f 92       	push	r4
     4f0:	5f 92       	push	r5
     4f2:	6f 92       	push	r6
     4f4:	7f 92       	push	r7
     4f6:	8f 92       	push	r8
     4f8:	9f 92       	push	r9
     4fa:	af 92       	push	r10
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	00 d0       	rcall	.+0      	; 0x510 <orientationCalculationFour+0x26>
     510:	00 d0       	rcall	.+0      	; 0x512 <orientationCalculationFour+0x28>
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	5c 01       	movw	r10, r24
     518:	4a 01       	movw	r8, r20
     51a:	3a 83       	std	Y+2, r19	; 0x02
     51c:	29 83       	std	Y+1, r18	; 0x01
     51e:	06 2f       	mov	r16, r22
     520:	17 2f       	mov	r17, r23
     522:	f8 01       	movw	r30, r16
     524:	41 90       	ld	r4, Z+
     526:	51 90       	ld	r5, Z+
     528:	61 90       	ld	r6, Z+
     52a:	71 90       	ld	r7, Z+
     52c:	8f 01       	movw	r16, r30
     52e:	1c 82       	std	Y+4, r1	; 0x04
     530:	1b 82       	std	Y+3, r1	; 0x03
     532:	21 2c       	mov	r2, r1
     534:	31 2c       	mov	r3, r1
     536:	12 c0       	rjmp	.+36     	; 0x55c <orientationCalculationFour+0x72>
     538:	f8 01       	movw	r30, r16
     53a:	c1 90       	ld	r12, Z+
     53c:	d1 90       	ld	r13, Z+
     53e:	e1 90       	ld	r14, Z+
     540:	f1 90       	ld	r15, Z+
     542:	8f 01       	movw	r16, r30
     544:	a7 01       	movw	r20, r14
     546:	96 01       	movw	r18, r12
     548:	c3 01       	movw	r24, r6
     54a:	b2 01       	movw	r22, r4
     54c:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gesf2>
     550:	18 16       	cp	r1, r24
     552:	24 f4       	brge	.+8      	; 0x55c <orientationCalculationFour+0x72>
     554:	26 01       	movw	r4, r12
     556:	37 01       	movw	r6, r14
     558:	2b 80       	ldd	r2, Y+3	; 0x03
     55a:	3c 80       	ldd	r3, Y+4	; 0x04
     55c:	8b 81       	ldd	r24, Y+3	; 0x03
     55e:	9c 81       	ldd	r25, Y+4	; 0x04
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	9c 83       	std	Y+4, r25	; 0x04
     564:	8b 83       	std	Y+3, r24	; 0x03
     566:	06 97       	sbiw	r24, 0x06	; 6
     568:	39 f7       	brne	.-50     	; 0x538 <orientationCalculationFour+0x4e>
     56a:	82 2d       	mov	r24, r2
     56c:	93 2d       	mov	r25, r3
     56e:	0e 94 27 02 	call	0x44e	; 0x44e <distIndex>
     572:	fc 01       	movw	r30, r24
     574:	20 81       	ld	r18, Z
     576:	31 81       	ldd	r19, Z+1	; 0x01
     578:	62 81       	ldd	r22, Z+2	; 0x02
     57a:	73 81       	ldd	r23, Z+3	; 0x03
     57c:	f5 01       	movw	r30, r10
     57e:	40 81       	ld	r20, Z
     580:	51 81       	ldd	r21, Z+1	; 0x01
     582:	24 17       	cp	r18, r20
     584:	35 07       	cpc	r19, r21
     586:	59 f4       	brne	.+22     	; 0x59e <orientationCalculationFour+0xb4>
     588:	f4 01       	movw	r30, r8
     58a:	31 83       	std	Z+1, r19	; 0x01
     58c:	20 83       	st	Z, r18
     58e:	f5 01       	movw	r30, r10
     590:	82 81       	ldd	r24, Z+2	; 0x02
     592:	93 81       	ldd	r25, Z+3	; 0x03
     594:	e9 81       	ldd	r30, Y+1	; 0x01
     596:	fa 81       	ldd	r31, Y+2	; 0x02
     598:	91 83       	std	Z+1, r25	; 0x01
     59a:	80 83       	st	Z, r24
     59c:	37 c0       	rjmp	.+110    	; 0x60c <orientationCalculationFour+0x122>
     59e:	f5 01       	movw	r30, r10
     5a0:	82 81       	ldd	r24, Z+2	; 0x02
     5a2:	93 81       	ldd	r25, Z+3	; 0x03
     5a4:	28 17       	cp	r18, r24
     5a6:	39 07       	cpc	r19, r25
     5a8:	59 f4       	brne	.+22     	; 0x5c0 <orientationCalculationFour+0xd6>
     5aa:	f4 01       	movw	r30, r8
     5ac:	31 83       	std	Z+1, r19	; 0x01
     5ae:	20 83       	st	Z, r18
     5b0:	f5 01       	movw	r30, r10
     5b2:	80 81       	ld	r24, Z
     5b4:	91 81       	ldd	r25, Z+1	; 0x01
     5b6:	e9 81       	ldd	r30, Y+1	; 0x01
     5b8:	fa 81       	ldd	r31, Y+2	; 0x02
     5ba:	91 83       	std	Z+1, r25	; 0x01
     5bc:	80 83       	st	Z, r24
     5be:	26 c0       	rjmp	.+76     	; 0x60c <orientationCalculationFour+0x122>
     5c0:	64 17       	cp	r22, r20
     5c2:	75 07       	cpc	r23, r21
     5c4:	59 f4       	brne	.+22     	; 0x5dc <orientationCalculationFour+0xf2>
     5c6:	f4 01       	movw	r30, r8
     5c8:	71 83       	std	Z+1, r23	; 0x01
     5ca:	60 83       	st	Z, r22
     5cc:	f5 01       	movw	r30, r10
     5ce:	82 81       	ldd	r24, Z+2	; 0x02
     5d0:	93 81       	ldd	r25, Z+3	; 0x03
     5d2:	e9 81       	ldd	r30, Y+1	; 0x01
     5d4:	fa 81       	ldd	r31, Y+2	; 0x02
     5d6:	91 83       	std	Z+1, r25	; 0x01
     5d8:	80 83       	st	Z, r24
     5da:	18 c0       	rjmp	.+48     	; 0x60c <orientationCalculationFour+0x122>
     5dc:	68 17       	cp	r22, r24
     5de:	79 07       	cpc	r23, r25
     5e0:	59 f4       	brne	.+22     	; 0x5f8 <orientationCalculationFour+0x10e>
     5e2:	f4 01       	movw	r30, r8
     5e4:	71 83       	std	Z+1, r23	; 0x01
     5e6:	60 83       	st	Z, r22
     5e8:	f5 01       	movw	r30, r10
     5ea:	80 81       	ld	r24, Z
     5ec:	91 81       	ldd	r25, Z+1	; 0x01
     5ee:	e9 81       	ldd	r30, Y+1	; 0x01
     5f0:	fa 81       	ldd	r31, Y+2	; 0x02
     5f2:	91 83       	std	Z+1, r25	; 0x01
     5f4:	80 83       	st	Z, r24
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <orientationCalculationFour+0x122>
     5f8:	f4 01       	movw	r30, r8
     5fa:	91 83       	std	Z+1, r25	; 0x01
     5fc:	80 83       	st	Z, r24
     5fe:	f5 01       	movw	r30, r10
     600:	80 81       	ld	r24, Z
     602:	91 81       	ldd	r25, Z+1	; 0x01
     604:	e9 81       	ldd	r30, Y+1	; 0x01
     606:	fa 81       	ldd	r31, Y+2	; 0x02
     608:	91 83       	std	Z+1, r25	; 0x01
     60a:	80 83       	st	Z, r24
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	bf 90       	pop	r11
     626:	af 90       	pop	r10
     628:	9f 90       	pop	r9
     62a:	8f 90       	pop	r8
     62c:	7f 90       	pop	r7
     62e:	6f 90       	pop	r6
     630:	5f 90       	pop	r5
     632:	4f 90       	pop	r4
     634:	3f 90       	pop	r3
     636:	2f 90       	pop	r2
     638:	08 95       	ret

0000063a <fourPointCalc>:
     63a:	2f 92       	push	r2
     63c:	3f 92       	push	r3
     63e:	4f 92       	push	r4
     640:	5f 92       	push	r5
     642:	6f 92       	push	r6
     644:	7f 92       	push	r7
     646:	8f 92       	push	r8
     648:	9f 92       	push	r9
     64a:	af 92       	push	r10
     64c:	bf 92       	push	r11
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	c2 54       	subi	r28, 0x42	; 66
     664:	d1 09       	sbc	r29, r1
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	2c 01       	movw	r4, r24
     672:	fc 01       	movw	r30, r24
     674:	04 80       	ldd	r0, Z+4	; 0x04
     676:	f5 81       	ldd	r31, Z+5	; 0x05
     678:	e0 2d       	mov	r30, r0
     67a:	fa a3       	std	Y+34, r31	; 0x22
     67c:	e9 a3       	std	Y+33, r30	; 0x21
     67e:	fc 01       	movw	r30, r24
     680:	00 81       	ld	r16, Z
     682:	11 81       	ldd	r17, Z+1	; 0x01
     684:	69 a1       	ldd	r22, Y+33	; 0x21
     686:	7a a1       	ldd	r23, Y+34	; 0x22
     688:	60 1b       	sub	r22, r16
     68a:	71 0b       	sbc	r23, r17
     68c:	07 2e       	mov	r0, r23
     68e:	00 0c       	add	r0, r0
     690:	88 0b       	sbc	r24, r24
     692:	99 0b       	sbc	r25, r25
     694:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     698:	6b 01       	movw	r12, r22
     69a:	7c 01       	movw	r14, r24
     69c:	f2 01       	movw	r30, r4
     69e:	06 80       	ldd	r0, Z+6	; 0x06
     6a0:	f7 81       	ldd	r31, Z+7	; 0x07
     6a2:	e0 2d       	mov	r30, r0
     6a4:	fe a3       	std	Y+38, r31	; 0x26
     6a6:	ed a3       	std	Y+37, r30	; 0x25
     6a8:	f2 01       	movw	r30, r4
     6aa:	22 80       	ldd	r2, Z+2	; 0x02
     6ac:	33 80       	ldd	r3, Z+3	; 0x03
     6ae:	ad a0       	ldd	r10, Y+37	; 0x25
     6b0:	be a0       	ldd	r11, Y+38	; 0x26
     6b2:	a2 18       	sub	r10, r2
     6b4:	b3 08       	sbc	r11, r3
     6b6:	9b 01       	movw	r18, r22
     6b8:	ac 01       	movw	r20, r24
     6ba:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     6be:	69 a7       	std	Y+41, r22	; 0x29
     6c0:	7a a7       	std	Y+42, r23	; 0x2a
     6c2:	8b a7       	std	Y+43, r24	; 0x2b
     6c4:	9c a7       	std	Y+44, r25	; 0x2c
     6c6:	aa 9c       	mul	r10, r10
     6c8:	40 01       	movw	r8, r0
     6ca:	ab 9c       	mul	r10, r11
     6cc:	90 0c       	add	r9, r0
     6ce:	90 0c       	add	r9, r0
     6d0:	11 24       	eor	r1, r1
     6d2:	09 2c       	mov	r0, r9
     6d4:	00 0c       	add	r0, r0
     6d6:	aa 08       	sbc	r10, r10
     6d8:	bb 08       	sbc	r11, r11
     6da:	a7 01       	movw	r20, r14
     6dc:	96 01       	movw	r18, r12
     6de:	c7 01       	movw	r24, r14
     6e0:	b6 01       	movw	r22, r12
     6e2:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     6e6:	6b 01       	movw	r12, r22
     6e8:	7c 01       	movw	r14, r24
     6ea:	c5 01       	movw	r24, r10
     6ec:	b4 01       	movw	r22, r8
     6ee:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     6f2:	9b 01       	movw	r18, r22
     6f4:	ac 01       	movw	r20, r24
     6f6:	c7 01       	movw	r24, r14
     6f8:	b6 01       	movw	r22, r12
     6fa:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
     6fe:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <sqrt>
     702:	6b af       	std	Y+59, r22	; 0x3b
     704:	7c af       	std	Y+60, r23	; 0x3c
     706:	8d af       	std	Y+61, r24	; 0x3d
     708:	9e af       	std	Y+62, r25	; 0x3e
     70a:	f2 01       	movw	r30, r4
     70c:	00 84       	ldd	r0, Z+8	; 0x08
     70e:	f1 85       	ldd	r31, Z+9	; 0x09
     710:	e0 2d       	mov	r30, r0
     712:	fa a7       	std	Y+42, r31	; 0x2a
     714:	e9 a7       	std	Y+41, r30	; 0x29
     716:	bf 01       	movw	r22, r30
     718:	60 1b       	sub	r22, r16
     71a:	71 0b       	sbc	r23, r17
     71c:	07 2e       	mov	r0, r23
     71e:	00 0c       	add	r0, r0
     720:	88 0b       	sbc	r24, r24
     722:	99 0b       	sbc	r25, r25
     724:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     728:	6b 01       	movw	r12, r22
     72a:	7c 01       	movw	r14, r24
     72c:	f2 01       	movw	r30, r4
     72e:	62 84       	ldd	r6, Z+10	; 0x0a
     730:	73 84       	ldd	r7, Z+11	; 0x0b
     732:	53 01       	movw	r10, r6
     734:	a2 18       	sub	r10, r2
     736:	b3 08       	sbc	r11, r3
     738:	9b 01       	movw	r18, r22
     73a:	ac 01       	movw	r20, r24
     73c:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     740:	6d a7       	std	Y+45, r22	; 0x2d
     742:	7e a7       	std	Y+46, r23	; 0x2e
     744:	8f a7       	std	Y+47, r24	; 0x2f
     746:	98 ab       	std	Y+48, r25	; 0x30
     748:	aa 9c       	mul	r10, r10
     74a:	40 01       	movw	r8, r0
     74c:	ab 9c       	mul	r10, r11
     74e:	90 0c       	add	r9, r0
     750:	90 0c       	add	r9, r0
     752:	11 24       	eor	r1, r1
     754:	09 2c       	mov	r0, r9
     756:	00 0c       	add	r0, r0
     758:	aa 08       	sbc	r10, r10
     75a:	bb 08       	sbc	r11, r11
     75c:	a7 01       	movw	r20, r14
     75e:	96 01       	movw	r18, r12
     760:	c7 01       	movw	r24, r14
     762:	b6 01       	movw	r22, r12
     764:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     768:	6b 01       	movw	r12, r22
     76a:	7c 01       	movw	r14, r24
     76c:	c5 01       	movw	r24, r10
     76e:	b4 01       	movw	r22, r8
     770:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     774:	9b 01       	movw	r18, r22
     776:	ac 01       	movw	r20, r24
     778:	c7 01       	movw	r24, r14
     77a:	b6 01       	movw	r22, r12
     77c:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
     780:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <sqrt>
     784:	23 96       	adiw	r28, 0x03	; 3
     786:	6c af       	std	Y+60, r22	; 0x3c
     788:	7d af       	std	Y+61, r23	; 0x3d
     78a:	8e af       	std	Y+62, r24	; 0x3e
     78c:	9f af       	std	Y+63, r25	; 0x3f
     78e:	23 97       	sbiw	r28, 0x03	; 3
     790:	f2 01       	movw	r30, r4
     792:	04 84       	ldd	r0, Z+12	; 0x0c
     794:	f5 85       	ldd	r31, Z+13	; 0x0d
     796:	e0 2d       	mov	r30, r0
     798:	fe a7       	std	Y+46, r31	; 0x2e
     79a:	ed a7       	std	Y+45, r30	; 0x2d
     79c:	bf 01       	movw	r22, r30
     79e:	60 1b       	sub	r22, r16
     7a0:	71 0b       	sbc	r23, r17
     7a2:	07 2e       	mov	r0, r23
     7a4:	00 0c       	add	r0, r0
     7a6:	88 0b       	sbc	r24, r24
     7a8:	99 0b       	sbc	r25, r25
     7aa:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     7ae:	4b 01       	movw	r8, r22
     7b0:	5c 01       	movw	r10, r24
     7b2:	f2 01       	movw	r30, r4
     7b4:	06 84       	ldd	r0, Z+14	; 0x0e
     7b6:	f7 85       	ldd	r31, Z+15	; 0x0f
     7b8:	e0 2d       	mov	r30, r0
     7ba:	fa ab       	std	Y+50, r31	; 0x32
     7bc:	e9 ab       	std	Y+49, r30	; 0x31
     7be:	8f 01       	movw	r16, r30
     7c0:	02 19       	sub	r16, r2
     7c2:	13 09       	sbc	r17, r3
     7c4:	9b 01       	movw	r18, r22
     7c6:	ac 01       	movw	r20, r24
     7c8:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     7cc:	6b ab       	std	Y+51, r22	; 0x33
     7ce:	7c ab       	std	Y+52, r23	; 0x34
     7d0:	8d ab       	std	Y+53, r24	; 0x35
     7d2:	9e ab       	std	Y+54, r25	; 0x36
     7d4:	00 9f       	mul	r16, r16
     7d6:	60 01       	movw	r12, r0
     7d8:	01 9f       	mul	r16, r17
     7da:	d0 0c       	add	r13, r0
     7dc:	d0 0c       	add	r13, r0
     7de:	11 24       	eor	r1, r1
     7e0:	0d 2c       	mov	r0, r13
     7e2:	00 0c       	add	r0, r0
     7e4:	ee 08       	sbc	r14, r14
     7e6:	ff 08       	sbc	r15, r15
     7e8:	a5 01       	movw	r20, r10
     7ea:	94 01       	movw	r18, r8
     7ec:	c5 01       	movw	r24, r10
     7ee:	b4 01       	movw	r22, r8
     7f0:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     7f4:	4b 01       	movw	r8, r22
     7f6:	5c 01       	movw	r10, r24
     7f8:	c7 01       	movw	r24, r14
     7fa:	b6 01       	movw	r22, r12
     7fc:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     800:	9b 01       	movw	r18, r22
     802:	ac 01       	movw	r20, r24
     804:	c5 01       	movw	r24, r10
     806:	b4 01       	movw	r22, r8
     808:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
     80c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <sqrt>
     810:	6b ab       	std	Y+51, r22	; 0x33
     812:	7c ab       	std	Y+52, r23	; 0x34
     814:	8d ab       	std	Y+53, r24	; 0x35
     816:	9e ab       	std	Y+54, r25	; 0x36
     818:	69 a5       	ldd	r22, Y+41	; 0x29
     81a:	7a a5       	ldd	r23, Y+42	; 0x2a
     81c:	29 a1       	ldd	r18, Y+33	; 0x21
     81e:	3a a1       	ldd	r19, Y+34	; 0x22
     820:	62 1b       	sub	r22, r18
     822:	73 0b       	sbc	r23, r19
     824:	07 2e       	mov	r0, r23
     826:	00 0c       	add	r0, r0
     828:	88 0b       	sbc	r24, r24
     82a:	99 0b       	sbc	r25, r25
     82c:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     830:	4b 01       	movw	r8, r22
     832:	5c 01       	movw	r10, r24
     834:	83 01       	movw	r16, r6
     836:	4d a1       	ldd	r20, Y+37	; 0x25
     838:	5e a1       	ldd	r21, Y+38	; 0x26
     83a:	04 1b       	sub	r16, r20
     83c:	15 0b       	sbc	r17, r21
     83e:	9b 01       	movw	r18, r22
     840:	ac 01       	movw	r20, r24
     842:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     846:	6f ab       	std	Y+55, r22	; 0x37
     848:	78 af       	std	Y+56, r23	; 0x38
     84a:	89 af       	std	Y+57, r24	; 0x39
     84c:	9a af       	std	Y+58, r25	; 0x3a
     84e:	00 9f       	mul	r16, r16
     850:	60 01       	movw	r12, r0
     852:	01 9f       	mul	r16, r17
     854:	d0 0c       	add	r13, r0
     856:	d0 0c       	add	r13, r0
     858:	11 24       	eor	r1, r1
     85a:	0d 2c       	mov	r0, r13
     85c:	00 0c       	add	r0, r0
     85e:	ee 08       	sbc	r14, r14
     860:	ff 08       	sbc	r15, r15
     862:	a5 01       	movw	r20, r10
     864:	94 01       	movw	r18, r8
     866:	c5 01       	movw	r24, r10
     868:	b4 01       	movw	r22, r8
     86a:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     86e:	4b 01       	movw	r8, r22
     870:	5c 01       	movw	r10, r24
     872:	c7 01       	movw	r24, r14
     874:	b6 01       	movw	r22, r12
     876:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     87a:	9b 01       	movw	r18, r22
     87c:	ac 01       	movw	r20, r24
     87e:	c5 01       	movw	r24, r10
     880:	b4 01       	movw	r22, r8
     882:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
     886:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <sqrt>
     88a:	6f ab       	std	Y+55, r22	; 0x37
     88c:	78 af       	std	Y+56, r23	; 0x38
     88e:	89 af       	std	Y+57, r24	; 0x39
     890:	9a af       	std	Y+58, r25	; 0x3a
     892:	6d a5       	ldd	r22, Y+45	; 0x2d
     894:	7e a5       	ldd	r23, Y+46	; 0x2e
     896:	89 a1       	ldd	r24, Y+33	; 0x21
     898:	9a a1       	ldd	r25, Y+34	; 0x22
     89a:	68 1b       	sub	r22, r24
     89c:	79 0b       	sbc	r23, r25
     89e:	07 2e       	mov	r0, r23
     8a0:	00 0c       	add	r0, r0
     8a2:	88 0b       	sbc	r24, r24
     8a4:	99 0b       	sbc	r25, r25
     8a6:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     8aa:	4b 01       	movw	r8, r22
     8ac:	5c 01       	movw	r10, r24
     8ae:	09 a9       	ldd	r16, Y+49	; 0x31
     8b0:	1a a9       	ldd	r17, Y+50	; 0x32
     8b2:	ed a1       	ldd	r30, Y+37	; 0x25
     8b4:	fe a1       	ldd	r31, Y+38	; 0x26
     8b6:	0e 1b       	sub	r16, r30
     8b8:	1f 0b       	sbc	r17, r31
     8ba:	9b 01       	movw	r18, r22
     8bc:	ac 01       	movw	r20, r24
     8be:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     8c2:	69 a3       	std	Y+33, r22	; 0x21
     8c4:	7a a3       	std	Y+34, r23	; 0x22
     8c6:	8b a3       	std	Y+35, r24	; 0x23
     8c8:	9c a3       	std	Y+36, r25	; 0x24
     8ca:	00 9f       	mul	r16, r16
     8cc:	60 01       	movw	r12, r0
     8ce:	01 9f       	mul	r16, r17
     8d0:	d0 0c       	add	r13, r0
     8d2:	d0 0c       	add	r13, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	0d 2c       	mov	r0, r13
     8d8:	00 0c       	add	r0, r0
     8da:	ee 08       	sbc	r14, r14
     8dc:	ff 08       	sbc	r15, r15
     8de:	a5 01       	movw	r20, r10
     8e0:	94 01       	movw	r18, r8
     8e2:	c5 01       	movw	r24, r10
     8e4:	b4 01       	movw	r22, r8
     8e6:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     8ea:	4b 01       	movw	r8, r22
     8ec:	5c 01       	movw	r10, r24
     8ee:	c7 01       	movw	r24, r14
     8f0:	b6 01       	movw	r22, r12
     8f2:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	c5 01       	movw	r24, r10
     8fc:	b4 01       	movw	r22, r8
     8fe:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
     902:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <sqrt>
     906:	4b 01       	movw	r8, r22
     908:	5c 01       	movw	r10, r24
     90a:	6d a5       	ldd	r22, Y+45	; 0x2d
     90c:	7e a5       	ldd	r23, Y+46	; 0x2e
     90e:	29 a5       	ldd	r18, Y+41	; 0x29
     910:	3a a5       	ldd	r19, Y+42	; 0x2a
     912:	62 1b       	sub	r22, r18
     914:	73 0b       	sbc	r23, r19
     916:	07 2e       	mov	r0, r23
     918:	00 0c       	add	r0, r0
     91a:	88 0b       	sbc	r24, r24
     91c:	99 0b       	sbc	r25, r25
     91e:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     922:	69 a3       	std	Y+33, r22	; 0x21
     924:	7a a3       	std	Y+34, r23	; 0x22
     926:	8b a3       	std	Y+35, r24	; 0x23
     928:	9c a3       	std	Y+36, r25	; 0x24
     92a:	09 a9       	ldd	r16, Y+49	; 0x31
     92c:	1a a9       	ldd	r17, Y+50	; 0x32
     92e:	06 19       	sub	r16, r6
     930:	17 09       	sbc	r17, r7
     932:	9b 01       	movw	r18, r22
     934:	ac 01       	movw	r20, r24
     936:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     93a:	6d a3       	std	Y+37, r22	; 0x25
     93c:	7e a3       	std	Y+38, r23	; 0x26
     93e:	8f a3       	std	Y+39, r24	; 0x27
     940:	98 a7       	std	Y+40, r25	; 0x28
     942:	00 9f       	mul	r16, r16
     944:	60 01       	movw	r12, r0
     946:	01 9f       	mul	r16, r17
     948:	d0 0c       	add	r13, r0
     94a:	d0 0c       	add	r13, r0
     94c:	11 24       	eor	r1, r1
     94e:	0d 2c       	mov	r0, r13
     950:	00 0c       	add	r0, r0
     952:	ee 08       	sbc	r14, r14
     954:	ff 08       	sbc	r15, r15
     956:	29 a1       	ldd	r18, Y+33	; 0x21
     958:	3a a1       	ldd	r19, Y+34	; 0x22
     95a:	4b a1       	ldd	r20, Y+35	; 0x23
     95c:	5c a1       	ldd	r21, Y+36	; 0x24
     95e:	ca 01       	movw	r24, r20
     960:	b9 01       	movw	r22, r18
     962:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     966:	69 a3       	std	Y+33, r22	; 0x21
     968:	7a a3       	std	Y+34, r23	; 0x22
     96a:	8b a3       	std	Y+35, r24	; 0x23
     96c:	9c a3       	std	Y+36, r25	; 0x24
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	69 a1       	ldd	r22, Y+33	; 0x21
     97c:	7a a1       	ldd	r23, Y+34	; 0x22
     97e:	8b a1       	ldd	r24, Y+35	; 0x23
     980:	9c a1       	ldd	r25, Y+36	; 0x24
     982:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
     986:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <sqrt>
     98a:	2b ad       	ldd	r18, Y+59	; 0x3b
     98c:	3c ad       	ldd	r19, Y+60	; 0x3c
     98e:	4d ad       	ldd	r20, Y+61	; 0x3d
     990:	5e ad       	ldd	r21, Y+62	; 0x3e
     992:	29 83       	std	Y+1, r18	; 0x01
     994:	3a 83       	std	Y+2, r19	; 0x02
     996:	4b 83       	std	Y+3, r20	; 0x03
     998:	5c 83       	std	Y+4, r21	; 0x04
     99a:	23 96       	adiw	r28, 0x03	; 3
     99c:	2c ad       	ldd	r18, Y+60	; 0x3c
     99e:	3d ad       	ldd	r19, Y+61	; 0x3d
     9a0:	4e ad       	ldd	r20, Y+62	; 0x3e
     9a2:	5f ad       	ldd	r21, Y+63	; 0x3f
     9a4:	23 97       	sbiw	r28, 0x03	; 3
     9a6:	2d 83       	std	Y+5, r18	; 0x05
     9a8:	3e 83       	std	Y+6, r19	; 0x06
     9aa:	4f 83       	std	Y+7, r20	; 0x07
     9ac:	58 87       	std	Y+8, r21	; 0x08
     9ae:	2b a9       	ldd	r18, Y+51	; 0x33
     9b0:	3c a9       	ldd	r19, Y+52	; 0x34
     9b2:	4d a9       	ldd	r20, Y+53	; 0x35
     9b4:	5e a9       	ldd	r21, Y+54	; 0x36
     9b6:	29 87       	std	Y+9, r18	; 0x09
     9b8:	3a 87       	std	Y+10, r19	; 0x0a
     9ba:	4b 87       	std	Y+11, r20	; 0x0b
     9bc:	5c 87       	std	Y+12, r21	; 0x0c
     9be:	2f a9       	ldd	r18, Y+55	; 0x37
     9c0:	38 ad       	ldd	r19, Y+56	; 0x38
     9c2:	49 ad       	ldd	r20, Y+57	; 0x39
     9c4:	5a ad       	ldd	r21, Y+58	; 0x3a
     9c6:	2d 87       	std	Y+13, r18	; 0x0d
     9c8:	3e 87       	std	Y+14, r19	; 0x0e
     9ca:	4f 87       	std	Y+15, r20	; 0x0f
     9cc:	58 8b       	std	Y+16, r21	; 0x10
     9ce:	89 8a       	std	Y+17, r8	; 0x11
     9d0:	9a 8a       	std	Y+18, r9	; 0x12
     9d2:	ab 8a       	std	Y+19, r10	; 0x13
     9d4:	bc 8a       	std	Y+20, r11	; 0x14
     9d6:	6d 8b       	std	Y+21, r22	; 0x15
     9d8:	7e 8b       	std	Y+22, r23	; 0x16
     9da:	8f 8b       	std	Y+23, r24	; 0x17
     9dc:	98 8f       	std	Y+24, r25	; 0x18
     9de:	ae 01       	movw	r20, r28
     9e0:	4f 5f       	subi	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	7a 01       	movw	r14, r20
     9e6:	00 e0       	ldi	r16, 0x00	; 0
     9e8:	10 e0       	ldi	r17, 0x00	; 0
     9ea:	61 2c       	mov	r6, r1
     9ec:	71 2c       	mov	r7, r1
     9ee:	c1 2c       	mov	r12, r1
     9f0:	d1 2c       	mov	r13, r1
     9f2:	21 2c       	mov	r2, r1
     9f4:	31 2c       	mov	r3, r1
     9f6:	f7 01       	movw	r30, r14
     9f8:	81 90       	ld	r8, Z+
     9fa:	91 90       	ld	r9, Z+
     9fc:	a1 90       	ld	r10, Z+
     9fe:	b1 90       	ld	r11, Z+
     a00:	7f 01       	movw	r14, r30
     a02:	26 2d       	mov	r18, r6
     a04:	37 2d       	mov	r19, r7
     a06:	4c 2d       	mov	r20, r12
     a08:	5d 2d       	mov	r21, r13
     a0a:	c5 01       	movw	r24, r10
     a0c:	b4 01       	movw	r22, r8
     a0e:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gesf2>
     a12:	18 16       	cp	r1, r24
     a14:	34 f4       	brge	.+12     	; 0xa22 <fourPointCalc+0x3e8>
     a16:	68 2c       	mov	r6, r8
     a18:	79 2c       	mov	r7, r9
     a1a:	ca 2c       	mov	r12, r10
     a1c:	db 2c       	mov	r13, r11
     a1e:	20 2e       	mov	r2, r16
     a20:	31 2e       	mov	r3, r17
     a22:	0f 5f       	subi	r16, 0xFF	; 255
     a24:	1f 4f       	sbci	r17, 0xFF	; 255
     a26:	06 30       	cpi	r16, 0x06	; 6
     a28:	11 05       	cpc	r17, r1
     a2a:	29 f7       	brne	.-54     	; 0x9f6 <fourPointCalc+0x3bc>
     a2c:	82 2d       	mov	r24, r2
     a2e:	93 2d       	mov	r25, r3
     a30:	0e 94 27 02 	call	0x44e	; 0x44e <distIndex>
     a34:	fc 01       	movw	r30, r24
     a36:	e0 80       	ld	r14, Z
     a38:	f1 80       	ldd	r15, Z+1	; 0x01
     a3a:	fa 8e       	std	Y+26, r15	; 0x1a
     a3c:	e9 8e       	std	Y+25, r14	; 0x19
     a3e:	02 81       	ldd	r16, Z+2	; 0x02
     a40:	13 81       	ldd	r17, Z+3	; 0x03
     a42:	1c 8f       	std	Y+28, r17	; 0x1c
     a44:	0b 8f       	std	Y+27, r16	; 0x1b
     a46:	ee 0c       	add	r14, r14
     a48:	ff 1c       	adc	r15, r15
     a4a:	ee 0c       	add	r14, r14
     a4c:	ff 1c       	adc	r15, r15
     a4e:	e4 0c       	add	r14, r4
     a50:	f5 1c       	adc	r15, r5
     a52:	00 0f       	add	r16, r16
     a54:	11 1f       	adc	r17, r17
     a56:	00 0f       	add	r16, r16
     a58:	11 1f       	adc	r17, r17
     a5a:	04 0d       	add	r16, r4
     a5c:	15 1d       	adc	r17, r5
     a5e:	f7 01       	movw	r30, r14
     a60:	60 81       	ld	r22, Z
     a62:	71 81       	ldd	r23, Z+1	; 0x01
     a64:	f8 01       	movw	r30, r16
     a66:	80 81       	ld	r24, Z
     a68:	91 81       	ldd	r25, Z+1	; 0x01
     a6a:	68 0f       	add	r22, r24
     a6c:	79 1f       	adc	r23, r25
     a6e:	77 23       	and	r23, r23
     a70:	14 f4       	brge	.+4      	; 0xa76 <fourPointCalc+0x43c>
     a72:	6f 5f       	subi	r22, 0xFF	; 255
     a74:	7f 4f       	sbci	r23, 0xFF	; 255
     a76:	75 95       	asr	r23
     a78:	67 95       	ror	r22
     a7a:	07 2e       	mov	r0, r23
     a7c:	00 0c       	add	r0, r0
     a7e:	88 0b       	sbc	r24, r24
     a80:	99 0b       	sbc	r25, r25
     a82:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     a86:	4b 01       	movw	r8, r22
     a88:	5c 01       	movw	r10, r24
     a8a:	f7 01       	movw	r30, r14
     a8c:	62 81       	ldd	r22, Z+2	; 0x02
     a8e:	73 81       	ldd	r23, Z+3	; 0x03
     a90:	f8 01       	movw	r30, r16
     a92:	82 81       	ldd	r24, Z+2	; 0x02
     a94:	93 81       	ldd	r25, Z+3	; 0x03
     a96:	68 0f       	add	r22, r24
     a98:	79 1f       	adc	r23, r25
     a9a:	77 23       	and	r23, r23
     a9c:	14 f4       	brge	.+4      	; 0xaa2 <fourPointCalc+0x468>
     a9e:	6f 5f       	subi	r22, 0xFF	; 255
     aa0:	7f 4f       	sbci	r23, 0xFF	; 255
     aa2:	75 95       	asr	r23
     aa4:	67 95       	ror	r22
     aa6:	07 2e       	mov	r0, r23
     aa8:	00 0c       	add	r0, r0
     aaa:	88 0b       	sbc	r24, r24
     aac:	99 0b       	sbc	r25, r25
     aae:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     ab2:	69 a3       	std	Y+33, r22	; 0x21
     ab4:	7a a3       	std	Y+34, r23	; 0x22
     ab6:	8b a3       	std	Y+35, r24	; 0x23
     ab8:	9c a3       	std	Y+36, r25	; 0x24
     aba:	9e 01       	movw	r18, r28
     abc:	21 5e       	subi	r18, 0xE1	; 225
     abe:	3f 4f       	sbci	r19, 0xFF	; 255
     ac0:	ae 01       	movw	r20, r28
     ac2:	43 5e       	subi	r20, 0xE3	; 227
     ac4:	5f 4f       	sbci	r21, 0xFF	; 255
     ac6:	be 01       	movw	r22, r28
     ac8:	6f 5f       	subi	r22, 0xFF	; 255
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
     acc:	ce 01       	movw	r24, r28
     ace:	49 96       	adiw	r24, 0x19	; 25
     ad0:	0e 94 75 02 	call	0x4ea	; 0x4ea <orientationCalculationFour>
     ad4:	0d 8d       	ldd	r16, Y+29	; 0x1d
     ad6:	1e 8d       	ldd	r17, Y+30	; 0x1e
     ad8:	00 0f       	add	r16, r16
     ada:	11 1f       	adc	r17, r17
     adc:	00 0f       	add	r16, r16
     ade:	11 1f       	adc	r17, r17
     ae0:	04 0d       	add	r16, r4
     ae2:	15 1d       	adc	r17, r5
     ae4:	2f 8c       	ldd	r2, Y+31	; 0x1f
     ae6:	38 a0       	ldd	r3, Y+32	; 0x20
     ae8:	22 0c       	add	r2, r2
     aea:	33 1c       	adc	r3, r3
     aec:	22 0c       	add	r2, r2
     aee:	33 1c       	adc	r3, r3
     af0:	24 0c       	add	r2, r4
     af2:	35 1c       	adc	r3, r5
     af4:	f8 01       	movw	r30, r16
     af6:	60 81       	ld	r22, Z
     af8:	71 81       	ldd	r23, Z+1	; 0x01
     afa:	f1 01       	movw	r30, r2
     afc:	80 81       	ld	r24, Z
     afe:	91 81       	ldd	r25, Z+1	; 0x01
     b00:	68 1b       	sub	r22, r24
     b02:	79 0b       	sbc	r23, r25
     b04:	07 2e       	mov	r0, r23
     b06:	00 0c       	add	r0, r0
     b08:	88 0b       	sbc	r24, r24
     b0a:	99 0b       	sbc	r25, r25
     b0c:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     b10:	6b 01       	movw	r12, r22
     b12:	7c 01       	movw	r14, r24
     b14:	f8 01       	movw	r30, r16
     b16:	62 81       	ldd	r22, Z+2	; 0x02
     b18:	73 81       	ldd	r23, Z+3	; 0x03
     b1a:	f1 01       	movw	r30, r2
     b1c:	82 81       	ldd	r24, Z+2	; 0x02
     b1e:	93 81       	ldd	r25, Z+3	; 0x03
     b20:	68 1b       	sub	r22, r24
     b22:	79 0b       	sbc	r23, r25
     b24:	07 2e       	mov	r0, r23
     b26:	00 0c       	add	r0, r0
     b28:	88 0b       	sbc	r24, r24
     b2a:	99 0b       	sbc	r25, r25
     b2c:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     b30:	90 58       	subi	r25, 0x80	; 128
     b32:	a7 01       	movw	r20, r14
     b34:	96 01       	movw	r18, r12
     b36:	0e 94 4c 18 	call	0x3098	; 0x3098 <atan2>
     b3a:	2b ed       	ldi	r18, 0xDB	; 219
     b3c:	3f e0       	ldi	r19, 0x0F	; 15
     b3e:	49 ec       	ldi	r20, 0xC9	; 201
     b40:	5f e3       	ldi	r21, 0x3F	; 63
     b42:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
     b46:	6b 01       	movw	r12, r22
     b48:	7c 01       	movw	r14, r24
     b4a:	a5 01       	movw	r20, r10
     b4c:	94 01       	movw	r18, r8
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	94 e4       	ldi	r25, 0x44	; 68
     b56:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
     b5a:	4b 01       	movw	r8, r22
     b5c:	5c 01       	movw	r10, r24
     b5e:	29 a1       	ldd	r18, Y+33	; 0x21
     b60:	3a a1       	ldd	r19, Y+34	; 0x22
     b62:	4b a1       	ldd	r20, Y+35	; 0x23
     b64:	5c a1       	ldd	r21, Y+36	; 0x24
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	8f eb       	ldi	r24, 0xBF	; 191
     b6c:	93 e4       	ldi	r25, 0x43	; 67
     b6e:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
     b72:	2b 01       	movw	r4, r22
     b74:	3c 01       	movw	r6, r24
     b76:	c7 01       	movw	r24, r14
     b78:	b6 01       	movw	r22, r12
     b7a:	0e 94 ef 1a 	call	0x35de	; 0x35de <sin>
     b7e:	69 a3       	std	Y+33, r22	; 0x21
     b80:	7a a3       	std	Y+34, r23	; 0x22
     b82:	8b a3       	std	Y+35, r24	; 0x23
     b84:	9c a3       	std	Y+36, r25	; 0x24
     b86:	c7 01       	movw	r24, r14
     b88:	b6 01       	movw	r22, r12
     b8a:	0e 94 b0 18 	call	0x3160	; 0x3160 <cos>
     b8e:	6d a3       	std	Y+37, r22	; 0x25
     b90:	7e a3       	std	Y+38, r23	; 0x26
     b92:	8f a3       	std	Y+39, r24	; 0x27
     b94:	98 a7       	std	Y+40, r25	; 0x28
     b96:	06 e6       	ldi	r16, 0x66	; 102
     b98:	11 e0       	ldi	r17, 0x01	; 1
     b9a:	29 a1       	ldd	r18, Y+33	; 0x21
     b9c:	3a a1       	ldd	r19, Y+34	; 0x22
     b9e:	4b a1       	ldd	r20, Y+35	; 0x23
     ba0:	5c a1       	ldd	r21, Y+36	; 0x24
     ba2:	c3 01       	movw	r24, r6
     ba4:	b2 01       	movw	r22, r4
     ba6:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     baa:	69 a7       	std	Y+41, r22	; 0x29
     bac:	7a a7       	std	Y+42, r23	; 0x2a
     bae:	8b a7       	std	Y+43, r24	; 0x2b
     bb0:	9c a7       	std	Y+44, r25	; 0x2c
     bb2:	2d a1       	ldd	r18, Y+37	; 0x25
     bb4:	3e a1       	ldd	r19, Y+38	; 0x26
     bb6:	4f a1       	ldd	r20, Y+39	; 0x27
     bb8:	58 a5       	ldd	r21, Y+40	; 0x28
     bba:	c5 01       	movw	r24, r10
     bbc:	b4 01       	movw	r22, r8
     bbe:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	69 a5       	ldd	r22, Y+41	; 0x29
     bc8:	7a a5       	ldd	r23, Y+42	; 0x2a
     bca:	8b a5       	ldd	r24, Y+43	; 0x2b
     bcc:	9c a5       	ldd	r25, Y+44	; 0x2c
     bce:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
     bd2:	f8 01       	movw	r30, r16
     bd4:	60 83       	st	Z, r22
     bd6:	71 83       	std	Z+1, r23	; 0x01
     bd8:	82 83       	std	Z+2, r24	; 0x02
     bda:	93 83       	std	Z+3, r25	; 0x03
     bdc:	2d a1       	ldd	r18, Y+37	; 0x25
     bde:	3e a1       	ldd	r19, Y+38	; 0x26
     be0:	4f a1       	ldd	r20, Y+39	; 0x27
     be2:	58 a5       	ldd	r21, Y+40	; 0x28
     be4:	c3 01       	movw	r24, r6
     be6:	b2 01       	movw	r22, r4
     be8:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     bec:	2b 01       	movw	r4, r22
     bee:	3c 01       	movw	r6, r24
     bf0:	29 a1       	ldd	r18, Y+33	; 0x21
     bf2:	3a a1       	ldd	r19, Y+34	; 0x22
     bf4:	4b a1       	ldd	r20, Y+35	; 0x23
     bf6:	5c a1       	ldd	r21, Y+36	; 0x24
     bf8:	c5 01       	movw	r24, r10
     bfa:	b4 01       	movw	r22, r8
     bfc:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
     c00:	9b 01       	movw	r18, r22
     c02:	ac 01       	movw	r20, r24
     c04:	c3 01       	movw	r24, r6
     c06:	b2 01       	movw	r22, r4
     c08:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
     c0c:	f8 01       	movw	r30, r16
     c0e:	64 83       	std	Z+4, r22	; 0x04
     c10:	75 83       	std	Z+5, r23	; 0x05
     c12:	86 83       	std	Z+6, r24	; 0x06
     c14:	97 83       	std	Z+7, r25	; 0x07
     c16:	f7 fa       	bst	r15, 7
     c18:	f0 94       	com	r15
     c1a:	f7 f8       	bld	r15, 7
     c1c:	f0 94       	com	r15
     c1e:	c0 86       	std	Z+8, r12	; 0x08
     c20:	d1 86       	std	Z+9, r13	; 0x09
     c22:	e2 86       	std	Z+10, r14	; 0x0a
     c24:	f3 86       	std	Z+11, r15	; 0x0b
     c26:	c8 01       	movw	r24, r16
     c28:	ce 5b       	subi	r28, 0xBE	; 190
     c2a:	df 4f       	sbci	r29, 0xFF	; 255
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	9f 90       	pop	r9
     c4c:	8f 90       	pop	r8
     c4e:	7f 90       	pop	r7
     c50:	6f 90       	pop	r6
     c52:	5f 90       	pop	r5
     c54:	4f 90       	pop	r4
     c56:	3f 90       	pop	r3
     c58:	2f 90       	pop	r2
     c5a:	08 95       	ret

00000c5c <localization_calc>:
     c5c:	4f 92       	push	r4
     c5e:	5f 92       	push	r5
     c60:	6f 92       	push	r6
     c62:	7f 92       	push	r7
     c64:	af 92       	push	r10
     c66:	bf 92       	push	r11
     c68:	cf 92       	push	r12
     c6a:	df 92       	push	r13
     c6c:	ef 92       	push	r14
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	68 97       	sbiw	r28, 0x18	; 24
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	fc 01       	movw	r30, r24
     c8a:	0d b7       	in	r16, 0x3d	; 61
     c8c:	1e b7       	in	r17, 0x3e	; 62
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	80 85       	ldd	r24, Z+8	; 0x08
     c98:	91 85       	ldd	r25, Z+9	; 0x09
     c9a:	9c 83       	std	Y+4, r25	; 0x04
     c9c:	8b 83       	std	Y+3, r24	; 0x03
     c9e:	82 81       	ldd	r24, Z+2	; 0x02
     ca0:	93 81       	ldd	r25, Z+3	; 0x03
     ca2:	9e 83       	std	Y+6, r25	; 0x06
     ca4:	8d 83       	std	Y+5, r24	; 0x05
     ca6:	82 85       	ldd	r24, Z+10	; 0x0a
     ca8:	93 85       	ldd	r25, Z+11	; 0x0b
     caa:	98 87       	std	Y+8, r25	; 0x08
     cac:	8f 83       	std	Y+7, r24	; 0x07
     cae:	84 81       	ldd	r24, Z+4	; 0x04
     cb0:	95 81       	ldd	r25, Z+5	; 0x05
     cb2:	9a 87       	std	Y+10, r25	; 0x0a
     cb4:	89 87       	std	Y+9, r24	; 0x09
     cb6:	84 85       	ldd	r24, Z+12	; 0x0c
     cb8:	95 85       	ldd	r25, Z+13	; 0x0d
     cba:	9c 87       	std	Y+12, r25	; 0x0c
     cbc:	8b 87       	std	Y+11, r24	; 0x0b
     cbe:	86 81       	ldd	r24, Z+6	; 0x06
     cc0:	97 81       	ldd	r25, Z+7	; 0x07
     cc2:	9e 87       	std	Y+14, r25	; 0x0e
     cc4:	8d 87       	std	Y+13, r24	; 0x0d
     cc6:	86 85       	ldd	r24, Z+14	; 0x0e
     cc8:	97 85       	ldd	r25, Z+15	; 0x0f
     cca:	98 8b       	std	Y+16, r25	; 0x10
     ccc:	8f 87       	std	Y+15, r24	; 0x0f
     cce:	fe 01       	movw	r30, r28
     cd0:	71 96       	adiw	r30, 0x11	; 17
     cd2:	88 e0       	ldi	r24, 0x08	; 8
     cd4:	df 01       	movw	r26, r30
     cd6:	1d 92       	st	X+, r1
     cd8:	8a 95       	dec	r24
     cda:	e9 f7       	brne	.-6      	; 0xcd6 <localization_calc+0x7a>
     cdc:	70 97       	sbiw	r30, 0x10	; 16
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	40 81       	ld	r20, Z
     ce8:	51 81       	ldd	r21, Z+1	; 0x01
     cea:	4f 3f       	cpi	r20, 0xFF	; 255
     cec:	53 40       	sbci	r21, 0x03	; 3
     cee:	71 f0       	breq	.+28     	; 0xd0c <localization_calc+0xb0>
     cf0:	dc 01       	movw	r26, r24
     cf2:	aa 0f       	add	r26, r26
     cf4:	bb 1f       	adc	r27, r27
     cf6:	41 e0       	ldi	r20, 0x01	; 1
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	4c 0f       	add	r20, r28
     cfc:	5d 1f       	adc	r21, r29
     cfe:	a4 0f       	add	r26, r20
     d00:	b5 1f       	adc	r27, r21
     d02:	51 96       	adiw	r26, 0x11	; 17
     d04:	3c 93       	st	X, r19
     d06:	2e 93       	st	-X, r18
     d08:	50 97       	sbiw	r26, 0x10	; 16
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	2f 5f       	subi	r18, 0xFF	; 255
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	34 96       	adiw	r30, 0x04	; 4
     d12:	24 30       	cpi	r18, 0x04	; 4
     d14:	31 05       	cpc	r19, r1
     d16:	39 f7       	brne	.-50     	; 0xce6 <localization_calc+0x8a>
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	09 f4       	brne	.+2      	; 0xd1e <localization_calc+0xc2>
     d1c:	89 c0       	rjmp	.+274    	; 0xe30 <localization_calc+0x1d4>
     d1e:	ed b6       	in	r14, 0x3d	; 61
     d20:	fe b6       	in	r15, 0x3e	; 62
     d22:	6c 01       	movw	r12, r24
     d24:	cc 0c       	add	r12, r12
     d26:	dd 1c       	adc	r13, r13
     d28:	cc 0c       	add	r12, r12
     d2a:	dd 1c       	adc	r13, r13
     d2c:	ad b7       	in	r26, 0x3d	; 61
     d2e:	be b7       	in	r27, 0x3e	; 62
     d30:	ac 19       	sub	r26, r12
     d32:	bd 09       	sbc	r27, r13
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	be bf       	out	0x3e, r27	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	ad bf       	out	0x3d, r26	; 61
     d3e:	ed b7       	in	r30, 0x3d	; 61
     d40:	fe b7       	in	r31, 0x3e	; 62
     d42:	31 96       	adiw	r30, 0x01	; 1
     d44:	5f 01       	movw	r10, r30
     d46:	18 16       	cp	r1, r24
     d48:	19 06       	cpc	r1, r25
     d4a:	24 f5       	brge	.+72     	; 0xd94 <localization_calc+0x138>
     d4c:	9e 01       	movw	r18, r28
     d4e:	2f 5e       	subi	r18, 0xEF	; 239
     d50:	3f 4f       	sbci	r19, 0xFF	; 255
     d52:	df 01       	movw	r26, r30
     d54:	ce 0e       	add	r12, r30
     d56:	df 1e       	adc	r13, r31
     d58:	f9 01       	movw	r30, r18
     d5a:	41 91       	ld	r20, Z+
     d5c:	51 91       	ld	r21, Z+
     d5e:	9f 01       	movw	r18, r30
     d60:	fa 01       	movw	r30, r20
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	4c 0f       	add	r20, r28
     d70:	5d 1f       	adc	r21, r29
     d72:	e4 0f       	add	r30, r20
     d74:	f5 1f       	adc	r31, r21
     d76:	40 81       	ld	r20, Z
     d78:	51 81       	ldd	r21, Z+1	; 0x01
     d7a:	11 96       	adiw	r26, 0x01	; 1
     d7c:	5c 93       	st	X, r21
     d7e:	4e 93       	st	-X, r20
     d80:	42 81       	ldd	r20, Z+2	; 0x02
     d82:	53 81       	ldd	r21, Z+3	; 0x03
     d84:	13 96       	adiw	r26, 0x03	; 3
     d86:	5c 93       	st	X, r21
     d88:	4e 93       	st	-X, r20
     d8a:	12 97       	sbiw	r26, 0x02	; 2
     d8c:	14 96       	adiw	r26, 0x04	; 4
     d8e:	ac 15       	cp	r26, r12
     d90:	bd 05       	cpc	r27, r13
     d92:	11 f7       	brne	.-60     	; 0xd58 <localization_calc+0xfc>
     d94:	db 01       	movw	r26, r22
     d96:	4d 90       	ld	r4, X+
     d98:	5d 90       	ld	r5, X+
     d9a:	6d 90       	ld	r6, X+
     d9c:	7c 90       	ld	r7, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	ee e7       	ldi	r30, 0x7E	; 126
     da2:	f1 e0       	ldi	r31, 0x01	; 1
     da4:	40 82       	st	Z, r4
     da6:	51 82       	std	Z+1, r5	; 0x01
     da8:	62 82       	std	Z+2, r6	; 0x02
     daa:	73 82       	std	Z+3, r7	; 0x03
     dac:	14 96       	adiw	r26, 0x04	; 4
     dae:	4d 90       	ld	r4, X+
     db0:	5d 90       	ld	r5, X+
     db2:	6d 90       	ld	r6, X+
     db4:	7c 90       	ld	r7, X
     db6:	17 97       	sbiw	r26, 0x07	; 7
     db8:	44 82       	std	Z+4, r4	; 0x04
     dba:	55 82       	std	Z+5, r5	; 0x05
     dbc:	66 82       	std	Z+6, r6	; 0x06
     dbe:	77 82       	std	Z+7, r7	; 0x07
     dc0:	18 96       	adiw	r26, 0x08	; 8
     dc2:	4d 91       	ld	r20, X+
     dc4:	5d 91       	ld	r21, X+
     dc6:	6d 91       	ld	r22, X+
     dc8:	7c 91       	ld	r23, X
     dca:	1b 97       	sbiw	r26, 0x0b	; 11
     dcc:	40 87       	std	Z+8, r20	; 0x08
     dce:	51 87       	std	Z+9, r21	; 0x09
     dd0:	62 87       	std	Z+10, r22	; 0x0a
     dd2:	73 87       	std	Z+11, r23	; 0x0b
     dd4:	04 97       	sbiw	r24, 0x04	; 4
     dd6:	29 f4       	brne	.+10     	; 0xde2 <localization_calc+0x186>
     dd8:	c5 01       	movw	r24, r10
     dda:	0e 94 1d 03 	call	0x63a	; 0x63a <fourPointCalc>
     dde:	dc 01       	movw	r26, r24
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <localization_calc+0x18a>
     de2:	ae e7       	ldi	r26, 0x7E	; 126
     de4:	b1 e0       	ldi	r27, 0x01	; 1
     de6:	4d 91       	ld	r20, X+
     de8:	5d 91       	ld	r21, X+
     dea:	6d 91       	ld	r22, X+
     dec:	7c 91       	ld	r23, X
     dee:	13 97       	sbiw	r26, 0x03	; 3
     df0:	e2 e7       	ldi	r30, 0x72	; 114
     df2:	f1 e0       	ldi	r31, 0x01	; 1
     df4:	40 83       	st	Z, r20
     df6:	51 83       	std	Z+1, r21	; 0x01
     df8:	62 83       	std	Z+2, r22	; 0x02
     dfa:	73 83       	std	Z+3, r23	; 0x03
     dfc:	14 96       	adiw	r26, 0x04	; 4
     dfe:	4d 91       	ld	r20, X+
     e00:	5d 91       	ld	r21, X+
     e02:	6d 91       	ld	r22, X+
     e04:	7c 91       	ld	r23, X
     e06:	17 97       	sbiw	r26, 0x07	; 7
     e08:	44 83       	std	Z+4, r20	; 0x04
     e0a:	55 83       	std	Z+5, r21	; 0x05
     e0c:	66 83       	std	Z+6, r22	; 0x06
     e0e:	77 83       	std	Z+7, r23	; 0x07
     e10:	18 96       	adiw	r26, 0x08	; 8
     e12:	8d 91       	ld	r24, X+
     e14:	9d 91       	ld	r25, X+
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	fe be       	out	0x3e, r15	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	ed be       	out	0x3d, r14	; 61
     e2e:	20 c0       	rjmp	.+64     	; 0xe70 <localization_calc+0x214>
     e30:	fb 01       	movw	r30, r22
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	a2 81       	ldd	r26, Z+2	; 0x02
     e38:	b3 81       	ldd	r27, Z+3	; 0x03
     e3a:	e2 e7       	ldi	r30, 0x72	; 114
     e3c:	f1 e0       	ldi	r31, 0x01	; 1
     e3e:	80 83       	st	Z, r24
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	a2 83       	std	Z+2, r26	; 0x02
     e44:	b3 83       	std	Z+3, r27	; 0x03
     e46:	db 01       	movw	r26, r22
     e48:	14 96       	adiw	r26, 0x04	; 4
     e4a:	cd 90       	ld	r12, X+
     e4c:	dd 90       	ld	r13, X+
     e4e:	ed 90       	ld	r14, X+
     e50:	fc 90       	ld	r15, X
     e52:	17 97       	sbiw	r26, 0x07	; 7
     e54:	c4 82       	std	Z+4, r12	; 0x04
     e56:	d5 82       	std	Z+5, r13	; 0x05
     e58:	e6 82       	std	Z+6, r14	; 0x06
     e5a:	f7 82       	std	Z+7, r15	; 0x07
     e5c:	18 96       	adiw	r26, 0x08	; 8
     e5e:	4d 91       	ld	r20, X+
     e60:	5d 91       	ld	r21, X+
     e62:	6d 91       	ld	r22, X+
     e64:	7c 91       	ld	r23, X
     e66:	1b 97       	sbiw	r26, 0x0b	; 11
     e68:	40 87       	std	Z+8, r20	; 0x08
     e6a:	51 87       	std	Z+9, r21	; 0x09
     e6c:	62 87       	std	Z+10, r22	; 0x0a
     e6e:	73 87       	std	Z+11, r23	; 0x0b
     e70:	82 e7       	ldi	r24, 0x72	; 114
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	1e bf       	out	0x3e, r17	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	0d bf       	out	0x3d, r16	; 61
     e7e:	68 96       	adiw	r28, 0x18	; 24
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	7f 90       	pop	r7
     ea0:	6f 90       	pop	r6
     ea2:	5f 90       	pop	r5
     ea4:	4f 90       	pop	r4
     ea6:	08 95       	ret

00000ea8 <motor_update>:
Initialization of Subsystem Components
************************************************************/

/* Called On Timer 3 Rollover */
void motor_update(void)
{
     ea8:	af 92       	push	r10
     eaa:	bf 92       	push	r11
     eac:	cf 92       	push	r12
     eae:	df 92       	push	r13
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
	set(TIFR3,OCF3A);		// Reset flag
     eb8:	c1 9a       	sbi	0x18, 1	; 24
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd); // Update control
     eba:	a0 90 16 01 	lds	r10, 0x0116
     ebe:	b0 90 17 01 	lds	r11, 0x0117
     ec2:	c0 90 18 01 	lds	r12, 0x0118
     ec6:	d0 90 19 01 	lds	r13, 0x0119
     eca:	e0 90 1a 01 	lds	r14, 0x011A
     ece:	f0 90 1b 01 	lds	r15, 0x011B
     ed2:	00 91 1c 01 	lds	r16, 0x011C
     ed6:	10 91 1d 01 	lds	r17, 0x011D
     eda:	20 91 ad 01 	lds	r18, 0x01AD
     ede:	30 91 ae 01 	lds	r19, 0x01AE
     ee2:	40 91 af 01 	lds	r20, 0x01AF
     ee6:	50 91 b0 01 	lds	r21, 0x01B0
     eea:	60 91 b1 01 	lds	r22, 0x01B1
     eee:	70 91 b2 01 	lds	r23, 0x01B2
     ef2:	80 91 b3 01 	lds	r24, 0x01B3
     ef6:	90 91 b4 01 	lds	r25, 0x01B4
     efa:	e0 91 0d 01 	lds	r30, 0x010D
     efe:	ef 93       	push	r30
     f00:	e0 91 0c 01 	lds	r30, 0x010C
     f04:	ef 93       	push	r30
     f06:	e0 91 0b 01 	lds	r30, 0x010B
     f0a:	ef 93       	push	r30
     f0c:	e0 91 0a 01 	lds	r30, 0x010A
     f10:	ef 93       	push	r30
     f12:	e0 91 11 01 	lds	r30, 0x0111
     f16:	ef 93       	push	r30
     f18:	e0 91 10 01 	lds	r30, 0x0110
     f1c:	ef 93       	push	r30
     f1e:	e0 91 0f 01 	lds	r30, 0x010F
     f22:	ef 93       	push	r30
     f24:	e0 91 0e 01 	lds	r30, 0x010E
     f28:	ef 93       	push	r30
     f2a:	e0 91 ac 01 	lds	r30, 0x01AC
     f2e:	ef 93       	push	r30
     f30:	e0 91 ab 01 	lds	r30, 0x01AB
     f34:	ef 93       	push	r30
     f36:	e0 91 aa 01 	lds	r30, 0x01AA
     f3a:	ef 93       	push	r30
     f3c:	e0 91 a9 01 	lds	r30, 0x01A9
     f40:	ef 93       	push	r30
     f42:	e0 91 15 01 	lds	r30, 0x0115
     f46:	ef 93       	push	r30
     f48:	e0 91 14 01 	lds	r30, 0x0114
     f4c:	ef 93       	push	r30
     f4e:	e0 91 13 01 	lds	r30, 0x0113
     f52:	ef 93       	push	r30
     f54:	e0 91 12 01 	lds	r30, 0x0112
     f58:	ef 93       	push	r30
     f5a:	0e 94 2f 0c 	call	0x185e	; 0x185e <run_motor_control_loop>
     f5e:	8d b7       	in	r24, 0x3d	; 61
     f60:	9e b7       	in	r25, 0x3e	; 62
     f62:	40 96       	adiw	r24, 0x10	; 16
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	9e bf       	out	0x3e, r25	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	8d bf       	out	0x3d, r24	; 61
}
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	bf 90       	pop	r11
     f7c:	af 90       	pop	r10
     f7e:	08 95       	ret

00000f80 <bot_behavior_update>:

/* Update Targets, Gains, and Max Vals */
void bot_behavior_update()
{
     f80:	8f 92       	push	r8
     f82:	9f 92       	push	r9
     f84:	af 92       	push	r10
     f86:	bf 92       	push	r11
     f88:	cf 92       	push	r12
     f8a:	df 92       	push	r13
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	2c 97       	sbiw	r28, 0x0c	; 12
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
	if (has_puck())
     fa4:	0e 94 09 16 	call	0x2c12	; 0x2c12 <has_puck>
     fa8:	88 23       	and	r24, r24
     faa:	09 f4       	brne	.+2      	; 0xfae <bot_behavior_update+0x2e>
     fac:	53 c0       	rjmp	.+166    	; 0x1054 <bot_behavior_update+0xd4>
	{
		//positioning_LED(RED);
		x_target = x_goal;
     fae:	80 91 06 01 	lds	r24, 0x0106
     fb2:	90 91 07 01 	lds	r25, 0x0107
     fb6:	a0 91 08 01 	lds	r26, 0x0108
     fba:	b0 91 09 01 	lds	r27, 0x0109
     fbe:	80 93 b1 01 	sts	0x01B1, r24
     fc2:	90 93 b2 01 	sts	0x01B2, r25
     fc6:	a0 93 b3 01 	sts	0x01B3, r26
     fca:	b0 93 b4 01 	sts	0x01B4, r27
		y_target = y_goal;
     fce:	80 91 02 01 	lds	r24, 0x0102
     fd2:	90 91 03 01 	lds	r25, 0x0103
     fd6:	a0 91 04 01 	lds	r26, 0x0104
     fda:	b0 91 05 01 	lds	r27, 0x0105
     fde:	80 93 ad 01 	sts	0x01AD, r24
     fe2:	90 93 ae 01 	sts	0x01AE, r25
     fe6:	a0 93 af 01 	sts	0x01AF, r26
     fea:	b0 93 b0 01 	sts	0x01B0, r27
		max_theta = M_PI/2;
     fee:	8b ed       	ldi	r24, 0xDB	; 219
     ff0:	9f e0       	ldi	r25, 0x0F	; 15
     ff2:	a9 ec       	ldi	r26, 0xC9	; 201
     ff4:	bf e3       	ldi	r27, 0x3F	; 63
     ff6:	80 93 16 01 	sts	0x0116, r24
     ffa:	90 93 17 01 	sts	0x0117, r25
     ffe:	a0 93 18 01 	sts	0x0118, r26
    1002:	b0 93 19 01 	sts	0x0119, r27
		theta_kd = 0.05;
    1006:	8d ec       	ldi	r24, 0xCD	; 205
    1008:	9c ec       	ldi	r25, 0xCC	; 204
    100a:	ac e4       	ldi	r26, 0x4C	; 76
    100c:	bd e3       	ldi	r27, 0x3D	; 61
    100e:	80 93 a9 01 	sts	0x01A9, r24
    1012:	90 93 aa 01 	sts	0x01AA, r25
    1016:	a0 93 ab 01 	sts	0x01AB, r26
    101a:	b0 93 ac 01 	sts	0x01AC, r27
		theta_kp = 1.6;
    101e:	8d ec       	ldi	r24, 0xCD	; 205
    1020:	9c ec       	ldi	r25, 0xCC	; 204
    1022:	ac ec       	ldi	r26, 0xCC	; 204
    1024:	bf e3       	ldi	r27, 0x3F	; 63
    1026:	80 93 12 01 	sts	0x0112, r24
    102a:	90 93 13 01 	sts	0x0113, r25
    102e:	a0 93 14 01 	sts	0x0114, r26
    1032:	b0 93 15 01 	sts	0x0115, r27
		max_duty_cycle = DUTY_CYCLE_PUCK;
    1036:	83 e3       	ldi	r24, 0x33	; 51
    1038:	93 e3       	ldi	r25, 0x33	; 51
    103a:	a3 e3       	ldi	r26, 0x33	; 51
    103c:	bf e3       	ldi	r27, 0x3F	; 63
    103e:	80 93 1a 01 	sts	0x011A, r24
    1042:	90 93 1b 01 	sts	0x011B, r25
    1046:	a0 93 1c 01 	sts	0x011C, r26
    104a:	b0 93 1d 01 	sts	0x011D, r27
		m_green(OFF);
    104e:	6a 9a       	sbi	0x0d, 2	; 13
    1050:	72 9a       	sbi	0x0e, 2	; 14
    1052:	a4 c0       	rjmp	.+328    	; 0x119c <bot_behavior_update+0x21c>
		return;
		
	}
	
	if (!has_puck())
    1054:	0e 94 09 16 	call	0x2c12	; 0x2c12 <has_puck>
    1058:	81 11       	cpse	r24, r1
    105a:	a0 c0       	rjmp	.+320    	; 0x119c <bot_behavior_update+0x21c>
	{
		//positioning_LED(RED);
		float position_buffer[3];
		get_position(position_buffer);
    105c:	ce 01       	movw	r24, r28
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	0e 94 c8 0a 	call	0x1590	; 0x1590 <get_position>
		if((puck_dist>800) && (fabs(position_buffer[0]-x_goal)<(fabs(x_puck-x_goal))))
    1064:	80 91 8a 01 	lds	r24, 0x018A
    1068:	90 91 8b 01 	lds	r25, 0x018B
    106c:	81 32       	cpi	r24, 0x21	; 33
    106e:	93 40       	sbci	r25, 0x03	; 3
    1070:	0c f4       	brge	.+2      	; 0x1074 <bot_behavior_update+0xf4>
    1072:	46 c0       	rjmp	.+140    	; 0x1100 <bot_behavior_update+0x180>
    1074:	c0 90 06 01 	lds	r12, 0x0106
    1078:	d0 90 07 01 	lds	r13, 0x0107
    107c:	e0 90 08 01 	lds	r14, 0x0108
    1080:	f0 90 09 01 	lds	r15, 0x0109
    1084:	a7 01       	movw	r20, r14
    1086:	96 01       	movw	r18, r12
    1088:	69 81       	ldd	r22, Y+1	; 0x01
    108a:	7a 81       	ldd	r23, Y+2	; 0x02
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
    1094:	4b 01       	movw	r8, r22
    1096:	5c 01       	movw	r10, r24
    1098:	e8 94       	clt
    109a:	b7 f8       	bld	r11, 7
    109c:	a7 01       	movw	r20, r14
    109e:	96 01       	movw	r18, r12
    10a0:	60 91 90 01 	lds	r22, 0x0190
    10a4:	70 91 91 01 	lds	r23, 0x0191
    10a8:	80 91 92 01 	lds	r24, 0x0192
    10ac:	90 91 93 01 	lds	r25, 0x0193
    10b0:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
    10b4:	9b 01       	movw	r18, r22
    10b6:	ac 01       	movw	r20, r24
    10b8:	5f 77       	andi	r21, 0x7F	; 127
    10ba:	c5 01       	movw	r24, r10
    10bc:	b4 01       	movw	r22, r8
    10be:	0e 94 ab 18 	call	0x3156	; 0x3156 <__cmpsf2>
    10c2:	88 23       	and	r24, r24
    10c4:	ec f4       	brge	.+58     	; 0x1100 <bot_behavior_update+0x180>
		{
			x_target = -x_goal;
    10c6:	f7 fa       	bst	r15, 7
    10c8:	f0 94       	com	r15
    10ca:	f7 f8       	bld	r15, 7
    10cc:	f0 94       	com	r15
    10ce:	c0 92 b1 01 	sts	0x01B1, r12
    10d2:	d0 92 b2 01 	sts	0x01B2, r13
    10d6:	e0 92 b3 01 	sts	0x01B3, r14
    10da:	f0 92 b4 01 	sts	0x01B4, r15
			y_target = y_goal;
    10de:	80 91 02 01 	lds	r24, 0x0102
    10e2:	90 91 03 01 	lds	r25, 0x0103
    10e6:	a0 91 04 01 	lds	r26, 0x0104
    10ea:	b0 91 05 01 	lds	r27, 0x0105
    10ee:	80 93 ad 01 	sts	0x01AD, r24
    10f2:	90 93 ae 01 	sts	0x01AE, r25
    10f6:	a0 93 af 01 	sts	0x01AF, r26
    10fa:	b0 93 b0 01 	sts	0x01B0, r27
    10fe:	20 c0       	rjmp	.+64     	; 0x1140 <bot_behavior_update+0x1c0>
		} else {
			x_target = x_puck;
    1100:	80 91 90 01 	lds	r24, 0x0190
    1104:	90 91 91 01 	lds	r25, 0x0191
    1108:	a0 91 92 01 	lds	r26, 0x0192
    110c:	b0 91 93 01 	lds	r27, 0x0193
    1110:	80 93 b1 01 	sts	0x01B1, r24
    1114:	90 93 b2 01 	sts	0x01B2, r25
    1118:	a0 93 b3 01 	sts	0x01B3, r26
    111c:	b0 93 b4 01 	sts	0x01B4, r27
			y_target = y_puck;
    1120:	80 91 8c 01 	lds	r24, 0x018C
    1124:	90 91 8d 01 	lds	r25, 0x018D
    1128:	a0 91 8e 01 	lds	r26, 0x018E
    112c:	b0 91 8f 01 	lds	r27, 0x018F
    1130:	80 93 ad 01 	sts	0x01AD, r24
    1134:	90 93 ae 01 	sts	0x01AE, r25
    1138:	a0 93 af 01 	sts	0x01AF, r26
    113c:	b0 93 b0 01 	sts	0x01B0, r27
			if (!x_puck && !y_puck) {
				//positioning_LED(BLUE);
			}
		}

		max_theta = M_PI;
    1140:	8b ed       	ldi	r24, 0xDB	; 219
    1142:	9f e0       	ldi	r25, 0x0F	; 15
    1144:	a9 e4       	ldi	r26, 0x49	; 73
    1146:	b0 e4       	ldi	r27, 0x40	; 64
    1148:	80 93 16 01 	sts	0x0116, r24
    114c:	90 93 17 01 	sts	0x0117, r25
    1150:	a0 93 18 01 	sts	0x0118, r26
    1154:	b0 93 19 01 	sts	0x0119, r27
		theta_kd = 0;
    1158:	10 92 a9 01 	sts	0x01A9, r1
    115c:	10 92 aa 01 	sts	0x01AA, r1
    1160:	10 92 ab 01 	sts	0x01AB, r1
    1164:	10 92 ac 01 	sts	0x01AC, r1
		theta_kp = 2.2;
    1168:	8d ec       	ldi	r24, 0xCD	; 205
    116a:	9c ec       	ldi	r25, 0xCC	; 204
    116c:	ac e0       	ldi	r26, 0x0C	; 12
    116e:	b0 e4       	ldi	r27, 0x40	; 64
    1170:	80 93 12 01 	sts	0x0112, r24
    1174:	90 93 13 01 	sts	0x0113, r25
    1178:	a0 93 14 01 	sts	0x0114, r26
    117c:	b0 93 15 01 	sts	0x0115, r27
		max_duty_cycle = DUTY_CYCLE_SEEK;
    1180:	83 e3       	ldi	r24, 0x33	; 51
    1182:	93 e3       	ldi	r25, 0x33	; 51
    1184:	a3 e3       	ldi	r26, 0x33	; 51
    1186:	bf e3       	ldi	r27, 0x3F	; 63
    1188:	80 93 1a 01 	sts	0x011A, r24
    118c:	90 93 1b 01 	sts	0x011B, r25
    1190:	a0 93 1c 01 	sts	0x011C, r26
    1194:	b0 93 1d 01 	sts	0x011D, r27
		m_green(ON);
    1198:	6a 9a       	sbi	0x0d, 2	; 13
    119a:	72 98       	cbi	0x0e, 2	; 14
		return;
	}
}
    119c:	2c 96       	adiw	r28, 0x0c	; 12
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	bf 90       	pop	r11
    11b6:	af 90       	pop	r10
    11b8:	9f 90       	pop	r9
    11ba:	8f 90       	pop	r8
    11bc:	08 95       	ret

000011be <adc_update>:

/* Called on ADC Conversion Completion */
void adc_update(void)
{
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	28 97       	sbiw	r28, 0x08	; 8
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
	set(ADCSRA,ADIF);	 // Reset flag
    11d2:	ea e7       	ldi	r30, 0x7A	; 122
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 61       	ori	r24, 0x10	; 16
    11da:	80 83       	st	Z, r24
	if(adc_switch()){
    11dc:	0e 94 33 16 	call	0x2c66	; 0x2c66 <adc_switch>
    11e0:	88 23       	and	r24, r24
    11e2:	61 f1       	breq	.+88     	; 0x123c <adc_update+0x7e>
		float puck_buffer[2];
		puck_dist = get_puck_location(puck_buffer, self, x_goal);
    11e4:	20 91 06 01 	lds	r18, 0x0106
    11e8:	30 91 07 01 	lds	r19, 0x0107
    11ec:	40 91 08 01 	lds	r20, 0x0108
    11f0:	50 91 09 01 	lds	r21, 0x0109
    11f4:	60 91 00 01 	lds	r22, 0x0100
    11f8:	70 91 01 01 	lds	r23, 0x0101
    11fc:	ce 01       	movw	r24, r28
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <get_puck_location>
    1204:	90 93 8b 01 	sts	0x018B, r25
    1208:	80 93 8a 01 	sts	0x018A, r24
		x_puck = puck_buffer[0];
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	ab 81       	ldd	r26, Y+3	; 0x03
    1212:	bc 81       	ldd	r27, Y+4	; 0x04
    1214:	80 93 90 01 	sts	0x0190, r24
    1218:	90 93 91 01 	sts	0x0191, r25
    121c:	a0 93 92 01 	sts	0x0192, r26
    1220:	b0 93 93 01 	sts	0x0193, r27
		y_puck = puck_buffer[1];
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	af 81       	ldd	r26, Y+7	; 0x07
    122a:	b8 85       	ldd	r27, Y+8	; 0x08
    122c:	80 93 8c 01 	sts	0x018C, r24
    1230:	90 93 8d 01 	sts	0x018D, r25
    1234:	a0 93 8e 01 	sts	0x018E, r26
    1238:	b0 93 8f 01 	sts	0x018F, r27
	}
}
    123c:	28 96       	adiw	r28, 0x08	; 8
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	08 95       	ret

0000124e <positioning_LED>:
	
}

void positioning_LED(int color)
{
	switch(color)
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	41 f0       	breq	.+16     	; 0x1264 <positioning_LED+0x16>
    1254:	82 30       	cpi	r24, 0x02	; 2
    1256:	91 05       	cpc	r25, r1
    1258:	41 f0       	breq	.+16     	; 0x126a <positioning_LED+0x1c>
    125a:	89 2b       	or	r24, r25
    125c:	41 f4       	brne	.+16     	; 0x126e <positioning_LED+0x20>
	{ 
		case OFF:	//OFF
			clear(PORTD,3);
    125e:	5b 98       	cbi	0x0b, 3	; 11
			clear(PORTD,5);
    1260:	5d 98       	cbi	0x0b, 5	; 11
			break;
    1262:	08 95       	ret
		
		case BLUE:	//BLUE
			set(PORTD,5);
    1264:	5d 9a       	sbi	0x0b, 5	; 11
			clear(PORTD,3);
    1266:	5b 98       	cbi	0x0b, 3	; 11
			break;
    1268:	08 95       	ret
			
		case RED: //RED
			clear(PORTD,5);
    126a:	5d 98       	cbi	0x0b, 5	; 11
			set(PORTD,3);
    126c:	5b 9a       	sbi	0x0b, 3	; 11
    126e:	08 95       	ret

00001270 <play>:
void play(void)
{
	/* Light LED of defending goal */
	
	/* Play */
	set(TCCR1B,CS10);
    1270:	e1 e8       	ldi	r30, 0x81	; 129
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	81 60       	ori	r24, 0x01	; 1
    1278:	80 83       	st	Z, r24
	positioning_LED(goal);
    127a:	80 91 96 01 	lds	r24, 0x0196
    127e:	90 91 97 01 	lds	r25, 0x0197
    1282:	0e 94 27 09 	call	0x124e	; 0x124e <positioning_LED>
    1286:	08 95       	ret

00001288 <pause>:
}

void pause(void)
{
	/* Stop within 3  seconds */
	clear(TCCR1B,CS10);
    1288:	e1 e8       	ldi	r30, 0x81	; 129
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8e 7f       	andi	r24, 0xFE	; 254
    1290:	80 83       	st	Z, r24
	clear(PORTB,0); // B0 Left motor off
    1292:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,2); // B2 Right motor off
    1294:	2a 98       	cbi	0x05, 2	; 5
	positioning_LED(OFF);
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 27 09 	call	0x124e	; 0x124e <positioning_LED>
    129e:	08 95       	ret

000012a0 <halftime>:
}

void halftime(void)
{
	/* Stop play */
	pause();
    12a0:	0e 94 44 09 	call	0x1288	; 0x1288 <pause>
	
	/* Switch assigned goal */
	if (x_goal>0) {
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	a9 01       	movw	r20, r18
    12aa:	60 91 06 01 	lds	r22, 0x0106
    12ae:	70 91 07 01 	lds	r23, 0x0107
    12b2:	80 91 08 01 	lds	r24, 0x0108
    12b6:	90 91 09 01 	lds	r25, 0x0109
    12ba:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gesf2>
    12be:	18 16       	cp	r1, r24
    12c0:	6c f4       	brge	.+26     	; 0x12dc <halftime+0x3c>
		x_goal = -1*GOAL_X_DIST;
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a8 ec       	ldi	r26, 0xC8	; 200
    12c8:	b3 ec       	ldi	r27, 0xC3	; 195
    12ca:	80 93 06 01 	sts	0x0106, r24
    12ce:	90 93 07 01 	sts	0x0107, r25
    12d2:	a0 93 08 01 	sts	0x0108, r26
    12d6:	b0 93 09 01 	sts	0x0109, r27
    12da:	08 95       	ret
		} else {
		x_goal = GOAL_X_DIST;
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a8 ec       	ldi	r26, 0xC8	; 200
    12e2:	b3 e4       	ldi	r27, 0x43	; 67
    12e4:	80 93 06 01 	sts	0x0106, r24
    12e8:	90 93 07 01 	sts	0x0107, r25
    12ec:	a0 93 08 01 	sts	0x0108, r26
    12f0:	b0 93 09 01 	sts	0x0109, r27
    12f4:	08 95       	ret

000012f6 <select_goal>:
			break;
	}
}

void select_goal(void) 
{
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	2c 97       	sbiw	r28, 0x0c	; 12
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
	/* Assign Defending goal */
	update_position();
    130a:	0e 94 2f 0b 	call	0x165e	; 0x165e <update_position>
	
	float position_buffer[3];
	get_position(position_buffer);
    130e:	ce 01       	movw	r24, r28
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	0e 94 c8 0a 	call	0x1590	; 0x1590 <get_position>
	m_usb_tx_int((int)position_buffer[0]);
    1316:	69 81       	ldd	r22, Y+1	; 0x01
    1318:	7a 81       	ldd	r23, Y+2	; 0x02
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	0e 94 27 19 	call	0x324e	; 0x324e <__fixsfsi>
    1322:	cb 01       	movw	r24, r22
    1324:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <m_usb_tx_int>
	
	if (position_buffer[0]>0) {
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	a9 01       	movw	r20, r18
    132e:	69 81       	ldd	r22, Y+1	; 0x01
    1330:	7a 81       	ldd	r23, Y+2	; 0x02
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gesf2>
    133a:	18 16       	cp	r1, r24
    133c:	9c f4       	brge	.+38     	; 0x1364 <select_goal+0x6e>
		x_goal = -1*GOAL_X_DIST;
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a8 ec       	ldi	r26, 0xC8	; 200
    1344:	b3 ec       	ldi	r27, 0xC3	; 195
    1346:	80 93 06 01 	sts	0x0106, r24
    134a:	90 93 07 01 	sts	0x0107, r25
    134e:	a0 93 08 01 	sts	0x0108, r26
    1352:	b0 93 09 01 	sts	0x0109, r27
		goal = BLUE;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	90 93 97 01 	sts	0x0197, r25
    135e:	80 93 96 01 	sts	0x0196, r24
    1362:	12 c0       	rjmp	.+36     	; 0x1388 <select_goal+0x92>
		//positioning_LED(RED);
		} else {
		x_goal = GOAL_X_DIST;
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	a8 ec       	ldi	r26, 0xC8	; 200
    136a:	b3 e4       	ldi	r27, 0x43	; 67
    136c:	80 93 06 01 	sts	0x0106, r24
    1370:	90 93 07 01 	sts	0x0107, r25
    1374:	a0 93 08 01 	sts	0x0108, r26
    1378:	b0 93 09 01 	sts	0x0109, r27
		goal = RED;
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	90 93 97 01 	sts	0x0197, r25
    1384:	80 93 96 01 	sts	0x0196, r24
		//positioning_LED(BLUE);
	}
	
	goal_init = 1;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	90 93 95 01 	sts	0x0195, r25
    1390:	80 93 94 01 	sts	0x0194, r24
}
    1394:	2c 96       	adiw	r28, 0x0c	; 12
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <comm_test>:
	}
}

void comm_test(void)
{
	if (!goal_init){
    13a6:	80 91 94 01 	lds	r24, 0x0194
    13aa:	90 91 95 01 	lds	r25, 0x0195
    13ae:	89 2b       	or	r24, r25
    13b0:	11 f4       	brne	.+4      	; 0x13b6 <comm_test+0x10>
		select_goal();
    13b2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <select_goal>
	}
	/* Flash color of LED for defending goal */
	set(TCCR0B,CS02); //start timer 
    13b6:	85 b5       	in	r24, 0x25	; 37
    13b8:	84 60       	ori	r24, 0x04	; 4
    13ba:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS00);
    13bc:	85 b5       	in	r24, 0x25	; 37
    13be:	81 60       	ori	r24, 0x01	; 1
    13c0:	85 bd       	out	0x25, r24	; 37
	positioning_LED(goal); //turn on LED 
    13c2:	80 91 96 01 	lds	r24, 0x0196
    13c6:	90 91 97 01 	lds	r25, 0x0197
    13ca:	0e 94 27 09 	call	0x124e	; 0x124e <positioning_LED>
    13ce:	08 95       	ret

000013d0 <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
    13d0:	e0 91 9e 01 	lds	r30, 0x019E
    13d4:	8e 2f       	mov	r24, r30
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	fc 01       	movw	r30, r24
    13da:	e0 5a       	subi	r30, 0xA0	; 160
    13dc:	f1 09       	sbc	r31, r1
    13de:	e8 30       	cpi	r30, 0x08	; 8
    13e0:	f1 05       	cpc	r31, r1
    13e2:	40 f5       	brcc	.+80     	; 0x1434 <update_game_state+0x64>
    13e4:	ea 5a       	subi	r30, 0xAA	; 170
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <__tablejump2__>
		case 0xA0: // Comm Test
		comm_test();
    13ec:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <comm_test>
		break;
    13f0:	08 95       	ret
		case 0xA1: // Play
		play();
    13f2:	0e 94 38 09 	call	0x1270	; 0x1270 <play>
		break;
    13f6:	08 95       	ret
		case 0xA2: // Goal R
		SR = buffer[1];
    13f8:	ef e9       	ldi	r30, 0x9F	; 159
    13fa:	f1 e0       	ldi	r31, 0x01	; 1
    13fc:	81 81       	ldd	r24, Z+1	; 0x01
    13fe:	80 93 9d 01 	sts	0x019D, r24
		SB = buffer[2];
    1402:	82 81       	ldd	r24, Z+2	; 0x02
    1404:	80 93 9c 01 	sts	0x019C, r24
		pause();
    1408:	0e 94 44 09 	call	0x1288	; 0x1288 <pause>
		break;
    140c:	08 95       	ret
		case 0xA3: // Goal B
		SR = buffer[1];
    140e:	ef e9       	ldi	r30, 0x9F	; 159
    1410:	f1 e0       	ldi	r31, 0x01	; 1
    1412:	81 81       	ldd	r24, Z+1	; 0x01
    1414:	80 93 9d 01 	sts	0x019D, r24
		SB = buffer[2];
    1418:	82 81       	ldd	r24, Z+2	; 0x02
    141a:	80 93 9c 01 	sts	0x019C, r24
		pause();
    141e:	0e 94 44 09 	call	0x1288	; 0x1288 <pause>
		break;
    1422:	08 95       	ret
		case 0xA4: // Pause
		pause();
    1424:	0e 94 44 09 	call	0x1288	; 0x1288 <pause>
		break;
    1428:	08 95       	ret
		case 0xA6: // Halftime
		halftime();
    142a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <halftime>
		break;
    142e:	08 95       	ret
}

void game_over(void)
{
	// Stop play
	pause();
    1430:	0e 94 44 09 	call	0x1288	; 0x1288 <pause>
    1434:	08 95       	ret

00001436 <wireless_recieve>:
}

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    1436:	6a e0       	ldi	r22, 0x0A	; 10
    1438:	8f e9       	ldi	r24, 0x9F	; 159
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <m_rf_read>
	game_state = buffer[0];
    1440:	80 91 9f 01 	lds	r24, 0x019F
    1444:	80 93 9e 01 	sts	0x019E, r24
	update_game_state();
    1448:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <update_game_state>
    144c:	08 95       	ret

0000144e <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
    144e:	6e 9a       	sbi	0x0d, 6	; 13
    1450:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey(self);
    1452:	80 91 00 01 	lds	r24, 0x0100
    1456:	90 91 01 01 	lds	r25, 0x0101
    145a:	0e 94 09 01 	call	0x212	; 0x212 <initialize_robockey>
	pause();
    145e:	0e 94 44 09 	call	0x1288	; 0x1288 <pause>

	
	/* Confirm successful initialization(s) */
	m_green(ON);
    1462:	6a 9a       	sbi	0x0d, 2	; 13
    1464:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    1466:	ca e7       	ldi	r28, 0x7A	; 122
    1468:	d0 e0       	ldi	r29, 0x00	; 0
		bot_behavior_update();
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
		if (wifi_flag) {
			wifi_flag = 0;
			m_red(TOGGLE);
    146a:	10 e4       	ldi	r17, 0x40	; 64
	/* Confirm successful initialization(s) */
	m_green(ON);

	/* Run */
	while (1){
		update_position();
    146c:	0e 94 2f 0b 	call	0x165e	; 0x165e <update_position>
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    1470:	88 81       	ld	r24, Y
    1472:	84 fd       	sbrc	r24, 4
    1474:	0e 94 df 08 	call	0x11be	; 0x11be <adc_update>
		bot_behavior_update();
    1478:	0e 94 c0 07 	call	0xf80	; 0xf80 <bot_behavior_update>
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
    147c:	c1 99       	sbic	0x18, 1	; 24
    147e:	0e 94 54 07 	call	0xea8	; 0xea8 <motor_update>
		if (wifi_flag) {
    1482:	80 91 9a 01 	lds	r24, 0x019A
    1486:	90 91 9b 01 	lds	r25, 0x019B
    148a:	89 2b       	or	r24, r25
    148c:	79 f3       	breq	.-34     	; 0x146c <main+0x1e>
			wifi_flag = 0;
    148e:	10 92 9b 01 	sts	0x019B, r1
    1492:	10 92 9a 01 	sts	0x019A, r1
			m_red(TOGGLE);
    1496:	6e 9a       	sbi	0x0d, 6	; 13
    1498:	8e b1       	in	r24, 0x0e	; 14
    149a:	81 27       	eor	r24, r17
    149c:	8e b9       	out	0x0e, r24	; 14
			wireless_recieve();
    149e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <wireless_recieve>
    14a2:	e4 cf       	rjmp	.-56     	; 0x146c <main+0x1e>

000014a4 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    14ae:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
    14b0:	2a 9a       	sbi	0x05, 2	; 5
}
    14b2:	0f 90       	pop	r0
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	0f 90       	pop	r0
    14b8:	1f 90       	pop	r1
    14ba:	18 95       	reti

000014bc <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    14c6:	28 98       	cbi	0x05, 0	; 5
}
    14c8:	0f 90       	pop	r0
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	0f 90       	pop	r0
    14ce:	1f 90       	pop	r1
    14d0:	18 95       	reti

000014d2 <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    14d2:	1f 92       	push	r1
    14d4:	0f 92       	push	r0
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	0f 92       	push	r0
    14da:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    14dc:	2a 98       	cbi	0x05, 2	; 5
}
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0
    14e4:	1f 90       	pop	r1
    14e6:	18 95       	reti

000014e8 <__vector_3>:


/* Recieve Wireless Comm */
ISR(INT2_vect){
    14e8:	1f 92       	push	r1
    14ea:	0f 92       	push	r0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	0f 92       	push	r0
    14f0:	11 24       	eor	r1, r1
    14f2:	8f 93       	push	r24
    14f4:	9f 93       	push	r25
	wifi_flag = 1;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	90 93 9b 01 	sts	0x019B, r25
    14fe:	80 93 9a 01 	sts	0x019A, r24
}
    1502:	9f 91       	pop	r25
    1504:	8f 91       	pop	r24
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti

00001510 <__vector_23>:

ISR(TIMER0_OVF_vect){
    1510:	1f 92       	push	r1
    1512:	0f 92       	push	r0
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	0f 92       	push	r0
    1518:	11 24       	eor	r1, r1
    151a:	2f 93       	push	r18
    151c:	3f 93       	push	r19
    151e:	4f 93       	push	r20
    1520:	5f 93       	push	r21
    1522:	6f 93       	push	r22
    1524:	7f 93       	push	r23
    1526:	8f 93       	push	r24
    1528:	9f 93       	push	r25
    152a:	af 93       	push	r26
    152c:	bf 93       	push	r27
    152e:	ef 93       	push	r30
    1530:	ff 93       	push	r31
	
	if (tim0_counts < 20) {
    1532:	80 91 98 01 	lds	r24, 0x0198
    1536:	90 91 99 01 	lds	r25, 0x0199
    153a:	84 31       	cpi	r24, 0x14	; 20
    153c:	91 05       	cpc	r25, r1
    153e:	34 f4       	brge	.+12     	; 0x154c <__vector_23+0x3c>
		tim0_counts++; //increment timer counter
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	90 93 99 01 	sts	0x0199, r25
    1546:	80 93 98 01 	sts	0x0198, r24
    154a:	11 c0       	rjmp	.+34     	; 0x156e <__vector_23+0x5e>
		
	} else {
		if (game_state != 0xA1)
    154c:	80 91 9e 01 	lds	r24, 0x019E
    1550:	81 3a       	cpi	r24, 0xA1	; 161
    1552:	21 f0       	breq	.+8      	; 0x155c <__vector_23+0x4c>
		{
			positioning_LED(OFF); //turn LED off
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 27 09 	call	0x124e	; 0x124e <positioning_LED>
		}
		
		clear(TCCR0B,CS02); //turn timer off
    155c:	85 b5       	in	r24, 0x25	; 37
    155e:	8b 7f       	andi	r24, 0xFB	; 251
    1560:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS01);
    1562:	85 b5       	in	r24, 0x25	; 37
    1564:	8d 7f       	andi	r24, 0xFD	; 253
    1566:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS00);
    1568:	85 b5       	in	r24, 0x25	; 37
    156a:	8e 7f       	andi	r24, 0xFE	; 254
    156c:	85 bd       	out	0x25, r24	; 37
	}
}
    156e:	ff 91       	pop	r31
    1570:	ef 91       	pop	r30
    1572:	bf 91       	pop	r27
    1574:	af 91       	pop	r26
    1576:	9f 91       	pop	r25
    1578:	8f 91       	pop	r24
    157a:	7f 91       	pop	r23
    157c:	6f 91       	pop	r22
    157e:	5f 91       	pop	r21
    1580:	4f 91       	pop	r20
    1582:	3f 91       	pop	r19
    1584:	2f 91       	pop	r18
    1586:	0f 90       	pop	r0
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	0f 90       	pop	r0
    158c:	1f 90       	pop	r1
    158e:	18 95       	reti

00001590 <get_position>:
/************************************************************
Public Functions
************************************************************/

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    1590:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    1592:	80 91 c5 01 	lds	r24, 0x01C5
    1596:	90 91 c6 01 	lds	r25, 0x01C6
    159a:	a0 91 c7 01 	lds	r26, 0x01C7
    159e:	b0 91 c8 01 	lds	r27, 0x01C8
    15a2:	80 83       	st	Z, r24
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	a2 83       	std	Z+2, r26	; 0x02
    15a8:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    15aa:	80 91 c1 01 	lds	r24, 0x01C1
    15ae:	90 91 c2 01 	lds	r25, 0x01C2
    15b2:	a0 91 c3 01 	lds	r26, 0x01C3
    15b6:	b0 91 c4 01 	lds	r27, 0x01C4
    15ba:	84 83       	std	Z+4, r24	; 0x04
    15bc:	95 83       	std	Z+5, r25	; 0x05
    15be:	a6 83       	std	Z+6, r26	; 0x06
    15c0:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    15c2:	80 91 bd 01 	lds	r24, 0x01BD
    15c6:	90 91 be 01 	lds	r25, 0x01BE
    15ca:	a0 91 bf 01 	lds	r26, 0x01BF
    15ce:	b0 91 c0 01 	lds	r27, 0x01C0
    15d2:	80 87       	std	Z+8, r24	; 0x08
    15d4:	91 87       	std	Z+9, r25	; 0x09
    15d6:	a2 87       	std	Z+10, r26	; 0x0a
    15d8:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	08 95       	ret

000015de <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    15de:	8f 92       	push	r8
    15e0:	9f 92       	push	r9
    15e2:	af 92       	push	r10
    15e4:	bf 92       	push	r11
    15e6:	cf 92       	push	r12
    15e8:	df 92       	push	r13
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	6b 01       	movw	r12, r22
    15f0:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    15f2:	4b 01       	movw	r8, r22
    15f4:	5c 01       	movw	r10, r24
    15f6:	e8 94       	clt
    15f8:	b7 f8       	bld	r11, 7
    15fa:	2b ed       	ldi	r18, 0xDB	; 219
    15fc:	3f e0       	ldi	r19, 0x0F	; 15
    15fe:	49 e4       	ldi	r20, 0x49	; 73
    1600:	50 e4       	ldi	r21, 0x40	; 64
    1602:	c5 01       	movw	r24, r10
    1604:	b4 01       	movw	r22, r8
    1606:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gesf2>
    160a:	18 16       	cp	r1, r24
    160c:	bc f4       	brge	.+46     	; 0x163c <theta_error_correction+0x5e>
    160e:	2b ed       	ldi	r18, 0xDB	; 219
    1610:	3f e0       	ldi	r19, 0x0F	; 15
    1612:	49 ec       	ldi	r20, 0xC9	; 201
    1614:	50 e4       	ldi	r21, 0x40	; 64
    1616:	c7 01       	movw	r24, r14
    1618:	b6 01       	movw	r22, r12
    161a:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    161e:	a5 01       	movw	r20, r10
    1620:	94 01       	movw	r18, r8
    1622:	0e 94 b5 18 	call	0x316a	; 0x316a <__divsf3>
    1626:	9b 01       	movw	r18, r22
    1628:	ac 01       	movw	r20, r24
    162a:	c7 01       	movw	r24, r14
    162c:	b6 01       	movw	r22, r12
    162e:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
    1632:	56 2f       	mov	r21, r22
    1634:	47 2f       	mov	r20, r23
    1636:	38 2f       	mov	r19, r24
    1638:	29 2f       	mov	r18, r25
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <theta_error_correction+0x66>
	else{return error;}
    163c:	5c 2d       	mov	r21, r12
    163e:	4d 2d       	mov	r20, r13
    1640:	3e 2d       	mov	r19, r14
    1642:	2f 2d       	mov	r18, r15
}
    1644:	65 2f       	mov	r22, r21
    1646:	74 2f       	mov	r23, r20
    1648:	83 2f       	mov	r24, r19
    164a:	92 2f       	mov	r25, r18
    164c:	ff 90       	pop	r15
    164e:	ef 90       	pop	r14
    1650:	df 90       	pop	r13
    1652:	cf 90       	pop	r12
    1654:	bf 90       	pop	r11
    1656:	af 90       	pop	r10
    1658:	9f 90       	pop	r9
    165a:	8f 90       	pop	r8
    165c:	08 95       	ret

0000165e <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    165e:	2f 92       	push	r2
    1660:	3f 92       	push	r3
    1662:	4f 92       	push	r4
    1664:	5f 92       	push	r5
    1666:	6f 92       	push	r6
    1668:	7f 92       	push	r7
    166a:	8f 92       	push	r8
    166c:	9f 92       	push	r9
    166e:	af 92       	push	r10
    1670:	bf 92       	push	r11
    1672:	cf 92       	push	r12
    1674:	df 92       	push	r13
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	a8 97       	sbiw	r28, 0x28	; 40
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    1692:	ce 01       	movw	r24, r28
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	0e 94 65 13 	call	0x26ca	; 0x26ca <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    169a:	6b 81       	ldd	r22, Y+3	; 0x03
    169c:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    169e:	0f 81       	ldd	r16, Y+7	; 0x07
    16a0:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    16a2:	49 85       	ldd	r20, Y+9	; 0x09
    16a4:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    16a6:	ad 85       	ldd	r26, Y+13	; 0x0d
    16a8:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    16aa:	2f 85       	ldd	r18, Y+15	; 0x0f
    16ac:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    16ae:	eb 89       	ldd	r30, Y+19	; 0x13
    16b0:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    16b2:	8d 89       	ldd	r24, Y+21	; 0x15
    16b4:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    16b6:	e9 80       	ldd	r14, Y+1	; 0x01
    16b8:	fa 80       	ldd	r15, Y+2	; 0x02
    16ba:	fa 8e       	std	Y+26, r15	; 0x1a
    16bc:	e9 8e       	std	Y+25, r14	; 0x19
    16be:	1c 8f       	std	Y+28, r17	; 0x1c
    16c0:	0b 8f       	std	Y+27, r16	; 0x1b
    16c2:	be 8f       	std	Y+30, r27	; 0x1e
    16c4:	ad 8f       	std	Y+29, r26	; 0x1d
    16c6:	f8 a3       	std	Y+32, r31	; 0x20
    16c8:	ef 8f       	std	Y+31, r30	; 0x1f
    16ca:	7a a3       	std	Y+34, r23	; 0x22
    16cc:	69 a3       	std	Y+33, r22	; 0x21
    16ce:	5c a3       	std	Y+36, r21	; 0x24
    16d0:	4b a3       	std	Y+35, r20	; 0x23
    16d2:	3e a3       	std	Y+38, r19	; 0x26
    16d4:	2d a3       	std	Y+37, r18	; 0x25
    16d6:	98 a7       	std	Y+40, r25	; 0x28
    16d8:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    16da:	66 e2       	ldi	r22, 0x26	; 38
    16dc:	71 e0       	ldi	r23, 0x01	; 1
    16de:	ce 01       	movw	r24, r28
    16e0:	49 96       	adiw	r24, 0x19	; 25
    16e2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <localization_calc>
    16e6:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    16e8:	fc 01       	movw	r30, r24
    16ea:	80 85       	ldd	r24, Z+8	; 0x08
    16ec:	91 85       	ldd	r25, Z+9	; 0x09
    16ee:	a2 85       	ldd	r26, Z+10	; 0x0a
    16f0:	b3 85       	ldd	r27, Z+11	; 0x0b
    16f2:	0f 2e       	mov	r0, r31
    16f4:	f6 e2       	ldi	r31, 0x26	; 38
    16f6:	2f 2e       	mov	r2, r31
    16f8:	f1 e0       	ldi	r31, 0x01	; 1
    16fa:	3f 2e       	mov	r3, r31
    16fc:	f0 2d       	mov	r31, r0
    16fe:	f1 01       	movw	r30, r2
    1700:	80 87       	std	Z+8, r24	; 0x08
    1702:	91 87       	std	Z+9, r25	; 0x09
    1704:	a2 87       	std	Z+10, r26	; 0x0a
    1706:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    1708:	f8 01       	movw	r30, r16
    170a:	60 85       	ldd	r22, Z+8	; 0x08
    170c:	71 85       	ldd	r23, Z+9	; 0x09
    170e:	82 85       	ldd	r24, Z+10	; 0x0a
    1710:	93 85       	ldd	r25, Z+11	; 0x0b
    1712:	0e 94 ef 0a 	call	0x15de	; 0x15de <theta_error_correction>
    1716:	2b 01       	movw	r4, r22
    1718:	3c 01       	movw	r6, r24
    171a:	f8 01       	movw	r30, r16
    171c:	60 87       	std	Z+8, r22	; 0x08
    171e:	71 87       	std	Z+9, r23	; 0x09
    1720:	82 87       	std	Z+10, r24	; 0x0a
    1722:	93 87       	std	Z+11, r25	; 0x0b
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1724:	24 ea       	ldi	r18, 0xA4	; 164
    1726:	30 e7       	ldi	r19, 0x70	; 112
    1728:	4d e7       	ldi	r20, 0x7D	; 125
    172a:	5f e3       	ldi	r21, 0x3F	; 63
    172c:	60 81       	ld	r22, Z
    172e:	71 81       	ldd	r23, Z+1	; 0x01
    1730:	82 81       	ldd	r24, Z+2	; 0x02
    1732:	93 81       	ldd	r25, Z+3	; 0x03
    1734:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    1738:	4b 01       	movw	r8, r22
    173a:	5c 01       	movw	r10, r24
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	37 ed       	ldi	r19, 0xD7	; 215
    1740:	43 e2       	ldi	r20, 0x23	; 35
    1742:	5c e3       	ldi	r21, 0x3C	; 60
    1744:	60 91 c5 01 	lds	r22, 0x01C5
    1748:	70 91 c6 01 	lds	r23, 0x01C6
    174c:	80 91 c7 01 	lds	r24, 0x01C7
    1750:	90 91 c8 01 	lds	r25, 0x01C8
    1754:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    1758:	9b 01       	movw	r18, r22
    175a:	ac 01       	movw	r20, r24
    175c:	c5 01       	movw	r24, r10
    175e:	b4 01       	movw	r22, r8
    1760:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
    1764:	4b 01       	movw	r8, r22
    1766:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    1768:	60 93 c5 01 	sts	0x01C5, r22
    176c:	70 93 c6 01 	sts	0x01C6, r23
    1770:	80 93 c7 01 	sts	0x01C7, r24
    1774:	90 93 c8 01 	sts	0x01C8, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1778:	24 ea       	ldi	r18, 0xA4	; 164
    177a:	30 e7       	ldi	r19, 0x70	; 112
    177c:	4d e7       	ldi	r20, 0x7D	; 125
    177e:	5f e3       	ldi	r21, 0x3F	; 63
    1780:	f8 01       	movw	r30, r16
    1782:	64 81       	ldd	r22, Z+4	; 0x04
    1784:	75 81       	ldd	r23, Z+5	; 0x05
    1786:	86 81       	ldd	r24, Z+6	; 0x06
    1788:	97 81       	ldd	r25, Z+7	; 0x07
    178a:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    178e:	6b 01       	movw	r12, r22
    1790:	7c 01       	movw	r14, r24
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	37 ed       	ldi	r19, 0xD7	; 215
    1796:	43 e2       	ldi	r20, 0x23	; 35
    1798:	5c e3       	ldi	r21, 0x3C	; 60
    179a:	60 91 c1 01 	lds	r22, 0x01C1
    179e:	70 91 c2 01 	lds	r23, 0x01C2
    17a2:	80 91 c3 01 	lds	r24, 0x01C3
    17a6:	90 91 c4 01 	lds	r25, 0x01C4
    17aa:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    17ae:	9b 01       	movw	r18, r22
    17b0:	ac 01       	movw	r20, r24
    17b2:	c7 01       	movw	r24, r14
    17b4:	b6 01       	movw	r22, r12
    17b6:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
    17ba:	6b 01       	movw	r12, r22
    17bc:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    17be:	60 93 c1 01 	sts	0x01C1, r22
    17c2:	70 93 c2 01 	sts	0x01C2, r23
    17c6:	80 93 c3 01 	sts	0x01C3, r24
    17ca:	90 93 c4 01 	sts	0x01C4, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    17ce:	24 ea       	ldi	r18, 0xA4	; 164
    17d0:	30 e7       	ldi	r19, 0x70	; 112
    17d2:	4d e7       	ldi	r20, 0x7D	; 125
    17d4:	5f e3       	ldi	r21, 0x3F	; 63
    17d6:	c3 01       	movw	r24, r6
    17d8:	b2 01       	movw	r22, r4
    17da:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    17de:	2b 01       	movw	r4, r22
    17e0:	3c 01       	movw	r6, r24
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	37 ed       	ldi	r19, 0xD7	; 215
    17e6:	43 e2       	ldi	r20, 0x23	; 35
    17e8:	5c e3       	ldi	r21, 0x3C	; 60
    17ea:	60 91 bd 01 	lds	r22, 0x01BD
    17ee:	70 91 be 01 	lds	r23, 0x01BE
    17f2:	80 91 bf 01 	lds	r24, 0x01BF
    17f6:	90 91 c0 01 	lds	r25, 0x01C0
    17fa:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    17fe:	9b 01       	movw	r18, r22
    1800:	ac 01       	movw	r20, r24
    1802:	c3 01       	movw	r24, r6
    1804:	b2 01       	movw	r22, r4
    1806:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    180a:	60 93 bd 01 	sts	0x01BD, r22
    180e:	70 93 be 01 	sts	0x01BE, r23
    1812:	80 93 bf 01 	sts	0x01BF, r24
    1816:	90 93 c0 01 	sts	0x01C0, r25
	
	robotCenterPrev[0] = x;
    181a:	f1 01       	movw	r30, r2
    181c:	80 82       	st	Z, r8
    181e:	91 82       	std	Z+1, r9	; 0x01
    1820:	a2 82       	std	Z+2, r10	; 0x02
    1822:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    1824:	c4 82       	std	Z+4, r12	; 0x04
    1826:	d5 82       	std	Z+5, r13	; 0x05
    1828:	e6 82       	std	Z+6, r14	; 0x06
    182a:	f7 82       	std	Z+7, r15	; 0x07
}
    182c:	a8 96       	adiw	r28, 0x28	; 40
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	df 90       	pop	r13
    1846:	cf 90       	pop	r12
    1848:	bf 90       	pop	r11
    184a:	af 90       	pop	r10
    184c:	9f 90       	pop	r9
    184e:	8f 90       	pop	r8
    1850:	7f 90       	pop	r7
    1852:	6f 90       	pop	r6
    1854:	5f 90       	pop	r5
    1856:	4f 90       	pop	r4
    1858:	3f 90       	pop	r3
    185a:	2f 90       	pop	r2
    185c:	08 95       	ret

0000185e <run_motor_control_loop>:



/* PID Control */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd)
{
    185e:	4f 92       	push	r4
    1860:	5f 92       	push	r5
    1862:	6f 92       	push	r6
    1864:	7f 92       	push	r7
    1866:	8f 92       	push	r8
    1868:	9f 92       	push	r9
    186a:	af 92       	push	r10
    186c:	bf 92       	push	r11
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	68 97       	sbiw	r28, 0x18	; 24
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	29 01       	movw	r4, r18
    1890:	3a 01       	movw	r6, r20
    1892:	e9 8a       	std	Y+17, r14	; 0x11
    1894:	fa 8a       	std	Y+18, r15	; 0x12
    1896:	0b 8b       	std	Y+19, r16	; 0x13
    1898:	1c 8b       	std	Y+20, r17	; 0x14
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    189a:	20 91 c5 01 	lds	r18, 0x01C5
    189e:	30 91 c6 01 	lds	r19, 0x01C6
    18a2:	40 91 c7 01 	lds	r20, 0x01C7
    18a6:	50 91 c8 01 	lds	r21, 0x01C8
    18aa:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
    18ae:	6d 83       	std	Y+5, r22	; 0x05
    18b0:	7e 83       	std	Y+6, r23	; 0x06
    18b2:	8f 83       	std	Y+7, r24	; 0x07
    18b4:	98 87       	std	Y+8, r25	; 0x08
    18b6:	20 91 c1 01 	lds	r18, 0x01C1
    18ba:	30 91 c2 01 	lds	r19, 0x01C2
    18be:	40 91 c3 01 	lds	r20, 0x01C3
    18c2:	50 91 c4 01 	lds	r21, 0x01C4
    18c6:	c3 01       	movw	r24, r6
    18c8:	b2 01       	movw	r22, r4
    18ca:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
    18ce:	69 87       	std	Y+9, r22	; 0x09
    18d0:	7a 87       	std	Y+10, r23	; 0x0a
    18d2:	8b 87       	std	Y+11, r24	; 0x0b
    18d4:	9c 87       	std	Y+12, r25	; 0x0c
    18d6:	2d 81       	ldd	r18, Y+5	; 0x05
    18d8:	3e 81       	ldd	r19, Y+6	; 0x06
    18da:	4f 81       	ldd	r20, Y+7	; 0x07
    18dc:	58 85       	ldd	r21, Y+8	; 0x08
    18de:	0e 94 4c 18 	call	0x3098	; 0x3098 <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    18e2:	20 91 bd 01 	lds	r18, 0x01BD
    18e6:	30 91 be 01 	lds	r19, 0x01BE
    18ea:	40 91 bf 01 	lds	r20, 0x01BF
    18ee:	50 91 c0 01 	lds	r21, 0x01C0
    18f2:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
	theta_error = theta_error_correction(theta_error);
    18f6:	0e 94 ef 0a 	call	0x15de	; 0x15de <theta_error_correction>
    18fa:	69 83       	std	Y+1, r22	; 0x01
    18fc:	7a 83       	std	Y+2, r23	; 0x02
    18fe:	8b 83       	std	Y+3, r24	; 0x03
    1900:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    1902:	2b 01       	movw	r4, r22
    1904:	3c 01       	movw	r6, r24
    1906:	e8 94       	clt
    1908:	77 f8       	bld	r7, 7
    190a:	a6 01       	movw	r20, r12
    190c:	95 01       	movw	r18, r10
    190e:	c3 01       	movw	r24, r6
    1910:	b2 01       	movw	r22, r4
    1912:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gesf2>
    1916:	18 16       	cp	r1, r24
    1918:	84 f4       	brge	.+32     	; 0x193a <run_motor_control_loop+0xdc>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    191a:	29 81       	ldd	r18, Y+1	; 0x01
    191c:	3a 81       	ldd	r19, Y+2	; 0x02
    191e:	4b 81       	ldd	r20, Y+3	; 0x03
    1920:	5c 81       	ldd	r21, Y+4	; 0x04
    1922:	c3 01       	movw	r24, r6
    1924:	b2 01       	movw	r22, r4
    1926:	0e 94 b5 18 	call	0x316a	; 0x316a <__divsf3>
    192a:	a6 01       	movw	r20, r12
    192c:	95 01       	movw	r18, r10
    192e:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    1932:	69 83       	std	Y+1, r22	; 0x01
    1934:	7a 83       	std	Y+2, r23	; 0x02
    1936:	8b 83       	std	Y+3, r24	; 0x03
    1938:	9c 83       	std	Y+4, r25	; 0x04
	}

	float angular_derivative = (theta_error-previous_theta_error)/TIMESTEP;
    193a:	20 91 b9 01 	lds	r18, 0x01B9
    193e:	30 91 ba 01 	lds	r19, 0x01BA
    1942:	40 91 bb 01 	lds	r20, 0x01BB
    1946:	50 91 bc 01 	lds	r21, 0x01BC
    194a:	69 81       	ldd	r22, Y+1	; 0x01
    194c:	7a 81       	ldd	r23, Y+2	; 0x02
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
    1956:	2f e6       	ldi	r18, 0x6F	; 111
    1958:	32 e1       	ldi	r19, 0x12	; 18
    195a:	43 e8       	ldi	r20, 0x83	; 131
    195c:	5a e3       	ldi	r21, 0x3A	; 58
    195e:	0e 94 b5 18 	call	0x316a	; 0x316a <__divsf3>
    1962:	6d 8b       	std	Y+21, r22	; 0x15
    1964:	7e 8b       	std	Y+22, r23	; 0x16
    1966:	8f 8b       	std	Y+23, r24	; 0x17
    1968:	98 8f       	std	Y+24, r25	; 0x18
	float angular_output = theta_kp*theta_error - theta_kd*angular_derivative; //If output > 0, turn left
    196a:	29 81       	ldd	r18, Y+1	; 0x01
    196c:	3a 81       	ldd	r19, Y+2	; 0x02
    196e:	4b 81       	ldd	r20, Y+3	; 0x03
    1970:	5c 81       	ldd	r21, Y+4	; 0x04
    1972:	6b a5       	ldd	r22, Y+43	; 0x2b
    1974:	7c a5       	ldd	r23, Y+44	; 0x2c
    1976:	8d a5       	ldd	r24, Y+45	; 0x2d
    1978:	9e a5       	ldd	r25, Y+46	; 0x2e
    197a:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    197e:	6b 01       	movw	r12, r22
    1980:	7c 01       	movw	r14, r24
    1982:	2d 89       	ldd	r18, Y+21	; 0x15
    1984:	3e 89       	ldd	r19, Y+22	; 0x16
    1986:	4f 89       	ldd	r20, Y+23	; 0x17
    1988:	58 8d       	ldd	r21, Y+24	; 0x18
    198a:	6f a5       	ldd	r22, Y+47	; 0x2f
    198c:	78 a9       	ldd	r23, Y+48	; 0x30
    198e:	89 a9       	ldd	r24, Y+49	; 0x31
    1990:	9a a9       	ldd	r25, Y+50	; 0x32
    1992:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    1996:	9b 01       	movw	r18, r22
    1998:	ac 01       	movw	r20, r24
    199a:	c7 01       	movw	r24, r14
    199c:	b6 01       	movw	r22, r12
    199e:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
	previous_theta_error = theta_error;
    19a2:	29 81       	ldd	r18, Y+1	; 0x01
    19a4:	3a 81       	ldd	r19, Y+2	; 0x02
    19a6:	4b 81       	ldd	r20, Y+3	; 0x03
    19a8:	5c 81       	ldd	r21, Y+4	; 0x04
    19aa:	20 93 b9 01 	sts	0x01B9, r18
    19ae:	30 93 ba 01 	sts	0x01BA, r19
    19b2:	40 93 bb 01 	sts	0x01BB, r20
    19b6:	50 93 bc 01 	sts	0x01BC, r21
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    19ba:	2b ed       	ldi	r18, 0xDB	; 219
    19bc:	3f e0       	ldi	r19, 0x0F	; 15
    19be:	49 e4       	ldi	r20, 0x49	; 73
    19c0:	50 e4       	ldi	r21, 0x40	; 64
    19c2:	0e 94 b5 18 	call	0x316a	; 0x316a <__divsf3>
    19c6:	6d 87       	std	Y+13, r22	; 0x0d
    19c8:	7e 87       	std	Y+14, r23	; 0x0e
    19ca:	8f 87       	std	Y+15, r24	; 0x0f
    19cc:	98 8b       	std	Y+16, r25	; 0x10

	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    19ce:	69 81       	ldd	r22, Y+1	; 0x01
    19d0:	7a 81       	ldd	r23, Y+2	; 0x02
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	9c 81       	ldd	r25, Y+4	; 0x04
    19d6:	0e 94 b0 18 	call	0x3160	; 0x3160 <cos>
    19da:	2b 01       	movw	r4, r22
    19dc:	3c 01       	movw	r6, r24
    19de:	29 85       	ldd	r18, Y+9	; 0x09
    19e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    19e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    19e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    19e6:	ca 01       	movw	r24, r20
    19e8:	b9 01       	movw	r22, r18
    19ea:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    19ee:	6b 01       	movw	r12, r22
    19f0:	7c 01       	movw	r14, r24
    19f2:	2d 81       	ldd	r18, Y+5	; 0x05
    19f4:	3e 81       	ldd	r19, Y+6	; 0x06
    19f6:	4f 81       	ldd	r20, Y+7	; 0x07
    19f8:	58 85       	ldd	r21, Y+8	; 0x08
    19fa:	ca 01       	movw	r24, r20
    19fc:	b9 01       	movw	r22, r18
    19fe:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    1a02:	9b 01       	movw	r18, r22
    1a04:	ac 01       	movw	r20, r24
    1a06:	c7 01       	movw	r24, r14
    1a08:	b6 01       	movw	r22, r12
    1a0a:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
    1a0e:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <sqrt>
    1a12:	9b 01       	movw	r18, r22
    1a14:	ac 01       	movw	r20, r24
    1a16:	c3 01       	movw	r24, r6
    1a18:	b2 01       	movw	r22, r4
    1a1a:	9f 77       	andi	r25, 0x7F	; 127
    1a1c:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    1a20:	6b 01       	movw	r12, r22
    1a22:	7c 01       	movw	r14, r24
	if (has_puck()) {
    1a24:	0e 94 09 16 	call	0x2c12	; 0x2c12 <has_puck>
    1a28:	88 23       	and	r24, r24
    1a2a:	e1 f0       	breq	.+56     	; 0x1a64 <run_motor_control_loop+0x206>
		if (linear_error<0){
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	a9 01       	movw	r20, r18
    1a32:	c7 01       	movw	r24, r14
    1a34:	b6 01       	movw	r22, r12
    1a36:	0e 94 ab 18 	call	0x3156	; 0x3156 <__cmpsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	5c f0       	brlt	.+22     	; 0x1a54 <run_motor_control_loop+0x1f6>
			linear_error = 30;
		} else {
			linear_error += 30;
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 ef       	ldi	r20, 0xF0	; 240
    1a44:	51 e4       	ldi	r21, 0x41	; 65
    1a46:	c7 01       	movw	r24, r14
    1a48:	b6 01       	movw	r22, r12
    1a4a:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
    1a4e:	6b 01       	movw	r12, r22
    1a50:	7c 01       	movw	r14, r24
    1a52:	08 c0       	rjmp	.+16     	; 0x1a64 <run_motor_control_loop+0x206>
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	if (has_puck()) {
		if (linear_error<0){
			linear_error = 30;
    1a54:	0f 2e       	mov	r0, r31
    1a56:	c1 2c       	mov	r12, r1
    1a58:	d1 2c       	mov	r13, r1
    1a5a:	f0 ef       	ldi	r31, 0xF0	; 240
    1a5c:	ef 2e       	mov	r14, r31
    1a5e:	f1 e4       	ldi	r31, 0x41	; 65
    1a60:	ff 2e       	mov	r15, r31
    1a62:	f0 2d       	mov	r31, r0
		} else {
			linear_error += 30;
		}
	}
	float linear_derivative = (linear_error-previous_linear_error)/TIMESTEP;
    1a64:	20 91 b5 01 	lds	r18, 0x01B5
    1a68:	30 91 b6 01 	lds	r19, 0x01B6
    1a6c:	40 91 b7 01 	lds	r20, 0x01B7
    1a70:	50 91 b8 01 	lds	r21, 0x01B8
    1a74:	c7 01       	movw	r24, r14
    1a76:	b6 01       	movw	r22, r12
    1a78:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
    1a7c:	2f e6       	ldi	r18, 0x6F	; 111
    1a7e:	32 e1       	ldi	r19, 0x12	; 18
    1a80:	43 e8       	ldi	r20, 0x83	; 131
    1a82:	5a e3       	ldi	r21, 0x3A	; 58
    1a84:	0e 94 b5 18 	call	0x316a	; 0x316a <__divsf3>
    1a88:	4b 01       	movw	r8, r22
    1a8a:	5c 01       	movw	r10, r24
	float linear_output = linear_kp*linear_error - linear_kd*linear_derivative;
    1a8c:	a7 01       	movw	r20, r14
    1a8e:	96 01       	movw	r18, r12
    1a90:	6b a9       	ldd	r22, Y+51	; 0x33
    1a92:	7c a9       	ldd	r23, Y+52	; 0x34
    1a94:	8d a9       	ldd	r24, Y+53	; 0x35
    1a96:	9e a9       	ldd	r25, Y+54	; 0x36
    1a98:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    1a9c:	2b 01       	movw	r4, r22
    1a9e:	3c 01       	movw	r6, r24
    1aa0:	a5 01       	movw	r20, r10
    1aa2:	94 01       	movw	r18, r8
    1aa4:	6f a9       	ldd	r22, Y+55	; 0x37
    1aa6:	78 ad       	ldd	r23, Y+56	; 0x38
    1aa8:	89 ad       	ldd	r24, Y+57	; 0x39
    1aaa:	9a ad       	ldd	r25, Y+58	; 0x3a
    1aac:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    1ab0:	9b 01       	movw	r18, r22
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	c3 01       	movw	r24, r6
    1ab6:	b2 01       	movw	r22, r4
    1ab8:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
    1abc:	2b 01       	movw	r4, r22
    1abe:	3c 01       	movw	r6, r24
	previous_linear_error = linear_error;
    1ac0:	c0 92 b5 01 	sts	0x01B5, r12
    1ac4:	d0 92 b6 01 	sts	0x01B6, r13
    1ac8:	e0 92 b7 01 	sts	0x01B7, r14
    1acc:	f0 92 b8 01 	sts	0x01B8, r15
	if(linear_output>40.0){linear_output=40.0;}
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e2       	ldi	r20, 0x20	; 32
    1ad6:	52 e4       	ldi	r21, 0x42	; 66
    1ad8:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gesf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	44 f4       	brge	.+16     	; 0x1af0 <run_motor_control_loop+0x292>
    1ae0:	0f 2e       	mov	r0, r31
    1ae2:	41 2c       	mov	r4, r1
    1ae4:	51 2c       	mov	r5, r1
    1ae6:	f0 e2       	ldi	r31, 0x20	; 32
    1ae8:	6f 2e       	mov	r6, r31
    1aea:	f2 e4       	ldi	r31, 0x42	; 66
    1aec:	7f 2e       	mov	r7, r31
    1aee:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	52 e4       	ldi	r21, 0x42	; 66
    1af8:	c3 01       	movw	r24, r6
    1afa:	b2 01       	movw	r22, r4
    1afc:	0e 94 b5 18 	call	0x316a	; 0x316a <__divsf3>
    1b00:	6b 01       	movw	r12, r22
    1b02:	7c 01       	movw	r14, r24
	
	if (linear_derivative < 0.1 && angular_derivative < 0.01) {
    1b04:	2d ec       	ldi	r18, 0xCD	; 205
    1b06:	3c ec       	ldi	r19, 0xCC	; 204
    1b08:	4c ec       	ldi	r20, 0xCC	; 204
    1b0a:	5d e3       	ldi	r21, 0x3D	; 61
    1b0c:	c5 01       	movw	r24, r10
    1b0e:	b4 01       	movw	r22, r8
    1b10:	0e 94 ab 18 	call	0x3156	; 0x3156 <__cmpsf2>
    1b14:	88 23       	and	r24, r24
    1b16:	0c f5       	brge	.+66     	; 0x1b5a <run_motor_control_loop+0x2fc>
    1b18:	2a e0       	ldi	r18, 0x0A	; 10
    1b1a:	37 ed       	ldi	r19, 0xD7	; 215
    1b1c:	43 e2       	ldi	r20, 0x23	; 35
    1b1e:	5c e3       	ldi	r21, 0x3C	; 60
    1b20:	6d 89       	ldd	r22, Y+21	; 0x15
    1b22:	7e 89       	ldd	r23, Y+22	; 0x16
    1b24:	8f 89       	ldd	r24, Y+23	; 0x17
    1b26:	98 8d       	ldd	r25, Y+24	; 0x18
    1b28:	0e 94 ab 18 	call	0x3156	; 0x3156 <__cmpsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	ac f4       	brge	.+42     	; 0x1b5a <run_motor_control_loop+0x2fc>
		angular_output = 0.2*fabs(theta_error)/theta_error;
    1b30:	2d ec       	ldi	r18, 0xCD	; 205
    1b32:	3c ec       	ldi	r19, 0xCC	; 204
    1b34:	4c e4       	ldi	r20, 0x4C	; 76
    1b36:	5e e3       	ldi	r21, 0x3E	; 62
    1b38:	69 81       	ldd	r22, Y+1	; 0x01
    1b3a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	9f 77       	andi	r25, 0x7F	; 127
    1b42:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    1b46:	29 81       	ldd	r18, Y+1	; 0x01
    1b48:	3a 81       	ldd	r19, Y+2	; 0x02
    1b4a:	4b 81       	ldd	r20, Y+3	; 0x03
    1b4c:	5c 81       	ldd	r21, Y+4	; 0x04
    1b4e:	0e 94 b5 18 	call	0x316a	; 0x316a <__divsf3>
    1b52:	6d 87       	std	Y+13, r22	; 0x0d
    1b54:	7e 87       	std	Y+14, r23	; 0x0e
    1b56:	8f 87       	std	Y+15, r24	; 0x0f
    1b58:	98 8b       	std	Y+16, r25	; 0x10
	}
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    1b5a:	8d 84       	ldd	r8, Y+13	; 0x0d
    1b5c:	9e 84       	ldd	r9, Y+14	; 0x0e
    1b5e:	af 84       	ldd	r10, Y+15	; 0x0f
    1b60:	b8 88       	ldd	r11, Y+16	; 0x10
    1b62:	b7 fa       	bst	r11, 7
    1b64:	b0 94       	com	r11
    1b66:	b7 f8       	bld	r11, 7
    1b68:	b0 94       	com	r11
	right_duty_cycle = angular_output;
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    1b6a:	69 81       	ldd	r22, Y+1	; 0x01
    1b6c:	7a 81       	ldd	r23, Y+2	; 0x02
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	9f 77       	andi	r25, 0x7F	; 127
    1b74:	2b ed       	ldi	r18, 0xDB	; 219
    1b76:	3f e0       	ldi	r19, 0x0F	; 15
    1b78:	49 ec       	ldi	r20, 0xC9	; 201
    1b7a:	5f e3       	ldi	r21, 0x3F	; 63
    1b7c:	0e 94 ab 18 	call	0x3156	; 0x3156 <__cmpsf2>
    1b80:	88 23       	and	r24, r24
    1b82:	0c f5       	brge	.+66     	; 0x1bc6 <run_motor_control_loop+0x368>
		left_duty_cycle += linear_output;
    1b84:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b86:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b88:	4f 85       	ldd	r20, Y+15	; 0x0f
    1b8a:	58 89       	ldd	r21, Y+16	; 0x10
    1b8c:	c7 01       	movw	r24, r14
    1b8e:	b6 01       	movw	r22, r12
    1b90:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
    1b94:	60 93 22 01 	sts	0x0122, r22
    1b98:	70 93 23 01 	sts	0x0123, r23
    1b9c:	80 93 24 01 	sts	0x0124, r24
    1ba0:	90 93 25 01 	sts	0x0125, r25
		right_duty_cycle += linear_output;
    1ba4:	a7 01       	movw	r20, r14
    1ba6:	96 01       	movw	r18, r12
    1ba8:	6d 85       	ldd	r22, Y+13	; 0x0d
    1baa:	7e 85       	ldd	r23, Y+14	; 0x0e
    1bac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bae:	98 89       	ldd	r25, Y+16	; 0x10
    1bb0:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
    1bb4:	60 93 1e 01 	sts	0x011E, r22
    1bb8:	70 93 1f 01 	sts	0x011F, r23
    1bbc:	80 93 20 01 	sts	0x0120, r24
    1bc0:	90 93 21 01 	sts	0x0121, r25
    1bc4:	1e c0       	rjmp	.+60     	; 0x1c02 <run_motor_control_loop+0x3a4>
		} else{
		left_duty_cycle -= linear_output;
    1bc6:	a7 01       	movw	r20, r14
    1bc8:	96 01       	movw	r18, r12
    1bca:	c5 01       	movw	r24, r10
    1bcc:	b4 01       	movw	r22, r8
    1bce:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
    1bd2:	60 93 22 01 	sts	0x0122, r22
    1bd6:	70 93 23 01 	sts	0x0123, r23
    1bda:	80 93 24 01 	sts	0x0124, r24
    1bde:	90 93 25 01 	sts	0x0125, r25
		right_duty_cycle -= linear_output;
    1be2:	a7 01       	movw	r20, r14
    1be4:	96 01       	movw	r18, r12
    1be6:	6d 85       	ldd	r22, Y+13	; 0x0d
    1be8:	7e 85       	ldd	r23, Y+14	; 0x0e
    1bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bec:	98 89       	ldd	r25, Y+16	; 0x10
    1bee:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
    1bf2:	60 93 1e 01 	sts	0x011E, r22
    1bf6:	70 93 1f 01 	sts	0x011F, r23
    1bfa:	80 93 20 01 	sts	0x0120, r24
    1bfe:	90 93 21 01 	sts	0x0121, r25
	
	//If it has the puck, don't let either of the motors spin backwards 

		
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	a9 01       	movw	r20, r18
    1c08:	60 91 22 01 	lds	r22, 0x0122
    1c0c:	70 91 23 01 	lds	r23, 0x0123
    1c10:	80 91 24 01 	lds	r24, 0x0124
    1c14:	90 91 25 01 	lds	r25, 0x0125
    1c18:	0e 94 ab 18 	call	0x3156	; 0x3156 <__cmpsf2>
    1c1c:	88 23       	and	r24, r24
    1c1e:	14 f4       	brge	.+4      	; 0x1c24 <run_motor_control_loop+0x3c6>
    1c20:	29 98       	cbi	0x05, 1	; 5
    1c22:	01 c0       	rjmp	.+2      	; 0x1c26 <run_motor_control_loop+0x3c8>
	else{set(PORTB,1);}
    1c24:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	a9 01       	movw	r20, r18
    1c2c:	60 91 1e 01 	lds	r22, 0x011E
    1c30:	70 91 1f 01 	lds	r23, 0x011F
    1c34:	80 91 20 01 	lds	r24, 0x0120
    1c38:	90 91 21 01 	lds	r25, 0x0121
    1c3c:	0e 94 ab 18 	call	0x3156	; 0x3156 <__cmpsf2>
    1c40:	88 23       	and	r24, r24
    1c42:	14 f4       	brge	.+4      	; 0x1c48 <run_motor_control_loop+0x3ea>
    1c44:	2b 98       	cbi	0x05, 3	; 5
    1c46:	01 c0       	rjmp	.+2      	; 0x1c4a <run_motor_control_loop+0x3ec>
	else{set(PORTB,3);}
    1c48:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    1c4a:	80 90 22 01 	lds	r8, 0x0122
    1c4e:	90 90 23 01 	lds	r9, 0x0123
    1c52:	a0 90 24 01 	lds	r10, 0x0124
    1c56:	b0 90 25 01 	lds	r11, 0x0125
    1c5a:	e8 94       	clt
    1c5c:	b7 f8       	bld	r11, 7
    1c5e:	80 92 22 01 	sts	0x0122, r8
    1c62:	90 92 23 01 	sts	0x0123, r9
    1c66:	a0 92 24 01 	sts	0x0124, r10
    1c6a:	b0 92 25 01 	sts	0x0125, r11
	right_duty_cycle = fabs(right_duty_cycle);
    1c6e:	c0 90 1e 01 	lds	r12, 0x011E
    1c72:	d0 90 1f 01 	lds	r13, 0x011F
    1c76:	e0 90 20 01 	lds	r14, 0x0120
    1c7a:	f0 90 21 01 	lds	r15, 0x0121
    1c7e:	e8 94       	clt
    1c80:	f7 f8       	bld	r15, 7
    1c82:	c0 92 1e 01 	sts	0x011E, r12
    1c86:	d0 92 1f 01 	sts	0x011F, r13
    1c8a:	e0 92 20 01 	sts	0x0120, r14
    1c8e:	f0 92 21 01 	sts	0x0121, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    1c92:	a7 01       	movw	r20, r14
    1c94:	96 01       	movw	r18, r12
    1c96:	c5 01       	movw	r24, r10
    1c98:	b4 01       	movw	r22, r8
    1c9a:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gesf2>
    1c9e:	18 16       	cp	r1, r24
    1ca0:	2c f0       	brlt	.+10     	; 0x1cac <run_motor_control_loop+0x44e>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    1ca2:	1c 2d       	mov	r17, r12
    1ca4:	0d 2d       	mov	r16, r13
    1ca6:	7e 2c       	mov	r7, r14
    1ca8:	6f 2c       	mov	r6, r15
    1caa:	04 c0       	rjmp	.+8      	; 0x1cb4 <run_motor_control_loop+0x456>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    1cac:	18 2d       	mov	r17, r8
    1cae:	09 2d       	mov	r16, r9
    1cb0:	7a 2c       	mov	r7, r10
    1cb2:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    1cb4:	29 89       	ldd	r18, Y+17	; 0x11
    1cb6:	3a 89       	ldd	r19, Y+18	; 0x12
    1cb8:	4b 89       	ldd	r20, Y+19	; 0x13
    1cba:	5c 89       	ldd	r21, Y+20	; 0x14
    1cbc:	61 2f       	mov	r22, r17
    1cbe:	70 2f       	mov	r23, r16
    1cc0:	87 2d       	mov	r24, r7
    1cc2:	96 2d       	mov	r25, r6
    1cc4:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gesf2>
    1cc8:	18 16       	cp	r1, r24
    1cca:	64 f5       	brge	.+88     	; 0x1d24 <run_motor_control_loop+0x4c6>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    1ccc:	21 2f       	mov	r18, r17
    1cce:	30 2f       	mov	r19, r16
    1cd0:	47 2d       	mov	r20, r7
    1cd2:	56 2d       	mov	r21, r6
    1cd4:	c5 01       	movw	r24, r10
    1cd6:	b4 01       	movw	r22, r8
    1cd8:	0e 94 b5 18 	call	0x316a	; 0x316a <__divsf3>
    1cdc:	29 89       	ldd	r18, Y+17	; 0x11
    1cde:	3a 89       	ldd	r19, Y+18	; 0x12
    1ce0:	4b 89       	ldd	r20, Y+19	; 0x13
    1ce2:	5c 89       	ldd	r21, Y+20	; 0x14
    1ce4:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    1ce8:	60 93 22 01 	sts	0x0122, r22
    1cec:	70 93 23 01 	sts	0x0123, r23
    1cf0:	80 93 24 01 	sts	0x0124, r24
    1cf4:	90 93 25 01 	sts	0x0125, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    1cf8:	21 2f       	mov	r18, r17
    1cfa:	30 2f       	mov	r19, r16
    1cfc:	47 2d       	mov	r20, r7
    1cfe:	56 2d       	mov	r21, r6
    1d00:	c7 01       	movw	r24, r14
    1d02:	b6 01       	movw	r22, r12
    1d04:	0e 94 b5 18 	call	0x316a	; 0x316a <__divsf3>
    1d08:	29 89       	ldd	r18, Y+17	; 0x11
    1d0a:	3a 89       	ldd	r19, Y+18	; 0x12
    1d0c:	4b 89       	ldd	r20, Y+19	; 0x13
    1d0e:	5c 89       	ldd	r21, Y+20	; 0x14
    1d10:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    1d14:	60 93 1e 01 	sts	0x011E, r22
    1d18:	70 93 1f 01 	sts	0x011F, r23
    1d1c:	80 93 20 01 	sts	0x0120, r24
    1d20:	90 93 21 01 	sts	0x0121, r25
	}
	


	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    1d24:	08 e8       	ldi	r16, 0x88	; 136
    1d26:	10 e0       	ldi	r17, 0x00	; 0
    1d28:	f8 01       	movw	r30, r16
    1d2a:	60 81       	ld	r22, Z
    1d2c:	71 81       	ldd	r23, Z+1	; 0x01
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatunsisf>
    1d36:	20 91 22 01 	lds	r18, 0x0122
    1d3a:	30 91 23 01 	lds	r19, 0x0123
    1d3e:	40 91 24 01 	lds	r20, 0x0124
    1d42:	50 91 25 01 	lds	r21, 0x0125
    1d46:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    1d4a:	0e 94 2e 19 	call	0x325c	; 0x325c <__fixunssfsi>
    1d4e:	70 93 8b 00 	sts	0x008B, r23
    1d52:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    1d56:	f8 01       	movw	r30, r16
    1d58:	60 81       	ld	r22, Z
    1d5a:	71 81       	ldd	r23, Z+1	; 0x01
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatunsisf>
    1d64:	20 91 1e 01 	lds	r18, 0x011E
    1d68:	30 91 1f 01 	lds	r19, 0x011F
    1d6c:	40 91 20 01 	lds	r20, 0x0120
    1d70:	50 91 21 01 	lds	r21, 0x0121
    1d74:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    1d78:	0e 94 2e 19 	call	0x325c	; 0x325c <__fixunssfsi>
    1d7c:	70 93 8d 00 	sts	0x008D, r23
    1d80:	60 93 8c 00 	sts	0x008C, r22

}
    1d84:	68 96       	adiw	r28, 0x18	; 24
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	bf 90       	pop	r11
    1da2:	af 90       	pop	r10
    1da4:	9f 90       	pop	r9
    1da6:	8f 90       	pop	r8
    1da8:	7f 90       	pop	r7
    1daa:	6f 90       	pop	r6
    1dac:	5f 90       	pop	r5
    1dae:	4f 90       	pop	r4
    1db0:	08 95       	ret

00001db2 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    1db2:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1db4:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1db6:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1db8:	8c e0       	ldi	r24, 0x0C	; 12
    1dba:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    1dbe:	e9 e6       	ldi	r30, 0x69	; 105
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	80 62       	ori	r24, 0x20	; 32
    1dc6:	80 83       	st	Z, r24
    1dc8:	80 81       	ld	r24, Z
    1dca:	8f 7e       	andi	r24, 0xEF	; 239
    1dcc:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1dce:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    1dd0:	78 94       	sei
    1dd2:	08 95       	ret

00001dd4 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1dd4:	1f 93       	push	r17
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	18 2f       	mov	r17, r24
    1ddc:	d6 2f       	mov	r29, r22
    1dde:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1de0:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1de4:	94 ea       	ldi	r25, 0xA4	; 164
    1de6:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1dea:	ec eb       	ldi	r30, 0xBC	; 188
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	90 81       	ld	r25, Z
    1df0:	99 23       	and	r25, r25
    1df2:	ec f7       	brge	.-6      	; 0x1dee <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1df4:	90 e5       	ldi	r25, 0x50	; 80
    1df6:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1dfa:	94 e8       	ldi	r25, 0x84	; 132
    1dfc:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1e00:	ec eb       	ldi	r30, 0xBC	; 188
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	90 81       	ld	r25, Z
    1e06:	99 23       	and	r25, r25
    1e08:	ec f7       	brge	.-6      	; 0x1e04 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1e0a:	90 91 b9 00 	lds	r25, 0x00B9
    1e0e:	98 7f       	andi	r25, 0xF8	; 248
    1e10:	90 32       	cpi	r25, 0x20	; 32
    1e12:	29 f4       	brne	.+10     	; 0x1e1e <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1e14:	84 e9       	ldi	r24, 0x94	; 148
    1e16:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	2d c0       	rjmp	.+90     	; 0x1e78 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e24:	84 e8       	ldi	r24, 0x84	; 132
    1e26:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1e2a:	ec eb       	ldi	r30, 0xBC	; 188
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	90 81       	ld	r25, Z
    1e30:	99 23       	and	r25, r25
    1e32:	ec f7       	brge	.-6      	; 0x1e2e <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1e34:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e38:	84 e8       	ldi	r24, 0x84	; 132
    1e3a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1e3e:	ec eb       	ldi	r30, 0xBC	; 188
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	88 23       	and	r24, r24
    1e46:	ec f7       	brge	.-6      	; 0x1e42 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1e48:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e4c:	84 e8       	ldi	r24, 0x84	; 132
    1e4e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1e52:	ec eb       	ldi	r30, 0xBC	; 188
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	88 23       	and	r24, r24
    1e5a:	ec f7       	brge	.-6      	; 0x1e56 <m_rf_open+0x82>
	
	TWDR = packet_length;
    1e5c:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e60:	84 e8       	ldi	r24, 0x84	; 132
    1e62:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1e66:	ec eb       	ldi	r30, 0xBC	; 188
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	88 23       	and	r24, r24
    1e6e:	ec f7       	brge	.-6      	; 0x1e6a <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1e70:	84 e9       	ldi	r24, 0x94	; 148
    1e72:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
}
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
    1e7e:	08 95       	ret

00001e80 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1e86:	84 ea       	ldi	r24, 0xA4	; 164
    1e88:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1e8c:	ec eb       	ldi	r30, 0xBC	; 188
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	90 81       	ld	r25, Z
    1e92:	99 23       	and	r25, r25
    1e94:	ec f7       	brge	.-6      	; 0x1e90 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1e96:	81 e5       	ldi	r24, 0x51	; 81
    1e98:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e9c:	84 e8       	ldi	r24, 0x84	; 132
    1e9e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1ea2:	ec eb       	ldi	r30, 0xBC	; 188
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	90 81       	ld	r25, Z
    1ea8:	99 23       	and	r25, r25
    1eaa:	ec f7       	brge	.-6      	; 0x1ea6 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1eac:	80 91 b9 00 	lds	r24, 0x00B9
    1eb0:	88 7f       	andi	r24, 0xF8	; 248
    1eb2:	88 34       	cpi	r24, 0x48	; 72
    1eb4:	29 f4       	brne	.+10     	; 0x1ec0 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1eb6:	84 e9       	ldi	r24, 0x94	; 148
    1eb8:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	41 c0       	rjmp	.+130    	; 0x1f42 <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1ec0:	84 ec       	ldi	r24, 0xC4	; 196
    1ec2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1ec6:	ec eb       	ldi	r30, 0xBC	; 188
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	90 81       	ld	r25, Z
    1ecc:	99 23       	and	r25, r25
    1ece:	ec f7       	brge	.-6      	; 0x1eca <m_rf_read+0x4a>
	bytes = TWDR;
    1ed0:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1ed4:	46 13       	cpse	r20, r22
    1ed6:	09 c0       	rjmp	.+18     	; 0x1eea <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1ed8:	84 2f       	mov	r24, r20
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	18 16       	cp	r1, r24
    1ee0:	19 06       	cpc	r1, r25
    1ee2:	44 f0       	brlt	.+16     	; 0x1ef4 <m_rf_read+0x74>
    1ee4:	40 e0       	ldi	r20, 0x00	; 0
    1ee6:	50 e0       	ldi	r21, 0x00	; 0
    1ee8:	1a c0       	rjmp	.+52     	; 0x1f1e <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1eea:	84 e9       	ldi	r24, 0x94	; 148
    1eec:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	27 c0       	rjmp	.+78     	; 0x1f42 <m_rf_read+0xc2>
    1ef4:	d9 01       	movw	r26, r18
    1ef6:	50 e0       	ldi	r21, 0x00	; 0
    1ef8:	41 50       	subi	r20, 0x01	; 1
    1efa:	51 09       	sbc	r21, r1
    1efc:	b9 01       	movw	r22, r18
    1efe:	64 0f       	add	r22, r20
    1f00:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1f02:	ec eb       	ldi	r30, 0xBC	; 188
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1f08:	cb eb       	ldi	r28, 0xBB	; 187
    1f0a:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1f0c:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1f0e:	90 81       	ld	r25, Z
    1f10:	99 23       	and	r25, r25
    1f12:	ec f7       	brge	.-6      	; 0x1f0e <m_rf_read+0x8e>
		buffer[i] = TWDR;
    1f14:	98 81       	ld	r25, Y
    1f16:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1f18:	a6 17       	cp	r26, r22
    1f1a:	b7 07       	cpc	r27, r23
    1f1c:	b9 f7       	brne	.-18     	; 0x1f0c <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1f1e:	84 e8       	ldi	r24, 0x84	; 132
    1f20:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1f24:	ec eb       	ldi	r30, 0xBC	; 188
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	90 81       	ld	r25, Z
    1f2a:	99 23       	and	r25, r25
    1f2c:	ec f7       	brge	.-6      	; 0x1f28 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
    1f2e:	80 91 bb 00 	lds	r24, 0x00BB
    1f32:	f9 01       	movw	r30, r18
    1f34:	e4 0f       	add	r30, r20
    1f36:	f5 1f       	adc	r31, r21
    1f38:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1f3a:	84 e9       	ldi	r24, 0x94	; 148
    1f3c:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
}
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	08 95       	ret

00001f48 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    1f4e:	80 ea       	ldi	r24, 0xA0	; 160
    1f50:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    1f54:	82 e1       	ldi	r24, 0x12	; 18
    1f56:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1f58:	09 b4       	in	r0, 0x29	; 41
    1f5a:	00 fe       	sbrs	r0, 0
    1f5c:	fd cf       	rjmp	.-6      	; 0x1f58 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1f5e:	80 e9       	ldi	r24, 0x90	; 144
    1f60:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1f64:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1f68:	10 92 cc 01 	sts	0x01CC, r1
	cdc_line_rtsdtr = 0;
    1f6c:	10 92 c9 01 	sts	0x01C9, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    1f70:	8c e0       	ldi	r24, 0x0C	; 12
    1f72:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1f76:	78 94       	sei
    1f78:	08 95       	ret

00001f7a <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    1f7e:	90 91 cc 01 	lds	r25, 0x01CC
    1f82:	99 23       	and	r25, r25
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <m_usb_tx_char+0xe>
    1f86:	4c c0       	rjmp	.+152    	; 0x2020 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1f88:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1f8a:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    1f8c:	24 e0       	ldi	r18, 0x04	; 4
    1f8e:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    1f92:	20 91 ca 01 	lds	r18, 0x01CA
    1f96:	22 23       	and	r18, r18
    1f98:	49 f0       	breq	.+18     	; 0x1fac <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    1f9a:	20 91 e8 00 	lds	r18, 0x00E8
    1f9e:	25 fd       	sbrc	r18, 5
    1fa0:	03 c0       	rjmp	.+6      	; 0x1fa8 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    1fa2:	9f bf       	out	0x3f, r25	; 63
			return -1;
    1fa4:	8f ef       	ldi	r24, 0xFF	; 255
    1fa6:	41 c0       	rjmp	.+130    	; 0x202a <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    1fa8:	10 92 ca 01 	sts	0x01CA, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    1fac:	30 91 e4 00 	lds	r19, 0x00E4
    1fb0:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1fb2:	20 91 e8 00 	lds	r18, 0x00E8
    1fb6:	25 fd       	sbrc	r18, 5
    1fb8:	24 c0       	rjmp	.+72     	; 0x2002 <m_usb_tx_char+0x88>
		SREG = intr_state;
    1fba:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1fbc:	90 91 e4 00 	lds	r25, 0x00E4
    1fc0:	93 17       	cp	r25, r19
    1fc2:	81 f0       	breq	.+32     	; 0x1fe4 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1fc4:	90 91 cc 01 	lds	r25, 0x01CC
    1fc8:	99 23       	and	r25, r25
    1fca:	61 f1       	breq	.+88     	; 0x2024 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    1fcc:	a9 ee       	ldi	r26, 0xE9	; 233
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1fd2:	e8 ee       	ldi	r30, 0xE8	; 232
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1fd6:	c4 ee       	ldi	r28, 0xE4	; 228
    1fd8:	d0 e0       	ldi	r29, 0x00	; 0
    1fda:	0d c0       	rjmp	.+26     	; 0x1ff6 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    1fdc:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1fde:	98 81       	ld	r25, Y
    1fe0:	93 13       	cpse	r25, r19
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	80 93 ca 01 	sts	0x01CA, r24
			return -1;
    1fea:	8f ef       	ldi	r24, 0xFF	; 255
    1fec:	1e c0       	rjmp	.+60     	; 0x202a <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1fee:	90 91 cc 01 	lds	r25, 0x01CC
    1ff2:	99 23       	and	r25, r25
    1ff4:	c9 f0       	breq	.+50     	; 0x2028 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    1ff6:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1ff8:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    1ffa:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1ffc:	20 81       	ld	r18, Z
    1ffe:	25 ff       	sbrs	r18, 5
    2000:	ed cf       	rjmp	.-38     	; 0x1fdc <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    2002:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    2006:	80 91 e8 00 	lds	r24, 0x00E8
    200a:	85 fd       	sbrc	r24, 5
    200c:	03 c0       	rjmp	.+6      	; 0x2014 <m_usb_tx_char+0x9a>
    200e:	8a e3       	ldi	r24, 0x3A	; 58
    2010:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2014:	85 e0       	ldi	r24, 0x05	; 5
    2016:	80 93 cb 01 	sts	0x01CB, r24
	SREG = intr_state;
    201a:	9f bf       	out	0x3f, r25	; 63
	return 0;
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	05 c0       	rjmp	.+10     	; 0x202a <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    2020:	8f ef       	ldi	r24, 0xFF	; 255
    2022:	03 c0       	rjmp	.+6      	; 0x202a <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2024:	8f ef       	ldi	r24, 0xFF	; 255
    2026:	01 c0       	rjmp	.+2      	; 0x202a <m_usb_tx_char+0xb0>
    2028:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	08 95       	ret

00002030 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    2030:	1f 92       	push	r1
    2032:	0f 92       	push	r0
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	0f 92       	push	r0
    2038:	11 24       	eor	r1, r1
    203a:	8f 93       	push	r24
    203c:	9f 93       	push	r25
    203e:	ef 93       	push	r30
    2040:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    2042:	e1 ee       	ldi	r30, 0xE1	; 225
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
        UDINT = 0;
    2048:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    204a:	83 ff       	sbrs	r24, 3
    204c:	11 c0       	rjmp	.+34     	; 0x2070 <__vector_10+0x40>
		UENUM = 0;
    204e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    2058:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    205c:	92 e1       	ldi	r25, 0x12	; 18
    205e:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    2062:	98 e0       	ldi	r25, 0x08	; 8
    2064:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    2068:	10 92 cc 01 	sts	0x01CC, r1
		cdc_line_rtsdtr = 0;
    206c:	10 92 c9 01 	sts	0x01C9, r1
        }
	if (intbits & (1<<SOFI)) {
    2070:	82 ff       	sbrs	r24, 2
    2072:	13 c0       	rjmp	.+38     	; 0x209a <__vector_10+0x6a>
		if (usb_configuration) {
    2074:	80 91 cc 01 	lds	r24, 0x01CC
    2078:	88 23       	and	r24, r24
    207a:	79 f0       	breq	.+30     	; 0x209a <__vector_10+0x6a>
			t = transmit_flush_timer;
    207c:	80 91 cb 01 	lds	r24, 0x01CB
			if (t) {
    2080:	88 23       	and	r24, r24
    2082:	59 f0       	breq	.+22     	; 0x209a <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2084:	81 50       	subi	r24, 0x01	; 1
    2086:	80 93 cb 01 	sts	0x01CB, r24
				if (!t) {
    208a:	81 11       	cpse	r24, r1
    208c:	06 c0       	rjmp	.+12     	; 0x209a <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    208e:	84 e0       	ldi	r24, 0x04	; 4
    2090:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2094:	8a e3       	ldi	r24, 0x3A	; 58
    2096:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    209a:	ff 91       	pop	r31
    209c:	ef 91       	pop	r30
    209e:	9f 91       	pop	r25
    20a0:	8f 91       	pop	r24
    20a2:	0f 90       	pop	r0
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	0f 90       	pop	r0
    20a8:	1f 90       	pop	r1
    20aa:	18 95       	reti

000020ac <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    20ac:	1f 92       	push	r1
    20ae:	0f 92       	push	r0
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	0f 92       	push	r0
    20b4:	11 24       	eor	r1, r1
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	2f 93       	push	r18
    20bc:	3f 93       	push	r19
    20be:	4f 93       	push	r20
    20c0:	5f 93       	push	r21
    20c2:	6f 93       	push	r22
    20c4:	7f 93       	push	r23
    20c6:	8f 93       	push	r24
    20c8:	9f 93       	push	r25
    20ca:	af 93       	push	r26
    20cc:	bf 93       	push	r27
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	ef 93       	push	r30
    20d4:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    20d6:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    20da:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    20de:	83 ff       	sbrs	r24, 3
    20e0:	4c c1       	rjmp	.+664    	; 0x237a <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    20e2:	e1 ef       	ldi	r30, 0xF1	; 241
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    20e8:	80 81       	ld	r24, Z
                wValue = UEDATX;
    20ea:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    20ec:	90 81       	ld	r25, Z
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    20f2:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    20f4:	90 81       	ld	r25, Z
    20f6:	50 e0       	ldi	r21, 0x00	; 0
    20f8:	59 2b       	or	r21, r25
                wLength = UEDATX;
    20fa:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    20fc:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    20fe:	92 ef       	ldi	r25, 0xF2	; 242
    2100:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    2104:	86 30       	cpi	r24, 0x06	; 6
    2106:	09 f0       	breq	.+2      	; 0x210a <__vector_11+0x5e>
    2108:	58 c0       	rjmp	.+176    	; 0x21ba <__vector_11+0x10e>
    210a:	04 c0       	rjmp	.+8      	; 0x2114 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    210c:	81 e2       	ldi	r24, 0x21	; 33
    210e:	80 93 eb 00 	sts	0x00EB, r24
					return;
    2112:	3a c1       	rjmp	.+628    	; 0x2388 <__vector_11+0x2dc>
    2114:	66 e0       	ldi	r22, 0x06	; 6
    2116:	80 e2       	ldi	r24, 0x20	; 32
    2118:	91 e0       	ldi	r25, 0x01	; 1
				}
				desc_val = pgm_read_word(list);
    211a:	fc 01       	movw	r30, r24
    211c:	a5 91       	lpm	r26, Z+
    211e:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    2120:	2a 17       	cp	r18, r26
    2122:	3b 07       	cpc	r19, r27
    2124:	11 f0       	breq	.+4      	; 0x212a <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    2126:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2128:	23 c0       	rjmp	.+70     	; 0x2170 <__vector_11+0xc4>
				}
				list += 2;
    212a:	fc 01       	movw	r30, r24
    212c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    212e:	a5 91       	lpm	r26, Z+
    2130:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    2132:	4a 17       	cp	r20, r26
    2134:	5b 07       	cpc	r21, r27
    2136:	11 f0       	breq	.+4      	; 0x213c <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    2138:	07 96       	adiw	r24, 0x07	; 7
					continue;
    213a:	1a c0       	rjmp	.+52     	; 0x2170 <__vector_11+0xc4>
				}
				list += 2;
    213c:	fc 01       	movw	r30, r24
    213e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2140:	45 91       	lpm	r20, Z+
    2142:	54 91       	lpm	r21, Z
				list += 2;
    2144:	fc 01       	movw	r30, r24
    2146:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2148:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    214a:	87 2f       	mov	r24, r23
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2150:	8f 3f       	cpi	r24, 0xFF	; 255
    2152:	91 05       	cpc	r25, r1
    2154:	19 f0       	breq	.+6      	; 0x215c <__vector_11+0xb0>
    2156:	10 f0       	brcs	.+4      	; 0x215c <__vector_11+0xb0>
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	82 17       	cp	r24, r18
    215e:	08 f4       	brcc	.+2      	; 0x2162 <__vector_11+0xb6>
    2160:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2162:	a8 ee       	ldi	r26, 0xE8	; 232
    2164:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2166:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2168:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    216a:	c1 ef       	ldi	r28, 0xF1	; 241
    216c:	d0 e0       	ldi	r29, 0x00	; 0
    216e:	03 c0       	rjmp	.+6      	; 0x2176 <__vector_11+0xca>
    2170:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2172:	99 f6       	brne	.-90     	; 0x211a <__vector_11+0x6e>
    2174:	cb cf       	rjmp	.-106    	; 0x210c <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2176:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2178:	98 2f       	mov	r25, r24
    217a:	95 70       	andi	r25, 0x05	; 5
    217c:	e1 f3       	breq	.-8      	; 0x2176 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    217e:	82 fd       	sbrc	r24, 2
    2180:	03 c1       	rjmp	.+518    	; 0x2388 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2182:	32 2f       	mov	r19, r18
    2184:	21 31       	cpi	r18, 0x11	; 17
    2186:	08 f0       	brcs	.+2      	; 0x218a <__vector_11+0xde>
    2188:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    218a:	33 23       	and	r19, r19
    218c:	09 f4       	brne	.+2      	; 0x2190 <__vector_11+0xe4>
    218e:	f9 c0       	rjmp	.+498    	; 0x2382 <__vector_11+0x2d6>
    2190:	fa 01       	movw	r30, r20
    2192:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    2194:	94 91       	lpm	r25, Z
    2196:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2198:	81 50       	subi	r24, 0x01	; 1
    219a:	31 96       	adiw	r30, 0x01	; 1
    219c:	81 11       	cpse	r24, r1
    219e:	fa cf       	rjmp	.-12     	; 0x2194 <__vector_11+0xe8>
    21a0:	8f ef       	ldi	r24, 0xFF	; 255
    21a2:	83 0f       	add	r24, r19
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	01 96       	adiw	r24, 0x01	; 1
    21a8:	48 0f       	add	r20, r24
    21aa:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    21ac:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21ae:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    21b0:	21 11       	cpse	r18, r1
    21b2:	e1 cf       	rjmp	.-62     	; 0x2176 <__vector_11+0xca>
    21b4:	30 31       	cpi	r19, 0x10	; 16
    21b6:	f9 f2       	breq	.-66     	; 0x2176 <__vector_11+0xca>
    21b8:	e7 c0       	rjmp	.+462    	; 0x2388 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    21ba:	85 30       	cpi	r24, 0x05	; 5
    21bc:	61 f4       	brne	.+24     	; 0x21d6 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21be:	8e ef       	ldi	r24, 0xFE	; 254
    21c0:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    21c4:	e8 ee       	ldi	r30, 0xE8	; 232
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	80 ff       	sbrs	r24, 0
    21cc:	fd cf       	rjmp	.-6      	; 0x21c8 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    21ce:	20 68       	ori	r18, 0x80	; 128
    21d0:	20 93 e3 00 	sts	0x00E3, r18
			return;
    21d4:	d9 c0       	rjmp	.+434    	; 0x2388 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    21d6:	89 30       	cpi	r24, 0x09	; 9
    21d8:	09 f0       	breq	.+2      	; 0x21dc <__vector_11+0x130>
    21da:	35 c0       	rjmp	.+106    	; 0x2246 <__vector_11+0x19a>
    21dc:	61 11       	cpse	r22, r1
    21de:	cd c0       	rjmp	.+410    	; 0x237a <__vector_11+0x2ce>
			usb_configuration = wValue;
    21e0:	20 93 cc 01 	sts	0x01CC, r18
			cdc_line_rtsdtr = 0;
    21e4:	10 92 c9 01 	sts	0x01C9, r1
			transmit_flush_timer = 0;
    21e8:	10 92 cb 01 	sts	0x01CB, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21ec:	8e ef       	ldi	r24, 0xFE	; 254
    21ee:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    21f2:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    21f4:	29 ec       	ldi	r18, 0xC9	; 201
    21f6:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    21f8:	c9 ee       	ldi	r28, 0xE9	; 233
    21fa:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    21fc:	ab ee       	ldi	r26, 0xEB	; 235
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    2200:	0c ee       	ldi	r16, 0xEC	; 236
    2202:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    2204:	6d ee       	ldi	r22, 0xED	; 237
    2206:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    2208:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    220a:	a9 01       	movw	r20, r18
    220c:	4f 5f       	subi	r20, 0xFF	; 255
    220e:	5f 4f       	sbci	r21, 0xFF	; 255
    2210:	f9 01       	movw	r30, r18
    2212:	94 91       	lpm	r25, Z
				UECONX = en;
    2214:	9c 93       	st	X, r25
				if (en) {
    2216:	99 23       	and	r25, r25
    2218:	61 f0       	breq	.+24     	; 0x2232 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    221a:	fa 01       	movw	r30, r20
    221c:	44 91       	lpm	r20, Z
    221e:	f8 01       	movw	r30, r16
    2220:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    2222:	f9 01       	movw	r30, r18
    2224:	32 96       	adiw	r30, 0x02	; 2
    2226:	94 91       	lpm	r25, Z
    2228:	2d 5f       	subi	r18, 0xFD	; 253
    222a:	3f 4f       	sbci	r19, 0xFF	; 255
    222c:	fb 01       	movw	r30, r22
    222e:	90 83       	st	Z, r25
    2230:	01 c0       	rjmp	.+2      	; 0x2234 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    2232:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2234:	8f 5f       	subi	r24, 0xFF	; 255
    2236:	85 30       	cpi	r24, 0x05	; 5
    2238:	39 f7       	brne	.-50     	; 0x2208 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    223a:	ea ee       	ldi	r30, 0xEA	; 234
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	8e e1       	ldi	r24, 0x1E	; 30
    2240:	80 83       	st	Z, r24
        		UERST = 0;
    2242:	10 82       	st	Z, r1
			return;
    2244:	a1 c0       	rjmp	.+322    	; 0x2388 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2246:	88 30       	cpi	r24, 0x08	; 8
    2248:	81 f4       	brne	.+32     	; 0x226a <__vector_11+0x1be>
    224a:	60 38       	cpi	r22, 0x80	; 128
    224c:	09 f0       	breq	.+2      	; 0x2250 <__vector_11+0x1a4>
    224e:	95 c0       	rjmp	.+298    	; 0x237a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2250:	e8 ee       	ldi	r30, 0xE8	; 232
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	80 ff       	sbrs	r24, 0
    2258:	fd cf       	rjmp	.-6      	; 0x2254 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    225a:	80 91 cc 01 	lds	r24, 0x01CC
    225e:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2262:	8e ef       	ldi	r24, 0xFE	; 254
    2264:	80 93 e8 00 	sts	0x00E8, r24
    2268:	8f c0       	rjmp	.+286    	; 0x2388 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    226a:	81 32       	cpi	r24, 0x21	; 33
    226c:	b9 f4       	brne	.+46     	; 0x229c <__vector_11+0x1f0>
    226e:	61 3a       	cpi	r22, 0xA1	; 161
    2270:	09 f0       	breq	.+2      	; 0x2274 <__vector_11+0x1c8>
    2272:	83 c0       	rjmp	.+262    	; 0x237a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2274:	e8 ee       	ldi	r30, 0xE8	; 232
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	80 ff       	sbrs	r24, 0
    227c:	fd cf       	rjmp	.-6      	; 0x2278 <__vector_11+0x1cc>
    227e:	e2 e3       	ldi	r30, 0x32	; 50
    2280:	f1 e0       	ldi	r31, 0x01	; 1
    2282:	29 e3       	ldi	r18, 0x39	; 57
    2284:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2286:	a1 ef       	ldi	r26, 0xF1	; 241
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	81 91       	ld	r24, Z+
    228c:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    228e:	e2 17       	cp	r30, r18
    2290:	f3 07       	cpc	r31, r19
    2292:	d9 f7       	brne	.-10     	; 0x228a <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2294:	8e ef       	ldi	r24, 0xFE	; 254
    2296:	80 93 e8 00 	sts	0x00E8, r24
    229a:	76 c0       	rjmp	.+236    	; 0x2388 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    229c:	80 32       	cpi	r24, 0x20	; 32
    229e:	d1 f4       	brne	.+52     	; 0x22d4 <__vector_11+0x228>
    22a0:	61 32       	cpi	r22, 0x21	; 33
    22a2:	09 f0       	breq	.+2      	; 0x22a6 <__vector_11+0x1fa>
    22a4:	6a c0       	rjmp	.+212    	; 0x237a <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    22a6:	e8 ee       	ldi	r30, 0xE8	; 232
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	82 ff       	sbrs	r24, 2
    22ae:	fd cf       	rjmp	.-6      	; 0x22aa <__vector_11+0x1fe>
    22b0:	e2 e3       	ldi	r30, 0x32	; 50
    22b2:	f1 e0       	ldi	r31, 0x01	; 1
    22b4:	29 e3       	ldi	r18, 0x39	; 57
    22b6:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    22b8:	a1 ef       	ldi	r26, 0xF1	; 241
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	8c 91       	ld	r24, X
    22be:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    22c0:	e2 17       	cp	r30, r18
    22c2:	f3 07       	cpc	r31, r19
    22c4:	d9 f7       	brne	.-10     	; 0x22bc <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    22c6:	e8 ee       	ldi	r30, 0xE8	; 232
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	8b ef       	ldi	r24, 0xFB	; 251
    22cc:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    22ce:	8e ef       	ldi	r24, 0xFE	; 254
    22d0:	80 83       	st	Z, r24
    22d2:	5a c0       	rjmp	.+180    	; 0x2388 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    22d4:	82 32       	cpi	r24, 0x22	; 34
    22d6:	71 f4       	brne	.+28     	; 0x22f4 <__vector_11+0x248>
    22d8:	61 32       	cpi	r22, 0x21	; 33
    22da:	09 f0       	breq	.+2      	; 0x22de <__vector_11+0x232>
    22dc:	4e c0       	rjmp	.+156    	; 0x237a <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    22de:	20 93 c9 01 	sts	0x01C9, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    22e2:	e8 ee       	ldi	r30, 0xE8	; 232
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	80 ff       	sbrs	r24, 0
    22ea:	fd cf       	rjmp	.-6      	; 0x22e6 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    22ec:	8e ef       	ldi	r24, 0xFE	; 254
    22ee:	80 93 e8 00 	sts	0x00E8, r24
    22f2:	4a c0       	rjmp	.+148    	; 0x2388 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    22f4:	81 11       	cpse	r24, r1
    22f6:	1a c0       	rjmp	.+52     	; 0x232c <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    22f8:	e8 ee       	ldi	r30, 0xE8	; 232
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	80 ff       	sbrs	r24, 0
    2300:	fd cf       	rjmp	.-6      	; 0x22fc <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    2302:	62 38       	cpi	r22, 0x82	; 130
    2304:	51 f4       	brne	.+20     	; 0x231a <__vector_11+0x26e>
				UENUM = wIndex;
    2306:	e9 ee       	ldi	r30, 0xE9	; 233
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    230c:	80 91 eb 00 	lds	r24, 0x00EB
    2310:	85 fb       	bst	r24, 5
    2312:	88 27       	eor	r24, r24
    2314:	80 f9       	bld	r24, 0
				UENUM = 0;
    2316:	10 82       	st	Z, r1
    2318:	01 c0       	rjmp	.+2      	; 0x231c <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    231a:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    231c:	e1 ef       	ldi	r30, 0xF1	; 241
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 83       	st	Z, r24
			UEDATX = 0;
    2322:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2324:	8e ef       	ldi	r24, 0xFE	; 254
    2326:	80 93 e8 00 	sts	0x00E8, r24
    232a:	2e c0       	rjmp	.+92     	; 0x2388 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    232c:	98 2f       	mov	r25, r24
    232e:	9d 7f       	andi	r25, 0xFD	; 253
    2330:	91 30       	cpi	r25, 0x01	; 1
    2332:	19 f5       	brne	.+70     	; 0x237a <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    2334:	62 30       	cpi	r22, 0x02	; 2
    2336:	09 f5       	brne	.+66     	; 0x237a <__vector_11+0x2ce>
    2338:	23 2b       	or	r18, r19
    233a:	f9 f4       	brne	.+62     	; 0x237a <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    233c:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    233e:	9f ef       	ldi	r25, 0xFF	; 255
    2340:	94 0f       	add	r25, r20
    2342:	94 30       	cpi	r25, 0x04	; 4
    2344:	d0 f4       	brcc	.+52     	; 0x237a <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2346:	9e ef       	ldi	r25, 0xFE	; 254
    2348:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    234c:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    2350:	83 30       	cpi	r24, 0x03	; 3
    2352:	21 f4       	brne	.+8      	; 0x235c <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    2354:	81 e2       	ldi	r24, 0x21	; 33
    2356:	80 93 eb 00 	sts	0x00EB, r24
    235a:	16 c0       	rjmp	.+44     	; 0x2388 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    235c:	89 e1       	ldi	r24, 0x19	; 25
    235e:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	02 c0       	rjmp	.+4      	; 0x236c <__vector_11+0x2c0>
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	4a 95       	dec	r20
    236e:	e2 f7       	brpl	.-8      	; 0x2368 <__vector_11+0x2bc>
    2370:	ea ee       	ldi	r30, 0xEA	; 234
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 83       	st	Z, r24
					UERST = 0;
    2376:	10 82       	st	Z, r1
    2378:	07 c0       	rjmp	.+14     	; 0x2388 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    237a:	81 e2       	ldi	r24, 0x21	; 33
    237c:	80 93 eb 00 	sts	0x00EB, r24
    2380:	03 c0       	rjmp	.+6      	; 0x2388 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2382:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2384:	21 11       	cpse	r18, r1
    2386:	f7 ce       	rjmp	.-530    	; 0x2176 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2388:	ff 91       	pop	r31
    238a:	ef 91       	pop	r30
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	bf 91       	pop	r27
    2392:	af 91       	pop	r26
    2394:	9f 91       	pop	r25
    2396:	8f 91       	pop	r24
    2398:	7f 91       	pop	r23
    239a:	6f 91       	pop	r22
    239c:	5f 91       	pop	r21
    239e:	4f 91       	pop	r20
    23a0:	3f 91       	pop	r19
    23a2:	2f 91       	pop	r18
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	0f 90       	pop	r0
    23ae:	1f 90       	pop	r1
    23b0:	18 95       	reti

000023b2 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    23b2:	ef 92       	push	r14
    23b4:	ff 92       	push	r15
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	27 97       	sbiw	r28, 0x07	; 7
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    23ce:	8e 01       	movw	r16, r28
    23d0:	0f 5f       	subi	r16, 0xFF	; 255
    23d2:	1f 4f       	sbci	r17, 0xFF	; 255
    23d4:	27 e0       	ldi	r18, 0x07	; 7
    23d6:	f8 01       	movw	r30, r16
    23d8:	11 92       	st	Z+, r1
    23da:	2a 95       	dec	r18
    23dc:	e9 f7       	brne	.-6      	; 0x23d8 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    23de:	4a e0       	ldi	r20, 0x0A	; 10
    23e0:	b8 01       	movw	r22, r16
    23e2:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__itoa_ncheck>
    23e6:	7e 01       	movw	r14, r28
    23e8:	f8 e0       	ldi	r31, 0x08	; 8
    23ea:	ef 0e       	add	r14, r31
    23ec:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    23ee:	f8 01       	movw	r30, r16
    23f0:	81 91       	ld	r24, Z+
    23f2:	8f 01       	movw	r16, r30
    23f4:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    23f6:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    23fa:	0e 15       	cp	r16, r14
    23fc:	1f 05       	cpc	r17, r15
    23fe:	b9 f7       	brne	.-18     	; 0x23ee <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    2400:	27 96       	adiw	r28, 0x07	; 7
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	1f 91       	pop	r17
    2412:	0f 91       	pop	r16
    2414:	ff 90       	pop	r15
    2416:	ef 90       	pop	r14
    2418:	08 95       	ret

0000241a <twi_wait>:
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	ec eb       	ldi	r30, 0xBC	; 188
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	88 23       	and	r24, r24
    2426:	34 f0       	brlt	.+12     	; 0x2434 <twi_wait+0x1a>
    2428:	2f 5f       	subi	r18, 0xFF	; 255
    242a:	3f 4f       	sbci	r19, 0xFF	; 255
    242c:	29 3e       	cpi	r18, 0xE9	; 233
    242e:	83 e0       	ldi	r24, 0x03	; 3
    2430:	38 07       	cpc	r19, r24
    2432:	b9 f7       	brne	.-18     	; 0x2422 <twi_wait+0x8>
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	28 3e       	cpi	r18, 0xE8	; 232
    2438:	33 40       	sbci	r19, 0x03	; 3
    243a:	09 f4       	brne	.+2      	; 0x243e <twi_wait+0x24>
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	08 95       	ret

00002440 <send_byte>:
    2440:	80 93 bb 00 	sts	0x00BB, r24
    2444:	84 e8       	ldi	r24, 0x84	; 132
    2446:	80 93 bc 00 	sts	0x00BC, r24
    244a:	0e 94 0d 12 	call	0x241a	; 0x241a <twi_wait>
    244e:	88 23       	and	r24, r24
    2450:	19 f0       	breq	.+6      	; 0x2458 <send_byte+0x18>
    2452:	80 91 b9 00 	lds	r24, 0x00B9
    2456:	88 7f       	andi	r24, 0xF8	; 248
    2458:	08 95       	ret

0000245a <start_write>:
    245a:	cf 93       	push	r28
    245c:	c8 2f       	mov	r28, r24
    245e:	94 ea       	ldi	r25, 0xA4	; 164
    2460:	90 93 bc 00 	sts	0x00BC, r25
    2464:	0e 94 0d 12 	call	0x241a	; 0x241a <twi_wait>
    2468:	88 23       	and	r24, r24
    246a:	61 f0       	breq	.+24     	; 0x2484 <start_write+0x2a>
    246c:	8c 2f       	mov	r24, r28
    246e:	88 0f       	add	r24, r24
    2470:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    2474:	80 32       	cpi	r24, 0x20	; 32
    2476:	29 f4       	brne	.+10     	; 0x2482 <start_write+0x28>
    2478:	84 e9       	ldi	r24, 0x94	; 148
    247a:	80 93 bc 00 	sts	0x00BC, r24
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	01 c0       	rjmp	.+2      	; 0x2484 <start_write+0x2a>
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	cf 91       	pop	r28
    2486:	08 95       	ret

00002488 <m_wii_open>:
    2488:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <m_bus_init>
    248c:	88 e5       	ldi	r24, 0x58	; 88
    248e:	0e 94 2d 12 	call	0x245a	; 0x245a <start_write>
    2492:	88 23       	and	r24, r24
    2494:	09 f4       	brne	.+2      	; 0x2498 <m_wii_open+0x10>
    2496:	cd c0       	rjmp	.+410    	; 0x2632 <m_wii_open+0x1aa>
    2498:	80 e3       	ldi	r24, 0x30	; 48
    249a:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    249e:	88 23       	and	r24, r24
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <m_wii_open+0x1c>
    24a2:	c9 c0       	rjmp	.+402    	; 0x2636 <m_wii_open+0x1ae>
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    24aa:	88 23       	and	r24, r24
    24ac:	09 f4       	brne	.+2      	; 0x24b0 <m_wii_open+0x28>
    24ae:	c5 c0       	rjmp	.+394    	; 0x263a <m_wii_open+0x1b2>
    24b0:	84 e9       	ldi	r24, 0x94	; 148
    24b2:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24b6:	83 ec       	ldi	r24, 0xC3	; 195
    24b8:	99 e0       	ldi	r25, 0x09	; 9
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <m_wii_open+0x32>
    24be:	00 c0       	rjmp	.+0      	; 0x24c0 <m_wii_open+0x38>
    24c0:	00 00       	nop
    24c2:	88 e5       	ldi	r24, 0x58	; 88
    24c4:	0e 94 2d 12 	call	0x245a	; 0x245a <start_write>
    24c8:	88 23       	and	r24, r24
    24ca:	09 f4       	brne	.+2      	; 0x24ce <m_wii_open+0x46>
    24cc:	b8 c0       	rjmp	.+368    	; 0x263e <m_wii_open+0x1b6>
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    24d4:	88 23       	and	r24, r24
    24d6:	09 f4       	brne	.+2      	; 0x24da <m_wii_open+0x52>
    24d8:	b4 c0       	rjmp	.+360    	; 0x2642 <m_wii_open+0x1ba>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    24e0:	88 23       	and	r24, r24
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <m_wii_open+0x5e>
    24e4:	b0 c0       	rjmp	.+352    	; 0x2646 <m_wii_open+0x1be>
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    24ec:	88 23       	and	r24, r24
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <m_wii_open+0x6a>
    24f0:	ac c0       	rjmp	.+344    	; 0x264a <m_wii_open+0x1c2>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    24f8:	88 23       	and	r24, r24
    24fa:	09 f4       	brne	.+2      	; 0x24fe <m_wii_open+0x76>
    24fc:	a8 c0       	rjmp	.+336    	; 0x264e <m_wii_open+0x1c6>
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    2504:	88 23       	and	r24, r24
    2506:	09 f4       	brne	.+2      	; 0x250a <m_wii_open+0x82>
    2508:	a4 c0       	rjmp	.+328    	; 0x2652 <m_wii_open+0x1ca>
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    2510:	88 23       	and	r24, r24
    2512:	09 f4       	brne	.+2      	; 0x2516 <m_wii_open+0x8e>
    2514:	a0 c0       	rjmp	.+320    	; 0x2656 <m_wii_open+0x1ce>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    251c:	88 23       	and	r24, r24
    251e:	09 f4       	brne	.+2      	; 0x2522 <m_wii_open+0x9a>
    2520:	9c c0       	rjmp	.+312    	; 0x265a <m_wii_open+0x1d2>
    2522:	80 e9       	ldi	r24, 0x90	; 144
    2524:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    2528:	88 23       	and	r24, r24
    252a:	09 f4       	brne	.+2      	; 0x252e <m_wii_open+0xa6>
    252c:	98 c0       	rjmp	.+304    	; 0x265e <m_wii_open+0x1d6>
    252e:	84 e9       	ldi	r24, 0x94	; 148
    2530:	80 93 bc 00 	sts	0x00BC, r24
    2534:	83 ec       	ldi	r24, 0xC3	; 195
    2536:	99 e0       	ldi	r25, 0x09	; 9
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <m_wii_open+0xb0>
    253c:	00 c0       	rjmp	.+0      	; 0x253e <m_wii_open+0xb6>
    253e:	00 00       	nop
    2540:	88 e5       	ldi	r24, 0x58	; 88
    2542:	0e 94 2d 12 	call	0x245a	; 0x245a <start_write>
    2546:	88 23       	and	r24, r24
    2548:	09 f4       	brne	.+2      	; 0x254c <m_wii_open+0xc4>
    254a:	8b c0       	rjmp	.+278    	; 0x2662 <m_wii_open+0x1da>
    254c:	87 e0       	ldi	r24, 0x07	; 7
    254e:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    2552:	88 23       	and	r24, r24
    2554:	09 f4       	brne	.+2      	; 0x2558 <m_wii_open+0xd0>
    2556:	87 c0       	rjmp	.+270    	; 0x2666 <m_wii_open+0x1de>
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    255e:	88 23       	and	r24, r24
    2560:	09 f4       	brne	.+2      	; 0x2564 <m_wii_open+0xdc>
    2562:	83 c0       	rjmp	.+262    	; 0x266a <m_wii_open+0x1e2>
    2564:	81 e4       	ldi	r24, 0x41	; 65
    2566:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    256a:	88 23       	and	r24, r24
    256c:	09 f4       	brne	.+2      	; 0x2570 <m_wii_open+0xe8>
    256e:	7f c0       	rjmp	.+254    	; 0x266e <m_wii_open+0x1e6>
    2570:	84 e9       	ldi	r24, 0x94	; 148
    2572:	80 93 bc 00 	sts	0x00BC, r24
    2576:	83 ec       	ldi	r24, 0xC3	; 195
    2578:	99 e0       	ldi	r25, 0x09	; 9
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <m_wii_open+0xf2>
    257e:	00 c0       	rjmp	.+0      	; 0x2580 <m_wii_open+0xf8>
    2580:	00 00       	nop
    2582:	88 e5       	ldi	r24, 0x58	; 88
    2584:	0e 94 2d 12 	call	0x245a	; 0x245a <start_write>
    2588:	88 23       	and	r24, r24
    258a:	09 f4       	brne	.+2      	; 0x258e <m_wii_open+0x106>
    258c:	72 c0       	rjmp	.+228    	; 0x2672 <m_wii_open+0x1ea>
    258e:	8a e1       	ldi	r24, 0x1A	; 26
    2590:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    2594:	88 23       	and	r24, r24
    2596:	09 f4       	brne	.+2      	; 0x259a <m_wii_open+0x112>
    2598:	6e c0       	rjmp	.+220    	; 0x2676 <m_wii_open+0x1ee>
    259a:	80 e4       	ldi	r24, 0x40	; 64
    259c:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    25a0:	88 23       	and	r24, r24
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <m_wii_open+0x11e>
    25a4:	6a c0       	rjmp	.+212    	; 0x267a <m_wii_open+0x1f2>
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    25ac:	88 23       	and	r24, r24
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <m_wii_open+0x12a>
    25b0:	66 c0       	rjmp	.+204    	; 0x267e <m_wii_open+0x1f6>
    25b2:	84 e9       	ldi	r24, 0x94	; 148
    25b4:	80 93 bc 00 	sts	0x00BC, r24
    25b8:	83 ec       	ldi	r24, 0xC3	; 195
    25ba:	99 e0       	ldi	r25, 0x09	; 9
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <m_wii_open+0x134>
    25c0:	00 c0       	rjmp	.+0      	; 0x25c2 <m_wii_open+0x13a>
    25c2:	00 00       	nop
    25c4:	88 e5       	ldi	r24, 0x58	; 88
    25c6:	0e 94 2d 12 	call	0x245a	; 0x245a <start_write>
    25ca:	88 23       	and	r24, r24
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <m_wii_open+0x148>
    25ce:	59 c0       	rjmp	.+178    	; 0x2682 <m_wii_open+0x1fa>
    25d0:	83 e3       	ldi	r24, 0x33	; 51
    25d2:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    25d6:	88 23       	and	r24, r24
    25d8:	09 f4       	brne	.+2      	; 0x25dc <m_wii_open+0x154>
    25da:	55 c0       	rjmp	.+170    	; 0x2686 <m_wii_open+0x1fe>
    25dc:	83 e0       	ldi	r24, 0x03	; 3
    25de:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    25e2:	88 23       	and	r24, r24
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <m_wii_open+0x160>
    25e6:	51 c0       	rjmp	.+162    	; 0x268a <m_wii_open+0x202>
    25e8:	84 e9       	ldi	r24, 0x94	; 148
    25ea:	80 93 bc 00 	sts	0x00BC, r24
    25ee:	83 ec       	ldi	r24, 0xC3	; 195
    25f0:	99 e0       	ldi	r25, 0x09	; 9
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <m_wii_open+0x16a>
    25f6:	00 c0       	rjmp	.+0      	; 0x25f8 <m_wii_open+0x170>
    25f8:	00 00       	nop
    25fa:	88 e5       	ldi	r24, 0x58	; 88
    25fc:	0e 94 2d 12 	call	0x245a	; 0x245a <start_write>
    2600:	88 23       	and	r24, r24
    2602:	09 f4       	brne	.+2      	; 0x2606 <m_wii_open+0x17e>
    2604:	44 c0       	rjmp	.+136    	; 0x268e <m_wii_open+0x206>
    2606:	80 e3       	ldi	r24, 0x30	; 48
    2608:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    260c:	88 23       	and	r24, r24
    260e:	09 f4       	brne	.+2      	; 0x2612 <m_wii_open+0x18a>
    2610:	40 c0       	rjmp	.+128    	; 0x2692 <m_wii_open+0x20a>
    2612:	88 e0       	ldi	r24, 0x08	; 8
    2614:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    2618:	88 23       	and	r24, r24
    261a:	e9 f1       	breq	.+122    	; 0x2696 <m_wii_open+0x20e>
    261c:	84 e9       	ldi	r24, 0x94	; 148
    261e:	80 93 bc 00 	sts	0x00BC, r24
    2622:	83 ec       	ldi	r24, 0xC3	; 195
    2624:	99 e0       	ldi	r25, 0x09	; 9
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <m_wii_open+0x19e>
    262a:	00 c0       	rjmp	.+0      	; 0x262c <m_wii_open+0x1a4>
    262c:	00 00       	nop
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	08 95       	ret
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	08 95       	ret
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	08 95       	ret
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	08 95       	ret
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	08 95       	ret
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	08 95       	ret
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	08 95       	ret
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	08 95       	ret
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	08 95       	ret
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	08 95       	ret
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	08 95       	ret
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	08 95       	ret
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	08 95       	ret
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	08 95       	ret
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	08 95       	ret
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	08 95       	ret
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	08 95       	ret
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	08 95       	ret
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	08 95       	ret
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	08 95       	ret
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	08 95       	ret
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	08 95       	ret
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	08 95       	ret
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	08 95       	ret
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	08 95       	ret
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	08 95       	ret
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	08 95       	ret

0000269a <start_read>:
    269a:	cf 93       	push	r28
    269c:	c8 2f       	mov	r28, r24
    269e:	84 ea       	ldi	r24, 0xA4	; 164
    26a0:	80 93 bc 00 	sts	0x00BC, r24
    26a4:	0e 94 0d 12 	call	0x241a	; 0x241a <twi_wait>
    26a8:	88 23       	and	r24, r24
    26aa:	69 f0       	breq	.+26     	; 0x26c6 <start_read+0x2c>
    26ac:	8c 2f       	mov	r24, r28
    26ae:	88 0f       	add	r24, r24
    26b0:	8f 5f       	subi	r24, 0xFF	; 255
    26b2:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    26b6:	88 34       	cpi	r24, 0x48	; 72
    26b8:	29 f4       	brne	.+10     	; 0x26c4 <start_read+0x2a>
    26ba:	84 e9       	ldi	r24, 0x94	; 148
    26bc:	80 93 bc 00 	sts	0x00BC, r24
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	01 c0       	rjmp	.+2      	; 0x26c6 <start_read+0x2c>
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	cf 91       	pop	r28
    26c8:	08 95       	ret

000026ca <m_wii_read>:
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	60 97       	sbiw	r28, 0x10	; 16
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	cd bf       	out	0x3d, r28	; 61
    26e2:	8c 01       	movw	r16, r24
    26e4:	fe 01       	movw	r30, r28
    26e6:	31 96       	adiw	r30, 0x01	; 1
    26e8:	80 e1       	ldi	r24, 0x10	; 16
    26ea:	df 01       	movw	r26, r30
    26ec:	1d 92       	st	X+, r1
    26ee:	8a 95       	dec	r24
    26f0:	e9 f7       	brne	.-6      	; 0x26ec <m_wii_read+0x22>
    26f2:	88 e5       	ldi	r24, 0x58	; 88
    26f4:	0e 94 2d 12 	call	0x245a	; 0x245a <start_write>
    26f8:	88 23       	and	r24, r24
    26fa:	09 f4       	brne	.+2      	; 0x26fe <m_wii_read+0x34>
    26fc:	69 c0       	rjmp	.+210    	; 0x27d0 <m_wii_read+0x106>
    26fe:	86 e3       	ldi	r24, 0x36	; 54
    2700:	0e 94 20 12 	call	0x2440	; 0x2440 <send_byte>
    2704:	88 23       	and	r24, r24
    2706:	09 f4       	brne	.+2      	; 0x270a <m_wii_read+0x40>
    2708:	65 c0       	rjmp	.+202    	; 0x27d4 <m_wii_read+0x10a>
    270a:	84 e9       	ldi	r24, 0x94	; 148
    270c:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2710:	b8 e0       	ldi	r27, 0x08	; 8
    2712:	ba 95       	dec	r27
    2714:	f1 f7       	brne	.-4      	; 0x2712 <m_wii_read+0x48>
    2716:	00 00       	nop
    2718:	88 e5       	ldi	r24, 0x58	; 88
    271a:	0e 94 4d 13 	call	0x269a	; 0x269a <start_read>
    271e:	88 23       	and	r24, r24
    2720:	09 f4       	brne	.+2      	; 0x2724 <m_wii_read+0x5a>
    2722:	5a c0       	rjmp	.+180    	; 0x27d8 <m_wii_read+0x10e>
    2724:	be 01       	movw	r22, r28
    2726:	6f 5f       	subi	r22, 0xFF	; 255
    2728:	7f 4f       	sbci	r23, 0xFF	; 255
    272a:	ae 01       	movw	r20, r28
    272c:	40 5f       	subi	r20, 0xF0	; 240
    272e:	5f 4f       	sbci	r21, 0xFF	; 255
    2730:	ec eb       	ldi	r30, 0xBC	; 188
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	84 ec       	ldi	r24, 0xC4	; 196
    2736:	2b eb       	ldi	r18, 0xBB	; 187
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	80 83       	st	Z, r24
    273c:	90 81       	ld	r25, Z
    273e:	99 23       	and	r25, r25
    2740:	ec f7       	brge	.-6      	; 0x273c <m_wii_read+0x72>
    2742:	d9 01       	movw	r26, r18
    2744:	9c 91       	ld	r25, X
    2746:	db 01       	movw	r26, r22
    2748:	9d 93       	st	X+, r25
    274a:	bd 01       	movw	r22, r26
    274c:	a4 17       	cp	r26, r20
    274e:	b5 07       	cpc	r27, r21
    2750:	a1 f7       	brne	.-24     	; 0x273a <m_wii_read+0x70>
    2752:	84 e8       	ldi	r24, 0x84	; 132
    2754:	80 93 bc 00 	sts	0x00BC, r24
    2758:	ec eb       	ldi	r30, 0xBC	; 188
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	88 23       	and	r24, r24
    2760:	ec f7       	brge	.-6      	; 0x275c <m_wii_read+0x92>
    2762:	80 91 bb 00 	lds	r24, 0x00BB
    2766:	88 8b       	std	Y+16, r24	; 0x10
    2768:	84 e9       	ldi	r24, 0x94	; 148
    276a:	80 93 bc 00 	sts	0x00BC, r24
    276e:	be 01       	movw	r22, r28
    2770:	6c 5f       	subi	r22, 0xFC	; 252
    2772:	7f 4f       	sbci	r23, 0xFF	; 255
    2774:	f8 01       	movw	r30, r16
    2776:	08 5e       	subi	r16, 0xE8	; 232
    2778:	1f 4f       	sbci	r17, 0xFF	; 255
    277a:	db 01       	movw	r26, r22
    277c:	2c 91       	ld	r18, X
    277e:	32 2f       	mov	r19, r18
    2780:	30 73       	andi	r19, 0x30	; 48
    2782:	cb 01       	movw	r24, r22
    2784:	02 97       	sbiw	r24, 0x02	; 2
    2786:	dc 01       	movw	r26, r24
    2788:	8c 91       	ld	r24, X
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	b0 e1       	ldi	r27, 0x10	; 16
    278e:	3b 9f       	mul	r19, r27
    2790:	80 0d       	add	r24, r0
    2792:	91 1d       	adc	r25, r1
    2794:	11 24       	eor	r1, r1
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	80 83       	st	Z, r24
    279a:	42 2f       	mov	r20, r18
    279c:	40 7c       	andi	r20, 0xC0	; 192
    279e:	50 e0       	ldi	r21, 0x00	; 0
    27a0:	44 0f       	add	r20, r20
    27a2:	55 1f       	adc	r21, r21
    27a4:	44 0f       	add	r20, r20
    27a6:	55 1f       	adc	r21, r21
    27a8:	cb 01       	movw	r24, r22
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	dc 01       	movw	r26, r24
    27ae:	8c 91       	ld	r24, X
    27b0:	48 0f       	add	r20, r24
    27b2:	51 1d       	adc	r21, r1
    27b4:	53 83       	std	Z+3, r21	; 0x03
    27b6:	42 83       	std	Z+2, r20	; 0x02
    27b8:	2f 70       	andi	r18, 0x0F	; 15
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	35 83       	std	Z+5, r19	; 0x05
    27be:	24 83       	std	Z+4, r18	; 0x04
    27c0:	6d 5f       	subi	r22, 0xFD	; 253
    27c2:	7f 4f       	sbci	r23, 0xFF	; 255
    27c4:	36 96       	adiw	r30, 0x06	; 6
    27c6:	e0 17       	cp	r30, r16
    27c8:	f1 07       	cpc	r31, r17
    27ca:	b9 f6       	brne	.-82     	; 0x277a <m_wii_read+0xb0>
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	05 c0       	rjmp	.+10     	; 0x27da <m_wii_read+0x110>
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	03 c0       	rjmp	.+6      	; 0x27da <m_wii_read+0x110>
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	01 c0       	rjmp	.+2      	; 0x27da <m_wii_read+0x110>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	60 96       	adiw	r28, 0x10	; 16
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	1f 91       	pop	r17
    27ec:	0f 91       	pop	r16
    27ee:	08 95       	ret

000027f0 <get_puck_location>:
Public Functions
************************************************************/

/* Returns x,y, location of puck (angle more accurate) */
int get_puck_location(float* puck_buffer, int self, float x_goal)
{
    27f0:	2f 92       	push	r2
    27f2:	3f 92       	push	r3
    27f4:	4f 92       	push	r4
    27f6:	5f 92       	push	r5
    27f8:	6f 92       	push	r6
    27fa:	7f 92       	push	r7
    27fc:	8f 92       	push	r8
    27fe:	9f 92       	push	r9
    2800:	af 92       	push	r10
    2802:	bf 92       	push	r11
    2804:	cf 92       	push	r12
    2806:	df 92       	push	r13
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	6a 97       	sbiw	r28, 0x1a	; 26
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	9c 8b       	std	Y+20, r25	; 0x14
    2826:	8b 8b       	std	Y+19, r24	; 0x13
    2828:	7e 8b       	std	Y+22, r23	; 0x16
    282a:	6d 8b       	std	Y+21, r22	; 0x15
    282c:	2f 8b       	std	Y+23, r18	; 0x17
    282e:	38 8f       	std	Y+24, r19	; 0x18
    2830:	49 8f       	std	Y+25, r20	; 0x19
    2832:	5a 8f       	std	Y+26, r21	; 0x1a
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta
    2834:	ce 01       	movw	r24, r28
    2836:	01 96       	adiw	r24, 0x01	; 1
    2838:	0e 94 c8 0a 	call	0x1590	; 0x1590 <get_position>
    283c:	0f 2e       	mov	r0, r31
    283e:	f5 ed       	ldi	r31, 0xD5	; 213
    2840:	8f 2e       	mov	r8, r31
    2842:	f1 e0       	ldi	r31, 0x01	; 1
    2844:	9f 2e       	mov	r9, r31
    2846:	f0 2d       	mov	r31, r0
    2848:	0f 2e       	mov	r0, r31
    284a:	f9 e3       	ldi	r31, 0x39	; 57
    284c:	af 2e       	mov	r10, r31
    284e:	f1 e0       	ldi	r31, 0x01	; 1
    2850:	bf 2e       	mov	r11, r31
    2852:	f0 2d       	mov	r31, r0
	int max_val = 0;
	static int had_seen = 0;
	int max_index = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<7; i++){
    2854:	e1 2c       	mov	r14, r1
    2856:	f1 2c       	mov	r15, r1
	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	static int had_seen = 0;
	int max_index = 0;
	int scaler = 0;
	float global_theta = 0;
    2858:	1d 86       	std	Y+13, r1	; 0x0d
    285a:	1e 86       	std	Y+14, r1	; 0x0e
    285c:	1f 86       	std	Y+15, r1	; 0x0f
    285e:	18 8a       	std	Y+16, r1	; 0x10

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	static int had_seen = 0;
	int max_index = 0;
	int scaler = 0;
    2860:	c1 2c       	mov	r12, r1
    2862:	d1 2c       	mov	r13, r1
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	static int had_seen = 0;
	int max_index = 0;
    2864:	1a 8a       	std	Y+18, r1	; 0x12
    2866:	19 8a       	std	Y+17, r1	; 0x11
{
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
    2868:	21 2c       	mov	r2, r1
    286a:	31 2c       	mov	r3, r1
	static int had_seen = 0;
	int max_index = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<7; i++){
		scaler += transistor_vals[i];
    286c:	f4 01       	movw	r30, r8
    286e:	01 91       	ld	r16, Z+
    2870:	11 91       	ld	r17, Z+
    2872:	4f 01       	movw	r8, r30
    2874:	c0 0e       	add	r12, r16
    2876:	d1 1e       	adc	r13, r17
		global_theta += transistor_angles[i] * (float)transistor_vals[i];
    2878:	f5 01       	movw	r30, r10
    287a:	41 90       	ld	r4, Z+
    287c:	51 90       	ld	r5, Z+
    287e:	61 90       	ld	r6, Z+
    2880:	71 90       	ld	r7, Z+
    2882:	5f 01       	movw	r10, r30
    2884:	b8 01       	movw	r22, r16
    2886:	01 2e       	mov	r0, r17
    2888:	00 0c       	add	r0, r0
    288a:	88 0b       	sbc	r24, r24
    288c:	99 0b       	sbc	r25, r25
    288e:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2892:	9b 01       	movw	r18, r22
    2894:	ac 01       	movw	r20, r24
    2896:	c3 01       	movw	r24, r6
    2898:	b2 01       	movw	r22, r4
    289a:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    289e:	9b 01       	movw	r18, r22
    28a0:	ac 01       	movw	r20, r24
    28a2:	6d 85       	ldd	r22, Y+13	; 0x0d
    28a4:	7e 85       	ldd	r23, Y+14	; 0x0e
    28a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a8:	98 89       	ldd	r25, Y+16	; 0x10
    28aa:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
    28ae:	6d 87       	std	Y+13, r22	; 0x0d
    28b0:	7e 87       	std	Y+14, r23	; 0x0e
    28b2:	8f 87       	std	Y+15, r24	; 0x0f
    28b4:	98 8b       	std	Y+16, r25	; 0x10

		if(transistor_vals[i]>max_val){
    28b6:	20 16       	cp	r2, r16
    28b8:	31 06       	cpc	r3, r17
    28ba:	1c f4       	brge	.+6      	; 0x28c2 <get_puck_location+0xd2>
    28bc:	fa 8a       	std	Y+18, r15	; 0x12
    28be:	e9 8a       	std	Y+17, r14	; 0x11
			max_val = transistor_vals[i];
    28c0:	18 01       	movw	r2, r16
	int max_val = 0;
	static int had_seen = 0;
	int max_index = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<7; i++){
    28c2:	ff ef       	ldi	r31, 0xFF	; 255
    28c4:	ef 1a       	sub	r14, r31
    28c6:	ff 0a       	sbc	r15, r31
    28c8:	27 e0       	ldi	r18, 0x07	; 7
    28ca:	e2 16       	cp	r14, r18
    28cc:	f1 04       	cpc	r15, r1
    28ce:	71 f6       	brne	.-100    	; 0x286c <get_puck_location+0x7c>
    28d0:	31 01       	movw	r6, r2
		}
	}

	global_theta = global_theta/((float)scaler);
	
	if (max_index > 6){
    28d2:	89 89       	ldd	r24, Y+17	; 0x11
    28d4:	9a 89       	ldd	r25, Y+18	; 0x12
    28d6:	07 97       	sbiw	r24, 0x07	; 7
    28d8:	7c f4       	brge	.+30     	; 0x28f8 <get_puck_location+0x108>
			max_val = transistor_vals[i];
			max_index = i;
		}
	}

	global_theta = global_theta/((float)scaler);
    28da:	b6 01       	movw	r22, r12
    28dc:	dd 0c       	add	r13, r13
    28de:	88 0b       	sbc	r24, r24
    28e0:	99 0b       	sbc	r25, r25
    28e2:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    28e6:	9b 01       	movw	r18, r22
    28e8:	ac 01       	movw	r20, r24
    28ea:	6d 85       	ldd	r22, Y+13	; 0x0d
    28ec:	7e 85       	ldd	r23, Y+14	; 0x0e
    28ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f0:	98 89       	ldd	r25, Y+16	; 0x10
    28f2:	0e 94 b5 18 	call	0x316a	; 0x316a <__divsf3>
    28f6:	64 c0       	rjmp	.+200    	; 0x29c0 <get_puck_location+0x1d0>
	
	if (max_index > 6){
		scaler = transistor_vals[7]+transistor_vals[8]+transistor_vals[9];
    28f8:	e5 ed       	ldi	r30, 0xD5	; 213
    28fa:	f1 e0       	ldi	r31, 0x01	; 1
    28fc:	a6 84       	ldd	r10, Z+14	; 0x0e
    28fe:	b7 84       	ldd	r11, Z+15	; 0x0f
    2900:	e0 88       	ldd	r14, Z+16	; 0x10
    2902:	f1 88       	ldd	r15, Z+17	; 0x11
    2904:	02 89       	ldd	r16, Z+18	; 0x12
    2906:	13 89       	ldd	r17, Z+19	; 0x13
		global_theta = (transistor_angles[7]+2*M_PI)*(float)transistor_vals[7]+(transistor_angles[8]+2*M_PI)*(float)transistor_vals[8]+(transistor_angles[9]+2*M_PI)*(float)transistor_vals[9];
    2908:	b5 01       	movw	r22, r10
    290a:	0b 2c       	mov	r0, r11
    290c:	00 0c       	add	r0, r0
    290e:	88 0b       	sbc	r24, r24
    2910:	99 0b       	sbc	r25, r25
    2912:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2916:	2b e3       	ldi	r18, 0x3B	; 59
    2918:	3b e6       	ldi	r19, 0x6B	; 107
    291a:	4e e0       	ldi	r20, 0x0E	; 14
    291c:	51 e4       	ldi	r21, 0x41	; 65
    291e:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    2922:	6d 87       	std	Y+13, r22	; 0x0d
    2924:	7e 87       	std	Y+14, r23	; 0x0e
    2926:	8f 87       	std	Y+15, r24	; 0x0f
    2928:	98 8b       	std	Y+16, r25	; 0x10
    292a:	b7 01       	movw	r22, r14
    292c:	0f 2c       	mov	r0, r15
    292e:	00 0c       	add	r0, r0
    2930:	88 0b       	sbc	r24, r24
    2932:	99 0b       	sbc	r25, r25
    2934:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2938:	24 ee       	ldi	r18, 0xE4	; 228
    293a:	3b ec       	ldi	r19, 0xCB	; 203
    293c:	46 e1       	ldi	r20, 0x16	; 22
    293e:	51 e4       	ldi	r21, 0x41	; 65
    2940:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    2944:	9b 01       	movw	r18, r22
    2946:	ac 01       	movw	r20, r24
    2948:	6d 85       	ldd	r22, Y+13	; 0x0d
    294a:	7e 85       	ldd	r23, Y+14	; 0x0e
    294c:	8f 85       	ldd	r24, Y+15	; 0x0f
    294e:	98 89       	ldd	r25, Y+16	; 0x10
    2950:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
    2954:	6d 87       	std	Y+13, r22	; 0x0d
    2956:	7e 87       	std	Y+14, r23	; 0x0e
    2958:	8f 87       	std	Y+15, r24	; 0x0f
    295a:	98 8b       	std	Y+16, r25	; 0x10
    295c:	b8 01       	movw	r22, r16
    295e:	01 2e       	mov	r0, r17
    2960:	00 0c       	add	r0, r0
    2962:	88 0b       	sbc	r24, r24
    2964:	99 0b       	sbc	r25, r25
    2966:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    296a:	2f e7       	ldi	r18, 0x7F	; 127
    296c:	32 e9       	ldi	r19, 0x92	; 146
    296e:	4a e6       	ldi	r20, 0x6A	; 106
    2970:	50 e4       	ldi	r21, 0x40	; 64
    2972:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    2976:	9b 01       	movw	r18, r22
    2978:	ac 01       	movw	r20, r24
    297a:	6d 85       	ldd	r22, Y+13	; 0x0d
    297c:	7e 85       	ldd	r23, Y+14	; 0x0e
    297e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2980:	98 89       	ldd	r25, Y+16	; 0x10
    2982:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
    2986:	6d 87       	std	Y+13, r22	; 0x0d
    2988:	7e 87       	std	Y+14, r23	; 0x0e
    298a:	8f 87       	std	Y+15, r24	; 0x0f
    298c:	98 8b       	std	Y+16, r25	; 0x10
	}

	global_theta = global_theta/((float)scaler);
	
	if (max_index > 6){
		scaler = transistor_vals[7]+transistor_vals[8]+transistor_vals[9];
    298e:	b5 01       	movw	r22, r10
    2990:	6e 0d       	add	r22, r14
    2992:	7f 1d       	adc	r23, r15
    2994:	60 0f       	add	r22, r16
    2996:	71 1f       	adc	r23, r17
		global_theta = (transistor_angles[7]+2*M_PI)*(float)transistor_vals[7]+(transistor_angles[8]+2*M_PI)*(float)transistor_vals[8]+(transistor_angles[9]+2*M_PI)*(float)transistor_vals[9];
		global_theta = global_theta/scaler; 
    2998:	07 2e       	mov	r0, r23
    299a:	00 0c       	add	r0, r0
    299c:	88 0b       	sbc	r24, r24
    299e:	99 0b       	sbc	r25, r25
    29a0:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    29a4:	9b 01       	movw	r18, r22
    29a6:	ac 01       	movw	r20, r24
    29a8:	6d 85       	ldd	r22, Y+13	; 0x0d
    29aa:	7e 85       	ldd	r23, Y+14	; 0x0e
    29ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ae:	98 89       	ldd	r25, Y+16	; 0x10
    29b0:	0e 94 b5 18 	call	0x316a	; 0x316a <__divsf3>
		global_theta = global_theta - 2*M_PI;
    29b4:	2b ed       	ldi	r18, 0xDB	; 219
    29b6:	3f e0       	ldi	r19, 0x0F	; 15
    29b8:	49 ec       	ldi	r20, 0xC9	; 201
    29ba:	50 e4       	ldi	r21, 0x40	; 64
    29bc:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
	}

	/* If no puck found */
	if(max_val<100){
    29c0:	e4 e6       	ldi	r30, 0x64	; 100
    29c2:	6e 16       	cp	r6, r30
    29c4:	71 04       	cpc	r7, r1
    29c6:	0c f0       	brlt	.+2      	; 0x29ca <get_puck_location+0x1da>
    29c8:	ab c0       	rjmp	.+342    	; 0x2b20 <get_puck_location+0x330>
		if (!had_seen){
    29ca:	20 90 cf 01 	lds	r2, 0x01CF
    29ce:	30 90 d0 01 	lds	r3, 0x01D0
    29d2:	21 14       	cp	r2, r1
    29d4:	31 04       	cpc	r3, r1
    29d6:	09 f0       	breq	.+2      	; 0x29da <get_puck_location+0x1ea>
    29d8:	00 c1       	rjmp	.+512    	; 0x2bda <get_puck_location+0x3ea>
			if (self == RED_BULL)
    29da:	8d 89       	ldd	r24, Y+21	; 0x15
    29dc:	9e 89       	ldd	r25, Y+22	; 0x16
    29de:	89 2b       	or	r24, r25
    29e0:	59 f4       	brne	.+22     	; 0x29f8 <get_puck_location+0x208>
			{
				puck_buffer[0] = 0;
    29e2:	eb 89       	ldd	r30, Y+19	; 0x13
    29e4:	fc 89       	ldd	r31, Y+20	; 0x14
    29e6:	10 82       	st	Z, r1
    29e8:	11 82       	std	Z+1, r1	; 0x01
    29ea:	12 82       	std	Z+2, r1	; 0x02
    29ec:	13 82       	std	Z+3, r1	; 0x03
				puck_buffer[1] = 0;
    29ee:	14 82       	std	Z+4, r1	; 0x04
    29f0:	15 82       	std	Z+5, r1	; 0x05
    29f2:	16 82       	std	Z+6, r1	; 0x06
    29f4:	17 82       	std	Z+7, r1	; 0x07
    29f6:	f3 c0       	rjmp	.+486    	; 0x2bde <get_puck_location+0x3ee>
			}
			if (self == GREEN_MONSTER)
    29f8:	8d 89       	ldd	r24, Y+21	; 0x15
    29fa:	9e 89       	ldd	r25, Y+22	; 0x16
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	09 f0       	breq	.+2      	; 0x2a02 <get_puck_location+0x212>
    2a00:	4e c0       	rjmp	.+156    	; 0x2a9e <get_puck_location+0x2ae>
			{
				puck_buffer[0] = -(fabs(x_goal) - 75)*((x_goal > 0) - (x_goal < 0));
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	46 e9       	ldi	r20, 0x96	; 150
    2a08:	52 e4       	ldi	r21, 0x42	; 66
    2a0a:	6f 89       	ldd	r22, Y+23	; 0x17
    2a0c:	78 8d       	ldd	r23, Y+24	; 0x18
    2a0e:	89 8d       	ldd	r24, Y+25	; 0x19
    2a10:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a12:	9f 77       	andi	r25, 0x7F	; 127
    2a14:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__subsf3>
    2a18:	4b 01       	movw	r8, r22
    2a1a:	5c 01       	movw	r10, r24
    2a1c:	b7 fa       	bst	r11, 7
    2a1e:	b0 94       	com	r11
    2a20:	b7 f8       	bld	r11, 7
    2a22:	b0 94       	com	r11
    2a24:	01 e0       	ldi	r16, 0x01	; 1
    2a26:	10 e0       	ldi	r17, 0x00	; 0
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	a9 01       	movw	r20, r18
    2a2e:	6f 89       	ldd	r22, Y+23	; 0x17
    2a30:	78 8d       	ldd	r23, Y+24	; 0x18
    2a32:	89 8d       	ldd	r24, Y+25	; 0x19
    2a34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a36:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gesf2>
    2a3a:	18 16       	cp	r1, r24
    2a3c:	14 f0       	brlt	.+4      	; 0x2a42 <get_puck_location+0x252>
    2a3e:	00 e0       	ldi	r16, 0x00	; 0
    2a40:	10 e0       	ldi	r17, 0x00	; 0
    2a42:	ee 24       	eor	r14, r14
    2a44:	e3 94       	inc	r14
    2a46:	f1 2c       	mov	r15, r1
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	a9 01       	movw	r20, r18
    2a4e:	6f 89       	ldd	r22, Y+23	; 0x17
    2a50:	78 8d       	ldd	r23, Y+24	; 0x18
    2a52:	89 8d       	ldd	r24, Y+25	; 0x19
    2a54:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a56:	0e 94 ab 18 	call	0x3156	; 0x3156 <__cmpsf2>
    2a5a:	88 23       	and	r24, r24
    2a5c:	14 f0       	brlt	.+4      	; 0x2a62 <get_puck_location+0x272>
    2a5e:	e1 2c       	mov	r14, r1
    2a60:	f1 2c       	mov	r15, r1
    2a62:	b8 01       	movw	r22, r16
    2a64:	6e 19       	sub	r22, r14
    2a66:	7f 09       	sbc	r23, r15
    2a68:	07 2e       	mov	r0, r23
    2a6a:	00 0c       	add	r0, r0
    2a6c:	88 0b       	sbc	r24, r24
    2a6e:	99 0b       	sbc	r25, r25
    2a70:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2a74:	9b 01       	movw	r18, r22
    2a76:	ac 01       	movw	r20, r24
    2a78:	c5 01       	movw	r24, r10
    2a7a:	b4 01       	movw	r22, r8
    2a7c:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    2a80:	eb 89       	ldd	r30, Y+19	; 0x13
    2a82:	fc 89       	ldd	r31, Y+20	; 0x14
    2a84:	60 83       	st	Z, r22
    2a86:	71 83       	std	Z+1, r23	; 0x01
    2a88:	82 83       	std	Z+2, r24	; 0x02
    2a8a:	93 83       	std	Z+3, r25	; 0x03
				puck_buffer[1] = -10;
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 e2       	ldi	r26, 0x20	; 32
    2a92:	b1 ec       	ldi	r27, 0xC1	; 193
    2a94:	84 83       	std	Z+4, r24	; 0x04
    2a96:	95 83       	std	Z+5, r25	; 0x05
    2a98:	a6 83       	std	Z+6, r26	; 0x06
    2a9a:	b7 83       	std	Z+7, r27	; 0x07
    2a9c:	a0 c0       	rjmp	.+320    	; 0x2bde <get_puck_location+0x3ee>
			}
			if (self == BLUE_WHALE)
    2a9e:	8d 89       	ldd	r24, Y+21	; 0x15
    2aa0:	9e 89       	ldd	r25, Y+22	; 0x16
    2aa2:	02 97       	sbiw	r24, 0x02	; 2
    2aa4:	09 f0       	breq	.+2      	; 0x2aa8 <get_puck_location+0x2b8>
    2aa6:	9b c0       	rjmp	.+310    	; 0x2bde <get_puck_location+0x3ee>
			{
				puck_buffer[0] = -((x_goal > 0) - (x_goal < 0))*166;
    2aa8:	01 e0       	ldi	r16, 0x01	; 1
    2aaa:	10 e0       	ldi	r17, 0x00	; 0
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	a9 01       	movw	r20, r18
    2ab2:	6f 89       	ldd	r22, Y+23	; 0x17
    2ab4:	78 8d       	ldd	r23, Y+24	; 0x18
    2ab6:	89 8d       	ldd	r24, Y+25	; 0x19
    2ab8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2aba:	0e 94 ab 18 	call	0x3156	; 0x3156 <__cmpsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	14 f0       	brlt	.+4      	; 0x2ac6 <get_puck_location+0x2d6>
    2ac2:	00 e0       	ldi	r16, 0x00	; 0
    2ac4:	10 e0       	ldi	r17, 0x00	; 0
    2ac6:	ee 24       	eor	r14, r14
    2ac8:	e3 94       	inc	r14
    2aca:	f1 2c       	mov	r15, r1
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	a9 01       	movw	r20, r18
    2ad2:	6f 89       	ldd	r22, Y+23	; 0x17
    2ad4:	78 8d       	ldd	r23, Y+24	; 0x18
    2ad6:	89 8d       	ldd	r24, Y+25	; 0x19
    2ad8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ada:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gesf2>
    2ade:	18 16       	cp	r1, r24
    2ae0:	14 f0       	brlt	.+4      	; 0x2ae6 <get_puck_location+0x2f6>
    2ae2:	e1 2c       	mov	r14, r1
    2ae4:	f1 2c       	mov	r15, r1
    2ae6:	0e 19       	sub	r16, r14
    2ae8:	1f 09       	sbc	r17, r15
    2aea:	86 ea       	ldi	r24, 0xA6	; 166
    2aec:	80 9f       	mul	r24, r16
    2aee:	b0 01       	movw	r22, r0
    2af0:	81 9f       	mul	r24, r17
    2af2:	70 0d       	add	r23, r0
    2af4:	11 24       	eor	r1, r1
    2af6:	07 2e       	mov	r0, r23
    2af8:	00 0c       	add	r0, r0
    2afa:	88 0b       	sbc	r24, r24
    2afc:	99 0b       	sbc	r25, r25
    2afe:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2b02:	eb 89       	ldd	r30, Y+19	; 0x13
    2b04:	fc 89       	ldd	r31, Y+20	; 0x14
    2b06:	60 83       	st	Z, r22
    2b08:	71 83       	std	Z+1, r23	; 0x01
    2b0a:	82 83       	std	Z+2, r24	; 0x02
    2b0c:	93 83       	std	Z+3, r25	; 0x03
				puck_buffer[1] = 50;
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	a8 e4       	ldi	r26, 0x48	; 72
    2b14:	b2 e4       	ldi	r27, 0x42	; 66
    2b16:	84 83       	std	Z+4, r24	; 0x04
    2b18:	95 83       	std	Z+5, r25	; 0x05
    2b1a:	a6 83       	std	Z+6, r26	; 0x06
    2b1c:	b7 83       	std	Z+7, r27	; 0x07
    2b1e:	5f c0       	rjmp	.+190    	; 0x2bde <get_puck_location+0x3ee>
		}
		//had_seen -= 1;
		return 0;
	}
	
	had_seen = 0;
    2b20:	10 92 d0 01 	sts	0x01D0, r1
    2b24:	10 92 cf 01 	sts	0x01CF, r1
	/* Create vector pointing to puck in global coordinates */
	global_theta += position_buffer[2];
    2b28:	29 85       	ldd	r18, Y+9	; 0x09
    2b2a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b2c:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b2e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b30:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
    2b34:	6b 01       	movw	r12, r22
    2b36:	7c 01       	movw	r14, r24
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/1023.0 + position_buffer[0]; // Assign X val
    2b38:	0e 94 b0 18 	call	0x3160	; 0x3160 <cos>
    2b3c:	4b 01       	movw	r8, r22
    2b3e:	5c 01       	movw	r10, r24
    2b40:	6f ef       	ldi	r22, 0xFF	; 255
    2b42:	73 e0       	ldi	r23, 0x03	; 3
    2b44:	66 19       	sub	r22, r6
    2b46:	77 09       	sbc	r23, r7
    2b48:	07 2e       	mov	r0, r23
    2b4a:	00 0c       	add	r0, r0
    2b4c:	88 0b       	sbc	r24, r24
    2b4e:	99 0b       	sbc	r25, r25
    2b50:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2b54:	2b 01       	movw	r4, r22
    2b56:	3c 01       	movw	r6, r24
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	4f e2       	ldi	r20, 0x2F	; 47
    2b5e:	54 e4       	ldi	r21, 0x44	; 68
    2b60:	c5 01       	movw	r24, r10
    2b62:	b4 01       	movw	r22, r8
    2b64:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    2b68:	a3 01       	movw	r20, r6
    2b6a:	92 01       	movw	r18, r4
    2b6c:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 ec       	ldi	r19, 0xC0	; 192
    2b74:	4f e7       	ldi	r20, 0x7F	; 127
    2b76:	54 e4       	ldi	r21, 0x44	; 68
    2b78:	0e 94 b5 18 	call	0x316a	; 0x316a <__divsf3>
    2b7c:	29 81       	ldd	r18, Y+1	; 0x01
    2b7e:	3a 81       	ldd	r19, Y+2	; 0x02
    2b80:	4b 81       	ldd	r20, Y+3	; 0x03
    2b82:	5c 81       	ldd	r21, Y+4	; 0x04
    2b84:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
    2b88:	eb 89       	ldd	r30, Y+19	; 0x13
    2b8a:	fc 89       	ldd	r31, Y+20	; 0x14
    2b8c:	60 83       	st	Z, r22
    2b8e:	71 83       	std	Z+1, r23	; 0x01
    2b90:	82 83       	std	Z+2, r24	; 0x02
    2b92:	93 83       	std	Z+3, r25	; 0x03
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/1023.0 + position_buffer[1]; // Assign Y val
    2b94:	c7 01       	movw	r24, r14
    2b96:	b6 01       	movw	r22, r12
    2b98:	0e 94 ef 1a 	call	0x35de	; 0x35de <sin>
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	4f e2       	ldi	r20, 0x2F	; 47
    2ba2:	54 e4       	ldi	r21, 0x44	; 68
    2ba4:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    2ba8:	9b 01       	movw	r18, r22
    2baa:	ac 01       	movw	r20, r24
    2bac:	c3 01       	movw	r24, r6
    2bae:	b2 01       	movw	r22, r4
    2bb0:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 ec       	ldi	r19, 0xC0	; 192
    2bb8:	4f e7       	ldi	r20, 0x7F	; 127
    2bba:	54 e4       	ldi	r21, 0x44	; 68
    2bbc:	0e 94 b5 18 	call	0x316a	; 0x316a <__divsf3>
    2bc0:	2d 81       	ldd	r18, Y+5	; 0x05
    2bc2:	3e 81       	ldd	r19, Y+6	; 0x06
    2bc4:	4f 81       	ldd	r20, Y+7	; 0x07
    2bc6:	58 85       	ldd	r21, Y+8	; 0x08
    2bc8:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <__addsf3>
    2bcc:	eb 89       	ldd	r30, Y+19	; 0x13
    2bce:	fc 89       	ldd	r31, Y+20	; 0x14
    2bd0:	64 83       	std	Z+4, r22	; 0x04
    2bd2:	75 83       	std	Z+5, r23	; 0x05
    2bd4:	86 83       	std	Z+6, r24	; 0x06
    2bd6:	97 83       	std	Z+7, r25	; 0x07
	return max_val;
    2bd8:	02 c0       	rjmp	.+4      	; 0x2bde <get_puck_location+0x3ee>
				puck_buffer[0] = -((x_goal > 0) - (x_goal < 0))*166;
				puck_buffer[1] = 50;
			}
		}
		//had_seen -= 1;
		return 0;
    2bda:	21 2c       	mov	r2, r1
    2bdc:	31 2c       	mov	r3, r1
	/* Create vector pointing to puck in global coordinates */
	global_theta += position_buffer[2];
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/1023.0 + position_buffer[0]; // Assign X val
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/1023.0 + position_buffer[1]; // Assign Y val
	return max_val;
}
    2bde:	c1 01       	movw	r24, r2
    2be0:	6a 96       	adiw	r28, 0x1a	; 26
    2be2:	0f b6       	in	r0, 0x3f	; 63
    2be4:	f8 94       	cli
    2be6:	de bf       	out	0x3e, r29	; 62
    2be8:	0f be       	out	0x3f, r0	; 63
    2bea:	cd bf       	out	0x3d, r28	; 61
    2bec:	df 91       	pop	r29
    2bee:	cf 91       	pop	r28
    2bf0:	1f 91       	pop	r17
    2bf2:	0f 91       	pop	r16
    2bf4:	ff 90       	pop	r15
    2bf6:	ef 90       	pop	r14
    2bf8:	df 90       	pop	r13
    2bfa:	cf 90       	pop	r12
    2bfc:	bf 90       	pop	r11
    2bfe:	af 90       	pop	r10
    2c00:	9f 90       	pop	r9
    2c02:	8f 90       	pop	r8
    2c04:	7f 90       	pop	r7
    2c06:	6f 90       	pop	r6
    2c08:	5f 90       	pop	r5
    2c0a:	4f 90       	pop	r4
    2c0c:	3f 90       	pop	r3
    2c0e:	2f 90       	pop	r2
    2c10:	08 95       	ret

00002c12 <has_puck>:

/* Return 1 If Has Puck */
char has_puck(void)
{
	static int had_puck = 0;
	if(check(ADCSRA,ADEN)){		//check if ADC is enabled 
    2c12:	80 91 7a 00 	lds	r24, 0x007A
    2c16:	88 23       	and	r24, r24
    2c18:	14 f5       	brge	.+68     	; 0x2c5e <has_puck+0x4c>
		if(((transistor_3 + transistor_9) > HAS_PUCK_THRESHOLD)){
    2c1a:	20 91 d3 01 	lds	r18, 0x01D3
    2c1e:	30 91 d4 01 	lds	r19, 0x01D4
    2c22:	80 91 d1 01 	lds	r24, 0x01D1
    2c26:	90 91 d2 01 	lds	r25, 0x01D2
    2c2a:	82 0f       	add	r24, r18
    2c2c:	93 1f       	adc	r25, r19
    2c2e:	81 39       	cpi	r24, 0x91	; 145
    2c30:	91 40       	sbci	r25, 0x01	; 1
    2c32:	44 f0       	brlt	.+16     	; 0x2c44 <has_puck+0x32>
			had_puck = 30;
    2c34:	8e e1       	ldi	r24, 0x1E	; 30
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	90 93 ce 01 	sts	0x01CE, r25
    2c3c:	80 93 cd 01 	sts	0x01CD, r24
			return 1;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	08 95       	ret
		}
		if(had_puck){
    2c44:	80 91 cd 01 	lds	r24, 0x01CD
    2c48:	90 91 ce 01 	lds	r25, 0x01CE
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	49 f0       	breq	.+18     	; 0x2c62 <has_puck+0x50>
			had_puck -= 1;
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	90 93 ce 01 	sts	0x01CE, r25
    2c56:	80 93 cd 01 	sts	0x01CD, r24
			return 1;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	08 95       	ret
		}
	}
	return 0;
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	08 95       	ret
    2c62:	80 e0       	ldi	r24, 0x00	; 0
}
    2c64:	08 95       	ret

00002c66 <adc_switch>:
/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated

	clear(ADCSRA,ADEN); // Disable ADC subsystem
    2c66:	ea e7       	ldi	r30, 0x7A	; 122
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	8f 77       	andi	r24, 0x7F	; 127
    2c6e:	80 83       	st	Z, r24
	
	switch(state){
    2c70:	e0 91 e9 01 	lds	r30, 0x01E9
    2c74:	f0 91 ea 01 	lds	r31, 0x01EA
    2c78:	ec 30       	cpi	r30, 0x0C	; 12
    2c7a:	f1 05       	cpc	r31, r1
    2c7c:	08 f0       	brcs	.+2      	; 0x2c80 <adc_switch+0x1a>
    2c7e:	82 c1       	rjmp	.+772    	; 0x2f84 <adc_switch+0x31e>
    2c80:	e2 5a       	subi	r30, 0xA2	; 162
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <__tablejump2__>

		case 0:
			state = 1;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	90 93 ea 01 	sts	0x01EA, r25
    2c90:	80 93 e9 01 	sts	0x01E9, r24
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
    2c94:	eb e7       	ldi	r30, 0x7B	; 123
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	8f 7d       	andi	r24, 0xDF	; 223
    2c9c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 8
    2c9e:	ec e7       	ldi	r30, 0x7C	; 124
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	8b 7f       	andi	r24, 0xFB	; 251
    2ca6:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2ca8:	80 81       	ld	r24, Z
    2caa:	8d 7f       	andi	r24, 0xFD	; 253
    2cac:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2cae:	80 81       	ld	r24, Z
    2cb0:	8e 7f       	andi	r24, 0xFE	; 254
    2cb2:	80 83       	st	Z, r24
			transistor_vals[2] = ADC;			
    2cb4:	80 91 78 00 	lds	r24, 0x0078
    2cb8:	90 91 79 00 	lds	r25, 0x0079
    2cbc:	90 93 da 01 	sts	0x01DA, r25
    2cc0:	80 93 d9 01 	sts	0x01D9, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
			clear(ADMUX,MUX2); // Transistor 8
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[2] = ADC;			
			break;
    2cc6:	5f c1       	rjmp	.+702    	; 0x2f86 <adc_switch+0x320>

		case 1:
			state = 2;
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	90 93 ea 01 	sts	0x01EA, r25
    2cd0:	80 93 e9 01 	sts	0x01E9, r24
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
    2cd4:	eb e7       	ldi	r30, 0x7B	; 123
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	8f 7d       	andi	r24, 0xDF	; 223
    2cdc:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 9
    2cde:	ec e7       	ldi	r30, 0x7C	; 124
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	8b 7f       	andi	r24, 0xFB	; 251
    2ce6:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2ce8:	80 81       	ld	r24, Z
    2cea:	8d 7f       	andi	r24, 0xFD	; 253
    2cec:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2cee:	80 81       	ld	r24, Z
    2cf0:	81 60       	ori	r24, 0x01	; 1
    2cf2:	80 83       	st	Z, r24
			transistor_vals[4] = ADC;			
    2cf4:	80 91 78 00 	lds	r24, 0x0078
    2cf8:	90 91 79 00 	lds	r25, 0x0079
    2cfc:	90 93 de 01 	sts	0x01DE, r25
    2d00:	80 93 dd 01 	sts	0x01DD, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d04:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
			clear(ADMUX,MUX2); // Transistor 9
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[4] = ADC;			
			break;
    2d06:	3f c1       	rjmp	.+638    	; 0x2f86 <adc_switch+0x320>

		case 2:
			state = 3;
    2d08:	83 e0       	ldi	r24, 0x03	; 3
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	90 93 ea 01 	sts	0x01EA, r25
    2d10:	80 93 e9 01 	sts	0x01E9, r24
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
    2d14:	eb e7       	ldi	r30, 0x7B	; 123
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	8f 7d       	andi	r24, 0xDF	; 223
    2d1c:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 10
    2d1e:	ec e7       	ldi	r30, 0x7C	; 124
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	84 60       	ori	r24, 0x04	; 4
    2d26:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2d28:	80 81       	ld	r24, Z
    2d2a:	8d 7f       	andi	r24, 0xFD	; 253
    2d2c:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2d2e:	80 81       	ld	r24, Z
    2d30:	8e 7f       	andi	r24, 0xFE	; 254
    2d32:	80 83       	st	Z, r24
			transistor_9 = ADC;			
    2d34:	80 91 78 00 	lds	r24, 0x0078
    2d38:	90 91 79 00 	lds	r25, 0x0079
    2d3c:	90 93 d2 01 	sts	0x01D2, r25
    2d40:	80 93 d1 01 	sts	0x01D1, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d44:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
			set(ADMUX,MUX2); // Transistor 10
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_9 = ADC;			
			break;
    2d46:	1f c1       	rjmp	.+574    	; 0x2f86 <adc_switch+0x320>

		case 3:
			state = 4;
    2d48:	84 e0       	ldi	r24, 0x04	; 4
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	90 93 ea 01 	sts	0x01EA, r25
    2d50:	80 93 e9 01 	sts	0x01E9, r24
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
    2d54:	eb e7       	ldi	r30, 0x7B	; 123
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	8f 7d       	andi	r24, 0xDF	; 223
    2d5c:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 13
    2d5e:	ec e7       	ldi	r30, 0x7C	; 124
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
    2d64:	84 60       	ori	r24, 0x04	; 4
    2d66:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2d68:	80 81       	ld	r24, Z
    2d6a:	8d 7f       	andi	r24, 0xFD	; 253
    2d6c:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2d6e:	80 81       	ld	r24, Z
    2d70:	81 60       	ori	r24, 0x01	; 1
    2d72:	80 83       	st	Z, r24
			transistor_vals[5] = ADC;			
    2d74:	80 91 78 00 	lds	r24, 0x0078
    2d78:	90 91 79 00 	lds	r25, 0x0079
    2d7c:	90 93 e0 01 	sts	0x01E0, r25
    2d80:	80 93 df 01 	sts	0x01DF, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d84:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
			set(ADMUX,MUX2); // Transistor 13
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[5] = ADC;			
			break;
    2d86:	ff c0       	rjmp	.+510    	; 0x2f86 <adc_switch+0x320>

		case 4:
			state = 5;
    2d88:	85 e0       	ldi	r24, 0x05	; 5
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	90 93 ea 01 	sts	0x01EA, r25
    2d90:	80 93 e9 01 	sts	0x01E9, r24
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
    2d94:	eb e7       	ldi	r30, 0x7B	; 123
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	8f 7d       	andi	r24, 0xDF	; 223
    2d9c:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 14
    2d9e:	ec e7       	ldi	r30, 0x7C	; 124
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	84 60       	ori	r24, 0x04	; 4
    2da6:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2da8:	80 81       	ld	r24, Z
    2daa:	82 60       	ori	r24, 0x02	; 2
    2dac:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2dae:	80 81       	ld	r24, Z
    2db0:	8e 7f       	andi	r24, 0xFE	; 254
    2db2:	80 83       	st	Z, r24
			transistor_vals[7] = ADC;			
    2db4:	80 91 78 00 	lds	r24, 0x0078
    2db8:	90 91 79 00 	lds	r25, 0x0079
    2dbc:	90 93 e4 01 	sts	0x01E4, r25
    2dc0:	80 93 e3 01 	sts	0x01E3, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
			set(ADMUX,MUX2); // Transistor 14
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[7] = ADC;			
			break;
    2dc6:	df c0       	rjmp	.+446    	; 0x2f86 <adc_switch+0x320>

		case 5:
			state = 6;
    2dc8:	86 e0       	ldi	r24, 0x06	; 6
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	90 93 ea 01 	sts	0x01EA, r25
    2dd0:	80 93 e9 01 	sts	0x01E9, r24
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
    2dd4:	eb e7       	ldi	r30, 0x7B	; 123
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	8f 7d       	andi	r24, 0xDF	; 223
    2ddc:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 15
    2dde:	ec e7       	ldi	r30, 0x7C	; 124
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	84 60       	ori	r24, 0x04	; 4
    2de6:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2de8:	80 81       	ld	r24, Z
    2dea:	82 60       	ori	r24, 0x02	; 2
    2dec:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2dee:	80 81       	ld	r24, Z
    2df0:	81 60       	ori	r24, 0x01	; 1
    2df2:	80 83       	st	Z, r24
			transistor_vals[8] = ADC;			
    2df4:	80 91 78 00 	lds	r24, 0x0078
    2df8:	90 91 79 00 	lds	r25, 0x0079
    2dfc:	90 93 e6 01 	sts	0x01E6, r25
    2e00:	80 93 e5 01 	sts	0x01E5, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e04:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
			set(ADMUX,MUX2); // Transistor 15
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[8] = ADC;			
			break;
    2e06:	bf c0       	rjmp	.+382    	; 0x2f86 <adc_switch+0x320>

		case 6:
			state = 7;
    2e08:	87 e0       	ldi	r24, 0x07	; 7
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	90 93 ea 01 	sts	0x01EA, r25
    2e10:	80 93 e9 01 	sts	0x01E9, r24
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
    2e14:	eb e7       	ldi	r30, 0x7B	; 123
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	80 62       	ori	r24, 0x20	; 32
    2e1c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 1, 16
    2e1e:	ec e7       	ldi	r30, 0x7C	; 124
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	80 81       	ld	r24, Z
    2e24:	8b 7f       	andi	r24, 0xFB	; 251
    2e26:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2e28:	80 81       	ld	r24, Z
    2e2a:	8d 7f       	andi	r24, 0xFD	; 253
    2e2c:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2e2e:	80 81       	ld	r24, Z
    2e30:	8e 7f       	andi	r24, 0xFE	; 254
    2e32:	80 83       	st	Z, r24
			transistor_vals[9] = ADC;			
    2e34:	80 91 78 00 	lds	r24, 0x0078
    2e38:	90 91 79 00 	lds	r25, 0x0079
    2e3c:	90 93 e8 01 	sts	0x01E8, r25
    2e40:	80 93 e7 01 	sts	0x01E7, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e44:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
			clear(ADMUX,MUX2); // Transistor 1, 16
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[9] = ADC;			
			break;
    2e46:	9f c0       	rjmp	.+318    	; 0x2f86 <adc_switch+0x320>

		case 7:
			state = 8;
    2e48:	88 e0       	ldi	r24, 0x08	; 8
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	90 93 ea 01 	sts	0x01EA, r25
    2e50:	80 93 e9 01 	sts	0x01E9, r24
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
    2e54:	eb e7       	ldi	r30, 0x7B	; 123
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	80 62       	ori	r24, 0x20	; 32
    2e5c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 11, 12
    2e5e:	ec e7       	ldi	r30, 0x7C	; 124
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 81       	ld	r24, Z
    2e64:	8b 7f       	andi	r24, 0xFB	; 251
    2e66:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2e68:	80 81       	ld	r24, Z
    2e6a:	8d 7f       	andi	r24, 0xFD	; 253
    2e6c:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2e6e:	80 81       	ld	r24, Z
    2e70:	81 60       	ori	r24, 0x01	; 1
    2e72:	80 83       	st	Z, r24
			transistor_vals[0] = ADC;			
    2e74:	80 91 78 00 	lds	r24, 0x0078
    2e78:	90 91 79 00 	lds	r25, 0x0079
    2e7c:	90 93 d6 01 	sts	0x01D6, r25
    2e80:	80 93 d5 01 	sts	0x01D5, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e84:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
			clear(ADMUX,MUX2); // Transistor 11, 12
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[0] = ADC;			
			break;
    2e86:	7f c0       	rjmp	.+254    	; 0x2f86 <adc_switch+0x320>

		case 8:
			state = 9;
    2e88:	89 e0       	ldi	r24, 0x09	; 9
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	90 93 ea 01 	sts	0x01EA, r25
    2e90:	80 93 e9 01 	sts	0x01E9, r24
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
    2e94:	eb e7       	ldi	r30, 0x7B	; 123
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	80 62       	ori	r24, 0x20	; 32
    2e9c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
    2e9e:	ec e7       	ldi	r30, 0x7C	; 124
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	8b 7f       	andi	r24, 0xFB	; 251
    2ea6:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2ea8:	80 81       	ld	r24, Z
    2eaa:	82 60       	ori	r24, 0x02	; 2
    2eac:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2eae:	80 81       	ld	r24, Z
    2eb0:	8e 7f       	andi	r24, 0xFE	; 254
    2eb2:	80 83       	st	Z, r24
			transistor_vals[6] = ADC;			
    2eb4:	80 91 78 00 	lds	r24, 0x0078
    2eb8:	90 91 79 00 	lds	r25, 0x0079
    2ebc:	90 93 e2 01 	sts	0x01E2, r25
    2ec0:	80 93 e1 01 	sts	0x01E1, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[6] = ADC;			
			break;
    2ec6:	5f c0       	rjmp	.+190    	; 0x2f86 <adc_switch+0x320>

		case 9:
			state = 10;
    2ec8:	8a e0       	ldi	r24, 0x0A	; 10
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	90 93 ea 01 	sts	0x01EA, r25
    2ed0:	80 93 e9 01 	sts	0x01E9, r24
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
    2ed4:	eb e7       	ldi	r30, 0x7B	; 123
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	80 81       	ld	r24, Z
    2eda:	80 62       	ori	r24, 0x20	; 32
    2edc:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 2
    2ede:	ec e7       	ldi	r30, 0x7C	; 124
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	8b 7f       	andi	r24, 0xFB	; 251
    2ee6:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2ee8:	80 81       	ld	r24, Z
    2eea:	82 60       	ori	r24, 0x02	; 2
    2eec:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2eee:	80 81       	ld	r24, Z
    2ef0:	81 60       	ori	r24, 0x01	; 1
    2ef2:	80 83       	st	Z, r24
			transistor_vals[3] = ADC;			
    2ef4:	80 91 78 00 	lds	r24, 0x0078
    2ef8:	90 91 79 00 	lds	r25, 0x0079
    2efc:	90 93 dc 01 	sts	0x01DC, r25
    2f00:	80 93 db 01 	sts	0x01DB, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2f04:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
			clear(ADMUX,MUX2); // Transistor 2
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[3] = ADC;			
			break;
    2f06:	3f c0       	rjmp	.+126    	; 0x2f86 <adc_switch+0x320>

		case 10:
			state = 11;
    2f08:	8b e0       	ldi	r24, 0x0B	; 11
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	90 93 ea 01 	sts	0x01EA, r25
    2f10:	80 93 e9 01 	sts	0x01E9, r24
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
    2f14:	eb e7       	ldi	r30, 0x7B	; 123
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	80 62       	ori	r24, 0x20	; 32
    2f1c:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 3
    2f1e:	ec e7       	ldi	r30, 0x7C	; 124
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	80 81       	ld	r24, Z
    2f24:	84 60       	ori	r24, 0x04	; 4
    2f26:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2f28:	80 81       	ld	r24, Z
    2f2a:	8d 7f       	andi	r24, 0xFD	; 253
    2f2c:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2f2e:	80 81       	ld	r24, Z
    2f30:	8e 7f       	andi	r24, 0xFE	; 254
    2f32:	80 83       	st	Z, r24
			transistor_vals[1] = ADC;			
    2f34:	80 91 78 00 	lds	r24, 0x0078
    2f38:	90 91 79 00 	lds	r25, 0x0079
    2f3c:	90 93 d8 01 	sts	0x01D8, r25
    2f40:	80 93 d7 01 	sts	0x01D7, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2f44:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
			set(ADMUX,MUX2); // Transistor 3
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[1] = ADC;			
			break;
    2f46:	1f c0       	rjmp	.+62     	; 0x2f86 <adc_switch+0x320>

		case 11:
			state = 0;
    2f48:	10 92 ea 01 	sts	0x01EA, r1
    2f4c:	10 92 e9 01 	sts	0x01E9, r1
			set(ADCSRB,MUX5); // Select ADC13 at pin B6
    2f50:	eb e7       	ldi	r30, 0x7B	; 123
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	80 62       	ori	r24, 0x20	; 32
    2f58:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 4
    2f5a:	ec e7       	ldi	r30, 0x7C	; 124
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	84 60       	ori	r24, 0x04	; 4
    2f62:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2f64:	80 81       	ld	r24, Z
    2f66:	8d 7f       	andi	r24, 0xFD	; 253
    2f68:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2f6a:	80 81       	ld	r24, Z
    2f6c:	81 60       	ori	r24, 0x01	; 1
    2f6e:	80 83       	st	Z, r24
			transistor_3 = ADC;			
    2f70:	80 91 78 00 	lds	r24, 0x0078
    2f74:	90 91 79 00 	lds	r25, 0x0079
    2f78:	90 93 d4 01 	sts	0x01D4, r25
    2f7c:	80 93 d3 01 	sts	0x01D3, r24
			return_val = 1;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
			// m_usb_tx_string("  IR14: ");
			// m_usb_tx_int(transistor_vals[8]);
			// m_usb_tx_string("  IR15: ");
			// m_usb_tx_int(transistor_vals[9]);

			break;
    2f82:	01 c0       	rjmp	.+2      	; 0x2f86 <adc_switch+0x320>
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2f84:	80 e0       	ldi	r24, 0x00	; 0
			// m_usb_tx_int(transistor_vals[9]);

			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
    2f86:	ea e7       	ldi	r30, 0x7A	; 122
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	90 81       	ld	r25, Z
    2f8c:	90 68       	ori	r25, 0x80	; 128
    2f8e:	90 83       	st	Z, r25
	set(ADCSRA,ADSC); // Begin new conversion
    2f90:	90 81       	ld	r25, Z
    2f92:	90 64       	ori	r25, 0x40	; 64
    2f94:	90 83       	st	Z, r25

	return return_val;
}
    2f96:	08 95       	ret

00002f98 <__subsf3>:
    2f98:	50 58       	subi	r21, 0x80	; 128

00002f9a <__addsf3>:
    2f9a:	bb 27       	eor	r27, r27
    2f9c:	aa 27       	eor	r26, r26
    2f9e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__addsf3x>
    2fa2:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__fp_round>
    2fa6:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__fp_pscA>
    2faa:	38 f0       	brcs	.+14     	; 0x2fba <__addsf3+0x20>
    2fac:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__fp_pscB>
    2fb0:	20 f0       	brcs	.+8      	; 0x2fba <__addsf3+0x20>
    2fb2:	39 f4       	brne	.+14     	; 0x2fc2 <__addsf3+0x28>
    2fb4:	9f 3f       	cpi	r25, 0xFF	; 255
    2fb6:	19 f4       	brne	.+6      	; 0x2fbe <__addsf3+0x24>
    2fb8:	26 f4       	brtc	.+8      	; 0x2fc2 <__addsf3+0x28>
    2fba:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__fp_nan>
    2fbe:	0e f4       	brtc	.+2      	; 0x2fc2 <__addsf3+0x28>
    2fc0:	e0 95       	com	r30
    2fc2:	e7 fb       	bst	r30, 7
    2fc4:	0c 94 be 19 	jmp	0x337c	; 0x337c <__fp_inf>

00002fc8 <__addsf3x>:
    2fc8:	e9 2f       	mov	r30, r25
    2fca:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__fp_split3>
    2fce:	58 f3       	brcs	.-42     	; 0x2fa6 <__addsf3+0xc>
    2fd0:	ba 17       	cp	r27, r26
    2fd2:	62 07       	cpc	r22, r18
    2fd4:	73 07       	cpc	r23, r19
    2fd6:	84 07       	cpc	r24, r20
    2fd8:	95 07       	cpc	r25, r21
    2fda:	20 f0       	brcs	.+8      	; 0x2fe4 <__addsf3x+0x1c>
    2fdc:	79 f4       	brne	.+30     	; 0x2ffc <__addsf3x+0x34>
    2fde:	a6 f5       	brtc	.+104    	; 0x3048 <__addsf3x+0x80>
    2fe0:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__fp_zero>
    2fe4:	0e f4       	brtc	.+2      	; 0x2fe8 <__addsf3x+0x20>
    2fe6:	e0 95       	com	r30
    2fe8:	0b 2e       	mov	r0, r27
    2fea:	ba 2f       	mov	r27, r26
    2fec:	a0 2d       	mov	r26, r0
    2fee:	0b 01       	movw	r0, r22
    2ff0:	b9 01       	movw	r22, r18
    2ff2:	90 01       	movw	r18, r0
    2ff4:	0c 01       	movw	r0, r24
    2ff6:	ca 01       	movw	r24, r20
    2ff8:	a0 01       	movw	r20, r0
    2ffa:	11 24       	eor	r1, r1
    2ffc:	ff 27       	eor	r31, r31
    2ffe:	59 1b       	sub	r21, r25
    3000:	99 f0       	breq	.+38     	; 0x3028 <__addsf3x+0x60>
    3002:	59 3f       	cpi	r21, 0xF9	; 249
    3004:	50 f4       	brcc	.+20     	; 0x301a <__addsf3x+0x52>
    3006:	50 3e       	cpi	r21, 0xE0	; 224
    3008:	68 f1       	brcs	.+90     	; 0x3064 <__addsf3x+0x9c>
    300a:	1a 16       	cp	r1, r26
    300c:	f0 40       	sbci	r31, 0x00	; 0
    300e:	a2 2f       	mov	r26, r18
    3010:	23 2f       	mov	r18, r19
    3012:	34 2f       	mov	r19, r20
    3014:	44 27       	eor	r20, r20
    3016:	58 5f       	subi	r21, 0xF8	; 248
    3018:	f3 cf       	rjmp	.-26     	; 0x3000 <__addsf3x+0x38>
    301a:	46 95       	lsr	r20
    301c:	37 95       	ror	r19
    301e:	27 95       	ror	r18
    3020:	a7 95       	ror	r26
    3022:	f0 40       	sbci	r31, 0x00	; 0
    3024:	53 95       	inc	r21
    3026:	c9 f7       	brne	.-14     	; 0x301a <__addsf3x+0x52>
    3028:	7e f4       	brtc	.+30     	; 0x3048 <__addsf3x+0x80>
    302a:	1f 16       	cp	r1, r31
    302c:	ba 0b       	sbc	r27, r26
    302e:	62 0b       	sbc	r22, r18
    3030:	73 0b       	sbc	r23, r19
    3032:	84 0b       	sbc	r24, r20
    3034:	ba f0       	brmi	.+46     	; 0x3064 <__addsf3x+0x9c>
    3036:	91 50       	subi	r25, 0x01	; 1
    3038:	a1 f0       	breq	.+40     	; 0x3062 <__addsf3x+0x9a>
    303a:	ff 0f       	add	r31, r31
    303c:	bb 1f       	adc	r27, r27
    303e:	66 1f       	adc	r22, r22
    3040:	77 1f       	adc	r23, r23
    3042:	88 1f       	adc	r24, r24
    3044:	c2 f7       	brpl	.-16     	; 0x3036 <__addsf3x+0x6e>
    3046:	0e c0       	rjmp	.+28     	; 0x3064 <__addsf3x+0x9c>
    3048:	ba 0f       	add	r27, r26
    304a:	62 1f       	adc	r22, r18
    304c:	73 1f       	adc	r23, r19
    304e:	84 1f       	adc	r24, r20
    3050:	48 f4       	brcc	.+18     	; 0x3064 <__addsf3x+0x9c>
    3052:	87 95       	ror	r24
    3054:	77 95       	ror	r23
    3056:	67 95       	ror	r22
    3058:	b7 95       	ror	r27
    305a:	f7 95       	ror	r31
    305c:	9e 3f       	cpi	r25, 0xFE	; 254
    305e:	08 f0       	brcs	.+2      	; 0x3062 <__addsf3x+0x9a>
    3060:	b0 cf       	rjmp	.-160    	; 0x2fc2 <__addsf3+0x28>
    3062:	93 95       	inc	r25
    3064:	88 0f       	add	r24, r24
    3066:	08 f0       	brcs	.+2      	; 0x306a <__addsf3x+0xa2>
    3068:	99 27       	eor	r25, r25
    306a:	ee 0f       	add	r30, r30
    306c:	97 95       	ror	r25
    306e:	87 95       	ror	r24
    3070:	08 95       	ret
    3072:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__fp_pscA>
    3076:	60 f0       	brcs	.+24     	; 0x3090 <__addsf3x+0xc8>
    3078:	80 e8       	ldi	r24, 0x80	; 128
    307a:	91 e0       	ldi	r25, 0x01	; 1
    307c:	09 f4       	brne	.+2      	; 0x3080 <__addsf3x+0xb8>
    307e:	9e ef       	ldi	r25, 0xFE	; 254
    3080:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__fp_pscB>
    3084:	28 f0       	brcs	.+10     	; 0x3090 <__addsf3x+0xc8>
    3086:	40 e8       	ldi	r20, 0x80	; 128
    3088:	51 e0       	ldi	r21, 0x01	; 1
    308a:	71 f4       	brne	.+28     	; 0x30a8 <atan2+0x10>
    308c:	5e ef       	ldi	r21, 0xFE	; 254
    308e:	0c c0       	rjmp	.+24     	; 0x30a8 <atan2+0x10>
    3090:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__fp_nan>
    3094:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__fp_zero>

00003098 <atan2>:
    3098:	e9 2f       	mov	r30, r25
    309a:	e0 78       	andi	r30, 0x80	; 128
    309c:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__fp_split3>
    30a0:	40 f3       	brcs	.-48     	; 0x3072 <__addsf3x+0xaa>
    30a2:	09 2e       	mov	r0, r25
    30a4:	05 2a       	or	r0, r21
    30a6:	b1 f3       	breq	.-20     	; 0x3094 <__addsf3x+0xcc>
    30a8:	26 17       	cp	r18, r22
    30aa:	37 07       	cpc	r19, r23
    30ac:	48 07       	cpc	r20, r24
    30ae:	59 07       	cpc	r21, r25
    30b0:	38 f0       	brcs	.+14     	; 0x30c0 <atan2+0x28>
    30b2:	0e 2e       	mov	r0, r30
    30b4:	07 f8       	bld	r0, 7
    30b6:	e0 25       	eor	r30, r0
    30b8:	69 f0       	breq	.+26     	; 0x30d4 <atan2+0x3c>
    30ba:	e0 25       	eor	r30, r0
    30bc:	e0 64       	ori	r30, 0x40	; 64
    30be:	0a c0       	rjmp	.+20     	; 0x30d4 <atan2+0x3c>
    30c0:	ef 63       	ori	r30, 0x3F	; 63
    30c2:	07 f8       	bld	r0, 7
    30c4:	00 94       	com	r0
    30c6:	07 fa       	bst	r0, 7
    30c8:	db 01       	movw	r26, r22
    30ca:	b9 01       	movw	r22, r18
    30cc:	9d 01       	movw	r18, r26
    30ce:	dc 01       	movw	r26, r24
    30d0:	ca 01       	movw	r24, r20
    30d2:	ad 01       	movw	r20, r26
    30d4:	ef 93       	push	r30
    30d6:	0e 94 cc 18 	call	0x3198	; 0x3198 <__divsf3_pse>
    30da:	0e 94 27 1a 	call	0x344e	; 0x344e <__fp_round>
    30de:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <atan>
    30e2:	5f 91       	pop	r21
    30e4:	55 23       	and	r21, r21
    30e6:	39 f0       	breq	.+14     	; 0x30f6 <atan2+0x5e>
    30e8:	2b ed       	ldi	r18, 0xDB	; 219
    30ea:	3f e0       	ldi	r19, 0x0F	; 15
    30ec:	49 e4       	ldi	r20, 0x49	; 73
    30ee:	50 fd       	sbrc	r21, 0
    30f0:	49 ec       	ldi	r20, 0xC9	; 201
    30f2:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__addsf3>
    30f6:	08 95       	ret

000030f8 <atan>:
    30f8:	df 93       	push	r29
    30fa:	dd 27       	eor	r29, r29
    30fc:	b9 2f       	mov	r27, r25
    30fe:	bf 77       	andi	r27, 0x7F	; 127
    3100:	40 e8       	ldi	r20, 0x80	; 128
    3102:	5f e3       	ldi	r21, 0x3F	; 63
    3104:	16 16       	cp	r1, r22
    3106:	17 06       	cpc	r1, r23
    3108:	48 07       	cpc	r20, r24
    310a:	5b 07       	cpc	r21, r27
    310c:	18 f4       	brcc	.+6      	; 0x3114 <atan+0x1c>
    310e:	d9 2f       	mov	r29, r25
    3110:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <inverse>
    3114:	9f 93       	push	r25
    3116:	8f 93       	push	r24
    3118:	7f 93       	push	r23
    311a:	6f 93       	push	r22
    311c:	0e 94 3d 1b 	call	0x367a	; 0x367a <square>
    3120:	e4 ed       	ldi	r30, 0xD4	; 212
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	0e 94 c7 19 	call	0x338e	; 0x338e <__fp_powser>
    3128:	0e 94 27 1a 	call	0x344e	; 0x344e <__fp_round>
    312c:	2f 91       	pop	r18
    312e:	3f 91       	pop	r19
    3130:	4f 91       	pop	r20
    3132:	5f 91       	pop	r21
    3134:	0e 94 95 1a 	call	0x352a	; 0x352a <__mulsf3x>
    3138:	dd 23       	and	r29, r29
    313a:	51 f0       	breq	.+20     	; 0x3150 <atan+0x58>
    313c:	90 58       	subi	r25, 0x80	; 128
    313e:	a2 ea       	ldi	r26, 0xA2	; 162
    3140:	2a ed       	ldi	r18, 0xDA	; 218
    3142:	3f e0       	ldi	r19, 0x0F	; 15
    3144:	49 ec       	ldi	r20, 0xC9	; 201
    3146:	5f e3       	ldi	r21, 0x3F	; 63
    3148:	d0 78       	andi	r29, 0x80	; 128
    314a:	5d 27       	eor	r21, r29
    314c:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__addsf3x>
    3150:	df 91       	pop	r29
    3152:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__fp_round>

00003156 <__cmpsf2>:
    3156:	0e 94 9a 19 	call	0x3334	; 0x3334 <__fp_cmp>
    315a:	08 f4       	brcc	.+2      	; 0x315e <__cmpsf2+0x8>
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	08 95       	ret

00003160 <cos>:
    3160:	0e 94 fe 19 	call	0x33fc	; 0x33fc <__fp_rempio2>
    3164:	e3 95       	inc	r30
    3166:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__fp_sinus>

0000316a <__divsf3>:
    316a:	0e 94 c9 18 	call	0x3192	; 0x3192 <__divsf3x>
    316e:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__fp_round>
    3172:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__fp_pscB>
    3176:	58 f0       	brcs	.+22     	; 0x318e <__divsf3+0x24>
    3178:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__fp_pscA>
    317c:	40 f0       	brcs	.+16     	; 0x318e <__divsf3+0x24>
    317e:	29 f4       	brne	.+10     	; 0x318a <__divsf3+0x20>
    3180:	5f 3f       	cpi	r21, 0xFF	; 255
    3182:	29 f0       	breq	.+10     	; 0x318e <__divsf3+0x24>
    3184:	0c 94 be 19 	jmp	0x337c	; 0x337c <__fp_inf>
    3188:	51 11       	cpse	r21, r1
    318a:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__fp_szero>
    318e:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__fp_nan>

00003192 <__divsf3x>:
    3192:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__fp_split3>
    3196:	68 f3       	brcs	.-38     	; 0x3172 <__divsf3+0x8>

00003198 <__divsf3_pse>:
    3198:	99 23       	and	r25, r25
    319a:	b1 f3       	breq	.-20     	; 0x3188 <__divsf3+0x1e>
    319c:	55 23       	and	r21, r21
    319e:	91 f3       	breq	.-28     	; 0x3184 <__divsf3+0x1a>
    31a0:	95 1b       	sub	r25, r21
    31a2:	55 0b       	sbc	r21, r21
    31a4:	bb 27       	eor	r27, r27
    31a6:	aa 27       	eor	r26, r26
    31a8:	62 17       	cp	r22, r18
    31aa:	73 07       	cpc	r23, r19
    31ac:	84 07       	cpc	r24, r20
    31ae:	38 f0       	brcs	.+14     	; 0x31be <__divsf3_pse+0x26>
    31b0:	9f 5f       	subi	r25, 0xFF	; 255
    31b2:	5f 4f       	sbci	r21, 0xFF	; 255
    31b4:	22 0f       	add	r18, r18
    31b6:	33 1f       	adc	r19, r19
    31b8:	44 1f       	adc	r20, r20
    31ba:	aa 1f       	adc	r26, r26
    31bc:	a9 f3       	breq	.-22     	; 0x31a8 <__divsf3_pse+0x10>
    31be:	35 d0       	rcall	.+106    	; 0x322a <__divsf3_pse+0x92>
    31c0:	0e 2e       	mov	r0, r30
    31c2:	3a f0       	brmi	.+14     	; 0x31d2 <__divsf3_pse+0x3a>
    31c4:	e0 e8       	ldi	r30, 0x80	; 128
    31c6:	32 d0       	rcall	.+100    	; 0x322c <__divsf3_pse+0x94>
    31c8:	91 50       	subi	r25, 0x01	; 1
    31ca:	50 40       	sbci	r21, 0x00	; 0
    31cc:	e6 95       	lsr	r30
    31ce:	00 1c       	adc	r0, r0
    31d0:	ca f7       	brpl	.-14     	; 0x31c4 <__divsf3_pse+0x2c>
    31d2:	2b d0       	rcall	.+86     	; 0x322a <__divsf3_pse+0x92>
    31d4:	fe 2f       	mov	r31, r30
    31d6:	29 d0       	rcall	.+82     	; 0x322a <__divsf3_pse+0x92>
    31d8:	66 0f       	add	r22, r22
    31da:	77 1f       	adc	r23, r23
    31dc:	88 1f       	adc	r24, r24
    31de:	bb 1f       	adc	r27, r27
    31e0:	26 17       	cp	r18, r22
    31e2:	37 07       	cpc	r19, r23
    31e4:	48 07       	cpc	r20, r24
    31e6:	ab 07       	cpc	r26, r27
    31e8:	b0 e8       	ldi	r27, 0x80	; 128
    31ea:	09 f0       	breq	.+2      	; 0x31ee <__divsf3_pse+0x56>
    31ec:	bb 0b       	sbc	r27, r27
    31ee:	80 2d       	mov	r24, r0
    31f0:	bf 01       	movw	r22, r30
    31f2:	ff 27       	eor	r31, r31
    31f4:	93 58       	subi	r25, 0x83	; 131
    31f6:	5f 4f       	sbci	r21, 0xFF	; 255
    31f8:	3a f0       	brmi	.+14     	; 0x3208 <__divsf3_pse+0x70>
    31fa:	9e 3f       	cpi	r25, 0xFE	; 254
    31fc:	51 05       	cpc	r21, r1
    31fe:	78 f0       	brcs	.+30     	; 0x321e <__divsf3_pse+0x86>
    3200:	0c 94 be 19 	jmp	0x337c	; 0x337c <__fp_inf>
    3204:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__fp_szero>
    3208:	5f 3f       	cpi	r21, 0xFF	; 255
    320a:	e4 f3       	brlt	.-8      	; 0x3204 <__divsf3_pse+0x6c>
    320c:	98 3e       	cpi	r25, 0xE8	; 232
    320e:	d4 f3       	brlt	.-12     	; 0x3204 <__divsf3_pse+0x6c>
    3210:	86 95       	lsr	r24
    3212:	77 95       	ror	r23
    3214:	67 95       	ror	r22
    3216:	b7 95       	ror	r27
    3218:	f7 95       	ror	r31
    321a:	9f 5f       	subi	r25, 0xFF	; 255
    321c:	c9 f7       	brne	.-14     	; 0x3210 <__divsf3_pse+0x78>
    321e:	88 0f       	add	r24, r24
    3220:	91 1d       	adc	r25, r1
    3222:	96 95       	lsr	r25
    3224:	87 95       	ror	r24
    3226:	97 f9       	bld	r25, 7
    3228:	08 95       	ret
    322a:	e1 e0       	ldi	r30, 0x01	; 1
    322c:	66 0f       	add	r22, r22
    322e:	77 1f       	adc	r23, r23
    3230:	88 1f       	adc	r24, r24
    3232:	bb 1f       	adc	r27, r27
    3234:	62 17       	cp	r22, r18
    3236:	73 07       	cpc	r23, r19
    3238:	84 07       	cpc	r24, r20
    323a:	ba 07       	cpc	r27, r26
    323c:	20 f0       	brcs	.+8      	; 0x3246 <__divsf3_pse+0xae>
    323e:	62 1b       	sub	r22, r18
    3240:	73 0b       	sbc	r23, r19
    3242:	84 0b       	sbc	r24, r20
    3244:	ba 0b       	sbc	r27, r26
    3246:	ee 1f       	adc	r30, r30
    3248:	88 f7       	brcc	.-30     	; 0x322c <__divsf3_pse+0x94>
    324a:	e0 95       	com	r30
    324c:	08 95       	ret

0000324e <__fixsfsi>:
    324e:	0e 94 2e 19 	call	0x325c	; 0x325c <__fixunssfsi>
    3252:	68 94       	set
    3254:	b1 11       	cpse	r27, r1
    3256:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__fp_szero>
    325a:	08 95       	ret

0000325c <__fixunssfsi>:
    325c:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__fp_splitA>
    3260:	88 f0       	brcs	.+34     	; 0x3284 <__fixunssfsi+0x28>
    3262:	9f 57       	subi	r25, 0x7F	; 127
    3264:	98 f0       	brcs	.+38     	; 0x328c <__fixunssfsi+0x30>
    3266:	b9 2f       	mov	r27, r25
    3268:	99 27       	eor	r25, r25
    326a:	b7 51       	subi	r27, 0x17	; 23
    326c:	b0 f0       	brcs	.+44     	; 0x329a <__fixunssfsi+0x3e>
    326e:	e1 f0       	breq	.+56     	; 0x32a8 <__fixunssfsi+0x4c>
    3270:	66 0f       	add	r22, r22
    3272:	77 1f       	adc	r23, r23
    3274:	88 1f       	adc	r24, r24
    3276:	99 1f       	adc	r25, r25
    3278:	1a f0       	brmi	.+6      	; 0x3280 <__fixunssfsi+0x24>
    327a:	ba 95       	dec	r27
    327c:	c9 f7       	brne	.-14     	; 0x3270 <__fixunssfsi+0x14>
    327e:	14 c0       	rjmp	.+40     	; 0x32a8 <__fixunssfsi+0x4c>
    3280:	b1 30       	cpi	r27, 0x01	; 1
    3282:	91 f0       	breq	.+36     	; 0x32a8 <__fixunssfsi+0x4c>
    3284:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__fp_zero>
    3288:	b1 e0       	ldi	r27, 0x01	; 1
    328a:	08 95       	ret
    328c:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__fp_zero>
    3290:	67 2f       	mov	r22, r23
    3292:	78 2f       	mov	r23, r24
    3294:	88 27       	eor	r24, r24
    3296:	b8 5f       	subi	r27, 0xF8	; 248
    3298:	39 f0       	breq	.+14     	; 0x32a8 <__fixunssfsi+0x4c>
    329a:	b9 3f       	cpi	r27, 0xF9	; 249
    329c:	cc f3       	brlt	.-14     	; 0x3290 <__fixunssfsi+0x34>
    329e:	86 95       	lsr	r24
    32a0:	77 95       	ror	r23
    32a2:	67 95       	ror	r22
    32a4:	b3 95       	inc	r27
    32a6:	d9 f7       	brne	.-10     	; 0x329e <__fixunssfsi+0x42>
    32a8:	3e f4       	brtc	.+14     	; 0x32b8 <__fixunssfsi+0x5c>
    32aa:	90 95       	com	r25
    32ac:	80 95       	com	r24
    32ae:	70 95       	com	r23
    32b0:	61 95       	neg	r22
    32b2:	7f 4f       	sbci	r23, 0xFF	; 255
    32b4:	8f 4f       	sbci	r24, 0xFF	; 255
    32b6:	9f 4f       	sbci	r25, 0xFF	; 255
    32b8:	08 95       	ret

000032ba <__floatunsisf>:
    32ba:	e8 94       	clt
    32bc:	09 c0       	rjmp	.+18     	; 0x32d0 <__floatsisf+0x12>

000032be <__floatsisf>:
    32be:	97 fb       	bst	r25, 7
    32c0:	3e f4       	brtc	.+14     	; 0x32d0 <__floatsisf+0x12>
    32c2:	90 95       	com	r25
    32c4:	80 95       	com	r24
    32c6:	70 95       	com	r23
    32c8:	61 95       	neg	r22
    32ca:	7f 4f       	sbci	r23, 0xFF	; 255
    32cc:	8f 4f       	sbci	r24, 0xFF	; 255
    32ce:	9f 4f       	sbci	r25, 0xFF	; 255
    32d0:	99 23       	and	r25, r25
    32d2:	a9 f0       	breq	.+42     	; 0x32fe <__floatsisf+0x40>
    32d4:	f9 2f       	mov	r31, r25
    32d6:	96 e9       	ldi	r25, 0x96	; 150
    32d8:	bb 27       	eor	r27, r27
    32da:	93 95       	inc	r25
    32dc:	f6 95       	lsr	r31
    32de:	87 95       	ror	r24
    32e0:	77 95       	ror	r23
    32e2:	67 95       	ror	r22
    32e4:	b7 95       	ror	r27
    32e6:	f1 11       	cpse	r31, r1
    32e8:	f8 cf       	rjmp	.-16     	; 0x32da <__floatsisf+0x1c>
    32ea:	fa f4       	brpl	.+62     	; 0x332a <__floatsisf+0x6c>
    32ec:	bb 0f       	add	r27, r27
    32ee:	11 f4       	brne	.+4      	; 0x32f4 <__floatsisf+0x36>
    32f0:	60 ff       	sbrs	r22, 0
    32f2:	1b c0       	rjmp	.+54     	; 0x332a <__floatsisf+0x6c>
    32f4:	6f 5f       	subi	r22, 0xFF	; 255
    32f6:	7f 4f       	sbci	r23, 0xFF	; 255
    32f8:	8f 4f       	sbci	r24, 0xFF	; 255
    32fa:	9f 4f       	sbci	r25, 0xFF	; 255
    32fc:	16 c0       	rjmp	.+44     	; 0x332a <__floatsisf+0x6c>
    32fe:	88 23       	and	r24, r24
    3300:	11 f0       	breq	.+4      	; 0x3306 <__floatsisf+0x48>
    3302:	96 e9       	ldi	r25, 0x96	; 150
    3304:	11 c0       	rjmp	.+34     	; 0x3328 <__floatsisf+0x6a>
    3306:	77 23       	and	r23, r23
    3308:	21 f0       	breq	.+8      	; 0x3312 <__floatsisf+0x54>
    330a:	9e e8       	ldi	r25, 0x8E	; 142
    330c:	87 2f       	mov	r24, r23
    330e:	76 2f       	mov	r23, r22
    3310:	05 c0       	rjmp	.+10     	; 0x331c <__floatsisf+0x5e>
    3312:	66 23       	and	r22, r22
    3314:	71 f0       	breq	.+28     	; 0x3332 <__floatsisf+0x74>
    3316:	96 e8       	ldi	r25, 0x86	; 134
    3318:	86 2f       	mov	r24, r22
    331a:	70 e0       	ldi	r23, 0x00	; 0
    331c:	60 e0       	ldi	r22, 0x00	; 0
    331e:	2a f0       	brmi	.+10     	; 0x332a <__floatsisf+0x6c>
    3320:	9a 95       	dec	r25
    3322:	66 0f       	add	r22, r22
    3324:	77 1f       	adc	r23, r23
    3326:	88 1f       	adc	r24, r24
    3328:	da f7       	brpl	.-10     	; 0x3320 <__floatsisf+0x62>
    332a:	88 0f       	add	r24, r24
    332c:	96 95       	lsr	r25
    332e:	87 95       	ror	r24
    3330:	97 f9       	bld	r25, 7
    3332:	08 95       	ret

00003334 <__fp_cmp>:
    3334:	99 0f       	add	r25, r25
    3336:	00 08       	sbc	r0, r0
    3338:	55 0f       	add	r21, r21
    333a:	aa 0b       	sbc	r26, r26
    333c:	e0 e8       	ldi	r30, 0x80	; 128
    333e:	fe ef       	ldi	r31, 0xFE	; 254
    3340:	16 16       	cp	r1, r22
    3342:	17 06       	cpc	r1, r23
    3344:	e8 07       	cpc	r30, r24
    3346:	f9 07       	cpc	r31, r25
    3348:	c0 f0       	brcs	.+48     	; 0x337a <__fp_cmp+0x46>
    334a:	12 16       	cp	r1, r18
    334c:	13 06       	cpc	r1, r19
    334e:	e4 07       	cpc	r30, r20
    3350:	f5 07       	cpc	r31, r21
    3352:	98 f0       	brcs	.+38     	; 0x337a <__fp_cmp+0x46>
    3354:	62 1b       	sub	r22, r18
    3356:	73 0b       	sbc	r23, r19
    3358:	84 0b       	sbc	r24, r20
    335a:	95 0b       	sbc	r25, r21
    335c:	39 f4       	brne	.+14     	; 0x336c <__fp_cmp+0x38>
    335e:	0a 26       	eor	r0, r26
    3360:	61 f0       	breq	.+24     	; 0x337a <__fp_cmp+0x46>
    3362:	23 2b       	or	r18, r19
    3364:	24 2b       	or	r18, r20
    3366:	25 2b       	or	r18, r21
    3368:	21 f4       	brne	.+8      	; 0x3372 <__fp_cmp+0x3e>
    336a:	08 95       	ret
    336c:	0a 26       	eor	r0, r26
    336e:	09 f4       	brne	.+2      	; 0x3372 <__fp_cmp+0x3e>
    3370:	a1 40       	sbci	r26, 0x01	; 1
    3372:	a6 95       	lsr	r26
    3374:	8f ef       	ldi	r24, 0xFF	; 255
    3376:	81 1d       	adc	r24, r1
    3378:	81 1d       	adc	r24, r1
    337a:	08 95       	ret

0000337c <__fp_inf>:
    337c:	97 f9       	bld	r25, 7
    337e:	9f 67       	ori	r25, 0x7F	; 127
    3380:	80 e8       	ldi	r24, 0x80	; 128
    3382:	70 e0       	ldi	r23, 0x00	; 0
    3384:	60 e0       	ldi	r22, 0x00	; 0
    3386:	08 95       	ret

00003388 <__fp_nan>:
    3388:	9f ef       	ldi	r25, 0xFF	; 255
    338a:	80 ec       	ldi	r24, 0xC0	; 192
    338c:	08 95       	ret

0000338e <__fp_powser>:
    338e:	df 93       	push	r29
    3390:	cf 93       	push	r28
    3392:	1f 93       	push	r17
    3394:	0f 93       	push	r16
    3396:	ff 92       	push	r15
    3398:	ef 92       	push	r14
    339a:	df 92       	push	r13
    339c:	7b 01       	movw	r14, r22
    339e:	8c 01       	movw	r16, r24
    33a0:	68 94       	set
    33a2:	06 c0       	rjmp	.+12     	; 0x33b0 <__fp_powser+0x22>
    33a4:	da 2e       	mov	r13, r26
    33a6:	ef 01       	movw	r28, r30
    33a8:	0e 94 95 1a 	call	0x352a	; 0x352a <__mulsf3x>
    33ac:	fe 01       	movw	r30, r28
    33ae:	e8 94       	clt
    33b0:	a5 91       	lpm	r26, Z+
    33b2:	25 91       	lpm	r18, Z+
    33b4:	35 91       	lpm	r19, Z+
    33b6:	45 91       	lpm	r20, Z+
    33b8:	55 91       	lpm	r21, Z+
    33ba:	a6 f3       	brts	.-24     	; 0x33a4 <__fp_powser+0x16>
    33bc:	ef 01       	movw	r28, r30
    33be:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__addsf3x>
    33c2:	fe 01       	movw	r30, r28
    33c4:	97 01       	movw	r18, r14
    33c6:	a8 01       	movw	r20, r16
    33c8:	da 94       	dec	r13
    33ca:	69 f7       	brne	.-38     	; 0x33a6 <__fp_powser+0x18>
    33cc:	df 90       	pop	r13
    33ce:	ef 90       	pop	r14
    33d0:	ff 90       	pop	r15
    33d2:	0f 91       	pop	r16
    33d4:	1f 91       	pop	r17
    33d6:	cf 91       	pop	r28
    33d8:	df 91       	pop	r29
    33da:	08 95       	ret

000033dc <__fp_pscA>:
    33dc:	00 24       	eor	r0, r0
    33de:	0a 94       	dec	r0
    33e0:	16 16       	cp	r1, r22
    33e2:	17 06       	cpc	r1, r23
    33e4:	18 06       	cpc	r1, r24
    33e6:	09 06       	cpc	r0, r25
    33e8:	08 95       	ret

000033ea <__fp_pscB>:
    33ea:	00 24       	eor	r0, r0
    33ec:	0a 94       	dec	r0
    33ee:	12 16       	cp	r1, r18
    33f0:	13 06       	cpc	r1, r19
    33f2:	14 06       	cpc	r1, r20
    33f4:	05 06       	cpc	r0, r21
    33f6:	08 95       	ret
    33f8:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__fp_nan>

000033fc <__fp_rempio2>:
    33fc:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__fp_splitA>
    3400:	d8 f3       	brcs	.-10     	; 0x33f8 <__fp_pscB+0xe>
    3402:	e8 94       	clt
    3404:	e0 e0       	ldi	r30, 0x00	; 0
    3406:	bb 27       	eor	r27, r27
    3408:	9f 57       	subi	r25, 0x7F	; 127
    340a:	f0 f0       	brcs	.+60     	; 0x3448 <__fp_rempio2+0x4c>
    340c:	2a ed       	ldi	r18, 0xDA	; 218
    340e:	3f e0       	ldi	r19, 0x0F	; 15
    3410:	49 ec       	ldi	r20, 0xC9	; 201
    3412:	06 c0       	rjmp	.+12     	; 0x3420 <__fp_rempio2+0x24>
    3414:	ee 0f       	add	r30, r30
    3416:	bb 0f       	add	r27, r27
    3418:	66 1f       	adc	r22, r22
    341a:	77 1f       	adc	r23, r23
    341c:	88 1f       	adc	r24, r24
    341e:	28 f0       	brcs	.+10     	; 0x342a <__fp_rempio2+0x2e>
    3420:	b2 3a       	cpi	r27, 0xA2	; 162
    3422:	62 07       	cpc	r22, r18
    3424:	73 07       	cpc	r23, r19
    3426:	84 07       	cpc	r24, r20
    3428:	28 f0       	brcs	.+10     	; 0x3434 <__fp_rempio2+0x38>
    342a:	b2 5a       	subi	r27, 0xA2	; 162
    342c:	62 0b       	sbc	r22, r18
    342e:	73 0b       	sbc	r23, r19
    3430:	84 0b       	sbc	r24, r20
    3432:	e3 95       	inc	r30
    3434:	9a 95       	dec	r25
    3436:	72 f7       	brpl	.-36     	; 0x3414 <__fp_rempio2+0x18>
    3438:	80 38       	cpi	r24, 0x80	; 128
    343a:	30 f4       	brcc	.+12     	; 0x3448 <__fp_rempio2+0x4c>
    343c:	9a 95       	dec	r25
    343e:	bb 0f       	add	r27, r27
    3440:	66 1f       	adc	r22, r22
    3442:	77 1f       	adc	r23, r23
    3444:	88 1f       	adc	r24, r24
    3446:	d2 f7       	brpl	.-12     	; 0x343c <__fp_rempio2+0x40>
    3448:	90 48       	sbci	r25, 0x80	; 128
    344a:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__fp_mpack_finite>

0000344e <__fp_round>:
    344e:	09 2e       	mov	r0, r25
    3450:	03 94       	inc	r0
    3452:	00 0c       	add	r0, r0
    3454:	11 f4       	brne	.+4      	; 0x345a <__fp_round+0xc>
    3456:	88 23       	and	r24, r24
    3458:	52 f0       	brmi	.+20     	; 0x346e <__fp_round+0x20>
    345a:	bb 0f       	add	r27, r27
    345c:	40 f4       	brcc	.+16     	; 0x346e <__fp_round+0x20>
    345e:	bf 2b       	or	r27, r31
    3460:	11 f4       	brne	.+4      	; 0x3466 <__fp_round+0x18>
    3462:	60 ff       	sbrs	r22, 0
    3464:	04 c0       	rjmp	.+8      	; 0x346e <__fp_round+0x20>
    3466:	6f 5f       	subi	r22, 0xFF	; 255
    3468:	7f 4f       	sbci	r23, 0xFF	; 255
    346a:	8f 4f       	sbci	r24, 0xFF	; 255
    346c:	9f 4f       	sbci	r25, 0xFF	; 255
    346e:	08 95       	ret

00003470 <__fp_sinus>:
    3470:	ef 93       	push	r30
    3472:	e0 ff       	sbrs	r30, 0
    3474:	07 c0       	rjmp	.+14     	; 0x3484 <__fp_sinus+0x14>
    3476:	a2 ea       	ldi	r26, 0xA2	; 162
    3478:	2a ed       	ldi	r18, 0xDA	; 218
    347a:	3f e0       	ldi	r19, 0x0F	; 15
    347c:	49 ec       	ldi	r20, 0xC9	; 201
    347e:	5f eb       	ldi	r21, 0xBF	; 191
    3480:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__addsf3x>
    3484:	0e 94 27 1a 	call	0x344e	; 0x344e <__fp_round>
    3488:	0f 90       	pop	r0
    348a:	03 94       	inc	r0
    348c:	01 fc       	sbrc	r0, 1
    348e:	90 58       	subi	r25, 0x80	; 128
    3490:	e1 e0       	ldi	r30, 0x01	; 1
    3492:	f1 e0       	ldi	r31, 0x01	; 1
    3494:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <__fp_powsodd>

00003498 <__fp_split3>:
    3498:	57 fd       	sbrc	r21, 7
    349a:	90 58       	subi	r25, 0x80	; 128
    349c:	44 0f       	add	r20, r20
    349e:	55 1f       	adc	r21, r21
    34a0:	59 f0       	breq	.+22     	; 0x34b8 <__fp_splitA+0x10>
    34a2:	5f 3f       	cpi	r21, 0xFF	; 255
    34a4:	71 f0       	breq	.+28     	; 0x34c2 <__fp_splitA+0x1a>
    34a6:	47 95       	ror	r20

000034a8 <__fp_splitA>:
    34a8:	88 0f       	add	r24, r24
    34aa:	97 fb       	bst	r25, 7
    34ac:	99 1f       	adc	r25, r25
    34ae:	61 f0       	breq	.+24     	; 0x34c8 <__fp_splitA+0x20>
    34b0:	9f 3f       	cpi	r25, 0xFF	; 255
    34b2:	79 f0       	breq	.+30     	; 0x34d2 <__fp_splitA+0x2a>
    34b4:	87 95       	ror	r24
    34b6:	08 95       	ret
    34b8:	12 16       	cp	r1, r18
    34ba:	13 06       	cpc	r1, r19
    34bc:	14 06       	cpc	r1, r20
    34be:	55 1f       	adc	r21, r21
    34c0:	f2 cf       	rjmp	.-28     	; 0x34a6 <__fp_split3+0xe>
    34c2:	46 95       	lsr	r20
    34c4:	f1 df       	rcall	.-30     	; 0x34a8 <__fp_splitA>
    34c6:	08 c0       	rjmp	.+16     	; 0x34d8 <__fp_splitA+0x30>
    34c8:	16 16       	cp	r1, r22
    34ca:	17 06       	cpc	r1, r23
    34cc:	18 06       	cpc	r1, r24
    34ce:	99 1f       	adc	r25, r25
    34d0:	f1 cf       	rjmp	.-30     	; 0x34b4 <__fp_splitA+0xc>
    34d2:	86 95       	lsr	r24
    34d4:	71 05       	cpc	r23, r1
    34d6:	61 05       	cpc	r22, r1
    34d8:	08 94       	sec
    34da:	08 95       	ret

000034dc <__fp_zero>:
    34dc:	e8 94       	clt

000034de <__fp_szero>:
    34de:	bb 27       	eor	r27, r27
    34e0:	66 27       	eor	r22, r22
    34e2:	77 27       	eor	r23, r23
    34e4:	cb 01       	movw	r24, r22
    34e6:	97 f9       	bld	r25, 7
    34e8:	08 95       	ret

000034ea <__gesf2>:
    34ea:	0e 94 9a 19 	call	0x3334	; 0x3334 <__fp_cmp>
    34ee:	08 f4       	brcc	.+2      	; 0x34f2 <__gesf2+0x8>
    34f0:	8f ef       	ldi	r24, 0xFF	; 255
    34f2:	08 95       	ret

000034f4 <inverse>:
    34f4:	9b 01       	movw	r18, r22
    34f6:	ac 01       	movw	r20, r24
    34f8:	60 e0       	ldi	r22, 0x00	; 0
    34fa:	70 e0       	ldi	r23, 0x00	; 0
    34fc:	80 e8       	ldi	r24, 0x80	; 128
    34fe:	9f e3       	ldi	r25, 0x3F	; 63
    3500:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__divsf3>

00003504 <__mulsf3>:
    3504:	0e 94 95 1a 	call	0x352a	; 0x352a <__mulsf3x>
    3508:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__fp_round>
    350c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__fp_pscA>
    3510:	38 f0       	brcs	.+14     	; 0x3520 <__mulsf3+0x1c>
    3512:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__fp_pscB>
    3516:	20 f0       	brcs	.+8      	; 0x3520 <__mulsf3+0x1c>
    3518:	95 23       	and	r25, r21
    351a:	11 f0       	breq	.+4      	; 0x3520 <__mulsf3+0x1c>
    351c:	0c 94 be 19 	jmp	0x337c	; 0x337c <__fp_inf>
    3520:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__fp_nan>
    3524:	11 24       	eor	r1, r1
    3526:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__fp_szero>

0000352a <__mulsf3x>:
    352a:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__fp_split3>
    352e:	70 f3       	brcs	.-36     	; 0x350c <__mulsf3+0x8>

00003530 <__mulsf3_pse>:
    3530:	95 9f       	mul	r25, r21
    3532:	c1 f3       	breq	.-16     	; 0x3524 <__mulsf3+0x20>
    3534:	95 0f       	add	r25, r21
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	55 1f       	adc	r21, r21
    353a:	62 9f       	mul	r22, r18
    353c:	f0 01       	movw	r30, r0
    353e:	72 9f       	mul	r23, r18
    3540:	bb 27       	eor	r27, r27
    3542:	f0 0d       	add	r31, r0
    3544:	b1 1d       	adc	r27, r1
    3546:	63 9f       	mul	r22, r19
    3548:	aa 27       	eor	r26, r26
    354a:	f0 0d       	add	r31, r0
    354c:	b1 1d       	adc	r27, r1
    354e:	aa 1f       	adc	r26, r26
    3550:	64 9f       	mul	r22, r20
    3552:	66 27       	eor	r22, r22
    3554:	b0 0d       	add	r27, r0
    3556:	a1 1d       	adc	r26, r1
    3558:	66 1f       	adc	r22, r22
    355a:	82 9f       	mul	r24, r18
    355c:	22 27       	eor	r18, r18
    355e:	b0 0d       	add	r27, r0
    3560:	a1 1d       	adc	r26, r1
    3562:	62 1f       	adc	r22, r18
    3564:	73 9f       	mul	r23, r19
    3566:	b0 0d       	add	r27, r0
    3568:	a1 1d       	adc	r26, r1
    356a:	62 1f       	adc	r22, r18
    356c:	83 9f       	mul	r24, r19
    356e:	a0 0d       	add	r26, r0
    3570:	61 1d       	adc	r22, r1
    3572:	22 1f       	adc	r18, r18
    3574:	74 9f       	mul	r23, r20
    3576:	33 27       	eor	r19, r19
    3578:	a0 0d       	add	r26, r0
    357a:	61 1d       	adc	r22, r1
    357c:	23 1f       	adc	r18, r19
    357e:	84 9f       	mul	r24, r20
    3580:	60 0d       	add	r22, r0
    3582:	21 1d       	adc	r18, r1
    3584:	82 2f       	mov	r24, r18
    3586:	76 2f       	mov	r23, r22
    3588:	6a 2f       	mov	r22, r26
    358a:	11 24       	eor	r1, r1
    358c:	9f 57       	subi	r25, 0x7F	; 127
    358e:	50 40       	sbci	r21, 0x00	; 0
    3590:	9a f0       	brmi	.+38     	; 0x35b8 <__mulsf3_pse+0x88>
    3592:	f1 f0       	breq	.+60     	; 0x35d0 <__mulsf3_pse+0xa0>
    3594:	88 23       	and	r24, r24
    3596:	4a f0       	brmi	.+18     	; 0x35aa <__mulsf3_pse+0x7a>
    3598:	ee 0f       	add	r30, r30
    359a:	ff 1f       	adc	r31, r31
    359c:	bb 1f       	adc	r27, r27
    359e:	66 1f       	adc	r22, r22
    35a0:	77 1f       	adc	r23, r23
    35a2:	88 1f       	adc	r24, r24
    35a4:	91 50       	subi	r25, 0x01	; 1
    35a6:	50 40       	sbci	r21, 0x00	; 0
    35a8:	a9 f7       	brne	.-22     	; 0x3594 <__mulsf3_pse+0x64>
    35aa:	9e 3f       	cpi	r25, 0xFE	; 254
    35ac:	51 05       	cpc	r21, r1
    35ae:	80 f0       	brcs	.+32     	; 0x35d0 <__mulsf3_pse+0xa0>
    35b0:	0c 94 be 19 	jmp	0x337c	; 0x337c <__fp_inf>
    35b4:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__fp_szero>
    35b8:	5f 3f       	cpi	r21, 0xFF	; 255
    35ba:	e4 f3       	brlt	.-8      	; 0x35b4 <__mulsf3_pse+0x84>
    35bc:	98 3e       	cpi	r25, 0xE8	; 232
    35be:	d4 f3       	brlt	.-12     	; 0x35b4 <__mulsf3_pse+0x84>
    35c0:	86 95       	lsr	r24
    35c2:	77 95       	ror	r23
    35c4:	67 95       	ror	r22
    35c6:	b7 95       	ror	r27
    35c8:	f7 95       	ror	r31
    35ca:	e7 95       	ror	r30
    35cc:	9f 5f       	subi	r25, 0xFF	; 255
    35ce:	c1 f7       	brne	.-16     	; 0x35c0 <__mulsf3_pse+0x90>
    35d0:	fe 2b       	or	r31, r30
    35d2:	88 0f       	add	r24, r24
    35d4:	91 1d       	adc	r25, r1
    35d6:	96 95       	lsr	r25
    35d8:	87 95       	ror	r24
    35da:	97 f9       	bld	r25, 7
    35dc:	08 95       	ret

000035de <sin>:
    35de:	9f 93       	push	r25
    35e0:	0e 94 fe 19 	call	0x33fc	; 0x33fc <__fp_rempio2>
    35e4:	0f 90       	pop	r0
    35e6:	07 fc       	sbrc	r0, 7
    35e8:	ee 5f       	subi	r30, 0xFE	; 254
    35ea:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__fp_sinus>
    35ee:	19 f4       	brne	.+6      	; 0x35f6 <sin+0x18>
    35f0:	16 f4       	brtc	.+4      	; 0x35f6 <sin+0x18>
    35f2:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__fp_nan>
    35f6:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <__fp_mpack>

000035fa <sqrt>:
    35fa:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__fp_splitA>
    35fe:	b8 f3       	brcs	.-18     	; 0x35ee <sin+0x10>
    3600:	99 23       	and	r25, r25
    3602:	c9 f3       	breq	.-14     	; 0x35f6 <sin+0x18>
    3604:	b6 f3       	brts	.-20     	; 0x35f2 <sin+0x14>
    3606:	9f 57       	subi	r25, 0x7F	; 127
    3608:	55 0b       	sbc	r21, r21
    360a:	87 ff       	sbrs	r24, 7
    360c:	0e 94 4f 1b 	call	0x369e	; 0x369e <__fp_norm2>
    3610:	00 24       	eor	r0, r0
    3612:	a0 e6       	ldi	r26, 0x60	; 96
    3614:	40 ea       	ldi	r20, 0xA0	; 160
    3616:	90 01       	movw	r18, r0
    3618:	80 58       	subi	r24, 0x80	; 128
    361a:	56 95       	lsr	r21
    361c:	97 95       	ror	r25
    361e:	28 f4       	brcc	.+10     	; 0x362a <sqrt+0x30>
    3620:	80 5c       	subi	r24, 0xC0	; 192
    3622:	66 0f       	add	r22, r22
    3624:	77 1f       	adc	r23, r23
    3626:	88 1f       	adc	r24, r24
    3628:	20 f0       	brcs	.+8      	; 0x3632 <sqrt+0x38>
    362a:	26 17       	cp	r18, r22
    362c:	37 07       	cpc	r19, r23
    362e:	48 07       	cpc	r20, r24
    3630:	30 f4       	brcc	.+12     	; 0x363e <sqrt+0x44>
    3632:	62 1b       	sub	r22, r18
    3634:	73 0b       	sbc	r23, r19
    3636:	84 0b       	sbc	r24, r20
    3638:	20 29       	or	r18, r0
    363a:	31 29       	or	r19, r1
    363c:	4a 2b       	or	r20, r26
    363e:	a6 95       	lsr	r26
    3640:	17 94       	ror	r1
    3642:	07 94       	ror	r0
    3644:	20 25       	eor	r18, r0
    3646:	31 25       	eor	r19, r1
    3648:	4a 27       	eor	r20, r26
    364a:	58 f7       	brcc	.-42     	; 0x3622 <sqrt+0x28>
    364c:	66 0f       	add	r22, r22
    364e:	77 1f       	adc	r23, r23
    3650:	88 1f       	adc	r24, r24
    3652:	20 f0       	brcs	.+8      	; 0x365c <sqrt+0x62>
    3654:	26 17       	cp	r18, r22
    3656:	37 07       	cpc	r19, r23
    3658:	48 07       	cpc	r20, r24
    365a:	30 f4       	brcc	.+12     	; 0x3668 <sqrt+0x6e>
    365c:	62 0b       	sbc	r22, r18
    365e:	73 0b       	sbc	r23, r19
    3660:	84 0b       	sbc	r24, r20
    3662:	20 0d       	add	r18, r0
    3664:	31 1d       	adc	r19, r1
    3666:	41 1d       	adc	r20, r1
    3668:	a0 95       	com	r26
    366a:	81 f7       	brne	.-32     	; 0x364c <sqrt+0x52>
    366c:	b9 01       	movw	r22, r18
    366e:	84 2f       	mov	r24, r20
    3670:	91 58       	subi	r25, 0x81	; 129
    3672:	88 0f       	add	r24, r24
    3674:	96 95       	lsr	r25
    3676:	87 95       	ror	r24
    3678:	08 95       	ret

0000367a <square>:
    367a:	9b 01       	movw	r18, r22
    367c:	ac 01       	movw	r20, r24
    367e:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__mulsf3>

00003682 <__fp_mpack>:
    3682:	9f 3f       	cpi	r25, 0xFF	; 255
    3684:	31 f0       	breq	.+12     	; 0x3692 <__fp_mpack_finite+0xc>

00003686 <__fp_mpack_finite>:
    3686:	91 50       	subi	r25, 0x01	; 1
    3688:	20 f4       	brcc	.+8      	; 0x3692 <__fp_mpack_finite+0xc>
    368a:	87 95       	ror	r24
    368c:	77 95       	ror	r23
    368e:	67 95       	ror	r22
    3690:	b7 95       	ror	r27
    3692:	88 0f       	add	r24, r24
    3694:	91 1d       	adc	r25, r1
    3696:	96 95       	lsr	r25
    3698:	87 95       	ror	r24
    369a:	97 f9       	bld	r25, 7
    369c:	08 95       	ret

0000369e <__fp_norm2>:
    369e:	91 50       	subi	r25, 0x01	; 1
    36a0:	50 40       	sbci	r21, 0x00	; 0
    36a2:	66 0f       	add	r22, r22
    36a4:	77 1f       	adc	r23, r23
    36a6:	88 1f       	adc	r24, r24
    36a8:	d2 f7       	brpl	.-12     	; 0x369e <__fp_norm2>
    36aa:	08 95       	ret

000036ac <__fp_powsodd>:
    36ac:	9f 93       	push	r25
    36ae:	8f 93       	push	r24
    36b0:	7f 93       	push	r23
    36b2:	6f 93       	push	r22
    36b4:	ff 93       	push	r31
    36b6:	ef 93       	push	r30
    36b8:	9b 01       	movw	r18, r22
    36ba:	ac 01       	movw	r20, r24
    36bc:	0e 94 82 1a 	call	0x3504	; 0x3504 <__mulsf3>
    36c0:	ef 91       	pop	r30
    36c2:	ff 91       	pop	r31
    36c4:	0e 94 c7 19 	call	0x338e	; 0x338e <__fp_powser>
    36c8:	2f 91       	pop	r18
    36ca:	3f 91       	pop	r19
    36cc:	4f 91       	pop	r20
    36ce:	5f 91       	pop	r21
    36d0:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__mulsf3>

000036d4 <__tablejump2__>:
    36d4:	ee 0f       	add	r30, r30
    36d6:	ff 1f       	adc	r31, r31
    36d8:	05 90       	lpm	r0, Z+
    36da:	f4 91       	lpm	r31, Z
    36dc:	e0 2d       	mov	r30, r0
    36de:	09 94       	ijmp

000036e0 <__itoa_ncheck>:
    36e0:	bb 27       	eor	r27, r27
    36e2:	4a 30       	cpi	r20, 0x0A	; 10
    36e4:	31 f4       	brne	.+12     	; 0x36f2 <__itoa_ncheck+0x12>
    36e6:	99 23       	and	r25, r25
    36e8:	22 f4       	brpl	.+8      	; 0x36f2 <__itoa_ncheck+0x12>
    36ea:	bd e2       	ldi	r27, 0x2D	; 45
    36ec:	90 95       	com	r25
    36ee:	81 95       	neg	r24
    36f0:	9f 4f       	sbci	r25, 0xFF	; 255
    36f2:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__utoa_common>

000036f6 <__utoa_ncheck>:
    36f6:	bb 27       	eor	r27, r27

000036f8 <__utoa_common>:
    36f8:	fb 01       	movw	r30, r22
    36fa:	55 27       	eor	r21, r21
    36fc:	aa 27       	eor	r26, r26
    36fe:	88 0f       	add	r24, r24
    3700:	99 1f       	adc	r25, r25
    3702:	aa 1f       	adc	r26, r26
    3704:	a4 17       	cp	r26, r20
    3706:	10 f0       	brcs	.+4      	; 0x370c <__utoa_common+0x14>
    3708:	a4 1b       	sub	r26, r20
    370a:	83 95       	inc	r24
    370c:	50 51       	subi	r21, 0x10	; 16
    370e:	b9 f7       	brne	.-18     	; 0x36fe <__utoa_common+0x6>
    3710:	a0 5d       	subi	r26, 0xD0	; 208
    3712:	aa 33       	cpi	r26, 0x3A	; 58
    3714:	08 f0       	brcs	.+2      	; 0x3718 <__utoa_common+0x20>
    3716:	a9 5d       	subi	r26, 0xD9	; 217
    3718:	a1 93       	st	Z+, r26
    371a:	00 97       	sbiw	r24, 0x00	; 0
    371c:	79 f7       	brne	.-34     	; 0x36fc <__utoa_common+0x4>
    371e:	b1 11       	cpse	r27, r1
    3720:	b1 93       	st	Z+, r27
    3722:	11 92       	st	Z+, r1
    3724:	cb 01       	movw	r24, r22
    3726:	0c 94 95 1b 	jmp	0x372a	; 0x372a <strrev>

0000372a <strrev>:
    372a:	dc 01       	movw	r26, r24
    372c:	fc 01       	movw	r30, r24
    372e:	67 2f       	mov	r22, r23
    3730:	71 91       	ld	r23, Z+
    3732:	77 23       	and	r23, r23
    3734:	e1 f7       	brne	.-8      	; 0x372e <strrev+0x4>
    3736:	32 97       	sbiw	r30, 0x02	; 2
    3738:	04 c0       	rjmp	.+8      	; 0x3742 <strrev+0x18>
    373a:	7c 91       	ld	r23, X
    373c:	6d 93       	st	X+, r22
    373e:	70 83       	st	Z, r23
    3740:	62 91       	ld	r22, -Z
    3742:	ae 17       	cp	r26, r30
    3744:	bf 07       	cpc	r27, r31
    3746:	c8 f3       	brcs	.-14     	; 0x373a <strrev+0x10>
    3748:	08 95       	ret

0000374a <_exit>:
    374a:	f8 94       	cli

0000374c <__stop_program>:
    374c:	ff cf       	rjmp	.-2      	; 0x374c <__stop_program>
