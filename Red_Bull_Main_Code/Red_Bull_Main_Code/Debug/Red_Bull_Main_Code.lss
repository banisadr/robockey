
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00002f72  00003006  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800154  00800154  0000305a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000305a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000308c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  000030cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003038  00000000  00000000  000033f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e3e  00000000  00000000  0000642c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000139a  00000000  00000000  0000726a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ae0  00000000  00000000  00008604  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c10  00000000  00000000  000090e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d8e  00000000  00000000  00009cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0000da82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_3>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__vector_10>
      2c:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <__vector_11>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_17>
      48:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__vector_18>
      4c:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__vector_19>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	e5 08       	sbc	r14, r5
      ae:	e8 08       	sbc	r14, r8
      b0:	eb 08       	sbc	r14, r11
      b2:	f6 08       	sbc	r15, r6
      b4:	01 09       	sbc	r16, r1
      b6:	09 09       	sbc	r16, r9
      b8:	04 09       	sbc	r16, r4
      ba:	07 09       	sbc	r16, r7
      bc:	92 12       	cpse	r9, r18
      be:	b2 12       	cpse	r11, r18
      c0:	d2 12       	cpse	r13, r18
      c2:	f2 12       	cpse	r15, r18
      c4:	12 13       	cpse	r17, r18
      c6:	32 13       	cpse	r19, r18
      c8:	52 13       	cpse	r21, r18
      ca:	72 13       	cpse	r23, r18
      cc:	92 13       	cpse	r25, r18
      ce:	b2 13       	cpse	r27, r18
      d0:	d2 13       	cpse	r29, r18
      d2:	f2 13       	cpse	r31, r18
      d4:	08 4a       	sbci	r16, 0xA8	; 168
      d6:	d7 3b       	cpi	r29, 0xB7	; 183
      d8:	3b ce       	rjmp	.-906    	; 0xfffffd50 <__eeprom_end+0xff7efd50>
      da:	01 6e       	ori	r16, 0xE1	; 225
      dc:	84 bc       	out	0x24, r8	; 36
      de:	bf fd       	.word	0xfdbf	; ????
      e0:	c1 2f       	mov	r28, r17
      e2:	3d 6c       	ori	r19, 0xCD	; 205
      e4:	74 31       	cpi	r23, 0x14	; 20
      e6:	9a bd       	out	0x2a, r25	; 42
      e8:	56 83       	std	Z+6, r21	; 0x06
      ea:	3d da       	rcall	.-2950   	; 0xfffff566 <__eeprom_end+0xff7ef566>
      ec:	3d 00       	.word	0x003d	; ????
      ee:	c7 7f       	andi	r28, 0xF7	; 247
      f0:	11 be       	out	0x31, r1	; 49
      f2:	d9 e4       	ldi	r29, 0x49	; 73
      f4:	bb 4c       	sbci	r27, 0xCB	; 203
      f6:	3e 91       	ld	r19, -X
      f8:	6b aa       	std	Y+51, r6	; 0x33
      fa:	aa be       	out	0x3a, r10	; 58
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 00       	.word	0x003f	; ????

00000120 <__trampolines_end>:
     120:	00 01       	movw	r0, r0
     122:	00 00       	nop
     124:	b7 01       	movw	r22, r14
     126:	12 00       	.word	0x0012	; ????
     128:	02 00       	.word	0x0002	; ????
     12a:	00 74       	andi	r16, 0x40	; 64
     12c:	01 43       	sbci	r16, 0x31	; 49
     12e:	00 03       	mulsu	r16, r16
     130:	00 00       	nop
     132:	70 01       	movw	r14, r0
     134:	04 01       	movw	r0, r8
     136:	03 09       	sbc	r16, r3
     138:	04 5c       	subi	r16, 0xC4	; 196
     13a:	01 12       	cpse	r0, r17
     13c:	02 03       	mulsu	r16, r18
     13e:	09 04       	cpc	r0, r9
     140:	54 01       	movw	r10, r8
     142:	06 03       	mulsu	r16, r22
     144:	03 09       	sbc	r16, r3
     146:	04 4a       	sbci	r16, 0xA4	; 164
     148:	01 08       	sbc	r0, r1

0000014a <string3>:
     14a:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000154 <string2>:
     154:	06 03 4d 00 32 00 00 00                             ..M.2...

0000015c <string1>:
     15c:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     16c:	65 00 00 00                                         e...

00000170 <string0>:
     170:	04 03 09 04                                         ....

00000174 <config1_descriptor>:
     174:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     184:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     194:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1a4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1b4:	40 00 00                                            @..

000001b7 <device_descriptor>:
     1b7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1c7:	03 01                                               ..

000001c9 <endpoint_config_table>:
     1c9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	da e0       	ldi	r29, 0x0A	; 10
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	e2 e7       	ldi	r30, 0x72	; 114
     1e8:	ff e2       	ldi	r31, 0x2F	; 47
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a4 35       	cpi	r26, 0x54	; 84
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	a4 e5       	ldi	r26, 0x54	; 84
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	aa 3d       	cpi	r26, 0xDA	; 218
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 95 08 	call	0x112a	; 0x112a <main>
     20a:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(void) {
     212:	0f 93       	push	r16
     214:	1f 93       	push	r17
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
/************************************************************
Initialization of Pins and System Clock
************************************************************/

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     21a:	e1 e6       	ldi	r30, 0x61	; 97
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 e8       	ldi	r24, 0x80	; 128
     220:	80 83       	st	Z, r24
     222:	10 82       	st	Z, r1

	// Dissable JTAG
	m_disableJTAG(); // turn off JTAG port and allow access to F4-F7 as GPIO
     224:	85 bf       	out	0x35, r24	; 53
     226:	85 bf       	out	0x35, r24	; 53
	
	//Set to Input
	clear(DDRD,0); // D0
     228:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     22a:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     22c:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     22e:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     230:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     232:	23 9a       	sbi	0x04, 3	; 4
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     234:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     236:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     238:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     23a:	2b 98       	cbi	0x05, 3	; 5

/************************************************************
Setup Subsystems
************************************************************/

	m_bus_init();
     23c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <m_bus_init>
	while(!m_wii_open());
     240:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <m_wii_open>
     244:	88 23       	and	r24, r24
     246:	e1 f3       	breq	.-8      	; 0x240 <initialize_robockey+0x2e>
	sei();
     248:	78 94       	sei
	m_usb_init();
     24a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <m_usb_init>
	m_rf_open(CHANNEL,RXADDRESS_1,PACKET_LENGTH); // Configure mRF
     24e:	4a e0       	ldi	r20, 0x0A	; 10
     250:	60 e2       	ldi	r22, 0x20	; 32
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <m_rf_open>
/************************************************************
Timer1 Initialization for PWM Motor Control
************************************************************/

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     258:	e1 e8       	ldi	r30, 0x81	; 129
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	8b 7f       	andi	r24, 0xFB	; 251
     260:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     262:	80 81       	ld	r24, Z
     264:	8d 7f       	andi	r24, 0xFD	; 253
     266:	80 83       	st	Z, r24
	clear(TCCR1B,CS10);
     268:	80 81       	ld	r24, Z
     26a:	8e 7f       	andi	r24, 0xFE	; 254
     26c:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     26e:	80 81       	ld	r24, Z
     270:	8f 7e       	andi	r24, 0xEF	; 239
     272:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     274:	80 81       	ld	r24, Z
     276:	88 60       	ori	r24, 0x08	; 8
     278:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     27a:	e0 e8       	ldi	r30, 0x80	; 128
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	8d 7f       	andi	r24, 0xFD	; 253
     282:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     284:	80 81       	ld	r24, Z
     286:	8e 7f       	andi	r24, 0xFE	; 254
     288:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     28a:	80 81       	ld	r24, Z
     28c:	8f 7d       	andi	r24, 0xDF	; 223
     28e:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     290:	80 81       	ld	r24, Z
     292:	8f 7e       	andi	r24, 0xEF	; 239
     294:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     296:	08 e8       	ldi	r16, 0x88	; 136
     298:	10 e0       	ldi	r17, 0x00	; 0
     29a:	c0 e8       	ldi	r28, 0x80	; 128
     29c:	de e3       	ldi	r29, 0x3E	; 62
     29e:	f8 01       	movw	r30, r16
     2a0:	d1 83       	std	Z+1, r29	; 0x01
     2a2:	c0 83       	st	Z, r28
	OCR1B = (float)OCR1A*0.1;
     2a4:	60 81       	ld	r22, Z
     2a6:	71 81       	ldd	r23, Z+1	; 0x01
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__floatunsisf>
     2b0:	2d ec       	ldi	r18, 0xCD	; 205
     2b2:	3c ec       	ldi	r19, 0xCC	; 204
     2b4:	4c ec       	ldi	r20, 0xCC	; 204
     2b6:	5d e3       	ldi	r21, 0x3D	; 61
     2b8:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     2bc:	0e 94 75 15 	call	0x2aea	; 0x2aea <__fixunssfsi>
     2c0:	70 93 8b 00 	sts	0x008B, r23
     2c4:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     2c8:	f8 01       	movw	r30, r16
     2ca:	60 81       	ld	r22, Z
     2cc:	71 81       	ldd	r23, Z+1	; 0x01
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__floatunsisf>
     2d6:	2d ec       	ldi	r18, 0xCD	; 205
     2d8:	3c ec       	ldi	r19, 0xCC	; 204
     2da:	4c ec       	ldi	r20, 0xCC	; 204
     2dc:	5d e3       	ldi	r21, 0x3D	; 61
     2de:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     2e2:	0e 94 75 15 	call	0x2aea	; 0x2aea <__fixunssfsi>
     2e6:	70 93 8d 00 	sts	0x008D, r23
     2ea:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     2ee:	ef e6       	ldi	r30, 0x6F	; 111
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	80 81       	ld	r24, Z
     2f4:	82 60       	ori	r24, 0x02	; 2
     2f6:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     2f8:	80 81       	ld	r24, Z
     2fa:	84 60       	ori	r24, 0x04	; 4
     2fc:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     2fe:	80 81       	ld	r24, Z
     300:	88 60       	ori	r24, 0x08	; 8
     302:	80 83       	st	Z, r24

/************************************************************
Timer3 Initialization for fixed timestep calculations
************************************************************/

	clear(TCCR3B,CS32); // prescale /1
     304:	e1 e9       	ldi	r30, 0x91	; 145
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	8b 7f       	andi	r24, 0xFB	; 251
     30c:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     30e:	80 81       	ld	r24, Z
     310:	8d 7f       	andi	r24, 0xFD	; 253
     312:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     314:	80 81       	ld	r24, Z
     316:	81 60       	ori	r24, 0x01	; 1
     318:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     31a:	80 81       	ld	r24, Z
     31c:	8f 7e       	andi	r24, 0xEF	; 239
     31e:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     320:	80 81       	ld	r24, Z
     322:	88 60       	ori	r24, 0x08	; 8
     324:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     326:	e0 e9       	ldi	r30, 0x90	; 144
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	80 81       	ld	r24, Z
     32c:	8d 7f       	andi	r24, 0xFD	; 253
     32e:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     330:	80 81       	ld	r24, Z
     332:	8e 7f       	andi	r24, 0xFE	; 254
     334:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     336:	d0 93 99 00 	sts	0x0099, r29
     33a:	c0 93 98 00 	sts	0x0098, r28

/************************************************************
Setup ADC
************************************************************/
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
     33e:	cc e7       	ldi	r28, 0x7C	; 124
     340:	d0 e0       	ldi	r29, 0x00	; 0
     342:	88 81       	ld	r24, Y
     344:	8f 77       	andi	r24, 0x7F	; 127
     346:	88 83       	st	Y, r24
	set(ADMUX,REFS0);
     348:	88 81       	ld	r24, Y
     34a:	80 64       	ori	r24, 0x40	; 64
     34c:	88 83       	st	Y, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
     34e:	ea e7       	ldi	r30, 0x7A	; 122
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	80 81       	ld	r24, Z
     354:	8b 7f       	andi	r24, 0xFB	; 251
     356:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     358:	80 81       	ld	r24, Z
     35a:	82 60       	ori	r24, 0x02	; 2
     35c:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     35e:	80 81       	ld	r24, Z
     360:	81 60       	ori	r24, 0x01	; 1
     362:	80 83       	st	Z, r24
	
	// Disable Digital input to:
	set(DIDR0,ADC0D); // ADC0
     364:	ae e7       	ldi	r26, 0x7E	; 126
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	8c 91       	ld	r24, X
     36a:	81 60       	ori	r24, 0x01	; 1
     36c:	8c 93       	st	X, r24
	set(DIDR0,ADC1D); // ADC1
     36e:	8c 91       	ld	r24, X
     370:	82 60       	ori	r24, 0x02	; 2
     372:	8c 93       	st	X, r24
	set(DIDR0,ADC4D); // ADC4
     374:	8c 91       	ld	r24, X
     376:	80 61       	ori	r24, 0x10	; 16
     378:	8c 93       	st	X, r24
	set(DIDR0,ADC5D); // ADC5
     37a:	8c 91       	ld	r24, X
     37c:	80 62       	ori	r24, 0x20	; 32
     37e:	8c 93       	st	X, r24
	set(DIDR0,ADC6D); // ADC6
     380:	8c 91       	ld	r24, X
     382:	80 64       	ori	r24, 0x40	; 64
     384:	8c 93       	st	X, r24
	set(DIDR0,ADC7D); // ADC7
     386:	8c 91       	ld	r24, X
     388:	80 68       	ori	r24, 0x80	; 128
     38a:	8c 93       	st	X, r24
	set(DIDR2,ADC8D); // ADC8
     38c:	ad e7       	ldi	r26, 0x7D	; 125
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	8c 91       	ld	r24, X
     392:	81 60       	ori	r24, 0x01	; 1
     394:	8c 93       	st	X, r24
	set(DIDR2,ADC9D); // ADC9
     396:	8c 91       	ld	r24, X
     398:	82 60       	ori	r24, 0x02	; 2
     39a:	8c 93       	st	X, r24
	set(DIDR2,ADC10D); // ADC10
     39c:	8c 91       	ld	r24, X
     39e:	84 60       	ori	r24, 0x04	; 4
     3a0:	8c 93       	st	X, r24
	set(DIDR2,ADC11D); // ADC11
     3a2:	8c 91       	ld	r24, X
     3a4:	88 60       	ori	r24, 0x08	; 8
     3a6:	8c 93       	st	X, r24
	set(DIDR2,ADC12D); // ADC812
     3a8:	8c 91       	ld	r24, X
     3aa:	80 61       	ori	r24, 0x10	; 16
     3ac:	8c 93       	st	X, r24
	set(DIDR2,ADC13D); // ADC13
     3ae:	8c 91       	ld	r24, X
     3b0:	80 62       	ori	r24, 0x20	; 32
     3b2:	8c 93       	st	X, r24

	
	// set(ADCSRA,ADIE); // Enable interrupt for when conversion is finished
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
     3b4:	80 81       	ld	r24, Z
     3b6:	8f 7d       	andi	r24, 0xDF	; 223
     3b8:	80 83       	st	Z, r24
	
	set(ADCSRB,MUX5); // Select ADC13 at pin B6
     3ba:	ab e7       	ldi	r26, 0x7B	; 123
     3bc:	b0 e0       	ldi	r27, 0x00	; 0
     3be:	8c 91       	ld	r24, X
     3c0:	80 62       	ori	r24, 0x20	; 32
     3c2:	8c 93       	st	X, r24
	set(ADMUX,MUX2); // Transistor 4
     3c4:	88 81       	ld	r24, Y
     3c6:	84 60       	ori	r24, 0x04	; 4
     3c8:	88 83       	st	Y, r24
	clear(ADMUX,MUX1);
     3ca:	88 81       	ld	r24, Y
     3cc:	8d 7f       	andi	r24, 0xFD	; 253
     3ce:	88 83       	st	Y, r24
	set(ADMUX,MUX0);
     3d0:	88 81       	ld	r24, Y
     3d2:	81 60       	ori	r24, 0x01	; 1
     3d4:	88 83       	st	Y, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
     3d6:	80 81       	ld	r24, Z
     3d8:	80 68       	ori	r24, 0x80	; 128
     3da:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
     3dc:	80 81       	ld	r24, Z
     3de:	80 64       	ori	r24, 0x40	; 64
     3e0:	80 83       	st	Z, r24
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     3ec:	82 30       	cpi	r24, 0x02	; 2
     3ee:	91 05       	cpc	r25, r1
     3f0:	f9 f0       	breq	.+62     	; 0x430 <distIndex+0x44>
     3f2:	2c f4       	brge	.+10     	; 0x3fe <distIndex+0x12>
     3f4:	00 97       	sbiw	r24, 0x00	; 0
     3f6:	51 f0       	breq	.+20     	; 0x40c <distIndex+0x20>
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	89 f0       	breq	.+34     	; 0x41e <distIndex+0x32>
     3fc:	42 c0       	rjmp	.+132    	; 0x482 <distIndex+0x96>
     3fe:	84 30       	cpi	r24, 0x04	; 4
     400:	91 05       	cpc	r25, r1
     402:	51 f1       	breq	.+84     	; 0x458 <distIndex+0x6c>
     404:	f4 f0       	brlt	.+60     	; 0x442 <distIndex+0x56>
     406:	05 97       	sbiw	r24, 0x05	; 5
     408:	91 f1       	breq	.+100    	; 0x46e <distIndex+0x82>
     40a:	3b c0       	rjmp	.+118    	; 0x482 <distIndex+0x96>
	{
		case 0 : 
			pointsUsed[0] = 0;
     40c:	e4 e5       	ldi	r30, 0x54	; 84
     40e:	f1 e0       	ldi	r31, 0x01	; 1
     410:	11 82       	std	Z+1, r1	; 0x01
     412:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	93 83       	std	Z+3, r25	; 0x03
     41a:	82 83       	std	Z+2, r24	; 0x02
			break;
     41c:	32 c0       	rjmp	.+100    	; 0x482 <distIndex+0x96>
			
		case 1 : 
			pointsUsed[0] = 0;
     41e:	e4 e5       	ldi	r30, 0x54	; 84
     420:	f1 e0       	ldi	r31, 0x01	; 1
     422:	11 82       	std	Z+1, r1	; 0x01
     424:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	93 83       	std	Z+3, r25	; 0x03
     42c:	82 83       	std	Z+2, r24	; 0x02
			break;
     42e:	29 c0       	rjmp	.+82     	; 0x482 <distIndex+0x96>
			
		case 2 : 
			pointsUsed[0] = 0;
     430:	e4 e5       	ldi	r30, 0x54	; 84
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	11 82       	std	Z+1, r1	; 0x01
     436:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	93 83       	std	Z+3, r25	; 0x03
     43e:	82 83       	std	Z+2, r24	; 0x02
			break;
     440:	20 c0       	rjmp	.+64     	; 0x482 <distIndex+0x96>
			
		case 3 : 
			pointsUsed[0] = 1;
     442:	e4 e5       	ldi	r30, 0x54	; 84
     444:	f1 e0       	ldi	r31, 0x01	; 1
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	91 83       	std	Z+1, r25	; 0x01
     44c:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	93 83       	std	Z+3, r25	; 0x03
     454:	82 83       	std	Z+2, r24	; 0x02
			break;
     456:	15 c0       	rjmp	.+42     	; 0x482 <distIndex+0x96>
			
		case 4 : 
			pointsUsed[0] = 1;
     458:	e4 e5       	ldi	r30, 0x54	; 84
     45a:	f1 e0       	ldi	r31, 0x01	; 1
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	93 83       	std	Z+3, r25	; 0x03
     46a:	82 83       	std	Z+2, r24	; 0x02
			break;
     46c:	0a c0       	rjmp	.+20     	; 0x482 <distIndex+0x96>
			
		case 5 :
			pointsUsed[0] = 2;
     46e:	e4 e5       	ldi	r30, 0x54	; 84
     470:	f1 e0       	ldi	r31, 0x01	; 1
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	91 83       	std	Z+1, r25	; 0x01
     478:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	93 83       	std	Z+3, r25	; 0x03
     480:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     482:	84 e5       	ldi	r24, 0x54	; 84
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	08 95       	ret

00000488 <orientationCalculationFour>:


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
     488:	2f 92       	push	r2
     48a:	3f 92       	push	r3
     48c:	4f 92       	push	r4
     48e:	5f 92       	push	r5
     490:	6f 92       	push	r6
     492:	7f 92       	push	r7
     494:	8f 92       	push	r8
     496:	9f 92       	push	r9
     498:	af 92       	push	r10
     49a:	bf 92       	push	r11
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <orientationCalculationFour+0x26>
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <orientationCalculationFour+0x28>
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	5c 01       	movw	r10, r24
     4b6:	4a 01       	movw	r8, r20
     4b8:	3a 83       	std	Y+2, r19	; 0x02
     4ba:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     4bc:	06 2f       	mov	r16, r22
     4be:	17 2f       	mov	r17, r23
     4c0:	f8 01       	movw	r30, r16
     4c2:	41 90       	ld	r4, Z+
     4c4:	51 90       	ld	r5, Z+
     4c6:	61 90       	ld	r6, Z+
     4c8:	71 90       	ld	r7, Z+
     4ca:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     4cc:	1c 82       	std	Y+4, r1	; 0x04
     4ce:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     4d0:	21 2c       	mov	r2, r1
     4d2:	31 2c       	mov	r3, r1
     4d4:	12 c0       	rjmp	.+36     	; 0x4fa <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     4d6:	f8 01       	movw	r30, r16
     4d8:	c1 90       	ld	r12, Z+
     4da:	d1 90       	ld	r13, Z+
     4dc:	e1 90       	ld	r14, Z+
     4de:	f1 90       	ld	r15, Z+
     4e0:	8f 01       	movw	r16, r30
     4e2:	a7 01       	movw	r20, r14
     4e4:	96 01       	movw	r18, r12
     4e6:	c3 01       	movw	r24, r6
     4e8:	b2 01       	movw	r22, r4
     4ea:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <__gesf2>
     4ee:	18 16       	cp	r1, r24
     4f0:	24 f4       	brge	.+8      	; 0x4fa <orientationCalculationFour+0x72>
     4f2:	26 01       	movw	r4, r12
     4f4:	37 01       	movw	r6, r14
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     4f6:	2b 80       	ldd	r2, Y+3	; 0x03
     4f8:	3c 80       	ldd	r3, Y+4	; 0x04
     4fa:	8b 81       	ldd	r24, Y+3	; 0x03
     4fc:	9c 81       	ldd	r25, Y+4	; 0x04
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	9c 83       	std	Y+4, r25	; 0x04
     502:	8b 83       	std	Y+3, r24	; 0x03
     504:	06 97       	sbiw	r24, 0x06	; 6
     506:	39 f7       	brne	.-50     	; 0x4d6 <orientationCalculationFour+0x4e>
		}
	}
	
	//Find points used by shortest length	
	int* pointsShortRef;
	pointsShortRef = distIndex(indexMin);	
     508:	82 2d       	mov	r24, r2
     50a:	93 2d       	mov	r25, r3
     50c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <distIndex>
	int pointsShort[2] = {pointsShortRef[0], pointsShortRef[1]};	
     510:	fc 01       	movw	r30, r24
     512:	20 81       	ld	r18, Z
     514:	31 81       	ldd	r19, Z+1	; 0x01
     516:	42 81       	ldd	r20, Z+2	; 0x02
     518:	53 81       	ldd	r21, Z+3	; 0x03
	if (pointsShort[0] == pointsLong[0]){
     51a:	f5 01       	movw	r30, r10
     51c:	80 81       	ld	r24, Z
     51e:	91 81       	ldd	r25, Z+1	; 0x01
     520:	28 17       	cp	r18, r24
     522:	39 07       	cpc	r19, r25
     524:	59 f4       	brne	.+22     	; 0x53c <orientationCalculationFour+0xb4>
		*top = pointsLong[0];
     526:	f4 01       	movw	r30, r8
     528:	31 83       	std	Z+1, r19	; 0x01
     52a:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     52c:	f5 01       	movw	r30, r10
     52e:	82 81       	ldd	r24, Z+2	; 0x02
     530:	93 81       	ldd	r25, Z+3	; 0x03
     532:	e9 81       	ldd	r30, Y+1	; 0x01
     534:	fa 81       	ldd	r31, Y+2	; 0x02
     536:	91 83       	std	Z+1, r25	; 0x01
     538:	80 83       	st	Z, r24
     53a:	3c c0       	rjmp	.+120    	; 0x5b4 <orientationCalculationFour+0x12c>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     53c:	f5 01       	movw	r30, r10
     53e:	62 81       	ldd	r22, Z+2	; 0x02
     540:	73 81       	ldd	r23, Z+3	; 0x03
     542:	26 17       	cp	r18, r22
     544:	37 07       	cpc	r19, r23
     546:	59 f4       	brne	.+22     	; 0x55e <orientationCalculationFour+0xd6>
			*top = pointsLong[1];
     548:	f4 01       	movw	r30, r8
     54a:	31 83       	std	Z+1, r19	; 0x01
     54c:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     54e:	f5 01       	movw	r30, r10
     550:	80 81       	ld	r24, Z
     552:	91 81       	ldd	r25, Z+1	; 0x01
     554:	e9 81       	ldd	r30, Y+1	; 0x01
     556:	fa 81       	ldd	r31, Y+2	; 0x02
     558:	91 83       	std	Z+1, r25	; 0x01
     55a:	80 83       	st	Z, r24
     55c:	2b c0       	rjmp	.+86     	; 0x5b4 <orientationCalculationFour+0x12c>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     55e:	48 17       	cp	r20, r24
     560:	59 07       	cpc	r21, r25
     562:	59 f4       	brne	.+22     	; 0x57a <orientationCalculationFour+0xf2>
				*top = pointsLong[0];
     564:	f4 01       	movw	r30, r8
     566:	51 83       	std	Z+1, r21	; 0x01
     568:	40 83       	st	Z, r20
				*bottom = pointsLong[1];
     56a:	f5 01       	movw	r30, r10
     56c:	82 81       	ldd	r24, Z+2	; 0x02
     56e:	93 81       	ldd	r25, Z+3	; 0x03
     570:	e9 81       	ldd	r30, Y+1	; 0x01
     572:	fa 81       	ldd	r31, Y+2	; 0x02
     574:	91 83       	std	Z+1, r25	; 0x01
     576:	80 83       	st	Z, r24
     578:	1d c0       	rjmp	.+58     	; 0x5b4 <orientationCalculationFour+0x12c>
			} else {
				if (pointsShort[1] == pointsLong[1])
     57a:	46 17       	cp	r20, r22
     57c:	57 07       	cpc	r21, r23
     57e:	59 f4       	brne	.+22     	; 0x596 <orientationCalculationFour+0x10e>
				{
					*top = pointsLong[1];
     580:	f4 01       	movw	r30, r8
     582:	51 83       	std	Z+1, r21	; 0x01
     584:	40 83       	st	Z, r20
					*bottom = pointsLong[0];
     586:	f5 01       	movw	r30, r10
     588:	80 81       	ld	r24, Z
     58a:	91 81       	ldd	r25, Z+1	; 0x01
     58c:	e9 81       	ldd	r30, Y+1	; 0x01
     58e:	fa 81       	ldd	r31, Y+2	; 0x02
     590:	91 83       	std	Z+1, r25	; 0x01
     592:	80 83       	st	Z, r24
     594:	0f c0       	rjmp	.+30     	; 0x5b4 <orientationCalculationFour+0x12c>
				} else {
						m_green(OFF);
     596:	6a 9a       	sbi	0x0d, 2	; 13
     598:	72 9a       	sbi	0x0e, 2	; 14
						*top = pointsLong[1];
     59a:	f5 01       	movw	r30, r10
     59c:	82 81       	ldd	r24, Z+2	; 0x02
     59e:	93 81       	ldd	r25, Z+3	; 0x03
     5a0:	f4 01       	movw	r30, r8
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     5a6:	f5 01       	movw	r30, r10
     5a8:	80 81       	ld	r24, Z
     5aa:	91 81       	ldd	r25, Z+1	; 0x01
     5ac:	e9 81       	ldd	r30, Y+1	; 0x01
     5ae:	fa 81       	ldd	r31, Y+2	; 0x02
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	80 83       	st	Z, r24
				}
			}
		}
	}
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	bf 90       	pop	r11
     5ce:	af 90       	pop	r10
     5d0:	9f 90       	pop	r9
     5d2:	8f 90       	pop	r8
     5d4:	7f 90       	pop	r7
     5d6:	6f 90       	pop	r6
     5d8:	5f 90       	pop	r5
     5da:	4f 90       	pop	r4
     5dc:	3f 90       	pop	r3
     5de:	2f 90       	pop	r2
     5e0:	08 95       	ret

000005e2 <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     5e2:	2f 92       	push	r2
     5e4:	3f 92       	push	r3
     5e6:	4f 92       	push	r4
     5e8:	5f 92       	push	r5
     5ea:	6f 92       	push	r6
     5ec:	7f 92       	push	r7
     5ee:	8f 92       	push	r8
     5f0:	9f 92       	push	r9
     5f2:	af 92       	push	r10
     5f4:	bf 92       	push	r11
     5f6:	cf 92       	push	r12
     5f8:	df 92       	push	r13
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	c2 54       	subi	r28, 0x42	; 66
     60c:	d1 09       	sbc	r29, r1
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
     618:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     61a:	fc 01       	movw	r30, r24
     61c:	04 80       	ldd	r0, Z+4	; 0x04
     61e:	f5 81       	ldd	r31, Z+5	; 0x05
     620:	e0 2d       	mov	r30, r0
     622:	fa a3       	std	Y+34, r31	; 0x22
     624:	e9 a3       	std	Y+33, r30	; 0x21
     626:	fc 01       	movw	r30, r24
     628:	00 81       	ld	r16, Z
     62a:	11 81       	ldd	r17, Z+1	; 0x01
     62c:	69 a1       	ldd	r22, Y+33	; 0x21
     62e:	7a a1       	ldd	r23, Y+34	; 0x22
     630:	60 1b       	sub	r22, r16
     632:	71 0b       	sbc	r23, r17
     634:	07 2e       	mov	r0, r23
     636:	00 0c       	add	r0, r0
     638:	88 0b       	sbc	r24, r24
     63a:	99 0b       	sbc	r25, r25
     63c:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     640:	6b 01       	movw	r12, r22
     642:	7c 01       	movw	r14, r24
     644:	f2 01       	movw	r30, r4
     646:	06 80       	ldd	r0, Z+6	; 0x06
     648:	f7 81       	ldd	r31, Z+7	; 0x07
     64a:	e0 2d       	mov	r30, r0
     64c:	fe a3       	std	Y+38, r31	; 0x26
     64e:	ed a3       	std	Y+37, r30	; 0x25
     650:	f2 01       	movw	r30, r4
     652:	22 80       	ldd	r2, Z+2	; 0x02
     654:	33 80       	ldd	r3, Z+3	; 0x03
     656:	ad a0       	ldd	r10, Y+37	; 0x25
     658:	be a0       	ldd	r11, Y+38	; 0x26
     65a:	a2 18       	sub	r10, r2
     65c:	b3 08       	sbc	r11, r3
     65e:	9b 01       	movw	r18, r22
     660:	ac 01       	movw	r20, r24
     662:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     666:	69 a7       	std	Y+41, r22	; 0x29
     668:	7a a7       	std	Y+42, r23	; 0x2a
     66a:	8b a7       	std	Y+43, r24	; 0x2b
     66c:	9c a7       	std	Y+44, r25	; 0x2c
     66e:	aa 9c       	mul	r10, r10
     670:	40 01       	movw	r8, r0
     672:	ab 9c       	mul	r10, r11
     674:	90 0c       	add	r9, r0
     676:	90 0c       	add	r9, r0
     678:	11 24       	eor	r1, r1
     67a:	09 2c       	mov	r0, r9
     67c:	00 0c       	add	r0, r0
     67e:	aa 08       	sbc	r10, r10
     680:	bb 08       	sbc	r11, r11
     682:	a7 01       	movw	r20, r14
     684:	96 01       	movw	r18, r12
     686:	c7 01       	movw	r24, r14
     688:	b6 01       	movw	r22, r12
     68a:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     68e:	6b 01       	movw	r12, r22
     690:	7c 01       	movw	r14, r24
     692:	c5 01       	movw	r24, r10
     694:	b4 01       	movw	r22, r8
     696:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     69a:	9b 01       	movw	r18, r22
     69c:	ac 01       	movw	r20, r24
     69e:	c7 01       	movw	r24, r14
     6a0:	b6 01       	movw	r22, r12
     6a2:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
     6a6:	0e 94 44 17 	call	0x2e88	; 0x2e88 <sqrt>
     6aa:	6b af       	std	Y+59, r22	; 0x3b
     6ac:	7c af       	std	Y+60, r23	; 0x3c
     6ae:	8d af       	std	Y+61, r24	; 0x3d
     6b0:	9e af       	std	Y+62, r25	; 0x3e
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     6b2:	f2 01       	movw	r30, r4
     6b4:	00 84       	ldd	r0, Z+8	; 0x08
     6b6:	f1 85       	ldd	r31, Z+9	; 0x09
     6b8:	e0 2d       	mov	r30, r0
     6ba:	fa a7       	std	Y+42, r31	; 0x2a
     6bc:	e9 a7       	std	Y+41, r30	; 0x29
     6be:	bf 01       	movw	r22, r30
     6c0:	60 1b       	sub	r22, r16
     6c2:	71 0b       	sbc	r23, r17
     6c4:	07 2e       	mov	r0, r23
     6c6:	00 0c       	add	r0, r0
     6c8:	88 0b       	sbc	r24, r24
     6ca:	99 0b       	sbc	r25, r25
     6cc:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     6d0:	6b 01       	movw	r12, r22
     6d2:	7c 01       	movw	r14, r24
     6d4:	f2 01       	movw	r30, r4
     6d6:	62 84       	ldd	r6, Z+10	; 0x0a
     6d8:	73 84       	ldd	r7, Z+11	; 0x0b
     6da:	53 01       	movw	r10, r6
     6dc:	a2 18       	sub	r10, r2
     6de:	b3 08       	sbc	r11, r3
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     6e8:	6d a7       	std	Y+45, r22	; 0x2d
     6ea:	7e a7       	std	Y+46, r23	; 0x2e
     6ec:	8f a7       	std	Y+47, r24	; 0x2f
     6ee:	98 ab       	std	Y+48, r25	; 0x30
     6f0:	aa 9c       	mul	r10, r10
     6f2:	40 01       	movw	r8, r0
     6f4:	ab 9c       	mul	r10, r11
     6f6:	90 0c       	add	r9, r0
     6f8:	90 0c       	add	r9, r0
     6fa:	11 24       	eor	r1, r1
     6fc:	09 2c       	mov	r0, r9
     6fe:	00 0c       	add	r0, r0
     700:	aa 08       	sbc	r10, r10
     702:	bb 08       	sbc	r11, r11
     704:	a7 01       	movw	r20, r14
     706:	96 01       	movw	r18, r12
     708:	c7 01       	movw	r24, r14
     70a:	b6 01       	movw	r22, r12
     70c:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     710:	6b 01       	movw	r12, r22
     712:	7c 01       	movw	r14, r24
     714:	c5 01       	movw	r24, r10
     716:	b4 01       	movw	r22, r8
     718:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     71c:	9b 01       	movw	r18, r22
     71e:	ac 01       	movw	r20, r24
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
     728:	0e 94 44 17 	call	0x2e88	; 0x2e88 <sqrt>
     72c:	23 96       	adiw	r28, 0x03	; 3
     72e:	6c af       	std	Y+60, r22	; 0x3c
     730:	7d af       	std	Y+61, r23	; 0x3d
     732:	8e af       	std	Y+62, r24	; 0x3e
     734:	9f af       	std	Y+63, r25	; 0x3f
     736:	23 97       	sbiw	r28, 0x03	; 3
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     738:	f2 01       	movw	r30, r4
     73a:	04 84       	ldd	r0, Z+12	; 0x0c
     73c:	f5 85       	ldd	r31, Z+13	; 0x0d
     73e:	e0 2d       	mov	r30, r0
     740:	fe a7       	std	Y+46, r31	; 0x2e
     742:	ed a7       	std	Y+45, r30	; 0x2d
     744:	bf 01       	movw	r22, r30
     746:	60 1b       	sub	r22, r16
     748:	71 0b       	sbc	r23, r17
     74a:	07 2e       	mov	r0, r23
     74c:	00 0c       	add	r0, r0
     74e:	88 0b       	sbc	r24, r24
     750:	99 0b       	sbc	r25, r25
     752:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     756:	4b 01       	movw	r8, r22
     758:	5c 01       	movw	r10, r24
     75a:	f2 01       	movw	r30, r4
     75c:	06 84       	ldd	r0, Z+14	; 0x0e
     75e:	f7 85       	ldd	r31, Z+15	; 0x0f
     760:	e0 2d       	mov	r30, r0
     762:	fa ab       	std	Y+50, r31	; 0x32
     764:	e9 ab       	std	Y+49, r30	; 0x31
     766:	8f 01       	movw	r16, r30
     768:	02 19       	sub	r16, r2
     76a:	13 09       	sbc	r17, r3
     76c:	9b 01       	movw	r18, r22
     76e:	ac 01       	movw	r20, r24
     770:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     774:	6b ab       	std	Y+51, r22	; 0x33
     776:	7c ab       	std	Y+52, r23	; 0x34
     778:	8d ab       	std	Y+53, r24	; 0x35
     77a:	9e ab       	std	Y+54, r25	; 0x36
     77c:	00 9f       	mul	r16, r16
     77e:	60 01       	movw	r12, r0
     780:	01 9f       	mul	r16, r17
     782:	d0 0c       	add	r13, r0
     784:	d0 0c       	add	r13, r0
     786:	11 24       	eor	r1, r1
     788:	0d 2c       	mov	r0, r13
     78a:	00 0c       	add	r0, r0
     78c:	ee 08       	sbc	r14, r14
     78e:	ff 08       	sbc	r15, r15
     790:	a5 01       	movw	r20, r10
     792:	94 01       	movw	r18, r8
     794:	c5 01       	movw	r24, r10
     796:	b4 01       	movw	r22, r8
     798:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     79c:	4b 01       	movw	r8, r22
     79e:	5c 01       	movw	r10, r24
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
     7a4:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     7a8:	9b 01       	movw	r18, r22
     7aa:	ac 01       	movw	r20, r24
     7ac:	c5 01       	movw	r24, r10
     7ae:	b4 01       	movw	r22, r8
     7b0:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
     7b4:	0e 94 44 17 	call	0x2e88	; 0x2e88 <sqrt>
     7b8:	6b ab       	std	Y+51, r22	; 0x33
     7ba:	7c ab       	std	Y+52, r23	; 0x34
     7bc:	8d ab       	std	Y+53, r24	; 0x35
     7be:	9e ab       	std	Y+54, r25	; 0x36
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     7c0:	69 a5       	ldd	r22, Y+41	; 0x29
     7c2:	7a a5       	ldd	r23, Y+42	; 0x2a
     7c4:	29 a1       	ldd	r18, Y+33	; 0x21
     7c6:	3a a1       	ldd	r19, Y+34	; 0x22
     7c8:	62 1b       	sub	r22, r18
     7ca:	73 0b       	sbc	r23, r19
     7cc:	07 2e       	mov	r0, r23
     7ce:	00 0c       	add	r0, r0
     7d0:	88 0b       	sbc	r24, r24
     7d2:	99 0b       	sbc	r25, r25
     7d4:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     7d8:	4b 01       	movw	r8, r22
     7da:	5c 01       	movw	r10, r24
     7dc:	83 01       	movw	r16, r6
     7de:	4d a1       	ldd	r20, Y+37	; 0x25
     7e0:	5e a1       	ldd	r21, Y+38	; 0x26
     7e2:	04 1b       	sub	r16, r20
     7e4:	15 0b       	sbc	r17, r21
     7e6:	9b 01       	movw	r18, r22
     7e8:	ac 01       	movw	r20, r24
     7ea:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     7ee:	6f ab       	std	Y+55, r22	; 0x37
     7f0:	78 af       	std	Y+56, r23	; 0x38
     7f2:	89 af       	std	Y+57, r24	; 0x39
     7f4:	9a af       	std	Y+58, r25	; 0x3a
     7f6:	00 9f       	mul	r16, r16
     7f8:	60 01       	movw	r12, r0
     7fa:	01 9f       	mul	r16, r17
     7fc:	d0 0c       	add	r13, r0
     7fe:	d0 0c       	add	r13, r0
     800:	11 24       	eor	r1, r1
     802:	0d 2c       	mov	r0, r13
     804:	00 0c       	add	r0, r0
     806:	ee 08       	sbc	r14, r14
     808:	ff 08       	sbc	r15, r15
     80a:	a5 01       	movw	r20, r10
     80c:	94 01       	movw	r18, r8
     80e:	c5 01       	movw	r24, r10
     810:	b4 01       	movw	r22, r8
     812:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     816:	4b 01       	movw	r8, r22
     818:	5c 01       	movw	r10, r24
     81a:	c7 01       	movw	r24, r14
     81c:	b6 01       	movw	r22, r12
     81e:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     822:	9b 01       	movw	r18, r22
     824:	ac 01       	movw	r20, r24
     826:	c5 01       	movw	r24, r10
     828:	b4 01       	movw	r22, r8
     82a:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
     82e:	0e 94 44 17 	call	0x2e88	; 0x2e88 <sqrt>
     832:	6f ab       	std	Y+55, r22	; 0x37
     834:	78 af       	std	Y+56, r23	; 0x38
     836:	89 af       	std	Y+57, r24	; 0x39
     838:	9a af       	std	Y+58, r25	; 0x3a
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     83a:	6d a5       	ldd	r22, Y+45	; 0x2d
     83c:	7e a5       	ldd	r23, Y+46	; 0x2e
     83e:	89 a1       	ldd	r24, Y+33	; 0x21
     840:	9a a1       	ldd	r25, Y+34	; 0x22
     842:	68 1b       	sub	r22, r24
     844:	79 0b       	sbc	r23, r25
     846:	07 2e       	mov	r0, r23
     848:	00 0c       	add	r0, r0
     84a:	88 0b       	sbc	r24, r24
     84c:	99 0b       	sbc	r25, r25
     84e:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     852:	4b 01       	movw	r8, r22
     854:	5c 01       	movw	r10, r24
     856:	09 a9       	ldd	r16, Y+49	; 0x31
     858:	1a a9       	ldd	r17, Y+50	; 0x32
     85a:	ed a1       	ldd	r30, Y+37	; 0x25
     85c:	fe a1       	ldd	r31, Y+38	; 0x26
     85e:	0e 1b       	sub	r16, r30
     860:	1f 0b       	sbc	r17, r31
     862:	9b 01       	movw	r18, r22
     864:	ac 01       	movw	r20, r24
     866:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     86a:	69 a3       	std	Y+33, r22	; 0x21
     86c:	7a a3       	std	Y+34, r23	; 0x22
     86e:	8b a3       	std	Y+35, r24	; 0x23
     870:	9c a3       	std	Y+36, r25	; 0x24
     872:	00 9f       	mul	r16, r16
     874:	60 01       	movw	r12, r0
     876:	01 9f       	mul	r16, r17
     878:	d0 0c       	add	r13, r0
     87a:	d0 0c       	add	r13, r0
     87c:	11 24       	eor	r1, r1
     87e:	0d 2c       	mov	r0, r13
     880:	00 0c       	add	r0, r0
     882:	ee 08       	sbc	r14, r14
     884:	ff 08       	sbc	r15, r15
     886:	a5 01       	movw	r20, r10
     888:	94 01       	movw	r18, r8
     88a:	c5 01       	movw	r24, r10
     88c:	b4 01       	movw	r22, r8
     88e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     892:	4b 01       	movw	r8, r22
     894:	5c 01       	movw	r10, r24
     896:	c7 01       	movw	r24, r14
     898:	b6 01       	movw	r22, r12
     89a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
     8a2:	c5 01       	movw	r24, r10
     8a4:	b4 01       	movw	r22, r8
     8a6:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
     8aa:	0e 94 44 17 	call	0x2e88	; 0x2e88 <sqrt>
     8ae:	4b 01       	movw	r8, r22
     8b0:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     8b2:	6d a5       	ldd	r22, Y+45	; 0x2d
     8b4:	7e a5       	ldd	r23, Y+46	; 0x2e
     8b6:	29 a5       	ldd	r18, Y+41	; 0x29
     8b8:	3a a5       	ldd	r19, Y+42	; 0x2a
     8ba:	62 1b       	sub	r22, r18
     8bc:	73 0b       	sbc	r23, r19
     8be:	07 2e       	mov	r0, r23
     8c0:	00 0c       	add	r0, r0
     8c2:	88 0b       	sbc	r24, r24
     8c4:	99 0b       	sbc	r25, r25
     8c6:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     8ca:	69 a3       	std	Y+33, r22	; 0x21
     8cc:	7a a3       	std	Y+34, r23	; 0x22
     8ce:	8b a3       	std	Y+35, r24	; 0x23
     8d0:	9c a3       	std	Y+36, r25	; 0x24
     8d2:	09 a9       	ldd	r16, Y+49	; 0x31
     8d4:	1a a9       	ldd	r17, Y+50	; 0x32
     8d6:	06 19       	sub	r16, r6
     8d8:	17 09       	sbc	r17, r7
     8da:	9b 01       	movw	r18, r22
     8dc:	ac 01       	movw	r20, r24
     8de:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     8e2:	6d a3       	std	Y+37, r22	; 0x25
     8e4:	7e a3       	std	Y+38, r23	; 0x26
     8e6:	8f a3       	std	Y+39, r24	; 0x27
     8e8:	98 a7       	std	Y+40, r25	; 0x28
     8ea:	00 9f       	mul	r16, r16
     8ec:	60 01       	movw	r12, r0
     8ee:	01 9f       	mul	r16, r17
     8f0:	d0 0c       	add	r13, r0
     8f2:	d0 0c       	add	r13, r0
     8f4:	11 24       	eor	r1, r1
     8f6:	0d 2c       	mov	r0, r13
     8f8:	00 0c       	add	r0, r0
     8fa:	ee 08       	sbc	r14, r14
     8fc:	ff 08       	sbc	r15, r15
     8fe:	29 a1       	ldd	r18, Y+33	; 0x21
     900:	3a a1       	ldd	r19, Y+34	; 0x22
     902:	4b a1       	ldd	r20, Y+35	; 0x23
     904:	5c a1       	ldd	r21, Y+36	; 0x24
     906:	ca 01       	movw	r24, r20
     908:	b9 01       	movw	r22, r18
     90a:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     90e:	69 a3       	std	Y+33, r22	; 0x21
     910:	7a a3       	std	Y+34, r23	; 0x22
     912:	8b a3       	std	Y+35, r24	; 0x23
     914:	9c a3       	std	Y+36, r25	; 0x24
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     91e:	9b 01       	movw	r18, r22
     920:	ac 01       	movw	r20, r24
     922:	69 a1       	ldd	r22, Y+33	; 0x21
     924:	7a a1       	ldd	r23, Y+34	; 0x22
     926:	8b a1       	ldd	r24, Y+35	; 0x23
     928:	9c a1       	ldd	r25, Y+36	; 0x24
     92a:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
     92e:	0e 94 44 17 	call	0x2e88	; 0x2e88 <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     932:	2b ad       	ldd	r18, Y+59	; 0x3b
     934:	3c ad       	ldd	r19, Y+60	; 0x3c
     936:	4d ad       	ldd	r20, Y+61	; 0x3d
     938:	5e ad       	ldd	r21, Y+62	; 0x3e
     93a:	29 83       	std	Y+1, r18	; 0x01
     93c:	3a 83       	std	Y+2, r19	; 0x02
     93e:	4b 83       	std	Y+3, r20	; 0x03
     940:	5c 83       	std	Y+4, r21	; 0x04
     942:	23 96       	adiw	r28, 0x03	; 3
     944:	2c ad       	ldd	r18, Y+60	; 0x3c
     946:	3d ad       	ldd	r19, Y+61	; 0x3d
     948:	4e ad       	ldd	r20, Y+62	; 0x3e
     94a:	5f ad       	ldd	r21, Y+63	; 0x3f
     94c:	23 97       	sbiw	r28, 0x03	; 3
     94e:	2d 83       	std	Y+5, r18	; 0x05
     950:	3e 83       	std	Y+6, r19	; 0x06
     952:	4f 83       	std	Y+7, r20	; 0x07
     954:	58 87       	std	Y+8, r21	; 0x08
     956:	2b a9       	ldd	r18, Y+51	; 0x33
     958:	3c a9       	ldd	r19, Y+52	; 0x34
     95a:	4d a9       	ldd	r20, Y+53	; 0x35
     95c:	5e a9       	ldd	r21, Y+54	; 0x36
     95e:	29 87       	std	Y+9, r18	; 0x09
     960:	3a 87       	std	Y+10, r19	; 0x0a
     962:	4b 87       	std	Y+11, r20	; 0x0b
     964:	5c 87       	std	Y+12, r21	; 0x0c
     966:	2f a9       	ldd	r18, Y+55	; 0x37
     968:	38 ad       	ldd	r19, Y+56	; 0x38
     96a:	49 ad       	ldd	r20, Y+57	; 0x39
     96c:	5a ad       	ldd	r21, Y+58	; 0x3a
     96e:	2d 87       	std	Y+13, r18	; 0x0d
     970:	3e 87       	std	Y+14, r19	; 0x0e
     972:	4f 87       	std	Y+15, r20	; 0x0f
     974:	58 8b       	std	Y+16, r21	; 0x10
     976:	89 8a       	std	Y+17, r8	; 0x11
     978:	9a 8a       	std	Y+18, r9	; 0x12
     97a:	ab 8a       	std	Y+19, r10	; 0x13
     97c:	bc 8a       	std	Y+20, r11	; 0x14
     97e:	6d 8b       	std	Y+21, r22	; 0x15
     980:	7e 8b       	std	Y+22, r23	; 0x16
     982:	8f 8b       	std	Y+23, r24	; 0x17
     984:	98 8f       	std	Y+24, r25	; 0x18
     986:	ae 01       	movw	r20, r28
     988:	4f 5f       	subi	r20, 0xFF	; 255
     98a:	5f 4f       	sbci	r21, 0xFF	; 255
     98c:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     98e:	00 e0       	ldi	r16, 0x00	; 0
     990:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     992:	61 2c       	mov	r6, r1
     994:	71 2c       	mov	r7, r1
     996:	c1 2c       	mov	r12, r1
     998:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     99a:	21 2c       	mov	r2, r1
     99c:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     99e:	f7 01       	movw	r30, r14
     9a0:	81 90       	ld	r8, Z+
     9a2:	91 90       	ld	r9, Z+
     9a4:	a1 90       	ld	r10, Z+
     9a6:	b1 90       	ld	r11, Z+
     9a8:	7f 01       	movw	r14, r30
     9aa:	26 2d       	mov	r18, r6
     9ac:	37 2d       	mov	r19, r7
     9ae:	4c 2d       	mov	r20, r12
     9b0:	5d 2d       	mov	r21, r13
     9b2:	c5 01       	movw	r24, r10
     9b4:	b4 01       	movw	r22, r8
     9b6:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <__gesf2>
     9ba:	18 16       	cp	r1, r24
     9bc:	34 f4       	brge	.+12     	; 0x9ca <fourPointCalc+0x3e8>
			indexMax = i;
			maxVal = distVect[i];
     9be:	68 2c       	mov	r6, r8
     9c0:	79 2c       	mov	r7, r9
     9c2:	ca 2c       	mov	r12, r10
     9c4:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     9c6:	20 2e       	mov	r2, r16
     9c8:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     9ca:	0f 5f       	subi	r16, 0xFF	; 255
     9cc:	1f 4f       	sbci	r17, 0xFF	; 255
     9ce:	06 30       	cpi	r16, 0x06	; 6
     9d0:	11 05       	cpc	r17, r1
     9d2:	29 f7       	brne	.-54     	; 0x99e <fourPointCalc+0x3bc>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLongRef; 
	pointsLongRef = distIndex(indexMax);
     9d4:	82 2d       	mov	r24, r2
     9d6:	93 2d       	mov	r25, r3
     9d8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <distIndex>
	
	int pointsLong[2] = {(pointsLongRef[0]), (pointsLongRef[1])};
     9dc:	fc 01       	movw	r30, r24
     9de:	e0 80       	ld	r14, Z
     9e0:	f1 80       	ldd	r15, Z+1	; 0x01
     9e2:	fa 8e       	std	Y+26, r15	; 0x1a
     9e4:	e9 8e       	std	Y+25, r14	; 0x19
     9e6:	02 81       	ldd	r16, Z+2	; 0x02
     9e8:	13 81       	ldd	r17, Z+3	; 0x03
     9ea:	1c 8f       	std	Y+28, r17	; 0x1c
     9ec:	0b 8f       	std	Y+27, r16	; 0x1b
	
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     9ee:	ee 0c       	add	r14, r14
     9f0:	ff 1c       	adc	r15, r15
     9f2:	ee 0c       	add	r14, r14
     9f4:	ff 1c       	adc	r15, r15
     9f6:	e4 0c       	add	r14, r4
     9f8:	f5 1c       	adc	r15, r5
     9fa:	00 0f       	add	r16, r16
     9fc:	11 1f       	adc	r17, r17
     9fe:	00 0f       	add	r16, r16
     a00:	11 1f       	adc	r17, r17
     a02:	04 0d       	add	r16, r4
     a04:	15 1d       	adc	r17, r5
     a06:	f7 01       	movw	r30, r14
     a08:	60 81       	ld	r22, Z
     a0a:	71 81       	ldd	r23, Z+1	; 0x01
     a0c:	f8 01       	movw	r30, r16
     a0e:	80 81       	ld	r24, Z
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	68 0f       	add	r22, r24
     a14:	79 1f       	adc	r23, r25
     a16:	77 23       	and	r23, r23
     a18:	14 f4       	brge	.+4      	; 0xa1e <fourPointCalc+0x43c>
     a1a:	6f 5f       	subi	r22, 0xFF	; 255
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	75 95       	asr	r23
     a20:	67 95       	ror	r22
     a22:	07 2e       	mov	r0, r23
     a24:	00 0c       	add	r0, r0
     a26:	88 0b       	sbc	r24, r24
     a28:	99 0b       	sbc	r25, r25
     a2a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     a2e:	4b 01       	movw	r8, r22
     a30:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     a32:	f7 01       	movw	r30, r14
     a34:	62 81       	ldd	r22, Z+2	; 0x02
     a36:	73 81       	ldd	r23, Z+3	; 0x03
     a38:	f8 01       	movw	r30, r16
     a3a:	82 81       	ldd	r24, Z+2	; 0x02
     a3c:	93 81       	ldd	r25, Z+3	; 0x03
     a3e:	68 0f       	add	r22, r24
     a40:	79 1f       	adc	r23, r25
     a42:	77 23       	and	r23, r23
     a44:	14 f4       	brge	.+4      	; 0xa4a <fourPointCalc+0x468>
     a46:	6f 5f       	subi	r22, 0xFF	; 255
     a48:	7f 4f       	sbci	r23, 0xFF	; 255
     a4a:	75 95       	asr	r23
     a4c:	67 95       	ror	r22
     a4e:	07 2e       	mov	r0, r23
     a50:	00 0c       	add	r0, r0
     a52:	88 0b       	sbc	r24, r24
     a54:	99 0b       	sbc	r25, r25
     a56:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     a5a:	69 a3       	std	Y+33, r22	; 0x21
     a5c:	7a a3       	std	Y+34, r23	; 0x22
     a5e:	8b a3       	std	Y+35, r24	; 0x23
     a60:	9c a3       	std	Y+36, r25	; 0x24
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     a62:	9e 01       	movw	r18, r28
     a64:	21 5e       	subi	r18, 0xE1	; 225
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	ae 01       	movw	r20, r28
     a6a:	43 5e       	subi	r20, 0xE3	; 227
     a6c:	5f 4f       	sbci	r21, 0xFF	; 255
     a6e:	be 01       	movw	r22, r28
     a70:	6f 5f       	subi	r22, 0xFF	; 255
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	ce 01       	movw	r24, r28
     a76:	49 96       	adiw	r24, 0x19	; 25
     a78:	0e 94 44 02 	call	0x488	; 0x488 <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     a7c:	0d 8d       	ldd	r16, Y+29	; 0x1d
     a7e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a80:	00 0f       	add	r16, r16
     a82:	11 1f       	adc	r17, r17
     a84:	00 0f       	add	r16, r16
     a86:	11 1f       	adc	r17, r17
     a88:	04 0d       	add	r16, r4
     a8a:	15 1d       	adc	r17, r5
     a8c:	2f 8c       	ldd	r2, Y+31	; 0x1f
     a8e:	38 a0       	ldd	r3, Y+32	; 0x20
     a90:	22 0c       	add	r2, r2
     a92:	33 1c       	adc	r3, r3
     a94:	22 0c       	add	r2, r2
     a96:	33 1c       	adc	r3, r3
     a98:	24 0c       	add	r2, r4
     a9a:	35 1c       	adc	r3, r5
     a9c:	f8 01       	movw	r30, r16
     a9e:	60 81       	ld	r22, Z
     aa0:	71 81       	ldd	r23, Z+1	; 0x01
     aa2:	f1 01       	movw	r30, r2
     aa4:	80 81       	ld	r24, Z
     aa6:	91 81       	ldd	r25, Z+1	; 0x01
     aa8:	68 1b       	sub	r22, r24
     aaa:	79 0b       	sbc	r23, r25
     aac:	07 2e       	mov	r0, r23
     aae:	00 0c       	add	r0, r0
     ab0:	88 0b       	sbc	r24, r24
     ab2:	99 0b       	sbc	r25, r25
     ab4:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
     ab8:	6b 01       	movw	r12, r22
     aba:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     abc:	f8 01       	movw	r30, r16
     abe:	62 81       	ldd	r22, Z+2	; 0x02
     ac0:	73 81       	ldd	r23, Z+3	; 0x03
     ac2:	f1 01       	movw	r30, r2
     ac4:	82 81       	ldd	r24, Z+2	; 0x02
     ac6:	93 81       	ldd	r25, Z+3	; 0x03
     ac8:	68 1b       	sub	r22, r24
     aca:	79 0b       	sbc	r23, r25
     acc:	07 2e       	mov	r0, r23
     ace:	00 0c       	add	r0, r0
     ad0:	88 0b       	sbc	r24, r24
     ad2:	99 0b       	sbc	r25, r25
     ad4:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     ad8:	90 58       	subi	r25, 0x80	; 128
     ada:	a7 01       	movw	r20, r14
     adc:	96 01       	movw	r18, r12
     ade:	0e 94 9a 14 	call	0x2934	; 0x2934 <atan2>
	theta += M_PI/2.0;
     ae2:	2b ed       	ldi	r18, 0xDB	; 219
     ae4:	3f e0       	ldi	r19, 0x0F	; 15
     ae6:	49 ec       	ldi	r20, 0xC9	; 201
     ae8:	5f e3       	ldi	r21, 0x3F	; 63
     aea:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
     aee:	6b 01       	movw	r12, r22
     af0:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     af2:	a5 01       	movw	r20, r10
     af4:	94 01       	movw	r18, r8
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	94 e4       	ldi	r25, 0x44	; 68
     afe:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
     b02:	4b 01       	movw	r8, r22
     b04:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     b06:	29 a1       	ldd	r18, Y+33	; 0x21
     b08:	3a a1       	ldd	r19, Y+34	; 0x22
     b0a:	4b a1       	ldd	r20, Y+35	; 0x23
     b0c:	5c a1       	ldd	r21, Y+36	; 0x24
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	8f eb       	ldi	r24, 0xBF	; 191
     b14:	93 e4       	ldi	r25, 0x43	; 67
     b16:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
     b1a:	2b 01       	movw	r4, r22
     b1c:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     b1e:	c7 01       	movw	r24, r14
     b20:	b6 01       	movw	r22, r12
     b22:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <sin>
     b26:	69 a3       	std	Y+33, r22	; 0x21
     b28:	7a a3       	std	Y+34, r23	; 0x22
     b2a:	8b a3       	std	Y+35, r24	; 0x23
     b2c:	9c a3       	std	Y+36, r25	; 0x24
     b2e:	c7 01       	movw	r24, r14
     b30:	b6 01       	movw	r22, r12
     b32:	0e 94 fe 14 	call	0x29fc	; 0x29fc <cos>
     b36:	6d a3       	std	Y+37, r22	; 0x25
     b38:	7e a3       	std	Y+38, r23	; 0x26
     b3a:	8f a3       	std	Y+39, r24	; 0x27
     b3c:	98 a7       	std	Y+40, r25	; 0x28
     b3e:	08 e5       	ldi	r16, 0x58	; 88
     b40:	11 e0       	ldi	r17, 0x01	; 1
     b42:	29 a1       	ldd	r18, Y+33	; 0x21
     b44:	3a a1       	ldd	r19, Y+34	; 0x22
     b46:	4b a1       	ldd	r20, Y+35	; 0x23
     b48:	5c a1       	ldd	r21, Y+36	; 0x24
     b4a:	c3 01       	movw	r24, r6
     b4c:	b2 01       	movw	r22, r4
     b4e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     b52:	69 a7       	std	Y+41, r22	; 0x29
     b54:	7a a7       	std	Y+42, r23	; 0x2a
     b56:	8b a7       	std	Y+43, r24	; 0x2b
     b58:	9c a7       	std	Y+44, r25	; 0x2c
     b5a:	2d a1       	ldd	r18, Y+37	; 0x25
     b5c:	3e a1       	ldd	r19, Y+38	; 0x26
     b5e:	4f a1       	ldd	r20, Y+39	; 0x27
     b60:	58 a5       	ldd	r21, Y+40	; 0x28
     b62:	c5 01       	movw	r24, r10
     b64:	b4 01       	movw	r22, r8
     b66:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     b6a:	9b 01       	movw	r18, r22
     b6c:	ac 01       	movw	r20, r24
     b6e:	69 a5       	ldd	r22, Y+41	; 0x29
     b70:	7a a5       	ldd	r23, Y+42	; 0x2a
     b72:	8b a5       	ldd	r24, Y+43	; 0x2b
     b74:	9c a5       	ldd	r25, Y+44	; 0x2c
     b76:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
     b7a:	f8 01       	movw	r30, r16
     b7c:	60 83       	st	Z, r22
     b7e:	71 83       	std	Z+1, r23	; 0x01
     b80:	82 83       	std	Z+2, r24	; 0x02
     b82:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     b84:	2d a1       	ldd	r18, Y+37	; 0x25
     b86:	3e a1       	ldd	r19, Y+38	; 0x26
     b88:	4f a1       	ldd	r20, Y+39	; 0x27
     b8a:	58 a5       	ldd	r21, Y+40	; 0x28
     b8c:	c3 01       	movw	r24, r6
     b8e:	b2 01       	movw	r22, r4
     b90:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     b94:	2b 01       	movw	r4, r22
     b96:	3c 01       	movw	r6, r24
     b98:	29 a1       	ldd	r18, Y+33	; 0x21
     b9a:	3a a1       	ldd	r19, Y+34	; 0x22
     b9c:	4b a1       	ldd	r20, Y+35	; 0x23
     b9e:	5c a1       	ldd	r21, Y+36	; 0x24
     ba0:	c5 01       	movw	r24, r10
     ba2:	b4 01       	movw	r22, r8
     ba4:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	c3 01       	movw	r24, r6
     bae:	b2 01       	movw	r22, r4
     bb0:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
     bb4:	f8 01       	movw	r30, r16
     bb6:	64 83       	std	Z+4, r22	; 0x04
     bb8:	75 83       	std	Z+5, r23	; 0x05
     bba:	86 83       	std	Z+6, r24	; 0x06
     bbc:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta;
     bbe:	f7 fa       	bst	r15, 7
     bc0:	f0 94       	com	r15
     bc2:	f7 f8       	bld	r15, 7
     bc4:	f0 94       	com	r15
     bc6:	c0 86       	std	Z+8, r12	; 0x08
     bc8:	d1 86       	std	Z+9, r13	; 0x09
     bca:	e2 86       	std	Z+10, r14	; 0x0a
     bcc:	f3 86       	std	Z+11, r15	; 0x0b
	
	return centerFour;
}
     bce:	c8 01       	movw	r24, r16
     bd0:	ce 5b       	subi	r28, 0xBE	; 190
     bd2:	df 4f       	sbci	r29, 0xFF	; 255
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	bf 90       	pop	r11
     bf0:	af 90       	pop	r10
     bf2:	9f 90       	pop	r9
     bf4:	8f 90       	pop	r8
     bf6:	7f 90       	pop	r7
     bf8:	6f 90       	pop	r6
     bfa:	5f 90       	pop	r5
     bfc:	4f 90       	pop	r4
     bfe:	3f 90       	pop	r3
     c00:	2f 90       	pop	r2
     c02:	08 95       	ret

00000c04 <localization_calc>:
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
     c04:	4f 92       	push	r4
     c06:	5f 92       	push	r5
     c08:	6f 92       	push	r6
     c0a:	7f 92       	push	r7
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	68 97       	sbiw	r28, 0x18	; 24
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     c32:	0d b7       	in	r16, 0x3d	; 61
     c34:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     c36:	80 81       	ld	r24, Z
     c38:	91 81       	ldd	r25, Z+1	; 0x01
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	80 85       	ldd	r24, Z+8	; 0x08
     c40:	91 85       	ldd	r25, Z+9	; 0x09
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	8b 83       	std	Y+3, r24	; 0x03
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	9e 83       	std	Y+6, r25	; 0x06
     c4c:	8d 83       	std	Y+5, r24	; 0x05
     c4e:	82 85       	ldd	r24, Z+10	; 0x0a
     c50:	93 85       	ldd	r25, Z+11	; 0x0b
     c52:	98 87       	std	Y+8, r25	; 0x08
     c54:	8f 83       	std	Y+7, r24	; 0x07
     c56:	84 81       	ldd	r24, Z+4	; 0x04
     c58:	95 81       	ldd	r25, Z+5	; 0x05
     c5a:	9a 87       	std	Y+10, r25	; 0x0a
     c5c:	89 87       	std	Y+9, r24	; 0x09
     c5e:	84 85       	ldd	r24, Z+12	; 0x0c
     c60:	95 85       	ldd	r25, Z+13	; 0x0d
     c62:	9c 87       	std	Y+12, r25	; 0x0c
     c64:	8b 87       	std	Y+11, r24	; 0x0b
     c66:	86 81       	ldd	r24, Z+6	; 0x06
     c68:	97 81       	ldd	r25, Z+7	; 0x07
     c6a:	9e 87       	std	Y+14, r25	; 0x0e
     c6c:	8d 87       	std	Y+13, r24	; 0x0d
     c6e:	86 85       	ldd	r24, Z+14	; 0x0e
     c70:	97 85       	ldd	r25, Z+15	; 0x0f
     c72:	98 8b       	std	Y+16, r25	; 0x10
     c74:	8f 87       	std	Y+15, r24	; 0x0f
		{rawStarData[3], rawStarData[7]}
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     c76:	fe 01       	movw	r30, r28
     c78:	71 96       	adiw	r30, 0x11	; 17
     c7a:	88 e0       	ldi	r24, 0x08	; 8
     c7c:	df 01       	movw	r26, r30
     c7e:	1d 92       	st	X+, r1
     c80:	8a 95       	dec	r24
     c82:	e9 f7       	brne	.-6      	; 0xc7e <localization_calc+0x7a>
     c84:	70 97       	sbiw	r30, 0x10	; 16
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     c8e:	40 81       	ld	r20, Z
     c90:	51 81       	ldd	r21, Z+1	; 0x01
     c92:	4f 3f       	cpi	r20, 0xFF	; 255
     c94:	53 40       	sbci	r21, 0x03	; 3
     c96:	71 f0       	breq	.+28     	; 0xcb4 <localization_calc+0xb0>
			pointIndices[numPoints] = i;
     c98:	dc 01       	movw	r26, r24
     c9a:	aa 0f       	add	r26, r26
     c9c:	bb 1f       	adc	r27, r27
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	4c 0f       	add	r20, r28
     ca4:	5d 1f       	adc	r21, r29
     ca6:	a4 0f       	add	r26, r20
     ca8:	b5 1f       	adc	r27, r21
     caa:	51 96       	adiw	r26, 0x11	; 17
     cac:	3c 93       	st	X, r19
     cae:	2e 93       	st	-X, r18
     cb0:	50 97       	sbiw	r26, 0x10	; 16
			numPoints++;
     cb2:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     cb4:	2f 5f       	subi	r18, 0xFF	; 255
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	34 96       	adiw	r30, 0x04	; 4
     cba:	24 30       	cpi	r18, 0x04	; 4
     cbc:	31 05       	cpc	r19, r1
     cbe:	39 f7       	brne	.-50     	; 0xc8e <localization_calc+0x8a>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <localization_calc+0xc2>
     cc4:	8b c0       	rjmp	.+278    	; 0xddc <localization_calc+0x1d8>
     cc6:	ed b6       	in	r14, 0x3d	; 61
     cc8:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     cca:	6c 01       	movw	r12, r24
     ccc:	cc 0c       	add	r12, r12
     cce:	dd 1c       	adc	r13, r13
     cd0:	cc 0c       	add	r12, r12
     cd2:	dd 1c       	adc	r13, r13
     cd4:	ad b7       	in	r26, 0x3d	; 61
     cd6:	be b7       	in	r27, 0x3e	; 62
     cd8:	ac 19       	sub	r26, r12
     cda:	bd 09       	sbc	r27, r13
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	be bf       	out	0x3e, r27	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	ad bf       	out	0x3d, r26	; 61
     ce6:	ed b7       	in	r30, 0x3d	; 61
     ce8:	fe b7       	in	r31, 0x3e	; 62
     cea:	31 96       	adiw	r30, 0x01	; 1
     cec:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     cee:	18 16       	cp	r1, r24
     cf0:	19 06       	cpc	r1, r25
     cf2:	24 f5       	brge	.+72     	; 0xd3c <localization_calc+0x138>
     cf4:	9e 01       	movw	r18, r28
     cf6:	2f 5e       	subi	r18, 0xEF	; 239
     cf8:	3f 4f       	sbci	r19, 0xFF	; 255
     cfa:	df 01       	movw	r26, r30
     cfc:	ce 0e       	add	r12, r30
     cfe:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     d00:	f9 01       	movw	r30, r18
     d02:	41 91       	ld	r20, Z+
     d04:	51 91       	ld	r21, Z+
     d06:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     d08:	fa 01       	movw	r30, r20
     d0a:	ee 0f       	add	r30, r30
     d0c:	ff 1f       	adc	r31, r31
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	41 e0       	ldi	r20, 0x01	; 1
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	4c 0f       	add	r20, r28
     d18:	5d 1f       	adc	r21, r29
     d1a:	e4 0f       	add	r30, r20
     d1c:	f5 1f       	adc	r31, r21
     d1e:	40 81       	ld	r20, Z
     d20:	51 81       	ldd	r21, Z+1	; 0x01
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	5c 93       	st	X, r21
     d26:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     d28:	42 81       	ldd	r20, Z+2	; 0x02
     d2a:	53 81       	ldd	r21, Z+3	; 0x03
     d2c:	13 96       	adiw	r26, 0x03	; 3
     d2e:	5c 93       	st	X, r21
     d30:	4e 93       	st	-X, r20
     d32:	12 97       	sbiw	r26, 0x02	; 2
     d34:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     d36:	ac 15       	cp	r26, r12
     d38:	bd 05       	cpc	r27, r13
     d3a:	11 f7       	brne	.-60     	; 0xd00 <localization_calc+0xfc>
			points[i][0] = pvect[index][0];
			points[i][1] = pvect[index][1];
		}
		
		
		m_red(ON);
     d3c:	6e 9a       	sbi	0x0d, 6	; 13
     d3e:	76 98       	cbi	0x0e, 6	; 14
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     d40:	db 01       	movw	r26, r22
     d42:	4d 90       	ld	r4, X+
     d44:	5d 90       	ld	r5, X+
     d46:	6d 90       	ld	r6, X+
     d48:	7c 90       	ld	r7, X
     d4a:	13 97       	sbiw	r26, 0x03	; 3
     d4c:	e0 e7       	ldi	r30, 0x70	; 112
     d4e:	f1 e0       	ldi	r31, 0x01	; 1
     d50:	40 82       	st	Z, r4
     d52:	51 82       	std	Z+1, r5	; 0x01
     d54:	62 82       	std	Z+2, r6	; 0x02
     d56:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     d58:	14 96       	adiw	r26, 0x04	; 4
     d5a:	4d 90       	ld	r4, X+
     d5c:	5d 90       	ld	r5, X+
     d5e:	6d 90       	ld	r6, X+
     d60:	7c 90       	ld	r7, X
     d62:	17 97       	sbiw	r26, 0x07	; 7
     d64:	44 82       	std	Z+4, r4	; 0x04
     d66:	55 82       	std	Z+5, r5	; 0x05
     d68:	66 82       	std	Z+6, r6	; 0x06
     d6a:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     d6c:	18 96       	adiw	r26, 0x08	; 8
     d6e:	4d 91       	ld	r20, X+
     d70:	5d 91       	ld	r21, X+
     d72:	6d 91       	ld	r22, X+
     d74:	7c 91       	ld	r23, X
     d76:	1b 97       	sbiw	r26, 0x0b	; 11
     d78:	40 87       	std	Z+8, r20	; 0x08
     d7a:	51 87       	std	Z+9, r21	; 0x09
     d7c:	62 87       	std	Z+10, r22	; 0x0a
     d7e:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     d80:	04 97       	sbiw	r24, 0x04	; 4
     d82:	29 f4       	brne	.+10     	; 0xd8e <localization_calc+0x18a>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     d84:	c5 01       	movw	r24, r10
     d86:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <fourPointCalc>
     d8a:	dc 01       	movw	r26, r24
				break;
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <localization_calc+0x18e>
				
			case 3 : 
				//calcPointer = threePointCalc(points);
				calcPointer = &rc[0];
     d8e:	a0 e7       	ldi	r26, 0x70	; 112
     d90:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				calcPointer = &rc[0];
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     d92:	4d 91       	ld	r20, X+
     d94:	5d 91       	ld	r21, X+
     d96:	6d 91       	ld	r22, X+
     d98:	7c 91       	ld	r23, X
     d9a:	13 97       	sbiw	r26, 0x03	; 3
     d9c:	e4 e6       	ldi	r30, 0x64	; 100
     d9e:	f1 e0       	ldi	r31, 0x01	; 1
     da0:	40 83       	st	Z, r20
     da2:	51 83       	std	Z+1, r21	; 0x01
     da4:	62 83       	std	Z+2, r22	; 0x02
     da6:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     da8:	14 96       	adiw	r26, 0x04	; 4
     daa:	4d 91       	ld	r20, X+
     dac:	5d 91       	ld	r21, X+
     dae:	6d 91       	ld	r22, X+
     db0:	7c 91       	ld	r23, X
     db2:	17 97       	sbiw	r26, 0x07	; 7
     db4:	44 83       	std	Z+4, r20	; 0x04
     db6:	55 83       	std	Z+5, r21	; 0x05
     db8:	66 83       	std	Z+6, r22	; 0x06
     dba:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     dbc:	18 96       	adiw	r26, 0x08	; 8
     dbe:	8d 91       	ld	r24, X+
     dc0:	9d 91       	ld	r25, X+
     dc2:	0d 90       	ld	r0, X+
     dc4:	bc 91       	ld	r27, X
     dc6:	a0 2d       	mov	r26, r0
     dc8:	80 87       	std	Z+8, r24	; 0x08
     dca:	91 87       	std	Z+9, r25	; 0x09
     dcc:	a2 87       	std	Z+10, r26	; 0x0a
     dce:	b3 87       	std	Z+11, r27	; 0x0b
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	fe be       	out	0x3e, r15	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	ed be       	out	0x3d, r14	; 61
     dda:	22 c0       	rjmp	.+68     	; 0xe20 <localization_calc+0x21c>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     ddc:	fb 01       	movw	r30, r22
     dde:	80 81       	ld	r24, Z
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	a2 81       	ldd	r26, Z+2	; 0x02
     de4:	b3 81       	ldd	r27, Z+3	; 0x03
     de6:	e4 e6       	ldi	r30, 0x64	; 100
     de8:	f1 e0       	ldi	r31, 0x01	; 1
     dea:	80 83       	st	Z, r24
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	a2 83       	std	Z+2, r26	; 0x02
     df0:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     df2:	db 01       	movw	r26, r22
     df4:	14 96       	adiw	r26, 0x04	; 4
     df6:	cd 90       	ld	r12, X+
     df8:	dd 90       	ld	r13, X+
     dfa:	ed 90       	ld	r14, X+
     dfc:	fc 90       	ld	r15, X
     dfe:	17 97       	sbiw	r26, 0x07	; 7
     e00:	c4 82       	std	Z+4, r12	; 0x04
     e02:	d5 82       	std	Z+5, r13	; 0x05
     e04:	e6 82       	std	Z+6, r14	; 0x06
     e06:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];
     e08:	18 96       	adiw	r26, 0x08	; 8
     e0a:	4d 91       	ld	r20, X+
     e0c:	5d 91       	ld	r21, X+
     e0e:	6d 91       	ld	r22, X+
     e10:	7c 91       	ld	r23, X
     e12:	1b 97       	sbiw	r26, 0x0b	; 11
     e14:	40 87       	std	Z+8, r20	; 0x08
     e16:	51 87       	std	Z+9, r21	; 0x09
     e18:	62 87       	std	Z+10, r22	; 0x0a
     e1a:	73 87       	std	Z+11, r23	; 0x0b
		m_red(OFF);	
     e1c:	6e 9a       	sbi	0x0d, 6	; 13
     e1e:	76 9a       	sbi	0x0e, 6	; 14
	
	return robotCenter;
	
	
	
}
     e20:	84 e6       	ldi	r24, 0x64	; 100
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	1e bf       	out	0x3e, r17	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0d bf       	out	0x3d, r16	; 61
     e2e:	68 96       	adiw	r28, 0x18	; 24
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	cf 90       	pop	r12
     e4a:	bf 90       	pop	r11
     e4c:	af 90       	pop	r10
     e4e:	7f 90       	pop	r7
     e50:	6f 90       	pop	r6
     e52:	5f 90       	pop	r5
     e54:	4f 90       	pop	r4
     e56:	08 95       	ret

00000e58 <motor_update>:
Initialization of Subsystem Components
************************************************************/

/* Called On Timer 3 Rollover */
void motor_update(void)
{
     e58:	af 92       	push	r10
     e5a:	bf 92       	push	r11
     e5c:	cf 92       	push	r12
     e5e:	df 92       	push	r13
     e60:	ef 92       	push	r14
     e62:	ff 92       	push	r15
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
	set(TIFR3,OCF3A);		// Reset flag
     e68:	c1 9a       	sbi	0x18, 1	; 24
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd); // Update control
     e6a:	a0 90 08 01 	lds	r10, 0x0108
     e6e:	b0 90 09 01 	lds	r11, 0x0109
     e72:	c0 90 0a 01 	lds	r12, 0x010A
     e76:	d0 90 0b 01 	lds	r13, 0x010B
     e7a:	e0 90 0c 01 	lds	r14, 0x010C
     e7e:	f0 90 0d 01 	lds	r15, 0x010D
     e82:	00 91 0e 01 	lds	r16, 0x010E
     e86:	10 91 0f 01 	lds	r17, 0x010F
     e8a:	20 91 a1 01 	lds	r18, 0x01A1
     e8e:	30 91 a2 01 	lds	r19, 0x01A2
     e92:	40 91 a3 01 	lds	r20, 0x01A3
     e96:	50 91 a4 01 	lds	r21, 0x01A4
     e9a:	60 91 a5 01 	lds	r22, 0x01A5
     e9e:	70 91 a6 01 	lds	r23, 0x01A6
     ea2:	80 91 a7 01 	lds	r24, 0x01A7
     ea6:	90 91 a8 01 	lds	r25, 0x01A8
     eaa:	e0 91 9c 01 	lds	r30, 0x019C
     eae:	ef 93       	push	r30
     eb0:	e0 91 9b 01 	lds	r30, 0x019B
     eb4:	ef 93       	push	r30
     eb6:	e0 91 9a 01 	lds	r30, 0x019A
     eba:	ef 93       	push	r30
     ebc:	e0 91 99 01 	lds	r30, 0x0199
     ec0:	ef 93       	push	r30
     ec2:	e0 91 03 01 	lds	r30, 0x0103
     ec6:	ef 93       	push	r30
     ec8:	e0 91 02 01 	lds	r30, 0x0102
     ecc:	ef 93       	push	r30
     ece:	e0 91 01 01 	lds	r30, 0x0101
     ed2:	ef 93       	push	r30
     ed4:	e0 91 00 01 	lds	r30, 0x0100
     ed8:	ef 93       	push	r30
     eda:	e0 91 a0 01 	lds	r30, 0x01A0
     ede:	ef 93       	push	r30
     ee0:	e0 91 9f 01 	lds	r30, 0x019F
     ee4:	ef 93       	push	r30
     ee6:	e0 91 9e 01 	lds	r30, 0x019E
     eea:	ef 93       	push	r30
     eec:	e0 91 9d 01 	lds	r30, 0x019D
     ef0:	ef 93       	push	r30
     ef2:	e0 91 07 01 	lds	r30, 0x0107
     ef6:	ef 93       	push	r30
     ef8:	e0 91 06 01 	lds	r30, 0x0106
     efc:	ef 93       	push	r30
     efe:	e0 91 05 01 	lds	r30, 0x0105
     f02:	ef 93       	push	r30
     f04:	e0 91 04 01 	lds	r30, 0x0104
     f08:	ef 93       	push	r30
     f0a:	0e 94 c3 0a 	call	0x1586	; 0x1586 <run_motor_control_loop>
     f0e:	8d b7       	in	r24, 0x3d	; 61
     f10:	9e b7       	in	r25, 0x3e	; 62
     f12:	40 96       	adiw	r24, 0x10	; 16
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	9e bf       	out	0x3e, r25	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	8d bf       	out	0x3d, r24	; 61
}
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	ff 90       	pop	r15
     f24:	ef 90       	pop	r14
     f26:	df 90       	pop	r13
     f28:	cf 90       	pop	r12
     f2a:	bf 90       	pop	r11
     f2c:	af 90       	pop	r10
     f2e:	08 95       	ret

00000f30 <bot_behavior_update>:

/* Update Targets, Gains, and Max Vals */
void bot_behavior_update()
{
	if (has_puck())
     f30:	0e 94 71 12 	call	0x24e2	; 0x24e2 <has_puck>
     f34:	88 23       	and	r24, r24
     f36:	c9 f1       	breq	.+114    	; 0xfaa <bot_behavior_update+0x7a>
	{
		x_target = x_goal;
     f38:	80 91 88 01 	lds	r24, 0x0188
     f3c:	90 91 89 01 	lds	r25, 0x0189
     f40:	a0 91 8a 01 	lds	r26, 0x018A
     f44:	b0 91 8b 01 	lds	r27, 0x018B
     f48:	80 93 a5 01 	sts	0x01A5, r24
     f4c:	90 93 a6 01 	sts	0x01A6, r25
     f50:	a0 93 a7 01 	sts	0x01A7, r26
     f54:	b0 93 a8 01 	sts	0x01A8, r27
		y_target = y_goal;
     f58:	80 91 84 01 	lds	r24, 0x0184
     f5c:	90 91 85 01 	lds	r25, 0x0185
     f60:	a0 91 86 01 	lds	r26, 0x0186
     f64:	b0 91 87 01 	lds	r27, 0x0187
     f68:	80 93 a1 01 	sts	0x01A1, r24
     f6c:	90 93 a2 01 	sts	0x01A2, r25
     f70:	a0 93 a3 01 	sts	0x01A3, r26
     f74:	b0 93 a4 01 	sts	0x01A4, r27
		max_theta = M_PI/2;
     f78:	8b ed       	ldi	r24, 0xDB	; 219
     f7a:	9f e0       	ldi	r25, 0x0F	; 15
     f7c:	a9 ec       	ldi	r26, 0xC9	; 201
     f7e:	bf e3       	ldi	r27, 0x3F	; 63
     f80:	80 93 08 01 	sts	0x0108, r24
     f84:	90 93 09 01 	sts	0x0109, r25
     f88:	a0 93 0a 01 	sts	0x010A, r26
     f8c:	b0 93 0b 01 	sts	0x010B, r27
		max_duty_cycle = 0.5;
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a0 e0       	ldi	r26, 0x00	; 0
     f96:	bf e3       	ldi	r27, 0x3F	; 63
     f98:	80 93 0c 01 	sts	0x010C, r24
     f9c:	90 93 0d 01 	sts	0x010D, r25
     fa0:	a0 93 0e 01 	sts	0x010E, r26
     fa4:	b0 93 0f 01 	sts	0x010F, r27
		return;
     fa8:	08 95       	ret
	}
	
	if (!has_puck())
     faa:	0e 94 71 12 	call	0x24e2	; 0x24e2 <has_puck>
     fae:	81 11       	cpse	r24, r1
     fb0:	38 c0       	rjmp	.+112    	; 0x1022 <bot_behavior_update+0xf2>
	{
		x_target = x_puck;
     fb2:	80 91 80 01 	lds	r24, 0x0180
     fb6:	90 91 81 01 	lds	r25, 0x0181
     fba:	a0 91 82 01 	lds	r26, 0x0182
     fbe:	b0 91 83 01 	lds	r27, 0x0183
     fc2:	80 93 a5 01 	sts	0x01A5, r24
     fc6:	90 93 a6 01 	sts	0x01A6, r25
     fca:	a0 93 a7 01 	sts	0x01A7, r26
     fce:	b0 93 a8 01 	sts	0x01A8, r27
		y_target = y_puck;
     fd2:	80 91 7c 01 	lds	r24, 0x017C
     fd6:	90 91 7d 01 	lds	r25, 0x017D
     fda:	a0 91 7e 01 	lds	r26, 0x017E
     fde:	b0 91 7f 01 	lds	r27, 0x017F
     fe2:	80 93 a1 01 	sts	0x01A1, r24
     fe6:	90 93 a2 01 	sts	0x01A2, r25
     fea:	a0 93 a3 01 	sts	0x01A3, r26
     fee:	b0 93 a4 01 	sts	0x01A4, r27
		max_theta = M_PI;
     ff2:	8b ed       	ldi	r24, 0xDB	; 219
     ff4:	9f e0       	ldi	r25, 0x0F	; 15
     ff6:	a9 e4       	ldi	r26, 0x49	; 73
     ff8:	b0 e4       	ldi	r27, 0x40	; 64
     ffa:	80 93 08 01 	sts	0x0108, r24
     ffe:	90 93 09 01 	sts	0x0109, r25
    1002:	a0 93 0a 01 	sts	0x010A, r26
    1006:	b0 93 0b 01 	sts	0x010B, r27
		max_duty_cycle = 0.3;
    100a:	8a e9       	ldi	r24, 0x9A	; 154
    100c:	99 e9       	ldi	r25, 0x99	; 153
    100e:	a9 e9       	ldi	r26, 0x99	; 153
    1010:	be e3       	ldi	r27, 0x3E	; 62
    1012:	80 93 0c 01 	sts	0x010C, r24
    1016:	90 93 0d 01 	sts	0x010D, r25
    101a:	a0 93 0e 01 	sts	0x010E, r26
    101e:	b0 93 0f 01 	sts	0x010F, r27
    1022:	08 95       	ret

00001024 <adc_update>:
	}
}

/* Called on ADC Conversion Completion */
void adc_update(void)
{
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	28 97       	sbiw	r28, 0x08	; 8
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
	set(ADCSRA,ADIF);	 // Reset flag
    1038:	ea e7       	ldi	r30, 0x7A	; 122
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 61       	ori	r24, 0x10	; 16
    1040:	80 83       	st	Z, r24
	if(adc_switch()){
    1042:	0e 94 81 12 	call	0x2502	; 0x2502 <adc_switch>
    1046:	88 23       	and	r24, r24
    1048:	e1 f0       	breq	.+56     	; 0x1082 <adc_update+0x5e>
		float puck_buffer[2];
		get_puck_location(puck_buffer);
    104a:	ce 01       	movw	r24, r28
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	0e 94 a3 11 	call	0x2346	; 0x2346 <get_puck_location>
// 		m_usb_tx_string("\nPuck Vector: x= ");
// 		m_usb_tx_int((int)(puck_buffer[0]));
// 		m_usb_tx_string("  y= ");
// 		m_usb_tx_int((int)(puck_buffer[1]));
		x_puck = puck_buffer[0];
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	ab 81       	ldd	r26, Y+3	; 0x03
    1058:	bc 81       	ldd	r27, Y+4	; 0x04
    105a:	80 93 80 01 	sts	0x0180, r24
    105e:	90 93 81 01 	sts	0x0181, r25
    1062:	a0 93 82 01 	sts	0x0182, r26
    1066:	b0 93 83 01 	sts	0x0183, r27
		y_puck = puck_buffer[1];
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	af 81       	ldd	r26, Y+7	; 0x07
    1070:	b8 85       	ldd	r27, Y+8	; 0x08
    1072:	80 93 7c 01 	sts	0x017C, r24
    1076:	90 93 7d 01 	sts	0x017D, r25
    107a:	a0 93 7e 01 	sts	0x017E, r26
    107e:	b0 93 7f 01 	sts	0x017F, r27
	}
}
    1082:	28 96       	adiw	r28, 0x08	; 8
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <comm_test>:
		break;
	}
}

void comm_test(void)
{
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	2c 97       	sbiw	r28, 0x0c	; 12
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
	/* Assign Defending goal */
	update_position();
    10a8:	0e 94 c3 09 	call	0x1386	; 0x1386 <update_position>
	float position_buffer[3];
	get_position(position_buffer);
    10ac:	ce 01       	movw	r24, r28
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <get_position>
	if (position_buffer[0]>0) {
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	a9 01       	movw	r20, r18
    10ba:	69 81       	ldd	r22, Y+1	; 0x01
    10bc:	7a 81       	ldd	r23, Y+2	; 0x02
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	9c 81       	ldd	r25, Y+4	; 0x04
    10c2:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <__gesf2>
    10c6:	18 16       	cp	r1, r24
    10c8:	6c f4       	brge	.+26     	; 0x10e4 <comm_test+0x50>
		x_goal = -1*GOAL_X_DIST;
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	af ea       	ldi	r26, 0xAF	; 175
    10d0:	b3 ec       	ldi	r27, 0xC3	; 195
    10d2:	80 93 88 01 	sts	0x0188, r24
    10d6:	90 93 89 01 	sts	0x0189, r25
    10da:	a0 93 8a 01 	sts	0x018A, r26
    10de:	b0 93 8b 01 	sts	0x018B, r27
    10e2:	0c c0       	rjmp	.+24     	; 0x10fc <comm_test+0x68>
		} else {
		x_goal = GOAL_X_DIST;
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	af ea       	ldi	r26, 0xAF	; 175
    10ea:	b3 e4       	ldi	r27, 0x43	; 67
    10ec:	80 93 88 01 	sts	0x0188, r24
    10f0:	90 93 89 01 	sts	0x0189, r25
    10f4:	a0 93 8a 01 	sts	0x018A, r26
    10f8:	b0 93 8b 01 	sts	0x018B, r27
	}
	/* Flash color of LED for defending goal */
}
    10fc:	2c 96       	adiw	r28, 0x0c	; 12
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <play>:
void play(void)
{
	/* Light LED of defending goal */
	
	/* Play */
	set(TCCR1B,CS10);
    110e:	e1 e8       	ldi	r30, 0x81	; 129
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	81 60       	ori	r24, 0x01	; 1
    1116:	80 83       	st	Z, r24
    1118:	08 95       	ret

0000111a <pause>:
}

void pause(void)
{
	/* Stop within 3  seconds */
	clear(TCCR1B,CS10);
    111a:	e1 e8       	ldi	r30, 0x81	; 129
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8e 7f       	andi	r24, 0xFE	; 254
    1122:	80 83       	st	Z, r24
	clear(PORTB,0); // B0 Left motor off
    1124:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,2); // B2 Right motor off
    1126:	2a 98       	cbi	0x05, 2	; 5
    1128:	08 95       	ret

0000112a <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
    112a:	6e 9a       	sbi	0x0d, 6	; 13
    112c:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey();
    112e:	0e 94 09 01 	call	0x212	; 0x212 <initialize_robockey>
	pause();
    1132:	0e 94 8d 08 	call	0x111a	; 0x111a <pause>

	/* Confirm successful initialization(s) */
	m_green(ON);
    1136:	6a 9a       	sbi	0x0d, 2	; 13
    1138:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    113a:	ca e7       	ldi	r28, 0x7A	; 122
    113c:	d0 e0       	ldi	r29, 0x00	; 0
	/* Confirm successful initialization(s) */
	m_green(ON);

	/* Run */
	while (1){
		update_position();
    113e:	0e 94 c3 09 	call	0x1386	; 0x1386 <update_position>
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    1142:	88 81       	ld	r24, Y
    1144:	84 fd       	sbrc	r24, 4
    1146:	0e 94 12 08 	call	0x1024	; 0x1024 <adc_update>
		bot_behavior_update();
    114a:	0e 94 98 07 	call	0xf30	; 0xf30 <bot_behavior_update>
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
    114e:	c1 9b       	sbis	0x18, 1	; 24
    1150:	f6 cf       	rjmp	.-20     	; 0x113e <main+0x14>
    1152:	0e 94 2c 07 	call	0xe58	; 0xe58 <motor_update>
    1156:	f3 cf       	rjmp	.-26     	; 0x113e <main+0x14>

00001158 <halftime>:
}

void halftime(void)
{
	/* Stop play */
	pause();
    1158:	0e 94 8d 08 	call	0x111a	; 0x111a <pause>
	
	/* Switch assigned goal */
	if (x_goal>0) {
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	a9 01       	movw	r20, r18
    1162:	60 91 88 01 	lds	r22, 0x0188
    1166:	70 91 89 01 	lds	r23, 0x0189
    116a:	80 91 8a 01 	lds	r24, 0x018A
    116e:	90 91 8b 01 	lds	r25, 0x018B
    1172:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <__gesf2>
    1176:	18 16       	cp	r1, r24
    1178:	6c f4       	brge	.+26     	; 0x1194 <halftime+0x3c>
		x_goal = -1*GOAL_X_DIST;
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	af ea       	ldi	r26, 0xAF	; 175
    1180:	b3 ec       	ldi	r27, 0xC3	; 195
    1182:	80 93 88 01 	sts	0x0188, r24
    1186:	90 93 89 01 	sts	0x0189, r25
    118a:	a0 93 8a 01 	sts	0x018A, r26
    118e:	b0 93 8b 01 	sts	0x018B, r27
    1192:	08 95       	ret
		} else {
		x_goal = GOAL_X_DIST;
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	af ea       	ldi	r26, 0xAF	; 175
    119a:	b3 e4       	ldi	r27, 0x43	; 67
    119c:	80 93 88 01 	sts	0x0188, r24
    11a0:	90 93 89 01 	sts	0x0189, r25
    11a4:	a0 93 8a 01 	sts	0x018A, r26
    11a8:	b0 93 8b 01 	sts	0x018B, r27
    11ac:	08 95       	ret

000011ae <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
    11ae:	e0 91 8e 01 	lds	r30, 0x018E
    11b2:	8e 2f       	mov	r24, r30
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	fc 01       	movw	r30, r24
    11b8:	e0 5a       	subi	r30, 0xA0	; 160
    11ba:	f1 09       	sbc	r31, r1
    11bc:	e8 30       	cpi	r30, 0x08	; 8
    11be:	f1 05       	cpc	r31, r1
    11c0:	40 f5       	brcc	.+80     	; 0x1212 <update_game_state+0x64>
    11c2:	ea 5a       	subi	r30, 0xAA	; 170
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__tablejump2__>
		case 0xA0: // Comm Test
		comm_test();
    11ca:	0e 94 4a 08 	call	0x1094	; 0x1094 <comm_test>
		break;
    11ce:	08 95       	ret
		case 0xA1: // Play
		play();
    11d0:	0e 94 87 08 	call	0x110e	; 0x110e <play>
		break;
    11d4:	08 95       	ret
		case 0xA2: // Goal R
		SR = buffer[1];
    11d6:	ef e8       	ldi	r30, 0x8F	; 143
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
    11da:	81 81       	ldd	r24, Z+1	; 0x01
    11dc:	80 93 8d 01 	sts	0x018D, r24
		SB = buffer[2];
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	80 93 8c 01 	sts	0x018C, r24
		pause();
    11e6:	0e 94 8d 08 	call	0x111a	; 0x111a <pause>
		break;
    11ea:	08 95       	ret
		case 0xA3: // Goal B
		SR = buffer[1];
    11ec:	ef e8       	ldi	r30, 0x8F	; 143
    11ee:	f1 e0       	ldi	r31, 0x01	; 1
    11f0:	81 81       	ldd	r24, Z+1	; 0x01
    11f2:	80 93 8d 01 	sts	0x018D, r24
		SB = buffer[2];
    11f6:	82 81       	ldd	r24, Z+2	; 0x02
    11f8:	80 93 8c 01 	sts	0x018C, r24
		pause();
    11fc:	0e 94 8d 08 	call	0x111a	; 0x111a <pause>
		break;
    1200:	08 95       	ret
		case 0xA4: // Pause
		pause();
    1202:	0e 94 8d 08 	call	0x111a	; 0x111a <pause>
		break;
    1206:	08 95       	ret
		case 0xA6: // Halftime
		halftime();
    1208:	0e 94 ac 08 	call	0x1158	; 0x1158 <halftime>
		break;
    120c:	08 95       	ret
}

void game_over(void)
{
	// Stop play
	pause();
    120e:	0e 94 8d 08 	call	0x111a	; 0x111a <pause>
    1212:	08 95       	ret

00001214 <wireless_recieve>:
}

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    1214:	6a e0       	ldi	r22, 0x0A	; 10
    1216:	8f e8       	ldi	r24, 0x8F	; 143
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <m_rf_read>
	game_state = buffer[0];
    121e:	80 91 8f 01 	lds	r24, 0x018F
    1222:	80 93 8e 01 	sts	0x018E, r24
	update_game_state();
    1226:	0e 94 d7 08 	call	0x11ae	; 0x11ae <update_game_state>
    122a:	08 95       	ret

0000122c <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    1236:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
    1238:	2a 9a       	sbi	0x05, 2	; 5
}
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	0f 90       	pop	r0
    1240:	1f 90       	pop	r1
    1242:	18 95       	reti

00001244 <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    1244:	1f 92       	push	r1
    1246:	0f 92       	push	r0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    124e:	28 98       	cbi	0x05, 0	; 5
}
    1250:	0f 90       	pop	r0
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	0f 90       	pop	r0
    1256:	1f 90       	pop	r1
    1258:	18 95       	reti

0000125a <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    125a:	1f 92       	push	r1
    125c:	0f 92       	push	r0
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	0f 92       	push	r0
    1262:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    1264:	2a 98       	cbi	0x05, 2	; 5
}
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	0f 90       	pop	r0
    126c:	1f 90       	pop	r1
    126e:	18 95       	reti

00001270 <__vector_3>:

/* Recieve Wireless Comm */
ISR(INT2_vect){
    1270:	1f 92       	push	r1
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	0f 92       	push	r0
    1278:	11 24       	eor	r1, r1
    127a:	2f 93       	push	r18
    127c:	3f 93       	push	r19
    127e:	4f 93       	push	r20
    1280:	5f 93       	push	r21
    1282:	6f 93       	push	r22
    1284:	7f 93       	push	r23
    1286:	8f 93       	push	r24
    1288:	9f 93       	push	r25
    128a:	af 93       	push	r26
    128c:	bf 93       	push	r27
    128e:	ef 93       	push	r30
    1290:	ff 93       	push	r31
	wireless_recieve();
    1292:	0e 94 0a 09 	call	0x1214	; 0x1214 <wireless_recieve>
}
    1296:	ff 91       	pop	r31
    1298:	ef 91       	pop	r30
    129a:	bf 91       	pop	r27
    129c:	af 91       	pop	r26
    129e:	9f 91       	pop	r25
    12a0:	8f 91       	pop	r24
    12a2:	7f 91       	pop	r23
    12a4:	6f 91       	pop	r22
    12a6:	5f 91       	pop	r21
    12a8:	4f 91       	pop	r20
    12aa:	3f 91       	pop	r19
    12ac:	2f 91       	pop	r18
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <get_position>:
/************************************************************
Public Functions
************************************************************/

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    12b8:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    12ba:	80 91 b9 01 	lds	r24, 0x01B9
    12be:	90 91 ba 01 	lds	r25, 0x01BA
    12c2:	a0 91 bb 01 	lds	r26, 0x01BB
    12c6:	b0 91 bc 01 	lds	r27, 0x01BC
    12ca:	80 83       	st	Z, r24
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	a2 83       	std	Z+2, r26	; 0x02
    12d0:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    12d2:	80 91 b5 01 	lds	r24, 0x01B5
    12d6:	90 91 b6 01 	lds	r25, 0x01B6
    12da:	a0 91 b7 01 	lds	r26, 0x01B7
    12de:	b0 91 b8 01 	lds	r27, 0x01B8
    12e2:	84 83       	std	Z+4, r24	; 0x04
    12e4:	95 83       	std	Z+5, r25	; 0x05
    12e6:	a6 83       	std	Z+6, r26	; 0x06
    12e8:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    12ea:	80 91 b1 01 	lds	r24, 0x01B1
    12ee:	90 91 b2 01 	lds	r25, 0x01B2
    12f2:	a0 91 b3 01 	lds	r26, 0x01B3
    12f6:	b0 91 b4 01 	lds	r27, 0x01B4
    12fa:	80 87       	std	Z+8, r24	; 0x08
    12fc:	91 87       	std	Z+9, r25	; 0x09
    12fe:	a2 87       	std	Z+10, r26	; 0x0a
    1300:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	08 95       	ret

00001306 <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    1306:	8f 92       	push	r8
    1308:	9f 92       	push	r9
    130a:	af 92       	push	r10
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	6b 01       	movw	r12, r22
    1318:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    131a:	4b 01       	movw	r8, r22
    131c:	5c 01       	movw	r10, r24
    131e:	e8 94       	clt
    1320:	b7 f8       	bld	r11, 7
    1322:	2b ed       	ldi	r18, 0xDB	; 219
    1324:	3f e0       	ldi	r19, 0x0F	; 15
    1326:	49 e4       	ldi	r20, 0x49	; 73
    1328:	50 e4       	ldi	r21, 0x40	; 64
    132a:	c5 01       	movw	r24, r10
    132c:	b4 01       	movw	r22, r8
    132e:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <__gesf2>
    1332:	18 16       	cp	r1, r24
    1334:	bc f4       	brge	.+46     	; 0x1364 <theta_error_correction+0x5e>
    1336:	2b ed       	ldi	r18, 0xDB	; 219
    1338:	3f e0       	ldi	r19, 0x0F	; 15
    133a:	49 ec       	ldi	r20, 0xC9	; 201
    133c:	50 e4       	ldi	r21, 0x40	; 64
    133e:	c7 01       	movw	r24, r14
    1340:	b6 01       	movw	r22, r12
    1342:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    1346:	a5 01       	movw	r20, r10
    1348:	94 01       	movw	r18, r8
    134a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__divsf3>
    134e:	9b 01       	movw	r18, r22
    1350:	ac 01       	movw	r20, r24
    1352:	c7 01       	movw	r24, r14
    1354:	b6 01       	movw	r22, r12
    1356:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
    135a:	56 2f       	mov	r21, r22
    135c:	47 2f       	mov	r20, r23
    135e:	38 2f       	mov	r19, r24
    1360:	29 2f       	mov	r18, r25
    1362:	04 c0       	rjmp	.+8      	; 0x136c <theta_error_correction+0x66>
	else{return error;}
    1364:	5c 2d       	mov	r21, r12
    1366:	4d 2d       	mov	r20, r13
    1368:	3e 2d       	mov	r19, r14
    136a:	2f 2d       	mov	r18, r15
}
    136c:	65 2f       	mov	r22, r21
    136e:	74 2f       	mov	r23, r20
    1370:	83 2f       	mov	r24, r19
    1372:	92 2f       	mov	r25, r18
    1374:	ff 90       	pop	r15
    1376:	ef 90       	pop	r14
    1378:	df 90       	pop	r13
    137a:	cf 90       	pop	r12
    137c:	bf 90       	pop	r11
    137e:	af 90       	pop	r10
    1380:	9f 90       	pop	r9
    1382:	8f 90       	pop	r8
    1384:	08 95       	ret

00001386 <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    1386:	2f 92       	push	r2
    1388:	3f 92       	push	r3
    138a:	4f 92       	push	r4
    138c:	5f 92       	push	r5
    138e:	6f 92       	push	r6
    1390:	7f 92       	push	r7
    1392:	8f 92       	push	r8
    1394:	9f 92       	push	r9
    1396:	af 92       	push	r10
    1398:	bf 92       	push	r11
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	a8 97       	sbiw	r28, 0x28	; 40
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    13ba:	ce 01       	movw	r24, r28
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	0e 94 10 11 	call	0x2220	; 0x2220 <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    13c2:	6b 81       	ldd	r22, Y+3	; 0x03
    13c4:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    13c6:	0f 81       	ldd	r16, Y+7	; 0x07
    13c8:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    13ca:	49 85       	ldd	r20, Y+9	; 0x09
    13cc:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    13ce:	ad 85       	ldd	r26, Y+13	; 0x0d
    13d0:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    13d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    13d4:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    13d6:	eb 89       	ldd	r30, Y+19	; 0x13
    13d8:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    13da:	8d 89       	ldd	r24, Y+21	; 0x15
    13dc:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    13de:	e9 80       	ldd	r14, Y+1	; 0x01
    13e0:	fa 80       	ldd	r15, Y+2	; 0x02
    13e2:	fa 8e       	std	Y+26, r15	; 0x1a
    13e4:	e9 8e       	std	Y+25, r14	; 0x19
    13e6:	1c 8f       	std	Y+28, r17	; 0x1c
    13e8:	0b 8f       	std	Y+27, r16	; 0x1b
    13ea:	be 8f       	std	Y+30, r27	; 0x1e
    13ec:	ad 8f       	std	Y+29, r26	; 0x1d
    13ee:	f8 a3       	std	Y+32, r31	; 0x20
    13f0:	ef 8f       	std	Y+31, r30	; 0x1f
    13f2:	7a a3       	std	Y+34, r23	; 0x22
    13f4:	69 a3       	std	Y+33, r22	; 0x21
    13f6:	5c a3       	std	Y+36, r21	; 0x24
    13f8:	4b a3       	std	Y+35, r20	; 0x23
    13fa:	3e a3       	std	Y+38, r19	; 0x26
    13fc:	2d a3       	std	Y+37, r18	; 0x25
    13fe:	98 a7       	std	Y+40, r25	; 0x28
    1400:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    1402:	68 e1       	ldi	r22, 0x18	; 24
    1404:	71 e0       	ldi	r23, 0x01	; 1
    1406:	ce 01       	movw	r24, r28
    1408:	49 96       	adiw	r24, 0x19	; 25
    140a:	0e 94 02 06 	call	0xc04	; 0xc04 <localization_calc>
    140e:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    1410:	fc 01       	movw	r30, r24
    1412:	80 85       	ldd	r24, Z+8	; 0x08
    1414:	91 85       	ldd	r25, Z+9	; 0x09
    1416:	a2 85       	ldd	r26, Z+10	; 0x0a
    1418:	b3 85       	ldd	r27, Z+11	; 0x0b
    141a:	0f 2e       	mov	r0, r31
    141c:	f8 e1       	ldi	r31, 0x18	; 24
    141e:	2f 2e       	mov	r2, r31
    1420:	f1 e0       	ldi	r31, 0x01	; 1
    1422:	3f 2e       	mov	r3, r31
    1424:	f0 2d       	mov	r31, r0
    1426:	f1 01       	movw	r30, r2
    1428:	80 87       	std	Z+8, r24	; 0x08
    142a:	91 87       	std	Z+9, r25	; 0x09
    142c:	a2 87       	std	Z+10, r26	; 0x0a
    142e:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    1430:	f8 01       	movw	r30, r16
    1432:	60 85       	ldd	r22, Z+8	; 0x08
    1434:	71 85       	ldd	r23, Z+9	; 0x09
    1436:	82 85       	ldd	r24, Z+10	; 0x0a
    1438:	93 85       	ldd	r25, Z+11	; 0x0b
    143a:	0e 94 83 09 	call	0x1306	; 0x1306 <theta_error_correction>
    143e:	2b 01       	movw	r4, r22
    1440:	3c 01       	movw	r6, r24
    1442:	f8 01       	movw	r30, r16
    1444:	60 87       	std	Z+8, r22	; 0x08
    1446:	71 87       	std	Z+9, r23	; 0x09
    1448:	82 87       	std	Z+10, r24	; 0x0a
    144a:	93 87       	std	Z+11, r25	; 0x0b
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    144c:	24 ea       	ldi	r18, 0xA4	; 164
    144e:	30 e7       	ldi	r19, 0x70	; 112
    1450:	4d e7       	ldi	r20, 0x7D	; 125
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	60 81       	ld	r22, Z
    1456:	71 81       	ldd	r23, Z+1	; 0x01
    1458:	82 81       	ldd	r24, Z+2	; 0x02
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    1460:	4b 01       	movw	r8, r22
    1462:	5c 01       	movw	r10, r24
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	37 ed       	ldi	r19, 0xD7	; 215
    1468:	43 e2       	ldi	r20, 0x23	; 35
    146a:	5c e3       	ldi	r21, 0x3C	; 60
    146c:	60 91 b9 01 	lds	r22, 0x01B9
    1470:	70 91 ba 01 	lds	r23, 0x01BA
    1474:	80 91 bb 01 	lds	r24, 0x01BB
    1478:	90 91 bc 01 	lds	r25, 0x01BC
    147c:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    1480:	9b 01       	movw	r18, r22
    1482:	ac 01       	movw	r20, r24
    1484:	c5 01       	movw	r24, r10
    1486:	b4 01       	movw	r22, r8
    1488:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
    148c:	4b 01       	movw	r8, r22
    148e:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    1490:	60 93 b9 01 	sts	0x01B9, r22
    1494:	70 93 ba 01 	sts	0x01BA, r23
    1498:	80 93 bb 01 	sts	0x01BB, r24
    149c:	90 93 bc 01 	sts	0x01BC, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    14a0:	24 ea       	ldi	r18, 0xA4	; 164
    14a2:	30 e7       	ldi	r19, 0x70	; 112
    14a4:	4d e7       	ldi	r20, 0x7D	; 125
    14a6:	5f e3       	ldi	r21, 0x3F	; 63
    14a8:	f8 01       	movw	r30, r16
    14aa:	64 81       	ldd	r22, Z+4	; 0x04
    14ac:	75 81       	ldd	r23, Z+5	; 0x05
    14ae:	86 81       	ldd	r24, Z+6	; 0x06
    14b0:	97 81       	ldd	r25, Z+7	; 0x07
    14b2:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    14b6:	6b 01       	movw	r12, r22
    14b8:	7c 01       	movw	r14, r24
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	37 ed       	ldi	r19, 0xD7	; 215
    14be:	43 e2       	ldi	r20, 0x23	; 35
    14c0:	5c e3       	ldi	r21, 0x3C	; 60
    14c2:	60 91 b5 01 	lds	r22, 0x01B5
    14c6:	70 91 b6 01 	lds	r23, 0x01B6
    14ca:	80 91 b7 01 	lds	r24, 0x01B7
    14ce:	90 91 b8 01 	lds	r25, 0x01B8
    14d2:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    14d6:	9b 01       	movw	r18, r22
    14d8:	ac 01       	movw	r20, r24
    14da:	c7 01       	movw	r24, r14
    14dc:	b6 01       	movw	r22, r12
    14de:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
    14e2:	6b 01       	movw	r12, r22
    14e4:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    14e6:	60 93 b5 01 	sts	0x01B5, r22
    14ea:	70 93 b6 01 	sts	0x01B6, r23
    14ee:	80 93 b7 01 	sts	0x01B7, r24
    14f2:	90 93 b8 01 	sts	0x01B8, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    14f6:	24 ea       	ldi	r18, 0xA4	; 164
    14f8:	30 e7       	ldi	r19, 0x70	; 112
    14fa:	4d e7       	ldi	r20, 0x7D	; 125
    14fc:	5f e3       	ldi	r21, 0x3F	; 63
    14fe:	c3 01       	movw	r24, r6
    1500:	b2 01       	movw	r22, r4
    1502:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    1506:	2b 01       	movw	r4, r22
    1508:	3c 01       	movw	r6, r24
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	37 ed       	ldi	r19, 0xD7	; 215
    150e:	43 e2       	ldi	r20, 0x23	; 35
    1510:	5c e3       	ldi	r21, 0x3C	; 60
    1512:	60 91 b1 01 	lds	r22, 0x01B1
    1516:	70 91 b2 01 	lds	r23, 0x01B2
    151a:	80 91 b3 01 	lds	r24, 0x01B3
    151e:	90 91 b4 01 	lds	r25, 0x01B4
    1522:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    1526:	9b 01       	movw	r18, r22
    1528:	ac 01       	movw	r20, r24
    152a:	c3 01       	movw	r24, r6
    152c:	b2 01       	movw	r22, r4
    152e:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    1532:	60 93 b1 01 	sts	0x01B1, r22
    1536:	70 93 b2 01 	sts	0x01B2, r23
    153a:	80 93 b3 01 	sts	0x01B3, r24
    153e:	90 93 b4 01 	sts	0x01B4, r25
	
	robotCenterPrev[0] = x;
    1542:	f1 01       	movw	r30, r2
    1544:	80 82       	st	Z, r8
    1546:	91 82       	std	Z+1, r9	; 0x01
    1548:	a2 82       	std	Z+2, r10	; 0x02
    154a:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    154c:	c4 82       	std	Z+4, r12	; 0x04
    154e:	d5 82       	std	Z+5, r13	; 0x05
    1550:	e6 82       	std	Z+6, r14	; 0x06
    1552:	f7 82       	std	Z+7, r15	; 0x07
}
    1554:	a8 96       	adiw	r28, 0x28	; 40
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	df 90       	pop	r13
    156e:	cf 90       	pop	r12
    1570:	bf 90       	pop	r11
    1572:	af 90       	pop	r10
    1574:	9f 90       	pop	r9
    1576:	8f 90       	pop	r8
    1578:	7f 90       	pop	r7
    157a:	6f 90       	pop	r6
    157c:	5f 90       	pop	r5
    157e:	4f 90       	pop	r4
    1580:	3f 90       	pop	r3
    1582:	2f 90       	pop	r2
    1584:	08 95       	ret

00001586 <run_motor_control_loop>:



/* PID Control */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd)
{
    1586:	4f 92       	push	r4
    1588:	5f 92       	push	r5
    158a:	6f 92       	push	r6
    158c:	7f 92       	push	r7
    158e:	8f 92       	push	r8
    1590:	9f 92       	push	r9
    1592:	af 92       	push	r10
    1594:	bf 92       	push	r11
    1596:	cf 92       	push	r12
    1598:	df 92       	push	r13
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	64 97       	sbiw	r28, 0x14	; 20
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	29 01       	movw	r4, r18
    15b8:	3a 01       	movw	r6, r20
    15ba:	ed 86       	std	Y+13, r14	; 0x0d
    15bc:	fe 86       	std	Y+14, r15	; 0x0e
    15be:	0f 87       	std	Y+15, r16	; 0x0f
    15c0:	18 8b       	std	Y+16, r17	; 0x10
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    15c2:	20 91 b9 01 	lds	r18, 0x01B9
    15c6:	30 91 ba 01 	lds	r19, 0x01BA
    15ca:	40 91 bb 01 	lds	r20, 0x01BB
    15ce:	50 91 bc 01 	lds	r21, 0x01BC
    15d2:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
    15d6:	6d 83       	std	Y+5, r22	; 0x05
    15d8:	7e 83       	std	Y+6, r23	; 0x06
    15da:	8f 83       	std	Y+7, r24	; 0x07
    15dc:	98 87       	std	Y+8, r25	; 0x08
    15de:	20 91 b5 01 	lds	r18, 0x01B5
    15e2:	30 91 b6 01 	lds	r19, 0x01B6
    15e6:	40 91 b7 01 	lds	r20, 0x01B7
    15ea:	50 91 b8 01 	lds	r21, 0x01B8
    15ee:	c3 01       	movw	r24, r6
    15f0:	b2 01       	movw	r22, r4
    15f2:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
    15f6:	69 87       	std	Y+9, r22	; 0x09
    15f8:	7a 87       	std	Y+10, r23	; 0x0a
    15fa:	8b 87       	std	Y+11, r24	; 0x0b
    15fc:	9c 87       	std	Y+12, r25	; 0x0c
    15fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1600:	3e 81       	ldd	r19, Y+6	; 0x06
    1602:	4f 81       	ldd	r20, Y+7	; 0x07
    1604:	58 85       	ldd	r21, Y+8	; 0x08
    1606:	0e 94 9a 14 	call	0x2934	; 0x2934 <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    160a:	20 91 b1 01 	lds	r18, 0x01B1
    160e:	30 91 b2 01 	lds	r19, 0x01B2
    1612:	40 91 b3 01 	lds	r20, 0x01B3
    1616:	50 91 b4 01 	lds	r21, 0x01B4
    161a:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
	theta_error = theta_error_correction(theta_error);
    161e:	0e 94 83 09 	call	0x1306	; 0x1306 <theta_error_correction>
    1622:	69 83       	std	Y+1, r22	; 0x01
    1624:	7a 83       	std	Y+2, r23	; 0x02
    1626:	8b 83       	std	Y+3, r24	; 0x03
    1628:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    162a:	2b 01       	movw	r4, r22
    162c:	3c 01       	movw	r6, r24
    162e:	e8 94       	clt
    1630:	77 f8       	bld	r7, 7
    1632:	a6 01       	movw	r20, r12
    1634:	95 01       	movw	r18, r10
    1636:	c3 01       	movw	r24, r6
    1638:	b2 01       	movw	r22, r4
    163a:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <__gesf2>
    163e:	18 16       	cp	r1, r24
    1640:	84 f4       	brge	.+32     	; 0x1662 <run_motor_control_loop+0xdc>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    1642:	29 81       	ldd	r18, Y+1	; 0x01
    1644:	3a 81       	ldd	r19, Y+2	; 0x02
    1646:	4b 81       	ldd	r20, Y+3	; 0x03
    1648:	5c 81       	ldd	r21, Y+4	; 0x04
    164a:	c3 01       	movw	r24, r6
    164c:	b2 01       	movw	r22, r4
    164e:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__divsf3>
    1652:	a6 01       	movw	r20, r12
    1654:	95 01       	movw	r18, r10
    1656:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    165a:	69 83       	std	Y+1, r22	; 0x01
    165c:	7a 83       	std	Y+2, r23	; 0x02
    165e:	8b 83       	std	Y+3, r24	; 0x03
    1660:	9c 83       	std	Y+4, r25	; 0x04
	}

	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    1662:	29 81       	ldd	r18, Y+1	; 0x01
    1664:	3a 81       	ldd	r19, Y+2	; 0x02
    1666:	4b 81       	ldd	r20, Y+3	; 0x03
    1668:	5c 81       	ldd	r21, Y+4	; 0x04
    166a:	6f a1       	ldd	r22, Y+39	; 0x27
    166c:	78 a5       	ldd	r23, Y+40	; 0x28
    166e:	89 a5       	ldd	r24, Y+41	; 0x29
    1670:	9a a5       	ldd	r25, Y+42	; 0x2a
    1672:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    1676:	6b 01       	movw	r12, r22
    1678:	7c 01       	movw	r14, r24
	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
		theta_error = fabs(theta_error)/theta_error*max_theta;
	}

	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
    167a:	20 91 ad 01 	lds	r18, 0x01AD
    167e:	30 91 ae 01 	lds	r19, 0x01AE
    1682:	40 91 af 01 	lds	r20, 0x01AF
    1686:	50 91 b0 01 	lds	r21, 0x01B0
    168a:	69 81       	ldd	r22, Y+1	; 0x01
    168c:	7a 81       	ldd	r23, Y+2	; 0x02
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
    1696:	2f e6       	ldi	r18, 0x6F	; 111
    1698:	32 e1       	ldi	r19, 0x12	; 18
    169a:	43 e8       	ldi	r20, 0x83	; 131
    169c:	5a e3       	ldi	r21, 0x3A	; 58
    169e:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__divsf3>
    16a2:	9b 01       	movw	r18, r22
    16a4:	ac 01       	movw	r20, r24
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    16a6:	6b a5       	ldd	r22, Y+43	; 0x2b
    16a8:	7c a5       	ldd	r23, Y+44	; 0x2c
    16aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    16ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    16ae:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    16b2:	9b 01       	movw	r18, r22
    16b4:	ac 01       	movw	r20, r24
    16b6:	c7 01       	movw	r24, r14
    16b8:	b6 01       	movw	r22, r12
    16ba:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
	previous_theta_error = theta_error;
    16be:	29 81       	ldd	r18, Y+1	; 0x01
    16c0:	3a 81       	ldd	r19, Y+2	; 0x02
    16c2:	4b 81       	ldd	r20, Y+3	; 0x03
    16c4:	5c 81       	ldd	r21, Y+4	; 0x04
    16c6:	20 93 ad 01 	sts	0x01AD, r18
    16ca:	30 93 ae 01 	sts	0x01AE, r19
    16ce:	40 93 af 01 	sts	0x01AF, r20
    16d2:	50 93 b0 01 	sts	0x01B0, r21
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    16d6:	2b ed       	ldi	r18, 0xDB	; 219
    16d8:	3f e0       	ldi	r19, 0x0F	; 15
    16da:	49 e4       	ldi	r20, 0x49	; 73
    16dc:	50 e4       	ldi	r21, 0x40	; 64
    16de:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__divsf3>
    16e2:	2b 01       	movw	r4, r22
    16e4:	3c 01       	movw	r6, r24
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	b0 58       	subi	r27, 0x80	; 128
    16ec:	89 8b       	std	Y+17, r24	; 0x11
    16ee:	9a 8b       	std	Y+18, r25	; 0x12
    16f0:	ab 8b       	std	Y+19, r26	; 0x13
    16f2:	bc 8b       	std	Y+20, r27	; 0x14
	right_duty_cycle = angular_output;
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    16f4:	69 81       	ldd	r22, Y+1	; 0x01
    16f6:	7a 81       	ldd	r23, Y+2	; 0x02
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	0e 94 fe 14 	call	0x29fc	; 0x29fc <cos>
    1700:	6b 01       	movw	r12, r22
    1702:	7c 01       	movw	r14, r24
    1704:	29 85       	ldd	r18, Y+9	; 0x09
    1706:	3a 85       	ldd	r19, Y+10	; 0x0a
    1708:	4b 85       	ldd	r20, Y+11	; 0x0b
    170a:	5c 85       	ldd	r21, Y+12	; 0x0c
    170c:	ca 01       	movw	r24, r20
    170e:	b9 01       	movw	r22, r18
    1710:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    1714:	4b 01       	movw	r8, r22
    1716:	5c 01       	movw	r10, r24
    1718:	2d 81       	ldd	r18, Y+5	; 0x05
    171a:	3e 81       	ldd	r19, Y+6	; 0x06
    171c:	4f 81       	ldd	r20, Y+7	; 0x07
    171e:	58 85       	ldd	r21, Y+8	; 0x08
    1720:	ca 01       	movw	r24, r20
    1722:	b9 01       	movw	r22, r18
    1724:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    1728:	9b 01       	movw	r18, r22
    172a:	ac 01       	movw	r20, r24
    172c:	c5 01       	movw	r24, r10
    172e:	b4 01       	movw	r22, r8
    1730:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
    1734:	0e 94 44 17 	call	0x2e88	; 0x2e88 <sqrt>
    1738:	9b 01       	movw	r18, r22
    173a:	ac 01       	movw	r20, r24
    173c:	c7 01       	movw	r24, r14
    173e:	b6 01       	movw	r22, r12
    1740:	9f 77       	andi	r25, 0x7F	; 127
    1742:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    1746:	6b 01       	movw	r12, r22
    1748:	7c 01       	movw	r14, r24
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    174a:	9b 01       	movw	r18, r22
    174c:	ac 01       	movw	r20, r24
    174e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1750:	78 a9       	ldd	r23, Y+48	; 0x30
    1752:	89 a9       	ldd	r24, Y+49	; 0x31
    1754:	9a a9       	ldd	r25, Y+50	; 0x32
    1756:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    175a:	4b 01       	movw	r8, r22
    175c:	5c 01       	movw	r10, r24
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
    175e:	20 91 a9 01 	lds	r18, 0x01A9
    1762:	30 91 aa 01 	lds	r19, 0x01AA
    1766:	40 91 ab 01 	lds	r20, 0x01AB
    176a:	50 91 ac 01 	lds	r21, 0x01AC
    176e:	c7 01       	movw	r24, r14
    1770:	b6 01       	movw	r22, r12
    1772:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
    1776:	2f e6       	ldi	r18, 0x6F	; 111
    1778:	32 e1       	ldi	r19, 0x12	; 18
    177a:	43 e8       	ldi	r20, 0x83	; 131
    177c:	5a e3       	ldi	r21, 0x3A	; 58
    177e:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__divsf3>
    1782:	9b 01       	movw	r18, r22
    1784:	ac 01       	movw	r20, r24
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    1786:	6b a9       	ldd	r22, Y+51	; 0x33
    1788:	7c a9       	ldd	r23, Y+52	; 0x34
    178a:	8d a9       	ldd	r24, Y+53	; 0x35
    178c:	9e a9       	ldd	r25, Y+54	; 0x36
    178e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    1792:	9b 01       	movw	r18, r22
    1794:	ac 01       	movw	r20, r24
    1796:	c5 01       	movw	r24, r10
    1798:	b4 01       	movw	r22, r8
    179a:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
    179e:	4b 01       	movw	r8, r22
    17a0:	5c 01       	movw	r10, r24
	previous_linear_error = linear_error;
    17a2:	c0 92 a9 01 	sts	0x01A9, r12
    17a6:	d0 92 aa 01 	sts	0x01AA, r13
    17aa:	e0 92 ab 01 	sts	0x01AB, r14
    17ae:	f0 92 ac 01 	sts	0x01AC, r15
	if(linear_output>40.0){linear_output=40.0;}
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e2       	ldi	r20, 0x20	; 32
    17b8:	52 e4       	ldi	r21, 0x42	; 66
    17ba:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <__gesf2>
    17be:	18 16       	cp	r1, r24
    17c0:	44 f4       	brge	.+16     	; 0x17d2 <run_motor_control_loop+0x24c>
    17c2:	0f 2e       	mov	r0, r31
    17c4:	81 2c       	mov	r8, r1
    17c6:	91 2c       	mov	r9, r1
    17c8:	f0 e2       	ldi	r31, 0x20	; 32
    17ca:	af 2e       	mov	r10, r31
    17cc:	f2 e4       	ldi	r31, 0x42	; 66
    17ce:	bf 2e       	mov	r11, r31
    17d0:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	52 e4       	ldi	r21, 0x42	; 66
    17da:	c5 01       	movw	r24, r10
    17dc:	b4 01       	movw	r22, r8
    17de:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__divsf3>
    17e2:	6b 01       	movw	r12, r22
    17e4:	7c 01       	movw	r14, r24
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    17e6:	69 81       	ldd	r22, Y+1	; 0x01
    17e8:	7a 81       	ldd	r23, Y+2	; 0x02
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	9f 77       	andi	r25, 0x7F	; 127
    17f0:	2b ed       	ldi	r18, 0xDB	; 219
    17f2:	3f e0       	ldi	r19, 0x0F	; 15
    17f4:	49 ec       	ldi	r20, 0xC9	; 201
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__cmpsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	ec f4       	brge	.+58     	; 0x183a <run_motor_control_loop+0x2b4>
		left_duty_cycle += linear_output;
    1800:	a3 01       	movw	r20, r6
    1802:	92 01       	movw	r18, r4
    1804:	c7 01       	movw	r24, r14
    1806:	b6 01       	movw	r22, r12
    1808:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
    180c:	60 93 14 01 	sts	0x0114, r22
    1810:	70 93 15 01 	sts	0x0115, r23
    1814:	80 93 16 01 	sts	0x0116, r24
    1818:	90 93 17 01 	sts	0x0117, r25
		right_duty_cycle += linear_output;
    181c:	a7 01       	movw	r20, r14
    181e:	96 01       	movw	r18, r12
    1820:	c3 01       	movw	r24, r6
    1822:	b2 01       	movw	r22, r4
    1824:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
    1828:	60 93 10 01 	sts	0x0110, r22
    182c:	70 93 11 01 	sts	0x0111, r23
    1830:	80 93 12 01 	sts	0x0112, r24
    1834:	90 93 13 01 	sts	0x0113, r25
    1838:	1e c0       	rjmp	.+60     	; 0x1876 <run_motor_control_loop+0x2f0>
		} else{
		left_duty_cycle -= linear_output;
    183a:	a7 01       	movw	r20, r14
    183c:	96 01       	movw	r18, r12
    183e:	69 89       	ldd	r22, Y+17	; 0x11
    1840:	7a 89       	ldd	r23, Y+18	; 0x12
    1842:	8b 89       	ldd	r24, Y+19	; 0x13
    1844:	9c 89       	ldd	r25, Y+20	; 0x14
    1846:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
    184a:	60 93 14 01 	sts	0x0114, r22
    184e:	70 93 15 01 	sts	0x0115, r23
    1852:	80 93 16 01 	sts	0x0116, r24
    1856:	90 93 17 01 	sts	0x0117, r25
		right_duty_cycle -= linear_output;
    185a:	a7 01       	movw	r20, r14
    185c:	96 01       	movw	r18, r12
    185e:	c3 01       	movw	r24, r6
    1860:	b2 01       	movw	r22, r4
    1862:	0e 94 1a 14 	call	0x2834	; 0x2834 <__subsf3>
    1866:	60 93 10 01 	sts	0x0110, r22
    186a:	70 93 11 01 	sts	0x0111, r23
    186e:	80 93 12 01 	sts	0x0112, r24
    1872:	90 93 13 01 	sts	0x0113, r25
	}
	
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	a9 01       	movw	r20, r18
    187c:	60 91 14 01 	lds	r22, 0x0114
    1880:	70 91 15 01 	lds	r23, 0x0115
    1884:	80 91 16 01 	lds	r24, 0x0116
    1888:	90 91 17 01 	lds	r25, 0x0117
    188c:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__cmpsf2>
    1890:	88 23       	and	r24, r24
    1892:	14 f4       	brge	.+4      	; 0x1898 <run_motor_control_loop+0x312>
    1894:	29 98       	cbi	0x05, 1	; 5
    1896:	01 c0       	rjmp	.+2      	; 0x189a <run_motor_control_loop+0x314>
	else{set(PORTB,1);}
    1898:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	a9 01       	movw	r20, r18
    18a0:	60 91 10 01 	lds	r22, 0x0110
    18a4:	70 91 11 01 	lds	r23, 0x0111
    18a8:	80 91 12 01 	lds	r24, 0x0112
    18ac:	90 91 13 01 	lds	r25, 0x0113
    18b0:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__cmpsf2>
    18b4:	88 23       	and	r24, r24
    18b6:	14 f4       	brge	.+4      	; 0x18bc <run_motor_control_loop+0x336>
    18b8:	2b 98       	cbi	0x05, 3	; 5
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <run_motor_control_loop+0x338>
	else{set(PORTB,3);}
    18bc:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    18be:	80 90 14 01 	lds	r8, 0x0114
    18c2:	90 90 15 01 	lds	r9, 0x0115
    18c6:	a0 90 16 01 	lds	r10, 0x0116
    18ca:	b0 90 17 01 	lds	r11, 0x0117
    18ce:	e8 94       	clt
    18d0:	b7 f8       	bld	r11, 7
    18d2:	80 92 14 01 	sts	0x0114, r8
    18d6:	90 92 15 01 	sts	0x0115, r9
    18da:	a0 92 16 01 	sts	0x0116, r10
    18de:	b0 92 17 01 	sts	0x0117, r11
	right_duty_cycle = fabs(right_duty_cycle);
    18e2:	c0 90 10 01 	lds	r12, 0x0110
    18e6:	d0 90 11 01 	lds	r13, 0x0111
    18ea:	e0 90 12 01 	lds	r14, 0x0112
    18ee:	f0 90 13 01 	lds	r15, 0x0113
    18f2:	e8 94       	clt
    18f4:	f7 f8       	bld	r15, 7
    18f6:	c0 92 10 01 	sts	0x0110, r12
    18fa:	d0 92 11 01 	sts	0x0111, r13
    18fe:	e0 92 12 01 	sts	0x0112, r14
    1902:	f0 92 13 01 	sts	0x0113, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    1906:	a7 01       	movw	r20, r14
    1908:	96 01       	movw	r18, r12
    190a:	c5 01       	movw	r24, r10
    190c:	b4 01       	movw	r22, r8
    190e:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <__gesf2>
    1912:	18 16       	cp	r1, r24
    1914:	2c f0       	brlt	.+10     	; 0x1920 <run_motor_control_loop+0x39a>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    1916:	1c 2d       	mov	r17, r12
    1918:	0d 2d       	mov	r16, r13
    191a:	7e 2c       	mov	r7, r14
    191c:	6f 2c       	mov	r6, r15
    191e:	04 c0       	rjmp	.+8      	; 0x1928 <run_motor_control_loop+0x3a2>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    1920:	18 2d       	mov	r17, r8
    1922:	09 2d       	mov	r16, r9
    1924:	7a 2c       	mov	r7, r10
    1926:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    1928:	2d 85       	ldd	r18, Y+13	; 0x0d
    192a:	3e 85       	ldd	r19, Y+14	; 0x0e
    192c:	4f 85       	ldd	r20, Y+15	; 0x0f
    192e:	58 89       	ldd	r21, Y+16	; 0x10
    1930:	61 2f       	mov	r22, r17
    1932:	70 2f       	mov	r23, r16
    1934:	87 2d       	mov	r24, r7
    1936:	96 2d       	mov	r25, r6
    1938:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <__gesf2>
    193c:	18 16       	cp	r1, r24
    193e:	64 f5       	brge	.+88     	; 0x1998 <run_motor_control_loop+0x412>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    1940:	21 2f       	mov	r18, r17
    1942:	30 2f       	mov	r19, r16
    1944:	47 2d       	mov	r20, r7
    1946:	56 2d       	mov	r21, r6
    1948:	c5 01       	movw	r24, r10
    194a:	b4 01       	movw	r22, r8
    194c:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__divsf3>
    1950:	2d 85       	ldd	r18, Y+13	; 0x0d
    1952:	3e 85       	ldd	r19, Y+14	; 0x0e
    1954:	4f 85       	ldd	r20, Y+15	; 0x0f
    1956:	58 89       	ldd	r21, Y+16	; 0x10
    1958:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    195c:	60 93 14 01 	sts	0x0114, r22
    1960:	70 93 15 01 	sts	0x0115, r23
    1964:	80 93 16 01 	sts	0x0116, r24
    1968:	90 93 17 01 	sts	0x0117, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    196c:	21 2f       	mov	r18, r17
    196e:	30 2f       	mov	r19, r16
    1970:	47 2d       	mov	r20, r7
    1972:	56 2d       	mov	r21, r6
    1974:	c7 01       	movw	r24, r14
    1976:	b6 01       	movw	r22, r12
    1978:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__divsf3>
    197c:	2d 85       	ldd	r18, Y+13	; 0x0d
    197e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1980:	4f 85       	ldd	r20, Y+15	; 0x0f
    1982:	58 89       	ldd	r21, Y+16	; 0x10
    1984:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    1988:	60 93 10 01 	sts	0x0110, r22
    198c:	70 93 11 01 	sts	0x0111, r23
    1990:	80 93 12 01 	sts	0x0112, r24
    1994:	90 93 13 01 	sts	0x0113, r25
	}

	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    1998:	08 e8       	ldi	r16, 0x88	; 136
    199a:	10 e0       	ldi	r17, 0x00	; 0
    199c:	d8 01       	movw	r26, r16
    199e:	6d 91       	ld	r22, X+
    19a0:	7c 91       	ld	r23, X
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__floatunsisf>
    19aa:	20 91 14 01 	lds	r18, 0x0114
    19ae:	30 91 15 01 	lds	r19, 0x0115
    19b2:	40 91 16 01 	lds	r20, 0x0116
    19b6:	50 91 17 01 	lds	r21, 0x0117
    19ba:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    19be:	0e 94 75 15 	call	0x2aea	; 0x2aea <__fixunssfsi>
    19c2:	70 93 8b 00 	sts	0x008B, r23
    19c6:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    19ca:	f8 01       	movw	r30, r16
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__floatunsisf>
    19d8:	20 91 10 01 	lds	r18, 0x0110
    19dc:	30 91 11 01 	lds	r19, 0x0111
    19e0:	40 91 12 01 	lds	r20, 0x0112
    19e4:	50 91 13 01 	lds	r21, 0x0113
    19e8:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    19ec:	0e 94 75 15 	call	0x2aea	; 0x2aea <__fixunssfsi>
    19f0:	70 93 8d 00 	sts	0x008D, r23
    19f4:	60 93 8c 00 	sts	0x008C, r22

}
    19f8:	64 96       	adiw	r28, 0x14	; 20
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	cf 90       	pop	r12
    1a14:	bf 90       	pop	r11
    1a16:	af 90       	pop	r10
    1a18:	9f 90       	pop	r9
    1a1a:	8f 90       	pop	r8
    1a1c:	7f 90       	pop	r7
    1a1e:	6f 90       	pop	r6
    1a20:	5f 90       	pop	r5
    1a22:	4f 90       	pop	r4
    1a24:	08 95       	ret

00001a26 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    1a26:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1a28:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1a2a:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1a2c:	8c e0       	ldi	r24, 0x0C	; 12
    1a2e:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    1a32:	e9 e6       	ldi	r30, 0x69	; 105
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	80 62       	ori	r24, 0x20	; 32
    1a3a:	80 83       	st	Z, r24
    1a3c:	80 81       	ld	r24, Z
    1a3e:	8f 7e       	andi	r24, 0xEF	; 239
    1a40:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1a42:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    1a44:	78 94       	sei
    1a46:	08 95       	ret

00001a48 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	18 2f       	mov	r17, r24
    1a50:	d6 2f       	mov	r29, r22
    1a52:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1a54:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1a58:	94 ea       	ldi	r25, 0xA4	; 164
    1a5a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1a5e:	ec eb       	ldi	r30, 0xBC	; 188
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	90 81       	ld	r25, Z
    1a64:	99 23       	and	r25, r25
    1a66:	ec f7       	brge	.-6      	; 0x1a62 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1a68:	90 e5       	ldi	r25, 0x50	; 80
    1a6a:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a6e:	94 e8       	ldi	r25, 0x84	; 132
    1a70:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1a74:	ec eb       	ldi	r30, 0xBC	; 188
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	90 81       	ld	r25, Z
    1a7a:	99 23       	and	r25, r25
    1a7c:	ec f7       	brge	.-6      	; 0x1a78 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1a7e:	90 91 b9 00 	lds	r25, 0x00B9
    1a82:	98 7f       	andi	r25, 0xF8	; 248
    1a84:	90 32       	cpi	r25, 0x20	; 32
    1a86:	29 f4       	brne	.+10     	; 0x1a92 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1a88:	84 e9       	ldi	r24, 0x94	; 148
    1a8a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	2d c0       	rjmp	.+90     	; 0x1aec <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a98:	84 e8       	ldi	r24, 0x84	; 132
    1a9a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1a9e:	ec eb       	ldi	r30, 0xBC	; 188
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	90 81       	ld	r25, Z
    1aa4:	99 23       	and	r25, r25
    1aa6:	ec f7       	brge	.-6      	; 0x1aa2 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1aa8:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1aac:	84 e8       	ldi	r24, 0x84	; 132
    1aae:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1ab2:	ec eb       	ldi	r30, 0xBC	; 188
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	88 23       	and	r24, r24
    1aba:	ec f7       	brge	.-6      	; 0x1ab6 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1abc:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ac0:	84 e8       	ldi	r24, 0x84	; 132
    1ac2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1ac6:	ec eb       	ldi	r30, 0xBC	; 188
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	88 23       	and	r24, r24
    1ace:	ec f7       	brge	.-6      	; 0x1aca <m_rf_open+0x82>
	
	TWDR = packet_length;
    1ad0:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ad4:	84 e8       	ldi	r24, 0x84	; 132
    1ad6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1ada:	ec eb       	ldi	r30, 0xBC	; 188
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	88 23       	and	r24, r24
    1ae2:	ec f7       	brge	.-6      	; 0x1ade <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1ae4:	84 e9       	ldi	r24, 0x94	; 148
    1ae6:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
}
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	08 95       	ret

00001af4 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1afa:	84 ea       	ldi	r24, 0xA4	; 164
    1afc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1b00:	ec eb       	ldi	r30, 0xBC	; 188
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	90 81       	ld	r25, Z
    1b06:	99 23       	and	r25, r25
    1b08:	ec f7       	brge	.-6      	; 0x1b04 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1b0a:	81 e5       	ldi	r24, 0x51	; 81
    1b0c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1b10:	84 e8       	ldi	r24, 0x84	; 132
    1b12:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1b16:	ec eb       	ldi	r30, 0xBC	; 188
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	90 81       	ld	r25, Z
    1b1c:	99 23       	and	r25, r25
    1b1e:	ec f7       	brge	.-6      	; 0x1b1a <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1b20:	80 91 b9 00 	lds	r24, 0x00B9
    1b24:	88 7f       	andi	r24, 0xF8	; 248
    1b26:	88 34       	cpi	r24, 0x48	; 72
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1b2a:	84 e9       	ldi	r24, 0x94	; 148
    1b2c:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	41 c0       	rjmp	.+130    	; 0x1bb6 <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1b34:	84 ec       	ldi	r24, 0xC4	; 196
    1b36:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1b3a:	ec eb       	ldi	r30, 0xBC	; 188
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	90 81       	ld	r25, Z
    1b40:	99 23       	and	r25, r25
    1b42:	ec f7       	brge	.-6      	; 0x1b3e <m_rf_read+0x4a>
	bytes = TWDR;
    1b44:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1b48:	46 13       	cpse	r20, r22
    1b4a:	09 c0       	rjmp	.+18     	; 0x1b5e <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1b4c:	84 2f       	mov	r24, r20
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	18 16       	cp	r1, r24
    1b54:	19 06       	cpc	r1, r25
    1b56:	44 f0       	brlt	.+16     	; 0x1b68 <m_rf_read+0x74>
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	1a c0       	rjmp	.+52     	; 0x1b92 <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1b5e:	84 e9       	ldi	r24, 0x94	; 148
    1b60:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	27 c0       	rjmp	.+78     	; 0x1bb6 <m_rf_read+0xc2>
    1b68:	d9 01       	movw	r26, r18
    1b6a:	50 e0       	ldi	r21, 0x00	; 0
    1b6c:	41 50       	subi	r20, 0x01	; 1
    1b6e:	51 09       	sbc	r21, r1
    1b70:	b9 01       	movw	r22, r18
    1b72:	64 0f       	add	r22, r20
    1b74:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1b76:	ec eb       	ldi	r30, 0xBC	; 188
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1b7c:	cb eb       	ldi	r28, 0xBB	; 187
    1b7e:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1b80:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1b82:	90 81       	ld	r25, Z
    1b84:	99 23       	and	r25, r25
    1b86:	ec f7       	brge	.-6      	; 0x1b82 <m_rf_read+0x8e>
		buffer[i] = TWDR;
    1b88:	98 81       	ld	r25, Y
    1b8a:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1b8c:	a6 17       	cp	r26, r22
    1b8e:	b7 07       	cpc	r27, r23
    1b90:	b9 f7       	brne	.-18     	; 0x1b80 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1b92:	84 e8       	ldi	r24, 0x84	; 132
    1b94:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1b98:	ec eb       	ldi	r30, 0xBC	; 188
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	90 81       	ld	r25, Z
    1b9e:	99 23       	and	r25, r25
    1ba0:	ec f7       	brge	.-6      	; 0x1b9c <m_rf_read+0xa8>
	buffer[i++] = TWDR;
    1ba2:	80 91 bb 00 	lds	r24, 0x00BB
    1ba6:	f9 01       	movw	r30, r18
    1ba8:	e4 0f       	add	r30, r20
    1baa:	f5 1f       	adc	r31, r21
    1bac:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1bae:	84 e9       	ldi	r24, 0x94	; 148
    1bb0:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
}
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	08 95       	ret

00001bbc <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    1bc2:	80 ea       	ldi	r24, 0xA0	; 160
    1bc4:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    1bc8:	82 e1       	ldi	r24, 0x12	; 18
    1bca:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1bcc:	09 b4       	in	r0, 0x29	; 41
    1bce:	00 fe       	sbrs	r0, 0
    1bd0:	fd cf       	rjmp	.-6      	; 0x1bcc <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1bd2:	80 e9       	ldi	r24, 0x90	; 144
    1bd4:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1bd8:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1bdc:	10 92 bf 01 	sts	0x01BF, r1
	cdc_line_rtsdtr = 0;
    1be0:	10 92 bd 01 	sts	0x01BD, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    1be4:	8c e0       	ldi	r24, 0x0C	; 12
    1be6:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1bea:	78 94       	sei
    1bec:	08 95       	ret

00001bee <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1bee:	1f 92       	push	r1
    1bf0:	0f 92       	push	r0
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	0f 92       	push	r0
    1bf6:	11 24       	eor	r1, r1
    1bf8:	8f 93       	push	r24
    1bfa:	9f 93       	push	r25
    1bfc:	ef 93       	push	r30
    1bfe:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1c00:	e1 ee       	ldi	r30, 0xE1	; 225
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
        UDINT = 0;
    1c06:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1c08:	83 ff       	sbrs	r24, 3
    1c0a:	11 c0       	rjmp	.+34     	; 0x1c2e <__vector_10+0x40>
		UENUM = 0;
    1c0c:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1c16:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1c1a:	92 e1       	ldi	r25, 0x12	; 18
    1c1c:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1c20:	98 e0       	ldi	r25, 0x08	; 8
    1c22:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1c26:	10 92 bf 01 	sts	0x01BF, r1
		cdc_line_rtsdtr = 0;
    1c2a:	10 92 bd 01 	sts	0x01BD, r1
        }
	if (intbits & (1<<SOFI)) {
    1c2e:	82 ff       	sbrs	r24, 2
    1c30:	13 c0       	rjmp	.+38     	; 0x1c58 <__vector_10+0x6a>
		if (usb_configuration) {
    1c32:	80 91 bf 01 	lds	r24, 0x01BF
    1c36:	88 23       	and	r24, r24
    1c38:	79 f0       	breq	.+30     	; 0x1c58 <__vector_10+0x6a>
			t = transmit_flush_timer;
    1c3a:	80 91 be 01 	lds	r24, 0x01BE
			if (t) {
    1c3e:	88 23       	and	r24, r24
    1c40:	59 f0       	breq	.+22     	; 0x1c58 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1c42:	81 50       	subi	r24, 0x01	; 1
    1c44:	80 93 be 01 	sts	0x01BE, r24
				if (!t) {
    1c48:	81 11       	cpse	r24, r1
    1c4a:	06 c0       	rjmp	.+12     	; 0x1c58 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1c4c:	84 e0       	ldi	r24, 0x04	; 4
    1c4e:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1c52:	8a e3       	ldi	r24, 0x3A	; 58
    1c54:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1c58:	ff 91       	pop	r31
    1c5a:	ef 91       	pop	r30
    1c5c:	9f 91       	pop	r25
    1c5e:	8f 91       	pop	r24
    1c60:	0f 90       	pop	r0
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	0f 90       	pop	r0
    1c66:	1f 90       	pop	r1
    1c68:	18 95       	reti

00001c6a <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1c6a:	1f 92       	push	r1
    1c6c:	0f 92       	push	r0
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	0f 92       	push	r0
    1c72:	11 24       	eor	r1, r1
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	2f 93       	push	r18
    1c7a:	3f 93       	push	r19
    1c7c:	4f 93       	push	r20
    1c7e:	5f 93       	push	r21
    1c80:	6f 93       	push	r22
    1c82:	7f 93       	push	r23
    1c84:	8f 93       	push	r24
    1c86:	9f 93       	push	r25
    1c88:	af 93       	push	r26
    1c8a:	bf 93       	push	r27
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	ef 93       	push	r30
    1c92:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1c94:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1c98:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1c9c:	83 ff       	sbrs	r24, 3
    1c9e:	4c c1       	rjmp	.+664    	; 0x1f38 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    1ca0:	e1 ef       	ldi	r30, 0xF1	; 241
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    1ca6:	80 81       	ld	r24, Z
                wValue = UEDATX;
    1ca8:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1caa:	90 81       	ld	r25, Z
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    1cb0:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    1cb2:	90 81       	ld	r25, Z
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	59 2b       	or	r21, r25
                wLength = UEDATX;
    1cb8:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    1cba:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1cbc:	92 ef       	ldi	r25, 0xF2	; 242
    1cbe:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    1cc2:	86 30       	cpi	r24, 0x06	; 6
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <__vector_11+0x5e>
    1cc6:	58 c0       	rjmp	.+176    	; 0x1d78 <__vector_11+0x10e>
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    1cca:	81 e2       	ldi	r24, 0x21	; 33
    1ccc:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1cd0:	3a c1       	rjmp	.+628    	; 0x1f46 <__vector_11+0x2dc>
    1cd2:	66 e0       	ldi	r22, 0x06	; 6
    1cd4:	80 e2       	ldi	r24, 0x20	; 32
    1cd6:	91 e0       	ldi	r25, 0x01	; 1
				}
				desc_val = pgm_read_word(list);
    1cd8:	fc 01       	movw	r30, r24
    1cda:	a5 91       	lpm	r26, Z+
    1cdc:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    1cde:	2a 17       	cp	r18, r26
    1ce0:	3b 07       	cpc	r19, r27
    1ce2:	11 f0       	breq	.+4      	; 0x1ce8 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    1ce4:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1ce6:	23 c0       	rjmp	.+70     	; 0x1d2e <__vector_11+0xc4>
				}
				list += 2;
    1ce8:	fc 01       	movw	r30, r24
    1cea:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1cec:	a5 91       	lpm	r26, Z+
    1cee:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    1cf0:	4a 17       	cp	r20, r26
    1cf2:	5b 07       	cpc	r21, r27
    1cf4:	11 f0       	breq	.+4      	; 0x1cfa <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    1cf6:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1cf8:	1a c0       	rjmp	.+52     	; 0x1d2e <__vector_11+0xc4>
				}
				list += 2;
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1cfe:	45 91       	lpm	r20, Z+
    1d00:	54 91       	lpm	r21, Z
				list += 2;
    1d02:	fc 01       	movw	r30, r24
    1d04:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1d06:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1d08:	87 2f       	mov	r24, r23
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1d0e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d10:	91 05       	cpc	r25, r1
    1d12:	19 f0       	breq	.+6      	; 0x1d1a <__vector_11+0xb0>
    1d14:	10 f0       	brcs	.+4      	; 0x1d1a <__vector_11+0xb0>
    1d16:	8f ef       	ldi	r24, 0xFF	; 255
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	82 17       	cp	r24, r18
    1d1c:	08 f4       	brcc	.+2      	; 0x1d20 <__vector_11+0xb6>
    1d1e:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1d20:	a8 ee       	ldi	r26, 0xE8	; 232
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1d24:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d26:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1d28:	c1 ef       	ldi	r28, 0xF1	; 241
    1d2a:	d0 e0       	ldi	r29, 0x00	; 0
    1d2c:	03 c0       	rjmp	.+6      	; 0x1d34 <__vector_11+0xca>
    1d2e:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1d30:	99 f6       	brne	.-90     	; 0x1cd8 <__vector_11+0x6e>
    1d32:	cb cf       	rjmp	.-106    	; 0x1cca <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1d34:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1d36:	98 2f       	mov	r25, r24
    1d38:	95 70       	andi	r25, 0x05	; 5
    1d3a:	e1 f3       	breq	.-8      	; 0x1d34 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    1d3c:	82 fd       	sbrc	r24, 2
    1d3e:	03 c1       	rjmp	.+518    	; 0x1f46 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1d40:	32 2f       	mov	r19, r18
    1d42:	21 31       	cpi	r18, 0x11	; 17
    1d44:	08 f0       	brcs	.+2      	; 0x1d48 <__vector_11+0xde>
    1d46:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    1d48:	33 23       	and	r19, r19
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <__vector_11+0xe4>
    1d4c:	f9 c0       	rjmp	.+498    	; 0x1f40 <__vector_11+0x2d6>
    1d4e:	fa 01       	movw	r30, r20
    1d50:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    1d52:	94 91       	lpm	r25, Z
    1d54:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1d56:	81 50       	subi	r24, 0x01	; 1
    1d58:	31 96       	adiw	r30, 0x01	; 1
    1d5a:	81 11       	cpse	r24, r1
    1d5c:	fa cf       	rjmp	.-12     	; 0x1d52 <__vector_11+0xe8>
    1d5e:	8f ef       	ldi	r24, 0xFF	; 255
    1d60:	83 0f       	add	r24, r19
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	01 96       	adiw	r24, 0x01	; 1
    1d66:	48 0f       	add	r20, r24
    1d68:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1d6a:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d6c:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1d6e:	21 11       	cpse	r18, r1
    1d70:	e1 cf       	rjmp	.-62     	; 0x1d34 <__vector_11+0xca>
    1d72:	30 31       	cpi	r19, 0x10	; 16
    1d74:	f9 f2       	breq	.-66     	; 0x1d34 <__vector_11+0xca>
    1d76:	e7 c0       	rjmp	.+462    	; 0x1f46 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1d78:	85 30       	cpi	r24, 0x05	; 5
    1d7a:	61 f4       	brne	.+24     	; 0x1d94 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1d7c:	8e ef       	ldi	r24, 0xFE	; 254
    1d7e:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1d82:	e8 ee       	ldi	r30, 0xE8	; 232
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	80 ff       	sbrs	r24, 0
    1d8a:	fd cf       	rjmp	.-6      	; 0x1d86 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1d8c:	20 68       	ori	r18, 0x80	; 128
    1d8e:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1d92:	d9 c0       	rjmp	.+434    	; 0x1f46 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1d94:	89 30       	cpi	r24, 0x09	; 9
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <__vector_11+0x130>
    1d98:	35 c0       	rjmp	.+106    	; 0x1e04 <__vector_11+0x19a>
    1d9a:	61 11       	cpse	r22, r1
    1d9c:	cd c0       	rjmp	.+410    	; 0x1f38 <__vector_11+0x2ce>
			usb_configuration = wValue;
    1d9e:	20 93 bf 01 	sts	0x01BF, r18
			cdc_line_rtsdtr = 0;
    1da2:	10 92 bd 01 	sts	0x01BD, r1
			transmit_flush_timer = 0;
    1da6:	10 92 be 01 	sts	0x01BE, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1daa:	8e ef       	ldi	r24, 0xFE	; 254
    1dac:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1db0:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1db2:	29 ec       	ldi	r18, 0xC9	; 201
    1db4:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1db6:	c9 ee       	ldi	r28, 0xE9	; 233
    1db8:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1dba:	ab ee       	ldi	r26, 0xEB	; 235
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1dbe:	0c ee       	ldi	r16, 0xEC	; 236
    1dc0:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1dc2:	6d ee       	ldi	r22, 0xED	; 237
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1dc6:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    1dc8:	a9 01       	movw	r20, r18
    1dca:	4f 5f       	subi	r20, 0xFF	; 255
    1dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dce:	f9 01       	movw	r30, r18
    1dd0:	94 91       	lpm	r25, Z
				UECONX = en;
    1dd2:	9c 93       	st	X, r25
				if (en) {
    1dd4:	99 23       	and	r25, r25
    1dd6:	61 f0       	breq	.+24     	; 0x1df0 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    1dd8:	fa 01       	movw	r30, r20
    1dda:	44 91       	lpm	r20, Z
    1ddc:	f8 01       	movw	r30, r16
    1dde:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    1de0:	f9 01       	movw	r30, r18
    1de2:	32 96       	adiw	r30, 0x02	; 2
    1de4:	94 91       	lpm	r25, Z
    1de6:	2d 5f       	subi	r18, 0xFD	; 253
    1de8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dea:	fb 01       	movw	r30, r22
    1dec:	90 83       	st	Z, r25
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1df0:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1df2:	8f 5f       	subi	r24, 0xFF	; 255
    1df4:	85 30       	cpi	r24, 0x05	; 5
    1df6:	39 f7       	brne	.-50     	; 0x1dc6 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1df8:	ea ee       	ldi	r30, 0xEA	; 234
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	8e e1       	ldi	r24, 0x1E	; 30
    1dfe:	80 83       	st	Z, r24
        		UERST = 0;
    1e00:	10 82       	st	Z, r1
			return;
    1e02:	a1 c0       	rjmp	.+322    	; 0x1f46 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1e04:	88 30       	cpi	r24, 0x08	; 8
    1e06:	81 f4       	brne	.+32     	; 0x1e28 <__vector_11+0x1be>
    1e08:	60 38       	cpi	r22, 0x80	; 128
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <__vector_11+0x1a4>
    1e0c:	95 c0       	rjmp	.+298    	; 0x1f38 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1e0e:	e8 ee       	ldi	r30, 0xE8	; 232
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	80 ff       	sbrs	r24, 0
    1e16:	fd cf       	rjmp	.-6      	; 0x1e12 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1e18:	80 91 bf 01 	lds	r24, 0x01BF
    1e1c:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e20:	8e ef       	ldi	r24, 0xFE	; 254
    1e22:	80 93 e8 00 	sts	0x00E8, r24
    1e26:	8f c0       	rjmp	.+286    	; 0x1f46 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1e28:	81 32       	cpi	r24, 0x21	; 33
    1e2a:	b9 f4       	brne	.+46     	; 0x1e5a <__vector_11+0x1f0>
    1e2c:	61 3a       	cpi	r22, 0xA1	; 161
    1e2e:	09 f0       	breq	.+2      	; 0x1e32 <__vector_11+0x1c8>
    1e30:	83 c0       	rjmp	.+262    	; 0x1f38 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1e32:	e8 ee       	ldi	r30, 0xE8	; 232
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	80 ff       	sbrs	r24, 0
    1e3a:	fd cf       	rjmp	.-6      	; 0x1e36 <__vector_11+0x1cc>
    1e3c:	e4 e2       	ldi	r30, 0x24	; 36
    1e3e:	f1 e0       	ldi	r31, 0x01	; 1
    1e40:	2b e2       	ldi	r18, 0x2B	; 43
    1e42:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1e44:	a1 ef       	ldi	r26, 0xF1	; 241
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	81 91       	ld	r24, Z+
    1e4a:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1e4c:	e2 17       	cp	r30, r18
    1e4e:	f3 07       	cpc	r31, r19
    1e50:	d9 f7       	brne	.-10     	; 0x1e48 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e52:	8e ef       	ldi	r24, 0xFE	; 254
    1e54:	80 93 e8 00 	sts	0x00E8, r24
    1e58:	76 c0       	rjmp	.+236    	; 0x1f46 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1e5a:	80 32       	cpi	r24, 0x20	; 32
    1e5c:	d1 f4       	brne	.+52     	; 0x1e92 <__vector_11+0x228>
    1e5e:	61 32       	cpi	r22, 0x21	; 33
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <__vector_11+0x1fa>
    1e62:	6a c0       	rjmp	.+212    	; 0x1f38 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1e64:	e8 ee       	ldi	r30, 0xE8	; 232
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	82 ff       	sbrs	r24, 2
    1e6c:	fd cf       	rjmp	.-6      	; 0x1e68 <__vector_11+0x1fe>
    1e6e:	e4 e2       	ldi	r30, 0x24	; 36
    1e70:	f1 e0       	ldi	r31, 0x01	; 1
    1e72:	2b e2       	ldi	r18, 0x2B	; 43
    1e74:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1e76:	a1 ef       	ldi	r26, 0xF1	; 241
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	8c 91       	ld	r24, X
    1e7c:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1e7e:	e2 17       	cp	r30, r18
    1e80:	f3 07       	cpc	r31, r19
    1e82:	d9 f7       	brne	.-10     	; 0x1e7a <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1e84:	e8 ee       	ldi	r30, 0xE8	; 232
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	8b ef       	ldi	r24, 0xFB	; 251
    1e8a:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1e8c:	8e ef       	ldi	r24, 0xFE	; 254
    1e8e:	80 83       	st	Z, r24
    1e90:	5a c0       	rjmp	.+180    	; 0x1f46 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1e92:	82 32       	cpi	r24, 0x22	; 34
    1e94:	71 f4       	brne	.+28     	; 0x1eb2 <__vector_11+0x248>
    1e96:	61 32       	cpi	r22, 0x21	; 33
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <__vector_11+0x232>
    1e9a:	4e c0       	rjmp	.+156    	; 0x1f38 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    1e9c:	20 93 bd 01 	sts	0x01BD, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1ea0:	e8 ee       	ldi	r30, 0xE8	; 232
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	80 ff       	sbrs	r24, 0
    1ea8:	fd cf       	rjmp	.-6      	; 0x1ea4 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1eaa:	8e ef       	ldi	r24, 0xFE	; 254
    1eac:	80 93 e8 00 	sts	0x00E8, r24
    1eb0:	4a c0       	rjmp	.+148    	; 0x1f46 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1eb2:	81 11       	cpse	r24, r1
    1eb4:	1a c0       	rjmp	.+52     	; 0x1eea <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1eb6:	e8 ee       	ldi	r30, 0xE8	; 232
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	80 ff       	sbrs	r24, 0
    1ebe:	fd cf       	rjmp	.-6      	; 0x1eba <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1ec0:	62 38       	cpi	r22, 0x82	; 130
    1ec2:	51 f4       	brne	.+20     	; 0x1ed8 <__vector_11+0x26e>
				UENUM = wIndex;
    1ec4:	e9 ee       	ldi	r30, 0xE9	; 233
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    1eca:	80 91 eb 00 	lds	r24, 0x00EB
    1ece:	85 fb       	bst	r24, 5
    1ed0:	88 27       	eor	r24, r24
    1ed2:	80 f9       	bld	r24, 0
				UENUM = 0;
    1ed4:	10 82       	st	Z, r1
    1ed6:	01 c0       	rjmp	.+2      	; 0x1eda <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1eda:	e1 ef       	ldi	r30, 0xF1	; 241
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 83       	st	Z, r24
			UEDATX = 0;
    1ee0:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ee2:	8e ef       	ldi	r24, 0xFE	; 254
    1ee4:	80 93 e8 00 	sts	0x00E8, r24
    1ee8:	2e c0       	rjmp	.+92     	; 0x1f46 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1eea:	98 2f       	mov	r25, r24
    1eec:	9d 7f       	andi	r25, 0xFD	; 253
    1eee:	91 30       	cpi	r25, 0x01	; 1
    1ef0:	19 f5       	brne	.+70     	; 0x1f38 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    1ef2:	62 30       	cpi	r22, 0x02	; 2
    1ef4:	09 f5       	brne	.+66     	; 0x1f38 <__vector_11+0x2ce>
    1ef6:	23 2b       	or	r18, r19
    1ef8:	f9 f4       	brne	.+62     	; 0x1f38 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    1efa:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1efc:	9f ef       	ldi	r25, 0xFF	; 255
    1efe:	94 0f       	add	r25, r20
    1f00:	94 30       	cpi	r25, 0x04	; 4
    1f02:	d0 f4       	brcc	.+52     	; 0x1f38 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1f04:	9e ef       	ldi	r25, 0xFE	; 254
    1f06:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1f0a:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    1f0e:	83 30       	cpi	r24, 0x03	; 3
    1f10:	21 f4       	brne	.+8      	; 0x1f1a <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1f12:	81 e2       	ldi	r24, 0x21	; 33
    1f14:	80 93 eb 00 	sts	0x00EB, r24
    1f18:	16 c0       	rjmp	.+44     	; 0x1f46 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1f1a:	89 e1       	ldi	r24, 0x19	; 25
    1f1c:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <__vector_11+0x2c0>
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	4a 95       	dec	r20
    1f2c:	e2 f7       	brpl	.-8      	; 0x1f26 <__vector_11+0x2bc>
    1f2e:	ea ee       	ldi	r30, 0xEA	; 234
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 83       	st	Z, r24
					UERST = 0;
    1f34:	10 82       	st	Z, r1
    1f36:	07 c0       	rjmp	.+14     	; 0x1f46 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1f38:	81 e2       	ldi	r24, 0x21	; 33
    1f3a:	80 93 eb 00 	sts	0x00EB, r24
    1f3e:	03 c0       	rjmp	.+6      	; 0x1f46 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1f40:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1f42:	21 11       	cpse	r18, r1
    1f44:	f7 ce       	rjmp	.-530    	; 0x1d34 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1f46:	ff 91       	pop	r31
    1f48:	ef 91       	pop	r30
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	bf 91       	pop	r27
    1f50:	af 91       	pop	r26
    1f52:	9f 91       	pop	r25
    1f54:	8f 91       	pop	r24
    1f56:	7f 91       	pop	r23
    1f58:	6f 91       	pop	r22
    1f5a:	5f 91       	pop	r21
    1f5c:	4f 91       	pop	r20
    1f5e:	3f 91       	pop	r19
    1f60:	2f 91       	pop	r18
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	0f 90       	pop	r0
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	0f 90       	pop	r0
    1f6c:	1f 90       	pop	r1
    1f6e:	18 95       	reti

00001f70 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1f74:	ec eb       	ldi	r30, 0xBC	; 188
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	88 23       	and	r24, r24
    1f7c:	34 f0       	brlt	.+12     	; 0x1f8a <twi_wait+0x1a>
    1f7e:	2f 5f       	subi	r18, 0xFF	; 255
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	29 3e       	cpi	r18, 0xE9	; 233
    1f84:	83 e0       	ldi	r24, 0x03	; 3
    1f86:	38 07       	cpc	r19, r24
    1f88:	b9 f7       	brne	.-18     	; 0x1f78 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	28 3e       	cpi	r18, 0xE8	; 232
    1f8e:	33 40       	sbci	r19, 0x03	; 3
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <twi_wait+0x24>
    1f92:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1f94:	08 95       	ret

00001f96 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1f96:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1f9a:	84 e8       	ldi	r24, 0x84	; 132
    1f9c:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1fa0:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <twi_wait>
    1fa4:	88 23       	and	r24, r24
    1fa6:	19 f0       	breq	.+6      	; 0x1fae <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1fa8:	80 91 b9 00 	lds	r24, 0x00B9
    1fac:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    1fae:	08 95       	ret

00001fb0 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1fb0:	cf 93       	push	r28
    1fb2:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1fb4:	94 ea       	ldi	r25, 0xA4	; 164
    1fb6:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1fba:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <twi_wait>
    1fbe:	88 23       	and	r24, r24
    1fc0:	61 f0       	breq	.+24     	; 0x1fda <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1fc2:	8c 2f       	mov	r24, r28
    1fc4:	88 0f       	add	r24, r24
    1fc6:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1fca:	80 32       	cpi	r24, 0x20	; 32
    1fcc:	29 f4       	brne	.+10     	; 0x1fd8 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1fce:	84 e9       	ldi	r24, 0x94	; 148
    1fd0:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	01 c0       	rjmp	.+2      	; 0x1fda <start_write+0x2a>
	}	
	return 1;	// success
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
}	
    1fda:	cf 91       	pop	r28
    1fdc:	08 95       	ret

00001fde <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1fde:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1fe2:	88 e5       	ldi	r24, 0x58	; 88
    1fe4:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <start_write>
    1fe8:	88 23       	and	r24, r24
    1fea:	09 f4       	brne	.+2      	; 0x1fee <m_wii_open+0x10>
    1fec:	cd c0       	rjmp	.+410    	; 0x2188 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    1fee:	80 e3       	ldi	r24, 0x30	; 48
    1ff0:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    1ff4:	88 23       	and	r24, r24
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <m_wii_open+0x1c>
    1ff8:	c9 c0       	rjmp	.+402    	; 0x218c <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    2000:	88 23       	and	r24, r24
    2002:	09 f4       	brne	.+2      	; 0x2006 <m_wii_open+0x28>
    2004:	c5 c0       	rjmp	.+394    	; 0x2190 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2006:	84 e9       	ldi	r24, 0x94	; 148
    2008:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    200c:	83 ec       	ldi	r24, 0xC3	; 195
    200e:	99 e0       	ldi	r25, 0x09	; 9
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <m_wii_open+0x32>
    2014:	00 c0       	rjmp	.+0      	; 0x2016 <m_wii_open+0x38>
    2016:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2018:	88 e5       	ldi	r24, 0x58	; 88
    201a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <start_write>
    201e:	88 23       	and	r24, r24
    2020:	09 f4       	brne	.+2      	; 0x2024 <m_wii_open+0x46>
    2022:	b8 c0       	rjmp	.+368    	; 0x2194 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    202a:	88 23       	and	r24, r24
    202c:	09 f4       	brne	.+2      	; 0x2030 <m_wii_open+0x52>
    202e:	b4 c0       	rjmp	.+360    	; 0x2198 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    2036:	88 23       	and	r24, r24
    2038:	09 f4       	brne	.+2      	; 0x203c <m_wii_open+0x5e>
    203a:	b0 c0       	rjmp	.+352    	; 0x219c <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    2042:	88 23       	and	r24, r24
    2044:	09 f4       	brne	.+2      	; 0x2048 <m_wii_open+0x6a>
    2046:	ac c0       	rjmp	.+344    	; 0x21a0 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    204e:	88 23       	and	r24, r24
    2050:	09 f4       	brne	.+2      	; 0x2054 <m_wii_open+0x76>
    2052:	a8 c0       	rjmp	.+336    	; 0x21a4 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    205a:	88 23       	and	r24, r24
    205c:	09 f4       	brne	.+2      	; 0x2060 <m_wii_open+0x82>
    205e:	a4 c0       	rjmp	.+328    	; 0x21a8 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    2066:	88 23       	and	r24, r24
    2068:	09 f4       	brne	.+2      	; 0x206c <m_wii_open+0x8e>
    206a:	a0 c0       	rjmp	.+320    	; 0x21ac <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    2072:	88 23       	and	r24, r24
    2074:	09 f4       	brne	.+2      	; 0x2078 <m_wii_open+0x9a>
    2076:	9c c0       	rjmp	.+312    	; 0x21b0 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    2078:	80 e9       	ldi	r24, 0x90	; 144
    207a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    207e:	88 23       	and	r24, r24
    2080:	09 f4       	brne	.+2      	; 0x2084 <m_wii_open+0xa6>
    2082:	98 c0       	rjmp	.+304    	; 0x21b4 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2084:	84 e9       	ldi	r24, 0x94	; 148
    2086:	80 93 bc 00 	sts	0x00BC, r24
    208a:	83 ec       	ldi	r24, 0xC3	; 195
    208c:	99 e0       	ldi	r25, 0x09	; 9
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <m_wii_open+0xb0>
    2092:	00 c0       	rjmp	.+0      	; 0x2094 <m_wii_open+0xb6>
    2094:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2096:	88 e5       	ldi	r24, 0x58	; 88
    2098:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <start_write>
    209c:	88 23       	and	r24, r24
    209e:	09 f4       	brne	.+2      	; 0x20a2 <m_wii_open+0xc4>
    20a0:	8b c0       	rjmp	.+278    	; 0x21b8 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    20a2:	87 e0       	ldi	r24, 0x07	; 7
    20a4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    20a8:	88 23       	and	r24, r24
    20aa:	09 f4       	brne	.+2      	; 0x20ae <m_wii_open+0xd0>
    20ac:	87 c0       	rjmp	.+270    	; 0x21bc <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    20b4:	88 23       	and	r24, r24
    20b6:	09 f4       	brne	.+2      	; 0x20ba <m_wii_open+0xdc>
    20b8:	83 c0       	rjmp	.+262    	; 0x21c0 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    20ba:	81 e4       	ldi	r24, 0x41	; 65
    20bc:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    20c0:	88 23       	and	r24, r24
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <m_wii_open+0xe8>
    20c4:	7f c0       	rjmp	.+254    	; 0x21c4 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    20c6:	84 e9       	ldi	r24, 0x94	; 148
    20c8:	80 93 bc 00 	sts	0x00BC, r24
    20cc:	83 ec       	ldi	r24, 0xC3	; 195
    20ce:	99 e0       	ldi	r25, 0x09	; 9
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <m_wii_open+0xf2>
    20d4:	00 c0       	rjmp	.+0      	; 0x20d6 <m_wii_open+0xf8>
    20d6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    20d8:	88 e5       	ldi	r24, 0x58	; 88
    20da:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <start_write>
    20de:	88 23       	and	r24, r24
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <m_wii_open+0x106>
    20e2:	72 c0       	rjmp	.+228    	; 0x21c8 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    20e4:	8a e1       	ldi	r24, 0x1A	; 26
    20e6:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    20ea:	88 23       	and	r24, r24
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <m_wii_open+0x112>
    20ee:	6e c0       	rjmp	.+220    	; 0x21cc <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    20f0:	80 e4       	ldi	r24, 0x40	; 64
    20f2:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    20f6:	88 23       	and	r24, r24
    20f8:	09 f4       	brne	.+2      	; 0x20fc <m_wii_open+0x11e>
    20fa:	6a c0       	rjmp	.+212    	; 0x21d0 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    2102:	88 23       	and	r24, r24
    2104:	09 f4       	brne	.+2      	; 0x2108 <m_wii_open+0x12a>
    2106:	66 c0       	rjmp	.+204    	; 0x21d4 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2108:	84 e9       	ldi	r24, 0x94	; 148
    210a:	80 93 bc 00 	sts	0x00BC, r24
    210e:	83 ec       	ldi	r24, 0xC3	; 195
    2110:	99 e0       	ldi	r25, 0x09	; 9
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <m_wii_open+0x134>
    2116:	00 c0       	rjmp	.+0      	; 0x2118 <m_wii_open+0x13a>
    2118:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    211a:	88 e5       	ldi	r24, 0x58	; 88
    211c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <start_write>
    2120:	88 23       	and	r24, r24
    2122:	09 f4       	brne	.+2      	; 0x2126 <m_wii_open+0x148>
    2124:	59 c0       	rjmp	.+178    	; 0x21d8 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    2126:	83 e3       	ldi	r24, 0x33	; 51
    2128:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    212c:	88 23       	and	r24, r24
    212e:	09 f4       	brne	.+2      	; 0x2132 <m_wii_open+0x154>
    2130:	55 c0       	rjmp	.+170    	; 0x21dc <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    2132:	83 e0       	ldi	r24, 0x03	; 3
    2134:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    2138:	88 23       	and	r24, r24
    213a:	09 f4       	brne	.+2      	; 0x213e <m_wii_open+0x160>
    213c:	51 c0       	rjmp	.+162    	; 0x21e0 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    213e:	84 e9       	ldi	r24, 0x94	; 148
    2140:	80 93 bc 00 	sts	0x00BC, r24
    2144:	83 ec       	ldi	r24, 0xC3	; 195
    2146:	99 e0       	ldi	r25, 0x09	; 9
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <m_wii_open+0x16a>
    214c:	00 c0       	rjmp	.+0      	; 0x214e <m_wii_open+0x170>
    214e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2150:	88 e5       	ldi	r24, 0x58	; 88
    2152:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <start_write>
    2156:	88 23       	and	r24, r24
    2158:	09 f4       	brne	.+2      	; 0x215c <m_wii_open+0x17e>
    215a:	44 c0       	rjmp	.+136    	; 0x21e4 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    215c:	80 e3       	ldi	r24, 0x30	; 48
    215e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    2162:	88 23       	and	r24, r24
    2164:	09 f4       	brne	.+2      	; 0x2168 <m_wii_open+0x18a>
    2166:	40 c0       	rjmp	.+128    	; 0x21e8 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    2168:	88 e0       	ldi	r24, 0x08	; 8
    216a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    216e:	88 23       	and	r24, r24
    2170:	e9 f1       	breq	.+122    	; 0x21ec <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2172:	84 e9       	ldi	r24, 0x94	; 148
    2174:	80 93 bc 00 	sts	0x00BC, r24
    2178:	83 ec       	ldi	r24, 0xC3	; 195
    217a:	99 e0       	ldi	r25, 0x09	; 9
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <m_wii_open+0x19e>
    2180:	00 c0       	rjmp	.+0      	; 0x2182 <m_wii_open+0x1a4>
    2182:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    21ec:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    21ee:	08 95       	ret

000021f0 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    21f0:	cf 93       	push	r28
    21f2:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    21f4:	84 ea       	ldi	r24, 0xA4	; 164
    21f6:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    21fa:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <twi_wait>
    21fe:	88 23       	and	r24, r24
    2200:	69 f0       	breq	.+26     	; 0x221c <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2202:	8c 2f       	mov	r24, r28
    2204:	88 0f       	add	r24, r24
    2206:	8f 5f       	subi	r24, 0xFF	; 255
    2208:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    220c:	88 34       	cpi	r24, 0x48	; 72
    220e:	29 f4       	brne	.+10     	; 0x221a <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2210:	84 e9       	ldi	r24, 0x94	; 148
    2212:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	01 c0       	rjmp	.+2      	; 0x221c <start_read+0x2c>
	}	
	return 1;	// success
    221a:	81 e0       	ldi	r24, 0x01	; 1
}	
    221c:	cf 91       	pop	r28
    221e:	08 95       	ret

00002220 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	60 97       	sbiw	r28, 0x10	; 16
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    223a:	fe 01       	movw	r30, r28
    223c:	31 96       	adiw	r30, 0x01	; 1
    223e:	80 e1       	ldi	r24, 0x10	; 16
    2240:	df 01       	movw	r26, r30
    2242:	1d 92       	st	X+, r1
    2244:	8a 95       	dec	r24
    2246:	e9 f7       	brne	.-6      	; 0x2242 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2248:	88 e5       	ldi	r24, 0x58	; 88
    224a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <start_write>
    224e:	88 23       	and	r24, r24
    2250:	09 f4       	brne	.+2      	; 0x2254 <m_wii_read+0x34>
    2252:	69 c0       	rjmp	.+210    	; 0x2326 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    2254:	86 e3       	ldi	r24, 0x36	; 54
    2256:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <send_byte>
    225a:	88 23       	and	r24, r24
    225c:	09 f4       	brne	.+2      	; 0x2260 <m_wii_read+0x40>
    225e:	65 c0       	rjmp	.+202    	; 0x232a <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2260:	84 e9       	ldi	r24, 0x94	; 148
    2262:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2266:	b8 e0       	ldi	r27, 0x08	; 8
    2268:	ba 95       	dec	r27
    226a:	f1 f7       	brne	.-4      	; 0x2268 <m_wii_read+0x48>
    226c:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    226e:	88 e5       	ldi	r24, 0x58	; 88
    2270:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <start_read>
    2274:	88 23       	and	r24, r24
    2276:	09 f4       	brne	.+2      	; 0x227a <m_wii_read+0x5a>
    2278:	5a c0       	rjmp	.+180    	; 0x232e <m_wii_read+0x10e>
    227a:	be 01       	movw	r22, r28
    227c:	6f 5f       	subi	r22, 0xFF	; 255
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
    2280:	ae 01       	movw	r20, r28
    2282:	40 5f       	subi	r20, 0xF0	; 240
    2284:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2286:	ec eb       	ldi	r30, 0xBC	; 188
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    228c:	2b eb       	ldi	r18, 0xBB	; 187
    228e:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2290:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2292:	90 81       	ld	r25, Z
    2294:	99 23       	and	r25, r25
    2296:	ec f7       	brge	.-6      	; 0x2292 <m_wii_read+0x72>
		temp[i] = TWDR;
    2298:	d9 01       	movw	r26, r18
    229a:	9c 91       	ld	r25, X
    229c:	db 01       	movw	r26, r22
    229e:	9d 93       	st	X+, r25
    22a0:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    22a2:	a4 17       	cp	r26, r20
    22a4:	b5 07       	cpc	r27, r21
    22a6:	a1 f7       	brne	.-24     	; 0x2290 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    22a8:	84 e8       	ldi	r24, 0x84	; 132
    22aa:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    22ae:	ec eb       	ldi	r30, 0xBC	; 188
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	88 23       	and	r24, r24
    22b6:	ec f7       	brge	.-6      	; 0x22b2 <m_wii_read+0x92>
	temp[15] = TWDR;
    22b8:	80 91 bb 00 	lds	r24, 0x00BB
    22bc:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    22be:	84 e9       	ldi	r24, 0x94	; 148
    22c0:	80 93 bc 00 	sts	0x00BC, r24
    22c4:	be 01       	movw	r22, r28
    22c6:	6c 5f       	subi	r22, 0xFC	; 252
    22c8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ca:	f8 01       	movw	r30, r16
    22cc:	08 5e       	subi	r16, 0xE8	; 232
    22ce:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    22d0:	db 01       	movw	r26, r22
    22d2:	2c 91       	ld	r18, X
    22d4:	32 2f       	mov	r19, r18
    22d6:	30 73       	andi	r19, 0x30	; 48
    22d8:	cb 01       	movw	r24, r22
    22da:	02 97       	sbiw	r24, 0x02	; 2
    22dc:	dc 01       	movw	r26, r24
    22de:	8c 91       	ld	r24, X
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	b0 e1       	ldi	r27, 0x10	; 16
    22e4:	3b 9f       	mul	r19, r27
    22e6:	80 0d       	add	r24, r0
    22e8:	91 1d       	adc	r25, r1
    22ea:	11 24       	eor	r1, r1
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    22f0:	42 2f       	mov	r20, r18
    22f2:	40 7c       	andi	r20, 0xC0	; 192
    22f4:	50 e0       	ldi	r21, 0x00	; 0
    22f6:	44 0f       	add	r20, r20
    22f8:	55 1f       	adc	r21, r21
    22fa:	44 0f       	add	r20, r20
    22fc:	55 1f       	adc	r21, r21
    22fe:	cb 01       	movw	r24, r22
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	dc 01       	movw	r26, r24
    2304:	8c 91       	ld	r24, X
    2306:	48 0f       	add	r20, r24
    2308:	51 1d       	adc	r21, r1
    230a:	53 83       	std	Z+3, r21	; 0x03
    230c:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    230e:	2f 70       	andi	r18, 0x0F	; 15
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	35 83       	std	Z+5, r19	; 0x05
    2314:	24 83       	std	Z+4, r18	; 0x04
    2316:	6d 5f       	subi	r22, 0xFD	; 253
    2318:	7f 4f       	sbci	r23, 0xFF	; 255
    231a:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    231c:	e0 17       	cp	r30, r16
    231e:	f1 07       	cpc	r31, r17
    2320:	b9 f6       	brne	.-82     	; 0x22d0 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	05 c0       	rjmp	.+10     	; 0x2330 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	03 c0       	rjmp	.+6      	; 0x2330 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	01 c0       	rjmp	.+2      	; 0x2330 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    232e:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2330:	60 96       	adiw	r28, 0x10	; 16
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	08 95       	ret

00002346 <get_puck_location>:
Public Functions
************************************************************/

/* Returns x,y, location of puck (angle more accurate) */
void get_puck_location(float* puck_buffer)
{
    2346:	2f 92       	push	r2
    2348:	3f 92       	push	r3
    234a:	4f 92       	push	r4
    234c:	5f 92       	push	r5
    234e:	6f 92       	push	r6
    2350:	7f 92       	push	r7
    2352:	8f 92       	push	r8
    2354:	9f 92       	push	r9
    2356:	af 92       	push	r10
    2358:	bf 92       	push	r11
    235a:	cf 92       	push	r12
    235c:	df 92       	push	r13
    235e:	ef 92       	push	r14
    2360:	ff 92       	push	r15
    2362:	0f 93       	push	r16
    2364:	1f 93       	push	r17
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	62 97       	sbiw	r28, 0x12	; 18
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	9a 8b       	std	Y+18, r25	; 0x12
    237c:	89 8b       	std	Y+17, r24	; 0x11
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta
    237e:	ce 01       	movw	r24, r28
    2380:	01 96       	adiw	r24, 0x01	; 1
    2382:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <get_position>
    2386:	0f 2e       	mov	r0, r31
    2388:	f4 ec       	ldi	r31, 0xC4	; 196
    238a:	8f 2e       	mov	r8, r31
    238c:	f1 e0       	ldi	r31, 0x01	; 1
    238e:	9f 2e       	mov	r9, r31
    2390:	f0 2d       	mov	r31, r0
    2392:	0f 2e       	mov	r0, r31
    2394:	fb e2       	ldi	r31, 0x2B	; 43
    2396:	ef 2e       	mov	r14, r31
    2398:	f1 e0       	ldi	r31, 0x01	; 1
    239a:	ff 2e       	mov	r15, r31
    239c:	f0 2d       	mov	r31, r0
    239e:	0f 2e       	mov	r0, r31
    23a0:	fb e5       	ldi	r31, 0x5B	; 91
    23a2:	af 2e       	mov	r10, r31
    23a4:	f1 e0       	ldi	r31, 0x01	; 1
    23a6:	bf 2e       	mov	r11, r31
    23a8:	f0 2d       	mov	r31, r0
	// }

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
    23aa:	1d 86       	std	Y+13, r1	; 0x0d
    23ac:	1e 86       	std	Y+14, r1	; 0x0e
    23ae:	1f 86       	std	Y+15, r1	; 0x0f
    23b0:	18 8a       	std	Y+16, r1	; 0x10
	// 	}
	// }

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
    23b2:	c1 2c       	mov	r12, r1
    23b4:	d1 2c       	mov	r13, r1
	// 		index_max = i;
	// 	}
	// }

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
    23b6:	21 2c       	mov	r2, r1
    23b8:	31 2c       	mov	r3, r1
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<12; i++){
		scaler += transistor_vals[i];
    23ba:	f4 01       	movw	r30, r8
    23bc:	01 91       	ld	r16, Z+
    23be:	11 91       	ld	r17, Z+
    23c0:	4f 01       	movw	r8, r30
    23c2:	c0 0e       	add	r12, r16
    23c4:	d1 1e       	adc	r13, r17
		global_theta += transistor_angles[i] * (float)transistor_vals[i];
    23c6:	f7 01       	movw	r30, r14
    23c8:	41 90       	ld	r4, Z+
    23ca:	51 90       	ld	r5, Z+
    23cc:	61 90       	ld	r6, Z+
    23ce:	71 90       	ld	r7, Z+
    23d0:	7f 01       	movw	r14, r30
    23d2:	b8 01       	movw	r22, r16
    23d4:	01 2e       	mov	r0, r17
    23d6:	00 0c       	add	r0, r0
    23d8:	88 0b       	sbc	r24, r24
    23da:	99 0b       	sbc	r25, r25
    23dc:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
    23e0:	9b 01       	movw	r18, r22
    23e2:	ac 01       	movw	r20, r24
    23e4:	c3 01       	movw	r24, r6
    23e6:	b2 01       	movw	r22, r4
    23e8:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    23ec:	9b 01       	movw	r18, r22
    23ee:	ac 01       	movw	r20, r24
    23f0:	6d 85       	ldd	r22, Y+13	; 0x0d
    23f2:	7e 85       	ldd	r23, Y+14	; 0x0e
    23f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f6:	98 89       	ldd	r25, Y+16	; 0x10
    23f8:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
    23fc:	6d 87       	std	Y+13, r22	; 0x0d
    23fe:	7e 87       	std	Y+14, r23	; 0x0e
    2400:	8f 87       	std	Y+15, r24	; 0x0f
    2402:	98 8b       	std	Y+16, r25	; 0x10
    2404:	20 16       	cp	r2, r16
    2406:	31 06       	cpc	r3, r17
    2408:	0c f4       	brge	.+2      	; 0x240c <get_puck_location+0xc6>
    240a:	18 01       	movw	r2, r16

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<12; i++){
    240c:	ea 14       	cp	r14, r10
    240e:	fb 04       	cpc	r15, r11
    2410:	a1 f6       	brne	.-88     	; 0x23ba <get_puck_location+0x74>
	}
	global_theta = global_theta/(float)scaler;


	/* If no puck found */
	if(max_val<100){
    2412:	f4 e6       	ldi	r31, 0x64	; 100
    2414:	2f 16       	cp	r2, r31
    2416:	31 04       	cpc	r3, r1
    2418:	5c f4       	brge	.+22     	; 0x2430 <get_puck_location+0xea>
		puck_buffer[0] = 0;
    241a:	e9 89       	ldd	r30, Y+17	; 0x11
    241c:	fa 89       	ldd	r31, Y+18	; 0x12
    241e:	10 82       	st	Z, r1
    2420:	11 82       	std	Z+1, r1	; 0x01
    2422:	12 82       	std	Z+2, r1	; 0x02
    2424:	13 82       	std	Z+3, r1	; 0x03
		puck_buffer[1] = 0;
    2426:	14 82       	std	Z+4, r1	; 0x04
    2428:	15 82       	std	Z+5, r1	; 0x05
    242a:	16 82       	std	Z+6, r1	; 0x06
    242c:	17 82       	std	Z+7, r1	; 0x07
    242e:	40 c0       	rjmp	.+128    	; 0x24b0 <get_puck_location+0x16a>

		if(transistor_vals[i]>max_val){
			max_val = transistor_vals[i];
		}
	}
	global_theta = global_theta/(float)scaler;
    2430:	b6 01       	movw	r22, r12
    2432:	dd 0c       	add	r13, r13
    2434:	88 0b       	sbc	r24, r24
    2436:	99 0b       	sbc	r25, r25
    2438:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatsisf>
    243c:	9b 01       	movw	r18, r22
    243e:	ac 01       	movw	r20, r24
    2440:	6d 85       	ldd	r22, Y+13	; 0x0d
    2442:	7e 85       	ldd	r23, Y+14	; 0x0e
    2444:	8f 85       	ldd	r24, Y+15	; 0x0f
    2446:	98 89       	ldd	r25, Y+16	; 0x10
    2448:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__divsf3>
		puck_buffer[1] = 0;
		return;
	}

	/* Create vector pointing to puck in global coordinates */
	global_theta += position_buffer[2];
    244c:	29 85       	ldd	r18, Y+9	; 0x09
    244e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2450:	4b 85       	ldd	r20, Y+11	; 0x0b
    2452:	5c 85       	ldd	r21, Y+12	; 0x0c
    2454:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
    2458:	6b 01       	movw	r12, r22
    245a:	7c 01       	movw	r14, r24
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN + position_buffer[0]; // Assign X val
    245c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <cos>
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e2       	ldi	r20, 0x20	; 32
    2466:	51 e4       	ldi	r21, 0x41	; 65
    2468:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    246c:	29 81       	ldd	r18, Y+1	; 0x01
    246e:	3a 81       	ldd	r19, Y+2	; 0x02
    2470:	4b 81       	ldd	r20, Y+3	; 0x03
    2472:	5c 81       	ldd	r21, Y+4	; 0x04
    2474:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
    2478:	e9 89       	ldd	r30, Y+17	; 0x11
    247a:	fa 89       	ldd	r31, Y+18	; 0x12
    247c:	60 83       	st	Z, r22
    247e:	71 83       	std	Z+1, r23	; 0x01
    2480:	82 83       	std	Z+2, r24	; 0x02
    2482:	93 83       	std	Z+3, r25	; 0x03
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN + position_buffer[1]; // Assign Y val
    2484:	c7 01       	movw	r24, r14
    2486:	b6 01       	movw	r22, r12
    2488:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <sin>
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e2       	ldi	r20, 0x20	; 32
    2492:	51 e4       	ldi	r21, 0x41	; 65
    2494:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    2498:	2d 81       	ldd	r18, Y+5	; 0x05
    249a:	3e 81       	ldd	r19, Y+6	; 0x06
    249c:	4f 81       	ldd	r20, Y+7	; 0x07
    249e:	58 85       	ldd	r21, Y+8	; 0x08
    24a0:	0e 94 1b 14 	call	0x2836	; 0x2836 <__addsf3>
    24a4:	e9 89       	ldd	r30, Y+17	; 0x11
    24a6:	fa 89       	ldd	r31, Y+18	; 0x12
    24a8:	64 83       	std	Z+4, r22	; 0x04
    24aa:	75 83       	std	Z+5, r23	; 0x05
    24ac:	86 83       	std	Z+6, r24	; 0x06
    24ae:	97 83       	std	Z+7, r25	; 0x07

}
    24b0:	62 96       	adiw	r28, 0x12	; 18
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	1f 91       	pop	r17
    24c2:	0f 91       	pop	r16
    24c4:	ff 90       	pop	r15
    24c6:	ef 90       	pop	r14
    24c8:	df 90       	pop	r13
    24ca:	cf 90       	pop	r12
    24cc:	bf 90       	pop	r11
    24ce:	af 90       	pop	r10
    24d0:	9f 90       	pop	r9
    24d2:	8f 90       	pop	r8
    24d4:	7f 90       	pop	r7
    24d6:	6f 90       	pop	r6
    24d8:	5f 90       	pop	r5
    24da:	4f 90       	pop	r4
    24dc:	3f 90       	pop	r3
    24de:	2f 90       	pop	r2
    24e0:	08 95       	ret

000024e2 <has_puck>:

/* Return 1 If Has Puck */
char has_puck(void)
{
	if((transistor_3 + transistor_9) > HAS_PUCK_THRESHOLD){
    24e2:	20 91 c2 01 	lds	r18, 0x01C2
    24e6:	30 91 c3 01 	lds	r19, 0x01C3
    24ea:	80 91 c0 01 	lds	r24, 0x01C0
    24ee:	90 91 c1 01 	lds	r25, 0x01C1
    24f2:	28 0f       	add	r18, r24
    24f4:	39 1f       	adc	r19, r25
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	2b 33       	cpi	r18, 0x3B	; 59
    24fa:	37 40       	sbci	r19, 0x07	; 7
    24fc:	0c f4       	brge	.+2      	; 0x2500 <has_puck+0x1e>
    24fe:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	return 0;
}
    2500:	08 95       	ret

00002502 <adc_switch>:
/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated

	clear(ADCSRA,ADEN); // Disable ADC subsystem
    2502:	ea e7       	ldi	r30, 0x7A	; 122
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	8f 77       	andi	r24, 0x7F	; 127
    250a:	80 83       	st	Z, r24
	
	switch(state){
    250c:	e0 91 d8 01 	lds	r30, 0x01D8
    2510:	f0 91 d9 01 	lds	r31, 0x01D9
    2514:	ec 30       	cpi	r30, 0x0C	; 12
    2516:	f1 05       	cpc	r31, r1
    2518:	08 f0       	brcs	.+2      	; 0x251c <adc_switch+0x1a>
    251a:	82 c1       	rjmp	.+772    	; 0x2820 <adc_switch+0x31e>
    251c:	e2 5a       	subi	r30, 0xA2	; 162
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__tablejump2__>

		case 0:
			state = 1;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	90 93 d9 01 	sts	0x01D9, r25
    252c:	80 93 d8 01 	sts	0x01D8, r24
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
    2530:	eb e7       	ldi	r30, 0x7B	; 123
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	8f 7d       	andi	r24, 0xDF	; 223
    2538:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 8
    253a:	ec e7       	ldi	r30, 0x7C	; 124
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	8b 7f       	andi	r24, 0xFB	; 251
    2542:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2544:	80 81       	ld	r24, Z
    2546:	8d 7f       	andi	r24, 0xFD	; 253
    2548:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    254a:	80 81       	ld	r24, Z
    254c:	8e 7f       	andi	r24, 0xFE	; 254
    254e:	80 83       	st	Z, r24
			transistor_vals[2] = ADC;			
    2550:	80 91 78 00 	lds	r24, 0x0078
    2554:	90 91 79 00 	lds	r25, 0x0079
    2558:	90 93 c9 01 	sts	0x01C9, r25
    255c:	80 93 c8 01 	sts	0x01C8, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2560:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
			clear(ADMUX,MUX2); // Transistor 8
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[2] = ADC;			
			break;
    2562:	5f c1       	rjmp	.+702    	; 0x2822 <adc_switch+0x320>

		case 1:
			state = 2;
    2564:	82 e0       	ldi	r24, 0x02	; 2
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	90 93 d9 01 	sts	0x01D9, r25
    256c:	80 93 d8 01 	sts	0x01D8, r24
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
    2570:	eb e7       	ldi	r30, 0x7B	; 123
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	8f 7d       	andi	r24, 0xDF	; 223
    2578:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 9
    257a:	ec e7       	ldi	r30, 0x7C	; 124
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	8b 7f       	andi	r24, 0xFB	; 251
    2582:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2584:	80 81       	ld	r24, Z
    2586:	8d 7f       	andi	r24, 0xFD	; 253
    2588:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    258a:	80 81       	ld	r24, Z
    258c:	81 60       	ori	r24, 0x01	; 1
    258e:	80 83       	st	Z, r24
			transistor_vals[4] = ADC;			
    2590:	80 91 78 00 	lds	r24, 0x0078
    2594:	90 91 79 00 	lds	r25, 0x0079
    2598:	90 93 cd 01 	sts	0x01CD, r25
    259c:	80 93 cc 01 	sts	0x01CC, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    25a0:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
			clear(ADMUX,MUX2); // Transistor 9
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[4] = ADC;			
			break;
    25a2:	3f c1       	rjmp	.+638    	; 0x2822 <adc_switch+0x320>

		case 2:
			state = 3;
    25a4:	83 e0       	ldi	r24, 0x03	; 3
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	90 93 d9 01 	sts	0x01D9, r25
    25ac:	80 93 d8 01 	sts	0x01D8, r24
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
    25b0:	eb e7       	ldi	r30, 0x7B	; 123
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	8f 7d       	andi	r24, 0xDF	; 223
    25b8:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 10
    25ba:	ec e7       	ldi	r30, 0x7C	; 124
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	84 60       	ori	r24, 0x04	; 4
    25c2:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    25c4:	80 81       	ld	r24, Z
    25c6:	8d 7f       	andi	r24, 0xFD	; 253
    25c8:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    25ca:	80 81       	ld	r24, Z
    25cc:	8e 7f       	andi	r24, 0xFE	; 254
    25ce:	80 83       	st	Z, r24
			transistor_9 = ADC;			
    25d0:	80 91 78 00 	lds	r24, 0x0078
    25d4:	90 91 79 00 	lds	r25, 0x0079
    25d8:	90 93 c1 01 	sts	0x01C1, r25
    25dc:	80 93 c0 01 	sts	0x01C0, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    25e0:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
			set(ADMUX,MUX2); // Transistor 10
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_9 = ADC;			
			break;
    25e2:	1f c1       	rjmp	.+574    	; 0x2822 <adc_switch+0x320>

		case 3:
			state = 4;
    25e4:	84 e0       	ldi	r24, 0x04	; 4
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	90 93 d9 01 	sts	0x01D9, r25
    25ec:	80 93 d8 01 	sts	0x01D8, r24
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
    25f0:	eb e7       	ldi	r30, 0x7B	; 123
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	8f 7d       	andi	r24, 0xDF	; 223
    25f8:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 13
    25fa:	ec e7       	ldi	r30, 0x7C	; 124
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	84 60       	ori	r24, 0x04	; 4
    2602:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2604:	80 81       	ld	r24, Z
    2606:	8d 7f       	andi	r24, 0xFD	; 253
    2608:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    260a:	80 81       	ld	r24, Z
    260c:	81 60       	ori	r24, 0x01	; 1
    260e:	80 83       	st	Z, r24
			transistor_vals[5] = ADC;			
    2610:	80 91 78 00 	lds	r24, 0x0078
    2614:	90 91 79 00 	lds	r25, 0x0079
    2618:	90 93 cf 01 	sts	0x01CF, r25
    261c:	80 93 ce 01 	sts	0x01CE, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2620:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
			set(ADMUX,MUX2); // Transistor 13
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[5] = ADC;			
			break;
    2622:	ff c0       	rjmp	.+510    	; 0x2822 <adc_switch+0x320>

		case 4:
			state = 5;
    2624:	85 e0       	ldi	r24, 0x05	; 5
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	90 93 d9 01 	sts	0x01D9, r25
    262c:	80 93 d8 01 	sts	0x01D8, r24
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
    2630:	eb e7       	ldi	r30, 0x7B	; 123
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	8f 7d       	andi	r24, 0xDF	; 223
    2638:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 14
    263a:	ec e7       	ldi	r30, 0x7C	; 124
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	84 60       	ori	r24, 0x04	; 4
    2642:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2644:	80 81       	ld	r24, Z
    2646:	82 60       	ori	r24, 0x02	; 2
    2648:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    264a:	80 81       	ld	r24, Z
    264c:	8e 7f       	andi	r24, 0xFE	; 254
    264e:	80 83       	st	Z, r24
			transistor_vals[7] = ADC;			
    2650:	80 91 78 00 	lds	r24, 0x0078
    2654:	90 91 79 00 	lds	r25, 0x0079
    2658:	90 93 d3 01 	sts	0x01D3, r25
    265c:	80 93 d2 01 	sts	0x01D2, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2660:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
			set(ADMUX,MUX2); // Transistor 14
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[7] = ADC;			
			break;
    2662:	df c0       	rjmp	.+446    	; 0x2822 <adc_switch+0x320>

		case 5:
			state = 6;
    2664:	86 e0       	ldi	r24, 0x06	; 6
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	90 93 d9 01 	sts	0x01D9, r25
    266c:	80 93 d8 01 	sts	0x01D8, r24
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
    2670:	eb e7       	ldi	r30, 0x7B	; 123
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	8f 7d       	andi	r24, 0xDF	; 223
    2678:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 15
    267a:	ec e7       	ldi	r30, 0x7C	; 124
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	84 60       	ori	r24, 0x04	; 4
    2682:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2684:	80 81       	ld	r24, Z
    2686:	82 60       	ori	r24, 0x02	; 2
    2688:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    268a:	80 81       	ld	r24, Z
    268c:	81 60       	ori	r24, 0x01	; 1
    268e:	80 83       	st	Z, r24
			transistor_vals[8] = ADC;			
    2690:	80 91 78 00 	lds	r24, 0x0078
    2694:	90 91 79 00 	lds	r25, 0x0079
    2698:	90 93 d5 01 	sts	0x01D5, r25
    269c:	80 93 d4 01 	sts	0x01D4, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    26a0:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
			set(ADMUX,MUX2); // Transistor 15
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[8] = ADC;			
			break;
    26a2:	bf c0       	rjmp	.+382    	; 0x2822 <adc_switch+0x320>

		case 6:
			state = 7;
    26a4:	87 e0       	ldi	r24, 0x07	; 7
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	90 93 d9 01 	sts	0x01D9, r25
    26ac:	80 93 d8 01 	sts	0x01D8, r24
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
    26b0:	eb e7       	ldi	r30, 0x7B	; 123
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	80 62       	ori	r24, 0x20	; 32
    26b8:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 1, 16
    26ba:	ec e7       	ldi	r30, 0x7C	; 124
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	8b 7f       	andi	r24, 0xFB	; 251
    26c2:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    26c4:	80 81       	ld	r24, Z
    26c6:	8d 7f       	andi	r24, 0xFD	; 253
    26c8:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    26ca:	80 81       	ld	r24, Z
    26cc:	8e 7f       	andi	r24, 0xFE	; 254
    26ce:	80 83       	st	Z, r24
			transistor_vals[9] = ADC;			
    26d0:	80 91 78 00 	lds	r24, 0x0078
    26d4:	90 91 79 00 	lds	r25, 0x0079
    26d8:	90 93 d7 01 	sts	0x01D7, r25
    26dc:	80 93 d6 01 	sts	0x01D6, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    26e0:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
			clear(ADMUX,MUX2); // Transistor 1, 16
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[9] = ADC;			
			break;
    26e2:	9f c0       	rjmp	.+318    	; 0x2822 <adc_switch+0x320>

		case 7:
			state = 8;
    26e4:	88 e0       	ldi	r24, 0x08	; 8
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	90 93 d9 01 	sts	0x01D9, r25
    26ec:	80 93 d8 01 	sts	0x01D8, r24
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
    26f0:	eb e7       	ldi	r30, 0x7B	; 123
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	80 62       	ori	r24, 0x20	; 32
    26f8:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 11, 12
    26fa:	ec e7       	ldi	r30, 0x7C	; 124
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	8b 7f       	andi	r24, 0xFB	; 251
    2702:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2704:	80 81       	ld	r24, Z
    2706:	8d 7f       	andi	r24, 0xFD	; 253
    2708:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    270a:	80 81       	ld	r24, Z
    270c:	81 60       	ori	r24, 0x01	; 1
    270e:	80 83       	st	Z, r24
			transistor_vals[0] = ADC;			
    2710:	80 91 78 00 	lds	r24, 0x0078
    2714:	90 91 79 00 	lds	r25, 0x0079
    2718:	90 93 c5 01 	sts	0x01C5, r25
    271c:	80 93 c4 01 	sts	0x01C4, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2720:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
			clear(ADMUX,MUX2); // Transistor 11, 12
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[0] = ADC;			
			break;
    2722:	7f c0       	rjmp	.+254    	; 0x2822 <adc_switch+0x320>

		case 8:
			state = 9;
    2724:	89 e0       	ldi	r24, 0x09	; 9
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	90 93 d9 01 	sts	0x01D9, r25
    272c:	80 93 d8 01 	sts	0x01D8, r24
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
    2730:	eb e7       	ldi	r30, 0x7B	; 123
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	80 62       	ori	r24, 0x20	; 32
    2738:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
    273a:	ec e7       	ldi	r30, 0x7C	; 124
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	8b 7f       	andi	r24, 0xFB	; 251
    2742:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2744:	80 81       	ld	r24, Z
    2746:	82 60       	ori	r24, 0x02	; 2
    2748:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    274a:	80 81       	ld	r24, Z
    274c:	8e 7f       	andi	r24, 0xFE	; 254
    274e:	80 83       	st	Z, r24
			transistor_vals[6] = ADC;			
    2750:	80 91 78 00 	lds	r24, 0x0078
    2754:	90 91 79 00 	lds	r25, 0x0079
    2758:	90 93 d1 01 	sts	0x01D1, r25
    275c:	80 93 d0 01 	sts	0x01D0, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2760:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[6] = ADC;			
			break;
    2762:	5f c0       	rjmp	.+190    	; 0x2822 <adc_switch+0x320>

		case 9:
			state = 10;
    2764:	8a e0       	ldi	r24, 0x0A	; 10
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	90 93 d9 01 	sts	0x01D9, r25
    276c:	80 93 d8 01 	sts	0x01D8, r24
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
    2770:	eb e7       	ldi	r30, 0x7B	; 123
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	80 62       	ori	r24, 0x20	; 32
    2778:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 2
    277a:	ec e7       	ldi	r30, 0x7C	; 124
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	8b 7f       	andi	r24, 0xFB	; 251
    2782:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2784:	80 81       	ld	r24, Z
    2786:	82 60       	ori	r24, 0x02	; 2
    2788:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    278a:	80 81       	ld	r24, Z
    278c:	81 60       	ori	r24, 0x01	; 1
    278e:	80 83       	st	Z, r24
			transistor_vals[3] = ADC;			
    2790:	80 91 78 00 	lds	r24, 0x0078
    2794:	90 91 79 00 	lds	r25, 0x0079
    2798:	90 93 cb 01 	sts	0x01CB, r25
    279c:	80 93 ca 01 	sts	0x01CA, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    27a0:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
			clear(ADMUX,MUX2); // Transistor 2
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[3] = ADC;			
			break;
    27a2:	3f c0       	rjmp	.+126    	; 0x2822 <adc_switch+0x320>

		case 10:
			state = 11;
    27a4:	8b e0       	ldi	r24, 0x0B	; 11
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	90 93 d9 01 	sts	0x01D9, r25
    27ac:	80 93 d8 01 	sts	0x01D8, r24
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
    27b0:	eb e7       	ldi	r30, 0x7B	; 123
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	80 62       	ori	r24, 0x20	; 32
    27b8:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 3
    27ba:	ec e7       	ldi	r30, 0x7C	; 124
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	84 60       	ori	r24, 0x04	; 4
    27c2:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    27c4:	80 81       	ld	r24, Z
    27c6:	8d 7f       	andi	r24, 0xFD	; 253
    27c8:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    27ca:	80 81       	ld	r24, Z
    27cc:	8e 7f       	andi	r24, 0xFE	; 254
    27ce:	80 83       	st	Z, r24
			transistor_vals[1] = ADC;			
    27d0:	80 91 78 00 	lds	r24, 0x0078
    27d4:	90 91 79 00 	lds	r25, 0x0079
    27d8:	90 93 c7 01 	sts	0x01C7, r25
    27dc:	80 93 c6 01 	sts	0x01C6, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    27e0:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
			set(ADMUX,MUX2); // Transistor 3
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[1] = ADC;			
			break;
    27e2:	1f c0       	rjmp	.+62     	; 0x2822 <adc_switch+0x320>

		case 11:
			state = 0;
    27e4:	10 92 d9 01 	sts	0x01D9, r1
    27e8:	10 92 d8 01 	sts	0x01D8, r1
			set(ADCSRB,MUX5); // Select ADC13 at pin B6
    27ec:	eb e7       	ldi	r30, 0x7B	; 123
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	80 62       	ori	r24, 0x20	; 32
    27f4:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 4
    27f6:	ec e7       	ldi	r30, 0x7C	; 124
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	84 60       	ori	r24, 0x04	; 4
    27fe:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2800:	80 81       	ld	r24, Z
    2802:	8d 7f       	andi	r24, 0xFD	; 253
    2804:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2806:	80 81       	ld	r24, Z
    2808:	81 60       	ori	r24, 0x01	; 1
    280a:	80 83       	st	Z, r24
			transistor_3 = ADC;			
    280c:	80 91 78 00 	lds	r24, 0x0078
    2810:	90 91 79 00 	lds	r25, 0x0079
    2814:	90 93 c3 01 	sts	0x01C3, r25
    2818:	80 93 c2 01 	sts	0x01C2, r24
			return_val = 1;
    281c:	81 e0       	ldi	r24, 0x01	; 1
			// m_usb_tx_string("  IR14: ");
			// m_usb_tx_int(transistor_vals[8]);
			// m_usb_tx_string("  IR15: ");
			// m_usb_tx_int(transistor_vals[9]);
			
			break;
    281e:	01 c0       	rjmp	.+2      	; 0x2822 <adc_switch+0x320>
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2820:	80 e0       	ldi	r24, 0x00	; 0
			// m_usb_tx_int(transistor_vals[9]);
			
			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
    2822:	ea e7       	ldi	r30, 0x7A	; 122
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	90 81       	ld	r25, Z
    2828:	90 68       	ori	r25, 0x80	; 128
    282a:	90 83       	st	Z, r25
	set(ADCSRA,ADSC); // Begin new conversion
    282c:	90 81       	ld	r25, Z
    282e:	90 64       	ori	r25, 0x40	; 64
    2830:	90 83       	st	Z, r25

	return return_val;
}
    2832:	08 95       	ret

00002834 <__subsf3>:
    2834:	50 58       	subi	r21, 0x80	; 128

00002836 <__addsf3>:
    2836:	bb 27       	eor	r27, r27
    2838:	aa 27       	eor	r26, r26
    283a:	0e 94 32 14 	call	0x2864	; 0x2864 <__addsf3x>
    283e:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__fp_round>
    2842:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__fp_pscA>
    2846:	38 f0       	brcs	.+14     	; 0x2856 <__addsf3+0x20>
    2848:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__fp_pscB>
    284c:	20 f0       	brcs	.+8      	; 0x2856 <__addsf3+0x20>
    284e:	39 f4       	brne	.+14     	; 0x285e <__addsf3+0x28>
    2850:	9f 3f       	cpi	r25, 0xFF	; 255
    2852:	19 f4       	brne	.+6      	; 0x285a <__addsf3+0x24>
    2854:	26 f4       	brtc	.+8      	; 0x285e <__addsf3+0x28>
    2856:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__fp_nan>
    285a:	0e f4       	brtc	.+2      	; 0x285e <__addsf3+0x28>
    285c:	e0 95       	com	r30
    285e:	e7 fb       	bst	r30, 7
    2860:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__fp_inf>

00002864 <__addsf3x>:
    2864:	e9 2f       	mov	r30, r25
    2866:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__fp_split3>
    286a:	58 f3       	brcs	.-42     	; 0x2842 <__addsf3+0xc>
    286c:	ba 17       	cp	r27, r26
    286e:	62 07       	cpc	r22, r18
    2870:	73 07       	cpc	r23, r19
    2872:	84 07       	cpc	r24, r20
    2874:	95 07       	cpc	r25, r21
    2876:	20 f0       	brcs	.+8      	; 0x2880 <__addsf3x+0x1c>
    2878:	79 f4       	brne	.+30     	; 0x2898 <__addsf3x+0x34>
    287a:	a6 f5       	brtc	.+104    	; 0x28e4 <__addsf3x+0x80>
    287c:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__fp_zero>
    2880:	0e f4       	brtc	.+2      	; 0x2884 <__addsf3x+0x20>
    2882:	e0 95       	com	r30
    2884:	0b 2e       	mov	r0, r27
    2886:	ba 2f       	mov	r27, r26
    2888:	a0 2d       	mov	r26, r0
    288a:	0b 01       	movw	r0, r22
    288c:	b9 01       	movw	r22, r18
    288e:	90 01       	movw	r18, r0
    2890:	0c 01       	movw	r0, r24
    2892:	ca 01       	movw	r24, r20
    2894:	a0 01       	movw	r20, r0
    2896:	11 24       	eor	r1, r1
    2898:	ff 27       	eor	r31, r31
    289a:	59 1b       	sub	r21, r25
    289c:	99 f0       	breq	.+38     	; 0x28c4 <__addsf3x+0x60>
    289e:	59 3f       	cpi	r21, 0xF9	; 249
    28a0:	50 f4       	brcc	.+20     	; 0x28b6 <__addsf3x+0x52>
    28a2:	50 3e       	cpi	r21, 0xE0	; 224
    28a4:	68 f1       	brcs	.+90     	; 0x2900 <__addsf3x+0x9c>
    28a6:	1a 16       	cp	r1, r26
    28a8:	f0 40       	sbci	r31, 0x00	; 0
    28aa:	a2 2f       	mov	r26, r18
    28ac:	23 2f       	mov	r18, r19
    28ae:	34 2f       	mov	r19, r20
    28b0:	44 27       	eor	r20, r20
    28b2:	58 5f       	subi	r21, 0xF8	; 248
    28b4:	f3 cf       	rjmp	.-26     	; 0x289c <__addsf3x+0x38>
    28b6:	46 95       	lsr	r20
    28b8:	37 95       	ror	r19
    28ba:	27 95       	ror	r18
    28bc:	a7 95       	ror	r26
    28be:	f0 40       	sbci	r31, 0x00	; 0
    28c0:	53 95       	inc	r21
    28c2:	c9 f7       	brne	.-14     	; 0x28b6 <__addsf3x+0x52>
    28c4:	7e f4       	brtc	.+30     	; 0x28e4 <__addsf3x+0x80>
    28c6:	1f 16       	cp	r1, r31
    28c8:	ba 0b       	sbc	r27, r26
    28ca:	62 0b       	sbc	r22, r18
    28cc:	73 0b       	sbc	r23, r19
    28ce:	84 0b       	sbc	r24, r20
    28d0:	ba f0       	brmi	.+46     	; 0x2900 <__addsf3x+0x9c>
    28d2:	91 50       	subi	r25, 0x01	; 1
    28d4:	a1 f0       	breq	.+40     	; 0x28fe <__addsf3x+0x9a>
    28d6:	ff 0f       	add	r31, r31
    28d8:	bb 1f       	adc	r27, r27
    28da:	66 1f       	adc	r22, r22
    28dc:	77 1f       	adc	r23, r23
    28de:	88 1f       	adc	r24, r24
    28e0:	c2 f7       	brpl	.-16     	; 0x28d2 <__addsf3x+0x6e>
    28e2:	0e c0       	rjmp	.+28     	; 0x2900 <__addsf3x+0x9c>
    28e4:	ba 0f       	add	r27, r26
    28e6:	62 1f       	adc	r22, r18
    28e8:	73 1f       	adc	r23, r19
    28ea:	84 1f       	adc	r24, r20
    28ec:	48 f4       	brcc	.+18     	; 0x2900 <__addsf3x+0x9c>
    28ee:	87 95       	ror	r24
    28f0:	77 95       	ror	r23
    28f2:	67 95       	ror	r22
    28f4:	b7 95       	ror	r27
    28f6:	f7 95       	ror	r31
    28f8:	9e 3f       	cpi	r25, 0xFE	; 254
    28fa:	08 f0       	brcs	.+2      	; 0x28fe <__addsf3x+0x9a>
    28fc:	b0 cf       	rjmp	.-160    	; 0x285e <__addsf3+0x28>
    28fe:	93 95       	inc	r25
    2900:	88 0f       	add	r24, r24
    2902:	08 f0       	brcs	.+2      	; 0x2906 <__addsf3x+0xa2>
    2904:	99 27       	eor	r25, r25
    2906:	ee 0f       	add	r30, r30
    2908:	97 95       	ror	r25
    290a:	87 95       	ror	r24
    290c:	08 95       	ret
    290e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__fp_pscA>
    2912:	60 f0       	brcs	.+24     	; 0x292c <__addsf3x+0xc8>
    2914:	80 e8       	ldi	r24, 0x80	; 128
    2916:	91 e0       	ldi	r25, 0x01	; 1
    2918:	09 f4       	brne	.+2      	; 0x291c <__addsf3x+0xb8>
    291a:	9e ef       	ldi	r25, 0xFE	; 254
    291c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__fp_pscB>
    2920:	28 f0       	brcs	.+10     	; 0x292c <__addsf3x+0xc8>
    2922:	40 e8       	ldi	r20, 0x80	; 128
    2924:	51 e0       	ldi	r21, 0x01	; 1
    2926:	71 f4       	brne	.+28     	; 0x2944 <atan2+0x10>
    2928:	5e ef       	ldi	r21, 0xFE	; 254
    292a:	0c c0       	rjmp	.+24     	; 0x2944 <atan2+0x10>
    292c:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__fp_nan>
    2930:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__fp_zero>

00002934 <atan2>:
    2934:	e9 2f       	mov	r30, r25
    2936:	e0 78       	andi	r30, 0x80	; 128
    2938:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__fp_split3>
    293c:	40 f3       	brcs	.-48     	; 0x290e <__addsf3x+0xaa>
    293e:	09 2e       	mov	r0, r25
    2940:	05 2a       	or	r0, r21
    2942:	b1 f3       	breq	.-20     	; 0x2930 <__addsf3x+0xcc>
    2944:	26 17       	cp	r18, r22
    2946:	37 07       	cpc	r19, r23
    2948:	48 07       	cpc	r20, r24
    294a:	59 07       	cpc	r21, r25
    294c:	38 f0       	brcs	.+14     	; 0x295c <atan2+0x28>
    294e:	0e 2e       	mov	r0, r30
    2950:	07 f8       	bld	r0, 7
    2952:	e0 25       	eor	r30, r0
    2954:	69 f0       	breq	.+26     	; 0x2970 <atan2+0x3c>
    2956:	e0 25       	eor	r30, r0
    2958:	e0 64       	ori	r30, 0x40	; 64
    295a:	0a c0       	rjmp	.+20     	; 0x2970 <atan2+0x3c>
    295c:	ef 63       	ori	r30, 0x3F	; 63
    295e:	07 f8       	bld	r0, 7
    2960:	00 94       	com	r0
    2962:	07 fa       	bst	r0, 7
    2964:	db 01       	movw	r26, r22
    2966:	b9 01       	movw	r22, r18
    2968:	9d 01       	movw	r18, r26
    296a:	dc 01       	movw	r26, r24
    296c:	ca 01       	movw	r24, r20
    296e:	ad 01       	movw	r20, r26
    2970:	ef 93       	push	r30
    2972:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__divsf3_pse>
    2976:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__fp_round>
    297a:	0e 94 ca 14 	call	0x2994	; 0x2994 <atan>
    297e:	5f 91       	pop	r21
    2980:	55 23       	and	r21, r21
    2982:	39 f0       	breq	.+14     	; 0x2992 <atan2+0x5e>
    2984:	2b ed       	ldi	r18, 0xDB	; 219
    2986:	3f e0       	ldi	r19, 0x0F	; 15
    2988:	49 e4       	ldi	r20, 0x49	; 73
    298a:	50 fd       	sbrc	r21, 0
    298c:	49 ec       	ldi	r20, 0xC9	; 201
    298e:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__addsf3>
    2992:	08 95       	ret

00002994 <atan>:
    2994:	df 93       	push	r29
    2996:	dd 27       	eor	r29, r29
    2998:	b9 2f       	mov	r27, r25
    299a:	bf 77       	andi	r27, 0x7F	; 127
    299c:	40 e8       	ldi	r20, 0x80	; 128
    299e:	5f e3       	ldi	r21, 0x3F	; 63
    29a0:	16 16       	cp	r1, r22
    29a2:	17 06       	cpc	r1, r23
    29a4:	48 07       	cpc	r20, r24
    29a6:	5b 07       	cpc	r21, r27
    29a8:	18 f4       	brcc	.+6      	; 0x29b0 <atan+0x1c>
    29aa:	d9 2f       	mov	r29, r25
    29ac:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <inverse>
    29b0:	9f 93       	push	r25
    29b2:	8f 93       	push	r24
    29b4:	7f 93       	push	r23
    29b6:	6f 93       	push	r22
    29b8:	0e 94 84 17 	call	0x2f08	; 0x2f08 <square>
    29bc:	e4 ed       	ldi	r30, 0xD4	; 212
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__fp_powser>
    29c4:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__fp_round>
    29c8:	2f 91       	pop	r18
    29ca:	3f 91       	pop	r19
    29cc:	4f 91       	pop	r20
    29ce:	5f 91       	pop	r21
    29d0:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__mulsf3x>
    29d4:	dd 23       	and	r29, r29
    29d6:	51 f0       	breq	.+20     	; 0x29ec <atan+0x58>
    29d8:	90 58       	subi	r25, 0x80	; 128
    29da:	a2 ea       	ldi	r26, 0xA2	; 162
    29dc:	2a ed       	ldi	r18, 0xDA	; 218
    29de:	3f e0       	ldi	r19, 0x0F	; 15
    29e0:	49 ec       	ldi	r20, 0xC9	; 201
    29e2:	5f e3       	ldi	r21, 0x3F	; 63
    29e4:	d0 78       	andi	r29, 0x80	; 128
    29e6:	5d 27       	eor	r21, r29
    29e8:	0e 94 32 14 	call	0x2864	; 0x2864 <__addsf3x>
    29ec:	df 91       	pop	r29
    29ee:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__fp_round>

000029f2 <__cmpsf2>:
    29f2:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <__fp_cmp>
    29f6:	08 f4       	brcc	.+2      	; 0x29fa <__cmpsf2+0x8>
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	08 95       	ret

000029fc <cos>:
    29fc:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__fp_rempio2>
    2a00:	e3 95       	inc	r30
    2a02:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_sinus>

00002a06 <__divsf3>:
    2a06:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__divsf3x>
    2a0a:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__fp_round>
    2a0e:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__fp_pscB>
    2a12:	58 f0       	brcs	.+22     	; 0x2a2a <__divsf3+0x24>
    2a14:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__fp_pscA>
    2a18:	40 f0       	brcs	.+16     	; 0x2a2a <__divsf3+0x24>
    2a1a:	29 f4       	brne	.+10     	; 0x2a26 <__divsf3+0x20>
    2a1c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a1e:	29 f0       	breq	.+10     	; 0x2a2a <__divsf3+0x24>
    2a20:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__fp_inf>
    2a24:	51 11       	cpse	r21, r1
    2a26:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__fp_szero>
    2a2a:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__fp_nan>

00002a2e <__divsf3x>:
    2a2e:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__fp_split3>
    2a32:	68 f3       	brcs	.-38     	; 0x2a0e <__divsf3+0x8>

00002a34 <__divsf3_pse>:
    2a34:	99 23       	and	r25, r25
    2a36:	b1 f3       	breq	.-20     	; 0x2a24 <__divsf3+0x1e>
    2a38:	55 23       	and	r21, r21
    2a3a:	91 f3       	breq	.-28     	; 0x2a20 <__divsf3+0x1a>
    2a3c:	95 1b       	sub	r25, r21
    2a3e:	55 0b       	sbc	r21, r21
    2a40:	bb 27       	eor	r27, r27
    2a42:	aa 27       	eor	r26, r26
    2a44:	62 17       	cp	r22, r18
    2a46:	73 07       	cpc	r23, r19
    2a48:	84 07       	cpc	r24, r20
    2a4a:	38 f0       	brcs	.+14     	; 0x2a5a <__divsf3_pse+0x26>
    2a4c:	9f 5f       	subi	r25, 0xFF	; 255
    2a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a50:	22 0f       	add	r18, r18
    2a52:	33 1f       	adc	r19, r19
    2a54:	44 1f       	adc	r20, r20
    2a56:	aa 1f       	adc	r26, r26
    2a58:	a9 f3       	breq	.-22     	; 0x2a44 <__divsf3_pse+0x10>
    2a5a:	35 d0       	rcall	.+106    	; 0x2ac6 <__divsf3_pse+0x92>
    2a5c:	0e 2e       	mov	r0, r30
    2a5e:	3a f0       	brmi	.+14     	; 0x2a6e <__divsf3_pse+0x3a>
    2a60:	e0 e8       	ldi	r30, 0x80	; 128
    2a62:	32 d0       	rcall	.+100    	; 0x2ac8 <__divsf3_pse+0x94>
    2a64:	91 50       	subi	r25, 0x01	; 1
    2a66:	50 40       	sbci	r21, 0x00	; 0
    2a68:	e6 95       	lsr	r30
    2a6a:	00 1c       	adc	r0, r0
    2a6c:	ca f7       	brpl	.-14     	; 0x2a60 <__divsf3_pse+0x2c>
    2a6e:	2b d0       	rcall	.+86     	; 0x2ac6 <__divsf3_pse+0x92>
    2a70:	fe 2f       	mov	r31, r30
    2a72:	29 d0       	rcall	.+82     	; 0x2ac6 <__divsf3_pse+0x92>
    2a74:	66 0f       	add	r22, r22
    2a76:	77 1f       	adc	r23, r23
    2a78:	88 1f       	adc	r24, r24
    2a7a:	bb 1f       	adc	r27, r27
    2a7c:	26 17       	cp	r18, r22
    2a7e:	37 07       	cpc	r19, r23
    2a80:	48 07       	cpc	r20, r24
    2a82:	ab 07       	cpc	r26, r27
    2a84:	b0 e8       	ldi	r27, 0x80	; 128
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <__divsf3_pse+0x56>
    2a88:	bb 0b       	sbc	r27, r27
    2a8a:	80 2d       	mov	r24, r0
    2a8c:	bf 01       	movw	r22, r30
    2a8e:	ff 27       	eor	r31, r31
    2a90:	93 58       	subi	r25, 0x83	; 131
    2a92:	5f 4f       	sbci	r21, 0xFF	; 255
    2a94:	3a f0       	brmi	.+14     	; 0x2aa4 <__divsf3_pse+0x70>
    2a96:	9e 3f       	cpi	r25, 0xFE	; 254
    2a98:	51 05       	cpc	r21, r1
    2a9a:	78 f0       	brcs	.+30     	; 0x2aba <__divsf3_pse+0x86>
    2a9c:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__fp_inf>
    2aa0:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__fp_szero>
    2aa4:	5f 3f       	cpi	r21, 0xFF	; 255
    2aa6:	e4 f3       	brlt	.-8      	; 0x2aa0 <__divsf3_pse+0x6c>
    2aa8:	98 3e       	cpi	r25, 0xE8	; 232
    2aaa:	d4 f3       	brlt	.-12     	; 0x2aa0 <__divsf3_pse+0x6c>
    2aac:	86 95       	lsr	r24
    2aae:	77 95       	ror	r23
    2ab0:	67 95       	ror	r22
    2ab2:	b7 95       	ror	r27
    2ab4:	f7 95       	ror	r31
    2ab6:	9f 5f       	subi	r25, 0xFF	; 255
    2ab8:	c9 f7       	brne	.-14     	; 0x2aac <__divsf3_pse+0x78>
    2aba:	88 0f       	add	r24, r24
    2abc:	91 1d       	adc	r25, r1
    2abe:	96 95       	lsr	r25
    2ac0:	87 95       	ror	r24
    2ac2:	97 f9       	bld	r25, 7
    2ac4:	08 95       	ret
    2ac6:	e1 e0       	ldi	r30, 0x01	; 1
    2ac8:	66 0f       	add	r22, r22
    2aca:	77 1f       	adc	r23, r23
    2acc:	88 1f       	adc	r24, r24
    2ace:	bb 1f       	adc	r27, r27
    2ad0:	62 17       	cp	r22, r18
    2ad2:	73 07       	cpc	r23, r19
    2ad4:	84 07       	cpc	r24, r20
    2ad6:	ba 07       	cpc	r27, r26
    2ad8:	20 f0       	brcs	.+8      	; 0x2ae2 <__divsf3_pse+0xae>
    2ada:	62 1b       	sub	r22, r18
    2adc:	73 0b       	sbc	r23, r19
    2ade:	84 0b       	sbc	r24, r20
    2ae0:	ba 0b       	sbc	r27, r26
    2ae2:	ee 1f       	adc	r30, r30
    2ae4:	88 f7       	brcc	.-30     	; 0x2ac8 <__divsf3_pse+0x94>
    2ae6:	e0 95       	com	r30
    2ae8:	08 95       	ret

00002aea <__fixunssfsi>:
    2aea:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__fp_splitA>
    2aee:	88 f0       	brcs	.+34     	; 0x2b12 <__fixunssfsi+0x28>
    2af0:	9f 57       	subi	r25, 0x7F	; 127
    2af2:	98 f0       	brcs	.+38     	; 0x2b1a <__fixunssfsi+0x30>
    2af4:	b9 2f       	mov	r27, r25
    2af6:	99 27       	eor	r25, r25
    2af8:	b7 51       	subi	r27, 0x17	; 23
    2afa:	b0 f0       	brcs	.+44     	; 0x2b28 <__fixunssfsi+0x3e>
    2afc:	e1 f0       	breq	.+56     	; 0x2b36 <__fixunssfsi+0x4c>
    2afe:	66 0f       	add	r22, r22
    2b00:	77 1f       	adc	r23, r23
    2b02:	88 1f       	adc	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	1a f0       	brmi	.+6      	; 0x2b0e <__fixunssfsi+0x24>
    2b08:	ba 95       	dec	r27
    2b0a:	c9 f7       	brne	.-14     	; 0x2afe <__fixunssfsi+0x14>
    2b0c:	14 c0       	rjmp	.+40     	; 0x2b36 <__fixunssfsi+0x4c>
    2b0e:	b1 30       	cpi	r27, 0x01	; 1
    2b10:	91 f0       	breq	.+36     	; 0x2b36 <__fixunssfsi+0x4c>
    2b12:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__fp_zero>
    2b16:	b1 e0       	ldi	r27, 0x01	; 1
    2b18:	08 95       	ret
    2b1a:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__fp_zero>
    2b1e:	67 2f       	mov	r22, r23
    2b20:	78 2f       	mov	r23, r24
    2b22:	88 27       	eor	r24, r24
    2b24:	b8 5f       	subi	r27, 0xF8	; 248
    2b26:	39 f0       	breq	.+14     	; 0x2b36 <__fixunssfsi+0x4c>
    2b28:	b9 3f       	cpi	r27, 0xF9	; 249
    2b2a:	cc f3       	brlt	.-14     	; 0x2b1e <__fixunssfsi+0x34>
    2b2c:	86 95       	lsr	r24
    2b2e:	77 95       	ror	r23
    2b30:	67 95       	ror	r22
    2b32:	b3 95       	inc	r27
    2b34:	d9 f7       	brne	.-10     	; 0x2b2c <__fixunssfsi+0x42>
    2b36:	3e f4       	brtc	.+14     	; 0x2b46 <__fixunssfsi+0x5c>
    2b38:	90 95       	com	r25
    2b3a:	80 95       	com	r24
    2b3c:	70 95       	com	r23
    2b3e:	61 95       	neg	r22
    2b40:	7f 4f       	sbci	r23, 0xFF	; 255
    2b42:	8f 4f       	sbci	r24, 0xFF	; 255
    2b44:	9f 4f       	sbci	r25, 0xFF	; 255
    2b46:	08 95       	ret

00002b48 <__floatunsisf>:
    2b48:	e8 94       	clt
    2b4a:	09 c0       	rjmp	.+18     	; 0x2b5e <__floatsisf+0x12>

00002b4c <__floatsisf>:
    2b4c:	97 fb       	bst	r25, 7
    2b4e:	3e f4       	brtc	.+14     	; 0x2b5e <__floatsisf+0x12>
    2b50:	90 95       	com	r25
    2b52:	80 95       	com	r24
    2b54:	70 95       	com	r23
    2b56:	61 95       	neg	r22
    2b58:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5e:	99 23       	and	r25, r25
    2b60:	a9 f0       	breq	.+42     	; 0x2b8c <__floatsisf+0x40>
    2b62:	f9 2f       	mov	r31, r25
    2b64:	96 e9       	ldi	r25, 0x96	; 150
    2b66:	bb 27       	eor	r27, r27
    2b68:	93 95       	inc	r25
    2b6a:	f6 95       	lsr	r31
    2b6c:	87 95       	ror	r24
    2b6e:	77 95       	ror	r23
    2b70:	67 95       	ror	r22
    2b72:	b7 95       	ror	r27
    2b74:	f1 11       	cpse	r31, r1
    2b76:	f8 cf       	rjmp	.-16     	; 0x2b68 <__floatsisf+0x1c>
    2b78:	fa f4       	brpl	.+62     	; 0x2bb8 <__floatsisf+0x6c>
    2b7a:	bb 0f       	add	r27, r27
    2b7c:	11 f4       	brne	.+4      	; 0x2b82 <__floatsisf+0x36>
    2b7e:	60 ff       	sbrs	r22, 0
    2b80:	1b c0       	rjmp	.+54     	; 0x2bb8 <__floatsisf+0x6c>
    2b82:	6f 5f       	subi	r22, 0xFF	; 255
    2b84:	7f 4f       	sbci	r23, 0xFF	; 255
    2b86:	8f 4f       	sbci	r24, 0xFF	; 255
    2b88:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8a:	16 c0       	rjmp	.+44     	; 0x2bb8 <__floatsisf+0x6c>
    2b8c:	88 23       	and	r24, r24
    2b8e:	11 f0       	breq	.+4      	; 0x2b94 <__floatsisf+0x48>
    2b90:	96 e9       	ldi	r25, 0x96	; 150
    2b92:	11 c0       	rjmp	.+34     	; 0x2bb6 <__floatsisf+0x6a>
    2b94:	77 23       	and	r23, r23
    2b96:	21 f0       	breq	.+8      	; 0x2ba0 <__floatsisf+0x54>
    2b98:	9e e8       	ldi	r25, 0x8E	; 142
    2b9a:	87 2f       	mov	r24, r23
    2b9c:	76 2f       	mov	r23, r22
    2b9e:	05 c0       	rjmp	.+10     	; 0x2baa <__floatsisf+0x5e>
    2ba0:	66 23       	and	r22, r22
    2ba2:	71 f0       	breq	.+28     	; 0x2bc0 <__floatsisf+0x74>
    2ba4:	96 e8       	ldi	r25, 0x86	; 134
    2ba6:	86 2f       	mov	r24, r22
    2ba8:	70 e0       	ldi	r23, 0x00	; 0
    2baa:	60 e0       	ldi	r22, 0x00	; 0
    2bac:	2a f0       	brmi	.+10     	; 0x2bb8 <__floatsisf+0x6c>
    2bae:	9a 95       	dec	r25
    2bb0:	66 0f       	add	r22, r22
    2bb2:	77 1f       	adc	r23, r23
    2bb4:	88 1f       	adc	r24, r24
    2bb6:	da f7       	brpl	.-10     	; 0x2bae <__floatsisf+0x62>
    2bb8:	88 0f       	add	r24, r24
    2bba:	96 95       	lsr	r25
    2bbc:	87 95       	ror	r24
    2bbe:	97 f9       	bld	r25, 7
    2bc0:	08 95       	ret

00002bc2 <__fp_cmp>:
    2bc2:	99 0f       	add	r25, r25
    2bc4:	00 08       	sbc	r0, r0
    2bc6:	55 0f       	add	r21, r21
    2bc8:	aa 0b       	sbc	r26, r26
    2bca:	e0 e8       	ldi	r30, 0x80	; 128
    2bcc:	fe ef       	ldi	r31, 0xFE	; 254
    2bce:	16 16       	cp	r1, r22
    2bd0:	17 06       	cpc	r1, r23
    2bd2:	e8 07       	cpc	r30, r24
    2bd4:	f9 07       	cpc	r31, r25
    2bd6:	c0 f0       	brcs	.+48     	; 0x2c08 <__fp_cmp+0x46>
    2bd8:	12 16       	cp	r1, r18
    2bda:	13 06       	cpc	r1, r19
    2bdc:	e4 07       	cpc	r30, r20
    2bde:	f5 07       	cpc	r31, r21
    2be0:	98 f0       	brcs	.+38     	; 0x2c08 <__fp_cmp+0x46>
    2be2:	62 1b       	sub	r22, r18
    2be4:	73 0b       	sbc	r23, r19
    2be6:	84 0b       	sbc	r24, r20
    2be8:	95 0b       	sbc	r25, r21
    2bea:	39 f4       	brne	.+14     	; 0x2bfa <__fp_cmp+0x38>
    2bec:	0a 26       	eor	r0, r26
    2bee:	61 f0       	breq	.+24     	; 0x2c08 <__fp_cmp+0x46>
    2bf0:	23 2b       	or	r18, r19
    2bf2:	24 2b       	or	r18, r20
    2bf4:	25 2b       	or	r18, r21
    2bf6:	21 f4       	brne	.+8      	; 0x2c00 <__fp_cmp+0x3e>
    2bf8:	08 95       	ret
    2bfa:	0a 26       	eor	r0, r26
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <__fp_cmp+0x3e>
    2bfe:	a1 40       	sbci	r26, 0x01	; 1
    2c00:	a6 95       	lsr	r26
    2c02:	8f ef       	ldi	r24, 0xFF	; 255
    2c04:	81 1d       	adc	r24, r1
    2c06:	81 1d       	adc	r24, r1
    2c08:	08 95       	ret

00002c0a <__fp_inf>:
    2c0a:	97 f9       	bld	r25, 7
    2c0c:	9f 67       	ori	r25, 0x7F	; 127
    2c0e:	80 e8       	ldi	r24, 0x80	; 128
    2c10:	70 e0       	ldi	r23, 0x00	; 0
    2c12:	60 e0       	ldi	r22, 0x00	; 0
    2c14:	08 95       	ret

00002c16 <__fp_nan>:
    2c16:	9f ef       	ldi	r25, 0xFF	; 255
    2c18:	80 ec       	ldi	r24, 0xC0	; 192
    2c1a:	08 95       	ret

00002c1c <__fp_powser>:
    2c1c:	df 93       	push	r29
    2c1e:	cf 93       	push	r28
    2c20:	1f 93       	push	r17
    2c22:	0f 93       	push	r16
    2c24:	ff 92       	push	r15
    2c26:	ef 92       	push	r14
    2c28:	df 92       	push	r13
    2c2a:	7b 01       	movw	r14, r22
    2c2c:	8c 01       	movw	r16, r24
    2c2e:	68 94       	set
    2c30:	06 c0       	rjmp	.+12     	; 0x2c3e <__fp_powser+0x22>
    2c32:	da 2e       	mov	r13, r26
    2c34:	ef 01       	movw	r28, r30
    2c36:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__mulsf3x>
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	e8 94       	clt
    2c3e:	a5 91       	lpm	r26, Z+
    2c40:	25 91       	lpm	r18, Z+
    2c42:	35 91       	lpm	r19, Z+
    2c44:	45 91       	lpm	r20, Z+
    2c46:	55 91       	lpm	r21, Z+
    2c48:	a6 f3       	brts	.-24     	; 0x2c32 <__fp_powser+0x16>
    2c4a:	ef 01       	movw	r28, r30
    2c4c:	0e 94 32 14 	call	0x2864	; 0x2864 <__addsf3x>
    2c50:	fe 01       	movw	r30, r28
    2c52:	97 01       	movw	r18, r14
    2c54:	a8 01       	movw	r20, r16
    2c56:	da 94       	dec	r13
    2c58:	69 f7       	brne	.-38     	; 0x2c34 <__fp_powser+0x18>
    2c5a:	df 90       	pop	r13
    2c5c:	ef 90       	pop	r14
    2c5e:	ff 90       	pop	r15
    2c60:	0f 91       	pop	r16
    2c62:	1f 91       	pop	r17
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <__fp_pscA>:
    2c6a:	00 24       	eor	r0, r0
    2c6c:	0a 94       	dec	r0
    2c6e:	16 16       	cp	r1, r22
    2c70:	17 06       	cpc	r1, r23
    2c72:	18 06       	cpc	r1, r24
    2c74:	09 06       	cpc	r0, r25
    2c76:	08 95       	ret

00002c78 <__fp_pscB>:
    2c78:	00 24       	eor	r0, r0
    2c7a:	0a 94       	dec	r0
    2c7c:	12 16       	cp	r1, r18
    2c7e:	13 06       	cpc	r1, r19
    2c80:	14 06       	cpc	r1, r20
    2c82:	05 06       	cpc	r0, r21
    2c84:	08 95       	ret
    2c86:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__fp_nan>

00002c8a <__fp_rempio2>:
    2c8a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__fp_splitA>
    2c8e:	d8 f3       	brcs	.-10     	; 0x2c86 <__fp_pscB+0xe>
    2c90:	e8 94       	clt
    2c92:	e0 e0       	ldi	r30, 0x00	; 0
    2c94:	bb 27       	eor	r27, r27
    2c96:	9f 57       	subi	r25, 0x7F	; 127
    2c98:	f0 f0       	brcs	.+60     	; 0x2cd6 <__fp_rempio2+0x4c>
    2c9a:	2a ed       	ldi	r18, 0xDA	; 218
    2c9c:	3f e0       	ldi	r19, 0x0F	; 15
    2c9e:	49 ec       	ldi	r20, 0xC9	; 201
    2ca0:	06 c0       	rjmp	.+12     	; 0x2cae <__fp_rempio2+0x24>
    2ca2:	ee 0f       	add	r30, r30
    2ca4:	bb 0f       	add	r27, r27
    2ca6:	66 1f       	adc	r22, r22
    2ca8:	77 1f       	adc	r23, r23
    2caa:	88 1f       	adc	r24, r24
    2cac:	28 f0       	brcs	.+10     	; 0x2cb8 <__fp_rempio2+0x2e>
    2cae:	b2 3a       	cpi	r27, 0xA2	; 162
    2cb0:	62 07       	cpc	r22, r18
    2cb2:	73 07       	cpc	r23, r19
    2cb4:	84 07       	cpc	r24, r20
    2cb6:	28 f0       	brcs	.+10     	; 0x2cc2 <__fp_rempio2+0x38>
    2cb8:	b2 5a       	subi	r27, 0xA2	; 162
    2cba:	62 0b       	sbc	r22, r18
    2cbc:	73 0b       	sbc	r23, r19
    2cbe:	84 0b       	sbc	r24, r20
    2cc0:	e3 95       	inc	r30
    2cc2:	9a 95       	dec	r25
    2cc4:	72 f7       	brpl	.-36     	; 0x2ca2 <__fp_rempio2+0x18>
    2cc6:	80 38       	cpi	r24, 0x80	; 128
    2cc8:	30 f4       	brcc	.+12     	; 0x2cd6 <__fp_rempio2+0x4c>
    2cca:	9a 95       	dec	r25
    2ccc:	bb 0f       	add	r27, r27
    2cce:	66 1f       	adc	r22, r22
    2cd0:	77 1f       	adc	r23, r23
    2cd2:	88 1f       	adc	r24, r24
    2cd4:	d2 f7       	brpl	.-12     	; 0x2cca <__fp_rempio2+0x40>
    2cd6:	90 48       	sbci	r25, 0x80	; 128
    2cd8:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__fp_mpack_finite>

00002cdc <__fp_round>:
    2cdc:	09 2e       	mov	r0, r25
    2cde:	03 94       	inc	r0
    2ce0:	00 0c       	add	r0, r0
    2ce2:	11 f4       	brne	.+4      	; 0x2ce8 <__fp_round+0xc>
    2ce4:	88 23       	and	r24, r24
    2ce6:	52 f0       	brmi	.+20     	; 0x2cfc <__fp_round+0x20>
    2ce8:	bb 0f       	add	r27, r27
    2cea:	40 f4       	brcc	.+16     	; 0x2cfc <__fp_round+0x20>
    2cec:	bf 2b       	or	r27, r31
    2cee:	11 f4       	brne	.+4      	; 0x2cf4 <__fp_round+0x18>
    2cf0:	60 ff       	sbrs	r22, 0
    2cf2:	04 c0       	rjmp	.+8      	; 0x2cfc <__fp_round+0x20>
    2cf4:	6f 5f       	subi	r22, 0xFF	; 255
    2cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf8:	8f 4f       	sbci	r24, 0xFF	; 255
    2cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfc:	08 95       	ret

00002cfe <__fp_sinus>:
    2cfe:	ef 93       	push	r30
    2d00:	e0 ff       	sbrs	r30, 0
    2d02:	07 c0       	rjmp	.+14     	; 0x2d12 <__fp_sinus+0x14>
    2d04:	a2 ea       	ldi	r26, 0xA2	; 162
    2d06:	2a ed       	ldi	r18, 0xDA	; 218
    2d08:	3f e0       	ldi	r19, 0x0F	; 15
    2d0a:	49 ec       	ldi	r20, 0xC9	; 201
    2d0c:	5f eb       	ldi	r21, 0xBF	; 191
    2d0e:	0e 94 32 14 	call	0x2864	; 0x2864 <__addsf3x>
    2d12:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__fp_round>
    2d16:	0f 90       	pop	r0
    2d18:	03 94       	inc	r0
    2d1a:	01 fc       	sbrc	r0, 1
    2d1c:	90 58       	subi	r25, 0x80	; 128
    2d1e:	e1 e0       	ldi	r30, 0x01	; 1
    2d20:	f1 e0       	ldi	r31, 0x01	; 1
    2d22:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <__fp_powsodd>

00002d26 <__fp_split3>:
    2d26:	57 fd       	sbrc	r21, 7
    2d28:	90 58       	subi	r25, 0x80	; 128
    2d2a:	44 0f       	add	r20, r20
    2d2c:	55 1f       	adc	r21, r21
    2d2e:	59 f0       	breq	.+22     	; 0x2d46 <__fp_splitA+0x10>
    2d30:	5f 3f       	cpi	r21, 0xFF	; 255
    2d32:	71 f0       	breq	.+28     	; 0x2d50 <__fp_splitA+0x1a>
    2d34:	47 95       	ror	r20

00002d36 <__fp_splitA>:
    2d36:	88 0f       	add	r24, r24
    2d38:	97 fb       	bst	r25, 7
    2d3a:	99 1f       	adc	r25, r25
    2d3c:	61 f0       	breq	.+24     	; 0x2d56 <__fp_splitA+0x20>
    2d3e:	9f 3f       	cpi	r25, 0xFF	; 255
    2d40:	79 f0       	breq	.+30     	; 0x2d60 <__fp_splitA+0x2a>
    2d42:	87 95       	ror	r24
    2d44:	08 95       	ret
    2d46:	12 16       	cp	r1, r18
    2d48:	13 06       	cpc	r1, r19
    2d4a:	14 06       	cpc	r1, r20
    2d4c:	55 1f       	adc	r21, r21
    2d4e:	f2 cf       	rjmp	.-28     	; 0x2d34 <__fp_split3+0xe>
    2d50:	46 95       	lsr	r20
    2d52:	f1 df       	rcall	.-30     	; 0x2d36 <__fp_splitA>
    2d54:	08 c0       	rjmp	.+16     	; 0x2d66 <__fp_splitA+0x30>
    2d56:	16 16       	cp	r1, r22
    2d58:	17 06       	cpc	r1, r23
    2d5a:	18 06       	cpc	r1, r24
    2d5c:	99 1f       	adc	r25, r25
    2d5e:	f1 cf       	rjmp	.-30     	; 0x2d42 <__fp_splitA+0xc>
    2d60:	86 95       	lsr	r24
    2d62:	71 05       	cpc	r23, r1
    2d64:	61 05       	cpc	r22, r1
    2d66:	08 94       	sec
    2d68:	08 95       	ret

00002d6a <__fp_zero>:
    2d6a:	e8 94       	clt

00002d6c <__fp_szero>:
    2d6c:	bb 27       	eor	r27, r27
    2d6e:	66 27       	eor	r22, r22
    2d70:	77 27       	eor	r23, r23
    2d72:	cb 01       	movw	r24, r22
    2d74:	97 f9       	bld	r25, 7
    2d76:	08 95       	ret

00002d78 <__gesf2>:
    2d78:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <__fp_cmp>
    2d7c:	08 f4       	brcc	.+2      	; 0x2d80 <__gesf2+0x8>
    2d7e:	8f ef       	ldi	r24, 0xFF	; 255
    2d80:	08 95       	ret

00002d82 <inverse>:
    2d82:	9b 01       	movw	r18, r22
    2d84:	ac 01       	movw	r20, r24
    2d86:	60 e0       	ldi	r22, 0x00	; 0
    2d88:	70 e0       	ldi	r23, 0x00	; 0
    2d8a:	80 e8       	ldi	r24, 0x80	; 128
    2d8c:	9f e3       	ldi	r25, 0x3F	; 63
    2d8e:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__divsf3>

00002d92 <__mulsf3>:
    2d92:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__mulsf3x>
    2d96:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__fp_round>
    2d9a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__fp_pscA>
    2d9e:	38 f0       	brcs	.+14     	; 0x2dae <__mulsf3+0x1c>
    2da0:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__fp_pscB>
    2da4:	20 f0       	brcs	.+8      	; 0x2dae <__mulsf3+0x1c>
    2da6:	95 23       	and	r25, r21
    2da8:	11 f0       	breq	.+4      	; 0x2dae <__mulsf3+0x1c>
    2daa:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__fp_inf>
    2dae:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__fp_nan>
    2db2:	11 24       	eor	r1, r1
    2db4:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__fp_szero>

00002db8 <__mulsf3x>:
    2db8:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__fp_split3>
    2dbc:	70 f3       	brcs	.-36     	; 0x2d9a <__mulsf3+0x8>

00002dbe <__mulsf3_pse>:
    2dbe:	95 9f       	mul	r25, r21
    2dc0:	c1 f3       	breq	.-16     	; 0x2db2 <__mulsf3+0x20>
    2dc2:	95 0f       	add	r25, r21
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	55 1f       	adc	r21, r21
    2dc8:	62 9f       	mul	r22, r18
    2dca:	f0 01       	movw	r30, r0
    2dcc:	72 9f       	mul	r23, r18
    2dce:	bb 27       	eor	r27, r27
    2dd0:	f0 0d       	add	r31, r0
    2dd2:	b1 1d       	adc	r27, r1
    2dd4:	63 9f       	mul	r22, r19
    2dd6:	aa 27       	eor	r26, r26
    2dd8:	f0 0d       	add	r31, r0
    2dda:	b1 1d       	adc	r27, r1
    2ddc:	aa 1f       	adc	r26, r26
    2dde:	64 9f       	mul	r22, r20
    2de0:	66 27       	eor	r22, r22
    2de2:	b0 0d       	add	r27, r0
    2de4:	a1 1d       	adc	r26, r1
    2de6:	66 1f       	adc	r22, r22
    2de8:	82 9f       	mul	r24, r18
    2dea:	22 27       	eor	r18, r18
    2dec:	b0 0d       	add	r27, r0
    2dee:	a1 1d       	adc	r26, r1
    2df0:	62 1f       	adc	r22, r18
    2df2:	73 9f       	mul	r23, r19
    2df4:	b0 0d       	add	r27, r0
    2df6:	a1 1d       	adc	r26, r1
    2df8:	62 1f       	adc	r22, r18
    2dfa:	83 9f       	mul	r24, r19
    2dfc:	a0 0d       	add	r26, r0
    2dfe:	61 1d       	adc	r22, r1
    2e00:	22 1f       	adc	r18, r18
    2e02:	74 9f       	mul	r23, r20
    2e04:	33 27       	eor	r19, r19
    2e06:	a0 0d       	add	r26, r0
    2e08:	61 1d       	adc	r22, r1
    2e0a:	23 1f       	adc	r18, r19
    2e0c:	84 9f       	mul	r24, r20
    2e0e:	60 0d       	add	r22, r0
    2e10:	21 1d       	adc	r18, r1
    2e12:	82 2f       	mov	r24, r18
    2e14:	76 2f       	mov	r23, r22
    2e16:	6a 2f       	mov	r22, r26
    2e18:	11 24       	eor	r1, r1
    2e1a:	9f 57       	subi	r25, 0x7F	; 127
    2e1c:	50 40       	sbci	r21, 0x00	; 0
    2e1e:	9a f0       	brmi	.+38     	; 0x2e46 <__mulsf3_pse+0x88>
    2e20:	f1 f0       	breq	.+60     	; 0x2e5e <__mulsf3_pse+0xa0>
    2e22:	88 23       	and	r24, r24
    2e24:	4a f0       	brmi	.+18     	; 0x2e38 <__mulsf3_pse+0x7a>
    2e26:	ee 0f       	add	r30, r30
    2e28:	ff 1f       	adc	r31, r31
    2e2a:	bb 1f       	adc	r27, r27
    2e2c:	66 1f       	adc	r22, r22
    2e2e:	77 1f       	adc	r23, r23
    2e30:	88 1f       	adc	r24, r24
    2e32:	91 50       	subi	r25, 0x01	; 1
    2e34:	50 40       	sbci	r21, 0x00	; 0
    2e36:	a9 f7       	brne	.-22     	; 0x2e22 <__mulsf3_pse+0x64>
    2e38:	9e 3f       	cpi	r25, 0xFE	; 254
    2e3a:	51 05       	cpc	r21, r1
    2e3c:	80 f0       	brcs	.+32     	; 0x2e5e <__mulsf3_pse+0xa0>
    2e3e:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__fp_inf>
    2e42:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__fp_szero>
    2e46:	5f 3f       	cpi	r21, 0xFF	; 255
    2e48:	e4 f3       	brlt	.-8      	; 0x2e42 <__mulsf3_pse+0x84>
    2e4a:	98 3e       	cpi	r25, 0xE8	; 232
    2e4c:	d4 f3       	brlt	.-12     	; 0x2e42 <__mulsf3_pse+0x84>
    2e4e:	86 95       	lsr	r24
    2e50:	77 95       	ror	r23
    2e52:	67 95       	ror	r22
    2e54:	b7 95       	ror	r27
    2e56:	f7 95       	ror	r31
    2e58:	e7 95       	ror	r30
    2e5a:	9f 5f       	subi	r25, 0xFF	; 255
    2e5c:	c1 f7       	brne	.-16     	; 0x2e4e <__mulsf3_pse+0x90>
    2e5e:	fe 2b       	or	r31, r30
    2e60:	88 0f       	add	r24, r24
    2e62:	91 1d       	adc	r25, r1
    2e64:	96 95       	lsr	r25
    2e66:	87 95       	ror	r24
    2e68:	97 f9       	bld	r25, 7
    2e6a:	08 95       	ret

00002e6c <sin>:
    2e6c:	9f 93       	push	r25
    2e6e:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__fp_rempio2>
    2e72:	0f 90       	pop	r0
    2e74:	07 fc       	sbrc	r0, 7
    2e76:	ee 5f       	subi	r30, 0xFE	; 254
    2e78:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_sinus>
    2e7c:	19 f4       	brne	.+6      	; 0x2e84 <sin+0x18>
    2e7e:	16 f4       	brtc	.+4      	; 0x2e84 <sin+0x18>
    2e80:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__fp_nan>
    2e84:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__fp_mpack>

00002e88 <sqrt>:
    2e88:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__fp_splitA>
    2e8c:	b8 f3       	brcs	.-18     	; 0x2e7c <sin+0x10>
    2e8e:	99 23       	and	r25, r25
    2e90:	c9 f3       	breq	.-14     	; 0x2e84 <sin+0x18>
    2e92:	b6 f3       	brts	.-20     	; 0x2e80 <sin+0x14>
    2e94:	9f 57       	subi	r25, 0x7F	; 127
    2e96:	55 0b       	sbc	r21, r21
    2e98:	87 ff       	sbrs	r24, 7
    2e9a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <__fp_norm2>
    2e9e:	00 24       	eor	r0, r0
    2ea0:	a0 e6       	ldi	r26, 0x60	; 96
    2ea2:	40 ea       	ldi	r20, 0xA0	; 160
    2ea4:	90 01       	movw	r18, r0
    2ea6:	80 58       	subi	r24, 0x80	; 128
    2ea8:	56 95       	lsr	r21
    2eaa:	97 95       	ror	r25
    2eac:	28 f4       	brcc	.+10     	; 0x2eb8 <sqrt+0x30>
    2eae:	80 5c       	subi	r24, 0xC0	; 192
    2eb0:	66 0f       	add	r22, r22
    2eb2:	77 1f       	adc	r23, r23
    2eb4:	88 1f       	adc	r24, r24
    2eb6:	20 f0       	brcs	.+8      	; 0x2ec0 <sqrt+0x38>
    2eb8:	26 17       	cp	r18, r22
    2eba:	37 07       	cpc	r19, r23
    2ebc:	48 07       	cpc	r20, r24
    2ebe:	30 f4       	brcc	.+12     	; 0x2ecc <sqrt+0x44>
    2ec0:	62 1b       	sub	r22, r18
    2ec2:	73 0b       	sbc	r23, r19
    2ec4:	84 0b       	sbc	r24, r20
    2ec6:	20 29       	or	r18, r0
    2ec8:	31 29       	or	r19, r1
    2eca:	4a 2b       	or	r20, r26
    2ecc:	a6 95       	lsr	r26
    2ece:	17 94       	ror	r1
    2ed0:	07 94       	ror	r0
    2ed2:	20 25       	eor	r18, r0
    2ed4:	31 25       	eor	r19, r1
    2ed6:	4a 27       	eor	r20, r26
    2ed8:	58 f7       	brcc	.-42     	; 0x2eb0 <sqrt+0x28>
    2eda:	66 0f       	add	r22, r22
    2edc:	77 1f       	adc	r23, r23
    2ede:	88 1f       	adc	r24, r24
    2ee0:	20 f0       	brcs	.+8      	; 0x2eea <sqrt+0x62>
    2ee2:	26 17       	cp	r18, r22
    2ee4:	37 07       	cpc	r19, r23
    2ee6:	48 07       	cpc	r20, r24
    2ee8:	30 f4       	brcc	.+12     	; 0x2ef6 <sqrt+0x6e>
    2eea:	62 0b       	sbc	r22, r18
    2eec:	73 0b       	sbc	r23, r19
    2eee:	84 0b       	sbc	r24, r20
    2ef0:	20 0d       	add	r18, r0
    2ef2:	31 1d       	adc	r19, r1
    2ef4:	41 1d       	adc	r20, r1
    2ef6:	a0 95       	com	r26
    2ef8:	81 f7       	brne	.-32     	; 0x2eda <sqrt+0x52>
    2efa:	b9 01       	movw	r22, r18
    2efc:	84 2f       	mov	r24, r20
    2efe:	91 58       	subi	r25, 0x81	; 129
    2f00:	88 0f       	add	r24, r24
    2f02:	96 95       	lsr	r25
    2f04:	87 95       	ror	r24
    2f06:	08 95       	ret

00002f08 <square>:
    2f08:	9b 01       	movw	r18, r22
    2f0a:	ac 01       	movw	r20, r24
    2f0c:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__mulsf3>

00002f10 <__fp_mpack>:
    2f10:	9f 3f       	cpi	r25, 0xFF	; 255
    2f12:	31 f0       	breq	.+12     	; 0x2f20 <__fp_mpack_finite+0xc>

00002f14 <__fp_mpack_finite>:
    2f14:	91 50       	subi	r25, 0x01	; 1
    2f16:	20 f4       	brcc	.+8      	; 0x2f20 <__fp_mpack_finite+0xc>
    2f18:	87 95       	ror	r24
    2f1a:	77 95       	ror	r23
    2f1c:	67 95       	ror	r22
    2f1e:	b7 95       	ror	r27
    2f20:	88 0f       	add	r24, r24
    2f22:	91 1d       	adc	r25, r1
    2f24:	96 95       	lsr	r25
    2f26:	87 95       	ror	r24
    2f28:	97 f9       	bld	r25, 7
    2f2a:	08 95       	ret

00002f2c <__fp_norm2>:
    2f2c:	91 50       	subi	r25, 0x01	; 1
    2f2e:	50 40       	sbci	r21, 0x00	; 0
    2f30:	66 0f       	add	r22, r22
    2f32:	77 1f       	adc	r23, r23
    2f34:	88 1f       	adc	r24, r24
    2f36:	d2 f7       	brpl	.-12     	; 0x2f2c <__fp_norm2>
    2f38:	08 95       	ret

00002f3a <__fp_powsodd>:
    2f3a:	9f 93       	push	r25
    2f3c:	8f 93       	push	r24
    2f3e:	7f 93       	push	r23
    2f40:	6f 93       	push	r22
    2f42:	ff 93       	push	r31
    2f44:	ef 93       	push	r30
    2f46:	9b 01       	movw	r18, r22
    2f48:	ac 01       	movw	r20, r24
    2f4a:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3>
    2f4e:	ef 91       	pop	r30
    2f50:	ff 91       	pop	r31
    2f52:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__fp_powser>
    2f56:	2f 91       	pop	r18
    2f58:	3f 91       	pop	r19
    2f5a:	4f 91       	pop	r20
    2f5c:	5f 91       	pop	r21
    2f5e:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__mulsf3>

00002f62 <__tablejump2__>:
    2f62:	ee 0f       	add	r30, r30
    2f64:	ff 1f       	adc	r31, r31
    2f66:	05 90       	lpm	r0, Z+
    2f68:	f4 91       	lpm	r31, Z
    2f6a:	e0 2d       	mov	r30, r0
    2f6c:	09 94       	ijmp

00002f6e <_exit>:
    2f6e:	f8 94       	cli

00002f70 <__stop_program>:
    2f70:	ff cf       	rjmp	.-2      	; 0x2f70 <__stop_program>
