
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000037ca  0000385e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000037ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800162  00800162  000038c0  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000038c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003920  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00003960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003301  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea2  00000000  00000000  00006fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001476  00000000  00000000  00007e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b68  00000000  00000000  000092bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf5  00000000  00000000  00009e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004076  00000000  00000000  0000ab19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000eb8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__vector_3>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__vector_10>
      2c:	0c 94 94 10 	jmp	0x2128	; 0x2128 <__vector_11>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <__vector_17>
      48:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__vector_18>
      4c:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__vector_19>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__vector_23>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	34 0a       	sbc	r3, r20
      ae:	37 0a       	sbc	r3, r23
      b0:	3a 0a       	sbc	r3, r26
      b2:	45 0a       	sbc	r4, r21
      b4:	50 0a       	sbc	r5, r16
      b6:	58 0a       	sbc	r5, r24
      b8:	53 0a       	sbc	r5, r19
      ba:	56 0a       	sbc	r5, r22
      bc:	82 16       	cp	r8, r18
      be:	a2 16       	cp	r10, r18
      c0:	c2 16       	cp	r12, r18
      c2:	e2 16       	cp	r14, r18
      c4:	02 17       	cp	r16, r18
      c6:	22 17       	cp	r18, r18
      c8:	42 17       	cp	r20, r18
      ca:	62 17       	cp	r22, r18
      cc:	82 17       	cp	r24, r18
      ce:	a2 17       	cp	r26, r18
      d0:	c2 17       	cp	r28, r18
      d2:	e2 17       	cp	r30, r18
      d4:	08 4a       	sbci	r16, 0xA8	; 168
      d6:	d7 3b       	cpi	r29, 0xB7	; 183
      d8:	3b ce       	rjmp	.-906    	; 0xfffffd50 <__eeprom_end+0xff7efd50>
      da:	01 6e       	ori	r16, 0xE1	; 225
      dc:	84 bc       	out	0x24, r8	; 36
      de:	bf fd       	.word	0xfdbf	; ????
      e0:	c1 2f       	mov	r28, r17
      e2:	3d 6c       	ori	r19, 0xCD	; 205
      e4:	74 31       	cpi	r23, 0x14	; 20
      e6:	9a bd       	out	0x2a, r25	; 42
      e8:	56 83       	std	Z+6, r21	; 0x06
      ea:	3d da       	rcall	.-2950   	; 0xfffff566 <__eeprom_end+0xff7ef566>
      ec:	3d 00       	.word	0x003d	; ????
      ee:	c7 7f       	andi	r28, 0xF7	; 247
      f0:	11 be       	out	0x31, r1	; 49
      f2:	d9 e4       	ldi	r29, 0x49	; 73
      f4:	bb 4c       	sbci	r27, 0xCB	; 203
      f6:	3e 91       	ld	r19, -X
      f8:	6b aa       	std	Y+51, r6	; 0x33
      fa:	aa be       	out	0x3a, r10	; 58
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 00       	.word	0x003f	; ????

00000120 <__trampolines_end>:
     120:	00 01       	movw	r0, r0
     122:	00 00       	nop
     124:	b7 01       	movw	r22, r14
     126:	12 00       	.word	0x0012	; ????
     128:	02 00       	.word	0x0002	; ????
     12a:	00 74       	andi	r16, 0x40	; 64
     12c:	01 43       	sbci	r16, 0x31	; 49
     12e:	00 03       	mulsu	r16, r16
     130:	00 00       	nop
     132:	70 01       	movw	r14, r0
     134:	04 01       	movw	r0, r8
     136:	03 09       	sbc	r16, r3
     138:	04 5c       	subi	r16, 0xC4	; 196
     13a:	01 12       	cpse	r0, r17
     13c:	02 03       	mulsu	r16, r18
     13e:	09 04       	cpc	r0, r9
     140:	54 01       	movw	r10, r8
     142:	06 03       	mulsu	r16, r22
     144:	03 09       	sbc	r16, r3
     146:	04 4a       	sbci	r16, 0xA4	; 164
     148:	01 08       	sbc	r0, r1

0000014a <string3>:
     14a:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000154 <string2>:
     154:	06 03 4d 00 32 00 00 00                             ..M.2...

0000015c <string1>:
     15c:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     16c:	65 00 00 00                                         e...

00000170 <string0>:
     170:	04 03 09 04                                         ....

00000174 <config1_descriptor>:
     174:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     184:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     194:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1a4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1b4:	40 00 00                                            @..

000001b7 <device_descriptor>:
     1b7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1c7:	03 01                                               ..

000001c9 <endpoint_config_table>:
     1c9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	da e0       	ldi	r29, 0x0A	; 10
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	ea ec       	ldi	r30, 0xCA	; 202
     1e8:	f7 e3       	ldi	r31, 0x37	; 55
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a2 36       	cpi	r26, 0x62	; 98
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	a2 e6       	ldi	r26, 0x62	; 98
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ab 3e       	cpi	r26, 0xEB	; 235
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 65 0a 	call	0x14ca	; 0x14ca <main>
     20a:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(int self) {
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	ec 01       	movw	r28, r24
/************************************************************
Initialization of Pins and System Clock
************************************************************/

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     218:	e1 e6       	ldi	r30, 0x61	; 97
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	90 e8       	ldi	r25, 0x80	; 128
     21e:	90 83       	st	Z, r25
     220:	10 82       	st	Z, r1

	// Disable JTAG
	m_disableJTAG(); // turn off JTAG port and allow access to F4-F7 as GPIO
     222:	95 bf       	out	0x35, r25	; 53
     224:	95 bf       	out	0x35, r25	; 53
	
	//Set to Input
	clear(DDRD,0); // D0
     226:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     228:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     22a:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     22c:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     22e:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     230:	23 9a       	sbi	0x04, 3	; 4
	
	set(DDRD,3); //C6 Red positioning LED
     232:	53 9a       	sbi	0x0a, 3	; 10
	set(DDRD,5); //C7 Blue positioning LED 
     234:	55 9a       	sbi	0x0a, 5	; 10
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     236:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     238:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     23a:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     23c:	2b 98       	cbi	0x05, 3	; 5
	
	clear(PORTC,6); //Start with positioning LED off
     23e:	46 98       	cbi	0x08, 6	; 8
	clear(PORTC,7); 
     240:	47 98       	cbi	0x08, 7	; 8

/************************************************************
Setup Subsystems
************************************************************/

	m_bus_init();
     242:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <m_bus_init>
	while(!m_wii_open());
     246:	0e 94 82 12 	call	0x2504	; 0x2504 <m_wii_open>
     24a:	88 23       	and	r24, r24
     24c:	e1 f3       	breq	.-8      	; 0x246 <initialize_robockey+0x34>
	sei();
     24e:	78 94       	sei
	m_usb_init();
     250:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <m_usb_init>
	if (self == RED_BULL)
     254:	20 97       	sbiw	r28, 0x00	; 0
     256:	41 f4       	brne	.+16     	; 0x268 <initialize_robockey+0x56>
	{
		while(!m_rf_open(CHANNEL,RXADDRESS_RED_BULL,PACKET_LENGTH)); // Configure mRF
     258:	4a e0       	ldi	r20, 0x0A	; 10
     25a:	60 e2       	ldi	r22, 0x20	; 32
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <m_rf_open>
     262:	88 23       	and	r24, r24
     264:	c9 f3       	breq	.-14     	; 0x258 <initialize_robockey+0x46>
     266:	14 c0       	rjmp	.+40     	; 0x290 <initialize_robockey+0x7e>
	}
	if (self == GREEN_MONSTER)
     268:	c1 30       	cpi	r28, 0x01	; 1
     26a:	d1 05       	cpc	r29, r1
     26c:	41 f4       	brne	.+16     	; 0x27e <initialize_robockey+0x6c>
	{
		while(!m_rf_open(CHANNEL,RXADDRESS_GREEN_MONSTER,PACKET_LENGTH)); // Configure mRF
     26e:	4a e0       	ldi	r20, 0x0A	; 10
     270:	61 e2       	ldi	r22, 0x21	; 33
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <m_rf_open>
     278:	88 23       	and	r24, r24
     27a:	c9 f3       	breq	.-14     	; 0x26e <initialize_robockey+0x5c>
     27c:	09 c0       	rjmp	.+18     	; 0x290 <initialize_robockey+0x7e>
	}
	if (self == BLUE_WHALE)
     27e:	22 97       	sbiw	r28, 0x02	; 2
     280:	39 f4       	brne	.+14     	; 0x290 <initialize_robockey+0x7e>
	{
		while(!m_rf_open(CHANNEL,RXADDRESS_BLUE_WHALE,PACKET_LENGTH)); // Configure mRF
     282:	4a e0       	ldi	r20, 0x0A	; 10
     284:	62 e2       	ldi	r22, 0x22	; 34
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <m_rf_open>
     28c:	88 23       	and	r24, r24
     28e:	c9 f3       	breq	.-14     	; 0x282 <initialize_robockey+0x70>
/************************************************************
Timer1 Initialization for PWM Motor Control
************************************************************/

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     290:	e1 e8       	ldi	r30, 0x81	; 129
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	8b 7f       	andi	r24, 0xFB	; 251
     298:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     29a:	80 81       	ld	r24, Z
     29c:	8d 7f       	andi	r24, 0xFD	; 253
     29e:	80 83       	st	Z, r24
	clear(TCCR1B,CS10);
     2a0:	80 81       	ld	r24, Z
     2a2:	8e 7f       	andi	r24, 0xFE	; 254
     2a4:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     2a6:	80 81       	ld	r24, Z
     2a8:	8f 7e       	andi	r24, 0xEF	; 239
     2aa:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     2ac:	80 81       	ld	r24, Z
     2ae:	88 60       	ori	r24, 0x08	; 8
     2b0:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     2b2:	e0 e8       	ldi	r30, 0x80	; 128
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	8d 7f       	andi	r24, 0xFD	; 253
     2ba:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     2bc:	80 81       	ld	r24, Z
     2be:	8e 7f       	andi	r24, 0xFE	; 254
     2c0:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     2c2:	80 81       	ld	r24, Z
     2c4:	8f 7d       	andi	r24, 0xDF	; 223
     2c6:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     2c8:	80 81       	ld	r24, Z
     2ca:	8f 7e       	andi	r24, 0xEF	; 239
     2cc:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     2ce:	c8 e8       	ldi	r28, 0x88	; 136
     2d0:	d0 e0       	ldi	r29, 0x00	; 0
     2d2:	8a ea       	ldi	r24, 0xAA	; 170
     2d4:	99 e2       	ldi	r25, 0x29	; 41
     2d6:	99 83       	std	Y+1, r25	; 0x01
     2d8:	88 83       	st	Y, r24
	OCR1B = (float)OCR1A*0.1;
     2da:	68 81       	ld	r22, Y
     2dc:	79 81       	ldd	r23, Y+1	; 0x01
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 9b 19 	call	0x3336	; 0x3336 <__floatunsisf>
     2e6:	2d ec       	ldi	r18, 0xCD	; 205
     2e8:	3c ec       	ldi	r19, 0xCC	; 204
     2ea:	4c ec       	ldi	r20, 0xCC	; 204
     2ec:	5d e3       	ldi	r21, 0x3D	; 61
     2ee:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     2f2:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__fixunssfsi>
     2f6:	70 93 8b 00 	sts	0x008B, r23
     2fa:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     2fe:	68 81       	ld	r22, Y
     300:	79 81       	ldd	r23, Y+1	; 0x01
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 9b 19 	call	0x3336	; 0x3336 <__floatunsisf>
     30a:	2d ec       	ldi	r18, 0xCD	; 205
     30c:	3c ec       	ldi	r19, 0xCC	; 204
     30e:	4c ec       	ldi	r20, 0xCC	; 204
     310:	5d e3       	ldi	r21, 0x3D	; 61
     312:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     316:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__fixunssfsi>
     31a:	70 93 8d 00 	sts	0x008D, r23
     31e:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     322:	ef e6       	ldi	r30, 0x6F	; 111
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	82 60       	ori	r24, 0x02	; 2
     32a:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     32c:	80 81       	ld	r24, Z
     32e:	84 60       	ori	r24, 0x04	; 4
     330:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     332:	80 81       	ld	r24, Z
     334:	88 60       	ori	r24, 0x08	; 8
     336:	80 83       	st	Z, r24

/************************************************************
Timer3 Initialization for fixed timestep calculations
************************************************************/

	clear(TCCR3B,CS32); // prescale /1
     338:	e1 e9       	ldi	r30, 0x91	; 145
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8b 7f       	andi	r24, 0xFB	; 251
     340:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     348:	80 81       	ld	r24, Z
     34a:	81 60       	ori	r24, 0x01	; 1
     34c:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     34e:	80 81       	ld	r24, Z
     350:	8f 7e       	andi	r24, 0xEF	; 239
     352:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     354:	80 81       	ld	r24, Z
     356:	88 60       	ori	r24, 0x08	; 8
     358:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     35a:	e0 e9       	ldi	r30, 0x90	; 144
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	8d 7f       	andi	r24, 0xFD	; 253
     362:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     364:	80 81       	ld	r24, Z
     366:	8e 7f       	andi	r24, 0xFE	; 254
     368:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     36a:	80 e8       	ldi	r24, 0x80	; 128
     36c:	9e e3       	ldi	r25, 0x3E	; 62
     36e:	90 93 99 00 	sts	0x0099, r25
     372:	80 93 98 00 	sts	0x0098, r24

/************************************************************
Timer0 Initialization for COMM test 
************************************************************/
	clear(TCCR0B,CS02); //start with timer off
     376:	85 b5       	in	r24, 0x25	; 37
     378:	8b 7f       	andi	r24, 0xFB	; 251
     37a:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS01);
     37c:	85 b5       	in	r24, 0x25	; 37
     37e:	8d 7f       	andi	r24, 0xFD	; 253
     380:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS00);
     382:	85 b5       	in	r24, 0x25	; 37
     384:	8e 7f       	andi	r24, 0xFE	; 254
     386:	85 bd       	out	0x25, r24	; 37
	
	clear(TCCR0B,WGM02); //Up to OCR0A mode 
     388:	85 b5       	in	r24, 0x25	; 37
     38a:	87 7f       	andi	r24, 0xF7	; 247
     38c:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0A,WGM01);
     38e:	84 b5       	in	r24, 0x24	; 36
     390:	8d 7f       	andi	r24, 0xFD	; 253
     392:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A,WGM00);
     394:	84 b5       	in	r24, 0x24	; 36
     396:	8e 7f       	andi	r24, 0xFE	; 254
     398:	84 bd       	out	0x24, r24	; 36
		
	set(TIMSK0,TOIE0); //enable interupt at OCR0A
     39a:	ee e6       	ldi	r30, 0x6E	; 110
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	80 83       	st	Z, r24
	
/************************************************************
Setup ADC
************************************************************/
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
     3a4:	cc e7       	ldi	r28, 0x7C	; 124
     3a6:	d0 e0       	ldi	r29, 0x00	; 0
     3a8:	88 81       	ld	r24, Y
     3aa:	8f 77       	andi	r24, 0x7F	; 127
     3ac:	88 83       	st	Y, r24
	set(ADMUX,REFS0);
     3ae:	88 81       	ld	r24, Y
     3b0:	80 64       	ori	r24, 0x40	; 64
     3b2:	88 83       	st	Y, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
     3b4:	ea e7       	ldi	r30, 0x7A	; 122
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	8b 7f       	andi	r24, 0xFB	; 251
     3bc:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     3be:	80 81       	ld	r24, Z
     3c0:	82 60       	ori	r24, 0x02	; 2
     3c2:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     3c4:	80 81       	ld	r24, Z
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	80 83       	st	Z, r24
	
	// Disable Digital input to:
	set(DIDR0,ADC0D); // ADC0
     3ca:	ae e7       	ldi	r26, 0x7E	; 126
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	8c 91       	ld	r24, X
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	8c 93       	st	X, r24
	set(DIDR0,ADC1D); // ADC1
     3d4:	8c 91       	ld	r24, X
     3d6:	82 60       	ori	r24, 0x02	; 2
     3d8:	8c 93       	st	X, r24
	set(DIDR0,ADC4D); // ADC4
     3da:	8c 91       	ld	r24, X
     3dc:	80 61       	ori	r24, 0x10	; 16
     3de:	8c 93       	st	X, r24
	set(DIDR0,ADC5D); // ADC5
     3e0:	8c 91       	ld	r24, X
     3e2:	80 62       	ori	r24, 0x20	; 32
     3e4:	8c 93       	st	X, r24
	set(DIDR0,ADC6D); // ADC6
     3e6:	8c 91       	ld	r24, X
     3e8:	80 64       	ori	r24, 0x40	; 64
     3ea:	8c 93       	st	X, r24
	set(DIDR0,ADC7D); // ADC7
     3ec:	8c 91       	ld	r24, X
     3ee:	80 68       	ori	r24, 0x80	; 128
     3f0:	8c 93       	st	X, r24
	set(DIDR2,ADC8D); // ADC8
     3f2:	ad e7       	ldi	r26, 0x7D	; 125
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	8c 91       	ld	r24, X
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	8c 93       	st	X, r24
	set(DIDR2,ADC9D); // ADC9
     3fc:	8c 91       	ld	r24, X
     3fe:	82 60       	ori	r24, 0x02	; 2
     400:	8c 93       	st	X, r24
	set(DIDR2,ADC10D); // ADC10
     402:	8c 91       	ld	r24, X
     404:	84 60       	ori	r24, 0x04	; 4
     406:	8c 93       	st	X, r24
	set(DIDR2,ADC11D); // ADC11
     408:	8c 91       	ld	r24, X
     40a:	88 60       	ori	r24, 0x08	; 8
     40c:	8c 93       	st	X, r24
	set(DIDR2,ADC12D); // ADC812
     40e:	8c 91       	ld	r24, X
     410:	80 61       	ori	r24, 0x10	; 16
     412:	8c 93       	st	X, r24
	set(DIDR2,ADC13D); // ADC13
     414:	8c 91       	ld	r24, X
     416:	80 62       	ori	r24, 0x20	; 32
     418:	8c 93       	st	X, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
     41a:	80 81       	ld	r24, Z
     41c:	8f 7d       	andi	r24, 0xDF	; 223
     41e:	80 83       	st	Z, r24
	
	set(ADCSRB,MUX5); // Select ADC13 at pin B6
     420:	ab e7       	ldi	r26, 0x7B	; 123
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	8c 91       	ld	r24, X
     426:	80 62       	ori	r24, 0x20	; 32
     428:	8c 93       	st	X, r24
	set(ADMUX,MUX2); // Transistor 4
     42a:	88 81       	ld	r24, Y
     42c:	84 60       	ori	r24, 0x04	; 4
     42e:	88 83       	st	Y, r24
	clear(ADMUX,MUX1);
     430:	88 81       	ld	r24, Y
     432:	8d 7f       	andi	r24, 0xFD	; 253
     434:	88 83       	st	Y, r24
	set(ADMUX,MUX0);
     436:	88 81       	ld	r24, Y
     438:	81 60       	ori	r24, 0x01	; 1
     43a:	88 83       	st	Y, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
     43c:	80 81       	ld	r24, Z
     43e:	80 68       	ori	r24, 0x80	; 128
     440:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
     442:	80 81       	ld	r24, Z
     444:	80 64       	ori	r24, 0x40	; 64
     446:	80 83       	st	Z, r24
	
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     44e:	82 30       	cpi	r24, 0x02	; 2
     450:	91 05       	cpc	r25, r1
     452:	f9 f0       	breq	.+62     	; 0x492 <distIndex+0x44>
     454:	2c f4       	brge	.+10     	; 0x460 <distIndex+0x12>
     456:	00 97       	sbiw	r24, 0x00	; 0
     458:	51 f0       	breq	.+20     	; 0x46e <distIndex+0x20>
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	89 f0       	breq	.+34     	; 0x480 <distIndex+0x32>
     45e:	42 c0       	rjmp	.+132    	; 0x4e4 <distIndex+0x96>
     460:	84 30       	cpi	r24, 0x04	; 4
     462:	91 05       	cpc	r25, r1
     464:	51 f1       	breq	.+84     	; 0x4ba <distIndex+0x6c>
     466:	f4 f0       	brlt	.+60     	; 0x4a4 <distIndex+0x56>
     468:	05 97       	sbiw	r24, 0x05	; 5
     46a:	91 f1       	breq	.+100    	; 0x4d0 <distIndex+0x82>
     46c:	3b c0       	rjmp	.+118    	; 0x4e4 <distIndex+0x96>
	{
		case 0 : 
			pointsUsed[0] = 0;
     46e:	e2 e6       	ldi	r30, 0x62	; 98
     470:	f1 e0       	ldi	r31, 0x01	; 1
     472:	11 82       	std	Z+1, r1	; 0x01
     474:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	93 83       	std	Z+3, r25	; 0x03
     47c:	82 83       	std	Z+2, r24	; 0x02
			break;
     47e:	32 c0       	rjmp	.+100    	; 0x4e4 <distIndex+0x96>
			
		case 1 : 
			pointsUsed[0] = 0;
     480:	e2 e6       	ldi	r30, 0x62	; 98
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	11 82       	std	Z+1, r1	; 0x01
     486:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     488:	82 e0       	ldi	r24, 0x02	; 2
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	93 83       	std	Z+3, r25	; 0x03
     48e:	82 83       	std	Z+2, r24	; 0x02
			break;
     490:	29 c0       	rjmp	.+82     	; 0x4e4 <distIndex+0x96>
			
		case 2 : 
			pointsUsed[0] = 0;
     492:	e2 e6       	ldi	r30, 0x62	; 98
     494:	f1 e0       	ldi	r31, 0x01	; 1
     496:	11 82       	std	Z+1, r1	; 0x01
     498:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     49a:	83 e0       	ldi	r24, 0x03	; 3
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	93 83       	std	Z+3, r25	; 0x03
     4a0:	82 83       	std	Z+2, r24	; 0x02
			break;
     4a2:	20 c0       	rjmp	.+64     	; 0x4e4 <distIndex+0x96>
			
		case 3 : 
			pointsUsed[0] = 1;
     4a4:	e2 e6       	ldi	r30, 0x62	; 98
     4a6:	f1 e0       	ldi	r31, 0x01	; 1
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	91 83       	std	Z+1, r25	; 0x01
     4ae:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	93 83       	std	Z+3, r25	; 0x03
     4b6:	82 83       	std	Z+2, r24	; 0x02
			break;
     4b8:	15 c0       	rjmp	.+42     	; 0x4e4 <distIndex+0x96>
			
		case 4 : 
			pointsUsed[0] = 1;
     4ba:	e2 e6       	ldi	r30, 0x62	; 98
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	91 83       	std	Z+1, r25	; 0x01
     4c4:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     4c6:	83 e0       	ldi	r24, 0x03	; 3
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	93 83       	std	Z+3, r25	; 0x03
     4cc:	82 83       	std	Z+2, r24	; 0x02
			break;
     4ce:	0a c0       	rjmp	.+20     	; 0x4e4 <distIndex+0x96>
			
		case 5 :
			pointsUsed[0] = 2;
     4d0:	e2 e6       	ldi	r30, 0x62	; 98
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	91 83       	std	Z+1, r25	; 0x01
     4da:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     4dc:	83 e0       	ldi	r24, 0x03	; 3
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	93 83       	std	Z+3, r25	; 0x03
     4e2:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     4e4:	82 e6       	ldi	r24, 0x62	; 98
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	08 95       	ret

000004ea <orientationCalculationFour>:


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
     4ea:	2f 92       	push	r2
     4ec:	3f 92       	push	r3
     4ee:	4f 92       	push	r4
     4f0:	5f 92       	push	r5
     4f2:	6f 92       	push	r6
     4f4:	7f 92       	push	r7
     4f6:	8f 92       	push	r8
     4f8:	9f 92       	push	r9
     4fa:	af 92       	push	r10
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	00 d0       	rcall	.+0      	; 0x510 <orientationCalculationFour+0x26>
     510:	00 d0       	rcall	.+0      	; 0x512 <orientationCalculationFour+0x28>
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	5c 01       	movw	r10, r24
     518:	4a 01       	movw	r8, r20
     51a:	3a 83       	std	Y+2, r19	; 0x02
     51c:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     51e:	06 2f       	mov	r16, r22
     520:	17 2f       	mov	r17, r23
     522:	f8 01       	movw	r30, r16
     524:	41 90       	ld	r4, Z+
     526:	51 90       	ld	r5, Z+
     528:	61 90       	ld	r6, Z+
     52a:	71 90       	ld	r7, Z+
     52c:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     52e:	1c 82       	std	Y+4, r1	; 0x04
     530:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     532:	21 2c       	mov	r2, r1
     534:	31 2c       	mov	r3, r1
     536:	12 c0       	rjmp	.+36     	; 0x55c <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     538:	f8 01       	movw	r30, r16
     53a:	c1 90       	ld	r12, Z+
     53c:	d1 90       	ld	r13, Z+
     53e:	e1 90       	ld	r14, Z+
     540:	f1 90       	ld	r15, Z+
     542:	8f 01       	movw	r16, r30
     544:	a7 01       	movw	r20, r14
     546:	96 01       	movw	r18, r12
     548:	c3 01       	movw	r24, r6
     54a:	b2 01       	movw	r22, r4
     54c:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__gesf2>
     550:	18 16       	cp	r1, r24
     552:	24 f4       	brge	.+8      	; 0x55c <orientationCalculationFour+0x72>
     554:	26 01       	movw	r4, r12
     556:	37 01       	movw	r6, r14
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     558:	2b 80       	ldd	r2, Y+3	; 0x03
     55a:	3c 80       	ldd	r3, Y+4	; 0x04
     55c:	8b 81       	ldd	r24, Y+3	; 0x03
     55e:	9c 81       	ldd	r25, Y+4	; 0x04
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	9c 83       	std	Y+4, r25	; 0x04
     564:	8b 83       	std	Y+3, r24	; 0x03
     566:	06 97       	sbiw	r24, 0x06	; 6
     568:	39 f7       	brne	.-50     	; 0x538 <orientationCalculationFour+0x4e>
		}
	}
	
	//Find points used by shortest length	
	int* pointsShortRef;
	pointsShortRef = distIndex(indexMin);	
     56a:	82 2d       	mov	r24, r2
     56c:	93 2d       	mov	r25, r3
     56e:	0e 94 27 02 	call	0x44e	; 0x44e <distIndex>
	int pointsShort[2] = {pointsShortRef[0], pointsShortRef[1]};	
     572:	fc 01       	movw	r30, r24
     574:	20 81       	ld	r18, Z
     576:	31 81       	ldd	r19, Z+1	; 0x01
     578:	62 81       	ldd	r22, Z+2	; 0x02
     57a:	73 81       	ldd	r23, Z+3	; 0x03
	if (pointsShort[0] == pointsLong[0]){
     57c:	f5 01       	movw	r30, r10
     57e:	40 81       	ld	r20, Z
     580:	51 81       	ldd	r21, Z+1	; 0x01
     582:	24 17       	cp	r18, r20
     584:	35 07       	cpc	r19, r21
     586:	59 f4       	brne	.+22     	; 0x59e <orientationCalculationFour+0xb4>
		*top = pointsLong[0];
     588:	f4 01       	movw	r30, r8
     58a:	31 83       	std	Z+1, r19	; 0x01
     58c:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     58e:	f5 01       	movw	r30, r10
     590:	82 81       	ldd	r24, Z+2	; 0x02
     592:	93 81       	ldd	r25, Z+3	; 0x03
     594:	e9 81       	ldd	r30, Y+1	; 0x01
     596:	fa 81       	ldd	r31, Y+2	; 0x02
     598:	91 83       	std	Z+1, r25	; 0x01
     59a:	80 83       	st	Z, r24
     59c:	37 c0       	rjmp	.+110    	; 0x60c <orientationCalculationFour+0x122>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     59e:	f5 01       	movw	r30, r10
     5a0:	82 81       	ldd	r24, Z+2	; 0x02
     5a2:	93 81       	ldd	r25, Z+3	; 0x03
     5a4:	28 17       	cp	r18, r24
     5a6:	39 07       	cpc	r19, r25
     5a8:	59 f4       	brne	.+22     	; 0x5c0 <orientationCalculationFour+0xd6>
			*top = pointsLong[1];
     5aa:	f4 01       	movw	r30, r8
     5ac:	31 83       	std	Z+1, r19	; 0x01
     5ae:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     5b0:	f5 01       	movw	r30, r10
     5b2:	80 81       	ld	r24, Z
     5b4:	91 81       	ldd	r25, Z+1	; 0x01
     5b6:	e9 81       	ldd	r30, Y+1	; 0x01
     5b8:	fa 81       	ldd	r31, Y+2	; 0x02
     5ba:	91 83       	std	Z+1, r25	; 0x01
     5bc:	80 83       	st	Z, r24
     5be:	26 c0       	rjmp	.+76     	; 0x60c <orientationCalculationFour+0x122>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     5c0:	64 17       	cp	r22, r20
     5c2:	75 07       	cpc	r23, r21
     5c4:	59 f4       	brne	.+22     	; 0x5dc <orientationCalculationFour+0xf2>
				*top = pointsLong[0];
     5c6:	f4 01       	movw	r30, r8
     5c8:	71 83       	std	Z+1, r23	; 0x01
     5ca:	60 83       	st	Z, r22
				*bottom = pointsLong[1];
     5cc:	f5 01       	movw	r30, r10
     5ce:	82 81       	ldd	r24, Z+2	; 0x02
     5d0:	93 81       	ldd	r25, Z+3	; 0x03
     5d2:	e9 81       	ldd	r30, Y+1	; 0x01
     5d4:	fa 81       	ldd	r31, Y+2	; 0x02
     5d6:	91 83       	std	Z+1, r25	; 0x01
     5d8:	80 83       	st	Z, r24
     5da:	18 c0       	rjmp	.+48     	; 0x60c <orientationCalculationFour+0x122>
			} else {
				if (pointsShort[1] == pointsLong[1])
     5dc:	68 17       	cp	r22, r24
     5de:	79 07       	cpc	r23, r25
     5e0:	59 f4       	brne	.+22     	; 0x5f8 <orientationCalculationFour+0x10e>
				{
					*top = pointsLong[1];
     5e2:	f4 01       	movw	r30, r8
     5e4:	71 83       	std	Z+1, r23	; 0x01
     5e6:	60 83       	st	Z, r22
					*bottom = pointsLong[0];
     5e8:	f5 01       	movw	r30, r10
     5ea:	80 81       	ld	r24, Z
     5ec:	91 81       	ldd	r25, Z+1	; 0x01
     5ee:	e9 81       	ldd	r30, Y+1	; 0x01
     5f0:	fa 81       	ldd	r31, Y+2	; 0x02
     5f2:	91 83       	std	Z+1, r25	; 0x01
     5f4:	80 83       	st	Z, r24
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <orientationCalculationFour+0x122>
				} else {
						*top = pointsLong[1];
     5f8:	f4 01       	movw	r30, r8
     5fa:	91 83       	std	Z+1, r25	; 0x01
     5fc:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     5fe:	f5 01       	movw	r30, r10
     600:	80 81       	ld	r24, Z
     602:	91 81       	ldd	r25, Z+1	; 0x01
     604:	e9 81       	ldd	r30, Y+1	; 0x01
     606:	fa 81       	ldd	r31, Y+2	; 0x02
     608:	91 83       	std	Z+1, r25	; 0x01
     60a:	80 83       	st	Z, r24
				}
			}
		}
	}
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	bf 90       	pop	r11
     626:	af 90       	pop	r10
     628:	9f 90       	pop	r9
     62a:	8f 90       	pop	r8
     62c:	7f 90       	pop	r7
     62e:	6f 90       	pop	r6
     630:	5f 90       	pop	r5
     632:	4f 90       	pop	r4
     634:	3f 90       	pop	r3
     636:	2f 90       	pop	r2
     638:	08 95       	ret

0000063a <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     63a:	2f 92       	push	r2
     63c:	3f 92       	push	r3
     63e:	4f 92       	push	r4
     640:	5f 92       	push	r5
     642:	6f 92       	push	r6
     644:	7f 92       	push	r7
     646:	8f 92       	push	r8
     648:	9f 92       	push	r9
     64a:	af 92       	push	r10
     64c:	bf 92       	push	r11
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	c2 54       	subi	r28, 0x42	; 66
     664:	d1 09       	sbc	r29, r1
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     672:	fc 01       	movw	r30, r24
     674:	04 80       	ldd	r0, Z+4	; 0x04
     676:	f5 81       	ldd	r31, Z+5	; 0x05
     678:	e0 2d       	mov	r30, r0
     67a:	fa a3       	std	Y+34, r31	; 0x22
     67c:	e9 a3       	std	Y+33, r30	; 0x21
     67e:	fc 01       	movw	r30, r24
     680:	00 81       	ld	r16, Z
     682:	11 81       	ldd	r17, Z+1	; 0x01
     684:	69 a1       	ldd	r22, Y+33	; 0x21
     686:	7a a1       	ldd	r23, Y+34	; 0x22
     688:	60 1b       	sub	r22, r16
     68a:	71 0b       	sbc	r23, r17
     68c:	07 2e       	mov	r0, r23
     68e:	00 0c       	add	r0, r0
     690:	88 0b       	sbc	r24, r24
     692:	99 0b       	sbc	r25, r25
     694:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     698:	6b 01       	movw	r12, r22
     69a:	7c 01       	movw	r14, r24
     69c:	f2 01       	movw	r30, r4
     69e:	06 80       	ldd	r0, Z+6	; 0x06
     6a0:	f7 81       	ldd	r31, Z+7	; 0x07
     6a2:	e0 2d       	mov	r30, r0
     6a4:	fe a3       	std	Y+38, r31	; 0x26
     6a6:	ed a3       	std	Y+37, r30	; 0x25
     6a8:	f2 01       	movw	r30, r4
     6aa:	22 80       	ldd	r2, Z+2	; 0x02
     6ac:	33 80       	ldd	r3, Z+3	; 0x03
     6ae:	ad a0       	ldd	r10, Y+37	; 0x25
     6b0:	be a0       	ldd	r11, Y+38	; 0x26
     6b2:	a2 18       	sub	r10, r2
     6b4:	b3 08       	sbc	r11, r3
     6b6:	9b 01       	movw	r18, r22
     6b8:	ac 01       	movw	r20, r24
     6ba:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     6be:	69 a7       	std	Y+41, r22	; 0x29
     6c0:	7a a7       	std	Y+42, r23	; 0x2a
     6c2:	8b a7       	std	Y+43, r24	; 0x2b
     6c4:	9c a7       	std	Y+44, r25	; 0x2c
     6c6:	aa 9c       	mul	r10, r10
     6c8:	40 01       	movw	r8, r0
     6ca:	ab 9c       	mul	r10, r11
     6cc:	90 0c       	add	r9, r0
     6ce:	90 0c       	add	r9, r0
     6d0:	11 24       	eor	r1, r1
     6d2:	09 2c       	mov	r0, r9
     6d4:	00 0c       	add	r0, r0
     6d6:	aa 08       	sbc	r10, r10
     6d8:	bb 08       	sbc	r11, r11
     6da:	a7 01       	movw	r20, r14
     6dc:	96 01       	movw	r18, r12
     6de:	c7 01       	movw	r24, r14
     6e0:	b6 01       	movw	r22, r12
     6e2:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     6e6:	6b 01       	movw	r12, r22
     6e8:	7c 01       	movw	r14, r24
     6ea:	c5 01       	movw	r24, r10
     6ec:	b4 01       	movw	r22, r8
     6ee:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     6f2:	9b 01       	movw	r18, r22
     6f4:	ac 01       	movw	r20, r24
     6f6:	c7 01       	movw	r24, r14
     6f8:	b6 01       	movw	r22, r12
     6fa:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
     6fe:	0e 94 3b 1b 	call	0x3676	; 0x3676 <sqrt>
     702:	6b af       	std	Y+59, r22	; 0x3b
     704:	7c af       	std	Y+60, r23	; 0x3c
     706:	8d af       	std	Y+61, r24	; 0x3d
     708:	9e af       	std	Y+62, r25	; 0x3e
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     70a:	f2 01       	movw	r30, r4
     70c:	00 84       	ldd	r0, Z+8	; 0x08
     70e:	f1 85       	ldd	r31, Z+9	; 0x09
     710:	e0 2d       	mov	r30, r0
     712:	fa a7       	std	Y+42, r31	; 0x2a
     714:	e9 a7       	std	Y+41, r30	; 0x29
     716:	bf 01       	movw	r22, r30
     718:	60 1b       	sub	r22, r16
     71a:	71 0b       	sbc	r23, r17
     71c:	07 2e       	mov	r0, r23
     71e:	00 0c       	add	r0, r0
     720:	88 0b       	sbc	r24, r24
     722:	99 0b       	sbc	r25, r25
     724:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     728:	6b 01       	movw	r12, r22
     72a:	7c 01       	movw	r14, r24
     72c:	f2 01       	movw	r30, r4
     72e:	62 84       	ldd	r6, Z+10	; 0x0a
     730:	73 84       	ldd	r7, Z+11	; 0x0b
     732:	53 01       	movw	r10, r6
     734:	a2 18       	sub	r10, r2
     736:	b3 08       	sbc	r11, r3
     738:	9b 01       	movw	r18, r22
     73a:	ac 01       	movw	r20, r24
     73c:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     740:	6d a7       	std	Y+45, r22	; 0x2d
     742:	7e a7       	std	Y+46, r23	; 0x2e
     744:	8f a7       	std	Y+47, r24	; 0x2f
     746:	98 ab       	std	Y+48, r25	; 0x30
     748:	aa 9c       	mul	r10, r10
     74a:	40 01       	movw	r8, r0
     74c:	ab 9c       	mul	r10, r11
     74e:	90 0c       	add	r9, r0
     750:	90 0c       	add	r9, r0
     752:	11 24       	eor	r1, r1
     754:	09 2c       	mov	r0, r9
     756:	00 0c       	add	r0, r0
     758:	aa 08       	sbc	r10, r10
     75a:	bb 08       	sbc	r11, r11
     75c:	a7 01       	movw	r20, r14
     75e:	96 01       	movw	r18, r12
     760:	c7 01       	movw	r24, r14
     762:	b6 01       	movw	r22, r12
     764:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     768:	6b 01       	movw	r12, r22
     76a:	7c 01       	movw	r14, r24
     76c:	c5 01       	movw	r24, r10
     76e:	b4 01       	movw	r22, r8
     770:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     774:	9b 01       	movw	r18, r22
     776:	ac 01       	movw	r20, r24
     778:	c7 01       	movw	r24, r14
     77a:	b6 01       	movw	r22, r12
     77c:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
     780:	0e 94 3b 1b 	call	0x3676	; 0x3676 <sqrt>
     784:	23 96       	adiw	r28, 0x03	; 3
     786:	6c af       	std	Y+60, r22	; 0x3c
     788:	7d af       	std	Y+61, r23	; 0x3d
     78a:	8e af       	std	Y+62, r24	; 0x3e
     78c:	9f af       	std	Y+63, r25	; 0x3f
     78e:	23 97       	sbiw	r28, 0x03	; 3
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     790:	f2 01       	movw	r30, r4
     792:	04 84       	ldd	r0, Z+12	; 0x0c
     794:	f5 85       	ldd	r31, Z+13	; 0x0d
     796:	e0 2d       	mov	r30, r0
     798:	fe a7       	std	Y+46, r31	; 0x2e
     79a:	ed a7       	std	Y+45, r30	; 0x2d
     79c:	bf 01       	movw	r22, r30
     79e:	60 1b       	sub	r22, r16
     7a0:	71 0b       	sbc	r23, r17
     7a2:	07 2e       	mov	r0, r23
     7a4:	00 0c       	add	r0, r0
     7a6:	88 0b       	sbc	r24, r24
     7a8:	99 0b       	sbc	r25, r25
     7aa:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     7ae:	4b 01       	movw	r8, r22
     7b0:	5c 01       	movw	r10, r24
     7b2:	f2 01       	movw	r30, r4
     7b4:	06 84       	ldd	r0, Z+14	; 0x0e
     7b6:	f7 85       	ldd	r31, Z+15	; 0x0f
     7b8:	e0 2d       	mov	r30, r0
     7ba:	fa ab       	std	Y+50, r31	; 0x32
     7bc:	e9 ab       	std	Y+49, r30	; 0x31
     7be:	8f 01       	movw	r16, r30
     7c0:	02 19       	sub	r16, r2
     7c2:	13 09       	sbc	r17, r3
     7c4:	9b 01       	movw	r18, r22
     7c6:	ac 01       	movw	r20, r24
     7c8:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     7cc:	6b ab       	std	Y+51, r22	; 0x33
     7ce:	7c ab       	std	Y+52, r23	; 0x34
     7d0:	8d ab       	std	Y+53, r24	; 0x35
     7d2:	9e ab       	std	Y+54, r25	; 0x36
     7d4:	00 9f       	mul	r16, r16
     7d6:	60 01       	movw	r12, r0
     7d8:	01 9f       	mul	r16, r17
     7da:	d0 0c       	add	r13, r0
     7dc:	d0 0c       	add	r13, r0
     7de:	11 24       	eor	r1, r1
     7e0:	0d 2c       	mov	r0, r13
     7e2:	00 0c       	add	r0, r0
     7e4:	ee 08       	sbc	r14, r14
     7e6:	ff 08       	sbc	r15, r15
     7e8:	a5 01       	movw	r20, r10
     7ea:	94 01       	movw	r18, r8
     7ec:	c5 01       	movw	r24, r10
     7ee:	b4 01       	movw	r22, r8
     7f0:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     7f4:	4b 01       	movw	r8, r22
     7f6:	5c 01       	movw	r10, r24
     7f8:	c7 01       	movw	r24, r14
     7fa:	b6 01       	movw	r22, r12
     7fc:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     800:	9b 01       	movw	r18, r22
     802:	ac 01       	movw	r20, r24
     804:	c5 01       	movw	r24, r10
     806:	b4 01       	movw	r22, r8
     808:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
     80c:	0e 94 3b 1b 	call	0x3676	; 0x3676 <sqrt>
     810:	6b ab       	std	Y+51, r22	; 0x33
     812:	7c ab       	std	Y+52, r23	; 0x34
     814:	8d ab       	std	Y+53, r24	; 0x35
     816:	9e ab       	std	Y+54, r25	; 0x36
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     818:	69 a5       	ldd	r22, Y+41	; 0x29
     81a:	7a a5       	ldd	r23, Y+42	; 0x2a
     81c:	29 a1       	ldd	r18, Y+33	; 0x21
     81e:	3a a1       	ldd	r19, Y+34	; 0x22
     820:	62 1b       	sub	r22, r18
     822:	73 0b       	sbc	r23, r19
     824:	07 2e       	mov	r0, r23
     826:	00 0c       	add	r0, r0
     828:	88 0b       	sbc	r24, r24
     82a:	99 0b       	sbc	r25, r25
     82c:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     830:	4b 01       	movw	r8, r22
     832:	5c 01       	movw	r10, r24
     834:	83 01       	movw	r16, r6
     836:	4d a1       	ldd	r20, Y+37	; 0x25
     838:	5e a1       	ldd	r21, Y+38	; 0x26
     83a:	04 1b       	sub	r16, r20
     83c:	15 0b       	sbc	r17, r21
     83e:	9b 01       	movw	r18, r22
     840:	ac 01       	movw	r20, r24
     842:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     846:	6f ab       	std	Y+55, r22	; 0x37
     848:	78 af       	std	Y+56, r23	; 0x38
     84a:	89 af       	std	Y+57, r24	; 0x39
     84c:	9a af       	std	Y+58, r25	; 0x3a
     84e:	00 9f       	mul	r16, r16
     850:	60 01       	movw	r12, r0
     852:	01 9f       	mul	r16, r17
     854:	d0 0c       	add	r13, r0
     856:	d0 0c       	add	r13, r0
     858:	11 24       	eor	r1, r1
     85a:	0d 2c       	mov	r0, r13
     85c:	00 0c       	add	r0, r0
     85e:	ee 08       	sbc	r14, r14
     860:	ff 08       	sbc	r15, r15
     862:	a5 01       	movw	r20, r10
     864:	94 01       	movw	r18, r8
     866:	c5 01       	movw	r24, r10
     868:	b4 01       	movw	r22, r8
     86a:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     86e:	4b 01       	movw	r8, r22
     870:	5c 01       	movw	r10, r24
     872:	c7 01       	movw	r24, r14
     874:	b6 01       	movw	r22, r12
     876:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     87a:	9b 01       	movw	r18, r22
     87c:	ac 01       	movw	r20, r24
     87e:	c5 01       	movw	r24, r10
     880:	b4 01       	movw	r22, r8
     882:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
     886:	0e 94 3b 1b 	call	0x3676	; 0x3676 <sqrt>
     88a:	6f ab       	std	Y+55, r22	; 0x37
     88c:	78 af       	std	Y+56, r23	; 0x38
     88e:	89 af       	std	Y+57, r24	; 0x39
     890:	9a af       	std	Y+58, r25	; 0x3a
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     892:	6d a5       	ldd	r22, Y+45	; 0x2d
     894:	7e a5       	ldd	r23, Y+46	; 0x2e
     896:	89 a1       	ldd	r24, Y+33	; 0x21
     898:	9a a1       	ldd	r25, Y+34	; 0x22
     89a:	68 1b       	sub	r22, r24
     89c:	79 0b       	sbc	r23, r25
     89e:	07 2e       	mov	r0, r23
     8a0:	00 0c       	add	r0, r0
     8a2:	88 0b       	sbc	r24, r24
     8a4:	99 0b       	sbc	r25, r25
     8a6:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     8aa:	4b 01       	movw	r8, r22
     8ac:	5c 01       	movw	r10, r24
     8ae:	09 a9       	ldd	r16, Y+49	; 0x31
     8b0:	1a a9       	ldd	r17, Y+50	; 0x32
     8b2:	ed a1       	ldd	r30, Y+37	; 0x25
     8b4:	fe a1       	ldd	r31, Y+38	; 0x26
     8b6:	0e 1b       	sub	r16, r30
     8b8:	1f 0b       	sbc	r17, r31
     8ba:	9b 01       	movw	r18, r22
     8bc:	ac 01       	movw	r20, r24
     8be:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     8c2:	69 a3       	std	Y+33, r22	; 0x21
     8c4:	7a a3       	std	Y+34, r23	; 0x22
     8c6:	8b a3       	std	Y+35, r24	; 0x23
     8c8:	9c a3       	std	Y+36, r25	; 0x24
     8ca:	00 9f       	mul	r16, r16
     8cc:	60 01       	movw	r12, r0
     8ce:	01 9f       	mul	r16, r17
     8d0:	d0 0c       	add	r13, r0
     8d2:	d0 0c       	add	r13, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	0d 2c       	mov	r0, r13
     8d8:	00 0c       	add	r0, r0
     8da:	ee 08       	sbc	r14, r14
     8dc:	ff 08       	sbc	r15, r15
     8de:	a5 01       	movw	r20, r10
     8e0:	94 01       	movw	r18, r8
     8e2:	c5 01       	movw	r24, r10
     8e4:	b4 01       	movw	r22, r8
     8e6:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     8ea:	4b 01       	movw	r8, r22
     8ec:	5c 01       	movw	r10, r24
     8ee:	c7 01       	movw	r24, r14
     8f0:	b6 01       	movw	r22, r12
     8f2:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	c5 01       	movw	r24, r10
     8fc:	b4 01       	movw	r22, r8
     8fe:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
     902:	0e 94 3b 1b 	call	0x3676	; 0x3676 <sqrt>
     906:	4b 01       	movw	r8, r22
     908:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     90a:	6d a5       	ldd	r22, Y+45	; 0x2d
     90c:	7e a5       	ldd	r23, Y+46	; 0x2e
     90e:	29 a5       	ldd	r18, Y+41	; 0x29
     910:	3a a5       	ldd	r19, Y+42	; 0x2a
     912:	62 1b       	sub	r22, r18
     914:	73 0b       	sbc	r23, r19
     916:	07 2e       	mov	r0, r23
     918:	00 0c       	add	r0, r0
     91a:	88 0b       	sbc	r24, r24
     91c:	99 0b       	sbc	r25, r25
     91e:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     922:	69 a3       	std	Y+33, r22	; 0x21
     924:	7a a3       	std	Y+34, r23	; 0x22
     926:	8b a3       	std	Y+35, r24	; 0x23
     928:	9c a3       	std	Y+36, r25	; 0x24
     92a:	09 a9       	ldd	r16, Y+49	; 0x31
     92c:	1a a9       	ldd	r17, Y+50	; 0x32
     92e:	06 19       	sub	r16, r6
     930:	17 09       	sbc	r17, r7
     932:	9b 01       	movw	r18, r22
     934:	ac 01       	movw	r20, r24
     936:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     93a:	6d a3       	std	Y+37, r22	; 0x25
     93c:	7e a3       	std	Y+38, r23	; 0x26
     93e:	8f a3       	std	Y+39, r24	; 0x27
     940:	98 a7       	std	Y+40, r25	; 0x28
     942:	00 9f       	mul	r16, r16
     944:	60 01       	movw	r12, r0
     946:	01 9f       	mul	r16, r17
     948:	d0 0c       	add	r13, r0
     94a:	d0 0c       	add	r13, r0
     94c:	11 24       	eor	r1, r1
     94e:	0d 2c       	mov	r0, r13
     950:	00 0c       	add	r0, r0
     952:	ee 08       	sbc	r14, r14
     954:	ff 08       	sbc	r15, r15
     956:	29 a1       	ldd	r18, Y+33	; 0x21
     958:	3a a1       	ldd	r19, Y+34	; 0x22
     95a:	4b a1       	ldd	r20, Y+35	; 0x23
     95c:	5c a1       	ldd	r21, Y+36	; 0x24
     95e:	ca 01       	movw	r24, r20
     960:	b9 01       	movw	r22, r18
     962:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     966:	69 a3       	std	Y+33, r22	; 0x21
     968:	7a a3       	std	Y+34, r23	; 0x22
     96a:	8b a3       	std	Y+35, r24	; 0x23
     96c:	9c a3       	std	Y+36, r25	; 0x24
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	69 a1       	ldd	r22, Y+33	; 0x21
     97c:	7a a1       	ldd	r23, Y+34	; 0x22
     97e:	8b a1       	ldd	r24, Y+35	; 0x23
     980:	9c a1       	ldd	r25, Y+36	; 0x24
     982:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
     986:	0e 94 3b 1b 	call	0x3676	; 0x3676 <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     98a:	2b ad       	ldd	r18, Y+59	; 0x3b
     98c:	3c ad       	ldd	r19, Y+60	; 0x3c
     98e:	4d ad       	ldd	r20, Y+61	; 0x3d
     990:	5e ad       	ldd	r21, Y+62	; 0x3e
     992:	29 83       	std	Y+1, r18	; 0x01
     994:	3a 83       	std	Y+2, r19	; 0x02
     996:	4b 83       	std	Y+3, r20	; 0x03
     998:	5c 83       	std	Y+4, r21	; 0x04
     99a:	23 96       	adiw	r28, 0x03	; 3
     99c:	2c ad       	ldd	r18, Y+60	; 0x3c
     99e:	3d ad       	ldd	r19, Y+61	; 0x3d
     9a0:	4e ad       	ldd	r20, Y+62	; 0x3e
     9a2:	5f ad       	ldd	r21, Y+63	; 0x3f
     9a4:	23 97       	sbiw	r28, 0x03	; 3
     9a6:	2d 83       	std	Y+5, r18	; 0x05
     9a8:	3e 83       	std	Y+6, r19	; 0x06
     9aa:	4f 83       	std	Y+7, r20	; 0x07
     9ac:	58 87       	std	Y+8, r21	; 0x08
     9ae:	2b a9       	ldd	r18, Y+51	; 0x33
     9b0:	3c a9       	ldd	r19, Y+52	; 0x34
     9b2:	4d a9       	ldd	r20, Y+53	; 0x35
     9b4:	5e a9       	ldd	r21, Y+54	; 0x36
     9b6:	29 87       	std	Y+9, r18	; 0x09
     9b8:	3a 87       	std	Y+10, r19	; 0x0a
     9ba:	4b 87       	std	Y+11, r20	; 0x0b
     9bc:	5c 87       	std	Y+12, r21	; 0x0c
     9be:	2f a9       	ldd	r18, Y+55	; 0x37
     9c0:	38 ad       	ldd	r19, Y+56	; 0x38
     9c2:	49 ad       	ldd	r20, Y+57	; 0x39
     9c4:	5a ad       	ldd	r21, Y+58	; 0x3a
     9c6:	2d 87       	std	Y+13, r18	; 0x0d
     9c8:	3e 87       	std	Y+14, r19	; 0x0e
     9ca:	4f 87       	std	Y+15, r20	; 0x0f
     9cc:	58 8b       	std	Y+16, r21	; 0x10
     9ce:	89 8a       	std	Y+17, r8	; 0x11
     9d0:	9a 8a       	std	Y+18, r9	; 0x12
     9d2:	ab 8a       	std	Y+19, r10	; 0x13
     9d4:	bc 8a       	std	Y+20, r11	; 0x14
     9d6:	6d 8b       	std	Y+21, r22	; 0x15
     9d8:	7e 8b       	std	Y+22, r23	; 0x16
     9da:	8f 8b       	std	Y+23, r24	; 0x17
     9dc:	98 8f       	std	Y+24, r25	; 0x18
     9de:	ae 01       	movw	r20, r28
     9e0:	4f 5f       	subi	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     9e6:	00 e0       	ldi	r16, 0x00	; 0
     9e8:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     9ea:	61 2c       	mov	r6, r1
     9ec:	71 2c       	mov	r7, r1
     9ee:	c1 2c       	mov	r12, r1
     9f0:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     9f2:	21 2c       	mov	r2, r1
     9f4:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     9f6:	f7 01       	movw	r30, r14
     9f8:	81 90       	ld	r8, Z+
     9fa:	91 90       	ld	r9, Z+
     9fc:	a1 90       	ld	r10, Z+
     9fe:	b1 90       	ld	r11, Z+
     a00:	7f 01       	movw	r14, r30
     a02:	26 2d       	mov	r18, r6
     a04:	37 2d       	mov	r19, r7
     a06:	4c 2d       	mov	r20, r12
     a08:	5d 2d       	mov	r21, r13
     a0a:	c5 01       	movw	r24, r10
     a0c:	b4 01       	movw	r22, r8
     a0e:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__gesf2>
     a12:	18 16       	cp	r1, r24
     a14:	34 f4       	brge	.+12     	; 0xa22 <fourPointCalc+0x3e8>
			indexMax = i;
			maxVal = distVect[i];
     a16:	68 2c       	mov	r6, r8
     a18:	79 2c       	mov	r7, r9
     a1a:	ca 2c       	mov	r12, r10
     a1c:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     a1e:	20 2e       	mov	r2, r16
     a20:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     a22:	0f 5f       	subi	r16, 0xFF	; 255
     a24:	1f 4f       	sbci	r17, 0xFF	; 255
     a26:	06 30       	cpi	r16, 0x06	; 6
     a28:	11 05       	cpc	r17, r1
     a2a:	29 f7       	brne	.-54     	; 0x9f6 <fourPointCalc+0x3bc>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLongRef; 
	pointsLongRef = distIndex(indexMax);
     a2c:	82 2d       	mov	r24, r2
     a2e:	93 2d       	mov	r25, r3
     a30:	0e 94 27 02 	call	0x44e	; 0x44e <distIndex>
	
	int pointsLong[2] = {(pointsLongRef[0]), (pointsLongRef[1])};
     a34:	fc 01       	movw	r30, r24
     a36:	e0 80       	ld	r14, Z
     a38:	f1 80       	ldd	r15, Z+1	; 0x01
     a3a:	fa 8e       	std	Y+26, r15	; 0x1a
     a3c:	e9 8e       	std	Y+25, r14	; 0x19
     a3e:	02 81       	ldd	r16, Z+2	; 0x02
     a40:	13 81       	ldd	r17, Z+3	; 0x03
     a42:	1c 8f       	std	Y+28, r17	; 0x1c
     a44:	0b 8f       	std	Y+27, r16	; 0x1b
	
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     a46:	ee 0c       	add	r14, r14
     a48:	ff 1c       	adc	r15, r15
     a4a:	ee 0c       	add	r14, r14
     a4c:	ff 1c       	adc	r15, r15
     a4e:	e4 0c       	add	r14, r4
     a50:	f5 1c       	adc	r15, r5
     a52:	00 0f       	add	r16, r16
     a54:	11 1f       	adc	r17, r17
     a56:	00 0f       	add	r16, r16
     a58:	11 1f       	adc	r17, r17
     a5a:	04 0d       	add	r16, r4
     a5c:	15 1d       	adc	r17, r5
     a5e:	f7 01       	movw	r30, r14
     a60:	60 81       	ld	r22, Z
     a62:	71 81       	ldd	r23, Z+1	; 0x01
     a64:	f8 01       	movw	r30, r16
     a66:	80 81       	ld	r24, Z
     a68:	91 81       	ldd	r25, Z+1	; 0x01
     a6a:	68 0f       	add	r22, r24
     a6c:	79 1f       	adc	r23, r25
     a6e:	77 23       	and	r23, r23
     a70:	14 f4       	brge	.+4      	; 0xa76 <fourPointCalc+0x43c>
     a72:	6f 5f       	subi	r22, 0xFF	; 255
     a74:	7f 4f       	sbci	r23, 0xFF	; 255
     a76:	75 95       	asr	r23
     a78:	67 95       	ror	r22
     a7a:	07 2e       	mov	r0, r23
     a7c:	00 0c       	add	r0, r0
     a7e:	88 0b       	sbc	r24, r24
     a80:	99 0b       	sbc	r25, r25
     a82:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     a86:	4b 01       	movw	r8, r22
     a88:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     a8a:	f7 01       	movw	r30, r14
     a8c:	62 81       	ldd	r22, Z+2	; 0x02
     a8e:	73 81       	ldd	r23, Z+3	; 0x03
     a90:	f8 01       	movw	r30, r16
     a92:	82 81       	ldd	r24, Z+2	; 0x02
     a94:	93 81       	ldd	r25, Z+3	; 0x03
     a96:	68 0f       	add	r22, r24
     a98:	79 1f       	adc	r23, r25
     a9a:	77 23       	and	r23, r23
     a9c:	14 f4       	brge	.+4      	; 0xaa2 <fourPointCalc+0x468>
     a9e:	6f 5f       	subi	r22, 0xFF	; 255
     aa0:	7f 4f       	sbci	r23, 0xFF	; 255
     aa2:	75 95       	asr	r23
     aa4:	67 95       	ror	r22
     aa6:	07 2e       	mov	r0, r23
     aa8:	00 0c       	add	r0, r0
     aaa:	88 0b       	sbc	r24, r24
     aac:	99 0b       	sbc	r25, r25
     aae:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     ab2:	69 a3       	std	Y+33, r22	; 0x21
     ab4:	7a a3       	std	Y+34, r23	; 0x22
     ab6:	8b a3       	std	Y+35, r24	; 0x23
     ab8:	9c a3       	std	Y+36, r25	; 0x24
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     aba:	9e 01       	movw	r18, r28
     abc:	21 5e       	subi	r18, 0xE1	; 225
     abe:	3f 4f       	sbci	r19, 0xFF	; 255
     ac0:	ae 01       	movw	r20, r28
     ac2:	43 5e       	subi	r20, 0xE3	; 227
     ac4:	5f 4f       	sbci	r21, 0xFF	; 255
     ac6:	be 01       	movw	r22, r28
     ac8:	6f 5f       	subi	r22, 0xFF	; 255
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
     acc:	ce 01       	movw	r24, r28
     ace:	49 96       	adiw	r24, 0x19	; 25
     ad0:	0e 94 75 02 	call	0x4ea	; 0x4ea <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     ad4:	0d 8d       	ldd	r16, Y+29	; 0x1d
     ad6:	1e 8d       	ldd	r17, Y+30	; 0x1e
     ad8:	00 0f       	add	r16, r16
     ada:	11 1f       	adc	r17, r17
     adc:	00 0f       	add	r16, r16
     ade:	11 1f       	adc	r17, r17
     ae0:	04 0d       	add	r16, r4
     ae2:	15 1d       	adc	r17, r5
     ae4:	2f 8c       	ldd	r2, Y+31	; 0x1f
     ae6:	38 a0       	ldd	r3, Y+32	; 0x20
     ae8:	22 0c       	add	r2, r2
     aea:	33 1c       	adc	r3, r3
     aec:	22 0c       	add	r2, r2
     aee:	33 1c       	adc	r3, r3
     af0:	24 0c       	add	r2, r4
     af2:	35 1c       	adc	r3, r5
     af4:	f8 01       	movw	r30, r16
     af6:	60 81       	ld	r22, Z
     af8:	71 81       	ldd	r23, Z+1	; 0x01
     afa:	f1 01       	movw	r30, r2
     afc:	80 81       	ld	r24, Z
     afe:	91 81       	ldd	r25, Z+1	; 0x01
     b00:	68 1b       	sub	r22, r24
     b02:	79 0b       	sbc	r23, r25
     b04:	07 2e       	mov	r0, r23
     b06:	00 0c       	add	r0, r0
     b08:	88 0b       	sbc	r24, r24
     b0a:	99 0b       	sbc	r25, r25
     b0c:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
     b10:	6b 01       	movw	r12, r22
     b12:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     b14:	f8 01       	movw	r30, r16
     b16:	62 81       	ldd	r22, Z+2	; 0x02
     b18:	73 81       	ldd	r23, Z+3	; 0x03
     b1a:	f1 01       	movw	r30, r2
     b1c:	82 81       	ldd	r24, Z+2	; 0x02
     b1e:	93 81       	ldd	r25, Z+3	; 0x03
     b20:	68 1b       	sub	r22, r24
     b22:	79 0b       	sbc	r23, r25
     b24:	07 2e       	mov	r0, r23
     b26:	00 0c       	add	r0, r0
     b28:	88 0b       	sbc	r24, r24
     b2a:	99 0b       	sbc	r25, r25
     b2c:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     b30:	90 58       	subi	r25, 0x80	; 128
     b32:	a7 01       	movw	r20, r14
     b34:	96 01       	movw	r18, r12
     b36:	0e 94 8a 18 	call	0x3114	; 0x3114 <atan2>
	theta += M_PI/2.0;
     b3a:	2b ed       	ldi	r18, 0xDB	; 219
     b3c:	3f e0       	ldi	r19, 0x0F	; 15
     b3e:	49 ec       	ldi	r20, 0xC9	; 201
     b40:	5f e3       	ldi	r21, 0x3F	; 63
     b42:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
     b46:	6b 01       	movw	r12, r22
     b48:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     b4a:	a5 01       	movw	r20, r10
     b4c:	94 01       	movw	r18, r8
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	94 e4       	ldi	r25, 0x44	; 68
     b56:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
     b5a:	4b 01       	movw	r8, r22
     b5c:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     b5e:	29 a1       	ldd	r18, Y+33	; 0x21
     b60:	3a a1       	ldd	r19, Y+34	; 0x22
     b62:	4b a1       	ldd	r20, Y+35	; 0x23
     b64:	5c a1       	ldd	r21, Y+36	; 0x24
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	8f eb       	ldi	r24, 0xBF	; 191
     b6c:	93 e4       	ldi	r25, 0x43	; 67
     b6e:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
     b72:	2b 01       	movw	r4, r22
     b74:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     b76:	c7 01       	movw	r24, r14
     b78:	b6 01       	movw	r22, r12
     b7a:	0e 94 2d 1b 	call	0x365a	; 0x365a <sin>
     b7e:	69 a3       	std	Y+33, r22	; 0x21
     b80:	7a a3       	std	Y+34, r23	; 0x22
     b82:	8b a3       	std	Y+35, r24	; 0x23
     b84:	9c a3       	std	Y+36, r25	; 0x24
     b86:	c7 01       	movw	r24, r14
     b88:	b6 01       	movw	r22, r12
     b8a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <cos>
     b8e:	6d a3       	std	Y+37, r22	; 0x25
     b90:	7e a3       	std	Y+38, r23	; 0x26
     b92:	8f a3       	std	Y+39, r24	; 0x27
     b94:	98 a7       	std	Y+40, r25	; 0x28
     b96:	06 e6       	ldi	r16, 0x66	; 102
     b98:	11 e0       	ldi	r17, 0x01	; 1
     b9a:	29 a1       	ldd	r18, Y+33	; 0x21
     b9c:	3a a1       	ldd	r19, Y+34	; 0x22
     b9e:	4b a1       	ldd	r20, Y+35	; 0x23
     ba0:	5c a1       	ldd	r21, Y+36	; 0x24
     ba2:	c3 01       	movw	r24, r6
     ba4:	b2 01       	movw	r22, r4
     ba6:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     baa:	69 a7       	std	Y+41, r22	; 0x29
     bac:	7a a7       	std	Y+42, r23	; 0x2a
     bae:	8b a7       	std	Y+43, r24	; 0x2b
     bb0:	9c a7       	std	Y+44, r25	; 0x2c
     bb2:	2d a1       	ldd	r18, Y+37	; 0x25
     bb4:	3e a1       	ldd	r19, Y+38	; 0x26
     bb6:	4f a1       	ldd	r20, Y+39	; 0x27
     bb8:	58 a5       	ldd	r21, Y+40	; 0x28
     bba:	c5 01       	movw	r24, r10
     bbc:	b4 01       	movw	r22, r8
     bbe:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	69 a5       	ldd	r22, Y+41	; 0x29
     bc8:	7a a5       	ldd	r23, Y+42	; 0x2a
     bca:	8b a5       	ldd	r24, Y+43	; 0x2b
     bcc:	9c a5       	ldd	r25, Y+44	; 0x2c
     bce:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
     bd2:	f8 01       	movw	r30, r16
     bd4:	60 83       	st	Z, r22
     bd6:	71 83       	std	Z+1, r23	; 0x01
     bd8:	82 83       	std	Z+2, r24	; 0x02
     bda:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     bdc:	2d a1       	ldd	r18, Y+37	; 0x25
     bde:	3e a1       	ldd	r19, Y+38	; 0x26
     be0:	4f a1       	ldd	r20, Y+39	; 0x27
     be2:	58 a5       	ldd	r21, Y+40	; 0x28
     be4:	c3 01       	movw	r24, r6
     be6:	b2 01       	movw	r22, r4
     be8:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     bec:	2b 01       	movw	r4, r22
     bee:	3c 01       	movw	r6, r24
     bf0:	29 a1       	ldd	r18, Y+33	; 0x21
     bf2:	3a a1       	ldd	r19, Y+34	; 0x22
     bf4:	4b a1       	ldd	r20, Y+35	; 0x23
     bf6:	5c a1       	ldd	r21, Y+36	; 0x24
     bf8:	c5 01       	movw	r24, r10
     bfa:	b4 01       	movw	r22, r8
     bfc:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
     c00:	9b 01       	movw	r18, r22
     c02:	ac 01       	movw	r20, r24
     c04:	c3 01       	movw	r24, r6
     c06:	b2 01       	movw	r22, r4
     c08:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
     c0c:	f8 01       	movw	r30, r16
     c0e:	64 83       	std	Z+4, r22	; 0x04
     c10:	75 83       	std	Z+5, r23	; 0x05
     c12:	86 83       	std	Z+6, r24	; 0x06
     c14:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta;
     c16:	f7 fa       	bst	r15, 7
     c18:	f0 94       	com	r15
     c1a:	f7 f8       	bld	r15, 7
     c1c:	f0 94       	com	r15
     c1e:	c0 86       	std	Z+8, r12	; 0x08
     c20:	d1 86       	std	Z+9, r13	; 0x09
     c22:	e2 86       	std	Z+10, r14	; 0x0a
     c24:	f3 86       	std	Z+11, r15	; 0x0b
	
	return centerFour;
}
     c26:	c8 01       	movw	r24, r16
     c28:	ce 5b       	subi	r28, 0xBE	; 190
     c2a:	df 4f       	sbci	r29, 0xFF	; 255
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	9f 90       	pop	r9
     c4c:	8f 90       	pop	r8
     c4e:	7f 90       	pop	r7
     c50:	6f 90       	pop	r6
     c52:	5f 90       	pop	r5
     c54:	4f 90       	pop	r4
     c56:	3f 90       	pop	r3
     c58:	2f 90       	pop	r2
     c5a:	08 95       	ret

00000c5c <localization_calc>:
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
     c5c:	4f 92       	push	r4
     c5e:	5f 92       	push	r5
     c60:	6f 92       	push	r6
     c62:	7f 92       	push	r7
     c64:	af 92       	push	r10
     c66:	bf 92       	push	r11
     c68:	cf 92       	push	r12
     c6a:	df 92       	push	r13
     c6c:	ef 92       	push	r14
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	68 97       	sbiw	r28, 0x18	; 24
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     c8a:	0d b7       	in	r16, 0x3d	; 61
     c8c:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	80 85       	ldd	r24, Z+8	; 0x08
     c98:	91 85       	ldd	r25, Z+9	; 0x09
     c9a:	9c 83       	std	Y+4, r25	; 0x04
     c9c:	8b 83       	std	Y+3, r24	; 0x03
     c9e:	82 81       	ldd	r24, Z+2	; 0x02
     ca0:	93 81       	ldd	r25, Z+3	; 0x03
     ca2:	9e 83       	std	Y+6, r25	; 0x06
     ca4:	8d 83       	std	Y+5, r24	; 0x05
     ca6:	82 85       	ldd	r24, Z+10	; 0x0a
     ca8:	93 85       	ldd	r25, Z+11	; 0x0b
     caa:	98 87       	std	Y+8, r25	; 0x08
     cac:	8f 83       	std	Y+7, r24	; 0x07
     cae:	84 81       	ldd	r24, Z+4	; 0x04
     cb0:	95 81       	ldd	r25, Z+5	; 0x05
     cb2:	9a 87       	std	Y+10, r25	; 0x0a
     cb4:	89 87       	std	Y+9, r24	; 0x09
     cb6:	84 85       	ldd	r24, Z+12	; 0x0c
     cb8:	95 85       	ldd	r25, Z+13	; 0x0d
     cba:	9c 87       	std	Y+12, r25	; 0x0c
     cbc:	8b 87       	std	Y+11, r24	; 0x0b
     cbe:	86 81       	ldd	r24, Z+6	; 0x06
     cc0:	97 81       	ldd	r25, Z+7	; 0x07
     cc2:	9e 87       	std	Y+14, r25	; 0x0e
     cc4:	8d 87       	std	Y+13, r24	; 0x0d
     cc6:	86 85       	ldd	r24, Z+14	; 0x0e
     cc8:	97 85       	ldd	r25, Z+15	; 0x0f
     cca:	98 8b       	std	Y+16, r25	; 0x10
     ccc:	8f 87       	std	Y+15, r24	; 0x0f
		{rawStarData[3], rawStarData[7]}
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     cce:	fe 01       	movw	r30, r28
     cd0:	71 96       	adiw	r30, 0x11	; 17
     cd2:	88 e0       	ldi	r24, 0x08	; 8
     cd4:	df 01       	movw	r26, r30
     cd6:	1d 92       	st	X+, r1
     cd8:	8a 95       	dec	r24
     cda:	e9 f7       	brne	.-6      	; 0xcd6 <localization_calc+0x7a>
     cdc:	70 97       	sbiw	r30, 0x10	; 16
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     ce6:	40 81       	ld	r20, Z
     ce8:	51 81       	ldd	r21, Z+1	; 0x01
     cea:	4f 3f       	cpi	r20, 0xFF	; 255
     cec:	53 40       	sbci	r21, 0x03	; 3
     cee:	71 f0       	breq	.+28     	; 0xd0c <localization_calc+0xb0>
			pointIndices[numPoints] = i;
     cf0:	dc 01       	movw	r26, r24
     cf2:	aa 0f       	add	r26, r26
     cf4:	bb 1f       	adc	r27, r27
     cf6:	41 e0       	ldi	r20, 0x01	; 1
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	4c 0f       	add	r20, r28
     cfc:	5d 1f       	adc	r21, r29
     cfe:	a4 0f       	add	r26, r20
     d00:	b5 1f       	adc	r27, r21
     d02:	51 96       	adiw	r26, 0x11	; 17
     d04:	3c 93       	st	X, r19
     d06:	2e 93       	st	-X, r18
     d08:	50 97       	sbiw	r26, 0x10	; 16
			numPoints++;
     d0a:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     d0c:	2f 5f       	subi	r18, 0xFF	; 255
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	34 96       	adiw	r30, 0x04	; 4
     d12:	24 30       	cpi	r18, 0x04	; 4
     d14:	31 05       	cpc	r19, r1
     d16:	39 f7       	brne	.-50     	; 0xce6 <localization_calc+0x8a>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	09 f4       	brne	.+2      	; 0xd1e <localization_calc+0xc2>
     d1c:	89 c0       	rjmp	.+274    	; 0xe30 <localization_calc+0x1d4>
     d1e:	ed b6       	in	r14, 0x3d	; 61
     d20:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     d22:	6c 01       	movw	r12, r24
     d24:	cc 0c       	add	r12, r12
     d26:	dd 1c       	adc	r13, r13
     d28:	cc 0c       	add	r12, r12
     d2a:	dd 1c       	adc	r13, r13
     d2c:	ad b7       	in	r26, 0x3d	; 61
     d2e:	be b7       	in	r27, 0x3e	; 62
     d30:	ac 19       	sub	r26, r12
     d32:	bd 09       	sbc	r27, r13
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	be bf       	out	0x3e, r27	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	ad bf       	out	0x3d, r26	; 61
     d3e:	ed b7       	in	r30, 0x3d	; 61
     d40:	fe b7       	in	r31, 0x3e	; 62
     d42:	31 96       	adiw	r30, 0x01	; 1
     d44:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     d46:	18 16       	cp	r1, r24
     d48:	19 06       	cpc	r1, r25
     d4a:	24 f5       	brge	.+72     	; 0xd94 <localization_calc+0x138>
     d4c:	9e 01       	movw	r18, r28
     d4e:	2f 5e       	subi	r18, 0xEF	; 239
     d50:	3f 4f       	sbci	r19, 0xFF	; 255
     d52:	df 01       	movw	r26, r30
     d54:	ce 0e       	add	r12, r30
     d56:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     d58:	f9 01       	movw	r30, r18
     d5a:	41 91       	ld	r20, Z+
     d5c:	51 91       	ld	r21, Z+
     d5e:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     d60:	fa 01       	movw	r30, r20
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	4c 0f       	add	r20, r28
     d70:	5d 1f       	adc	r21, r29
     d72:	e4 0f       	add	r30, r20
     d74:	f5 1f       	adc	r31, r21
     d76:	40 81       	ld	r20, Z
     d78:	51 81       	ldd	r21, Z+1	; 0x01
     d7a:	11 96       	adiw	r26, 0x01	; 1
     d7c:	5c 93       	st	X, r21
     d7e:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     d80:	42 81       	ldd	r20, Z+2	; 0x02
     d82:	53 81       	ldd	r21, Z+3	; 0x03
     d84:	13 96       	adiw	r26, 0x03	; 3
     d86:	5c 93       	st	X, r21
     d88:	4e 93       	st	-X, r20
     d8a:	12 97       	sbiw	r26, 0x02	; 2
     d8c:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     d8e:	ac 15       	cp	r26, r12
     d90:	bd 05       	cpc	r27, r13
     d92:	11 f7       	brne	.-60     	; 0xd58 <localization_calc+0xfc>
			points[i][1] = pvect[index][1];
		}
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     d94:	db 01       	movw	r26, r22
     d96:	4d 90       	ld	r4, X+
     d98:	5d 90       	ld	r5, X+
     d9a:	6d 90       	ld	r6, X+
     d9c:	7c 90       	ld	r7, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	ee e7       	ldi	r30, 0x7E	; 126
     da2:	f1 e0       	ldi	r31, 0x01	; 1
     da4:	40 82       	st	Z, r4
     da6:	51 82       	std	Z+1, r5	; 0x01
     da8:	62 82       	std	Z+2, r6	; 0x02
     daa:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     dac:	14 96       	adiw	r26, 0x04	; 4
     dae:	4d 90       	ld	r4, X+
     db0:	5d 90       	ld	r5, X+
     db2:	6d 90       	ld	r6, X+
     db4:	7c 90       	ld	r7, X
     db6:	17 97       	sbiw	r26, 0x07	; 7
     db8:	44 82       	std	Z+4, r4	; 0x04
     dba:	55 82       	std	Z+5, r5	; 0x05
     dbc:	66 82       	std	Z+6, r6	; 0x06
     dbe:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     dc0:	18 96       	adiw	r26, 0x08	; 8
     dc2:	4d 91       	ld	r20, X+
     dc4:	5d 91       	ld	r21, X+
     dc6:	6d 91       	ld	r22, X+
     dc8:	7c 91       	ld	r23, X
     dca:	1b 97       	sbiw	r26, 0x0b	; 11
     dcc:	40 87       	std	Z+8, r20	; 0x08
     dce:	51 87       	std	Z+9, r21	; 0x09
     dd0:	62 87       	std	Z+10, r22	; 0x0a
     dd2:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     dd4:	04 97       	sbiw	r24, 0x04	; 4
     dd6:	29 f4       	brne	.+10     	; 0xde2 <localization_calc+0x186>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     dd8:	c5 01       	movw	r24, r10
     dda:	0e 94 1d 03 	call	0x63a	; 0x63a <fourPointCalc>
     dde:	dc 01       	movw	r26, r24
				break;
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <localization_calc+0x18a>
				
			case 3 : 
				//calcPointer = threePointCalc(points);
				calcPointer = &rc[0];
     de2:	ae e7       	ldi	r26, 0x7E	; 126
     de4:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				calcPointer = &rc[0];
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     de6:	4d 91       	ld	r20, X+
     de8:	5d 91       	ld	r21, X+
     dea:	6d 91       	ld	r22, X+
     dec:	7c 91       	ld	r23, X
     dee:	13 97       	sbiw	r26, 0x03	; 3
     df0:	e2 e7       	ldi	r30, 0x72	; 114
     df2:	f1 e0       	ldi	r31, 0x01	; 1
     df4:	40 83       	st	Z, r20
     df6:	51 83       	std	Z+1, r21	; 0x01
     df8:	62 83       	std	Z+2, r22	; 0x02
     dfa:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     dfc:	14 96       	adiw	r26, 0x04	; 4
     dfe:	4d 91       	ld	r20, X+
     e00:	5d 91       	ld	r21, X+
     e02:	6d 91       	ld	r22, X+
     e04:	7c 91       	ld	r23, X
     e06:	17 97       	sbiw	r26, 0x07	; 7
     e08:	44 83       	std	Z+4, r20	; 0x04
     e0a:	55 83       	std	Z+5, r21	; 0x05
     e0c:	66 83       	std	Z+6, r22	; 0x06
     e0e:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     e10:	18 96       	adiw	r26, 0x08	; 8
     e12:	8d 91       	ld	r24, X+
     e14:	9d 91       	ld	r25, X+
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	fe be       	out	0x3e, r15	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	ed be       	out	0x3d, r14	; 61
     e2e:	20 c0       	rjmp	.+64     	; 0xe70 <localization_calc+0x214>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     e30:	fb 01       	movw	r30, r22
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	a2 81       	ldd	r26, Z+2	; 0x02
     e38:	b3 81       	ldd	r27, Z+3	; 0x03
     e3a:	e2 e7       	ldi	r30, 0x72	; 114
     e3c:	f1 e0       	ldi	r31, 0x01	; 1
     e3e:	80 83       	st	Z, r24
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	a2 83       	std	Z+2, r26	; 0x02
     e44:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     e46:	db 01       	movw	r26, r22
     e48:	14 96       	adiw	r26, 0x04	; 4
     e4a:	cd 90       	ld	r12, X+
     e4c:	dd 90       	ld	r13, X+
     e4e:	ed 90       	ld	r14, X+
     e50:	fc 90       	ld	r15, X
     e52:	17 97       	sbiw	r26, 0x07	; 7
     e54:	c4 82       	std	Z+4, r12	; 0x04
     e56:	d5 82       	std	Z+5, r13	; 0x05
     e58:	e6 82       	std	Z+6, r14	; 0x06
     e5a:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];	
     e5c:	18 96       	adiw	r26, 0x08	; 8
     e5e:	4d 91       	ld	r20, X+
     e60:	5d 91       	ld	r21, X+
     e62:	6d 91       	ld	r22, X+
     e64:	7c 91       	ld	r23, X
     e66:	1b 97       	sbiw	r26, 0x0b	; 11
     e68:	40 87       	std	Z+8, r20	; 0x08
     e6a:	51 87       	std	Z+9, r21	; 0x09
     e6c:	62 87       	std	Z+10, r22	; 0x0a
     e6e:	73 87       	std	Z+11, r23	; 0x0b
	
	return robotCenter;
	
	
	
}
     e70:	82 e7       	ldi	r24, 0x72	; 114
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	1e bf       	out	0x3e, r17	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	0d bf       	out	0x3d, r16	; 61
     e7e:	68 96       	adiw	r28, 0x18	; 24
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	7f 90       	pop	r7
     ea0:	6f 90       	pop	r6
     ea2:	5f 90       	pop	r5
     ea4:	4f 90       	pop	r4
     ea6:	08 95       	ret

00000ea8 <motor_update>:
Initialization of Subsystem Components
************************************************************/

/* Called On Timer 3 Rollover */
void motor_update(void)
{
     ea8:	af 92       	push	r10
     eaa:	bf 92       	push	r11
     eac:	cf 92       	push	r12
     eae:	df 92       	push	r13
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
	set(TIFR3,OCF3A);		// Reset flag
     eb8:	c1 9a       	sbi	0x18, 1	; 24
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd); // Update control
     eba:	a0 90 16 01 	lds	r10, 0x0116
     ebe:	b0 90 17 01 	lds	r11, 0x0117
     ec2:	c0 90 18 01 	lds	r12, 0x0118
     ec6:	d0 90 19 01 	lds	r13, 0x0119
     eca:	e0 90 1a 01 	lds	r14, 0x011A
     ece:	f0 90 1b 01 	lds	r15, 0x011B
     ed2:	00 91 1c 01 	lds	r16, 0x011C
     ed6:	10 91 1d 01 	lds	r17, 0x011D
     eda:	20 91 ad 01 	lds	r18, 0x01AD
     ede:	30 91 ae 01 	lds	r19, 0x01AE
     ee2:	40 91 af 01 	lds	r20, 0x01AF
     ee6:	50 91 b0 01 	lds	r21, 0x01B0
     eea:	60 91 b1 01 	lds	r22, 0x01B1
     eee:	70 91 b2 01 	lds	r23, 0x01B2
     ef2:	80 91 b3 01 	lds	r24, 0x01B3
     ef6:	90 91 b4 01 	lds	r25, 0x01B4
     efa:	e0 91 0d 01 	lds	r30, 0x010D
     efe:	ef 93       	push	r30
     f00:	e0 91 0c 01 	lds	r30, 0x010C
     f04:	ef 93       	push	r30
     f06:	e0 91 0b 01 	lds	r30, 0x010B
     f0a:	ef 93       	push	r30
     f0c:	e0 91 0a 01 	lds	r30, 0x010A
     f10:	ef 93       	push	r30
     f12:	e0 91 11 01 	lds	r30, 0x0111
     f16:	ef 93       	push	r30
     f18:	e0 91 10 01 	lds	r30, 0x0110
     f1c:	ef 93       	push	r30
     f1e:	e0 91 0f 01 	lds	r30, 0x010F
     f22:	ef 93       	push	r30
     f24:	e0 91 0e 01 	lds	r30, 0x010E
     f28:	ef 93       	push	r30
     f2a:	e0 91 ac 01 	lds	r30, 0x01AC
     f2e:	ef 93       	push	r30
     f30:	e0 91 ab 01 	lds	r30, 0x01AB
     f34:	ef 93       	push	r30
     f36:	e0 91 aa 01 	lds	r30, 0x01AA
     f3a:	ef 93       	push	r30
     f3c:	e0 91 a9 01 	lds	r30, 0x01A9
     f40:	ef 93       	push	r30
     f42:	e0 91 15 01 	lds	r30, 0x0115
     f46:	ef 93       	push	r30
     f48:	e0 91 14 01 	lds	r30, 0x0114
     f4c:	ef 93       	push	r30
     f4e:	e0 91 13 01 	lds	r30, 0x0113
     f52:	ef 93       	push	r30
     f54:	e0 91 12 01 	lds	r30, 0x0112
     f58:	ef 93       	push	r30
     f5a:	0e 94 6d 0c 	call	0x18da	; 0x18da <run_motor_control_loop>
     f5e:	8d b7       	in	r24, 0x3d	; 61
     f60:	9e b7       	in	r25, 0x3e	; 62
     f62:	40 96       	adiw	r24, 0x10	; 16
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	9e bf       	out	0x3e, r25	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	8d bf       	out	0x3d, r24	; 61
}
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	bf 90       	pop	r11
     f7c:	af 90       	pop	r10
     f7e:	08 95       	ret

00000f80 <bot_behavior_update>:

/* Update Targets, Gains, and Max Vals */
void bot_behavior_update()
{
     f80:	4f 92       	push	r4
     f82:	5f 92       	push	r5
     f84:	6f 92       	push	r6
     f86:	7f 92       	push	r7
     f88:	8f 92       	push	r8
     f8a:	9f 92       	push	r9
     f8c:	af 92       	push	r10
     f8e:	bf 92       	push	r11
     f90:	cf 92       	push	r12
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	2c 97       	sbiw	r28, 0x0c	; 12
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
	if (has_puck())
     fac:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <has_puck>
     fb0:	88 23       	and	r24, r24
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <bot_behavior_update+0x36>
     fb4:	89 c0       	rjmp	.+274    	; 0x10c8 <bot_behavior_update+0x148>
	{
		float position_buffer[3];
		get_position(position_buffer);
     fb6:	ce 01       	movw	r24, r28
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	0e 94 06 0b 	call	0x160c	; 0x160c <get_position>
		float goal_angle = atan2((y_goal-position_buffer[1]),(x_goal-position_buffer[0]));
     fbe:	80 90 06 01 	lds	r8, 0x0106
     fc2:	90 90 07 01 	lds	r9, 0x0107
     fc6:	a0 90 08 01 	lds	r10, 0x0108
     fca:	b0 90 09 01 	lds	r11, 0x0109
     fce:	c0 90 02 01 	lds	r12, 0x0102
     fd2:	d0 90 03 01 	lds	r13, 0x0103
     fd6:	e0 90 04 01 	lds	r14, 0x0104
     fda:	f0 90 05 01 	lds	r15, 0x0105
     fde:	29 81       	ldd	r18, Y+1	; 0x01
     fe0:	3a 81       	ldd	r19, Y+2	; 0x02
     fe2:	4b 81       	ldd	r20, Y+3	; 0x03
     fe4:	5c 81       	ldd	r21, Y+4	; 0x04
     fe6:	c5 01       	movw	r24, r10
     fe8:	b4 01       	movw	r22, r8
     fea:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
     fee:	2b 01       	movw	r4, r22
     ff0:	3c 01       	movw	r6, r24
     ff2:	2d 81       	ldd	r18, Y+5	; 0x05
     ff4:	3e 81       	ldd	r19, Y+6	; 0x06
     ff6:	4f 81       	ldd	r20, Y+7	; 0x07
     ff8:	58 85       	ldd	r21, Y+8	; 0x08
     ffa:	c7 01       	movw	r24, r14
     ffc:	b6 01       	movw	r22, r12
     ffe:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    1002:	a3 01       	movw	r20, r6
    1004:	92 01       	movw	r18, r4
    1006:	0e 94 8a 18 	call	0x3114	; 0x3114 <atan2>
		if (fabs(goal_angle-position_buffer[2]) < ANGLE_OF_ATTACK)
    100a:	29 85       	ldd	r18, Y+9	; 0x09
    100c:	3a 85       	ldd	r19, Y+10	; 0x0a
    100e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1010:	5c 85       	ldd	r21, Y+12	; 0x0c
    1012:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    1016:	9f 77       	andi	r25, 0x7F	; 127
    1018:	2d ec       	ldi	r18, 0xCD	; 205
    101a:	3c ec       	ldi	r19, 0xCC	; 204
    101c:	4c e4       	ldi	r20, 0x4C	; 76
    101e:	5d e3       	ldi	r21, 0x3D	; 61
    1020:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
    1024:	88 23       	and	r24, r24
    1026:	6c f4       	brge	.+26     	; 0x1042 <bot_behavior_update+0xc2>
		{
			max_duty_cycle = DUTY_CYCLE_ATTACK;
    1028:	83 e3       	ldi	r24, 0x33	; 51
    102a:	93 e3       	ldi	r25, 0x33	; 51
    102c:	a3 e7       	ldi	r26, 0x73	; 115
    102e:	bf e3       	ldi	r27, 0x3F	; 63
    1030:	80 93 1a 01 	sts	0x011A, r24
    1034:	90 93 1b 01 	sts	0x011B, r25
    1038:	a0 93 1c 01 	sts	0x011C, r26
    103c:	b0 93 1d 01 	sts	0x011D, r27
    1040:	0c c0       	rjmp	.+24     	; 0x105a <bot_behavior_update+0xda>
		} else
		{
			max_duty_cycle = DUTY_CYCLE_PUCK;
    1042:	83 e3       	ldi	r24, 0x33	; 51
    1044:	93 e3       	ldi	r25, 0x33	; 51
    1046:	a3 e3       	ldi	r26, 0x33	; 51
    1048:	bf e3       	ldi	r27, 0x3F	; 63
    104a:	80 93 1a 01 	sts	0x011A, r24
    104e:	90 93 1b 01 	sts	0x011B, r25
    1052:	a0 93 1c 01 	sts	0x011C, r26
    1056:	b0 93 1d 01 	sts	0x011D, r27
		}
		//positioning_LED(RED);
		x_target = x_goal;
    105a:	80 92 b1 01 	sts	0x01B1, r8
    105e:	90 92 b2 01 	sts	0x01B2, r9
    1062:	a0 92 b3 01 	sts	0x01B3, r10
    1066:	b0 92 b4 01 	sts	0x01B4, r11
		y_target = y_goal;
    106a:	c0 92 ad 01 	sts	0x01AD, r12
    106e:	d0 92 ae 01 	sts	0x01AE, r13
    1072:	e0 92 af 01 	sts	0x01AF, r14
    1076:	f0 92 b0 01 	sts	0x01B0, r15
		max_theta = M_PI/2;
    107a:	8b ed       	ldi	r24, 0xDB	; 219
    107c:	9f e0       	ldi	r25, 0x0F	; 15
    107e:	a9 ec       	ldi	r26, 0xC9	; 201
    1080:	bf e3       	ldi	r27, 0x3F	; 63
    1082:	80 93 16 01 	sts	0x0116, r24
    1086:	90 93 17 01 	sts	0x0117, r25
    108a:	a0 93 18 01 	sts	0x0118, r26
    108e:	b0 93 19 01 	sts	0x0119, r27
		theta_kd = 0.05;
    1092:	8d ec       	ldi	r24, 0xCD	; 205
    1094:	9c ec       	ldi	r25, 0xCC	; 204
    1096:	ac e4       	ldi	r26, 0x4C	; 76
    1098:	bd e3       	ldi	r27, 0x3D	; 61
    109a:	80 93 a9 01 	sts	0x01A9, r24
    109e:	90 93 aa 01 	sts	0x01AA, r25
    10a2:	a0 93 ab 01 	sts	0x01AB, r26
    10a6:	b0 93 ac 01 	sts	0x01AC, r27
		theta_kp = 1.6;
    10aa:	8d ec       	ldi	r24, 0xCD	; 205
    10ac:	9c ec       	ldi	r25, 0xCC	; 204
    10ae:	ac ec       	ldi	r26, 0xCC	; 204
    10b0:	bf e3       	ldi	r27, 0x3F	; 63
    10b2:	80 93 12 01 	sts	0x0112, r24
    10b6:	90 93 13 01 	sts	0x0113, r25
    10ba:	a0 93 14 01 	sts	0x0114, r26
    10be:	b0 93 15 01 	sts	0x0115, r27
		m_green(OFF);
    10c2:	6a 9a       	sbi	0x0d, 2	; 13
    10c4:	72 9a       	sbi	0x0e, 2	; 14
    10c6:	a4 c0       	rjmp	.+328    	; 0x1210 <bot_behavior_update+0x290>
		return;
		
	}
	
	if (!has_puck())
    10c8:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <has_puck>
    10cc:	81 11       	cpse	r24, r1
    10ce:	a0 c0       	rjmp	.+320    	; 0x1210 <bot_behavior_update+0x290>
	{
		//positioning_LED(RED);
		float position_buffer[3];
		get_position(position_buffer);
    10d0:	ce 01       	movw	r24, r28
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	0e 94 06 0b 	call	0x160c	; 0x160c <get_position>
		if((puck_dist>800) && (fabs(position_buffer[0]-x_goal)<(fabs(x_puck-x_goal))))
    10d8:	80 91 8a 01 	lds	r24, 0x018A
    10dc:	90 91 8b 01 	lds	r25, 0x018B
    10e0:	81 32       	cpi	r24, 0x21	; 33
    10e2:	93 40       	sbci	r25, 0x03	; 3
    10e4:	0c f4       	brge	.+2      	; 0x10e8 <bot_behavior_update+0x168>
    10e6:	46 c0       	rjmp	.+140    	; 0x1174 <bot_behavior_update+0x1f4>
    10e8:	c0 90 06 01 	lds	r12, 0x0106
    10ec:	d0 90 07 01 	lds	r13, 0x0107
    10f0:	e0 90 08 01 	lds	r14, 0x0108
    10f4:	f0 90 09 01 	lds	r15, 0x0109
    10f8:	a7 01       	movw	r20, r14
    10fa:	96 01       	movw	r18, r12
    10fc:	69 81       	ldd	r22, Y+1	; 0x01
    10fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    1108:	4b 01       	movw	r8, r22
    110a:	5c 01       	movw	r10, r24
    110c:	e8 94       	clt
    110e:	b7 f8       	bld	r11, 7
    1110:	a7 01       	movw	r20, r14
    1112:	96 01       	movw	r18, r12
    1114:	60 91 90 01 	lds	r22, 0x0190
    1118:	70 91 91 01 	lds	r23, 0x0191
    111c:	80 91 92 01 	lds	r24, 0x0192
    1120:	90 91 93 01 	lds	r25, 0x0193
    1124:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    1128:	9b 01       	movw	r18, r22
    112a:	ac 01       	movw	r20, r24
    112c:	5f 77       	andi	r21, 0x7F	; 127
    112e:	c5 01       	movw	r24, r10
    1130:	b4 01       	movw	r22, r8
    1132:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
    1136:	88 23       	and	r24, r24
    1138:	ec f4       	brge	.+58     	; 0x1174 <bot_behavior_update+0x1f4>
		{
			x_target = -x_goal;
    113a:	f7 fa       	bst	r15, 7
    113c:	f0 94       	com	r15
    113e:	f7 f8       	bld	r15, 7
    1140:	f0 94       	com	r15
    1142:	c0 92 b1 01 	sts	0x01B1, r12
    1146:	d0 92 b2 01 	sts	0x01B2, r13
    114a:	e0 92 b3 01 	sts	0x01B3, r14
    114e:	f0 92 b4 01 	sts	0x01B4, r15
			y_target = y_goal;
    1152:	80 91 02 01 	lds	r24, 0x0102
    1156:	90 91 03 01 	lds	r25, 0x0103
    115a:	a0 91 04 01 	lds	r26, 0x0104
    115e:	b0 91 05 01 	lds	r27, 0x0105
    1162:	80 93 ad 01 	sts	0x01AD, r24
    1166:	90 93 ae 01 	sts	0x01AE, r25
    116a:	a0 93 af 01 	sts	0x01AF, r26
    116e:	b0 93 b0 01 	sts	0x01B0, r27
    1172:	20 c0       	rjmp	.+64     	; 0x11b4 <bot_behavior_update+0x234>
		} else {
			x_target = x_puck;
    1174:	80 91 90 01 	lds	r24, 0x0190
    1178:	90 91 91 01 	lds	r25, 0x0191
    117c:	a0 91 92 01 	lds	r26, 0x0192
    1180:	b0 91 93 01 	lds	r27, 0x0193
    1184:	80 93 b1 01 	sts	0x01B1, r24
    1188:	90 93 b2 01 	sts	0x01B2, r25
    118c:	a0 93 b3 01 	sts	0x01B3, r26
    1190:	b0 93 b4 01 	sts	0x01B4, r27
			y_target = y_puck;
    1194:	80 91 8c 01 	lds	r24, 0x018C
    1198:	90 91 8d 01 	lds	r25, 0x018D
    119c:	a0 91 8e 01 	lds	r26, 0x018E
    11a0:	b0 91 8f 01 	lds	r27, 0x018F
    11a4:	80 93 ad 01 	sts	0x01AD, r24
    11a8:	90 93 ae 01 	sts	0x01AE, r25
    11ac:	a0 93 af 01 	sts	0x01AF, r26
    11b0:	b0 93 b0 01 	sts	0x01B0, r27
			if (!x_puck && !y_puck) {
				//positioning_LED(BLUE);
			}
		}

		max_theta = M_PI;
    11b4:	8b ed       	ldi	r24, 0xDB	; 219
    11b6:	9f e0       	ldi	r25, 0x0F	; 15
    11b8:	a9 e4       	ldi	r26, 0x49	; 73
    11ba:	b0 e4       	ldi	r27, 0x40	; 64
    11bc:	80 93 16 01 	sts	0x0116, r24
    11c0:	90 93 17 01 	sts	0x0117, r25
    11c4:	a0 93 18 01 	sts	0x0118, r26
    11c8:	b0 93 19 01 	sts	0x0119, r27
		theta_kd = 0;
    11cc:	10 92 a9 01 	sts	0x01A9, r1
    11d0:	10 92 aa 01 	sts	0x01AA, r1
    11d4:	10 92 ab 01 	sts	0x01AB, r1
    11d8:	10 92 ac 01 	sts	0x01AC, r1
		theta_kp = 2.2;
    11dc:	8d ec       	ldi	r24, 0xCD	; 205
    11de:	9c ec       	ldi	r25, 0xCC	; 204
    11e0:	ac e0       	ldi	r26, 0x0C	; 12
    11e2:	b0 e4       	ldi	r27, 0x40	; 64
    11e4:	80 93 12 01 	sts	0x0112, r24
    11e8:	90 93 13 01 	sts	0x0113, r25
    11ec:	a0 93 14 01 	sts	0x0114, r26
    11f0:	b0 93 15 01 	sts	0x0115, r27
		max_duty_cycle = DUTY_CYCLE_SEEK;
    11f4:	83 e3       	ldi	r24, 0x33	; 51
    11f6:	93 e3       	ldi	r25, 0x33	; 51
    11f8:	a3 e3       	ldi	r26, 0x33	; 51
    11fa:	bf e3       	ldi	r27, 0x3F	; 63
    11fc:	80 93 1a 01 	sts	0x011A, r24
    1200:	90 93 1b 01 	sts	0x011B, r25
    1204:	a0 93 1c 01 	sts	0x011C, r26
    1208:	b0 93 1d 01 	sts	0x011D, r27
		m_green(ON);
    120c:	6a 9a       	sbi	0x0d, 2	; 13
    120e:	72 98       	cbi	0x0e, 2	; 14
		return;
	}
}
    1210:	2c 96       	adiw	r28, 0x0c	; 12
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	bf 90       	pop	r11
    122a:	af 90       	pop	r10
    122c:	9f 90       	pop	r9
    122e:	8f 90       	pop	r8
    1230:	7f 90       	pop	r7
    1232:	6f 90       	pop	r6
    1234:	5f 90       	pop	r5
    1236:	4f 90       	pop	r4
    1238:	08 95       	ret

0000123a <adc_update>:

/* Called on ADC Conversion Completion */
void adc_update(void)
{
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	28 97       	sbiw	r28, 0x08	; 8
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
	set(ADCSRA,ADIF);	 // Reset flag
    124e:	ea e7       	ldi	r30, 0x7A	; 122
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	80 61       	ori	r24, 0x10	; 16
    1256:	80 83       	st	Z, r24
	if(adc_switch()){
    1258:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <adc_switch>
    125c:	88 23       	and	r24, r24
    125e:	61 f1       	breq	.+88     	; 0x12b8 <adc_update+0x7e>
		float puck_buffer[2];
		puck_dist = get_puck_location(puck_buffer, self, x_goal);
    1260:	20 91 06 01 	lds	r18, 0x0106
    1264:	30 91 07 01 	lds	r19, 0x0107
    1268:	40 91 08 01 	lds	r20, 0x0108
    126c:	50 91 09 01 	lds	r21, 0x0109
    1270:	60 91 00 01 	lds	r22, 0x0100
    1274:	70 91 01 01 	lds	r23, 0x0101
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	0e 94 36 14 	call	0x286c	; 0x286c <get_puck_location>
    1280:	90 93 8b 01 	sts	0x018B, r25
    1284:	80 93 8a 01 	sts	0x018A, r24
		x_puck = puck_buffer[0];
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	ab 81       	ldd	r26, Y+3	; 0x03
    128e:	bc 81       	ldd	r27, Y+4	; 0x04
    1290:	80 93 90 01 	sts	0x0190, r24
    1294:	90 93 91 01 	sts	0x0191, r25
    1298:	a0 93 92 01 	sts	0x0192, r26
    129c:	b0 93 93 01 	sts	0x0193, r27
		y_puck = puck_buffer[1];
    12a0:	8d 81       	ldd	r24, Y+5	; 0x05
    12a2:	9e 81       	ldd	r25, Y+6	; 0x06
    12a4:	af 81       	ldd	r26, Y+7	; 0x07
    12a6:	b8 85       	ldd	r27, Y+8	; 0x08
    12a8:	80 93 8c 01 	sts	0x018C, r24
    12ac:	90 93 8d 01 	sts	0x018D, r25
    12b0:	a0 93 8e 01 	sts	0x018E, r26
    12b4:	b0 93 8f 01 	sts	0x018F, r27
	}
}
    12b8:	28 96       	adiw	r28, 0x08	; 8
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	08 95       	ret

000012ca <positioning_LED>:
	
}

void positioning_LED(int color)
{
	switch(color)
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	41 f0       	breq	.+16     	; 0x12e0 <positioning_LED+0x16>
    12d0:	82 30       	cpi	r24, 0x02	; 2
    12d2:	91 05       	cpc	r25, r1
    12d4:	41 f0       	breq	.+16     	; 0x12e6 <positioning_LED+0x1c>
    12d6:	89 2b       	or	r24, r25
    12d8:	41 f4       	brne	.+16     	; 0x12ea <positioning_LED+0x20>
	{ 
		case OFF:	//OFF
			clear(PORTD,3);
    12da:	5b 98       	cbi	0x0b, 3	; 11
			clear(PORTD,5);
    12dc:	5d 98       	cbi	0x0b, 5	; 11
			break;
    12de:	08 95       	ret
		
		case BLUE:	//BLUE
			set(PORTD,5);
    12e0:	5d 9a       	sbi	0x0b, 5	; 11
			clear(PORTD,3);
    12e2:	5b 98       	cbi	0x0b, 3	; 11
			break;
    12e4:	08 95       	ret
			
		case RED: //RED
			clear(PORTD,5);
    12e6:	5d 98       	cbi	0x0b, 5	; 11
			set(PORTD,3);
    12e8:	5b 9a       	sbi	0x0b, 3	; 11
    12ea:	08 95       	ret

000012ec <play>:
void play(void)
{
	/* Light LED of defending goal */
	
	/* Play */
	set(TCCR1B,CS10);
    12ec:	e1 e8       	ldi	r30, 0x81	; 129
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	81 60       	ori	r24, 0x01	; 1
    12f4:	80 83       	st	Z, r24
	positioning_LED(goal);
    12f6:	80 91 96 01 	lds	r24, 0x0196
    12fa:	90 91 97 01 	lds	r25, 0x0197
    12fe:	0e 94 65 09 	call	0x12ca	; 0x12ca <positioning_LED>
    1302:	08 95       	ret

00001304 <pause>:
}

void pause(void)
{
	/* Stop within 3  seconds */
	clear(TCCR1B,CS10);
    1304:	e1 e8       	ldi	r30, 0x81	; 129
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8e 7f       	andi	r24, 0xFE	; 254
    130c:	80 83       	st	Z, r24
	clear(PORTB,0); // B0 Left motor off
    130e:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,2); // B2 Right motor off
    1310:	2a 98       	cbi	0x05, 2	; 5
	positioning_LED(OFF);
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 65 09 	call	0x12ca	; 0x12ca <positioning_LED>
    131a:	08 95       	ret

0000131c <halftime>:
}

void halftime(void)
{
	/* Stop play */
	pause();
    131c:	0e 94 82 09 	call	0x1304	; 0x1304 <pause>
	
	/* Switch assigned goal */
	if (x_goal>0) {
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	60 91 06 01 	lds	r22, 0x0106
    132a:	70 91 07 01 	lds	r23, 0x0107
    132e:	80 91 08 01 	lds	r24, 0x0108
    1332:	90 91 09 01 	lds	r25, 0x0109
    1336:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__gesf2>
    133a:	18 16       	cp	r1, r24
    133c:	6c f4       	brge	.+26     	; 0x1358 <halftime+0x3c>
		x_goal = -1*GOAL_X_DIST;
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a8 ec       	ldi	r26, 0xC8	; 200
    1344:	b3 ec       	ldi	r27, 0xC3	; 195
    1346:	80 93 06 01 	sts	0x0106, r24
    134a:	90 93 07 01 	sts	0x0107, r25
    134e:	a0 93 08 01 	sts	0x0108, r26
    1352:	b0 93 09 01 	sts	0x0109, r27
    1356:	08 95       	ret
		} else {
		x_goal = GOAL_X_DIST;
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a8 ec       	ldi	r26, 0xC8	; 200
    135e:	b3 e4       	ldi	r27, 0x43	; 67
    1360:	80 93 06 01 	sts	0x0106, r24
    1364:	90 93 07 01 	sts	0x0107, r25
    1368:	a0 93 08 01 	sts	0x0108, r26
    136c:	b0 93 09 01 	sts	0x0109, r27
    1370:	08 95       	ret

00001372 <select_goal>:
			break;
	}
}

void select_goal(void) 
{
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	2c 97       	sbiw	r28, 0x0c	; 12
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
	/* Assign Defending goal */
	update_position();
    1386:	0e 94 6d 0b 	call	0x16da	; 0x16da <update_position>
	
	float position_buffer[3];
	get_position(position_buffer);
    138a:	ce 01       	movw	r24, r28
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	0e 94 06 0b 	call	0x160c	; 0x160c <get_position>
	m_usb_tx_int((int)position_buffer[0]);
    1392:	69 81       	ldd	r22, Y+1	; 0x01
    1394:	7a 81       	ldd	r23, Y+2	; 0x02
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	0e 94 65 19 	call	0x32ca	; 0x32ca <__fixsfsi>
    139e:	cb 01       	movw	r24, r22
    13a0:	0e 94 17 12 	call	0x242e	; 0x242e <m_usb_tx_int>
	
	if (position_buffer[0]>0) {
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	a9 01       	movw	r20, r18
    13aa:	69 81       	ldd	r22, Y+1	; 0x01
    13ac:	7a 81       	ldd	r23, Y+2	; 0x02
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__gesf2>
    13b6:	18 16       	cp	r1, r24
    13b8:	9c f4       	brge	.+38     	; 0x13e0 <select_goal+0x6e>
		x_goal = -1*GOAL_X_DIST;
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a8 ec       	ldi	r26, 0xC8	; 200
    13c0:	b3 ec       	ldi	r27, 0xC3	; 195
    13c2:	80 93 06 01 	sts	0x0106, r24
    13c6:	90 93 07 01 	sts	0x0107, r25
    13ca:	a0 93 08 01 	sts	0x0108, r26
    13ce:	b0 93 09 01 	sts	0x0109, r27
		goal = BLUE;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	90 93 97 01 	sts	0x0197, r25
    13da:	80 93 96 01 	sts	0x0196, r24
    13de:	12 c0       	rjmp	.+36     	; 0x1404 <select_goal+0x92>
		//positioning_LED(RED);
		} else {
		x_goal = GOAL_X_DIST;
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a8 ec       	ldi	r26, 0xC8	; 200
    13e6:	b3 e4       	ldi	r27, 0x43	; 67
    13e8:	80 93 06 01 	sts	0x0106, r24
    13ec:	90 93 07 01 	sts	0x0107, r25
    13f0:	a0 93 08 01 	sts	0x0108, r26
    13f4:	b0 93 09 01 	sts	0x0109, r27
		goal = RED;
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	90 93 97 01 	sts	0x0197, r25
    1400:	80 93 96 01 	sts	0x0196, r24
		//positioning_LED(BLUE);
	}
	
	goal_init = 1;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	90 93 95 01 	sts	0x0195, r25
    140c:	80 93 94 01 	sts	0x0194, r24
}
    1410:	2c 96       	adiw	r28, 0x0c	; 12
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <comm_test>:
	}
}

void comm_test(void)
{
	if (!goal_init){
    1422:	80 91 94 01 	lds	r24, 0x0194
    1426:	90 91 95 01 	lds	r25, 0x0195
    142a:	89 2b       	or	r24, r25
    142c:	11 f4       	brne	.+4      	; 0x1432 <comm_test+0x10>
		select_goal();
    142e:	0e 94 b9 09 	call	0x1372	; 0x1372 <select_goal>
	}
	/* Flash color of LED for defending goal */
	set(TCCR0B,CS02); //start timer 
    1432:	85 b5       	in	r24, 0x25	; 37
    1434:	84 60       	ori	r24, 0x04	; 4
    1436:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS00);
    1438:	85 b5       	in	r24, 0x25	; 37
    143a:	81 60       	ori	r24, 0x01	; 1
    143c:	85 bd       	out	0x25, r24	; 37
	positioning_LED(goal); //turn on LED 
    143e:	80 91 96 01 	lds	r24, 0x0196
    1442:	90 91 97 01 	lds	r25, 0x0197
    1446:	0e 94 65 09 	call	0x12ca	; 0x12ca <positioning_LED>
    144a:	08 95       	ret

0000144c <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
    144c:	e0 91 9e 01 	lds	r30, 0x019E
    1450:	8e 2f       	mov	r24, r30
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	fc 01       	movw	r30, r24
    1456:	e0 5a       	subi	r30, 0xA0	; 160
    1458:	f1 09       	sbc	r31, r1
    145a:	e8 30       	cpi	r30, 0x08	; 8
    145c:	f1 05       	cpc	r31, r1
    145e:	40 f5       	brcc	.+80     	; 0x14b0 <update_game_state+0x64>
    1460:	ea 5a       	subi	r30, 0xAA	; 170
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	0c 94 a8 1b 	jmp	0x3750	; 0x3750 <__tablejump2__>
		case 0xA0: // Comm Test
		comm_test();
    1468:	0e 94 11 0a 	call	0x1422	; 0x1422 <comm_test>
		break;
    146c:	08 95       	ret
		case 0xA1: // Play
		play();
    146e:	0e 94 76 09 	call	0x12ec	; 0x12ec <play>
		break;
    1472:	08 95       	ret
		case 0xA2: // Goal R
		SR = buffer[1];
    1474:	ef e9       	ldi	r30, 0x9F	; 159
    1476:	f1 e0       	ldi	r31, 0x01	; 1
    1478:	81 81       	ldd	r24, Z+1	; 0x01
    147a:	80 93 9d 01 	sts	0x019D, r24
		SB = buffer[2];
    147e:	82 81       	ldd	r24, Z+2	; 0x02
    1480:	80 93 9c 01 	sts	0x019C, r24
		pause();
    1484:	0e 94 82 09 	call	0x1304	; 0x1304 <pause>
		break;
    1488:	08 95       	ret
		case 0xA3: // Goal B
		SR = buffer[1];
    148a:	ef e9       	ldi	r30, 0x9F	; 159
    148c:	f1 e0       	ldi	r31, 0x01	; 1
    148e:	81 81       	ldd	r24, Z+1	; 0x01
    1490:	80 93 9d 01 	sts	0x019D, r24
		SB = buffer[2];
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	80 93 9c 01 	sts	0x019C, r24
		pause();
    149a:	0e 94 82 09 	call	0x1304	; 0x1304 <pause>
		break;
    149e:	08 95       	ret
		case 0xA4: // Pause
		pause();
    14a0:	0e 94 82 09 	call	0x1304	; 0x1304 <pause>
		break;
    14a4:	08 95       	ret
		case 0xA6: // Halftime
		halftime();
    14a6:	0e 94 8e 09 	call	0x131c	; 0x131c <halftime>
		break;
    14aa:	08 95       	ret
}

void game_over(void)
{
	// Stop play
	pause();
    14ac:	0e 94 82 09 	call	0x1304	; 0x1304 <pause>
    14b0:	08 95       	ret

000014b2 <wireless_recieve>:
}

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    14b2:	6a e0       	ldi	r22, 0x0A	; 10
    14b4:	8f e9       	ldi	r24, 0x9F	; 159
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <m_rf_read>
	game_state = buffer[0];
    14bc:	80 91 9f 01 	lds	r24, 0x019F
    14c0:	80 93 9e 01 	sts	0x019E, r24
	update_game_state();
    14c4:	0e 94 26 0a 	call	0x144c	; 0x144c <update_game_state>
    14c8:	08 95       	ret

000014ca <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
    14ca:	6e 9a       	sbi	0x0d, 6	; 13
    14cc:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey(self);
    14ce:	80 91 00 01 	lds	r24, 0x0100
    14d2:	90 91 01 01 	lds	r25, 0x0101
    14d6:	0e 94 09 01 	call	0x212	; 0x212 <initialize_robockey>
	pause();
    14da:	0e 94 82 09 	call	0x1304	; 0x1304 <pause>

	
	/* Confirm successful initialization(s) */
	m_green(ON);
    14de:	6a 9a       	sbi	0x0d, 2	; 13
    14e0:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    14e2:	ca e7       	ldi	r28, 0x7A	; 122
    14e4:	d0 e0       	ldi	r29, 0x00	; 0
		bot_behavior_update();
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
		if (wifi_flag) {
			wifi_flag = 0;
			m_red(TOGGLE);
    14e6:	10 e4       	ldi	r17, 0x40	; 64
	/* Confirm successful initialization(s) */
	m_green(ON);

	/* Run */
	while (1){
		update_position();
    14e8:	0e 94 6d 0b 	call	0x16da	; 0x16da <update_position>
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    14ec:	88 81       	ld	r24, Y
    14ee:	84 fd       	sbrc	r24, 4
    14f0:	0e 94 1d 09 	call	0x123a	; 0x123a <adc_update>
		bot_behavior_update();
    14f4:	0e 94 c0 07 	call	0xf80	; 0xf80 <bot_behavior_update>
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
    14f8:	c1 99       	sbic	0x18, 1	; 24
    14fa:	0e 94 54 07 	call	0xea8	; 0xea8 <motor_update>
		if (wifi_flag) {
    14fe:	80 91 9a 01 	lds	r24, 0x019A
    1502:	90 91 9b 01 	lds	r25, 0x019B
    1506:	89 2b       	or	r24, r25
    1508:	79 f3       	breq	.-34     	; 0x14e8 <main+0x1e>
			wifi_flag = 0;
    150a:	10 92 9b 01 	sts	0x019B, r1
    150e:	10 92 9a 01 	sts	0x019A, r1
			m_red(TOGGLE);
    1512:	6e 9a       	sbi	0x0d, 6	; 13
    1514:	8e b1       	in	r24, 0x0e	; 14
    1516:	81 27       	eor	r24, r17
    1518:	8e b9       	out	0x0e, r24	; 14
			wireless_recieve();
    151a:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <wireless_recieve>
    151e:	e4 cf       	rjmp	.-56     	; 0x14e8 <main+0x1e>

00001520 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    1520:	1f 92       	push	r1
    1522:	0f 92       	push	r0
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	0f 92       	push	r0
    1528:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    152a:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
    152c:	2a 9a       	sbi	0x05, 2	; 5
}
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	0f 90       	pop	r0
    1534:	1f 90       	pop	r1
    1536:	18 95       	reti

00001538 <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    1538:	1f 92       	push	r1
    153a:	0f 92       	push	r0
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	0f 92       	push	r0
    1540:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    1542:	28 98       	cbi	0x05, 0	; 5
}
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    154e:	1f 92       	push	r1
    1550:	0f 92       	push	r0
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	0f 92       	push	r0
    1556:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    1558:	2a 98       	cbi	0x05, 2	; 5
}
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	0f 90       	pop	r0
    1560:	1f 90       	pop	r1
    1562:	18 95       	reti

00001564 <__vector_3>:


/* Recieve Wireless Comm */
ISR(INT2_vect){
    1564:	1f 92       	push	r1
    1566:	0f 92       	push	r0
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	0f 92       	push	r0
    156c:	11 24       	eor	r1, r1
    156e:	8f 93       	push	r24
    1570:	9f 93       	push	r25
	wifi_flag = 1;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	90 93 9b 01 	sts	0x019B, r25
    157a:	80 93 9a 01 	sts	0x019A, r24
}
    157e:	9f 91       	pop	r25
    1580:	8f 91       	pop	r24
    1582:	0f 90       	pop	r0
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	0f 90       	pop	r0
    1588:	1f 90       	pop	r1
    158a:	18 95       	reti

0000158c <__vector_23>:

ISR(TIMER0_OVF_vect){
    158c:	1f 92       	push	r1
    158e:	0f 92       	push	r0
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	0f 92       	push	r0
    1594:	11 24       	eor	r1, r1
    1596:	2f 93       	push	r18
    1598:	3f 93       	push	r19
    159a:	4f 93       	push	r20
    159c:	5f 93       	push	r21
    159e:	6f 93       	push	r22
    15a0:	7f 93       	push	r23
    15a2:	8f 93       	push	r24
    15a4:	9f 93       	push	r25
    15a6:	af 93       	push	r26
    15a8:	bf 93       	push	r27
    15aa:	ef 93       	push	r30
    15ac:	ff 93       	push	r31
	
	if (tim0_counts < 20) {
    15ae:	80 91 98 01 	lds	r24, 0x0198
    15b2:	90 91 99 01 	lds	r25, 0x0199
    15b6:	84 31       	cpi	r24, 0x14	; 20
    15b8:	91 05       	cpc	r25, r1
    15ba:	34 f4       	brge	.+12     	; 0x15c8 <__vector_23+0x3c>
		tim0_counts++; //increment timer counter
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	90 93 99 01 	sts	0x0199, r25
    15c2:	80 93 98 01 	sts	0x0198, r24
    15c6:	11 c0       	rjmp	.+34     	; 0x15ea <__vector_23+0x5e>
		
	} else {
		if (game_state != 0xA1)
    15c8:	80 91 9e 01 	lds	r24, 0x019E
    15cc:	81 3a       	cpi	r24, 0xA1	; 161
    15ce:	21 f0       	breq	.+8      	; 0x15d8 <__vector_23+0x4c>
		{
			positioning_LED(OFF); //turn LED off
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 65 09 	call	0x12ca	; 0x12ca <positioning_LED>
		}
		
		clear(TCCR0B,CS02); //turn timer off
    15d8:	85 b5       	in	r24, 0x25	; 37
    15da:	8b 7f       	andi	r24, 0xFB	; 251
    15dc:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS01);
    15de:	85 b5       	in	r24, 0x25	; 37
    15e0:	8d 7f       	andi	r24, 0xFD	; 253
    15e2:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS00);
    15e4:	85 b5       	in	r24, 0x25	; 37
    15e6:	8e 7f       	andi	r24, 0xFE	; 254
    15e8:	85 bd       	out	0x25, r24	; 37
	}
}
    15ea:	ff 91       	pop	r31
    15ec:	ef 91       	pop	r30
    15ee:	bf 91       	pop	r27
    15f0:	af 91       	pop	r26
    15f2:	9f 91       	pop	r25
    15f4:	8f 91       	pop	r24
    15f6:	7f 91       	pop	r23
    15f8:	6f 91       	pop	r22
    15fa:	5f 91       	pop	r21
    15fc:	4f 91       	pop	r20
    15fe:	3f 91       	pop	r19
    1600:	2f 91       	pop	r18
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	0f 90       	pop	r0
    1608:	1f 90       	pop	r1
    160a:	18 95       	reti

0000160c <get_position>:
/************************************************************
Public Functions
************************************************************/

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    160c:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    160e:	80 91 c5 01 	lds	r24, 0x01C5
    1612:	90 91 c6 01 	lds	r25, 0x01C6
    1616:	a0 91 c7 01 	lds	r26, 0x01C7
    161a:	b0 91 c8 01 	lds	r27, 0x01C8
    161e:	80 83       	st	Z, r24
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	a2 83       	std	Z+2, r26	; 0x02
    1624:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    1626:	80 91 c1 01 	lds	r24, 0x01C1
    162a:	90 91 c2 01 	lds	r25, 0x01C2
    162e:	a0 91 c3 01 	lds	r26, 0x01C3
    1632:	b0 91 c4 01 	lds	r27, 0x01C4
    1636:	84 83       	std	Z+4, r24	; 0x04
    1638:	95 83       	std	Z+5, r25	; 0x05
    163a:	a6 83       	std	Z+6, r26	; 0x06
    163c:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    163e:	80 91 bd 01 	lds	r24, 0x01BD
    1642:	90 91 be 01 	lds	r25, 0x01BE
    1646:	a0 91 bf 01 	lds	r26, 0x01BF
    164a:	b0 91 c0 01 	lds	r27, 0x01C0
    164e:	80 87       	std	Z+8, r24	; 0x08
    1650:	91 87       	std	Z+9, r25	; 0x09
    1652:	a2 87       	std	Z+10, r26	; 0x0a
    1654:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	08 95       	ret

0000165a <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    165a:	8f 92       	push	r8
    165c:	9f 92       	push	r9
    165e:	af 92       	push	r10
    1660:	bf 92       	push	r11
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	6b 01       	movw	r12, r22
    166c:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    166e:	4b 01       	movw	r8, r22
    1670:	5c 01       	movw	r10, r24
    1672:	e8 94       	clt
    1674:	b7 f8       	bld	r11, 7
    1676:	2b ed       	ldi	r18, 0xDB	; 219
    1678:	3f e0       	ldi	r19, 0x0F	; 15
    167a:	49 e4       	ldi	r20, 0x49	; 73
    167c:	50 e4       	ldi	r21, 0x40	; 64
    167e:	c5 01       	movw	r24, r10
    1680:	b4 01       	movw	r22, r8
    1682:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__gesf2>
    1686:	18 16       	cp	r1, r24
    1688:	bc f4       	brge	.+46     	; 0x16b8 <theta_error_correction+0x5e>
    168a:	2b ed       	ldi	r18, 0xDB	; 219
    168c:	3f e0       	ldi	r19, 0x0F	; 15
    168e:	49 ec       	ldi	r20, 0xC9	; 201
    1690:	50 e4       	ldi	r21, 0x40	; 64
    1692:	c7 01       	movw	r24, r14
    1694:	b6 01       	movw	r22, r12
    1696:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    169a:	a5 01       	movw	r20, r10
    169c:	94 01       	movw	r18, r8
    169e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divsf3>
    16a2:	9b 01       	movw	r18, r22
    16a4:	ac 01       	movw	r20, r24
    16a6:	c7 01       	movw	r24, r14
    16a8:	b6 01       	movw	r22, r12
    16aa:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    16ae:	56 2f       	mov	r21, r22
    16b0:	47 2f       	mov	r20, r23
    16b2:	38 2f       	mov	r19, r24
    16b4:	29 2f       	mov	r18, r25
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <theta_error_correction+0x66>
	else{return error;}
    16b8:	5c 2d       	mov	r21, r12
    16ba:	4d 2d       	mov	r20, r13
    16bc:	3e 2d       	mov	r19, r14
    16be:	2f 2d       	mov	r18, r15
}
    16c0:	65 2f       	mov	r22, r21
    16c2:	74 2f       	mov	r23, r20
    16c4:	83 2f       	mov	r24, r19
    16c6:	92 2f       	mov	r25, r18
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	df 90       	pop	r13
    16ce:	cf 90       	pop	r12
    16d0:	bf 90       	pop	r11
    16d2:	af 90       	pop	r10
    16d4:	9f 90       	pop	r9
    16d6:	8f 90       	pop	r8
    16d8:	08 95       	ret

000016da <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    16da:	2f 92       	push	r2
    16dc:	3f 92       	push	r3
    16de:	4f 92       	push	r4
    16e0:	5f 92       	push	r5
    16e2:	6f 92       	push	r6
    16e4:	7f 92       	push	r7
    16e6:	8f 92       	push	r8
    16e8:	9f 92       	push	r9
    16ea:	af 92       	push	r10
    16ec:	bf 92       	push	r11
    16ee:	cf 92       	push	r12
    16f0:	df 92       	push	r13
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	a8 97       	sbiw	r28, 0x28	; 40
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    170e:	ce 01       	movw	r24, r28
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	0e 94 a3 13 	call	0x2746	; 0x2746 <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    1716:	6b 81       	ldd	r22, Y+3	; 0x03
    1718:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    171a:	0f 81       	ldd	r16, Y+7	; 0x07
    171c:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    171e:	49 85       	ldd	r20, Y+9	; 0x09
    1720:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    1722:	ad 85       	ldd	r26, Y+13	; 0x0d
    1724:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    1726:	2f 85       	ldd	r18, Y+15	; 0x0f
    1728:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    172a:	eb 89       	ldd	r30, Y+19	; 0x13
    172c:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    172e:	8d 89       	ldd	r24, Y+21	; 0x15
    1730:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    1732:	e9 80       	ldd	r14, Y+1	; 0x01
    1734:	fa 80       	ldd	r15, Y+2	; 0x02
    1736:	fa 8e       	std	Y+26, r15	; 0x1a
    1738:	e9 8e       	std	Y+25, r14	; 0x19
    173a:	1c 8f       	std	Y+28, r17	; 0x1c
    173c:	0b 8f       	std	Y+27, r16	; 0x1b
    173e:	be 8f       	std	Y+30, r27	; 0x1e
    1740:	ad 8f       	std	Y+29, r26	; 0x1d
    1742:	f8 a3       	std	Y+32, r31	; 0x20
    1744:	ef 8f       	std	Y+31, r30	; 0x1f
    1746:	7a a3       	std	Y+34, r23	; 0x22
    1748:	69 a3       	std	Y+33, r22	; 0x21
    174a:	5c a3       	std	Y+36, r21	; 0x24
    174c:	4b a3       	std	Y+35, r20	; 0x23
    174e:	3e a3       	std	Y+38, r19	; 0x26
    1750:	2d a3       	std	Y+37, r18	; 0x25
    1752:	98 a7       	std	Y+40, r25	; 0x28
    1754:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    1756:	66 e2       	ldi	r22, 0x26	; 38
    1758:	71 e0       	ldi	r23, 0x01	; 1
    175a:	ce 01       	movw	r24, r28
    175c:	49 96       	adiw	r24, 0x19	; 25
    175e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <localization_calc>
    1762:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    1764:	fc 01       	movw	r30, r24
    1766:	80 85       	ldd	r24, Z+8	; 0x08
    1768:	91 85       	ldd	r25, Z+9	; 0x09
    176a:	a2 85       	ldd	r26, Z+10	; 0x0a
    176c:	b3 85       	ldd	r27, Z+11	; 0x0b
    176e:	0f 2e       	mov	r0, r31
    1770:	f6 e2       	ldi	r31, 0x26	; 38
    1772:	2f 2e       	mov	r2, r31
    1774:	f1 e0       	ldi	r31, 0x01	; 1
    1776:	3f 2e       	mov	r3, r31
    1778:	f0 2d       	mov	r31, r0
    177a:	f1 01       	movw	r30, r2
    177c:	80 87       	std	Z+8, r24	; 0x08
    177e:	91 87       	std	Z+9, r25	; 0x09
    1780:	a2 87       	std	Z+10, r26	; 0x0a
    1782:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    1784:	f8 01       	movw	r30, r16
    1786:	60 85       	ldd	r22, Z+8	; 0x08
    1788:	71 85       	ldd	r23, Z+9	; 0x09
    178a:	82 85       	ldd	r24, Z+10	; 0x0a
    178c:	93 85       	ldd	r25, Z+11	; 0x0b
    178e:	0e 94 2d 0b 	call	0x165a	; 0x165a <theta_error_correction>
    1792:	2b 01       	movw	r4, r22
    1794:	3c 01       	movw	r6, r24
    1796:	f8 01       	movw	r30, r16
    1798:	60 87       	std	Z+8, r22	; 0x08
    179a:	71 87       	std	Z+9, r23	; 0x09
    179c:	82 87       	std	Z+10, r24	; 0x0a
    179e:	93 87       	std	Z+11, r25	; 0x0b
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    17a0:	24 ea       	ldi	r18, 0xA4	; 164
    17a2:	30 e7       	ldi	r19, 0x70	; 112
    17a4:	4d e7       	ldi	r20, 0x7D	; 125
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	60 81       	ld	r22, Z
    17aa:	71 81       	ldd	r23, Z+1	; 0x01
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	93 81       	ldd	r25, Z+3	; 0x03
    17b0:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    17b4:	4b 01       	movw	r8, r22
    17b6:	5c 01       	movw	r10, r24
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	37 ed       	ldi	r19, 0xD7	; 215
    17bc:	43 e2       	ldi	r20, 0x23	; 35
    17be:	5c e3       	ldi	r21, 0x3C	; 60
    17c0:	60 91 c5 01 	lds	r22, 0x01C5
    17c4:	70 91 c6 01 	lds	r23, 0x01C6
    17c8:	80 91 c7 01 	lds	r24, 0x01C7
    17cc:	90 91 c8 01 	lds	r25, 0x01C8
    17d0:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    17d4:	9b 01       	movw	r18, r22
    17d6:	ac 01       	movw	r20, r24
    17d8:	c5 01       	movw	r24, r10
    17da:	b4 01       	movw	r22, r8
    17dc:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
    17e0:	4b 01       	movw	r8, r22
    17e2:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    17e4:	60 93 c5 01 	sts	0x01C5, r22
    17e8:	70 93 c6 01 	sts	0x01C6, r23
    17ec:	80 93 c7 01 	sts	0x01C7, r24
    17f0:	90 93 c8 01 	sts	0x01C8, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    17f4:	24 ea       	ldi	r18, 0xA4	; 164
    17f6:	30 e7       	ldi	r19, 0x70	; 112
    17f8:	4d e7       	ldi	r20, 0x7D	; 125
    17fa:	5f e3       	ldi	r21, 0x3F	; 63
    17fc:	f8 01       	movw	r30, r16
    17fe:	64 81       	ldd	r22, Z+4	; 0x04
    1800:	75 81       	ldd	r23, Z+5	; 0x05
    1802:	86 81       	ldd	r24, Z+6	; 0x06
    1804:	97 81       	ldd	r25, Z+7	; 0x07
    1806:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    180a:	6b 01       	movw	r12, r22
    180c:	7c 01       	movw	r14, r24
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	37 ed       	ldi	r19, 0xD7	; 215
    1812:	43 e2       	ldi	r20, 0x23	; 35
    1814:	5c e3       	ldi	r21, 0x3C	; 60
    1816:	60 91 c1 01 	lds	r22, 0x01C1
    181a:	70 91 c2 01 	lds	r23, 0x01C2
    181e:	80 91 c3 01 	lds	r24, 0x01C3
    1822:	90 91 c4 01 	lds	r25, 0x01C4
    1826:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    182a:	9b 01       	movw	r18, r22
    182c:	ac 01       	movw	r20, r24
    182e:	c7 01       	movw	r24, r14
    1830:	b6 01       	movw	r22, r12
    1832:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
    1836:	6b 01       	movw	r12, r22
    1838:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    183a:	60 93 c1 01 	sts	0x01C1, r22
    183e:	70 93 c2 01 	sts	0x01C2, r23
    1842:	80 93 c3 01 	sts	0x01C3, r24
    1846:	90 93 c4 01 	sts	0x01C4, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    184a:	24 ea       	ldi	r18, 0xA4	; 164
    184c:	30 e7       	ldi	r19, 0x70	; 112
    184e:	4d e7       	ldi	r20, 0x7D	; 125
    1850:	5f e3       	ldi	r21, 0x3F	; 63
    1852:	c3 01       	movw	r24, r6
    1854:	b2 01       	movw	r22, r4
    1856:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    185a:	2b 01       	movw	r4, r22
    185c:	3c 01       	movw	r6, r24
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	37 ed       	ldi	r19, 0xD7	; 215
    1862:	43 e2       	ldi	r20, 0x23	; 35
    1864:	5c e3       	ldi	r21, 0x3C	; 60
    1866:	60 91 bd 01 	lds	r22, 0x01BD
    186a:	70 91 be 01 	lds	r23, 0x01BE
    186e:	80 91 bf 01 	lds	r24, 0x01BF
    1872:	90 91 c0 01 	lds	r25, 0x01C0
    1876:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    187a:	9b 01       	movw	r18, r22
    187c:	ac 01       	movw	r20, r24
    187e:	c3 01       	movw	r24, r6
    1880:	b2 01       	movw	r22, r4
    1882:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    1886:	60 93 bd 01 	sts	0x01BD, r22
    188a:	70 93 be 01 	sts	0x01BE, r23
    188e:	80 93 bf 01 	sts	0x01BF, r24
    1892:	90 93 c0 01 	sts	0x01C0, r25
	
	robotCenterPrev[0] = x;
    1896:	f1 01       	movw	r30, r2
    1898:	80 82       	st	Z, r8
    189a:	91 82       	std	Z+1, r9	; 0x01
    189c:	a2 82       	std	Z+2, r10	; 0x02
    189e:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    18a0:	c4 82       	std	Z+4, r12	; 0x04
    18a2:	d5 82       	std	Z+5, r13	; 0x05
    18a4:	e6 82       	std	Z+6, r14	; 0x06
    18a6:	f7 82       	std	Z+7, r15	; 0x07
}
    18a8:	a8 96       	adiw	r28, 0x28	; 40
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	df 90       	pop	r13
    18c2:	cf 90       	pop	r12
    18c4:	bf 90       	pop	r11
    18c6:	af 90       	pop	r10
    18c8:	9f 90       	pop	r9
    18ca:	8f 90       	pop	r8
    18cc:	7f 90       	pop	r7
    18ce:	6f 90       	pop	r6
    18d0:	5f 90       	pop	r5
    18d2:	4f 90       	pop	r4
    18d4:	3f 90       	pop	r3
    18d6:	2f 90       	pop	r2
    18d8:	08 95       	ret

000018da <run_motor_control_loop>:



/* PID Control */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd)
{
    18da:	4f 92       	push	r4
    18dc:	5f 92       	push	r5
    18de:	6f 92       	push	r6
    18e0:	7f 92       	push	r7
    18e2:	8f 92       	push	r8
    18e4:	9f 92       	push	r9
    18e6:	af 92       	push	r10
    18e8:	bf 92       	push	r11
    18ea:	cf 92       	push	r12
    18ec:	df 92       	push	r13
    18ee:	ef 92       	push	r14
    18f0:	ff 92       	push	r15
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	68 97       	sbiw	r28, 0x18	; 24
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	29 01       	movw	r4, r18
    190c:	3a 01       	movw	r6, r20
    190e:	e9 8a       	std	Y+17, r14	; 0x11
    1910:	fa 8a       	std	Y+18, r15	; 0x12
    1912:	0b 8b       	std	Y+19, r16	; 0x13
    1914:	1c 8b       	std	Y+20, r17	; 0x14
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    1916:	20 91 c5 01 	lds	r18, 0x01C5
    191a:	30 91 c6 01 	lds	r19, 0x01C6
    191e:	40 91 c7 01 	lds	r20, 0x01C7
    1922:	50 91 c8 01 	lds	r21, 0x01C8
    1926:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    192a:	6d 83       	std	Y+5, r22	; 0x05
    192c:	7e 83       	std	Y+6, r23	; 0x06
    192e:	8f 83       	std	Y+7, r24	; 0x07
    1930:	98 87       	std	Y+8, r25	; 0x08
    1932:	20 91 c1 01 	lds	r18, 0x01C1
    1936:	30 91 c2 01 	lds	r19, 0x01C2
    193a:	40 91 c3 01 	lds	r20, 0x01C3
    193e:	50 91 c4 01 	lds	r21, 0x01C4
    1942:	c3 01       	movw	r24, r6
    1944:	b2 01       	movw	r22, r4
    1946:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    194a:	69 87       	std	Y+9, r22	; 0x09
    194c:	7a 87       	std	Y+10, r23	; 0x0a
    194e:	8b 87       	std	Y+11, r24	; 0x0b
    1950:	9c 87       	std	Y+12, r25	; 0x0c
    1952:	2d 81       	ldd	r18, Y+5	; 0x05
    1954:	3e 81       	ldd	r19, Y+6	; 0x06
    1956:	4f 81       	ldd	r20, Y+7	; 0x07
    1958:	58 85       	ldd	r21, Y+8	; 0x08
    195a:	0e 94 8a 18 	call	0x3114	; 0x3114 <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    195e:	20 91 bd 01 	lds	r18, 0x01BD
    1962:	30 91 be 01 	lds	r19, 0x01BE
    1966:	40 91 bf 01 	lds	r20, 0x01BF
    196a:	50 91 c0 01 	lds	r21, 0x01C0
    196e:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
	theta_error = theta_error_correction(theta_error);
    1972:	0e 94 2d 0b 	call	0x165a	; 0x165a <theta_error_correction>
    1976:	69 83       	std	Y+1, r22	; 0x01
    1978:	7a 83       	std	Y+2, r23	; 0x02
    197a:	8b 83       	std	Y+3, r24	; 0x03
    197c:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    197e:	2b 01       	movw	r4, r22
    1980:	3c 01       	movw	r6, r24
    1982:	e8 94       	clt
    1984:	77 f8       	bld	r7, 7
    1986:	a6 01       	movw	r20, r12
    1988:	95 01       	movw	r18, r10
    198a:	c3 01       	movw	r24, r6
    198c:	b2 01       	movw	r22, r4
    198e:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__gesf2>
    1992:	18 16       	cp	r1, r24
    1994:	84 f4       	brge	.+32     	; 0x19b6 <run_motor_control_loop+0xdc>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    1996:	29 81       	ldd	r18, Y+1	; 0x01
    1998:	3a 81       	ldd	r19, Y+2	; 0x02
    199a:	4b 81       	ldd	r20, Y+3	; 0x03
    199c:	5c 81       	ldd	r21, Y+4	; 0x04
    199e:	c3 01       	movw	r24, r6
    19a0:	b2 01       	movw	r22, r4
    19a2:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divsf3>
    19a6:	a6 01       	movw	r20, r12
    19a8:	95 01       	movw	r18, r10
    19aa:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    19ae:	69 83       	std	Y+1, r22	; 0x01
    19b0:	7a 83       	std	Y+2, r23	; 0x02
    19b2:	8b 83       	std	Y+3, r24	; 0x03
    19b4:	9c 83       	std	Y+4, r25	; 0x04
	}

	float angular_derivative = (theta_error-previous_theta_error)/TIMESTEP;
    19b6:	20 91 b9 01 	lds	r18, 0x01B9
    19ba:	30 91 ba 01 	lds	r19, 0x01BA
    19be:	40 91 bb 01 	lds	r20, 0x01BB
    19c2:	50 91 bc 01 	lds	r21, 0x01BC
    19c6:	69 81       	ldd	r22, Y+1	; 0x01
    19c8:	7a 81       	ldd	r23, Y+2	; 0x02
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    19d2:	2f e6       	ldi	r18, 0x6F	; 111
    19d4:	32 e1       	ldi	r19, 0x12	; 18
    19d6:	43 e8       	ldi	r20, 0x83	; 131
    19d8:	5a e3       	ldi	r21, 0x3A	; 58
    19da:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divsf3>
    19de:	6d 8b       	std	Y+21, r22	; 0x15
    19e0:	7e 8b       	std	Y+22, r23	; 0x16
    19e2:	8f 8b       	std	Y+23, r24	; 0x17
    19e4:	98 8f       	std	Y+24, r25	; 0x18
	float angular_output = theta_kp*theta_error - theta_kd*angular_derivative; //If output > 0, turn left
    19e6:	29 81       	ldd	r18, Y+1	; 0x01
    19e8:	3a 81       	ldd	r19, Y+2	; 0x02
    19ea:	4b 81       	ldd	r20, Y+3	; 0x03
    19ec:	5c 81       	ldd	r21, Y+4	; 0x04
    19ee:	6b a5       	ldd	r22, Y+43	; 0x2b
    19f0:	7c a5       	ldd	r23, Y+44	; 0x2c
    19f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    19f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    19f6:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    19fa:	6b 01       	movw	r12, r22
    19fc:	7c 01       	movw	r14, r24
    19fe:	2d 89       	ldd	r18, Y+21	; 0x15
    1a00:	3e 89       	ldd	r19, Y+22	; 0x16
    1a02:	4f 89       	ldd	r20, Y+23	; 0x17
    1a04:	58 8d       	ldd	r21, Y+24	; 0x18
    1a06:	6f a5       	ldd	r22, Y+47	; 0x2f
    1a08:	78 a9       	ldd	r23, Y+48	; 0x30
    1a0a:	89 a9       	ldd	r24, Y+49	; 0x31
    1a0c:	9a a9       	ldd	r25, Y+50	; 0x32
    1a0e:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    1a12:	9b 01       	movw	r18, r22
    1a14:	ac 01       	movw	r20, r24
    1a16:	c7 01       	movw	r24, r14
    1a18:	b6 01       	movw	r22, r12
    1a1a:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
	previous_theta_error = theta_error;
    1a1e:	29 81       	ldd	r18, Y+1	; 0x01
    1a20:	3a 81       	ldd	r19, Y+2	; 0x02
    1a22:	4b 81       	ldd	r20, Y+3	; 0x03
    1a24:	5c 81       	ldd	r21, Y+4	; 0x04
    1a26:	20 93 b9 01 	sts	0x01B9, r18
    1a2a:	30 93 ba 01 	sts	0x01BA, r19
    1a2e:	40 93 bb 01 	sts	0x01BB, r20
    1a32:	50 93 bc 01 	sts	0x01BC, r21
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    1a36:	2b ed       	ldi	r18, 0xDB	; 219
    1a38:	3f e0       	ldi	r19, 0x0F	; 15
    1a3a:	49 e4       	ldi	r20, 0x49	; 73
    1a3c:	50 e4       	ldi	r21, 0x40	; 64
    1a3e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divsf3>
    1a42:	6d 87       	std	Y+13, r22	; 0x0d
    1a44:	7e 87       	std	Y+14, r23	; 0x0e
    1a46:	8f 87       	std	Y+15, r24	; 0x0f
    1a48:	98 8b       	std	Y+16, r25	; 0x10

	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    1a4a:	69 81       	ldd	r22, Y+1	; 0x01
    1a4c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	0e 94 ee 18 	call	0x31dc	; 0x31dc <cos>
    1a56:	2b 01       	movw	r4, r22
    1a58:	3c 01       	movw	r6, r24
    1a5a:	29 85       	ldd	r18, Y+9	; 0x09
    1a5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a5e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a60:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a62:	ca 01       	movw	r24, r20
    1a64:	b9 01       	movw	r22, r18
    1a66:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    1a6a:	6b 01       	movw	r12, r22
    1a6c:	7c 01       	movw	r14, r24
    1a6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a70:	3e 81       	ldd	r19, Y+6	; 0x06
    1a72:	4f 81       	ldd	r20, Y+7	; 0x07
    1a74:	58 85       	ldd	r21, Y+8	; 0x08
    1a76:	ca 01       	movw	r24, r20
    1a78:	b9 01       	movw	r22, r18
    1a7a:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    1a7e:	9b 01       	movw	r18, r22
    1a80:	ac 01       	movw	r20, r24
    1a82:	c7 01       	movw	r24, r14
    1a84:	b6 01       	movw	r22, r12
    1a86:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
    1a8a:	0e 94 3b 1b 	call	0x3676	; 0x3676 <sqrt>
    1a8e:	9b 01       	movw	r18, r22
    1a90:	ac 01       	movw	r20, r24
    1a92:	c3 01       	movw	r24, r6
    1a94:	b2 01       	movw	r22, r4
    1a96:	9f 77       	andi	r25, 0x7F	; 127
    1a98:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    1a9c:	6b 01       	movw	r12, r22
    1a9e:	7c 01       	movw	r14, r24
	if (has_puck()) {
    1aa0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <has_puck>
    1aa4:	88 23       	and	r24, r24
    1aa6:	e1 f0       	breq	.+56     	; 0x1ae0 <run_motor_control_loop+0x206>
		if (linear_error<0){
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	a9 01       	movw	r20, r18
    1aae:	c7 01       	movw	r24, r14
    1ab0:	b6 01       	movw	r22, r12
    1ab2:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
    1ab6:	88 23       	and	r24, r24
    1ab8:	5c f0       	brlt	.+22     	; 0x1ad0 <run_motor_control_loop+0x1f6>
			linear_error = 30;
		} else {
			linear_error += 30;
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 ef       	ldi	r20, 0xF0	; 240
    1ac0:	51 e4       	ldi	r21, 0x41	; 65
    1ac2:	c7 01       	movw	r24, r14
    1ac4:	b6 01       	movw	r22, r12
    1ac6:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
    1aca:	6b 01       	movw	r12, r22
    1acc:	7c 01       	movw	r14, r24
    1ace:	08 c0       	rjmp	.+16     	; 0x1ae0 <run_motor_control_loop+0x206>
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	if (has_puck()) {
		if (linear_error<0){
			linear_error = 30;
    1ad0:	0f 2e       	mov	r0, r31
    1ad2:	c1 2c       	mov	r12, r1
    1ad4:	d1 2c       	mov	r13, r1
    1ad6:	f0 ef       	ldi	r31, 0xF0	; 240
    1ad8:	ef 2e       	mov	r14, r31
    1ada:	f1 e4       	ldi	r31, 0x41	; 65
    1adc:	ff 2e       	mov	r15, r31
    1ade:	f0 2d       	mov	r31, r0
		} else {
			linear_error += 30;
		}
	}
	float linear_derivative = (linear_error-previous_linear_error)/TIMESTEP;
    1ae0:	20 91 b5 01 	lds	r18, 0x01B5
    1ae4:	30 91 b6 01 	lds	r19, 0x01B6
    1ae8:	40 91 b7 01 	lds	r20, 0x01B7
    1aec:	50 91 b8 01 	lds	r21, 0x01B8
    1af0:	c7 01       	movw	r24, r14
    1af2:	b6 01       	movw	r22, r12
    1af4:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    1af8:	2f e6       	ldi	r18, 0x6F	; 111
    1afa:	32 e1       	ldi	r19, 0x12	; 18
    1afc:	43 e8       	ldi	r20, 0x83	; 131
    1afe:	5a e3       	ldi	r21, 0x3A	; 58
    1b00:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divsf3>
    1b04:	4b 01       	movw	r8, r22
    1b06:	5c 01       	movw	r10, r24
	float linear_output = linear_kp*linear_error - linear_kd*linear_derivative;
    1b08:	a7 01       	movw	r20, r14
    1b0a:	96 01       	movw	r18, r12
    1b0c:	6b a9       	ldd	r22, Y+51	; 0x33
    1b0e:	7c a9       	ldd	r23, Y+52	; 0x34
    1b10:	8d a9       	ldd	r24, Y+53	; 0x35
    1b12:	9e a9       	ldd	r25, Y+54	; 0x36
    1b14:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    1b18:	2b 01       	movw	r4, r22
    1b1a:	3c 01       	movw	r6, r24
    1b1c:	a5 01       	movw	r20, r10
    1b1e:	94 01       	movw	r18, r8
    1b20:	6f a9       	ldd	r22, Y+55	; 0x37
    1b22:	78 ad       	ldd	r23, Y+56	; 0x38
    1b24:	89 ad       	ldd	r24, Y+57	; 0x39
    1b26:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b28:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    1b2c:	9b 01       	movw	r18, r22
    1b2e:	ac 01       	movw	r20, r24
    1b30:	c3 01       	movw	r24, r6
    1b32:	b2 01       	movw	r22, r4
    1b34:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    1b38:	2b 01       	movw	r4, r22
    1b3a:	3c 01       	movw	r6, r24
	previous_linear_error = linear_error;
    1b3c:	c0 92 b5 01 	sts	0x01B5, r12
    1b40:	d0 92 b6 01 	sts	0x01B6, r13
    1b44:	e0 92 b7 01 	sts	0x01B7, r14
    1b48:	f0 92 b8 01 	sts	0x01B8, r15
	if(linear_output>40.0){linear_output=40.0;}
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e2       	ldi	r20, 0x20	; 32
    1b52:	52 e4       	ldi	r21, 0x42	; 66
    1b54:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__gesf2>
    1b58:	18 16       	cp	r1, r24
    1b5a:	44 f4       	brge	.+16     	; 0x1b6c <run_motor_control_loop+0x292>
    1b5c:	0f 2e       	mov	r0, r31
    1b5e:	41 2c       	mov	r4, r1
    1b60:	51 2c       	mov	r5, r1
    1b62:	f0 e2       	ldi	r31, 0x20	; 32
    1b64:	6f 2e       	mov	r6, r31
    1b66:	f2 e4       	ldi	r31, 0x42	; 66
    1b68:	7f 2e       	mov	r7, r31
    1b6a:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e2       	ldi	r20, 0x20	; 32
    1b72:	52 e4       	ldi	r21, 0x42	; 66
    1b74:	c3 01       	movw	r24, r6
    1b76:	b2 01       	movw	r22, r4
    1b78:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divsf3>
    1b7c:	6b 01       	movw	r12, r22
    1b7e:	7c 01       	movw	r14, r24
	
	if (linear_derivative < 0.1 && angular_derivative < 0.01) {
    1b80:	2d ec       	ldi	r18, 0xCD	; 205
    1b82:	3c ec       	ldi	r19, 0xCC	; 204
    1b84:	4c ec       	ldi	r20, 0xCC	; 204
    1b86:	5d e3       	ldi	r21, 0x3D	; 61
    1b88:	c5 01       	movw	r24, r10
    1b8a:	b4 01       	movw	r22, r8
    1b8c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	0c f5       	brge	.+66     	; 0x1bd6 <run_motor_control_loop+0x2fc>
    1b94:	2a e0       	ldi	r18, 0x0A	; 10
    1b96:	37 ed       	ldi	r19, 0xD7	; 215
    1b98:	43 e2       	ldi	r20, 0x23	; 35
    1b9a:	5c e3       	ldi	r21, 0x3C	; 60
    1b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba4:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	ac f4       	brge	.+42     	; 0x1bd6 <run_motor_control_loop+0x2fc>
		angular_output = 0.2*fabs(theta_error)/theta_error;
    1bac:	2d ec       	ldi	r18, 0xCD	; 205
    1bae:	3c ec       	ldi	r19, 0xCC	; 204
    1bb0:	4c e4       	ldi	r20, 0x4C	; 76
    1bb2:	5e e3       	ldi	r21, 0x3E	; 62
    1bb4:	69 81       	ldd	r22, Y+1	; 0x01
    1bb6:	7a 81       	ldd	r23, Y+2	; 0x02
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	9f 77       	andi	r25, 0x7F	; 127
    1bbe:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    1bc2:	29 81       	ldd	r18, Y+1	; 0x01
    1bc4:	3a 81       	ldd	r19, Y+2	; 0x02
    1bc6:	4b 81       	ldd	r20, Y+3	; 0x03
    1bc8:	5c 81       	ldd	r21, Y+4	; 0x04
    1bca:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divsf3>
    1bce:	6d 87       	std	Y+13, r22	; 0x0d
    1bd0:	7e 87       	std	Y+14, r23	; 0x0e
    1bd2:	8f 87       	std	Y+15, r24	; 0x0f
    1bd4:	98 8b       	std	Y+16, r25	; 0x10
	}
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    1bd6:	8d 84       	ldd	r8, Y+13	; 0x0d
    1bd8:	9e 84       	ldd	r9, Y+14	; 0x0e
    1bda:	af 84       	ldd	r10, Y+15	; 0x0f
    1bdc:	b8 88       	ldd	r11, Y+16	; 0x10
    1bde:	b7 fa       	bst	r11, 7
    1be0:	b0 94       	com	r11
    1be2:	b7 f8       	bld	r11, 7
    1be4:	b0 94       	com	r11
	right_duty_cycle = angular_output;
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    1be6:	69 81       	ldd	r22, Y+1	; 0x01
    1be8:	7a 81       	ldd	r23, Y+2	; 0x02
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	9f 77       	andi	r25, 0x7F	; 127
    1bf0:	2b ed       	ldi	r18, 0xDB	; 219
    1bf2:	3f e0       	ldi	r19, 0x0F	; 15
    1bf4:	49 ec       	ldi	r20, 0xC9	; 201
    1bf6:	5f e3       	ldi	r21, 0x3F	; 63
    1bf8:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
    1bfc:	88 23       	and	r24, r24
    1bfe:	0c f5       	brge	.+66     	; 0x1c42 <run_motor_control_loop+0x368>
		left_duty_cycle += linear_output;
    1c00:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c02:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c04:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c06:	58 89       	ldd	r21, Y+16	; 0x10
    1c08:	c7 01       	movw	r24, r14
    1c0a:	b6 01       	movw	r22, r12
    1c0c:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    1c10:	60 93 22 01 	sts	0x0122, r22
    1c14:	70 93 23 01 	sts	0x0123, r23
    1c18:	80 93 24 01 	sts	0x0124, r24
    1c1c:	90 93 25 01 	sts	0x0125, r25
		right_duty_cycle += linear_output;
    1c20:	a7 01       	movw	r20, r14
    1c22:	96 01       	movw	r18, r12
    1c24:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c26:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c2a:	98 89       	ldd	r25, Y+16	; 0x10
    1c2c:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
    1c30:	60 93 1e 01 	sts	0x011E, r22
    1c34:	70 93 1f 01 	sts	0x011F, r23
    1c38:	80 93 20 01 	sts	0x0120, r24
    1c3c:	90 93 21 01 	sts	0x0121, r25
    1c40:	1e c0       	rjmp	.+60     	; 0x1c7e <run_motor_control_loop+0x3a4>
		} else{
		left_duty_cycle -= linear_output;
    1c42:	a7 01       	movw	r20, r14
    1c44:	96 01       	movw	r18, r12
    1c46:	c5 01       	movw	r24, r10
    1c48:	b4 01       	movw	r22, r8
    1c4a:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    1c4e:	60 93 22 01 	sts	0x0122, r22
    1c52:	70 93 23 01 	sts	0x0123, r23
    1c56:	80 93 24 01 	sts	0x0124, r24
    1c5a:	90 93 25 01 	sts	0x0125, r25
		right_duty_cycle -= linear_output;
    1c5e:	a7 01       	movw	r20, r14
    1c60:	96 01       	movw	r18, r12
    1c62:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c64:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c68:	98 89       	ldd	r25, Y+16	; 0x10
    1c6a:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    1c6e:	60 93 1e 01 	sts	0x011E, r22
    1c72:	70 93 1f 01 	sts	0x011F, r23
    1c76:	80 93 20 01 	sts	0x0120, r24
    1c7a:	90 93 21 01 	sts	0x0121, r25
	
	//If it has the puck, don't let either of the motors spin backwards 

		
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	a9 01       	movw	r20, r18
    1c84:	60 91 22 01 	lds	r22, 0x0122
    1c88:	70 91 23 01 	lds	r23, 0x0123
    1c8c:	80 91 24 01 	lds	r24, 0x0124
    1c90:	90 91 25 01 	lds	r25, 0x0125
    1c94:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
    1c98:	88 23       	and	r24, r24
    1c9a:	14 f4       	brge	.+4      	; 0x1ca0 <run_motor_control_loop+0x3c6>
    1c9c:	29 98       	cbi	0x05, 1	; 5
    1c9e:	01 c0       	rjmp	.+2      	; 0x1ca2 <run_motor_control_loop+0x3c8>
	else{set(PORTB,1);}
    1ca0:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	a9 01       	movw	r20, r18
    1ca8:	60 91 1e 01 	lds	r22, 0x011E
    1cac:	70 91 1f 01 	lds	r23, 0x011F
    1cb0:	80 91 20 01 	lds	r24, 0x0120
    1cb4:	90 91 21 01 	lds	r25, 0x0121
    1cb8:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	14 f4       	brge	.+4      	; 0x1cc4 <run_motor_control_loop+0x3ea>
    1cc0:	2b 98       	cbi	0x05, 3	; 5
    1cc2:	01 c0       	rjmp	.+2      	; 0x1cc6 <run_motor_control_loop+0x3ec>
	else{set(PORTB,3);}
    1cc4:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    1cc6:	80 90 22 01 	lds	r8, 0x0122
    1cca:	90 90 23 01 	lds	r9, 0x0123
    1cce:	a0 90 24 01 	lds	r10, 0x0124
    1cd2:	b0 90 25 01 	lds	r11, 0x0125
    1cd6:	e8 94       	clt
    1cd8:	b7 f8       	bld	r11, 7
    1cda:	80 92 22 01 	sts	0x0122, r8
    1cde:	90 92 23 01 	sts	0x0123, r9
    1ce2:	a0 92 24 01 	sts	0x0124, r10
    1ce6:	b0 92 25 01 	sts	0x0125, r11
	right_duty_cycle = fabs(right_duty_cycle);
    1cea:	c0 90 1e 01 	lds	r12, 0x011E
    1cee:	d0 90 1f 01 	lds	r13, 0x011F
    1cf2:	e0 90 20 01 	lds	r14, 0x0120
    1cf6:	f0 90 21 01 	lds	r15, 0x0121
    1cfa:	e8 94       	clt
    1cfc:	f7 f8       	bld	r15, 7
    1cfe:	c0 92 1e 01 	sts	0x011E, r12
    1d02:	d0 92 1f 01 	sts	0x011F, r13
    1d06:	e0 92 20 01 	sts	0x0120, r14
    1d0a:	f0 92 21 01 	sts	0x0121, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    1d0e:	a7 01       	movw	r20, r14
    1d10:	96 01       	movw	r18, r12
    1d12:	c5 01       	movw	r24, r10
    1d14:	b4 01       	movw	r22, r8
    1d16:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__gesf2>
    1d1a:	18 16       	cp	r1, r24
    1d1c:	2c f0       	brlt	.+10     	; 0x1d28 <run_motor_control_loop+0x44e>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    1d1e:	1c 2d       	mov	r17, r12
    1d20:	0d 2d       	mov	r16, r13
    1d22:	7e 2c       	mov	r7, r14
    1d24:	6f 2c       	mov	r6, r15
    1d26:	04 c0       	rjmp	.+8      	; 0x1d30 <run_motor_control_loop+0x456>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    1d28:	18 2d       	mov	r17, r8
    1d2a:	09 2d       	mov	r16, r9
    1d2c:	7a 2c       	mov	r7, r10
    1d2e:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    1d30:	29 89       	ldd	r18, Y+17	; 0x11
    1d32:	3a 89       	ldd	r19, Y+18	; 0x12
    1d34:	4b 89       	ldd	r20, Y+19	; 0x13
    1d36:	5c 89       	ldd	r21, Y+20	; 0x14
    1d38:	61 2f       	mov	r22, r17
    1d3a:	70 2f       	mov	r23, r16
    1d3c:	87 2d       	mov	r24, r7
    1d3e:	96 2d       	mov	r25, r6
    1d40:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__gesf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	64 f5       	brge	.+88     	; 0x1da0 <run_motor_control_loop+0x4c6>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    1d48:	21 2f       	mov	r18, r17
    1d4a:	30 2f       	mov	r19, r16
    1d4c:	47 2d       	mov	r20, r7
    1d4e:	56 2d       	mov	r21, r6
    1d50:	c5 01       	movw	r24, r10
    1d52:	b4 01       	movw	r22, r8
    1d54:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divsf3>
    1d58:	29 89       	ldd	r18, Y+17	; 0x11
    1d5a:	3a 89       	ldd	r19, Y+18	; 0x12
    1d5c:	4b 89       	ldd	r20, Y+19	; 0x13
    1d5e:	5c 89       	ldd	r21, Y+20	; 0x14
    1d60:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    1d64:	60 93 22 01 	sts	0x0122, r22
    1d68:	70 93 23 01 	sts	0x0123, r23
    1d6c:	80 93 24 01 	sts	0x0124, r24
    1d70:	90 93 25 01 	sts	0x0125, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    1d74:	21 2f       	mov	r18, r17
    1d76:	30 2f       	mov	r19, r16
    1d78:	47 2d       	mov	r20, r7
    1d7a:	56 2d       	mov	r21, r6
    1d7c:	c7 01       	movw	r24, r14
    1d7e:	b6 01       	movw	r22, r12
    1d80:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divsf3>
    1d84:	29 89       	ldd	r18, Y+17	; 0x11
    1d86:	3a 89       	ldd	r19, Y+18	; 0x12
    1d88:	4b 89       	ldd	r20, Y+19	; 0x13
    1d8a:	5c 89       	ldd	r21, Y+20	; 0x14
    1d8c:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    1d90:	60 93 1e 01 	sts	0x011E, r22
    1d94:	70 93 1f 01 	sts	0x011F, r23
    1d98:	80 93 20 01 	sts	0x0120, r24
    1d9c:	90 93 21 01 	sts	0x0121, r25
	}
	


	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    1da0:	08 e8       	ldi	r16, 0x88	; 136
    1da2:	10 e0       	ldi	r17, 0x00	; 0
    1da4:	f8 01       	movw	r30, r16
    1da6:	60 81       	ld	r22, Z
    1da8:	71 81       	ldd	r23, Z+1	; 0x01
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 9b 19 	call	0x3336	; 0x3336 <__floatunsisf>
    1db2:	20 91 22 01 	lds	r18, 0x0122
    1db6:	30 91 23 01 	lds	r19, 0x0123
    1dba:	40 91 24 01 	lds	r20, 0x0124
    1dbe:	50 91 25 01 	lds	r21, 0x0125
    1dc2:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    1dc6:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__fixunssfsi>
    1dca:	70 93 8b 00 	sts	0x008B, r23
    1dce:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 9b 19 	call	0x3336	; 0x3336 <__floatunsisf>
    1de0:	20 91 1e 01 	lds	r18, 0x011E
    1de4:	30 91 1f 01 	lds	r19, 0x011F
    1de8:	40 91 20 01 	lds	r20, 0x0120
    1dec:	50 91 21 01 	lds	r21, 0x0121
    1df0:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    1df4:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__fixunssfsi>
    1df8:	70 93 8d 00 	sts	0x008D, r23
    1dfc:	60 93 8c 00 	sts	0x008C, r22

}
    1e00:	68 96       	adiw	r28, 0x18	; 24
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	ff 90       	pop	r15
    1e16:	ef 90       	pop	r14
    1e18:	df 90       	pop	r13
    1e1a:	cf 90       	pop	r12
    1e1c:	bf 90       	pop	r11
    1e1e:	af 90       	pop	r10
    1e20:	9f 90       	pop	r9
    1e22:	8f 90       	pop	r8
    1e24:	7f 90       	pop	r7
    1e26:	6f 90       	pop	r6
    1e28:	5f 90       	pop	r5
    1e2a:	4f 90       	pop	r4
    1e2c:	08 95       	ret

00001e2e <m_bus_init>:
    1e2e:	58 9a       	sbi	0x0b, 0	; 11
    1e30:	59 9a       	sbi	0x0b, 1	; 11
    1e32:	5a 9a       	sbi	0x0b, 2	; 11
    1e34:	8c e0       	ldi	r24, 0x0C	; 12
    1e36:	80 93 b8 00 	sts	0x00B8, r24
    1e3a:	e9 e6       	ldi	r30, 0x69	; 105
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	80 62       	ori	r24, 0x20	; 32
    1e42:	80 83       	st	Z, r24
    1e44:	80 81       	ld	r24, Z
    1e46:	8f 7e       	andi	r24, 0xEF	; 239
    1e48:	80 83       	st	Z, r24
    1e4a:	ea 9a       	sbi	0x1d, 2	; 29
    1e4c:	78 94       	sei
    1e4e:	08 95       	ret

00001e50 <m_rf_open>:
    1e50:	1f 93       	push	r17
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	18 2f       	mov	r17, r24
    1e58:	d6 2f       	mov	r29, r22
    1e5a:	c4 2f       	mov	r28, r20
    1e5c:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <m_bus_init>
    1e60:	94 ea       	ldi	r25, 0xA4	; 164
    1e62:	90 93 bc 00 	sts	0x00BC, r25
    1e66:	ec eb       	ldi	r30, 0xBC	; 188
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	90 81       	ld	r25, Z
    1e6c:	99 23       	and	r25, r25
    1e6e:	ec f7       	brge	.-6      	; 0x1e6a <m_rf_open+0x1a>
    1e70:	90 e5       	ldi	r25, 0x50	; 80
    1e72:	90 93 bb 00 	sts	0x00BB, r25
    1e76:	94 e8       	ldi	r25, 0x84	; 132
    1e78:	90 93 bc 00 	sts	0x00BC, r25
    1e7c:	ec eb       	ldi	r30, 0xBC	; 188
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	90 81       	ld	r25, Z
    1e82:	99 23       	and	r25, r25
    1e84:	ec f7       	brge	.-6      	; 0x1e80 <m_rf_open+0x30>
    1e86:	90 91 b9 00 	lds	r25, 0x00B9
    1e8a:	98 7f       	andi	r25, 0xF8	; 248
    1e8c:	90 32       	cpi	r25, 0x20	; 32
    1e8e:	29 f4       	brne	.+10     	; 0x1e9a <m_rf_open+0x4a>
    1e90:	84 e9       	ldi	r24, 0x94	; 148
    1e92:	80 93 bc 00 	sts	0x00BC, r24
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	2d c0       	rjmp	.+90     	; 0x1ef4 <m_rf_open+0xa4>
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	80 93 bb 00 	sts	0x00BB, r24
    1ea0:	84 e8       	ldi	r24, 0x84	; 132
    1ea2:	80 93 bc 00 	sts	0x00BC, r24
    1ea6:	ec eb       	ldi	r30, 0xBC	; 188
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	90 81       	ld	r25, Z
    1eac:	99 23       	and	r25, r25
    1eae:	ec f7       	brge	.-6      	; 0x1eaa <m_rf_open+0x5a>
    1eb0:	10 93 bb 00 	sts	0x00BB, r17
    1eb4:	84 e8       	ldi	r24, 0x84	; 132
    1eb6:	80 93 bc 00 	sts	0x00BC, r24
    1eba:	ec eb       	ldi	r30, 0xBC	; 188
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	88 23       	and	r24, r24
    1ec2:	ec f7       	brge	.-6      	; 0x1ebe <m_rf_open+0x6e>
    1ec4:	d0 93 bb 00 	sts	0x00BB, r29
    1ec8:	84 e8       	ldi	r24, 0x84	; 132
    1eca:	80 93 bc 00 	sts	0x00BC, r24
    1ece:	ec eb       	ldi	r30, 0xBC	; 188
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	88 23       	and	r24, r24
    1ed6:	ec f7       	brge	.-6      	; 0x1ed2 <m_rf_open+0x82>
    1ed8:	c0 93 bb 00 	sts	0x00BB, r28
    1edc:	84 e8       	ldi	r24, 0x84	; 132
    1ede:	80 93 bc 00 	sts	0x00BC, r24
    1ee2:	ec eb       	ldi	r30, 0xBC	; 188
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	88 23       	and	r24, r24
    1eea:	ec f7       	brge	.-6      	; 0x1ee6 <m_rf_open+0x96>
    1eec:	84 e9       	ldi	r24, 0x94	; 148
    1eee:	80 93 bc 00 	sts	0x00BC, r24
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	08 95       	ret

00001efc <m_rf_read>:
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	9c 01       	movw	r18, r24
    1f02:	84 ea       	ldi	r24, 0xA4	; 164
    1f04:	80 93 bc 00 	sts	0x00BC, r24
    1f08:	ec eb       	ldi	r30, 0xBC	; 188
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	90 81       	ld	r25, Z
    1f0e:	99 23       	and	r25, r25
    1f10:	ec f7       	brge	.-6      	; 0x1f0c <m_rf_read+0x10>
    1f12:	81 e5       	ldi	r24, 0x51	; 81
    1f14:	80 93 bb 00 	sts	0x00BB, r24
    1f18:	84 e8       	ldi	r24, 0x84	; 132
    1f1a:	80 93 bc 00 	sts	0x00BC, r24
    1f1e:	ec eb       	ldi	r30, 0xBC	; 188
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	90 81       	ld	r25, Z
    1f24:	99 23       	and	r25, r25
    1f26:	ec f7       	brge	.-6      	; 0x1f22 <m_rf_read+0x26>
    1f28:	80 91 b9 00 	lds	r24, 0x00B9
    1f2c:	88 7f       	andi	r24, 0xF8	; 248
    1f2e:	88 34       	cpi	r24, 0x48	; 72
    1f30:	29 f4       	brne	.+10     	; 0x1f3c <m_rf_read+0x40>
    1f32:	84 e9       	ldi	r24, 0x94	; 148
    1f34:	80 93 bc 00 	sts	0x00BC, r24
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	41 c0       	rjmp	.+130    	; 0x1fbe <m_rf_read+0xc2>
    1f3c:	84 ec       	ldi	r24, 0xC4	; 196
    1f3e:	80 93 bc 00 	sts	0x00BC, r24
    1f42:	ec eb       	ldi	r30, 0xBC	; 188
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	90 81       	ld	r25, Z
    1f48:	99 23       	and	r25, r25
    1f4a:	ec f7       	brge	.-6      	; 0x1f46 <m_rf_read+0x4a>
    1f4c:	40 91 bb 00 	lds	r20, 0x00BB
    1f50:	46 13       	cpse	r20, r22
    1f52:	09 c0       	rjmp	.+18     	; 0x1f66 <m_rf_read+0x6a>
    1f54:	84 2f       	mov	r24, r20
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	18 16       	cp	r1, r24
    1f5c:	19 06       	cpc	r1, r25
    1f5e:	44 f0       	brlt	.+16     	; 0x1f70 <m_rf_read+0x74>
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	50 e0       	ldi	r21, 0x00	; 0
    1f64:	1a c0       	rjmp	.+52     	; 0x1f9a <m_rf_read+0x9e>
    1f66:	84 e9       	ldi	r24, 0x94	; 148
    1f68:	80 93 bc 00 	sts	0x00BC, r24
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	27 c0       	rjmp	.+78     	; 0x1fbe <m_rf_read+0xc2>
    1f70:	d9 01       	movw	r26, r18
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	41 50       	subi	r20, 0x01	; 1
    1f76:	51 09       	sbc	r21, r1
    1f78:	b9 01       	movw	r22, r18
    1f7a:	64 0f       	add	r22, r20
    1f7c:	75 1f       	adc	r23, r21
    1f7e:	ec eb       	ldi	r30, 0xBC	; 188
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	84 ec       	ldi	r24, 0xC4	; 196
    1f84:	cb eb       	ldi	r28, 0xBB	; 187
    1f86:	d0 e0       	ldi	r29, 0x00	; 0
    1f88:	80 83       	st	Z, r24
    1f8a:	90 81       	ld	r25, Z
    1f8c:	99 23       	and	r25, r25
    1f8e:	ec f7       	brge	.-6      	; 0x1f8a <m_rf_read+0x8e>
    1f90:	98 81       	ld	r25, Y
    1f92:	9d 93       	st	X+, r25
    1f94:	a6 17       	cp	r26, r22
    1f96:	b7 07       	cpc	r27, r23
    1f98:	b9 f7       	brne	.-18     	; 0x1f88 <m_rf_read+0x8c>
    1f9a:	84 e8       	ldi	r24, 0x84	; 132
    1f9c:	80 93 bc 00 	sts	0x00BC, r24
    1fa0:	ec eb       	ldi	r30, 0xBC	; 188
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	90 81       	ld	r25, Z
    1fa6:	99 23       	and	r25, r25
    1fa8:	ec f7       	brge	.-6      	; 0x1fa4 <m_rf_read+0xa8>
    1faa:	80 91 bb 00 	lds	r24, 0x00BB
    1fae:	f9 01       	movw	r30, r18
    1fb0:	e4 0f       	add	r30, r20
    1fb2:	f5 1f       	adc	r31, r21
    1fb4:	80 83       	st	Z, r24
    1fb6:	84 e9       	ldi	r24, 0x94	; 148
    1fb8:	80 93 bc 00 	sts	0x00BC, r24
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	08 95       	ret

00001fc4 <m_usb_init>:
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	80 93 d7 00 	sts	0x00D7, r24
    1fca:	80 ea       	ldi	r24, 0xA0	; 160
    1fcc:	80 93 d8 00 	sts	0x00D8, r24
    1fd0:	82 e1       	ldi	r24, 0x12	; 18
    1fd2:	89 bd       	out	0x29, r24	; 41
    1fd4:	09 b4       	in	r0, 0x29	; 41
    1fd6:	00 fe       	sbrs	r0, 0
    1fd8:	fd cf       	rjmp	.-6      	; 0x1fd4 <m_usb_init+0x10>
    1fda:	80 e9       	ldi	r24, 0x90	; 144
    1fdc:	80 93 d8 00 	sts	0x00D8, r24
    1fe0:	10 92 e0 00 	sts	0x00E0, r1
    1fe4:	10 92 cc 01 	sts	0x01CC, r1
    1fe8:	10 92 c9 01 	sts	0x01C9, r1
    1fec:	8c e0       	ldi	r24, 0x0C	; 12
    1fee:	80 93 e2 00 	sts	0x00E2, r24
    1ff2:	78 94       	sei
    1ff4:	08 95       	ret

00001ff6 <m_usb_tx_char>:
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	90 91 cc 01 	lds	r25, 0x01CC
    1ffe:	99 23       	and	r25, r25
    2000:	09 f4       	brne	.+2      	; 0x2004 <m_usb_tx_char+0xe>
    2002:	4c c0       	rjmp	.+152    	; 0x209c <m_usb_tx_char+0xa6>
    2004:	9f b7       	in	r25, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	24 e0       	ldi	r18, 0x04	; 4
    200a:	20 93 e9 00 	sts	0x00E9, r18
    200e:	20 91 ca 01 	lds	r18, 0x01CA
    2012:	22 23       	and	r18, r18
    2014:	49 f0       	breq	.+18     	; 0x2028 <m_usb_tx_char+0x32>
    2016:	20 91 e8 00 	lds	r18, 0x00E8
    201a:	25 fd       	sbrc	r18, 5
    201c:	03 c0       	rjmp	.+6      	; 0x2024 <m_usb_tx_char+0x2e>
    201e:	9f bf       	out	0x3f, r25	; 63
    2020:	8f ef       	ldi	r24, 0xFF	; 255
    2022:	41 c0       	rjmp	.+130    	; 0x20a6 <m_usb_tx_char+0xb0>
    2024:	10 92 ca 01 	sts	0x01CA, r1
    2028:	30 91 e4 00 	lds	r19, 0x00E4
    202c:	37 5e       	subi	r19, 0xE7	; 231
    202e:	20 91 e8 00 	lds	r18, 0x00E8
    2032:	25 fd       	sbrc	r18, 5
    2034:	24 c0       	rjmp	.+72     	; 0x207e <m_usb_tx_char+0x88>
    2036:	9f bf       	out	0x3f, r25	; 63
    2038:	90 91 e4 00 	lds	r25, 0x00E4
    203c:	93 17       	cp	r25, r19
    203e:	81 f0       	breq	.+32     	; 0x2060 <m_usb_tx_char+0x6a>
    2040:	90 91 cc 01 	lds	r25, 0x01CC
    2044:	99 23       	and	r25, r25
    2046:	61 f1       	breq	.+88     	; 0x20a0 <m_usb_tx_char+0xaa>
    2048:	a9 ee       	ldi	r26, 0xE9	; 233
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	44 e0       	ldi	r20, 0x04	; 4
    204e:	e8 ee       	ldi	r30, 0xE8	; 232
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	c4 ee       	ldi	r28, 0xE4	; 228
    2054:	d0 e0       	ldi	r29, 0x00	; 0
    2056:	0d c0       	rjmp	.+26     	; 0x2072 <m_usb_tx_char+0x7c>
    2058:	9f bf       	out	0x3f, r25	; 63
    205a:	98 81       	ld	r25, Y
    205c:	93 13       	cpse	r25, r19
    205e:	05 c0       	rjmp	.+10     	; 0x206a <m_usb_tx_char+0x74>
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	80 93 ca 01 	sts	0x01CA, r24
    2066:	8f ef       	ldi	r24, 0xFF	; 255
    2068:	1e c0       	rjmp	.+60     	; 0x20a6 <m_usb_tx_char+0xb0>
    206a:	90 91 cc 01 	lds	r25, 0x01CC
    206e:	99 23       	and	r25, r25
    2070:	c9 f0       	breq	.+50     	; 0x20a4 <m_usb_tx_char+0xae>
    2072:	9f b7       	in	r25, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	4c 93       	st	X, r20
    2078:	20 81       	ld	r18, Z
    207a:	25 ff       	sbrs	r18, 5
    207c:	ed cf       	rjmp	.-38     	; 0x2058 <m_usb_tx_char+0x62>
    207e:	80 93 f1 00 	sts	0x00F1, r24
    2082:	80 91 e8 00 	lds	r24, 0x00E8
    2086:	85 fd       	sbrc	r24, 5
    2088:	03 c0       	rjmp	.+6      	; 0x2090 <m_usb_tx_char+0x9a>
    208a:	8a e3       	ldi	r24, 0x3A	; 58
    208c:	80 93 e8 00 	sts	0x00E8, r24
    2090:	85 e0       	ldi	r24, 0x05	; 5
    2092:	80 93 cb 01 	sts	0x01CB, r24
    2096:	9f bf       	out	0x3f, r25	; 63
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	05 c0       	rjmp	.+10     	; 0x20a6 <m_usb_tx_char+0xb0>
    209c:	8f ef       	ldi	r24, 0xFF	; 255
    209e:	03 c0       	rjmp	.+6      	; 0x20a6 <m_usb_tx_char+0xb0>
    20a0:	8f ef       	ldi	r24, 0xFF	; 255
    20a2:	01 c0       	rjmp	.+2      	; 0x20a6 <m_usb_tx_char+0xb0>
    20a4:	8f ef       	ldi	r24, 0xFF	; 255
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	08 95       	ret

000020ac <__vector_10>:
    20ac:	1f 92       	push	r1
    20ae:	0f 92       	push	r0
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	0f 92       	push	r0
    20b4:	11 24       	eor	r1, r1
    20b6:	8f 93       	push	r24
    20b8:	9f 93       	push	r25
    20ba:	ef 93       	push	r30
    20bc:	ff 93       	push	r31
    20be:	e1 ee       	ldi	r30, 0xE1	; 225
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	10 82       	st	Z, r1
    20c6:	83 ff       	sbrs	r24, 3
    20c8:	11 c0       	rjmp	.+34     	; 0x20ec <__vector_10+0x40>
    20ca:	10 92 e9 00 	sts	0x00E9, r1
    20ce:	91 e0       	ldi	r25, 0x01	; 1
    20d0:	90 93 eb 00 	sts	0x00EB, r25
    20d4:	10 92 ec 00 	sts	0x00EC, r1
    20d8:	92 e1       	ldi	r25, 0x12	; 18
    20da:	90 93 ed 00 	sts	0x00ED, r25
    20de:	98 e0       	ldi	r25, 0x08	; 8
    20e0:	90 93 f0 00 	sts	0x00F0, r25
    20e4:	10 92 cc 01 	sts	0x01CC, r1
    20e8:	10 92 c9 01 	sts	0x01C9, r1
    20ec:	82 ff       	sbrs	r24, 2
    20ee:	13 c0       	rjmp	.+38     	; 0x2116 <__vector_10+0x6a>
    20f0:	80 91 cc 01 	lds	r24, 0x01CC
    20f4:	88 23       	and	r24, r24
    20f6:	79 f0       	breq	.+30     	; 0x2116 <__vector_10+0x6a>
    20f8:	80 91 cb 01 	lds	r24, 0x01CB
    20fc:	88 23       	and	r24, r24
    20fe:	59 f0       	breq	.+22     	; 0x2116 <__vector_10+0x6a>
    2100:	81 50       	subi	r24, 0x01	; 1
    2102:	80 93 cb 01 	sts	0x01CB, r24
    2106:	81 11       	cpse	r24, r1
    2108:	06 c0       	rjmp	.+12     	; 0x2116 <__vector_10+0x6a>
    210a:	84 e0       	ldi	r24, 0x04	; 4
    210c:	80 93 e9 00 	sts	0x00E9, r24
    2110:	8a e3       	ldi	r24, 0x3A	; 58
    2112:	80 93 e8 00 	sts	0x00E8, r24
    2116:	ff 91       	pop	r31
    2118:	ef 91       	pop	r30
    211a:	9f 91       	pop	r25
    211c:	8f 91       	pop	r24
    211e:	0f 90       	pop	r0
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	0f 90       	pop	r0
    2124:	1f 90       	pop	r1
    2126:	18 95       	reti

00002128 <__vector_11>:
    2128:	1f 92       	push	r1
    212a:	0f 92       	push	r0
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	0f 92       	push	r0
    2130:	11 24       	eor	r1, r1
    2132:	0f 93       	push	r16
    2134:	1f 93       	push	r17
    2136:	2f 93       	push	r18
    2138:	3f 93       	push	r19
    213a:	4f 93       	push	r20
    213c:	5f 93       	push	r21
    213e:	6f 93       	push	r22
    2140:	7f 93       	push	r23
    2142:	8f 93       	push	r24
    2144:	9f 93       	push	r25
    2146:	af 93       	push	r26
    2148:	bf 93       	push	r27
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	ef 93       	push	r30
    2150:	ff 93       	push	r31
    2152:	10 92 e9 00 	sts	0x00E9, r1
    2156:	80 91 e8 00 	lds	r24, 0x00E8
    215a:	83 ff       	sbrs	r24, 3
    215c:	4c c1       	rjmp	.+664    	; 0x23f6 <__vector_11+0x2ce>
    215e:	e1 ef       	ldi	r30, 0xF1	; 241
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	60 81       	ld	r22, Z
    2164:	80 81       	ld	r24, Z
    2166:	20 81       	ld	r18, Z
    2168:	90 81       	ld	r25, Z
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	39 2b       	or	r19, r25
    216e:	40 81       	ld	r20, Z
    2170:	90 81       	ld	r25, Z
    2172:	50 e0       	ldi	r21, 0x00	; 0
    2174:	59 2b       	or	r21, r25
    2176:	70 81       	ld	r23, Z
    2178:	c0 81       	ld	r28, Z
    217a:	92 ef       	ldi	r25, 0xF2	; 242
    217c:	90 93 e8 00 	sts	0x00E8, r25
    2180:	86 30       	cpi	r24, 0x06	; 6
    2182:	09 f0       	breq	.+2      	; 0x2186 <__vector_11+0x5e>
    2184:	58 c0       	rjmp	.+176    	; 0x2236 <__vector_11+0x10e>
    2186:	04 c0       	rjmp	.+8      	; 0x2190 <__vector_11+0x68>
    2188:	81 e2       	ldi	r24, 0x21	; 33
    218a:	80 93 eb 00 	sts	0x00EB, r24
    218e:	3a c1       	rjmp	.+628    	; 0x2404 <__vector_11+0x2dc>
    2190:	66 e0       	ldi	r22, 0x06	; 6
    2192:	80 e2       	ldi	r24, 0x20	; 32
    2194:	91 e0       	ldi	r25, 0x01	; 1
    2196:	fc 01       	movw	r30, r24
    2198:	a5 91       	lpm	r26, Z+
    219a:	b4 91       	lpm	r27, Z
    219c:	2a 17       	cp	r18, r26
    219e:	3b 07       	cpc	r19, r27
    21a0:	11 f0       	breq	.+4      	; 0x21a6 <__vector_11+0x7e>
    21a2:	07 96       	adiw	r24, 0x07	; 7
    21a4:	23 c0       	rjmp	.+70     	; 0x21ec <__vector_11+0xc4>
    21a6:	fc 01       	movw	r30, r24
    21a8:	32 96       	adiw	r30, 0x02	; 2
    21aa:	a5 91       	lpm	r26, Z+
    21ac:	b4 91       	lpm	r27, Z
    21ae:	4a 17       	cp	r20, r26
    21b0:	5b 07       	cpc	r21, r27
    21b2:	11 f0       	breq	.+4      	; 0x21b8 <__vector_11+0x90>
    21b4:	07 96       	adiw	r24, 0x07	; 7
    21b6:	1a c0       	rjmp	.+52     	; 0x21ec <__vector_11+0xc4>
    21b8:	fc 01       	movw	r30, r24
    21ba:	34 96       	adiw	r30, 0x04	; 4
    21bc:	45 91       	lpm	r20, Z+
    21be:	54 91       	lpm	r21, Z
    21c0:	fc 01       	movw	r30, r24
    21c2:	36 96       	adiw	r30, 0x06	; 6
    21c4:	24 91       	lpm	r18, Z
    21c6:	87 2f       	mov	r24, r23
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9c 2b       	or	r25, r28
    21cc:	8f 3f       	cpi	r24, 0xFF	; 255
    21ce:	91 05       	cpc	r25, r1
    21d0:	19 f0       	breq	.+6      	; 0x21d8 <__vector_11+0xb0>
    21d2:	10 f0       	brcs	.+4      	; 0x21d8 <__vector_11+0xb0>
    21d4:	8f ef       	ldi	r24, 0xFF	; 255
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	82 17       	cp	r24, r18
    21da:	08 f4       	brcc	.+2      	; 0x21de <__vector_11+0xb6>
    21dc:	28 2f       	mov	r18, r24
    21de:	a8 ee       	ldi	r26, 0xE8	; 232
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	70 e1       	ldi	r23, 0x10	; 16
    21e4:	6e ef       	ldi	r22, 0xFE	; 254
    21e6:	c1 ef       	ldi	r28, 0xF1	; 241
    21e8:	d0 e0       	ldi	r29, 0x00	; 0
    21ea:	03 c0       	rjmp	.+6      	; 0x21f2 <__vector_11+0xca>
    21ec:	61 50       	subi	r22, 0x01	; 1
    21ee:	99 f6       	brne	.-90     	; 0x2196 <__vector_11+0x6e>
    21f0:	cb cf       	rjmp	.-106    	; 0x2188 <__vector_11+0x60>
    21f2:	8c 91       	ld	r24, X
    21f4:	98 2f       	mov	r25, r24
    21f6:	95 70       	andi	r25, 0x05	; 5
    21f8:	e1 f3       	breq	.-8      	; 0x21f2 <__vector_11+0xca>
    21fa:	82 fd       	sbrc	r24, 2
    21fc:	03 c1       	rjmp	.+518    	; 0x2404 <__vector_11+0x2dc>
    21fe:	32 2f       	mov	r19, r18
    2200:	21 31       	cpi	r18, 0x11	; 17
    2202:	08 f0       	brcs	.+2      	; 0x2206 <__vector_11+0xde>
    2204:	37 2f       	mov	r19, r23
    2206:	33 23       	and	r19, r19
    2208:	09 f4       	brne	.+2      	; 0x220c <__vector_11+0xe4>
    220a:	f9 c0       	rjmp	.+498    	; 0x23fe <__vector_11+0x2d6>
    220c:	fa 01       	movw	r30, r20
    220e:	83 2f       	mov	r24, r19
    2210:	94 91       	lpm	r25, Z
    2212:	98 83       	st	Y, r25
    2214:	81 50       	subi	r24, 0x01	; 1
    2216:	31 96       	adiw	r30, 0x01	; 1
    2218:	81 11       	cpse	r24, r1
    221a:	fa cf       	rjmp	.-12     	; 0x2210 <__vector_11+0xe8>
    221c:	8f ef       	ldi	r24, 0xFF	; 255
    221e:	83 0f       	add	r24, r19
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	48 0f       	add	r20, r24
    2226:	59 1f       	adc	r21, r25
    2228:	23 1b       	sub	r18, r19
    222a:	6c 93       	st	X, r22
    222c:	21 11       	cpse	r18, r1
    222e:	e1 cf       	rjmp	.-62     	; 0x21f2 <__vector_11+0xca>
    2230:	30 31       	cpi	r19, 0x10	; 16
    2232:	f9 f2       	breq	.-66     	; 0x21f2 <__vector_11+0xca>
    2234:	e7 c0       	rjmp	.+462    	; 0x2404 <__vector_11+0x2dc>
    2236:	85 30       	cpi	r24, 0x05	; 5
    2238:	61 f4       	brne	.+24     	; 0x2252 <__vector_11+0x12a>
    223a:	8e ef       	ldi	r24, 0xFE	; 254
    223c:	80 93 e8 00 	sts	0x00E8, r24
    2240:	e8 ee       	ldi	r30, 0xE8	; 232
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	80 ff       	sbrs	r24, 0
    2248:	fd cf       	rjmp	.-6      	; 0x2244 <__vector_11+0x11c>
    224a:	20 68       	ori	r18, 0x80	; 128
    224c:	20 93 e3 00 	sts	0x00E3, r18
    2250:	d9 c0       	rjmp	.+434    	; 0x2404 <__vector_11+0x2dc>
    2252:	89 30       	cpi	r24, 0x09	; 9
    2254:	09 f0       	breq	.+2      	; 0x2258 <__vector_11+0x130>
    2256:	35 c0       	rjmp	.+106    	; 0x22c2 <__vector_11+0x19a>
    2258:	61 11       	cpse	r22, r1
    225a:	cd c0       	rjmp	.+410    	; 0x23f6 <__vector_11+0x2ce>
    225c:	20 93 cc 01 	sts	0x01CC, r18
    2260:	10 92 c9 01 	sts	0x01C9, r1
    2264:	10 92 cb 01 	sts	0x01CB, r1
    2268:	8e ef       	ldi	r24, 0xFE	; 254
    226a:	80 93 e8 00 	sts	0x00E8, r24
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	29 ec       	ldi	r18, 0xC9	; 201
    2272:	31 e0       	ldi	r19, 0x01	; 1
    2274:	c9 ee       	ldi	r28, 0xE9	; 233
    2276:	d0 e0       	ldi	r29, 0x00	; 0
    2278:	ab ee       	ldi	r26, 0xEB	; 235
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	0c ee       	ldi	r16, 0xEC	; 236
    227e:	10 e0       	ldi	r17, 0x00	; 0
    2280:	6d ee       	ldi	r22, 0xED	; 237
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	88 83       	st	Y, r24
    2286:	a9 01       	movw	r20, r18
    2288:	4f 5f       	subi	r20, 0xFF	; 255
    228a:	5f 4f       	sbci	r21, 0xFF	; 255
    228c:	f9 01       	movw	r30, r18
    228e:	94 91       	lpm	r25, Z
    2290:	9c 93       	st	X, r25
    2292:	99 23       	and	r25, r25
    2294:	61 f0       	breq	.+24     	; 0x22ae <__vector_11+0x186>
    2296:	fa 01       	movw	r30, r20
    2298:	44 91       	lpm	r20, Z
    229a:	f8 01       	movw	r30, r16
    229c:	40 83       	st	Z, r20
    229e:	f9 01       	movw	r30, r18
    22a0:	32 96       	adiw	r30, 0x02	; 2
    22a2:	94 91       	lpm	r25, Z
    22a4:	2d 5f       	subi	r18, 0xFD	; 253
    22a6:	3f 4f       	sbci	r19, 0xFF	; 255
    22a8:	fb 01       	movw	r30, r22
    22aa:	90 83       	st	Z, r25
    22ac:	01 c0       	rjmp	.+2      	; 0x22b0 <__vector_11+0x188>
    22ae:	9a 01       	movw	r18, r20
    22b0:	8f 5f       	subi	r24, 0xFF	; 255
    22b2:	85 30       	cpi	r24, 0x05	; 5
    22b4:	39 f7       	brne	.-50     	; 0x2284 <__vector_11+0x15c>
    22b6:	ea ee       	ldi	r30, 0xEA	; 234
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	8e e1       	ldi	r24, 0x1E	; 30
    22bc:	80 83       	st	Z, r24
    22be:	10 82       	st	Z, r1
    22c0:	a1 c0       	rjmp	.+322    	; 0x2404 <__vector_11+0x2dc>
    22c2:	88 30       	cpi	r24, 0x08	; 8
    22c4:	81 f4       	brne	.+32     	; 0x22e6 <__vector_11+0x1be>
    22c6:	60 38       	cpi	r22, 0x80	; 128
    22c8:	09 f0       	breq	.+2      	; 0x22cc <__vector_11+0x1a4>
    22ca:	95 c0       	rjmp	.+298    	; 0x23f6 <__vector_11+0x2ce>
    22cc:	e8 ee       	ldi	r30, 0xE8	; 232
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	80 ff       	sbrs	r24, 0
    22d4:	fd cf       	rjmp	.-6      	; 0x22d0 <__vector_11+0x1a8>
    22d6:	80 91 cc 01 	lds	r24, 0x01CC
    22da:	80 93 f1 00 	sts	0x00F1, r24
    22de:	8e ef       	ldi	r24, 0xFE	; 254
    22e0:	80 93 e8 00 	sts	0x00E8, r24
    22e4:	8f c0       	rjmp	.+286    	; 0x2404 <__vector_11+0x2dc>
    22e6:	81 32       	cpi	r24, 0x21	; 33
    22e8:	b9 f4       	brne	.+46     	; 0x2318 <__vector_11+0x1f0>
    22ea:	61 3a       	cpi	r22, 0xA1	; 161
    22ec:	09 f0       	breq	.+2      	; 0x22f0 <__vector_11+0x1c8>
    22ee:	83 c0       	rjmp	.+262    	; 0x23f6 <__vector_11+0x2ce>
    22f0:	e8 ee       	ldi	r30, 0xE8	; 232
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	80 ff       	sbrs	r24, 0
    22f8:	fd cf       	rjmp	.-6      	; 0x22f4 <__vector_11+0x1cc>
    22fa:	e2 e3       	ldi	r30, 0x32	; 50
    22fc:	f1 e0       	ldi	r31, 0x01	; 1
    22fe:	29 e3       	ldi	r18, 0x39	; 57
    2300:	31 e0       	ldi	r19, 0x01	; 1
    2302:	a1 ef       	ldi	r26, 0xF1	; 241
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	81 91       	ld	r24, Z+
    2308:	8c 93       	st	X, r24
    230a:	e2 17       	cp	r30, r18
    230c:	f3 07       	cpc	r31, r19
    230e:	d9 f7       	brne	.-10     	; 0x2306 <__vector_11+0x1de>
    2310:	8e ef       	ldi	r24, 0xFE	; 254
    2312:	80 93 e8 00 	sts	0x00E8, r24
    2316:	76 c0       	rjmp	.+236    	; 0x2404 <__vector_11+0x2dc>
    2318:	80 32       	cpi	r24, 0x20	; 32
    231a:	d1 f4       	brne	.+52     	; 0x2350 <__vector_11+0x228>
    231c:	61 32       	cpi	r22, 0x21	; 33
    231e:	09 f0       	breq	.+2      	; 0x2322 <__vector_11+0x1fa>
    2320:	6a c0       	rjmp	.+212    	; 0x23f6 <__vector_11+0x2ce>
    2322:	e8 ee       	ldi	r30, 0xE8	; 232
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	82 ff       	sbrs	r24, 2
    232a:	fd cf       	rjmp	.-6      	; 0x2326 <__vector_11+0x1fe>
    232c:	e2 e3       	ldi	r30, 0x32	; 50
    232e:	f1 e0       	ldi	r31, 0x01	; 1
    2330:	29 e3       	ldi	r18, 0x39	; 57
    2332:	31 e0       	ldi	r19, 0x01	; 1
    2334:	a1 ef       	ldi	r26, 0xF1	; 241
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	8c 91       	ld	r24, X
    233a:	81 93       	st	Z+, r24
    233c:	e2 17       	cp	r30, r18
    233e:	f3 07       	cpc	r31, r19
    2340:	d9 f7       	brne	.-10     	; 0x2338 <__vector_11+0x210>
    2342:	e8 ee       	ldi	r30, 0xE8	; 232
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	8b ef       	ldi	r24, 0xFB	; 251
    2348:	80 83       	st	Z, r24
    234a:	8e ef       	ldi	r24, 0xFE	; 254
    234c:	80 83       	st	Z, r24
    234e:	5a c0       	rjmp	.+180    	; 0x2404 <__vector_11+0x2dc>
    2350:	82 32       	cpi	r24, 0x22	; 34
    2352:	71 f4       	brne	.+28     	; 0x2370 <__vector_11+0x248>
    2354:	61 32       	cpi	r22, 0x21	; 33
    2356:	09 f0       	breq	.+2      	; 0x235a <__vector_11+0x232>
    2358:	4e c0       	rjmp	.+156    	; 0x23f6 <__vector_11+0x2ce>
    235a:	20 93 c9 01 	sts	0x01C9, r18
    235e:	e8 ee       	ldi	r30, 0xE8	; 232
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	80 ff       	sbrs	r24, 0
    2366:	fd cf       	rjmp	.-6      	; 0x2362 <__vector_11+0x23a>
    2368:	8e ef       	ldi	r24, 0xFE	; 254
    236a:	80 93 e8 00 	sts	0x00E8, r24
    236e:	4a c0       	rjmp	.+148    	; 0x2404 <__vector_11+0x2dc>
    2370:	81 11       	cpse	r24, r1
    2372:	1a c0       	rjmp	.+52     	; 0x23a8 <__vector_11+0x280>
    2374:	e8 ee       	ldi	r30, 0xE8	; 232
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	80 ff       	sbrs	r24, 0
    237c:	fd cf       	rjmp	.-6      	; 0x2378 <__vector_11+0x250>
    237e:	62 38       	cpi	r22, 0x82	; 130
    2380:	51 f4       	brne	.+20     	; 0x2396 <__vector_11+0x26e>
    2382:	e9 ee       	ldi	r30, 0xE9	; 233
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	40 83       	st	Z, r20
    2388:	80 91 eb 00 	lds	r24, 0x00EB
    238c:	85 fb       	bst	r24, 5
    238e:	88 27       	eor	r24, r24
    2390:	80 f9       	bld	r24, 0
    2392:	10 82       	st	Z, r1
    2394:	01 c0       	rjmp	.+2      	; 0x2398 <__vector_11+0x270>
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	e1 ef       	ldi	r30, 0xF1	; 241
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 83       	st	Z, r24
    239e:	10 82       	st	Z, r1
    23a0:	8e ef       	ldi	r24, 0xFE	; 254
    23a2:	80 93 e8 00 	sts	0x00E8, r24
    23a6:	2e c0       	rjmp	.+92     	; 0x2404 <__vector_11+0x2dc>
    23a8:	98 2f       	mov	r25, r24
    23aa:	9d 7f       	andi	r25, 0xFD	; 253
    23ac:	91 30       	cpi	r25, 0x01	; 1
    23ae:	19 f5       	brne	.+70     	; 0x23f6 <__vector_11+0x2ce>
    23b0:	62 30       	cpi	r22, 0x02	; 2
    23b2:	09 f5       	brne	.+66     	; 0x23f6 <__vector_11+0x2ce>
    23b4:	23 2b       	or	r18, r19
    23b6:	f9 f4       	brne	.+62     	; 0x23f6 <__vector_11+0x2ce>
    23b8:	4f 77       	andi	r20, 0x7F	; 127
    23ba:	9f ef       	ldi	r25, 0xFF	; 255
    23bc:	94 0f       	add	r25, r20
    23be:	94 30       	cpi	r25, 0x04	; 4
    23c0:	d0 f4       	brcc	.+52     	; 0x23f6 <__vector_11+0x2ce>
    23c2:	9e ef       	ldi	r25, 0xFE	; 254
    23c4:	90 93 e8 00 	sts	0x00E8, r25
    23c8:	40 93 e9 00 	sts	0x00E9, r20
    23cc:	83 30       	cpi	r24, 0x03	; 3
    23ce:	21 f4       	brne	.+8      	; 0x23d8 <__vector_11+0x2b0>
    23d0:	81 e2       	ldi	r24, 0x21	; 33
    23d2:	80 93 eb 00 	sts	0x00EB, r24
    23d6:	16 c0       	rjmp	.+44     	; 0x2404 <__vector_11+0x2dc>
    23d8:	89 e1       	ldi	r24, 0x19	; 25
    23da:	80 93 eb 00 	sts	0x00EB, r24
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <__vector_11+0x2c0>
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	4a 95       	dec	r20
    23ea:	e2 f7       	brpl	.-8      	; 0x23e4 <__vector_11+0x2bc>
    23ec:	ea ee       	ldi	r30, 0xEA	; 234
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 83       	st	Z, r24
    23f2:	10 82       	st	Z, r1
    23f4:	07 c0       	rjmp	.+14     	; 0x2404 <__vector_11+0x2dc>
    23f6:	81 e2       	ldi	r24, 0x21	; 33
    23f8:	80 93 eb 00 	sts	0x00EB, r24
    23fc:	03 c0       	rjmp	.+6      	; 0x2404 <__vector_11+0x2dc>
    23fe:	6c 93       	st	X, r22
    2400:	21 11       	cpse	r18, r1
    2402:	f7 ce       	rjmp	.-530    	; 0x21f2 <__vector_11+0xca>
    2404:	ff 91       	pop	r31
    2406:	ef 91       	pop	r30
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	bf 91       	pop	r27
    240e:	af 91       	pop	r26
    2410:	9f 91       	pop	r25
    2412:	8f 91       	pop	r24
    2414:	7f 91       	pop	r23
    2416:	6f 91       	pop	r22
    2418:	5f 91       	pop	r21
    241a:	4f 91       	pop	r20
    241c:	3f 91       	pop	r19
    241e:	2f 91       	pop	r18
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	0f 90       	pop	r0
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	0f 90       	pop	r0
    242a:	1f 90       	pop	r1
    242c:	18 95       	reti

0000242e <m_usb_tx_int>:
    242e:	ef 92       	push	r14
    2430:	ff 92       	push	r15
    2432:	0f 93       	push	r16
    2434:	1f 93       	push	r17
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
    243e:	27 97       	sbiw	r28, 0x07	; 7
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	8e 01       	movw	r16, r28
    244c:	0f 5f       	subi	r16, 0xFF	; 255
    244e:	1f 4f       	sbci	r17, 0xFF	; 255
    2450:	27 e0       	ldi	r18, 0x07	; 7
    2452:	f8 01       	movw	r30, r16
    2454:	11 92       	st	Z+, r1
    2456:	2a 95       	dec	r18
    2458:	e9 f7       	brne	.-6      	; 0x2454 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    245a:	4a e0       	ldi	r20, 0x0A	; 10
    245c:	b8 01       	movw	r22, r16
    245e:	0e 94 ae 1b 	call	0x375c	; 0x375c <__itoa_ncheck>
    2462:	7e 01       	movw	r14, r28
    2464:	f8 e0       	ldi	r31, 0x08	; 8
    2466:	ef 0e       	add	r14, r31
    2468:	f1 1c       	adc	r15, r1
    246a:	f8 01       	movw	r30, r16
    246c:	81 91       	ld	r24, Z+
    246e:	8f 01       	movw	r16, r30
    2470:	81 11       	cpse	r24, r1
    2472:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <m_usb_tx_char>
    2476:	0e 15       	cp	r16, r14
    2478:	1f 05       	cpc	r17, r15
    247a:	b9 f7       	brne	.-18     	; 0x246a <m_usb_tx_int+0x3c>
    247c:	27 96       	adiw	r28, 0x07	; 7
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	df 91       	pop	r29
    248a:	cf 91       	pop	r28
    248c:	1f 91       	pop	r17
    248e:	0f 91       	pop	r16
    2490:	ff 90       	pop	r15
    2492:	ef 90       	pop	r14
    2494:	08 95       	ret

00002496 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    249a:	ec eb       	ldi	r30, 0xBC	; 188
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	88 23       	and	r24, r24
    24a2:	34 f0       	brlt	.+12     	; 0x24b0 <twi_wait+0x1a>
    24a4:	2f 5f       	subi	r18, 0xFF	; 255
    24a6:	3f 4f       	sbci	r19, 0xFF	; 255
    24a8:	29 3e       	cpi	r18, 0xE9	; 233
    24aa:	83 e0       	ldi	r24, 0x03	; 3
    24ac:	38 07       	cpc	r19, r24
    24ae:	b9 f7       	brne	.-18     	; 0x249e <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	28 3e       	cpi	r18, 0xE8	; 232
    24b4:	33 40       	sbci	r19, 0x03	; 3
    24b6:	09 f4       	brne	.+2      	; 0x24ba <twi_wait+0x24>
    24b8:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    24ba:	08 95       	ret

000024bc <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    24bc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    24c0:	84 e8       	ldi	r24, 0x84	; 132
    24c2:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    24c6:	0e 94 4b 12 	call	0x2496	; 0x2496 <twi_wait>
    24ca:	88 23       	and	r24, r24
    24cc:	19 f0       	breq	.+6      	; 0x24d4 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    24ce:	80 91 b9 00 	lds	r24, 0x00B9
    24d2:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    24d4:	08 95       	ret

000024d6 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    24d6:	cf 93       	push	r28
    24d8:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    24da:	94 ea       	ldi	r25, 0xA4	; 164
    24dc:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    24e0:	0e 94 4b 12 	call	0x2496	; 0x2496 <twi_wait>
    24e4:	88 23       	and	r24, r24
    24e6:	61 f0       	breq	.+24     	; 0x2500 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    24e8:	8c 2f       	mov	r24, r28
    24ea:	88 0f       	add	r24, r24
    24ec:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    24f0:	80 32       	cpi	r24, 0x20	; 32
    24f2:	29 f4       	brne	.+10     	; 0x24fe <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    24f4:	84 e9       	ldi	r24, 0x94	; 148
    24f6:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	01 c0       	rjmp	.+2      	; 0x2500 <start_write+0x2a>
	}	
	return 1;	// success
    24fe:	81 e0       	ldi	r24, 0x01	; 1
}	
    2500:	cf 91       	pop	r28
    2502:	08 95       	ret

00002504 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    2504:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2508:	88 e5       	ldi	r24, 0x58	; 88
    250a:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <start_write>
    250e:	88 23       	and	r24, r24
    2510:	09 f4       	brne	.+2      	; 0x2514 <m_wii_open+0x10>
    2512:	cd c0       	rjmp	.+410    	; 0x26ae <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    2514:	80 e3       	ldi	r24, 0x30	; 48
    2516:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    251a:	88 23       	and	r24, r24
    251c:	09 f4       	brne	.+2      	; 0x2520 <m_wii_open+0x1c>
    251e:	c9 c0       	rjmp	.+402    	; 0x26b2 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    2526:	88 23       	and	r24, r24
    2528:	09 f4       	brne	.+2      	; 0x252c <m_wii_open+0x28>
    252a:	c5 c0       	rjmp	.+394    	; 0x26b6 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    252c:	84 e9       	ldi	r24, 0x94	; 148
    252e:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2532:	83 ec       	ldi	r24, 0xC3	; 195
    2534:	99 e0       	ldi	r25, 0x09	; 9
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <m_wii_open+0x32>
    253a:	00 c0       	rjmp	.+0      	; 0x253c <m_wii_open+0x38>
    253c:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    253e:	88 e5       	ldi	r24, 0x58	; 88
    2540:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <start_write>
    2544:	88 23       	and	r24, r24
    2546:	09 f4       	brne	.+2      	; 0x254a <m_wii_open+0x46>
    2548:	b8 c0       	rjmp	.+368    	; 0x26ba <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    2550:	88 23       	and	r24, r24
    2552:	09 f4       	brne	.+2      	; 0x2556 <m_wii_open+0x52>
    2554:	b4 c0       	rjmp	.+360    	; 0x26be <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    255c:	88 23       	and	r24, r24
    255e:	09 f4       	brne	.+2      	; 0x2562 <m_wii_open+0x5e>
    2560:	b0 c0       	rjmp	.+352    	; 0x26c2 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    2568:	88 23       	and	r24, r24
    256a:	09 f4       	brne	.+2      	; 0x256e <m_wii_open+0x6a>
    256c:	ac c0       	rjmp	.+344    	; 0x26c6 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    2574:	88 23       	and	r24, r24
    2576:	09 f4       	brne	.+2      	; 0x257a <m_wii_open+0x76>
    2578:	a8 c0       	rjmp	.+336    	; 0x26ca <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    2580:	88 23       	and	r24, r24
    2582:	09 f4       	brne	.+2      	; 0x2586 <m_wii_open+0x82>
    2584:	a4 c0       	rjmp	.+328    	; 0x26ce <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    258c:	88 23       	and	r24, r24
    258e:	09 f4       	brne	.+2      	; 0x2592 <m_wii_open+0x8e>
    2590:	a0 c0       	rjmp	.+320    	; 0x26d2 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    2598:	88 23       	and	r24, r24
    259a:	09 f4       	brne	.+2      	; 0x259e <m_wii_open+0x9a>
    259c:	9c c0       	rjmp	.+312    	; 0x26d6 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    259e:	80 e9       	ldi	r24, 0x90	; 144
    25a0:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    25a4:	88 23       	and	r24, r24
    25a6:	09 f4       	brne	.+2      	; 0x25aa <m_wii_open+0xa6>
    25a8:	98 c0       	rjmp	.+304    	; 0x26da <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    25aa:	84 e9       	ldi	r24, 0x94	; 148
    25ac:	80 93 bc 00 	sts	0x00BC, r24
    25b0:	83 ec       	ldi	r24, 0xC3	; 195
    25b2:	99 e0       	ldi	r25, 0x09	; 9
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <m_wii_open+0xb0>
    25b8:	00 c0       	rjmp	.+0      	; 0x25ba <m_wii_open+0xb6>
    25ba:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    25bc:	88 e5       	ldi	r24, 0x58	; 88
    25be:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <start_write>
    25c2:	88 23       	and	r24, r24
    25c4:	09 f4       	brne	.+2      	; 0x25c8 <m_wii_open+0xc4>
    25c6:	8b c0       	rjmp	.+278    	; 0x26de <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    25c8:	87 e0       	ldi	r24, 0x07	; 7
    25ca:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    25ce:	88 23       	and	r24, r24
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <m_wii_open+0xd0>
    25d2:	87 c0       	rjmp	.+270    	; 0x26e2 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    25da:	88 23       	and	r24, r24
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <m_wii_open+0xdc>
    25de:	83 c0       	rjmp	.+262    	; 0x26e6 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    25e0:	81 e4       	ldi	r24, 0x41	; 65
    25e2:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    25e6:	88 23       	and	r24, r24
    25e8:	09 f4       	brne	.+2      	; 0x25ec <m_wii_open+0xe8>
    25ea:	7f c0       	rjmp	.+254    	; 0x26ea <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    25ec:	84 e9       	ldi	r24, 0x94	; 148
    25ee:	80 93 bc 00 	sts	0x00BC, r24
    25f2:	83 ec       	ldi	r24, 0xC3	; 195
    25f4:	99 e0       	ldi	r25, 0x09	; 9
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <m_wii_open+0xf2>
    25fa:	00 c0       	rjmp	.+0      	; 0x25fc <m_wii_open+0xf8>
    25fc:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    25fe:	88 e5       	ldi	r24, 0x58	; 88
    2600:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <start_write>
    2604:	88 23       	and	r24, r24
    2606:	09 f4       	brne	.+2      	; 0x260a <m_wii_open+0x106>
    2608:	72 c0       	rjmp	.+228    	; 0x26ee <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    260a:	8a e1       	ldi	r24, 0x1A	; 26
    260c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    2610:	88 23       	and	r24, r24
    2612:	09 f4       	brne	.+2      	; 0x2616 <m_wii_open+0x112>
    2614:	6e c0       	rjmp	.+220    	; 0x26f2 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    2616:	80 e4       	ldi	r24, 0x40	; 64
    2618:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    261c:	88 23       	and	r24, r24
    261e:	09 f4       	brne	.+2      	; 0x2622 <m_wii_open+0x11e>
    2620:	6a c0       	rjmp	.+212    	; 0x26f6 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    2628:	88 23       	and	r24, r24
    262a:	09 f4       	brne	.+2      	; 0x262e <m_wii_open+0x12a>
    262c:	66 c0       	rjmp	.+204    	; 0x26fa <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    262e:	84 e9       	ldi	r24, 0x94	; 148
    2630:	80 93 bc 00 	sts	0x00BC, r24
    2634:	83 ec       	ldi	r24, 0xC3	; 195
    2636:	99 e0       	ldi	r25, 0x09	; 9
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <m_wii_open+0x134>
    263c:	00 c0       	rjmp	.+0      	; 0x263e <m_wii_open+0x13a>
    263e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2640:	88 e5       	ldi	r24, 0x58	; 88
    2642:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <start_write>
    2646:	88 23       	and	r24, r24
    2648:	09 f4       	brne	.+2      	; 0x264c <m_wii_open+0x148>
    264a:	59 c0       	rjmp	.+178    	; 0x26fe <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    264c:	83 e3       	ldi	r24, 0x33	; 51
    264e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    2652:	88 23       	and	r24, r24
    2654:	09 f4       	brne	.+2      	; 0x2658 <m_wii_open+0x154>
    2656:	55 c0       	rjmp	.+170    	; 0x2702 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    2658:	83 e0       	ldi	r24, 0x03	; 3
    265a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    265e:	88 23       	and	r24, r24
    2660:	09 f4       	brne	.+2      	; 0x2664 <m_wii_open+0x160>
    2662:	51 c0       	rjmp	.+162    	; 0x2706 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2664:	84 e9       	ldi	r24, 0x94	; 148
    2666:	80 93 bc 00 	sts	0x00BC, r24
    266a:	83 ec       	ldi	r24, 0xC3	; 195
    266c:	99 e0       	ldi	r25, 0x09	; 9
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <m_wii_open+0x16a>
    2672:	00 c0       	rjmp	.+0      	; 0x2674 <m_wii_open+0x170>
    2674:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2676:	88 e5       	ldi	r24, 0x58	; 88
    2678:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <start_write>
    267c:	88 23       	and	r24, r24
    267e:	09 f4       	brne	.+2      	; 0x2682 <m_wii_open+0x17e>
    2680:	44 c0       	rjmp	.+136    	; 0x270a <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    2682:	80 e3       	ldi	r24, 0x30	; 48
    2684:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    2688:	88 23       	and	r24, r24
    268a:	09 f4       	brne	.+2      	; 0x268e <m_wii_open+0x18a>
    268c:	40 c0       	rjmp	.+128    	; 0x270e <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    268e:	88 e0       	ldi	r24, 0x08	; 8
    2690:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    2694:	88 23       	and	r24, r24
    2696:	e9 f1       	breq	.+122    	; 0x2712 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2698:	84 e9       	ldi	r24, 0x94	; 148
    269a:	80 93 bc 00 	sts	0x00BC, r24
    269e:	83 ec       	ldi	r24, 0xC3	; 195
    26a0:	99 e0       	ldi	r25, 0x09	; 9
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <m_wii_open+0x19e>
    26a6:	00 c0       	rjmp	.+0      	; 0x26a8 <m_wii_open+0x1a4>
    26a8:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2712:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2714:	08 95       	ret

00002716 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2716:	cf 93       	push	r28
    2718:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    271a:	84 ea       	ldi	r24, 0xA4	; 164
    271c:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    2720:	0e 94 4b 12 	call	0x2496	; 0x2496 <twi_wait>
    2724:	88 23       	and	r24, r24
    2726:	69 f0       	breq	.+26     	; 0x2742 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2728:	8c 2f       	mov	r24, r28
    272a:	88 0f       	add	r24, r24
    272c:	8f 5f       	subi	r24, 0xFF	; 255
    272e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2732:	88 34       	cpi	r24, 0x48	; 72
    2734:	29 f4       	brne	.+10     	; 0x2740 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2736:	84 e9       	ldi	r24, 0x94	; 148
    2738:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	01 c0       	rjmp	.+2      	; 0x2742 <start_read+0x2c>
	}	
	return 1;	// success
    2740:	81 e0       	ldi	r24, 0x01	; 1
}	
    2742:	cf 91       	pop	r28
    2744:	08 95       	ret

00002746 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2746:	0f 93       	push	r16
    2748:	1f 93       	push	r17
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	60 97       	sbiw	r28, 0x10	; 16
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	cd bf       	out	0x3d, r28	; 61
    275e:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2760:	fe 01       	movw	r30, r28
    2762:	31 96       	adiw	r30, 0x01	; 1
    2764:	80 e1       	ldi	r24, 0x10	; 16
    2766:	df 01       	movw	r26, r30
    2768:	1d 92       	st	X+, r1
    276a:	8a 95       	dec	r24
    276c:	e9 f7       	brne	.-6      	; 0x2768 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    276e:	88 e5       	ldi	r24, 0x58	; 88
    2770:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <start_write>
    2774:	88 23       	and	r24, r24
    2776:	09 f4       	brne	.+2      	; 0x277a <m_wii_read+0x34>
    2778:	69 c0       	rjmp	.+210    	; 0x284c <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    277a:	86 e3       	ldi	r24, 0x36	; 54
    277c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <send_byte>
    2780:	88 23       	and	r24, r24
    2782:	09 f4       	brne	.+2      	; 0x2786 <m_wii_read+0x40>
    2784:	65 c0       	rjmp	.+202    	; 0x2850 <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2786:	84 e9       	ldi	r24, 0x94	; 148
    2788:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    278c:	b8 e0       	ldi	r27, 0x08	; 8
    278e:	ba 95       	dec	r27
    2790:	f1 f7       	brne	.-4      	; 0x278e <m_wii_read+0x48>
    2792:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2794:	88 e5       	ldi	r24, 0x58	; 88
    2796:	0e 94 8b 13 	call	0x2716	; 0x2716 <start_read>
    279a:	88 23       	and	r24, r24
    279c:	09 f4       	brne	.+2      	; 0x27a0 <m_wii_read+0x5a>
    279e:	5a c0       	rjmp	.+180    	; 0x2854 <m_wii_read+0x10e>
    27a0:	be 01       	movw	r22, r28
    27a2:	6f 5f       	subi	r22, 0xFF	; 255
    27a4:	7f 4f       	sbci	r23, 0xFF	; 255
    27a6:	ae 01       	movw	r20, r28
    27a8:	40 5f       	subi	r20, 0xF0	; 240
    27aa:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    27ac:	ec eb       	ldi	r30, 0xBC	; 188
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    27b2:	2b eb       	ldi	r18, 0xBB	; 187
    27b4:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    27b6:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    27b8:	90 81       	ld	r25, Z
    27ba:	99 23       	and	r25, r25
    27bc:	ec f7       	brge	.-6      	; 0x27b8 <m_wii_read+0x72>
		temp[i] = TWDR;
    27be:	d9 01       	movw	r26, r18
    27c0:	9c 91       	ld	r25, X
    27c2:	db 01       	movw	r26, r22
    27c4:	9d 93       	st	X+, r25
    27c6:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    27c8:	a4 17       	cp	r26, r20
    27ca:	b5 07       	cpc	r27, r21
    27cc:	a1 f7       	brne	.-24     	; 0x27b6 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    27ce:	84 e8       	ldi	r24, 0x84	; 132
    27d0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    27d4:	ec eb       	ldi	r30, 0xBC	; 188
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	88 23       	and	r24, r24
    27dc:	ec f7       	brge	.-6      	; 0x27d8 <m_wii_read+0x92>
	temp[15] = TWDR;
    27de:	80 91 bb 00 	lds	r24, 0x00BB
    27e2:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    27e4:	84 e9       	ldi	r24, 0x94	; 148
    27e6:	80 93 bc 00 	sts	0x00BC, r24
    27ea:	be 01       	movw	r22, r28
    27ec:	6c 5f       	subi	r22, 0xFC	; 252
    27ee:	7f 4f       	sbci	r23, 0xFF	; 255
    27f0:	f8 01       	movw	r30, r16
    27f2:	08 5e       	subi	r16, 0xE8	; 232
    27f4:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    27f6:	db 01       	movw	r26, r22
    27f8:	2c 91       	ld	r18, X
    27fa:	32 2f       	mov	r19, r18
    27fc:	30 73       	andi	r19, 0x30	; 48
    27fe:	cb 01       	movw	r24, r22
    2800:	02 97       	sbiw	r24, 0x02	; 2
    2802:	dc 01       	movw	r26, r24
    2804:	8c 91       	ld	r24, X
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	b0 e1       	ldi	r27, 0x10	; 16
    280a:	3b 9f       	mul	r19, r27
    280c:	80 0d       	add	r24, r0
    280e:	91 1d       	adc	r25, r1
    2810:	11 24       	eor	r1, r1
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2816:	42 2f       	mov	r20, r18
    2818:	40 7c       	andi	r20, 0xC0	; 192
    281a:	50 e0       	ldi	r21, 0x00	; 0
    281c:	44 0f       	add	r20, r20
    281e:	55 1f       	adc	r21, r21
    2820:	44 0f       	add	r20, r20
    2822:	55 1f       	adc	r21, r21
    2824:	cb 01       	movw	r24, r22
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	dc 01       	movw	r26, r24
    282a:	8c 91       	ld	r24, X
    282c:	48 0f       	add	r20, r24
    282e:	51 1d       	adc	r21, r1
    2830:	53 83       	std	Z+3, r21	; 0x03
    2832:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2834:	2f 70       	andi	r18, 0x0F	; 15
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	35 83       	std	Z+5, r19	; 0x05
    283a:	24 83       	std	Z+4, r18	; 0x04
    283c:	6d 5f       	subi	r22, 0xFD	; 253
    283e:	7f 4f       	sbci	r23, 0xFF	; 255
    2840:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2842:	e0 17       	cp	r30, r16
    2844:	f1 07       	cpc	r31, r17
    2846:	b9 f6       	brne	.-82     	; 0x27f6 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	05 c0       	rjmp	.+10     	; 0x2856 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	03 c0       	rjmp	.+6      	; 0x2856 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	01 c0       	rjmp	.+2      	; 0x2856 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2854:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2856:	60 96       	adiw	r28, 0x10	; 16
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	08 95       	ret

0000286c <get_puck_location>:
Public Functions
************************************************************/

/* Returns x,y, location of puck (angle more accurate) */
int get_puck_location(float* puck_buffer, int self, float x_goal)
{
    286c:	2f 92       	push	r2
    286e:	3f 92       	push	r3
    2870:	4f 92       	push	r4
    2872:	5f 92       	push	r5
    2874:	6f 92       	push	r6
    2876:	7f 92       	push	r7
    2878:	8f 92       	push	r8
    287a:	9f 92       	push	r9
    287c:	af 92       	push	r10
    287e:	bf 92       	push	r11
    2880:	cf 92       	push	r12
    2882:	df 92       	push	r13
    2884:	ef 92       	push	r14
    2886:	ff 92       	push	r15
    2888:	0f 93       	push	r16
    288a:	1f 93       	push	r17
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	6a 97       	sbiw	r28, 0x1a	; 26
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	9c 8b       	std	Y+20, r25	; 0x14
    28a2:	8b 8b       	std	Y+19, r24	; 0x13
    28a4:	7e 8b       	std	Y+22, r23	; 0x16
    28a6:	6d 8b       	std	Y+21, r22	; 0x15
    28a8:	2f 8b       	std	Y+23, r18	; 0x17
    28aa:	38 8f       	std	Y+24, r19	; 0x18
    28ac:	49 8f       	std	Y+25, r20	; 0x19
    28ae:	5a 8f       	std	Y+26, r21	; 0x1a
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta
    28b0:	ce 01       	movw	r24, r28
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	0e 94 06 0b 	call	0x160c	; 0x160c <get_position>
    28b8:	0f 2e       	mov	r0, r31
    28ba:	f5 ed       	ldi	r31, 0xD5	; 213
    28bc:	8f 2e       	mov	r8, r31
    28be:	f1 e0       	ldi	r31, 0x01	; 1
    28c0:	9f 2e       	mov	r9, r31
    28c2:	f0 2d       	mov	r31, r0
    28c4:	0f 2e       	mov	r0, r31
    28c6:	f9 e3       	ldi	r31, 0x39	; 57
    28c8:	af 2e       	mov	r10, r31
    28ca:	f1 e0       	ldi	r31, 0x01	; 1
    28cc:	bf 2e       	mov	r11, r31
    28ce:	f0 2d       	mov	r31, r0
	int max_val = 0;
	static int had_seen = 0;
	int max_index = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<7; i++){
    28d0:	e1 2c       	mov	r14, r1
    28d2:	f1 2c       	mov	r15, r1
	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	static int had_seen = 0;
	int max_index = 0;
	int scaler = 0;
	float global_theta = 0;
    28d4:	1d 86       	std	Y+13, r1	; 0x0d
    28d6:	1e 86       	std	Y+14, r1	; 0x0e
    28d8:	1f 86       	std	Y+15, r1	; 0x0f
    28da:	18 8a       	std	Y+16, r1	; 0x10

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	static int had_seen = 0;
	int max_index = 0;
	int scaler = 0;
    28dc:	c1 2c       	mov	r12, r1
    28de:	d1 2c       	mov	r13, r1
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	static int had_seen = 0;
	int max_index = 0;
    28e0:	1a 8a       	std	Y+18, r1	; 0x12
    28e2:	19 8a       	std	Y+17, r1	; 0x11
{
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
    28e4:	21 2c       	mov	r2, r1
    28e6:	31 2c       	mov	r3, r1
	static int had_seen = 0;
	int max_index = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<7; i++){
		scaler += transistor_vals[i];
    28e8:	f4 01       	movw	r30, r8
    28ea:	01 91       	ld	r16, Z+
    28ec:	11 91       	ld	r17, Z+
    28ee:	4f 01       	movw	r8, r30
    28f0:	c0 0e       	add	r12, r16
    28f2:	d1 1e       	adc	r13, r17
		global_theta += transistor_angles[i] * (float)transistor_vals[i];
    28f4:	f5 01       	movw	r30, r10
    28f6:	41 90       	ld	r4, Z+
    28f8:	51 90       	ld	r5, Z+
    28fa:	61 90       	ld	r6, Z+
    28fc:	71 90       	ld	r7, Z+
    28fe:	5f 01       	movw	r10, r30
    2900:	b8 01       	movw	r22, r16
    2902:	01 2e       	mov	r0, r17
    2904:	00 0c       	add	r0, r0
    2906:	88 0b       	sbc	r24, r24
    2908:	99 0b       	sbc	r25, r25
    290a:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
    290e:	9b 01       	movw	r18, r22
    2910:	ac 01       	movw	r20, r24
    2912:	c3 01       	movw	r24, r6
    2914:	b2 01       	movw	r22, r4
    2916:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    291a:	9b 01       	movw	r18, r22
    291c:	ac 01       	movw	r20, r24
    291e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2920:	7e 85       	ldd	r23, Y+14	; 0x0e
    2922:	8f 85       	ldd	r24, Y+15	; 0x0f
    2924:	98 89       	ldd	r25, Y+16	; 0x10
    2926:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
    292a:	6d 87       	std	Y+13, r22	; 0x0d
    292c:	7e 87       	std	Y+14, r23	; 0x0e
    292e:	8f 87       	std	Y+15, r24	; 0x0f
    2930:	98 8b       	std	Y+16, r25	; 0x10

		if(transistor_vals[i]>max_val){
    2932:	20 16       	cp	r2, r16
    2934:	31 06       	cpc	r3, r17
    2936:	1c f4       	brge	.+6      	; 0x293e <get_puck_location+0xd2>
    2938:	fa 8a       	std	Y+18, r15	; 0x12
    293a:	e9 8a       	std	Y+17, r14	; 0x11
			max_val = transistor_vals[i];
    293c:	18 01       	movw	r2, r16
	int max_val = 0;
	static int had_seen = 0;
	int max_index = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<7; i++){
    293e:	ff ef       	ldi	r31, 0xFF	; 255
    2940:	ef 1a       	sub	r14, r31
    2942:	ff 0a       	sbc	r15, r31
    2944:	27 e0       	ldi	r18, 0x07	; 7
    2946:	e2 16       	cp	r14, r18
    2948:	f1 04       	cpc	r15, r1
    294a:	71 f6       	brne	.-100    	; 0x28e8 <get_puck_location+0x7c>
    294c:	31 01       	movw	r6, r2
		}
	}

	global_theta = global_theta/((float)scaler);
	
	if (max_index > 6){
    294e:	89 89       	ldd	r24, Y+17	; 0x11
    2950:	9a 89       	ldd	r25, Y+18	; 0x12
    2952:	07 97       	sbiw	r24, 0x07	; 7
    2954:	7c f4       	brge	.+30     	; 0x2974 <get_puck_location+0x108>
			max_val = transistor_vals[i];
			max_index = i;
		}
	}

	global_theta = global_theta/((float)scaler);
    2956:	b6 01       	movw	r22, r12
    2958:	dd 0c       	add	r13, r13
    295a:	88 0b       	sbc	r24, r24
    295c:	99 0b       	sbc	r25, r25
    295e:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
    2962:	9b 01       	movw	r18, r22
    2964:	ac 01       	movw	r20, r24
    2966:	6d 85       	ldd	r22, Y+13	; 0x0d
    2968:	7e 85       	ldd	r23, Y+14	; 0x0e
    296a:	8f 85       	ldd	r24, Y+15	; 0x0f
    296c:	98 89       	ldd	r25, Y+16	; 0x10
    296e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divsf3>
    2972:	64 c0       	rjmp	.+200    	; 0x2a3c <get_puck_location+0x1d0>
	
	if (max_index > 6){
		scaler = transistor_vals[7]+transistor_vals[8]+transistor_vals[9];
    2974:	e5 ed       	ldi	r30, 0xD5	; 213
    2976:	f1 e0       	ldi	r31, 0x01	; 1
    2978:	a6 84       	ldd	r10, Z+14	; 0x0e
    297a:	b7 84       	ldd	r11, Z+15	; 0x0f
    297c:	e0 88       	ldd	r14, Z+16	; 0x10
    297e:	f1 88       	ldd	r15, Z+17	; 0x11
    2980:	02 89       	ldd	r16, Z+18	; 0x12
    2982:	13 89       	ldd	r17, Z+19	; 0x13
		global_theta = (transistor_angles[7]+2*M_PI)*(float)transistor_vals[7]+(transistor_angles[8]+2*M_PI)*(float)transistor_vals[8]+(transistor_angles[9]+2*M_PI)*(float)transistor_vals[9];
    2984:	b5 01       	movw	r22, r10
    2986:	0b 2c       	mov	r0, r11
    2988:	00 0c       	add	r0, r0
    298a:	88 0b       	sbc	r24, r24
    298c:	99 0b       	sbc	r25, r25
    298e:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
    2992:	2b e3       	ldi	r18, 0x3B	; 59
    2994:	3b e6       	ldi	r19, 0x6B	; 107
    2996:	4e e0       	ldi	r20, 0x0E	; 14
    2998:	51 e4       	ldi	r21, 0x41	; 65
    299a:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    299e:	6d 87       	std	Y+13, r22	; 0x0d
    29a0:	7e 87       	std	Y+14, r23	; 0x0e
    29a2:	8f 87       	std	Y+15, r24	; 0x0f
    29a4:	98 8b       	std	Y+16, r25	; 0x10
    29a6:	b7 01       	movw	r22, r14
    29a8:	0f 2c       	mov	r0, r15
    29aa:	00 0c       	add	r0, r0
    29ac:	88 0b       	sbc	r24, r24
    29ae:	99 0b       	sbc	r25, r25
    29b0:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
    29b4:	24 ee       	ldi	r18, 0xE4	; 228
    29b6:	3b ec       	ldi	r19, 0xCB	; 203
    29b8:	46 e1       	ldi	r20, 0x16	; 22
    29ba:	51 e4       	ldi	r21, 0x41	; 65
    29bc:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    29c0:	9b 01       	movw	r18, r22
    29c2:	ac 01       	movw	r20, r24
    29c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    29c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    29c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ca:	98 89       	ldd	r25, Y+16	; 0x10
    29cc:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
    29d0:	6d 87       	std	Y+13, r22	; 0x0d
    29d2:	7e 87       	std	Y+14, r23	; 0x0e
    29d4:	8f 87       	std	Y+15, r24	; 0x0f
    29d6:	98 8b       	std	Y+16, r25	; 0x10
    29d8:	b8 01       	movw	r22, r16
    29da:	01 2e       	mov	r0, r17
    29dc:	00 0c       	add	r0, r0
    29de:	88 0b       	sbc	r24, r24
    29e0:	99 0b       	sbc	r25, r25
    29e2:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
    29e6:	2f e7       	ldi	r18, 0x7F	; 127
    29e8:	32 e9       	ldi	r19, 0x92	; 146
    29ea:	4a e6       	ldi	r20, 0x6A	; 106
    29ec:	50 e4       	ldi	r21, 0x40	; 64
    29ee:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    29f2:	9b 01       	movw	r18, r22
    29f4:	ac 01       	movw	r20, r24
    29f6:	6d 85       	ldd	r22, Y+13	; 0x0d
    29f8:	7e 85       	ldd	r23, Y+14	; 0x0e
    29fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    29fc:	98 89       	ldd	r25, Y+16	; 0x10
    29fe:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
    2a02:	6d 87       	std	Y+13, r22	; 0x0d
    2a04:	7e 87       	std	Y+14, r23	; 0x0e
    2a06:	8f 87       	std	Y+15, r24	; 0x0f
    2a08:	98 8b       	std	Y+16, r25	; 0x10
	}

	global_theta = global_theta/((float)scaler);
	
	if (max_index > 6){
		scaler = transistor_vals[7]+transistor_vals[8]+transistor_vals[9];
    2a0a:	b5 01       	movw	r22, r10
    2a0c:	6e 0d       	add	r22, r14
    2a0e:	7f 1d       	adc	r23, r15
    2a10:	60 0f       	add	r22, r16
    2a12:	71 1f       	adc	r23, r17
		global_theta = (transistor_angles[7]+2*M_PI)*(float)transistor_vals[7]+(transistor_angles[8]+2*M_PI)*(float)transistor_vals[8]+(transistor_angles[9]+2*M_PI)*(float)transistor_vals[9];
		global_theta = global_theta/scaler; 
    2a14:	07 2e       	mov	r0, r23
    2a16:	00 0c       	add	r0, r0
    2a18:	88 0b       	sbc	r24, r24
    2a1a:	99 0b       	sbc	r25, r25
    2a1c:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
    2a20:	9b 01       	movw	r18, r22
    2a22:	ac 01       	movw	r20, r24
    2a24:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a26:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2a:	98 89       	ldd	r25, Y+16	; 0x10
    2a2c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divsf3>
		global_theta = global_theta - 2*M_PI;
    2a30:	2b ed       	ldi	r18, 0xDB	; 219
    2a32:	3f e0       	ldi	r19, 0x0F	; 15
    2a34:	49 ec       	ldi	r20, 0xC9	; 201
    2a36:	50 e4       	ldi	r21, 0x40	; 64
    2a38:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
	}

	/* If no puck found */
	if(max_val<100){
    2a3c:	e4 e6       	ldi	r30, 0x64	; 100
    2a3e:	6e 16       	cp	r6, r30
    2a40:	71 04       	cpc	r7, r1
    2a42:	0c f0       	brlt	.+2      	; 0x2a46 <get_puck_location+0x1da>
    2a44:	ab c0       	rjmp	.+342    	; 0x2b9c <get_puck_location+0x330>
		if (!had_seen){
    2a46:	20 90 cf 01 	lds	r2, 0x01CF
    2a4a:	30 90 d0 01 	lds	r3, 0x01D0
    2a4e:	21 14       	cp	r2, r1
    2a50:	31 04       	cpc	r3, r1
    2a52:	09 f0       	breq	.+2      	; 0x2a56 <get_puck_location+0x1ea>
    2a54:	00 c1       	rjmp	.+512    	; 0x2c56 <get_puck_location+0x3ea>
			if (self == RED_BULL)
    2a56:	8d 89       	ldd	r24, Y+21	; 0x15
    2a58:	9e 89       	ldd	r25, Y+22	; 0x16
    2a5a:	89 2b       	or	r24, r25
    2a5c:	59 f4       	brne	.+22     	; 0x2a74 <get_puck_location+0x208>
			{
				puck_buffer[0] = 0;
    2a5e:	eb 89       	ldd	r30, Y+19	; 0x13
    2a60:	fc 89       	ldd	r31, Y+20	; 0x14
    2a62:	10 82       	st	Z, r1
    2a64:	11 82       	std	Z+1, r1	; 0x01
    2a66:	12 82       	std	Z+2, r1	; 0x02
    2a68:	13 82       	std	Z+3, r1	; 0x03
				puck_buffer[1] = 0;
    2a6a:	14 82       	std	Z+4, r1	; 0x04
    2a6c:	15 82       	std	Z+5, r1	; 0x05
    2a6e:	16 82       	std	Z+6, r1	; 0x06
    2a70:	17 82       	std	Z+7, r1	; 0x07
    2a72:	f3 c0       	rjmp	.+486    	; 0x2c5a <get_puck_location+0x3ee>
			}
			if (self == GREEN_MONSTER)
    2a74:	8d 89       	ldd	r24, Y+21	; 0x15
    2a76:	9e 89       	ldd	r25, Y+22	; 0x16
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	09 f0       	breq	.+2      	; 0x2a7e <get_puck_location+0x212>
    2a7c:	4e c0       	rjmp	.+156    	; 0x2b1a <get_puck_location+0x2ae>
			{
				puck_buffer[0] = -(fabs(x_goal) - 75)*((x_goal > 0) - (x_goal < 0));
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	46 e9       	ldi	r20, 0x96	; 150
    2a84:	52 e4       	ldi	r21, 0x42	; 66
    2a86:	6f 89       	ldd	r22, Y+23	; 0x17
    2a88:	78 8d       	ldd	r23, Y+24	; 0x18
    2a8a:	89 8d       	ldd	r24, Y+25	; 0x19
    2a8c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a8e:	9f 77       	andi	r25, 0x7F	; 127
    2a90:	0e 94 0a 18 	call	0x3014	; 0x3014 <__subsf3>
    2a94:	4b 01       	movw	r8, r22
    2a96:	5c 01       	movw	r10, r24
    2a98:	b7 fa       	bst	r11, 7
    2a9a:	b0 94       	com	r11
    2a9c:	b7 f8       	bld	r11, 7
    2a9e:	b0 94       	com	r11
    2aa0:	01 e0       	ldi	r16, 0x01	; 1
    2aa2:	10 e0       	ldi	r17, 0x00	; 0
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	a9 01       	movw	r20, r18
    2aaa:	6f 89       	ldd	r22, Y+23	; 0x17
    2aac:	78 8d       	ldd	r23, Y+24	; 0x18
    2aae:	89 8d       	ldd	r24, Y+25	; 0x19
    2ab0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ab2:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__gesf2>
    2ab6:	18 16       	cp	r1, r24
    2ab8:	14 f0       	brlt	.+4      	; 0x2abe <get_puck_location+0x252>
    2aba:	00 e0       	ldi	r16, 0x00	; 0
    2abc:	10 e0       	ldi	r17, 0x00	; 0
    2abe:	ee 24       	eor	r14, r14
    2ac0:	e3 94       	inc	r14
    2ac2:	f1 2c       	mov	r15, r1
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	a9 01       	movw	r20, r18
    2aca:	6f 89       	ldd	r22, Y+23	; 0x17
    2acc:	78 8d       	ldd	r23, Y+24	; 0x18
    2ace:	89 8d       	ldd	r24, Y+25	; 0x19
    2ad0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ad2:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
    2ad6:	88 23       	and	r24, r24
    2ad8:	14 f0       	brlt	.+4      	; 0x2ade <get_puck_location+0x272>
    2ada:	e1 2c       	mov	r14, r1
    2adc:	f1 2c       	mov	r15, r1
    2ade:	b8 01       	movw	r22, r16
    2ae0:	6e 19       	sub	r22, r14
    2ae2:	7f 09       	sbc	r23, r15
    2ae4:	07 2e       	mov	r0, r23
    2ae6:	00 0c       	add	r0, r0
    2ae8:	88 0b       	sbc	r24, r24
    2aea:	99 0b       	sbc	r25, r25
    2aec:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
    2af0:	9b 01       	movw	r18, r22
    2af2:	ac 01       	movw	r20, r24
    2af4:	c5 01       	movw	r24, r10
    2af6:	b4 01       	movw	r22, r8
    2af8:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    2afc:	eb 89       	ldd	r30, Y+19	; 0x13
    2afe:	fc 89       	ldd	r31, Y+20	; 0x14
    2b00:	60 83       	st	Z, r22
    2b02:	71 83       	std	Z+1, r23	; 0x01
    2b04:	82 83       	std	Z+2, r24	; 0x02
    2b06:	93 83       	std	Z+3, r25	; 0x03
				puck_buffer[1] = -10;
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a0 e2       	ldi	r26, 0x20	; 32
    2b0e:	b1 ec       	ldi	r27, 0xC1	; 193
    2b10:	84 83       	std	Z+4, r24	; 0x04
    2b12:	95 83       	std	Z+5, r25	; 0x05
    2b14:	a6 83       	std	Z+6, r26	; 0x06
    2b16:	b7 83       	std	Z+7, r27	; 0x07
    2b18:	a0 c0       	rjmp	.+320    	; 0x2c5a <get_puck_location+0x3ee>
			}
			if (self == BLUE_WHALE)
    2b1a:	8d 89       	ldd	r24, Y+21	; 0x15
    2b1c:	9e 89       	ldd	r25, Y+22	; 0x16
    2b1e:	02 97       	sbiw	r24, 0x02	; 2
    2b20:	09 f0       	breq	.+2      	; 0x2b24 <get_puck_location+0x2b8>
    2b22:	9b c0       	rjmp	.+310    	; 0x2c5a <get_puck_location+0x3ee>
			{
				puck_buffer[0] = -((x_goal > 0) - (x_goal < 0))*166;
    2b24:	01 e0       	ldi	r16, 0x01	; 1
    2b26:	10 e0       	ldi	r17, 0x00	; 0
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	a9 01       	movw	r20, r18
    2b2e:	6f 89       	ldd	r22, Y+23	; 0x17
    2b30:	78 8d       	ldd	r23, Y+24	; 0x18
    2b32:	89 8d       	ldd	r24, Y+25	; 0x19
    2b34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b36:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__cmpsf2>
    2b3a:	88 23       	and	r24, r24
    2b3c:	14 f0       	brlt	.+4      	; 0x2b42 <get_puck_location+0x2d6>
    2b3e:	00 e0       	ldi	r16, 0x00	; 0
    2b40:	10 e0       	ldi	r17, 0x00	; 0
    2b42:	ee 24       	eor	r14, r14
    2b44:	e3 94       	inc	r14
    2b46:	f1 2c       	mov	r15, r1
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	a9 01       	movw	r20, r18
    2b4e:	6f 89       	ldd	r22, Y+23	; 0x17
    2b50:	78 8d       	ldd	r23, Y+24	; 0x18
    2b52:	89 8d       	ldd	r24, Y+25	; 0x19
    2b54:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b56:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__gesf2>
    2b5a:	18 16       	cp	r1, r24
    2b5c:	14 f0       	brlt	.+4      	; 0x2b62 <get_puck_location+0x2f6>
    2b5e:	e1 2c       	mov	r14, r1
    2b60:	f1 2c       	mov	r15, r1
    2b62:	0e 19       	sub	r16, r14
    2b64:	1f 09       	sbc	r17, r15
    2b66:	86 ea       	ldi	r24, 0xA6	; 166
    2b68:	80 9f       	mul	r24, r16
    2b6a:	b0 01       	movw	r22, r0
    2b6c:	81 9f       	mul	r24, r17
    2b6e:	70 0d       	add	r23, r0
    2b70:	11 24       	eor	r1, r1
    2b72:	07 2e       	mov	r0, r23
    2b74:	00 0c       	add	r0, r0
    2b76:	88 0b       	sbc	r24, r24
    2b78:	99 0b       	sbc	r25, r25
    2b7a:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
    2b7e:	eb 89       	ldd	r30, Y+19	; 0x13
    2b80:	fc 89       	ldd	r31, Y+20	; 0x14
    2b82:	60 83       	st	Z, r22
    2b84:	71 83       	std	Z+1, r23	; 0x01
    2b86:	82 83       	std	Z+2, r24	; 0x02
    2b88:	93 83       	std	Z+3, r25	; 0x03
				puck_buffer[1] = 50;
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	a8 e4       	ldi	r26, 0x48	; 72
    2b90:	b2 e4       	ldi	r27, 0x42	; 66
    2b92:	84 83       	std	Z+4, r24	; 0x04
    2b94:	95 83       	std	Z+5, r25	; 0x05
    2b96:	a6 83       	std	Z+6, r26	; 0x06
    2b98:	b7 83       	std	Z+7, r27	; 0x07
    2b9a:	5f c0       	rjmp	.+190    	; 0x2c5a <get_puck_location+0x3ee>
		}
		//had_seen -= 1;
		return 0;
	}
	
	had_seen = 0;
    2b9c:	10 92 d0 01 	sts	0x01D0, r1
    2ba0:	10 92 cf 01 	sts	0x01CF, r1
	/* Create vector pointing to puck in global coordinates */
	global_theta += position_buffer[2];
    2ba4:	29 85       	ldd	r18, Y+9	; 0x09
    2ba6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ba8:	4b 85       	ldd	r20, Y+11	; 0x0b
    2baa:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bac:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
    2bb0:	6b 01       	movw	r12, r22
    2bb2:	7c 01       	movw	r14, r24
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/1023.0 + position_buffer[0]; // Assign X val
    2bb4:	0e 94 ee 18 	call	0x31dc	; 0x31dc <cos>
    2bb8:	4b 01       	movw	r8, r22
    2bba:	5c 01       	movw	r10, r24
    2bbc:	6f ef       	ldi	r22, 0xFF	; 255
    2bbe:	73 e0       	ldi	r23, 0x03	; 3
    2bc0:	66 19       	sub	r22, r6
    2bc2:	77 09       	sbc	r23, r7
    2bc4:	07 2e       	mov	r0, r23
    2bc6:	00 0c       	add	r0, r0
    2bc8:	88 0b       	sbc	r24, r24
    2bca:	99 0b       	sbc	r25, r25
    2bcc:	0e 94 9d 19 	call	0x333a	; 0x333a <__floatsisf>
    2bd0:	2b 01       	movw	r4, r22
    2bd2:	3c 01       	movw	r6, r24
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	4f e2       	ldi	r20, 0x2F	; 47
    2bda:	54 e4       	ldi	r21, 0x44	; 68
    2bdc:	c5 01       	movw	r24, r10
    2bde:	b4 01       	movw	r22, r8
    2be0:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    2be4:	a3 01       	movw	r20, r6
    2be6:	92 01       	movw	r18, r4
    2be8:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 ec       	ldi	r19, 0xC0	; 192
    2bf0:	4f e7       	ldi	r20, 0x7F	; 127
    2bf2:	54 e4       	ldi	r21, 0x44	; 68
    2bf4:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divsf3>
    2bf8:	29 81       	ldd	r18, Y+1	; 0x01
    2bfa:	3a 81       	ldd	r19, Y+2	; 0x02
    2bfc:	4b 81       	ldd	r20, Y+3	; 0x03
    2bfe:	5c 81       	ldd	r21, Y+4	; 0x04
    2c00:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
    2c04:	eb 89       	ldd	r30, Y+19	; 0x13
    2c06:	fc 89       	ldd	r31, Y+20	; 0x14
    2c08:	60 83       	st	Z, r22
    2c0a:	71 83       	std	Z+1, r23	; 0x01
    2c0c:	82 83       	std	Z+2, r24	; 0x02
    2c0e:	93 83       	std	Z+3, r25	; 0x03
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/1023.0 + position_buffer[1]; // Assign Y val
    2c10:	c7 01       	movw	r24, r14
    2c12:	b6 01       	movw	r22, r12
    2c14:	0e 94 2d 1b 	call	0x365a	; 0x365a <sin>
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	4f e2       	ldi	r20, 0x2F	; 47
    2c1e:	54 e4       	ldi	r21, 0x44	; 68
    2c20:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    2c24:	9b 01       	movw	r18, r22
    2c26:	ac 01       	movw	r20, r24
    2c28:	c3 01       	movw	r24, r6
    2c2a:	b2 01       	movw	r22, r4
    2c2c:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 ec       	ldi	r19, 0xC0	; 192
    2c34:	4f e7       	ldi	r20, 0x7F	; 127
    2c36:	54 e4       	ldi	r21, 0x44	; 68
    2c38:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divsf3>
    2c3c:	2d 81       	ldd	r18, Y+5	; 0x05
    2c3e:	3e 81       	ldd	r19, Y+6	; 0x06
    2c40:	4f 81       	ldd	r20, Y+7	; 0x07
    2c42:	58 85       	ldd	r21, Y+8	; 0x08
    2c44:	0e 94 0b 18 	call	0x3016	; 0x3016 <__addsf3>
    2c48:	eb 89       	ldd	r30, Y+19	; 0x13
    2c4a:	fc 89       	ldd	r31, Y+20	; 0x14
    2c4c:	64 83       	std	Z+4, r22	; 0x04
    2c4e:	75 83       	std	Z+5, r23	; 0x05
    2c50:	86 83       	std	Z+6, r24	; 0x06
    2c52:	97 83       	std	Z+7, r25	; 0x07
	return max_val;
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <get_puck_location+0x3ee>
				puck_buffer[0] = -((x_goal > 0) - (x_goal < 0))*166;
				puck_buffer[1] = 50;
			}
		}
		//had_seen -= 1;
		return 0;
    2c56:	21 2c       	mov	r2, r1
    2c58:	31 2c       	mov	r3, r1
	/* Create vector pointing to puck in global coordinates */
	global_theta += position_buffer[2];
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/1023.0 + position_buffer[0]; // Assign X val
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/1023.0 + position_buffer[1]; // Assign Y val
	return max_val;
}
    2c5a:	c1 01       	movw	r24, r2
    2c5c:	6a 96       	adiw	r28, 0x1a	; 26
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
    2c6c:	1f 91       	pop	r17
    2c6e:	0f 91       	pop	r16
    2c70:	ff 90       	pop	r15
    2c72:	ef 90       	pop	r14
    2c74:	df 90       	pop	r13
    2c76:	cf 90       	pop	r12
    2c78:	bf 90       	pop	r11
    2c7a:	af 90       	pop	r10
    2c7c:	9f 90       	pop	r9
    2c7e:	8f 90       	pop	r8
    2c80:	7f 90       	pop	r7
    2c82:	6f 90       	pop	r6
    2c84:	5f 90       	pop	r5
    2c86:	4f 90       	pop	r4
    2c88:	3f 90       	pop	r3
    2c8a:	2f 90       	pop	r2
    2c8c:	08 95       	ret

00002c8e <has_puck>:

/* Return 1 If Has Puck */
char has_puck(void)
{
	static int had_puck = 0;
	if(check(ADCSRA,ADEN)){		//check if ADC is enabled 
    2c8e:	80 91 7a 00 	lds	r24, 0x007A
    2c92:	88 23       	and	r24, r24
    2c94:	14 f5       	brge	.+68     	; 0x2cda <has_puck+0x4c>
		if(((transistor_3 + transistor_9) > HAS_PUCK_THRESHOLD)){
    2c96:	20 91 d3 01 	lds	r18, 0x01D3
    2c9a:	30 91 d4 01 	lds	r19, 0x01D4
    2c9e:	80 91 d1 01 	lds	r24, 0x01D1
    2ca2:	90 91 d2 01 	lds	r25, 0x01D2
    2ca6:	82 0f       	add	r24, r18
    2ca8:	93 1f       	adc	r25, r19
    2caa:	81 39       	cpi	r24, 0x91	; 145
    2cac:	91 40       	sbci	r25, 0x01	; 1
    2cae:	44 f0       	brlt	.+16     	; 0x2cc0 <has_puck+0x32>
			had_puck = 30;
    2cb0:	8e e1       	ldi	r24, 0x1E	; 30
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	90 93 ce 01 	sts	0x01CE, r25
    2cb8:	80 93 cd 01 	sts	0x01CD, r24
			return 1;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	08 95       	ret
		}
		if(had_puck){
    2cc0:	80 91 cd 01 	lds	r24, 0x01CD
    2cc4:	90 91 ce 01 	lds	r25, 0x01CE
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	49 f0       	breq	.+18     	; 0x2cde <has_puck+0x50>
			had_puck -= 1;
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	90 93 ce 01 	sts	0x01CE, r25
    2cd2:	80 93 cd 01 	sts	0x01CD, r24
			return 1;
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	08 95       	ret
		}
	}
	return 0;
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	08 95       	ret
    2cde:	80 e0       	ldi	r24, 0x00	; 0
}
    2ce0:	08 95       	ret

00002ce2 <adc_switch>:
/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated

	clear(ADCSRA,ADEN); // Disable ADC subsystem
    2ce2:	ea e7       	ldi	r30, 0x7A	; 122
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	8f 77       	andi	r24, 0x7F	; 127
    2cea:	80 83       	st	Z, r24
	
	switch(state){
    2cec:	e0 91 e9 01 	lds	r30, 0x01E9
    2cf0:	f0 91 ea 01 	lds	r31, 0x01EA
    2cf4:	ec 30       	cpi	r30, 0x0C	; 12
    2cf6:	f1 05       	cpc	r31, r1
    2cf8:	08 f0       	brcs	.+2      	; 0x2cfc <adc_switch+0x1a>
    2cfa:	82 c1       	rjmp	.+772    	; 0x3000 <adc_switch+0x31e>
    2cfc:	e2 5a       	subi	r30, 0xA2	; 162
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	0c 94 a8 1b 	jmp	0x3750	; 0x3750 <__tablejump2__>

		case 0:
			state = 1;
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	90 93 ea 01 	sts	0x01EA, r25
    2d0c:	80 93 e9 01 	sts	0x01E9, r24
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
    2d10:	eb e7       	ldi	r30, 0x7B	; 123
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	8f 7d       	andi	r24, 0xDF	; 223
    2d18:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 8
    2d1a:	ec e7       	ldi	r30, 0x7C	; 124
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	8b 7f       	andi	r24, 0xFB	; 251
    2d22:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2d24:	80 81       	ld	r24, Z
    2d26:	8d 7f       	andi	r24, 0xFD	; 253
    2d28:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2d2a:	80 81       	ld	r24, Z
    2d2c:	8e 7f       	andi	r24, 0xFE	; 254
    2d2e:	80 83       	st	Z, r24
			transistor_vals[2] = ADC;			
    2d30:	80 91 78 00 	lds	r24, 0x0078
    2d34:	90 91 79 00 	lds	r25, 0x0079
    2d38:	90 93 da 01 	sts	0x01DA, r25
    2d3c:	80 93 d9 01 	sts	0x01D9, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d40:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
			clear(ADMUX,MUX2); // Transistor 8
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[2] = ADC;			
			break;
    2d42:	5f c1       	rjmp	.+702    	; 0x3002 <adc_switch+0x320>

		case 1:
			state = 2;
    2d44:	82 e0       	ldi	r24, 0x02	; 2
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	90 93 ea 01 	sts	0x01EA, r25
    2d4c:	80 93 e9 01 	sts	0x01E9, r24
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
    2d50:	eb e7       	ldi	r30, 0x7B	; 123
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	8f 7d       	andi	r24, 0xDF	; 223
    2d58:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 9
    2d5a:	ec e7       	ldi	r30, 0x7C	; 124
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	80 81       	ld	r24, Z
    2d60:	8b 7f       	andi	r24, 0xFB	; 251
    2d62:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2d64:	80 81       	ld	r24, Z
    2d66:	8d 7f       	andi	r24, 0xFD	; 253
    2d68:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2d6a:	80 81       	ld	r24, Z
    2d6c:	81 60       	ori	r24, 0x01	; 1
    2d6e:	80 83       	st	Z, r24
			transistor_vals[4] = ADC;			
    2d70:	80 91 78 00 	lds	r24, 0x0078
    2d74:	90 91 79 00 	lds	r25, 0x0079
    2d78:	90 93 de 01 	sts	0x01DE, r25
    2d7c:	80 93 dd 01 	sts	0x01DD, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d80:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
			clear(ADMUX,MUX2); // Transistor 9
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[4] = ADC;			
			break;
    2d82:	3f c1       	rjmp	.+638    	; 0x3002 <adc_switch+0x320>

		case 2:
			state = 3;
    2d84:	83 e0       	ldi	r24, 0x03	; 3
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	90 93 ea 01 	sts	0x01EA, r25
    2d8c:	80 93 e9 01 	sts	0x01E9, r24
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
    2d90:	eb e7       	ldi	r30, 0x7B	; 123
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	8f 7d       	andi	r24, 0xDF	; 223
    2d98:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 10
    2d9a:	ec e7       	ldi	r30, 0x7C	; 124
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	84 60       	ori	r24, 0x04	; 4
    2da2:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2da4:	80 81       	ld	r24, Z
    2da6:	8d 7f       	andi	r24, 0xFD	; 253
    2da8:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2daa:	80 81       	ld	r24, Z
    2dac:	8e 7f       	andi	r24, 0xFE	; 254
    2dae:	80 83       	st	Z, r24
			transistor_9 = ADC;			
    2db0:	80 91 78 00 	lds	r24, 0x0078
    2db4:	90 91 79 00 	lds	r25, 0x0079
    2db8:	90 93 d2 01 	sts	0x01D2, r25
    2dbc:	80 93 d1 01 	sts	0x01D1, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
			set(ADMUX,MUX2); // Transistor 10
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_9 = ADC;			
			break;
    2dc2:	1f c1       	rjmp	.+574    	; 0x3002 <adc_switch+0x320>

		case 3:
			state = 4;
    2dc4:	84 e0       	ldi	r24, 0x04	; 4
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	90 93 ea 01 	sts	0x01EA, r25
    2dcc:	80 93 e9 01 	sts	0x01E9, r24
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
    2dd0:	eb e7       	ldi	r30, 0x7B	; 123
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	8f 7d       	andi	r24, 0xDF	; 223
    2dd8:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 13
    2dda:	ec e7       	ldi	r30, 0x7C	; 124
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 81       	ld	r24, Z
    2de0:	84 60       	ori	r24, 0x04	; 4
    2de2:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2de4:	80 81       	ld	r24, Z
    2de6:	8d 7f       	andi	r24, 0xFD	; 253
    2de8:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2dea:	80 81       	ld	r24, Z
    2dec:	81 60       	ori	r24, 0x01	; 1
    2dee:	80 83       	st	Z, r24
			transistor_vals[5] = ADC;			
    2df0:	80 91 78 00 	lds	r24, 0x0078
    2df4:	90 91 79 00 	lds	r25, 0x0079
    2df8:	90 93 e0 01 	sts	0x01E0, r25
    2dfc:	80 93 df 01 	sts	0x01DF, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e00:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
			set(ADMUX,MUX2); // Transistor 13
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[5] = ADC;			
			break;
    2e02:	ff c0       	rjmp	.+510    	; 0x3002 <adc_switch+0x320>

		case 4:
			state = 5;
    2e04:	85 e0       	ldi	r24, 0x05	; 5
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	90 93 ea 01 	sts	0x01EA, r25
    2e0c:	80 93 e9 01 	sts	0x01E9, r24
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
    2e10:	eb e7       	ldi	r30, 0x7B	; 123
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	8f 7d       	andi	r24, 0xDF	; 223
    2e18:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 14
    2e1a:	ec e7       	ldi	r30, 0x7C	; 124
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	84 60       	ori	r24, 0x04	; 4
    2e22:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2e24:	80 81       	ld	r24, Z
    2e26:	82 60       	ori	r24, 0x02	; 2
    2e28:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2e2a:	80 81       	ld	r24, Z
    2e2c:	8e 7f       	andi	r24, 0xFE	; 254
    2e2e:	80 83       	st	Z, r24
			transistor_vals[7] = ADC;			
    2e30:	80 91 78 00 	lds	r24, 0x0078
    2e34:	90 91 79 00 	lds	r25, 0x0079
    2e38:	90 93 e4 01 	sts	0x01E4, r25
    2e3c:	80 93 e3 01 	sts	0x01E3, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e40:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
			set(ADMUX,MUX2); // Transistor 14
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[7] = ADC;			
			break;
    2e42:	df c0       	rjmp	.+446    	; 0x3002 <adc_switch+0x320>

		case 5:
			state = 6;
    2e44:	86 e0       	ldi	r24, 0x06	; 6
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	90 93 ea 01 	sts	0x01EA, r25
    2e4c:	80 93 e9 01 	sts	0x01E9, r24
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
    2e50:	eb e7       	ldi	r30, 0x7B	; 123
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	8f 7d       	andi	r24, 0xDF	; 223
    2e58:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 15
    2e5a:	ec e7       	ldi	r30, 0x7C	; 124
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	84 60       	ori	r24, 0x04	; 4
    2e62:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2e64:	80 81       	ld	r24, Z
    2e66:	82 60       	ori	r24, 0x02	; 2
    2e68:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2e6a:	80 81       	ld	r24, Z
    2e6c:	81 60       	ori	r24, 0x01	; 1
    2e6e:	80 83       	st	Z, r24
			transistor_vals[8] = ADC;			
    2e70:	80 91 78 00 	lds	r24, 0x0078
    2e74:	90 91 79 00 	lds	r25, 0x0079
    2e78:	90 93 e6 01 	sts	0x01E6, r25
    2e7c:	80 93 e5 01 	sts	0x01E5, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e80:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
			set(ADMUX,MUX2); // Transistor 15
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[8] = ADC;			
			break;
    2e82:	bf c0       	rjmp	.+382    	; 0x3002 <adc_switch+0x320>

		case 6:
			state = 7;
    2e84:	87 e0       	ldi	r24, 0x07	; 7
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	90 93 ea 01 	sts	0x01EA, r25
    2e8c:	80 93 e9 01 	sts	0x01E9, r24
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
    2e90:	eb e7       	ldi	r30, 0x7B	; 123
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	80 62       	ori	r24, 0x20	; 32
    2e98:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 1, 16
    2e9a:	ec e7       	ldi	r30, 0x7C	; 124
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	8b 7f       	andi	r24, 0xFB	; 251
    2ea2:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2ea4:	80 81       	ld	r24, Z
    2ea6:	8d 7f       	andi	r24, 0xFD	; 253
    2ea8:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2eaa:	80 81       	ld	r24, Z
    2eac:	8e 7f       	andi	r24, 0xFE	; 254
    2eae:	80 83       	st	Z, r24
			transistor_vals[9] = ADC;			
    2eb0:	80 91 78 00 	lds	r24, 0x0078
    2eb4:	90 91 79 00 	lds	r25, 0x0079
    2eb8:	90 93 e8 01 	sts	0x01E8, r25
    2ebc:	80 93 e7 01 	sts	0x01E7, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
			clear(ADMUX,MUX2); // Transistor 1, 16
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[9] = ADC;			
			break;
    2ec2:	9f c0       	rjmp	.+318    	; 0x3002 <adc_switch+0x320>

		case 7:
			state = 8;
    2ec4:	88 e0       	ldi	r24, 0x08	; 8
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	90 93 ea 01 	sts	0x01EA, r25
    2ecc:	80 93 e9 01 	sts	0x01E9, r24
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
    2ed0:	eb e7       	ldi	r30, 0x7B	; 123
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
    2ed6:	80 62       	ori	r24, 0x20	; 32
    2ed8:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 11, 12
    2eda:	ec e7       	ldi	r30, 0x7C	; 124
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	8b 7f       	andi	r24, 0xFB	; 251
    2ee2:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2ee4:	80 81       	ld	r24, Z
    2ee6:	8d 7f       	andi	r24, 0xFD	; 253
    2ee8:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2eea:	80 81       	ld	r24, Z
    2eec:	81 60       	ori	r24, 0x01	; 1
    2eee:	80 83       	st	Z, r24
			transistor_vals[0] = ADC;			
    2ef0:	80 91 78 00 	lds	r24, 0x0078
    2ef4:	90 91 79 00 	lds	r25, 0x0079
    2ef8:	90 93 d6 01 	sts	0x01D6, r25
    2efc:	80 93 d5 01 	sts	0x01D5, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2f00:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
			clear(ADMUX,MUX2); // Transistor 11, 12
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[0] = ADC;			
			break;
    2f02:	7f c0       	rjmp	.+254    	; 0x3002 <adc_switch+0x320>

		case 8:
			state = 9;
    2f04:	89 e0       	ldi	r24, 0x09	; 9
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	90 93 ea 01 	sts	0x01EA, r25
    2f0c:	80 93 e9 01 	sts	0x01E9, r24
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
    2f10:	eb e7       	ldi	r30, 0x7B	; 123
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	80 62       	ori	r24, 0x20	; 32
    2f18:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
    2f1a:	ec e7       	ldi	r30, 0x7C	; 124
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	8b 7f       	andi	r24, 0xFB	; 251
    2f22:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2f24:	80 81       	ld	r24, Z
    2f26:	82 60       	ori	r24, 0x02	; 2
    2f28:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2f2a:	80 81       	ld	r24, Z
    2f2c:	8e 7f       	andi	r24, 0xFE	; 254
    2f2e:	80 83       	st	Z, r24
			transistor_vals[6] = ADC;			
    2f30:	80 91 78 00 	lds	r24, 0x0078
    2f34:	90 91 79 00 	lds	r25, 0x0079
    2f38:	90 93 e2 01 	sts	0x01E2, r25
    2f3c:	80 93 e1 01 	sts	0x01E1, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2f40:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[6] = ADC;			
			break;
    2f42:	5f c0       	rjmp	.+190    	; 0x3002 <adc_switch+0x320>

		case 9:
			state = 10;
    2f44:	8a e0       	ldi	r24, 0x0A	; 10
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	90 93 ea 01 	sts	0x01EA, r25
    2f4c:	80 93 e9 01 	sts	0x01E9, r24
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
    2f50:	eb e7       	ldi	r30, 0x7B	; 123
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	80 62       	ori	r24, 0x20	; 32
    2f58:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 2
    2f5a:	ec e7       	ldi	r30, 0x7C	; 124
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	8b 7f       	andi	r24, 0xFB	; 251
    2f62:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2f64:	80 81       	ld	r24, Z
    2f66:	82 60       	ori	r24, 0x02	; 2
    2f68:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2f6a:	80 81       	ld	r24, Z
    2f6c:	81 60       	ori	r24, 0x01	; 1
    2f6e:	80 83       	st	Z, r24
			transistor_vals[3] = ADC;			
    2f70:	80 91 78 00 	lds	r24, 0x0078
    2f74:	90 91 79 00 	lds	r25, 0x0079
    2f78:	90 93 dc 01 	sts	0x01DC, r25
    2f7c:	80 93 db 01 	sts	0x01DB, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2f80:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
			clear(ADMUX,MUX2); // Transistor 2
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[3] = ADC;			
			break;
    2f82:	3f c0       	rjmp	.+126    	; 0x3002 <adc_switch+0x320>

		case 10:
			state = 11;
    2f84:	8b e0       	ldi	r24, 0x0B	; 11
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	90 93 ea 01 	sts	0x01EA, r25
    2f8c:	80 93 e9 01 	sts	0x01E9, r24
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
    2f90:	eb e7       	ldi	r30, 0x7B	; 123
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	80 62       	ori	r24, 0x20	; 32
    2f98:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 3
    2f9a:	ec e7       	ldi	r30, 0x7C	; 124
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	84 60       	ori	r24, 0x04	; 4
    2fa2:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2fa4:	80 81       	ld	r24, Z
    2fa6:	8d 7f       	andi	r24, 0xFD	; 253
    2fa8:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2faa:	80 81       	ld	r24, Z
    2fac:	8e 7f       	andi	r24, 0xFE	; 254
    2fae:	80 83       	st	Z, r24
			transistor_vals[1] = ADC;			
    2fb0:	80 91 78 00 	lds	r24, 0x0078
    2fb4:	90 91 79 00 	lds	r25, 0x0079
    2fb8:	90 93 d8 01 	sts	0x01D8, r25
    2fbc:	80 93 d7 01 	sts	0x01D7, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
			set(ADMUX,MUX2); // Transistor 3
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[1] = ADC;			
			break;
    2fc2:	1f c0       	rjmp	.+62     	; 0x3002 <adc_switch+0x320>

		case 11:
			state = 0;
    2fc4:	10 92 ea 01 	sts	0x01EA, r1
    2fc8:	10 92 e9 01 	sts	0x01E9, r1
			set(ADCSRB,MUX5); // Select ADC13 at pin B6
    2fcc:	eb e7       	ldi	r30, 0x7B	; 123
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	80 62       	ori	r24, 0x20	; 32
    2fd4:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 4
    2fd6:	ec e7       	ldi	r30, 0x7C	; 124
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	84 60       	ori	r24, 0x04	; 4
    2fde:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2fe0:	80 81       	ld	r24, Z
    2fe2:	8d 7f       	andi	r24, 0xFD	; 253
    2fe4:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2fe6:	80 81       	ld	r24, Z
    2fe8:	81 60       	ori	r24, 0x01	; 1
    2fea:	80 83       	st	Z, r24
			transistor_3 = ADC;			
    2fec:	80 91 78 00 	lds	r24, 0x0078
    2ff0:	90 91 79 00 	lds	r25, 0x0079
    2ff4:	90 93 d4 01 	sts	0x01D4, r25
    2ff8:	80 93 d3 01 	sts	0x01D3, r24
			return_val = 1;
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
			// m_usb_tx_string("  IR14: ");
			// m_usb_tx_int(transistor_vals[8]);
			// m_usb_tx_string("  IR15: ");
			// m_usb_tx_int(transistor_vals[9]);

			break;
    2ffe:	01 c0       	rjmp	.+2      	; 0x3002 <adc_switch+0x320>
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    3000:	80 e0       	ldi	r24, 0x00	; 0
			// m_usb_tx_int(transistor_vals[9]);

			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
    3002:	ea e7       	ldi	r30, 0x7A	; 122
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	90 81       	ld	r25, Z
    3008:	90 68       	ori	r25, 0x80	; 128
    300a:	90 83       	st	Z, r25
	set(ADCSRA,ADSC); // Begin new conversion
    300c:	90 81       	ld	r25, Z
    300e:	90 64       	ori	r25, 0x40	; 64
    3010:	90 83       	st	Z, r25

	return return_val;
}
    3012:	08 95       	ret

00003014 <__subsf3>:
    3014:	50 58       	subi	r21, 0x80	; 128

00003016 <__addsf3>:
    3016:	bb 27       	eor	r27, r27
    3018:	aa 27       	eor	r26, r26
    301a:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3x>
    301e:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__fp_round>
    3022:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__fp_pscA>
    3026:	38 f0       	brcs	.+14     	; 0x3036 <__addsf3+0x20>
    3028:	0e 94 33 1a 	call	0x3466	; 0x3466 <__fp_pscB>
    302c:	20 f0       	brcs	.+8      	; 0x3036 <__addsf3+0x20>
    302e:	39 f4       	brne	.+14     	; 0x303e <__addsf3+0x28>
    3030:	9f 3f       	cpi	r25, 0xFF	; 255
    3032:	19 f4       	brne	.+6      	; 0x303a <__addsf3+0x24>
    3034:	26 f4       	brtc	.+8      	; 0x303e <__addsf3+0x28>
    3036:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__fp_nan>
    303a:	0e f4       	brtc	.+2      	; 0x303e <__addsf3+0x28>
    303c:	e0 95       	com	r30
    303e:	e7 fb       	bst	r30, 7
    3040:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__fp_inf>

00003044 <__addsf3x>:
    3044:	e9 2f       	mov	r30, r25
    3046:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__fp_split3>
    304a:	58 f3       	brcs	.-42     	; 0x3022 <__addsf3+0xc>
    304c:	ba 17       	cp	r27, r26
    304e:	62 07       	cpc	r22, r18
    3050:	73 07       	cpc	r23, r19
    3052:	84 07       	cpc	r24, r20
    3054:	95 07       	cpc	r25, r21
    3056:	20 f0       	brcs	.+8      	; 0x3060 <__addsf3x+0x1c>
    3058:	79 f4       	brne	.+30     	; 0x3078 <__addsf3x+0x34>
    305a:	a6 f5       	brtc	.+104    	; 0x30c4 <__addsf3x+0x80>
    305c:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__fp_zero>
    3060:	0e f4       	brtc	.+2      	; 0x3064 <__addsf3x+0x20>
    3062:	e0 95       	com	r30
    3064:	0b 2e       	mov	r0, r27
    3066:	ba 2f       	mov	r27, r26
    3068:	a0 2d       	mov	r26, r0
    306a:	0b 01       	movw	r0, r22
    306c:	b9 01       	movw	r22, r18
    306e:	90 01       	movw	r18, r0
    3070:	0c 01       	movw	r0, r24
    3072:	ca 01       	movw	r24, r20
    3074:	a0 01       	movw	r20, r0
    3076:	11 24       	eor	r1, r1
    3078:	ff 27       	eor	r31, r31
    307a:	59 1b       	sub	r21, r25
    307c:	99 f0       	breq	.+38     	; 0x30a4 <__addsf3x+0x60>
    307e:	59 3f       	cpi	r21, 0xF9	; 249
    3080:	50 f4       	brcc	.+20     	; 0x3096 <__addsf3x+0x52>
    3082:	50 3e       	cpi	r21, 0xE0	; 224
    3084:	68 f1       	brcs	.+90     	; 0x30e0 <__addsf3x+0x9c>
    3086:	1a 16       	cp	r1, r26
    3088:	f0 40       	sbci	r31, 0x00	; 0
    308a:	a2 2f       	mov	r26, r18
    308c:	23 2f       	mov	r18, r19
    308e:	34 2f       	mov	r19, r20
    3090:	44 27       	eor	r20, r20
    3092:	58 5f       	subi	r21, 0xF8	; 248
    3094:	f3 cf       	rjmp	.-26     	; 0x307c <__addsf3x+0x38>
    3096:	46 95       	lsr	r20
    3098:	37 95       	ror	r19
    309a:	27 95       	ror	r18
    309c:	a7 95       	ror	r26
    309e:	f0 40       	sbci	r31, 0x00	; 0
    30a0:	53 95       	inc	r21
    30a2:	c9 f7       	brne	.-14     	; 0x3096 <__addsf3x+0x52>
    30a4:	7e f4       	brtc	.+30     	; 0x30c4 <__addsf3x+0x80>
    30a6:	1f 16       	cp	r1, r31
    30a8:	ba 0b       	sbc	r27, r26
    30aa:	62 0b       	sbc	r22, r18
    30ac:	73 0b       	sbc	r23, r19
    30ae:	84 0b       	sbc	r24, r20
    30b0:	ba f0       	brmi	.+46     	; 0x30e0 <__addsf3x+0x9c>
    30b2:	91 50       	subi	r25, 0x01	; 1
    30b4:	a1 f0       	breq	.+40     	; 0x30de <__addsf3x+0x9a>
    30b6:	ff 0f       	add	r31, r31
    30b8:	bb 1f       	adc	r27, r27
    30ba:	66 1f       	adc	r22, r22
    30bc:	77 1f       	adc	r23, r23
    30be:	88 1f       	adc	r24, r24
    30c0:	c2 f7       	brpl	.-16     	; 0x30b2 <__addsf3x+0x6e>
    30c2:	0e c0       	rjmp	.+28     	; 0x30e0 <__addsf3x+0x9c>
    30c4:	ba 0f       	add	r27, r26
    30c6:	62 1f       	adc	r22, r18
    30c8:	73 1f       	adc	r23, r19
    30ca:	84 1f       	adc	r24, r20
    30cc:	48 f4       	brcc	.+18     	; 0x30e0 <__addsf3x+0x9c>
    30ce:	87 95       	ror	r24
    30d0:	77 95       	ror	r23
    30d2:	67 95       	ror	r22
    30d4:	b7 95       	ror	r27
    30d6:	f7 95       	ror	r31
    30d8:	9e 3f       	cpi	r25, 0xFE	; 254
    30da:	08 f0       	brcs	.+2      	; 0x30de <__addsf3x+0x9a>
    30dc:	b0 cf       	rjmp	.-160    	; 0x303e <__addsf3+0x28>
    30de:	93 95       	inc	r25
    30e0:	88 0f       	add	r24, r24
    30e2:	08 f0       	brcs	.+2      	; 0x30e6 <__addsf3x+0xa2>
    30e4:	99 27       	eor	r25, r25
    30e6:	ee 0f       	add	r30, r30
    30e8:	97 95       	ror	r25
    30ea:	87 95       	ror	r24
    30ec:	08 95       	ret
    30ee:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__fp_pscA>
    30f2:	60 f0       	brcs	.+24     	; 0x310c <__addsf3x+0xc8>
    30f4:	80 e8       	ldi	r24, 0x80	; 128
    30f6:	91 e0       	ldi	r25, 0x01	; 1
    30f8:	09 f4       	brne	.+2      	; 0x30fc <__addsf3x+0xb8>
    30fa:	9e ef       	ldi	r25, 0xFE	; 254
    30fc:	0e 94 33 1a 	call	0x3466	; 0x3466 <__fp_pscB>
    3100:	28 f0       	brcs	.+10     	; 0x310c <__addsf3x+0xc8>
    3102:	40 e8       	ldi	r20, 0x80	; 128
    3104:	51 e0       	ldi	r21, 0x01	; 1
    3106:	71 f4       	brne	.+28     	; 0x3124 <atan2+0x10>
    3108:	5e ef       	ldi	r21, 0xFE	; 254
    310a:	0c c0       	rjmp	.+24     	; 0x3124 <atan2+0x10>
    310c:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__fp_nan>
    3110:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__fp_zero>

00003114 <atan2>:
    3114:	e9 2f       	mov	r30, r25
    3116:	e0 78       	andi	r30, 0x80	; 128
    3118:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__fp_split3>
    311c:	40 f3       	brcs	.-48     	; 0x30ee <__addsf3x+0xaa>
    311e:	09 2e       	mov	r0, r25
    3120:	05 2a       	or	r0, r21
    3122:	b1 f3       	breq	.-20     	; 0x3110 <__addsf3x+0xcc>
    3124:	26 17       	cp	r18, r22
    3126:	37 07       	cpc	r19, r23
    3128:	48 07       	cpc	r20, r24
    312a:	59 07       	cpc	r21, r25
    312c:	38 f0       	brcs	.+14     	; 0x313c <atan2+0x28>
    312e:	0e 2e       	mov	r0, r30
    3130:	07 f8       	bld	r0, 7
    3132:	e0 25       	eor	r30, r0
    3134:	69 f0       	breq	.+26     	; 0x3150 <atan2+0x3c>
    3136:	e0 25       	eor	r30, r0
    3138:	e0 64       	ori	r30, 0x40	; 64
    313a:	0a c0       	rjmp	.+20     	; 0x3150 <atan2+0x3c>
    313c:	ef 63       	ori	r30, 0x3F	; 63
    313e:	07 f8       	bld	r0, 7
    3140:	00 94       	com	r0
    3142:	07 fa       	bst	r0, 7
    3144:	db 01       	movw	r26, r22
    3146:	b9 01       	movw	r22, r18
    3148:	9d 01       	movw	r18, r26
    314a:	dc 01       	movw	r26, r24
    314c:	ca 01       	movw	r24, r20
    314e:	ad 01       	movw	r20, r26
    3150:	ef 93       	push	r30
    3152:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3_pse>
    3156:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__fp_round>
    315a:	0e 94 ba 18 	call	0x3174	; 0x3174 <atan>
    315e:	5f 91       	pop	r21
    3160:	55 23       	and	r21, r21
    3162:	39 f0       	breq	.+14     	; 0x3172 <atan2+0x5e>
    3164:	2b ed       	ldi	r18, 0xDB	; 219
    3166:	3f e0       	ldi	r19, 0x0F	; 15
    3168:	49 e4       	ldi	r20, 0x49	; 73
    316a:	50 fd       	sbrc	r21, 0
    316c:	49 ec       	ldi	r20, 0xC9	; 201
    316e:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__addsf3>
    3172:	08 95       	ret

00003174 <atan>:
    3174:	df 93       	push	r29
    3176:	dd 27       	eor	r29, r29
    3178:	b9 2f       	mov	r27, r25
    317a:	bf 77       	andi	r27, 0x7F	; 127
    317c:	40 e8       	ldi	r20, 0x80	; 128
    317e:	5f e3       	ldi	r21, 0x3F	; 63
    3180:	16 16       	cp	r1, r22
    3182:	17 06       	cpc	r1, r23
    3184:	48 07       	cpc	r20, r24
    3186:	5b 07       	cpc	r21, r27
    3188:	18 f4       	brcc	.+6      	; 0x3190 <atan+0x1c>
    318a:	d9 2f       	mov	r29, r25
    318c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <inverse>
    3190:	9f 93       	push	r25
    3192:	8f 93       	push	r24
    3194:	7f 93       	push	r23
    3196:	6f 93       	push	r22
    3198:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <square>
    319c:	e4 ed       	ldi	r30, 0xD4	; 212
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	0e 94 05 1a 	call	0x340a	; 0x340a <__fp_powser>
    31a4:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__fp_round>
    31a8:	2f 91       	pop	r18
    31aa:	3f 91       	pop	r19
    31ac:	4f 91       	pop	r20
    31ae:	5f 91       	pop	r21
    31b0:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__mulsf3x>
    31b4:	dd 23       	and	r29, r29
    31b6:	51 f0       	breq	.+20     	; 0x31cc <atan+0x58>
    31b8:	90 58       	subi	r25, 0x80	; 128
    31ba:	a2 ea       	ldi	r26, 0xA2	; 162
    31bc:	2a ed       	ldi	r18, 0xDA	; 218
    31be:	3f e0       	ldi	r19, 0x0F	; 15
    31c0:	49 ec       	ldi	r20, 0xC9	; 201
    31c2:	5f e3       	ldi	r21, 0x3F	; 63
    31c4:	d0 78       	andi	r29, 0x80	; 128
    31c6:	5d 27       	eor	r21, r29
    31c8:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3x>
    31cc:	df 91       	pop	r29
    31ce:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__fp_round>

000031d2 <__cmpsf2>:
    31d2:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__fp_cmp>
    31d6:	08 f4       	brcc	.+2      	; 0x31da <__cmpsf2+0x8>
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	08 95       	ret

000031dc <cos>:
    31dc:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__fp_rempio2>
    31e0:	e3 95       	inc	r30
    31e2:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__fp_sinus>

000031e6 <__divsf3>:
    31e6:	0e 94 07 19 	call	0x320e	; 0x320e <__divsf3x>
    31ea:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__fp_round>
    31ee:	0e 94 33 1a 	call	0x3466	; 0x3466 <__fp_pscB>
    31f2:	58 f0       	brcs	.+22     	; 0x320a <__divsf3+0x24>
    31f4:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__fp_pscA>
    31f8:	40 f0       	brcs	.+16     	; 0x320a <__divsf3+0x24>
    31fa:	29 f4       	brne	.+10     	; 0x3206 <__divsf3+0x20>
    31fc:	5f 3f       	cpi	r21, 0xFF	; 255
    31fe:	29 f0       	breq	.+10     	; 0x320a <__divsf3+0x24>
    3200:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__fp_inf>
    3204:	51 11       	cpse	r21, r1
    3206:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__fp_szero>
    320a:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__fp_nan>

0000320e <__divsf3x>:
    320e:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__fp_split3>
    3212:	68 f3       	brcs	.-38     	; 0x31ee <__divsf3+0x8>

00003214 <__divsf3_pse>:
    3214:	99 23       	and	r25, r25
    3216:	b1 f3       	breq	.-20     	; 0x3204 <__divsf3+0x1e>
    3218:	55 23       	and	r21, r21
    321a:	91 f3       	breq	.-28     	; 0x3200 <__divsf3+0x1a>
    321c:	95 1b       	sub	r25, r21
    321e:	55 0b       	sbc	r21, r21
    3220:	bb 27       	eor	r27, r27
    3222:	aa 27       	eor	r26, r26
    3224:	62 17       	cp	r22, r18
    3226:	73 07       	cpc	r23, r19
    3228:	84 07       	cpc	r24, r20
    322a:	38 f0       	brcs	.+14     	; 0x323a <__divsf3_pse+0x26>
    322c:	9f 5f       	subi	r25, 0xFF	; 255
    322e:	5f 4f       	sbci	r21, 0xFF	; 255
    3230:	22 0f       	add	r18, r18
    3232:	33 1f       	adc	r19, r19
    3234:	44 1f       	adc	r20, r20
    3236:	aa 1f       	adc	r26, r26
    3238:	a9 f3       	breq	.-22     	; 0x3224 <__divsf3_pse+0x10>
    323a:	35 d0       	rcall	.+106    	; 0x32a6 <__divsf3_pse+0x92>
    323c:	0e 2e       	mov	r0, r30
    323e:	3a f0       	brmi	.+14     	; 0x324e <__divsf3_pse+0x3a>
    3240:	e0 e8       	ldi	r30, 0x80	; 128
    3242:	32 d0       	rcall	.+100    	; 0x32a8 <__divsf3_pse+0x94>
    3244:	91 50       	subi	r25, 0x01	; 1
    3246:	50 40       	sbci	r21, 0x00	; 0
    3248:	e6 95       	lsr	r30
    324a:	00 1c       	adc	r0, r0
    324c:	ca f7       	brpl	.-14     	; 0x3240 <__divsf3_pse+0x2c>
    324e:	2b d0       	rcall	.+86     	; 0x32a6 <__divsf3_pse+0x92>
    3250:	fe 2f       	mov	r31, r30
    3252:	29 d0       	rcall	.+82     	; 0x32a6 <__divsf3_pse+0x92>
    3254:	66 0f       	add	r22, r22
    3256:	77 1f       	adc	r23, r23
    3258:	88 1f       	adc	r24, r24
    325a:	bb 1f       	adc	r27, r27
    325c:	26 17       	cp	r18, r22
    325e:	37 07       	cpc	r19, r23
    3260:	48 07       	cpc	r20, r24
    3262:	ab 07       	cpc	r26, r27
    3264:	b0 e8       	ldi	r27, 0x80	; 128
    3266:	09 f0       	breq	.+2      	; 0x326a <__divsf3_pse+0x56>
    3268:	bb 0b       	sbc	r27, r27
    326a:	80 2d       	mov	r24, r0
    326c:	bf 01       	movw	r22, r30
    326e:	ff 27       	eor	r31, r31
    3270:	93 58       	subi	r25, 0x83	; 131
    3272:	5f 4f       	sbci	r21, 0xFF	; 255
    3274:	3a f0       	brmi	.+14     	; 0x3284 <__divsf3_pse+0x70>
    3276:	9e 3f       	cpi	r25, 0xFE	; 254
    3278:	51 05       	cpc	r21, r1
    327a:	78 f0       	brcs	.+30     	; 0x329a <__divsf3_pse+0x86>
    327c:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__fp_inf>
    3280:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__fp_szero>
    3284:	5f 3f       	cpi	r21, 0xFF	; 255
    3286:	e4 f3       	brlt	.-8      	; 0x3280 <__divsf3_pse+0x6c>
    3288:	98 3e       	cpi	r25, 0xE8	; 232
    328a:	d4 f3       	brlt	.-12     	; 0x3280 <__divsf3_pse+0x6c>
    328c:	86 95       	lsr	r24
    328e:	77 95       	ror	r23
    3290:	67 95       	ror	r22
    3292:	b7 95       	ror	r27
    3294:	f7 95       	ror	r31
    3296:	9f 5f       	subi	r25, 0xFF	; 255
    3298:	c9 f7       	brne	.-14     	; 0x328c <__divsf3_pse+0x78>
    329a:	88 0f       	add	r24, r24
    329c:	91 1d       	adc	r25, r1
    329e:	96 95       	lsr	r25
    32a0:	87 95       	ror	r24
    32a2:	97 f9       	bld	r25, 7
    32a4:	08 95       	ret
    32a6:	e1 e0       	ldi	r30, 0x01	; 1
    32a8:	66 0f       	add	r22, r22
    32aa:	77 1f       	adc	r23, r23
    32ac:	88 1f       	adc	r24, r24
    32ae:	bb 1f       	adc	r27, r27
    32b0:	62 17       	cp	r22, r18
    32b2:	73 07       	cpc	r23, r19
    32b4:	84 07       	cpc	r24, r20
    32b6:	ba 07       	cpc	r27, r26
    32b8:	20 f0       	brcs	.+8      	; 0x32c2 <__divsf3_pse+0xae>
    32ba:	62 1b       	sub	r22, r18
    32bc:	73 0b       	sbc	r23, r19
    32be:	84 0b       	sbc	r24, r20
    32c0:	ba 0b       	sbc	r27, r26
    32c2:	ee 1f       	adc	r30, r30
    32c4:	88 f7       	brcc	.-30     	; 0x32a8 <__divsf3_pse+0x94>
    32c6:	e0 95       	com	r30
    32c8:	08 95       	ret

000032ca <__fixsfsi>:
    32ca:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__fixunssfsi>
    32ce:	68 94       	set
    32d0:	b1 11       	cpse	r27, r1
    32d2:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__fp_szero>
    32d6:	08 95       	ret

000032d8 <__fixunssfsi>:
    32d8:	0e 94 92 1a 	call	0x3524	; 0x3524 <__fp_splitA>
    32dc:	88 f0       	brcs	.+34     	; 0x3300 <__fixunssfsi+0x28>
    32de:	9f 57       	subi	r25, 0x7F	; 127
    32e0:	98 f0       	brcs	.+38     	; 0x3308 <__fixunssfsi+0x30>
    32e2:	b9 2f       	mov	r27, r25
    32e4:	99 27       	eor	r25, r25
    32e6:	b7 51       	subi	r27, 0x17	; 23
    32e8:	b0 f0       	brcs	.+44     	; 0x3316 <__fixunssfsi+0x3e>
    32ea:	e1 f0       	breq	.+56     	; 0x3324 <__fixunssfsi+0x4c>
    32ec:	66 0f       	add	r22, r22
    32ee:	77 1f       	adc	r23, r23
    32f0:	88 1f       	adc	r24, r24
    32f2:	99 1f       	adc	r25, r25
    32f4:	1a f0       	brmi	.+6      	; 0x32fc <__fixunssfsi+0x24>
    32f6:	ba 95       	dec	r27
    32f8:	c9 f7       	brne	.-14     	; 0x32ec <__fixunssfsi+0x14>
    32fa:	14 c0       	rjmp	.+40     	; 0x3324 <__fixunssfsi+0x4c>
    32fc:	b1 30       	cpi	r27, 0x01	; 1
    32fe:	91 f0       	breq	.+36     	; 0x3324 <__fixunssfsi+0x4c>
    3300:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__fp_zero>
    3304:	b1 e0       	ldi	r27, 0x01	; 1
    3306:	08 95       	ret
    3308:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__fp_zero>
    330c:	67 2f       	mov	r22, r23
    330e:	78 2f       	mov	r23, r24
    3310:	88 27       	eor	r24, r24
    3312:	b8 5f       	subi	r27, 0xF8	; 248
    3314:	39 f0       	breq	.+14     	; 0x3324 <__fixunssfsi+0x4c>
    3316:	b9 3f       	cpi	r27, 0xF9	; 249
    3318:	cc f3       	brlt	.-14     	; 0x330c <__fixunssfsi+0x34>
    331a:	86 95       	lsr	r24
    331c:	77 95       	ror	r23
    331e:	67 95       	ror	r22
    3320:	b3 95       	inc	r27
    3322:	d9 f7       	brne	.-10     	; 0x331a <__fixunssfsi+0x42>
    3324:	3e f4       	brtc	.+14     	; 0x3334 <__fixunssfsi+0x5c>
    3326:	90 95       	com	r25
    3328:	80 95       	com	r24
    332a:	70 95       	com	r23
    332c:	61 95       	neg	r22
    332e:	7f 4f       	sbci	r23, 0xFF	; 255
    3330:	8f 4f       	sbci	r24, 0xFF	; 255
    3332:	9f 4f       	sbci	r25, 0xFF	; 255
    3334:	08 95       	ret

00003336 <__floatunsisf>:
    3336:	e8 94       	clt
    3338:	09 c0       	rjmp	.+18     	; 0x334c <__floatsisf+0x12>

0000333a <__floatsisf>:
    333a:	97 fb       	bst	r25, 7
    333c:	3e f4       	brtc	.+14     	; 0x334c <__floatsisf+0x12>
    333e:	90 95       	com	r25
    3340:	80 95       	com	r24
    3342:	70 95       	com	r23
    3344:	61 95       	neg	r22
    3346:	7f 4f       	sbci	r23, 0xFF	; 255
    3348:	8f 4f       	sbci	r24, 0xFF	; 255
    334a:	9f 4f       	sbci	r25, 0xFF	; 255
    334c:	99 23       	and	r25, r25
    334e:	a9 f0       	breq	.+42     	; 0x337a <__floatsisf+0x40>
    3350:	f9 2f       	mov	r31, r25
    3352:	96 e9       	ldi	r25, 0x96	; 150
    3354:	bb 27       	eor	r27, r27
    3356:	93 95       	inc	r25
    3358:	f6 95       	lsr	r31
    335a:	87 95       	ror	r24
    335c:	77 95       	ror	r23
    335e:	67 95       	ror	r22
    3360:	b7 95       	ror	r27
    3362:	f1 11       	cpse	r31, r1
    3364:	f8 cf       	rjmp	.-16     	; 0x3356 <__floatsisf+0x1c>
    3366:	fa f4       	brpl	.+62     	; 0x33a6 <__floatsisf+0x6c>
    3368:	bb 0f       	add	r27, r27
    336a:	11 f4       	brne	.+4      	; 0x3370 <__floatsisf+0x36>
    336c:	60 ff       	sbrs	r22, 0
    336e:	1b c0       	rjmp	.+54     	; 0x33a6 <__floatsisf+0x6c>
    3370:	6f 5f       	subi	r22, 0xFF	; 255
    3372:	7f 4f       	sbci	r23, 0xFF	; 255
    3374:	8f 4f       	sbci	r24, 0xFF	; 255
    3376:	9f 4f       	sbci	r25, 0xFF	; 255
    3378:	16 c0       	rjmp	.+44     	; 0x33a6 <__floatsisf+0x6c>
    337a:	88 23       	and	r24, r24
    337c:	11 f0       	breq	.+4      	; 0x3382 <__floatsisf+0x48>
    337e:	96 e9       	ldi	r25, 0x96	; 150
    3380:	11 c0       	rjmp	.+34     	; 0x33a4 <__floatsisf+0x6a>
    3382:	77 23       	and	r23, r23
    3384:	21 f0       	breq	.+8      	; 0x338e <__floatsisf+0x54>
    3386:	9e e8       	ldi	r25, 0x8E	; 142
    3388:	87 2f       	mov	r24, r23
    338a:	76 2f       	mov	r23, r22
    338c:	05 c0       	rjmp	.+10     	; 0x3398 <__floatsisf+0x5e>
    338e:	66 23       	and	r22, r22
    3390:	71 f0       	breq	.+28     	; 0x33ae <__floatsisf+0x74>
    3392:	96 e8       	ldi	r25, 0x86	; 134
    3394:	86 2f       	mov	r24, r22
    3396:	70 e0       	ldi	r23, 0x00	; 0
    3398:	60 e0       	ldi	r22, 0x00	; 0
    339a:	2a f0       	brmi	.+10     	; 0x33a6 <__floatsisf+0x6c>
    339c:	9a 95       	dec	r25
    339e:	66 0f       	add	r22, r22
    33a0:	77 1f       	adc	r23, r23
    33a2:	88 1f       	adc	r24, r24
    33a4:	da f7       	brpl	.-10     	; 0x339c <__floatsisf+0x62>
    33a6:	88 0f       	add	r24, r24
    33a8:	96 95       	lsr	r25
    33aa:	87 95       	ror	r24
    33ac:	97 f9       	bld	r25, 7
    33ae:	08 95       	ret

000033b0 <__fp_cmp>:
    33b0:	99 0f       	add	r25, r25
    33b2:	00 08       	sbc	r0, r0
    33b4:	55 0f       	add	r21, r21
    33b6:	aa 0b       	sbc	r26, r26
    33b8:	e0 e8       	ldi	r30, 0x80	; 128
    33ba:	fe ef       	ldi	r31, 0xFE	; 254
    33bc:	16 16       	cp	r1, r22
    33be:	17 06       	cpc	r1, r23
    33c0:	e8 07       	cpc	r30, r24
    33c2:	f9 07       	cpc	r31, r25
    33c4:	c0 f0       	brcs	.+48     	; 0x33f6 <__fp_cmp+0x46>
    33c6:	12 16       	cp	r1, r18
    33c8:	13 06       	cpc	r1, r19
    33ca:	e4 07       	cpc	r30, r20
    33cc:	f5 07       	cpc	r31, r21
    33ce:	98 f0       	brcs	.+38     	; 0x33f6 <__fp_cmp+0x46>
    33d0:	62 1b       	sub	r22, r18
    33d2:	73 0b       	sbc	r23, r19
    33d4:	84 0b       	sbc	r24, r20
    33d6:	95 0b       	sbc	r25, r21
    33d8:	39 f4       	brne	.+14     	; 0x33e8 <__fp_cmp+0x38>
    33da:	0a 26       	eor	r0, r26
    33dc:	61 f0       	breq	.+24     	; 0x33f6 <__fp_cmp+0x46>
    33de:	23 2b       	or	r18, r19
    33e0:	24 2b       	or	r18, r20
    33e2:	25 2b       	or	r18, r21
    33e4:	21 f4       	brne	.+8      	; 0x33ee <__fp_cmp+0x3e>
    33e6:	08 95       	ret
    33e8:	0a 26       	eor	r0, r26
    33ea:	09 f4       	brne	.+2      	; 0x33ee <__fp_cmp+0x3e>
    33ec:	a1 40       	sbci	r26, 0x01	; 1
    33ee:	a6 95       	lsr	r26
    33f0:	8f ef       	ldi	r24, 0xFF	; 255
    33f2:	81 1d       	adc	r24, r1
    33f4:	81 1d       	adc	r24, r1
    33f6:	08 95       	ret

000033f8 <__fp_inf>:
    33f8:	97 f9       	bld	r25, 7
    33fa:	9f 67       	ori	r25, 0x7F	; 127
    33fc:	80 e8       	ldi	r24, 0x80	; 128
    33fe:	70 e0       	ldi	r23, 0x00	; 0
    3400:	60 e0       	ldi	r22, 0x00	; 0
    3402:	08 95       	ret

00003404 <__fp_nan>:
    3404:	9f ef       	ldi	r25, 0xFF	; 255
    3406:	80 ec       	ldi	r24, 0xC0	; 192
    3408:	08 95       	ret

0000340a <__fp_powser>:
    340a:	df 93       	push	r29
    340c:	cf 93       	push	r28
    340e:	1f 93       	push	r17
    3410:	0f 93       	push	r16
    3412:	ff 92       	push	r15
    3414:	ef 92       	push	r14
    3416:	df 92       	push	r13
    3418:	7b 01       	movw	r14, r22
    341a:	8c 01       	movw	r16, r24
    341c:	68 94       	set
    341e:	06 c0       	rjmp	.+12     	; 0x342c <__fp_powser+0x22>
    3420:	da 2e       	mov	r13, r26
    3422:	ef 01       	movw	r28, r30
    3424:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__mulsf3x>
    3428:	fe 01       	movw	r30, r28
    342a:	e8 94       	clt
    342c:	a5 91       	lpm	r26, Z+
    342e:	25 91       	lpm	r18, Z+
    3430:	35 91       	lpm	r19, Z+
    3432:	45 91       	lpm	r20, Z+
    3434:	55 91       	lpm	r21, Z+
    3436:	a6 f3       	brts	.-24     	; 0x3420 <__fp_powser+0x16>
    3438:	ef 01       	movw	r28, r30
    343a:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3x>
    343e:	fe 01       	movw	r30, r28
    3440:	97 01       	movw	r18, r14
    3442:	a8 01       	movw	r20, r16
    3444:	da 94       	dec	r13
    3446:	69 f7       	brne	.-38     	; 0x3422 <__fp_powser+0x18>
    3448:	df 90       	pop	r13
    344a:	ef 90       	pop	r14
    344c:	ff 90       	pop	r15
    344e:	0f 91       	pop	r16
    3450:	1f 91       	pop	r17
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <__fp_pscA>:
    3458:	00 24       	eor	r0, r0
    345a:	0a 94       	dec	r0
    345c:	16 16       	cp	r1, r22
    345e:	17 06       	cpc	r1, r23
    3460:	18 06       	cpc	r1, r24
    3462:	09 06       	cpc	r0, r25
    3464:	08 95       	ret

00003466 <__fp_pscB>:
    3466:	00 24       	eor	r0, r0
    3468:	0a 94       	dec	r0
    346a:	12 16       	cp	r1, r18
    346c:	13 06       	cpc	r1, r19
    346e:	14 06       	cpc	r1, r20
    3470:	05 06       	cpc	r0, r21
    3472:	08 95       	ret
    3474:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__fp_nan>

00003478 <__fp_rempio2>:
    3478:	0e 94 92 1a 	call	0x3524	; 0x3524 <__fp_splitA>
    347c:	d8 f3       	brcs	.-10     	; 0x3474 <__fp_pscB+0xe>
    347e:	e8 94       	clt
    3480:	e0 e0       	ldi	r30, 0x00	; 0
    3482:	bb 27       	eor	r27, r27
    3484:	9f 57       	subi	r25, 0x7F	; 127
    3486:	f0 f0       	brcs	.+60     	; 0x34c4 <__fp_rempio2+0x4c>
    3488:	2a ed       	ldi	r18, 0xDA	; 218
    348a:	3f e0       	ldi	r19, 0x0F	; 15
    348c:	49 ec       	ldi	r20, 0xC9	; 201
    348e:	06 c0       	rjmp	.+12     	; 0x349c <__fp_rempio2+0x24>
    3490:	ee 0f       	add	r30, r30
    3492:	bb 0f       	add	r27, r27
    3494:	66 1f       	adc	r22, r22
    3496:	77 1f       	adc	r23, r23
    3498:	88 1f       	adc	r24, r24
    349a:	28 f0       	brcs	.+10     	; 0x34a6 <__fp_rempio2+0x2e>
    349c:	b2 3a       	cpi	r27, 0xA2	; 162
    349e:	62 07       	cpc	r22, r18
    34a0:	73 07       	cpc	r23, r19
    34a2:	84 07       	cpc	r24, r20
    34a4:	28 f0       	brcs	.+10     	; 0x34b0 <__fp_rempio2+0x38>
    34a6:	b2 5a       	subi	r27, 0xA2	; 162
    34a8:	62 0b       	sbc	r22, r18
    34aa:	73 0b       	sbc	r23, r19
    34ac:	84 0b       	sbc	r24, r20
    34ae:	e3 95       	inc	r30
    34b0:	9a 95       	dec	r25
    34b2:	72 f7       	brpl	.-36     	; 0x3490 <__fp_rempio2+0x18>
    34b4:	80 38       	cpi	r24, 0x80	; 128
    34b6:	30 f4       	brcc	.+12     	; 0x34c4 <__fp_rempio2+0x4c>
    34b8:	9a 95       	dec	r25
    34ba:	bb 0f       	add	r27, r27
    34bc:	66 1f       	adc	r22, r22
    34be:	77 1f       	adc	r23, r23
    34c0:	88 1f       	adc	r24, r24
    34c2:	d2 f7       	brpl	.-12     	; 0x34b8 <__fp_rempio2+0x40>
    34c4:	90 48       	sbci	r25, 0x80	; 128
    34c6:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__fp_mpack_finite>

000034ca <__fp_round>:
    34ca:	09 2e       	mov	r0, r25
    34cc:	03 94       	inc	r0
    34ce:	00 0c       	add	r0, r0
    34d0:	11 f4       	brne	.+4      	; 0x34d6 <__fp_round+0xc>
    34d2:	88 23       	and	r24, r24
    34d4:	52 f0       	brmi	.+20     	; 0x34ea <__fp_round+0x20>
    34d6:	bb 0f       	add	r27, r27
    34d8:	40 f4       	brcc	.+16     	; 0x34ea <__fp_round+0x20>
    34da:	bf 2b       	or	r27, r31
    34dc:	11 f4       	brne	.+4      	; 0x34e2 <__fp_round+0x18>
    34de:	60 ff       	sbrs	r22, 0
    34e0:	04 c0       	rjmp	.+8      	; 0x34ea <__fp_round+0x20>
    34e2:	6f 5f       	subi	r22, 0xFF	; 255
    34e4:	7f 4f       	sbci	r23, 0xFF	; 255
    34e6:	8f 4f       	sbci	r24, 0xFF	; 255
    34e8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ea:	08 95       	ret

000034ec <__fp_sinus>:
    34ec:	ef 93       	push	r30
    34ee:	e0 ff       	sbrs	r30, 0
    34f0:	07 c0       	rjmp	.+14     	; 0x3500 <__fp_sinus+0x14>
    34f2:	a2 ea       	ldi	r26, 0xA2	; 162
    34f4:	2a ed       	ldi	r18, 0xDA	; 218
    34f6:	3f e0       	ldi	r19, 0x0F	; 15
    34f8:	49 ec       	ldi	r20, 0xC9	; 201
    34fa:	5f eb       	ldi	r21, 0xBF	; 191
    34fc:	0e 94 22 18 	call	0x3044	; 0x3044 <__addsf3x>
    3500:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__fp_round>
    3504:	0f 90       	pop	r0
    3506:	03 94       	inc	r0
    3508:	01 fc       	sbrc	r0, 1
    350a:	90 58       	subi	r25, 0x80	; 128
    350c:	e1 e0       	ldi	r30, 0x01	; 1
    350e:	f1 e0       	ldi	r31, 0x01	; 1
    3510:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <__fp_powsodd>

00003514 <__fp_split3>:
    3514:	57 fd       	sbrc	r21, 7
    3516:	90 58       	subi	r25, 0x80	; 128
    3518:	44 0f       	add	r20, r20
    351a:	55 1f       	adc	r21, r21
    351c:	59 f0       	breq	.+22     	; 0x3534 <__fp_splitA+0x10>
    351e:	5f 3f       	cpi	r21, 0xFF	; 255
    3520:	71 f0       	breq	.+28     	; 0x353e <__fp_splitA+0x1a>
    3522:	47 95       	ror	r20

00003524 <__fp_splitA>:
    3524:	88 0f       	add	r24, r24
    3526:	97 fb       	bst	r25, 7
    3528:	99 1f       	adc	r25, r25
    352a:	61 f0       	breq	.+24     	; 0x3544 <__fp_splitA+0x20>
    352c:	9f 3f       	cpi	r25, 0xFF	; 255
    352e:	79 f0       	breq	.+30     	; 0x354e <__fp_splitA+0x2a>
    3530:	87 95       	ror	r24
    3532:	08 95       	ret
    3534:	12 16       	cp	r1, r18
    3536:	13 06       	cpc	r1, r19
    3538:	14 06       	cpc	r1, r20
    353a:	55 1f       	adc	r21, r21
    353c:	f2 cf       	rjmp	.-28     	; 0x3522 <__fp_split3+0xe>
    353e:	46 95       	lsr	r20
    3540:	f1 df       	rcall	.-30     	; 0x3524 <__fp_splitA>
    3542:	08 c0       	rjmp	.+16     	; 0x3554 <__fp_splitA+0x30>
    3544:	16 16       	cp	r1, r22
    3546:	17 06       	cpc	r1, r23
    3548:	18 06       	cpc	r1, r24
    354a:	99 1f       	adc	r25, r25
    354c:	f1 cf       	rjmp	.-30     	; 0x3530 <__fp_splitA+0xc>
    354e:	86 95       	lsr	r24
    3550:	71 05       	cpc	r23, r1
    3552:	61 05       	cpc	r22, r1
    3554:	08 94       	sec
    3556:	08 95       	ret

00003558 <__fp_zero>:
    3558:	e8 94       	clt

0000355a <__fp_szero>:
    355a:	bb 27       	eor	r27, r27
    355c:	66 27       	eor	r22, r22
    355e:	77 27       	eor	r23, r23
    3560:	cb 01       	movw	r24, r22
    3562:	97 f9       	bld	r25, 7
    3564:	08 95       	ret

00003566 <__gesf2>:
    3566:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__fp_cmp>
    356a:	08 f4       	brcc	.+2      	; 0x356e <__gesf2+0x8>
    356c:	8f ef       	ldi	r24, 0xFF	; 255
    356e:	08 95       	ret

00003570 <inverse>:
    3570:	9b 01       	movw	r18, r22
    3572:	ac 01       	movw	r20, r24
    3574:	60 e0       	ldi	r22, 0x00	; 0
    3576:	70 e0       	ldi	r23, 0x00	; 0
    3578:	80 e8       	ldi	r24, 0x80	; 128
    357a:	9f e3       	ldi	r25, 0x3F	; 63
    357c:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <__divsf3>

00003580 <__mulsf3>:
    3580:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__mulsf3x>
    3584:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__fp_round>
    3588:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__fp_pscA>
    358c:	38 f0       	brcs	.+14     	; 0x359c <__mulsf3+0x1c>
    358e:	0e 94 33 1a 	call	0x3466	; 0x3466 <__fp_pscB>
    3592:	20 f0       	brcs	.+8      	; 0x359c <__mulsf3+0x1c>
    3594:	95 23       	and	r25, r21
    3596:	11 f0       	breq	.+4      	; 0x359c <__mulsf3+0x1c>
    3598:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__fp_inf>
    359c:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__fp_nan>
    35a0:	11 24       	eor	r1, r1
    35a2:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__fp_szero>

000035a6 <__mulsf3x>:
    35a6:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__fp_split3>
    35aa:	70 f3       	brcs	.-36     	; 0x3588 <__mulsf3+0x8>

000035ac <__mulsf3_pse>:
    35ac:	95 9f       	mul	r25, r21
    35ae:	c1 f3       	breq	.-16     	; 0x35a0 <__mulsf3+0x20>
    35b0:	95 0f       	add	r25, r21
    35b2:	50 e0       	ldi	r21, 0x00	; 0
    35b4:	55 1f       	adc	r21, r21
    35b6:	62 9f       	mul	r22, r18
    35b8:	f0 01       	movw	r30, r0
    35ba:	72 9f       	mul	r23, r18
    35bc:	bb 27       	eor	r27, r27
    35be:	f0 0d       	add	r31, r0
    35c0:	b1 1d       	adc	r27, r1
    35c2:	63 9f       	mul	r22, r19
    35c4:	aa 27       	eor	r26, r26
    35c6:	f0 0d       	add	r31, r0
    35c8:	b1 1d       	adc	r27, r1
    35ca:	aa 1f       	adc	r26, r26
    35cc:	64 9f       	mul	r22, r20
    35ce:	66 27       	eor	r22, r22
    35d0:	b0 0d       	add	r27, r0
    35d2:	a1 1d       	adc	r26, r1
    35d4:	66 1f       	adc	r22, r22
    35d6:	82 9f       	mul	r24, r18
    35d8:	22 27       	eor	r18, r18
    35da:	b0 0d       	add	r27, r0
    35dc:	a1 1d       	adc	r26, r1
    35de:	62 1f       	adc	r22, r18
    35e0:	73 9f       	mul	r23, r19
    35e2:	b0 0d       	add	r27, r0
    35e4:	a1 1d       	adc	r26, r1
    35e6:	62 1f       	adc	r22, r18
    35e8:	83 9f       	mul	r24, r19
    35ea:	a0 0d       	add	r26, r0
    35ec:	61 1d       	adc	r22, r1
    35ee:	22 1f       	adc	r18, r18
    35f0:	74 9f       	mul	r23, r20
    35f2:	33 27       	eor	r19, r19
    35f4:	a0 0d       	add	r26, r0
    35f6:	61 1d       	adc	r22, r1
    35f8:	23 1f       	adc	r18, r19
    35fa:	84 9f       	mul	r24, r20
    35fc:	60 0d       	add	r22, r0
    35fe:	21 1d       	adc	r18, r1
    3600:	82 2f       	mov	r24, r18
    3602:	76 2f       	mov	r23, r22
    3604:	6a 2f       	mov	r22, r26
    3606:	11 24       	eor	r1, r1
    3608:	9f 57       	subi	r25, 0x7F	; 127
    360a:	50 40       	sbci	r21, 0x00	; 0
    360c:	9a f0       	brmi	.+38     	; 0x3634 <__mulsf3_pse+0x88>
    360e:	f1 f0       	breq	.+60     	; 0x364c <__mulsf3_pse+0xa0>
    3610:	88 23       	and	r24, r24
    3612:	4a f0       	brmi	.+18     	; 0x3626 <__mulsf3_pse+0x7a>
    3614:	ee 0f       	add	r30, r30
    3616:	ff 1f       	adc	r31, r31
    3618:	bb 1f       	adc	r27, r27
    361a:	66 1f       	adc	r22, r22
    361c:	77 1f       	adc	r23, r23
    361e:	88 1f       	adc	r24, r24
    3620:	91 50       	subi	r25, 0x01	; 1
    3622:	50 40       	sbci	r21, 0x00	; 0
    3624:	a9 f7       	brne	.-22     	; 0x3610 <__mulsf3_pse+0x64>
    3626:	9e 3f       	cpi	r25, 0xFE	; 254
    3628:	51 05       	cpc	r21, r1
    362a:	80 f0       	brcs	.+32     	; 0x364c <__mulsf3_pse+0xa0>
    362c:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__fp_inf>
    3630:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__fp_szero>
    3634:	5f 3f       	cpi	r21, 0xFF	; 255
    3636:	e4 f3       	brlt	.-8      	; 0x3630 <__mulsf3_pse+0x84>
    3638:	98 3e       	cpi	r25, 0xE8	; 232
    363a:	d4 f3       	brlt	.-12     	; 0x3630 <__mulsf3_pse+0x84>
    363c:	86 95       	lsr	r24
    363e:	77 95       	ror	r23
    3640:	67 95       	ror	r22
    3642:	b7 95       	ror	r27
    3644:	f7 95       	ror	r31
    3646:	e7 95       	ror	r30
    3648:	9f 5f       	subi	r25, 0xFF	; 255
    364a:	c1 f7       	brne	.-16     	; 0x363c <__mulsf3_pse+0x90>
    364c:	fe 2b       	or	r31, r30
    364e:	88 0f       	add	r24, r24
    3650:	91 1d       	adc	r25, r1
    3652:	96 95       	lsr	r25
    3654:	87 95       	ror	r24
    3656:	97 f9       	bld	r25, 7
    3658:	08 95       	ret

0000365a <sin>:
    365a:	9f 93       	push	r25
    365c:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__fp_rempio2>
    3660:	0f 90       	pop	r0
    3662:	07 fc       	sbrc	r0, 7
    3664:	ee 5f       	subi	r30, 0xFE	; 254
    3666:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__fp_sinus>
    366a:	19 f4       	brne	.+6      	; 0x3672 <sin+0x18>
    366c:	16 f4       	brtc	.+4      	; 0x3672 <sin+0x18>
    366e:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__fp_nan>
    3672:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <__fp_mpack>

00003676 <sqrt>:
    3676:	0e 94 92 1a 	call	0x3524	; 0x3524 <__fp_splitA>
    367a:	b8 f3       	brcs	.-18     	; 0x366a <sin+0x10>
    367c:	99 23       	and	r25, r25
    367e:	c9 f3       	breq	.-14     	; 0x3672 <sin+0x18>
    3680:	b6 f3       	brts	.-20     	; 0x366e <sin+0x14>
    3682:	9f 57       	subi	r25, 0x7F	; 127
    3684:	55 0b       	sbc	r21, r21
    3686:	87 ff       	sbrs	r24, 7
    3688:	0e 94 8d 1b 	call	0x371a	; 0x371a <__fp_norm2>
    368c:	00 24       	eor	r0, r0
    368e:	a0 e6       	ldi	r26, 0x60	; 96
    3690:	40 ea       	ldi	r20, 0xA0	; 160
    3692:	90 01       	movw	r18, r0
    3694:	80 58       	subi	r24, 0x80	; 128
    3696:	56 95       	lsr	r21
    3698:	97 95       	ror	r25
    369a:	28 f4       	brcc	.+10     	; 0x36a6 <sqrt+0x30>
    369c:	80 5c       	subi	r24, 0xC0	; 192
    369e:	66 0f       	add	r22, r22
    36a0:	77 1f       	adc	r23, r23
    36a2:	88 1f       	adc	r24, r24
    36a4:	20 f0       	brcs	.+8      	; 0x36ae <sqrt+0x38>
    36a6:	26 17       	cp	r18, r22
    36a8:	37 07       	cpc	r19, r23
    36aa:	48 07       	cpc	r20, r24
    36ac:	30 f4       	brcc	.+12     	; 0x36ba <sqrt+0x44>
    36ae:	62 1b       	sub	r22, r18
    36b0:	73 0b       	sbc	r23, r19
    36b2:	84 0b       	sbc	r24, r20
    36b4:	20 29       	or	r18, r0
    36b6:	31 29       	or	r19, r1
    36b8:	4a 2b       	or	r20, r26
    36ba:	a6 95       	lsr	r26
    36bc:	17 94       	ror	r1
    36be:	07 94       	ror	r0
    36c0:	20 25       	eor	r18, r0
    36c2:	31 25       	eor	r19, r1
    36c4:	4a 27       	eor	r20, r26
    36c6:	58 f7       	brcc	.-42     	; 0x369e <sqrt+0x28>
    36c8:	66 0f       	add	r22, r22
    36ca:	77 1f       	adc	r23, r23
    36cc:	88 1f       	adc	r24, r24
    36ce:	20 f0       	brcs	.+8      	; 0x36d8 <sqrt+0x62>
    36d0:	26 17       	cp	r18, r22
    36d2:	37 07       	cpc	r19, r23
    36d4:	48 07       	cpc	r20, r24
    36d6:	30 f4       	brcc	.+12     	; 0x36e4 <sqrt+0x6e>
    36d8:	62 0b       	sbc	r22, r18
    36da:	73 0b       	sbc	r23, r19
    36dc:	84 0b       	sbc	r24, r20
    36de:	20 0d       	add	r18, r0
    36e0:	31 1d       	adc	r19, r1
    36e2:	41 1d       	adc	r20, r1
    36e4:	a0 95       	com	r26
    36e6:	81 f7       	brne	.-32     	; 0x36c8 <sqrt+0x52>
    36e8:	b9 01       	movw	r22, r18
    36ea:	84 2f       	mov	r24, r20
    36ec:	91 58       	subi	r25, 0x81	; 129
    36ee:	88 0f       	add	r24, r24
    36f0:	96 95       	lsr	r25
    36f2:	87 95       	ror	r24
    36f4:	08 95       	ret

000036f6 <square>:
    36f6:	9b 01       	movw	r18, r22
    36f8:	ac 01       	movw	r20, r24
    36fa:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__mulsf3>

000036fe <__fp_mpack>:
    36fe:	9f 3f       	cpi	r25, 0xFF	; 255
    3700:	31 f0       	breq	.+12     	; 0x370e <__fp_mpack_finite+0xc>

00003702 <__fp_mpack_finite>:
    3702:	91 50       	subi	r25, 0x01	; 1
    3704:	20 f4       	brcc	.+8      	; 0x370e <__fp_mpack_finite+0xc>
    3706:	87 95       	ror	r24
    3708:	77 95       	ror	r23
    370a:	67 95       	ror	r22
    370c:	b7 95       	ror	r27
    370e:	88 0f       	add	r24, r24
    3710:	91 1d       	adc	r25, r1
    3712:	96 95       	lsr	r25
    3714:	87 95       	ror	r24
    3716:	97 f9       	bld	r25, 7
    3718:	08 95       	ret

0000371a <__fp_norm2>:
    371a:	91 50       	subi	r25, 0x01	; 1
    371c:	50 40       	sbci	r21, 0x00	; 0
    371e:	66 0f       	add	r22, r22
    3720:	77 1f       	adc	r23, r23
    3722:	88 1f       	adc	r24, r24
    3724:	d2 f7       	brpl	.-12     	; 0x371a <__fp_norm2>
    3726:	08 95       	ret

00003728 <__fp_powsodd>:
    3728:	9f 93       	push	r25
    372a:	8f 93       	push	r24
    372c:	7f 93       	push	r23
    372e:	6f 93       	push	r22
    3730:	ff 93       	push	r31
    3732:	ef 93       	push	r30
    3734:	9b 01       	movw	r18, r22
    3736:	ac 01       	movw	r20, r24
    3738:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__mulsf3>
    373c:	ef 91       	pop	r30
    373e:	ff 91       	pop	r31
    3740:	0e 94 05 1a 	call	0x340a	; 0x340a <__fp_powser>
    3744:	2f 91       	pop	r18
    3746:	3f 91       	pop	r19
    3748:	4f 91       	pop	r20
    374a:	5f 91       	pop	r21
    374c:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__mulsf3>

00003750 <__tablejump2__>:
    3750:	ee 0f       	add	r30, r30
    3752:	ff 1f       	adc	r31, r31
    3754:	05 90       	lpm	r0, Z+
    3756:	f4 91       	lpm	r31, Z
    3758:	e0 2d       	mov	r30, r0
    375a:	09 94       	ijmp

0000375c <__itoa_ncheck>:
    375c:	bb 27       	eor	r27, r27
    375e:	4a 30       	cpi	r20, 0x0A	; 10
    3760:	31 f4       	brne	.+12     	; 0x376e <__itoa_ncheck+0x12>
    3762:	99 23       	and	r25, r25
    3764:	22 f4       	brpl	.+8      	; 0x376e <__itoa_ncheck+0x12>
    3766:	bd e2       	ldi	r27, 0x2D	; 45
    3768:	90 95       	com	r25
    376a:	81 95       	neg	r24
    376c:	9f 4f       	sbci	r25, 0xFF	; 255
    376e:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__utoa_common>

00003772 <__utoa_ncheck>:
    3772:	bb 27       	eor	r27, r27

00003774 <__utoa_common>:
    3774:	fb 01       	movw	r30, r22
    3776:	55 27       	eor	r21, r21
    3778:	aa 27       	eor	r26, r26
    377a:	88 0f       	add	r24, r24
    377c:	99 1f       	adc	r25, r25
    377e:	aa 1f       	adc	r26, r26
    3780:	a4 17       	cp	r26, r20
    3782:	10 f0       	brcs	.+4      	; 0x3788 <__utoa_common+0x14>
    3784:	a4 1b       	sub	r26, r20
    3786:	83 95       	inc	r24
    3788:	50 51       	subi	r21, 0x10	; 16
    378a:	b9 f7       	brne	.-18     	; 0x377a <__utoa_common+0x6>
    378c:	a0 5d       	subi	r26, 0xD0	; 208
    378e:	aa 33       	cpi	r26, 0x3A	; 58
    3790:	08 f0       	brcs	.+2      	; 0x3794 <__utoa_common+0x20>
    3792:	a9 5d       	subi	r26, 0xD9	; 217
    3794:	a1 93       	st	Z+, r26
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	79 f7       	brne	.-34     	; 0x3778 <__utoa_common+0x4>
    379a:	b1 11       	cpse	r27, r1
    379c:	b1 93       	st	Z+, r27
    379e:	11 92       	st	Z+, r1
    37a0:	cb 01       	movw	r24, r22
    37a2:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <strrev>

000037a6 <strrev>:
    37a6:	dc 01       	movw	r26, r24
    37a8:	fc 01       	movw	r30, r24
    37aa:	67 2f       	mov	r22, r23
    37ac:	71 91       	ld	r23, Z+
    37ae:	77 23       	and	r23, r23
    37b0:	e1 f7       	brne	.-8      	; 0x37aa <strrev+0x4>
    37b2:	32 97       	sbiw	r30, 0x02	; 2
    37b4:	04 c0       	rjmp	.+8      	; 0x37be <strrev+0x18>
    37b6:	7c 91       	ld	r23, X
    37b8:	6d 93       	st	X+, r22
    37ba:	70 83       	st	Z, r23
    37bc:	62 91       	ld	r22, -Z
    37be:	ae 17       	cp	r26, r30
    37c0:	bf 07       	cpc	r27, r31
    37c2:	c8 f3       	brcs	.-14     	; 0x37b6 <strrev+0x10>
    37c4:	08 95       	ret

000037c6 <_exit>:
    37c6:	f8 94       	cli

000037c8 <__stop_program>:
    37c8:	ff cf       	rjmp	.-2      	; 0x37c8 <__stop_program>
