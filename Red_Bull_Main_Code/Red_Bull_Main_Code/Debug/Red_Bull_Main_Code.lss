
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00003788  0000381c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  00800164  00800164  00003880  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00003880  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000038e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00003920  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000351e  00000000  00000000  00003c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000faf  00000000  00000000  000071b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001535  00000000  00000000  00008165  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be8  00000000  00000000  0000969c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d9b  00000000  00000000  0000a284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040e4  00000000  00000000  0000b01f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  0000f103  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__ctors_end>
       4:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
       8:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
       c:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__vector_3>
      10:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      14:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      18:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      1c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      20:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      24:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      28:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__vector_10>
      2c:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__vector_11>
      30:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      34:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      38:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      3c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      40:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      44:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__vector_17>
      48:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__vector_18>
      4c:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__vector_19>
      50:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      54:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      58:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      5c:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__vector_23>
      60:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      64:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      68:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      6c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      70:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      74:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      78:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      7c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      80:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      84:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      88:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      8c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      90:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      94:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      98:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      9c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      a0:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      a4:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      a8:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      ac:	f3 08       	sbc	r15, r3
      ae:	f6 08       	sbc	r15, r6
      b0:	f9 08       	sbc	r15, r9
      b2:	04 09       	sbc	r16, r4
      b4:	0f 09       	sbc	r16, r15
      b6:	26 09       	sbc	r18, r6
      b8:	12 09       	sbc	r17, r2
      ba:	15 09       	sbc	r17, r5
      bc:	26 09       	sbc	r18, r6
      be:	18 09       	sbc	r17, r8
      c0:	73 16       	cp	r7, r19
      c2:	93 16       	cp	r9, r19
      c4:	b3 16       	cp	r11, r19
      c6:	d3 16       	cp	r13, r19
      c8:	f3 16       	cp	r15, r19
      ca:	13 17       	cp	r17, r19
      cc:	33 17       	cp	r19, r19
      ce:	53 17       	cp	r21, r19
      d0:	73 17       	cp	r23, r19
      d2:	93 17       	cp	r25, r19
      d4:	b3 17       	cp	r27, r19
      d6:	d3 17       	cp	r29, r19
      d8:	08 4a       	sbci	r16, 0xA8	; 168
      da:	d7 3b       	cpi	r29, 0xB7	; 183
      dc:	3b ce       	rjmp	.-906    	; 0xfffffd54 <__eeprom_end+0xff7efd54>
      de:	01 6e       	ori	r16, 0xE1	; 225
      e0:	84 bc       	out	0x24, r8	; 36
      e2:	bf fd       	.word	0xfdbf	; ????
      e4:	c1 2f       	mov	r28, r17
      e6:	3d 6c       	ori	r19, 0xCD	; 205
      e8:	74 31       	cpi	r23, 0x14	; 20
      ea:	9a bd       	out	0x2a, r25	; 42
      ec:	56 83       	std	Z+6, r21	; 0x06
      ee:	3d da       	rcall	.-2950   	; 0xfffff56a <__eeprom_end+0xff7ef56a>
      f0:	3d 00       	.word	0x003d	; ????
      f2:	c7 7f       	andi	r28, 0xF7	; 247
      f4:	11 be       	out	0x31, r1	; 49
      f6:	d9 e4       	ldi	r29, 0x49	; 73
      f8:	bb 4c       	sbci	r27, 0xCB	; 203
      fa:	3e 91       	ld	r19, -X
      fc:	6b aa       	std	Y+51, r6	; 0x33
      fe:	aa be       	out	0x3a, r10	; 58
     100:	00 00       	nop
     102:	00 80       	ld	r0, Z
     104:	3f 05       	cpc	r19, r15
     106:	a8 4c       	sbci	r26, 0xC8	; 200
     108:	cd b2       	in	r12, 0x1d	; 29
     10a:	d4 4e       	sbci	r29, 0xE4	; 228
     10c:	b9 38       	cpi	r27, 0x89	; 137
     10e:	36 a9       	ldd	r19, Z+54	; 0x36
     110:	02 0c       	add	r0, r2
     112:	50 b9       	out	0x00, r21	; 0
     114:	91 86       	std	Z+9, r9	; 0x09
     116:	88 08       	sbc	r8, r8
     118:	3c a6       	std	Y+44, r3	; 0x2c
     11a:	aa aa       	std	Y+50, r10	; 0x32
     11c:	2a be       	out	0x3a, r2	; 58
     11e:	00 00       	nop
     120:	00 80       	ld	r0, Z
     122:	3f 00       	.word	0x003f	; ????

00000124 <__trampolines_end>:
     124:	00 01       	movw	r0, r0
     126:	00 00       	nop
     128:	bb 01       	movw	r22, r22
     12a:	12 00       	.word	0x0012	; ????
     12c:	02 00       	.word	0x0002	; ????
     12e:	00 78       	andi	r16, 0x80	; 128
     130:	01 43       	sbci	r16, 0x31	; 49
     132:	00 03       	mulsu	r16, r16
     134:	00 00       	nop
     136:	74 01       	movw	r14, r8
     138:	04 01       	movw	r0, r8
     13a:	03 09       	sbc	r16, r3
     13c:	04 60       	ori	r16, 0x04	; 4
     13e:	01 12       	cpse	r0, r17
     140:	02 03       	mulsu	r16, r18
     142:	09 04       	cpc	r0, r9
     144:	58 01       	movw	r10, r16
     146:	06 03       	mulsu	r16, r22
     148:	03 09       	sbc	r16, r3
     14a:	04 4e       	sbci	r16, 0xE4	; 228
     14c:	01 08       	sbc	r0, r1

0000014e <string3>:
     14e:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000158 <string2>:
     158:	06 03 4d 00 32 00 00 00                             ..M.2...

00000160 <string1>:
     160:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     170:	65 00 00 00                                         e...

00000174 <string0>:
     174:	04 03 09 04                                         ....

00000178 <config1_descriptor>:
     178:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     188:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     198:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1a8:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1b8:	40 00 00                                            @..

000001bb <device_descriptor>:
     1bb:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1cb:	03 01                                               ..

000001cd <endpoint_config_table>:
     1cd:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001d8 <__ctors_end>:
     1d8:	11 24       	eor	r1, r1
     1da:	1f be       	out	0x3f, r1	; 63
     1dc:	cf ef       	ldi	r28, 0xFF	; 255
     1de:	da e0       	ldi	r29, 0x0A	; 10
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	cd bf       	out	0x3d, r28	; 61

000001e4 <__do_copy_data>:
     1e4:	11 e0       	ldi	r17, 0x01	; 1
     1e6:	a0 e0       	ldi	r26, 0x00	; 0
     1e8:	b1 e0       	ldi	r27, 0x01	; 1
     1ea:	e8 e8       	ldi	r30, 0x88	; 136
     1ec:	f7 e3       	ldi	r31, 0x37	; 55
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <__do_copy_data+0x10>
     1f0:	05 90       	lpm	r0, Z+
     1f2:	0d 92       	st	X+, r0
     1f4:	a4 36       	cpi	r26, 0x64	; 100
     1f6:	b1 07       	cpc	r27, r17
     1f8:	d9 f7       	brne	.-10     	; 0x1f0 <__do_copy_data+0xc>

000001fa <__do_clear_bss>:
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	a4 e6       	ldi	r26, 0x64	; 100
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	01 c0       	rjmp	.+2      	; 0x204 <.do_clear_bss_start>

00000202 <.do_clear_bss_loop>:
     202:	1d 92       	st	X+, r1

00000204 <.do_clear_bss_start>:
     204:	ab 3f       	cpi	r26, 0xFB	; 251
     206:	b2 07       	cpc	r27, r18
     208:	e1 f7       	brne	.-8      	; 0x202 <.do_clear_bss_loop>
     20a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <main>
     20e:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <_exit>

00000212 <__bad_interrupt>:
     212:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000216 <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(char self) {
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	c8 2f       	mov	r28, r24
/************************************************************
Initialization of Pins and System Clock
************************************************************/

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     21c:	e1 e6       	ldi	r30, 0x61	; 97
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	90 e8       	ldi	r25, 0x80	; 128
     222:	90 83       	st	Z, r25
     224:	10 82       	st	Z, r1

	// Disable JTAG
	m_disableJTAG(); // turn off JTAG port and allow access to F4-F7 as GPIO
     226:	95 bf       	out	0x35, r25	; 53
     228:	95 bf       	out	0x35, r25	; 53
	
	//Set to Input
	clear(DDRD,0); // D0
     22a:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     22c:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     22e:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     230:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     232:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     234:	23 9a       	sbi	0x04, 3	; 4
	
	set(DDRD,3); //C6 Red positioning LED
     236:	53 9a       	sbi	0x0a, 3	; 10
	set(DDRD,5); //C7 Blue positioning LED 
     238:	55 9a       	sbi	0x0a, 5	; 10
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     23a:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     23c:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     23e:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     240:	2b 98       	cbi	0x05, 3	; 5
	
	clear(PORTC,6); //Start with positioning LED off
     242:	46 98       	cbi	0x08, 6	; 8
	clear(PORTC,7); 
     244:	47 98       	cbi	0x08, 7	; 8

/************************************************************
Setup Subsystems
************************************************************/

	m_bus_init();
     246:	0e 94 5f 10 	call	0x20be	; 0x20be <m_bus_init>
	while(!m_wii_open());
     24a:	0e 94 8c 13 	call	0x2718	; 0x2718 <m_wii_open>
     24e:	88 23       	and	r24, r24
     250:	e1 f3       	breq	.-8      	; 0x24a <initialize_robockey+0x34>
	sei();
     252:	78 94       	sei
	m_usb_init();
     254:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <m_usb_init>
	if(self == RED_BULL){
     258:	c1 11       	cpse	r28, r1
     25a:	08 c0       	rjmp	.+16     	; 0x26c <initialize_robockey+0x56>
		while(!m_rf_open(CHANNEL,RXADDRESS_RED_BULL,PACKET_LENGTH)); // Configure mRF
     25c:	4a e0       	ldi	r20, 0x0A	; 10
     25e:	60 e2       	ldi	r22, 0x20	; 32
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 70 10 	call	0x20e0	; 0x20e0 <m_rf_open>
     266:	88 23       	and	r24, r24
     268:	c9 f3       	breq	.-14     	; 0x25c <initialize_robockey+0x46>
     26a:	13 c0       	rjmp	.+38     	; 0x292 <initialize_robockey+0x7c>
	}
	if(self == GREEN_MONSTER){
     26c:	c1 30       	cpi	r28, 0x01	; 1
     26e:	41 f4       	brne	.+16     	; 0x280 <initialize_robockey+0x6a>
		while(!m_rf_open(CHANNEL,RXADDRESS_GREEN_MONSTER,PACKET_LENGTH)); // Configure mRF
     270:	4a e0       	ldi	r20, 0x0A	; 10
     272:	61 e2       	ldi	r22, 0x21	; 33
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	0e 94 70 10 	call	0x20e0	; 0x20e0 <m_rf_open>
     27a:	88 23       	and	r24, r24
     27c:	c9 f3       	breq	.-14     	; 0x270 <initialize_robockey+0x5a>
     27e:	09 c0       	rjmp	.+18     	; 0x292 <initialize_robockey+0x7c>
	}
	if(self == BLUE_WHALE){
     280:	c2 30       	cpi	r28, 0x02	; 2
     282:	39 f4       	brne	.+14     	; 0x292 <initialize_robockey+0x7c>
		while(!m_rf_open(CHANNEL,RXADDRESS_BLUE_WHALE,PACKET_LENGTH)); // Configure mRF
     284:	4a e0       	ldi	r20, 0x0A	; 10
     286:	62 e2       	ldi	r22, 0x22	; 34
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <m_rf_open>
     28e:	88 23       	and	r24, r24
     290:	c9 f3       	breq	.-14     	; 0x284 <initialize_robockey+0x6e>
/************************************************************
Timer1 Initialization for PWM Motor Control
************************************************************/

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     292:	e1 e8       	ldi	r30, 0x81	; 129
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	8b 7f       	andi	r24, 0xFB	; 251
     29a:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     29c:	80 81       	ld	r24, Z
     29e:	8d 7f       	andi	r24, 0xFD	; 253
     2a0:	80 83       	st	Z, r24
	clear(TCCR1B,CS10);
     2a2:	80 81       	ld	r24, Z
     2a4:	8e 7f       	andi	r24, 0xFE	; 254
     2a6:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     2a8:	80 81       	ld	r24, Z
     2aa:	8f 7e       	andi	r24, 0xEF	; 239
     2ac:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     2ae:	80 81       	ld	r24, Z
     2b0:	88 60       	ori	r24, 0x08	; 8
     2b2:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     2b4:	e0 e8       	ldi	r30, 0x80	; 128
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	8d 7f       	andi	r24, 0xFD	; 253
     2bc:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     2be:	80 81       	ld	r24, Z
     2c0:	8e 7f       	andi	r24, 0xFE	; 254
     2c2:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     2c4:	80 81       	ld	r24, Z
     2c6:	8f 7d       	andi	r24, 0xDF	; 223
     2c8:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     2ca:	80 81       	ld	r24, Z
     2cc:	8f 7e       	andi	r24, 0xEF	; 239
     2ce:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     2d0:	c8 e8       	ldi	r28, 0x88	; 136
     2d2:	d0 e0       	ldi	r29, 0x00	; 0
     2d4:	8a ea       	ldi	r24, 0xAA	; 170
     2d6:	99 e2       	ldi	r25, 0x29	; 41
     2d8:	99 83       	std	Y+1, r25	; 0x01
     2da:	88 83       	st	Y, r24
	OCR1B = (float)OCR1A*0.1;
     2dc:	68 81       	ld	r22, Y
     2de:	79 81       	ldd	r23, Y+1	; 0x01
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 af 19 	call	0x335e	; 0x335e <__floatunsisf>
     2e8:	2d ec       	ldi	r18, 0xCD	; 205
     2ea:	3c ec       	ldi	r19, 0xCC	; 204
     2ec:	4c ec       	ldi	r20, 0xCC	; 204
     2ee:	5d e3       	ldi	r21, 0x3D	; 61
     2f0:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     2f4:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     2f8:	70 93 8b 00 	sts	0x008B, r23
     2fc:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     300:	68 81       	ld	r22, Y
     302:	79 81       	ldd	r23, Y+1	; 0x01
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 af 19 	call	0x335e	; 0x335e <__floatunsisf>
     30c:	2d ec       	ldi	r18, 0xCD	; 205
     30e:	3c ec       	ldi	r19, 0xCC	; 204
     310:	4c ec       	ldi	r20, 0xCC	; 204
     312:	5d e3       	ldi	r21, 0x3D	; 61
     314:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     318:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     31c:	70 93 8d 00 	sts	0x008D, r23
     320:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     324:	ef e6       	ldi	r30, 0x6F	; 111
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	82 60       	ori	r24, 0x02	; 2
     32c:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     32e:	80 81       	ld	r24, Z
     330:	84 60       	ori	r24, 0x04	; 4
     332:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     334:	80 81       	ld	r24, Z
     336:	88 60       	ori	r24, 0x08	; 8
     338:	80 83       	st	Z, r24

/************************************************************
Timer3 Initialization for fixed timestep calculations
************************************************************/

	clear(TCCR3B,CS32); // prescale /1
     33a:	e1 e9       	ldi	r30, 0x91	; 145
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	80 81       	ld	r24, Z
     340:	8b 7f       	andi	r24, 0xFB	; 251
     342:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     344:	80 81       	ld	r24, Z
     346:	8d 7f       	andi	r24, 0xFD	; 253
     348:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     34a:	80 81       	ld	r24, Z
     34c:	81 60       	ori	r24, 0x01	; 1
     34e:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     350:	80 81       	ld	r24, Z
     352:	8f 7e       	andi	r24, 0xEF	; 239
     354:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     356:	80 81       	ld	r24, Z
     358:	88 60       	ori	r24, 0x08	; 8
     35a:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     35c:	e0 e9       	ldi	r30, 0x90	; 144
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	8d 7f       	andi	r24, 0xFD	; 253
     364:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     366:	80 81       	ld	r24, Z
     368:	8e 7f       	andi	r24, 0xFE	; 254
     36a:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     36c:	80 e8       	ldi	r24, 0x80	; 128
     36e:	9e e3       	ldi	r25, 0x3E	; 62
     370:	90 93 99 00 	sts	0x0099, r25
     374:	80 93 98 00 	sts	0x0098, r24

/************************************************************
Timer0 Initialization for COMM test 
************************************************************/
	clear(TCCR0B,CS02); //start with timer off
     378:	85 b5       	in	r24, 0x25	; 37
     37a:	8b 7f       	andi	r24, 0xFB	; 251
     37c:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS01);
     37e:	85 b5       	in	r24, 0x25	; 37
     380:	8d 7f       	andi	r24, 0xFD	; 253
     382:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS00);
     384:	85 b5       	in	r24, 0x25	; 37
     386:	8e 7f       	andi	r24, 0xFE	; 254
     388:	85 bd       	out	0x25, r24	; 37
	
	clear(TCCR0B,WGM02); //Up to OCR0A mode 
     38a:	85 b5       	in	r24, 0x25	; 37
     38c:	87 7f       	andi	r24, 0xF7	; 247
     38e:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0A,WGM01);
     390:	84 b5       	in	r24, 0x24	; 36
     392:	8d 7f       	andi	r24, 0xFD	; 253
     394:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A,WGM00);
     396:	84 b5       	in	r24, 0x24	; 36
     398:	8e 7f       	andi	r24, 0xFE	; 254
     39a:	84 bd       	out	0x24, r24	; 36
		
	set(TIMSK0,TOIE0); //enable interupt at OCR0A
     39c:	ee e6       	ldi	r30, 0x6E	; 110
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	81 60       	ori	r24, 0x01	; 1
     3a4:	80 83       	st	Z, r24
	
/************************************************************
Setup ADC
************************************************************/
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
     3a6:	cc e7       	ldi	r28, 0x7C	; 124
     3a8:	d0 e0       	ldi	r29, 0x00	; 0
     3aa:	88 81       	ld	r24, Y
     3ac:	8f 77       	andi	r24, 0x7F	; 127
     3ae:	88 83       	st	Y, r24
	set(ADMUX,REFS0);
     3b0:	88 81       	ld	r24, Y
     3b2:	80 64       	ori	r24, 0x40	; 64
     3b4:	88 83       	st	Y, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
     3b6:	ea e7       	ldi	r30, 0x7A	; 122
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	8b 7f       	andi	r24, 0xFB	; 251
     3be:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     3c0:	80 81       	ld	r24, Z
     3c2:	82 60       	ori	r24, 0x02	; 2
     3c4:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     3c6:	80 81       	ld	r24, Z
     3c8:	81 60       	ori	r24, 0x01	; 1
     3ca:	80 83       	st	Z, r24
	
	// Disable Digital input to:
	set(DIDR0,ADC0D); // ADC0
     3cc:	ae e7       	ldi	r26, 0x7E	; 126
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	8c 91       	ld	r24, X
     3d2:	81 60       	ori	r24, 0x01	; 1
     3d4:	8c 93       	st	X, r24
	set(DIDR0,ADC1D); // ADC1
     3d6:	8c 91       	ld	r24, X
     3d8:	82 60       	ori	r24, 0x02	; 2
     3da:	8c 93       	st	X, r24
	set(DIDR0,ADC4D); // ADC4
     3dc:	8c 91       	ld	r24, X
     3de:	80 61       	ori	r24, 0x10	; 16
     3e0:	8c 93       	st	X, r24
	set(DIDR0,ADC5D); // ADC5
     3e2:	8c 91       	ld	r24, X
     3e4:	80 62       	ori	r24, 0x20	; 32
     3e6:	8c 93       	st	X, r24
	set(DIDR0,ADC6D); // ADC6
     3e8:	8c 91       	ld	r24, X
     3ea:	80 64       	ori	r24, 0x40	; 64
     3ec:	8c 93       	st	X, r24
	set(DIDR0,ADC7D); // ADC7
     3ee:	8c 91       	ld	r24, X
     3f0:	80 68       	ori	r24, 0x80	; 128
     3f2:	8c 93       	st	X, r24
	set(DIDR2,ADC8D); // ADC8
     3f4:	ad e7       	ldi	r26, 0x7D	; 125
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	8c 91       	ld	r24, X
     3fa:	81 60       	ori	r24, 0x01	; 1
     3fc:	8c 93       	st	X, r24
	set(DIDR2,ADC9D); // ADC9
     3fe:	8c 91       	ld	r24, X
     400:	82 60       	ori	r24, 0x02	; 2
     402:	8c 93       	st	X, r24
	set(DIDR2,ADC10D); // ADC10
     404:	8c 91       	ld	r24, X
     406:	84 60       	ori	r24, 0x04	; 4
     408:	8c 93       	st	X, r24
	set(DIDR2,ADC11D); // ADC11
     40a:	8c 91       	ld	r24, X
     40c:	88 60       	ori	r24, 0x08	; 8
     40e:	8c 93       	st	X, r24
	set(DIDR2,ADC12D); // ADC812
     410:	8c 91       	ld	r24, X
     412:	80 61       	ori	r24, 0x10	; 16
     414:	8c 93       	st	X, r24
	set(DIDR2,ADC13D); // ADC13
     416:	8c 91       	ld	r24, X
     418:	80 62       	ori	r24, 0x20	; 32
     41a:	8c 93       	st	X, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
     41c:	80 81       	ld	r24, Z
     41e:	8f 7d       	andi	r24, 0xDF	; 223
     420:	80 83       	st	Z, r24
	
	set(ADCSRB,MUX5); // Select ADC13 at pin B6
     422:	ab e7       	ldi	r26, 0x7B	; 123
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	8c 91       	ld	r24, X
     428:	80 62       	ori	r24, 0x20	; 32
     42a:	8c 93       	st	X, r24
	set(ADMUX,MUX2); // Transistor 4
     42c:	88 81       	ld	r24, Y
     42e:	84 60       	ori	r24, 0x04	; 4
     430:	88 83       	st	Y, r24
	clear(ADMUX,MUX1);
     432:	88 81       	ld	r24, Y
     434:	8d 7f       	andi	r24, 0xFD	; 253
     436:	88 83       	st	Y, r24
	set(ADMUX,MUX0);
     438:	88 81       	ld	r24, Y
     43a:	81 60       	ori	r24, 0x01	; 1
     43c:	88 83       	st	Y, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
     43e:	80 81       	ld	r24, Z
     440:	80 68       	ori	r24, 0x80	; 128
     442:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
     444:	80 81       	ld	r24, Z
     446:	80 64       	ori	r24, 0x40	; 64
     448:	80 83       	st	Z, r24

}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <positioning_LED>:
Positioning LED Color
************************************************************/

void positioning_LED(int color)
{
	switch(color)
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	91 05       	cpc	r25, r1
     454:	41 f0       	breq	.+16     	; 0x466 <positioning_LED+0x16>
     456:	82 30       	cpi	r24, 0x02	; 2
     458:	91 05       	cpc	r25, r1
     45a:	41 f0       	breq	.+16     	; 0x46c <positioning_LED+0x1c>
     45c:	89 2b       	or	r24, r25
     45e:	41 f4       	brne	.+16     	; 0x470 <positioning_LED+0x20>
	{ 
		case OFF:	//OFF
			clear(PORTD,3);
     460:	5b 98       	cbi	0x0b, 3	; 11
			clear(PORTD,5);
     462:	5d 98       	cbi	0x0b, 5	; 11
			break;
     464:	08 95       	ret
		
		case BLUE:	//BLUE
			set(PORTD,5);
     466:	5d 9a       	sbi	0x0b, 5	; 11
			clear(PORTD,3);
     468:	5b 98       	cbi	0x0b, 3	; 11
			break;
     46a:	08 95       	ret
			
		case RED: //RED
			clear(PORTD,5);
     46c:	5d 98       	cbi	0x0b, 5	; 11
			set(PORTD,3);
     46e:	5b 9a       	sbi	0x0b, 3	; 11
     470:	08 95       	ret

00000472 <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	91 05       	cpc	r25, r1
     476:	f9 f0       	breq	.+62     	; 0x4b6 <distIndex+0x44>
     478:	2c f4       	brge	.+10     	; 0x484 <distIndex+0x12>
     47a:	00 97       	sbiw	r24, 0x00	; 0
     47c:	51 f0       	breq	.+20     	; 0x492 <distIndex+0x20>
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	89 f0       	breq	.+34     	; 0x4a4 <distIndex+0x32>
     482:	42 c0       	rjmp	.+132    	; 0x508 <distIndex+0x96>
     484:	84 30       	cpi	r24, 0x04	; 4
     486:	91 05       	cpc	r25, r1
     488:	51 f1       	breq	.+84     	; 0x4de <distIndex+0x6c>
     48a:	f4 f0       	brlt	.+60     	; 0x4c8 <distIndex+0x56>
     48c:	05 97       	sbiw	r24, 0x05	; 5
     48e:	91 f1       	breq	.+100    	; 0x4f4 <distIndex+0x82>
     490:	3b c0       	rjmp	.+118    	; 0x508 <distIndex+0x96>
	{
		case 0 : 
			pointsUsed[0] = 0;
     492:	e4 e6       	ldi	r30, 0x64	; 100
     494:	f1 e0       	ldi	r31, 0x01	; 1
     496:	11 82       	std	Z+1, r1	; 0x01
     498:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	93 83       	std	Z+3, r25	; 0x03
     4a0:	82 83       	std	Z+2, r24	; 0x02
			break;
     4a2:	32 c0       	rjmp	.+100    	; 0x508 <distIndex+0x96>
			
		case 1 : 
			pointsUsed[0] = 0;
     4a4:	e4 e6       	ldi	r30, 0x64	; 100
     4a6:	f1 e0       	ldi	r31, 0x01	; 1
     4a8:	11 82       	std	Z+1, r1	; 0x01
     4aa:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     4ac:	82 e0       	ldi	r24, 0x02	; 2
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	93 83       	std	Z+3, r25	; 0x03
     4b2:	82 83       	std	Z+2, r24	; 0x02
			break;
     4b4:	29 c0       	rjmp	.+82     	; 0x508 <distIndex+0x96>
			
		case 2 : 
			pointsUsed[0] = 0;
     4b6:	e4 e6       	ldi	r30, 0x64	; 100
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	11 82       	std	Z+1, r1	; 0x01
     4bc:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     4be:	83 e0       	ldi	r24, 0x03	; 3
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	93 83       	std	Z+3, r25	; 0x03
     4c4:	82 83       	std	Z+2, r24	; 0x02
			break;
     4c6:	20 c0       	rjmp	.+64     	; 0x508 <distIndex+0x96>
			
		case 3 : 
			pointsUsed[0] = 1;
     4c8:	e4 e6       	ldi	r30, 0x64	; 100
     4ca:	f1 e0       	ldi	r31, 0x01	; 1
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	91 83       	std	Z+1, r25	; 0x01
     4d2:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	93 83       	std	Z+3, r25	; 0x03
     4da:	82 83       	std	Z+2, r24	; 0x02
			break;
     4dc:	15 c0       	rjmp	.+42     	; 0x508 <distIndex+0x96>
			
		case 4 : 
			pointsUsed[0] = 1;
     4de:	e4 e6       	ldi	r30, 0x64	; 100
     4e0:	f1 e0       	ldi	r31, 0x01	; 1
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	91 83       	std	Z+1, r25	; 0x01
     4e8:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     4ea:	83 e0       	ldi	r24, 0x03	; 3
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	93 83       	std	Z+3, r25	; 0x03
     4f0:	82 83       	std	Z+2, r24	; 0x02
			break;
     4f2:	0a c0       	rjmp	.+20     	; 0x508 <distIndex+0x96>
			
		case 5 :
			pointsUsed[0] = 2;
     4f4:	e4 e6       	ldi	r30, 0x64	; 100
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	91 83       	std	Z+1, r25	; 0x01
     4fe:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     500:	83 e0       	ldi	r24, 0x03	; 3
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	93 83       	std	Z+3, r25	; 0x03
     506:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     508:	84 e6       	ldi	r24, 0x64	; 100
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	08 95       	ret

0000050e <orientationCalculationFour>:


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
     50e:	2f 92       	push	r2
     510:	3f 92       	push	r3
     512:	4f 92       	push	r4
     514:	5f 92       	push	r5
     516:	6f 92       	push	r6
     518:	7f 92       	push	r7
     51a:	8f 92       	push	r8
     51c:	9f 92       	push	r9
     51e:	af 92       	push	r10
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	00 d0       	rcall	.+0      	; 0x534 <orientationCalculationFour+0x26>
     534:	00 d0       	rcall	.+0      	; 0x536 <orientationCalculationFour+0x28>
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	5c 01       	movw	r10, r24
     53c:	4a 01       	movw	r8, r20
     53e:	3a 83       	std	Y+2, r19	; 0x02
     540:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     542:	06 2f       	mov	r16, r22
     544:	17 2f       	mov	r17, r23
     546:	f8 01       	movw	r30, r16
     548:	41 90       	ld	r4, Z+
     54a:	51 90       	ld	r5, Z+
     54c:	61 90       	ld	r6, Z+
     54e:	71 90       	ld	r7, Z+
     550:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     552:	1c 82       	std	Y+4, r1	; 0x04
     554:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     556:	21 2c       	mov	r2, r1
     558:	31 2c       	mov	r3, r1
     55a:	12 c0       	rjmp	.+36     	; 0x580 <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     55c:	f8 01       	movw	r30, r16
     55e:	c1 90       	ld	r12, Z+
     560:	d1 90       	ld	r13, Z+
     562:	e1 90       	ld	r14, Z+
     564:	f1 90       	ld	r15, Z+
     566:	8f 01       	movw	r16, r30
     568:	a7 01       	movw	r20, r14
     56a:	96 01       	movw	r18, r12
     56c:	c3 01       	movw	r24, r6
     56e:	b2 01       	movw	r22, r4
     570:	0e 94 c7 1a 	call	0x358e	; 0x358e <__gesf2>
     574:	18 16       	cp	r1, r24
     576:	24 f4       	brge	.+8      	; 0x580 <orientationCalculationFour+0x72>
     578:	26 01       	movw	r4, r12
     57a:	37 01       	movw	r6, r14
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     57c:	2b 80       	ldd	r2, Y+3	; 0x03
     57e:	3c 80       	ldd	r3, Y+4	; 0x04
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	9c 81       	ldd	r25, Y+4	; 0x04
     584:	01 96       	adiw	r24, 0x01	; 1
     586:	9c 83       	std	Y+4, r25	; 0x04
     588:	8b 83       	std	Y+3, r24	; 0x03
     58a:	06 97       	sbiw	r24, 0x06	; 6
     58c:	39 f7       	brne	.-50     	; 0x55c <orientationCalculationFour+0x4e>
		}
	}
	
	//Find points used by shortest length	
	int* pointsShortRef;
	pointsShortRef = distIndex(indexMin);	
     58e:	82 2d       	mov	r24, r2
     590:	93 2d       	mov	r25, r3
     592:	0e 94 39 02 	call	0x472	; 0x472 <distIndex>
	int pointsShort[2] = {pointsShortRef[0], pointsShortRef[1]};	
     596:	fc 01       	movw	r30, r24
     598:	20 81       	ld	r18, Z
     59a:	31 81       	ldd	r19, Z+1	; 0x01
     59c:	62 81       	ldd	r22, Z+2	; 0x02
     59e:	73 81       	ldd	r23, Z+3	; 0x03
	if (pointsShort[0] == pointsLong[0]){
     5a0:	f5 01       	movw	r30, r10
     5a2:	40 81       	ld	r20, Z
     5a4:	51 81       	ldd	r21, Z+1	; 0x01
     5a6:	24 17       	cp	r18, r20
     5a8:	35 07       	cpc	r19, r21
     5aa:	59 f4       	brne	.+22     	; 0x5c2 <orientationCalculationFour+0xb4>
		*top = pointsLong[0];
     5ac:	f4 01       	movw	r30, r8
     5ae:	31 83       	std	Z+1, r19	; 0x01
     5b0:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     5b2:	f5 01       	movw	r30, r10
     5b4:	82 81       	ldd	r24, Z+2	; 0x02
     5b6:	93 81       	ldd	r25, Z+3	; 0x03
     5b8:	e9 81       	ldd	r30, Y+1	; 0x01
     5ba:	fa 81       	ldd	r31, Y+2	; 0x02
     5bc:	91 83       	std	Z+1, r25	; 0x01
     5be:	80 83       	st	Z, r24
     5c0:	37 c0       	rjmp	.+110    	; 0x630 <orientationCalculationFour+0x122>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     5c2:	f5 01       	movw	r30, r10
     5c4:	82 81       	ldd	r24, Z+2	; 0x02
     5c6:	93 81       	ldd	r25, Z+3	; 0x03
     5c8:	28 17       	cp	r18, r24
     5ca:	39 07       	cpc	r19, r25
     5cc:	59 f4       	brne	.+22     	; 0x5e4 <orientationCalculationFour+0xd6>
			*top = pointsLong[1];
     5ce:	f4 01       	movw	r30, r8
     5d0:	31 83       	std	Z+1, r19	; 0x01
     5d2:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     5d4:	f5 01       	movw	r30, r10
     5d6:	80 81       	ld	r24, Z
     5d8:	91 81       	ldd	r25, Z+1	; 0x01
     5da:	e9 81       	ldd	r30, Y+1	; 0x01
     5dc:	fa 81       	ldd	r31, Y+2	; 0x02
     5de:	91 83       	std	Z+1, r25	; 0x01
     5e0:	80 83       	st	Z, r24
     5e2:	26 c0       	rjmp	.+76     	; 0x630 <orientationCalculationFour+0x122>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     5e4:	64 17       	cp	r22, r20
     5e6:	75 07       	cpc	r23, r21
     5e8:	59 f4       	brne	.+22     	; 0x600 <orientationCalculationFour+0xf2>
				*top = pointsLong[0];
     5ea:	f4 01       	movw	r30, r8
     5ec:	71 83       	std	Z+1, r23	; 0x01
     5ee:	60 83       	st	Z, r22
				*bottom = pointsLong[1];
     5f0:	f5 01       	movw	r30, r10
     5f2:	82 81       	ldd	r24, Z+2	; 0x02
     5f4:	93 81       	ldd	r25, Z+3	; 0x03
     5f6:	e9 81       	ldd	r30, Y+1	; 0x01
     5f8:	fa 81       	ldd	r31, Y+2	; 0x02
     5fa:	91 83       	std	Z+1, r25	; 0x01
     5fc:	80 83       	st	Z, r24
     5fe:	18 c0       	rjmp	.+48     	; 0x630 <orientationCalculationFour+0x122>
			} else {
				if (pointsShort[1] == pointsLong[1])
     600:	68 17       	cp	r22, r24
     602:	79 07       	cpc	r23, r25
     604:	59 f4       	brne	.+22     	; 0x61c <orientationCalculationFour+0x10e>
				{
					*top = pointsLong[1];
     606:	f4 01       	movw	r30, r8
     608:	71 83       	std	Z+1, r23	; 0x01
     60a:	60 83       	st	Z, r22
					*bottom = pointsLong[0];
     60c:	f5 01       	movw	r30, r10
     60e:	80 81       	ld	r24, Z
     610:	91 81       	ldd	r25, Z+1	; 0x01
     612:	e9 81       	ldd	r30, Y+1	; 0x01
     614:	fa 81       	ldd	r31, Y+2	; 0x02
     616:	91 83       	std	Z+1, r25	; 0x01
     618:	80 83       	st	Z, r24
     61a:	0a c0       	rjmp	.+20     	; 0x630 <orientationCalculationFour+0x122>
				} else {
						*top = pointsLong[1];
     61c:	f4 01       	movw	r30, r8
     61e:	91 83       	std	Z+1, r25	; 0x01
     620:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     622:	f5 01       	movw	r30, r10
     624:	80 81       	ld	r24, Z
     626:	91 81       	ldd	r25, Z+1	; 0x01
     628:	e9 81       	ldd	r30, Y+1	; 0x01
     62a:	fa 81       	ldd	r31, Y+2	; 0x02
     62c:	91 83       	std	Z+1, r25	; 0x01
     62e:	80 83       	st	Z, r24
				}
			}
		}
	}
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	df 90       	pop	r13
     646:	cf 90       	pop	r12
     648:	bf 90       	pop	r11
     64a:	af 90       	pop	r10
     64c:	9f 90       	pop	r9
     64e:	8f 90       	pop	r8
     650:	7f 90       	pop	r7
     652:	6f 90       	pop	r6
     654:	5f 90       	pop	r5
     656:	4f 90       	pop	r4
     658:	3f 90       	pop	r3
     65a:	2f 90       	pop	r2
     65c:	08 95       	ret

0000065e <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     65e:	2f 92       	push	r2
     660:	3f 92       	push	r3
     662:	4f 92       	push	r4
     664:	5f 92       	push	r5
     666:	6f 92       	push	r6
     668:	7f 92       	push	r7
     66a:	8f 92       	push	r8
     66c:	9f 92       	push	r9
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	c2 54       	subi	r28, 0x42	; 66
     688:	d1 09       	sbc	r29, r1
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
     694:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     696:	fc 01       	movw	r30, r24
     698:	04 80       	ldd	r0, Z+4	; 0x04
     69a:	f5 81       	ldd	r31, Z+5	; 0x05
     69c:	e0 2d       	mov	r30, r0
     69e:	fa a3       	std	Y+34, r31	; 0x22
     6a0:	e9 a3       	std	Y+33, r30	; 0x21
     6a2:	fc 01       	movw	r30, r24
     6a4:	00 81       	ld	r16, Z
     6a6:	11 81       	ldd	r17, Z+1	; 0x01
     6a8:	69 a1       	ldd	r22, Y+33	; 0x21
     6aa:	7a a1       	ldd	r23, Y+34	; 0x22
     6ac:	60 1b       	sub	r22, r16
     6ae:	71 0b       	sbc	r23, r17
     6b0:	07 2e       	mov	r0, r23
     6b2:	00 0c       	add	r0, r0
     6b4:	88 0b       	sbc	r24, r24
     6b6:	99 0b       	sbc	r25, r25
     6b8:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     6bc:	6b 01       	movw	r12, r22
     6be:	7c 01       	movw	r14, r24
     6c0:	f2 01       	movw	r30, r4
     6c2:	06 80       	ldd	r0, Z+6	; 0x06
     6c4:	f7 81       	ldd	r31, Z+7	; 0x07
     6c6:	e0 2d       	mov	r30, r0
     6c8:	fe a3       	std	Y+38, r31	; 0x26
     6ca:	ed a3       	std	Y+37, r30	; 0x25
     6cc:	f2 01       	movw	r30, r4
     6ce:	22 80       	ldd	r2, Z+2	; 0x02
     6d0:	33 80       	ldd	r3, Z+3	; 0x03
     6d2:	ad a0       	ldd	r10, Y+37	; 0x25
     6d4:	be a0       	ldd	r11, Y+38	; 0x26
     6d6:	a2 18       	sub	r10, r2
     6d8:	b3 08       	sbc	r11, r3
     6da:	9b 01       	movw	r18, r22
     6dc:	ac 01       	movw	r20, r24
     6de:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     6e2:	69 a7       	std	Y+41, r22	; 0x29
     6e4:	7a a7       	std	Y+42, r23	; 0x2a
     6e6:	8b a7       	std	Y+43, r24	; 0x2b
     6e8:	9c a7       	std	Y+44, r25	; 0x2c
     6ea:	aa 9c       	mul	r10, r10
     6ec:	40 01       	movw	r8, r0
     6ee:	ab 9c       	mul	r10, r11
     6f0:	90 0c       	add	r9, r0
     6f2:	90 0c       	add	r9, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	09 2c       	mov	r0, r9
     6f8:	00 0c       	add	r0, r0
     6fa:	aa 08       	sbc	r10, r10
     6fc:	bb 08       	sbc	r11, r11
     6fe:	a7 01       	movw	r20, r14
     700:	96 01       	movw	r18, r12
     702:	c7 01       	movw	r24, r14
     704:	b6 01       	movw	r22, r12
     706:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     70a:	6b 01       	movw	r12, r22
     70c:	7c 01       	movw	r14, r24
     70e:	c5 01       	movw	r24, r10
     710:	b4 01       	movw	r22, r8
     712:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     716:	9b 01       	movw	r18, r22
     718:	ac 01       	movw	r20, r24
     71a:	c7 01       	movw	r24, r14
     71c:	b6 01       	movw	r22, r12
     71e:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
     722:	0e 94 4f 1b 	call	0x369e	; 0x369e <sqrt>
     726:	6b af       	std	Y+59, r22	; 0x3b
     728:	7c af       	std	Y+60, r23	; 0x3c
     72a:	8d af       	std	Y+61, r24	; 0x3d
     72c:	9e af       	std	Y+62, r25	; 0x3e
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     72e:	f2 01       	movw	r30, r4
     730:	00 84       	ldd	r0, Z+8	; 0x08
     732:	f1 85       	ldd	r31, Z+9	; 0x09
     734:	e0 2d       	mov	r30, r0
     736:	fa a7       	std	Y+42, r31	; 0x2a
     738:	e9 a7       	std	Y+41, r30	; 0x29
     73a:	bf 01       	movw	r22, r30
     73c:	60 1b       	sub	r22, r16
     73e:	71 0b       	sbc	r23, r17
     740:	07 2e       	mov	r0, r23
     742:	00 0c       	add	r0, r0
     744:	88 0b       	sbc	r24, r24
     746:	99 0b       	sbc	r25, r25
     748:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     74c:	6b 01       	movw	r12, r22
     74e:	7c 01       	movw	r14, r24
     750:	f2 01       	movw	r30, r4
     752:	62 84       	ldd	r6, Z+10	; 0x0a
     754:	73 84       	ldd	r7, Z+11	; 0x0b
     756:	53 01       	movw	r10, r6
     758:	a2 18       	sub	r10, r2
     75a:	b3 08       	sbc	r11, r3
     75c:	9b 01       	movw	r18, r22
     75e:	ac 01       	movw	r20, r24
     760:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     764:	6d a7       	std	Y+45, r22	; 0x2d
     766:	7e a7       	std	Y+46, r23	; 0x2e
     768:	8f a7       	std	Y+47, r24	; 0x2f
     76a:	98 ab       	std	Y+48, r25	; 0x30
     76c:	aa 9c       	mul	r10, r10
     76e:	40 01       	movw	r8, r0
     770:	ab 9c       	mul	r10, r11
     772:	90 0c       	add	r9, r0
     774:	90 0c       	add	r9, r0
     776:	11 24       	eor	r1, r1
     778:	09 2c       	mov	r0, r9
     77a:	00 0c       	add	r0, r0
     77c:	aa 08       	sbc	r10, r10
     77e:	bb 08       	sbc	r11, r11
     780:	a7 01       	movw	r20, r14
     782:	96 01       	movw	r18, r12
     784:	c7 01       	movw	r24, r14
     786:	b6 01       	movw	r22, r12
     788:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     78c:	6b 01       	movw	r12, r22
     78e:	7c 01       	movw	r14, r24
     790:	c5 01       	movw	r24, r10
     792:	b4 01       	movw	r22, r8
     794:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     798:	9b 01       	movw	r18, r22
     79a:	ac 01       	movw	r20, r24
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
     7a4:	0e 94 4f 1b 	call	0x369e	; 0x369e <sqrt>
     7a8:	23 96       	adiw	r28, 0x03	; 3
     7aa:	6c af       	std	Y+60, r22	; 0x3c
     7ac:	7d af       	std	Y+61, r23	; 0x3d
     7ae:	8e af       	std	Y+62, r24	; 0x3e
     7b0:	9f af       	std	Y+63, r25	; 0x3f
     7b2:	23 97       	sbiw	r28, 0x03	; 3
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     7b4:	f2 01       	movw	r30, r4
     7b6:	04 84       	ldd	r0, Z+12	; 0x0c
     7b8:	f5 85       	ldd	r31, Z+13	; 0x0d
     7ba:	e0 2d       	mov	r30, r0
     7bc:	fe a7       	std	Y+46, r31	; 0x2e
     7be:	ed a7       	std	Y+45, r30	; 0x2d
     7c0:	bf 01       	movw	r22, r30
     7c2:	60 1b       	sub	r22, r16
     7c4:	71 0b       	sbc	r23, r17
     7c6:	07 2e       	mov	r0, r23
     7c8:	00 0c       	add	r0, r0
     7ca:	88 0b       	sbc	r24, r24
     7cc:	99 0b       	sbc	r25, r25
     7ce:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     7d2:	4b 01       	movw	r8, r22
     7d4:	5c 01       	movw	r10, r24
     7d6:	f2 01       	movw	r30, r4
     7d8:	06 84       	ldd	r0, Z+14	; 0x0e
     7da:	f7 85       	ldd	r31, Z+15	; 0x0f
     7dc:	e0 2d       	mov	r30, r0
     7de:	fa ab       	std	Y+50, r31	; 0x32
     7e0:	e9 ab       	std	Y+49, r30	; 0x31
     7e2:	8f 01       	movw	r16, r30
     7e4:	02 19       	sub	r16, r2
     7e6:	13 09       	sbc	r17, r3
     7e8:	9b 01       	movw	r18, r22
     7ea:	ac 01       	movw	r20, r24
     7ec:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     7f0:	6b ab       	std	Y+51, r22	; 0x33
     7f2:	7c ab       	std	Y+52, r23	; 0x34
     7f4:	8d ab       	std	Y+53, r24	; 0x35
     7f6:	9e ab       	std	Y+54, r25	; 0x36
     7f8:	00 9f       	mul	r16, r16
     7fa:	60 01       	movw	r12, r0
     7fc:	01 9f       	mul	r16, r17
     7fe:	d0 0c       	add	r13, r0
     800:	d0 0c       	add	r13, r0
     802:	11 24       	eor	r1, r1
     804:	0d 2c       	mov	r0, r13
     806:	00 0c       	add	r0, r0
     808:	ee 08       	sbc	r14, r14
     80a:	ff 08       	sbc	r15, r15
     80c:	a5 01       	movw	r20, r10
     80e:	94 01       	movw	r18, r8
     810:	c5 01       	movw	r24, r10
     812:	b4 01       	movw	r22, r8
     814:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     818:	4b 01       	movw	r8, r22
     81a:	5c 01       	movw	r10, r24
     81c:	c7 01       	movw	r24, r14
     81e:	b6 01       	movw	r22, r12
     820:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     824:	9b 01       	movw	r18, r22
     826:	ac 01       	movw	r20, r24
     828:	c5 01       	movw	r24, r10
     82a:	b4 01       	movw	r22, r8
     82c:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
     830:	0e 94 4f 1b 	call	0x369e	; 0x369e <sqrt>
     834:	6b ab       	std	Y+51, r22	; 0x33
     836:	7c ab       	std	Y+52, r23	; 0x34
     838:	8d ab       	std	Y+53, r24	; 0x35
     83a:	9e ab       	std	Y+54, r25	; 0x36
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     83c:	69 a5       	ldd	r22, Y+41	; 0x29
     83e:	7a a5       	ldd	r23, Y+42	; 0x2a
     840:	29 a1       	ldd	r18, Y+33	; 0x21
     842:	3a a1       	ldd	r19, Y+34	; 0x22
     844:	62 1b       	sub	r22, r18
     846:	73 0b       	sbc	r23, r19
     848:	07 2e       	mov	r0, r23
     84a:	00 0c       	add	r0, r0
     84c:	88 0b       	sbc	r24, r24
     84e:	99 0b       	sbc	r25, r25
     850:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     854:	4b 01       	movw	r8, r22
     856:	5c 01       	movw	r10, r24
     858:	83 01       	movw	r16, r6
     85a:	4d a1       	ldd	r20, Y+37	; 0x25
     85c:	5e a1       	ldd	r21, Y+38	; 0x26
     85e:	04 1b       	sub	r16, r20
     860:	15 0b       	sbc	r17, r21
     862:	9b 01       	movw	r18, r22
     864:	ac 01       	movw	r20, r24
     866:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     86a:	6f ab       	std	Y+55, r22	; 0x37
     86c:	78 af       	std	Y+56, r23	; 0x38
     86e:	89 af       	std	Y+57, r24	; 0x39
     870:	9a af       	std	Y+58, r25	; 0x3a
     872:	00 9f       	mul	r16, r16
     874:	60 01       	movw	r12, r0
     876:	01 9f       	mul	r16, r17
     878:	d0 0c       	add	r13, r0
     87a:	d0 0c       	add	r13, r0
     87c:	11 24       	eor	r1, r1
     87e:	0d 2c       	mov	r0, r13
     880:	00 0c       	add	r0, r0
     882:	ee 08       	sbc	r14, r14
     884:	ff 08       	sbc	r15, r15
     886:	a5 01       	movw	r20, r10
     888:	94 01       	movw	r18, r8
     88a:	c5 01       	movw	r24, r10
     88c:	b4 01       	movw	r22, r8
     88e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     892:	4b 01       	movw	r8, r22
     894:	5c 01       	movw	r10, r24
     896:	c7 01       	movw	r24, r14
     898:	b6 01       	movw	r22, r12
     89a:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
     8a2:	c5 01       	movw	r24, r10
     8a4:	b4 01       	movw	r22, r8
     8a6:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
     8aa:	0e 94 4f 1b 	call	0x369e	; 0x369e <sqrt>
     8ae:	6f ab       	std	Y+55, r22	; 0x37
     8b0:	78 af       	std	Y+56, r23	; 0x38
     8b2:	89 af       	std	Y+57, r24	; 0x39
     8b4:	9a af       	std	Y+58, r25	; 0x3a
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     8b6:	6d a5       	ldd	r22, Y+45	; 0x2d
     8b8:	7e a5       	ldd	r23, Y+46	; 0x2e
     8ba:	89 a1       	ldd	r24, Y+33	; 0x21
     8bc:	9a a1       	ldd	r25, Y+34	; 0x22
     8be:	68 1b       	sub	r22, r24
     8c0:	79 0b       	sbc	r23, r25
     8c2:	07 2e       	mov	r0, r23
     8c4:	00 0c       	add	r0, r0
     8c6:	88 0b       	sbc	r24, r24
     8c8:	99 0b       	sbc	r25, r25
     8ca:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     8ce:	4b 01       	movw	r8, r22
     8d0:	5c 01       	movw	r10, r24
     8d2:	09 a9       	ldd	r16, Y+49	; 0x31
     8d4:	1a a9       	ldd	r17, Y+50	; 0x32
     8d6:	ed a1       	ldd	r30, Y+37	; 0x25
     8d8:	fe a1       	ldd	r31, Y+38	; 0x26
     8da:	0e 1b       	sub	r16, r30
     8dc:	1f 0b       	sbc	r17, r31
     8de:	9b 01       	movw	r18, r22
     8e0:	ac 01       	movw	r20, r24
     8e2:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     8e6:	69 a3       	std	Y+33, r22	; 0x21
     8e8:	7a a3       	std	Y+34, r23	; 0x22
     8ea:	8b a3       	std	Y+35, r24	; 0x23
     8ec:	9c a3       	std	Y+36, r25	; 0x24
     8ee:	00 9f       	mul	r16, r16
     8f0:	60 01       	movw	r12, r0
     8f2:	01 9f       	mul	r16, r17
     8f4:	d0 0c       	add	r13, r0
     8f6:	d0 0c       	add	r13, r0
     8f8:	11 24       	eor	r1, r1
     8fa:	0d 2c       	mov	r0, r13
     8fc:	00 0c       	add	r0, r0
     8fe:	ee 08       	sbc	r14, r14
     900:	ff 08       	sbc	r15, r15
     902:	a5 01       	movw	r20, r10
     904:	94 01       	movw	r18, r8
     906:	c5 01       	movw	r24, r10
     908:	b4 01       	movw	r22, r8
     90a:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     90e:	4b 01       	movw	r8, r22
     910:	5c 01       	movw	r10, r24
     912:	c7 01       	movw	r24, r14
     914:	b6 01       	movw	r22, r12
     916:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	c5 01       	movw	r24, r10
     920:	b4 01       	movw	r22, r8
     922:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
     926:	0e 94 4f 1b 	call	0x369e	; 0x369e <sqrt>
     92a:	4b 01       	movw	r8, r22
     92c:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     92e:	6d a5       	ldd	r22, Y+45	; 0x2d
     930:	7e a5       	ldd	r23, Y+46	; 0x2e
     932:	29 a5       	ldd	r18, Y+41	; 0x29
     934:	3a a5       	ldd	r19, Y+42	; 0x2a
     936:	62 1b       	sub	r22, r18
     938:	73 0b       	sbc	r23, r19
     93a:	07 2e       	mov	r0, r23
     93c:	00 0c       	add	r0, r0
     93e:	88 0b       	sbc	r24, r24
     940:	99 0b       	sbc	r25, r25
     942:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     946:	69 a3       	std	Y+33, r22	; 0x21
     948:	7a a3       	std	Y+34, r23	; 0x22
     94a:	8b a3       	std	Y+35, r24	; 0x23
     94c:	9c a3       	std	Y+36, r25	; 0x24
     94e:	09 a9       	ldd	r16, Y+49	; 0x31
     950:	1a a9       	ldd	r17, Y+50	; 0x32
     952:	06 19       	sub	r16, r6
     954:	17 09       	sbc	r17, r7
     956:	9b 01       	movw	r18, r22
     958:	ac 01       	movw	r20, r24
     95a:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     95e:	6d a3       	std	Y+37, r22	; 0x25
     960:	7e a3       	std	Y+38, r23	; 0x26
     962:	8f a3       	std	Y+39, r24	; 0x27
     964:	98 a7       	std	Y+40, r25	; 0x28
     966:	00 9f       	mul	r16, r16
     968:	60 01       	movw	r12, r0
     96a:	01 9f       	mul	r16, r17
     96c:	d0 0c       	add	r13, r0
     96e:	d0 0c       	add	r13, r0
     970:	11 24       	eor	r1, r1
     972:	0d 2c       	mov	r0, r13
     974:	00 0c       	add	r0, r0
     976:	ee 08       	sbc	r14, r14
     978:	ff 08       	sbc	r15, r15
     97a:	29 a1       	ldd	r18, Y+33	; 0x21
     97c:	3a a1       	ldd	r19, Y+34	; 0x22
     97e:	4b a1       	ldd	r20, Y+35	; 0x23
     980:	5c a1       	ldd	r21, Y+36	; 0x24
     982:	ca 01       	movw	r24, r20
     984:	b9 01       	movw	r22, r18
     986:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     98a:	69 a3       	std	Y+33, r22	; 0x21
     98c:	7a a3       	std	Y+34, r23	; 0x22
     98e:	8b a3       	std	Y+35, r24	; 0x23
     990:	9c a3       	std	Y+36, r25	; 0x24
     992:	c7 01       	movw	r24, r14
     994:	b6 01       	movw	r22, r12
     996:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	69 a1       	ldd	r22, Y+33	; 0x21
     9a0:	7a a1       	ldd	r23, Y+34	; 0x22
     9a2:	8b a1       	ldd	r24, Y+35	; 0x23
     9a4:	9c a1       	ldd	r25, Y+36	; 0x24
     9a6:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
     9aa:	0e 94 4f 1b 	call	0x369e	; 0x369e <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     9ae:	2b ad       	ldd	r18, Y+59	; 0x3b
     9b0:	3c ad       	ldd	r19, Y+60	; 0x3c
     9b2:	4d ad       	ldd	r20, Y+61	; 0x3d
     9b4:	5e ad       	ldd	r21, Y+62	; 0x3e
     9b6:	29 83       	std	Y+1, r18	; 0x01
     9b8:	3a 83       	std	Y+2, r19	; 0x02
     9ba:	4b 83       	std	Y+3, r20	; 0x03
     9bc:	5c 83       	std	Y+4, r21	; 0x04
     9be:	23 96       	adiw	r28, 0x03	; 3
     9c0:	2c ad       	ldd	r18, Y+60	; 0x3c
     9c2:	3d ad       	ldd	r19, Y+61	; 0x3d
     9c4:	4e ad       	ldd	r20, Y+62	; 0x3e
     9c6:	5f ad       	ldd	r21, Y+63	; 0x3f
     9c8:	23 97       	sbiw	r28, 0x03	; 3
     9ca:	2d 83       	std	Y+5, r18	; 0x05
     9cc:	3e 83       	std	Y+6, r19	; 0x06
     9ce:	4f 83       	std	Y+7, r20	; 0x07
     9d0:	58 87       	std	Y+8, r21	; 0x08
     9d2:	2b a9       	ldd	r18, Y+51	; 0x33
     9d4:	3c a9       	ldd	r19, Y+52	; 0x34
     9d6:	4d a9       	ldd	r20, Y+53	; 0x35
     9d8:	5e a9       	ldd	r21, Y+54	; 0x36
     9da:	29 87       	std	Y+9, r18	; 0x09
     9dc:	3a 87       	std	Y+10, r19	; 0x0a
     9de:	4b 87       	std	Y+11, r20	; 0x0b
     9e0:	5c 87       	std	Y+12, r21	; 0x0c
     9e2:	2f a9       	ldd	r18, Y+55	; 0x37
     9e4:	38 ad       	ldd	r19, Y+56	; 0x38
     9e6:	49 ad       	ldd	r20, Y+57	; 0x39
     9e8:	5a ad       	ldd	r21, Y+58	; 0x3a
     9ea:	2d 87       	std	Y+13, r18	; 0x0d
     9ec:	3e 87       	std	Y+14, r19	; 0x0e
     9ee:	4f 87       	std	Y+15, r20	; 0x0f
     9f0:	58 8b       	std	Y+16, r21	; 0x10
     9f2:	89 8a       	std	Y+17, r8	; 0x11
     9f4:	9a 8a       	std	Y+18, r9	; 0x12
     9f6:	ab 8a       	std	Y+19, r10	; 0x13
     9f8:	bc 8a       	std	Y+20, r11	; 0x14
     9fa:	6d 8b       	std	Y+21, r22	; 0x15
     9fc:	7e 8b       	std	Y+22, r23	; 0x16
     9fe:	8f 8b       	std	Y+23, r24	; 0x17
     a00:	98 8f       	std	Y+24, r25	; 0x18
     a02:	ae 01       	movw	r20, r28
     a04:	4f 5f       	subi	r20, 0xFF	; 255
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
     a08:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     a0a:	00 e0       	ldi	r16, 0x00	; 0
     a0c:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     a0e:	61 2c       	mov	r6, r1
     a10:	71 2c       	mov	r7, r1
     a12:	c1 2c       	mov	r12, r1
     a14:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     a16:	21 2c       	mov	r2, r1
     a18:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     a1a:	f7 01       	movw	r30, r14
     a1c:	81 90       	ld	r8, Z+
     a1e:	91 90       	ld	r9, Z+
     a20:	a1 90       	ld	r10, Z+
     a22:	b1 90       	ld	r11, Z+
     a24:	7f 01       	movw	r14, r30
     a26:	26 2d       	mov	r18, r6
     a28:	37 2d       	mov	r19, r7
     a2a:	4c 2d       	mov	r20, r12
     a2c:	5d 2d       	mov	r21, r13
     a2e:	c5 01       	movw	r24, r10
     a30:	b4 01       	movw	r22, r8
     a32:	0e 94 c7 1a 	call	0x358e	; 0x358e <__gesf2>
     a36:	18 16       	cp	r1, r24
     a38:	34 f4       	brge	.+12     	; 0xa46 <fourPointCalc+0x3e8>
			indexMax = i;
			maxVal = distVect[i];
     a3a:	68 2c       	mov	r6, r8
     a3c:	79 2c       	mov	r7, r9
     a3e:	ca 2c       	mov	r12, r10
     a40:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     a42:	20 2e       	mov	r2, r16
     a44:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     a46:	0f 5f       	subi	r16, 0xFF	; 255
     a48:	1f 4f       	sbci	r17, 0xFF	; 255
     a4a:	06 30       	cpi	r16, 0x06	; 6
     a4c:	11 05       	cpc	r17, r1
     a4e:	29 f7       	brne	.-54     	; 0xa1a <fourPointCalc+0x3bc>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLongRef; 
	pointsLongRef = distIndex(indexMax);
     a50:	82 2d       	mov	r24, r2
     a52:	93 2d       	mov	r25, r3
     a54:	0e 94 39 02 	call	0x472	; 0x472 <distIndex>
	
	int pointsLong[2] = {(pointsLongRef[0]), (pointsLongRef[1])};
     a58:	fc 01       	movw	r30, r24
     a5a:	e0 80       	ld	r14, Z
     a5c:	f1 80       	ldd	r15, Z+1	; 0x01
     a5e:	fa 8e       	std	Y+26, r15	; 0x1a
     a60:	e9 8e       	std	Y+25, r14	; 0x19
     a62:	02 81       	ldd	r16, Z+2	; 0x02
     a64:	13 81       	ldd	r17, Z+3	; 0x03
     a66:	1c 8f       	std	Y+28, r17	; 0x1c
     a68:	0b 8f       	std	Y+27, r16	; 0x1b
	
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     a6a:	ee 0c       	add	r14, r14
     a6c:	ff 1c       	adc	r15, r15
     a6e:	ee 0c       	add	r14, r14
     a70:	ff 1c       	adc	r15, r15
     a72:	e4 0c       	add	r14, r4
     a74:	f5 1c       	adc	r15, r5
     a76:	00 0f       	add	r16, r16
     a78:	11 1f       	adc	r17, r17
     a7a:	00 0f       	add	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	04 0d       	add	r16, r4
     a80:	15 1d       	adc	r17, r5
     a82:	f7 01       	movw	r30, r14
     a84:	60 81       	ld	r22, Z
     a86:	71 81       	ldd	r23, Z+1	; 0x01
     a88:	f8 01       	movw	r30, r16
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	68 0f       	add	r22, r24
     a90:	79 1f       	adc	r23, r25
     a92:	77 23       	and	r23, r23
     a94:	14 f4       	brge	.+4      	; 0xa9a <fourPointCalc+0x43c>
     a96:	6f 5f       	subi	r22, 0xFF	; 255
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	75 95       	asr	r23
     a9c:	67 95       	ror	r22
     a9e:	07 2e       	mov	r0, r23
     aa0:	00 0c       	add	r0, r0
     aa2:	88 0b       	sbc	r24, r24
     aa4:	99 0b       	sbc	r25, r25
     aa6:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     aaa:	4b 01       	movw	r8, r22
     aac:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     aae:	f7 01       	movw	r30, r14
     ab0:	62 81       	ldd	r22, Z+2	; 0x02
     ab2:	73 81       	ldd	r23, Z+3	; 0x03
     ab4:	f8 01       	movw	r30, r16
     ab6:	82 81       	ldd	r24, Z+2	; 0x02
     ab8:	93 81       	ldd	r25, Z+3	; 0x03
     aba:	68 0f       	add	r22, r24
     abc:	79 1f       	adc	r23, r25
     abe:	77 23       	and	r23, r23
     ac0:	14 f4       	brge	.+4      	; 0xac6 <fourPointCalc+0x468>
     ac2:	6f 5f       	subi	r22, 0xFF	; 255
     ac4:	7f 4f       	sbci	r23, 0xFF	; 255
     ac6:	75 95       	asr	r23
     ac8:	67 95       	ror	r22
     aca:	07 2e       	mov	r0, r23
     acc:	00 0c       	add	r0, r0
     ace:	88 0b       	sbc	r24, r24
     ad0:	99 0b       	sbc	r25, r25
     ad2:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     ad6:	69 a3       	std	Y+33, r22	; 0x21
     ad8:	7a a3       	std	Y+34, r23	; 0x22
     ada:	8b a3       	std	Y+35, r24	; 0x23
     adc:	9c a3       	std	Y+36, r25	; 0x24
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     ade:	9e 01       	movw	r18, r28
     ae0:	21 5e       	subi	r18, 0xE1	; 225
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	ae 01       	movw	r20, r28
     ae6:	43 5e       	subi	r20, 0xE3	; 227
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	be 01       	movw	r22, r28
     aec:	6f 5f       	subi	r22, 0xFF	; 255
     aee:	7f 4f       	sbci	r23, 0xFF	; 255
     af0:	ce 01       	movw	r24, r28
     af2:	49 96       	adiw	r24, 0x19	; 25
     af4:	0e 94 87 02 	call	0x50e	; 0x50e <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     af8:	0d 8d       	ldd	r16, Y+29	; 0x1d
     afa:	1e 8d       	ldd	r17, Y+30	; 0x1e
     afc:	00 0f       	add	r16, r16
     afe:	11 1f       	adc	r17, r17
     b00:	00 0f       	add	r16, r16
     b02:	11 1f       	adc	r17, r17
     b04:	04 0d       	add	r16, r4
     b06:	15 1d       	adc	r17, r5
     b08:	2f 8c       	ldd	r2, Y+31	; 0x1f
     b0a:	38 a0       	ldd	r3, Y+32	; 0x20
     b0c:	22 0c       	add	r2, r2
     b0e:	33 1c       	adc	r3, r3
     b10:	22 0c       	add	r2, r2
     b12:	33 1c       	adc	r3, r3
     b14:	24 0c       	add	r2, r4
     b16:	35 1c       	adc	r3, r5
     b18:	f8 01       	movw	r30, r16
     b1a:	60 81       	ld	r22, Z
     b1c:	71 81       	ldd	r23, Z+1	; 0x01
     b1e:	f1 01       	movw	r30, r2
     b20:	80 81       	ld	r24, Z
     b22:	91 81       	ldd	r25, Z+1	; 0x01
     b24:	68 1b       	sub	r22, r24
     b26:	79 0b       	sbc	r23, r25
     b28:	07 2e       	mov	r0, r23
     b2a:	00 0c       	add	r0, r0
     b2c:	88 0b       	sbc	r24, r24
     b2e:	99 0b       	sbc	r25, r25
     b30:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
     b34:	6b 01       	movw	r12, r22
     b36:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     b38:	f8 01       	movw	r30, r16
     b3a:	62 81       	ldd	r22, Z+2	; 0x02
     b3c:	73 81       	ldd	r23, Z+3	; 0x03
     b3e:	f1 01       	movw	r30, r2
     b40:	82 81       	ldd	r24, Z+2	; 0x02
     b42:	93 81       	ldd	r25, Z+3	; 0x03
     b44:	68 1b       	sub	r22, r24
     b46:	79 0b       	sbc	r23, r25
     b48:	07 2e       	mov	r0, r23
     b4a:	00 0c       	add	r0, r0
     b4c:	88 0b       	sbc	r24, r24
     b4e:	99 0b       	sbc	r25, r25
     b50:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     b54:	90 58       	subi	r25, 0x80	; 128
     b56:	a7 01       	movw	r20, r14
     b58:	96 01       	movw	r18, r12
     b5a:	0e 94 a5 18 	call	0x314a	; 0x314a <atan2>
	theta += M_PI/2.0;
     b5e:	2b ed       	ldi	r18, 0xDB	; 219
     b60:	3f e0       	ldi	r19, 0x0F	; 15
     b62:	49 ec       	ldi	r20, 0xC9	; 201
     b64:	5f e3       	ldi	r21, 0x3F	; 63
     b66:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
     b6a:	6b 01       	movw	r12, r22
     b6c:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     b6e:	a5 01       	movw	r20, r10
     b70:	94 01       	movw	r18, r8
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	94 e4       	ldi	r25, 0x44	; 68
     b7a:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
     b7e:	4b 01       	movw	r8, r22
     b80:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     b82:	29 a1       	ldd	r18, Y+33	; 0x21
     b84:	3a a1       	ldd	r19, Y+34	; 0x22
     b86:	4b a1       	ldd	r20, Y+35	; 0x23
     b88:	5c a1       	ldd	r21, Y+36	; 0x24
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	8f eb       	ldi	r24, 0xBF	; 191
     b90:	93 e4       	ldi	r25, 0x43	; 67
     b92:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
     b96:	2b 01       	movw	r4, r22
     b98:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     b9a:	c7 01       	movw	r24, r14
     b9c:	b6 01       	movw	r22, r12
     b9e:	0e 94 41 1b 	call	0x3682	; 0x3682 <sin>
     ba2:	69 a3       	std	Y+33, r22	; 0x21
     ba4:	7a a3       	std	Y+34, r23	; 0x22
     ba6:	8b a3       	std	Y+35, r24	; 0x23
     ba8:	9c a3       	std	Y+36, r25	; 0x24
     baa:	c7 01       	movw	r24, r14
     bac:	b6 01       	movw	r22, r12
     bae:	0e 94 09 19 	call	0x3212	; 0x3212 <cos>
     bb2:	6d a3       	std	Y+37, r22	; 0x25
     bb4:	7e a3       	std	Y+38, r23	; 0x26
     bb6:	8f a3       	std	Y+39, r24	; 0x27
     bb8:	98 a7       	std	Y+40, r25	; 0x28
     bba:	08 e6       	ldi	r16, 0x68	; 104
     bbc:	11 e0       	ldi	r17, 0x01	; 1
     bbe:	29 a1       	ldd	r18, Y+33	; 0x21
     bc0:	3a a1       	ldd	r19, Y+34	; 0x22
     bc2:	4b a1       	ldd	r20, Y+35	; 0x23
     bc4:	5c a1       	ldd	r21, Y+36	; 0x24
     bc6:	c3 01       	movw	r24, r6
     bc8:	b2 01       	movw	r22, r4
     bca:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     bce:	69 a7       	std	Y+41, r22	; 0x29
     bd0:	7a a7       	std	Y+42, r23	; 0x2a
     bd2:	8b a7       	std	Y+43, r24	; 0x2b
     bd4:	9c a7       	std	Y+44, r25	; 0x2c
     bd6:	2d a1       	ldd	r18, Y+37	; 0x25
     bd8:	3e a1       	ldd	r19, Y+38	; 0x26
     bda:	4f a1       	ldd	r20, Y+39	; 0x27
     bdc:	58 a5       	ldd	r21, Y+40	; 0x28
     bde:	c5 01       	movw	r24, r10
     be0:	b4 01       	movw	r22, r8
     be2:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     be6:	9b 01       	movw	r18, r22
     be8:	ac 01       	movw	r20, r24
     bea:	69 a5       	ldd	r22, Y+41	; 0x29
     bec:	7a a5       	ldd	r23, Y+42	; 0x2a
     bee:	8b a5       	ldd	r24, Y+43	; 0x2b
     bf0:	9c a5       	ldd	r25, Y+44	; 0x2c
     bf2:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
     bf6:	f8 01       	movw	r30, r16
     bf8:	60 83       	st	Z, r22
     bfa:	71 83       	std	Z+1, r23	; 0x01
     bfc:	82 83       	std	Z+2, r24	; 0x02
     bfe:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     c00:	2d a1       	ldd	r18, Y+37	; 0x25
     c02:	3e a1       	ldd	r19, Y+38	; 0x26
     c04:	4f a1       	ldd	r20, Y+39	; 0x27
     c06:	58 a5       	ldd	r21, Y+40	; 0x28
     c08:	c3 01       	movw	r24, r6
     c0a:	b2 01       	movw	r22, r4
     c0c:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     c10:	2b 01       	movw	r4, r22
     c12:	3c 01       	movw	r6, r24
     c14:	29 a1       	ldd	r18, Y+33	; 0x21
     c16:	3a a1       	ldd	r19, Y+34	; 0x22
     c18:	4b a1       	ldd	r20, Y+35	; 0x23
     c1a:	5c a1       	ldd	r21, Y+36	; 0x24
     c1c:	c5 01       	movw	r24, r10
     c1e:	b4 01       	movw	r22, r8
     c20:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
     c24:	9b 01       	movw	r18, r22
     c26:	ac 01       	movw	r20, r24
     c28:	c3 01       	movw	r24, r6
     c2a:	b2 01       	movw	r22, r4
     c2c:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
     c30:	f8 01       	movw	r30, r16
     c32:	64 83       	std	Z+4, r22	; 0x04
     c34:	75 83       	std	Z+5, r23	; 0x05
     c36:	86 83       	std	Z+6, r24	; 0x06
     c38:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta;
     c3a:	f7 fa       	bst	r15, 7
     c3c:	f0 94       	com	r15
     c3e:	f7 f8       	bld	r15, 7
     c40:	f0 94       	com	r15
     c42:	c0 86       	std	Z+8, r12	; 0x08
     c44:	d1 86       	std	Z+9, r13	; 0x09
     c46:	e2 86       	std	Z+10, r14	; 0x0a
     c48:	f3 86       	std	Z+11, r15	; 0x0b
	
	return centerFour;
}
     c4a:	c8 01       	movw	r24, r16
     c4c:	ce 5b       	subi	r28, 0xBE	; 190
     c4e:	df 4f       	sbci	r29, 0xFF	; 255
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	bf 90       	pop	r11
     c6c:	af 90       	pop	r10
     c6e:	9f 90       	pop	r9
     c70:	8f 90       	pop	r8
     c72:	7f 90       	pop	r7
     c74:	6f 90       	pop	r6
     c76:	5f 90       	pop	r5
     c78:	4f 90       	pop	r4
     c7a:	3f 90       	pop	r3
     c7c:	2f 90       	pop	r2
     c7e:	08 95       	ret

00000c80 <localization_calc>:
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
     c80:	4f 92       	push	r4
     c82:	5f 92       	push	r5
     c84:	6f 92       	push	r6
     c86:	7f 92       	push	r7
     c88:	af 92       	push	r10
     c8a:	bf 92       	push	r11
     c8c:	cf 92       	push	r12
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	68 97       	sbiw	r28, 0x18	; 24
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     cae:	0d b7       	in	r16, 0x3d	; 61
     cb0:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     cb2:	80 81       	ld	r24, Z
     cb4:	91 81       	ldd	r25, Z+1	; 0x01
     cb6:	9a 83       	std	Y+2, r25	; 0x02
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	80 85       	ldd	r24, Z+8	; 0x08
     cbc:	91 85       	ldd	r25, Z+9	; 0x09
     cbe:	9c 83       	std	Y+4, r25	; 0x04
     cc0:	8b 83       	std	Y+3, r24	; 0x03
     cc2:	82 81       	ldd	r24, Z+2	; 0x02
     cc4:	93 81       	ldd	r25, Z+3	; 0x03
     cc6:	9e 83       	std	Y+6, r25	; 0x06
     cc8:	8d 83       	std	Y+5, r24	; 0x05
     cca:	82 85       	ldd	r24, Z+10	; 0x0a
     ccc:	93 85       	ldd	r25, Z+11	; 0x0b
     cce:	98 87       	std	Y+8, r25	; 0x08
     cd0:	8f 83       	std	Y+7, r24	; 0x07
     cd2:	84 81       	ldd	r24, Z+4	; 0x04
     cd4:	95 81       	ldd	r25, Z+5	; 0x05
     cd6:	9a 87       	std	Y+10, r25	; 0x0a
     cd8:	89 87       	std	Y+9, r24	; 0x09
     cda:	84 85       	ldd	r24, Z+12	; 0x0c
     cdc:	95 85       	ldd	r25, Z+13	; 0x0d
     cde:	9c 87       	std	Y+12, r25	; 0x0c
     ce0:	8b 87       	std	Y+11, r24	; 0x0b
     ce2:	86 81       	ldd	r24, Z+6	; 0x06
     ce4:	97 81       	ldd	r25, Z+7	; 0x07
     ce6:	9e 87       	std	Y+14, r25	; 0x0e
     ce8:	8d 87       	std	Y+13, r24	; 0x0d
     cea:	86 85       	ldd	r24, Z+14	; 0x0e
     cec:	97 85       	ldd	r25, Z+15	; 0x0f
     cee:	98 8b       	std	Y+16, r25	; 0x10
     cf0:	8f 87       	std	Y+15, r24	; 0x0f
		{rawStarData[3], rawStarData[7]}
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     cf2:	fe 01       	movw	r30, r28
     cf4:	71 96       	adiw	r30, 0x11	; 17
     cf6:	88 e0       	ldi	r24, 0x08	; 8
     cf8:	df 01       	movw	r26, r30
     cfa:	1d 92       	st	X+, r1
     cfc:	8a 95       	dec	r24
     cfe:	e9 f7       	brne	.-6      	; 0xcfa <localization_calc+0x7a>
     d00:	70 97       	sbiw	r30, 0x10	; 16
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     d0a:	40 81       	ld	r20, Z
     d0c:	51 81       	ldd	r21, Z+1	; 0x01
     d0e:	4f 3f       	cpi	r20, 0xFF	; 255
     d10:	53 40       	sbci	r21, 0x03	; 3
     d12:	71 f0       	breq	.+28     	; 0xd30 <localization_calc+0xb0>
			pointIndices[numPoints] = i;
     d14:	dc 01       	movw	r26, r24
     d16:	aa 0f       	add	r26, r26
     d18:	bb 1f       	adc	r27, r27
     d1a:	41 e0       	ldi	r20, 0x01	; 1
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	4c 0f       	add	r20, r28
     d20:	5d 1f       	adc	r21, r29
     d22:	a4 0f       	add	r26, r20
     d24:	b5 1f       	adc	r27, r21
     d26:	51 96       	adiw	r26, 0x11	; 17
     d28:	3c 93       	st	X, r19
     d2a:	2e 93       	st	-X, r18
     d2c:	50 97       	sbiw	r26, 0x10	; 16
			numPoints++;
     d2e:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     d30:	2f 5f       	subi	r18, 0xFF	; 255
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	34 96       	adiw	r30, 0x04	; 4
     d36:	24 30       	cpi	r18, 0x04	; 4
     d38:	31 05       	cpc	r19, r1
     d3a:	39 f7       	brne	.-50     	; 0xd0a <localization_calc+0x8a>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	09 f4       	brne	.+2      	; 0xd42 <localization_calc+0xc2>
     d40:	89 c0       	rjmp	.+274    	; 0xe54 <localization_calc+0x1d4>
     d42:	ed b6       	in	r14, 0x3d	; 61
     d44:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     d46:	6c 01       	movw	r12, r24
     d48:	cc 0c       	add	r12, r12
     d4a:	dd 1c       	adc	r13, r13
     d4c:	cc 0c       	add	r12, r12
     d4e:	dd 1c       	adc	r13, r13
     d50:	ad b7       	in	r26, 0x3d	; 61
     d52:	be b7       	in	r27, 0x3e	; 62
     d54:	ac 19       	sub	r26, r12
     d56:	bd 09       	sbc	r27, r13
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	be bf       	out	0x3e, r27	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	ad bf       	out	0x3d, r26	; 61
     d62:	ed b7       	in	r30, 0x3d	; 61
     d64:	fe b7       	in	r31, 0x3e	; 62
     d66:	31 96       	adiw	r30, 0x01	; 1
     d68:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     d6a:	18 16       	cp	r1, r24
     d6c:	19 06       	cpc	r1, r25
     d6e:	24 f5       	brge	.+72     	; 0xdb8 <localization_calc+0x138>
     d70:	9e 01       	movw	r18, r28
     d72:	2f 5e       	subi	r18, 0xEF	; 239
     d74:	3f 4f       	sbci	r19, 0xFF	; 255
     d76:	df 01       	movw	r26, r30
     d78:	ce 0e       	add	r12, r30
     d7a:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     d7c:	f9 01       	movw	r30, r18
     d7e:	41 91       	ld	r20, Z+
     d80:	51 91       	ld	r21, Z+
     d82:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     d84:	fa 01       	movw	r30, r20
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	4c 0f       	add	r20, r28
     d94:	5d 1f       	adc	r21, r29
     d96:	e4 0f       	add	r30, r20
     d98:	f5 1f       	adc	r31, r21
     d9a:	40 81       	ld	r20, Z
     d9c:	51 81       	ldd	r21, Z+1	; 0x01
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	5c 93       	st	X, r21
     da2:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     da4:	42 81       	ldd	r20, Z+2	; 0x02
     da6:	53 81       	ldd	r21, Z+3	; 0x03
     da8:	13 96       	adiw	r26, 0x03	; 3
     daa:	5c 93       	st	X, r21
     dac:	4e 93       	st	-X, r20
     dae:	12 97       	sbiw	r26, 0x02	; 2
     db0:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     db2:	ac 15       	cp	r26, r12
     db4:	bd 05       	cpc	r27, r13
     db6:	11 f7       	brne	.-60     	; 0xd7c <localization_calc+0xfc>
			points[i][1] = pvect[index][1];
		}
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     db8:	db 01       	movw	r26, r22
     dba:	4d 90       	ld	r4, X+
     dbc:	5d 90       	ld	r5, X+
     dbe:	6d 90       	ld	r6, X+
     dc0:	7c 90       	ld	r7, X
     dc2:	13 97       	sbiw	r26, 0x03	; 3
     dc4:	e0 e8       	ldi	r30, 0x80	; 128
     dc6:	f1 e0       	ldi	r31, 0x01	; 1
     dc8:	40 82       	st	Z, r4
     dca:	51 82       	std	Z+1, r5	; 0x01
     dcc:	62 82       	std	Z+2, r6	; 0x02
     dce:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     dd0:	14 96       	adiw	r26, 0x04	; 4
     dd2:	4d 90       	ld	r4, X+
     dd4:	5d 90       	ld	r5, X+
     dd6:	6d 90       	ld	r6, X+
     dd8:	7c 90       	ld	r7, X
     dda:	17 97       	sbiw	r26, 0x07	; 7
     ddc:	44 82       	std	Z+4, r4	; 0x04
     dde:	55 82       	std	Z+5, r5	; 0x05
     de0:	66 82       	std	Z+6, r6	; 0x06
     de2:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     de4:	18 96       	adiw	r26, 0x08	; 8
     de6:	4d 91       	ld	r20, X+
     de8:	5d 91       	ld	r21, X+
     dea:	6d 91       	ld	r22, X+
     dec:	7c 91       	ld	r23, X
     dee:	1b 97       	sbiw	r26, 0x0b	; 11
     df0:	40 87       	std	Z+8, r20	; 0x08
     df2:	51 87       	std	Z+9, r21	; 0x09
     df4:	62 87       	std	Z+10, r22	; 0x0a
     df6:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     df8:	04 97       	sbiw	r24, 0x04	; 4
     dfa:	29 f4       	brne	.+10     	; 0xe06 <localization_calc+0x186>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     dfc:	c5 01       	movw	r24, r10
     dfe:	0e 94 2f 03 	call	0x65e	; 0x65e <fourPointCalc>
     e02:	dc 01       	movw	r26, r24
				break;
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <localization_calc+0x18a>
				
			case 3 : 
				//calcPointer = threePointCalc(points);
				calcPointer = &rc[0];
     e06:	a0 e8       	ldi	r26, 0x80	; 128
     e08:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				calcPointer = &rc[0];
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     e0a:	4d 91       	ld	r20, X+
     e0c:	5d 91       	ld	r21, X+
     e0e:	6d 91       	ld	r22, X+
     e10:	7c 91       	ld	r23, X
     e12:	13 97       	sbiw	r26, 0x03	; 3
     e14:	e4 e7       	ldi	r30, 0x74	; 116
     e16:	f1 e0       	ldi	r31, 0x01	; 1
     e18:	40 83       	st	Z, r20
     e1a:	51 83       	std	Z+1, r21	; 0x01
     e1c:	62 83       	std	Z+2, r22	; 0x02
     e1e:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     e20:	14 96       	adiw	r26, 0x04	; 4
     e22:	4d 91       	ld	r20, X+
     e24:	5d 91       	ld	r21, X+
     e26:	6d 91       	ld	r22, X+
     e28:	7c 91       	ld	r23, X
     e2a:	17 97       	sbiw	r26, 0x07	; 7
     e2c:	44 83       	std	Z+4, r20	; 0x04
     e2e:	55 83       	std	Z+5, r21	; 0x05
     e30:	66 83       	std	Z+6, r22	; 0x06
     e32:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     e34:	18 96       	adiw	r26, 0x08	; 8
     e36:	8d 91       	ld	r24, X+
     e38:	9d 91       	ld	r25, X+
     e3a:	0d 90       	ld	r0, X+
     e3c:	bc 91       	ld	r27, X
     e3e:	a0 2d       	mov	r26, r0
     e40:	80 87       	std	Z+8, r24	; 0x08
     e42:	91 87       	std	Z+9, r25	; 0x09
     e44:	a2 87       	std	Z+10, r26	; 0x0a
     e46:	b3 87       	std	Z+11, r27	; 0x0b
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	fe be       	out	0x3e, r15	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	ed be       	out	0x3d, r14	; 61
     e52:	20 c0       	rjmp	.+64     	; 0xe94 <localization_calc+0x214>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     e54:	fb 01       	movw	r30, r22
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	a2 81       	ldd	r26, Z+2	; 0x02
     e5c:	b3 81       	ldd	r27, Z+3	; 0x03
     e5e:	e4 e7       	ldi	r30, 0x74	; 116
     e60:	f1 e0       	ldi	r31, 0x01	; 1
     e62:	80 83       	st	Z, r24
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	a2 83       	std	Z+2, r26	; 0x02
     e68:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     e6a:	db 01       	movw	r26, r22
     e6c:	14 96       	adiw	r26, 0x04	; 4
     e6e:	cd 90       	ld	r12, X+
     e70:	dd 90       	ld	r13, X+
     e72:	ed 90       	ld	r14, X+
     e74:	fc 90       	ld	r15, X
     e76:	17 97       	sbiw	r26, 0x07	; 7
     e78:	c4 82       	std	Z+4, r12	; 0x04
     e7a:	d5 82       	std	Z+5, r13	; 0x05
     e7c:	e6 82       	std	Z+6, r14	; 0x06
     e7e:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];	
     e80:	18 96       	adiw	r26, 0x08	; 8
     e82:	4d 91       	ld	r20, X+
     e84:	5d 91       	ld	r21, X+
     e86:	6d 91       	ld	r22, X+
     e88:	7c 91       	ld	r23, X
     e8a:	1b 97       	sbiw	r26, 0x0b	; 11
     e8c:	40 87       	std	Z+8, r20	; 0x08
     e8e:	51 87       	std	Z+9, r21	; 0x09
     e90:	62 87       	std	Z+10, r22	; 0x0a
     e92:	73 87       	std	Z+11, r23	; 0x0b
	
	return robotCenter;
	
	
	
}
     e94:	84 e7       	ldi	r24, 0x74	; 116
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	1e bf       	out	0x3e, r17	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0d bf       	out	0x3d, r16	; 61
     ea2:	68 96       	adiw	r28, 0x18	; 24
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	bf 90       	pop	r11
     ec0:	af 90       	pop	r10
     ec2:	7f 90       	pop	r7
     ec4:	6f 90       	pop	r6
     ec6:	5f 90       	pop	r5
     ec8:	4f 90       	pop	r4
     eca:	08 95       	ret

00000ecc <motor_update>:
Initialization of Subsystem Components
************************************************************/

/* Called On Timer 3 Rollover */
void motor_update(void)
{
     ecc:	af 92       	push	r10
     ece:	bf 92       	push	r11
     ed0:	cf 92       	push	r12
     ed2:	df 92       	push	r13
     ed4:	ef 92       	push	r14
     ed6:	ff 92       	push	r15
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
	set(TIFR3,OCF3A);		// Reset flag
     edc:	c1 9a       	sbi	0x18, 1	; 24
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd); // Update control
     ede:	a0 90 16 01 	lds	r10, 0x0116
     ee2:	b0 90 17 01 	lds	r11, 0x0117
     ee6:	c0 90 18 01 	lds	r12, 0x0118
     eea:	d0 90 19 01 	lds	r13, 0x0119
     eee:	e0 90 1a 01 	lds	r14, 0x011A
     ef2:	f0 90 1b 01 	lds	r15, 0x011B
     ef6:	00 91 1c 01 	lds	r16, 0x011C
     efa:	10 91 1d 01 	lds	r17, 0x011D
     efe:	20 91 c0 01 	lds	r18, 0x01C0
     f02:	30 91 c1 01 	lds	r19, 0x01C1
     f06:	40 91 c2 01 	lds	r20, 0x01C2
     f0a:	50 91 c3 01 	lds	r21, 0x01C3
     f0e:	60 91 c4 01 	lds	r22, 0x01C4
     f12:	70 91 c5 01 	lds	r23, 0x01C5
     f16:	80 91 c6 01 	lds	r24, 0x01C6
     f1a:	90 91 c7 01 	lds	r25, 0x01C7
     f1e:	e0 91 0d 01 	lds	r30, 0x010D
     f22:	ef 93       	push	r30
     f24:	e0 91 0c 01 	lds	r30, 0x010C
     f28:	ef 93       	push	r30
     f2a:	e0 91 0b 01 	lds	r30, 0x010B
     f2e:	ef 93       	push	r30
     f30:	e0 91 0a 01 	lds	r30, 0x010A
     f34:	ef 93       	push	r30
     f36:	e0 91 11 01 	lds	r30, 0x0111
     f3a:	ef 93       	push	r30
     f3c:	e0 91 10 01 	lds	r30, 0x0110
     f40:	ef 93       	push	r30
     f42:	e0 91 0f 01 	lds	r30, 0x010F
     f46:	ef 93       	push	r30
     f48:	e0 91 0e 01 	lds	r30, 0x010E
     f4c:	ef 93       	push	r30
     f4e:	e0 91 bf 01 	lds	r30, 0x01BF
     f52:	ef 93       	push	r30
     f54:	e0 91 be 01 	lds	r30, 0x01BE
     f58:	ef 93       	push	r30
     f5a:	e0 91 bd 01 	lds	r30, 0x01BD
     f5e:	ef 93       	push	r30
     f60:	e0 91 bc 01 	lds	r30, 0x01BC
     f64:	ef 93       	push	r30
     f66:	e0 91 15 01 	lds	r30, 0x0115
     f6a:	ef 93       	push	r30
     f6c:	e0 91 14 01 	lds	r30, 0x0114
     f70:	ef 93       	push	r30
     f72:	e0 91 13 01 	lds	r30, 0x0113
     f76:	ef 93       	push	r30
     f78:	e0 91 12 01 	lds	r30, 0x0112
     f7c:	ef 93       	push	r30
     f7e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <run_motor_control_loop>
     f82:	8d b7       	in	r24, 0x3d	; 61
     f84:	9e b7       	in	r25, 0x3e	; 62
     f86:	40 96       	adiw	r24, 0x10	; 16
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	9e bf       	out	0x3e, r25	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	8d bf       	out	0x3d, r24	; 61

}
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	ff 90       	pop	r15
     f98:	ef 90       	pop	r14
     f9a:	df 90       	pop	r13
     f9c:	cf 90       	pop	r12
     f9e:	bf 90       	pop	r11
     fa0:	af 90       	pop	r10
     fa2:	08 95       	ret

00000fa4 <adc_update>:
	}
}

/* Called on ADC Conversion Completion */
void adc_update(void)
{
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	28 97       	sbiw	r28, 0x08	; 8
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
	set(ADCSRA,ADIF);	 // Reset flag
     fb8:	ea e7       	ldi	r30, 0x7A	; 122
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	80 61       	ori	r24, 0x10	; 16
     fc0:	80 83       	st	Z, r24
	if(adc_switch()){
     fc2:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <adc_switch>
     fc6:	88 23       	and	r24, r24
     fc8:	f1 f1       	breq	.+124    	; 0x1046 <adc_update+0xa2>
		float puck_buffer[2];
		puck_dist = get_puck_location(puck_buffer);
     fca:	ce 01       	movw	r24, r28
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	0e 94 40 15 	call	0x2a80	; 0x2a80 <get_puck_location>
     fd2:	ac 01       	movw	r20, r24
     fd4:	90 93 95 01 	sts	0x0195, r25
     fd8:	80 93 94 01 	sts	0x0194, r24
		x_puck = puck_buffer[0];
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	ab 81       	ldd	r26, Y+3	; 0x03
     fe2:	bc 81       	ldd	r27, Y+4	; 0x04
     fe4:	80 93 9a 01 	sts	0x019A, r24
     fe8:	90 93 9b 01 	sts	0x019B, r25
     fec:	a0 93 9c 01 	sts	0x019C, r26
     ff0:	b0 93 9d 01 	sts	0x019D, r27
		y_puck = puck_buffer[1];
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	af 81       	ldd	r26, Y+7	; 0x07
     ffa:	b8 85       	ldd	r27, Y+8	; 0x08
     ffc:	80 93 96 01 	sts	0x0196, r24
    1000:	90 93 97 01 	sts	0x0197, r25
    1004:	a0 93 98 01 	sts	0x0198, r26
    1008:	b0 93 99 01 	sts	0x0199, r27
		
		//Update other bots on status
		send_buffer[2] = team_puck_capture_buffer[self];
    100c:	80 91 c8 01 	lds	r24, 0x01C8
    1010:	90 91 c9 01 	lds	r25, 0x01C9
    1014:	fc 01       	movw	r30, r24
    1016:	ef 56       	subi	r30, 0x6F	; 111
    1018:	fe 4f       	sbci	r31, 0xFE	; 254
    101a:	20 81       	ld	r18, Z
    101c:	20 93 02 01 	sts	0x0102, r18
		send_buffer[3] = (char)(puck_dist/4);
    1020:	9a 01       	movw	r18, r20
    1022:	55 23       	and	r21, r21
    1024:	14 f4       	brge	.+4      	; 0x102a <adc_update+0x86>
    1026:	2d 5f       	subi	r18, 0xFD	; 253
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	35 95       	asr	r19
    102c:	27 95       	ror	r18
    102e:	35 95       	asr	r19
    1030:	27 95       	ror	r18
    1032:	20 93 03 01 	sts	0x0103, r18
		team_puck_dist_buffer[self] = (char)(puck_dist/4);
    1036:	fc 01       	movw	r30, r24
    1038:	e2 57       	subi	r30, 0x72	; 114
    103a:	fe 4f       	sbci	r31, 0xFE	; 254
    103c:	20 83       	st	Z, r18
		wireless_send(self,send_buffer);
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	71 e0       	ldi	r23, 0x01	; 1
    1042:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <wireless_send>
	}
}
    1046:	28 96       	adiw	r28, 0x08	; 8
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <play>:
void play(void)
{
	/* Light LED of defending goal */
	
	/* Play */
	set(TCCR1B,CS10);
    1058:	e1 e8       	ldi	r30, 0x81	; 129
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	81 60       	ori	r24, 0x01	; 1
    1060:	80 83       	st	Z, r24
	positioning_LED(goal);
    1062:	80 91 a0 01 	lds	r24, 0x01A0
    1066:	90 91 a1 01 	lds	r25, 0x01A1
    106a:	0e 94 28 02 	call	0x450	; 0x450 <positioning_LED>
    106e:	08 95       	ret

00001070 <pause>:
}

void pause(void)
{
	/* Stop within 3  seconds */
	clear(TCCR1B,CS10);
    1070:	e1 e8       	ldi	r30, 0x81	; 129
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8e 7f       	andi	r24, 0xFE	; 254
    1078:	80 83       	st	Z, r24
	clear(PORTB,0); // B0 Left motor off
    107a:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,2); // B2 Right motor off
    107c:	2a 98       	cbi	0x05, 2	; 5
	positioning_LED(OFF);
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 28 02 	call	0x450	; 0x450 <positioning_LED>
    1086:	08 95       	ret

00001088 <halftime>:
}

void halftime(void)
{
	/* Stop play */
	pause();
    1088:	0e 94 38 08 	call	0x1070	; 0x1070 <pause>
	
	/* Switch assigned goal */
	if (x_goal>0) {
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	a9 01       	movw	r20, r18
    1092:	60 91 a6 01 	lds	r22, 0x01A6
    1096:	70 91 a7 01 	lds	r23, 0x01A7
    109a:	80 91 a8 01 	lds	r24, 0x01A8
    109e:	90 91 a9 01 	lds	r25, 0x01A9
    10a2:	0e 94 c7 1a 	call	0x358e	; 0x358e <__gesf2>
    10a6:	18 16       	cp	r1, r24
    10a8:	9c f4       	brge	.+38     	; 0x10d0 <halftime+0x48>
		x_goal = -1*GOAL_X_DIST;
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a8 ec       	ldi	r26, 0xC8	; 200
    10b0:	b3 ec       	ldi	r27, 0xC3	; 195
    10b2:	80 93 a6 01 	sts	0x01A6, r24
    10b6:	90 93 a7 01 	sts	0x01A7, r25
    10ba:	a0 93 a8 01 	sts	0x01A8, r26
    10be:	b0 93 a9 01 	sts	0x01A9, r27
		goal = RED;
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	90 93 a1 01 	sts	0x01A1, r25
    10ca:	80 93 a0 01 	sts	0x01A0, r24
    10ce:	08 95       	ret
		} else {
		x_goal = GOAL_X_DIST;
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a8 ec       	ldi	r26, 0xC8	; 200
    10d6:	b3 e4       	ldi	r27, 0x43	; 67
    10d8:	80 93 a6 01 	sts	0x01A6, r24
    10dc:	90 93 a7 01 	sts	0x01A7, r25
    10e0:	a0 93 a8 01 	sts	0x01A8, r26
    10e4:	b0 93 a9 01 	sts	0x01A9, r27
		goal = BLUE;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	90 93 a1 01 	sts	0x01A1, r25
    10f0:	80 93 a0 01 	sts	0x01A0, r24
    10f4:	08 95       	ret

000010f6 <select_goal>:
	
	// Do a victory dance based on score?	
}

void select_goal(void) 
{
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	2c 97       	sbiw	r28, 0x0c	; 12
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
	goal_init = 1;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	90 93 9f 01 	sts	0x019F, r25
    1112:	80 93 9e 01 	sts	0x019E, r24
	/* Assign Defending goal */
	update_position();
    1116:	0e 94 b5 0c 	call	0x196a	; 0x196a <update_position>
	
	float position_buffer[3];
	get_position(position_buffer);
    111a:	ce 01       	movw	r24, r28
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	0e 94 4e 0c 	call	0x189c	; 0x189c <get_position>
	//m_usb_tx_int((int)position_buffer[0]);
	
	if (position_buffer[0]>0) {
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	a9 01       	movw	r20, r18
    1128:	69 81       	ldd	r22, Y+1	; 0x01
    112a:	7a 81       	ldd	r23, Y+2	; 0x02
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	0e 94 c7 1a 	call	0x358e	; 0x358e <__gesf2>
    1134:	18 16       	cp	r1, r24
    1136:	9c f4       	brge	.+38     	; 0x115e <select_goal+0x68>
		x_goal = -1*GOAL_X_DIST;
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	a8 ec       	ldi	r26, 0xC8	; 200
    113e:	b3 ec       	ldi	r27, 0xC3	; 195
    1140:	80 93 a6 01 	sts	0x01A6, r24
    1144:	90 93 a7 01 	sts	0x01A7, r25
    1148:	a0 93 a8 01 	sts	0x01A8, r26
    114c:	b0 93 a9 01 	sts	0x01A9, r27
		goal = RED;
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	90 93 a1 01 	sts	0x01A1, r25
    1158:	80 93 a0 01 	sts	0x01A0, r24
    115c:	12 c0       	rjmp	.+36     	; 0x1182 <select_goal+0x8c>
		//positioning_LED(RED);
		} else {
		x_goal = GOAL_X_DIST;
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a8 ec       	ldi	r26, 0xC8	; 200
    1164:	b3 e4       	ldi	r27, 0x43	; 67
    1166:	80 93 a6 01 	sts	0x01A6, r24
    116a:	90 93 a7 01 	sts	0x01A7, r25
    116e:	a0 93 a8 01 	sts	0x01A8, r26
    1172:	b0 93 a9 01 	sts	0x01A9, r27
		goal = BLUE;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	90 93 a1 01 	sts	0x01A1, r25
    117e:	80 93 a0 01 	sts	0x01A0, r24
		//positioning_LED(BLUE);
	}
	
	goal_init = 1;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	90 93 9f 01 	sts	0x019F, r25
    118a:	80 93 9e 01 	sts	0x019E, r24
}
    118e:	2c 96       	adiw	r28, 0x0c	; 12
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <comm_test>:
	}
}

void comm_test(void)
{
	if (!goal_init){
    11a0:	80 91 9e 01 	lds	r24, 0x019E
    11a4:	90 91 9f 01 	lds	r25, 0x019F
    11a8:	89 2b       	or	r24, r25
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <comm_test+0x10>
		select_goal();
    11ac:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <select_goal>
	}
	/* Flash color of LED for defending goal */
	set(TCCR0B,CS02); //start timer 
    11b0:	85 b5       	in	r24, 0x25	; 37
    11b2:	84 60       	ori	r24, 0x04	; 4
    11b4:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS00);
    11b6:	85 b5       	in	r24, 0x25	; 37
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	85 bd       	out	0x25, r24	; 37
	positioning_LED(goal); //turn on LED 
    11bc:	80 91 a0 01 	lds	r24, 0x01A0
    11c0:	90 91 a1 01 	lds	r25, 0x01A1
    11c4:	0e 94 28 02 	call	0x450	; 0x450 <positioning_LED>
    11c8:	08 95       	ret

000011ca <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(buffer[0]){
    11ca:	e0 91 b2 01 	lds	r30, 0x01B2
    11ce:	8e 2f       	mov	r24, r30
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	fc 01       	movw	r30, r24
    11d4:	e0 5a       	subi	r30, 0xA0	; 160
    11d6:	f1 09       	sbc	r31, r1
    11d8:	ea 30       	cpi	r30, 0x0A	; 10
    11da:	f1 05       	cpc	r31, r1
    11dc:	b8 f5       	brcc	.+110    	; 0x124c <update_game_state+0x82>
    11de:	ea 5a       	subi	r30, 0xAA	; 170
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <__tablejump2__>
		case 0xA0: // Comm Test
			comm_test();
    11e6:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <comm_test>
			break;
    11ea:	08 95       	ret
		case 0xA1: // Play
			play();
    11ec:	0e 94 2c 08 	call	0x1058	; 0x1058 <play>
			break;
    11f0:	08 95       	ret
		case 0xA2: // Goal R
			SR = buffer[1];
    11f2:	e2 eb       	ldi	r30, 0xB2	; 178
    11f4:	f1 e0       	ldi	r31, 0x01	; 1
    11f6:	81 81       	ldd	r24, Z+1	; 0x01
    11f8:	80 93 b1 01 	sts	0x01B1, r24
			SB = buffer[2];
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
    11fe:	80 93 b0 01 	sts	0x01B0, r24
			pause();
    1202:	0e 94 38 08 	call	0x1070	; 0x1070 <pause>
			break;
    1206:	08 95       	ret
		case 0xA3: // Goal B
			SR = buffer[1];
    1208:	e2 eb       	ldi	r30, 0xB2	; 178
    120a:	f1 e0       	ldi	r31, 0x01	; 1
    120c:	81 81       	ldd	r24, Z+1	; 0x01
    120e:	80 93 b1 01 	sts	0x01B1, r24
			SB = buffer[2];
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	80 93 b0 01 	sts	0x01B0, r24
			pause();
    1218:	0e 94 38 08 	call	0x1070	; 0x1070 <pause>
			break;
    121c:	08 95       	ret
		case 0xA4: // Pause
			pause();
    121e:	0e 94 38 08 	call	0x1070	; 0x1070 <pause>
			break;
    1222:	08 95       	ret
		case 0xA6: // Halftime
			halftime();
    1224:	0e 94 44 08 	call	0x1088	; 0x1088 <halftime>
			break;
    1228:	08 95       	ret
}

void game_over(void)
{
	// Stop play
	pause();
    122a:	0e 94 38 08 	call	0x1070	; 0x1070 <pause>
    122e:	08 95       	ret
			game_over();
			break;
		case 0xA8: // Enemy Positions
			break;
		case 0xA9: ;// Receiving comms from other bots
			int incoming_bot = buffer[1];
    1230:	e2 eb       	ldi	r30, 0xB2	; 178
    1232:	f1 e0       	ldi	r31, 0x01	; 1
    1234:	81 81       	ldd	r24, Z+1	; 0x01
    1236:	90 e0       	ldi	r25, 0x00	; 0
			team_puck_capture_buffer[incoming_bot] = buffer[2];
    1238:	dc 01       	movw	r26, r24
    123a:	af 56       	subi	r26, 0x6F	; 111
    123c:	be 4f       	sbci	r27, 0xFE	; 254
    123e:	22 81       	ldd	r18, Z+2	; 0x02
    1240:	2c 93       	st	X, r18
			team_puck_dist_buffer[incoming_bot] = buffer[3];
    1242:	dc 01       	movw	r26, r24
    1244:	a2 57       	subi	r26, 0x72	; 114
    1246:	be 4f       	sbci	r27, 0xFE	; 254
    1248:	23 81       	ldd	r18, Z+3	; 0x03
    124a:	2c 93       	st	X, r18
    124c:	08 95       	ret

0000124e <attack_action>:
	
	goal_init = 1;
}

void attack_action(){
	if (has_puck())
    124e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <has_puck>
    1252:	88 23       	and	r24, r24
    1254:	09 f4       	brne	.+2      	; 0x1258 <attack_action+0xa>
    1256:	73 c0       	rjmp	.+230    	; 0x133e <attack_action+0xf0>
	{
		team_puck_capture_buffer[self] = 1;
    1258:	e0 91 c8 01 	lds	r30, 0x01C8
    125c:	f0 91 c9 01 	lds	r31, 0x01C9
    1260:	ef 56       	subi	r30, 0x6F	; 111
    1262:	fe 4f       	sbci	r31, 0xFE	; 254
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	80 83       	st	Z, r24
		x_target = x_goal;
    1268:	80 91 a6 01 	lds	r24, 0x01A6
    126c:	90 91 a7 01 	lds	r25, 0x01A7
    1270:	a0 91 a8 01 	lds	r26, 0x01A8
    1274:	b0 91 a9 01 	lds	r27, 0x01A9
    1278:	80 93 c4 01 	sts	0x01C4, r24
    127c:	90 93 c5 01 	sts	0x01C5, r25
    1280:	a0 93 c6 01 	sts	0x01C6, r26
    1284:	b0 93 c7 01 	sts	0x01C7, r27
		y_target = y_goal;
    1288:	80 91 a2 01 	lds	r24, 0x01A2
    128c:	90 91 a3 01 	lds	r25, 0x01A3
    1290:	a0 91 a4 01 	lds	r26, 0x01A4
    1294:	b0 91 a5 01 	lds	r27, 0x01A5
    1298:	80 93 c0 01 	sts	0x01C0, r24
    129c:	90 93 c1 01 	sts	0x01C1, r25
    12a0:	a0 93 c2 01 	sts	0x01C2, r26
    12a4:	b0 93 c3 01 	sts	0x01C3, r27
		max_theta = M_PI/2;
    12a8:	8b ed       	ldi	r24, 0xDB	; 219
    12aa:	9f e0       	ldi	r25, 0x0F	; 15
    12ac:	a9 ec       	ldi	r26, 0xC9	; 201
    12ae:	bf e3       	ldi	r27, 0x3F	; 63
    12b0:	80 93 16 01 	sts	0x0116, r24
    12b4:	90 93 17 01 	sts	0x0117, r25
    12b8:	a0 93 18 01 	sts	0x0118, r26
    12bc:	b0 93 19 01 	sts	0x0119, r27
		theta_kd = 0.05;
    12c0:	8d ec       	ldi	r24, 0xCD	; 205
    12c2:	9c ec       	ldi	r25, 0xCC	; 204
    12c4:	ac e4       	ldi	r26, 0x4C	; 76
    12c6:	bd e3       	ldi	r27, 0x3D	; 61
    12c8:	80 93 bc 01 	sts	0x01BC, r24
    12cc:	90 93 bd 01 	sts	0x01BD, r25
    12d0:	a0 93 be 01 	sts	0x01BE, r26
    12d4:	b0 93 bf 01 	sts	0x01BF, r27
		theta_kp = 1.2;
    12d8:	8a e9       	ldi	r24, 0x9A	; 154
    12da:	99 e9       	ldi	r25, 0x99	; 153
    12dc:	a9 e9       	ldi	r26, 0x99	; 153
    12de:	bf e3       	ldi	r27, 0x3F	; 63
    12e0:	80 93 12 01 	sts	0x0112, r24
    12e4:	90 93 13 01 	sts	0x0113, r25
    12e8:	a0 93 14 01 	sts	0x0114, r26
    12ec:	b0 93 15 01 	sts	0x0115, r27
		linear_kd = 0.01;
    12f0:	8a e0       	ldi	r24, 0x0A	; 10
    12f2:	97 ed       	ldi	r25, 0xD7	; 215
    12f4:	a3 e2       	ldi	r26, 0x23	; 35
    12f6:	bc e3       	ldi	r27, 0x3C	; 60
    12f8:	80 93 0a 01 	sts	0x010A, r24
    12fc:	90 93 0b 01 	sts	0x010B, r25
    1300:	a0 93 0c 01 	sts	0x010C, r26
    1304:	b0 93 0d 01 	sts	0x010D, r27
		linear_kp = 0.2;
    1308:	8d ec       	ldi	r24, 0xCD	; 205
    130a:	9c ec       	ldi	r25, 0xCC	; 204
    130c:	ac e4       	ldi	r26, 0x4C	; 76
    130e:	be e3       	ldi	r27, 0x3E	; 62
    1310:	80 93 0e 01 	sts	0x010E, r24
    1314:	90 93 0f 01 	sts	0x010F, r25
    1318:	a0 93 10 01 	sts	0x0110, r26
    131c:	b0 93 11 01 	sts	0x0111, r27
		max_duty_cycle = DUTY_CYCLE_PUCK;
    1320:	8d ec       	ldi	r24, 0xCD	; 205
    1322:	9c ec       	ldi	r25, 0xCC	; 204
    1324:	ac ec       	ldi	r26, 0xCC	; 204
    1326:	be e3       	ldi	r27, 0x3E	; 62
    1328:	80 93 1a 01 	sts	0x011A, r24
    132c:	90 93 1b 01 	sts	0x011B, r25
    1330:	a0 93 1c 01 	sts	0x011C, r26
    1334:	b0 93 1d 01 	sts	0x011D, r27
		m_green(OFF);
    1338:	6a 9a       	sbi	0x0d, 2	; 13
    133a:	72 9a       	sbi	0x0e, 2	; 14
    133c:	08 95       	ret
		return;
	
	}

	if (!has_puck())
    133e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <has_puck>
    1342:	81 11       	cpse	r24, r1
    1344:	6d c0       	rjmp	.+218    	; 0x1420 <attack_action+0x1d2>
	{
		team_puck_capture_buffer[self] = 0;
    1346:	e0 91 c8 01 	lds	r30, 0x01C8
    134a:	f0 91 c9 01 	lds	r31, 0x01C9
    134e:	ef 56       	subi	r30, 0x6F	; 111
    1350:	fe 4f       	sbci	r31, 0xFE	; 254
    1352:	10 82       	st	Z, r1
		x_target = x_puck;
    1354:	80 91 9a 01 	lds	r24, 0x019A
    1358:	90 91 9b 01 	lds	r25, 0x019B
    135c:	a0 91 9c 01 	lds	r26, 0x019C
    1360:	b0 91 9d 01 	lds	r27, 0x019D
    1364:	80 93 c4 01 	sts	0x01C4, r24
    1368:	90 93 c5 01 	sts	0x01C5, r25
    136c:	a0 93 c6 01 	sts	0x01C6, r26
    1370:	b0 93 c7 01 	sts	0x01C7, r27
		y_target = y_puck;
    1374:	80 91 96 01 	lds	r24, 0x0196
    1378:	90 91 97 01 	lds	r25, 0x0197
    137c:	a0 91 98 01 	lds	r26, 0x0198
    1380:	b0 91 99 01 	lds	r27, 0x0199
    1384:	80 93 c0 01 	sts	0x01C0, r24
    1388:	90 93 c1 01 	sts	0x01C1, r25
    138c:	a0 93 c2 01 	sts	0x01C2, r26
    1390:	b0 93 c3 01 	sts	0x01C3, r27
		max_theta = M_PI;
    1394:	8b ed       	ldi	r24, 0xDB	; 219
    1396:	9f e0       	ldi	r25, 0x0F	; 15
    1398:	a9 e4       	ldi	r26, 0x49	; 73
    139a:	b0 e4       	ldi	r27, 0x40	; 64
    139c:	80 93 16 01 	sts	0x0116, r24
    13a0:	90 93 17 01 	sts	0x0117, r25
    13a4:	a0 93 18 01 	sts	0x0118, r26
    13a8:	b0 93 19 01 	sts	0x0119, r27
		theta_kd = 0;
    13ac:	10 92 bc 01 	sts	0x01BC, r1
    13b0:	10 92 bd 01 	sts	0x01BD, r1
    13b4:	10 92 be 01 	sts	0x01BE, r1
    13b8:	10 92 bf 01 	sts	0x01BF, r1
		theta_kp = 1.8;
    13bc:	86 e6       	ldi	r24, 0x66	; 102
    13be:	96 e6       	ldi	r25, 0x66	; 102
    13c0:	a6 ee       	ldi	r26, 0xE6	; 230
    13c2:	bf e3       	ldi	r27, 0x3F	; 63
    13c4:	80 93 12 01 	sts	0x0112, r24
    13c8:	90 93 13 01 	sts	0x0113, r25
    13cc:	a0 93 14 01 	sts	0x0114, r26
    13d0:	b0 93 15 01 	sts	0x0115, r27
		linear_kd = 0.01;
    13d4:	8a e0       	ldi	r24, 0x0A	; 10
    13d6:	97 ed       	ldi	r25, 0xD7	; 215
    13d8:	a3 e2       	ldi	r26, 0x23	; 35
    13da:	bc e3       	ldi	r27, 0x3C	; 60
    13dc:	80 93 0a 01 	sts	0x010A, r24
    13e0:	90 93 0b 01 	sts	0x010B, r25
    13e4:	a0 93 0c 01 	sts	0x010C, r26
    13e8:	b0 93 0d 01 	sts	0x010D, r27
		linear_kp = 0.2;
    13ec:	8d ec       	ldi	r24, 0xCD	; 205
    13ee:	9c ec       	ldi	r25, 0xCC	; 204
    13f0:	ac e4       	ldi	r26, 0x4C	; 76
    13f2:	be e3       	ldi	r27, 0x3E	; 62
    13f4:	80 93 0e 01 	sts	0x010E, r24
    13f8:	90 93 0f 01 	sts	0x010F, r25
    13fc:	a0 93 10 01 	sts	0x0110, r26
    1400:	b0 93 11 01 	sts	0x0111, r27
		max_duty_cycle = DUTY_CYCLE_SEEK;
    1404:	8d ec       	ldi	r24, 0xCD	; 205
    1406:	9c ec       	ldi	r25, 0xCC	; 204
    1408:	ac ec       	ldi	r26, 0xCC	; 204
    140a:	be e3       	ldi	r27, 0x3E	; 62
    140c:	80 93 1a 01 	sts	0x011A, r24
    1410:	90 93 1b 01 	sts	0x011B, r25
    1414:	a0 93 1c 01 	sts	0x011C, r26
    1418:	b0 93 1d 01 	sts	0x011D, r27
		m_green(ON);
    141c:	6a 9a       	sbi	0x0d, 2	; 13
    141e:	72 98       	cbi	0x0e, 2	; 14
    1420:	08 95       	ret

00001422 <home_dist>:
	m_green(OFF);
	return goalie_home;
}

float home_dist()
{	
    1422:	4f 92       	push	r4
    1424:	5f 92       	push	r5
    1426:	6f 92       	push	r6
    1428:	7f 92       	push	r7
    142a:	8f 92       	push	r8
    142c:	9f 92       	push	r9
    142e:	af 92       	push	r10
    1430:	bf 92       	push	r11
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	2c 97       	sbiw	r28, 0x0c	; 12
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
	/* Calculates the distance to from your own goal */
	float position_buffer[3];
	get_position(position_buffer);
    144e:	ce 01       	movw	r24, r28
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	0e 94 4e 0c 	call	0x189c	; 0x189c <get_position>
	float x = position_buffer[0];
	float y = position_buffer[1];
	return sqrtf((x+x_goal)*(x+x_goal)+(y-y_goal)*(y-y_goal));
    1456:	20 91 a6 01 	lds	r18, 0x01A6
    145a:	30 91 a7 01 	lds	r19, 0x01A7
    145e:	40 91 a8 01 	lds	r20, 0x01A8
    1462:	50 91 a9 01 	lds	r21, 0x01A9
    1466:	69 81       	ldd	r22, Y+1	; 0x01
    1468:	7a 81       	ldd	r23, Y+2	; 0x02
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
    1472:	4b 01       	movw	r8, r22
    1474:	5c 01       	movw	r10, r24
    1476:	20 91 a2 01 	lds	r18, 0x01A2
    147a:	30 91 a3 01 	lds	r19, 0x01A3
    147e:	40 91 a4 01 	lds	r20, 0x01A4
    1482:	50 91 a5 01 	lds	r21, 0x01A5
    1486:	6d 81       	ldd	r22, Y+5	; 0x05
    1488:	7e 81       	ldd	r23, Y+6	; 0x06
    148a:	8f 81       	ldd	r24, Y+7	; 0x07
    148c:	98 85       	ldd	r25, Y+8	; 0x08
    148e:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
    1492:	6b 01       	movw	r12, r22
    1494:	7c 01       	movw	r14, r24
    1496:	a5 01       	movw	r20, r10
    1498:	94 01       	movw	r18, r8
    149a:	c5 01       	movw	r24, r10
    149c:	b4 01       	movw	r22, r8
    149e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    14a2:	4b 01       	movw	r8, r22
    14a4:	5c 01       	movw	r10, r24
    14a6:	a7 01       	movw	r20, r14
    14a8:	96 01       	movw	r18, r12
    14aa:	c7 01       	movw	r24, r14
    14ac:	b6 01       	movw	r22, r12
    14ae:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    14b2:	9b 01       	movw	r18, r22
    14b4:	ac 01       	movw	r20, r24
    14b6:	c5 01       	movw	r24, r10
    14b8:	b4 01       	movw	r22, r8
    14ba:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
    14be:	0e 94 4f 1b 	call	0x369e	; 0x369e <sqrt>
}
    14c2:	2c 96       	adiw	r28, 0x0c	; 12
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	df 90       	pop	r13
    14d8:	cf 90       	pop	r12
    14da:	bf 90       	pop	r11
    14dc:	af 90       	pop	r10
    14de:	9f 90       	pop	r9
    14e0:	8f 90       	pop	r8
    14e2:	7f 90       	pop	r7
    14e4:	6f 90       	pop	r6
    14e6:	5f 90       	pop	r5
    14e8:	4f 90       	pop	r4
    14ea:	08 95       	ret

000014ec <goalie_action>:
		return;
	}
}

int goalie_action(int goalie_home)
{
    14ec:	cf 92       	push	r12
    14ee:	df 92       	push	r13
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	ec 01       	movw	r28, r24
	/* If the puck is within range, become an attacker and get the puck */
	if (puck_dist > 90){	
    14fa:	80 91 94 01 	lds	r24, 0x0194
    14fe:	90 91 95 01 	lds	r25, 0x0195
    1502:	8b 35       	cpi	r24, 0x5B	; 91
    1504:	91 05       	cpc	r25, r1
    1506:	3c f0       	brlt	.+14     	; 0x1516 <goalie_action+0x2a>
		role = ATTACK;
    1508:	10 92 ab 01 	sts	0x01AB, r1
    150c:	10 92 aa 01 	sts	0x01AA, r1
		return goalie_home;
    1510:	8c 2f       	mov	r24, r28
    1512:	9d 2f       	mov	r25, r29
    1514:	01 c1       	rjmp	.+514    	; 0x1718 <goalie_action+0x22c>
	}
	
	float dist = home_dist();	//find distance from own goal
    1516:	0e 94 11 0a 	call	0x1422	; 0x1422 <home_dist>
    151a:	6b 01       	movw	r12, r22
    151c:	7c 01       	movw	r14, r24
	//m_usb_tx_string("\n distance");
	//m_usb_tx_int((int) dist);
	
	/* If the goalie is far from our goal, and hasn't registered as home, return home*/
	if (dist > 150 && (!goalie_home)) {	
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	46 e1       	ldi	r20, 0x16	; 22
    1524:	53 e4       	ldi	r21, 0x43	; 67
    1526:	0e 94 c7 1a 	call	0x358e	; 0x358e <__gesf2>
    152a:	18 16       	cp	r1, r24
    152c:	0c f0       	brlt	.+2      	; 0x1530 <goalie_action+0x44>
    152e:	82 c0       	rjmp	.+260    	; 0x1634 <goalie_action+0x148>
    1530:	20 97       	sbiw	r28, 0x00	; 0
    1532:	09 f0       	breq	.+2      	; 0x1536 <goalie_action+0x4a>
    1534:	7f c0       	rjmp	.+254    	; 0x1634 <goalie_action+0x148>
		x_target = -x_goal*0.8;
    1536:	80 91 a6 01 	lds	r24, 0x01A6
    153a:	90 91 a7 01 	lds	r25, 0x01A7
    153e:	a0 91 a8 01 	lds	r26, 0x01A8
    1542:	b0 91 a9 01 	lds	r27, 0x01A9
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	90 58       	subi	r25, 0x80	; 128
    154c:	2d ec       	ldi	r18, 0xCD	; 205
    154e:	3c ec       	ldi	r19, 0xCC	; 204
    1550:	4c e4       	ldi	r20, 0x4C	; 76
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1558:	60 93 c4 01 	sts	0x01C4, r22
    155c:	70 93 c5 01 	sts	0x01C5, r23
    1560:	80 93 c6 01 	sts	0x01C6, r24
    1564:	90 93 c7 01 	sts	0x01C7, r25
		y_target = y_goal;
    1568:	80 91 a2 01 	lds	r24, 0x01A2
    156c:	90 91 a3 01 	lds	r25, 0x01A3
    1570:	a0 91 a4 01 	lds	r26, 0x01A4
    1574:	b0 91 a5 01 	lds	r27, 0x01A5
    1578:	80 93 c0 01 	sts	0x01C0, r24
    157c:	90 93 c1 01 	sts	0x01C1, r25
    1580:	a0 93 c2 01 	sts	0x01C2, r26
    1584:	b0 93 c3 01 	sts	0x01C3, r27
		max_theta = M_PI;
    1588:	8b ed       	ldi	r24, 0xDB	; 219
    158a:	9f e0       	ldi	r25, 0x0F	; 15
    158c:	a9 e4       	ldi	r26, 0x49	; 73
    158e:	b0 e4       	ldi	r27, 0x40	; 64
    1590:	80 93 16 01 	sts	0x0116, r24
    1594:	90 93 17 01 	sts	0x0117, r25
    1598:	a0 93 18 01 	sts	0x0118, r26
    159c:	b0 93 19 01 	sts	0x0119, r27
		theta_kd = 0.01;
    15a0:	8a e0       	ldi	r24, 0x0A	; 10
    15a2:	97 ed       	ldi	r25, 0xD7	; 215
    15a4:	a3 e2       	ldi	r26, 0x23	; 35
    15a6:	bc e3       	ldi	r27, 0x3C	; 60
    15a8:	80 93 bc 01 	sts	0x01BC, r24
    15ac:	90 93 bd 01 	sts	0x01BD, r25
    15b0:	a0 93 be 01 	sts	0x01BE, r26
    15b4:	b0 93 bf 01 	sts	0x01BF, r27
		theta_kp = 1.8;
    15b8:	46 e6       	ldi	r20, 0x66	; 102
    15ba:	56 e6       	ldi	r21, 0x66	; 102
    15bc:	66 ee       	ldi	r22, 0xE6	; 230
    15be:	7f e3       	ldi	r23, 0x3F	; 63
    15c0:	40 93 12 01 	sts	0x0112, r20
    15c4:	50 93 13 01 	sts	0x0113, r21
    15c8:	60 93 14 01 	sts	0x0114, r22
    15cc:	70 93 15 01 	sts	0x0115, r23
		linear_kd = 0.01;
    15d0:	80 93 0a 01 	sts	0x010A, r24
    15d4:	90 93 0b 01 	sts	0x010B, r25
    15d8:	a0 93 0c 01 	sts	0x010C, r26
    15dc:	b0 93 0d 01 	sts	0x010D, r27
		linear_kp = 0.2;
    15e0:	8d ec       	ldi	r24, 0xCD	; 205
    15e2:	9c ec       	ldi	r25, 0xCC	; 204
    15e4:	ac e4       	ldi	r26, 0x4C	; 76
    15e6:	be e3       	ldi	r27, 0x3E	; 62
    15e8:	80 93 0e 01 	sts	0x010E, r24
    15ec:	90 93 0f 01 	sts	0x010F, r25
    15f0:	a0 93 10 01 	sts	0x0110, r26
    15f4:	b0 93 11 01 	sts	0x0111, r27
		max_duty_cycle = DUTY_CYCLE_PUCK;
    15f8:	8d ec       	ldi	r24, 0xCD	; 205
    15fa:	9c ec       	ldi	r25, 0xCC	; 204
    15fc:	ac ec       	ldi	r26, 0xCC	; 204
    15fe:	be e3       	ldi	r27, 0x3E	; 62
    1600:	80 93 1a 01 	sts	0x011A, r24
    1604:	90 93 1b 01 	sts	0x011B, r25
    1608:	a0 93 1c 01 	sts	0x011C, r26
    160c:	b0 93 1d 01 	sts	0x011D, r27
		m_green(ON)
    1610:	6a 9a       	sbi	0x0d, 2	; 13
    1612:	72 98       	cbi	0x0e, 2	; 14
		
		if (dist < 155){	//If you are within 5 pixels of home, consider yourself home
    1614:	d1 e0       	ldi	r29, 0x01	; 1
    1616:	c0 e0       	ldi	r28, 0x00	; 0
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4b e1       	ldi	r20, 0x1B	; 27
    161e:	53 e4       	ldi	r21, 0x43	; 67
    1620:	c7 01       	movw	r24, r14
    1622:	b6 01       	movw	r22, r12
    1624:	0e 94 04 19 	call	0x3208	; 0x3208 <__cmpsf2>
    1628:	88 23       	and	r24, r24
    162a:	0c f0       	brlt	.+2      	; 0x162e <goalie_action+0x142>
    162c:	d0 e0       	ldi	r29, 0x00	; 0
int goalie_action(int goalie_home)
{
	/* If the puck is within range, become an attacker and get the puck */
	if (puck_dist > 90){	
		role = ATTACK;
		return goalie_home;
    162e:	8d 2f       	mov	r24, r29
    1630:	9c 2f       	mov	r25, r28
    1632:	72 c0       	rjmp	.+228    	; 0x1718 <goalie_action+0x22c>
		}
		return goalie_home;
	}
	
	/* If goalie is home, turn off linear motion */
	linear_kd = 0.0;
    1634:	10 92 0a 01 	sts	0x010A, r1
    1638:	10 92 0b 01 	sts	0x010B, r1
    163c:	10 92 0c 01 	sts	0x010C, r1
    1640:	10 92 0d 01 	sts	0x010D, r1
	linear_kp = 0.0;
    1644:	10 92 0e 01 	sts	0x010E, r1
    1648:	10 92 0f 01 	sts	0x010F, r1
    164c:	10 92 10 01 	sts	0x0110, r1
    1650:	10 92 11 01 	sts	0x0111, r1
	theta_kd = 0.02;
    1654:	8a e0       	ldi	r24, 0x0A	; 10
    1656:	97 ed       	ldi	r25, 0xD7	; 215
    1658:	a3 ea       	ldi	r26, 0xA3	; 163
    165a:	bc e3       	ldi	r27, 0x3C	; 60
    165c:	80 93 bc 01 	sts	0x01BC, r24
    1660:	90 93 bd 01 	sts	0x01BD, r25
    1664:	a0 93 be 01 	sts	0x01BE, r26
    1668:	b0 93 bf 01 	sts	0x01BF, r27
	theta_kp = 0.8;
    166c:	8d ec       	ldi	r24, 0xCD	; 205
    166e:	9c ec       	ldi	r25, 0xCC	; 204
    1670:	ac e4       	ldi	r26, 0x4C	; 76
    1672:	bf e3       	ldi	r27, 0x3F	; 63
    1674:	80 93 12 01 	sts	0x0112, r24
    1678:	90 93 13 01 	sts	0x0113, r25
    167c:	a0 93 14 01 	sts	0x0114, r26
    1680:	b0 93 15 01 	sts	0x0115, r27
	
	/* If the robot drifts away from its own goal, return home*/
	if (dist > 160){
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e2       	ldi	r20, 0x20	; 32
    168a:	53 e4       	ldi	r21, 0x43	; 67
    168c:	c7 01       	movw	r24, r14
    168e:	b6 01       	movw	r22, r12
    1690:	0e 94 c7 1a 	call	0x358e	; 0x358e <__gesf2>
    1694:	18 16       	cp	r1, r24
    1696:	f4 f1       	brlt	.+124    	; 0x1714 <goalie_action+0x228>
		goalie_home = 0;
		return goalie_home;
	}
	
	/* if the puck is visible, face the puck */
	if (puck_dist>60){
    1698:	80 91 94 01 	lds	r24, 0x0194
    169c:	90 91 95 01 	lds	r25, 0x0195
    16a0:	cd 97       	sbiw	r24, 0x3d	; 61
    16a2:	1c f1       	brlt	.+70     	; 0x16ea <goalie_action+0x1fe>
		x_target = x_puck;
    16a4:	80 91 9a 01 	lds	r24, 0x019A
    16a8:	90 91 9b 01 	lds	r25, 0x019B
    16ac:	a0 91 9c 01 	lds	r26, 0x019C
    16b0:	b0 91 9d 01 	lds	r27, 0x019D
    16b4:	80 93 c4 01 	sts	0x01C4, r24
    16b8:	90 93 c5 01 	sts	0x01C5, r25
    16bc:	a0 93 c6 01 	sts	0x01C6, r26
    16c0:	b0 93 c7 01 	sts	0x01C7, r27
		y_target = y_puck;
    16c4:	80 91 96 01 	lds	r24, 0x0196
    16c8:	90 91 97 01 	lds	r25, 0x0197
    16cc:	a0 91 98 01 	lds	r26, 0x0198
    16d0:	b0 91 99 01 	lds	r27, 0x0199
    16d4:	80 93 c0 01 	sts	0x01C0, r24
    16d8:	90 93 c1 01 	sts	0x01C1, r25
    16dc:	a0 93 c2 01 	sts	0x01C2, r26
    16e0:	b0 93 c3 01 	sts	0x01C3, r27
		return goalie_home;
    16e4:	8c 2f       	mov	r24, r28
    16e6:	9d 2f       	mov	r25, r29
    16e8:	17 c0       	rjmp	.+46     	; 0x1718 <goalie_action+0x22c>
	}
	
	/*otherwise, face the center */
	x_target = 0;
    16ea:	10 92 c4 01 	sts	0x01C4, r1
    16ee:	10 92 c5 01 	sts	0x01C5, r1
    16f2:	10 92 c6 01 	sts	0x01C6, r1
    16f6:	10 92 c7 01 	sts	0x01C7, r1
	y_target = 0;
    16fa:	10 92 c0 01 	sts	0x01C0, r1
    16fe:	10 92 c1 01 	sts	0x01C1, r1
    1702:	10 92 c2 01 	sts	0x01C2, r1
    1706:	10 92 c3 01 	sts	0x01C3, r1

	m_green(OFF);
    170a:	6a 9a       	sbi	0x0d, 2	; 13
    170c:	72 9a       	sbi	0x0e, 2	; 14
	return goalie_home;
    170e:	8c 2f       	mov	r24, r28
    1710:	9d 2f       	mov	r25, r29
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <goalie_action+0x22c>
	theta_kp = 0.8;
	
	/* If the robot drifts away from its own goal, return home*/
	if (dist > 160){
		goalie_home = 0;
		return goalie_home;
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
	x_target = 0;
	y_target = 0;

	m_green(OFF);
	return goalie_home;
}
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	cf 90       	pop	r12
    1724:	08 95       	ret

00001726 <bot_behavior_update>:

/* Update Targets, Gains, and Max Vals */
void bot_behavior_update()
{
	static int goalie_home = 0;
	switch (role) {
    1726:	80 91 aa 01 	lds	r24, 0x01AA
    172a:	90 91 ab 01 	lds	r25, 0x01AB
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	19 f0       	breq	.+6      	; 0x1738 <bot_behavior_update+0x12>
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	21 f0       	breq	.+8      	; 0x173e <bot_behavior_update+0x18>
    1736:	08 95       	ret
		case ATTACK: 
			attack_action();
    1738:	0e 94 27 09 	call	0x124e	; 0x124e <attack_action>
			break;		
    173c:	08 95       	ret
		case GOALIE: 
			goalie_home = goalie_action(goalie_home);
    173e:	80 91 8c 01 	lds	r24, 0x018C
    1742:	90 91 8d 01 	lds	r25, 0x018D
    1746:	0e 94 76 0a 	call	0x14ec	; 0x14ec <goalie_action>
    174a:	90 93 8d 01 	sts	0x018D, r25
    174e:	80 93 8c 01 	sts	0x018C, r24
    1752:	08 95       	ret

00001754 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
    1754:	6e 9a       	sbi	0x0d, 6	; 13
    1756:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey(self);
    1758:	c8 ec       	ldi	r28, 0xC8	; 200
    175a:	d1 e0       	ldi	r29, 0x01	; 1
    175c:	88 81       	ld	r24, Y
    175e:	0e 94 0b 01 	call	0x216	; 0x216 <initialize_robockey>
	send_buffer[1] = (char)self;
    1762:	88 81       	ld	r24, Y
    1764:	80 93 01 01 	sts	0x0101, r24
	pause();
    1768:	0e 94 38 08 	call	0x1070	; 0x1070 <pause>

	/* Confirm successful initialization(s) */
	m_green(ON);
    176c:	6a 9a       	sbi	0x0d, 2	; 13
    176e:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    1770:	ca e7       	ldi	r28, 0x7A	; 122
    1772:	d0 e0       	ldi	r29, 0x00	; 0
		bot_behavior_update();
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
		if (wifi_flag) {
			wifi_flag = 0;
			m_red(TOGGLE);
    1774:	10 e4       	ldi	r17, 0x40	; 64
	/* Confirm successful initialization(s) */
	m_green(ON);

	/* Run */
	while (1){
		update_position();
    1776:	0e 94 b5 0c 	call	0x196a	; 0x196a <update_position>
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    177a:	88 81       	ld	r24, Y
    177c:	84 fd       	sbrc	r24, 4
    177e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <adc_update>
		bot_behavior_update();
    1782:	0e 94 93 0b 	call	0x1726	; 0x1726 <bot_behavior_update>
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
    1786:	c1 99       	sbic	0x18, 1	; 24
    1788:	0e 94 66 07 	call	0xecc	; 0xecc <motor_update>
		if (wifi_flag) {
    178c:	80 91 ae 01 	lds	r24, 0x01AE
    1790:	90 91 af 01 	lds	r25, 0x01AF
    1794:	89 2b       	or	r24, r25
    1796:	79 f3       	breq	.-34     	; 0x1776 <main+0x22>
			wifi_flag = 0;
    1798:	10 92 af 01 	sts	0x01AF, r1
    179c:	10 92 ae 01 	sts	0x01AE, r1
			m_red(TOGGLE);
    17a0:	6e 9a       	sbi	0x0d, 6	; 13
    17a2:	8e b1       	in	r24, 0x0e	; 14
    17a4:	81 27       	eor	r24, r17
    17a6:	8e b9       	out	0x0e, r24	; 14
			m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    17a8:	6a e0       	ldi	r22, 0x0A	; 10
    17aa:	82 eb       	ldi	r24, 0xB2	; 178
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	0e 94 c6 10 	call	0x218c	; 0x218c <m_rf_read>
			update_game_state();			
    17b2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <update_game_state>
    17b6:	df cf       	rjmp	.-66     	; 0x1776 <main+0x22>

000017b8 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    17b8:	1f 92       	push	r1
    17ba:	0f 92       	push	r0
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	0f 92       	push	r0
    17c0:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    17c2:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
    17c4:	2a 9a       	sbi	0x05, 2	; 5
}
    17c6:	0f 90       	pop	r0
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	0f 90       	pop	r0
    17cc:	1f 90       	pop	r1
    17ce:	18 95       	reti

000017d0 <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    17d0:	1f 92       	push	r1
    17d2:	0f 92       	push	r0
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	0f 92       	push	r0
    17d8:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    17da:	28 98       	cbi	0x05, 0	; 5
}
    17dc:	0f 90       	pop	r0
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	0f 90       	pop	r0
    17e2:	1f 90       	pop	r1
    17e4:	18 95       	reti

000017e6 <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    17e6:	1f 92       	push	r1
    17e8:	0f 92       	push	r0
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	0f 92       	push	r0
    17ee:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    17f0:	2a 98       	cbi	0x05, 2	; 5
}
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	0f 90       	pop	r0
    17f8:	1f 90       	pop	r1
    17fa:	18 95       	reti

000017fc <__vector_3>:


/* Recieve Wireless Comm */
ISR(INT2_vect){
    17fc:	1f 92       	push	r1
    17fe:	0f 92       	push	r0
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	0f 92       	push	r0
    1804:	11 24       	eor	r1, r1
    1806:	8f 93       	push	r24
    1808:	9f 93       	push	r25
	wifi_flag = 1;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	90 93 af 01 	sts	0x01AF, r25
    1812:	80 93 ae 01 	sts	0x01AE, r24
}
    1816:	9f 91       	pop	r25
    1818:	8f 91       	pop	r24
    181a:	0f 90       	pop	r0
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	0f 90       	pop	r0
    1820:	1f 90       	pop	r1
    1822:	18 95       	reti

00001824 <__vector_23>:

ISR(TIMER0_OVF_vect){
    1824:	1f 92       	push	r1
    1826:	0f 92       	push	r0
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	0f 92       	push	r0
    182c:	11 24       	eor	r1, r1
    182e:	2f 93       	push	r18
    1830:	3f 93       	push	r19
    1832:	4f 93       	push	r20
    1834:	5f 93       	push	r21
    1836:	6f 93       	push	r22
    1838:	7f 93       	push	r23
    183a:	8f 93       	push	r24
    183c:	9f 93       	push	r25
    183e:	af 93       	push	r26
    1840:	bf 93       	push	r27
    1842:	ef 93       	push	r30
    1844:	ff 93       	push	r31
	
	if (tim0_counts < 20) {
    1846:	80 91 ac 01 	lds	r24, 0x01AC
    184a:	90 91 ad 01 	lds	r25, 0x01AD
    184e:	84 31       	cpi	r24, 0x14	; 20
    1850:	91 05       	cpc	r25, r1
    1852:	34 f4       	brge	.+12     	; 0x1860 <__vector_23+0x3c>
		tim0_counts++; //increment timer counter
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	90 93 ad 01 	sts	0x01AD, r25
    185a:	80 93 ac 01 	sts	0x01AC, r24
    185e:	0d c0       	rjmp	.+26     	; 0x187a <__vector_23+0x56>
		
	} else {
		positioning_LED(OFF); //turn LED off
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 28 02 	call	0x450	; 0x450 <positioning_LED>
		
		clear(TCCR0B,CS02); //turn timer off
    1868:	85 b5       	in	r24, 0x25	; 37
    186a:	8b 7f       	andi	r24, 0xFB	; 251
    186c:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS01);
    186e:	85 b5       	in	r24, 0x25	; 37
    1870:	8d 7f       	andi	r24, 0xFD	; 253
    1872:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS00);
    1874:	85 b5       	in	r24, 0x25	; 37
    1876:	8e 7f       	andi	r24, 0xFE	; 254
    1878:	85 bd       	out	0x25, r24	; 37
	}
}
    187a:	ff 91       	pop	r31
    187c:	ef 91       	pop	r30
    187e:	bf 91       	pop	r27
    1880:	af 91       	pop	r26
    1882:	9f 91       	pop	r25
    1884:	8f 91       	pop	r24
    1886:	7f 91       	pop	r23
    1888:	6f 91       	pop	r22
    188a:	5f 91       	pop	r21
    188c:	4f 91       	pop	r20
    188e:	3f 91       	pop	r19
    1890:	2f 91       	pop	r18
    1892:	0f 90       	pop	r0
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	0f 90       	pop	r0
    1898:	1f 90       	pop	r1
    189a:	18 95       	reti

0000189c <get_position>:
/************************************************************
Public Functions
************************************************************/

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    189c:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    189e:	80 91 da 01 	lds	r24, 0x01DA
    18a2:	90 91 db 01 	lds	r25, 0x01DB
    18a6:	a0 91 dc 01 	lds	r26, 0x01DC
    18aa:	b0 91 dd 01 	lds	r27, 0x01DD
    18ae:	80 83       	st	Z, r24
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	a2 83       	std	Z+2, r26	; 0x02
    18b4:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    18b6:	80 91 d6 01 	lds	r24, 0x01D6
    18ba:	90 91 d7 01 	lds	r25, 0x01D7
    18be:	a0 91 d8 01 	lds	r26, 0x01D8
    18c2:	b0 91 d9 01 	lds	r27, 0x01D9
    18c6:	84 83       	std	Z+4, r24	; 0x04
    18c8:	95 83       	std	Z+5, r25	; 0x05
    18ca:	a6 83       	std	Z+6, r26	; 0x06
    18cc:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    18ce:	80 91 d2 01 	lds	r24, 0x01D2
    18d2:	90 91 d3 01 	lds	r25, 0x01D3
    18d6:	a0 91 d4 01 	lds	r26, 0x01D4
    18da:	b0 91 d5 01 	lds	r27, 0x01D5
    18de:	80 87       	std	Z+8, r24	; 0x08
    18e0:	91 87       	std	Z+9, r25	; 0x09
    18e2:	a2 87       	std	Z+10, r26	; 0x0a
    18e4:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	08 95       	ret

000018ea <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    18ea:	8f 92       	push	r8
    18ec:	9f 92       	push	r9
    18ee:	af 92       	push	r10
    18f0:	bf 92       	push	r11
    18f2:	cf 92       	push	r12
    18f4:	df 92       	push	r13
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	6b 01       	movw	r12, r22
    18fc:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    18fe:	4b 01       	movw	r8, r22
    1900:	5c 01       	movw	r10, r24
    1902:	e8 94       	clt
    1904:	b7 f8       	bld	r11, 7
    1906:	2b ed       	ldi	r18, 0xDB	; 219
    1908:	3f e0       	ldi	r19, 0x0F	; 15
    190a:	49 e4       	ldi	r20, 0x49	; 73
    190c:	50 e4       	ldi	r21, 0x40	; 64
    190e:	c5 01       	movw	r24, r10
    1910:	b4 01       	movw	r22, r8
    1912:	0e 94 c7 1a 	call	0x358e	; 0x358e <__gesf2>
    1916:	18 16       	cp	r1, r24
    1918:	bc f4       	brge	.+46     	; 0x1948 <theta_error_correction+0x5e>
    191a:	2b ed       	ldi	r18, 0xDB	; 219
    191c:	3f e0       	ldi	r19, 0x0F	; 15
    191e:	49 ec       	ldi	r20, 0xC9	; 201
    1920:	50 e4       	ldi	r21, 0x40	; 64
    1922:	c7 01       	movw	r24, r14
    1924:	b6 01       	movw	r22, r12
    1926:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    192a:	a5 01       	movw	r20, r10
    192c:	94 01       	movw	r18, r8
    192e:	0e 94 0e 19 	call	0x321c	; 0x321c <__divsf3>
    1932:	9b 01       	movw	r18, r22
    1934:	ac 01       	movw	r20, r24
    1936:	c7 01       	movw	r24, r14
    1938:	b6 01       	movw	r22, r12
    193a:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
    193e:	56 2f       	mov	r21, r22
    1940:	47 2f       	mov	r20, r23
    1942:	38 2f       	mov	r19, r24
    1944:	29 2f       	mov	r18, r25
    1946:	04 c0       	rjmp	.+8      	; 0x1950 <theta_error_correction+0x66>
	else{return error;}
    1948:	5c 2d       	mov	r21, r12
    194a:	4d 2d       	mov	r20, r13
    194c:	3e 2d       	mov	r19, r14
    194e:	2f 2d       	mov	r18, r15
}
    1950:	65 2f       	mov	r22, r21
    1952:	74 2f       	mov	r23, r20
    1954:	83 2f       	mov	r24, r19
    1956:	92 2f       	mov	r25, r18
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	df 90       	pop	r13
    195e:	cf 90       	pop	r12
    1960:	bf 90       	pop	r11
    1962:	af 90       	pop	r10
    1964:	9f 90       	pop	r9
    1966:	8f 90       	pop	r8
    1968:	08 95       	ret

0000196a <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    196a:	2f 92       	push	r2
    196c:	3f 92       	push	r3
    196e:	4f 92       	push	r4
    1970:	5f 92       	push	r5
    1972:	6f 92       	push	r6
    1974:	7f 92       	push	r7
    1976:	8f 92       	push	r8
    1978:	9f 92       	push	r9
    197a:	af 92       	push	r10
    197c:	bf 92       	push	r11
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	a8 97       	sbiw	r28, 0x28	; 40
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    199e:	ce 01       	movw	r24, r28
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	0e 94 ad 14 	call	0x295a	; 0x295a <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    19a6:	6b 81       	ldd	r22, Y+3	; 0x03
    19a8:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    19aa:	0f 81       	ldd	r16, Y+7	; 0x07
    19ac:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    19ae:	49 85       	ldd	r20, Y+9	; 0x09
    19b0:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    19b2:	ad 85       	ldd	r26, Y+13	; 0x0d
    19b4:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    19b6:	2f 85       	ldd	r18, Y+15	; 0x0f
    19b8:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    19ba:	eb 89       	ldd	r30, Y+19	; 0x13
    19bc:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    19be:	8d 89       	ldd	r24, Y+21	; 0x15
    19c0:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    19c2:	e9 80       	ldd	r14, Y+1	; 0x01
    19c4:	fa 80       	ldd	r15, Y+2	; 0x02
    19c6:	fa 8e       	std	Y+26, r15	; 0x1a
    19c8:	e9 8e       	std	Y+25, r14	; 0x19
    19ca:	1c 8f       	std	Y+28, r17	; 0x1c
    19cc:	0b 8f       	std	Y+27, r16	; 0x1b
    19ce:	be 8f       	std	Y+30, r27	; 0x1e
    19d0:	ad 8f       	std	Y+29, r26	; 0x1d
    19d2:	f8 a3       	std	Y+32, r31	; 0x20
    19d4:	ef 8f       	std	Y+31, r30	; 0x1f
    19d6:	7a a3       	std	Y+34, r23	; 0x22
    19d8:	69 a3       	std	Y+33, r22	; 0x21
    19da:	5c a3       	std	Y+36, r21	; 0x24
    19dc:	4b a3       	std	Y+35, r20	; 0x23
    19de:	3e a3       	std	Y+38, r19	; 0x26
    19e0:	2d a3       	std	Y+37, r18	; 0x25
    19e2:	98 a7       	std	Y+40, r25	; 0x28
    19e4:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    19e6:	66 e2       	ldi	r22, 0x26	; 38
    19e8:	71 e0       	ldi	r23, 0x01	; 1
    19ea:	ce 01       	movw	r24, r28
    19ec:	49 96       	adiw	r24, 0x19	; 25
    19ee:	0e 94 40 06 	call	0xc80	; 0xc80 <localization_calc>
    19f2:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    19f4:	fc 01       	movw	r30, r24
    19f6:	80 85       	ldd	r24, Z+8	; 0x08
    19f8:	91 85       	ldd	r25, Z+9	; 0x09
    19fa:	a2 85       	ldd	r26, Z+10	; 0x0a
    19fc:	b3 85       	ldd	r27, Z+11	; 0x0b
    19fe:	0f 2e       	mov	r0, r31
    1a00:	f6 e2       	ldi	r31, 0x26	; 38
    1a02:	2f 2e       	mov	r2, r31
    1a04:	f1 e0       	ldi	r31, 0x01	; 1
    1a06:	3f 2e       	mov	r3, r31
    1a08:	f0 2d       	mov	r31, r0
    1a0a:	f1 01       	movw	r30, r2
    1a0c:	80 87       	std	Z+8, r24	; 0x08
    1a0e:	91 87       	std	Z+9, r25	; 0x09
    1a10:	a2 87       	std	Z+10, r26	; 0x0a
    1a12:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    1a14:	f8 01       	movw	r30, r16
    1a16:	60 85       	ldd	r22, Z+8	; 0x08
    1a18:	71 85       	ldd	r23, Z+9	; 0x09
    1a1a:	82 85       	ldd	r24, Z+10	; 0x0a
    1a1c:	93 85       	ldd	r25, Z+11	; 0x0b
    1a1e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <theta_error_correction>
    1a22:	2b 01       	movw	r4, r22
    1a24:	3c 01       	movw	r6, r24
    1a26:	f8 01       	movw	r30, r16
    1a28:	60 87       	std	Z+8, r22	; 0x08
    1a2a:	71 87       	std	Z+9, r23	; 0x09
    1a2c:	82 87       	std	Z+10, r24	; 0x0a
    1a2e:	93 87       	std	Z+11, r25	; 0x0b
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1a30:	24 ea       	ldi	r18, 0xA4	; 164
    1a32:	30 e7       	ldi	r19, 0x70	; 112
    1a34:	4d e7       	ldi	r20, 0x7D	; 125
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1a44:	4b 01       	movw	r8, r22
    1a46:	5c 01       	movw	r10, r24
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	37 ed       	ldi	r19, 0xD7	; 215
    1a4c:	43 e2       	ldi	r20, 0x23	; 35
    1a4e:	5c e3       	ldi	r21, 0x3C	; 60
    1a50:	60 91 da 01 	lds	r22, 0x01DA
    1a54:	70 91 db 01 	lds	r23, 0x01DB
    1a58:	80 91 dc 01 	lds	r24, 0x01DC
    1a5c:	90 91 dd 01 	lds	r25, 0x01DD
    1a60:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1a64:	9b 01       	movw	r18, r22
    1a66:	ac 01       	movw	r20, r24
    1a68:	c5 01       	movw	r24, r10
    1a6a:	b4 01       	movw	r22, r8
    1a6c:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
    1a70:	4b 01       	movw	r8, r22
    1a72:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    1a74:	60 93 da 01 	sts	0x01DA, r22
    1a78:	70 93 db 01 	sts	0x01DB, r23
    1a7c:	80 93 dc 01 	sts	0x01DC, r24
    1a80:	90 93 dd 01 	sts	0x01DD, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1a84:	24 ea       	ldi	r18, 0xA4	; 164
    1a86:	30 e7       	ldi	r19, 0x70	; 112
    1a88:	4d e7       	ldi	r20, 0x7D	; 125
    1a8a:	5f e3       	ldi	r21, 0x3F	; 63
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	64 81       	ldd	r22, Z+4	; 0x04
    1a90:	75 81       	ldd	r23, Z+5	; 0x05
    1a92:	86 81       	ldd	r24, Z+6	; 0x06
    1a94:	97 81       	ldd	r25, Z+7	; 0x07
    1a96:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1a9a:	6b 01       	movw	r12, r22
    1a9c:	7c 01       	movw	r14, r24
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	37 ed       	ldi	r19, 0xD7	; 215
    1aa2:	43 e2       	ldi	r20, 0x23	; 35
    1aa4:	5c e3       	ldi	r21, 0x3C	; 60
    1aa6:	60 91 d6 01 	lds	r22, 0x01D6
    1aaa:	70 91 d7 01 	lds	r23, 0x01D7
    1aae:	80 91 d8 01 	lds	r24, 0x01D8
    1ab2:	90 91 d9 01 	lds	r25, 0x01D9
    1ab6:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1aba:	9b 01       	movw	r18, r22
    1abc:	ac 01       	movw	r20, r24
    1abe:	c7 01       	movw	r24, r14
    1ac0:	b6 01       	movw	r22, r12
    1ac2:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
    1ac6:	6b 01       	movw	r12, r22
    1ac8:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    1aca:	60 93 d6 01 	sts	0x01D6, r22
    1ace:	70 93 d7 01 	sts	0x01D7, r23
    1ad2:	80 93 d8 01 	sts	0x01D8, r24
    1ad6:	90 93 d9 01 	sts	0x01D9, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1ada:	24 ea       	ldi	r18, 0xA4	; 164
    1adc:	30 e7       	ldi	r19, 0x70	; 112
    1ade:	4d e7       	ldi	r20, 0x7D	; 125
    1ae0:	5f e3       	ldi	r21, 0x3F	; 63
    1ae2:	c3 01       	movw	r24, r6
    1ae4:	b2 01       	movw	r22, r4
    1ae6:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1aea:	2b 01       	movw	r4, r22
    1aec:	3c 01       	movw	r6, r24
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	37 ed       	ldi	r19, 0xD7	; 215
    1af2:	43 e2       	ldi	r20, 0x23	; 35
    1af4:	5c e3       	ldi	r21, 0x3C	; 60
    1af6:	60 91 d2 01 	lds	r22, 0x01D2
    1afa:	70 91 d3 01 	lds	r23, 0x01D3
    1afe:	80 91 d4 01 	lds	r24, 0x01D4
    1b02:	90 91 d5 01 	lds	r25, 0x01D5
    1b06:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1b0a:	9b 01       	movw	r18, r22
    1b0c:	ac 01       	movw	r20, r24
    1b0e:	c3 01       	movw	r24, r6
    1b10:	b2 01       	movw	r22, r4
    1b12:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    1b16:	60 93 d2 01 	sts	0x01D2, r22
    1b1a:	70 93 d3 01 	sts	0x01D3, r23
    1b1e:	80 93 d4 01 	sts	0x01D4, r24
    1b22:	90 93 d5 01 	sts	0x01D5, r25
	
	robotCenterPrev[0] = x;
    1b26:	f1 01       	movw	r30, r2
    1b28:	80 82       	st	Z, r8
    1b2a:	91 82       	std	Z+1, r9	; 0x01
    1b2c:	a2 82       	std	Z+2, r10	; 0x02
    1b2e:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    1b30:	c4 82       	std	Z+4, r12	; 0x04
    1b32:	d5 82       	std	Z+5, r13	; 0x05
    1b34:	e6 82       	std	Z+6, r14	; 0x06
    1b36:	f7 82       	std	Z+7, r15	; 0x07
}
    1b38:	a8 96       	adiw	r28, 0x28	; 40
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	bf 90       	pop	r11
    1b56:	af 90       	pop	r10
    1b58:	9f 90       	pop	r9
    1b5a:	8f 90       	pop	r8
    1b5c:	7f 90       	pop	r7
    1b5e:	6f 90       	pop	r6
    1b60:	5f 90       	pop	r5
    1b62:	4f 90       	pop	r4
    1b64:	3f 90       	pop	r3
    1b66:	2f 90       	pop	r2
    1b68:	08 95       	ret

00001b6a <run_motor_control_loop>:



/* PID Control */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd)
{
    1b6a:	4f 92       	push	r4
    1b6c:	5f 92       	push	r5
    1b6e:	6f 92       	push	r6
    1b70:	7f 92       	push	r7
    1b72:	8f 92       	push	r8
    1b74:	9f 92       	push	r9
    1b76:	af 92       	push	r10
    1b78:	bf 92       	push	r11
    1b7a:	cf 92       	push	r12
    1b7c:	df 92       	push	r13
    1b7e:	ef 92       	push	r14
    1b80:	ff 92       	push	r15
    1b82:	0f 93       	push	r16
    1b84:	1f 93       	push	r17
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	68 97       	sbiw	r28, 0x18	; 24
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	29 01       	movw	r4, r18
    1b9c:	3a 01       	movw	r6, r20
    1b9e:	e9 8a       	std	Y+17, r14	; 0x11
    1ba0:	fa 8a       	std	Y+18, r15	; 0x12
    1ba2:	0b 8b       	std	Y+19, r16	; 0x13
    1ba4:	1c 8b       	std	Y+20, r17	; 0x14
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    1ba6:	20 91 da 01 	lds	r18, 0x01DA
    1baa:	30 91 db 01 	lds	r19, 0x01DB
    1bae:	40 91 dc 01 	lds	r20, 0x01DC
    1bb2:	50 91 dd 01 	lds	r21, 0x01DD
    1bb6:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
    1bba:	6d 83       	std	Y+5, r22	; 0x05
    1bbc:	7e 83       	std	Y+6, r23	; 0x06
    1bbe:	8f 83       	std	Y+7, r24	; 0x07
    1bc0:	98 87       	std	Y+8, r25	; 0x08
    1bc2:	20 91 d6 01 	lds	r18, 0x01D6
    1bc6:	30 91 d7 01 	lds	r19, 0x01D7
    1bca:	40 91 d8 01 	lds	r20, 0x01D8
    1bce:	50 91 d9 01 	lds	r21, 0x01D9
    1bd2:	c3 01       	movw	r24, r6
    1bd4:	b2 01       	movw	r22, r4
    1bd6:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
    1bda:	69 87       	std	Y+9, r22	; 0x09
    1bdc:	7a 87       	std	Y+10, r23	; 0x0a
    1bde:	8b 87       	std	Y+11, r24	; 0x0b
    1be0:	9c 87       	std	Y+12, r25	; 0x0c
    1be2:	2d 81       	ldd	r18, Y+5	; 0x05
    1be4:	3e 81       	ldd	r19, Y+6	; 0x06
    1be6:	4f 81       	ldd	r20, Y+7	; 0x07
    1be8:	58 85       	ldd	r21, Y+8	; 0x08
    1bea:	0e 94 a5 18 	call	0x314a	; 0x314a <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    1bee:	20 91 d2 01 	lds	r18, 0x01D2
    1bf2:	30 91 d3 01 	lds	r19, 0x01D3
    1bf6:	40 91 d4 01 	lds	r20, 0x01D4
    1bfa:	50 91 d5 01 	lds	r21, 0x01D5
    1bfe:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
	theta_error = theta_error_correction(theta_error);
    1c02:	0e 94 75 0c 	call	0x18ea	; 0x18ea <theta_error_correction>
    1c06:	69 83       	std	Y+1, r22	; 0x01
    1c08:	7a 83       	std	Y+2, r23	; 0x02
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
    1c0c:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    1c0e:	2b 01       	movw	r4, r22
    1c10:	3c 01       	movw	r6, r24
    1c12:	e8 94       	clt
    1c14:	77 f8       	bld	r7, 7
    1c16:	a6 01       	movw	r20, r12
    1c18:	95 01       	movw	r18, r10
    1c1a:	c3 01       	movw	r24, r6
    1c1c:	b2 01       	movw	r22, r4
    1c1e:	0e 94 c7 1a 	call	0x358e	; 0x358e <__gesf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	84 f4       	brge	.+32     	; 0x1c46 <run_motor_control_loop+0xdc>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    1c26:	29 81       	ldd	r18, Y+1	; 0x01
    1c28:	3a 81       	ldd	r19, Y+2	; 0x02
    1c2a:	4b 81       	ldd	r20, Y+3	; 0x03
    1c2c:	5c 81       	ldd	r21, Y+4	; 0x04
    1c2e:	c3 01       	movw	r24, r6
    1c30:	b2 01       	movw	r22, r4
    1c32:	0e 94 0e 19 	call	0x321c	; 0x321c <__divsf3>
    1c36:	a6 01       	movw	r20, r12
    1c38:	95 01       	movw	r18, r10
    1c3a:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1c3e:	69 83       	std	Y+1, r22	; 0x01
    1c40:	7a 83       	std	Y+2, r23	; 0x02
    1c42:	8b 83       	std	Y+3, r24	; 0x03
    1c44:	9c 83       	std	Y+4, r25	; 0x04
	}

	float angular_derivative = (theta_error-previous_theta_error)/TIMESTEP;
    1c46:	20 91 ce 01 	lds	r18, 0x01CE
    1c4a:	30 91 cf 01 	lds	r19, 0x01CF
    1c4e:	40 91 d0 01 	lds	r20, 0x01D0
    1c52:	50 91 d1 01 	lds	r21, 0x01D1
    1c56:	69 81       	ldd	r22, Y+1	; 0x01
    1c58:	7a 81       	ldd	r23, Y+2	; 0x02
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
    1c62:	2f e6       	ldi	r18, 0x6F	; 111
    1c64:	32 e1       	ldi	r19, 0x12	; 18
    1c66:	43 e8       	ldi	r20, 0x83	; 131
    1c68:	5a e3       	ldi	r21, 0x3A	; 58
    1c6a:	0e 94 0e 19 	call	0x321c	; 0x321c <__divsf3>
    1c6e:	6d 8b       	std	Y+21, r22	; 0x15
    1c70:	7e 8b       	std	Y+22, r23	; 0x16
    1c72:	8f 8b       	std	Y+23, r24	; 0x17
    1c74:	98 8f       	std	Y+24, r25	; 0x18
	float angular_output = theta_kp*theta_error - theta_kd*angular_derivative; //If output > 0, turn left
    1c76:	29 81       	ldd	r18, Y+1	; 0x01
    1c78:	3a 81       	ldd	r19, Y+2	; 0x02
    1c7a:	4b 81       	ldd	r20, Y+3	; 0x03
    1c7c:	5c 81       	ldd	r21, Y+4	; 0x04
    1c7e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1c80:	7c a5       	ldd	r23, Y+44	; 0x2c
    1c82:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c84:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c86:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1c8a:	6b 01       	movw	r12, r22
    1c8c:	7c 01       	movw	r14, r24
    1c8e:	2d 89       	ldd	r18, Y+21	; 0x15
    1c90:	3e 89       	ldd	r19, Y+22	; 0x16
    1c92:	4f 89       	ldd	r20, Y+23	; 0x17
    1c94:	58 8d       	ldd	r21, Y+24	; 0x18
    1c96:	6f a5       	ldd	r22, Y+47	; 0x2f
    1c98:	78 a9       	ldd	r23, Y+48	; 0x30
    1c9a:	89 a9       	ldd	r24, Y+49	; 0x31
    1c9c:	9a a9       	ldd	r25, Y+50	; 0x32
    1c9e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1ca2:	9b 01       	movw	r18, r22
    1ca4:	ac 01       	movw	r20, r24
    1ca6:	c7 01       	movw	r24, r14
    1ca8:	b6 01       	movw	r22, r12
    1caa:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
	previous_theta_error = theta_error;
    1cae:	29 81       	ldd	r18, Y+1	; 0x01
    1cb0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb2:	4b 81       	ldd	r20, Y+3	; 0x03
    1cb4:	5c 81       	ldd	r21, Y+4	; 0x04
    1cb6:	20 93 ce 01 	sts	0x01CE, r18
    1cba:	30 93 cf 01 	sts	0x01CF, r19
    1cbe:	40 93 d0 01 	sts	0x01D0, r20
    1cc2:	50 93 d1 01 	sts	0x01D1, r21
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    1cc6:	2b ed       	ldi	r18, 0xDB	; 219
    1cc8:	3f e0       	ldi	r19, 0x0F	; 15
    1cca:	49 e4       	ldi	r20, 0x49	; 73
    1ccc:	50 e4       	ldi	r21, 0x40	; 64
    1cce:	0e 94 0e 19 	call	0x321c	; 0x321c <__divsf3>
    1cd2:	6d 87       	std	Y+13, r22	; 0x0d
    1cd4:	7e 87       	std	Y+14, r23	; 0x0e
    1cd6:	8f 87       	std	Y+15, r24	; 0x0f
    1cd8:	98 8b       	std	Y+16, r25	; 0x10

	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    1cda:	69 81       	ldd	r22, Y+1	; 0x01
    1cdc:	7a 81       	ldd	r23, Y+2	; 0x02
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	0e 94 09 19 	call	0x3212	; 0x3212 <cos>
    1ce6:	2b 01       	movw	r4, r22
    1ce8:	3c 01       	movw	r6, r24
    1cea:	29 85       	ldd	r18, Y+9	; 0x09
    1cec:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cee:	4b 85       	ldd	r20, Y+11	; 0x0b
    1cf0:	5c 85       	ldd	r21, Y+12	; 0x0c
    1cf2:	ca 01       	movw	r24, r20
    1cf4:	b9 01       	movw	r22, r18
    1cf6:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1cfa:	6b 01       	movw	r12, r22
    1cfc:	7c 01       	movw	r14, r24
    1cfe:	2d 81       	ldd	r18, Y+5	; 0x05
    1d00:	3e 81       	ldd	r19, Y+6	; 0x06
    1d02:	4f 81       	ldd	r20, Y+7	; 0x07
    1d04:	58 85       	ldd	r21, Y+8	; 0x08
    1d06:	ca 01       	movw	r24, r20
    1d08:	b9 01       	movw	r22, r18
    1d0a:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1d0e:	9b 01       	movw	r18, r22
    1d10:	ac 01       	movw	r20, r24
    1d12:	c7 01       	movw	r24, r14
    1d14:	b6 01       	movw	r22, r12
    1d16:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
    1d1a:	0e 94 4f 1b 	call	0x369e	; 0x369e <sqrt>
    1d1e:	9b 01       	movw	r18, r22
    1d20:	ac 01       	movw	r20, r24
    1d22:	c3 01       	movw	r24, r6
    1d24:	b2 01       	movw	r22, r4
    1d26:	9f 77       	andi	r25, 0x7F	; 127
    1d28:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1d2c:	6b 01       	movw	r12, r22
    1d2e:	7c 01       	movw	r14, r24
	if (has_puck()) {
    1d30:	0e 94 38 16 	call	0x2c70	; 0x2c70 <has_puck>
    1d34:	88 23       	and	r24, r24
    1d36:	e1 f0       	breq	.+56     	; 0x1d70 <run_motor_control_loop+0x206>
		if (linear_error<0){
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	a9 01       	movw	r20, r18
    1d3e:	c7 01       	movw	r24, r14
    1d40:	b6 01       	movw	r22, r12
    1d42:	0e 94 04 19 	call	0x3208	; 0x3208 <__cmpsf2>
    1d46:	88 23       	and	r24, r24
    1d48:	5c f0       	brlt	.+22     	; 0x1d60 <run_motor_control_loop+0x1f6>
			linear_error = 30;
		} else {
			linear_error += 30;
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 ef       	ldi	r20, 0xF0	; 240
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	c7 01       	movw	r24, r14
    1d54:	b6 01       	movw	r22, r12
    1d56:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
    1d5a:	6b 01       	movw	r12, r22
    1d5c:	7c 01       	movw	r14, r24
    1d5e:	08 c0       	rjmp	.+16     	; 0x1d70 <run_motor_control_loop+0x206>
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	if (has_puck()) {
		if (linear_error<0){
			linear_error = 30;
    1d60:	0f 2e       	mov	r0, r31
    1d62:	c1 2c       	mov	r12, r1
    1d64:	d1 2c       	mov	r13, r1
    1d66:	f0 ef       	ldi	r31, 0xF0	; 240
    1d68:	ef 2e       	mov	r14, r31
    1d6a:	f1 e4       	ldi	r31, 0x41	; 65
    1d6c:	ff 2e       	mov	r15, r31
    1d6e:	f0 2d       	mov	r31, r0
		} else {
			linear_error += 30;
		}
	}
	float linear_derivative = (linear_error-previous_linear_error)/TIMESTEP;
    1d70:	20 91 ca 01 	lds	r18, 0x01CA
    1d74:	30 91 cb 01 	lds	r19, 0x01CB
    1d78:	40 91 cc 01 	lds	r20, 0x01CC
    1d7c:	50 91 cd 01 	lds	r21, 0x01CD
    1d80:	c7 01       	movw	r24, r14
    1d82:	b6 01       	movw	r22, r12
    1d84:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
    1d88:	2f e6       	ldi	r18, 0x6F	; 111
    1d8a:	32 e1       	ldi	r19, 0x12	; 18
    1d8c:	43 e8       	ldi	r20, 0x83	; 131
    1d8e:	5a e3       	ldi	r21, 0x3A	; 58
    1d90:	0e 94 0e 19 	call	0x321c	; 0x321c <__divsf3>
    1d94:	4b 01       	movw	r8, r22
    1d96:	5c 01       	movw	r10, r24
	float linear_output = linear_kp*linear_error - linear_kd*linear_derivative;
    1d98:	a7 01       	movw	r20, r14
    1d9a:	96 01       	movw	r18, r12
    1d9c:	6b a9       	ldd	r22, Y+51	; 0x33
    1d9e:	7c a9       	ldd	r23, Y+52	; 0x34
    1da0:	8d a9       	ldd	r24, Y+53	; 0x35
    1da2:	9e a9       	ldd	r25, Y+54	; 0x36
    1da4:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1da8:	2b 01       	movw	r4, r22
    1daa:	3c 01       	movw	r6, r24
    1dac:	a5 01       	movw	r20, r10
    1dae:	94 01       	movw	r18, r8
    1db0:	6f a9       	ldd	r22, Y+55	; 0x37
    1db2:	78 ad       	ldd	r23, Y+56	; 0x38
    1db4:	89 ad       	ldd	r24, Y+57	; 0x39
    1db6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1db8:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1dbc:	9b 01       	movw	r18, r22
    1dbe:	ac 01       	movw	r20, r24
    1dc0:	c3 01       	movw	r24, r6
    1dc2:	b2 01       	movw	r22, r4
    1dc4:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
    1dc8:	2b 01       	movw	r4, r22
    1dca:	3c 01       	movw	r6, r24
	previous_linear_error = linear_error;
    1dcc:	c0 92 ca 01 	sts	0x01CA, r12
    1dd0:	d0 92 cb 01 	sts	0x01CB, r13
    1dd4:	e0 92 cc 01 	sts	0x01CC, r14
    1dd8:	f0 92 cd 01 	sts	0x01CD, r15
	if(linear_output>40.0){linear_output=40.0;}
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	52 e4       	ldi	r21, 0x42	; 66
    1de4:	0e 94 c7 1a 	call	0x358e	; 0x358e <__gesf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	44 f4       	brge	.+16     	; 0x1dfc <run_motor_control_loop+0x292>
    1dec:	0f 2e       	mov	r0, r31
    1dee:	41 2c       	mov	r4, r1
    1df0:	51 2c       	mov	r5, r1
    1df2:	f0 e2       	ldi	r31, 0x20	; 32
    1df4:	6f 2e       	mov	r6, r31
    1df6:	f2 e4       	ldi	r31, 0x42	; 66
    1df8:	7f 2e       	mov	r7, r31
    1dfa:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e2       	ldi	r20, 0x20	; 32
    1e02:	52 e4       	ldi	r21, 0x42	; 66
    1e04:	c3 01       	movw	r24, r6
    1e06:	b2 01       	movw	r22, r4
    1e08:	0e 94 0e 19 	call	0x321c	; 0x321c <__divsf3>
    1e0c:	6b 01       	movw	r12, r22
    1e0e:	7c 01       	movw	r14, r24
	
	if (linear_derivative < 0.1 && angular_derivative < 0.01) {
    1e10:	2d ec       	ldi	r18, 0xCD	; 205
    1e12:	3c ec       	ldi	r19, 0xCC	; 204
    1e14:	4c ec       	ldi	r20, 0xCC	; 204
    1e16:	5d e3       	ldi	r21, 0x3D	; 61
    1e18:	c5 01       	movw	r24, r10
    1e1a:	b4 01       	movw	r22, r8
    1e1c:	0e 94 04 19 	call	0x3208	; 0x3208 <__cmpsf2>
    1e20:	88 23       	and	r24, r24
    1e22:	0c f5       	brge	.+66     	; 0x1e66 <run_motor_control_loop+0x2fc>
    1e24:	2a e0       	ldi	r18, 0x0A	; 10
    1e26:	37 ed       	ldi	r19, 0xD7	; 215
    1e28:	43 e2       	ldi	r20, 0x23	; 35
    1e2a:	5c e3       	ldi	r21, 0x3C	; 60
    1e2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e30:	8f 89       	ldd	r24, Y+23	; 0x17
    1e32:	98 8d       	ldd	r25, Y+24	; 0x18
    1e34:	0e 94 04 19 	call	0x3208	; 0x3208 <__cmpsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	ac f4       	brge	.+42     	; 0x1e66 <run_motor_control_loop+0x2fc>
		angular_output = 0.2*fabs(theta_error)/theta_error;
    1e3c:	2d ec       	ldi	r18, 0xCD	; 205
    1e3e:	3c ec       	ldi	r19, 0xCC	; 204
    1e40:	4c e4       	ldi	r20, 0x4C	; 76
    1e42:	5e e3       	ldi	r21, 0x3E	; 62
    1e44:	69 81       	ldd	r22, Y+1	; 0x01
    1e46:	7a 81       	ldd	r23, Y+2	; 0x02
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	9f 77       	andi	r25, 0x7F	; 127
    1e4e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1e52:	29 81       	ldd	r18, Y+1	; 0x01
    1e54:	3a 81       	ldd	r19, Y+2	; 0x02
    1e56:	4b 81       	ldd	r20, Y+3	; 0x03
    1e58:	5c 81       	ldd	r21, Y+4	; 0x04
    1e5a:	0e 94 0e 19 	call	0x321c	; 0x321c <__divsf3>
    1e5e:	6d 87       	std	Y+13, r22	; 0x0d
    1e60:	7e 87       	std	Y+14, r23	; 0x0e
    1e62:	8f 87       	std	Y+15, r24	; 0x0f
    1e64:	98 8b       	std	Y+16, r25	; 0x10
	}
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    1e66:	8d 84       	ldd	r8, Y+13	; 0x0d
    1e68:	9e 84       	ldd	r9, Y+14	; 0x0e
    1e6a:	af 84       	ldd	r10, Y+15	; 0x0f
    1e6c:	b8 88       	ldd	r11, Y+16	; 0x10
    1e6e:	b7 fa       	bst	r11, 7
    1e70:	b0 94       	com	r11
    1e72:	b7 f8       	bld	r11, 7
    1e74:	b0 94       	com	r11
	right_duty_cycle = angular_output;
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    1e76:	69 81       	ldd	r22, Y+1	; 0x01
    1e78:	7a 81       	ldd	r23, Y+2	; 0x02
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	9f 77       	andi	r25, 0x7F	; 127
    1e80:	2b ed       	ldi	r18, 0xDB	; 219
    1e82:	3f e0       	ldi	r19, 0x0F	; 15
    1e84:	49 ec       	ldi	r20, 0xC9	; 201
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 04 19 	call	0x3208	; 0x3208 <__cmpsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	0c f5       	brge	.+66     	; 0x1ed2 <run_motor_control_loop+0x368>
		left_duty_cycle += linear_output;
    1e90:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e92:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e94:	4f 85       	ldd	r20, Y+15	; 0x0f
    1e96:	58 89       	ldd	r21, Y+16	; 0x10
    1e98:	c7 01       	movw	r24, r14
    1e9a:	b6 01       	movw	r22, r12
    1e9c:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
    1ea0:	60 93 22 01 	sts	0x0122, r22
    1ea4:	70 93 23 01 	sts	0x0123, r23
    1ea8:	80 93 24 01 	sts	0x0124, r24
    1eac:	90 93 25 01 	sts	0x0125, r25
		right_duty_cycle += linear_output;
    1eb0:	a7 01       	movw	r20, r14
    1eb2:	96 01       	movw	r18, r12
    1eb4:	6d 85       	ldd	r22, Y+13	; 0x0d
    1eb6:	7e 85       	ldd	r23, Y+14	; 0x0e
    1eb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eba:	98 89       	ldd	r25, Y+16	; 0x10
    1ebc:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
    1ec0:	60 93 1e 01 	sts	0x011E, r22
    1ec4:	70 93 1f 01 	sts	0x011F, r23
    1ec8:	80 93 20 01 	sts	0x0120, r24
    1ecc:	90 93 21 01 	sts	0x0121, r25
    1ed0:	1e c0       	rjmp	.+60     	; 0x1f0e <run_motor_control_loop+0x3a4>
		} else{
		left_duty_cycle -= linear_output;
    1ed2:	a7 01       	movw	r20, r14
    1ed4:	96 01       	movw	r18, r12
    1ed6:	c5 01       	movw	r24, r10
    1ed8:	b4 01       	movw	r22, r8
    1eda:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
    1ede:	60 93 22 01 	sts	0x0122, r22
    1ee2:	70 93 23 01 	sts	0x0123, r23
    1ee6:	80 93 24 01 	sts	0x0124, r24
    1eea:	90 93 25 01 	sts	0x0125, r25
		right_duty_cycle -= linear_output;
    1eee:	a7 01       	movw	r20, r14
    1ef0:	96 01       	movw	r18, r12
    1ef2:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ef4:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef8:	98 89       	ldd	r25, Y+16	; 0x10
    1efa:	0e 94 25 18 	call	0x304a	; 0x304a <__subsf3>
    1efe:	60 93 1e 01 	sts	0x011E, r22
    1f02:	70 93 1f 01 	sts	0x011F, r23
    1f06:	80 93 20 01 	sts	0x0120, r24
    1f0a:	90 93 21 01 	sts	0x0121, r25
	
	//If it has the puck, don't let either of the motors spin backwards 

		
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	a9 01       	movw	r20, r18
    1f14:	60 91 22 01 	lds	r22, 0x0122
    1f18:	70 91 23 01 	lds	r23, 0x0123
    1f1c:	80 91 24 01 	lds	r24, 0x0124
    1f20:	90 91 25 01 	lds	r25, 0x0125
    1f24:	0e 94 04 19 	call	0x3208	; 0x3208 <__cmpsf2>
    1f28:	88 23       	and	r24, r24
    1f2a:	14 f4       	brge	.+4      	; 0x1f30 <run_motor_control_loop+0x3c6>
    1f2c:	29 98       	cbi	0x05, 1	; 5
    1f2e:	01 c0       	rjmp	.+2      	; 0x1f32 <run_motor_control_loop+0x3c8>
	else{set(PORTB,1);}
    1f30:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	a9 01       	movw	r20, r18
    1f38:	60 91 1e 01 	lds	r22, 0x011E
    1f3c:	70 91 1f 01 	lds	r23, 0x011F
    1f40:	80 91 20 01 	lds	r24, 0x0120
    1f44:	90 91 21 01 	lds	r25, 0x0121
    1f48:	0e 94 04 19 	call	0x3208	; 0x3208 <__cmpsf2>
    1f4c:	88 23       	and	r24, r24
    1f4e:	14 f4       	brge	.+4      	; 0x1f54 <run_motor_control_loop+0x3ea>
    1f50:	2b 98       	cbi	0x05, 3	; 5
    1f52:	01 c0       	rjmp	.+2      	; 0x1f56 <run_motor_control_loop+0x3ec>
	else{set(PORTB,3);}
    1f54:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    1f56:	80 90 22 01 	lds	r8, 0x0122
    1f5a:	90 90 23 01 	lds	r9, 0x0123
    1f5e:	a0 90 24 01 	lds	r10, 0x0124
    1f62:	b0 90 25 01 	lds	r11, 0x0125
    1f66:	e8 94       	clt
    1f68:	b7 f8       	bld	r11, 7
    1f6a:	80 92 22 01 	sts	0x0122, r8
    1f6e:	90 92 23 01 	sts	0x0123, r9
    1f72:	a0 92 24 01 	sts	0x0124, r10
    1f76:	b0 92 25 01 	sts	0x0125, r11
	right_duty_cycle = fabs(right_duty_cycle);
    1f7a:	c0 90 1e 01 	lds	r12, 0x011E
    1f7e:	d0 90 1f 01 	lds	r13, 0x011F
    1f82:	e0 90 20 01 	lds	r14, 0x0120
    1f86:	f0 90 21 01 	lds	r15, 0x0121
    1f8a:	e8 94       	clt
    1f8c:	f7 f8       	bld	r15, 7
    1f8e:	c0 92 1e 01 	sts	0x011E, r12
    1f92:	d0 92 1f 01 	sts	0x011F, r13
    1f96:	e0 92 20 01 	sts	0x0120, r14
    1f9a:	f0 92 21 01 	sts	0x0121, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    1f9e:	a7 01       	movw	r20, r14
    1fa0:	96 01       	movw	r18, r12
    1fa2:	c5 01       	movw	r24, r10
    1fa4:	b4 01       	movw	r22, r8
    1fa6:	0e 94 c7 1a 	call	0x358e	; 0x358e <__gesf2>
    1faa:	18 16       	cp	r1, r24
    1fac:	2c f0       	brlt	.+10     	; 0x1fb8 <run_motor_control_loop+0x44e>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    1fae:	1c 2d       	mov	r17, r12
    1fb0:	0d 2d       	mov	r16, r13
    1fb2:	7e 2c       	mov	r7, r14
    1fb4:	6f 2c       	mov	r6, r15
    1fb6:	04 c0       	rjmp	.+8      	; 0x1fc0 <run_motor_control_loop+0x456>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    1fb8:	18 2d       	mov	r17, r8
    1fba:	09 2d       	mov	r16, r9
    1fbc:	7a 2c       	mov	r7, r10
    1fbe:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    1fc0:	29 89       	ldd	r18, Y+17	; 0x11
    1fc2:	3a 89       	ldd	r19, Y+18	; 0x12
    1fc4:	4b 89       	ldd	r20, Y+19	; 0x13
    1fc6:	5c 89       	ldd	r21, Y+20	; 0x14
    1fc8:	61 2f       	mov	r22, r17
    1fca:	70 2f       	mov	r23, r16
    1fcc:	87 2d       	mov	r24, r7
    1fce:	96 2d       	mov	r25, r6
    1fd0:	0e 94 c7 1a 	call	0x358e	; 0x358e <__gesf2>
    1fd4:	18 16       	cp	r1, r24
    1fd6:	64 f5       	brge	.+88     	; 0x2030 <run_motor_control_loop+0x4c6>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    1fd8:	21 2f       	mov	r18, r17
    1fda:	30 2f       	mov	r19, r16
    1fdc:	47 2d       	mov	r20, r7
    1fde:	56 2d       	mov	r21, r6
    1fe0:	c5 01       	movw	r24, r10
    1fe2:	b4 01       	movw	r22, r8
    1fe4:	0e 94 0e 19 	call	0x321c	; 0x321c <__divsf3>
    1fe8:	29 89       	ldd	r18, Y+17	; 0x11
    1fea:	3a 89       	ldd	r19, Y+18	; 0x12
    1fec:	4b 89       	ldd	r20, Y+19	; 0x13
    1fee:	5c 89       	ldd	r21, Y+20	; 0x14
    1ff0:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    1ff4:	60 93 22 01 	sts	0x0122, r22
    1ff8:	70 93 23 01 	sts	0x0123, r23
    1ffc:	80 93 24 01 	sts	0x0124, r24
    2000:	90 93 25 01 	sts	0x0125, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    2004:	21 2f       	mov	r18, r17
    2006:	30 2f       	mov	r19, r16
    2008:	47 2d       	mov	r20, r7
    200a:	56 2d       	mov	r21, r6
    200c:	c7 01       	movw	r24, r14
    200e:	b6 01       	movw	r22, r12
    2010:	0e 94 0e 19 	call	0x321c	; 0x321c <__divsf3>
    2014:	29 89       	ldd	r18, Y+17	; 0x11
    2016:	3a 89       	ldd	r19, Y+18	; 0x12
    2018:	4b 89       	ldd	r20, Y+19	; 0x13
    201a:	5c 89       	ldd	r21, Y+20	; 0x14
    201c:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    2020:	60 93 1e 01 	sts	0x011E, r22
    2024:	70 93 1f 01 	sts	0x011F, r23
    2028:	80 93 20 01 	sts	0x0120, r24
    202c:	90 93 21 01 	sts	0x0121, r25
	}
	


	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    2030:	08 e8       	ldi	r16, 0x88	; 136
    2032:	10 e0       	ldi	r17, 0x00	; 0
    2034:	f8 01       	movw	r30, r16
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 af 19 	call	0x335e	; 0x335e <__floatunsisf>
    2042:	20 91 22 01 	lds	r18, 0x0122
    2046:	30 91 23 01 	lds	r19, 0x0123
    204a:	40 91 24 01 	lds	r20, 0x0124
    204e:	50 91 25 01 	lds	r21, 0x0125
    2052:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    2056:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    205a:	70 93 8b 00 	sts	0x008B, r23
    205e:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    2062:	f8 01       	movw	r30, r16
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 af 19 	call	0x335e	; 0x335e <__floatunsisf>
    2070:	20 91 1e 01 	lds	r18, 0x011E
    2074:	30 91 1f 01 	lds	r19, 0x011F
    2078:	40 91 20 01 	lds	r20, 0x0120
    207c:	50 91 21 01 	lds	r21, 0x0121
    2080:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    2084:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    2088:	70 93 8d 00 	sts	0x008D, r23
    208c:	60 93 8c 00 	sts	0x008C, r22

}
    2090:	68 96       	adiw	r28, 0x18	; 24
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	ff 90       	pop	r15
    20a6:	ef 90       	pop	r14
    20a8:	df 90       	pop	r13
    20aa:	cf 90       	pop	r12
    20ac:	bf 90       	pop	r11
    20ae:	af 90       	pop	r10
    20b0:	9f 90       	pop	r9
    20b2:	8f 90       	pop	r8
    20b4:	7f 90       	pop	r7
    20b6:	6f 90       	pop	r6
    20b8:	5f 90       	pop	r5
    20ba:	4f 90       	pop	r4
    20bc:	08 95       	ret

000020be <m_bus_init>:
    20be:	58 9a       	sbi	0x0b, 0	; 11
    20c0:	59 9a       	sbi	0x0b, 1	; 11
    20c2:	5a 9a       	sbi	0x0b, 2	; 11
    20c4:	8c e0       	ldi	r24, 0x0C	; 12
    20c6:	80 93 b8 00 	sts	0x00B8, r24
    20ca:	e9 e6       	ldi	r30, 0x69	; 105
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	80 62       	ori	r24, 0x20	; 32
    20d2:	80 83       	st	Z, r24
    20d4:	80 81       	ld	r24, Z
    20d6:	8f 7e       	andi	r24, 0xEF	; 239
    20d8:	80 83       	st	Z, r24
    20da:	ea 9a       	sbi	0x1d, 2	; 29
    20dc:	78 94       	sei
    20de:	08 95       	ret

000020e0 <m_rf_open>:
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	18 2f       	mov	r17, r24
    20e8:	d6 2f       	mov	r29, r22
    20ea:	c4 2f       	mov	r28, r20
    20ec:	0e 94 5f 10 	call	0x20be	; 0x20be <m_bus_init>
    20f0:	94 ea       	ldi	r25, 0xA4	; 164
    20f2:	90 93 bc 00 	sts	0x00BC, r25
    20f6:	ec eb       	ldi	r30, 0xBC	; 188
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	90 81       	ld	r25, Z
    20fc:	99 23       	and	r25, r25
    20fe:	ec f7       	brge	.-6      	; 0x20fa <m_rf_open+0x1a>
    2100:	90 e5       	ldi	r25, 0x50	; 80
    2102:	90 93 bb 00 	sts	0x00BB, r25
    2106:	94 e8       	ldi	r25, 0x84	; 132
    2108:	90 93 bc 00 	sts	0x00BC, r25
    210c:	ec eb       	ldi	r30, 0xBC	; 188
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	90 81       	ld	r25, Z
    2112:	99 23       	and	r25, r25
    2114:	ec f7       	brge	.-6      	; 0x2110 <m_rf_open+0x30>
    2116:	90 91 b9 00 	lds	r25, 0x00B9
    211a:	98 7f       	andi	r25, 0xF8	; 248
    211c:	90 32       	cpi	r25, 0x20	; 32
    211e:	29 f4       	brne	.+10     	; 0x212a <m_rf_open+0x4a>
    2120:	84 e9       	ldi	r24, 0x94	; 148
    2122:	80 93 bc 00 	sts	0x00BC, r24
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	2d c0       	rjmp	.+90     	; 0x2184 <m_rf_open+0xa4>
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	80 93 bb 00 	sts	0x00BB, r24
    2130:	84 e8       	ldi	r24, 0x84	; 132
    2132:	80 93 bc 00 	sts	0x00BC, r24
    2136:	ec eb       	ldi	r30, 0xBC	; 188
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	90 81       	ld	r25, Z
    213c:	99 23       	and	r25, r25
    213e:	ec f7       	brge	.-6      	; 0x213a <m_rf_open+0x5a>
    2140:	10 93 bb 00 	sts	0x00BB, r17
    2144:	84 e8       	ldi	r24, 0x84	; 132
    2146:	80 93 bc 00 	sts	0x00BC, r24
    214a:	ec eb       	ldi	r30, 0xBC	; 188
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	88 23       	and	r24, r24
    2152:	ec f7       	brge	.-6      	; 0x214e <m_rf_open+0x6e>
    2154:	d0 93 bb 00 	sts	0x00BB, r29
    2158:	84 e8       	ldi	r24, 0x84	; 132
    215a:	80 93 bc 00 	sts	0x00BC, r24
    215e:	ec eb       	ldi	r30, 0xBC	; 188
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	88 23       	and	r24, r24
    2166:	ec f7       	brge	.-6      	; 0x2162 <m_rf_open+0x82>
    2168:	c0 93 bb 00 	sts	0x00BB, r28
    216c:	84 e8       	ldi	r24, 0x84	; 132
    216e:	80 93 bc 00 	sts	0x00BC, r24
    2172:	ec eb       	ldi	r30, 0xBC	; 188
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	88 23       	and	r24, r24
    217a:	ec f7       	brge	.-6      	; 0x2176 <m_rf_open+0x96>
    217c:	84 e9       	ldi	r24, 0x94	; 148
    217e:	80 93 bc 00 	sts	0x00BC, r24
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	1f 91       	pop	r17
    218a:	08 95       	ret

0000218c <m_rf_read>:
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	9c 01       	movw	r18, r24
    2192:	84 ea       	ldi	r24, 0xA4	; 164
    2194:	80 93 bc 00 	sts	0x00BC, r24
    2198:	ec eb       	ldi	r30, 0xBC	; 188
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	90 81       	ld	r25, Z
    219e:	99 23       	and	r25, r25
    21a0:	ec f7       	brge	.-6      	; 0x219c <m_rf_read+0x10>
    21a2:	81 e5       	ldi	r24, 0x51	; 81
    21a4:	80 93 bb 00 	sts	0x00BB, r24
    21a8:	84 e8       	ldi	r24, 0x84	; 132
    21aa:	80 93 bc 00 	sts	0x00BC, r24
    21ae:	ec eb       	ldi	r30, 0xBC	; 188
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	90 81       	ld	r25, Z
    21b4:	99 23       	and	r25, r25
    21b6:	ec f7       	brge	.-6      	; 0x21b2 <m_rf_read+0x26>
    21b8:	80 91 b9 00 	lds	r24, 0x00B9
    21bc:	88 7f       	andi	r24, 0xF8	; 248
    21be:	88 34       	cpi	r24, 0x48	; 72
    21c0:	29 f4       	brne	.+10     	; 0x21cc <m_rf_read+0x40>
    21c2:	84 e9       	ldi	r24, 0x94	; 148
    21c4:	80 93 bc 00 	sts	0x00BC, r24
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	41 c0       	rjmp	.+130    	; 0x224e <m_rf_read+0xc2>
    21cc:	84 ec       	ldi	r24, 0xC4	; 196
    21ce:	80 93 bc 00 	sts	0x00BC, r24
    21d2:	ec eb       	ldi	r30, 0xBC	; 188
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	90 81       	ld	r25, Z
    21d8:	99 23       	and	r25, r25
    21da:	ec f7       	brge	.-6      	; 0x21d6 <m_rf_read+0x4a>
    21dc:	40 91 bb 00 	lds	r20, 0x00BB
    21e0:	46 13       	cpse	r20, r22
    21e2:	09 c0       	rjmp	.+18     	; 0x21f6 <m_rf_read+0x6a>
    21e4:	84 2f       	mov	r24, r20
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	18 16       	cp	r1, r24
    21ec:	19 06       	cpc	r1, r25
    21ee:	44 f0       	brlt	.+16     	; 0x2200 <m_rf_read+0x74>
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	50 e0       	ldi	r21, 0x00	; 0
    21f4:	1a c0       	rjmp	.+52     	; 0x222a <m_rf_read+0x9e>
    21f6:	84 e9       	ldi	r24, 0x94	; 148
    21f8:	80 93 bc 00 	sts	0x00BC, r24
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	27 c0       	rjmp	.+78     	; 0x224e <m_rf_read+0xc2>
    2200:	d9 01       	movw	r26, r18
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	41 50       	subi	r20, 0x01	; 1
    2206:	51 09       	sbc	r21, r1
    2208:	b9 01       	movw	r22, r18
    220a:	64 0f       	add	r22, r20
    220c:	75 1f       	adc	r23, r21
    220e:	ec eb       	ldi	r30, 0xBC	; 188
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	84 ec       	ldi	r24, 0xC4	; 196
    2214:	cb eb       	ldi	r28, 0xBB	; 187
    2216:	d0 e0       	ldi	r29, 0x00	; 0
    2218:	80 83       	st	Z, r24
    221a:	90 81       	ld	r25, Z
    221c:	99 23       	and	r25, r25
    221e:	ec f7       	brge	.-6      	; 0x221a <m_rf_read+0x8e>
    2220:	98 81       	ld	r25, Y
    2222:	9d 93       	st	X+, r25
    2224:	a6 17       	cp	r26, r22
    2226:	b7 07       	cpc	r27, r23
    2228:	b9 f7       	brne	.-18     	; 0x2218 <m_rf_read+0x8c>
    222a:	84 e8       	ldi	r24, 0x84	; 132
    222c:	80 93 bc 00 	sts	0x00BC, r24
    2230:	ec eb       	ldi	r30, 0xBC	; 188
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	90 81       	ld	r25, Z
    2236:	99 23       	and	r25, r25
    2238:	ec f7       	brge	.-6      	; 0x2234 <m_rf_read+0xa8>
    223a:	80 91 bb 00 	lds	r24, 0x00BB
    223e:	f9 01       	movw	r30, r18
    2240:	e4 0f       	add	r30, r20
    2242:	f5 1f       	adc	r31, r21
    2244:	80 83       	st	Z, r24
    2246:	84 e9       	ldi	r24, 0x94	; 148
    2248:	80 93 bc 00 	sts	0x00BC, r24
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	08 95       	ret

00002254 <m_rf_send>:
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	f8 94       	cli
    225a:	94 ea       	ldi	r25, 0xA4	; 164
    225c:	90 93 bc 00 	sts	0x00BC, r25
    2260:	ec eb       	ldi	r30, 0xBC	; 188
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	90 81       	ld	r25, Z
    2266:	99 23       	and	r25, r25
    2268:	ec f7       	brge	.-6      	; 0x2264 <m_rf_send+0x10>
    226a:	90 e5       	ldi	r25, 0x50	; 80
    226c:	90 93 bb 00 	sts	0x00BB, r25
    2270:	94 e8       	ldi	r25, 0x84	; 132
    2272:	90 93 bc 00 	sts	0x00BC, r25
    2276:	ec eb       	ldi	r30, 0xBC	; 188
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	90 81       	ld	r25, Z
    227c:	99 23       	and	r25, r25
    227e:	ec f7       	brge	.-6      	; 0x227a <m_rf_send+0x26>
    2280:	90 91 b9 00 	lds	r25, 0x00B9
    2284:	98 7f       	andi	r25, 0xF8	; 248
    2286:	90 32       	cpi	r25, 0x20	; 32
    2288:	31 f4       	brne	.+12     	; 0x2296 <m_rf_send+0x42>
    228a:	84 e9       	ldi	r24, 0x94	; 148
    228c:	80 93 bc 00 	sts	0x00BC, r24
    2290:	78 94       	sei
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	2d c0       	rjmp	.+90     	; 0x22f0 <m_rf_send+0x9c>
    2296:	93 e0       	ldi	r25, 0x03	; 3
    2298:	90 93 bb 00 	sts	0x00BB, r25
    229c:	94 e8       	ldi	r25, 0x84	; 132
    229e:	90 93 bc 00 	sts	0x00BC, r25
    22a2:	ec eb       	ldi	r30, 0xBC	; 188
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	90 81       	ld	r25, Z
    22a8:	99 23       	and	r25, r25
    22aa:	ec f7       	brge	.-6      	; 0x22a6 <m_rf_send+0x52>
    22ac:	80 93 bb 00 	sts	0x00BB, r24
    22b0:	84 e8       	ldi	r24, 0x84	; 132
    22b2:	80 93 bc 00 	sts	0x00BC, r24
    22b6:	ec eb       	ldi	r30, 0xBC	; 188
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	88 23       	and	r24, r24
    22be:	ec f7       	brge	.-6      	; 0x22ba <m_rf_send+0x66>
    22c0:	44 23       	and	r20, r20
    22c2:	89 f0       	breq	.+34     	; 0x22e6 <m_rf_send+0x92>
    22c4:	db 01       	movw	r26, r22
    22c6:	64 0f       	add	r22, r20
    22c8:	71 1d       	adc	r23, r1
    22ca:	cb eb       	ldi	r28, 0xBB	; 187
    22cc:	d0 e0       	ldi	r29, 0x00	; 0
    22ce:	ec eb       	ldi	r30, 0xBC	; 188
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	94 e8       	ldi	r25, 0x84	; 132
    22d4:	8d 91       	ld	r24, X+
    22d6:	88 83       	st	Y, r24
    22d8:	90 83       	st	Z, r25
    22da:	80 81       	ld	r24, Z
    22dc:	88 23       	and	r24, r24
    22de:	ec f7       	brge	.-6      	; 0x22da <m_rf_send+0x86>
    22e0:	a6 17       	cp	r26, r22
    22e2:	b7 07       	cpc	r27, r23
    22e4:	b9 f7       	brne	.-18     	; 0x22d4 <m_rf_send+0x80>
    22e6:	84 e9       	ldi	r24, 0x94	; 148
    22e8:	80 93 bc 00 	sts	0x00BC, r24
    22ec:	78 94       	sei
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	08 95       	ret

000022f6 <m_usb_init>:
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	80 93 d7 00 	sts	0x00D7, r24
    22fc:	80 ea       	ldi	r24, 0xA0	; 160
    22fe:	80 93 d8 00 	sts	0x00D8, r24
    2302:	82 e1       	ldi	r24, 0x12	; 18
    2304:	89 bd       	out	0x29, r24	; 41
    2306:	09 b4       	in	r0, 0x29	; 41
    2308:	00 fe       	sbrs	r0, 0
    230a:	fd cf       	rjmp	.-6      	; 0x2306 <m_usb_init+0x10>
    230c:	80 e9       	ldi	r24, 0x90	; 144
    230e:	80 93 d8 00 	sts	0x00D8, r24
    2312:	10 92 e0 00 	sts	0x00E0, r1
    2316:	10 92 e0 01 	sts	0x01E0, r1
    231a:	10 92 de 01 	sts	0x01DE, r1
    231e:	8c e0       	ldi	r24, 0x0C	; 12
    2320:	80 93 e2 00 	sts	0x00E2, r24
    2324:	78 94       	sei
    2326:	08 95       	ret

00002328 <__vector_10>:
    2328:	1f 92       	push	r1
    232a:	0f 92       	push	r0
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	0f 92       	push	r0
    2330:	11 24       	eor	r1, r1
    2332:	8f 93       	push	r24
    2334:	9f 93       	push	r25
    2336:	ef 93       	push	r30
    2338:	ff 93       	push	r31
    233a:	e1 ee       	ldi	r30, 0xE1	; 225
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	10 82       	st	Z, r1
    2342:	83 ff       	sbrs	r24, 3
    2344:	11 c0       	rjmp	.+34     	; 0x2368 <__vector_10+0x40>
    2346:	10 92 e9 00 	sts	0x00E9, r1
    234a:	91 e0       	ldi	r25, 0x01	; 1
    234c:	90 93 eb 00 	sts	0x00EB, r25
    2350:	10 92 ec 00 	sts	0x00EC, r1
    2354:	92 e1       	ldi	r25, 0x12	; 18
    2356:	90 93 ed 00 	sts	0x00ED, r25
    235a:	98 e0       	ldi	r25, 0x08	; 8
    235c:	90 93 f0 00 	sts	0x00F0, r25
    2360:	10 92 e0 01 	sts	0x01E0, r1
    2364:	10 92 de 01 	sts	0x01DE, r1
    2368:	82 ff       	sbrs	r24, 2
    236a:	13 c0       	rjmp	.+38     	; 0x2392 <__vector_10+0x6a>
    236c:	80 91 e0 01 	lds	r24, 0x01E0
    2370:	88 23       	and	r24, r24
    2372:	79 f0       	breq	.+30     	; 0x2392 <__vector_10+0x6a>
    2374:	80 91 df 01 	lds	r24, 0x01DF
    2378:	88 23       	and	r24, r24
    237a:	59 f0       	breq	.+22     	; 0x2392 <__vector_10+0x6a>
    237c:	81 50       	subi	r24, 0x01	; 1
    237e:	80 93 df 01 	sts	0x01DF, r24
    2382:	81 11       	cpse	r24, r1
    2384:	06 c0       	rjmp	.+12     	; 0x2392 <__vector_10+0x6a>
    2386:	84 e0       	ldi	r24, 0x04	; 4
    2388:	80 93 e9 00 	sts	0x00E9, r24
    238c:	8a e3       	ldi	r24, 0x3A	; 58
    238e:	80 93 e8 00 	sts	0x00E8, r24
    2392:	ff 91       	pop	r31
    2394:	ef 91       	pop	r30
    2396:	9f 91       	pop	r25
    2398:	8f 91       	pop	r24
    239a:	0f 90       	pop	r0
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	0f 90       	pop	r0
    23a0:	1f 90       	pop	r1
    23a2:	18 95       	reti

000023a4 <__vector_11>:
    23a4:	1f 92       	push	r1
    23a6:	0f 92       	push	r0
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	0f 92       	push	r0
    23ac:	11 24       	eor	r1, r1
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	2f 93       	push	r18
    23b4:	3f 93       	push	r19
    23b6:	4f 93       	push	r20
    23b8:	5f 93       	push	r21
    23ba:	6f 93       	push	r22
    23bc:	7f 93       	push	r23
    23be:	8f 93       	push	r24
    23c0:	9f 93       	push	r25
    23c2:	af 93       	push	r26
    23c4:	bf 93       	push	r27
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	ef 93       	push	r30
    23cc:	ff 93       	push	r31
    23ce:	10 92 e9 00 	sts	0x00E9, r1
    23d2:	80 91 e8 00 	lds	r24, 0x00E8
    23d6:	83 ff       	sbrs	r24, 3
    23d8:	4c c1       	rjmp	.+664    	; 0x2672 <__vector_11+0x2ce>
    23da:	e1 ef       	ldi	r30, 0xF1	; 241
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	60 81       	ld	r22, Z
    23e0:	80 81       	ld	r24, Z
    23e2:	20 81       	ld	r18, Z
    23e4:	90 81       	ld	r25, Z
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	39 2b       	or	r19, r25
    23ea:	40 81       	ld	r20, Z
    23ec:	90 81       	ld	r25, Z
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	59 2b       	or	r21, r25
    23f2:	70 81       	ld	r23, Z
    23f4:	c0 81       	ld	r28, Z
    23f6:	92 ef       	ldi	r25, 0xF2	; 242
    23f8:	90 93 e8 00 	sts	0x00E8, r25
    23fc:	86 30       	cpi	r24, 0x06	; 6
    23fe:	09 f0       	breq	.+2      	; 0x2402 <__vector_11+0x5e>
    2400:	58 c0       	rjmp	.+176    	; 0x24b2 <__vector_11+0x10e>
    2402:	04 c0       	rjmp	.+8      	; 0x240c <__vector_11+0x68>
    2404:	81 e2       	ldi	r24, 0x21	; 33
    2406:	80 93 eb 00 	sts	0x00EB, r24
    240a:	3a c1       	rjmp	.+628    	; 0x2680 <__vector_11+0x2dc>
    240c:	66 e0       	ldi	r22, 0x06	; 6
    240e:	84 e2       	ldi	r24, 0x24	; 36
    2410:	91 e0       	ldi	r25, 0x01	; 1
    2412:	fc 01       	movw	r30, r24
    2414:	a5 91       	lpm	r26, Z+
    2416:	b4 91       	lpm	r27, Z
    2418:	2a 17       	cp	r18, r26
    241a:	3b 07       	cpc	r19, r27
    241c:	11 f0       	breq	.+4      	; 0x2422 <__vector_11+0x7e>
    241e:	07 96       	adiw	r24, 0x07	; 7
    2420:	23 c0       	rjmp	.+70     	; 0x2468 <__vector_11+0xc4>
    2422:	fc 01       	movw	r30, r24
    2424:	32 96       	adiw	r30, 0x02	; 2
    2426:	a5 91       	lpm	r26, Z+
    2428:	b4 91       	lpm	r27, Z
    242a:	4a 17       	cp	r20, r26
    242c:	5b 07       	cpc	r21, r27
    242e:	11 f0       	breq	.+4      	; 0x2434 <__vector_11+0x90>
    2430:	07 96       	adiw	r24, 0x07	; 7
    2432:	1a c0       	rjmp	.+52     	; 0x2468 <__vector_11+0xc4>
    2434:	fc 01       	movw	r30, r24
    2436:	34 96       	adiw	r30, 0x04	; 4
    2438:	45 91       	lpm	r20, Z+
    243a:	54 91       	lpm	r21, Z
    243c:	fc 01       	movw	r30, r24
    243e:	36 96       	adiw	r30, 0x06	; 6
    2440:	24 91       	lpm	r18, Z
    2442:	87 2f       	mov	r24, r23
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9c 2b       	or	r25, r28
    2448:	8f 3f       	cpi	r24, 0xFF	; 255
    244a:	91 05       	cpc	r25, r1
    244c:	19 f0       	breq	.+6      	; 0x2454 <__vector_11+0xb0>
    244e:	10 f0       	brcs	.+4      	; 0x2454 <__vector_11+0xb0>
    2450:	8f ef       	ldi	r24, 0xFF	; 255
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	82 17       	cp	r24, r18
    2456:	08 f4       	brcc	.+2      	; 0x245a <__vector_11+0xb6>
    2458:	28 2f       	mov	r18, r24
    245a:	a8 ee       	ldi	r26, 0xE8	; 232
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	70 e1       	ldi	r23, 0x10	; 16
    2460:	6e ef       	ldi	r22, 0xFE	; 254
    2462:	c1 ef       	ldi	r28, 0xF1	; 241
    2464:	d0 e0       	ldi	r29, 0x00	; 0
    2466:	03 c0       	rjmp	.+6      	; 0x246e <__vector_11+0xca>
    2468:	61 50       	subi	r22, 0x01	; 1
    246a:	99 f6       	brne	.-90     	; 0x2412 <__vector_11+0x6e>
    246c:	cb cf       	rjmp	.-106    	; 0x2404 <__vector_11+0x60>
    246e:	8c 91       	ld	r24, X
    2470:	98 2f       	mov	r25, r24
    2472:	95 70       	andi	r25, 0x05	; 5
    2474:	e1 f3       	breq	.-8      	; 0x246e <__vector_11+0xca>
    2476:	82 fd       	sbrc	r24, 2
    2478:	03 c1       	rjmp	.+518    	; 0x2680 <__vector_11+0x2dc>
    247a:	32 2f       	mov	r19, r18
    247c:	21 31       	cpi	r18, 0x11	; 17
    247e:	08 f0       	brcs	.+2      	; 0x2482 <__vector_11+0xde>
    2480:	37 2f       	mov	r19, r23
    2482:	33 23       	and	r19, r19
    2484:	09 f4       	brne	.+2      	; 0x2488 <__vector_11+0xe4>
    2486:	f9 c0       	rjmp	.+498    	; 0x267a <__vector_11+0x2d6>
    2488:	fa 01       	movw	r30, r20
    248a:	83 2f       	mov	r24, r19
    248c:	94 91       	lpm	r25, Z
    248e:	98 83       	st	Y, r25
    2490:	81 50       	subi	r24, 0x01	; 1
    2492:	31 96       	adiw	r30, 0x01	; 1
    2494:	81 11       	cpse	r24, r1
    2496:	fa cf       	rjmp	.-12     	; 0x248c <__vector_11+0xe8>
    2498:	8f ef       	ldi	r24, 0xFF	; 255
    249a:	83 0f       	add	r24, r19
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	01 96       	adiw	r24, 0x01	; 1
    24a0:	48 0f       	add	r20, r24
    24a2:	59 1f       	adc	r21, r25
    24a4:	23 1b       	sub	r18, r19
    24a6:	6c 93       	st	X, r22
    24a8:	21 11       	cpse	r18, r1
    24aa:	e1 cf       	rjmp	.-62     	; 0x246e <__vector_11+0xca>
    24ac:	30 31       	cpi	r19, 0x10	; 16
    24ae:	f9 f2       	breq	.-66     	; 0x246e <__vector_11+0xca>
    24b0:	e7 c0       	rjmp	.+462    	; 0x2680 <__vector_11+0x2dc>
    24b2:	85 30       	cpi	r24, 0x05	; 5
    24b4:	61 f4       	brne	.+24     	; 0x24ce <__vector_11+0x12a>
    24b6:	8e ef       	ldi	r24, 0xFE	; 254
    24b8:	80 93 e8 00 	sts	0x00E8, r24
    24bc:	e8 ee       	ldi	r30, 0xE8	; 232
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	80 ff       	sbrs	r24, 0
    24c4:	fd cf       	rjmp	.-6      	; 0x24c0 <__vector_11+0x11c>
    24c6:	20 68       	ori	r18, 0x80	; 128
    24c8:	20 93 e3 00 	sts	0x00E3, r18
    24cc:	d9 c0       	rjmp	.+434    	; 0x2680 <__vector_11+0x2dc>
    24ce:	89 30       	cpi	r24, 0x09	; 9
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <__vector_11+0x130>
    24d2:	35 c0       	rjmp	.+106    	; 0x253e <__vector_11+0x19a>
    24d4:	61 11       	cpse	r22, r1
    24d6:	cd c0       	rjmp	.+410    	; 0x2672 <__vector_11+0x2ce>
    24d8:	20 93 e0 01 	sts	0x01E0, r18
    24dc:	10 92 de 01 	sts	0x01DE, r1
    24e0:	10 92 df 01 	sts	0x01DF, r1
    24e4:	8e ef       	ldi	r24, 0xFE	; 254
    24e6:	80 93 e8 00 	sts	0x00E8, r24
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	2d ec       	ldi	r18, 0xCD	; 205
    24ee:	31 e0       	ldi	r19, 0x01	; 1
    24f0:	c9 ee       	ldi	r28, 0xE9	; 233
    24f2:	d0 e0       	ldi	r29, 0x00	; 0
    24f4:	ab ee       	ldi	r26, 0xEB	; 235
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	0c ee       	ldi	r16, 0xEC	; 236
    24fa:	10 e0       	ldi	r17, 0x00	; 0
    24fc:	6d ee       	ldi	r22, 0xED	; 237
    24fe:	70 e0       	ldi	r23, 0x00	; 0
    2500:	88 83       	st	Y, r24
    2502:	a9 01       	movw	r20, r18
    2504:	4f 5f       	subi	r20, 0xFF	; 255
    2506:	5f 4f       	sbci	r21, 0xFF	; 255
    2508:	f9 01       	movw	r30, r18
    250a:	94 91       	lpm	r25, Z
    250c:	9c 93       	st	X, r25
    250e:	99 23       	and	r25, r25
    2510:	61 f0       	breq	.+24     	; 0x252a <__vector_11+0x186>
    2512:	fa 01       	movw	r30, r20
    2514:	44 91       	lpm	r20, Z
    2516:	f8 01       	movw	r30, r16
    2518:	40 83       	st	Z, r20
    251a:	f9 01       	movw	r30, r18
    251c:	32 96       	adiw	r30, 0x02	; 2
    251e:	94 91       	lpm	r25, Z
    2520:	2d 5f       	subi	r18, 0xFD	; 253
    2522:	3f 4f       	sbci	r19, 0xFF	; 255
    2524:	fb 01       	movw	r30, r22
    2526:	90 83       	st	Z, r25
    2528:	01 c0       	rjmp	.+2      	; 0x252c <__vector_11+0x188>
    252a:	9a 01       	movw	r18, r20
    252c:	8f 5f       	subi	r24, 0xFF	; 255
    252e:	85 30       	cpi	r24, 0x05	; 5
    2530:	39 f7       	brne	.-50     	; 0x2500 <__vector_11+0x15c>
    2532:	ea ee       	ldi	r30, 0xEA	; 234
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	8e e1       	ldi	r24, 0x1E	; 30
    2538:	80 83       	st	Z, r24
    253a:	10 82       	st	Z, r1
    253c:	a1 c0       	rjmp	.+322    	; 0x2680 <__vector_11+0x2dc>
    253e:	88 30       	cpi	r24, 0x08	; 8
    2540:	81 f4       	brne	.+32     	; 0x2562 <__vector_11+0x1be>
    2542:	60 38       	cpi	r22, 0x80	; 128
    2544:	09 f0       	breq	.+2      	; 0x2548 <__vector_11+0x1a4>
    2546:	95 c0       	rjmp	.+298    	; 0x2672 <__vector_11+0x2ce>
    2548:	e8 ee       	ldi	r30, 0xE8	; 232
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	80 ff       	sbrs	r24, 0
    2550:	fd cf       	rjmp	.-6      	; 0x254c <__vector_11+0x1a8>
    2552:	80 91 e0 01 	lds	r24, 0x01E0
    2556:	80 93 f1 00 	sts	0x00F1, r24
    255a:	8e ef       	ldi	r24, 0xFE	; 254
    255c:	80 93 e8 00 	sts	0x00E8, r24
    2560:	8f c0       	rjmp	.+286    	; 0x2680 <__vector_11+0x2dc>
    2562:	81 32       	cpi	r24, 0x21	; 33
    2564:	b9 f4       	brne	.+46     	; 0x2594 <__vector_11+0x1f0>
    2566:	61 3a       	cpi	r22, 0xA1	; 161
    2568:	09 f0       	breq	.+2      	; 0x256c <__vector_11+0x1c8>
    256a:	83 c0       	rjmp	.+262    	; 0x2672 <__vector_11+0x2ce>
    256c:	e8 ee       	ldi	r30, 0xE8	; 232
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	80 ff       	sbrs	r24, 0
    2574:	fd cf       	rjmp	.-6      	; 0x2570 <__vector_11+0x1cc>
    2576:	e2 e3       	ldi	r30, 0x32	; 50
    2578:	f1 e0       	ldi	r31, 0x01	; 1
    257a:	29 e3       	ldi	r18, 0x39	; 57
    257c:	31 e0       	ldi	r19, 0x01	; 1
    257e:	a1 ef       	ldi	r26, 0xF1	; 241
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	81 91       	ld	r24, Z+
    2584:	8c 93       	st	X, r24
    2586:	e2 17       	cp	r30, r18
    2588:	f3 07       	cpc	r31, r19
    258a:	d9 f7       	brne	.-10     	; 0x2582 <__vector_11+0x1de>
    258c:	8e ef       	ldi	r24, 0xFE	; 254
    258e:	80 93 e8 00 	sts	0x00E8, r24
    2592:	76 c0       	rjmp	.+236    	; 0x2680 <__vector_11+0x2dc>
    2594:	80 32       	cpi	r24, 0x20	; 32
    2596:	d1 f4       	brne	.+52     	; 0x25cc <__vector_11+0x228>
    2598:	61 32       	cpi	r22, 0x21	; 33
    259a:	09 f0       	breq	.+2      	; 0x259e <__vector_11+0x1fa>
    259c:	6a c0       	rjmp	.+212    	; 0x2672 <__vector_11+0x2ce>
    259e:	e8 ee       	ldi	r30, 0xE8	; 232
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	82 ff       	sbrs	r24, 2
    25a6:	fd cf       	rjmp	.-6      	; 0x25a2 <__vector_11+0x1fe>
    25a8:	e2 e3       	ldi	r30, 0x32	; 50
    25aa:	f1 e0       	ldi	r31, 0x01	; 1
    25ac:	29 e3       	ldi	r18, 0x39	; 57
    25ae:	31 e0       	ldi	r19, 0x01	; 1
    25b0:	a1 ef       	ldi	r26, 0xF1	; 241
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	8c 91       	ld	r24, X
    25b6:	81 93       	st	Z+, r24
    25b8:	e2 17       	cp	r30, r18
    25ba:	f3 07       	cpc	r31, r19
    25bc:	d9 f7       	brne	.-10     	; 0x25b4 <__vector_11+0x210>
    25be:	e8 ee       	ldi	r30, 0xE8	; 232
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	8b ef       	ldi	r24, 0xFB	; 251
    25c4:	80 83       	st	Z, r24
    25c6:	8e ef       	ldi	r24, 0xFE	; 254
    25c8:	80 83       	st	Z, r24
    25ca:	5a c0       	rjmp	.+180    	; 0x2680 <__vector_11+0x2dc>
    25cc:	82 32       	cpi	r24, 0x22	; 34
    25ce:	71 f4       	brne	.+28     	; 0x25ec <__vector_11+0x248>
    25d0:	61 32       	cpi	r22, 0x21	; 33
    25d2:	09 f0       	breq	.+2      	; 0x25d6 <__vector_11+0x232>
    25d4:	4e c0       	rjmp	.+156    	; 0x2672 <__vector_11+0x2ce>
    25d6:	20 93 de 01 	sts	0x01DE, r18
    25da:	e8 ee       	ldi	r30, 0xE8	; 232
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	80 ff       	sbrs	r24, 0
    25e2:	fd cf       	rjmp	.-6      	; 0x25de <__vector_11+0x23a>
    25e4:	8e ef       	ldi	r24, 0xFE	; 254
    25e6:	80 93 e8 00 	sts	0x00E8, r24
    25ea:	4a c0       	rjmp	.+148    	; 0x2680 <__vector_11+0x2dc>
    25ec:	81 11       	cpse	r24, r1
    25ee:	1a c0       	rjmp	.+52     	; 0x2624 <__vector_11+0x280>
    25f0:	e8 ee       	ldi	r30, 0xE8	; 232
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	80 ff       	sbrs	r24, 0
    25f8:	fd cf       	rjmp	.-6      	; 0x25f4 <__vector_11+0x250>
    25fa:	62 38       	cpi	r22, 0x82	; 130
    25fc:	51 f4       	brne	.+20     	; 0x2612 <__vector_11+0x26e>
    25fe:	e9 ee       	ldi	r30, 0xE9	; 233
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	40 83       	st	Z, r20
    2604:	80 91 eb 00 	lds	r24, 0x00EB
    2608:	85 fb       	bst	r24, 5
    260a:	88 27       	eor	r24, r24
    260c:	80 f9       	bld	r24, 0
    260e:	10 82       	st	Z, r1
    2610:	01 c0       	rjmp	.+2      	; 0x2614 <__vector_11+0x270>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	e1 ef       	ldi	r30, 0xF1	; 241
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 83       	st	Z, r24
    261a:	10 82       	st	Z, r1
    261c:	8e ef       	ldi	r24, 0xFE	; 254
    261e:	80 93 e8 00 	sts	0x00E8, r24
    2622:	2e c0       	rjmp	.+92     	; 0x2680 <__vector_11+0x2dc>
    2624:	98 2f       	mov	r25, r24
    2626:	9d 7f       	andi	r25, 0xFD	; 253
    2628:	91 30       	cpi	r25, 0x01	; 1
    262a:	19 f5       	brne	.+70     	; 0x2672 <__vector_11+0x2ce>
    262c:	62 30       	cpi	r22, 0x02	; 2
    262e:	09 f5       	brne	.+66     	; 0x2672 <__vector_11+0x2ce>
    2630:	23 2b       	or	r18, r19
    2632:	f9 f4       	brne	.+62     	; 0x2672 <__vector_11+0x2ce>
    2634:	4f 77       	andi	r20, 0x7F	; 127
    2636:	9f ef       	ldi	r25, 0xFF	; 255
    2638:	94 0f       	add	r25, r20
    263a:	94 30       	cpi	r25, 0x04	; 4
    263c:	d0 f4       	brcc	.+52     	; 0x2672 <__vector_11+0x2ce>
    263e:	9e ef       	ldi	r25, 0xFE	; 254
    2640:	90 93 e8 00 	sts	0x00E8, r25
    2644:	40 93 e9 00 	sts	0x00E9, r20
    2648:	83 30       	cpi	r24, 0x03	; 3
    264a:	21 f4       	brne	.+8      	; 0x2654 <__vector_11+0x2b0>
    264c:	81 e2       	ldi	r24, 0x21	; 33
    264e:	80 93 eb 00 	sts	0x00EB, r24
    2652:	16 c0       	rjmp	.+44     	; 0x2680 <__vector_11+0x2dc>
    2654:	89 e1       	ldi	r24, 0x19	; 25
    2656:	80 93 eb 00 	sts	0x00EB, r24
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <__vector_11+0x2c0>
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	4a 95       	dec	r20
    2666:	e2 f7       	brpl	.-8      	; 0x2660 <__vector_11+0x2bc>
    2668:	ea ee       	ldi	r30, 0xEA	; 234
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 83       	st	Z, r24
    266e:	10 82       	st	Z, r1
    2670:	07 c0       	rjmp	.+14     	; 0x2680 <__vector_11+0x2dc>
    2672:	81 e2       	ldi	r24, 0x21	; 33
    2674:	80 93 eb 00 	sts	0x00EB, r24
    2678:	03 c0       	rjmp	.+6      	; 0x2680 <__vector_11+0x2dc>
    267a:	6c 93       	st	X, r22
    267c:	21 11       	cpse	r18, r1
    267e:	f7 ce       	rjmp	.-530    	; 0x246e <__vector_11+0xca>
    2680:	ff 91       	pop	r31
    2682:	ef 91       	pop	r30
    2684:	df 91       	pop	r29
    2686:	cf 91       	pop	r28
    2688:	bf 91       	pop	r27
    268a:	af 91       	pop	r26
    268c:	9f 91       	pop	r25
    268e:	8f 91       	pop	r24
    2690:	7f 91       	pop	r23
    2692:	6f 91       	pop	r22
    2694:	5f 91       	pop	r21
    2696:	4f 91       	pop	r20
    2698:	3f 91       	pop	r19
    269a:	2f 91       	pop	r18
    269c:	1f 91       	pop	r17
    269e:	0f 91       	pop	r16
    26a0:	0f 90       	pop	r0
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	0f 90       	pop	r0
    26a6:	1f 90       	pop	r1
    26a8:	18 95       	reti

000026aa <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    26ae:	ec eb       	ldi	r30, 0xBC	; 188
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	88 23       	and	r24, r24
    26b6:	34 f0       	brlt	.+12     	; 0x26c4 <twi_wait+0x1a>
    26b8:	2f 5f       	subi	r18, 0xFF	; 255
    26ba:	3f 4f       	sbci	r19, 0xFF	; 255
    26bc:	29 3e       	cpi	r18, 0xE9	; 233
    26be:	83 e0       	ldi	r24, 0x03	; 3
    26c0:	38 07       	cpc	r19, r24
    26c2:	b9 f7       	brne	.-18     	; 0x26b2 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	28 3e       	cpi	r18, 0xE8	; 232
    26c8:	33 40       	sbci	r19, 0x03	; 3
    26ca:	09 f4       	brne	.+2      	; 0x26ce <twi_wait+0x24>
    26cc:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    26ce:	08 95       	ret

000026d0 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    26d0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    26d4:	84 e8       	ldi	r24, 0x84	; 132
    26d6:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    26da:	0e 94 55 13 	call	0x26aa	; 0x26aa <twi_wait>
    26de:	88 23       	and	r24, r24
    26e0:	19 f0       	breq	.+6      	; 0x26e8 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    26e2:	80 91 b9 00 	lds	r24, 0x00B9
    26e6:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    26e8:	08 95       	ret

000026ea <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    26ea:	cf 93       	push	r28
    26ec:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    26ee:	94 ea       	ldi	r25, 0xA4	; 164
    26f0:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    26f4:	0e 94 55 13 	call	0x26aa	; 0x26aa <twi_wait>
    26f8:	88 23       	and	r24, r24
    26fa:	61 f0       	breq	.+24     	; 0x2714 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    26fc:	8c 2f       	mov	r24, r28
    26fe:	88 0f       	add	r24, r24
    2700:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    2704:	80 32       	cpi	r24, 0x20	; 32
    2706:	29 f4       	brne	.+10     	; 0x2712 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2708:	84 e9       	ldi	r24, 0x94	; 148
    270a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <start_write+0x2a>
	}	
	return 1;	// success
    2712:	81 e0       	ldi	r24, 0x01	; 1
}	
    2714:	cf 91       	pop	r28
    2716:	08 95       	ret

00002718 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    2718:	0e 94 5f 10 	call	0x20be	; 0x20be <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    271c:	88 e5       	ldi	r24, 0x58	; 88
    271e:	0e 94 75 13 	call	0x26ea	; 0x26ea <start_write>
    2722:	88 23       	and	r24, r24
    2724:	09 f4       	brne	.+2      	; 0x2728 <m_wii_open+0x10>
    2726:	cd c0       	rjmp	.+410    	; 0x28c2 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    2728:	80 e3       	ldi	r24, 0x30	; 48
    272a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    272e:	88 23       	and	r24, r24
    2730:	09 f4       	brne	.+2      	; 0x2734 <m_wii_open+0x1c>
    2732:	c9 c0       	rjmp	.+402    	; 0x28c6 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    273a:	88 23       	and	r24, r24
    273c:	09 f4       	brne	.+2      	; 0x2740 <m_wii_open+0x28>
    273e:	c5 c0       	rjmp	.+394    	; 0x28ca <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2740:	84 e9       	ldi	r24, 0x94	; 148
    2742:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2746:	83 ec       	ldi	r24, 0xC3	; 195
    2748:	99 e0       	ldi	r25, 0x09	; 9
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <m_wii_open+0x32>
    274e:	00 c0       	rjmp	.+0      	; 0x2750 <m_wii_open+0x38>
    2750:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2752:	88 e5       	ldi	r24, 0x58	; 88
    2754:	0e 94 75 13 	call	0x26ea	; 0x26ea <start_write>
    2758:	88 23       	and	r24, r24
    275a:	09 f4       	brne	.+2      	; 0x275e <m_wii_open+0x46>
    275c:	b8 c0       	rjmp	.+368    	; 0x28ce <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    2764:	88 23       	and	r24, r24
    2766:	09 f4       	brne	.+2      	; 0x276a <m_wii_open+0x52>
    2768:	b4 c0       	rjmp	.+360    	; 0x28d2 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    2770:	88 23       	and	r24, r24
    2772:	09 f4       	brne	.+2      	; 0x2776 <m_wii_open+0x5e>
    2774:	b0 c0       	rjmp	.+352    	; 0x28d6 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    277c:	88 23       	and	r24, r24
    277e:	09 f4       	brne	.+2      	; 0x2782 <m_wii_open+0x6a>
    2780:	ac c0       	rjmp	.+344    	; 0x28da <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    2788:	88 23       	and	r24, r24
    278a:	09 f4       	brne	.+2      	; 0x278e <m_wii_open+0x76>
    278c:	a8 c0       	rjmp	.+336    	; 0x28de <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    2794:	88 23       	and	r24, r24
    2796:	09 f4       	brne	.+2      	; 0x279a <m_wii_open+0x82>
    2798:	a4 c0       	rjmp	.+328    	; 0x28e2 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    27a0:	88 23       	and	r24, r24
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <m_wii_open+0x8e>
    27a4:	a0 c0       	rjmp	.+320    	; 0x28e6 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    27ac:	88 23       	and	r24, r24
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <m_wii_open+0x9a>
    27b0:	9c c0       	rjmp	.+312    	; 0x28ea <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    27b2:	80 e9       	ldi	r24, 0x90	; 144
    27b4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    27b8:	88 23       	and	r24, r24
    27ba:	09 f4       	brne	.+2      	; 0x27be <m_wii_open+0xa6>
    27bc:	98 c0       	rjmp	.+304    	; 0x28ee <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    27be:	84 e9       	ldi	r24, 0x94	; 148
    27c0:	80 93 bc 00 	sts	0x00BC, r24
    27c4:	83 ec       	ldi	r24, 0xC3	; 195
    27c6:	99 e0       	ldi	r25, 0x09	; 9
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <m_wii_open+0xb0>
    27cc:	00 c0       	rjmp	.+0      	; 0x27ce <m_wii_open+0xb6>
    27ce:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    27d0:	88 e5       	ldi	r24, 0x58	; 88
    27d2:	0e 94 75 13 	call	0x26ea	; 0x26ea <start_write>
    27d6:	88 23       	and	r24, r24
    27d8:	09 f4       	brne	.+2      	; 0x27dc <m_wii_open+0xc4>
    27da:	8b c0       	rjmp	.+278    	; 0x28f2 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    27dc:	87 e0       	ldi	r24, 0x07	; 7
    27de:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    27e2:	88 23       	and	r24, r24
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <m_wii_open+0xd0>
    27e6:	87 c0       	rjmp	.+270    	; 0x28f6 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    27ee:	88 23       	and	r24, r24
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <m_wii_open+0xdc>
    27f2:	83 c0       	rjmp	.+262    	; 0x28fa <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    27f4:	81 e4       	ldi	r24, 0x41	; 65
    27f6:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    27fa:	88 23       	and	r24, r24
    27fc:	09 f4       	brne	.+2      	; 0x2800 <m_wii_open+0xe8>
    27fe:	7f c0       	rjmp	.+254    	; 0x28fe <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2800:	84 e9       	ldi	r24, 0x94	; 148
    2802:	80 93 bc 00 	sts	0x00BC, r24
    2806:	83 ec       	ldi	r24, 0xC3	; 195
    2808:	99 e0       	ldi	r25, 0x09	; 9
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <m_wii_open+0xf2>
    280e:	00 c0       	rjmp	.+0      	; 0x2810 <m_wii_open+0xf8>
    2810:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2812:	88 e5       	ldi	r24, 0x58	; 88
    2814:	0e 94 75 13 	call	0x26ea	; 0x26ea <start_write>
    2818:	88 23       	and	r24, r24
    281a:	09 f4       	brne	.+2      	; 0x281e <m_wii_open+0x106>
    281c:	72 c0       	rjmp	.+228    	; 0x2902 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    281e:	8a e1       	ldi	r24, 0x1A	; 26
    2820:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    2824:	88 23       	and	r24, r24
    2826:	09 f4       	brne	.+2      	; 0x282a <m_wii_open+0x112>
    2828:	6e c0       	rjmp	.+220    	; 0x2906 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    282a:	80 e4       	ldi	r24, 0x40	; 64
    282c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    2830:	88 23       	and	r24, r24
    2832:	09 f4       	brne	.+2      	; 0x2836 <m_wii_open+0x11e>
    2834:	6a c0       	rjmp	.+212    	; 0x290a <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    283c:	88 23       	and	r24, r24
    283e:	09 f4       	brne	.+2      	; 0x2842 <m_wii_open+0x12a>
    2840:	66 c0       	rjmp	.+204    	; 0x290e <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2842:	84 e9       	ldi	r24, 0x94	; 148
    2844:	80 93 bc 00 	sts	0x00BC, r24
    2848:	83 ec       	ldi	r24, 0xC3	; 195
    284a:	99 e0       	ldi	r25, 0x09	; 9
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <m_wii_open+0x134>
    2850:	00 c0       	rjmp	.+0      	; 0x2852 <m_wii_open+0x13a>
    2852:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2854:	88 e5       	ldi	r24, 0x58	; 88
    2856:	0e 94 75 13 	call	0x26ea	; 0x26ea <start_write>
    285a:	88 23       	and	r24, r24
    285c:	09 f4       	brne	.+2      	; 0x2860 <m_wii_open+0x148>
    285e:	59 c0       	rjmp	.+178    	; 0x2912 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    2860:	83 e3       	ldi	r24, 0x33	; 51
    2862:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    2866:	88 23       	and	r24, r24
    2868:	09 f4       	brne	.+2      	; 0x286c <m_wii_open+0x154>
    286a:	55 c0       	rjmp	.+170    	; 0x2916 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    286c:	83 e0       	ldi	r24, 0x03	; 3
    286e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    2872:	88 23       	and	r24, r24
    2874:	09 f4       	brne	.+2      	; 0x2878 <m_wii_open+0x160>
    2876:	51 c0       	rjmp	.+162    	; 0x291a <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2878:	84 e9       	ldi	r24, 0x94	; 148
    287a:	80 93 bc 00 	sts	0x00BC, r24
    287e:	83 ec       	ldi	r24, 0xC3	; 195
    2880:	99 e0       	ldi	r25, 0x09	; 9
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <m_wii_open+0x16a>
    2886:	00 c0       	rjmp	.+0      	; 0x2888 <m_wii_open+0x170>
    2888:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    288a:	88 e5       	ldi	r24, 0x58	; 88
    288c:	0e 94 75 13 	call	0x26ea	; 0x26ea <start_write>
    2890:	88 23       	and	r24, r24
    2892:	09 f4       	brne	.+2      	; 0x2896 <m_wii_open+0x17e>
    2894:	44 c0       	rjmp	.+136    	; 0x291e <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    2896:	80 e3       	ldi	r24, 0x30	; 48
    2898:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    289c:	88 23       	and	r24, r24
    289e:	09 f4       	brne	.+2      	; 0x28a2 <m_wii_open+0x18a>
    28a0:	40 c0       	rjmp	.+128    	; 0x2922 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    28a2:	88 e0       	ldi	r24, 0x08	; 8
    28a4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    28a8:	88 23       	and	r24, r24
    28aa:	e9 f1       	breq	.+122    	; 0x2926 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    28ac:	84 e9       	ldi	r24, 0x94	; 148
    28ae:	80 93 bc 00 	sts	0x00BC, r24
    28b2:	83 ec       	ldi	r24, 0xC3	; 195
    28b4:	99 e0       	ldi	r25, 0x09	; 9
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <m_wii_open+0x19e>
    28ba:	00 c0       	rjmp	.+0      	; 0x28bc <m_wii_open+0x1a4>
    28bc:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2926:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2928:	08 95       	ret

0000292a <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    292a:	cf 93       	push	r28
    292c:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    292e:	84 ea       	ldi	r24, 0xA4	; 164
    2930:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    2934:	0e 94 55 13 	call	0x26aa	; 0x26aa <twi_wait>
    2938:	88 23       	and	r24, r24
    293a:	69 f0       	breq	.+26     	; 0x2956 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    293c:	8c 2f       	mov	r24, r28
    293e:	88 0f       	add	r24, r24
    2940:	8f 5f       	subi	r24, 0xFF	; 255
    2942:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2946:	88 34       	cpi	r24, 0x48	; 72
    2948:	29 f4       	brne	.+10     	; 0x2954 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    294a:	84 e9       	ldi	r24, 0x94	; 148
    294c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	01 c0       	rjmp	.+2      	; 0x2956 <start_read+0x2c>
	}	
	return 1;	// success
    2954:	81 e0       	ldi	r24, 0x01	; 1
}	
    2956:	cf 91       	pop	r28
    2958:	08 95       	ret

0000295a <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	60 97       	sbiw	r28, 0x10	; 16
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2974:	fe 01       	movw	r30, r28
    2976:	31 96       	adiw	r30, 0x01	; 1
    2978:	80 e1       	ldi	r24, 0x10	; 16
    297a:	df 01       	movw	r26, r30
    297c:	1d 92       	st	X+, r1
    297e:	8a 95       	dec	r24
    2980:	e9 f7       	brne	.-6      	; 0x297c <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2982:	88 e5       	ldi	r24, 0x58	; 88
    2984:	0e 94 75 13 	call	0x26ea	; 0x26ea <start_write>
    2988:	88 23       	and	r24, r24
    298a:	09 f4       	brne	.+2      	; 0x298e <m_wii_read+0x34>
    298c:	69 c0       	rjmp	.+210    	; 0x2a60 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    298e:	86 e3       	ldi	r24, 0x36	; 54
    2990:	0e 94 68 13 	call	0x26d0	; 0x26d0 <send_byte>
    2994:	88 23       	and	r24, r24
    2996:	09 f4       	brne	.+2      	; 0x299a <m_wii_read+0x40>
    2998:	65 c0       	rjmp	.+202    	; 0x2a64 <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    299a:	84 e9       	ldi	r24, 0x94	; 148
    299c:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    29a0:	b8 e0       	ldi	r27, 0x08	; 8
    29a2:	ba 95       	dec	r27
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <m_wii_read+0x48>
    29a6:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    29a8:	88 e5       	ldi	r24, 0x58	; 88
    29aa:	0e 94 95 14 	call	0x292a	; 0x292a <start_read>
    29ae:	88 23       	and	r24, r24
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <m_wii_read+0x5a>
    29b2:	5a c0       	rjmp	.+180    	; 0x2a68 <m_wii_read+0x10e>
    29b4:	be 01       	movw	r22, r28
    29b6:	6f 5f       	subi	r22, 0xFF	; 255
    29b8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ba:	ae 01       	movw	r20, r28
    29bc:	40 5f       	subi	r20, 0xF0	; 240
    29be:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    29c0:	ec eb       	ldi	r30, 0xBC	; 188
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    29c6:	2b eb       	ldi	r18, 0xBB	; 187
    29c8:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    29ca:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    29cc:	90 81       	ld	r25, Z
    29ce:	99 23       	and	r25, r25
    29d0:	ec f7       	brge	.-6      	; 0x29cc <m_wii_read+0x72>
		temp[i] = TWDR;
    29d2:	d9 01       	movw	r26, r18
    29d4:	9c 91       	ld	r25, X
    29d6:	db 01       	movw	r26, r22
    29d8:	9d 93       	st	X+, r25
    29da:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    29dc:	a4 17       	cp	r26, r20
    29de:	b5 07       	cpc	r27, r21
    29e0:	a1 f7       	brne	.-24     	; 0x29ca <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    29e2:	84 e8       	ldi	r24, 0x84	; 132
    29e4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    29e8:	ec eb       	ldi	r30, 0xBC	; 188
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	88 23       	and	r24, r24
    29f0:	ec f7       	brge	.-6      	; 0x29ec <m_wii_read+0x92>
	temp[15] = TWDR;
    29f2:	80 91 bb 00 	lds	r24, 0x00BB
    29f6:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    29f8:	84 e9       	ldi	r24, 0x94	; 148
    29fa:	80 93 bc 00 	sts	0x00BC, r24
    29fe:	be 01       	movw	r22, r28
    2a00:	6c 5f       	subi	r22, 0xFC	; 252
    2a02:	7f 4f       	sbci	r23, 0xFF	; 255
    2a04:	f8 01       	movw	r30, r16
    2a06:	08 5e       	subi	r16, 0xE8	; 232
    2a08:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2a0a:	db 01       	movw	r26, r22
    2a0c:	2c 91       	ld	r18, X
    2a0e:	32 2f       	mov	r19, r18
    2a10:	30 73       	andi	r19, 0x30	; 48
    2a12:	cb 01       	movw	r24, r22
    2a14:	02 97       	sbiw	r24, 0x02	; 2
    2a16:	dc 01       	movw	r26, r24
    2a18:	8c 91       	ld	r24, X
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	b0 e1       	ldi	r27, 0x10	; 16
    2a1e:	3b 9f       	mul	r19, r27
    2a20:	80 0d       	add	r24, r0
    2a22:	91 1d       	adc	r25, r1
    2a24:	11 24       	eor	r1, r1
    2a26:	91 83       	std	Z+1, r25	; 0x01
    2a28:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2a2a:	42 2f       	mov	r20, r18
    2a2c:	40 7c       	andi	r20, 0xC0	; 192
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	44 0f       	add	r20, r20
    2a32:	55 1f       	adc	r21, r21
    2a34:	44 0f       	add	r20, r20
    2a36:	55 1f       	adc	r21, r21
    2a38:	cb 01       	movw	r24, r22
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	8c 91       	ld	r24, X
    2a40:	48 0f       	add	r20, r24
    2a42:	51 1d       	adc	r21, r1
    2a44:	53 83       	std	Z+3, r21	; 0x03
    2a46:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2a48:	2f 70       	andi	r18, 0x0F	; 15
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	35 83       	std	Z+5, r19	; 0x05
    2a4e:	24 83       	std	Z+4, r18	; 0x04
    2a50:	6d 5f       	subi	r22, 0xFD	; 253
    2a52:	7f 4f       	sbci	r23, 0xFF	; 255
    2a54:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2a56:	e0 17       	cp	r30, r16
    2a58:	f1 07       	cpc	r31, r17
    2a5a:	b9 f6       	brne	.-82     	; 0x2a0a <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	05 c0       	rjmp	.+10     	; 0x2a6a <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	03 c0       	rjmp	.+6      	; 0x2a6a <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	01 c0       	rjmp	.+2      	; 0x2a6a <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2a68:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2a6a:	60 96       	adiw	r28, 0x10	; 16
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	cd bf       	out	0x3d, r28	; 61
    2a76:	df 91       	pop	r29
    2a78:	cf 91       	pop	r28
    2a7a:	1f 91       	pop	r17
    2a7c:	0f 91       	pop	r16
    2a7e:	08 95       	ret

00002a80 <get_puck_location>:
Public Functions
************************************************************/

/* Returns x,y, location of puck (angle more accurate) */
int get_puck_location(float* puck_buffer)
{
    2a80:	2f 92       	push	r2
    2a82:	3f 92       	push	r3
    2a84:	4f 92       	push	r4
    2a86:	5f 92       	push	r5
    2a88:	6f 92       	push	r6
    2a8a:	7f 92       	push	r7
    2a8c:	8f 92       	push	r8
    2a8e:	9f 92       	push	r9
    2a90:	af 92       	push	r10
    2a92:	bf 92       	push	r11
    2a94:	cf 92       	push	r12
    2a96:	df 92       	push	r13
    2a98:	ef 92       	push	r14
    2a9a:	ff 92       	push	r15
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	62 97       	sbiw	r28, 0x12	; 18
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	9a 8b       	std	Y+18, r25	; 0x12
    2ab6:	89 8b       	std	Y+17, r24	; 0x11
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta
    2ab8:	ce 01       	movw	r24, r28
    2aba:	01 96       	adiw	r24, 0x01	; 1
    2abc:	0e 94 4e 0c 	call	0x189c	; 0x189c <get_position>
    2ac0:	0f 2e       	mov	r0, r31
    2ac2:	f5 ee       	ldi	r31, 0xE5	; 229
    2ac4:	8f 2e       	mov	r8, r31
    2ac6:	f1 e0       	ldi	r31, 0x01	; 1
    2ac8:	9f 2e       	mov	r9, r31
    2aca:	f0 2d       	mov	r31, r0
    2acc:	0f 2e       	mov	r0, r31
    2ace:	fb e3       	ldi	r31, 0x3B	; 59
    2ad0:	ef 2e       	mov	r14, r31
    2ad2:	f1 e0       	ldi	r31, 0x01	; 1
    2ad4:	ff 2e       	mov	r15, r31
    2ad6:	f0 2d       	mov	r31, r0
    2ad8:	0f 2e       	mov	r0, r31
    2ada:	f3 e6       	ldi	r31, 0x63	; 99
    2adc:	af 2e       	mov	r10, r31
    2ade:	f1 e0       	ldi	r31, 0x01	; 1
    2ae0:	bf 2e       	mov	r11, r31
    2ae2:	f0 2d       	mov	r31, r0

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
    2ae4:	1d 86       	std	Y+13, r1	; 0x0d
    2ae6:	1e 86       	std	Y+14, r1	; 0x0e
    2ae8:	1f 86       	std	Y+15, r1	; 0x0f
    2aea:	18 8a       	std	Y+16, r1	; 0x10
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
    2aec:	c1 2c       	mov	r12, r1
    2aee:	d1 2c       	mov	r13, r1
{
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
    2af0:	21 2c       	mov	r2, r1
    2af2:	31 2c       	mov	r3, r1
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
		scaler += transistor_vals[i];
    2af4:	f4 01       	movw	r30, r8
    2af6:	01 91       	ld	r16, Z+
    2af8:	11 91       	ld	r17, Z+
    2afa:	4f 01       	movw	r8, r30
    2afc:	c0 0e       	add	r12, r16
    2afe:	d1 1e       	adc	r13, r17
		global_theta += transistor_angles[i] * (float)transistor_vals[i];
    2b00:	f7 01       	movw	r30, r14
    2b02:	41 90       	ld	r4, Z+
    2b04:	51 90       	ld	r5, Z+
    2b06:	61 90       	ld	r6, Z+
    2b08:	71 90       	ld	r7, Z+
    2b0a:	7f 01       	movw	r14, r30
    2b0c:	b8 01       	movw	r22, r16
    2b0e:	01 2e       	mov	r0, r17
    2b10:	00 0c       	add	r0, r0
    2b12:	88 0b       	sbc	r24, r24
    2b14:	99 0b       	sbc	r25, r25
    2b16:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
    2b1a:	9b 01       	movw	r18, r22
    2b1c:	ac 01       	movw	r20, r24
    2b1e:	c3 01       	movw	r24, r6
    2b20:	b2 01       	movw	r22, r4
    2b22:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    2b26:	9b 01       	movw	r18, r22
    2b28:	ac 01       	movw	r20, r24
    2b2a:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b2c:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b30:	98 89       	ldd	r25, Y+16	; 0x10
    2b32:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
    2b36:	6d 87       	std	Y+13, r22	; 0x0d
    2b38:	7e 87       	std	Y+14, r23	; 0x0e
    2b3a:	8f 87       	std	Y+15, r24	; 0x0f
    2b3c:	98 8b       	std	Y+16, r25	; 0x10
    2b3e:	20 16       	cp	r2, r16
    2b40:	31 06       	cpc	r3, r17
    2b42:	0c f4       	brge	.+2      	; 0x2b46 <get_puck_location+0xc6>
    2b44:	18 01       	movw	r2, r16

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
    2b46:	ea 14       	cp	r14, r10
    2b48:	fb 04       	cpc	r15, r11
    2b4a:	a1 f6       	brne	.-88     	; 0x2af4 <get_puck_location+0x74>
	}
	global_theta = global_theta/((float)scaler);


	/* If no puck found */
	if(max_val<100){
    2b4c:	f4 e6       	ldi	r31, 0x64	; 100
    2b4e:	2f 16       	cp	r2, r31
    2b50:	31 04       	cpc	r3, r1
    2b52:	6c f4       	brge	.+26     	; 0x2b6e <get_puck_location+0xee>
		puck_buffer[0] = 0;
    2b54:	e9 89       	ldd	r30, Y+17	; 0x11
    2b56:	fa 89       	ldd	r31, Y+18	; 0x12
    2b58:	10 82       	st	Z, r1
    2b5a:	11 82       	std	Z+1, r1	; 0x01
    2b5c:	12 82       	std	Z+2, r1	; 0x02
    2b5e:	13 82       	std	Z+3, r1	; 0x03
		puck_buffer[1] = 0;
    2b60:	14 82       	std	Z+4, r1	; 0x04
    2b62:	15 82       	std	Z+5, r1	; 0x05
    2b64:	16 82       	std	Z+6, r1	; 0x06
    2b66:	17 82       	std	Z+7, r1	; 0x07
		return 0;
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	68 c0       	rjmp	.+208    	; 0x2c3e <get_puck_location+0x1be>

		if(transistor_vals[i]>max_val){
			max_val = transistor_vals[i];
		}
	}
	global_theta = global_theta/((float)scaler);
    2b6e:	b6 01       	movw	r22, r12
    2b70:	dd 0c       	add	r13, r13
    2b72:	88 0b       	sbc	r24, r24
    2b74:	99 0b       	sbc	r25, r25
    2b76:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
    2b7a:	9b 01       	movw	r18, r22
    2b7c:	ac 01       	movw	r20, r24
    2b7e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b80:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b84:	98 89       	ldd	r25, Y+16	; 0x10
    2b86:	0e 94 0e 19 	call	0x321c	; 0x321c <__divsf3>
		puck_buffer[1] = 0;
		return 0;
	}

	/* Create vector pointing to puck in global coordinates */
	global_theta += position_buffer[2];
    2b8a:	29 85       	ldd	r18, Y+9	; 0x09
    2b8c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b8e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b90:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b92:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
    2b96:	4b 01       	movw	r8, r22
    2b98:	5c 01       	movw	r10, r24
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/200.0 + position_buffer[0]; // Assign X val
    2b9a:	0e 94 09 19 	call	0x3212	; 0x3212 <cos>
    2b9e:	2b 01       	movw	r4, r22
    2ba0:	3c 01       	movw	r6, r24
    2ba2:	6f ef       	ldi	r22, 0xFF	; 255
    2ba4:	73 e0       	ldi	r23, 0x03	; 3
    2ba6:	62 19       	sub	r22, r2
    2ba8:	73 09       	sbc	r23, r3
    2baa:	07 2e       	mov	r0, r23
    2bac:	00 0c       	add	r0, r0
    2bae:	88 0b       	sbc	r24, r24
    2bb0:	99 0b       	sbc	r25, r25
    2bb2:	0e 94 b1 19 	call	0x3362	; 0x3362 <__floatsisf>
    2bb6:	6b 01       	movw	r12, r22
    2bb8:	7c 01       	movw	r14, r24
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	4f e2       	ldi	r20, 0x2F	; 47
    2bc0:	54 e4       	ldi	r21, 0x44	; 68
    2bc2:	c3 01       	movw	r24, r6
    2bc4:	b2 01       	movw	r22, r4
    2bc6:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    2bca:	a7 01       	movw	r20, r14
    2bcc:	96 01       	movw	r18, r12
    2bce:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	48 e4       	ldi	r20, 0x48	; 72
    2bd8:	53 e4       	ldi	r21, 0x43	; 67
    2bda:	0e 94 0e 19 	call	0x321c	; 0x321c <__divsf3>
    2bde:	29 81       	ldd	r18, Y+1	; 0x01
    2be0:	3a 81       	ldd	r19, Y+2	; 0x02
    2be2:	4b 81       	ldd	r20, Y+3	; 0x03
    2be4:	5c 81       	ldd	r21, Y+4	; 0x04
    2be6:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
    2bea:	e9 89       	ldd	r30, Y+17	; 0x11
    2bec:	fa 89       	ldd	r31, Y+18	; 0x12
    2bee:	60 83       	st	Z, r22
    2bf0:	71 83       	std	Z+1, r23	; 0x01
    2bf2:	82 83       	std	Z+2, r24	; 0x02
    2bf4:	93 83       	std	Z+3, r25	; 0x03
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/200.0 + position_buffer[1]; // Assign Y val
    2bf6:	c5 01       	movw	r24, r10
    2bf8:	b4 01       	movw	r22, r8
    2bfa:	0e 94 41 1b 	call	0x3682	; 0x3682 <sin>
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	4f e2       	ldi	r20, 0x2F	; 47
    2c04:	54 e4       	ldi	r21, 0x44	; 68
    2c06:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    2c0a:	9b 01       	movw	r18, r22
    2c0c:	ac 01       	movw	r20, r24
    2c0e:	c7 01       	movw	r24, r14
    2c10:	b6 01       	movw	r22, r12
    2c12:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	48 e4       	ldi	r20, 0x48	; 72
    2c1c:	53 e4       	ldi	r21, 0x43	; 67
    2c1e:	0e 94 0e 19 	call	0x321c	; 0x321c <__divsf3>
    2c22:	2d 81       	ldd	r18, Y+5	; 0x05
    2c24:	3e 81       	ldd	r19, Y+6	; 0x06
    2c26:	4f 81       	ldd	r20, Y+7	; 0x07
    2c28:	58 85       	ldd	r21, Y+8	; 0x08
    2c2a:	0e 94 26 18 	call	0x304c	; 0x304c <__addsf3>
    2c2e:	e9 89       	ldd	r30, Y+17	; 0x11
    2c30:	fa 89       	ldd	r31, Y+18	; 0x12
    2c32:	64 83       	std	Z+4, r22	; 0x04
    2c34:	75 83       	std	Z+5, r23	; 0x05
    2c36:	86 83       	std	Z+6, r24	; 0x06
    2c38:	97 83       	std	Z+7, r25	; 0x07
	
	return max_val;
    2c3a:	82 2d       	mov	r24, r2
    2c3c:	93 2d       	mov	r25, r3

}
    2c3e:	62 96       	adiw	r28, 0x12	; 18
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	ff 90       	pop	r15
    2c54:	ef 90       	pop	r14
    2c56:	df 90       	pop	r13
    2c58:	cf 90       	pop	r12
    2c5a:	bf 90       	pop	r11
    2c5c:	af 90       	pop	r10
    2c5e:	9f 90       	pop	r9
    2c60:	8f 90       	pop	r8
    2c62:	7f 90       	pop	r7
    2c64:	6f 90       	pop	r6
    2c66:	5f 90       	pop	r5
    2c68:	4f 90       	pop	r4
    2c6a:	3f 90       	pop	r3
    2c6c:	2f 90       	pop	r2
    2c6e:	08 95       	ret

00002c70 <has_puck>:

/* Return 1 If Has Puck */
char has_puck(void)
{
	static int had_puck = 5;
	if(check(ADCSRA,ADEN)){		//check if ADC is enabled 
    2c70:	80 91 7a 00 	lds	r24, 0x007A
    2c74:	88 23       	and	r24, r24
    2c76:	14 f5       	brge	.+68     	; 0x2cbc <has_puck+0x4c>
		if(((transistor_3 + transistor_9) > HAS_PUCK_THRESHOLD)){
    2c78:	20 91 e3 01 	lds	r18, 0x01E3
    2c7c:	30 91 e4 01 	lds	r19, 0x01E4
    2c80:	80 91 e1 01 	lds	r24, 0x01E1
    2c84:	90 91 e2 01 	lds	r25, 0x01E2
    2c88:	82 0f       	add	r24, r18
    2c8a:	93 1f       	adc	r25, r19
    2c8c:	85 36       	cpi	r24, 0x65	; 101
    2c8e:	91 05       	cpc	r25, r1
    2c90:	44 f0       	brlt	.+16     	; 0x2ca2 <has_puck+0x32>
			had_puck = 5;
    2c92:	85 e0       	ldi	r24, 0x05	; 5
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	90 93 3a 01 	sts	0x013A, r25
    2c9a:	80 93 39 01 	sts	0x0139, r24
			return 1;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	08 95       	ret
		}
		if(had_puck){
    2ca2:	80 91 39 01 	lds	r24, 0x0139
    2ca6:	90 91 3a 01 	lds	r25, 0x013A
    2caa:	00 97       	sbiw	r24, 0x00	; 0
    2cac:	49 f0       	breq	.+18     	; 0x2cc0 <has_puck+0x50>
			had_puck -= 1;
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	90 93 3a 01 	sts	0x013A, r25
    2cb4:	80 93 39 01 	sts	0x0139, r24
			return 1;
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	08 95       	ret
		}
	}
	return 0;
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	08 95       	ret
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
}
    2cc2:	08 95       	ret

00002cc4 <adc_switch>:
/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated

	clear(ADCSRA,ADEN); // Disable ADC subsystem
    2cc4:	ea e7       	ldi	r30, 0x7A	; 122
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
    2cca:	8f 77       	andi	r24, 0x7F	; 127
    2ccc:	80 83       	st	Z, r24
	
	switch(state){
    2cce:	e0 91 f9 01 	lds	r30, 0x01F9
    2cd2:	f0 91 fa 01 	lds	r31, 0x01FA
    2cd6:	ec 30       	cpi	r30, 0x0C	; 12
    2cd8:	f1 05       	cpc	r31, r1
    2cda:	08 f0       	brcs	.+2      	; 0x2cde <adc_switch+0x1a>
    2cdc:	82 c1       	rjmp	.+772    	; 0x2fe2 <adc_switch+0x31e>
    2cde:	e0 5a       	subi	r30, 0xA0	; 160
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <__tablejump2__>

		case 0:
			state = 1;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	90 93 fa 01 	sts	0x01FA, r25
    2cee:	80 93 f9 01 	sts	0x01F9, r24
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
    2cf2:	eb e7       	ldi	r30, 0x7B	; 123
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	8f 7d       	andi	r24, 0xDF	; 223
    2cfa:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 8
    2cfc:	ec e7       	ldi	r30, 0x7C	; 124
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	8b 7f       	andi	r24, 0xFB	; 251
    2d04:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2d06:	80 81       	ld	r24, Z
    2d08:	8d 7f       	andi	r24, 0xFD	; 253
    2d0a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2d0c:	80 81       	ld	r24, Z
    2d0e:	8e 7f       	andi	r24, 0xFE	; 254
    2d10:	80 83       	st	Z, r24
			transistor_vals[2] = ADC;			
    2d12:	80 91 78 00 	lds	r24, 0x0078
    2d16:	90 91 79 00 	lds	r25, 0x0079
    2d1a:	90 93 ea 01 	sts	0x01EA, r25
    2d1e:	80 93 e9 01 	sts	0x01E9, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d22:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
			clear(ADMUX,MUX2); // Transistor 8
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[2] = ADC;			
			break;
    2d24:	5f c1       	rjmp	.+702    	; 0x2fe4 <adc_switch+0x320>

		case 1:
			state = 2;
    2d26:	82 e0       	ldi	r24, 0x02	; 2
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	90 93 fa 01 	sts	0x01FA, r25
    2d2e:	80 93 f9 01 	sts	0x01F9, r24
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
    2d32:	eb e7       	ldi	r30, 0x7B	; 123
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	8f 7d       	andi	r24, 0xDF	; 223
    2d3a:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 9
    2d3c:	ec e7       	ldi	r30, 0x7C	; 124
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	8b 7f       	andi	r24, 0xFB	; 251
    2d44:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2d46:	80 81       	ld	r24, Z
    2d48:	8d 7f       	andi	r24, 0xFD	; 253
    2d4a:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2d4c:	80 81       	ld	r24, Z
    2d4e:	81 60       	ori	r24, 0x01	; 1
    2d50:	80 83       	st	Z, r24
			transistor_vals[4] = ADC;			
    2d52:	80 91 78 00 	lds	r24, 0x0078
    2d56:	90 91 79 00 	lds	r25, 0x0079
    2d5a:	90 93 ee 01 	sts	0x01EE, r25
    2d5e:	80 93 ed 01 	sts	0x01ED, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d62:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
			clear(ADMUX,MUX2); // Transistor 9
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[4] = ADC;			
			break;
    2d64:	3f c1       	rjmp	.+638    	; 0x2fe4 <adc_switch+0x320>

		case 2:
			state = 3;
    2d66:	83 e0       	ldi	r24, 0x03	; 3
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	90 93 fa 01 	sts	0x01FA, r25
    2d6e:	80 93 f9 01 	sts	0x01F9, r24
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
    2d72:	eb e7       	ldi	r30, 0x7B	; 123
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	8f 7d       	andi	r24, 0xDF	; 223
    2d7a:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 10
    2d7c:	ec e7       	ldi	r30, 0x7C	; 124
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	84 60       	ori	r24, 0x04	; 4
    2d84:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2d86:	80 81       	ld	r24, Z
    2d88:	8d 7f       	andi	r24, 0xFD	; 253
    2d8a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2d8c:	80 81       	ld	r24, Z
    2d8e:	8e 7f       	andi	r24, 0xFE	; 254
    2d90:	80 83       	st	Z, r24
			transistor_9 = ADC;			
    2d92:	80 91 78 00 	lds	r24, 0x0078
    2d96:	90 91 79 00 	lds	r25, 0x0079
    2d9a:	90 93 e2 01 	sts	0x01E2, r25
    2d9e:	80 93 e1 01 	sts	0x01E1, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2da2:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
			set(ADMUX,MUX2); // Transistor 10
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_9 = ADC;			
			break;
    2da4:	1f c1       	rjmp	.+574    	; 0x2fe4 <adc_switch+0x320>

		case 3:
			state = 4;
    2da6:	84 e0       	ldi	r24, 0x04	; 4
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	90 93 fa 01 	sts	0x01FA, r25
    2dae:	80 93 f9 01 	sts	0x01F9, r24
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
    2db2:	eb e7       	ldi	r30, 0x7B	; 123
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	8f 7d       	andi	r24, 0xDF	; 223
    2dba:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 13
    2dbc:	ec e7       	ldi	r30, 0x7C	; 124
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	84 60       	ori	r24, 0x04	; 4
    2dc4:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2dc6:	80 81       	ld	r24, Z
    2dc8:	8d 7f       	andi	r24, 0xFD	; 253
    2dca:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2dcc:	80 81       	ld	r24, Z
    2dce:	81 60       	ori	r24, 0x01	; 1
    2dd0:	80 83       	st	Z, r24
			transistor_vals[5] = ADC;			
    2dd2:	80 91 78 00 	lds	r24, 0x0078
    2dd6:	90 91 79 00 	lds	r25, 0x0079
    2dda:	90 93 f0 01 	sts	0x01F0, r25
    2dde:	80 93 ef 01 	sts	0x01EF, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2de2:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
			set(ADMUX,MUX2); // Transistor 13
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[5] = ADC;			
			break;
    2de4:	ff c0       	rjmp	.+510    	; 0x2fe4 <adc_switch+0x320>

		case 4:
			state = 5;
    2de6:	85 e0       	ldi	r24, 0x05	; 5
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	90 93 fa 01 	sts	0x01FA, r25
    2dee:	80 93 f9 01 	sts	0x01F9, r24
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
    2df2:	eb e7       	ldi	r30, 0x7B	; 123
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	8f 7d       	andi	r24, 0xDF	; 223
    2dfa:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 14
    2dfc:	ec e7       	ldi	r30, 0x7C	; 124
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	84 60       	ori	r24, 0x04	; 4
    2e04:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2e06:	80 81       	ld	r24, Z
    2e08:	82 60       	ori	r24, 0x02	; 2
    2e0a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2e0c:	80 81       	ld	r24, Z
    2e0e:	8e 7f       	andi	r24, 0xFE	; 254
    2e10:	80 83       	st	Z, r24
			transistor_vals[7] = ADC;			
    2e12:	80 91 78 00 	lds	r24, 0x0078
    2e16:	90 91 79 00 	lds	r25, 0x0079
    2e1a:	90 93 f4 01 	sts	0x01F4, r25
    2e1e:	80 93 f3 01 	sts	0x01F3, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e22:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
			set(ADMUX,MUX2); // Transistor 14
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[7] = ADC;			
			break;
    2e24:	df c0       	rjmp	.+446    	; 0x2fe4 <adc_switch+0x320>

		case 5:
			state = 6;
    2e26:	86 e0       	ldi	r24, 0x06	; 6
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	90 93 fa 01 	sts	0x01FA, r25
    2e2e:	80 93 f9 01 	sts	0x01F9, r24
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
    2e32:	eb e7       	ldi	r30, 0x7B	; 123
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	8f 7d       	andi	r24, 0xDF	; 223
    2e3a:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 15
    2e3c:	ec e7       	ldi	r30, 0x7C	; 124
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	80 81       	ld	r24, Z
    2e42:	84 60       	ori	r24, 0x04	; 4
    2e44:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2e46:	80 81       	ld	r24, Z
    2e48:	82 60       	ori	r24, 0x02	; 2
    2e4a:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2e4c:	80 81       	ld	r24, Z
    2e4e:	81 60       	ori	r24, 0x01	; 1
    2e50:	80 83       	st	Z, r24
			transistor_vals[8] = ADC;			
    2e52:	80 91 78 00 	lds	r24, 0x0078
    2e56:	90 91 79 00 	lds	r25, 0x0079
    2e5a:	90 93 f6 01 	sts	0x01F6, r25
    2e5e:	80 93 f5 01 	sts	0x01F5, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e62:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
			set(ADMUX,MUX2); // Transistor 15
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[8] = ADC;			
			break;
    2e64:	bf c0       	rjmp	.+382    	; 0x2fe4 <adc_switch+0x320>

		case 6:
			state = 7;
    2e66:	87 e0       	ldi	r24, 0x07	; 7
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	90 93 fa 01 	sts	0x01FA, r25
    2e6e:	80 93 f9 01 	sts	0x01F9, r24
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
    2e72:	eb e7       	ldi	r30, 0x7B	; 123
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	80 62       	ori	r24, 0x20	; 32
    2e7a:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 1, 16
    2e7c:	ec e7       	ldi	r30, 0x7C	; 124
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	8b 7f       	andi	r24, 0xFB	; 251
    2e84:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2e86:	80 81       	ld	r24, Z
    2e88:	8d 7f       	andi	r24, 0xFD	; 253
    2e8a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2e8c:	80 81       	ld	r24, Z
    2e8e:	8e 7f       	andi	r24, 0xFE	; 254
    2e90:	80 83       	st	Z, r24
			transistor_vals[9] = ADC;			
    2e92:	80 91 78 00 	lds	r24, 0x0078
    2e96:	90 91 79 00 	lds	r25, 0x0079
    2e9a:	90 93 f8 01 	sts	0x01F8, r25
    2e9e:	80 93 f7 01 	sts	0x01F7, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
			clear(ADMUX,MUX2); // Transistor 1, 16
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[9] = ADC;			
			break;
    2ea4:	9f c0       	rjmp	.+318    	; 0x2fe4 <adc_switch+0x320>

		case 7:
			state = 8;
    2ea6:	88 e0       	ldi	r24, 0x08	; 8
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	90 93 fa 01 	sts	0x01FA, r25
    2eae:	80 93 f9 01 	sts	0x01F9, r24
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
    2eb2:	eb e7       	ldi	r30, 0x7B	; 123
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	80 62       	ori	r24, 0x20	; 32
    2eba:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 11, 12
    2ebc:	ec e7       	ldi	r30, 0x7C	; 124
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	8b 7f       	andi	r24, 0xFB	; 251
    2ec4:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2ec6:	80 81       	ld	r24, Z
    2ec8:	8d 7f       	andi	r24, 0xFD	; 253
    2eca:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2ecc:	80 81       	ld	r24, Z
    2ece:	81 60       	ori	r24, 0x01	; 1
    2ed0:	80 83       	st	Z, r24
			transistor_vals[0] = ADC;			
    2ed2:	80 91 78 00 	lds	r24, 0x0078
    2ed6:	90 91 79 00 	lds	r25, 0x0079
    2eda:	90 93 e6 01 	sts	0x01E6, r25
    2ede:	80 93 e5 01 	sts	0x01E5, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
			clear(ADMUX,MUX2); // Transistor 11, 12
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[0] = ADC;			
			break;
    2ee4:	7f c0       	rjmp	.+254    	; 0x2fe4 <adc_switch+0x320>

		case 8:
			state = 9;
    2ee6:	89 e0       	ldi	r24, 0x09	; 9
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	90 93 fa 01 	sts	0x01FA, r25
    2eee:	80 93 f9 01 	sts	0x01F9, r24
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
    2ef2:	eb e7       	ldi	r30, 0x7B	; 123
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	80 62       	ori	r24, 0x20	; 32
    2efa:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
    2efc:	ec e7       	ldi	r30, 0x7C	; 124
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	80 81       	ld	r24, Z
    2f02:	8b 7f       	andi	r24, 0xFB	; 251
    2f04:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2f06:	80 81       	ld	r24, Z
    2f08:	82 60       	ori	r24, 0x02	; 2
    2f0a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2f0c:	80 81       	ld	r24, Z
    2f0e:	8e 7f       	andi	r24, 0xFE	; 254
    2f10:	80 83       	st	Z, r24
			transistor_vals[6] = ADC;			
    2f12:	80 91 78 00 	lds	r24, 0x0078
    2f16:	90 91 79 00 	lds	r25, 0x0079
    2f1a:	90 93 f2 01 	sts	0x01F2, r25
    2f1e:	80 93 f1 01 	sts	0x01F1, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2f22:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[6] = ADC;			
			break;
    2f24:	5f c0       	rjmp	.+190    	; 0x2fe4 <adc_switch+0x320>

		case 9:
			state = 10;
    2f26:	8a e0       	ldi	r24, 0x0A	; 10
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	90 93 fa 01 	sts	0x01FA, r25
    2f2e:	80 93 f9 01 	sts	0x01F9, r24
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
    2f32:	eb e7       	ldi	r30, 0x7B	; 123
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	80 62       	ori	r24, 0x20	; 32
    2f3a:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 2
    2f3c:	ec e7       	ldi	r30, 0x7C	; 124
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
    2f42:	8b 7f       	andi	r24, 0xFB	; 251
    2f44:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2f46:	80 81       	ld	r24, Z
    2f48:	82 60       	ori	r24, 0x02	; 2
    2f4a:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2f4c:	80 81       	ld	r24, Z
    2f4e:	81 60       	ori	r24, 0x01	; 1
    2f50:	80 83       	st	Z, r24
			transistor_vals[3] = ADC;			
    2f52:	80 91 78 00 	lds	r24, 0x0078
    2f56:	90 91 79 00 	lds	r25, 0x0079
    2f5a:	90 93 ec 01 	sts	0x01EC, r25
    2f5e:	80 93 eb 01 	sts	0x01EB, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2f62:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
			clear(ADMUX,MUX2); // Transistor 2
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[3] = ADC;			
			break;
    2f64:	3f c0       	rjmp	.+126    	; 0x2fe4 <adc_switch+0x320>

		case 10:
			state = 11;
    2f66:	8b e0       	ldi	r24, 0x0B	; 11
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	90 93 fa 01 	sts	0x01FA, r25
    2f6e:	80 93 f9 01 	sts	0x01F9, r24
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
    2f72:	eb e7       	ldi	r30, 0x7B	; 123
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	80 62       	ori	r24, 0x20	; 32
    2f7a:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 3
    2f7c:	ec e7       	ldi	r30, 0x7C	; 124
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	84 60       	ori	r24, 0x04	; 4
    2f84:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2f86:	80 81       	ld	r24, Z
    2f88:	8d 7f       	andi	r24, 0xFD	; 253
    2f8a:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2f8c:	80 81       	ld	r24, Z
    2f8e:	8e 7f       	andi	r24, 0xFE	; 254
    2f90:	80 83       	st	Z, r24
			transistor_vals[1] = ADC;			
    2f92:	80 91 78 00 	lds	r24, 0x0078
    2f96:	90 91 79 00 	lds	r25, 0x0079
    2f9a:	90 93 e8 01 	sts	0x01E8, r25
    2f9e:	80 93 e7 01 	sts	0x01E7, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
			set(ADMUX,MUX2); // Transistor 3
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[1] = ADC;			
			break;
    2fa4:	1f c0       	rjmp	.+62     	; 0x2fe4 <adc_switch+0x320>

		case 11:
			state = 0;
    2fa6:	10 92 fa 01 	sts	0x01FA, r1
    2faa:	10 92 f9 01 	sts	0x01F9, r1
			set(ADCSRB,MUX5); // Select ADC13 at pin B6
    2fae:	eb e7       	ldi	r30, 0x7B	; 123
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	80 62       	ori	r24, 0x20	; 32
    2fb6:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 4
    2fb8:	ec e7       	ldi	r30, 0x7C	; 124
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	84 60       	ori	r24, 0x04	; 4
    2fc0:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2fc2:	80 81       	ld	r24, Z
    2fc4:	8d 7f       	andi	r24, 0xFD	; 253
    2fc6:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2fc8:	80 81       	ld	r24, Z
    2fca:	81 60       	ori	r24, 0x01	; 1
    2fcc:	80 83       	st	Z, r24
			transistor_3 = ADC;			
    2fce:	80 91 78 00 	lds	r24, 0x0078
    2fd2:	90 91 79 00 	lds	r25, 0x0079
    2fd6:	90 93 e4 01 	sts	0x01E4, r25
    2fda:	80 93 e3 01 	sts	0x01E3, r24
			return_val = 1;
    2fde:	81 e0       	ldi	r24, 0x01	; 1
			// m_usb_tx_string("  IR14: ");
			// m_usb_tx_int(transistor_vals[8]);
			// m_usb_tx_string("  IR15: ");
			// m_usb_tx_int(transistor_vals[9]);

			break;
    2fe0:	01 c0       	rjmp	.+2      	; 0x2fe4 <adc_switch+0x320>
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
			// m_usb_tx_int(transistor_vals[9]);

			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
    2fe4:	ea e7       	ldi	r30, 0x7A	; 122
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	90 81       	ld	r25, Z
    2fea:	90 68       	ori	r25, 0x80	; 128
    2fec:	90 83       	st	Z, r25
	set(ADCSRA,ADSC); // Begin new conversion
    2fee:	90 81       	ld	r25, Z
    2ff0:	90 64       	ori	r25, 0x40	; 64
    2ff2:	90 83       	st	Z, r25

	return return_val;
}
    2ff4:	08 95       	ret

00002ff6 <wireless_send>:
Public Functions
************************************************************/

/* Send Wireless Data */
void wireless_send(int sending_bot, char* send_buffer)
{
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
    2ffa:	eb 01       	movw	r28, r22
	if (sending_bot == RED_BULL)
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	51 f4       	brne	.+20     	; 0x3014 <wireless_send+0x1e>
	{
		m_rf_send(RXADDRESS_BLUE_WHALE,send_buffer,PACKET_LENGTH); // Send RF Signal
    3000:	4a e0       	ldi	r20, 0x0A	; 10
    3002:	82 e2       	ldi	r24, 0x22	; 34
    3004:	0e 94 2a 11 	call	0x2254	; 0x2254 <m_rf_send>
		m_rf_send(RXADDRESS_GREEN_MONSTER,send_buffer,PACKET_LENGTH); // Send RF Signal
    3008:	4a e0       	ldi	r20, 0x0A	; 10
    300a:	be 01       	movw	r22, r28
    300c:	81 e2       	ldi	r24, 0x21	; 33
    300e:	0e 94 2a 11 	call	0x2254	; 0x2254 <m_rf_send>
    3012:	18 c0       	rjmp	.+48     	; 0x3044 <wireless_send+0x4e>
	}
	if (sending_bot == GREEN_MONSTER)
    3014:	81 30       	cpi	r24, 0x01	; 1
    3016:	91 05       	cpc	r25, r1
    3018:	51 f4       	brne	.+20     	; 0x302e <wireless_send+0x38>
	{
		m_rf_send(RXADDRESS_BLUE_WHALE,send_buffer,PACKET_LENGTH); // Send RF Signal
    301a:	4a e0       	ldi	r20, 0x0A	; 10
    301c:	82 e2       	ldi	r24, 0x22	; 34
    301e:	0e 94 2a 11 	call	0x2254	; 0x2254 <m_rf_send>
		m_rf_send(RXADDRESS_RED_BULL,send_buffer,PACKET_LENGTH); // Send RF Signal	
    3022:	4a e0       	ldi	r20, 0x0A	; 10
    3024:	be 01       	movw	r22, r28
    3026:	80 e2       	ldi	r24, 0x20	; 32
    3028:	0e 94 2a 11 	call	0x2254	; 0x2254 <m_rf_send>
    302c:	0b c0       	rjmp	.+22     	; 0x3044 <wireless_send+0x4e>
	}
	if (sending_bot == BLUE_WHALE)
    302e:	02 97       	sbiw	r24, 0x02	; 2
    3030:	49 f4       	brne	.+18     	; 0x3044 <wireless_send+0x4e>
	{
		m_rf_send(RXADDRESS_GREEN_MONSTER,send_buffer,PACKET_LENGTH); // Send RF Signal
    3032:	4a e0       	ldi	r20, 0x0A	; 10
    3034:	81 e2       	ldi	r24, 0x21	; 33
    3036:	0e 94 2a 11 	call	0x2254	; 0x2254 <m_rf_send>
		m_rf_send(RXADDRESS_RED_BULL,send_buffer,PACKET_LENGTH); // Send RF Signal
    303a:	4a e0       	ldi	r20, 0x0A	; 10
    303c:	be 01       	movw	r22, r28
    303e:	80 e2       	ldi	r24, 0x20	; 32
    3040:	0e 94 2a 11 	call	0x2254	; 0x2254 <m_rf_send>
	}
}
    3044:	df 91       	pop	r29
    3046:	cf 91       	pop	r28
    3048:	08 95       	ret

0000304a <__subsf3>:
    304a:	50 58       	subi	r21, 0x80	; 128

0000304c <__addsf3>:
    304c:	bb 27       	eor	r27, r27
    304e:	aa 27       	eor	r26, r26
    3050:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3x>
    3054:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__fp_round>
    3058:	0e 94 40 1a 	call	0x3480	; 0x3480 <__fp_pscA>
    305c:	38 f0       	brcs	.+14     	; 0x306c <__addsf3+0x20>
    305e:	0e 94 47 1a 	call	0x348e	; 0x348e <__fp_pscB>
    3062:	20 f0       	brcs	.+8      	; 0x306c <__addsf3+0x20>
    3064:	39 f4       	brne	.+14     	; 0x3074 <__addsf3+0x28>
    3066:	9f 3f       	cpi	r25, 0xFF	; 255
    3068:	19 f4       	brne	.+6      	; 0x3070 <__addsf3+0x24>
    306a:	26 f4       	brtc	.+8      	; 0x3074 <__addsf3+0x28>
    306c:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__fp_nan>
    3070:	0e f4       	brtc	.+2      	; 0x3074 <__addsf3+0x28>
    3072:	e0 95       	com	r30
    3074:	e7 fb       	bst	r30, 7
    3076:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__fp_inf>

0000307a <__addsf3x>:
    307a:	e9 2f       	mov	r30, r25
    307c:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fp_split3>
    3080:	58 f3       	brcs	.-42     	; 0x3058 <__addsf3+0xc>
    3082:	ba 17       	cp	r27, r26
    3084:	62 07       	cpc	r22, r18
    3086:	73 07       	cpc	r23, r19
    3088:	84 07       	cpc	r24, r20
    308a:	95 07       	cpc	r25, r21
    308c:	20 f0       	brcs	.+8      	; 0x3096 <__addsf3x+0x1c>
    308e:	79 f4       	brne	.+30     	; 0x30ae <__addsf3x+0x34>
    3090:	a6 f5       	brtc	.+104    	; 0x30fa <__addsf3x+0x80>
    3092:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__fp_zero>
    3096:	0e f4       	brtc	.+2      	; 0x309a <__addsf3x+0x20>
    3098:	e0 95       	com	r30
    309a:	0b 2e       	mov	r0, r27
    309c:	ba 2f       	mov	r27, r26
    309e:	a0 2d       	mov	r26, r0
    30a0:	0b 01       	movw	r0, r22
    30a2:	b9 01       	movw	r22, r18
    30a4:	90 01       	movw	r18, r0
    30a6:	0c 01       	movw	r0, r24
    30a8:	ca 01       	movw	r24, r20
    30aa:	a0 01       	movw	r20, r0
    30ac:	11 24       	eor	r1, r1
    30ae:	ff 27       	eor	r31, r31
    30b0:	59 1b       	sub	r21, r25
    30b2:	99 f0       	breq	.+38     	; 0x30da <__addsf3x+0x60>
    30b4:	59 3f       	cpi	r21, 0xF9	; 249
    30b6:	50 f4       	brcc	.+20     	; 0x30cc <__addsf3x+0x52>
    30b8:	50 3e       	cpi	r21, 0xE0	; 224
    30ba:	68 f1       	brcs	.+90     	; 0x3116 <__addsf3x+0x9c>
    30bc:	1a 16       	cp	r1, r26
    30be:	f0 40       	sbci	r31, 0x00	; 0
    30c0:	a2 2f       	mov	r26, r18
    30c2:	23 2f       	mov	r18, r19
    30c4:	34 2f       	mov	r19, r20
    30c6:	44 27       	eor	r20, r20
    30c8:	58 5f       	subi	r21, 0xF8	; 248
    30ca:	f3 cf       	rjmp	.-26     	; 0x30b2 <__addsf3x+0x38>
    30cc:	46 95       	lsr	r20
    30ce:	37 95       	ror	r19
    30d0:	27 95       	ror	r18
    30d2:	a7 95       	ror	r26
    30d4:	f0 40       	sbci	r31, 0x00	; 0
    30d6:	53 95       	inc	r21
    30d8:	c9 f7       	brne	.-14     	; 0x30cc <__addsf3x+0x52>
    30da:	7e f4       	brtc	.+30     	; 0x30fa <__addsf3x+0x80>
    30dc:	1f 16       	cp	r1, r31
    30de:	ba 0b       	sbc	r27, r26
    30e0:	62 0b       	sbc	r22, r18
    30e2:	73 0b       	sbc	r23, r19
    30e4:	84 0b       	sbc	r24, r20
    30e6:	ba f0       	brmi	.+46     	; 0x3116 <__addsf3x+0x9c>
    30e8:	91 50       	subi	r25, 0x01	; 1
    30ea:	a1 f0       	breq	.+40     	; 0x3114 <__addsf3x+0x9a>
    30ec:	ff 0f       	add	r31, r31
    30ee:	bb 1f       	adc	r27, r27
    30f0:	66 1f       	adc	r22, r22
    30f2:	77 1f       	adc	r23, r23
    30f4:	88 1f       	adc	r24, r24
    30f6:	c2 f7       	brpl	.-16     	; 0x30e8 <__addsf3x+0x6e>
    30f8:	0e c0       	rjmp	.+28     	; 0x3116 <__addsf3x+0x9c>
    30fa:	ba 0f       	add	r27, r26
    30fc:	62 1f       	adc	r22, r18
    30fe:	73 1f       	adc	r23, r19
    3100:	84 1f       	adc	r24, r20
    3102:	48 f4       	brcc	.+18     	; 0x3116 <__addsf3x+0x9c>
    3104:	87 95       	ror	r24
    3106:	77 95       	ror	r23
    3108:	67 95       	ror	r22
    310a:	b7 95       	ror	r27
    310c:	f7 95       	ror	r31
    310e:	9e 3f       	cpi	r25, 0xFE	; 254
    3110:	08 f0       	brcs	.+2      	; 0x3114 <__addsf3x+0x9a>
    3112:	b0 cf       	rjmp	.-160    	; 0x3074 <__addsf3+0x28>
    3114:	93 95       	inc	r25
    3116:	88 0f       	add	r24, r24
    3118:	08 f0       	brcs	.+2      	; 0x311c <__addsf3x+0xa2>
    311a:	99 27       	eor	r25, r25
    311c:	ee 0f       	add	r30, r30
    311e:	97 95       	ror	r25
    3120:	87 95       	ror	r24
    3122:	08 95       	ret
    3124:	0e 94 40 1a 	call	0x3480	; 0x3480 <__fp_pscA>
    3128:	60 f0       	brcs	.+24     	; 0x3142 <__addsf3x+0xc8>
    312a:	80 e8       	ldi	r24, 0x80	; 128
    312c:	91 e0       	ldi	r25, 0x01	; 1
    312e:	09 f4       	brne	.+2      	; 0x3132 <__addsf3x+0xb8>
    3130:	9e ef       	ldi	r25, 0xFE	; 254
    3132:	0e 94 47 1a 	call	0x348e	; 0x348e <__fp_pscB>
    3136:	28 f0       	brcs	.+10     	; 0x3142 <__addsf3x+0xc8>
    3138:	40 e8       	ldi	r20, 0x80	; 128
    313a:	51 e0       	ldi	r21, 0x01	; 1
    313c:	71 f4       	brne	.+28     	; 0x315a <atan2+0x10>
    313e:	5e ef       	ldi	r21, 0xFE	; 254
    3140:	0c c0       	rjmp	.+24     	; 0x315a <atan2+0x10>
    3142:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__fp_nan>
    3146:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__fp_zero>

0000314a <atan2>:
    314a:	e9 2f       	mov	r30, r25
    314c:	e0 78       	andi	r30, 0x80	; 128
    314e:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fp_split3>
    3152:	40 f3       	brcs	.-48     	; 0x3124 <__addsf3x+0xaa>
    3154:	09 2e       	mov	r0, r25
    3156:	05 2a       	or	r0, r21
    3158:	b1 f3       	breq	.-20     	; 0x3146 <__addsf3x+0xcc>
    315a:	26 17       	cp	r18, r22
    315c:	37 07       	cpc	r19, r23
    315e:	48 07       	cpc	r20, r24
    3160:	59 07       	cpc	r21, r25
    3162:	38 f0       	brcs	.+14     	; 0x3172 <atan2+0x28>
    3164:	0e 2e       	mov	r0, r30
    3166:	07 f8       	bld	r0, 7
    3168:	e0 25       	eor	r30, r0
    316a:	69 f0       	breq	.+26     	; 0x3186 <atan2+0x3c>
    316c:	e0 25       	eor	r30, r0
    316e:	e0 64       	ori	r30, 0x40	; 64
    3170:	0a c0       	rjmp	.+20     	; 0x3186 <atan2+0x3c>
    3172:	ef 63       	ori	r30, 0x3F	; 63
    3174:	07 f8       	bld	r0, 7
    3176:	00 94       	com	r0
    3178:	07 fa       	bst	r0, 7
    317a:	db 01       	movw	r26, r22
    317c:	b9 01       	movw	r22, r18
    317e:	9d 01       	movw	r18, r26
    3180:	dc 01       	movw	r26, r24
    3182:	ca 01       	movw	r24, r20
    3184:	ad 01       	movw	r20, r26
    3186:	ef 93       	push	r30
    3188:	0e 94 25 19 	call	0x324a	; 0x324a <__divsf3_pse>
    318c:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__fp_round>
    3190:	0e 94 d5 18 	call	0x31aa	; 0x31aa <atan>
    3194:	5f 91       	pop	r21
    3196:	55 23       	and	r21, r21
    3198:	39 f0       	breq	.+14     	; 0x31a8 <atan2+0x5e>
    319a:	2b ed       	ldi	r18, 0xDB	; 219
    319c:	3f e0       	ldi	r19, 0x0F	; 15
    319e:	49 e4       	ldi	r20, 0x49	; 73
    31a0:	50 fd       	sbrc	r21, 0
    31a2:	49 ec       	ldi	r20, 0xC9	; 201
    31a4:	0c 94 26 18 	jmp	0x304c	; 0x304c <__addsf3>
    31a8:	08 95       	ret

000031aa <atan>:
    31aa:	df 93       	push	r29
    31ac:	dd 27       	eor	r29, r29
    31ae:	b9 2f       	mov	r27, r25
    31b0:	bf 77       	andi	r27, 0x7F	; 127
    31b2:	40 e8       	ldi	r20, 0x80	; 128
    31b4:	5f e3       	ldi	r21, 0x3F	; 63
    31b6:	16 16       	cp	r1, r22
    31b8:	17 06       	cpc	r1, r23
    31ba:	48 07       	cpc	r20, r24
    31bc:	5b 07       	cpc	r21, r27
    31be:	18 f4       	brcc	.+6      	; 0x31c6 <atan+0x1c>
    31c0:	d9 2f       	mov	r29, r25
    31c2:	0e 94 cc 1a 	call	0x3598	; 0x3598 <inverse>
    31c6:	9f 93       	push	r25
    31c8:	8f 93       	push	r24
    31ca:	7f 93       	push	r23
    31cc:	6f 93       	push	r22
    31ce:	0e 94 8f 1b 	call	0x371e	; 0x371e <square>
    31d2:	e8 ed       	ldi	r30, 0xD8	; 216
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	0e 94 19 1a 	call	0x3432	; 0x3432 <__fp_powser>
    31da:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__fp_round>
    31de:	2f 91       	pop	r18
    31e0:	3f 91       	pop	r19
    31e2:	4f 91       	pop	r20
    31e4:	5f 91       	pop	r21
    31e6:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__mulsf3x>
    31ea:	dd 23       	and	r29, r29
    31ec:	51 f0       	breq	.+20     	; 0x3202 <atan+0x58>
    31ee:	90 58       	subi	r25, 0x80	; 128
    31f0:	a2 ea       	ldi	r26, 0xA2	; 162
    31f2:	2a ed       	ldi	r18, 0xDA	; 218
    31f4:	3f e0       	ldi	r19, 0x0F	; 15
    31f6:	49 ec       	ldi	r20, 0xC9	; 201
    31f8:	5f e3       	ldi	r21, 0x3F	; 63
    31fa:	d0 78       	andi	r29, 0x80	; 128
    31fc:	5d 27       	eor	r21, r29
    31fe:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3x>
    3202:	df 91       	pop	r29
    3204:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__fp_round>

00003208 <__cmpsf2>:
    3208:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__fp_cmp>
    320c:	08 f4       	brcc	.+2      	; 0x3210 <__cmpsf2+0x8>
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	08 95       	ret

00003212 <cos>:
    3212:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__fp_rempio2>
    3216:	e3 95       	inc	r30
    3218:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <__fp_sinus>

0000321c <__divsf3>:
    321c:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3x>
    3220:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__fp_round>
    3224:	0e 94 47 1a 	call	0x348e	; 0x348e <__fp_pscB>
    3228:	58 f0       	brcs	.+22     	; 0x3240 <__divsf3+0x24>
    322a:	0e 94 40 1a 	call	0x3480	; 0x3480 <__fp_pscA>
    322e:	40 f0       	brcs	.+16     	; 0x3240 <__divsf3+0x24>
    3230:	29 f4       	brne	.+10     	; 0x323c <__divsf3+0x20>
    3232:	5f 3f       	cpi	r21, 0xFF	; 255
    3234:	29 f0       	breq	.+10     	; 0x3240 <__divsf3+0x24>
    3236:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__fp_inf>
    323a:	51 11       	cpse	r21, r1
    323c:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_szero>
    3240:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__fp_nan>

00003244 <__divsf3x>:
    3244:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fp_split3>
    3248:	68 f3       	brcs	.-38     	; 0x3224 <__divsf3+0x8>

0000324a <__divsf3_pse>:
    324a:	99 23       	and	r25, r25
    324c:	b1 f3       	breq	.-20     	; 0x323a <__divsf3+0x1e>
    324e:	55 23       	and	r21, r21
    3250:	91 f3       	breq	.-28     	; 0x3236 <__divsf3+0x1a>
    3252:	95 1b       	sub	r25, r21
    3254:	55 0b       	sbc	r21, r21
    3256:	bb 27       	eor	r27, r27
    3258:	aa 27       	eor	r26, r26
    325a:	62 17       	cp	r22, r18
    325c:	73 07       	cpc	r23, r19
    325e:	84 07       	cpc	r24, r20
    3260:	38 f0       	brcs	.+14     	; 0x3270 <__divsf3_pse+0x26>
    3262:	9f 5f       	subi	r25, 0xFF	; 255
    3264:	5f 4f       	sbci	r21, 0xFF	; 255
    3266:	22 0f       	add	r18, r18
    3268:	33 1f       	adc	r19, r19
    326a:	44 1f       	adc	r20, r20
    326c:	aa 1f       	adc	r26, r26
    326e:	a9 f3       	breq	.-22     	; 0x325a <__divsf3_pse+0x10>
    3270:	35 d0       	rcall	.+106    	; 0x32dc <__divsf3_pse+0x92>
    3272:	0e 2e       	mov	r0, r30
    3274:	3a f0       	brmi	.+14     	; 0x3284 <__divsf3_pse+0x3a>
    3276:	e0 e8       	ldi	r30, 0x80	; 128
    3278:	32 d0       	rcall	.+100    	; 0x32de <__divsf3_pse+0x94>
    327a:	91 50       	subi	r25, 0x01	; 1
    327c:	50 40       	sbci	r21, 0x00	; 0
    327e:	e6 95       	lsr	r30
    3280:	00 1c       	adc	r0, r0
    3282:	ca f7       	brpl	.-14     	; 0x3276 <__divsf3_pse+0x2c>
    3284:	2b d0       	rcall	.+86     	; 0x32dc <__divsf3_pse+0x92>
    3286:	fe 2f       	mov	r31, r30
    3288:	29 d0       	rcall	.+82     	; 0x32dc <__divsf3_pse+0x92>
    328a:	66 0f       	add	r22, r22
    328c:	77 1f       	adc	r23, r23
    328e:	88 1f       	adc	r24, r24
    3290:	bb 1f       	adc	r27, r27
    3292:	26 17       	cp	r18, r22
    3294:	37 07       	cpc	r19, r23
    3296:	48 07       	cpc	r20, r24
    3298:	ab 07       	cpc	r26, r27
    329a:	b0 e8       	ldi	r27, 0x80	; 128
    329c:	09 f0       	breq	.+2      	; 0x32a0 <__divsf3_pse+0x56>
    329e:	bb 0b       	sbc	r27, r27
    32a0:	80 2d       	mov	r24, r0
    32a2:	bf 01       	movw	r22, r30
    32a4:	ff 27       	eor	r31, r31
    32a6:	93 58       	subi	r25, 0x83	; 131
    32a8:	5f 4f       	sbci	r21, 0xFF	; 255
    32aa:	3a f0       	brmi	.+14     	; 0x32ba <__divsf3_pse+0x70>
    32ac:	9e 3f       	cpi	r25, 0xFE	; 254
    32ae:	51 05       	cpc	r21, r1
    32b0:	78 f0       	brcs	.+30     	; 0x32d0 <__divsf3_pse+0x86>
    32b2:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__fp_inf>
    32b6:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_szero>
    32ba:	5f 3f       	cpi	r21, 0xFF	; 255
    32bc:	e4 f3       	brlt	.-8      	; 0x32b6 <__divsf3_pse+0x6c>
    32be:	98 3e       	cpi	r25, 0xE8	; 232
    32c0:	d4 f3       	brlt	.-12     	; 0x32b6 <__divsf3_pse+0x6c>
    32c2:	86 95       	lsr	r24
    32c4:	77 95       	ror	r23
    32c6:	67 95       	ror	r22
    32c8:	b7 95       	ror	r27
    32ca:	f7 95       	ror	r31
    32cc:	9f 5f       	subi	r25, 0xFF	; 255
    32ce:	c9 f7       	brne	.-14     	; 0x32c2 <__divsf3_pse+0x78>
    32d0:	88 0f       	add	r24, r24
    32d2:	91 1d       	adc	r25, r1
    32d4:	96 95       	lsr	r25
    32d6:	87 95       	ror	r24
    32d8:	97 f9       	bld	r25, 7
    32da:	08 95       	ret
    32dc:	e1 e0       	ldi	r30, 0x01	; 1
    32de:	66 0f       	add	r22, r22
    32e0:	77 1f       	adc	r23, r23
    32e2:	88 1f       	adc	r24, r24
    32e4:	bb 1f       	adc	r27, r27
    32e6:	62 17       	cp	r22, r18
    32e8:	73 07       	cpc	r23, r19
    32ea:	84 07       	cpc	r24, r20
    32ec:	ba 07       	cpc	r27, r26
    32ee:	20 f0       	brcs	.+8      	; 0x32f8 <__divsf3_pse+0xae>
    32f0:	62 1b       	sub	r22, r18
    32f2:	73 0b       	sbc	r23, r19
    32f4:	84 0b       	sbc	r24, r20
    32f6:	ba 0b       	sbc	r27, r26
    32f8:	ee 1f       	adc	r30, r30
    32fa:	88 f7       	brcc	.-30     	; 0x32de <__divsf3_pse+0x94>
    32fc:	e0 95       	com	r30
    32fe:	08 95       	ret

00003300 <__fixunssfsi>:
    3300:	0e 94 a6 1a 	call	0x354c	; 0x354c <__fp_splitA>
    3304:	88 f0       	brcs	.+34     	; 0x3328 <__fixunssfsi+0x28>
    3306:	9f 57       	subi	r25, 0x7F	; 127
    3308:	98 f0       	brcs	.+38     	; 0x3330 <__fixunssfsi+0x30>
    330a:	b9 2f       	mov	r27, r25
    330c:	99 27       	eor	r25, r25
    330e:	b7 51       	subi	r27, 0x17	; 23
    3310:	b0 f0       	brcs	.+44     	; 0x333e <__fixunssfsi+0x3e>
    3312:	e1 f0       	breq	.+56     	; 0x334c <__fixunssfsi+0x4c>
    3314:	66 0f       	add	r22, r22
    3316:	77 1f       	adc	r23, r23
    3318:	88 1f       	adc	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	1a f0       	brmi	.+6      	; 0x3324 <__fixunssfsi+0x24>
    331e:	ba 95       	dec	r27
    3320:	c9 f7       	brne	.-14     	; 0x3314 <__fixunssfsi+0x14>
    3322:	14 c0       	rjmp	.+40     	; 0x334c <__fixunssfsi+0x4c>
    3324:	b1 30       	cpi	r27, 0x01	; 1
    3326:	91 f0       	breq	.+36     	; 0x334c <__fixunssfsi+0x4c>
    3328:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__fp_zero>
    332c:	b1 e0       	ldi	r27, 0x01	; 1
    332e:	08 95       	ret
    3330:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__fp_zero>
    3334:	67 2f       	mov	r22, r23
    3336:	78 2f       	mov	r23, r24
    3338:	88 27       	eor	r24, r24
    333a:	b8 5f       	subi	r27, 0xF8	; 248
    333c:	39 f0       	breq	.+14     	; 0x334c <__fixunssfsi+0x4c>
    333e:	b9 3f       	cpi	r27, 0xF9	; 249
    3340:	cc f3       	brlt	.-14     	; 0x3334 <__fixunssfsi+0x34>
    3342:	86 95       	lsr	r24
    3344:	77 95       	ror	r23
    3346:	67 95       	ror	r22
    3348:	b3 95       	inc	r27
    334a:	d9 f7       	brne	.-10     	; 0x3342 <__fixunssfsi+0x42>
    334c:	3e f4       	brtc	.+14     	; 0x335c <__fixunssfsi+0x5c>
    334e:	90 95       	com	r25
    3350:	80 95       	com	r24
    3352:	70 95       	com	r23
    3354:	61 95       	neg	r22
    3356:	7f 4f       	sbci	r23, 0xFF	; 255
    3358:	8f 4f       	sbci	r24, 0xFF	; 255
    335a:	9f 4f       	sbci	r25, 0xFF	; 255
    335c:	08 95       	ret

0000335e <__floatunsisf>:
    335e:	e8 94       	clt
    3360:	09 c0       	rjmp	.+18     	; 0x3374 <__floatsisf+0x12>

00003362 <__floatsisf>:
    3362:	97 fb       	bst	r25, 7
    3364:	3e f4       	brtc	.+14     	; 0x3374 <__floatsisf+0x12>
    3366:	90 95       	com	r25
    3368:	80 95       	com	r24
    336a:	70 95       	com	r23
    336c:	61 95       	neg	r22
    336e:	7f 4f       	sbci	r23, 0xFF	; 255
    3370:	8f 4f       	sbci	r24, 0xFF	; 255
    3372:	9f 4f       	sbci	r25, 0xFF	; 255
    3374:	99 23       	and	r25, r25
    3376:	a9 f0       	breq	.+42     	; 0x33a2 <__floatsisf+0x40>
    3378:	f9 2f       	mov	r31, r25
    337a:	96 e9       	ldi	r25, 0x96	; 150
    337c:	bb 27       	eor	r27, r27
    337e:	93 95       	inc	r25
    3380:	f6 95       	lsr	r31
    3382:	87 95       	ror	r24
    3384:	77 95       	ror	r23
    3386:	67 95       	ror	r22
    3388:	b7 95       	ror	r27
    338a:	f1 11       	cpse	r31, r1
    338c:	f8 cf       	rjmp	.-16     	; 0x337e <__floatsisf+0x1c>
    338e:	fa f4       	brpl	.+62     	; 0x33ce <__floatsisf+0x6c>
    3390:	bb 0f       	add	r27, r27
    3392:	11 f4       	brne	.+4      	; 0x3398 <__floatsisf+0x36>
    3394:	60 ff       	sbrs	r22, 0
    3396:	1b c0       	rjmp	.+54     	; 0x33ce <__floatsisf+0x6c>
    3398:	6f 5f       	subi	r22, 0xFF	; 255
    339a:	7f 4f       	sbci	r23, 0xFF	; 255
    339c:	8f 4f       	sbci	r24, 0xFF	; 255
    339e:	9f 4f       	sbci	r25, 0xFF	; 255
    33a0:	16 c0       	rjmp	.+44     	; 0x33ce <__floatsisf+0x6c>
    33a2:	88 23       	and	r24, r24
    33a4:	11 f0       	breq	.+4      	; 0x33aa <__floatsisf+0x48>
    33a6:	96 e9       	ldi	r25, 0x96	; 150
    33a8:	11 c0       	rjmp	.+34     	; 0x33cc <__floatsisf+0x6a>
    33aa:	77 23       	and	r23, r23
    33ac:	21 f0       	breq	.+8      	; 0x33b6 <__floatsisf+0x54>
    33ae:	9e e8       	ldi	r25, 0x8E	; 142
    33b0:	87 2f       	mov	r24, r23
    33b2:	76 2f       	mov	r23, r22
    33b4:	05 c0       	rjmp	.+10     	; 0x33c0 <__floatsisf+0x5e>
    33b6:	66 23       	and	r22, r22
    33b8:	71 f0       	breq	.+28     	; 0x33d6 <__floatsisf+0x74>
    33ba:	96 e8       	ldi	r25, 0x86	; 134
    33bc:	86 2f       	mov	r24, r22
    33be:	70 e0       	ldi	r23, 0x00	; 0
    33c0:	60 e0       	ldi	r22, 0x00	; 0
    33c2:	2a f0       	brmi	.+10     	; 0x33ce <__floatsisf+0x6c>
    33c4:	9a 95       	dec	r25
    33c6:	66 0f       	add	r22, r22
    33c8:	77 1f       	adc	r23, r23
    33ca:	88 1f       	adc	r24, r24
    33cc:	da f7       	brpl	.-10     	; 0x33c4 <__floatsisf+0x62>
    33ce:	88 0f       	add	r24, r24
    33d0:	96 95       	lsr	r25
    33d2:	87 95       	ror	r24
    33d4:	97 f9       	bld	r25, 7
    33d6:	08 95       	ret

000033d8 <__fp_cmp>:
    33d8:	99 0f       	add	r25, r25
    33da:	00 08       	sbc	r0, r0
    33dc:	55 0f       	add	r21, r21
    33de:	aa 0b       	sbc	r26, r26
    33e0:	e0 e8       	ldi	r30, 0x80	; 128
    33e2:	fe ef       	ldi	r31, 0xFE	; 254
    33e4:	16 16       	cp	r1, r22
    33e6:	17 06       	cpc	r1, r23
    33e8:	e8 07       	cpc	r30, r24
    33ea:	f9 07       	cpc	r31, r25
    33ec:	c0 f0       	brcs	.+48     	; 0x341e <__fp_cmp+0x46>
    33ee:	12 16       	cp	r1, r18
    33f0:	13 06       	cpc	r1, r19
    33f2:	e4 07       	cpc	r30, r20
    33f4:	f5 07       	cpc	r31, r21
    33f6:	98 f0       	brcs	.+38     	; 0x341e <__fp_cmp+0x46>
    33f8:	62 1b       	sub	r22, r18
    33fa:	73 0b       	sbc	r23, r19
    33fc:	84 0b       	sbc	r24, r20
    33fe:	95 0b       	sbc	r25, r21
    3400:	39 f4       	brne	.+14     	; 0x3410 <__fp_cmp+0x38>
    3402:	0a 26       	eor	r0, r26
    3404:	61 f0       	breq	.+24     	; 0x341e <__fp_cmp+0x46>
    3406:	23 2b       	or	r18, r19
    3408:	24 2b       	or	r18, r20
    340a:	25 2b       	or	r18, r21
    340c:	21 f4       	brne	.+8      	; 0x3416 <__fp_cmp+0x3e>
    340e:	08 95       	ret
    3410:	0a 26       	eor	r0, r26
    3412:	09 f4       	brne	.+2      	; 0x3416 <__fp_cmp+0x3e>
    3414:	a1 40       	sbci	r26, 0x01	; 1
    3416:	a6 95       	lsr	r26
    3418:	8f ef       	ldi	r24, 0xFF	; 255
    341a:	81 1d       	adc	r24, r1
    341c:	81 1d       	adc	r24, r1
    341e:	08 95       	ret

00003420 <__fp_inf>:
    3420:	97 f9       	bld	r25, 7
    3422:	9f 67       	ori	r25, 0x7F	; 127
    3424:	80 e8       	ldi	r24, 0x80	; 128
    3426:	70 e0       	ldi	r23, 0x00	; 0
    3428:	60 e0       	ldi	r22, 0x00	; 0
    342a:	08 95       	ret

0000342c <__fp_nan>:
    342c:	9f ef       	ldi	r25, 0xFF	; 255
    342e:	80 ec       	ldi	r24, 0xC0	; 192
    3430:	08 95       	ret

00003432 <__fp_powser>:
    3432:	df 93       	push	r29
    3434:	cf 93       	push	r28
    3436:	1f 93       	push	r17
    3438:	0f 93       	push	r16
    343a:	ff 92       	push	r15
    343c:	ef 92       	push	r14
    343e:	df 92       	push	r13
    3440:	7b 01       	movw	r14, r22
    3442:	8c 01       	movw	r16, r24
    3444:	68 94       	set
    3446:	06 c0       	rjmp	.+12     	; 0x3454 <__fp_powser+0x22>
    3448:	da 2e       	mov	r13, r26
    344a:	ef 01       	movw	r28, r30
    344c:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__mulsf3x>
    3450:	fe 01       	movw	r30, r28
    3452:	e8 94       	clt
    3454:	a5 91       	lpm	r26, Z+
    3456:	25 91       	lpm	r18, Z+
    3458:	35 91       	lpm	r19, Z+
    345a:	45 91       	lpm	r20, Z+
    345c:	55 91       	lpm	r21, Z+
    345e:	a6 f3       	brts	.-24     	; 0x3448 <__fp_powser+0x16>
    3460:	ef 01       	movw	r28, r30
    3462:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3x>
    3466:	fe 01       	movw	r30, r28
    3468:	97 01       	movw	r18, r14
    346a:	a8 01       	movw	r20, r16
    346c:	da 94       	dec	r13
    346e:	69 f7       	brne	.-38     	; 0x344a <__fp_powser+0x18>
    3470:	df 90       	pop	r13
    3472:	ef 90       	pop	r14
    3474:	ff 90       	pop	r15
    3476:	0f 91       	pop	r16
    3478:	1f 91       	pop	r17
    347a:	cf 91       	pop	r28
    347c:	df 91       	pop	r29
    347e:	08 95       	ret

00003480 <__fp_pscA>:
    3480:	00 24       	eor	r0, r0
    3482:	0a 94       	dec	r0
    3484:	16 16       	cp	r1, r22
    3486:	17 06       	cpc	r1, r23
    3488:	18 06       	cpc	r1, r24
    348a:	09 06       	cpc	r0, r25
    348c:	08 95       	ret

0000348e <__fp_pscB>:
    348e:	00 24       	eor	r0, r0
    3490:	0a 94       	dec	r0
    3492:	12 16       	cp	r1, r18
    3494:	13 06       	cpc	r1, r19
    3496:	14 06       	cpc	r1, r20
    3498:	05 06       	cpc	r0, r21
    349a:	08 95       	ret
    349c:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__fp_nan>

000034a0 <__fp_rempio2>:
    34a0:	0e 94 a6 1a 	call	0x354c	; 0x354c <__fp_splitA>
    34a4:	d8 f3       	brcs	.-10     	; 0x349c <__fp_pscB+0xe>
    34a6:	e8 94       	clt
    34a8:	e0 e0       	ldi	r30, 0x00	; 0
    34aa:	bb 27       	eor	r27, r27
    34ac:	9f 57       	subi	r25, 0x7F	; 127
    34ae:	f0 f0       	brcs	.+60     	; 0x34ec <__fp_rempio2+0x4c>
    34b0:	2a ed       	ldi	r18, 0xDA	; 218
    34b2:	3f e0       	ldi	r19, 0x0F	; 15
    34b4:	49 ec       	ldi	r20, 0xC9	; 201
    34b6:	06 c0       	rjmp	.+12     	; 0x34c4 <__fp_rempio2+0x24>
    34b8:	ee 0f       	add	r30, r30
    34ba:	bb 0f       	add	r27, r27
    34bc:	66 1f       	adc	r22, r22
    34be:	77 1f       	adc	r23, r23
    34c0:	88 1f       	adc	r24, r24
    34c2:	28 f0       	brcs	.+10     	; 0x34ce <__fp_rempio2+0x2e>
    34c4:	b2 3a       	cpi	r27, 0xA2	; 162
    34c6:	62 07       	cpc	r22, r18
    34c8:	73 07       	cpc	r23, r19
    34ca:	84 07       	cpc	r24, r20
    34cc:	28 f0       	brcs	.+10     	; 0x34d8 <__fp_rempio2+0x38>
    34ce:	b2 5a       	subi	r27, 0xA2	; 162
    34d0:	62 0b       	sbc	r22, r18
    34d2:	73 0b       	sbc	r23, r19
    34d4:	84 0b       	sbc	r24, r20
    34d6:	e3 95       	inc	r30
    34d8:	9a 95       	dec	r25
    34da:	72 f7       	brpl	.-36     	; 0x34b8 <__fp_rempio2+0x18>
    34dc:	80 38       	cpi	r24, 0x80	; 128
    34de:	30 f4       	brcc	.+12     	; 0x34ec <__fp_rempio2+0x4c>
    34e0:	9a 95       	dec	r25
    34e2:	bb 0f       	add	r27, r27
    34e4:	66 1f       	adc	r22, r22
    34e6:	77 1f       	adc	r23, r23
    34e8:	88 1f       	adc	r24, r24
    34ea:	d2 f7       	brpl	.-12     	; 0x34e0 <__fp_rempio2+0x40>
    34ec:	90 48       	sbci	r25, 0x80	; 128
    34ee:	0c 94 95 1b 	jmp	0x372a	; 0x372a <__fp_mpack_finite>

000034f2 <__fp_round>:
    34f2:	09 2e       	mov	r0, r25
    34f4:	03 94       	inc	r0
    34f6:	00 0c       	add	r0, r0
    34f8:	11 f4       	brne	.+4      	; 0x34fe <__fp_round+0xc>
    34fa:	88 23       	and	r24, r24
    34fc:	52 f0       	brmi	.+20     	; 0x3512 <__fp_round+0x20>
    34fe:	bb 0f       	add	r27, r27
    3500:	40 f4       	brcc	.+16     	; 0x3512 <__fp_round+0x20>
    3502:	bf 2b       	or	r27, r31
    3504:	11 f4       	brne	.+4      	; 0x350a <__fp_round+0x18>
    3506:	60 ff       	sbrs	r22, 0
    3508:	04 c0       	rjmp	.+8      	; 0x3512 <__fp_round+0x20>
    350a:	6f 5f       	subi	r22, 0xFF	; 255
    350c:	7f 4f       	sbci	r23, 0xFF	; 255
    350e:	8f 4f       	sbci	r24, 0xFF	; 255
    3510:	9f 4f       	sbci	r25, 0xFF	; 255
    3512:	08 95       	ret

00003514 <__fp_sinus>:
    3514:	ef 93       	push	r30
    3516:	e0 ff       	sbrs	r30, 0
    3518:	07 c0       	rjmp	.+14     	; 0x3528 <__fp_sinus+0x14>
    351a:	a2 ea       	ldi	r26, 0xA2	; 162
    351c:	2a ed       	ldi	r18, 0xDA	; 218
    351e:	3f e0       	ldi	r19, 0x0F	; 15
    3520:	49 ec       	ldi	r20, 0xC9	; 201
    3522:	5f eb       	ldi	r21, 0xBF	; 191
    3524:	0e 94 3d 18 	call	0x307a	; 0x307a <__addsf3x>
    3528:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__fp_round>
    352c:	0f 90       	pop	r0
    352e:	03 94       	inc	r0
    3530:	01 fc       	sbrc	r0, 1
    3532:	90 58       	subi	r25, 0x80	; 128
    3534:	e5 e0       	ldi	r30, 0x05	; 5
    3536:	f1 e0       	ldi	r31, 0x01	; 1
    3538:	0c 94 a8 1b 	jmp	0x3750	; 0x3750 <__fp_powsodd>

0000353c <__fp_split3>:
    353c:	57 fd       	sbrc	r21, 7
    353e:	90 58       	subi	r25, 0x80	; 128
    3540:	44 0f       	add	r20, r20
    3542:	55 1f       	adc	r21, r21
    3544:	59 f0       	breq	.+22     	; 0x355c <__fp_splitA+0x10>
    3546:	5f 3f       	cpi	r21, 0xFF	; 255
    3548:	71 f0       	breq	.+28     	; 0x3566 <__fp_splitA+0x1a>
    354a:	47 95       	ror	r20

0000354c <__fp_splitA>:
    354c:	88 0f       	add	r24, r24
    354e:	97 fb       	bst	r25, 7
    3550:	99 1f       	adc	r25, r25
    3552:	61 f0       	breq	.+24     	; 0x356c <__fp_splitA+0x20>
    3554:	9f 3f       	cpi	r25, 0xFF	; 255
    3556:	79 f0       	breq	.+30     	; 0x3576 <__fp_splitA+0x2a>
    3558:	87 95       	ror	r24
    355a:	08 95       	ret
    355c:	12 16       	cp	r1, r18
    355e:	13 06       	cpc	r1, r19
    3560:	14 06       	cpc	r1, r20
    3562:	55 1f       	adc	r21, r21
    3564:	f2 cf       	rjmp	.-28     	; 0x354a <__fp_split3+0xe>
    3566:	46 95       	lsr	r20
    3568:	f1 df       	rcall	.-30     	; 0x354c <__fp_splitA>
    356a:	08 c0       	rjmp	.+16     	; 0x357c <__fp_splitA+0x30>
    356c:	16 16       	cp	r1, r22
    356e:	17 06       	cpc	r1, r23
    3570:	18 06       	cpc	r1, r24
    3572:	99 1f       	adc	r25, r25
    3574:	f1 cf       	rjmp	.-30     	; 0x3558 <__fp_splitA+0xc>
    3576:	86 95       	lsr	r24
    3578:	71 05       	cpc	r23, r1
    357a:	61 05       	cpc	r22, r1
    357c:	08 94       	sec
    357e:	08 95       	ret

00003580 <__fp_zero>:
    3580:	e8 94       	clt

00003582 <__fp_szero>:
    3582:	bb 27       	eor	r27, r27
    3584:	66 27       	eor	r22, r22
    3586:	77 27       	eor	r23, r23
    3588:	cb 01       	movw	r24, r22
    358a:	97 f9       	bld	r25, 7
    358c:	08 95       	ret

0000358e <__gesf2>:
    358e:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__fp_cmp>
    3592:	08 f4       	brcc	.+2      	; 0x3596 <__gesf2+0x8>
    3594:	8f ef       	ldi	r24, 0xFF	; 255
    3596:	08 95       	ret

00003598 <inverse>:
    3598:	9b 01       	movw	r18, r22
    359a:	ac 01       	movw	r20, r24
    359c:	60 e0       	ldi	r22, 0x00	; 0
    359e:	70 e0       	ldi	r23, 0x00	; 0
    35a0:	80 e8       	ldi	r24, 0x80	; 128
    35a2:	9f e3       	ldi	r25, 0x3F	; 63
    35a4:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__divsf3>

000035a8 <__mulsf3>:
    35a8:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__mulsf3x>
    35ac:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__fp_round>
    35b0:	0e 94 40 1a 	call	0x3480	; 0x3480 <__fp_pscA>
    35b4:	38 f0       	brcs	.+14     	; 0x35c4 <__mulsf3+0x1c>
    35b6:	0e 94 47 1a 	call	0x348e	; 0x348e <__fp_pscB>
    35ba:	20 f0       	brcs	.+8      	; 0x35c4 <__mulsf3+0x1c>
    35bc:	95 23       	and	r25, r21
    35be:	11 f0       	breq	.+4      	; 0x35c4 <__mulsf3+0x1c>
    35c0:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__fp_inf>
    35c4:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__fp_nan>
    35c8:	11 24       	eor	r1, r1
    35ca:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_szero>

000035ce <__mulsf3x>:
    35ce:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fp_split3>
    35d2:	70 f3       	brcs	.-36     	; 0x35b0 <__mulsf3+0x8>

000035d4 <__mulsf3_pse>:
    35d4:	95 9f       	mul	r25, r21
    35d6:	c1 f3       	breq	.-16     	; 0x35c8 <__mulsf3+0x20>
    35d8:	95 0f       	add	r25, r21
    35da:	50 e0       	ldi	r21, 0x00	; 0
    35dc:	55 1f       	adc	r21, r21
    35de:	62 9f       	mul	r22, r18
    35e0:	f0 01       	movw	r30, r0
    35e2:	72 9f       	mul	r23, r18
    35e4:	bb 27       	eor	r27, r27
    35e6:	f0 0d       	add	r31, r0
    35e8:	b1 1d       	adc	r27, r1
    35ea:	63 9f       	mul	r22, r19
    35ec:	aa 27       	eor	r26, r26
    35ee:	f0 0d       	add	r31, r0
    35f0:	b1 1d       	adc	r27, r1
    35f2:	aa 1f       	adc	r26, r26
    35f4:	64 9f       	mul	r22, r20
    35f6:	66 27       	eor	r22, r22
    35f8:	b0 0d       	add	r27, r0
    35fa:	a1 1d       	adc	r26, r1
    35fc:	66 1f       	adc	r22, r22
    35fe:	82 9f       	mul	r24, r18
    3600:	22 27       	eor	r18, r18
    3602:	b0 0d       	add	r27, r0
    3604:	a1 1d       	adc	r26, r1
    3606:	62 1f       	adc	r22, r18
    3608:	73 9f       	mul	r23, r19
    360a:	b0 0d       	add	r27, r0
    360c:	a1 1d       	adc	r26, r1
    360e:	62 1f       	adc	r22, r18
    3610:	83 9f       	mul	r24, r19
    3612:	a0 0d       	add	r26, r0
    3614:	61 1d       	adc	r22, r1
    3616:	22 1f       	adc	r18, r18
    3618:	74 9f       	mul	r23, r20
    361a:	33 27       	eor	r19, r19
    361c:	a0 0d       	add	r26, r0
    361e:	61 1d       	adc	r22, r1
    3620:	23 1f       	adc	r18, r19
    3622:	84 9f       	mul	r24, r20
    3624:	60 0d       	add	r22, r0
    3626:	21 1d       	adc	r18, r1
    3628:	82 2f       	mov	r24, r18
    362a:	76 2f       	mov	r23, r22
    362c:	6a 2f       	mov	r22, r26
    362e:	11 24       	eor	r1, r1
    3630:	9f 57       	subi	r25, 0x7F	; 127
    3632:	50 40       	sbci	r21, 0x00	; 0
    3634:	9a f0       	brmi	.+38     	; 0x365c <__mulsf3_pse+0x88>
    3636:	f1 f0       	breq	.+60     	; 0x3674 <__mulsf3_pse+0xa0>
    3638:	88 23       	and	r24, r24
    363a:	4a f0       	brmi	.+18     	; 0x364e <__mulsf3_pse+0x7a>
    363c:	ee 0f       	add	r30, r30
    363e:	ff 1f       	adc	r31, r31
    3640:	bb 1f       	adc	r27, r27
    3642:	66 1f       	adc	r22, r22
    3644:	77 1f       	adc	r23, r23
    3646:	88 1f       	adc	r24, r24
    3648:	91 50       	subi	r25, 0x01	; 1
    364a:	50 40       	sbci	r21, 0x00	; 0
    364c:	a9 f7       	brne	.-22     	; 0x3638 <__mulsf3_pse+0x64>
    364e:	9e 3f       	cpi	r25, 0xFE	; 254
    3650:	51 05       	cpc	r21, r1
    3652:	80 f0       	brcs	.+32     	; 0x3674 <__mulsf3_pse+0xa0>
    3654:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__fp_inf>
    3658:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_szero>
    365c:	5f 3f       	cpi	r21, 0xFF	; 255
    365e:	e4 f3       	brlt	.-8      	; 0x3658 <__mulsf3_pse+0x84>
    3660:	98 3e       	cpi	r25, 0xE8	; 232
    3662:	d4 f3       	brlt	.-12     	; 0x3658 <__mulsf3_pse+0x84>
    3664:	86 95       	lsr	r24
    3666:	77 95       	ror	r23
    3668:	67 95       	ror	r22
    366a:	b7 95       	ror	r27
    366c:	f7 95       	ror	r31
    366e:	e7 95       	ror	r30
    3670:	9f 5f       	subi	r25, 0xFF	; 255
    3672:	c1 f7       	brne	.-16     	; 0x3664 <__mulsf3_pse+0x90>
    3674:	fe 2b       	or	r31, r30
    3676:	88 0f       	add	r24, r24
    3678:	91 1d       	adc	r25, r1
    367a:	96 95       	lsr	r25
    367c:	87 95       	ror	r24
    367e:	97 f9       	bld	r25, 7
    3680:	08 95       	ret

00003682 <sin>:
    3682:	9f 93       	push	r25
    3684:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__fp_rempio2>
    3688:	0f 90       	pop	r0
    368a:	07 fc       	sbrc	r0, 7
    368c:	ee 5f       	subi	r30, 0xFE	; 254
    368e:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <__fp_sinus>
    3692:	19 f4       	brne	.+6      	; 0x369a <sin+0x18>
    3694:	16 f4       	brtc	.+4      	; 0x369a <sin+0x18>
    3696:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__fp_nan>
    369a:	0c 94 93 1b 	jmp	0x3726	; 0x3726 <__fp_mpack>

0000369e <sqrt>:
    369e:	0e 94 a6 1a 	call	0x354c	; 0x354c <__fp_splitA>
    36a2:	b8 f3       	brcs	.-18     	; 0x3692 <sin+0x10>
    36a4:	99 23       	and	r25, r25
    36a6:	c9 f3       	breq	.-14     	; 0x369a <sin+0x18>
    36a8:	b6 f3       	brts	.-20     	; 0x3696 <sin+0x14>
    36aa:	9f 57       	subi	r25, 0x7F	; 127
    36ac:	55 0b       	sbc	r21, r21
    36ae:	87 ff       	sbrs	r24, 7
    36b0:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__fp_norm2>
    36b4:	00 24       	eor	r0, r0
    36b6:	a0 e6       	ldi	r26, 0x60	; 96
    36b8:	40 ea       	ldi	r20, 0xA0	; 160
    36ba:	90 01       	movw	r18, r0
    36bc:	80 58       	subi	r24, 0x80	; 128
    36be:	56 95       	lsr	r21
    36c0:	97 95       	ror	r25
    36c2:	28 f4       	brcc	.+10     	; 0x36ce <sqrt+0x30>
    36c4:	80 5c       	subi	r24, 0xC0	; 192
    36c6:	66 0f       	add	r22, r22
    36c8:	77 1f       	adc	r23, r23
    36ca:	88 1f       	adc	r24, r24
    36cc:	20 f0       	brcs	.+8      	; 0x36d6 <sqrt+0x38>
    36ce:	26 17       	cp	r18, r22
    36d0:	37 07       	cpc	r19, r23
    36d2:	48 07       	cpc	r20, r24
    36d4:	30 f4       	brcc	.+12     	; 0x36e2 <sqrt+0x44>
    36d6:	62 1b       	sub	r22, r18
    36d8:	73 0b       	sbc	r23, r19
    36da:	84 0b       	sbc	r24, r20
    36dc:	20 29       	or	r18, r0
    36de:	31 29       	or	r19, r1
    36e0:	4a 2b       	or	r20, r26
    36e2:	a6 95       	lsr	r26
    36e4:	17 94       	ror	r1
    36e6:	07 94       	ror	r0
    36e8:	20 25       	eor	r18, r0
    36ea:	31 25       	eor	r19, r1
    36ec:	4a 27       	eor	r20, r26
    36ee:	58 f7       	brcc	.-42     	; 0x36c6 <sqrt+0x28>
    36f0:	66 0f       	add	r22, r22
    36f2:	77 1f       	adc	r23, r23
    36f4:	88 1f       	adc	r24, r24
    36f6:	20 f0       	brcs	.+8      	; 0x3700 <sqrt+0x62>
    36f8:	26 17       	cp	r18, r22
    36fa:	37 07       	cpc	r19, r23
    36fc:	48 07       	cpc	r20, r24
    36fe:	30 f4       	brcc	.+12     	; 0x370c <sqrt+0x6e>
    3700:	62 0b       	sbc	r22, r18
    3702:	73 0b       	sbc	r23, r19
    3704:	84 0b       	sbc	r24, r20
    3706:	20 0d       	add	r18, r0
    3708:	31 1d       	adc	r19, r1
    370a:	41 1d       	adc	r20, r1
    370c:	a0 95       	com	r26
    370e:	81 f7       	brne	.-32     	; 0x36f0 <sqrt+0x52>
    3710:	b9 01       	movw	r22, r18
    3712:	84 2f       	mov	r24, r20
    3714:	91 58       	subi	r25, 0x81	; 129
    3716:	88 0f       	add	r24, r24
    3718:	96 95       	lsr	r25
    371a:	87 95       	ror	r24
    371c:	08 95       	ret

0000371e <square>:
    371e:	9b 01       	movw	r18, r22
    3720:	ac 01       	movw	r20, r24
    3722:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__mulsf3>

00003726 <__fp_mpack>:
    3726:	9f 3f       	cpi	r25, 0xFF	; 255
    3728:	31 f0       	breq	.+12     	; 0x3736 <__fp_mpack_finite+0xc>

0000372a <__fp_mpack_finite>:
    372a:	91 50       	subi	r25, 0x01	; 1
    372c:	20 f4       	brcc	.+8      	; 0x3736 <__fp_mpack_finite+0xc>
    372e:	87 95       	ror	r24
    3730:	77 95       	ror	r23
    3732:	67 95       	ror	r22
    3734:	b7 95       	ror	r27
    3736:	88 0f       	add	r24, r24
    3738:	91 1d       	adc	r25, r1
    373a:	96 95       	lsr	r25
    373c:	87 95       	ror	r24
    373e:	97 f9       	bld	r25, 7
    3740:	08 95       	ret

00003742 <__fp_norm2>:
    3742:	91 50       	subi	r25, 0x01	; 1
    3744:	50 40       	sbci	r21, 0x00	; 0
    3746:	66 0f       	add	r22, r22
    3748:	77 1f       	adc	r23, r23
    374a:	88 1f       	adc	r24, r24
    374c:	d2 f7       	brpl	.-12     	; 0x3742 <__fp_norm2>
    374e:	08 95       	ret

00003750 <__fp_powsodd>:
    3750:	9f 93       	push	r25
    3752:	8f 93       	push	r24
    3754:	7f 93       	push	r23
    3756:	6f 93       	push	r22
    3758:	ff 93       	push	r31
    375a:	ef 93       	push	r30
    375c:	9b 01       	movw	r18, r22
    375e:	ac 01       	movw	r20, r24
    3760:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__mulsf3>
    3764:	ef 91       	pop	r30
    3766:	ff 91       	pop	r31
    3768:	0e 94 19 1a 	call	0x3432	; 0x3432 <__fp_powser>
    376c:	2f 91       	pop	r18
    376e:	3f 91       	pop	r19
    3770:	4f 91       	pop	r20
    3772:	5f 91       	pop	r21
    3774:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__mulsf3>

00003778 <__tablejump2__>:
    3778:	ee 0f       	add	r30, r30
    377a:	ff 1f       	adc	r31, r31
    377c:	05 90       	lpm	r0, Z+
    377e:	f4 91       	lpm	r31, Z
    3780:	e0 2d       	mov	r30, r0
    3782:	09 94       	ijmp

00003784 <_exit>:
    3784:	f8 94       	cli

00003786 <__stop_program>:
    3786:	ff cf       	rjmp	.-2      	; 0x3786 <__stop_program>
