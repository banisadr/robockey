
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  0000328e  00003322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000328e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000087  0080015c  0080015c  0000337e  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000337e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000033e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003147  00000000  00000000  00003760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e51  00000000  00000000  000068a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013f5  00000000  00000000  000076f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b1c  00000000  00000000  00008af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cab  00000000  00000000  0000960c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003dcd  00000000  00000000  0000a2b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  0000e084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__vector_3>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__vector_10>
      2c:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__vector_11>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_17>
      48:	0c 94 97 09 	jmp	0x132e	; 0x132e <__vector_18>
      4c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_19>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__vector_23>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	33 09       	sbc	r19, r3
      ae:	36 09       	sbc	r19, r6
      b0:	39 09       	sbc	r19, r9
      b2:	44 09       	sbc	r20, r4
      b4:	4f 09       	sbc	r20, r15
      b6:	57 09       	sbc	r21, r7
      b8:	52 09       	sbc	r21, r2
      ba:	55 09       	sbc	r21, r5
      bc:	e4 13       	cpse	r30, r20
      be:	04 14       	cp	r0, r4
      c0:	24 14       	cp	r2, r4
      c2:	44 14       	cp	r4, r4
      c4:	64 14       	cp	r6, r4
      c6:	84 14       	cp	r8, r4
      c8:	a4 14       	cp	r10, r4
      ca:	c4 14       	cp	r12, r4
      cc:	e4 14       	cp	r14, r4
      ce:	04 15       	cp	r16, r4
      d0:	24 15       	cp	r18, r4
      d2:	44 15       	cp	r20, r4
      d4:	08 4a       	sbci	r16, 0xA8	; 168
      d6:	d7 3b       	cpi	r29, 0xB7	; 183
      d8:	3b ce       	rjmp	.-906    	; 0xfffffd50 <__eeprom_end+0xff7efd50>
      da:	01 6e       	ori	r16, 0xE1	; 225
      dc:	84 bc       	out	0x24, r8	; 36
      de:	bf fd       	.word	0xfdbf	; ????
      e0:	c1 2f       	mov	r28, r17
      e2:	3d 6c       	ori	r19, 0xCD	; 205
      e4:	74 31       	cpi	r23, 0x14	; 20
      e6:	9a bd       	out	0x2a, r25	; 42
      e8:	56 83       	std	Z+6, r21	; 0x06
      ea:	3d da       	rcall	.-2950   	; 0xfffff566 <__eeprom_end+0xff7ef566>
      ec:	3d 00       	.word	0x003d	; ????
      ee:	c7 7f       	andi	r28, 0xF7	; 247
      f0:	11 be       	out	0x31, r1	; 49
      f2:	d9 e4       	ldi	r29, 0x49	; 73
      f4:	bb 4c       	sbci	r27, 0xCB	; 203
      f6:	3e 91       	ld	r19, -X
      f8:	6b aa       	std	Y+51, r6	; 0x33
      fa:	aa be       	out	0x3a, r10	; 58
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 00       	.word	0x003f	; ????

00000120 <__trampolines_end>:
     120:	00 01       	movw	r0, r0
     122:	00 00       	nop
     124:	b7 01       	movw	r22, r14
     126:	12 00       	.word	0x0012	; ????
     128:	02 00       	.word	0x0002	; ????
     12a:	00 74       	andi	r16, 0x40	; 64
     12c:	01 43       	sbci	r16, 0x31	; 49
     12e:	00 03       	mulsu	r16, r16
     130:	00 00       	nop
     132:	70 01       	movw	r14, r0
     134:	04 01       	movw	r0, r8
     136:	03 09       	sbc	r16, r3
     138:	04 5c       	subi	r16, 0xC4	; 196
     13a:	01 12       	cpse	r0, r17
     13c:	02 03       	mulsu	r16, r18
     13e:	09 04       	cpc	r0, r9
     140:	54 01       	movw	r10, r8
     142:	06 03       	mulsu	r16, r22
     144:	03 09       	sbc	r16, r3
     146:	04 4a       	sbci	r16, 0xA4	; 164
     148:	01 08       	sbc	r0, r1

0000014a <string3>:
     14a:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000154 <string2>:
     154:	06 03 4d 00 32 00 00 00                             ..M.2...

0000015c <string1>:
     15c:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     16c:	65 00 00 00                                         e...

00000170 <string0>:
     170:	04 03 09 04                                         ....

00000174 <config1_descriptor>:
     174:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     184:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     194:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1a4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1b4:	40 00 00                                            @..

000001b7 <device_descriptor>:
     1b7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1c7:	03 01                                               ..

000001c9 <endpoint_config_table>:
     1c9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	da e0       	ldi	r29, 0x0A	; 10
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	ee e8       	ldi	r30, 0x8E	; 142
     1e8:	f2 e3       	ldi	r31, 0x32	; 50
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	ac 35       	cpi	r26, 0x5C	; 92
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	ac e5       	ldi	r26, 0x5C	; 92
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a3 3e       	cpi	r26, 0xE3	; 227
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 64 09 	call	0x12c8	; 0x12c8 <main>
     20a:	0c 94 45 19 	jmp	0x328a	; 0x328a <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(void) {
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
/************************************************************
Initialization of Pins and System Clock
************************************************************/

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     216:	e1 e6       	ldi	r30, 0x61	; 97
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 e8       	ldi	r24, 0x80	; 128
     21c:	80 83       	st	Z, r24
     21e:	10 82       	st	Z, r1

	// Disable JTAG
	m_disableJTAG(); // turn off JTAG port and allow access to F4-F7 as GPIO
     220:	85 bf       	out	0x35, r24	; 53
     222:	85 bf       	out	0x35, r24	; 53
	
	//Set to Input
	clear(DDRD,0); // D0
     224:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     226:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     228:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     22a:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     22c:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     22e:	23 9a       	sbi	0x04, 3	; 4
	
	set(DDRC,6); //C6 Red positioning LED
     230:	3e 9a       	sbi	0x07, 6	; 7
	set(DDRC,7); //C7 Blue positioning LED 
     232:	3f 9a       	sbi	0x07, 7	; 7
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     234:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     236:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     238:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     23a:	2b 98       	cbi	0x05, 3	; 5
	
	clear(PORTC,6); //Start with positioning LED off
     23c:	46 98       	cbi	0x08, 6	; 8
	clear(PORTC,7); 
     23e:	47 98       	cbi	0x08, 7	; 8

/************************************************************
Setup Subsystems
************************************************************/

	m_bus_init();
     240:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <m_bus_init>
	while(!m_wii_open());
     244:	0e 94 1f 11 	call	0x223e	; 0x223e <m_wii_open>
     248:	88 23       	and	r24, r24
     24a:	e1 f3       	breq	.-8      	; 0x244 <initialize_robockey+0x32>
	sei();
     24c:	78 94       	sei
	m_usb_init();
     24e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <m_usb_init>
	while(!m_rf_open(CHANNEL,RXADDRESS_1,PACKET_LENGTH)); // Configure mRF
     252:	4a e0       	ldi	r20, 0x0A	; 10
     254:	60 e2       	ldi	r22, 0x20	; 32
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <m_rf_open>
     25c:	88 23       	and	r24, r24
     25e:	c9 f3       	breq	.-14     	; 0x252 <initialize_robockey+0x40>
/************************************************************
Timer1 Initialization for PWM Motor Control
************************************************************/

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     260:	e1 e8       	ldi	r30, 0x81	; 129
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	8b 7f       	andi	r24, 0xFB	; 251
     268:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     26a:	80 81       	ld	r24, Z
     26c:	8d 7f       	andi	r24, 0xFD	; 253
     26e:	80 83       	st	Z, r24
	clear(TCCR1B,CS10);
     270:	80 81       	ld	r24, Z
     272:	8e 7f       	andi	r24, 0xFE	; 254
     274:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     276:	80 81       	ld	r24, Z
     278:	8f 7e       	andi	r24, 0xEF	; 239
     27a:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     27c:	80 81       	ld	r24, Z
     27e:	88 60       	ori	r24, 0x08	; 8
     280:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     282:	e0 e8       	ldi	r30, 0x80	; 128
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	8d 7f       	andi	r24, 0xFD	; 253
     28a:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     28c:	80 81       	ld	r24, Z
     28e:	8e 7f       	andi	r24, 0xFE	; 254
     290:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     292:	80 81       	ld	r24, Z
     294:	8f 7d       	andi	r24, 0xDF	; 223
     296:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     298:	80 81       	ld	r24, Z
     29a:	8f 7e       	andi	r24, 0xEF	; 239
     29c:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     29e:	c8 e8       	ldi	r28, 0x88	; 136
     2a0:	d0 e0       	ldi	r29, 0x00	; 0
     2a2:	8a ea       	ldi	r24, 0xAA	; 170
     2a4:	99 e2       	ldi	r25, 0x29	; 41
     2a6:	99 83       	std	Y+1, r25	; 0x01
     2a8:	88 83       	st	Y, r24
	OCR1B = (float)OCR1A*0.1;
     2aa:	68 81       	ld	r22, Y
     2ac:	79 81       	ldd	r23, Y+1	; 0x01
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__floatunsisf>
     2b6:	2d ec       	ldi	r18, 0xCD	; 205
     2b8:	3c ec       	ldi	r19, 0xCC	; 204
     2ba:	4c ec       	ldi	r20, 0xCC	; 204
     2bc:	5d e3       	ldi	r21, 0x3D	; 61
     2be:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     2c2:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__fixunssfsi>
     2c6:	70 93 8b 00 	sts	0x008B, r23
     2ca:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     2ce:	68 81       	ld	r22, Y
     2d0:	79 81       	ldd	r23, Y+1	; 0x01
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__floatunsisf>
     2da:	2d ec       	ldi	r18, 0xCD	; 205
     2dc:	3c ec       	ldi	r19, 0xCC	; 204
     2de:	4c ec       	ldi	r20, 0xCC	; 204
     2e0:	5d e3       	ldi	r21, 0x3D	; 61
     2e2:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     2e6:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__fixunssfsi>
     2ea:	70 93 8d 00 	sts	0x008D, r23
     2ee:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     2f2:	ef e6       	ldi	r30, 0x6F	; 111
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	82 60       	ori	r24, 0x02	; 2
     2fa:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     2fc:	80 81       	ld	r24, Z
     2fe:	84 60       	ori	r24, 0x04	; 4
     300:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     302:	80 81       	ld	r24, Z
     304:	88 60       	ori	r24, 0x08	; 8
     306:	80 83       	st	Z, r24

/************************************************************
Timer3 Initialization for fixed timestep calculations
************************************************************/

	clear(TCCR3B,CS32); // prescale /1
     308:	e1 e9       	ldi	r30, 0x91	; 145
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	8b 7f       	andi	r24, 0xFB	; 251
     310:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     312:	80 81       	ld	r24, Z
     314:	8d 7f       	andi	r24, 0xFD	; 253
     316:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     318:	80 81       	ld	r24, Z
     31a:	81 60       	ori	r24, 0x01	; 1
     31c:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     31e:	80 81       	ld	r24, Z
     320:	8f 7e       	andi	r24, 0xEF	; 239
     322:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     324:	80 81       	ld	r24, Z
     326:	88 60       	ori	r24, 0x08	; 8
     328:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     32a:	e0 e9       	ldi	r30, 0x90	; 144
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	8d 7f       	andi	r24, 0xFD	; 253
     332:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     334:	80 81       	ld	r24, Z
     336:	8e 7f       	andi	r24, 0xFE	; 254
     338:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     33a:	80 e8       	ldi	r24, 0x80	; 128
     33c:	9e e3       	ldi	r25, 0x3E	; 62
     33e:	90 93 99 00 	sts	0x0099, r25
     342:	80 93 98 00 	sts	0x0098, r24

/************************************************************
Timer0 Initialization for COMM test 
************************************************************/
	clear(TCCR0B,CS02); //start with timer off
     346:	85 b5       	in	r24, 0x25	; 37
     348:	8b 7f       	andi	r24, 0xFB	; 251
     34a:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS01);
     34c:	85 b5       	in	r24, 0x25	; 37
     34e:	8d 7f       	andi	r24, 0xFD	; 253
     350:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS00);
     352:	85 b5       	in	r24, 0x25	; 37
     354:	8e 7f       	andi	r24, 0xFE	; 254
     356:	85 bd       	out	0x25, r24	; 37
	
	clear(TCCR0B,WGM02); //Up to OCR0A mode 
     358:	85 b5       	in	r24, 0x25	; 37
     35a:	87 7f       	andi	r24, 0xF7	; 247
     35c:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0A,WGM01);
     35e:	84 b5       	in	r24, 0x24	; 36
     360:	8d 7f       	andi	r24, 0xFD	; 253
     362:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A,WGM00);
     364:	84 b5       	in	r24, 0x24	; 36
     366:	8e 7f       	andi	r24, 0xFE	; 254
     368:	84 bd       	out	0x24, r24	; 36
		
	set(TIMSK0,TOIE0); //enable interupt at OCR0A
     36a:	ee e6       	ldi	r30, 0x6E	; 110
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	80 81       	ld	r24, Z
     370:	81 60       	ori	r24, 0x01	; 1
     372:	80 83       	st	Z, r24
	
/************************************************************
Setup ADC
************************************************************/
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
     374:	cc e7       	ldi	r28, 0x7C	; 124
     376:	d0 e0       	ldi	r29, 0x00	; 0
     378:	88 81       	ld	r24, Y
     37a:	8f 77       	andi	r24, 0x7F	; 127
     37c:	88 83       	st	Y, r24
	set(ADMUX,REFS0);
     37e:	88 81       	ld	r24, Y
     380:	80 64       	ori	r24, 0x40	; 64
     382:	88 83       	st	Y, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
     384:	ea e7       	ldi	r30, 0x7A	; 122
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	80 81       	ld	r24, Z
     38a:	8b 7f       	andi	r24, 0xFB	; 251
     38c:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     38e:	80 81       	ld	r24, Z
     390:	82 60       	ori	r24, 0x02	; 2
     392:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     394:	80 81       	ld	r24, Z
     396:	81 60       	ori	r24, 0x01	; 1
     398:	80 83       	st	Z, r24
	
	// Disable Digital input to:
	set(DIDR0,ADC0D); // ADC0
     39a:	ae e7       	ldi	r26, 0x7E	; 126
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	8c 91       	ld	r24, X
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	8c 93       	st	X, r24
	set(DIDR0,ADC1D); // ADC1
     3a4:	8c 91       	ld	r24, X
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	8c 93       	st	X, r24
	set(DIDR0,ADC4D); // ADC4
     3aa:	8c 91       	ld	r24, X
     3ac:	80 61       	ori	r24, 0x10	; 16
     3ae:	8c 93       	st	X, r24
	set(DIDR0,ADC5D); // ADC5
     3b0:	8c 91       	ld	r24, X
     3b2:	80 62       	ori	r24, 0x20	; 32
     3b4:	8c 93       	st	X, r24
	set(DIDR0,ADC6D); // ADC6
     3b6:	8c 91       	ld	r24, X
     3b8:	80 64       	ori	r24, 0x40	; 64
     3ba:	8c 93       	st	X, r24
	set(DIDR0,ADC7D); // ADC7
     3bc:	8c 91       	ld	r24, X
     3be:	80 68       	ori	r24, 0x80	; 128
     3c0:	8c 93       	st	X, r24
	set(DIDR2,ADC8D); // ADC8
     3c2:	ad e7       	ldi	r26, 0x7D	; 125
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	8c 91       	ld	r24, X
     3c8:	81 60       	ori	r24, 0x01	; 1
     3ca:	8c 93       	st	X, r24
	set(DIDR2,ADC9D); // ADC9
     3cc:	8c 91       	ld	r24, X
     3ce:	82 60       	ori	r24, 0x02	; 2
     3d0:	8c 93       	st	X, r24
	set(DIDR2,ADC10D); // ADC10
     3d2:	8c 91       	ld	r24, X
     3d4:	84 60       	ori	r24, 0x04	; 4
     3d6:	8c 93       	st	X, r24
	set(DIDR2,ADC11D); // ADC11
     3d8:	8c 91       	ld	r24, X
     3da:	88 60       	ori	r24, 0x08	; 8
     3dc:	8c 93       	st	X, r24
	set(DIDR2,ADC12D); // ADC812
     3de:	8c 91       	ld	r24, X
     3e0:	80 61       	ori	r24, 0x10	; 16
     3e2:	8c 93       	st	X, r24
	set(DIDR2,ADC13D); // ADC13
     3e4:	8c 91       	ld	r24, X
     3e6:	80 62       	ori	r24, 0x20	; 32
     3e8:	8c 93       	st	X, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
     3ea:	80 81       	ld	r24, Z
     3ec:	8f 7d       	andi	r24, 0xDF	; 223
     3ee:	80 83       	st	Z, r24
	
	set(ADCSRB,MUX5); // Select ADC13 at pin B6
     3f0:	ab e7       	ldi	r26, 0x7B	; 123
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	8c 91       	ld	r24, X
     3f6:	80 62       	ori	r24, 0x20	; 32
     3f8:	8c 93       	st	X, r24
	set(ADMUX,MUX2); // Transistor 4
     3fa:	88 81       	ld	r24, Y
     3fc:	84 60       	ori	r24, 0x04	; 4
     3fe:	88 83       	st	Y, r24
	clear(ADMUX,MUX1);
     400:	88 81       	ld	r24, Y
     402:	8d 7f       	andi	r24, 0xFD	; 253
     404:	88 83       	st	Y, r24
	set(ADMUX,MUX0);
     406:	88 81       	ld	r24, Y
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	88 83       	st	Y, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
     40c:	80 81       	ld	r24, Z
     40e:	80 68       	ori	r24, 0x80	; 128
     410:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
     412:	80 81       	ld	r24, Z
     414:	80 64       	ori	r24, 0x40	; 64
     416:	80 83       	st	Z, r24
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <distIndex>:

int* distIndex(int indexVal)
{
	static int pointsUsed[2] = {0, 0};
		
	switch (indexVal)
     41e:	82 30       	cpi	r24, 0x02	; 2
     420:	91 05       	cpc	r25, r1
     422:	f9 f0       	breq	.+62     	; 0x462 <distIndex+0x44>
     424:	2c f4       	brge	.+10     	; 0x430 <distIndex+0x12>
     426:	00 97       	sbiw	r24, 0x00	; 0
     428:	51 f0       	breq	.+20     	; 0x43e <distIndex+0x20>
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	89 f0       	breq	.+34     	; 0x450 <distIndex+0x32>
     42e:	42 c0       	rjmp	.+132    	; 0x4b4 <distIndex+0x96>
     430:	84 30       	cpi	r24, 0x04	; 4
     432:	91 05       	cpc	r25, r1
     434:	51 f1       	breq	.+84     	; 0x48a <distIndex+0x6c>
     436:	f4 f0       	brlt	.+60     	; 0x474 <distIndex+0x56>
     438:	05 97       	sbiw	r24, 0x05	; 5
     43a:	91 f1       	breq	.+100    	; 0x4a0 <distIndex+0x82>
     43c:	3b c0       	rjmp	.+118    	; 0x4b4 <distIndex+0x96>
	{
		case 0 : 
			pointsUsed[0] = 0;
     43e:	ec e5       	ldi	r30, 0x5C	; 92
     440:	f1 e0       	ldi	r31, 0x01	; 1
     442:	11 82       	std	Z+1, r1	; 0x01
     444:	10 82       	st	Z, r1
			pointsUsed[1] = 1;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	93 83       	std	Z+3, r25	; 0x03
     44c:	82 83       	std	Z+2, r24	; 0x02
			break;
     44e:	32 c0       	rjmp	.+100    	; 0x4b4 <distIndex+0x96>
			
		case 1 : 
			pointsUsed[0] = 0;
     450:	ec e5       	ldi	r30, 0x5C	; 92
     452:	f1 e0       	ldi	r31, 0x01	; 1
     454:	11 82       	std	Z+1, r1	; 0x01
     456:	10 82       	st	Z, r1
			pointsUsed[1] = 2;
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	93 83       	std	Z+3, r25	; 0x03
     45e:	82 83       	std	Z+2, r24	; 0x02
			break;
     460:	29 c0       	rjmp	.+82     	; 0x4b4 <distIndex+0x96>
			
		case 2 : 
			pointsUsed[0] = 0;
     462:	ec e5       	ldi	r30, 0x5C	; 92
     464:	f1 e0       	ldi	r31, 0x01	; 1
     466:	11 82       	std	Z+1, r1	; 0x01
     468:	10 82       	st	Z, r1
			pointsUsed[1] = 3;
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	93 83       	std	Z+3, r25	; 0x03
     470:	82 83       	std	Z+2, r24	; 0x02
			break;
     472:	20 c0       	rjmp	.+64     	; 0x4b4 <distIndex+0x96>
			
		case 3 : 
			pointsUsed[0] = 1;
     474:	ec e5       	ldi	r30, 0x5C	; 92
     476:	f1 e0       	ldi	r31, 0x01	; 1
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	91 83       	std	Z+1, r25	; 0x01
     47e:	80 83       	st	Z, r24
			pointsUsed[1] = 2;
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	93 83       	std	Z+3, r25	; 0x03
     486:	82 83       	std	Z+2, r24	; 0x02
			break;
     488:	15 c0       	rjmp	.+42     	; 0x4b4 <distIndex+0x96>
			
		case 4 : 
			pointsUsed[0] = 1;
     48a:	ec e5       	ldi	r30, 0x5C	; 92
     48c:	f1 e0       	ldi	r31, 0x01	; 1
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	91 83       	std	Z+1, r25	; 0x01
     494:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     496:	83 e0       	ldi	r24, 0x03	; 3
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	93 83       	std	Z+3, r25	; 0x03
     49c:	82 83       	std	Z+2, r24	; 0x02
			break;
     49e:	0a c0       	rjmp	.+20     	; 0x4b4 <distIndex+0x96>
			
		case 5 :
			pointsUsed[0] = 2;
     4a0:	ec e5       	ldi	r30, 0x5C	; 92
     4a2:	f1 e0       	ldi	r31, 0x01	; 1
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	91 83       	std	Z+1, r25	; 0x01
     4aa:	80 83       	st	Z, r24
			pointsUsed[1] = 3;
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	93 83       	std	Z+3, r25	; 0x03
     4b2:	82 83       	std	Z+2, r24	; 0x02
			break;
	}
	
	return pointsUsed;
}
     4b4:	8c e5       	ldi	r24, 0x5C	; 92
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	08 95       	ret

000004ba <orientationCalculationFour>:


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
     4ba:	2f 92       	push	r2
     4bc:	3f 92       	push	r3
     4be:	4f 92       	push	r4
     4c0:	5f 92       	push	r5
     4c2:	6f 92       	push	r6
     4c4:	7f 92       	push	r7
     4c6:	8f 92       	push	r8
     4c8:	9f 92       	push	r9
     4ca:	af 92       	push	r10
     4cc:	bf 92       	push	r11
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <orientationCalculationFour+0x26>
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <orientationCalculationFour+0x28>
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	5c 01       	movw	r10, r24
     4e8:	4a 01       	movw	r8, r20
     4ea:	3a 83       	std	Y+2, r19	; 0x02
     4ec:	29 83       	std	Y+1, r18	; 0x01
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
     4ee:	06 2f       	mov	r16, r22
     4f0:	17 2f       	mov	r17, r23
     4f2:	f8 01       	movw	r30, r16
     4f4:	41 90       	ld	r4, Z+
     4f6:	51 90       	ld	r5, Z+
     4f8:	61 90       	ld	r6, Z+
     4fa:	71 90       	ld	r7, Z+
     4fc:	8f 01       	movw	r16, r30
	for (int i = 0; i < 6; i++){
     4fe:	1c 82       	std	Y+4, r1	; 0x04
     500:	1b 82       	std	Y+3, r1	; 0x03


void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
     502:	21 2c       	mov	r2, r1
     504:	31 2c       	mov	r3, r1
     506:	12 c0       	rjmp	.+36     	; 0x52c <orientationCalculationFour+0x72>
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
		if (distVect[i] < minVal) {
     508:	f8 01       	movw	r30, r16
     50a:	c1 90       	ld	r12, Z+
     50c:	d1 90       	ld	r13, Z+
     50e:	e1 90       	ld	r14, Z+
     510:	f1 90       	ld	r15, Z+
     512:	8f 01       	movw	r16, r30
     514:	a7 01       	movw	r20, r14
     516:	96 01       	movw	r18, r12
     518:	c3 01       	movw	r24, r6
     51a:	b2 01       	movw	r22, r4
     51c:	0e 94 15 18 	call	0x302a	; 0x302a <__gesf2>
     520:	18 16       	cp	r1, r24
     522:	24 f4       	brge	.+8      	; 0x52c <orientationCalculationFour+0x72>
     524:	26 01       	movw	r4, r12
     526:	37 01       	movw	r6, r14
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom)
{
	//Find index of shortest length
	int indexMin = 0;
	float minVal = distVect[0];
	for (int i = 0; i < 6; i++){
     528:	2b 80       	ldd	r2, Y+3	; 0x03
     52a:	3c 80       	ldd	r3, Y+4	; 0x04
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	9c 83       	std	Y+4, r25	; 0x04
     534:	8b 83       	std	Y+3, r24	; 0x03
     536:	06 97       	sbiw	r24, 0x06	; 6
     538:	39 f7       	brne	.-50     	; 0x508 <orientationCalculationFour+0x4e>
		}
	}
	
	//Find points used by shortest length	
	int* pointsShortRef;
	pointsShortRef = distIndex(indexMin);	
     53a:	82 2d       	mov	r24, r2
     53c:	93 2d       	mov	r25, r3
     53e:	0e 94 0f 02 	call	0x41e	; 0x41e <distIndex>
	int pointsShort[2] = {pointsShortRef[0], pointsShortRef[1]};	
     542:	fc 01       	movw	r30, r24
     544:	20 81       	ld	r18, Z
     546:	31 81       	ldd	r19, Z+1	; 0x01
     548:	62 81       	ldd	r22, Z+2	; 0x02
     54a:	73 81       	ldd	r23, Z+3	; 0x03
	if (pointsShort[0] == pointsLong[0]){
     54c:	f5 01       	movw	r30, r10
     54e:	40 81       	ld	r20, Z
     550:	51 81       	ldd	r21, Z+1	; 0x01
     552:	24 17       	cp	r18, r20
     554:	35 07       	cpc	r19, r21
     556:	59 f4       	brne	.+22     	; 0x56e <orientationCalculationFour+0xb4>
		*top = pointsLong[0];
     558:	f4 01       	movw	r30, r8
     55a:	31 83       	std	Z+1, r19	; 0x01
     55c:	20 83       	st	Z, r18
		*bottom = pointsLong[1];
     55e:	f5 01       	movw	r30, r10
     560:	82 81       	ldd	r24, Z+2	; 0x02
     562:	93 81       	ldd	r25, Z+3	; 0x03
     564:	e9 81       	ldd	r30, Y+1	; 0x01
     566:	fa 81       	ldd	r31, Y+2	; 0x02
     568:	91 83       	std	Z+1, r25	; 0x01
     56a:	80 83       	st	Z, r24
     56c:	37 c0       	rjmp	.+110    	; 0x5dc <orientationCalculationFour+0x122>
	} else {
		if (pointsShort[0] == pointsLong[1]){
     56e:	f5 01       	movw	r30, r10
     570:	82 81       	ldd	r24, Z+2	; 0x02
     572:	93 81       	ldd	r25, Z+3	; 0x03
     574:	28 17       	cp	r18, r24
     576:	39 07       	cpc	r19, r25
     578:	59 f4       	brne	.+22     	; 0x590 <orientationCalculationFour+0xd6>
			*top = pointsLong[1];
     57a:	f4 01       	movw	r30, r8
     57c:	31 83       	std	Z+1, r19	; 0x01
     57e:	20 83       	st	Z, r18
			*bottom = pointsLong[0];
     580:	f5 01       	movw	r30, r10
     582:	80 81       	ld	r24, Z
     584:	91 81       	ldd	r25, Z+1	; 0x01
     586:	e9 81       	ldd	r30, Y+1	; 0x01
     588:	fa 81       	ldd	r31, Y+2	; 0x02
     58a:	91 83       	std	Z+1, r25	; 0x01
     58c:	80 83       	st	Z, r24
     58e:	26 c0       	rjmp	.+76     	; 0x5dc <orientationCalculationFour+0x122>
		} else {
			if (pointsShort[1] == pointsLong[0]) {
     590:	64 17       	cp	r22, r20
     592:	75 07       	cpc	r23, r21
     594:	59 f4       	brne	.+22     	; 0x5ac <orientationCalculationFour+0xf2>
				*top = pointsLong[0];
     596:	f4 01       	movw	r30, r8
     598:	71 83       	std	Z+1, r23	; 0x01
     59a:	60 83       	st	Z, r22
				*bottom = pointsLong[1];
     59c:	f5 01       	movw	r30, r10
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	e9 81       	ldd	r30, Y+1	; 0x01
     5a4:	fa 81       	ldd	r31, Y+2	; 0x02
     5a6:	91 83       	std	Z+1, r25	; 0x01
     5a8:	80 83       	st	Z, r24
     5aa:	18 c0       	rjmp	.+48     	; 0x5dc <orientationCalculationFour+0x122>
			} else {
				if (pointsShort[1] == pointsLong[1])
     5ac:	68 17       	cp	r22, r24
     5ae:	79 07       	cpc	r23, r25
     5b0:	59 f4       	brne	.+22     	; 0x5c8 <orientationCalculationFour+0x10e>
				{
					*top = pointsLong[1];
     5b2:	f4 01       	movw	r30, r8
     5b4:	71 83       	std	Z+1, r23	; 0x01
     5b6:	60 83       	st	Z, r22
					*bottom = pointsLong[0];
     5b8:	f5 01       	movw	r30, r10
     5ba:	80 81       	ld	r24, Z
     5bc:	91 81       	ldd	r25, Z+1	; 0x01
     5be:	e9 81       	ldd	r30, Y+1	; 0x01
     5c0:	fa 81       	ldd	r31, Y+2	; 0x02
     5c2:	91 83       	std	Z+1, r25	; 0x01
     5c4:	80 83       	st	Z, r24
     5c6:	0a c0       	rjmp	.+20     	; 0x5dc <orientationCalculationFour+0x122>
				} else {
						*top = pointsLong[1];
     5c8:	f4 01       	movw	r30, r8
     5ca:	91 83       	std	Z+1, r25	; 0x01
     5cc:	80 83       	st	Z, r24
						*bottom = pointsLong[0];
     5ce:	f5 01       	movw	r30, r10
     5d0:	80 81       	ld	r24, Z
     5d2:	91 81       	ldd	r25, Z+1	; 0x01
     5d4:	e9 81       	ldd	r30, Y+1	; 0x01
     5d6:	fa 81       	ldd	r31, Y+2	; 0x02
     5d8:	91 83       	std	Z+1, r25	; 0x01
     5da:	80 83       	st	Z, r24
				}
			}
		}
	}
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	bf 90       	pop	r11
     5f6:	af 90       	pop	r10
     5f8:	9f 90       	pop	r9
     5fa:	8f 90       	pop	r8
     5fc:	7f 90       	pop	r7
     5fe:	6f 90       	pop	r6
     600:	5f 90       	pop	r5
     602:	4f 90       	pop	r4
     604:	3f 90       	pop	r3
     606:	2f 90       	pop	r2
     608:	08 95       	ret

0000060a <fourPointCalc>:
	
}


float* fourPointCalc(int pvect[4][2])
{
     60a:	2f 92       	push	r2
     60c:	3f 92       	push	r3
     60e:	4f 92       	push	r4
     610:	5f 92       	push	r5
     612:	6f 92       	push	r6
     614:	7f 92       	push	r7
     616:	8f 92       	push	r8
     618:	9f 92       	push	r9
     61a:	af 92       	push	r10
     61c:	bf 92       	push	r11
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	c2 54       	subi	r28, 0x42	; 66
     634:	d1 09       	sbc	r29, r1
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	2c 01       	movw	r4, r24
	static float centerFour[3];
	
	float dist01 = sqrt((float)(pvect[1][0]-pvect[0][0])*(pvect[1][0]-pvect[0][0]) + (pvect[1][1]-pvect[0][1])*(pvect[1][1]-pvect[0][1]));
     642:	fc 01       	movw	r30, r24
     644:	04 80       	ldd	r0, Z+4	; 0x04
     646:	f5 81       	ldd	r31, Z+5	; 0x05
     648:	e0 2d       	mov	r30, r0
     64a:	fa a3       	std	Y+34, r31	; 0x22
     64c:	e9 a3       	std	Y+33, r30	; 0x21
     64e:	fc 01       	movw	r30, r24
     650:	00 81       	ld	r16, Z
     652:	11 81       	ldd	r17, Z+1	; 0x01
     654:	69 a1       	ldd	r22, Y+33	; 0x21
     656:	7a a1       	ldd	r23, Y+34	; 0x22
     658:	60 1b       	sub	r22, r16
     65a:	71 0b       	sbc	r23, r17
     65c:	07 2e       	mov	r0, r23
     65e:	00 0c       	add	r0, r0
     660:	88 0b       	sbc	r24, r24
     662:	99 0b       	sbc	r25, r25
     664:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     668:	6b 01       	movw	r12, r22
     66a:	7c 01       	movw	r14, r24
     66c:	f2 01       	movw	r30, r4
     66e:	06 80       	ldd	r0, Z+6	; 0x06
     670:	f7 81       	ldd	r31, Z+7	; 0x07
     672:	e0 2d       	mov	r30, r0
     674:	fe a3       	std	Y+38, r31	; 0x26
     676:	ed a3       	std	Y+37, r30	; 0x25
     678:	f2 01       	movw	r30, r4
     67a:	22 80       	ldd	r2, Z+2	; 0x02
     67c:	33 80       	ldd	r3, Z+3	; 0x03
     67e:	ad a0       	ldd	r10, Y+37	; 0x25
     680:	be a0       	ldd	r11, Y+38	; 0x26
     682:	a2 18       	sub	r10, r2
     684:	b3 08       	sbc	r11, r3
     686:	9b 01       	movw	r18, r22
     688:	ac 01       	movw	r20, r24
     68a:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     68e:	69 a7       	std	Y+41, r22	; 0x29
     690:	7a a7       	std	Y+42, r23	; 0x2a
     692:	8b a7       	std	Y+43, r24	; 0x2b
     694:	9c a7       	std	Y+44, r25	; 0x2c
     696:	aa 9c       	mul	r10, r10
     698:	40 01       	movw	r8, r0
     69a:	ab 9c       	mul	r10, r11
     69c:	90 0c       	add	r9, r0
     69e:	90 0c       	add	r9, r0
     6a0:	11 24       	eor	r1, r1
     6a2:	09 2c       	mov	r0, r9
     6a4:	00 0c       	add	r0, r0
     6a6:	aa 08       	sbc	r10, r10
     6a8:	bb 08       	sbc	r11, r11
     6aa:	a7 01       	movw	r20, r14
     6ac:	96 01       	movw	r18, r12
     6ae:	c7 01       	movw	r24, r14
     6b0:	b6 01       	movw	r22, r12
     6b2:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     6b6:	6b 01       	movw	r12, r22
     6b8:	7c 01       	movw	r14, r24
     6ba:	c5 01       	movw	r24, r10
     6bc:	b4 01       	movw	r22, r8
     6be:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     6c2:	9b 01       	movw	r18, r22
     6c4:	ac 01       	movw	r20, r24
     6c6:	c7 01       	movw	r24, r14
     6c8:	b6 01       	movw	r22, r12
     6ca:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
     6ce:	0e 94 9d 18 	call	0x313a	; 0x313a <sqrt>
     6d2:	6b af       	std	Y+59, r22	; 0x3b
     6d4:	7c af       	std	Y+60, r23	; 0x3c
     6d6:	8d af       	std	Y+61, r24	; 0x3d
     6d8:	9e af       	std	Y+62, r25	; 0x3e
	float dist02 = sqrt((float)(pvect[2][0]-pvect[0][0])*(pvect[2][0]-pvect[0][0]) + (pvect[2][1]-pvect[0][1])*(pvect[2][1]-pvect[0][1]));
     6da:	f2 01       	movw	r30, r4
     6dc:	00 84       	ldd	r0, Z+8	; 0x08
     6de:	f1 85       	ldd	r31, Z+9	; 0x09
     6e0:	e0 2d       	mov	r30, r0
     6e2:	fa a7       	std	Y+42, r31	; 0x2a
     6e4:	e9 a7       	std	Y+41, r30	; 0x29
     6e6:	bf 01       	movw	r22, r30
     6e8:	60 1b       	sub	r22, r16
     6ea:	71 0b       	sbc	r23, r17
     6ec:	07 2e       	mov	r0, r23
     6ee:	00 0c       	add	r0, r0
     6f0:	88 0b       	sbc	r24, r24
     6f2:	99 0b       	sbc	r25, r25
     6f4:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     6f8:	6b 01       	movw	r12, r22
     6fa:	7c 01       	movw	r14, r24
     6fc:	f2 01       	movw	r30, r4
     6fe:	62 84       	ldd	r6, Z+10	; 0x0a
     700:	73 84       	ldd	r7, Z+11	; 0x0b
     702:	53 01       	movw	r10, r6
     704:	a2 18       	sub	r10, r2
     706:	b3 08       	sbc	r11, r3
     708:	9b 01       	movw	r18, r22
     70a:	ac 01       	movw	r20, r24
     70c:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     710:	6d a7       	std	Y+45, r22	; 0x2d
     712:	7e a7       	std	Y+46, r23	; 0x2e
     714:	8f a7       	std	Y+47, r24	; 0x2f
     716:	98 ab       	std	Y+48, r25	; 0x30
     718:	aa 9c       	mul	r10, r10
     71a:	40 01       	movw	r8, r0
     71c:	ab 9c       	mul	r10, r11
     71e:	90 0c       	add	r9, r0
     720:	90 0c       	add	r9, r0
     722:	11 24       	eor	r1, r1
     724:	09 2c       	mov	r0, r9
     726:	00 0c       	add	r0, r0
     728:	aa 08       	sbc	r10, r10
     72a:	bb 08       	sbc	r11, r11
     72c:	a7 01       	movw	r20, r14
     72e:	96 01       	movw	r18, r12
     730:	c7 01       	movw	r24, r14
     732:	b6 01       	movw	r22, r12
     734:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     738:	6b 01       	movw	r12, r22
     73a:	7c 01       	movw	r14, r24
     73c:	c5 01       	movw	r24, r10
     73e:	b4 01       	movw	r22, r8
     740:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     744:	9b 01       	movw	r18, r22
     746:	ac 01       	movw	r20, r24
     748:	c7 01       	movw	r24, r14
     74a:	b6 01       	movw	r22, r12
     74c:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
     750:	0e 94 9d 18 	call	0x313a	; 0x313a <sqrt>
     754:	23 96       	adiw	r28, 0x03	; 3
     756:	6c af       	std	Y+60, r22	; 0x3c
     758:	7d af       	std	Y+61, r23	; 0x3d
     75a:	8e af       	std	Y+62, r24	; 0x3e
     75c:	9f af       	std	Y+63, r25	; 0x3f
     75e:	23 97       	sbiw	r28, 0x03	; 3
	float dist03 = sqrt((float)(pvect[3][0]-pvect[0][0])*(pvect[3][0]-pvect[0][0]) + (pvect[3][1]-pvect[0][1])*(pvect[3][1]-pvect[0][1]));
     760:	f2 01       	movw	r30, r4
     762:	04 84       	ldd	r0, Z+12	; 0x0c
     764:	f5 85       	ldd	r31, Z+13	; 0x0d
     766:	e0 2d       	mov	r30, r0
     768:	fe a7       	std	Y+46, r31	; 0x2e
     76a:	ed a7       	std	Y+45, r30	; 0x2d
     76c:	bf 01       	movw	r22, r30
     76e:	60 1b       	sub	r22, r16
     770:	71 0b       	sbc	r23, r17
     772:	07 2e       	mov	r0, r23
     774:	00 0c       	add	r0, r0
     776:	88 0b       	sbc	r24, r24
     778:	99 0b       	sbc	r25, r25
     77a:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     77e:	4b 01       	movw	r8, r22
     780:	5c 01       	movw	r10, r24
     782:	f2 01       	movw	r30, r4
     784:	06 84       	ldd	r0, Z+14	; 0x0e
     786:	f7 85       	ldd	r31, Z+15	; 0x0f
     788:	e0 2d       	mov	r30, r0
     78a:	fa ab       	std	Y+50, r31	; 0x32
     78c:	e9 ab       	std	Y+49, r30	; 0x31
     78e:	8f 01       	movw	r16, r30
     790:	02 19       	sub	r16, r2
     792:	13 09       	sbc	r17, r3
     794:	9b 01       	movw	r18, r22
     796:	ac 01       	movw	r20, r24
     798:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     79c:	6b ab       	std	Y+51, r22	; 0x33
     79e:	7c ab       	std	Y+52, r23	; 0x34
     7a0:	8d ab       	std	Y+53, r24	; 0x35
     7a2:	9e ab       	std	Y+54, r25	; 0x36
     7a4:	00 9f       	mul	r16, r16
     7a6:	60 01       	movw	r12, r0
     7a8:	01 9f       	mul	r16, r17
     7aa:	d0 0c       	add	r13, r0
     7ac:	d0 0c       	add	r13, r0
     7ae:	11 24       	eor	r1, r1
     7b0:	0d 2c       	mov	r0, r13
     7b2:	00 0c       	add	r0, r0
     7b4:	ee 08       	sbc	r14, r14
     7b6:	ff 08       	sbc	r15, r15
     7b8:	a5 01       	movw	r20, r10
     7ba:	94 01       	movw	r18, r8
     7bc:	c5 01       	movw	r24, r10
     7be:	b4 01       	movw	r22, r8
     7c0:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     7c4:	4b 01       	movw	r8, r22
     7c6:	5c 01       	movw	r10, r24
     7c8:	c7 01       	movw	r24, r14
     7ca:	b6 01       	movw	r22, r12
     7cc:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     7d0:	9b 01       	movw	r18, r22
     7d2:	ac 01       	movw	r20, r24
     7d4:	c5 01       	movw	r24, r10
     7d6:	b4 01       	movw	r22, r8
     7d8:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
     7dc:	0e 94 9d 18 	call	0x313a	; 0x313a <sqrt>
     7e0:	6b ab       	std	Y+51, r22	; 0x33
     7e2:	7c ab       	std	Y+52, r23	; 0x34
     7e4:	8d ab       	std	Y+53, r24	; 0x35
     7e6:	9e ab       	std	Y+54, r25	; 0x36
	float dist12 = sqrt((float)(pvect[2][0]-pvect[1][0])*(pvect[2][0]-pvect[1][0]) + (pvect[2][1]-pvect[1][1])*(pvect[2][1]-pvect[1][1]));
     7e8:	69 a5       	ldd	r22, Y+41	; 0x29
     7ea:	7a a5       	ldd	r23, Y+42	; 0x2a
     7ec:	29 a1       	ldd	r18, Y+33	; 0x21
     7ee:	3a a1       	ldd	r19, Y+34	; 0x22
     7f0:	62 1b       	sub	r22, r18
     7f2:	73 0b       	sbc	r23, r19
     7f4:	07 2e       	mov	r0, r23
     7f6:	00 0c       	add	r0, r0
     7f8:	88 0b       	sbc	r24, r24
     7fa:	99 0b       	sbc	r25, r25
     7fc:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     800:	4b 01       	movw	r8, r22
     802:	5c 01       	movw	r10, r24
     804:	83 01       	movw	r16, r6
     806:	4d a1       	ldd	r20, Y+37	; 0x25
     808:	5e a1       	ldd	r21, Y+38	; 0x26
     80a:	04 1b       	sub	r16, r20
     80c:	15 0b       	sbc	r17, r21
     80e:	9b 01       	movw	r18, r22
     810:	ac 01       	movw	r20, r24
     812:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     816:	6f ab       	std	Y+55, r22	; 0x37
     818:	78 af       	std	Y+56, r23	; 0x38
     81a:	89 af       	std	Y+57, r24	; 0x39
     81c:	9a af       	std	Y+58, r25	; 0x3a
     81e:	00 9f       	mul	r16, r16
     820:	60 01       	movw	r12, r0
     822:	01 9f       	mul	r16, r17
     824:	d0 0c       	add	r13, r0
     826:	d0 0c       	add	r13, r0
     828:	11 24       	eor	r1, r1
     82a:	0d 2c       	mov	r0, r13
     82c:	00 0c       	add	r0, r0
     82e:	ee 08       	sbc	r14, r14
     830:	ff 08       	sbc	r15, r15
     832:	a5 01       	movw	r20, r10
     834:	94 01       	movw	r18, r8
     836:	c5 01       	movw	r24, r10
     838:	b4 01       	movw	r22, r8
     83a:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     83e:	4b 01       	movw	r8, r22
     840:	5c 01       	movw	r10, r24
     842:	c7 01       	movw	r24, r14
     844:	b6 01       	movw	r22, r12
     846:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     84a:	9b 01       	movw	r18, r22
     84c:	ac 01       	movw	r20, r24
     84e:	c5 01       	movw	r24, r10
     850:	b4 01       	movw	r22, r8
     852:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
     856:	0e 94 9d 18 	call	0x313a	; 0x313a <sqrt>
     85a:	6f ab       	std	Y+55, r22	; 0x37
     85c:	78 af       	std	Y+56, r23	; 0x38
     85e:	89 af       	std	Y+57, r24	; 0x39
     860:	9a af       	std	Y+58, r25	; 0x3a
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
     862:	6d a5       	ldd	r22, Y+45	; 0x2d
     864:	7e a5       	ldd	r23, Y+46	; 0x2e
     866:	89 a1       	ldd	r24, Y+33	; 0x21
     868:	9a a1       	ldd	r25, Y+34	; 0x22
     86a:	68 1b       	sub	r22, r24
     86c:	79 0b       	sbc	r23, r25
     86e:	07 2e       	mov	r0, r23
     870:	00 0c       	add	r0, r0
     872:	88 0b       	sbc	r24, r24
     874:	99 0b       	sbc	r25, r25
     876:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     87a:	4b 01       	movw	r8, r22
     87c:	5c 01       	movw	r10, r24
     87e:	09 a9       	ldd	r16, Y+49	; 0x31
     880:	1a a9       	ldd	r17, Y+50	; 0x32
     882:	ed a1       	ldd	r30, Y+37	; 0x25
     884:	fe a1       	ldd	r31, Y+38	; 0x26
     886:	0e 1b       	sub	r16, r30
     888:	1f 0b       	sbc	r17, r31
     88a:	9b 01       	movw	r18, r22
     88c:	ac 01       	movw	r20, r24
     88e:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     892:	69 a3       	std	Y+33, r22	; 0x21
     894:	7a a3       	std	Y+34, r23	; 0x22
     896:	8b a3       	std	Y+35, r24	; 0x23
     898:	9c a3       	std	Y+36, r25	; 0x24
     89a:	00 9f       	mul	r16, r16
     89c:	60 01       	movw	r12, r0
     89e:	01 9f       	mul	r16, r17
     8a0:	d0 0c       	add	r13, r0
     8a2:	d0 0c       	add	r13, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	0d 2c       	mov	r0, r13
     8a8:	00 0c       	add	r0, r0
     8aa:	ee 08       	sbc	r14, r14
     8ac:	ff 08       	sbc	r15, r15
     8ae:	a5 01       	movw	r20, r10
     8b0:	94 01       	movw	r18, r8
     8b2:	c5 01       	movw	r24, r10
     8b4:	b4 01       	movw	r22, r8
     8b6:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     8ba:	4b 01       	movw	r8, r22
     8bc:	5c 01       	movw	r10, r24
     8be:	c7 01       	movw	r24, r14
     8c0:	b6 01       	movw	r22, r12
     8c2:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     8c6:	9b 01       	movw	r18, r22
     8c8:	ac 01       	movw	r20, r24
     8ca:	c5 01       	movw	r24, r10
     8cc:	b4 01       	movw	r22, r8
     8ce:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
     8d2:	0e 94 9d 18 	call	0x313a	; 0x313a <sqrt>
     8d6:	4b 01       	movw	r8, r22
     8d8:	5c 01       	movw	r10, r24
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
     8da:	6d a5       	ldd	r22, Y+45	; 0x2d
     8dc:	7e a5       	ldd	r23, Y+46	; 0x2e
     8de:	29 a5       	ldd	r18, Y+41	; 0x29
     8e0:	3a a5       	ldd	r19, Y+42	; 0x2a
     8e2:	62 1b       	sub	r22, r18
     8e4:	73 0b       	sbc	r23, r19
     8e6:	07 2e       	mov	r0, r23
     8e8:	00 0c       	add	r0, r0
     8ea:	88 0b       	sbc	r24, r24
     8ec:	99 0b       	sbc	r25, r25
     8ee:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     8f2:	69 a3       	std	Y+33, r22	; 0x21
     8f4:	7a a3       	std	Y+34, r23	; 0x22
     8f6:	8b a3       	std	Y+35, r24	; 0x23
     8f8:	9c a3       	std	Y+36, r25	; 0x24
     8fa:	09 a9       	ldd	r16, Y+49	; 0x31
     8fc:	1a a9       	ldd	r17, Y+50	; 0x32
     8fe:	06 19       	sub	r16, r6
     900:	17 09       	sbc	r17, r7
     902:	9b 01       	movw	r18, r22
     904:	ac 01       	movw	r20, r24
     906:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     90a:	6d a3       	std	Y+37, r22	; 0x25
     90c:	7e a3       	std	Y+38, r23	; 0x26
     90e:	8f a3       	std	Y+39, r24	; 0x27
     910:	98 a7       	std	Y+40, r25	; 0x28
     912:	00 9f       	mul	r16, r16
     914:	60 01       	movw	r12, r0
     916:	01 9f       	mul	r16, r17
     918:	d0 0c       	add	r13, r0
     91a:	d0 0c       	add	r13, r0
     91c:	11 24       	eor	r1, r1
     91e:	0d 2c       	mov	r0, r13
     920:	00 0c       	add	r0, r0
     922:	ee 08       	sbc	r14, r14
     924:	ff 08       	sbc	r15, r15
     926:	29 a1       	ldd	r18, Y+33	; 0x21
     928:	3a a1       	ldd	r19, Y+34	; 0x22
     92a:	4b a1       	ldd	r20, Y+35	; 0x23
     92c:	5c a1       	ldd	r21, Y+36	; 0x24
     92e:	ca 01       	movw	r24, r20
     930:	b9 01       	movw	r22, r18
     932:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     936:	69 a3       	std	Y+33, r22	; 0x21
     938:	7a a3       	std	Y+34, r23	; 0x22
     93a:	8b a3       	std	Y+35, r24	; 0x23
     93c:	9c a3       	std	Y+36, r25	; 0x24
     93e:	c7 01       	movw	r24, r14
     940:	b6 01       	movw	r22, r12
     942:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     946:	9b 01       	movw	r18, r22
     948:	ac 01       	movw	r20, r24
     94a:	69 a1       	ldd	r22, Y+33	; 0x21
     94c:	7a a1       	ldd	r23, Y+34	; 0x22
     94e:	8b a1       	ldd	r24, Y+35	; 0x23
     950:	9c a1       	ldd	r25, Y+36	; 0x24
     952:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
     956:	0e 94 9d 18 	call	0x313a	; 0x313a <sqrt>
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
     95a:	2b ad       	ldd	r18, Y+59	; 0x3b
     95c:	3c ad       	ldd	r19, Y+60	; 0x3c
     95e:	4d ad       	ldd	r20, Y+61	; 0x3d
     960:	5e ad       	ldd	r21, Y+62	; 0x3e
     962:	29 83       	std	Y+1, r18	; 0x01
     964:	3a 83       	std	Y+2, r19	; 0x02
     966:	4b 83       	std	Y+3, r20	; 0x03
     968:	5c 83       	std	Y+4, r21	; 0x04
     96a:	23 96       	adiw	r28, 0x03	; 3
     96c:	2c ad       	ldd	r18, Y+60	; 0x3c
     96e:	3d ad       	ldd	r19, Y+61	; 0x3d
     970:	4e ad       	ldd	r20, Y+62	; 0x3e
     972:	5f ad       	ldd	r21, Y+63	; 0x3f
     974:	23 97       	sbiw	r28, 0x03	; 3
     976:	2d 83       	std	Y+5, r18	; 0x05
     978:	3e 83       	std	Y+6, r19	; 0x06
     97a:	4f 83       	std	Y+7, r20	; 0x07
     97c:	58 87       	std	Y+8, r21	; 0x08
     97e:	2b a9       	ldd	r18, Y+51	; 0x33
     980:	3c a9       	ldd	r19, Y+52	; 0x34
     982:	4d a9       	ldd	r20, Y+53	; 0x35
     984:	5e a9       	ldd	r21, Y+54	; 0x36
     986:	29 87       	std	Y+9, r18	; 0x09
     988:	3a 87       	std	Y+10, r19	; 0x0a
     98a:	4b 87       	std	Y+11, r20	; 0x0b
     98c:	5c 87       	std	Y+12, r21	; 0x0c
     98e:	2f a9       	ldd	r18, Y+55	; 0x37
     990:	38 ad       	ldd	r19, Y+56	; 0x38
     992:	49 ad       	ldd	r20, Y+57	; 0x39
     994:	5a ad       	ldd	r21, Y+58	; 0x3a
     996:	2d 87       	std	Y+13, r18	; 0x0d
     998:	3e 87       	std	Y+14, r19	; 0x0e
     99a:	4f 87       	std	Y+15, r20	; 0x0f
     99c:	58 8b       	std	Y+16, r21	; 0x10
     99e:	89 8a       	std	Y+17, r8	; 0x11
     9a0:	9a 8a       	std	Y+18, r9	; 0x12
     9a2:	ab 8a       	std	Y+19, r10	; 0x13
     9a4:	bc 8a       	std	Y+20, r11	; 0x14
     9a6:	6d 8b       	std	Y+21, r22	; 0x15
     9a8:	7e 8b       	std	Y+22, r23	; 0x16
     9aa:	8f 8b       	std	Y+23, r24	; 0x17
     9ac:	98 8f       	std	Y+24, r25	; 0x18
     9ae:	ae 01       	movw	r20, r28
     9b0:	4f 5f       	subi	r20, 0xFF	; 255
     9b2:	5f 4f       	sbci	r21, 0xFF	; 255
     9b4:	7a 01       	movw	r14, r20
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     9b6:	00 e0       	ldi	r16, 0x00	; 0
     9b8:	10 e0       	ldi	r17, 0x00	; 0
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
     9ba:	61 2c       	mov	r6, r1
     9bc:	71 2c       	mov	r7, r1
     9be:	c1 2c       	mov	r12, r1
     9c0:	d1 2c       	mov	r13, r1
	float dist13 = sqrt((float)(pvect[3][0]-pvect[1][0])*(pvect[3][0]-pvect[1][0]) + (pvect[3][1]-pvect[1][1])*(pvect[3][1]-pvect[1][1]));
	float dist23 = sqrt((float)(pvect[3][0]-pvect[2][0])*(pvect[3][0]-pvect[2][0]) + (pvect[3][1]-pvect[2][1])*(pvect[3][1]-pvect[2][1]));
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
     9c2:	21 2c       	mov	r2, r1
     9c4:	31 2c       	mov	r3, r1
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     9c6:	f7 01       	movw	r30, r14
     9c8:	81 90       	ld	r8, Z+
     9ca:	91 90       	ld	r9, Z+
     9cc:	a1 90       	ld	r10, Z+
     9ce:	b1 90       	ld	r11, Z+
     9d0:	7f 01       	movw	r14, r30
     9d2:	26 2d       	mov	r18, r6
     9d4:	37 2d       	mov	r19, r7
     9d6:	4c 2d       	mov	r20, r12
     9d8:	5d 2d       	mov	r21, r13
     9da:	c5 01       	movw	r24, r10
     9dc:	b4 01       	movw	r22, r8
     9de:	0e 94 15 18 	call	0x302a	; 0x302a <__gesf2>
     9e2:	18 16       	cp	r1, r24
     9e4:	34 f4       	brge	.+12     	; 0x9f2 <fourPointCalc+0x3e8>
			indexMax = i;
			maxVal = distVect[i];
     9e6:	68 2c       	mov	r6, r8
     9e8:	79 2c       	mov	r7, r9
     9ea:	ca 2c       	mov	r12, r10
     9ec:	db 2c       	mov	r13, r11
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
		if (distVect[i] > maxVal) {
     9ee:	20 2e       	mov	r2, r16
     9f0:	31 2e       	mov	r3, r17
	
	float distVect[6] = {dist01, dist02, dist03, dist12, dist13, dist23};
	
	int indexMax = 0;
	float maxVal = 0;
	for (int i = 0; i < 6; i++){
     9f2:	0f 5f       	subi	r16, 0xFF	; 255
     9f4:	1f 4f       	sbci	r17, 0xFF	; 255
     9f6:	06 30       	cpi	r16, 0x06	; 6
     9f8:	11 05       	cpc	r17, r1
     9fa:	29 f7       	brne	.-54     	; 0x9c6 <fourPointCalc+0x3bc>
			maxVal = distVect[i];
		}
	}
	
	int* pointsLongRef; 
	pointsLongRef = distIndex(indexMax);
     9fc:	82 2d       	mov	r24, r2
     9fe:	93 2d       	mov	r25, r3
     a00:	0e 94 0f 02 	call	0x41e	; 0x41e <distIndex>
	
	int pointsLong[2] = {(pointsLongRef[0]), (pointsLongRef[1])};
     a04:	fc 01       	movw	r30, r24
     a06:	e0 80       	ld	r14, Z
     a08:	f1 80       	ldd	r15, Z+1	; 0x01
     a0a:	fa 8e       	std	Y+26, r15	; 0x1a
     a0c:	e9 8e       	std	Y+25, r14	; 0x19
     a0e:	02 81       	ldd	r16, Z+2	; 0x02
     a10:	13 81       	ldd	r17, Z+3	; 0x03
     a12:	1c 8f       	std	Y+28, r17	; 0x1c
     a14:	0b 8f       	std	Y+27, r16	; 0x1b
	
	float center[2]; 
	center[0] = (pvect[pointsLong[0]][0] + pvect[pointsLong[1]][0])/2;
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	ee 0c       	add	r14, r14
     a1c:	ff 1c       	adc	r15, r15
     a1e:	e4 0c       	add	r14, r4
     a20:	f5 1c       	adc	r15, r5
     a22:	00 0f       	add	r16, r16
     a24:	11 1f       	adc	r17, r17
     a26:	00 0f       	add	r16, r16
     a28:	11 1f       	adc	r17, r17
     a2a:	04 0d       	add	r16, r4
     a2c:	15 1d       	adc	r17, r5
     a2e:	f7 01       	movw	r30, r14
     a30:	60 81       	ld	r22, Z
     a32:	71 81       	ldd	r23, Z+1	; 0x01
     a34:	f8 01       	movw	r30, r16
     a36:	80 81       	ld	r24, Z
     a38:	91 81       	ldd	r25, Z+1	; 0x01
     a3a:	68 0f       	add	r22, r24
     a3c:	79 1f       	adc	r23, r25
     a3e:	77 23       	and	r23, r23
     a40:	14 f4       	brge	.+4      	; 0xa46 <fourPointCalc+0x43c>
     a42:	6f 5f       	subi	r22, 0xFF	; 255
     a44:	7f 4f       	sbci	r23, 0xFF	; 255
     a46:	75 95       	asr	r23
     a48:	67 95       	ror	r22
     a4a:	07 2e       	mov	r0, r23
     a4c:	00 0c       	add	r0, r0
     a4e:	88 0b       	sbc	r24, r24
     a50:	99 0b       	sbc	r25, r25
     a52:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     a56:	4b 01       	movw	r8, r22
     a58:	5c 01       	movw	r10, r24
	center[1] = (pvect[pointsLong[0]][1] + pvect[pointsLong[1]][1])/2;
     a5a:	f7 01       	movw	r30, r14
     a5c:	62 81       	ldd	r22, Z+2	; 0x02
     a5e:	73 81       	ldd	r23, Z+3	; 0x03
     a60:	f8 01       	movw	r30, r16
     a62:	82 81       	ldd	r24, Z+2	; 0x02
     a64:	93 81       	ldd	r25, Z+3	; 0x03
     a66:	68 0f       	add	r22, r24
     a68:	79 1f       	adc	r23, r25
     a6a:	77 23       	and	r23, r23
     a6c:	14 f4       	brge	.+4      	; 0xa72 <fourPointCalc+0x468>
     a6e:	6f 5f       	subi	r22, 0xFF	; 255
     a70:	7f 4f       	sbci	r23, 0xFF	; 255
     a72:	75 95       	asr	r23
     a74:	67 95       	ror	r22
     a76:	07 2e       	mov	r0, r23
     a78:	00 0c       	add	r0, r0
     a7a:	88 0b       	sbc	r24, r24
     a7c:	99 0b       	sbc	r25, r25
     a7e:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     a82:	69 a3       	std	Y+33, r22	; 0x21
     a84:	7a a3       	std	Y+34, r23	; 0x22
     a86:	8b a3       	std	Y+35, r24	; 0x23
     a88:	9c a3       	std	Y+36, r25	; 0x24
	
	int top;
	int bottom;
	orientationCalculationFour(pointsLong, distVect, &top, &bottom);
     a8a:	9e 01       	movw	r18, r28
     a8c:	21 5e       	subi	r18, 0xE1	; 225
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	ae 01       	movw	r20, r28
     a92:	43 5e       	subi	r20, 0xE3	; 227
     a94:	5f 4f       	sbci	r21, 0xFF	; 255
     a96:	be 01       	movw	r22, r28
     a98:	6f 5f       	subi	r22, 0xFF	; 255
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	ce 01       	movw	r24, r28
     a9e:	49 96       	adiw	r24, 0x19	; 25
     aa0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <orientationCalculationFour>
	
	float centerLine[2]; 
	centerLine[0] = pvect[top][0] - pvect[bottom][0];
     aa4:	0d 8d       	ldd	r16, Y+29	; 0x1d
     aa6:	1e 8d       	ldd	r17, Y+30	; 0x1e
     aa8:	00 0f       	add	r16, r16
     aaa:	11 1f       	adc	r17, r17
     aac:	00 0f       	add	r16, r16
     aae:	11 1f       	adc	r17, r17
     ab0:	04 0d       	add	r16, r4
     ab2:	15 1d       	adc	r17, r5
     ab4:	2f 8c       	ldd	r2, Y+31	; 0x1f
     ab6:	38 a0       	ldd	r3, Y+32	; 0x20
     ab8:	22 0c       	add	r2, r2
     aba:	33 1c       	adc	r3, r3
     abc:	22 0c       	add	r2, r2
     abe:	33 1c       	adc	r3, r3
     ac0:	24 0c       	add	r2, r4
     ac2:	35 1c       	adc	r3, r5
     ac4:	f8 01       	movw	r30, r16
     ac6:	60 81       	ld	r22, Z
     ac8:	71 81       	ldd	r23, Z+1	; 0x01
     aca:	f1 01       	movw	r30, r2
     acc:	80 81       	ld	r24, Z
     ace:	91 81       	ldd	r25, Z+1	; 0x01
     ad0:	68 1b       	sub	r22, r24
     ad2:	79 0b       	sbc	r23, r25
     ad4:	07 2e       	mov	r0, r23
     ad6:	00 0c       	add	r0, r0
     ad8:	88 0b       	sbc	r24, r24
     ada:	99 0b       	sbc	r25, r25
     adc:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
     ae0:	6b 01       	movw	r12, r22
     ae2:	7c 01       	movw	r14, r24
	centerLine[1] = pvect[top][1] - pvect[bottom][1];
     ae4:	f8 01       	movw	r30, r16
     ae6:	62 81       	ldd	r22, Z+2	; 0x02
     ae8:	73 81       	ldd	r23, Z+3	; 0x03
     aea:	f1 01       	movw	r30, r2
     aec:	82 81       	ldd	r24, Z+2	; 0x02
     aee:	93 81       	ldd	r25, Z+3	; 0x03
     af0:	68 1b       	sub	r22, r24
     af2:	79 0b       	sbc	r23, r25
     af4:	07 2e       	mov	r0, r23
     af6:	00 0c       	add	r0, r0
     af8:	88 0b       	sbc	r24, r24
     afa:	99 0b       	sbc	r25, r25
     afc:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
	
	float theta = atan2(-1.0*centerLine[1], (float)centerLine[0]); 
     b00:	90 58       	subi	r25, 0x80	; 128
     b02:	a7 01       	movw	r20, r14
     b04:	96 01       	movw	r18, r12
     b06:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <atan2>
	theta += M_PI/2.0;
     b0a:	2b ed       	ldi	r18, 0xDB	; 219
     b0c:	3f e0       	ldi	r19, 0x0F	; 15
     b0e:	49 ec       	ldi	r20, 0xC9	; 201
     b10:	5f e3       	ldi	r21, 0x3F	; 63
     b12:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
     b16:	6b 01       	movw	r12, r22
     b18:	7c 01       	movw	r14, r24
	
	float t[2];
	t[0] = -1*center[0] + 512;
     b1a:	a5 01       	movw	r20, r10
     b1c:	94 01       	movw	r18, r8
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	94 e4       	ldi	r25, 0x44	; 68
     b26:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
     b2a:	4b 01       	movw	r8, r22
     b2c:	5c 01       	movw	r10, r24
	t[1] = -1*center[1] + 382;
     b2e:	29 a1       	ldd	r18, Y+33	; 0x21
     b30:	3a a1       	ldd	r19, Y+34	; 0x22
     b32:	4b a1       	ldd	r20, Y+35	; 0x23
     b34:	5c a1       	ldd	r21, Y+36	; 0x24
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	8f eb       	ldi	r24, 0xBF	; 191
     b3c:	93 e4       	ldi	r25, 0x43	; 67
     b3e:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
     b42:	2b 01       	movw	r4, r22
     b44:	3c 01       	movw	r6, r24
	
	
	centerFour[0] = sin(theta)*t[1] - cos(theta)*t[0];
     b46:	c7 01       	movw	r24, r14
     b48:	b6 01       	movw	r22, r12
     b4a:	0e 94 8f 18 	call	0x311e	; 0x311e <sin>
     b4e:	69 a3       	std	Y+33, r22	; 0x21
     b50:	7a a3       	std	Y+34, r23	; 0x22
     b52:	8b a3       	std	Y+35, r24	; 0x23
     b54:	9c a3       	std	Y+36, r25	; 0x24
     b56:	c7 01       	movw	r24, r14
     b58:	b6 01       	movw	r22, r12
     b5a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <cos>
     b5e:	6d a3       	std	Y+37, r22	; 0x25
     b60:	7e a3       	std	Y+38, r23	; 0x26
     b62:	8f a3       	std	Y+39, r24	; 0x27
     b64:	98 a7       	std	Y+40, r25	; 0x28
     b66:	00 e6       	ldi	r16, 0x60	; 96
     b68:	11 e0       	ldi	r17, 0x01	; 1
     b6a:	29 a1       	ldd	r18, Y+33	; 0x21
     b6c:	3a a1       	ldd	r19, Y+34	; 0x22
     b6e:	4b a1       	ldd	r20, Y+35	; 0x23
     b70:	5c a1       	ldd	r21, Y+36	; 0x24
     b72:	c3 01       	movw	r24, r6
     b74:	b2 01       	movw	r22, r4
     b76:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     b7a:	69 a7       	std	Y+41, r22	; 0x29
     b7c:	7a a7       	std	Y+42, r23	; 0x2a
     b7e:	8b a7       	std	Y+43, r24	; 0x2b
     b80:	9c a7       	std	Y+44, r25	; 0x2c
     b82:	2d a1       	ldd	r18, Y+37	; 0x25
     b84:	3e a1       	ldd	r19, Y+38	; 0x26
     b86:	4f a1       	ldd	r20, Y+39	; 0x27
     b88:	58 a5       	ldd	r21, Y+40	; 0x28
     b8a:	c5 01       	movw	r24, r10
     b8c:	b4 01       	movw	r22, r8
     b8e:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     b92:	9b 01       	movw	r18, r22
     b94:	ac 01       	movw	r20, r24
     b96:	69 a5       	ldd	r22, Y+41	; 0x29
     b98:	7a a5       	ldd	r23, Y+42	; 0x2a
     b9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     b9c:	9c a5       	ldd	r25, Y+44	; 0x2c
     b9e:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
     ba2:	f8 01       	movw	r30, r16
     ba4:	60 83       	st	Z, r22
     ba6:	71 83       	std	Z+1, r23	; 0x01
     ba8:	82 83       	std	Z+2, r24	; 0x02
     baa:	93 83       	std	Z+3, r25	; 0x03
	centerFour[1] = cos(theta)*t[1] + sin(theta)*t[0];
     bac:	2d a1       	ldd	r18, Y+37	; 0x25
     bae:	3e a1       	ldd	r19, Y+38	; 0x26
     bb0:	4f a1       	ldd	r20, Y+39	; 0x27
     bb2:	58 a5       	ldd	r21, Y+40	; 0x28
     bb4:	c3 01       	movw	r24, r6
     bb6:	b2 01       	movw	r22, r4
     bb8:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     bbc:	2b 01       	movw	r4, r22
     bbe:	3c 01       	movw	r6, r24
     bc0:	29 a1       	ldd	r18, Y+33	; 0x21
     bc2:	3a a1       	ldd	r19, Y+34	; 0x22
     bc4:	4b a1       	ldd	r20, Y+35	; 0x23
     bc6:	5c a1       	ldd	r21, Y+36	; 0x24
     bc8:	c5 01       	movw	r24, r10
     bca:	b4 01       	movw	r22, r8
     bcc:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     bd0:	9b 01       	movw	r18, r22
     bd2:	ac 01       	movw	r20, r24
     bd4:	c3 01       	movw	r24, r6
     bd6:	b2 01       	movw	r22, r4
     bd8:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
     bdc:	f8 01       	movw	r30, r16
     bde:	64 83       	std	Z+4, r22	; 0x04
     be0:	75 83       	std	Z+5, r23	; 0x05
     be2:	86 83       	std	Z+6, r24	; 0x06
     be4:	97 83       	std	Z+7, r25	; 0x07
	centerFour[2] = -theta;
     be6:	f7 fa       	bst	r15, 7
     be8:	f0 94       	com	r15
     bea:	f7 f8       	bld	r15, 7
     bec:	f0 94       	com	r15
     bee:	c0 86       	std	Z+8, r12	; 0x08
     bf0:	d1 86       	std	Z+9, r13	; 0x09
     bf2:	e2 86       	std	Z+10, r14	; 0x0a
     bf4:	f3 86       	std	Z+11, r15	; 0x0b
	
	return centerFour;
}
     bf6:	c8 01       	movw	r24, r16
     bf8:	ce 5b       	subi	r28, 0xBE	; 190
     bfa:	df 4f       	sbci	r29, 0xFF	; 255
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	1f 91       	pop	r17
     c0c:	0f 91       	pop	r16
     c0e:	ff 90       	pop	r15
     c10:	ef 90       	pop	r14
     c12:	df 90       	pop	r13
     c14:	cf 90       	pop	r12
     c16:	bf 90       	pop	r11
     c18:	af 90       	pop	r10
     c1a:	9f 90       	pop	r9
     c1c:	8f 90       	pop	r8
     c1e:	7f 90       	pop	r7
     c20:	6f 90       	pop	r6
     c22:	5f 90       	pop	r5
     c24:	4f 90       	pop	r4
     c26:	3f 90       	pop	r3
     c28:	2f 90       	pop	r2
     c2a:	08 95       	ret

00000c2c <localization_calc>:
void orientationCalculationFour(int pointsLong[2], float distVect[], int* top, int* bottom);


//Public function declarations 
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
     c2c:	4f 92       	push	r4
     c2e:	5f 92       	push	r5
     c30:	6f 92       	push	r6
     c32:	7f 92       	push	r7
     c34:	af 92       	push	r10
     c36:	bf 92       	push	r11
     c38:	cf 92       	push	r12
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	68 97       	sbiw	r28, 0x18	; 24
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	fc 01       	movw	r30, r24
	
	return robotCenter;
	
	
	
}
     c5a:	0d b7       	in	r16, 0x3d	; 61
     c5c:	1e b7       	in	r17, 0x3e	; 62
float* localization_calc(int rawStarData[8], float robotCenterPrev[3])
{	
	static float robotCenter[3];
	
	//Put the star data in a matrix where each row corresponds to 4 points
	int pvect[4][2] = {
     c5e:	80 81       	ld	r24, Z
     c60:	91 81       	ldd	r25, Z+1	; 0x01
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	80 85       	ldd	r24, Z+8	; 0x08
     c68:	91 85       	ldd	r25, Z+9	; 0x09
     c6a:	9c 83       	std	Y+4, r25	; 0x04
     c6c:	8b 83       	std	Y+3, r24	; 0x03
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	9e 83       	std	Y+6, r25	; 0x06
     c74:	8d 83       	std	Y+5, r24	; 0x05
     c76:	82 85       	ldd	r24, Z+10	; 0x0a
     c78:	93 85       	ldd	r25, Z+11	; 0x0b
     c7a:	98 87       	std	Y+8, r25	; 0x08
     c7c:	8f 83       	std	Y+7, r24	; 0x07
     c7e:	84 81       	ldd	r24, Z+4	; 0x04
     c80:	95 81       	ldd	r25, Z+5	; 0x05
     c82:	9a 87       	std	Y+10, r25	; 0x0a
     c84:	89 87       	std	Y+9, r24	; 0x09
     c86:	84 85       	ldd	r24, Z+12	; 0x0c
     c88:	95 85       	ldd	r25, Z+13	; 0x0d
     c8a:	9c 87       	std	Y+12, r25	; 0x0c
     c8c:	8b 87       	std	Y+11, r24	; 0x0b
     c8e:	86 81       	ldd	r24, Z+6	; 0x06
     c90:	97 81       	ldd	r25, Z+7	; 0x07
     c92:	9e 87       	std	Y+14, r25	; 0x0e
     c94:	8d 87       	std	Y+13, r24	; 0x0d
     c96:	86 85       	ldd	r24, Z+14	; 0x0e
     c98:	97 85       	ldd	r25, Z+15	; 0x0f
     c9a:	98 8b       	std	Y+16, r25	; 0x10
     c9c:	8f 87       	std	Y+15, r24	; 0x0f
		{rawStarData[3], rawStarData[7]}
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
     c9e:	fe 01       	movw	r30, r28
     ca0:	71 96       	adiw	r30, 0x11	; 17
     ca2:	88 e0       	ldi	r24, 0x08	; 8
     ca4:	df 01       	movw	r26, r30
     ca6:	1d 92       	st	X+, r1
     ca8:	8a 95       	dec	r24
     caa:	e9 f7       	brne	.-6      	; 0xca6 <localization_calc+0x7a>
     cac:	70 97       	sbiw	r30, 0x10	; 16
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i = 0; i < 4; i++){
		if (pvect[i][0] != 1023){
     cb6:	40 81       	ld	r20, Z
     cb8:	51 81       	ldd	r21, Z+1	; 0x01
     cba:	4f 3f       	cpi	r20, 0xFF	; 255
     cbc:	53 40       	sbci	r21, 0x03	; 3
     cbe:	71 f0       	breq	.+28     	; 0xcdc <localization_calc+0xb0>
			pointIndices[numPoints] = i;
     cc0:	dc 01       	movw	r26, r24
     cc2:	aa 0f       	add	r26, r26
     cc4:	bb 1f       	adc	r27, r27
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	4c 0f       	add	r20, r28
     ccc:	5d 1f       	adc	r21, r29
     cce:	a4 0f       	add	r26, r20
     cd0:	b5 1f       	adc	r27, r21
     cd2:	51 96       	adiw	r26, 0x11	; 17
     cd4:	3c 93       	st	X, r19
     cd6:	2e 93       	st	-X, r18
     cd8:	50 97       	sbiw	r26, 0x10	; 16
			numPoints++;
     cda:	01 96       	adiw	r24, 0x01	; 1
	
	//Extract all points that are readable into an array
	int pointIndices[4] = {0, 0, 0, 0}; //Initializes the indices
	int numPoints = 0; //Initialize number of points
	
	for (int i = 0; i < 4; i++){
     cdc:	2f 5f       	subi	r18, 0xFF	; 255
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
     ce0:	34 96       	adiw	r30, 0x04	; 4
     ce2:	24 30       	cpi	r18, 0x04	; 4
     ce4:	31 05       	cpc	r19, r1
     ce6:	39 f7       	brne	.-50     	; 0xcb6 <localization_calc+0x8a>
			numPoints++;
		}
	}
	
	
	if (numPoints) { //If any points were found 
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	09 f4       	brne	.+2      	; 0xcee <localization_calc+0xc2>
     cec:	89 c0       	rjmp	.+274    	; 0xe00 <localization_calc+0x1d4>
     cee:	ed b6       	in	r14, 0x3d	; 61
     cf0:	fe b6       	in	r15, 0x3e	; 62
		int points[numPoints][2]; //an array of the usable points 
     cf2:	6c 01       	movw	r12, r24
     cf4:	cc 0c       	add	r12, r12
     cf6:	dd 1c       	adc	r13, r13
     cf8:	cc 0c       	add	r12, r12
     cfa:	dd 1c       	adc	r13, r13
     cfc:	ad b7       	in	r26, 0x3d	; 61
     cfe:	be b7       	in	r27, 0x3e	; 62
     d00:	ac 19       	sub	r26, r12
     d02:	bd 09       	sbc	r27, r13
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	be bf       	out	0x3e, r27	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	ad bf       	out	0x3d, r26	; 61
     d0e:	ed b7       	in	r30, 0x3d	; 61
     d10:	fe b7       	in	r31, 0x3e	; 62
     d12:	31 96       	adiw	r30, 0x01	; 1
     d14:	5f 01       	movw	r10, r30
		for (int i = 0; i < numPoints; i++) {
     d16:	18 16       	cp	r1, r24
     d18:	19 06       	cpc	r1, r25
     d1a:	24 f5       	brge	.+72     	; 0xd64 <localization_calc+0x138>
     d1c:	9e 01       	movw	r18, r28
     d1e:	2f 5e       	subi	r18, 0xEF	; 239
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	df 01       	movw	r26, r30
     d24:	ce 0e       	add	r12, r30
     d26:	df 1e       	adc	r13, r31
			int index = pointIndices[i];
     d28:	f9 01       	movw	r30, r18
     d2a:	41 91       	ld	r20, Z+
     d2c:	51 91       	ld	r21, Z+
     d2e:	9f 01       	movw	r18, r30
			points[i][0] = pvect[index][0];
     d30:	fa 01       	movw	r30, r20
     d32:	ee 0f       	add	r30, r30
     d34:	ff 1f       	adc	r31, r31
     d36:	ee 0f       	add	r30, r30
     d38:	ff 1f       	adc	r31, r31
     d3a:	41 e0       	ldi	r20, 0x01	; 1
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	4c 0f       	add	r20, r28
     d40:	5d 1f       	adc	r21, r29
     d42:	e4 0f       	add	r30, r20
     d44:	f5 1f       	adc	r31, r21
     d46:	40 81       	ld	r20, Z
     d48:	51 81       	ldd	r21, Z+1	; 0x01
     d4a:	11 96       	adiw	r26, 0x01	; 1
     d4c:	5c 93       	st	X, r21
     d4e:	4e 93       	st	-X, r20
			points[i][1] = pvect[index][1];
     d50:	42 81       	ldd	r20, Z+2	; 0x02
     d52:	53 81       	ldd	r21, Z+3	; 0x03
     d54:	13 96       	adiw	r26, 0x03	; 3
     d56:	5c 93       	st	X, r21
     d58:	4e 93       	st	-X, r20
     d5a:	12 97       	sbiw	r26, 0x02	; 2
     d5c:	14 96       	adiw	r26, 0x04	; 4
	}
	
	
	if (numPoints) { //If any points were found 
		int points[numPoints][2]; //an array of the usable points 
		for (int i = 0; i < numPoints; i++) {
     d5e:	ac 15       	cp	r26, r12
     d60:	bd 05       	cpc	r27, r13
     d62:	11 f7       	brne	.-60     	; 0xd28 <localization_calc+0xfc>
			points[i][1] = pvect[index][1];
		}
		
		float* calcPointer; 
		static float rc[3] = {0,0,0};
		rc[0] = robotCenterPrev[0];
     d64:	db 01       	movw	r26, r22
     d66:	4d 90       	ld	r4, X+
     d68:	5d 90       	ld	r5, X+
     d6a:	6d 90       	ld	r6, X+
     d6c:	7c 90       	ld	r7, X
     d6e:	13 97       	sbiw	r26, 0x03	; 3
     d70:	e8 e7       	ldi	r30, 0x78	; 120
     d72:	f1 e0       	ldi	r31, 0x01	; 1
     d74:	40 82       	st	Z, r4
     d76:	51 82       	std	Z+1, r5	; 0x01
     d78:	62 82       	std	Z+2, r6	; 0x02
     d7a:	73 82       	std	Z+3, r7	; 0x03
		rc[1] = robotCenterPrev[1];
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	4d 90       	ld	r4, X+
     d80:	5d 90       	ld	r5, X+
     d82:	6d 90       	ld	r6, X+
     d84:	7c 90       	ld	r7, X
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	44 82       	std	Z+4, r4	; 0x04
     d8a:	55 82       	std	Z+5, r5	; 0x05
     d8c:	66 82       	std	Z+6, r6	; 0x06
     d8e:	77 82       	std	Z+7, r7	; 0x07
		rc[2] = robotCenterPrev[2];
     d90:	18 96       	adiw	r26, 0x08	; 8
     d92:	4d 91       	ld	r20, X+
     d94:	5d 91       	ld	r21, X+
     d96:	6d 91       	ld	r22, X+
     d98:	7c 91       	ld	r23, X
     d9a:	1b 97       	sbiw	r26, 0x0b	; 11
     d9c:	40 87       	std	Z+8, r20	; 0x08
     d9e:	51 87       	std	Z+9, r21	; 0x09
     da0:	62 87       	std	Z+10, r22	; 0x0a
     da2:	73 87       	std	Z+11, r23	; 0x0b
		switch (numPoints)
     da4:	04 97       	sbiw	r24, 0x04	; 4
     da6:	29 f4       	brne	.+10     	; 0xdb2 <localization_calc+0x186>
		{
			case 4 :
				calcPointer = fourPointCalc(points);
     da8:	c5 01       	movw	r24, r10
     daa:	0e 94 05 03 	call	0x60a	; 0x60a <fourPointCalc>
     dae:	dc 01       	movw	r26, r24
				break;
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <localization_calc+0x18a>
				
			case 3 : 
				//calcPointer = threePointCalc(points);
				calcPointer = &rc[0];
     db2:	a8 e7       	ldi	r26, 0x78	; 120
     db4:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				calcPointer = &rc[0];
				
		}
		
		robotCenter[0] = (float)calcPointer[0];
     db6:	4d 91       	ld	r20, X+
     db8:	5d 91       	ld	r21, X+
     dba:	6d 91       	ld	r22, X+
     dbc:	7c 91       	ld	r23, X
     dbe:	13 97       	sbiw	r26, 0x03	; 3
     dc0:	ec e6       	ldi	r30, 0x6C	; 108
     dc2:	f1 e0       	ldi	r31, 0x01	; 1
     dc4:	40 83       	st	Z, r20
     dc6:	51 83       	std	Z+1, r21	; 0x01
     dc8:	62 83       	std	Z+2, r22	; 0x02
     dca:	73 83       	std	Z+3, r23	; 0x03
		robotCenter[1] = (float)calcPointer[1];
     dcc:	14 96       	adiw	r26, 0x04	; 4
     dce:	4d 91       	ld	r20, X+
     dd0:	5d 91       	ld	r21, X+
     dd2:	6d 91       	ld	r22, X+
     dd4:	7c 91       	ld	r23, X
     dd6:	17 97       	sbiw	r26, 0x07	; 7
     dd8:	44 83       	std	Z+4, r20	; 0x04
     dda:	55 83       	std	Z+5, r21	; 0x05
     ddc:	66 83       	std	Z+6, r22	; 0x06
     dde:	77 83       	std	Z+7, r23	; 0x07
		robotCenter[2] = (float)calcPointer[2];
     de0:	18 96       	adiw	r26, 0x08	; 8
     de2:	8d 91       	ld	r24, X+
     de4:	9d 91       	ld	r25, X+
     de6:	0d 90       	ld	r0, X+
     de8:	bc 91       	ld	r27, X
     dea:	a0 2d       	mov	r26, r0
     dec:	80 87       	std	Z+8, r24	; 0x08
     dee:	91 87       	std	Z+9, r25	; 0x09
     df0:	a2 87       	std	Z+10, r26	; 0x0a
     df2:	b3 87       	std	Z+11, r27	; 0x0b
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	fe be       	out	0x3e, r15	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	ed be       	out	0x3d, r14	; 61
     dfe:	20 c0       	rjmp	.+64     	; 0xe40 <localization_calc+0x214>
		
	
	} else { 
		robotCenter[0] = robotCenterPrev[0]; 
     e00:	fb 01       	movw	r30, r22
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	a2 81       	ldd	r26, Z+2	; 0x02
     e08:	b3 81       	ldd	r27, Z+3	; 0x03
     e0a:	ec e6       	ldi	r30, 0x6C	; 108
     e0c:	f1 e0       	ldi	r31, 0x01	; 1
     e0e:	80 83       	st	Z, r24
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	a2 83       	std	Z+2, r26	; 0x02
     e14:	b3 83       	std	Z+3, r27	; 0x03
		robotCenter[1] = robotCenterPrev[1];
     e16:	db 01       	movw	r26, r22
     e18:	14 96       	adiw	r26, 0x04	; 4
     e1a:	cd 90       	ld	r12, X+
     e1c:	dd 90       	ld	r13, X+
     e1e:	ed 90       	ld	r14, X+
     e20:	fc 90       	ld	r15, X
     e22:	17 97       	sbiw	r26, 0x07	; 7
     e24:	c4 82       	std	Z+4, r12	; 0x04
     e26:	d5 82       	std	Z+5, r13	; 0x05
     e28:	e6 82       	std	Z+6, r14	; 0x06
     e2a:	f7 82       	std	Z+7, r15	; 0x07
		robotCenter[2] = robotCenterPrev[2];	
     e2c:	18 96       	adiw	r26, 0x08	; 8
     e2e:	4d 91       	ld	r20, X+
     e30:	5d 91       	ld	r21, X+
     e32:	6d 91       	ld	r22, X+
     e34:	7c 91       	ld	r23, X
     e36:	1b 97       	sbiw	r26, 0x0b	; 11
     e38:	40 87       	std	Z+8, r20	; 0x08
     e3a:	51 87       	std	Z+9, r21	; 0x09
     e3c:	62 87       	std	Z+10, r22	; 0x0a
     e3e:	73 87       	std	Z+11, r23	; 0x0b
	
	return robotCenter;
	
	
	
}
     e40:	8c e6       	ldi	r24, 0x6C	; 108
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	1e bf       	out	0x3e, r17	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0d bf       	out	0x3d, r16	; 61
     e4e:	68 96       	adiw	r28, 0x18	; 24
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	df 90       	pop	r13
     e68:	cf 90       	pop	r12
     e6a:	bf 90       	pop	r11
     e6c:	af 90       	pop	r10
     e6e:	7f 90       	pop	r7
     e70:	6f 90       	pop	r6
     e72:	5f 90       	pop	r5
     e74:	4f 90       	pop	r4
     e76:	08 95       	ret

00000e78 <motor_update>:
Initialization of Subsystem Components
************************************************************/

/* Called On Timer 3 Rollover */
void motor_update(void)
{
     e78:	af 92       	push	r10
     e7a:	bf 92       	push	r11
     e7c:	cf 92       	push	r12
     e7e:	df 92       	push	r13
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
	set(TIFR3,OCF3A);		// Reset flag
     e88:	c1 9a       	sbi	0x18, 1	; 24
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd); // Update control
     e8a:	a0 90 10 01 	lds	r10, 0x0110
     e8e:	b0 90 11 01 	lds	r11, 0x0111
     e92:	c0 90 12 01 	lds	r12, 0x0112
     e96:	d0 90 13 01 	lds	r13, 0x0113
     e9a:	e0 90 14 01 	lds	r14, 0x0114
     e9e:	f0 90 15 01 	lds	r15, 0x0115
     ea2:	00 91 16 01 	lds	r16, 0x0116
     ea6:	10 91 17 01 	lds	r17, 0x0117
     eaa:	20 91 a9 01 	lds	r18, 0x01A9
     eae:	30 91 aa 01 	lds	r19, 0x01AA
     eb2:	40 91 ab 01 	lds	r20, 0x01AB
     eb6:	50 91 ac 01 	lds	r21, 0x01AC
     eba:	60 91 ad 01 	lds	r22, 0x01AD
     ebe:	70 91 ae 01 	lds	r23, 0x01AE
     ec2:	80 91 af 01 	lds	r24, 0x01AF
     ec6:	90 91 b0 01 	lds	r25, 0x01B0
     eca:	e0 91 03 01 	lds	r30, 0x0103
     ece:	ef 93       	push	r30
     ed0:	e0 91 02 01 	lds	r30, 0x0102
     ed4:	ef 93       	push	r30
     ed6:	e0 91 01 01 	lds	r30, 0x0101
     eda:	ef 93       	push	r30
     edc:	e0 91 00 01 	lds	r30, 0x0100
     ee0:	ef 93       	push	r30
     ee2:	e0 91 07 01 	lds	r30, 0x0107
     ee6:	ef 93       	push	r30
     ee8:	e0 91 06 01 	lds	r30, 0x0106
     eec:	ef 93       	push	r30
     eee:	e0 91 05 01 	lds	r30, 0x0105
     ef2:	ef 93       	push	r30
     ef4:	e0 91 04 01 	lds	r30, 0x0104
     ef8:	ef 93       	push	r30
     efa:	e0 91 0b 01 	lds	r30, 0x010B
     efe:	ef 93       	push	r30
     f00:	e0 91 0a 01 	lds	r30, 0x010A
     f04:	ef 93       	push	r30
     f06:	e0 91 09 01 	lds	r30, 0x0109
     f0a:	ef 93       	push	r30
     f0c:	e0 91 08 01 	lds	r30, 0x0108
     f10:	ef 93       	push	r30
     f12:	e0 91 0f 01 	lds	r30, 0x010F
     f16:	ef 93       	push	r30
     f18:	e0 91 0e 01 	lds	r30, 0x010E
     f1c:	ef 93       	push	r30
     f1e:	e0 91 0d 01 	lds	r30, 0x010D
     f22:	ef 93       	push	r30
     f24:	e0 91 0c 01 	lds	r30, 0x010C
     f28:	ef 93       	push	r30
     f2a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <run_motor_control_loop>
     f2e:	8d b7       	in	r24, 0x3d	; 61
     f30:	9e b7       	in	r25, 0x3e	; 62
     f32:	40 96       	adiw	r24, 0x10	; 16
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	9e bf       	out	0x3e, r25	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	8d bf       	out	0x3d, r24	; 61
}
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	08 95       	ret

00000f50 <bot_behavior_update>:

/* Update Targets, Gains, and Max Vals */
void bot_behavior_update()
{
	if (has_puck())
     f50:	0e 94 c3 13 	call	0x2786	; 0x2786 <has_puck>
     f54:	88 23       	and	r24, r24
     f56:	d9 f1       	breq	.+118    	; 0xfce <bot_behavior_update+0x7e>
	{
		x_target = x_goal;
     f58:	80 91 94 01 	lds	r24, 0x0194
     f5c:	90 91 95 01 	lds	r25, 0x0195
     f60:	a0 91 96 01 	lds	r26, 0x0196
     f64:	b0 91 97 01 	lds	r27, 0x0197
     f68:	80 93 ad 01 	sts	0x01AD, r24
     f6c:	90 93 ae 01 	sts	0x01AE, r25
     f70:	a0 93 af 01 	sts	0x01AF, r26
     f74:	b0 93 b0 01 	sts	0x01B0, r27
		y_target = y_goal;
     f78:	80 91 90 01 	lds	r24, 0x0190
     f7c:	90 91 91 01 	lds	r25, 0x0191
     f80:	a0 91 92 01 	lds	r26, 0x0192
     f84:	b0 91 93 01 	lds	r27, 0x0193
     f88:	80 93 a9 01 	sts	0x01A9, r24
     f8c:	90 93 aa 01 	sts	0x01AA, r25
     f90:	a0 93 ab 01 	sts	0x01AB, r26
     f94:	b0 93 ac 01 	sts	0x01AC, r27
		max_theta = M_PI/2;
     f98:	8b ed       	ldi	r24, 0xDB	; 219
     f9a:	9f e0       	ldi	r25, 0x0F	; 15
     f9c:	a9 ec       	ldi	r26, 0xC9	; 201
     f9e:	bf e3       	ldi	r27, 0x3F	; 63
     fa0:	80 93 10 01 	sts	0x0110, r24
     fa4:	90 93 11 01 	sts	0x0111, r25
     fa8:	a0 93 12 01 	sts	0x0112, r26
     fac:	b0 93 13 01 	sts	0x0113, r27
		max_duty_cycle = 0.8;
     fb0:	8d ec       	ldi	r24, 0xCD	; 205
     fb2:	9c ec       	ldi	r25, 0xCC	; 204
     fb4:	ac e4       	ldi	r26, 0x4C	; 76
     fb6:	bf e3       	ldi	r27, 0x3F	; 63
     fb8:	80 93 14 01 	sts	0x0114, r24
     fbc:	90 93 15 01 	sts	0x0115, r25
     fc0:	a0 93 16 01 	sts	0x0116, r26
     fc4:	b0 93 17 01 	sts	0x0117, r27
		m_green(OFF);
     fc8:	6a 9a       	sbi	0x0d, 2	; 13
     fca:	72 9a       	sbi	0x0e, 2	; 14
     fcc:	08 95       	ret
		return;
		
	}
	
	if (!has_puck())
     fce:	0e 94 c3 13 	call	0x2786	; 0x2786 <has_puck>
     fd2:	81 11       	cpse	r24, r1
     fd4:	3a c0       	rjmp	.+116    	; 0x104a <bot_behavior_update+0xfa>
	{
		x_target = x_puck;
     fd6:	80 91 88 01 	lds	r24, 0x0188
     fda:	90 91 89 01 	lds	r25, 0x0189
     fde:	a0 91 8a 01 	lds	r26, 0x018A
     fe2:	b0 91 8b 01 	lds	r27, 0x018B
     fe6:	80 93 ad 01 	sts	0x01AD, r24
     fea:	90 93 ae 01 	sts	0x01AE, r25
     fee:	a0 93 af 01 	sts	0x01AF, r26
     ff2:	b0 93 b0 01 	sts	0x01B0, r27
		y_target = y_puck;
     ff6:	80 91 84 01 	lds	r24, 0x0184
     ffa:	90 91 85 01 	lds	r25, 0x0185
     ffe:	a0 91 86 01 	lds	r26, 0x0186
    1002:	b0 91 87 01 	lds	r27, 0x0187
    1006:	80 93 a9 01 	sts	0x01A9, r24
    100a:	90 93 aa 01 	sts	0x01AA, r25
    100e:	a0 93 ab 01 	sts	0x01AB, r26
    1012:	b0 93 ac 01 	sts	0x01AC, r27
		max_theta = M_PI;
    1016:	8b ed       	ldi	r24, 0xDB	; 219
    1018:	9f e0       	ldi	r25, 0x0F	; 15
    101a:	a9 e4       	ldi	r26, 0x49	; 73
    101c:	b0 e4       	ldi	r27, 0x40	; 64
    101e:	80 93 10 01 	sts	0x0110, r24
    1022:	90 93 11 01 	sts	0x0111, r25
    1026:	a0 93 12 01 	sts	0x0112, r26
    102a:	b0 93 13 01 	sts	0x0113, r27
		max_duty_cycle = 0.8;
    102e:	8d ec       	ldi	r24, 0xCD	; 205
    1030:	9c ec       	ldi	r25, 0xCC	; 204
    1032:	ac e4       	ldi	r26, 0x4C	; 76
    1034:	bf e3       	ldi	r27, 0x3F	; 63
    1036:	80 93 14 01 	sts	0x0114, r24
    103a:	90 93 15 01 	sts	0x0115, r25
    103e:	a0 93 16 01 	sts	0x0116, r26
    1042:	b0 93 17 01 	sts	0x0117, r27
		m_green(ON);
    1046:	6a 9a       	sbi	0x0d, 2	; 13
    1048:	72 98       	cbi	0x0e, 2	; 14
    104a:	08 95       	ret

0000104c <adc_update>:
	}
}

/* Called on ADC Conversion Completion */
void adc_update(void)
{
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	28 97       	sbiw	r28, 0x08	; 8
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
	set(ADCSRA,ADIF);	 // Reset flag
    1060:	ea e7       	ldi	r30, 0x7A	; 122
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	80 61       	ori	r24, 0x10	; 16
    1068:	80 83       	st	Z, r24
	if(adc_switch()){
    106a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <adc_switch>
    106e:	88 23       	and	r24, r24
    1070:	e1 f0       	breq	.+56     	; 0x10aa <adc_update+0x5e>
		float puck_buffer[2];
		get_puck_location(puck_buffer);
    1072:	ce 01       	movw	r24, r28
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <get_puck_location>
		x_puck = puck_buffer[0];
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	ab 81       	ldd	r26, Y+3	; 0x03
    1080:	bc 81       	ldd	r27, Y+4	; 0x04
    1082:	80 93 88 01 	sts	0x0188, r24
    1086:	90 93 89 01 	sts	0x0189, r25
    108a:	a0 93 8a 01 	sts	0x018A, r26
    108e:	b0 93 8b 01 	sts	0x018B, r27
		y_puck = puck_buffer[1];
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	af 81       	ldd	r26, Y+7	; 0x07
    1098:	b8 85       	ldd	r27, Y+8	; 0x08
    109a:	80 93 84 01 	sts	0x0184, r24
    109e:	90 93 85 01 	sts	0x0185, r25
    10a2:	a0 93 86 01 	sts	0x0186, r26
    10a6:	b0 93 87 01 	sts	0x0187, r27
	}
}
    10aa:	28 96       	adiw	r28, 0x08	; 8
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	08 95       	ret

000010bc <positioning_LED>:
	
}

void positioning_LED(int color)
{
	switch(color)
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	41 f0       	breq	.+16     	; 0x10d2 <positioning_LED+0x16>
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	91 05       	cpc	r25, r1
    10c6:	41 f0       	breq	.+16     	; 0x10d8 <positioning_LED+0x1c>
    10c8:	89 2b       	or	r24, r25
    10ca:	41 f4       	brne	.+16     	; 0x10dc <positioning_LED+0x20>
	{ 
		case OFF:	//OFF
			clear(PORTC,7);
    10cc:	47 98       	cbi	0x08, 7	; 8
			clear(PORTC,6);
    10ce:	46 98       	cbi	0x08, 6	; 8
			break;
    10d0:	08 95       	ret
		
		case BLUE:	//BLUE
			set(PORTC,6);
    10d2:	46 9a       	sbi	0x08, 6	; 8
			clear(PORTC,7);
    10d4:	47 98       	cbi	0x08, 7	; 8
			break;
    10d6:	08 95       	ret
			
		case RED: //RED
			clear(PORTC,6);
    10d8:	46 98       	cbi	0x08, 6	; 8
			set(PORTC,7);
    10da:	47 9a       	sbi	0x08, 7	; 8
    10dc:	08 95       	ret

000010de <play>:
void play(void)
{
	/* Light LED of defending goal */
	
	/* Play */
	set(TCCR1B,CS10);
    10de:	e1 e8       	ldi	r30, 0x81	; 129
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	81 60       	ori	r24, 0x01	; 1
    10e6:	80 83       	st	Z, r24
	positioning_LED(goal);
    10e8:	80 91 8e 01 	lds	r24, 0x018E
    10ec:	90 91 8f 01 	lds	r25, 0x018F
    10f0:	0e 94 5e 08 	call	0x10bc	; 0x10bc <positioning_LED>
    10f4:	08 95       	ret

000010f6 <pause>:
}

void pause(void)
{
	/* Stop within 3  seconds */
	clear(TCCR1B,CS10);
    10f6:	e1 e8       	ldi	r30, 0x81	; 129
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8e 7f       	andi	r24, 0xFE	; 254
    10fe:	80 83       	st	Z, r24
	clear(PORTB,0); // B0 Left motor off
    1100:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,2); // B2 Right motor off
    1102:	2a 98       	cbi	0x05, 2	; 5
	positioning_LED(OFF);
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 5e 08 	call	0x10bc	; 0x10bc <positioning_LED>
    110c:	08 95       	ret

0000110e <halftime>:
}

void halftime(void)
{
	/* Stop play */
	pause();
    110e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pause>
	
	/* Switch assigned goal */
	if (x_goal>0) {
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	a9 01       	movw	r20, r18
    1118:	60 91 94 01 	lds	r22, 0x0194
    111c:	70 91 95 01 	lds	r23, 0x0195
    1120:	80 91 96 01 	lds	r24, 0x0196
    1124:	90 91 97 01 	lds	r25, 0x0197
    1128:	0e 94 15 18 	call	0x302a	; 0x302a <__gesf2>
    112c:	18 16       	cp	r1, r24
    112e:	9c f4       	brge	.+38     	; 0x1156 <halftime+0x48>
		x_goal = -1*GOAL_X_DIST;
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	a8 ec       	ldi	r26, 0xC8	; 200
    1136:	b3 ec       	ldi	r27, 0xC3	; 195
    1138:	80 93 94 01 	sts	0x0194, r24
    113c:	90 93 95 01 	sts	0x0195, r25
    1140:	a0 93 96 01 	sts	0x0196, r26
    1144:	b0 93 97 01 	sts	0x0197, r27
		goal = RED;
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	90 93 8f 01 	sts	0x018F, r25
    1150:	80 93 8e 01 	sts	0x018E, r24
    1154:	08 95       	ret
		} else {
		x_goal = GOAL_X_DIST;
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a8 ec       	ldi	r26, 0xC8	; 200
    115c:	b3 e4       	ldi	r27, 0x43	; 67
    115e:	80 93 94 01 	sts	0x0194, r24
    1162:	90 93 95 01 	sts	0x0195, r25
    1166:	a0 93 96 01 	sts	0x0196, r26
    116a:	b0 93 97 01 	sts	0x0197, r27
		goal = BLUE;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	90 93 8f 01 	sts	0x018F, r25
    1176:	80 93 8e 01 	sts	0x018E, r24
    117a:	08 95       	ret

0000117c <select_goal>:
			break;
	}
}

void select_goal(void) 
{
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	2c 97       	sbiw	r28, 0x0c	; 12
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
	/* Assign Defending goal */
	update_position();
    1190:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <update_position>
	
	float position_buffer[3];
	get_position(position_buffer);
    1194:	ce 01       	movw	r24, r28
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	0e 94 fd 09 	call	0x13fa	; 0x13fa <get_position>
	m_usb_tx_int((int)position_buffer[0]);
    119c:	69 81       	ldd	r22, Y+1	; 0x01
    119e:	7a 81       	ldd	r23, Y+2	; 0x02
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <__fixsfsi>
    11a8:	cb 01       	movw	r24, r22
    11aa:	0e 94 b4 10 	call	0x2168	; 0x2168 <m_usb_tx_int>
	
	if (position_buffer[0]>0) {
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	a9 01       	movw	r20, r18
    11b4:	69 81       	ldd	r22, Y+1	; 0x01
    11b6:	7a 81       	ldd	r23, Y+2	; 0x02
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	0e 94 15 18 	call	0x302a	; 0x302a <__gesf2>
    11c0:	18 16       	cp	r1, r24
    11c2:	9c f4       	brge	.+38     	; 0x11ea <select_goal+0x6e>
		x_goal = -1*GOAL_X_DIST;
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a8 ec       	ldi	r26, 0xC8	; 200
    11ca:	b3 ec       	ldi	r27, 0xC3	; 195
    11cc:	80 93 94 01 	sts	0x0194, r24
    11d0:	90 93 95 01 	sts	0x0195, r25
    11d4:	a0 93 96 01 	sts	0x0196, r26
    11d8:	b0 93 97 01 	sts	0x0197, r27
		goal = RED;
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	90 93 8f 01 	sts	0x018F, r25
    11e4:	80 93 8e 01 	sts	0x018E, r24
    11e8:	12 c0       	rjmp	.+36     	; 0x120e <select_goal+0x92>
		//positioning_LED(RED);
		} else {
		x_goal = GOAL_X_DIST;
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a8 ec       	ldi	r26, 0xC8	; 200
    11f0:	b3 e4       	ldi	r27, 0x43	; 67
    11f2:	80 93 94 01 	sts	0x0194, r24
    11f6:	90 93 95 01 	sts	0x0195, r25
    11fa:	a0 93 96 01 	sts	0x0196, r26
    11fe:	b0 93 97 01 	sts	0x0197, r27
		goal = BLUE;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	90 93 8f 01 	sts	0x018F, r25
    120a:	80 93 8e 01 	sts	0x018E, r24
		//positioning_LED(BLUE);
	}
}
    120e:	2c 96       	adiw	r28, 0x0c	; 12
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <comm_test>:
	}
}

void comm_test(void)
{
	if (!goal_init){
    1220:	80 91 8c 01 	lds	r24, 0x018C
    1224:	90 91 8d 01 	lds	r25, 0x018D
    1228:	89 2b       	or	r24, r25
    122a:	11 f4       	brne	.+4      	; 0x1230 <comm_test+0x10>
		select_goal();
    122c:	0e 94 be 08 	call	0x117c	; 0x117c <select_goal>
	}
	/* Flash color of LED for defending goal */
	set(TCCR0B,CS02); //start timer 
    1230:	85 b5       	in	r24, 0x25	; 37
    1232:	84 60       	ori	r24, 0x04	; 4
    1234:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS00);
    1236:	85 b5       	in	r24, 0x25	; 37
    1238:	81 60       	ori	r24, 0x01	; 1
    123a:	85 bd       	out	0x25, r24	; 37
	positioning_LED(goal); //turn on LED 
    123c:	80 91 8e 01 	lds	r24, 0x018E
    1240:	90 91 8f 01 	lds	r25, 0x018F
    1244:	0e 94 5e 08 	call	0x10bc	; 0x10bc <positioning_LED>
    1248:	08 95       	ret

0000124a <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
    124a:	e0 91 9e 01 	lds	r30, 0x019E
    124e:	8e 2f       	mov	r24, r30
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	fc 01       	movw	r30, r24
    1254:	e0 5a       	subi	r30, 0xA0	; 160
    1256:	f1 09       	sbc	r31, r1
    1258:	e8 30       	cpi	r30, 0x08	; 8
    125a:	f1 05       	cpc	r31, r1
    125c:	40 f5       	brcc	.+80     	; 0x12ae <update_game_state+0x64>
    125e:	ea 5a       	subi	r30, 0xAA	; 170
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__tablejump2__>
		case 0xA0: // Comm Test
		comm_test();
    1266:	0e 94 10 09 	call	0x1220	; 0x1220 <comm_test>
		break;
    126a:	08 95       	ret
		case 0xA1: // Play
		play();
    126c:	0e 94 6f 08 	call	0x10de	; 0x10de <play>
		break;
    1270:	08 95       	ret
		case 0xA2: // Goal R
		SR = buffer[1];
    1272:	ef e9       	ldi	r30, 0x9F	; 159
    1274:	f1 e0       	ldi	r31, 0x01	; 1
    1276:	81 81       	ldd	r24, Z+1	; 0x01
    1278:	80 93 9d 01 	sts	0x019D, r24
		SB = buffer[2];
    127c:	82 81       	ldd	r24, Z+2	; 0x02
    127e:	80 93 9c 01 	sts	0x019C, r24
		pause();
    1282:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pause>
		break;
    1286:	08 95       	ret
		case 0xA3: // Goal B
		SR = buffer[1];
    1288:	ef e9       	ldi	r30, 0x9F	; 159
    128a:	f1 e0       	ldi	r31, 0x01	; 1
    128c:	81 81       	ldd	r24, Z+1	; 0x01
    128e:	80 93 9d 01 	sts	0x019D, r24
		SB = buffer[2];
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	80 93 9c 01 	sts	0x019C, r24
		pause();
    1298:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pause>
		break;
    129c:	08 95       	ret
		case 0xA4: // Pause
		pause();
    129e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pause>
		break;
    12a2:	08 95       	ret
		case 0xA6: // Halftime
		halftime();
    12a4:	0e 94 87 08 	call	0x110e	; 0x110e <halftime>
		break;
    12a8:	08 95       	ret
}

void game_over(void)
{
	// Stop play
	pause();
    12aa:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pause>
    12ae:	08 95       	ret

000012b0 <wireless_recieve>:
}

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    12b0:	6a e0       	ldi	r22, 0x0A	; 10
    12b2:	8f e9       	ldi	r24, 0x9F	; 159
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <m_rf_read>
	game_state = buffer[0];
    12ba:	80 91 9f 01 	lds	r24, 0x019F
    12be:	80 93 9e 01 	sts	0x019E, r24
	update_game_state();
    12c2:	0e 94 25 09 	call	0x124a	; 0x124a <update_game_state>
    12c6:	08 95       	ret

000012c8 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
    12c8:	6e 9a       	sbi	0x0d, 6	; 13
    12ca:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey();
    12cc:	0e 94 09 01 	call	0x212	; 0x212 <initialize_robockey>
	pause();
    12d0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pause>

	/* Confirm successful initialization(s) */
	m_green(ON);
    12d4:	6a 9a       	sbi	0x0d, 2	; 13
    12d6:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    12d8:	ca e7       	ldi	r28, 0x7A	; 122
    12da:	d0 e0       	ldi	r29, 0x00	; 0
		bot_behavior_update();
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
		if (wifi_flag) {
			wifi_flag = 0;
			m_red(TOGGLE);
    12dc:	10 e4       	ldi	r17, 0x40	; 64
	/* Confirm successful initialization(s) */
	m_green(ON);

	/* Run */
	while (1){
		update_position();
    12de:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <update_position>
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    12e2:	88 81       	ld	r24, Y
    12e4:	84 fd       	sbrc	r24, 4
    12e6:	0e 94 26 08 	call	0x104c	; 0x104c <adc_update>
		bot_behavior_update();
    12ea:	0e 94 a8 07 	call	0xf50	; 0xf50 <bot_behavior_update>
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
    12ee:	c1 99       	sbic	0x18, 1	; 24
    12f0:	0e 94 3c 07 	call	0xe78	; 0xe78 <motor_update>
		if (wifi_flag) {
    12f4:	80 91 9a 01 	lds	r24, 0x019A
    12f8:	90 91 9b 01 	lds	r25, 0x019B
    12fc:	89 2b       	or	r24, r25
    12fe:	79 f3       	breq	.-34     	; 0x12de <main+0x16>
			wifi_flag = 0;
    1300:	10 92 9b 01 	sts	0x019B, r1
    1304:	10 92 9a 01 	sts	0x019A, r1
			m_red(TOGGLE);
    1308:	6e 9a       	sbi	0x0d, 6	; 13
    130a:	8e b1       	in	r24, 0x0e	; 14
    130c:	81 27       	eor	r24, r17
    130e:	8e b9       	out	0x0e, r24	; 14
			wireless_recieve();
    1310:	0e 94 58 09 	call	0x12b0	; 0x12b0 <wireless_recieve>
    1314:	e4 cf       	rjmp	.-56     	; 0x12de <main+0x16>

00001316 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	0f 92       	push	r0
    131e:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    1320:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
    1322:	2a 9a       	sbi	0x05, 2	; 5
}
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	0f 90       	pop	r0
    132a:	1f 90       	pop	r1
    132c:	18 95       	reti

0000132e <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    132e:	1f 92       	push	r1
    1330:	0f 92       	push	r0
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	0f 92       	push	r0
    1336:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    1338:	28 98       	cbi	0x05, 0	; 5
}
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    134e:	2a 98       	cbi	0x05, 2	; 5
}
    1350:	0f 90       	pop	r0
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	0f 90       	pop	r0
    1356:	1f 90       	pop	r1
    1358:	18 95       	reti

0000135a <__vector_3>:


/* Recieve Wireless Comm */
ISR(INT2_vect){
    135a:	1f 92       	push	r1
    135c:	0f 92       	push	r0
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	0f 92       	push	r0
    1362:	11 24       	eor	r1, r1
    1364:	8f 93       	push	r24
    1366:	9f 93       	push	r25
	//m_red(TOGGLE);
	wifi_flag = 1;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	90 93 9b 01 	sts	0x019B, r25
    1370:	80 93 9a 01 	sts	0x019A, r24
}
    1374:	9f 91       	pop	r25
    1376:	8f 91       	pop	r24
    1378:	0f 90       	pop	r0
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	0f 90       	pop	r0
    137e:	1f 90       	pop	r1
    1380:	18 95       	reti

00001382 <__vector_23>:

ISR(TIMER0_OVF_vect){
    1382:	1f 92       	push	r1
    1384:	0f 92       	push	r0
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	0f 92       	push	r0
    138a:	11 24       	eor	r1, r1
    138c:	2f 93       	push	r18
    138e:	3f 93       	push	r19
    1390:	4f 93       	push	r20
    1392:	5f 93       	push	r21
    1394:	6f 93       	push	r22
    1396:	7f 93       	push	r23
    1398:	8f 93       	push	r24
    139a:	9f 93       	push	r25
    139c:	af 93       	push	r26
    139e:	bf 93       	push	r27
    13a0:	ef 93       	push	r30
    13a2:	ff 93       	push	r31
	
	if (tim0_counts < 10) {
    13a4:	80 91 98 01 	lds	r24, 0x0198
    13a8:	90 91 99 01 	lds	r25, 0x0199
    13ac:	8a 30       	cpi	r24, 0x0A	; 10
    13ae:	91 05       	cpc	r25, r1
    13b0:	34 f4       	brge	.+12     	; 0x13be <__vector_23+0x3c>
		tim0_counts++; //increment timer counter
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	90 93 99 01 	sts	0x0199, r25
    13b8:	80 93 98 01 	sts	0x0198, r24
    13bc:	0d c0       	rjmp	.+26     	; 0x13d8 <__vector_23+0x56>
		
	} else {
		positioning_LED(OFF); //turn LED off
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <positioning_LED>
		
		clear(TCCR0B,CS02); //turn timer off
    13c6:	85 b5       	in	r24, 0x25	; 37
    13c8:	8b 7f       	andi	r24, 0xFB	; 251
    13ca:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS01);
    13cc:	85 b5       	in	r24, 0x25	; 37
    13ce:	8d 7f       	andi	r24, 0xFD	; 253
    13d0:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS00);
    13d2:	85 b5       	in	r24, 0x25	; 37
    13d4:	8e 7f       	andi	r24, 0xFE	; 254
    13d6:	85 bd       	out	0x25, r24	; 37
	}
}
    13d8:	ff 91       	pop	r31
    13da:	ef 91       	pop	r30
    13dc:	bf 91       	pop	r27
    13de:	af 91       	pop	r26
    13e0:	9f 91       	pop	r25
    13e2:	8f 91       	pop	r24
    13e4:	7f 91       	pop	r23
    13e6:	6f 91       	pop	r22
    13e8:	5f 91       	pop	r21
    13ea:	4f 91       	pop	r20
    13ec:	3f 91       	pop	r19
    13ee:	2f 91       	pop	r18
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <get_position>:
/************************************************************
Public Functions
************************************************************/

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    13fa:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    13fc:	80 91 c1 01 	lds	r24, 0x01C1
    1400:	90 91 c2 01 	lds	r25, 0x01C2
    1404:	a0 91 c3 01 	lds	r26, 0x01C3
    1408:	b0 91 c4 01 	lds	r27, 0x01C4
    140c:	80 83       	st	Z, r24
    140e:	91 83       	std	Z+1, r25	; 0x01
    1410:	a2 83       	std	Z+2, r26	; 0x02
    1412:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    1414:	80 91 bd 01 	lds	r24, 0x01BD
    1418:	90 91 be 01 	lds	r25, 0x01BE
    141c:	a0 91 bf 01 	lds	r26, 0x01BF
    1420:	b0 91 c0 01 	lds	r27, 0x01C0
    1424:	84 83       	std	Z+4, r24	; 0x04
    1426:	95 83       	std	Z+5, r25	; 0x05
    1428:	a6 83       	std	Z+6, r26	; 0x06
    142a:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    142c:	80 91 b9 01 	lds	r24, 0x01B9
    1430:	90 91 ba 01 	lds	r25, 0x01BA
    1434:	a0 91 bb 01 	lds	r26, 0x01BB
    1438:	b0 91 bc 01 	lds	r27, 0x01BC
    143c:	80 87       	std	Z+8, r24	; 0x08
    143e:	91 87       	std	Z+9, r25	; 0x09
    1440:	a2 87       	std	Z+10, r26	; 0x0a
    1442:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	08 95       	ret

00001448 <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    1448:	8f 92       	push	r8
    144a:	9f 92       	push	r9
    144c:	af 92       	push	r10
    144e:	bf 92       	push	r11
    1450:	cf 92       	push	r12
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	6b 01       	movw	r12, r22
    145a:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    145c:	4b 01       	movw	r8, r22
    145e:	5c 01       	movw	r10, r24
    1460:	e8 94       	clt
    1462:	b7 f8       	bld	r11, 7
    1464:	2b ed       	ldi	r18, 0xDB	; 219
    1466:	3f e0       	ldi	r19, 0x0F	; 15
    1468:	49 e4       	ldi	r20, 0x49	; 73
    146a:	50 e4       	ldi	r21, 0x40	; 64
    146c:	c5 01       	movw	r24, r10
    146e:	b4 01       	movw	r22, r8
    1470:	0e 94 15 18 	call	0x302a	; 0x302a <__gesf2>
    1474:	18 16       	cp	r1, r24
    1476:	bc f4       	brge	.+46     	; 0x14a6 <theta_error_correction+0x5e>
    1478:	2b ed       	ldi	r18, 0xDB	; 219
    147a:	3f e0       	ldi	r19, 0x0F	; 15
    147c:	49 ec       	ldi	r20, 0xC9	; 201
    147e:	50 e4       	ldi	r21, 0x40	; 64
    1480:	c7 01       	movw	r24, r14
    1482:	b6 01       	movw	r22, r12
    1484:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    1488:	a5 01       	movw	r20, r10
    148a:	94 01       	movw	r18, r8
    148c:	0e 94 55 16 	call	0x2caa	; 0x2caa <__divsf3>
    1490:	9b 01       	movw	r18, r22
    1492:	ac 01       	movw	r20, r24
    1494:	c7 01       	movw	r24, r14
    1496:	b6 01       	movw	r22, r12
    1498:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
    149c:	56 2f       	mov	r21, r22
    149e:	47 2f       	mov	r20, r23
    14a0:	38 2f       	mov	r19, r24
    14a2:	29 2f       	mov	r18, r25
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <theta_error_correction+0x66>
	else{return error;}
    14a6:	5c 2d       	mov	r21, r12
    14a8:	4d 2d       	mov	r20, r13
    14aa:	3e 2d       	mov	r19, r14
    14ac:	2f 2d       	mov	r18, r15
}
    14ae:	65 2f       	mov	r22, r21
    14b0:	74 2f       	mov	r23, r20
    14b2:	83 2f       	mov	r24, r19
    14b4:	92 2f       	mov	r25, r18
    14b6:	ff 90       	pop	r15
    14b8:	ef 90       	pop	r14
    14ba:	df 90       	pop	r13
    14bc:	cf 90       	pop	r12
    14be:	bf 90       	pop	r11
    14c0:	af 90       	pop	r10
    14c2:	9f 90       	pop	r9
    14c4:	8f 90       	pop	r8
    14c6:	08 95       	ret

000014c8 <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    14c8:	2f 92       	push	r2
    14ca:	3f 92       	push	r3
    14cc:	4f 92       	push	r4
    14ce:	5f 92       	push	r5
    14d0:	6f 92       	push	r6
    14d2:	7f 92       	push	r7
    14d4:	8f 92       	push	r8
    14d6:	9f 92       	push	r9
    14d8:	af 92       	push	r10
    14da:	bf 92       	push	r11
    14dc:	cf 92       	push	r12
    14de:	df 92       	push	r13
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	a8 97       	sbiw	r28, 0x28	; 40
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    14fc:	ce 01       	movw	r24, r28
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	0e 94 40 12 	call	0x2480	; 0x2480 <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    1504:	6b 81       	ldd	r22, Y+3	; 0x03
    1506:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    1508:	0f 81       	ldd	r16, Y+7	; 0x07
    150a:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    150c:	49 85       	ldd	r20, Y+9	; 0x09
    150e:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    1510:	ad 85       	ldd	r26, Y+13	; 0x0d
    1512:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    1514:	2f 85       	ldd	r18, Y+15	; 0x0f
    1516:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    1518:	eb 89       	ldd	r30, Y+19	; 0x13
    151a:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    151c:	8d 89       	ldd	r24, Y+21	; 0x15
    151e:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    1520:	e9 80       	ldd	r14, Y+1	; 0x01
    1522:	fa 80       	ldd	r15, Y+2	; 0x02
    1524:	fa 8e       	std	Y+26, r15	; 0x1a
    1526:	e9 8e       	std	Y+25, r14	; 0x19
    1528:	1c 8f       	std	Y+28, r17	; 0x1c
    152a:	0b 8f       	std	Y+27, r16	; 0x1b
    152c:	be 8f       	std	Y+30, r27	; 0x1e
    152e:	ad 8f       	std	Y+29, r26	; 0x1d
    1530:	f8 a3       	std	Y+32, r31	; 0x20
    1532:	ef 8f       	std	Y+31, r30	; 0x1f
    1534:	7a a3       	std	Y+34, r23	; 0x22
    1536:	69 a3       	std	Y+33, r22	; 0x21
    1538:	5c a3       	std	Y+36, r21	; 0x24
    153a:	4b a3       	std	Y+35, r20	; 0x23
    153c:	3e a3       	std	Y+38, r19	; 0x26
    153e:	2d a3       	std	Y+37, r18	; 0x25
    1540:	98 a7       	std	Y+40, r25	; 0x28
    1542:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    1544:	60 e2       	ldi	r22, 0x20	; 32
    1546:	71 e0       	ldi	r23, 0x01	; 1
    1548:	ce 01       	movw	r24, r28
    154a:	49 96       	adiw	r24, 0x19	; 25
    154c:	0e 94 16 06 	call	0xc2c	; 0xc2c <localization_calc>
    1550:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    1552:	fc 01       	movw	r30, r24
    1554:	80 85       	ldd	r24, Z+8	; 0x08
    1556:	91 85       	ldd	r25, Z+9	; 0x09
    1558:	a2 85       	ldd	r26, Z+10	; 0x0a
    155a:	b3 85       	ldd	r27, Z+11	; 0x0b
    155c:	0f 2e       	mov	r0, r31
    155e:	f0 e2       	ldi	r31, 0x20	; 32
    1560:	2f 2e       	mov	r2, r31
    1562:	f1 e0       	ldi	r31, 0x01	; 1
    1564:	3f 2e       	mov	r3, r31
    1566:	f0 2d       	mov	r31, r0
    1568:	f1 01       	movw	r30, r2
    156a:	80 87       	std	Z+8, r24	; 0x08
    156c:	91 87       	std	Z+9, r25	; 0x09
    156e:	a2 87       	std	Z+10, r26	; 0x0a
    1570:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    1572:	f8 01       	movw	r30, r16
    1574:	60 85       	ldd	r22, Z+8	; 0x08
    1576:	71 85       	ldd	r23, Z+9	; 0x09
    1578:	82 85       	ldd	r24, Z+10	; 0x0a
    157a:	93 85       	ldd	r25, Z+11	; 0x0b
    157c:	0e 94 24 0a 	call	0x1448	; 0x1448 <theta_error_correction>
    1580:	2b 01       	movw	r4, r22
    1582:	3c 01       	movw	r6, r24
    1584:	f8 01       	movw	r30, r16
    1586:	60 87       	std	Z+8, r22	; 0x08
    1588:	71 87       	std	Z+9, r23	; 0x09
    158a:	82 87       	std	Z+10, r24	; 0x0a
    158c:	93 87       	std	Z+11, r25	; 0x0b
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    158e:	24 ea       	ldi	r18, 0xA4	; 164
    1590:	30 e7       	ldi	r19, 0x70	; 112
    1592:	4d e7       	ldi	r20, 0x7D	; 125
    1594:	5f e3       	ldi	r21, 0x3F	; 63
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    15a2:	4b 01       	movw	r8, r22
    15a4:	5c 01       	movw	r10, r24
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	37 ed       	ldi	r19, 0xD7	; 215
    15aa:	43 e2       	ldi	r20, 0x23	; 35
    15ac:	5c e3       	ldi	r21, 0x3C	; 60
    15ae:	60 91 c1 01 	lds	r22, 0x01C1
    15b2:	70 91 c2 01 	lds	r23, 0x01C2
    15b6:	80 91 c3 01 	lds	r24, 0x01C3
    15ba:	90 91 c4 01 	lds	r25, 0x01C4
    15be:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    15c2:	9b 01       	movw	r18, r22
    15c4:	ac 01       	movw	r20, r24
    15c6:	c5 01       	movw	r24, r10
    15c8:	b4 01       	movw	r22, r8
    15ca:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
    15ce:	4b 01       	movw	r8, r22
    15d0:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    15d2:	60 93 c1 01 	sts	0x01C1, r22
    15d6:	70 93 c2 01 	sts	0x01C2, r23
    15da:	80 93 c3 01 	sts	0x01C3, r24
    15de:	90 93 c4 01 	sts	0x01C4, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    15e2:	24 ea       	ldi	r18, 0xA4	; 164
    15e4:	30 e7       	ldi	r19, 0x70	; 112
    15e6:	4d e7       	ldi	r20, 0x7D	; 125
    15e8:	5f e3       	ldi	r21, 0x3F	; 63
    15ea:	f8 01       	movw	r30, r16
    15ec:	64 81       	ldd	r22, Z+4	; 0x04
    15ee:	75 81       	ldd	r23, Z+5	; 0x05
    15f0:	86 81       	ldd	r24, Z+6	; 0x06
    15f2:	97 81       	ldd	r25, Z+7	; 0x07
    15f4:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    15f8:	6b 01       	movw	r12, r22
    15fa:	7c 01       	movw	r14, r24
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	37 ed       	ldi	r19, 0xD7	; 215
    1600:	43 e2       	ldi	r20, 0x23	; 35
    1602:	5c e3       	ldi	r21, 0x3C	; 60
    1604:	60 91 bd 01 	lds	r22, 0x01BD
    1608:	70 91 be 01 	lds	r23, 0x01BE
    160c:	80 91 bf 01 	lds	r24, 0x01BF
    1610:	90 91 c0 01 	lds	r25, 0x01C0
    1614:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    1618:	9b 01       	movw	r18, r22
    161a:	ac 01       	movw	r20, r24
    161c:	c7 01       	movw	r24, r14
    161e:	b6 01       	movw	r22, r12
    1620:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
    1624:	6b 01       	movw	r12, r22
    1626:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    1628:	60 93 bd 01 	sts	0x01BD, r22
    162c:	70 93 be 01 	sts	0x01BE, r23
    1630:	80 93 bf 01 	sts	0x01BF, r24
    1634:	90 93 c0 01 	sts	0x01C0, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1638:	24 ea       	ldi	r18, 0xA4	; 164
    163a:	30 e7       	ldi	r19, 0x70	; 112
    163c:	4d e7       	ldi	r20, 0x7D	; 125
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	c3 01       	movw	r24, r6
    1642:	b2 01       	movw	r22, r4
    1644:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    1648:	2b 01       	movw	r4, r22
    164a:	3c 01       	movw	r6, r24
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	37 ed       	ldi	r19, 0xD7	; 215
    1650:	43 e2       	ldi	r20, 0x23	; 35
    1652:	5c e3       	ldi	r21, 0x3C	; 60
    1654:	60 91 b9 01 	lds	r22, 0x01B9
    1658:	70 91 ba 01 	lds	r23, 0x01BA
    165c:	80 91 bb 01 	lds	r24, 0x01BB
    1660:	90 91 bc 01 	lds	r25, 0x01BC
    1664:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    1668:	9b 01       	movw	r18, r22
    166a:	ac 01       	movw	r20, r24
    166c:	c3 01       	movw	r24, r6
    166e:	b2 01       	movw	r22, r4
    1670:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    1674:	60 93 b9 01 	sts	0x01B9, r22
    1678:	70 93 ba 01 	sts	0x01BA, r23
    167c:	80 93 bb 01 	sts	0x01BB, r24
    1680:	90 93 bc 01 	sts	0x01BC, r25
	
	robotCenterPrev[0] = x;
    1684:	f1 01       	movw	r30, r2
    1686:	80 82       	st	Z, r8
    1688:	91 82       	std	Z+1, r9	; 0x01
    168a:	a2 82       	std	Z+2, r10	; 0x02
    168c:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    168e:	c4 82       	std	Z+4, r12	; 0x04
    1690:	d5 82       	std	Z+5, r13	; 0x05
    1692:	e6 82       	std	Z+6, r14	; 0x06
    1694:	f7 82       	std	Z+7, r15	; 0x07
}
    1696:	a8 96       	adiw	r28, 0x28	; 40
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	df 90       	pop	r13
    16b0:	cf 90       	pop	r12
    16b2:	bf 90       	pop	r11
    16b4:	af 90       	pop	r10
    16b6:	9f 90       	pop	r9
    16b8:	8f 90       	pop	r8
    16ba:	7f 90       	pop	r7
    16bc:	6f 90       	pop	r6
    16be:	5f 90       	pop	r5
    16c0:	4f 90       	pop	r4
    16c2:	3f 90       	pop	r3
    16c4:	2f 90       	pop	r2
    16c6:	08 95       	ret

000016c8 <run_motor_control_loop>:



/* PID Control */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd)
{
    16c8:	4f 92       	push	r4
    16ca:	5f 92       	push	r5
    16cc:	6f 92       	push	r6
    16ce:	7f 92       	push	r7
    16d0:	8f 92       	push	r8
    16d2:	9f 92       	push	r9
    16d4:	af 92       	push	r10
    16d6:	bf 92       	push	r11
    16d8:	cf 92       	push	r12
    16da:	df 92       	push	r13
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	64 97       	sbiw	r28, 0x14	; 20
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	29 01       	movw	r4, r18
    16fa:	3a 01       	movw	r6, r20
    16fc:	ed 86       	std	Y+13, r14	; 0x0d
    16fe:	fe 86       	std	Y+14, r15	; 0x0e
    1700:	0f 87       	std	Y+15, r16	; 0x0f
    1702:	18 8b       	std	Y+16, r17	; 0x10
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    1704:	20 91 c1 01 	lds	r18, 0x01C1
    1708:	30 91 c2 01 	lds	r19, 0x01C2
    170c:	40 91 c3 01 	lds	r20, 0x01C3
    1710:	50 91 c4 01 	lds	r21, 0x01C4
    1714:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
    1718:	6d 83       	std	Y+5, r22	; 0x05
    171a:	7e 83       	std	Y+6, r23	; 0x06
    171c:	8f 83       	std	Y+7, r24	; 0x07
    171e:	98 87       	std	Y+8, r25	; 0x08
    1720:	20 91 bd 01 	lds	r18, 0x01BD
    1724:	30 91 be 01 	lds	r19, 0x01BE
    1728:	40 91 bf 01 	lds	r20, 0x01BF
    172c:	50 91 c0 01 	lds	r21, 0x01C0
    1730:	c3 01       	movw	r24, r6
    1732:	b2 01       	movw	r22, r4
    1734:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
    1738:	69 87       	std	Y+9, r22	; 0x09
    173a:	7a 87       	std	Y+10, r23	; 0x0a
    173c:	8b 87       	std	Y+11, r24	; 0x0b
    173e:	9c 87       	std	Y+12, r25	; 0x0c
    1740:	2d 81       	ldd	r18, Y+5	; 0x05
    1742:	3e 81       	ldd	r19, Y+6	; 0x06
    1744:	4f 81       	ldd	r20, Y+7	; 0x07
    1746:	58 85       	ldd	r21, Y+8	; 0x08
    1748:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    174c:	20 91 b9 01 	lds	r18, 0x01B9
    1750:	30 91 ba 01 	lds	r19, 0x01BA
    1754:	40 91 bb 01 	lds	r20, 0x01BB
    1758:	50 91 bc 01 	lds	r21, 0x01BC
    175c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
	theta_error = theta_error_correction(theta_error);
    1760:	0e 94 24 0a 	call	0x1448	; 0x1448 <theta_error_correction>
    1764:	69 83       	std	Y+1, r22	; 0x01
    1766:	7a 83       	std	Y+2, r23	; 0x02
    1768:	8b 83       	std	Y+3, r24	; 0x03
    176a:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    176c:	2b 01       	movw	r4, r22
    176e:	3c 01       	movw	r6, r24
    1770:	e8 94       	clt
    1772:	77 f8       	bld	r7, 7
    1774:	a6 01       	movw	r20, r12
    1776:	95 01       	movw	r18, r10
    1778:	c3 01       	movw	r24, r6
    177a:	b2 01       	movw	r22, r4
    177c:	0e 94 15 18 	call	0x302a	; 0x302a <__gesf2>
    1780:	18 16       	cp	r1, r24
    1782:	84 f4       	brge	.+32     	; 0x17a4 <run_motor_control_loop+0xdc>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    1784:	29 81       	ldd	r18, Y+1	; 0x01
    1786:	3a 81       	ldd	r19, Y+2	; 0x02
    1788:	4b 81       	ldd	r20, Y+3	; 0x03
    178a:	5c 81       	ldd	r21, Y+4	; 0x04
    178c:	c3 01       	movw	r24, r6
    178e:	b2 01       	movw	r22, r4
    1790:	0e 94 55 16 	call	0x2caa	; 0x2caa <__divsf3>
    1794:	a6 01       	movw	r20, r12
    1796:	95 01       	movw	r18, r10
    1798:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    179c:	69 83       	std	Y+1, r22	; 0x01
    179e:	7a 83       	std	Y+2, r23	; 0x02
    17a0:	8b 83       	std	Y+3, r24	; 0x03
    17a2:	9c 83       	std	Y+4, r25	; 0x04
	}

	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    17a4:	29 81       	ldd	r18, Y+1	; 0x01
    17a6:	3a 81       	ldd	r19, Y+2	; 0x02
    17a8:	4b 81       	ldd	r20, Y+3	; 0x03
    17aa:	5c 81       	ldd	r21, Y+4	; 0x04
    17ac:	6f a1       	ldd	r22, Y+39	; 0x27
    17ae:	78 a5       	ldd	r23, Y+40	; 0x28
    17b0:	89 a5       	ldd	r24, Y+41	; 0x29
    17b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17b4:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    17b8:	6b 01       	movw	r12, r22
    17ba:	7c 01       	movw	r14, r24
	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
		theta_error = fabs(theta_error)/theta_error*max_theta;
	}

	float derivative = (theta_error-previous_theta_error)/TIMESTEP;
    17bc:	20 91 b5 01 	lds	r18, 0x01B5
    17c0:	30 91 b6 01 	lds	r19, 0x01B6
    17c4:	40 91 b7 01 	lds	r20, 0x01B7
    17c8:	50 91 b8 01 	lds	r21, 0x01B8
    17cc:	69 81       	ldd	r22, Y+1	; 0x01
    17ce:	7a 81       	ldd	r23, Y+2	; 0x02
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
    17d8:	2f e6       	ldi	r18, 0x6F	; 111
    17da:	32 e1       	ldi	r19, 0x12	; 18
    17dc:	43 e8       	ldi	r20, 0x83	; 131
    17de:	5a e3       	ldi	r21, 0x3A	; 58
    17e0:	0e 94 55 16 	call	0x2caa	; 0x2caa <__divsf3>
    17e4:	9b 01       	movw	r18, r22
    17e6:	ac 01       	movw	r20, r24
	float angular_output = theta_kp*theta_error - theta_kd*derivative; //If output > 0, turn left
    17e8:	6b a5       	ldd	r22, Y+43	; 0x2b
    17ea:	7c a5       	ldd	r23, Y+44	; 0x2c
    17ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    17ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    17f0:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    17f4:	9b 01       	movw	r18, r22
    17f6:	ac 01       	movw	r20, r24
    17f8:	c7 01       	movw	r24, r14
    17fa:	b6 01       	movw	r22, r12
    17fc:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
	previous_theta_error = theta_error;
    1800:	29 81       	ldd	r18, Y+1	; 0x01
    1802:	3a 81       	ldd	r19, Y+2	; 0x02
    1804:	4b 81       	ldd	r20, Y+3	; 0x03
    1806:	5c 81       	ldd	r21, Y+4	; 0x04
    1808:	20 93 b5 01 	sts	0x01B5, r18
    180c:	30 93 b6 01 	sts	0x01B6, r19
    1810:	40 93 b7 01 	sts	0x01B7, r20
    1814:	50 93 b8 01 	sts	0x01B8, r21
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    1818:	2b ed       	ldi	r18, 0xDB	; 219
    181a:	3f e0       	ldi	r19, 0x0F	; 15
    181c:	49 e4       	ldi	r20, 0x49	; 73
    181e:	50 e4       	ldi	r21, 0x40	; 64
    1820:	0e 94 55 16 	call	0x2caa	; 0x2caa <__divsf3>
    1824:	2b 01       	movw	r4, r22
    1826:	3c 01       	movw	r6, r24
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	b0 58       	subi	r27, 0x80	; 128
    182e:	89 8b       	std	Y+17, r24	; 0x11
    1830:	9a 8b       	std	Y+18, r25	; 0x12
    1832:	ab 8b       	std	Y+19, r26	; 0x13
    1834:	bc 8b       	std	Y+20, r27	; 0x14
	right_duty_cycle = angular_output;
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    1836:	69 81       	ldd	r22, Y+1	; 0x01
    1838:	7a 81       	ldd	r23, Y+2	; 0x02
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	9c 81       	ldd	r25, Y+4	; 0x04
    183e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <cos>
    1842:	6b 01       	movw	r12, r22
    1844:	7c 01       	movw	r14, r24
    1846:	29 85       	ldd	r18, Y+9	; 0x09
    1848:	3a 85       	ldd	r19, Y+10	; 0x0a
    184a:	4b 85       	ldd	r20, Y+11	; 0x0b
    184c:	5c 85       	ldd	r21, Y+12	; 0x0c
    184e:	ca 01       	movw	r24, r20
    1850:	b9 01       	movw	r22, r18
    1852:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    1856:	4b 01       	movw	r8, r22
    1858:	5c 01       	movw	r10, r24
    185a:	2d 81       	ldd	r18, Y+5	; 0x05
    185c:	3e 81       	ldd	r19, Y+6	; 0x06
    185e:	4f 81       	ldd	r20, Y+7	; 0x07
    1860:	58 85       	ldd	r21, Y+8	; 0x08
    1862:	ca 01       	movw	r24, r20
    1864:	b9 01       	movw	r22, r18
    1866:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    186a:	9b 01       	movw	r18, r22
    186c:	ac 01       	movw	r20, r24
    186e:	c5 01       	movw	r24, r10
    1870:	b4 01       	movw	r22, r8
    1872:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
    1876:	0e 94 9d 18 	call	0x313a	; 0x313a <sqrt>
    187a:	9b 01       	movw	r18, r22
    187c:	ac 01       	movw	r20, r24
    187e:	c7 01       	movw	r24, r14
    1880:	b6 01       	movw	r22, r12
    1882:	9f 77       	andi	r25, 0x7F	; 127
    1884:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    1888:	6b 01       	movw	r12, r22
    188a:	7c 01       	movw	r14, r24
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    188c:	9b 01       	movw	r18, r22
    188e:	ac 01       	movw	r20, r24
    1890:	6f a5       	ldd	r22, Y+47	; 0x2f
    1892:	78 a9       	ldd	r23, Y+48	; 0x30
    1894:	89 a9       	ldd	r24, Y+49	; 0x31
    1896:	9a a9       	ldd	r25, Y+50	; 0x32
    1898:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    189c:	4b 01       	movw	r8, r22
    189e:	5c 01       	movw	r10, r24
	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	derivative = (linear_error-previous_linear_error)/TIMESTEP;
    18a0:	20 91 b1 01 	lds	r18, 0x01B1
    18a4:	30 91 b2 01 	lds	r19, 0x01B2
    18a8:	40 91 b3 01 	lds	r20, 0x01B3
    18ac:	50 91 b4 01 	lds	r21, 0x01B4
    18b0:	c7 01       	movw	r24, r14
    18b2:	b6 01       	movw	r22, r12
    18b4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
    18b8:	2f e6       	ldi	r18, 0x6F	; 111
    18ba:	32 e1       	ldi	r19, 0x12	; 18
    18bc:	43 e8       	ldi	r20, 0x83	; 131
    18be:	5a e3       	ldi	r21, 0x3A	; 58
    18c0:	0e 94 55 16 	call	0x2caa	; 0x2caa <__divsf3>
    18c4:	9b 01       	movw	r18, r22
    18c6:	ac 01       	movw	r20, r24
	float linear_output = linear_kp*linear_error - linear_kd*derivative;
    18c8:	6b a9       	ldd	r22, Y+51	; 0x33
    18ca:	7c a9       	ldd	r23, Y+52	; 0x34
    18cc:	8d a9       	ldd	r24, Y+53	; 0x35
    18ce:	9e a9       	ldd	r25, Y+54	; 0x36
    18d0:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    18d4:	9b 01       	movw	r18, r22
    18d6:	ac 01       	movw	r20, r24
    18d8:	c5 01       	movw	r24, r10
    18da:	b4 01       	movw	r22, r8
    18dc:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
    18e0:	4b 01       	movw	r8, r22
    18e2:	5c 01       	movw	r10, r24
	previous_linear_error = linear_error;
    18e4:	c0 92 b1 01 	sts	0x01B1, r12
    18e8:	d0 92 b2 01 	sts	0x01B2, r13
    18ec:	e0 92 b3 01 	sts	0x01B3, r14
    18f0:	f0 92 b4 01 	sts	0x01B4, r15
	if(linear_output>40.0){linear_output=40.0;}
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	52 e4       	ldi	r21, 0x42	; 66
    18fc:	0e 94 15 18 	call	0x302a	; 0x302a <__gesf2>
    1900:	18 16       	cp	r1, r24
    1902:	44 f4       	brge	.+16     	; 0x1914 <run_motor_control_loop+0x24c>
    1904:	0f 2e       	mov	r0, r31
    1906:	81 2c       	mov	r8, r1
    1908:	91 2c       	mov	r9, r1
    190a:	f0 e2       	ldi	r31, 0x20	; 32
    190c:	af 2e       	mov	r10, r31
    190e:	f2 e4       	ldi	r31, 0x42	; 66
    1910:	bf 2e       	mov	r11, r31
    1912:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e2       	ldi	r20, 0x20	; 32
    191a:	52 e4       	ldi	r21, 0x42	; 66
    191c:	c5 01       	movw	r24, r10
    191e:	b4 01       	movw	r22, r8
    1920:	0e 94 55 16 	call	0x2caa	; 0x2caa <__divsf3>
    1924:	6b 01       	movw	r12, r22
    1926:	7c 01       	movw	r14, r24
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    1928:	69 81       	ldd	r22, Y+1	; 0x01
    192a:	7a 81       	ldd	r23, Y+2	; 0x02
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	9f 77       	andi	r25, 0x7F	; 127
    1932:	2b ed       	ldi	r18, 0xDB	; 219
    1934:	3f e0       	ldi	r19, 0x0F	; 15
    1936:	49 ec       	ldi	r20, 0xC9	; 201
    1938:	5f e3       	ldi	r21, 0x3F	; 63
    193a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__cmpsf2>
    193e:	88 23       	and	r24, r24
    1940:	ec f4       	brge	.+58     	; 0x197c <run_motor_control_loop+0x2b4>
		left_duty_cycle += linear_output;
    1942:	a3 01       	movw	r20, r6
    1944:	92 01       	movw	r18, r4
    1946:	c7 01       	movw	r24, r14
    1948:	b6 01       	movw	r22, r12
    194a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
    194e:	60 93 1c 01 	sts	0x011C, r22
    1952:	70 93 1d 01 	sts	0x011D, r23
    1956:	80 93 1e 01 	sts	0x011E, r24
    195a:	90 93 1f 01 	sts	0x011F, r25
		right_duty_cycle += linear_output;
    195e:	a7 01       	movw	r20, r14
    1960:	96 01       	movw	r18, r12
    1962:	c3 01       	movw	r24, r6
    1964:	b2 01       	movw	r22, r4
    1966:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
    196a:	60 93 18 01 	sts	0x0118, r22
    196e:	70 93 19 01 	sts	0x0119, r23
    1972:	80 93 1a 01 	sts	0x011A, r24
    1976:	90 93 1b 01 	sts	0x011B, r25
    197a:	1e c0       	rjmp	.+60     	; 0x19b8 <run_motor_control_loop+0x2f0>
		} else{
		left_duty_cycle -= linear_output;
    197c:	a7 01       	movw	r20, r14
    197e:	96 01       	movw	r18, r12
    1980:	69 89       	ldd	r22, Y+17	; 0x11
    1982:	7a 89       	ldd	r23, Y+18	; 0x12
    1984:	8b 89       	ldd	r24, Y+19	; 0x13
    1986:	9c 89       	ldd	r25, Y+20	; 0x14
    1988:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
    198c:	60 93 1c 01 	sts	0x011C, r22
    1990:	70 93 1d 01 	sts	0x011D, r23
    1994:	80 93 1e 01 	sts	0x011E, r24
    1998:	90 93 1f 01 	sts	0x011F, r25
		right_duty_cycle -= linear_output;
    199c:	a7 01       	movw	r20, r14
    199e:	96 01       	movw	r18, r12
    19a0:	c3 01       	movw	r24, r6
    19a2:	b2 01       	movw	r22, r4
    19a4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__subsf3>
    19a8:	60 93 18 01 	sts	0x0118, r22
    19ac:	70 93 19 01 	sts	0x0119, r23
    19b0:	80 93 1a 01 	sts	0x011A, r24
    19b4:	90 93 1b 01 	sts	0x011B, r25
	}
	
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	a9 01       	movw	r20, r18
    19be:	60 91 1c 01 	lds	r22, 0x011C
    19c2:	70 91 1d 01 	lds	r23, 0x011D
    19c6:	80 91 1e 01 	lds	r24, 0x011E
    19ca:	90 91 1f 01 	lds	r25, 0x011F
    19ce:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__cmpsf2>
    19d2:	88 23       	and	r24, r24
    19d4:	14 f4       	brge	.+4      	; 0x19da <run_motor_control_loop+0x312>
    19d6:	29 98       	cbi	0x05, 1	; 5
    19d8:	01 c0       	rjmp	.+2      	; 0x19dc <run_motor_control_loop+0x314>
	else{set(PORTB,1);}
    19da:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	a9 01       	movw	r20, r18
    19e2:	60 91 18 01 	lds	r22, 0x0118
    19e6:	70 91 19 01 	lds	r23, 0x0119
    19ea:	80 91 1a 01 	lds	r24, 0x011A
    19ee:	90 91 1b 01 	lds	r25, 0x011B
    19f2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__cmpsf2>
    19f6:	88 23       	and	r24, r24
    19f8:	14 f4       	brge	.+4      	; 0x19fe <run_motor_control_loop+0x336>
    19fa:	2b 98       	cbi	0x05, 3	; 5
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <run_motor_control_loop+0x338>
	else{set(PORTB,3);}
    19fe:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    1a00:	80 90 1c 01 	lds	r8, 0x011C
    1a04:	90 90 1d 01 	lds	r9, 0x011D
    1a08:	a0 90 1e 01 	lds	r10, 0x011E
    1a0c:	b0 90 1f 01 	lds	r11, 0x011F
    1a10:	e8 94       	clt
    1a12:	b7 f8       	bld	r11, 7
    1a14:	80 92 1c 01 	sts	0x011C, r8
    1a18:	90 92 1d 01 	sts	0x011D, r9
    1a1c:	a0 92 1e 01 	sts	0x011E, r10
    1a20:	b0 92 1f 01 	sts	0x011F, r11
	right_duty_cycle = fabs(right_duty_cycle);
    1a24:	c0 90 18 01 	lds	r12, 0x0118
    1a28:	d0 90 19 01 	lds	r13, 0x0119
    1a2c:	e0 90 1a 01 	lds	r14, 0x011A
    1a30:	f0 90 1b 01 	lds	r15, 0x011B
    1a34:	e8 94       	clt
    1a36:	f7 f8       	bld	r15, 7
    1a38:	c0 92 18 01 	sts	0x0118, r12
    1a3c:	d0 92 19 01 	sts	0x0119, r13
    1a40:	e0 92 1a 01 	sts	0x011A, r14
    1a44:	f0 92 1b 01 	sts	0x011B, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    1a48:	a7 01       	movw	r20, r14
    1a4a:	96 01       	movw	r18, r12
    1a4c:	c5 01       	movw	r24, r10
    1a4e:	b4 01       	movw	r22, r8
    1a50:	0e 94 15 18 	call	0x302a	; 0x302a <__gesf2>
    1a54:	18 16       	cp	r1, r24
    1a56:	2c f0       	brlt	.+10     	; 0x1a62 <run_motor_control_loop+0x39a>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    1a58:	1c 2d       	mov	r17, r12
    1a5a:	0d 2d       	mov	r16, r13
    1a5c:	7e 2c       	mov	r7, r14
    1a5e:	6f 2c       	mov	r6, r15
    1a60:	04 c0       	rjmp	.+8      	; 0x1a6a <run_motor_control_loop+0x3a2>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    1a62:	18 2d       	mov	r17, r8
    1a64:	09 2d       	mov	r16, r9
    1a66:	7a 2c       	mov	r7, r10
    1a68:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    1a6a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a6c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a6e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a70:	58 89       	ldd	r21, Y+16	; 0x10
    1a72:	61 2f       	mov	r22, r17
    1a74:	70 2f       	mov	r23, r16
    1a76:	87 2d       	mov	r24, r7
    1a78:	96 2d       	mov	r25, r6
    1a7a:	0e 94 15 18 	call	0x302a	; 0x302a <__gesf2>
    1a7e:	18 16       	cp	r1, r24
    1a80:	64 f5       	brge	.+88     	; 0x1ada <run_motor_control_loop+0x412>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    1a82:	21 2f       	mov	r18, r17
    1a84:	30 2f       	mov	r19, r16
    1a86:	47 2d       	mov	r20, r7
    1a88:	56 2d       	mov	r21, r6
    1a8a:	c5 01       	movw	r24, r10
    1a8c:	b4 01       	movw	r22, r8
    1a8e:	0e 94 55 16 	call	0x2caa	; 0x2caa <__divsf3>
    1a92:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a94:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a96:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a98:	58 89       	ldd	r21, Y+16	; 0x10
    1a9a:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    1a9e:	60 93 1c 01 	sts	0x011C, r22
    1aa2:	70 93 1d 01 	sts	0x011D, r23
    1aa6:	80 93 1e 01 	sts	0x011E, r24
    1aaa:	90 93 1f 01 	sts	0x011F, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    1aae:	21 2f       	mov	r18, r17
    1ab0:	30 2f       	mov	r19, r16
    1ab2:	47 2d       	mov	r20, r7
    1ab4:	56 2d       	mov	r21, r6
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	b6 01       	movw	r22, r12
    1aba:	0e 94 55 16 	call	0x2caa	; 0x2caa <__divsf3>
    1abe:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ac0:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ac2:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ac4:	58 89       	ldd	r21, Y+16	; 0x10
    1ac6:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    1aca:	60 93 18 01 	sts	0x0118, r22
    1ace:	70 93 19 01 	sts	0x0119, r23
    1ad2:	80 93 1a 01 	sts	0x011A, r24
    1ad6:	90 93 1b 01 	sts	0x011B, r25
	}

	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    1ada:	08 e8       	ldi	r16, 0x88	; 136
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	d8 01       	movw	r26, r16
    1ae0:	6d 91       	ld	r22, X+
    1ae2:	7c 91       	ld	r23, X
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__floatunsisf>
    1aec:	20 91 1c 01 	lds	r18, 0x011C
    1af0:	30 91 1d 01 	lds	r19, 0x011D
    1af4:	40 91 1e 01 	lds	r20, 0x011E
    1af8:	50 91 1f 01 	lds	r21, 0x011F
    1afc:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    1b00:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__fixunssfsi>
    1b04:	70 93 8b 00 	sts	0x008B, r23
    1b08:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__floatunsisf>
    1b1a:	20 91 18 01 	lds	r18, 0x0118
    1b1e:	30 91 19 01 	lds	r19, 0x0119
    1b22:	40 91 1a 01 	lds	r20, 0x011A
    1b26:	50 91 1b 01 	lds	r21, 0x011B
    1b2a:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    1b2e:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__fixunssfsi>
    1b32:	70 93 8d 00 	sts	0x008D, r23
    1b36:	60 93 8c 00 	sts	0x008C, r22

}
    1b3a:	64 96       	adiw	r28, 0x14	; 20
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	ff 90       	pop	r15
    1b50:	ef 90       	pop	r14
    1b52:	df 90       	pop	r13
    1b54:	cf 90       	pop	r12
    1b56:	bf 90       	pop	r11
    1b58:	af 90       	pop	r10
    1b5a:	9f 90       	pop	r9
    1b5c:	8f 90       	pop	r8
    1b5e:	7f 90       	pop	r7
    1b60:	6f 90       	pop	r6
    1b62:	5f 90       	pop	r5
    1b64:	4f 90       	pop	r4
    1b66:	08 95       	ret

00001b68 <m_bus_init>:
    1b68:	58 9a       	sbi	0x0b, 0	; 11
    1b6a:	59 9a       	sbi	0x0b, 1	; 11
    1b6c:	5a 9a       	sbi	0x0b, 2	; 11
    1b6e:	8c e0       	ldi	r24, 0x0C	; 12
    1b70:	80 93 b8 00 	sts	0x00B8, r24
    1b74:	e9 e6       	ldi	r30, 0x69	; 105
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	80 62       	ori	r24, 0x20	; 32
    1b7c:	80 83       	st	Z, r24
    1b7e:	80 81       	ld	r24, Z
    1b80:	8f 7e       	andi	r24, 0xEF	; 239
    1b82:	80 83       	st	Z, r24
    1b84:	ea 9a       	sbi	0x1d, 2	; 29
    1b86:	78 94       	sei
    1b88:	08 95       	ret

00001b8a <m_rf_open>:
    1b8a:	1f 93       	push	r17
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	18 2f       	mov	r17, r24
    1b92:	d6 2f       	mov	r29, r22
    1b94:	c4 2f       	mov	r28, r20
    1b96:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <m_bus_init>
    1b9a:	94 ea       	ldi	r25, 0xA4	; 164
    1b9c:	90 93 bc 00 	sts	0x00BC, r25
    1ba0:	ec eb       	ldi	r30, 0xBC	; 188
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	90 81       	ld	r25, Z
    1ba6:	99 23       	and	r25, r25
    1ba8:	ec f7       	brge	.-6      	; 0x1ba4 <m_rf_open+0x1a>
    1baa:	90 e5       	ldi	r25, 0x50	; 80
    1bac:	90 93 bb 00 	sts	0x00BB, r25
    1bb0:	94 e8       	ldi	r25, 0x84	; 132
    1bb2:	90 93 bc 00 	sts	0x00BC, r25
    1bb6:	ec eb       	ldi	r30, 0xBC	; 188
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	90 81       	ld	r25, Z
    1bbc:	99 23       	and	r25, r25
    1bbe:	ec f7       	brge	.-6      	; 0x1bba <m_rf_open+0x30>
    1bc0:	90 91 b9 00 	lds	r25, 0x00B9
    1bc4:	98 7f       	andi	r25, 0xF8	; 248
    1bc6:	90 32       	cpi	r25, 0x20	; 32
    1bc8:	29 f4       	brne	.+10     	; 0x1bd4 <m_rf_open+0x4a>
    1bca:	84 e9       	ldi	r24, 0x94	; 148
    1bcc:	80 93 bc 00 	sts	0x00BC, r24
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	2d c0       	rjmp	.+90     	; 0x1c2e <m_rf_open+0xa4>
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	80 93 bb 00 	sts	0x00BB, r24
    1bda:	84 e8       	ldi	r24, 0x84	; 132
    1bdc:	80 93 bc 00 	sts	0x00BC, r24
    1be0:	ec eb       	ldi	r30, 0xBC	; 188
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	90 81       	ld	r25, Z
    1be6:	99 23       	and	r25, r25
    1be8:	ec f7       	brge	.-6      	; 0x1be4 <m_rf_open+0x5a>
    1bea:	10 93 bb 00 	sts	0x00BB, r17
    1bee:	84 e8       	ldi	r24, 0x84	; 132
    1bf0:	80 93 bc 00 	sts	0x00BC, r24
    1bf4:	ec eb       	ldi	r30, 0xBC	; 188
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	88 23       	and	r24, r24
    1bfc:	ec f7       	brge	.-6      	; 0x1bf8 <m_rf_open+0x6e>
    1bfe:	d0 93 bb 00 	sts	0x00BB, r29
    1c02:	84 e8       	ldi	r24, 0x84	; 132
    1c04:	80 93 bc 00 	sts	0x00BC, r24
    1c08:	ec eb       	ldi	r30, 0xBC	; 188
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	88 23       	and	r24, r24
    1c10:	ec f7       	brge	.-6      	; 0x1c0c <m_rf_open+0x82>
    1c12:	c0 93 bb 00 	sts	0x00BB, r28
    1c16:	84 e8       	ldi	r24, 0x84	; 132
    1c18:	80 93 bc 00 	sts	0x00BC, r24
    1c1c:	ec eb       	ldi	r30, 0xBC	; 188
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	88 23       	and	r24, r24
    1c24:	ec f7       	brge	.-6      	; 0x1c20 <m_rf_open+0x96>
    1c26:	84 e9       	ldi	r24, 0x94	; 148
    1c28:	80 93 bc 00 	sts	0x00BC, r24
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	1f 91       	pop	r17
    1c34:	08 95       	ret

00001c36 <m_rf_read>:
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	9c 01       	movw	r18, r24
    1c3c:	84 ea       	ldi	r24, 0xA4	; 164
    1c3e:	80 93 bc 00 	sts	0x00BC, r24
    1c42:	ec eb       	ldi	r30, 0xBC	; 188
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	90 81       	ld	r25, Z
    1c48:	99 23       	and	r25, r25
    1c4a:	ec f7       	brge	.-6      	; 0x1c46 <m_rf_read+0x10>
    1c4c:	81 e5       	ldi	r24, 0x51	; 81
    1c4e:	80 93 bb 00 	sts	0x00BB, r24
    1c52:	84 e8       	ldi	r24, 0x84	; 132
    1c54:	80 93 bc 00 	sts	0x00BC, r24
    1c58:	ec eb       	ldi	r30, 0xBC	; 188
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	90 81       	ld	r25, Z
    1c5e:	99 23       	and	r25, r25
    1c60:	ec f7       	brge	.-6      	; 0x1c5c <m_rf_read+0x26>
    1c62:	80 91 b9 00 	lds	r24, 0x00B9
    1c66:	88 7f       	andi	r24, 0xF8	; 248
    1c68:	88 34       	cpi	r24, 0x48	; 72
    1c6a:	29 f4       	brne	.+10     	; 0x1c76 <m_rf_read+0x40>
    1c6c:	84 e9       	ldi	r24, 0x94	; 148
    1c6e:	80 93 bc 00 	sts	0x00BC, r24
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	41 c0       	rjmp	.+130    	; 0x1cf8 <m_rf_read+0xc2>
    1c76:	84 ec       	ldi	r24, 0xC4	; 196
    1c78:	80 93 bc 00 	sts	0x00BC, r24
    1c7c:	ec eb       	ldi	r30, 0xBC	; 188
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	90 81       	ld	r25, Z
    1c82:	99 23       	and	r25, r25
    1c84:	ec f7       	brge	.-6      	; 0x1c80 <m_rf_read+0x4a>
    1c86:	40 91 bb 00 	lds	r20, 0x00BB
    1c8a:	46 13       	cpse	r20, r22
    1c8c:	09 c0       	rjmp	.+18     	; 0x1ca0 <m_rf_read+0x6a>
    1c8e:	84 2f       	mov	r24, r20
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	18 16       	cp	r1, r24
    1c96:	19 06       	cpc	r1, r25
    1c98:	44 f0       	brlt	.+16     	; 0x1caa <m_rf_read+0x74>
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	50 e0       	ldi	r21, 0x00	; 0
    1c9e:	1a c0       	rjmp	.+52     	; 0x1cd4 <m_rf_read+0x9e>
    1ca0:	84 e9       	ldi	r24, 0x94	; 148
    1ca2:	80 93 bc 00 	sts	0x00BC, r24
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	27 c0       	rjmp	.+78     	; 0x1cf8 <m_rf_read+0xc2>
    1caa:	d9 01       	movw	r26, r18
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	41 50       	subi	r20, 0x01	; 1
    1cb0:	51 09       	sbc	r21, r1
    1cb2:	b9 01       	movw	r22, r18
    1cb4:	64 0f       	add	r22, r20
    1cb6:	75 1f       	adc	r23, r21
    1cb8:	ec eb       	ldi	r30, 0xBC	; 188
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	84 ec       	ldi	r24, 0xC4	; 196
    1cbe:	cb eb       	ldi	r28, 0xBB	; 187
    1cc0:	d0 e0       	ldi	r29, 0x00	; 0
    1cc2:	80 83       	st	Z, r24
    1cc4:	90 81       	ld	r25, Z
    1cc6:	99 23       	and	r25, r25
    1cc8:	ec f7       	brge	.-6      	; 0x1cc4 <m_rf_read+0x8e>
    1cca:	98 81       	ld	r25, Y
    1ccc:	9d 93       	st	X+, r25
    1cce:	a6 17       	cp	r26, r22
    1cd0:	b7 07       	cpc	r27, r23
    1cd2:	b9 f7       	brne	.-18     	; 0x1cc2 <m_rf_read+0x8c>
    1cd4:	84 e8       	ldi	r24, 0x84	; 132
    1cd6:	80 93 bc 00 	sts	0x00BC, r24
    1cda:	ec eb       	ldi	r30, 0xBC	; 188
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	90 81       	ld	r25, Z
    1ce0:	99 23       	and	r25, r25
    1ce2:	ec f7       	brge	.-6      	; 0x1cde <m_rf_read+0xa8>
    1ce4:	80 91 bb 00 	lds	r24, 0x00BB
    1ce8:	f9 01       	movw	r30, r18
    1cea:	e4 0f       	add	r30, r20
    1cec:	f5 1f       	adc	r31, r21
    1cee:	80 83       	st	Z, r24
    1cf0:	84 e9       	ldi	r24, 0x94	; 148
    1cf2:	80 93 bc 00 	sts	0x00BC, r24
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	08 95       	ret

00001cfe <m_usb_init>:
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	80 93 d7 00 	sts	0x00D7, r24
    1d04:	80 ea       	ldi	r24, 0xA0	; 160
    1d06:	80 93 d8 00 	sts	0x00D8, r24
    1d0a:	82 e1       	ldi	r24, 0x12	; 18
    1d0c:	89 bd       	out	0x29, r24	; 41
    1d0e:	09 b4       	in	r0, 0x29	; 41
    1d10:	00 fe       	sbrs	r0, 0
    1d12:	fd cf       	rjmp	.-6      	; 0x1d0e <m_usb_init+0x10>
    1d14:	80 e9       	ldi	r24, 0x90	; 144
    1d16:	80 93 d8 00 	sts	0x00D8, r24
    1d1a:	10 92 e0 00 	sts	0x00E0, r1
    1d1e:	10 92 c8 01 	sts	0x01C8, r1
    1d22:	10 92 c5 01 	sts	0x01C5, r1
    1d26:	8c e0       	ldi	r24, 0x0C	; 12
    1d28:	80 93 e2 00 	sts	0x00E2, r24
    1d2c:	78 94       	sei
    1d2e:	08 95       	ret

00001d30 <m_usb_tx_char>:
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	90 91 c8 01 	lds	r25, 0x01C8
    1d38:	99 23       	and	r25, r25
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <m_usb_tx_char+0xe>
    1d3c:	4c c0       	rjmp	.+152    	; 0x1dd6 <m_usb_tx_char+0xa6>
    1d3e:	9f b7       	in	r25, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	24 e0       	ldi	r18, 0x04	; 4
    1d44:	20 93 e9 00 	sts	0x00E9, r18
    1d48:	20 91 c6 01 	lds	r18, 0x01C6
    1d4c:	22 23       	and	r18, r18
    1d4e:	49 f0       	breq	.+18     	; 0x1d62 <m_usb_tx_char+0x32>
    1d50:	20 91 e8 00 	lds	r18, 0x00E8
    1d54:	25 fd       	sbrc	r18, 5
    1d56:	03 c0       	rjmp	.+6      	; 0x1d5e <m_usb_tx_char+0x2e>
    1d58:	9f bf       	out	0x3f, r25	; 63
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	41 c0       	rjmp	.+130    	; 0x1de0 <m_usb_tx_char+0xb0>
    1d5e:	10 92 c6 01 	sts	0x01C6, r1
    1d62:	30 91 e4 00 	lds	r19, 0x00E4
    1d66:	37 5e       	subi	r19, 0xE7	; 231
    1d68:	20 91 e8 00 	lds	r18, 0x00E8
    1d6c:	25 fd       	sbrc	r18, 5
    1d6e:	24 c0       	rjmp	.+72     	; 0x1db8 <m_usb_tx_char+0x88>
    1d70:	9f bf       	out	0x3f, r25	; 63
    1d72:	90 91 e4 00 	lds	r25, 0x00E4
    1d76:	93 17       	cp	r25, r19
    1d78:	81 f0       	breq	.+32     	; 0x1d9a <m_usb_tx_char+0x6a>
    1d7a:	90 91 c8 01 	lds	r25, 0x01C8
    1d7e:	99 23       	and	r25, r25
    1d80:	61 f1       	breq	.+88     	; 0x1dda <m_usb_tx_char+0xaa>
    1d82:	a9 ee       	ldi	r26, 0xE9	; 233
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	44 e0       	ldi	r20, 0x04	; 4
    1d88:	e8 ee       	ldi	r30, 0xE8	; 232
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	c4 ee       	ldi	r28, 0xE4	; 228
    1d8e:	d0 e0       	ldi	r29, 0x00	; 0
    1d90:	0d c0       	rjmp	.+26     	; 0x1dac <m_usb_tx_char+0x7c>
    1d92:	9f bf       	out	0x3f, r25	; 63
    1d94:	98 81       	ld	r25, Y
    1d96:	93 13       	cpse	r25, r19
    1d98:	05 c0       	rjmp	.+10     	; 0x1da4 <m_usb_tx_char+0x74>
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	80 93 c6 01 	sts	0x01C6, r24
    1da0:	8f ef       	ldi	r24, 0xFF	; 255
    1da2:	1e c0       	rjmp	.+60     	; 0x1de0 <m_usb_tx_char+0xb0>
    1da4:	90 91 c8 01 	lds	r25, 0x01C8
    1da8:	99 23       	and	r25, r25
    1daa:	c9 f0       	breq	.+50     	; 0x1dde <m_usb_tx_char+0xae>
    1dac:	9f b7       	in	r25, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	4c 93       	st	X, r20
    1db2:	20 81       	ld	r18, Z
    1db4:	25 ff       	sbrs	r18, 5
    1db6:	ed cf       	rjmp	.-38     	; 0x1d92 <m_usb_tx_char+0x62>
    1db8:	80 93 f1 00 	sts	0x00F1, r24
    1dbc:	80 91 e8 00 	lds	r24, 0x00E8
    1dc0:	85 fd       	sbrc	r24, 5
    1dc2:	03 c0       	rjmp	.+6      	; 0x1dca <m_usb_tx_char+0x9a>
    1dc4:	8a e3       	ldi	r24, 0x3A	; 58
    1dc6:	80 93 e8 00 	sts	0x00E8, r24
    1dca:	85 e0       	ldi	r24, 0x05	; 5
    1dcc:	80 93 c7 01 	sts	0x01C7, r24
    1dd0:	9f bf       	out	0x3f, r25	; 63
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	05 c0       	rjmp	.+10     	; 0x1de0 <m_usb_tx_char+0xb0>
    1dd6:	8f ef       	ldi	r24, 0xFF	; 255
    1dd8:	03 c0       	rjmp	.+6      	; 0x1de0 <m_usb_tx_char+0xb0>
    1dda:	8f ef       	ldi	r24, 0xFF	; 255
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <m_usb_tx_char+0xb0>
    1dde:	8f ef       	ldi	r24, 0xFF	; 255
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	08 95       	ret

00001de6 <__vector_10>:
    1de6:	1f 92       	push	r1
    1de8:	0f 92       	push	r0
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	0f 92       	push	r0
    1dee:	11 24       	eor	r1, r1
    1df0:	8f 93       	push	r24
    1df2:	9f 93       	push	r25
    1df4:	ef 93       	push	r30
    1df6:	ff 93       	push	r31
    1df8:	e1 ee       	ldi	r30, 0xE1	; 225
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	10 82       	st	Z, r1
    1e00:	83 ff       	sbrs	r24, 3
    1e02:	11 c0       	rjmp	.+34     	; 0x1e26 <__vector_10+0x40>
    1e04:	10 92 e9 00 	sts	0x00E9, r1
    1e08:	91 e0       	ldi	r25, 0x01	; 1
    1e0a:	90 93 eb 00 	sts	0x00EB, r25
    1e0e:	10 92 ec 00 	sts	0x00EC, r1
    1e12:	92 e1       	ldi	r25, 0x12	; 18
    1e14:	90 93 ed 00 	sts	0x00ED, r25
    1e18:	98 e0       	ldi	r25, 0x08	; 8
    1e1a:	90 93 f0 00 	sts	0x00F0, r25
    1e1e:	10 92 c8 01 	sts	0x01C8, r1
    1e22:	10 92 c5 01 	sts	0x01C5, r1
    1e26:	82 ff       	sbrs	r24, 2
    1e28:	13 c0       	rjmp	.+38     	; 0x1e50 <__vector_10+0x6a>
    1e2a:	80 91 c8 01 	lds	r24, 0x01C8
    1e2e:	88 23       	and	r24, r24
    1e30:	79 f0       	breq	.+30     	; 0x1e50 <__vector_10+0x6a>
    1e32:	80 91 c7 01 	lds	r24, 0x01C7
    1e36:	88 23       	and	r24, r24
    1e38:	59 f0       	breq	.+22     	; 0x1e50 <__vector_10+0x6a>
    1e3a:	81 50       	subi	r24, 0x01	; 1
    1e3c:	80 93 c7 01 	sts	0x01C7, r24
    1e40:	81 11       	cpse	r24, r1
    1e42:	06 c0       	rjmp	.+12     	; 0x1e50 <__vector_10+0x6a>
    1e44:	84 e0       	ldi	r24, 0x04	; 4
    1e46:	80 93 e9 00 	sts	0x00E9, r24
    1e4a:	8a e3       	ldi	r24, 0x3A	; 58
    1e4c:	80 93 e8 00 	sts	0x00E8, r24
    1e50:	ff 91       	pop	r31
    1e52:	ef 91       	pop	r30
    1e54:	9f 91       	pop	r25
    1e56:	8f 91       	pop	r24
    1e58:	0f 90       	pop	r0
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	0f 90       	pop	r0
    1e5e:	1f 90       	pop	r1
    1e60:	18 95       	reti

00001e62 <__vector_11>:
    1e62:	1f 92       	push	r1
    1e64:	0f 92       	push	r0
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	0f 92       	push	r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	2f 93       	push	r18
    1e72:	3f 93       	push	r19
    1e74:	4f 93       	push	r20
    1e76:	5f 93       	push	r21
    1e78:	6f 93       	push	r22
    1e7a:	7f 93       	push	r23
    1e7c:	8f 93       	push	r24
    1e7e:	9f 93       	push	r25
    1e80:	af 93       	push	r26
    1e82:	bf 93       	push	r27
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	ef 93       	push	r30
    1e8a:	ff 93       	push	r31
    1e8c:	10 92 e9 00 	sts	0x00E9, r1
    1e90:	80 91 e8 00 	lds	r24, 0x00E8
    1e94:	83 ff       	sbrs	r24, 3
    1e96:	4c c1       	rjmp	.+664    	; 0x2130 <__vector_11+0x2ce>
    1e98:	e1 ef       	ldi	r30, 0xF1	; 241
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	60 81       	ld	r22, Z
    1e9e:	80 81       	ld	r24, Z
    1ea0:	20 81       	ld	r18, Z
    1ea2:	90 81       	ld	r25, Z
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	39 2b       	or	r19, r25
    1ea8:	40 81       	ld	r20, Z
    1eaa:	90 81       	ld	r25, Z
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	59 2b       	or	r21, r25
    1eb0:	70 81       	ld	r23, Z
    1eb2:	c0 81       	ld	r28, Z
    1eb4:	92 ef       	ldi	r25, 0xF2	; 242
    1eb6:	90 93 e8 00 	sts	0x00E8, r25
    1eba:	86 30       	cpi	r24, 0x06	; 6
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <__vector_11+0x5e>
    1ebe:	58 c0       	rjmp	.+176    	; 0x1f70 <__vector_11+0x10e>
    1ec0:	04 c0       	rjmp	.+8      	; 0x1eca <__vector_11+0x68>
    1ec2:	81 e2       	ldi	r24, 0x21	; 33
    1ec4:	80 93 eb 00 	sts	0x00EB, r24
    1ec8:	3a c1       	rjmp	.+628    	; 0x213e <__vector_11+0x2dc>
    1eca:	66 e0       	ldi	r22, 0x06	; 6
    1ecc:	80 e2       	ldi	r24, 0x20	; 32
    1ece:	91 e0       	ldi	r25, 0x01	; 1
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	a5 91       	lpm	r26, Z+
    1ed4:	b4 91       	lpm	r27, Z
    1ed6:	2a 17       	cp	r18, r26
    1ed8:	3b 07       	cpc	r19, r27
    1eda:	11 f0       	breq	.+4      	; 0x1ee0 <__vector_11+0x7e>
    1edc:	07 96       	adiw	r24, 0x07	; 7
    1ede:	23 c0       	rjmp	.+70     	; 0x1f26 <__vector_11+0xc4>
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	32 96       	adiw	r30, 0x02	; 2
    1ee4:	a5 91       	lpm	r26, Z+
    1ee6:	b4 91       	lpm	r27, Z
    1ee8:	4a 17       	cp	r20, r26
    1eea:	5b 07       	cpc	r21, r27
    1eec:	11 f0       	breq	.+4      	; 0x1ef2 <__vector_11+0x90>
    1eee:	07 96       	adiw	r24, 0x07	; 7
    1ef0:	1a c0       	rjmp	.+52     	; 0x1f26 <__vector_11+0xc4>
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	34 96       	adiw	r30, 0x04	; 4
    1ef6:	45 91       	lpm	r20, Z+
    1ef8:	54 91       	lpm	r21, Z
    1efa:	fc 01       	movw	r30, r24
    1efc:	36 96       	adiw	r30, 0x06	; 6
    1efe:	24 91       	lpm	r18, Z
    1f00:	87 2f       	mov	r24, r23
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	9c 2b       	or	r25, r28
    1f06:	8f 3f       	cpi	r24, 0xFF	; 255
    1f08:	91 05       	cpc	r25, r1
    1f0a:	19 f0       	breq	.+6      	; 0x1f12 <__vector_11+0xb0>
    1f0c:	10 f0       	brcs	.+4      	; 0x1f12 <__vector_11+0xb0>
    1f0e:	8f ef       	ldi	r24, 0xFF	; 255
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	82 17       	cp	r24, r18
    1f14:	08 f4       	brcc	.+2      	; 0x1f18 <__vector_11+0xb6>
    1f16:	28 2f       	mov	r18, r24
    1f18:	a8 ee       	ldi	r26, 0xE8	; 232
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	70 e1       	ldi	r23, 0x10	; 16
    1f1e:	6e ef       	ldi	r22, 0xFE	; 254
    1f20:	c1 ef       	ldi	r28, 0xF1	; 241
    1f22:	d0 e0       	ldi	r29, 0x00	; 0
    1f24:	03 c0       	rjmp	.+6      	; 0x1f2c <__vector_11+0xca>
    1f26:	61 50       	subi	r22, 0x01	; 1
    1f28:	99 f6       	brne	.-90     	; 0x1ed0 <__vector_11+0x6e>
    1f2a:	cb cf       	rjmp	.-106    	; 0x1ec2 <__vector_11+0x60>
    1f2c:	8c 91       	ld	r24, X
    1f2e:	98 2f       	mov	r25, r24
    1f30:	95 70       	andi	r25, 0x05	; 5
    1f32:	e1 f3       	breq	.-8      	; 0x1f2c <__vector_11+0xca>
    1f34:	82 fd       	sbrc	r24, 2
    1f36:	03 c1       	rjmp	.+518    	; 0x213e <__vector_11+0x2dc>
    1f38:	32 2f       	mov	r19, r18
    1f3a:	21 31       	cpi	r18, 0x11	; 17
    1f3c:	08 f0       	brcs	.+2      	; 0x1f40 <__vector_11+0xde>
    1f3e:	37 2f       	mov	r19, r23
    1f40:	33 23       	and	r19, r19
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <__vector_11+0xe4>
    1f44:	f9 c0       	rjmp	.+498    	; 0x2138 <__vector_11+0x2d6>
    1f46:	fa 01       	movw	r30, r20
    1f48:	83 2f       	mov	r24, r19
    1f4a:	94 91       	lpm	r25, Z
    1f4c:	98 83       	st	Y, r25
    1f4e:	81 50       	subi	r24, 0x01	; 1
    1f50:	31 96       	adiw	r30, 0x01	; 1
    1f52:	81 11       	cpse	r24, r1
    1f54:	fa cf       	rjmp	.-12     	; 0x1f4a <__vector_11+0xe8>
    1f56:	8f ef       	ldi	r24, 0xFF	; 255
    1f58:	83 0f       	add	r24, r19
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	01 96       	adiw	r24, 0x01	; 1
    1f5e:	48 0f       	add	r20, r24
    1f60:	59 1f       	adc	r21, r25
    1f62:	23 1b       	sub	r18, r19
    1f64:	6c 93       	st	X, r22
    1f66:	21 11       	cpse	r18, r1
    1f68:	e1 cf       	rjmp	.-62     	; 0x1f2c <__vector_11+0xca>
    1f6a:	30 31       	cpi	r19, 0x10	; 16
    1f6c:	f9 f2       	breq	.-66     	; 0x1f2c <__vector_11+0xca>
    1f6e:	e7 c0       	rjmp	.+462    	; 0x213e <__vector_11+0x2dc>
    1f70:	85 30       	cpi	r24, 0x05	; 5
    1f72:	61 f4       	brne	.+24     	; 0x1f8c <__vector_11+0x12a>
    1f74:	8e ef       	ldi	r24, 0xFE	; 254
    1f76:	80 93 e8 00 	sts	0x00E8, r24
    1f7a:	e8 ee       	ldi	r30, 0xE8	; 232
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	80 ff       	sbrs	r24, 0
    1f82:	fd cf       	rjmp	.-6      	; 0x1f7e <__vector_11+0x11c>
    1f84:	20 68       	ori	r18, 0x80	; 128
    1f86:	20 93 e3 00 	sts	0x00E3, r18
    1f8a:	d9 c0       	rjmp	.+434    	; 0x213e <__vector_11+0x2dc>
    1f8c:	89 30       	cpi	r24, 0x09	; 9
    1f8e:	09 f0       	breq	.+2      	; 0x1f92 <__vector_11+0x130>
    1f90:	35 c0       	rjmp	.+106    	; 0x1ffc <__vector_11+0x19a>
    1f92:	61 11       	cpse	r22, r1
    1f94:	cd c0       	rjmp	.+410    	; 0x2130 <__vector_11+0x2ce>
    1f96:	20 93 c8 01 	sts	0x01C8, r18
    1f9a:	10 92 c5 01 	sts	0x01C5, r1
    1f9e:	10 92 c7 01 	sts	0x01C7, r1
    1fa2:	8e ef       	ldi	r24, 0xFE	; 254
    1fa4:	80 93 e8 00 	sts	0x00E8, r24
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	29 ec       	ldi	r18, 0xC9	; 201
    1fac:	31 e0       	ldi	r19, 0x01	; 1
    1fae:	c9 ee       	ldi	r28, 0xE9	; 233
    1fb0:	d0 e0       	ldi	r29, 0x00	; 0
    1fb2:	ab ee       	ldi	r26, 0xEB	; 235
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	0c ee       	ldi	r16, 0xEC	; 236
    1fb8:	10 e0       	ldi	r17, 0x00	; 0
    1fba:	6d ee       	ldi	r22, 0xED	; 237
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	88 83       	st	Y, r24
    1fc0:	a9 01       	movw	r20, r18
    1fc2:	4f 5f       	subi	r20, 0xFF	; 255
    1fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc6:	f9 01       	movw	r30, r18
    1fc8:	94 91       	lpm	r25, Z
    1fca:	9c 93       	st	X, r25
    1fcc:	99 23       	and	r25, r25
    1fce:	61 f0       	breq	.+24     	; 0x1fe8 <__vector_11+0x186>
    1fd0:	fa 01       	movw	r30, r20
    1fd2:	44 91       	lpm	r20, Z
    1fd4:	f8 01       	movw	r30, r16
    1fd6:	40 83       	st	Z, r20
    1fd8:	f9 01       	movw	r30, r18
    1fda:	32 96       	adiw	r30, 0x02	; 2
    1fdc:	94 91       	lpm	r25, Z
    1fde:	2d 5f       	subi	r18, 0xFD	; 253
    1fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe2:	fb 01       	movw	r30, r22
    1fe4:	90 83       	st	Z, r25
    1fe6:	01 c0       	rjmp	.+2      	; 0x1fea <__vector_11+0x188>
    1fe8:	9a 01       	movw	r18, r20
    1fea:	8f 5f       	subi	r24, 0xFF	; 255
    1fec:	85 30       	cpi	r24, 0x05	; 5
    1fee:	39 f7       	brne	.-50     	; 0x1fbe <__vector_11+0x15c>
    1ff0:	ea ee       	ldi	r30, 0xEA	; 234
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	8e e1       	ldi	r24, 0x1E	; 30
    1ff6:	80 83       	st	Z, r24
    1ff8:	10 82       	st	Z, r1
    1ffa:	a1 c0       	rjmp	.+322    	; 0x213e <__vector_11+0x2dc>
    1ffc:	88 30       	cpi	r24, 0x08	; 8
    1ffe:	81 f4       	brne	.+32     	; 0x2020 <__vector_11+0x1be>
    2000:	60 38       	cpi	r22, 0x80	; 128
    2002:	09 f0       	breq	.+2      	; 0x2006 <__vector_11+0x1a4>
    2004:	95 c0       	rjmp	.+298    	; 0x2130 <__vector_11+0x2ce>
    2006:	e8 ee       	ldi	r30, 0xE8	; 232
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	80 ff       	sbrs	r24, 0
    200e:	fd cf       	rjmp	.-6      	; 0x200a <__vector_11+0x1a8>
    2010:	80 91 c8 01 	lds	r24, 0x01C8
    2014:	80 93 f1 00 	sts	0x00F1, r24
    2018:	8e ef       	ldi	r24, 0xFE	; 254
    201a:	80 93 e8 00 	sts	0x00E8, r24
    201e:	8f c0       	rjmp	.+286    	; 0x213e <__vector_11+0x2dc>
    2020:	81 32       	cpi	r24, 0x21	; 33
    2022:	b9 f4       	brne	.+46     	; 0x2052 <__vector_11+0x1f0>
    2024:	61 3a       	cpi	r22, 0xA1	; 161
    2026:	09 f0       	breq	.+2      	; 0x202a <__vector_11+0x1c8>
    2028:	83 c0       	rjmp	.+262    	; 0x2130 <__vector_11+0x2ce>
    202a:	e8 ee       	ldi	r30, 0xE8	; 232
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	80 ff       	sbrs	r24, 0
    2032:	fd cf       	rjmp	.-6      	; 0x202e <__vector_11+0x1cc>
    2034:	ec e2       	ldi	r30, 0x2C	; 44
    2036:	f1 e0       	ldi	r31, 0x01	; 1
    2038:	23 e3       	ldi	r18, 0x33	; 51
    203a:	31 e0       	ldi	r19, 0x01	; 1
    203c:	a1 ef       	ldi	r26, 0xF1	; 241
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	81 91       	ld	r24, Z+
    2042:	8c 93       	st	X, r24
    2044:	e2 17       	cp	r30, r18
    2046:	f3 07       	cpc	r31, r19
    2048:	d9 f7       	brne	.-10     	; 0x2040 <__vector_11+0x1de>
    204a:	8e ef       	ldi	r24, 0xFE	; 254
    204c:	80 93 e8 00 	sts	0x00E8, r24
    2050:	76 c0       	rjmp	.+236    	; 0x213e <__vector_11+0x2dc>
    2052:	80 32       	cpi	r24, 0x20	; 32
    2054:	d1 f4       	brne	.+52     	; 0x208a <__vector_11+0x228>
    2056:	61 32       	cpi	r22, 0x21	; 33
    2058:	09 f0       	breq	.+2      	; 0x205c <__vector_11+0x1fa>
    205a:	6a c0       	rjmp	.+212    	; 0x2130 <__vector_11+0x2ce>
    205c:	e8 ee       	ldi	r30, 0xE8	; 232
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	82 ff       	sbrs	r24, 2
    2064:	fd cf       	rjmp	.-6      	; 0x2060 <__vector_11+0x1fe>
    2066:	ec e2       	ldi	r30, 0x2C	; 44
    2068:	f1 e0       	ldi	r31, 0x01	; 1
    206a:	23 e3       	ldi	r18, 0x33	; 51
    206c:	31 e0       	ldi	r19, 0x01	; 1
    206e:	a1 ef       	ldi	r26, 0xF1	; 241
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	8c 91       	ld	r24, X
    2074:	81 93       	st	Z+, r24
    2076:	e2 17       	cp	r30, r18
    2078:	f3 07       	cpc	r31, r19
    207a:	d9 f7       	brne	.-10     	; 0x2072 <__vector_11+0x210>
    207c:	e8 ee       	ldi	r30, 0xE8	; 232
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	8b ef       	ldi	r24, 0xFB	; 251
    2082:	80 83       	st	Z, r24
    2084:	8e ef       	ldi	r24, 0xFE	; 254
    2086:	80 83       	st	Z, r24
    2088:	5a c0       	rjmp	.+180    	; 0x213e <__vector_11+0x2dc>
    208a:	82 32       	cpi	r24, 0x22	; 34
    208c:	71 f4       	brne	.+28     	; 0x20aa <__vector_11+0x248>
    208e:	61 32       	cpi	r22, 0x21	; 33
    2090:	09 f0       	breq	.+2      	; 0x2094 <__vector_11+0x232>
    2092:	4e c0       	rjmp	.+156    	; 0x2130 <__vector_11+0x2ce>
    2094:	20 93 c5 01 	sts	0x01C5, r18
    2098:	e8 ee       	ldi	r30, 0xE8	; 232
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	80 ff       	sbrs	r24, 0
    20a0:	fd cf       	rjmp	.-6      	; 0x209c <__vector_11+0x23a>
    20a2:	8e ef       	ldi	r24, 0xFE	; 254
    20a4:	80 93 e8 00 	sts	0x00E8, r24
    20a8:	4a c0       	rjmp	.+148    	; 0x213e <__vector_11+0x2dc>
    20aa:	81 11       	cpse	r24, r1
    20ac:	1a c0       	rjmp	.+52     	; 0x20e2 <__vector_11+0x280>
    20ae:	e8 ee       	ldi	r30, 0xE8	; 232
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	80 ff       	sbrs	r24, 0
    20b6:	fd cf       	rjmp	.-6      	; 0x20b2 <__vector_11+0x250>
    20b8:	62 38       	cpi	r22, 0x82	; 130
    20ba:	51 f4       	brne	.+20     	; 0x20d0 <__vector_11+0x26e>
    20bc:	e9 ee       	ldi	r30, 0xE9	; 233
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	40 83       	st	Z, r20
    20c2:	80 91 eb 00 	lds	r24, 0x00EB
    20c6:	85 fb       	bst	r24, 5
    20c8:	88 27       	eor	r24, r24
    20ca:	80 f9       	bld	r24, 0
    20cc:	10 82       	st	Z, r1
    20ce:	01 c0       	rjmp	.+2      	; 0x20d2 <__vector_11+0x270>
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	e1 ef       	ldi	r30, 0xF1	; 241
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 83       	st	Z, r24
    20d8:	10 82       	st	Z, r1
    20da:	8e ef       	ldi	r24, 0xFE	; 254
    20dc:	80 93 e8 00 	sts	0x00E8, r24
    20e0:	2e c0       	rjmp	.+92     	; 0x213e <__vector_11+0x2dc>
    20e2:	98 2f       	mov	r25, r24
    20e4:	9d 7f       	andi	r25, 0xFD	; 253
    20e6:	91 30       	cpi	r25, 0x01	; 1
    20e8:	19 f5       	brne	.+70     	; 0x2130 <__vector_11+0x2ce>
    20ea:	62 30       	cpi	r22, 0x02	; 2
    20ec:	09 f5       	brne	.+66     	; 0x2130 <__vector_11+0x2ce>
    20ee:	23 2b       	or	r18, r19
    20f0:	f9 f4       	brne	.+62     	; 0x2130 <__vector_11+0x2ce>
    20f2:	4f 77       	andi	r20, 0x7F	; 127
    20f4:	9f ef       	ldi	r25, 0xFF	; 255
    20f6:	94 0f       	add	r25, r20
    20f8:	94 30       	cpi	r25, 0x04	; 4
    20fa:	d0 f4       	brcc	.+52     	; 0x2130 <__vector_11+0x2ce>
    20fc:	9e ef       	ldi	r25, 0xFE	; 254
    20fe:	90 93 e8 00 	sts	0x00E8, r25
    2102:	40 93 e9 00 	sts	0x00E9, r20
    2106:	83 30       	cpi	r24, 0x03	; 3
    2108:	21 f4       	brne	.+8      	; 0x2112 <__vector_11+0x2b0>
    210a:	81 e2       	ldi	r24, 0x21	; 33
    210c:	80 93 eb 00 	sts	0x00EB, r24
    2110:	16 c0       	rjmp	.+44     	; 0x213e <__vector_11+0x2dc>
    2112:	89 e1       	ldi	r24, 0x19	; 25
    2114:	80 93 eb 00 	sts	0x00EB, r24
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <__vector_11+0x2c0>
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	4a 95       	dec	r20
    2124:	e2 f7       	brpl	.-8      	; 0x211e <__vector_11+0x2bc>
    2126:	ea ee       	ldi	r30, 0xEA	; 234
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 83       	st	Z, r24
    212c:	10 82       	st	Z, r1
    212e:	07 c0       	rjmp	.+14     	; 0x213e <__vector_11+0x2dc>
    2130:	81 e2       	ldi	r24, 0x21	; 33
    2132:	80 93 eb 00 	sts	0x00EB, r24
    2136:	03 c0       	rjmp	.+6      	; 0x213e <__vector_11+0x2dc>
    2138:	6c 93       	st	X, r22
    213a:	21 11       	cpse	r18, r1
    213c:	f7 ce       	rjmp	.-530    	; 0x1f2c <__vector_11+0xca>
    213e:	ff 91       	pop	r31
    2140:	ef 91       	pop	r30
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	bf 91       	pop	r27
    2148:	af 91       	pop	r26
    214a:	9f 91       	pop	r25
    214c:	8f 91       	pop	r24
    214e:	7f 91       	pop	r23
    2150:	6f 91       	pop	r22
    2152:	5f 91       	pop	r21
    2154:	4f 91       	pop	r20
    2156:	3f 91       	pop	r19
    2158:	2f 91       	pop	r18
    215a:	1f 91       	pop	r17
    215c:	0f 91       	pop	r16
    215e:	0f 90       	pop	r0
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	0f 90       	pop	r0
    2164:	1f 90       	pop	r1
    2166:	18 95       	reti

00002168 <m_usb_tx_int>:
    2168:	ef 92       	push	r14
    216a:	ff 92       	push	r15
    216c:	0f 93       	push	r16
    216e:	1f 93       	push	r17
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	27 97       	sbiw	r28, 0x07	; 7
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	8e 01       	movw	r16, r28
    2186:	0f 5f       	subi	r16, 0xFF	; 255
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	27 e0       	ldi	r18, 0x07	; 7
    218c:	f8 01       	movw	r30, r16
    218e:	11 92       	st	Z+, r1
    2190:	2a 95       	dec	r18
    2192:	e9 f7       	brne	.-6      	; 0x218e <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2194:	4a e0       	ldi	r20, 0x0A	; 10
    2196:	b8 01       	movw	r22, r16
    2198:	0e 94 10 19 	call	0x3220	; 0x3220 <__itoa_ncheck>
    219c:	7e 01       	movw	r14, r28
    219e:	f8 e0       	ldi	r31, 0x08	; 8
    21a0:	ef 0e       	add	r14, r31
    21a2:	f1 1c       	adc	r15, r1
    21a4:	f8 01       	movw	r30, r16
    21a6:	81 91       	ld	r24, Z+
    21a8:	8f 01       	movw	r16, r30
    21aa:	81 11       	cpse	r24, r1
    21ac:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <m_usb_tx_char>
    21b0:	0e 15       	cp	r16, r14
    21b2:	1f 05       	cpc	r17, r15
    21b4:	b9 f7       	brne	.-18     	; 0x21a4 <m_usb_tx_int+0x3c>
    21b6:	27 96       	adiw	r28, 0x07	; 7
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	ff 90       	pop	r15
    21cc:	ef 90       	pop	r14
    21ce:	08 95       	ret

000021d0 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    21d4:	ec eb       	ldi	r30, 0xBC	; 188
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	88 23       	and	r24, r24
    21dc:	34 f0       	brlt	.+12     	; 0x21ea <twi_wait+0x1a>
    21de:	2f 5f       	subi	r18, 0xFF	; 255
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	29 3e       	cpi	r18, 0xE9	; 233
    21e4:	83 e0       	ldi	r24, 0x03	; 3
    21e6:	38 07       	cpc	r19, r24
    21e8:	b9 f7       	brne	.-18     	; 0x21d8 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	28 3e       	cpi	r18, 0xE8	; 232
    21ee:	33 40       	sbci	r19, 0x03	; 3
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <twi_wait+0x24>
    21f2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    21f4:	08 95       	ret

000021f6 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    21f6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    21fa:	84 e8       	ldi	r24, 0x84	; 132
    21fc:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    2200:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <twi_wait>
    2204:	88 23       	and	r24, r24
    2206:	19 f0       	breq	.+6      	; 0x220e <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2208:	80 91 b9 00 	lds	r24, 0x00B9
    220c:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    220e:	08 95       	ret

00002210 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2210:	cf 93       	push	r28
    2212:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2214:	94 ea       	ldi	r25, 0xA4	; 164
    2216:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    221a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <twi_wait>
    221e:	88 23       	and	r24, r24
    2220:	61 f0       	breq	.+24     	; 0x223a <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2222:	8c 2f       	mov	r24, r28
    2224:	88 0f       	add	r24, r24
    2226:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    222a:	80 32       	cpi	r24, 0x20	; 32
    222c:	29 f4       	brne	.+10     	; 0x2238 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    222e:	84 e9       	ldi	r24, 0x94	; 148
    2230:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	01 c0       	rjmp	.+2      	; 0x223a <start_write+0x2a>
	}	
	return 1;	// success
    2238:	81 e0       	ldi	r24, 0x01	; 1
}	
    223a:	cf 91       	pop	r28
    223c:	08 95       	ret

0000223e <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    223e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2242:	88 e5       	ldi	r24, 0x58	; 88
    2244:	0e 94 08 11 	call	0x2210	; 0x2210 <start_write>
    2248:	88 23       	and	r24, r24
    224a:	09 f4       	brne	.+2      	; 0x224e <m_wii_open+0x10>
    224c:	cd c0       	rjmp	.+410    	; 0x23e8 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    224e:	80 e3       	ldi	r24, 0x30	; 48
    2250:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    2254:	88 23       	and	r24, r24
    2256:	09 f4       	brne	.+2      	; 0x225a <m_wii_open+0x1c>
    2258:	c9 c0       	rjmp	.+402    	; 0x23ec <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    2260:	88 23       	and	r24, r24
    2262:	09 f4       	brne	.+2      	; 0x2266 <m_wii_open+0x28>
    2264:	c5 c0       	rjmp	.+394    	; 0x23f0 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2266:	84 e9       	ldi	r24, 0x94	; 148
    2268:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    226c:	83 ec       	ldi	r24, 0xC3	; 195
    226e:	99 e0       	ldi	r25, 0x09	; 9
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <m_wii_open+0x32>
    2274:	00 c0       	rjmp	.+0      	; 0x2276 <m_wii_open+0x38>
    2276:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2278:	88 e5       	ldi	r24, 0x58	; 88
    227a:	0e 94 08 11 	call	0x2210	; 0x2210 <start_write>
    227e:	88 23       	and	r24, r24
    2280:	09 f4       	brne	.+2      	; 0x2284 <m_wii_open+0x46>
    2282:	b8 c0       	rjmp	.+368    	; 0x23f4 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    228a:	88 23       	and	r24, r24
    228c:	09 f4       	brne	.+2      	; 0x2290 <m_wii_open+0x52>
    228e:	b4 c0       	rjmp	.+360    	; 0x23f8 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    2296:	88 23       	and	r24, r24
    2298:	09 f4       	brne	.+2      	; 0x229c <m_wii_open+0x5e>
    229a:	b0 c0       	rjmp	.+352    	; 0x23fc <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    22a2:	88 23       	and	r24, r24
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <m_wii_open+0x6a>
    22a6:	ac c0       	rjmp	.+344    	; 0x2400 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    22ae:	88 23       	and	r24, r24
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <m_wii_open+0x76>
    22b2:	a8 c0       	rjmp	.+336    	; 0x2404 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    22ba:	88 23       	and	r24, r24
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <m_wii_open+0x82>
    22be:	a4 c0       	rjmp	.+328    	; 0x2408 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    22c6:	88 23       	and	r24, r24
    22c8:	09 f4       	brne	.+2      	; 0x22cc <m_wii_open+0x8e>
    22ca:	a0 c0       	rjmp	.+320    	; 0x240c <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    22d2:	88 23       	and	r24, r24
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <m_wii_open+0x9a>
    22d6:	9c c0       	rjmp	.+312    	; 0x2410 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    22d8:	80 e9       	ldi	r24, 0x90	; 144
    22da:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    22de:	88 23       	and	r24, r24
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <m_wii_open+0xa6>
    22e2:	98 c0       	rjmp	.+304    	; 0x2414 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    22e4:	84 e9       	ldi	r24, 0x94	; 148
    22e6:	80 93 bc 00 	sts	0x00BC, r24
    22ea:	83 ec       	ldi	r24, 0xC3	; 195
    22ec:	99 e0       	ldi	r25, 0x09	; 9
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <m_wii_open+0xb0>
    22f2:	00 c0       	rjmp	.+0      	; 0x22f4 <m_wii_open+0xb6>
    22f4:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    22f6:	88 e5       	ldi	r24, 0x58	; 88
    22f8:	0e 94 08 11 	call	0x2210	; 0x2210 <start_write>
    22fc:	88 23       	and	r24, r24
    22fe:	09 f4       	brne	.+2      	; 0x2302 <m_wii_open+0xc4>
    2300:	8b c0       	rjmp	.+278    	; 0x2418 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    2302:	87 e0       	ldi	r24, 0x07	; 7
    2304:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    2308:	88 23       	and	r24, r24
    230a:	09 f4       	brne	.+2      	; 0x230e <m_wii_open+0xd0>
    230c:	87 c0       	rjmp	.+270    	; 0x241c <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    2314:	88 23       	and	r24, r24
    2316:	09 f4       	brne	.+2      	; 0x231a <m_wii_open+0xdc>
    2318:	83 c0       	rjmp	.+262    	; 0x2420 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    231a:	81 e4       	ldi	r24, 0x41	; 65
    231c:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    2320:	88 23       	and	r24, r24
    2322:	09 f4       	brne	.+2      	; 0x2326 <m_wii_open+0xe8>
    2324:	7f c0       	rjmp	.+254    	; 0x2424 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2326:	84 e9       	ldi	r24, 0x94	; 148
    2328:	80 93 bc 00 	sts	0x00BC, r24
    232c:	83 ec       	ldi	r24, 0xC3	; 195
    232e:	99 e0       	ldi	r25, 0x09	; 9
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <m_wii_open+0xf2>
    2334:	00 c0       	rjmp	.+0      	; 0x2336 <m_wii_open+0xf8>
    2336:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2338:	88 e5       	ldi	r24, 0x58	; 88
    233a:	0e 94 08 11 	call	0x2210	; 0x2210 <start_write>
    233e:	88 23       	and	r24, r24
    2340:	09 f4       	brne	.+2      	; 0x2344 <m_wii_open+0x106>
    2342:	72 c0       	rjmp	.+228    	; 0x2428 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    2344:	8a e1       	ldi	r24, 0x1A	; 26
    2346:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    234a:	88 23       	and	r24, r24
    234c:	09 f4       	brne	.+2      	; 0x2350 <m_wii_open+0x112>
    234e:	6e c0       	rjmp	.+220    	; 0x242c <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    2350:	80 e4       	ldi	r24, 0x40	; 64
    2352:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    2356:	88 23       	and	r24, r24
    2358:	09 f4       	brne	.+2      	; 0x235c <m_wii_open+0x11e>
    235a:	6a c0       	rjmp	.+212    	; 0x2430 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    2362:	88 23       	and	r24, r24
    2364:	09 f4       	brne	.+2      	; 0x2368 <m_wii_open+0x12a>
    2366:	66 c0       	rjmp	.+204    	; 0x2434 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2368:	84 e9       	ldi	r24, 0x94	; 148
    236a:	80 93 bc 00 	sts	0x00BC, r24
    236e:	83 ec       	ldi	r24, 0xC3	; 195
    2370:	99 e0       	ldi	r25, 0x09	; 9
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	f1 f7       	brne	.-4      	; 0x2372 <m_wii_open+0x134>
    2376:	00 c0       	rjmp	.+0      	; 0x2378 <m_wii_open+0x13a>
    2378:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    237a:	88 e5       	ldi	r24, 0x58	; 88
    237c:	0e 94 08 11 	call	0x2210	; 0x2210 <start_write>
    2380:	88 23       	and	r24, r24
    2382:	09 f4       	brne	.+2      	; 0x2386 <m_wii_open+0x148>
    2384:	59 c0       	rjmp	.+178    	; 0x2438 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    2386:	83 e3       	ldi	r24, 0x33	; 51
    2388:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    238c:	88 23       	and	r24, r24
    238e:	09 f4       	brne	.+2      	; 0x2392 <m_wii_open+0x154>
    2390:	55 c0       	rjmp	.+170    	; 0x243c <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    2392:	83 e0       	ldi	r24, 0x03	; 3
    2394:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    2398:	88 23       	and	r24, r24
    239a:	09 f4       	brne	.+2      	; 0x239e <m_wii_open+0x160>
    239c:	51 c0       	rjmp	.+162    	; 0x2440 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    239e:	84 e9       	ldi	r24, 0x94	; 148
    23a0:	80 93 bc 00 	sts	0x00BC, r24
    23a4:	83 ec       	ldi	r24, 0xC3	; 195
    23a6:	99 e0       	ldi	r25, 0x09	; 9
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <m_wii_open+0x16a>
    23ac:	00 c0       	rjmp	.+0      	; 0x23ae <m_wii_open+0x170>
    23ae:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    23b0:	88 e5       	ldi	r24, 0x58	; 88
    23b2:	0e 94 08 11 	call	0x2210	; 0x2210 <start_write>
    23b6:	88 23       	and	r24, r24
    23b8:	09 f4       	brne	.+2      	; 0x23bc <m_wii_open+0x17e>
    23ba:	44 c0       	rjmp	.+136    	; 0x2444 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    23bc:	80 e3       	ldi	r24, 0x30	; 48
    23be:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    23c2:	88 23       	and	r24, r24
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <m_wii_open+0x18a>
    23c6:	40 c0       	rjmp	.+128    	; 0x2448 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    23c8:	88 e0       	ldi	r24, 0x08	; 8
    23ca:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    23ce:	88 23       	and	r24, r24
    23d0:	e9 f1       	breq	.+122    	; 0x244c <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    23d2:	84 e9       	ldi	r24, 0x94	; 148
    23d4:	80 93 bc 00 	sts	0x00BC, r24
    23d8:	83 ec       	ldi	r24, 0xC3	; 195
    23da:	99 e0       	ldi	r25, 0x09	; 9
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <m_wii_open+0x19e>
    23e0:	00 c0       	rjmp	.+0      	; 0x23e2 <m_wii_open+0x1a4>
    23e2:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    244c:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    244e:	08 95       	ret

00002450 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2450:	cf 93       	push	r28
    2452:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2454:	84 ea       	ldi	r24, 0xA4	; 164
    2456:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    245a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <twi_wait>
    245e:	88 23       	and	r24, r24
    2460:	69 f0       	breq	.+26     	; 0x247c <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2462:	8c 2f       	mov	r24, r28
    2464:	88 0f       	add	r24, r24
    2466:	8f 5f       	subi	r24, 0xFF	; 255
    2468:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    246c:	88 34       	cpi	r24, 0x48	; 72
    246e:	29 f4       	brne	.+10     	; 0x247a <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2470:	84 e9       	ldi	r24, 0x94	; 148
    2472:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	01 c0       	rjmp	.+2      	; 0x247c <start_read+0x2c>
	}	
	return 1;	// success
    247a:	81 e0       	ldi	r24, 0x01	; 1
}	
    247c:	cf 91       	pop	r28
    247e:	08 95       	ret

00002480 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2480:	0f 93       	push	r16
    2482:	1f 93       	push	r17
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	60 97       	sbiw	r28, 0x10	; 16
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    249a:	fe 01       	movw	r30, r28
    249c:	31 96       	adiw	r30, 0x01	; 1
    249e:	80 e1       	ldi	r24, 0x10	; 16
    24a0:	df 01       	movw	r26, r30
    24a2:	1d 92       	st	X+, r1
    24a4:	8a 95       	dec	r24
    24a6:	e9 f7       	brne	.-6      	; 0x24a2 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    24a8:	88 e5       	ldi	r24, 0x58	; 88
    24aa:	0e 94 08 11 	call	0x2210	; 0x2210 <start_write>
    24ae:	88 23       	and	r24, r24
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <m_wii_read+0x34>
    24b2:	69 c0       	rjmp	.+210    	; 0x2586 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    24b4:	86 e3       	ldi	r24, 0x36	; 54
    24b6:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <send_byte>
    24ba:	88 23       	and	r24, r24
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <m_wii_read+0x40>
    24be:	65 c0       	rjmp	.+202    	; 0x258a <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    24c0:	84 e9       	ldi	r24, 0x94	; 148
    24c2:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24c6:	b8 e0       	ldi	r27, 0x08	; 8
    24c8:	ba 95       	dec	r27
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <m_wii_read+0x48>
    24cc:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    24ce:	88 e5       	ldi	r24, 0x58	; 88
    24d0:	0e 94 28 12 	call	0x2450	; 0x2450 <start_read>
    24d4:	88 23       	and	r24, r24
    24d6:	09 f4       	brne	.+2      	; 0x24da <m_wii_read+0x5a>
    24d8:	5a c0       	rjmp	.+180    	; 0x258e <m_wii_read+0x10e>
    24da:	be 01       	movw	r22, r28
    24dc:	6f 5f       	subi	r22, 0xFF	; 255
    24de:	7f 4f       	sbci	r23, 0xFF	; 255
    24e0:	ae 01       	movw	r20, r28
    24e2:	40 5f       	subi	r20, 0xF0	; 240
    24e4:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    24e6:	ec eb       	ldi	r30, 0xBC	; 188
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    24ec:	2b eb       	ldi	r18, 0xBB	; 187
    24ee:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    24f0:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    24f2:	90 81       	ld	r25, Z
    24f4:	99 23       	and	r25, r25
    24f6:	ec f7       	brge	.-6      	; 0x24f2 <m_wii_read+0x72>
		temp[i] = TWDR;
    24f8:	d9 01       	movw	r26, r18
    24fa:	9c 91       	ld	r25, X
    24fc:	db 01       	movw	r26, r22
    24fe:	9d 93       	st	X+, r25
    2500:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2502:	a4 17       	cp	r26, r20
    2504:	b5 07       	cpc	r27, r21
    2506:	a1 f7       	brne	.-24     	; 0x24f0 <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2508:	84 e8       	ldi	r24, 0x84	; 132
    250a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    250e:	ec eb       	ldi	r30, 0xBC	; 188
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	88 23       	and	r24, r24
    2516:	ec f7       	brge	.-6      	; 0x2512 <m_wii_read+0x92>
	temp[15] = TWDR;
    2518:	80 91 bb 00 	lds	r24, 0x00BB
    251c:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    251e:	84 e9       	ldi	r24, 0x94	; 148
    2520:	80 93 bc 00 	sts	0x00BC, r24
    2524:	be 01       	movw	r22, r28
    2526:	6c 5f       	subi	r22, 0xFC	; 252
    2528:	7f 4f       	sbci	r23, 0xFF	; 255
    252a:	f8 01       	movw	r30, r16
    252c:	08 5e       	subi	r16, 0xE8	; 232
    252e:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2530:	db 01       	movw	r26, r22
    2532:	2c 91       	ld	r18, X
    2534:	32 2f       	mov	r19, r18
    2536:	30 73       	andi	r19, 0x30	; 48
    2538:	cb 01       	movw	r24, r22
    253a:	02 97       	sbiw	r24, 0x02	; 2
    253c:	dc 01       	movw	r26, r24
    253e:	8c 91       	ld	r24, X
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	b0 e1       	ldi	r27, 0x10	; 16
    2544:	3b 9f       	mul	r19, r27
    2546:	80 0d       	add	r24, r0
    2548:	91 1d       	adc	r25, r1
    254a:	11 24       	eor	r1, r1
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2550:	42 2f       	mov	r20, r18
    2552:	40 7c       	andi	r20, 0xC0	; 192
    2554:	50 e0       	ldi	r21, 0x00	; 0
    2556:	44 0f       	add	r20, r20
    2558:	55 1f       	adc	r21, r21
    255a:	44 0f       	add	r20, r20
    255c:	55 1f       	adc	r21, r21
    255e:	cb 01       	movw	r24, r22
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	dc 01       	movw	r26, r24
    2564:	8c 91       	ld	r24, X
    2566:	48 0f       	add	r20, r24
    2568:	51 1d       	adc	r21, r1
    256a:	53 83       	std	Z+3, r21	; 0x03
    256c:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    256e:	2f 70       	andi	r18, 0x0F	; 15
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	35 83       	std	Z+5, r19	; 0x05
    2574:	24 83       	std	Z+4, r18	; 0x04
    2576:	6d 5f       	subi	r22, 0xFD	; 253
    2578:	7f 4f       	sbci	r23, 0xFF	; 255
    257a:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    257c:	e0 17       	cp	r30, r16
    257e:	f1 07       	cpc	r31, r17
    2580:	b9 f6       	brne	.-82     	; 0x2530 <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	05 c0       	rjmp	.+10     	; 0x2590 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	03 c0       	rjmp	.+6      	; 0x2590 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	01 c0       	rjmp	.+2      	; 0x2590 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    258e:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2590:	60 96       	adiw	r28, 0x10	; 16
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	1f 91       	pop	r17
    25a2:	0f 91       	pop	r16
    25a4:	08 95       	ret

000025a6 <get_puck_location>:
Public Functions
************************************************************/

/* Returns x,y, location of puck (angle more accurate) */
void get_puck_location(float* puck_buffer)
{
    25a6:	2f 92       	push	r2
    25a8:	3f 92       	push	r3
    25aa:	4f 92       	push	r4
    25ac:	5f 92       	push	r5
    25ae:	6f 92       	push	r6
    25b0:	7f 92       	push	r7
    25b2:	8f 92       	push	r8
    25b4:	9f 92       	push	r9
    25b6:	af 92       	push	r10
    25b8:	bf 92       	push	r11
    25ba:	cf 92       	push	r12
    25bc:	df 92       	push	r13
    25be:	ef 92       	push	r14
    25c0:	ff 92       	push	r15
    25c2:	0f 93       	push	r16
    25c4:	1f 93       	push	r17
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	62 97       	sbiw	r28, 0x12	; 18
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	9a 8b       	std	Y+18, r25	; 0x12
    25dc:	89 8b       	std	Y+17, r24	; 0x11
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta
    25de:	ce 01       	movw	r24, r28
    25e0:	01 96       	adiw	r24, 0x01	; 1
    25e2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <get_position>
    25e6:	0f 2e       	mov	r0, r31
    25e8:	fd ec       	ldi	r31, 0xCD	; 205
    25ea:	8f 2e       	mov	r8, r31
    25ec:	f1 e0       	ldi	r31, 0x01	; 1
    25ee:	9f 2e       	mov	r9, r31
    25f0:	f0 2d       	mov	r31, r0
    25f2:	0f 2e       	mov	r0, r31
    25f4:	f3 e3       	ldi	r31, 0x33	; 51
    25f6:	ef 2e       	mov	r14, r31
    25f8:	f1 e0       	ldi	r31, 0x01	; 1
    25fa:	ff 2e       	mov	r15, r31
    25fc:	f0 2d       	mov	r31, r0
    25fe:	0f 2e       	mov	r0, r31
    2600:	fb e5       	ldi	r31, 0x5B	; 91
    2602:	af 2e       	mov	r10, r31
    2604:	f1 e0       	ldi	r31, 0x01	; 1
    2606:	bf 2e       	mov	r11, r31
    2608:	f0 2d       	mov	r31, r0

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
    260a:	1d 86       	std	Y+13, r1	; 0x0d
    260c:	1e 86       	std	Y+14, r1	; 0x0e
    260e:	1f 86       	std	Y+15, r1	; 0x0f
    2610:	18 8a       	std	Y+16, r1	; 0x10
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
    2612:	c1 2c       	mov	r12, r1
    2614:	d1 2c       	mov	r13, r1
{
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
    2616:	21 2c       	mov	r2, r1
    2618:	31 2c       	mov	r3, r1
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
		scaler += transistor_vals[i];
    261a:	f4 01       	movw	r30, r8
    261c:	01 91       	ld	r16, Z+
    261e:	11 91       	ld	r17, Z+
    2620:	4f 01       	movw	r8, r30
    2622:	c0 0e       	add	r12, r16
    2624:	d1 1e       	adc	r13, r17
		global_theta += transistor_angles[i] * (float)transistor_vals[i];
    2626:	f7 01       	movw	r30, r14
    2628:	41 90       	ld	r4, Z+
    262a:	51 90       	ld	r5, Z+
    262c:	61 90       	ld	r6, Z+
    262e:	71 90       	ld	r7, Z+
    2630:	7f 01       	movw	r14, r30
    2632:	b8 01       	movw	r22, r16
    2634:	01 2e       	mov	r0, r17
    2636:	00 0c       	add	r0, r0
    2638:	88 0b       	sbc	r24, r24
    263a:	99 0b       	sbc	r25, r25
    263c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
    2640:	9b 01       	movw	r18, r22
    2642:	ac 01       	movw	r20, r24
    2644:	c3 01       	movw	r24, r6
    2646:	b2 01       	movw	r22, r4
    2648:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    264c:	9b 01       	movw	r18, r22
    264e:	ac 01       	movw	r20, r24
    2650:	6d 85       	ldd	r22, Y+13	; 0x0d
    2652:	7e 85       	ldd	r23, Y+14	; 0x0e
    2654:	8f 85       	ldd	r24, Y+15	; 0x0f
    2656:	98 89       	ldd	r25, Y+16	; 0x10
    2658:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
    265c:	6d 87       	std	Y+13, r22	; 0x0d
    265e:	7e 87       	std	Y+14, r23	; 0x0e
    2660:	8f 87       	std	Y+15, r24	; 0x0f
    2662:	98 8b       	std	Y+16, r25	; 0x10
    2664:	20 16       	cp	r2, r16
    2666:	31 06       	cpc	r3, r17
    2668:	0c f4       	brge	.+2      	; 0x266c <get_puck_location+0xc6>
    266a:	18 01       	movw	r2, r16

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
    266c:	ea 14       	cp	r14, r10
    266e:	fb 04       	cpc	r15, r11
    2670:	a1 f6       	brne	.-88     	; 0x261a <get_puck_location+0x74>
	}
	global_theta = global_theta/((float)scaler);


	/* If no puck found */
	if(max_val<100){
    2672:	f4 e6       	ldi	r31, 0x64	; 100
    2674:	2f 16       	cp	r2, r31
    2676:	31 04       	cpc	r3, r1
    2678:	5c f4       	brge	.+22     	; 0x2690 <get_puck_location+0xea>
		puck_buffer[0] = 0;
    267a:	e9 89       	ldd	r30, Y+17	; 0x11
    267c:	fa 89       	ldd	r31, Y+18	; 0x12
    267e:	10 82       	st	Z, r1
    2680:	11 82       	std	Z+1, r1	; 0x01
    2682:	12 82       	std	Z+2, r1	; 0x02
    2684:	13 82       	std	Z+3, r1	; 0x03
		puck_buffer[1] = 0;
    2686:	14 82       	std	Z+4, r1	; 0x04
    2688:	15 82       	std	Z+5, r1	; 0x05
    268a:	16 82       	std	Z+6, r1	; 0x06
    268c:	17 82       	std	Z+7, r1	; 0x07
    268e:	62 c0       	rjmp	.+196    	; 0x2754 <get_puck_location+0x1ae>

		if(transistor_vals[i]>max_val){
			max_val = transistor_vals[i];
		}
	}
	global_theta = global_theta/((float)scaler);
    2690:	b6 01       	movw	r22, r12
    2692:	dd 0c       	add	r13, r13
    2694:	88 0b       	sbc	r24, r24
    2696:	99 0b       	sbc	r25, r25
    2698:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
    269c:	9b 01       	movw	r18, r22
    269e:	ac 01       	movw	r20, r24
    26a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    26a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    26a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a6:	98 89       	ldd	r25, Y+16	; 0x10
    26a8:	0e 94 55 16 	call	0x2caa	; 0x2caa <__divsf3>
		puck_buffer[1] = 0;
		return;
	}

	/* Create vector pointing to puck in global coordinates */
	global_theta += position_buffer[2];
    26ac:	29 85       	ldd	r18, Y+9	; 0x09
    26ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    26b0:	4b 85       	ldd	r20, Y+11	; 0x0b
    26b2:	5c 85       	ldd	r21, Y+12	; 0x0c
    26b4:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
    26b8:	6b 01       	movw	r12, r22
    26ba:	7c 01       	movw	r14, r24
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN*max_val/1000.0 + position_buffer[0]; // Assign X val
    26bc:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <cos>
    26c0:	4b 01       	movw	r8, r22
    26c2:	5c 01       	movw	r10, r24
    26c4:	b1 01       	movw	r22, r2
    26c6:	33 0c       	add	r3, r3
    26c8:	88 0b       	sbc	r24, r24
    26ca:	99 0b       	sbc	r25, r25
    26cc:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__floatsisf>
    26d0:	2b 01       	movw	r4, r22
    26d2:	3c 01       	movw	r6, r24
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	4f e2       	ldi	r20, 0x2F	; 47
    26da:	54 e4       	ldi	r21, 0x44	; 68
    26dc:	c5 01       	movw	r24, r10
    26de:	b4 01       	movw	r22, r8
    26e0:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    26e4:	a3 01       	movw	r20, r6
    26e6:	92 01       	movw	r18, r4
    26e8:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a e7       	ldi	r20, 0x7A	; 122
    26f2:	54 e4       	ldi	r21, 0x44	; 68
    26f4:	0e 94 55 16 	call	0x2caa	; 0x2caa <__divsf3>
    26f8:	29 81       	ldd	r18, Y+1	; 0x01
    26fa:	3a 81       	ldd	r19, Y+2	; 0x02
    26fc:	4b 81       	ldd	r20, Y+3	; 0x03
    26fe:	5c 81       	ldd	r21, Y+4	; 0x04
    2700:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
    2704:	e9 89       	ldd	r30, Y+17	; 0x11
    2706:	fa 89       	ldd	r31, Y+18	; 0x12
    2708:	60 83       	st	Z, r22
    270a:	71 83       	std	Z+1, r23	; 0x01
    270c:	82 83       	std	Z+2, r24	; 0x02
    270e:	93 83       	std	Z+3, r25	; 0x03
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN*max_val/1000.0 + position_buffer[1]; // Assign Y val
    2710:	c7 01       	movw	r24, r14
    2712:	b6 01       	movw	r22, r12
    2714:	0e 94 8f 18 	call	0x311e	; 0x311e <sin>
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	4f e2       	ldi	r20, 0x2F	; 47
    271e:	54 e4       	ldi	r21, 0x44	; 68
    2720:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    2724:	9b 01       	movw	r18, r22
    2726:	ac 01       	movw	r20, r24
    2728:	c3 01       	movw	r24, r6
    272a:	b2 01       	movw	r22, r4
    272c:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	4a e7       	ldi	r20, 0x7A	; 122
    2736:	54 e4       	ldi	r21, 0x44	; 68
    2738:	0e 94 55 16 	call	0x2caa	; 0x2caa <__divsf3>
    273c:	2d 81       	ldd	r18, Y+5	; 0x05
    273e:	3e 81       	ldd	r19, Y+6	; 0x06
    2740:	4f 81       	ldd	r20, Y+7	; 0x07
    2742:	58 85       	ldd	r21, Y+8	; 0x08
    2744:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__addsf3>
    2748:	e9 89       	ldd	r30, Y+17	; 0x11
    274a:	fa 89       	ldd	r31, Y+18	; 0x12
    274c:	64 83       	std	Z+4, r22	; 0x04
    274e:	75 83       	std	Z+5, r23	; 0x05
    2750:	86 83       	std	Z+6, r24	; 0x06
    2752:	97 83       	std	Z+7, r25	; 0x07

}
    2754:	62 96       	adiw	r28, 0x12	; 18
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	ff 90       	pop	r15
    276a:	ef 90       	pop	r14
    276c:	df 90       	pop	r13
    276e:	cf 90       	pop	r12
    2770:	bf 90       	pop	r11
    2772:	af 90       	pop	r10
    2774:	9f 90       	pop	r9
    2776:	8f 90       	pop	r8
    2778:	7f 90       	pop	r7
    277a:	6f 90       	pop	r6
    277c:	5f 90       	pop	r5
    277e:	4f 90       	pop	r4
    2780:	3f 90       	pop	r3
    2782:	2f 90       	pop	r2
    2784:	08 95       	ret

00002786 <has_puck>:

/* Return 1 If Has Puck */
char has_puck(void)
{
	if((transistor_3 + transistor_9) > HAS_PUCK_THRESHOLD){
    2786:	20 91 cb 01 	lds	r18, 0x01CB
    278a:	30 91 cc 01 	lds	r19, 0x01CC
    278e:	80 91 c9 01 	lds	r24, 0x01C9
    2792:	90 91 ca 01 	lds	r25, 0x01CA
    2796:	28 0f       	add	r18, r24
    2798:	39 1f       	adc	r19, r25
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	21 32       	cpi	r18, 0x21	; 33
    279e:	33 40       	sbci	r19, 0x03	; 3
    27a0:	0c f4       	brge	.+2      	; 0x27a4 <has_puck+0x1e>
    27a2:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	return 0;
}
    27a4:	08 95       	ret

000027a6 <adc_switch>:
/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated

	clear(ADCSRA,ADEN); // Disable ADC subsystem
    27a6:	ea e7       	ldi	r30, 0x7A	; 122
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	8f 77       	andi	r24, 0x7F	; 127
    27ae:	80 83       	st	Z, r24
	
	switch(state){
    27b0:	e0 91 e1 01 	lds	r30, 0x01E1
    27b4:	f0 91 e2 01 	lds	r31, 0x01E2
    27b8:	ec 30       	cpi	r30, 0x0C	; 12
    27ba:	f1 05       	cpc	r31, r1
    27bc:	08 f0       	brcs	.+2      	; 0x27c0 <adc_switch+0x1a>
    27be:	82 c1       	rjmp	.+772    	; 0x2ac4 <adc_switch+0x31e>
    27c0:	e2 5a       	subi	r30, 0xA2	; 162
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__tablejump2__>

		case 0:
			state = 1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	90 93 e2 01 	sts	0x01E2, r25
    27d0:	80 93 e1 01 	sts	0x01E1, r24
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
    27d4:	eb e7       	ldi	r30, 0x7B	; 123
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	8f 7d       	andi	r24, 0xDF	; 223
    27dc:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 8
    27de:	ec e7       	ldi	r30, 0x7C	; 124
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	8b 7f       	andi	r24, 0xFB	; 251
    27e6:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    27e8:	80 81       	ld	r24, Z
    27ea:	8d 7f       	andi	r24, 0xFD	; 253
    27ec:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    27ee:	80 81       	ld	r24, Z
    27f0:	8e 7f       	andi	r24, 0xFE	; 254
    27f2:	80 83       	st	Z, r24
			transistor_vals[2] = ADC;			
    27f4:	80 91 78 00 	lds	r24, 0x0078
    27f8:	90 91 79 00 	lds	r25, 0x0079
    27fc:	90 93 d2 01 	sts	0x01D2, r25
    2800:	80 93 d1 01 	sts	0x01D1, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2804:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
			clear(ADMUX,MUX2); // Transistor 8
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[2] = ADC;			
			break;
    2806:	5f c1       	rjmp	.+702    	; 0x2ac6 <adc_switch+0x320>

		case 1:
			state = 2;
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	90 93 e2 01 	sts	0x01E2, r25
    2810:	80 93 e1 01 	sts	0x01E1, r24
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
    2814:	eb e7       	ldi	r30, 0x7B	; 123
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	8f 7d       	andi	r24, 0xDF	; 223
    281c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 9
    281e:	ec e7       	ldi	r30, 0x7C	; 124
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	8b 7f       	andi	r24, 0xFB	; 251
    2826:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2828:	80 81       	ld	r24, Z
    282a:	8d 7f       	andi	r24, 0xFD	; 253
    282c:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    282e:	80 81       	ld	r24, Z
    2830:	81 60       	ori	r24, 0x01	; 1
    2832:	80 83       	st	Z, r24
			transistor_vals[4] = ADC;			
    2834:	80 91 78 00 	lds	r24, 0x0078
    2838:	90 91 79 00 	lds	r25, 0x0079
    283c:	90 93 d6 01 	sts	0x01D6, r25
    2840:	80 93 d5 01 	sts	0x01D5, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2844:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
			clear(ADMUX,MUX2); // Transistor 9
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[4] = ADC;			
			break;
    2846:	3f c1       	rjmp	.+638    	; 0x2ac6 <adc_switch+0x320>

		case 2:
			state = 3;
    2848:	83 e0       	ldi	r24, 0x03	; 3
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	90 93 e2 01 	sts	0x01E2, r25
    2850:	80 93 e1 01 	sts	0x01E1, r24
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
    2854:	eb e7       	ldi	r30, 0x7B	; 123
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	8f 7d       	andi	r24, 0xDF	; 223
    285c:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 10
    285e:	ec e7       	ldi	r30, 0x7C	; 124
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	84 60       	ori	r24, 0x04	; 4
    2866:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2868:	80 81       	ld	r24, Z
    286a:	8d 7f       	andi	r24, 0xFD	; 253
    286c:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    286e:	80 81       	ld	r24, Z
    2870:	8e 7f       	andi	r24, 0xFE	; 254
    2872:	80 83       	st	Z, r24
			transistor_9 = ADC;			
    2874:	80 91 78 00 	lds	r24, 0x0078
    2878:	90 91 79 00 	lds	r25, 0x0079
    287c:	90 93 ca 01 	sts	0x01CA, r25
    2880:	80 93 c9 01 	sts	0x01C9, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2884:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
			set(ADMUX,MUX2); // Transistor 10
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_9 = ADC;			
			break;
    2886:	1f c1       	rjmp	.+574    	; 0x2ac6 <adc_switch+0x320>

		case 3:
			state = 4;
    2888:	84 e0       	ldi	r24, 0x04	; 4
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	90 93 e2 01 	sts	0x01E2, r25
    2890:	80 93 e1 01 	sts	0x01E1, r24
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
    2894:	eb e7       	ldi	r30, 0x7B	; 123
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	8f 7d       	andi	r24, 0xDF	; 223
    289c:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 13
    289e:	ec e7       	ldi	r30, 0x7C	; 124
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	84 60       	ori	r24, 0x04	; 4
    28a6:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    28a8:	80 81       	ld	r24, Z
    28aa:	8d 7f       	andi	r24, 0xFD	; 253
    28ac:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    28ae:	80 81       	ld	r24, Z
    28b0:	81 60       	ori	r24, 0x01	; 1
    28b2:	80 83       	st	Z, r24
			transistor_vals[5] = ADC;			
    28b4:	80 91 78 00 	lds	r24, 0x0078
    28b8:	90 91 79 00 	lds	r25, 0x0079
    28bc:	90 93 d8 01 	sts	0x01D8, r25
    28c0:	80 93 d7 01 	sts	0x01D7, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    28c4:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
			set(ADMUX,MUX2); // Transistor 13
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[5] = ADC;			
			break;
    28c6:	ff c0       	rjmp	.+510    	; 0x2ac6 <adc_switch+0x320>

		case 4:
			state = 5;
    28c8:	85 e0       	ldi	r24, 0x05	; 5
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	90 93 e2 01 	sts	0x01E2, r25
    28d0:	80 93 e1 01 	sts	0x01E1, r24
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
    28d4:	eb e7       	ldi	r30, 0x7B	; 123
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	8f 7d       	andi	r24, 0xDF	; 223
    28dc:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 14
    28de:	ec e7       	ldi	r30, 0x7C	; 124
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	84 60       	ori	r24, 0x04	; 4
    28e6:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    28e8:	80 81       	ld	r24, Z
    28ea:	82 60       	ori	r24, 0x02	; 2
    28ec:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    28ee:	80 81       	ld	r24, Z
    28f0:	8e 7f       	andi	r24, 0xFE	; 254
    28f2:	80 83       	st	Z, r24
			transistor_vals[7] = ADC;			
    28f4:	80 91 78 00 	lds	r24, 0x0078
    28f8:	90 91 79 00 	lds	r25, 0x0079
    28fc:	90 93 dc 01 	sts	0x01DC, r25
    2900:	80 93 db 01 	sts	0x01DB, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2904:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
			set(ADMUX,MUX2); // Transistor 14
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[7] = ADC;			
			break;
    2906:	df c0       	rjmp	.+446    	; 0x2ac6 <adc_switch+0x320>

		case 5:
			state = 6;
    2908:	86 e0       	ldi	r24, 0x06	; 6
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	90 93 e2 01 	sts	0x01E2, r25
    2910:	80 93 e1 01 	sts	0x01E1, r24
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
    2914:	eb e7       	ldi	r30, 0x7B	; 123
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	8f 7d       	andi	r24, 0xDF	; 223
    291c:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 15
    291e:	ec e7       	ldi	r30, 0x7C	; 124
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	84 60       	ori	r24, 0x04	; 4
    2926:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2928:	80 81       	ld	r24, Z
    292a:	82 60       	ori	r24, 0x02	; 2
    292c:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    292e:	80 81       	ld	r24, Z
    2930:	81 60       	ori	r24, 0x01	; 1
    2932:	80 83       	st	Z, r24
			transistor_vals[8] = ADC;			
    2934:	80 91 78 00 	lds	r24, 0x0078
    2938:	90 91 79 00 	lds	r25, 0x0079
    293c:	90 93 de 01 	sts	0x01DE, r25
    2940:	80 93 dd 01 	sts	0x01DD, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2944:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
			set(ADMUX,MUX2); // Transistor 15
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[8] = ADC;			
			break;
    2946:	bf c0       	rjmp	.+382    	; 0x2ac6 <adc_switch+0x320>

		case 6:
			state = 7;
    2948:	87 e0       	ldi	r24, 0x07	; 7
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	90 93 e2 01 	sts	0x01E2, r25
    2950:	80 93 e1 01 	sts	0x01E1, r24
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
    2954:	eb e7       	ldi	r30, 0x7B	; 123
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	80 62       	ori	r24, 0x20	; 32
    295c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 1, 16
    295e:	ec e7       	ldi	r30, 0x7C	; 124
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	8b 7f       	andi	r24, 0xFB	; 251
    2966:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2968:	80 81       	ld	r24, Z
    296a:	8d 7f       	andi	r24, 0xFD	; 253
    296c:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    296e:	80 81       	ld	r24, Z
    2970:	8e 7f       	andi	r24, 0xFE	; 254
    2972:	80 83       	st	Z, r24
			transistor_vals[9] = ADC;			
    2974:	80 91 78 00 	lds	r24, 0x0078
    2978:	90 91 79 00 	lds	r25, 0x0079
    297c:	90 93 e0 01 	sts	0x01E0, r25
    2980:	80 93 df 01 	sts	0x01DF, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2984:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
			clear(ADMUX,MUX2); // Transistor 1, 16
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[9] = ADC;			
			break;
    2986:	9f c0       	rjmp	.+318    	; 0x2ac6 <adc_switch+0x320>

		case 7:
			state = 8;
    2988:	88 e0       	ldi	r24, 0x08	; 8
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	90 93 e2 01 	sts	0x01E2, r25
    2990:	80 93 e1 01 	sts	0x01E1, r24
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
    2994:	eb e7       	ldi	r30, 0x7B	; 123
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	80 62       	ori	r24, 0x20	; 32
    299c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 11, 12
    299e:	ec e7       	ldi	r30, 0x7C	; 124
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	80 81       	ld	r24, Z
    29a4:	8b 7f       	andi	r24, 0xFB	; 251
    29a6:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    29a8:	80 81       	ld	r24, Z
    29aa:	8d 7f       	andi	r24, 0xFD	; 253
    29ac:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    29ae:	80 81       	ld	r24, Z
    29b0:	81 60       	ori	r24, 0x01	; 1
    29b2:	80 83       	st	Z, r24
			transistor_vals[0] = ADC;			
    29b4:	80 91 78 00 	lds	r24, 0x0078
    29b8:	90 91 79 00 	lds	r25, 0x0079
    29bc:	90 93 ce 01 	sts	0x01CE, r25
    29c0:	80 93 cd 01 	sts	0x01CD, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    29c4:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
			clear(ADMUX,MUX2); // Transistor 11, 12
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[0] = ADC;			
			break;
    29c6:	7f c0       	rjmp	.+254    	; 0x2ac6 <adc_switch+0x320>

		case 8:
			state = 9;
    29c8:	89 e0       	ldi	r24, 0x09	; 9
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	90 93 e2 01 	sts	0x01E2, r25
    29d0:	80 93 e1 01 	sts	0x01E1, r24
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
    29d4:	eb e7       	ldi	r30, 0x7B	; 123
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	80 62       	ori	r24, 0x20	; 32
    29dc:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
    29de:	ec e7       	ldi	r30, 0x7C	; 124
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	8b 7f       	andi	r24, 0xFB	; 251
    29e6:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    29e8:	80 81       	ld	r24, Z
    29ea:	82 60       	ori	r24, 0x02	; 2
    29ec:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    29ee:	80 81       	ld	r24, Z
    29f0:	8e 7f       	andi	r24, 0xFE	; 254
    29f2:	80 83       	st	Z, r24
			transistor_vals[6] = ADC;			
    29f4:	80 91 78 00 	lds	r24, 0x0078
    29f8:	90 91 79 00 	lds	r25, 0x0079
    29fc:	90 93 da 01 	sts	0x01DA, r25
    2a00:	80 93 d9 01 	sts	0x01D9, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2a04:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[6] = ADC;			
			break;
    2a06:	5f c0       	rjmp	.+190    	; 0x2ac6 <adc_switch+0x320>

		case 9:
			state = 10;
    2a08:	8a e0       	ldi	r24, 0x0A	; 10
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	90 93 e2 01 	sts	0x01E2, r25
    2a10:	80 93 e1 01 	sts	0x01E1, r24
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
    2a14:	eb e7       	ldi	r30, 0x7B	; 123
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	80 62       	ori	r24, 0x20	; 32
    2a1c:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 2
    2a1e:	ec e7       	ldi	r30, 0x7C	; 124
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	8b 7f       	andi	r24, 0xFB	; 251
    2a26:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2a28:	80 81       	ld	r24, Z
    2a2a:	82 60       	ori	r24, 0x02	; 2
    2a2c:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2a2e:	80 81       	ld	r24, Z
    2a30:	81 60       	ori	r24, 0x01	; 1
    2a32:	80 83       	st	Z, r24
			transistor_vals[3] = ADC;			
    2a34:	80 91 78 00 	lds	r24, 0x0078
    2a38:	90 91 79 00 	lds	r25, 0x0079
    2a3c:	90 93 d4 01 	sts	0x01D4, r25
    2a40:	80 93 d3 01 	sts	0x01D3, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2a44:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
			clear(ADMUX,MUX2); // Transistor 2
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[3] = ADC;			
			break;
    2a46:	3f c0       	rjmp	.+126    	; 0x2ac6 <adc_switch+0x320>

		case 10:
			state = 11;
    2a48:	8b e0       	ldi	r24, 0x0B	; 11
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	90 93 e2 01 	sts	0x01E2, r25
    2a50:	80 93 e1 01 	sts	0x01E1, r24
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
    2a54:	eb e7       	ldi	r30, 0x7B	; 123
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	80 62       	ori	r24, 0x20	; 32
    2a5c:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 3
    2a5e:	ec e7       	ldi	r30, 0x7C	; 124
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	84 60       	ori	r24, 0x04	; 4
    2a66:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2a68:	80 81       	ld	r24, Z
    2a6a:	8d 7f       	andi	r24, 0xFD	; 253
    2a6c:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2a6e:	80 81       	ld	r24, Z
    2a70:	8e 7f       	andi	r24, 0xFE	; 254
    2a72:	80 83       	st	Z, r24
			transistor_vals[1] = ADC;			
    2a74:	80 91 78 00 	lds	r24, 0x0078
    2a78:	90 91 79 00 	lds	r25, 0x0079
    2a7c:	90 93 d0 01 	sts	0x01D0, r25
    2a80:	80 93 cf 01 	sts	0x01CF, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2a84:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
			set(ADMUX,MUX2); // Transistor 3
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[1] = ADC;			
			break;
    2a86:	1f c0       	rjmp	.+62     	; 0x2ac6 <adc_switch+0x320>

		case 11:
			state = 0;
    2a88:	10 92 e2 01 	sts	0x01E2, r1
    2a8c:	10 92 e1 01 	sts	0x01E1, r1
			set(ADCSRB,MUX5); // Select ADC13 at pin B6
    2a90:	eb e7       	ldi	r30, 0x7B	; 123
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	80 62       	ori	r24, 0x20	; 32
    2a98:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 4
    2a9a:	ec e7       	ldi	r30, 0x7C	; 124
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	84 60       	ori	r24, 0x04	; 4
    2aa2:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2aa4:	80 81       	ld	r24, Z
    2aa6:	8d 7f       	andi	r24, 0xFD	; 253
    2aa8:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2aaa:	80 81       	ld	r24, Z
    2aac:	81 60       	ori	r24, 0x01	; 1
    2aae:	80 83       	st	Z, r24
			transistor_3 = ADC;			
    2ab0:	80 91 78 00 	lds	r24, 0x0078
    2ab4:	90 91 79 00 	lds	r25, 0x0079
    2ab8:	90 93 cc 01 	sts	0x01CC, r25
    2abc:	80 93 cb 01 	sts	0x01CB, r24
			return_val = 1;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
			// m_usb_tx_string("  IR14: ");
			// m_usb_tx_int(transistor_vals[8]);
			// m_usb_tx_string("  IR15: ");
			// m_usb_tx_int(transistor_vals[9]);

			break;
    2ac2:	01 c0       	rjmp	.+2      	; 0x2ac6 <adc_switch+0x320>
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
			// m_usb_tx_int(transistor_vals[9]);

			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
    2ac6:	ea e7       	ldi	r30, 0x7A	; 122
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	90 81       	ld	r25, Z
    2acc:	90 68       	ori	r25, 0x80	; 128
    2ace:	90 83       	st	Z, r25
	set(ADCSRA,ADSC); // Begin new conversion
    2ad0:	90 81       	ld	r25, Z
    2ad2:	90 64       	ori	r25, 0x40	; 64
    2ad4:	90 83       	st	Z, r25

	return return_val;
}
    2ad6:	08 95       	ret

00002ad8 <__subsf3>:
    2ad8:	50 58       	subi	r21, 0x80	; 128

00002ada <__addsf3>:
    2ada:	bb 27       	eor	r27, r27
    2adc:	aa 27       	eor	r26, r26
    2ade:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__addsf3x>
    2ae2:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__fp_round>
    2ae6:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__fp_pscA>
    2aea:	38 f0       	brcs	.+14     	; 0x2afa <__addsf3+0x20>
    2aec:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__fp_pscB>
    2af0:	20 f0       	brcs	.+8      	; 0x2afa <__addsf3+0x20>
    2af2:	39 f4       	brne	.+14     	; 0x2b02 <__addsf3+0x28>
    2af4:	9f 3f       	cpi	r25, 0xFF	; 255
    2af6:	19 f4       	brne	.+6      	; 0x2afe <__addsf3+0x24>
    2af8:	26 f4       	brtc	.+8      	; 0x2b02 <__addsf3+0x28>
    2afa:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__fp_nan>
    2afe:	0e f4       	brtc	.+2      	; 0x2b02 <__addsf3+0x28>
    2b00:	e0 95       	com	r30
    2b02:	e7 fb       	bst	r30, 7
    2b04:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__fp_inf>

00002b08 <__addsf3x>:
    2b08:	e9 2f       	mov	r30, r25
    2b0a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__fp_split3>
    2b0e:	58 f3       	brcs	.-42     	; 0x2ae6 <__addsf3+0xc>
    2b10:	ba 17       	cp	r27, r26
    2b12:	62 07       	cpc	r22, r18
    2b14:	73 07       	cpc	r23, r19
    2b16:	84 07       	cpc	r24, r20
    2b18:	95 07       	cpc	r25, r21
    2b1a:	20 f0       	brcs	.+8      	; 0x2b24 <__addsf3x+0x1c>
    2b1c:	79 f4       	brne	.+30     	; 0x2b3c <__addsf3x+0x34>
    2b1e:	a6 f5       	brtc	.+104    	; 0x2b88 <__addsf3x+0x80>
    2b20:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__fp_zero>
    2b24:	0e f4       	brtc	.+2      	; 0x2b28 <__addsf3x+0x20>
    2b26:	e0 95       	com	r30
    2b28:	0b 2e       	mov	r0, r27
    2b2a:	ba 2f       	mov	r27, r26
    2b2c:	a0 2d       	mov	r26, r0
    2b2e:	0b 01       	movw	r0, r22
    2b30:	b9 01       	movw	r22, r18
    2b32:	90 01       	movw	r18, r0
    2b34:	0c 01       	movw	r0, r24
    2b36:	ca 01       	movw	r24, r20
    2b38:	a0 01       	movw	r20, r0
    2b3a:	11 24       	eor	r1, r1
    2b3c:	ff 27       	eor	r31, r31
    2b3e:	59 1b       	sub	r21, r25
    2b40:	99 f0       	breq	.+38     	; 0x2b68 <__addsf3x+0x60>
    2b42:	59 3f       	cpi	r21, 0xF9	; 249
    2b44:	50 f4       	brcc	.+20     	; 0x2b5a <__addsf3x+0x52>
    2b46:	50 3e       	cpi	r21, 0xE0	; 224
    2b48:	68 f1       	brcs	.+90     	; 0x2ba4 <__addsf3x+0x9c>
    2b4a:	1a 16       	cp	r1, r26
    2b4c:	f0 40       	sbci	r31, 0x00	; 0
    2b4e:	a2 2f       	mov	r26, r18
    2b50:	23 2f       	mov	r18, r19
    2b52:	34 2f       	mov	r19, r20
    2b54:	44 27       	eor	r20, r20
    2b56:	58 5f       	subi	r21, 0xF8	; 248
    2b58:	f3 cf       	rjmp	.-26     	; 0x2b40 <__addsf3x+0x38>
    2b5a:	46 95       	lsr	r20
    2b5c:	37 95       	ror	r19
    2b5e:	27 95       	ror	r18
    2b60:	a7 95       	ror	r26
    2b62:	f0 40       	sbci	r31, 0x00	; 0
    2b64:	53 95       	inc	r21
    2b66:	c9 f7       	brne	.-14     	; 0x2b5a <__addsf3x+0x52>
    2b68:	7e f4       	brtc	.+30     	; 0x2b88 <__addsf3x+0x80>
    2b6a:	1f 16       	cp	r1, r31
    2b6c:	ba 0b       	sbc	r27, r26
    2b6e:	62 0b       	sbc	r22, r18
    2b70:	73 0b       	sbc	r23, r19
    2b72:	84 0b       	sbc	r24, r20
    2b74:	ba f0       	brmi	.+46     	; 0x2ba4 <__addsf3x+0x9c>
    2b76:	91 50       	subi	r25, 0x01	; 1
    2b78:	a1 f0       	breq	.+40     	; 0x2ba2 <__addsf3x+0x9a>
    2b7a:	ff 0f       	add	r31, r31
    2b7c:	bb 1f       	adc	r27, r27
    2b7e:	66 1f       	adc	r22, r22
    2b80:	77 1f       	adc	r23, r23
    2b82:	88 1f       	adc	r24, r24
    2b84:	c2 f7       	brpl	.-16     	; 0x2b76 <__addsf3x+0x6e>
    2b86:	0e c0       	rjmp	.+28     	; 0x2ba4 <__addsf3x+0x9c>
    2b88:	ba 0f       	add	r27, r26
    2b8a:	62 1f       	adc	r22, r18
    2b8c:	73 1f       	adc	r23, r19
    2b8e:	84 1f       	adc	r24, r20
    2b90:	48 f4       	brcc	.+18     	; 0x2ba4 <__addsf3x+0x9c>
    2b92:	87 95       	ror	r24
    2b94:	77 95       	ror	r23
    2b96:	67 95       	ror	r22
    2b98:	b7 95       	ror	r27
    2b9a:	f7 95       	ror	r31
    2b9c:	9e 3f       	cpi	r25, 0xFE	; 254
    2b9e:	08 f0       	brcs	.+2      	; 0x2ba2 <__addsf3x+0x9a>
    2ba0:	b0 cf       	rjmp	.-160    	; 0x2b02 <__addsf3+0x28>
    2ba2:	93 95       	inc	r25
    2ba4:	88 0f       	add	r24, r24
    2ba6:	08 f0       	brcs	.+2      	; 0x2baa <__addsf3x+0xa2>
    2ba8:	99 27       	eor	r25, r25
    2baa:	ee 0f       	add	r30, r30
    2bac:	97 95       	ror	r25
    2bae:	87 95       	ror	r24
    2bb0:	08 95       	ret
    2bb2:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__fp_pscA>
    2bb6:	60 f0       	brcs	.+24     	; 0x2bd0 <__addsf3x+0xc8>
    2bb8:	80 e8       	ldi	r24, 0x80	; 128
    2bba:	91 e0       	ldi	r25, 0x01	; 1
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <__addsf3x+0xb8>
    2bbe:	9e ef       	ldi	r25, 0xFE	; 254
    2bc0:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__fp_pscB>
    2bc4:	28 f0       	brcs	.+10     	; 0x2bd0 <__addsf3x+0xc8>
    2bc6:	40 e8       	ldi	r20, 0x80	; 128
    2bc8:	51 e0       	ldi	r21, 0x01	; 1
    2bca:	71 f4       	brne	.+28     	; 0x2be8 <atan2+0x10>
    2bcc:	5e ef       	ldi	r21, 0xFE	; 254
    2bce:	0c c0       	rjmp	.+24     	; 0x2be8 <atan2+0x10>
    2bd0:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__fp_nan>
    2bd4:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__fp_zero>

00002bd8 <atan2>:
    2bd8:	e9 2f       	mov	r30, r25
    2bda:	e0 78       	andi	r30, 0x80	; 128
    2bdc:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__fp_split3>
    2be0:	40 f3       	brcs	.-48     	; 0x2bb2 <__addsf3x+0xaa>
    2be2:	09 2e       	mov	r0, r25
    2be4:	05 2a       	or	r0, r21
    2be6:	b1 f3       	breq	.-20     	; 0x2bd4 <__addsf3x+0xcc>
    2be8:	26 17       	cp	r18, r22
    2bea:	37 07       	cpc	r19, r23
    2bec:	48 07       	cpc	r20, r24
    2bee:	59 07       	cpc	r21, r25
    2bf0:	38 f0       	brcs	.+14     	; 0x2c00 <atan2+0x28>
    2bf2:	0e 2e       	mov	r0, r30
    2bf4:	07 f8       	bld	r0, 7
    2bf6:	e0 25       	eor	r30, r0
    2bf8:	69 f0       	breq	.+26     	; 0x2c14 <atan2+0x3c>
    2bfa:	e0 25       	eor	r30, r0
    2bfc:	e0 64       	ori	r30, 0x40	; 64
    2bfe:	0a c0       	rjmp	.+20     	; 0x2c14 <atan2+0x3c>
    2c00:	ef 63       	ori	r30, 0x3F	; 63
    2c02:	07 f8       	bld	r0, 7
    2c04:	00 94       	com	r0
    2c06:	07 fa       	bst	r0, 7
    2c08:	db 01       	movw	r26, r22
    2c0a:	b9 01       	movw	r22, r18
    2c0c:	9d 01       	movw	r18, r26
    2c0e:	dc 01       	movw	r26, r24
    2c10:	ca 01       	movw	r24, r20
    2c12:	ad 01       	movw	r20, r26
    2c14:	ef 93       	push	r30
    2c16:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__divsf3_pse>
    2c1a:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <__fp_round>
    2c1e:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <atan>
    2c22:	5f 91       	pop	r21
    2c24:	55 23       	and	r21, r21
    2c26:	39 f0       	breq	.+14     	; 0x2c36 <atan2+0x5e>
    2c28:	2b ed       	ldi	r18, 0xDB	; 219
    2c2a:	3f e0       	ldi	r19, 0x0F	; 15
    2c2c:	49 e4       	ldi	r20, 0x49	; 73
    2c2e:	50 fd       	sbrc	r21, 0
    2c30:	49 ec       	ldi	r20, 0xC9	; 201
    2c32:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__addsf3>
    2c36:	08 95       	ret

00002c38 <atan>:
    2c38:	df 93       	push	r29
    2c3a:	dd 27       	eor	r29, r29
    2c3c:	b9 2f       	mov	r27, r25
    2c3e:	bf 77       	andi	r27, 0x7F	; 127
    2c40:	40 e8       	ldi	r20, 0x80	; 128
    2c42:	5f e3       	ldi	r21, 0x3F	; 63
    2c44:	16 16       	cp	r1, r22
    2c46:	17 06       	cpc	r1, r23
    2c48:	48 07       	cpc	r20, r24
    2c4a:	5b 07       	cpc	r21, r27
    2c4c:	18 f4       	brcc	.+6      	; 0x2c54 <atan+0x1c>
    2c4e:	d9 2f       	mov	r29, r25
    2c50:	0e 94 1a 18 	call	0x3034	; 0x3034 <inverse>
    2c54:	9f 93       	push	r25
    2c56:	8f 93       	push	r24
    2c58:	7f 93       	push	r23
    2c5a:	6f 93       	push	r22
    2c5c:	0e 94 dd 18 	call	0x31ba	; 0x31ba <square>
    2c60:	e4 ed       	ldi	r30, 0xD4	; 212
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	0e 94 67 17 	call	0x2ece	; 0x2ece <__fp_powser>
    2c68:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <__fp_round>
    2c6c:	2f 91       	pop	r18
    2c6e:	3f 91       	pop	r19
    2c70:	4f 91       	pop	r20
    2c72:	5f 91       	pop	r21
    2c74:	0e 94 35 18 	call	0x306a	; 0x306a <__mulsf3x>
    2c78:	dd 23       	and	r29, r29
    2c7a:	51 f0       	breq	.+20     	; 0x2c90 <atan+0x58>
    2c7c:	90 58       	subi	r25, 0x80	; 128
    2c7e:	a2 ea       	ldi	r26, 0xA2	; 162
    2c80:	2a ed       	ldi	r18, 0xDA	; 218
    2c82:	3f e0       	ldi	r19, 0x0F	; 15
    2c84:	49 ec       	ldi	r20, 0xC9	; 201
    2c86:	5f e3       	ldi	r21, 0x3F	; 63
    2c88:	d0 78       	andi	r29, 0x80	; 128
    2c8a:	5d 27       	eor	r21, r29
    2c8c:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__addsf3x>
    2c90:	df 91       	pop	r29
    2c92:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__fp_round>

00002c96 <__cmpsf2>:
    2c96:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__fp_cmp>
    2c9a:	08 f4       	brcc	.+2      	; 0x2c9e <__cmpsf2+0x8>
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	08 95       	ret

00002ca0 <cos>:
    2ca0:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__fp_rempio2>
    2ca4:	e3 95       	inc	r30
    2ca6:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__fp_sinus>

00002caa <__divsf3>:
    2caa:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__divsf3x>
    2cae:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__fp_round>
    2cb2:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__fp_pscB>
    2cb6:	58 f0       	brcs	.+22     	; 0x2cce <__divsf3+0x24>
    2cb8:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__fp_pscA>
    2cbc:	40 f0       	brcs	.+16     	; 0x2cce <__divsf3+0x24>
    2cbe:	29 f4       	brne	.+10     	; 0x2cca <__divsf3+0x20>
    2cc0:	5f 3f       	cpi	r21, 0xFF	; 255
    2cc2:	29 f0       	breq	.+10     	; 0x2cce <__divsf3+0x24>
    2cc4:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__fp_inf>
    2cc8:	51 11       	cpse	r21, r1
    2cca:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__fp_szero>
    2cce:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__fp_nan>

00002cd2 <__divsf3x>:
    2cd2:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__fp_split3>
    2cd6:	68 f3       	brcs	.-38     	; 0x2cb2 <__divsf3+0x8>

00002cd8 <__divsf3_pse>:
    2cd8:	99 23       	and	r25, r25
    2cda:	b1 f3       	breq	.-20     	; 0x2cc8 <__divsf3+0x1e>
    2cdc:	55 23       	and	r21, r21
    2cde:	91 f3       	breq	.-28     	; 0x2cc4 <__divsf3+0x1a>
    2ce0:	95 1b       	sub	r25, r21
    2ce2:	55 0b       	sbc	r21, r21
    2ce4:	bb 27       	eor	r27, r27
    2ce6:	aa 27       	eor	r26, r26
    2ce8:	62 17       	cp	r22, r18
    2cea:	73 07       	cpc	r23, r19
    2cec:	84 07       	cpc	r24, r20
    2cee:	38 f0       	brcs	.+14     	; 0x2cfe <__divsf3_pse+0x26>
    2cf0:	9f 5f       	subi	r25, 0xFF	; 255
    2cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    2cf4:	22 0f       	add	r18, r18
    2cf6:	33 1f       	adc	r19, r19
    2cf8:	44 1f       	adc	r20, r20
    2cfa:	aa 1f       	adc	r26, r26
    2cfc:	a9 f3       	breq	.-22     	; 0x2ce8 <__divsf3_pse+0x10>
    2cfe:	35 d0       	rcall	.+106    	; 0x2d6a <__divsf3_pse+0x92>
    2d00:	0e 2e       	mov	r0, r30
    2d02:	3a f0       	brmi	.+14     	; 0x2d12 <__divsf3_pse+0x3a>
    2d04:	e0 e8       	ldi	r30, 0x80	; 128
    2d06:	32 d0       	rcall	.+100    	; 0x2d6c <__divsf3_pse+0x94>
    2d08:	91 50       	subi	r25, 0x01	; 1
    2d0a:	50 40       	sbci	r21, 0x00	; 0
    2d0c:	e6 95       	lsr	r30
    2d0e:	00 1c       	adc	r0, r0
    2d10:	ca f7       	brpl	.-14     	; 0x2d04 <__divsf3_pse+0x2c>
    2d12:	2b d0       	rcall	.+86     	; 0x2d6a <__divsf3_pse+0x92>
    2d14:	fe 2f       	mov	r31, r30
    2d16:	29 d0       	rcall	.+82     	; 0x2d6a <__divsf3_pse+0x92>
    2d18:	66 0f       	add	r22, r22
    2d1a:	77 1f       	adc	r23, r23
    2d1c:	88 1f       	adc	r24, r24
    2d1e:	bb 1f       	adc	r27, r27
    2d20:	26 17       	cp	r18, r22
    2d22:	37 07       	cpc	r19, r23
    2d24:	48 07       	cpc	r20, r24
    2d26:	ab 07       	cpc	r26, r27
    2d28:	b0 e8       	ldi	r27, 0x80	; 128
    2d2a:	09 f0       	breq	.+2      	; 0x2d2e <__divsf3_pse+0x56>
    2d2c:	bb 0b       	sbc	r27, r27
    2d2e:	80 2d       	mov	r24, r0
    2d30:	bf 01       	movw	r22, r30
    2d32:	ff 27       	eor	r31, r31
    2d34:	93 58       	subi	r25, 0x83	; 131
    2d36:	5f 4f       	sbci	r21, 0xFF	; 255
    2d38:	3a f0       	brmi	.+14     	; 0x2d48 <__divsf3_pse+0x70>
    2d3a:	9e 3f       	cpi	r25, 0xFE	; 254
    2d3c:	51 05       	cpc	r21, r1
    2d3e:	78 f0       	brcs	.+30     	; 0x2d5e <__divsf3_pse+0x86>
    2d40:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__fp_inf>
    2d44:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__fp_szero>
    2d48:	5f 3f       	cpi	r21, 0xFF	; 255
    2d4a:	e4 f3       	brlt	.-8      	; 0x2d44 <__divsf3_pse+0x6c>
    2d4c:	98 3e       	cpi	r25, 0xE8	; 232
    2d4e:	d4 f3       	brlt	.-12     	; 0x2d44 <__divsf3_pse+0x6c>
    2d50:	86 95       	lsr	r24
    2d52:	77 95       	ror	r23
    2d54:	67 95       	ror	r22
    2d56:	b7 95       	ror	r27
    2d58:	f7 95       	ror	r31
    2d5a:	9f 5f       	subi	r25, 0xFF	; 255
    2d5c:	c9 f7       	brne	.-14     	; 0x2d50 <__divsf3_pse+0x78>
    2d5e:	88 0f       	add	r24, r24
    2d60:	91 1d       	adc	r25, r1
    2d62:	96 95       	lsr	r25
    2d64:	87 95       	ror	r24
    2d66:	97 f9       	bld	r25, 7
    2d68:	08 95       	ret
    2d6a:	e1 e0       	ldi	r30, 0x01	; 1
    2d6c:	66 0f       	add	r22, r22
    2d6e:	77 1f       	adc	r23, r23
    2d70:	88 1f       	adc	r24, r24
    2d72:	bb 1f       	adc	r27, r27
    2d74:	62 17       	cp	r22, r18
    2d76:	73 07       	cpc	r23, r19
    2d78:	84 07       	cpc	r24, r20
    2d7a:	ba 07       	cpc	r27, r26
    2d7c:	20 f0       	brcs	.+8      	; 0x2d86 <__divsf3_pse+0xae>
    2d7e:	62 1b       	sub	r22, r18
    2d80:	73 0b       	sbc	r23, r19
    2d82:	84 0b       	sbc	r24, r20
    2d84:	ba 0b       	sbc	r27, r26
    2d86:	ee 1f       	adc	r30, r30
    2d88:	88 f7       	brcc	.-30     	; 0x2d6c <__divsf3_pse+0x94>
    2d8a:	e0 95       	com	r30
    2d8c:	08 95       	ret

00002d8e <__fixsfsi>:
    2d8e:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__fixunssfsi>
    2d92:	68 94       	set
    2d94:	b1 11       	cpse	r27, r1
    2d96:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__fp_szero>
    2d9a:	08 95       	ret

00002d9c <__fixunssfsi>:
    2d9c:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__fp_splitA>
    2da0:	88 f0       	brcs	.+34     	; 0x2dc4 <__fixunssfsi+0x28>
    2da2:	9f 57       	subi	r25, 0x7F	; 127
    2da4:	98 f0       	brcs	.+38     	; 0x2dcc <__fixunssfsi+0x30>
    2da6:	b9 2f       	mov	r27, r25
    2da8:	99 27       	eor	r25, r25
    2daa:	b7 51       	subi	r27, 0x17	; 23
    2dac:	b0 f0       	brcs	.+44     	; 0x2dda <__fixunssfsi+0x3e>
    2dae:	e1 f0       	breq	.+56     	; 0x2de8 <__fixunssfsi+0x4c>
    2db0:	66 0f       	add	r22, r22
    2db2:	77 1f       	adc	r23, r23
    2db4:	88 1f       	adc	r24, r24
    2db6:	99 1f       	adc	r25, r25
    2db8:	1a f0       	brmi	.+6      	; 0x2dc0 <__fixunssfsi+0x24>
    2dba:	ba 95       	dec	r27
    2dbc:	c9 f7       	brne	.-14     	; 0x2db0 <__fixunssfsi+0x14>
    2dbe:	14 c0       	rjmp	.+40     	; 0x2de8 <__fixunssfsi+0x4c>
    2dc0:	b1 30       	cpi	r27, 0x01	; 1
    2dc2:	91 f0       	breq	.+36     	; 0x2de8 <__fixunssfsi+0x4c>
    2dc4:	0e 94 0e 18 	call	0x301c	; 0x301c <__fp_zero>
    2dc8:	b1 e0       	ldi	r27, 0x01	; 1
    2dca:	08 95       	ret
    2dcc:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__fp_zero>
    2dd0:	67 2f       	mov	r22, r23
    2dd2:	78 2f       	mov	r23, r24
    2dd4:	88 27       	eor	r24, r24
    2dd6:	b8 5f       	subi	r27, 0xF8	; 248
    2dd8:	39 f0       	breq	.+14     	; 0x2de8 <__fixunssfsi+0x4c>
    2dda:	b9 3f       	cpi	r27, 0xF9	; 249
    2ddc:	cc f3       	brlt	.-14     	; 0x2dd0 <__fixunssfsi+0x34>
    2dde:	86 95       	lsr	r24
    2de0:	77 95       	ror	r23
    2de2:	67 95       	ror	r22
    2de4:	b3 95       	inc	r27
    2de6:	d9 f7       	brne	.-10     	; 0x2dde <__fixunssfsi+0x42>
    2de8:	3e f4       	brtc	.+14     	; 0x2df8 <__fixunssfsi+0x5c>
    2dea:	90 95       	com	r25
    2dec:	80 95       	com	r24
    2dee:	70 95       	com	r23
    2df0:	61 95       	neg	r22
    2df2:	7f 4f       	sbci	r23, 0xFF	; 255
    2df4:	8f 4f       	sbci	r24, 0xFF	; 255
    2df6:	9f 4f       	sbci	r25, 0xFF	; 255
    2df8:	08 95       	ret

00002dfa <__floatunsisf>:
    2dfa:	e8 94       	clt
    2dfc:	09 c0       	rjmp	.+18     	; 0x2e10 <__floatsisf+0x12>

00002dfe <__floatsisf>:
    2dfe:	97 fb       	bst	r25, 7
    2e00:	3e f4       	brtc	.+14     	; 0x2e10 <__floatsisf+0x12>
    2e02:	90 95       	com	r25
    2e04:	80 95       	com	r24
    2e06:	70 95       	com	r23
    2e08:	61 95       	neg	r22
    2e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e10:	99 23       	and	r25, r25
    2e12:	a9 f0       	breq	.+42     	; 0x2e3e <__floatsisf+0x40>
    2e14:	f9 2f       	mov	r31, r25
    2e16:	96 e9       	ldi	r25, 0x96	; 150
    2e18:	bb 27       	eor	r27, r27
    2e1a:	93 95       	inc	r25
    2e1c:	f6 95       	lsr	r31
    2e1e:	87 95       	ror	r24
    2e20:	77 95       	ror	r23
    2e22:	67 95       	ror	r22
    2e24:	b7 95       	ror	r27
    2e26:	f1 11       	cpse	r31, r1
    2e28:	f8 cf       	rjmp	.-16     	; 0x2e1a <__floatsisf+0x1c>
    2e2a:	fa f4       	brpl	.+62     	; 0x2e6a <__floatsisf+0x6c>
    2e2c:	bb 0f       	add	r27, r27
    2e2e:	11 f4       	brne	.+4      	; 0x2e34 <__floatsisf+0x36>
    2e30:	60 ff       	sbrs	r22, 0
    2e32:	1b c0       	rjmp	.+54     	; 0x2e6a <__floatsisf+0x6c>
    2e34:	6f 5f       	subi	r22, 0xFF	; 255
    2e36:	7f 4f       	sbci	r23, 0xFF	; 255
    2e38:	8f 4f       	sbci	r24, 0xFF	; 255
    2e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3c:	16 c0       	rjmp	.+44     	; 0x2e6a <__floatsisf+0x6c>
    2e3e:	88 23       	and	r24, r24
    2e40:	11 f0       	breq	.+4      	; 0x2e46 <__floatsisf+0x48>
    2e42:	96 e9       	ldi	r25, 0x96	; 150
    2e44:	11 c0       	rjmp	.+34     	; 0x2e68 <__floatsisf+0x6a>
    2e46:	77 23       	and	r23, r23
    2e48:	21 f0       	breq	.+8      	; 0x2e52 <__floatsisf+0x54>
    2e4a:	9e e8       	ldi	r25, 0x8E	; 142
    2e4c:	87 2f       	mov	r24, r23
    2e4e:	76 2f       	mov	r23, r22
    2e50:	05 c0       	rjmp	.+10     	; 0x2e5c <__floatsisf+0x5e>
    2e52:	66 23       	and	r22, r22
    2e54:	71 f0       	breq	.+28     	; 0x2e72 <__floatsisf+0x74>
    2e56:	96 e8       	ldi	r25, 0x86	; 134
    2e58:	86 2f       	mov	r24, r22
    2e5a:	70 e0       	ldi	r23, 0x00	; 0
    2e5c:	60 e0       	ldi	r22, 0x00	; 0
    2e5e:	2a f0       	brmi	.+10     	; 0x2e6a <__floatsisf+0x6c>
    2e60:	9a 95       	dec	r25
    2e62:	66 0f       	add	r22, r22
    2e64:	77 1f       	adc	r23, r23
    2e66:	88 1f       	adc	r24, r24
    2e68:	da f7       	brpl	.-10     	; 0x2e60 <__floatsisf+0x62>
    2e6a:	88 0f       	add	r24, r24
    2e6c:	96 95       	lsr	r25
    2e6e:	87 95       	ror	r24
    2e70:	97 f9       	bld	r25, 7
    2e72:	08 95       	ret

00002e74 <__fp_cmp>:
    2e74:	99 0f       	add	r25, r25
    2e76:	00 08       	sbc	r0, r0
    2e78:	55 0f       	add	r21, r21
    2e7a:	aa 0b       	sbc	r26, r26
    2e7c:	e0 e8       	ldi	r30, 0x80	; 128
    2e7e:	fe ef       	ldi	r31, 0xFE	; 254
    2e80:	16 16       	cp	r1, r22
    2e82:	17 06       	cpc	r1, r23
    2e84:	e8 07       	cpc	r30, r24
    2e86:	f9 07       	cpc	r31, r25
    2e88:	c0 f0       	brcs	.+48     	; 0x2eba <__fp_cmp+0x46>
    2e8a:	12 16       	cp	r1, r18
    2e8c:	13 06       	cpc	r1, r19
    2e8e:	e4 07       	cpc	r30, r20
    2e90:	f5 07       	cpc	r31, r21
    2e92:	98 f0       	brcs	.+38     	; 0x2eba <__fp_cmp+0x46>
    2e94:	62 1b       	sub	r22, r18
    2e96:	73 0b       	sbc	r23, r19
    2e98:	84 0b       	sbc	r24, r20
    2e9a:	95 0b       	sbc	r25, r21
    2e9c:	39 f4       	brne	.+14     	; 0x2eac <__fp_cmp+0x38>
    2e9e:	0a 26       	eor	r0, r26
    2ea0:	61 f0       	breq	.+24     	; 0x2eba <__fp_cmp+0x46>
    2ea2:	23 2b       	or	r18, r19
    2ea4:	24 2b       	or	r18, r20
    2ea6:	25 2b       	or	r18, r21
    2ea8:	21 f4       	brne	.+8      	; 0x2eb2 <__fp_cmp+0x3e>
    2eaa:	08 95       	ret
    2eac:	0a 26       	eor	r0, r26
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <__fp_cmp+0x3e>
    2eb0:	a1 40       	sbci	r26, 0x01	; 1
    2eb2:	a6 95       	lsr	r26
    2eb4:	8f ef       	ldi	r24, 0xFF	; 255
    2eb6:	81 1d       	adc	r24, r1
    2eb8:	81 1d       	adc	r24, r1
    2eba:	08 95       	ret

00002ebc <__fp_inf>:
    2ebc:	97 f9       	bld	r25, 7
    2ebe:	9f 67       	ori	r25, 0x7F	; 127
    2ec0:	80 e8       	ldi	r24, 0x80	; 128
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	08 95       	ret

00002ec8 <__fp_nan>:
    2ec8:	9f ef       	ldi	r25, 0xFF	; 255
    2eca:	80 ec       	ldi	r24, 0xC0	; 192
    2ecc:	08 95       	ret

00002ece <__fp_powser>:
    2ece:	df 93       	push	r29
    2ed0:	cf 93       	push	r28
    2ed2:	1f 93       	push	r17
    2ed4:	0f 93       	push	r16
    2ed6:	ff 92       	push	r15
    2ed8:	ef 92       	push	r14
    2eda:	df 92       	push	r13
    2edc:	7b 01       	movw	r14, r22
    2ede:	8c 01       	movw	r16, r24
    2ee0:	68 94       	set
    2ee2:	06 c0       	rjmp	.+12     	; 0x2ef0 <__fp_powser+0x22>
    2ee4:	da 2e       	mov	r13, r26
    2ee6:	ef 01       	movw	r28, r30
    2ee8:	0e 94 35 18 	call	0x306a	; 0x306a <__mulsf3x>
    2eec:	fe 01       	movw	r30, r28
    2eee:	e8 94       	clt
    2ef0:	a5 91       	lpm	r26, Z+
    2ef2:	25 91       	lpm	r18, Z+
    2ef4:	35 91       	lpm	r19, Z+
    2ef6:	45 91       	lpm	r20, Z+
    2ef8:	55 91       	lpm	r21, Z+
    2efa:	a6 f3       	brts	.-24     	; 0x2ee4 <__fp_powser+0x16>
    2efc:	ef 01       	movw	r28, r30
    2efe:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__addsf3x>
    2f02:	fe 01       	movw	r30, r28
    2f04:	97 01       	movw	r18, r14
    2f06:	a8 01       	movw	r20, r16
    2f08:	da 94       	dec	r13
    2f0a:	69 f7       	brne	.-38     	; 0x2ee6 <__fp_powser+0x18>
    2f0c:	df 90       	pop	r13
    2f0e:	ef 90       	pop	r14
    2f10:	ff 90       	pop	r15
    2f12:	0f 91       	pop	r16
    2f14:	1f 91       	pop	r17
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	08 95       	ret

00002f1c <__fp_pscA>:
    2f1c:	00 24       	eor	r0, r0
    2f1e:	0a 94       	dec	r0
    2f20:	16 16       	cp	r1, r22
    2f22:	17 06       	cpc	r1, r23
    2f24:	18 06       	cpc	r1, r24
    2f26:	09 06       	cpc	r0, r25
    2f28:	08 95       	ret

00002f2a <__fp_pscB>:
    2f2a:	00 24       	eor	r0, r0
    2f2c:	0a 94       	dec	r0
    2f2e:	12 16       	cp	r1, r18
    2f30:	13 06       	cpc	r1, r19
    2f32:	14 06       	cpc	r1, r20
    2f34:	05 06       	cpc	r0, r21
    2f36:	08 95       	ret
    2f38:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__fp_nan>

00002f3c <__fp_rempio2>:
    2f3c:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__fp_splitA>
    2f40:	d8 f3       	brcs	.-10     	; 0x2f38 <__fp_pscB+0xe>
    2f42:	e8 94       	clt
    2f44:	e0 e0       	ldi	r30, 0x00	; 0
    2f46:	bb 27       	eor	r27, r27
    2f48:	9f 57       	subi	r25, 0x7F	; 127
    2f4a:	f0 f0       	brcs	.+60     	; 0x2f88 <__fp_rempio2+0x4c>
    2f4c:	2a ed       	ldi	r18, 0xDA	; 218
    2f4e:	3f e0       	ldi	r19, 0x0F	; 15
    2f50:	49 ec       	ldi	r20, 0xC9	; 201
    2f52:	06 c0       	rjmp	.+12     	; 0x2f60 <__fp_rempio2+0x24>
    2f54:	ee 0f       	add	r30, r30
    2f56:	bb 0f       	add	r27, r27
    2f58:	66 1f       	adc	r22, r22
    2f5a:	77 1f       	adc	r23, r23
    2f5c:	88 1f       	adc	r24, r24
    2f5e:	28 f0       	brcs	.+10     	; 0x2f6a <__fp_rempio2+0x2e>
    2f60:	b2 3a       	cpi	r27, 0xA2	; 162
    2f62:	62 07       	cpc	r22, r18
    2f64:	73 07       	cpc	r23, r19
    2f66:	84 07       	cpc	r24, r20
    2f68:	28 f0       	brcs	.+10     	; 0x2f74 <__fp_rempio2+0x38>
    2f6a:	b2 5a       	subi	r27, 0xA2	; 162
    2f6c:	62 0b       	sbc	r22, r18
    2f6e:	73 0b       	sbc	r23, r19
    2f70:	84 0b       	sbc	r24, r20
    2f72:	e3 95       	inc	r30
    2f74:	9a 95       	dec	r25
    2f76:	72 f7       	brpl	.-36     	; 0x2f54 <__fp_rempio2+0x18>
    2f78:	80 38       	cpi	r24, 0x80	; 128
    2f7a:	30 f4       	brcc	.+12     	; 0x2f88 <__fp_rempio2+0x4c>
    2f7c:	9a 95       	dec	r25
    2f7e:	bb 0f       	add	r27, r27
    2f80:	66 1f       	adc	r22, r22
    2f82:	77 1f       	adc	r23, r23
    2f84:	88 1f       	adc	r24, r24
    2f86:	d2 f7       	brpl	.-12     	; 0x2f7c <__fp_rempio2+0x40>
    2f88:	90 48       	sbci	r25, 0x80	; 128
    2f8a:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__fp_mpack_finite>

00002f8e <__fp_round>:
    2f8e:	09 2e       	mov	r0, r25
    2f90:	03 94       	inc	r0
    2f92:	00 0c       	add	r0, r0
    2f94:	11 f4       	brne	.+4      	; 0x2f9a <__fp_round+0xc>
    2f96:	88 23       	and	r24, r24
    2f98:	52 f0       	brmi	.+20     	; 0x2fae <__fp_round+0x20>
    2f9a:	bb 0f       	add	r27, r27
    2f9c:	40 f4       	brcc	.+16     	; 0x2fae <__fp_round+0x20>
    2f9e:	bf 2b       	or	r27, r31
    2fa0:	11 f4       	brne	.+4      	; 0x2fa6 <__fp_round+0x18>
    2fa2:	60 ff       	sbrs	r22, 0
    2fa4:	04 c0       	rjmp	.+8      	; 0x2fae <__fp_round+0x20>
    2fa6:	6f 5f       	subi	r22, 0xFF	; 255
    2fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    2faa:	8f 4f       	sbci	r24, 0xFF	; 255
    2fac:	9f 4f       	sbci	r25, 0xFF	; 255
    2fae:	08 95       	ret

00002fb0 <__fp_sinus>:
    2fb0:	ef 93       	push	r30
    2fb2:	e0 ff       	sbrs	r30, 0
    2fb4:	07 c0       	rjmp	.+14     	; 0x2fc4 <__fp_sinus+0x14>
    2fb6:	a2 ea       	ldi	r26, 0xA2	; 162
    2fb8:	2a ed       	ldi	r18, 0xDA	; 218
    2fba:	3f e0       	ldi	r19, 0x0F	; 15
    2fbc:	49 ec       	ldi	r20, 0xC9	; 201
    2fbe:	5f eb       	ldi	r21, 0xBF	; 191
    2fc0:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__addsf3x>
    2fc4:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <__fp_round>
    2fc8:	0f 90       	pop	r0
    2fca:	03 94       	inc	r0
    2fcc:	01 fc       	sbrc	r0, 1
    2fce:	90 58       	subi	r25, 0x80	; 128
    2fd0:	e1 e0       	ldi	r30, 0x01	; 1
    2fd2:	f1 e0       	ldi	r31, 0x01	; 1
    2fd4:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__fp_powsodd>

00002fd8 <__fp_split3>:
    2fd8:	57 fd       	sbrc	r21, 7
    2fda:	90 58       	subi	r25, 0x80	; 128
    2fdc:	44 0f       	add	r20, r20
    2fde:	55 1f       	adc	r21, r21
    2fe0:	59 f0       	breq	.+22     	; 0x2ff8 <__fp_splitA+0x10>
    2fe2:	5f 3f       	cpi	r21, 0xFF	; 255
    2fe4:	71 f0       	breq	.+28     	; 0x3002 <__fp_splitA+0x1a>
    2fe6:	47 95       	ror	r20

00002fe8 <__fp_splitA>:
    2fe8:	88 0f       	add	r24, r24
    2fea:	97 fb       	bst	r25, 7
    2fec:	99 1f       	adc	r25, r25
    2fee:	61 f0       	breq	.+24     	; 0x3008 <__fp_splitA+0x20>
    2ff0:	9f 3f       	cpi	r25, 0xFF	; 255
    2ff2:	79 f0       	breq	.+30     	; 0x3012 <__fp_splitA+0x2a>
    2ff4:	87 95       	ror	r24
    2ff6:	08 95       	ret
    2ff8:	12 16       	cp	r1, r18
    2ffa:	13 06       	cpc	r1, r19
    2ffc:	14 06       	cpc	r1, r20
    2ffe:	55 1f       	adc	r21, r21
    3000:	f2 cf       	rjmp	.-28     	; 0x2fe6 <__fp_split3+0xe>
    3002:	46 95       	lsr	r20
    3004:	f1 df       	rcall	.-30     	; 0x2fe8 <__fp_splitA>
    3006:	08 c0       	rjmp	.+16     	; 0x3018 <__fp_splitA+0x30>
    3008:	16 16       	cp	r1, r22
    300a:	17 06       	cpc	r1, r23
    300c:	18 06       	cpc	r1, r24
    300e:	99 1f       	adc	r25, r25
    3010:	f1 cf       	rjmp	.-30     	; 0x2ff4 <__fp_splitA+0xc>
    3012:	86 95       	lsr	r24
    3014:	71 05       	cpc	r23, r1
    3016:	61 05       	cpc	r22, r1
    3018:	08 94       	sec
    301a:	08 95       	ret

0000301c <__fp_zero>:
    301c:	e8 94       	clt

0000301e <__fp_szero>:
    301e:	bb 27       	eor	r27, r27
    3020:	66 27       	eor	r22, r22
    3022:	77 27       	eor	r23, r23
    3024:	cb 01       	movw	r24, r22
    3026:	97 f9       	bld	r25, 7
    3028:	08 95       	ret

0000302a <__gesf2>:
    302a:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__fp_cmp>
    302e:	08 f4       	brcc	.+2      	; 0x3032 <__gesf2+0x8>
    3030:	8f ef       	ldi	r24, 0xFF	; 255
    3032:	08 95       	ret

00003034 <inverse>:
    3034:	9b 01       	movw	r18, r22
    3036:	ac 01       	movw	r20, r24
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	70 e0       	ldi	r23, 0x00	; 0
    303c:	80 e8       	ldi	r24, 0x80	; 128
    303e:	9f e3       	ldi	r25, 0x3F	; 63
    3040:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <__divsf3>

00003044 <__mulsf3>:
    3044:	0e 94 35 18 	call	0x306a	; 0x306a <__mulsf3x>
    3048:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__fp_round>
    304c:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__fp_pscA>
    3050:	38 f0       	brcs	.+14     	; 0x3060 <__mulsf3+0x1c>
    3052:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__fp_pscB>
    3056:	20 f0       	brcs	.+8      	; 0x3060 <__mulsf3+0x1c>
    3058:	95 23       	and	r25, r21
    305a:	11 f0       	breq	.+4      	; 0x3060 <__mulsf3+0x1c>
    305c:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__fp_inf>
    3060:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__fp_nan>
    3064:	11 24       	eor	r1, r1
    3066:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__fp_szero>

0000306a <__mulsf3x>:
    306a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__fp_split3>
    306e:	70 f3       	brcs	.-36     	; 0x304c <__mulsf3+0x8>

00003070 <__mulsf3_pse>:
    3070:	95 9f       	mul	r25, r21
    3072:	c1 f3       	breq	.-16     	; 0x3064 <__mulsf3+0x20>
    3074:	95 0f       	add	r25, r21
    3076:	50 e0       	ldi	r21, 0x00	; 0
    3078:	55 1f       	adc	r21, r21
    307a:	62 9f       	mul	r22, r18
    307c:	f0 01       	movw	r30, r0
    307e:	72 9f       	mul	r23, r18
    3080:	bb 27       	eor	r27, r27
    3082:	f0 0d       	add	r31, r0
    3084:	b1 1d       	adc	r27, r1
    3086:	63 9f       	mul	r22, r19
    3088:	aa 27       	eor	r26, r26
    308a:	f0 0d       	add	r31, r0
    308c:	b1 1d       	adc	r27, r1
    308e:	aa 1f       	adc	r26, r26
    3090:	64 9f       	mul	r22, r20
    3092:	66 27       	eor	r22, r22
    3094:	b0 0d       	add	r27, r0
    3096:	a1 1d       	adc	r26, r1
    3098:	66 1f       	adc	r22, r22
    309a:	82 9f       	mul	r24, r18
    309c:	22 27       	eor	r18, r18
    309e:	b0 0d       	add	r27, r0
    30a0:	a1 1d       	adc	r26, r1
    30a2:	62 1f       	adc	r22, r18
    30a4:	73 9f       	mul	r23, r19
    30a6:	b0 0d       	add	r27, r0
    30a8:	a1 1d       	adc	r26, r1
    30aa:	62 1f       	adc	r22, r18
    30ac:	83 9f       	mul	r24, r19
    30ae:	a0 0d       	add	r26, r0
    30b0:	61 1d       	adc	r22, r1
    30b2:	22 1f       	adc	r18, r18
    30b4:	74 9f       	mul	r23, r20
    30b6:	33 27       	eor	r19, r19
    30b8:	a0 0d       	add	r26, r0
    30ba:	61 1d       	adc	r22, r1
    30bc:	23 1f       	adc	r18, r19
    30be:	84 9f       	mul	r24, r20
    30c0:	60 0d       	add	r22, r0
    30c2:	21 1d       	adc	r18, r1
    30c4:	82 2f       	mov	r24, r18
    30c6:	76 2f       	mov	r23, r22
    30c8:	6a 2f       	mov	r22, r26
    30ca:	11 24       	eor	r1, r1
    30cc:	9f 57       	subi	r25, 0x7F	; 127
    30ce:	50 40       	sbci	r21, 0x00	; 0
    30d0:	9a f0       	brmi	.+38     	; 0x30f8 <__mulsf3_pse+0x88>
    30d2:	f1 f0       	breq	.+60     	; 0x3110 <__mulsf3_pse+0xa0>
    30d4:	88 23       	and	r24, r24
    30d6:	4a f0       	brmi	.+18     	; 0x30ea <__mulsf3_pse+0x7a>
    30d8:	ee 0f       	add	r30, r30
    30da:	ff 1f       	adc	r31, r31
    30dc:	bb 1f       	adc	r27, r27
    30de:	66 1f       	adc	r22, r22
    30e0:	77 1f       	adc	r23, r23
    30e2:	88 1f       	adc	r24, r24
    30e4:	91 50       	subi	r25, 0x01	; 1
    30e6:	50 40       	sbci	r21, 0x00	; 0
    30e8:	a9 f7       	brne	.-22     	; 0x30d4 <__mulsf3_pse+0x64>
    30ea:	9e 3f       	cpi	r25, 0xFE	; 254
    30ec:	51 05       	cpc	r21, r1
    30ee:	80 f0       	brcs	.+32     	; 0x3110 <__mulsf3_pse+0xa0>
    30f0:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__fp_inf>
    30f4:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__fp_szero>
    30f8:	5f 3f       	cpi	r21, 0xFF	; 255
    30fa:	e4 f3       	brlt	.-8      	; 0x30f4 <__mulsf3_pse+0x84>
    30fc:	98 3e       	cpi	r25, 0xE8	; 232
    30fe:	d4 f3       	brlt	.-12     	; 0x30f4 <__mulsf3_pse+0x84>
    3100:	86 95       	lsr	r24
    3102:	77 95       	ror	r23
    3104:	67 95       	ror	r22
    3106:	b7 95       	ror	r27
    3108:	f7 95       	ror	r31
    310a:	e7 95       	ror	r30
    310c:	9f 5f       	subi	r25, 0xFF	; 255
    310e:	c1 f7       	brne	.-16     	; 0x3100 <__mulsf3_pse+0x90>
    3110:	fe 2b       	or	r31, r30
    3112:	88 0f       	add	r24, r24
    3114:	91 1d       	adc	r25, r1
    3116:	96 95       	lsr	r25
    3118:	87 95       	ror	r24
    311a:	97 f9       	bld	r25, 7
    311c:	08 95       	ret

0000311e <sin>:
    311e:	9f 93       	push	r25
    3120:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__fp_rempio2>
    3124:	0f 90       	pop	r0
    3126:	07 fc       	sbrc	r0, 7
    3128:	ee 5f       	subi	r30, 0xFE	; 254
    312a:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__fp_sinus>
    312e:	19 f4       	brne	.+6      	; 0x3136 <sin+0x18>
    3130:	16 f4       	brtc	.+4      	; 0x3136 <sin+0x18>
    3132:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__fp_nan>
    3136:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__fp_mpack>

0000313a <sqrt>:
    313a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__fp_splitA>
    313e:	b8 f3       	brcs	.-18     	; 0x312e <sin+0x10>
    3140:	99 23       	and	r25, r25
    3142:	c9 f3       	breq	.-14     	; 0x3136 <sin+0x18>
    3144:	b6 f3       	brts	.-20     	; 0x3132 <sin+0x14>
    3146:	9f 57       	subi	r25, 0x7F	; 127
    3148:	55 0b       	sbc	r21, r21
    314a:	87 ff       	sbrs	r24, 7
    314c:	0e 94 ef 18 	call	0x31de	; 0x31de <__fp_norm2>
    3150:	00 24       	eor	r0, r0
    3152:	a0 e6       	ldi	r26, 0x60	; 96
    3154:	40 ea       	ldi	r20, 0xA0	; 160
    3156:	90 01       	movw	r18, r0
    3158:	80 58       	subi	r24, 0x80	; 128
    315a:	56 95       	lsr	r21
    315c:	97 95       	ror	r25
    315e:	28 f4       	brcc	.+10     	; 0x316a <sqrt+0x30>
    3160:	80 5c       	subi	r24, 0xC0	; 192
    3162:	66 0f       	add	r22, r22
    3164:	77 1f       	adc	r23, r23
    3166:	88 1f       	adc	r24, r24
    3168:	20 f0       	brcs	.+8      	; 0x3172 <sqrt+0x38>
    316a:	26 17       	cp	r18, r22
    316c:	37 07       	cpc	r19, r23
    316e:	48 07       	cpc	r20, r24
    3170:	30 f4       	brcc	.+12     	; 0x317e <sqrt+0x44>
    3172:	62 1b       	sub	r22, r18
    3174:	73 0b       	sbc	r23, r19
    3176:	84 0b       	sbc	r24, r20
    3178:	20 29       	or	r18, r0
    317a:	31 29       	or	r19, r1
    317c:	4a 2b       	or	r20, r26
    317e:	a6 95       	lsr	r26
    3180:	17 94       	ror	r1
    3182:	07 94       	ror	r0
    3184:	20 25       	eor	r18, r0
    3186:	31 25       	eor	r19, r1
    3188:	4a 27       	eor	r20, r26
    318a:	58 f7       	brcc	.-42     	; 0x3162 <sqrt+0x28>
    318c:	66 0f       	add	r22, r22
    318e:	77 1f       	adc	r23, r23
    3190:	88 1f       	adc	r24, r24
    3192:	20 f0       	brcs	.+8      	; 0x319c <sqrt+0x62>
    3194:	26 17       	cp	r18, r22
    3196:	37 07       	cpc	r19, r23
    3198:	48 07       	cpc	r20, r24
    319a:	30 f4       	brcc	.+12     	; 0x31a8 <sqrt+0x6e>
    319c:	62 0b       	sbc	r22, r18
    319e:	73 0b       	sbc	r23, r19
    31a0:	84 0b       	sbc	r24, r20
    31a2:	20 0d       	add	r18, r0
    31a4:	31 1d       	adc	r19, r1
    31a6:	41 1d       	adc	r20, r1
    31a8:	a0 95       	com	r26
    31aa:	81 f7       	brne	.-32     	; 0x318c <sqrt+0x52>
    31ac:	b9 01       	movw	r22, r18
    31ae:	84 2f       	mov	r24, r20
    31b0:	91 58       	subi	r25, 0x81	; 129
    31b2:	88 0f       	add	r24, r24
    31b4:	96 95       	lsr	r25
    31b6:	87 95       	ror	r24
    31b8:	08 95       	ret

000031ba <square>:
    31ba:	9b 01       	movw	r18, r22
    31bc:	ac 01       	movw	r20, r24
    31be:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__mulsf3>

000031c2 <__fp_mpack>:
    31c2:	9f 3f       	cpi	r25, 0xFF	; 255
    31c4:	31 f0       	breq	.+12     	; 0x31d2 <__fp_mpack_finite+0xc>

000031c6 <__fp_mpack_finite>:
    31c6:	91 50       	subi	r25, 0x01	; 1
    31c8:	20 f4       	brcc	.+8      	; 0x31d2 <__fp_mpack_finite+0xc>
    31ca:	87 95       	ror	r24
    31cc:	77 95       	ror	r23
    31ce:	67 95       	ror	r22
    31d0:	b7 95       	ror	r27
    31d2:	88 0f       	add	r24, r24
    31d4:	91 1d       	adc	r25, r1
    31d6:	96 95       	lsr	r25
    31d8:	87 95       	ror	r24
    31da:	97 f9       	bld	r25, 7
    31dc:	08 95       	ret

000031de <__fp_norm2>:
    31de:	91 50       	subi	r25, 0x01	; 1
    31e0:	50 40       	sbci	r21, 0x00	; 0
    31e2:	66 0f       	add	r22, r22
    31e4:	77 1f       	adc	r23, r23
    31e6:	88 1f       	adc	r24, r24
    31e8:	d2 f7       	brpl	.-12     	; 0x31de <__fp_norm2>
    31ea:	08 95       	ret

000031ec <__fp_powsodd>:
    31ec:	9f 93       	push	r25
    31ee:	8f 93       	push	r24
    31f0:	7f 93       	push	r23
    31f2:	6f 93       	push	r22
    31f4:	ff 93       	push	r31
    31f6:	ef 93       	push	r30
    31f8:	9b 01       	movw	r18, r22
    31fa:	ac 01       	movw	r20, r24
    31fc:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
    3200:	ef 91       	pop	r30
    3202:	ff 91       	pop	r31
    3204:	0e 94 67 17 	call	0x2ece	; 0x2ece <__fp_powser>
    3208:	2f 91       	pop	r18
    320a:	3f 91       	pop	r19
    320c:	4f 91       	pop	r20
    320e:	5f 91       	pop	r21
    3210:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__mulsf3>

00003214 <__tablejump2__>:
    3214:	ee 0f       	add	r30, r30
    3216:	ff 1f       	adc	r31, r31
    3218:	05 90       	lpm	r0, Z+
    321a:	f4 91       	lpm	r31, Z
    321c:	e0 2d       	mov	r30, r0
    321e:	09 94       	ijmp

00003220 <__itoa_ncheck>:
    3220:	bb 27       	eor	r27, r27
    3222:	4a 30       	cpi	r20, 0x0A	; 10
    3224:	31 f4       	brne	.+12     	; 0x3232 <__itoa_ncheck+0x12>
    3226:	99 23       	and	r25, r25
    3228:	22 f4       	brpl	.+8      	; 0x3232 <__itoa_ncheck+0x12>
    322a:	bd e2       	ldi	r27, 0x2D	; 45
    322c:	90 95       	com	r25
    322e:	81 95       	neg	r24
    3230:	9f 4f       	sbci	r25, 0xFF	; 255
    3232:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__utoa_common>

00003236 <__utoa_ncheck>:
    3236:	bb 27       	eor	r27, r27

00003238 <__utoa_common>:
    3238:	fb 01       	movw	r30, r22
    323a:	55 27       	eor	r21, r21
    323c:	aa 27       	eor	r26, r26
    323e:	88 0f       	add	r24, r24
    3240:	99 1f       	adc	r25, r25
    3242:	aa 1f       	adc	r26, r26
    3244:	a4 17       	cp	r26, r20
    3246:	10 f0       	brcs	.+4      	; 0x324c <__utoa_common+0x14>
    3248:	a4 1b       	sub	r26, r20
    324a:	83 95       	inc	r24
    324c:	50 51       	subi	r21, 0x10	; 16
    324e:	b9 f7       	brne	.-18     	; 0x323e <__utoa_common+0x6>
    3250:	a0 5d       	subi	r26, 0xD0	; 208
    3252:	aa 33       	cpi	r26, 0x3A	; 58
    3254:	08 f0       	brcs	.+2      	; 0x3258 <__utoa_common+0x20>
    3256:	a9 5d       	subi	r26, 0xD9	; 217
    3258:	a1 93       	st	Z+, r26
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	79 f7       	brne	.-34     	; 0x323c <__utoa_common+0x4>
    325e:	b1 11       	cpse	r27, r1
    3260:	b1 93       	st	Z+, r27
    3262:	11 92       	st	Z+, r1
    3264:	cb 01       	movw	r24, r22
    3266:	0c 94 35 19 	jmp	0x326a	; 0x326a <strrev>

0000326a <strrev>:
    326a:	dc 01       	movw	r26, r24
    326c:	fc 01       	movw	r30, r24
    326e:	67 2f       	mov	r22, r23
    3270:	71 91       	ld	r23, Z+
    3272:	77 23       	and	r23, r23
    3274:	e1 f7       	brne	.-8      	; 0x326e <strrev+0x4>
    3276:	32 97       	sbiw	r30, 0x02	; 2
    3278:	04 c0       	rjmp	.+8      	; 0x3282 <strrev+0x18>
    327a:	7c 91       	ld	r23, X
    327c:	6d 93       	st	X+, r22
    327e:	70 83       	st	Z, r23
    3280:	62 91       	ld	r22, -Z
    3282:	ae 17       	cp	r26, r30
    3284:	bf 07       	cpc	r27, r31
    3286:	c8 f3       	brcs	.-14     	; 0x327a <strrev+0x10>
    3288:	08 95       	ret

0000328a <_exit>:
    328a:	f8 94       	cli

0000328c <__stop_program>:
    328c:	ff cf       	rjmp	.-2      	; 0x328c <__stop_program>
