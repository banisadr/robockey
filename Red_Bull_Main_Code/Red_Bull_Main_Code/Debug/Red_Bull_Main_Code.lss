
Red_Bull_Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000035de  00003672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  0080015c  0080015c  000036ce  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000036ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00003770  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032ad  00000000  00000000  00003ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb4  00000000  00000000  00006d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001498  00000000  00000000  00007c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bb8  00000000  00000000  000090c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d15  00000000  00000000  00009c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fad  00000000  00000000  0000a991  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000e93e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__vector_3>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__vector_10>
      2c:	0c 94 27 11 	jmp	0x224e	; 0x224e <__vector_11>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__vector_17>
      48:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__vector_18>
      4c:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__vector_19>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__vector_23>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	b6 08       	sbc	r11, r6
      ae:	b9 08       	sbc	r11, r9
      b0:	bc 08       	sbc	r11, r12
      b2:	c7 08       	sbc	r12, r7
      b4:	d2 08       	sbc	r13, r2
      b6:	da 08       	sbc	r13, r10
      b8:	d5 08       	sbc	r13, r5
      ba:	d8 08       	sbc	r13, r8
      bc:	c8 15       	cp	r28, r8
      be:	e8 15       	cp	r30, r8
      c0:	08 16       	cp	r0, r24
      c2:	28 16       	cp	r2, r24
      c4:	48 16       	cp	r4, r24
      c6:	68 16       	cp	r6, r24
      c8:	88 16       	cp	r8, r24
      ca:	a8 16       	cp	r10, r24
      cc:	c8 16       	cp	r12, r24
      ce:	e8 16       	cp	r14, r24
      d0:	08 17       	cp	r16, r24
      d2:	28 17       	cp	r18, r24
      d4:	08 4a       	sbci	r16, 0xA8	; 168
      d6:	d7 3b       	cpi	r29, 0xB7	; 183
      d8:	3b ce       	rjmp	.-906    	; 0xfffffd50 <__eeprom_end+0xff7efd50>
      da:	01 6e       	ori	r16, 0xE1	; 225
      dc:	84 bc       	out	0x24, r8	; 36
      de:	bf fd       	.word	0xfdbf	; ????
      e0:	c1 2f       	mov	r28, r17
      e2:	3d 6c       	ori	r19, 0xCD	; 205
      e4:	74 31       	cpi	r23, 0x14	; 20
      e6:	9a bd       	out	0x2a, r25	; 42
      e8:	56 83       	std	Z+6, r21	; 0x06
      ea:	3d da       	rcall	.-2950   	; 0xfffff566 <__eeprom_end+0xff7ef566>
      ec:	3d 00       	.word	0x003d	; ????
      ee:	c7 7f       	andi	r28, 0xF7	; 247
      f0:	11 be       	out	0x31, r1	; 49
      f2:	d9 e4       	ldi	r29, 0x49	; 73
      f4:	bb 4c       	sbci	r27, 0xCB	; 203
      f6:	3e 91       	ld	r19, -X
      f8:	6b aa       	std	Y+51, r6	; 0x33
      fa:	aa be       	out	0x3a, r10	; 58
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 00       	.word	0x003f	; ????

00000120 <__trampolines_end>:
     120:	00 01       	movw	r0, r0
     122:	00 00       	nop
     124:	b7 01       	movw	r22, r14
     126:	12 00       	.word	0x0012	; ????
     128:	02 00       	.word	0x0002	; ????
     12a:	00 74       	andi	r16, 0x40	; 64
     12c:	01 43       	sbci	r16, 0x31	; 49
     12e:	00 03       	mulsu	r16, r16
     130:	00 00       	nop
     132:	70 01       	movw	r14, r0
     134:	04 01       	movw	r0, r8
     136:	03 09       	sbc	r16, r3
     138:	04 5c       	subi	r16, 0xC4	; 196
     13a:	01 12       	cpse	r0, r17
     13c:	02 03       	mulsu	r16, r18
     13e:	09 04       	cpc	r0, r9
     140:	54 01       	movw	r10, r8
     142:	06 03       	mulsu	r16, r22
     144:	03 09       	sbc	r16, r3
     146:	04 4a       	sbci	r16, 0xA4	; 164
     148:	01 08       	sbc	r0, r1

0000014a <string3>:
     14a:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000154 <string2>:
     154:	06 03 4d 00 32 00 00 00                             ..M.2...

0000015c <string1>:
     15c:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     16c:	65 00 00 00                                         e...

00000170 <string0>:
     170:	04 03 09 04                                         ....

00000174 <config1_descriptor>:
     174:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     184:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     194:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1a4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1b4:	40 00 00                                            @..

000001b7 <device_descriptor>:
     1b7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1c7:	03 01                                               ..

000001c9 <endpoint_config_table>:
     1c9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	da e0       	ldi	r29, 0x0A	; 10
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	ee ed       	ldi	r30, 0xDE	; 222
     1e8:	f5 e3       	ldi	r31, 0x35	; 53
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	ac 35       	cpi	r26, 0x5C	; 92
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	ac e5       	ldi	r26, 0x5C	; 92
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	aa 3e       	cpi	r26, 0xEA	; 234
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <main>
     20a:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <initialize_robockey>:
#include "m_rf.h"
#include "m_usb.h"
#include "m_wii.h"
#include "initialization_function.h"

void initialize_robockey(void) {
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
/************************************************************
Initialization of Pins and System Clock
************************************************************/

	// Set to 16 MHz
	m_clockdivide(CLOCK_DIVIDE);
     216:	e1 e6       	ldi	r30, 0x61	; 97
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 e8       	ldi	r24, 0x80	; 128
     21c:	80 83       	st	Z, r24
     21e:	10 82       	st	Z, r1

	// Disable JTAG
	m_disableJTAG(); // turn off JTAG port and allow access to F4-F7 as GPIO
     220:	85 bf       	out	0x35, r24	; 53
     222:	85 bf       	out	0x35, r24	; 53
	
	//Set to Input
	clear(DDRD,0); // D0
     224:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     226:	51 98       	cbi	0x0a, 1	; 10
	
	
	//Set to Output
	set(DDRB,0); // B0 Left motor enable
     228:	20 9a       	sbi	0x04, 0	; 4
	set(DDRB,1); // B1 Left motor direction
     22a:	21 9a       	sbi	0x04, 1	; 4
	set(DDRB,2); // B2 Right motor enable
     22c:	22 9a       	sbi	0x04, 2	; 4
	set(DDRB,3); // B3 Right motor direction
     22e:	23 9a       	sbi	0x04, 3	; 4
	
	set(DDRC,6); //C6 Red positioning LED
     230:	3e 9a       	sbi	0x07, 6	; 7
	set(DDRC,7); //C7 Blue positioning LED 
     232:	3f 9a       	sbi	0x07, 7	; 7
	
	//Set pin low
	clear(PORTB,0);	//start with motor pins low
     234:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,1);
     236:	29 98       	cbi	0x05, 1	; 5
	clear(PORTB,2);
     238:	2a 98       	cbi	0x05, 2	; 5
	clear(PORTB,3);
     23a:	2b 98       	cbi	0x05, 3	; 5
	
	clear(PORTC,6); //Start with positioning LED off
     23c:	46 98       	cbi	0x08, 6	; 8
	clear(PORTC,7); 
     23e:	47 98       	cbi	0x08, 7	; 8

/************************************************************
Setup Subsystems
************************************************************/

	m_bus_init();
     240:	0e 94 05 10 	call	0x200a	; 0x200a <m_bus_init>
	while(!m_wii_open());
     244:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <m_wii_open>
     248:	88 23       	and	r24, r24
     24a:	e1 f3       	breq	.-8      	; 0x244 <initialize_robockey+0x32>
	sei();
     24c:	78 94       	sei
	m_usb_init();
     24e:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <m_usb_init>
	while(!m_rf_open(CHANNEL,RXADDRESS_1,PACKET_LENGTH)); // Configure mRF
     252:	4a e0       	ldi	r20, 0x0A	; 10
     254:	60 e2       	ldi	r22, 0x20	; 32
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	0e 94 16 10 	call	0x202c	; 0x202c <m_rf_open>
     25c:	88 23       	and	r24, r24
     25e:	c9 f3       	breq	.-14     	; 0x252 <initialize_robockey+0x40>
/************************************************************
Timer1 Initialization for PWM Motor Control
************************************************************/

	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     260:	e1 e8       	ldi	r30, 0x81	; 129
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	8b 7f       	andi	r24, 0xFB	; 251
     268:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     26a:	80 81       	ld	r24, Z
     26c:	8d 7f       	andi	r24, 0xFD	; 253
     26e:	80 83       	st	Z, r24
	clear(TCCR1B,CS10);
     270:	80 81       	ld	r24, Z
     272:	8e 7f       	andi	r24, 0xFE	; 254
     274:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13);	//Use timer mode 4 (up to OCR1A)
     276:	80 81       	ld	r24, Z
     278:	8f 7e       	andi	r24, 0xEF	; 239
     27a:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     27c:	80 81       	ld	r24, Z
     27e:	88 60       	ori	r24, 0x08	; 8
     280:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11);
     282:	e0 e8       	ldi	r30, 0x80	; 128
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	8d 7f       	andi	r24, 0xFD	; 253
     28a:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     28c:	80 81       	ld	r24, Z
     28e:	8e 7f       	andi	r24, 0xFE	; 254
     290:	80 83       	st	Z, r24

	clear(TCCR1A,COM1B1);		//No change of B6
     292:	80 81       	ld	r24, Z
     294:	8f 7d       	andi	r24, 0xDF	; 223
     296:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     298:	80 81       	ld	r24, Z
     29a:	8f 7e       	andi	r24, 0xEF	; 239
     29c:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     29e:	c8 e8       	ldi	r28, 0x88	; 136
     2a0:	d0 e0       	ldi	r29, 0x00	; 0
     2a2:	8a ea       	ldi	r24, 0xAA	; 170
     2a4:	99 e2       	ldi	r25, 0x29	; 41
     2a6:	99 83       	std	Y+1, r25	; 0x01
     2a8:	88 83       	st	Y, r24
	OCR1B = (float)OCR1A*0.1;
     2aa:	68 81       	ld	r22, Y
     2ac:	79 81       	ldd	r23, Y+1	; 0x01
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__floatunsisf>
     2b6:	2d ec       	ldi	r18, 0xCD	; 205
     2b8:	3c ec       	ldi	r19, 0xCC	; 204
     2ba:	4c ec       	ldi	r20, 0xCC	; 204
     2bc:	5d e3       	ldi	r21, 0x3D	; 61
     2be:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     2c2:	0e 94 ab 18 	call	0x3156	; 0x3156 <__fixunssfsi>
     2c6:	70 93 8b 00 	sts	0x008B, r23
     2ca:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = (float)OCR1A*0.1;
     2ce:	68 81       	ld	r22, Y
     2d0:	79 81       	ldd	r23, Y+1	; 0x01
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__floatunsisf>
     2da:	2d ec       	ldi	r18, 0xCD	; 205
     2dc:	3c ec       	ldi	r19, 0xCC	; 204
     2de:	4c ec       	ldi	r20, 0xCC	; 204
     2e0:	5d e3       	ldi	r21, 0x3D	; 61
     2e2:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     2e6:	0e 94 ab 18 	call	0x3156	; 0x3156 <__fixunssfsi>
     2ea:	70 93 8d 00 	sts	0x008D, r23
     2ee:	60 93 8c 00 	sts	0x008C, r22
	
	set(TIMSK1,OCIE1A); // OCR1A interrupt vector
     2f2:	ef e6       	ldi	r30, 0x6F	; 111
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	82 60       	ori	r24, 0x02	; 2
     2fa:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1B); // OCR1B interrupt vector
     2fc:	80 81       	ld	r24, Z
     2fe:	84 60       	ori	r24, 0x04	; 4
     300:	80 83       	st	Z, r24
	set(TIMSK1,OCIE1C); // OCR1C interrupt vector
     302:	80 81       	ld	r24, Z
     304:	88 60       	ori	r24, 0x08	; 8
     306:	80 83       	st	Z, r24

/************************************************************
Timer3 Initialization for fixed timestep calculations
************************************************************/

	clear(TCCR3B,CS32); // prescale /1
     308:	e1 e9       	ldi	r30, 0x91	; 145
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	8b 7f       	andi	r24, 0xFB	; 251
     310:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     312:	80 81       	ld	r24, Z
     314:	8d 7f       	andi	r24, 0xFD	; 253
     316:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     318:	80 81       	ld	r24, Z
     31a:	81 60       	ori	r24, 0x01	; 1
     31c:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     31e:	80 81       	ld	r24, Z
     320:	8f 7e       	andi	r24, 0xEF	; 239
     322:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     324:	80 81       	ld	r24, Z
     326:	88 60       	ori	r24, 0x08	; 8
     328:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     32a:	e0 e9       	ldi	r30, 0x90	; 144
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	8d 7f       	andi	r24, 0xFD	; 253
     332:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     334:	80 81       	ld	r24, Z
     336:	8e 7f       	andi	r24, 0xFE	; 254
     338:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     33a:	80 e8       	ldi	r24, 0x80	; 128
     33c:	9e e3       	ldi	r25, 0x3E	; 62
     33e:	90 93 99 00 	sts	0x0099, r25
     342:	80 93 98 00 	sts	0x0098, r24

/************************************************************
Timer0 Initialization for COMM test 
************************************************************/
	clear(TCCR0B,CS02); //start with timer off
     346:	85 b5       	in	r24, 0x25	; 37
     348:	8b 7f       	andi	r24, 0xFB	; 251
     34a:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS01);
     34c:	85 b5       	in	r24, 0x25	; 37
     34e:	8d 7f       	andi	r24, 0xFD	; 253
     350:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0B,CS00);
     352:	85 b5       	in	r24, 0x25	; 37
     354:	8e 7f       	andi	r24, 0xFE	; 254
     356:	85 bd       	out	0x25, r24	; 37
	
	clear(TCCR0B,WGM02); //Up to OCR0A mode 
     358:	85 b5       	in	r24, 0x25	; 37
     35a:	87 7f       	andi	r24, 0xF7	; 247
     35c:	85 bd       	out	0x25, r24	; 37
	clear(TCCR0A,WGM01);
     35e:	84 b5       	in	r24, 0x24	; 36
     360:	8d 7f       	andi	r24, 0xFD	; 253
     362:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A,WGM00);
     364:	84 b5       	in	r24, 0x24	; 36
     366:	8e 7f       	andi	r24, 0xFE	; 254
     368:	84 bd       	out	0x24, r24	; 36
		
	set(TIMSK0,TOIE0); //enable interupt at OCR0A
     36a:	ee e6       	ldi	r30, 0x6E	; 110
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	80 81       	ld	r24, Z
     370:	81 60       	ori	r24, 0x01	; 1
     372:	80 83       	st	Z, r24
	
/************************************************************
Setup ADC
************************************************************/
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
     374:	cc e7       	ldi	r28, 0x7C	; 124
     376:	d0 e0       	ldi	r29, 0x00	; 0
     378:	88 81       	ld	r24, Y
     37a:	8f 77       	andi	r24, 0x7F	; 127
     37c:	88 83       	st	Y, r24
	set(ADMUX,REFS0);
     37e:	88 81       	ld	r24, Y
     380:	80 64       	ori	r24, 0x40	; 64
     382:	88 83       	st	Y, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
     384:	ea e7       	ldi	r30, 0x7A	; 122
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	80 81       	ld	r24, Z
     38a:	8b 7f       	andi	r24, 0xFB	; 251
     38c:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
     38e:	80 81       	ld	r24, Z
     390:	82 60       	ori	r24, 0x02	; 2
     392:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
     394:	80 81       	ld	r24, Z
     396:	81 60       	ori	r24, 0x01	; 1
     398:	80 83       	st	Z, r24
	
	// Disable Digital input to:
	set(DIDR0,ADC0D); // ADC0
     39a:	ae e7       	ldi	r26, 0x7E	; 126
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	8c 91       	ld	r24, X
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	8c 93       	st	X, r24
	set(DIDR0,ADC1D); // ADC1
     3a4:	8c 91       	ld	r24, X
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	8c 93       	st	X, r24
	set(DIDR0,ADC4D); // ADC4
     3aa:	8c 91       	ld	r24, X
     3ac:	80 61       	ori	r24, 0x10	; 16
     3ae:	8c 93       	st	X, r24
	set(DIDR0,ADC5D); // ADC5
     3b0:	8c 91       	ld	r24, X
     3b2:	80 62       	ori	r24, 0x20	; 32
     3b4:	8c 93       	st	X, r24
	set(DIDR0,ADC6D); // ADC6
     3b6:	8c 91       	ld	r24, X
     3b8:	80 64       	ori	r24, 0x40	; 64
     3ba:	8c 93       	st	X, r24
	set(DIDR0,ADC7D); // ADC7
     3bc:	8c 91       	ld	r24, X
     3be:	80 68       	ori	r24, 0x80	; 128
     3c0:	8c 93       	st	X, r24
	set(DIDR2,ADC8D); // ADC8
     3c2:	ad e7       	ldi	r26, 0x7D	; 125
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	8c 91       	ld	r24, X
     3c8:	81 60       	ori	r24, 0x01	; 1
     3ca:	8c 93       	st	X, r24
	set(DIDR2,ADC9D); // ADC9
     3cc:	8c 91       	ld	r24, X
     3ce:	82 60       	ori	r24, 0x02	; 2
     3d0:	8c 93       	st	X, r24
	set(DIDR2,ADC10D); // ADC10
     3d2:	8c 91       	ld	r24, X
     3d4:	84 60       	ori	r24, 0x04	; 4
     3d6:	8c 93       	st	X, r24
	set(DIDR2,ADC11D); // ADC11
     3d8:	8c 91       	ld	r24, X
     3da:	88 60       	ori	r24, 0x08	; 8
     3dc:	8c 93       	st	X, r24
	set(DIDR2,ADC12D); // ADC812
     3de:	8c 91       	ld	r24, X
     3e0:	80 61       	ori	r24, 0x10	; 16
     3e2:	8c 93       	st	X, r24
	set(DIDR2,ADC13D); // ADC13
     3e4:	8c 91       	ld	r24, X
     3e6:	80 62       	ori	r24, 0x20	; 32
     3e8:	8c 93       	st	X, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
     3ea:	80 81       	ld	r24, Z
     3ec:	8f 7d       	andi	r24, 0xDF	; 223
     3ee:	80 83       	st	Z, r24
	
	set(ADCSRB,MUX5); // Select ADC13 at pin B6
     3f0:	ab e7       	ldi	r26, 0x7B	; 123
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	8c 91       	ld	r24, X
     3f6:	80 62       	ori	r24, 0x20	; 32
     3f8:	8c 93       	st	X, r24
	set(ADMUX,MUX2); // Transistor 4
     3fa:	88 81       	ld	r24, Y
     3fc:	84 60       	ori	r24, 0x04	; 4
     3fe:	88 83       	st	Y, r24
	clear(ADMUX,MUX1);
     400:	88 81       	ld	r24, Y
     402:	8d 7f       	andi	r24, 0xFD	; 253
     404:	88 83       	st	Y, r24
	set(ADMUX,MUX0);
     406:	88 81       	ld	r24, Y
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	88 83       	st	Y, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
     40c:	80 81       	ld	r24, Z
     40e:	80 68       	ori	r24, 0x80	; 128
     410:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
     412:	80 81       	ld	r24, Z
     414:	80 64       	ori	r24, 0x40	; 64
     416:	80 83       	st	Z, r24
	
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <distIndex>:
     41e:	82 30       	cpi	r24, 0x02	; 2
     420:	91 05       	cpc	r25, r1
     422:	f9 f0       	breq	.+62     	; 0x462 <distIndex+0x44>
     424:	2c f4       	brge	.+10     	; 0x430 <distIndex+0x12>
     426:	00 97       	sbiw	r24, 0x00	; 0
     428:	51 f0       	breq	.+20     	; 0x43e <distIndex+0x20>
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	89 f0       	breq	.+34     	; 0x450 <distIndex+0x32>
     42e:	42 c0       	rjmp	.+132    	; 0x4b4 <distIndex+0x96>
     430:	84 30       	cpi	r24, 0x04	; 4
     432:	91 05       	cpc	r25, r1
     434:	51 f1       	breq	.+84     	; 0x48a <distIndex+0x6c>
     436:	f4 f0       	brlt	.+60     	; 0x474 <distIndex+0x56>
     438:	05 97       	sbiw	r24, 0x05	; 5
     43a:	91 f1       	breq	.+100    	; 0x4a0 <distIndex+0x82>
     43c:	3b c0       	rjmp	.+118    	; 0x4b4 <distIndex+0x96>
     43e:	ec e5       	ldi	r30, 0x5C	; 92
     440:	f1 e0       	ldi	r31, 0x01	; 1
     442:	11 82       	std	Z+1, r1	; 0x01
     444:	10 82       	st	Z, r1
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	93 83       	std	Z+3, r25	; 0x03
     44c:	82 83       	std	Z+2, r24	; 0x02
     44e:	32 c0       	rjmp	.+100    	; 0x4b4 <distIndex+0x96>
     450:	ec e5       	ldi	r30, 0x5C	; 92
     452:	f1 e0       	ldi	r31, 0x01	; 1
     454:	11 82       	std	Z+1, r1	; 0x01
     456:	10 82       	st	Z, r1
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	93 83       	std	Z+3, r25	; 0x03
     45e:	82 83       	std	Z+2, r24	; 0x02
     460:	29 c0       	rjmp	.+82     	; 0x4b4 <distIndex+0x96>
     462:	ec e5       	ldi	r30, 0x5C	; 92
     464:	f1 e0       	ldi	r31, 0x01	; 1
     466:	11 82       	std	Z+1, r1	; 0x01
     468:	10 82       	st	Z, r1
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	93 83       	std	Z+3, r25	; 0x03
     470:	82 83       	std	Z+2, r24	; 0x02
     472:	20 c0       	rjmp	.+64     	; 0x4b4 <distIndex+0x96>
     474:	ec e5       	ldi	r30, 0x5C	; 92
     476:	f1 e0       	ldi	r31, 0x01	; 1
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	91 83       	std	Z+1, r25	; 0x01
     47e:	80 83       	st	Z, r24
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	93 83       	std	Z+3, r25	; 0x03
     486:	82 83       	std	Z+2, r24	; 0x02
     488:	15 c0       	rjmp	.+42     	; 0x4b4 <distIndex+0x96>
     48a:	ec e5       	ldi	r30, 0x5C	; 92
     48c:	f1 e0       	ldi	r31, 0x01	; 1
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	91 83       	std	Z+1, r25	; 0x01
     494:	80 83       	st	Z, r24
     496:	83 e0       	ldi	r24, 0x03	; 3
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	93 83       	std	Z+3, r25	; 0x03
     49c:	82 83       	std	Z+2, r24	; 0x02
     49e:	0a c0       	rjmp	.+20     	; 0x4b4 <distIndex+0x96>
     4a0:	ec e5       	ldi	r30, 0x5C	; 92
     4a2:	f1 e0       	ldi	r31, 0x01	; 1
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	91 83       	std	Z+1, r25	; 0x01
     4aa:	80 83       	st	Z, r24
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	93 83       	std	Z+3, r25	; 0x03
     4b2:	82 83       	std	Z+2, r24	; 0x02
     4b4:	8c e5       	ldi	r24, 0x5C	; 92
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	08 95       	ret

000004ba <orientationCalculationFour>:
     4ba:	2f 92       	push	r2
     4bc:	3f 92       	push	r3
     4be:	4f 92       	push	r4
     4c0:	5f 92       	push	r5
     4c2:	6f 92       	push	r6
     4c4:	7f 92       	push	r7
     4c6:	8f 92       	push	r8
     4c8:	9f 92       	push	r9
     4ca:	af 92       	push	r10
     4cc:	bf 92       	push	r11
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <orientationCalculationFour+0x26>
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <orientationCalculationFour+0x28>
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	5c 01       	movw	r10, r24
     4e8:	4a 01       	movw	r8, r20
     4ea:	3a 83       	std	Y+2, r19	; 0x02
     4ec:	29 83       	std	Y+1, r18	; 0x01
     4ee:	06 2f       	mov	r16, r22
     4f0:	17 2f       	mov	r17, r23
     4f2:	f8 01       	movw	r30, r16
     4f4:	41 90       	ld	r4, Z+
     4f6:	51 90       	ld	r5, Z+
     4f8:	61 90       	ld	r6, Z+
     4fa:	71 90       	ld	r7, Z+
     4fc:	8f 01       	movw	r16, r30
     4fe:	1c 82       	std	Y+4, r1	; 0x04
     500:	1b 82       	std	Y+3, r1	; 0x03
     502:	21 2c       	mov	r2, r1
     504:	31 2c       	mov	r3, r1
     506:	12 c0       	rjmp	.+36     	; 0x52c <orientationCalculationFour+0x72>
     508:	f8 01       	movw	r30, r16
     50a:	c1 90       	ld	r12, Z+
     50c:	d1 90       	ld	r13, Z+
     50e:	e1 90       	ld	r14, Z+
     510:	f1 90       	ld	r15, Z+
     512:	8f 01       	movw	r16, r30
     514:	a7 01       	movw	r20, r14
     516:	96 01       	movw	r18, r12
     518:	c3 01       	movw	r24, r6
     51a:	b2 01       	movw	r22, r4
     51c:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__gesf2>
     520:	18 16       	cp	r1, r24
     522:	24 f4       	brge	.+8      	; 0x52c <orientationCalculationFour+0x72>
     524:	26 01       	movw	r4, r12
     526:	37 01       	movw	r6, r14
     528:	2b 80       	ldd	r2, Y+3	; 0x03
     52a:	3c 80       	ldd	r3, Y+4	; 0x04
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	9c 83       	std	Y+4, r25	; 0x04
     534:	8b 83       	std	Y+3, r24	; 0x03
     536:	06 97       	sbiw	r24, 0x06	; 6
     538:	39 f7       	brne	.-50     	; 0x508 <orientationCalculationFour+0x4e>
     53a:	82 2d       	mov	r24, r2
     53c:	93 2d       	mov	r25, r3
     53e:	0e 94 0f 02 	call	0x41e	; 0x41e <distIndex>
     542:	fc 01       	movw	r30, r24
     544:	20 81       	ld	r18, Z
     546:	31 81       	ldd	r19, Z+1	; 0x01
     548:	62 81       	ldd	r22, Z+2	; 0x02
     54a:	73 81       	ldd	r23, Z+3	; 0x03
     54c:	f5 01       	movw	r30, r10
     54e:	40 81       	ld	r20, Z
     550:	51 81       	ldd	r21, Z+1	; 0x01
     552:	24 17       	cp	r18, r20
     554:	35 07       	cpc	r19, r21
     556:	59 f4       	brne	.+22     	; 0x56e <orientationCalculationFour+0xb4>
     558:	f4 01       	movw	r30, r8
     55a:	31 83       	std	Z+1, r19	; 0x01
     55c:	20 83       	st	Z, r18
     55e:	f5 01       	movw	r30, r10
     560:	82 81       	ldd	r24, Z+2	; 0x02
     562:	93 81       	ldd	r25, Z+3	; 0x03
     564:	e9 81       	ldd	r30, Y+1	; 0x01
     566:	fa 81       	ldd	r31, Y+2	; 0x02
     568:	91 83       	std	Z+1, r25	; 0x01
     56a:	80 83       	st	Z, r24
     56c:	37 c0       	rjmp	.+110    	; 0x5dc <orientationCalculationFour+0x122>
     56e:	f5 01       	movw	r30, r10
     570:	82 81       	ldd	r24, Z+2	; 0x02
     572:	93 81       	ldd	r25, Z+3	; 0x03
     574:	28 17       	cp	r18, r24
     576:	39 07       	cpc	r19, r25
     578:	59 f4       	brne	.+22     	; 0x590 <orientationCalculationFour+0xd6>
     57a:	f4 01       	movw	r30, r8
     57c:	31 83       	std	Z+1, r19	; 0x01
     57e:	20 83       	st	Z, r18
     580:	f5 01       	movw	r30, r10
     582:	80 81       	ld	r24, Z
     584:	91 81       	ldd	r25, Z+1	; 0x01
     586:	e9 81       	ldd	r30, Y+1	; 0x01
     588:	fa 81       	ldd	r31, Y+2	; 0x02
     58a:	91 83       	std	Z+1, r25	; 0x01
     58c:	80 83       	st	Z, r24
     58e:	26 c0       	rjmp	.+76     	; 0x5dc <orientationCalculationFour+0x122>
     590:	64 17       	cp	r22, r20
     592:	75 07       	cpc	r23, r21
     594:	59 f4       	brne	.+22     	; 0x5ac <orientationCalculationFour+0xf2>
     596:	f4 01       	movw	r30, r8
     598:	71 83       	std	Z+1, r23	; 0x01
     59a:	60 83       	st	Z, r22
     59c:	f5 01       	movw	r30, r10
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	e9 81       	ldd	r30, Y+1	; 0x01
     5a4:	fa 81       	ldd	r31, Y+2	; 0x02
     5a6:	91 83       	std	Z+1, r25	; 0x01
     5a8:	80 83       	st	Z, r24
     5aa:	18 c0       	rjmp	.+48     	; 0x5dc <orientationCalculationFour+0x122>
     5ac:	68 17       	cp	r22, r24
     5ae:	79 07       	cpc	r23, r25
     5b0:	59 f4       	brne	.+22     	; 0x5c8 <orientationCalculationFour+0x10e>
     5b2:	f4 01       	movw	r30, r8
     5b4:	71 83       	std	Z+1, r23	; 0x01
     5b6:	60 83       	st	Z, r22
     5b8:	f5 01       	movw	r30, r10
     5ba:	80 81       	ld	r24, Z
     5bc:	91 81       	ldd	r25, Z+1	; 0x01
     5be:	e9 81       	ldd	r30, Y+1	; 0x01
     5c0:	fa 81       	ldd	r31, Y+2	; 0x02
     5c2:	91 83       	std	Z+1, r25	; 0x01
     5c4:	80 83       	st	Z, r24
     5c6:	0a c0       	rjmp	.+20     	; 0x5dc <orientationCalculationFour+0x122>
     5c8:	f4 01       	movw	r30, r8
     5ca:	91 83       	std	Z+1, r25	; 0x01
     5cc:	80 83       	st	Z, r24
     5ce:	f5 01       	movw	r30, r10
     5d0:	80 81       	ld	r24, Z
     5d2:	91 81       	ldd	r25, Z+1	; 0x01
     5d4:	e9 81       	ldd	r30, Y+1	; 0x01
     5d6:	fa 81       	ldd	r31, Y+2	; 0x02
     5d8:	91 83       	std	Z+1, r25	; 0x01
     5da:	80 83       	st	Z, r24
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	bf 90       	pop	r11
     5f6:	af 90       	pop	r10
     5f8:	9f 90       	pop	r9
     5fa:	8f 90       	pop	r8
     5fc:	7f 90       	pop	r7
     5fe:	6f 90       	pop	r6
     600:	5f 90       	pop	r5
     602:	4f 90       	pop	r4
     604:	3f 90       	pop	r3
     606:	2f 90       	pop	r2
     608:	08 95       	ret

0000060a <fourPointCalc>:
     60a:	2f 92       	push	r2
     60c:	3f 92       	push	r3
     60e:	4f 92       	push	r4
     610:	5f 92       	push	r5
     612:	6f 92       	push	r6
     614:	7f 92       	push	r7
     616:	8f 92       	push	r8
     618:	9f 92       	push	r9
     61a:	af 92       	push	r10
     61c:	bf 92       	push	r11
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	c2 54       	subi	r28, 0x42	; 66
     634:	d1 09       	sbc	r29, r1
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	2c 01       	movw	r4, r24
     642:	fc 01       	movw	r30, r24
     644:	04 80       	ldd	r0, Z+4	; 0x04
     646:	f5 81       	ldd	r31, Z+5	; 0x05
     648:	e0 2d       	mov	r30, r0
     64a:	fa a3       	std	Y+34, r31	; 0x22
     64c:	e9 a3       	std	Y+33, r30	; 0x21
     64e:	fc 01       	movw	r30, r24
     650:	00 81       	ld	r16, Z
     652:	11 81       	ldd	r17, Z+1	; 0x01
     654:	69 a1       	ldd	r22, Y+33	; 0x21
     656:	7a a1       	ldd	r23, Y+34	; 0x22
     658:	60 1b       	sub	r22, r16
     65a:	71 0b       	sbc	r23, r17
     65c:	07 2e       	mov	r0, r23
     65e:	00 0c       	add	r0, r0
     660:	88 0b       	sbc	r24, r24
     662:	99 0b       	sbc	r25, r25
     664:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     668:	6b 01       	movw	r12, r22
     66a:	7c 01       	movw	r14, r24
     66c:	f2 01       	movw	r30, r4
     66e:	06 80       	ldd	r0, Z+6	; 0x06
     670:	f7 81       	ldd	r31, Z+7	; 0x07
     672:	e0 2d       	mov	r30, r0
     674:	fe a3       	std	Y+38, r31	; 0x26
     676:	ed a3       	std	Y+37, r30	; 0x25
     678:	f2 01       	movw	r30, r4
     67a:	22 80       	ldd	r2, Z+2	; 0x02
     67c:	33 80       	ldd	r3, Z+3	; 0x03
     67e:	ad a0       	ldd	r10, Y+37	; 0x25
     680:	be a0       	ldd	r11, Y+38	; 0x26
     682:	a2 18       	sub	r10, r2
     684:	b3 08       	sbc	r11, r3
     686:	9b 01       	movw	r18, r22
     688:	ac 01       	movw	r20, r24
     68a:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     68e:	69 a7       	std	Y+41, r22	; 0x29
     690:	7a a7       	std	Y+42, r23	; 0x2a
     692:	8b a7       	std	Y+43, r24	; 0x2b
     694:	9c a7       	std	Y+44, r25	; 0x2c
     696:	aa 9c       	mul	r10, r10
     698:	40 01       	movw	r8, r0
     69a:	ab 9c       	mul	r10, r11
     69c:	90 0c       	add	r9, r0
     69e:	90 0c       	add	r9, r0
     6a0:	11 24       	eor	r1, r1
     6a2:	09 2c       	mov	r0, r9
     6a4:	00 0c       	add	r0, r0
     6a6:	aa 08       	sbc	r10, r10
     6a8:	bb 08       	sbc	r11, r11
     6aa:	a7 01       	movw	r20, r14
     6ac:	96 01       	movw	r18, r12
     6ae:	c7 01       	movw	r24, r14
     6b0:	b6 01       	movw	r22, r12
     6b2:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     6b6:	6b 01       	movw	r12, r22
     6b8:	7c 01       	movw	r14, r24
     6ba:	c5 01       	movw	r24, r10
     6bc:	b4 01       	movw	r22, r8
     6be:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     6c2:	9b 01       	movw	r18, r22
     6c4:	ac 01       	movw	r20, r24
     6c6:	c7 01       	movw	r24, r14
     6c8:	b6 01       	movw	r22, r12
     6ca:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
     6ce:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <sqrt>
     6d2:	6b af       	std	Y+59, r22	; 0x3b
     6d4:	7c af       	std	Y+60, r23	; 0x3c
     6d6:	8d af       	std	Y+61, r24	; 0x3d
     6d8:	9e af       	std	Y+62, r25	; 0x3e
     6da:	f2 01       	movw	r30, r4
     6dc:	00 84       	ldd	r0, Z+8	; 0x08
     6de:	f1 85       	ldd	r31, Z+9	; 0x09
     6e0:	e0 2d       	mov	r30, r0
     6e2:	fa a7       	std	Y+42, r31	; 0x2a
     6e4:	e9 a7       	std	Y+41, r30	; 0x29
     6e6:	bf 01       	movw	r22, r30
     6e8:	60 1b       	sub	r22, r16
     6ea:	71 0b       	sbc	r23, r17
     6ec:	07 2e       	mov	r0, r23
     6ee:	00 0c       	add	r0, r0
     6f0:	88 0b       	sbc	r24, r24
     6f2:	99 0b       	sbc	r25, r25
     6f4:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     6f8:	6b 01       	movw	r12, r22
     6fa:	7c 01       	movw	r14, r24
     6fc:	f2 01       	movw	r30, r4
     6fe:	62 84       	ldd	r6, Z+10	; 0x0a
     700:	73 84       	ldd	r7, Z+11	; 0x0b
     702:	53 01       	movw	r10, r6
     704:	a2 18       	sub	r10, r2
     706:	b3 08       	sbc	r11, r3
     708:	9b 01       	movw	r18, r22
     70a:	ac 01       	movw	r20, r24
     70c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     710:	6d a7       	std	Y+45, r22	; 0x2d
     712:	7e a7       	std	Y+46, r23	; 0x2e
     714:	8f a7       	std	Y+47, r24	; 0x2f
     716:	98 ab       	std	Y+48, r25	; 0x30
     718:	aa 9c       	mul	r10, r10
     71a:	40 01       	movw	r8, r0
     71c:	ab 9c       	mul	r10, r11
     71e:	90 0c       	add	r9, r0
     720:	90 0c       	add	r9, r0
     722:	11 24       	eor	r1, r1
     724:	09 2c       	mov	r0, r9
     726:	00 0c       	add	r0, r0
     728:	aa 08       	sbc	r10, r10
     72a:	bb 08       	sbc	r11, r11
     72c:	a7 01       	movw	r20, r14
     72e:	96 01       	movw	r18, r12
     730:	c7 01       	movw	r24, r14
     732:	b6 01       	movw	r22, r12
     734:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     738:	6b 01       	movw	r12, r22
     73a:	7c 01       	movw	r14, r24
     73c:	c5 01       	movw	r24, r10
     73e:	b4 01       	movw	r22, r8
     740:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     744:	9b 01       	movw	r18, r22
     746:	ac 01       	movw	r20, r24
     748:	c7 01       	movw	r24, r14
     74a:	b6 01       	movw	r22, r12
     74c:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
     750:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <sqrt>
     754:	23 96       	adiw	r28, 0x03	; 3
     756:	6c af       	std	Y+60, r22	; 0x3c
     758:	7d af       	std	Y+61, r23	; 0x3d
     75a:	8e af       	std	Y+62, r24	; 0x3e
     75c:	9f af       	std	Y+63, r25	; 0x3f
     75e:	23 97       	sbiw	r28, 0x03	; 3
     760:	f2 01       	movw	r30, r4
     762:	04 84       	ldd	r0, Z+12	; 0x0c
     764:	f5 85       	ldd	r31, Z+13	; 0x0d
     766:	e0 2d       	mov	r30, r0
     768:	fe a7       	std	Y+46, r31	; 0x2e
     76a:	ed a7       	std	Y+45, r30	; 0x2d
     76c:	bf 01       	movw	r22, r30
     76e:	60 1b       	sub	r22, r16
     770:	71 0b       	sbc	r23, r17
     772:	07 2e       	mov	r0, r23
     774:	00 0c       	add	r0, r0
     776:	88 0b       	sbc	r24, r24
     778:	99 0b       	sbc	r25, r25
     77a:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     77e:	4b 01       	movw	r8, r22
     780:	5c 01       	movw	r10, r24
     782:	f2 01       	movw	r30, r4
     784:	06 84       	ldd	r0, Z+14	; 0x0e
     786:	f7 85       	ldd	r31, Z+15	; 0x0f
     788:	e0 2d       	mov	r30, r0
     78a:	fa ab       	std	Y+50, r31	; 0x32
     78c:	e9 ab       	std	Y+49, r30	; 0x31
     78e:	8f 01       	movw	r16, r30
     790:	02 19       	sub	r16, r2
     792:	13 09       	sbc	r17, r3
     794:	9b 01       	movw	r18, r22
     796:	ac 01       	movw	r20, r24
     798:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     79c:	6b ab       	std	Y+51, r22	; 0x33
     79e:	7c ab       	std	Y+52, r23	; 0x34
     7a0:	8d ab       	std	Y+53, r24	; 0x35
     7a2:	9e ab       	std	Y+54, r25	; 0x36
     7a4:	00 9f       	mul	r16, r16
     7a6:	60 01       	movw	r12, r0
     7a8:	01 9f       	mul	r16, r17
     7aa:	d0 0c       	add	r13, r0
     7ac:	d0 0c       	add	r13, r0
     7ae:	11 24       	eor	r1, r1
     7b0:	0d 2c       	mov	r0, r13
     7b2:	00 0c       	add	r0, r0
     7b4:	ee 08       	sbc	r14, r14
     7b6:	ff 08       	sbc	r15, r15
     7b8:	a5 01       	movw	r20, r10
     7ba:	94 01       	movw	r18, r8
     7bc:	c5 01       	movw	r24, r10
     7be:	b4 01       	movw	r22, r8
     7c0:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     7c4:	4b 01       	movw	r8, r22
     7c6:	5c 01       	movw	r10, r24
     7c8:	c7 01       	movw	r24, r14
     7ca:	b6 01       	movw	r22, r12
     7cc:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     7d0:	9b 01       	movw	r18, r22
     7d2:	ac 01       	movw	r20, r24
     7d4:	c5 01       	movw	r24, r10
     7d6:	b4 01       	movw	r22, r8
     7d8:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
     7dc:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <sqrt>
     7e0:	6b ab       	std	Y+51, r22	; 0x33
     7e2:	7c ab       	std	Y+52, r23	; 0x34
     7e4:	8d ab       	std	Y+53, r24	; 0x35
     7e6:	9e ab       	std	Y+54, r25	; 0x36
     7e8:	69 a5       	ldd	r22, Y+41	; 0x29
     7ea:	7a a5       	ldd	r23, Y+42	; 0x2a
     7ec:	29 a1       	ldd	r18, Y+33	; 0x21
     7ee:	3a a1       	ldd	r19, Y+34	; 0x22
     7f0:	62 1b       	sub	r22, r18
     7f2:	73 0b       	sbc	r23, r19
     7f4:	07 2e       	mov	r0, r23
     7f6:	00 0c       	add	r0, r0
     7f8:	88 0b       	sbc	r24, r24
     7fa:	99 0b       	sbc	r25, r25
     7fc:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     800:	4b 01       	movw	r8, r22
     802:	5c 01       	movw	r10, r24
     804:	83 01       	movw	r16, r6
     806:	4d a1       	ldd	r20, Y+37	; 0x25
     808:	5e a1       	ldd	r21, Y+38	; 0x26
     80a:	04 1b       	sub	r16, r20
     80c:	15 0b       	sbc	r17, r21
     80e:	9b 01       	movw	r18, r22
     810:	ac 01       	movw	r20, r24
     812:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     816:	6f ab       	std	Y+55, r22	; 0x37
     818:	78 af       	std	Y+56, r23	; 0x38
     81a:	89 af       	std	Y+57, r24	; 0x39
     81c:	9a af       	std	Y+58, r25	; 0x3a
     81e:	00 9f       	mul	r16, r16
     820:	60 01       	movw	r12, r0
     822:	01 9f       	mul	r16, r17
     824:	d0 0c       	add	r13, r0
     826:	d0 0c       	add	r13, r0
     828:	11 24       	eor	r1, r1
     82a:	0d 2c       	mov	r0, r13
     82c:	00 0c       	add	r0, r0
     82e:	ee 08       	sbc	r14, r14
     830:	ff 08       	sbc	r15, r15
     832:	a5 01       	movw	r20, r10
     834:	94 01       	movw	r18, r8
     836:	c5 01       	movw	r24, r10
     838:	b4 01       	movw	r22, r8
     83a:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     83e:	4b 01       	movw	r8, r22
     840:	5c 01       	movw	r10, r24
     842:	c7 01       	movw	r24, r14
     844:	b6 01       	movw	r22, r12
     846:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     84a:	9b 01       	movw	r18, r22
     84c:	ac 01       	movw	r20, r24
     84e:	c5 01       	movw	r24, r10
     850:	b4 01       	movw	r22, r8
     852:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
     856:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <sqrt>
     85a:	6f ab       	std	Y+55, r22	; 0x37
     85c:	78 af       	std	Y+56, r23	; 0x38
     85e:	89 af       	std	Y+57, r24	; 0x39
     860:	9a af       	std	Y+58, r25	; 0x3a
     862:	6d a5       	ldd	r22, Y+45	; 0x2d
     864:	7e a5       	ldd	r23, Y+46	; 0x2e
     866:	89 a1       	ldd	r24, Y+33	; 0x21
     868:	9a a1       	ldd	r25, Y+34	; 0x22
     86a:	68 1b       	sub	r22, r24
     86c:	79 0b       	sbc	r23, r25
     86e:	07 2e       	mov	r0, r23
     870:	00 0c       	add	r0, r0
     872:	88 0b       	sbc	r24, r24
     874:	99 0b       	sbc	r25, r25
     876:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     87a:	4b 01       	movw	r8, r22
     87c:	5c 01       	movw	r10, r24
     87e:	09 a9       	ldd	r16, Y+49	; 0x31
     880:	1a a9       	ldd	r17, Y+50	; 0x32
     882:	ed a1       	ldd	r30, Y+37	; 0x25
     884:	fe a1       	ldd	r31, Y+38	; 0x26
     886:	0e 1b       	sub	r16, r30
     888:	1f 0b       	sbc	r17, r31
     88a:	9b 01       	movw	r18, r22
     88c:	ac 01       	movw	r20, r24
     88e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     892:	69 a3       	std	Y+33, r22	; 0x21
     894:	7a a3       	std	Y+34, r23	; 0x22
     896:	8b a3       	std	Y+35, r24	; 0x23
     898:	9c a3       	std	Y+36, r25	; 0x24
     89a:	00 9f       	mul	r16, r16
     89c:	60 01       	movw	r12, r0
     89e:	01 9f       	mul	r16, r17
     8a0:	d0 0c       	add	r13, r0
     8a2:	d0 0c       	add	r13, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	0d 2c       	mov	r0, r13
     8a8:	00 0c       	add	r0, r0
     8aa:	ee 08       	sbc	r14, r14
     8ac:	ff 08       	sbc	r15, r15
     8ae:	a5 01       	movw	r20, r10
     8b0:	94 01       	movw	r18, r8
     8b2:	c5 01       	movw	r24, r10
     8b4:	b4 01       	movw	r22, r8
     8b6:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     8ba:	4b 01       	movw	r8, r22
     8bc:	5c 01       	movw	r10, r24
     8be:	c7 01       	movw	r24, r14
     8c0:	b6 01       	movw	r22, r12
     8c2:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     8c6:	9b 01       	movw	r18, r22
     8c8:	ac 01       	movw	r20, r24
     8ca:	c5 01       	movw	r24, r10
     8cc:	b4 01       	movw	r22, r8
     8ce:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
     8d2:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <sqrt>
     8d6:	4b 01       	movw	r8, r22
     8d8:	5c 01       	movw	r10, r24
     8da:	6d a5       	ldd	r22, Y+45	; 0x2d
     8dc:	7e a5       	ldd	r23, Y+46	; 0x2e
     8de:	29 a5       	ldd	r18, Y+41	; 0x29
     8e0:	3a a5       	ldd	r19, Y+42	; 0x2a
     8e2:	62 1b       	sub	r22, r18
     8e4:	73 0b       	sbc	r23, r19
     8e6:	07 2e       	mov	r0, r23
     8e8:	00 0c       	add	r0, r0
     8ea:	88 0b       	sbc	r24, r24
     8ec:	99 0b       	sbc	r25, r25
     8ee:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     8f2:	69 a3       	std	Y+33, r22	; 0x21
     8f4:	7a a3       	std	Y+34, r23	; 0x22
     8f6:	8b a3       	std	Y+35, r24	; 0x23
     8f8:	9c a3       	std	Y+36, r25	; 0x24
     8fa:	09 a9       	ldd	r16, Y+49	; 0x31
     8fc:	1a a9       	ldd	r17, Y+50	; 0x32
     8fe:	06 19       	sub	r16, r6
     900:	17 09       	sbc	r17, r7
     902:	9b 01       	movw	r18, r22
     904:	ac 01       	movw	r20, r24
     906:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     90a:	6d a3       	std	Y+37, r22	; 0x25
     90c:	7e a3       	std	Y+38, r23	; 0x26
     90e:	8f a3       	std	Y+39, r24	; 0x27
     910:	98 a7       	std	Y+40, r25	; 0x28
     912:	00 9f       	mul	r16, r16
     914:	60 01       	movw	r12, r0
     916:	01 9f       	mul	r16, r17
     918:	d0 0c       	add	r13, r0
     91a:	d0 0c       	add	r13, r0
     91c:	11 24       	eor	r1, r1
     91e:	0d 2c       	mov	r0, r13
     920:	00 0c       	add	r0, r0
     922:	ee 08       	sbc	r14, r14
     924:	ff 08       	sbc	r15, r15
     926:	29 a1       	ldd	r18, Y+33	; 0x21
     928:	3a a1       	ldd	r19, Y+34	; 0x22
     92a:	4b a1       	ldd	r20, Y+35	; 0x23
     92c:	5c a1       	ldd	r21, Y+36	; 0x24
     92e:	ca 01       	movw	r24, r20
     930:	b9 01       	movw	r22, r18
     932:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     936:	69 a3       	std	Y+33, r22	; 0x21
     938:	7a a3       	std	Y+34, r23	; 0x22
     93a:	8b a3       	std	Y+35, r24	; 0x23
     93c:	9c a3       	std	Y+36, r25	; 0x24
     93e:	c7 01       	movw	r24, r14
     940:	b6 01       	movw	r22, r12
     942:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     946:	9b 01       	movw	r18, r22
     948:	ac 01       	movw	r20, r24
     94a:	69 a1       	ldd	r22, Y+33	; 0x21
     94c:	7a a1       	ldd	r23, Y+34	; 0x22
     94e:	8b a1       	ldd	r24, Y+35	; 0x23
     950:	9c a1       	ldd	r25, Y+36	; 0x24
     952:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
     956:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <sqrt>
     95a:	2b ad       	ldd	r18, Y+59	; 0x3b
     95c:	3c ad       	ldd	r19, Y+60	; 0x3c
     95e:	4d ad       	ldd	r20, Y+61	; 0x3d
     960:	5e ad       	ldd	r21, Y+62	; 0x3e
     962:	29 83       	std	Y+1, r18	; 0x01
     964:	3a 83       	std	Y+2, r19	; 0x02
     966:	4b 83       	std	Y+3, r20	; 0x03
     968:	5c 83       	std	Y+4, r21	; 0x04
     96a:	23 96       	adiw	r28, 0x03	; 3
     96c:	2c ad       	ldd	r18, Y+60	; 0x3c
     96e:	3d ad       	ldd	r19, Y+61	; 0x3d
     970:	4e ad       	ldd	r20, Y+62	; 0x3e
     972:	5f ad       	ldd	r21, Y+63	; 0x3f
     974:	23 97       	sbiw	r28, 0x03	; 3
     976:	2d 83       	std	Y+5, r18	; 0x05
     978:	3e 83       	std	Y+6, r19	; 0x06
     97a:	4f 83       	std	Y+7, r20	; 0x07
     97c:	58 87       	std	Y+8, r21	; 0x08
     97e:	2b a9       	ldd	r18, Y+51	; 0x33
     980:	3c a9       	ldd	r19, Y+52	; 0x34
     982:	4d a9       	ldd	r20, Y+53	; 0x35
     984:	5e a9       	ldd	r21, Y+54	; 0x36
     986:	29 87       	std	Y+9, r18	; 0x09
     988:	3a 87       	std	Y+10, r19	; 0x0a
     98a:	4b 87       	std	Y+11, r20	; 0x0b
     98c:	5c 87       	std	Y+12, r21	; 0x0c
     98e:	2f a9       	ldd	r18, Y+55	; 0x37
     990:	38 ad       	ldd	r19, Y+56	; 0x38
     992:	49 ad       	ldd	r20, Y+57	; 0x39
     994:	5a ad       	ldd	r21, Y+58	; 0x3a
     996:	2d 87       	std	Y+13, r18	; 0x0d
     998:	3e 87       	std	Y+14, r19	; 0x0e
     99a:	4f 87       	std	Y+15, r20	; 0x0f
     99c:	58 8b       	std	Y+16, r21	; 0x10
     99e:	89 8a       	std	Y+17, r8	; 0x11
     9a0:	9a 8a       	std	Y+18, r9	; 0x12
     9a2:	ab 8a       	std	Y+19, r10	; 0x13
     9a4:	bc 8a       	std	Y+20, r11	; 0x14
     9a6:	6d 8b       	std	Y+21, r22	; 0x15
     9a8:	7e 8b       	std	Y+22, r23	; 0x16
     9aa:	8f 8b       	std	Y+23, r24	; 0x17
     9ac:	98 8f       	std	Y+24, r25	; 0x18
     9ae:	ae 01       	movw	r20, r28
     9b0:	4f 5f       	subi	r20, 0xFF	; 255
     9b2:	5f 4f       	sbci	r21, 0xFF	; 255
     9b4:	7a 01       	movw	r14, r20
     9b6:	00 e0       	ldi	r16, 0x00	; 0
     9b8:	10 e0       	ldi	r17, 0x00	; 0
     9ba:	61 2c       	mov	r6, r1
     9bc:	71 2c       	mov	r7, r1
     9be:	c1 2c       	mov	r12, r1
     9c0:	d1 2c       	mov	r13, r1
     9c2:	21 2c       	mov	r2, r1
     9c4:	31 2c       	mov	r3, r1
     9c6:	f7 01       	movw	r30, r14
     9c8:	81 90       	ld	r8, Z+
     9ca:	91 90       	ld	r9, Z+
     9cc:	a1 90       	ld	r10, Z+
     9ce:	b1 90       	ld	r11, Z+
     9d0:	7f 01       	movw	r14, r30
     9d2:	26 2d       	mov	r18, r6
     9d4:	37 2d       	mov	r19, r7
     9d6:	4c 2d       	mov	r20, r12
     9d8:	5d 2d       	mov	r21, r13
     9da:	c5 01       	movw	r24, r10
     9dc:	b4 01       	movw	r22, r8
     9de:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__gesf2>
     9e2:	18 16       	cp	r1, r24
     9e4:	34 f4       	brge	.+12     	; 0x9f2 <fourPointCalc+0x3e8>
     9e6:	68 2c       	mov	r6, r8
     9e8:	79 2c       	mov	r7, r9
     9ea:	ca 2c       	mov	r12, r10
     9ec:	db 2c       	mov	r13, r11
     9ee:	20 2e       	mov	r2, r16
     9f0:	31 2e       	mov	r3, r17
     9f2:	0f 5f       	subi	r16, 0xFF	; 255
     9f4:	1f 4f       	sbci	r17, 0xFF	; 255
     9f6:	06 30       	cpi	r16, 0x06	; 6
     9f8:	11 05       	cpc	r17, r1
     9fa:	29 f7       	brne	.-54     	; 0x9c6 <fourPointCalc+0x3bc>
     9fc:	82 2d       	mov	r24, r2
     9fe:	93 2d       	mov	r25, r3
     a00:	0e 94 0f 02 	call	0x41e	; 0x41e <distIndex>
     a04:	fc 01       	movw	r30, r24
     a06:	e0 80       	ld	r14, Z
     a08:	f1 80       	ldd	r15, Z+1	; 0x01
     a0a:	fa 8e       	std	Y+26, r15	; 0x1a
     a0c:	e9 8e       	std	Y+25, r14	; 0x19
     a0e:	02 81       	ldd	r16, Z+2	; 0x02
     a10:	13 81       	ldd	r17, Z+3	; 0x03
     a12:	1c 8f       	std	Y+28, r17	; 0x1c
     a14:	0b 8f       	std	Y+27, r16	; 0x1b
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	ee 0c       	add	r14, r14
     a1c:	ff 1c       	adc	r15, r15
     a1e:	e4 0c       	add	r14, r4
     a20:	f5 1c       	adc	r15, r5
     a22:	00 0f       	add	r16, r16
     a24:	11 1f       	adc	r17, r17
     a26:	00 0f       	add	r16, r16
     a28:	11 1f       	adc	r17, r17
     a2a:	04 0d       	add	r16, r4
     a2c:	15 1d       	adc	r17, r5
     a2e:	f7 01       	movw	r30, r14
     a30:	60 81       	ld	r22, Z
     a32:	71 81       	ldd	r23, Z+1	; 0x01
     a34:	f8 01       	movw	r30, r16
     a36:	80 81       	ld	r24, Z
     a38:	91 81       	ldd	r25, Z+1	; 0x01
     a3a:	68 0f       	add	r22, r24
     a3c:	79 1f       	adc	r23, r25
     a3e:	77 23       	and	r23, r23
     a40:	14 f4       	brge	.+4      	; 0xa46 <fourPointCalc+0x43c>
     a42:	6f 5f       	subi	r22, 0xFF	; 255
     a44:	7f 4f       	sbci	r23, 0xFF	; 255
     a46:	75 95       	asr	r23
     a48:	67 95       	ror	r22
     a4a:	07 2e       	mov	r0, r23
     a4c:	00 0c       	add	r0, r0
     a4e:	88 0b       	sbc	r24, r24
     a50:	99 0b       	sbc	r25, r25
     a52:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     a56:	4b 01       	movw	r8, r22
     a58:	5c 01       	movw	r10, r24
     a5a:	f7 01       	movw	r30, r14
     a5c:	62 81       	ldd	r22, Z+2	; 0x02
     a5e:	73 81       	ldd	r23, Z+3	; 0x03
     a60:	f8 01       	movw	r30, r16
     a62:	82 81       	ldd	r24, Z+2	; 0x02
     a64:	93 81       	ldd	r25, Z+3	; 0x03
     a66:	68 0f       	add	r22, r24
     a68:	79 1f       	adc	r23, r25
     a6a:	77 23       	and	r23, r23
     a6c:	14 f4       	brge	.+4      	; 0xa72 <fourPointCalc+0x468>
     a6e:	6f 5f       	subi	r22, 0xFF	; 255
     a70:	7f 4f       	sbci	r23, 0xFF	; 255
     a72:	75 95       	asr	r23
     a74:	67 95       	ror	r22
     a76:	07 2e       	mov	r0, r23
     a78:	00 0c       	add	r0, r0
     a7a:	88 0b       	sbc	r24, r24
     a7c:	99 0b       	sbc	r25, r25
     a7e:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     a82:	69 a3       	std	Y+33, r22	; 0x21
     a84:	7a a3       	std	Y+34, r23	; 0x22
     a86:	8b a3       	std	Y+35, r24	; 0x23
     a88:	9c a3       	std	Y+36, r25	; 0x24
     a8a:	9e 01       	movw	r18, r28
     a8c:	21 5e       	subi	r18, 0xE1	; 225
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	ae 01       	movw	r20, r28
     a92:	43 5e       	subi	r20, 0xE3	; 227
     a94:	5f 4f       	sbci	r21, 0xFF	; 255
     a96:	be 01       	movw	r22, r28
     a98:	6f 5f       	subi	r22, 0xFF	; 255
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	ce 01       	movw	r24, r28
     a9e:	49 96       	adiw	r24, 0x19	; 25
     aa0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <orientationCalculationFour>
     aa4:	0d 8d       	ldd	r16, Y+29	; 0x1d
     aa6:	1e 8d       	ldd	r17, Y+30	; 0x1e
     aa8:	00 0f       	add	r16, r16
     aaa:	11 1f       	adc	r17, r17
     aac:	00 0f       	add	r16, r16
     aae:	11 1f       	adc	r17, r17
     ab0:	04 0d       	add	r16, r4
     ab2:	15 1d       	adc	r17, r5
     ab4:	2f 8c       	ldd	r2, Y+31	; 0x1f
     ab6:	38 a0       	ldd	r3, Y+32	; 0x20
     ab8:	22 0c       	add	r2, r2
     aba:	33 1c       	adc	r3, r3
     abc:	22 0c       	add	r2, r2
     abe:	33 1c       	adc	r3, r3
     ac0:	24 0c       	add	r2, r4
     ac2:	35 1c       	adc	r3, r5
     ac4:	f8 01       	movw	r30, r16
     ac6:	60 81       	ld	r22, Z
     ac8:	71 81       	ldd	r23, Z+1	; 0x01
     aca:	f1 01       	movw	r30, r2
     acc:	80 81       	ld	r24, Z
     ace:	91 81       	ldd	r25, Z+1	; 0x01
     ad0:	68 1b       	sub	r22, r24
     ad2:	79 0b       	sbc	r23, r25
     ad4:	07 2e       	mov	r0, r23
     ad6:	00 0c       	add	r0, r0
     ad8:	88 0b       	sbc	r24, r24
     ada:	99 0b       	sbc	r25, r25
     adc:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     ae0:	6b 01       	movw	r12, r22
     ae2:	7c 01       	movw	r14, r24
     ae4:	f8 01       	movw	r30, r16
     ae6:	62 81       	ldd	r22, Z+2	; 0x02
     ae8:	73 81       	ldd	r23, Z+3	; 0x03
     aea:	f1 01       	movw	r30, r2
     aec:	82 81       	ldd	r24, Z+2	; 0x02
     aee:	93 81       	ldd	r25, Z+3	; 0x03
     af0:	68 1b       	sub	r22, r24
     af2:	79 0b       	sbc	r23, r25
     af4:	07 2e       	mov	r0, r23
     af6:	00 0c       	add	r0, r0
     af8:	88 0b       	sbc	r24, r24
     afa:	99 0b       	sbc	r25, r25
     afc:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
     b00:	90 58       	subi	r25, 0x80	; 128
     b02:	a7 01       	movw	r20, r14
     b04:	96 01       	movw	r18, r12
     b06:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <atan2>
     b0a:	2b ed       	ldi	r18, 0xDB	; 219
     b0c:	3f e0       	ldi	r19, 0x0F	; 15
     b0e:	49 ec       	ldi	r20, 0xC9	; 201
     b10:	5f e3       	ldi	r21, 0x3F	; 63
     b12:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
     b16:	6b 01       	movw	r12, r22
     b18:	7c 01       	movw	r14, r24
     b1a:	a5 01       	movw	r20, r10
     b1c:	94 01       	movw	r18, r8
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	94 e4       	ldi	r25, 0x44	; 68
     b26:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
     b2a:	4b 01       	movw	r8, r22
     b2c:	5c 01       	movw	r10, r24
     b2e:	29 a1       	ldd	r18, Y+33	; 0x21
     b30:	3a a1       	ldd	r19, Y+34	; 0x22
     b32:	4b a1       	ldd	r20, Y+35	; 0x23
     b34:	5c a1       	ldd	r21, Y+36	; 0x24
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	8f eb       	ldi	r24, 0xBF	; 191
     b3c:	93 e4       	ldi	r25, 0x43	; 67
     b3e:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
     b42:	2b 01       	movw	r4, r22
     b44:	3c 01       	movw	r6, r24
     b46:	c7 01       	movw	r24, r14
     b48:	b6 01       	movw	r22, r12
     b4a:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <sin>
     b4e:	69 a3       	std	Y+33, r22	; 0x21
     b50:	7a a3       	std	Y+34, r23	; 0x22
     b52:	8b a3       	std	Y+35, r24	; 0x23
     b54:	9c a3       	std	Y+36, r25	; 0x24
     b56:	c7 01       	movw	r24, r14
     b58:	b6 01       	movw	r22, r12
     b5a:	0e 94 34 18 	call	0x3068	; 0x3068 <cos>
     b5e:	6d a3       	std	Y+37, r22	; 0x25
     b60:	7e a3       	std	Y+38, r23	; 0x26
     b62:	8f a3       	std	Y+39, r24	; 0x27
     b64:	98 a7       	std	Y+40, r25	; 0x28
     b66:	00 e6       	ldi	r16, 0x60	; 96
     b68:	11 e0       	ldi	r17, 0x01	; 1
     b6a:	29 a1       	ldd	r18, Y+33	; 0x21
     b6c:	3a a1       	ldd	r19, Y+34	; 0x22
     b6e:	4b a1       	ldd	r20, Y+35	; 0x23
     b70:	5c a1       	ldd	r21, Y+36	; 0x24
     b72:	c3 01       	movw	r24, r6
     b74:	b2 01       	movw	r22, r4
     b76:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     b7a:	69 a7       	std	Y+41, r22	; 0x29
     b7c:	7a a7       	std	Y+42, r23	; 0x2a
     b7e:	8b a7       	std	Y+43, r24	; 0x2b
     b80:	9c a7       	std	Y+44, r25	; 0x2c
     b82:	2d a1       	ldd	r18, Y+37	; 0x25
     b84:	3e a1       	ldd	r19, Y+38	; 0x26
     b86:	4f a1       	ldd	r20, Y+39	; 0x27
     b88:	58 a5       	ldd	r21, Y+40	; 0x28
     b8a:	c5 01       	movw	r24, r10
     b8c:	b4 01       	movw	r22, r8
     b8e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     b92:	9b 01       	movw	r18, r22
     b94:	ac 01       	movw	r20, r24
     b96:	69 a5       	ldd	r22, Y+41	; 0x29
     b98:	7a a5       	ldd	r23, Y+42	; 0x2a
     b9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     b9c:	9c a5       	ldd	r25, Y+44	; 0x2c
     b9e:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
     ba2:	f8 01       	movw	r30, r16
     ba4:	60 83       	st	Z, r22
     ba6:	71 83       	std	Z+1, r23	; 0x01
     ba8:	82 83       	std	Z+2, r24	; 0x02
     baa:	93 83       	std	Z+3, r25	; 0x03
     bac:	2d a1       	ldd	r18, Y+37	; 0x25
     bae:	3e a1       	ldd	r19, Y+38	; 0x26
     bb0:	4f a1       	ldd	r20, Y+39	; 0x27
     bb2:	58 a5       	ldd	r21, Y+40	; 0x28
     bb4:	c3 01       	movw	r24, r6
     bb6:	b2 01       	movw	r22, r4
     bb8:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     bbc:	2b 01       	movw	r4, r22
     bbe:	3c 01       	movw	r6, r24
     bc0:	29 a1       	ldd	r18, Y+33	; 0x21
     bc2:	3a a1       	ldd	r19, Y+34	; 0x22
     bc4:	4b a1       	ldd	r20, Y+35	; 0x23
     bc6:	5c a1       	ldd	r21, Y+36	; 0x24
     bc8:	c5 01       	movw	r24, r10
     bca:	b4 01       	movw	r22, r8
     bcc:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
     bd0:	9b 01       	movw	r18, r22
     bd2:	ac 01       	movw	r20, r24
     bd4:	c3 01       	movw	r24, r6
     bd6:	b2 01       	movw	r22, r4
     bd8:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
     bdc:	f8 01       	movw	r30, r16
     bde:	64 83       	std	Z+4, r22	; 0x04
     be0:	75 83       	std	Z+5, r23	; 0x05
     be2:	86 83       	std	Z+6, r24	; 0x06
     be4:	97 83       	std	Z+7, r25	; 0x07
     be6:	f7 fa       	bst	r15, 7
     be8:	f0 94       	com	r15
     bea:	f7 f8       	bld	r15, 7
     bec:	f0 94       	com	r15
     bee:	c0 86       	std	Z+8, r12	; 0x08
     bf0:	d1 86       	std	Z+9, r13	; 0x09
     bf2:	e2 86       	std	Z+10, r14	; 0x0a
     bf4:	f3 86       	std	Z+11, r15	; 0x0b
     bf6:	c8 01       	movw	r24, r16
     bf8:	ce 5b       	subi	r28, 0xBE	; 190
     bfa:	df 4f       	sbci	r29, 0xFF	; 255
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	1f 91       	pop	r17
     c0c:	0f 91       	pop	r16
     c0e:	ff 90       	pop	r15
     c10:	ef 90       	pop	r14
     c12:	df 90       	pop	r13
     c14:	cf 90       	pop	r12
     c16:	bf 90       	pop	r11
     c18:	af 90       	pop	r10
     c1a:	9f 90       	pop	r9
     c1c:	8f 90       	pop	r8
     c1e:	7f 90       	pop	r7
     c20:	6f 90       	pop	r6
     c22:	5f 90       	pop	r5
     c24:	4f 90       	pop	r4
     c26:	3f 90       	pop	r3
     c28:	2f 90       	pop	r2
     c2a:	08 95       	ret

00000c2c <localization_calc>:
     c2c:	4f 92       	push	r4
     c2e:	5f 92       	push	r5
     c30:	6f 92       	push	r6
     c32:	7f 92       	push	r7
     c34:	af 92       	push	r10
     c36:	bf 92       	push	r11
     c38:	cf 92       	push	r12
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	68 97       	sbiw	r28, 0x18	; 24
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	fc 01       	movw	r30, r24
     c5a:	0d b7       	in	r16, 0x3d	; 61
     c5c:	1e b7       	in	r17, 0x3e	; 62
     c5e:	80 81       	ld	r24, Z
     c60:	91 81       	ldd	r25, Z+1	; 0x01
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	80 85       	ldd	r24, Z+8	; 0x08
     c68:	91 85       	ldd	r25, Z+9	; 0x09
     c6a:	9c 83       	std	Y+4, r25	; 0x04
     c6c:	8b 83       	std	Y+3, r24	; 0x03
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	9e 83       	std	Y+6, r25	; 0x06
     c74:	8d 83       	std	Y+5, r24	; 0x05
     c76:	82 85       	ldd	r24, Z+10	; 0x0a
     c78:	93 85       	ldd	r25, Z+11	; 0x0b
     c7a:	98 87       	std	Y+8, r25	; 0x08
     c7c:	8f 83       	std	Y+7, r24	; 0x07
     c7e:	84 81       	ldd	r24, Z+4	; 0x04
     c80:	95 81       	ldd	r25, Z+5	; 0x05
     c82:	9a 87       	std	Y+10, r25	; 0x0a
     c84:	89 87       	std	Y+9, r24	; 0x09
     c86:	84 85       	ldd	r24, Z+12	; 0x0c
     c88:	95 85       	ldd	r25, Z+13	; 0x0d
     c8a:	9c 87       	std	Y+12, r25	; 0x0c
     c8c:	8b 87       	std	Y+11, r24	; 0x0b
     c8e:	86 81       	ldd	r24, Z+6	; 0x06
     c90:	97 81       	ldd	r25, Z+7	; 0x07
     c92:	9e 87       	std	Y+14, r25	; 0x0e
     c94:	8d 87       	std	Y+13, r24	; 0x0d
     c96:	86 85       	ldd	r24, Z+14	; 0x0e
     c98:	97 85       	ldd	r25, Z+15	; 0x0f
     c9a:	98 8b       	std	Y+16, r25	; 0x10
     c9c:	8f 87       	std	Y+15, r24	; 0x0f
     c9e:	fe 01       	movw	r30, r28
     ca0:	71 96       	adiw	r30, 0x11	; 17
     ca2:	88 e0       	ldi	r24, 0x08	; 8
     ca4:	df 01       	movw	r26, r30
     ca6:	1d 92       	st	X+, r1
     ca8:	8a 95       	dec	r24
     caa:	e9 f7       	brne	.-6      	; 0xca6 <localization_calc+0x7a>
     cac:	70 97       	sbiw	r30, 0x10	; 16
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	40 81       	ld	r20, Z
     cb8:	51 81       	ldd	r21, Z+1	; 0x01
     cba:	4f 3f       	cpi	r20, 0xFF	; 255
     cbc:	53 40       	sbci	r21, 0x03	; 3
     cbe:	71 f0       	breq	.+28     	; 0xcdc <localization_calc+0xb0>
     cc0:	dc 01       	movw	r26, r24
     cc2:	aa 0f       	add	r26, r26
     cc4:	bb 1f       	adc	r27, r27
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	4c 0f       	add	r20, r28
     ccc:	5d 1f       	adc	r21, r29
     cce:	a4 0f       	add	r26, r20
     cd0:	b5 1f       	adc	r27, r21
     cd2:	51 96       	adiw	r26, 0x11	; 17
     cd4:	3c 93       	st	X, r19
     cd6:	2e 93       	st	-X, r18
     cd8:	50 97       	sbiw	r26, 0x10	; 16
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	2f 5f       	subi	r18, 0xFF	; 255
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
     ce0:	34 96       	adiw	r30, 0x04	; 4
     ce2:	24 30       	cpi	r18, 0x04	; 4
     ce4:	31 05       	cpc	r19, r1
     ce6:	39 f7       	brne	.-50     	; 0xcb6 <localization_calc+0x8a>
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	09 f4       	brne	.+2      	; 0xcee <localization_calc+0xc2>
     cec:	89 c0       	rjmp	.+274    	; 0xe00 <localization_calc+0x1d4>
     cee:	ed b6       	in	r14, 0x3d	; 61
     cf0:	fe b6       	in	r15, 0x3e	; 62
     cf2:	6c 01       	movw	r12, r24
     cf4:	cc 0c       	add	r12, r12
     cf6:	dd 1c       	adc	r13, r13
     cf8:	cc 0c       	add	r12, r12
     cfa:	dd 1c       	adc	r13, r13
     cfc:	ad b7       	in	r26, 0x3d	; 61
     cfe:	be b7       	in	r27, 0x3e	; 62
     d00:	ac 19       	sub	r26, r12
     d02:	bd 09       	sbc	r27, r13
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	be bf       	out	0x3e, r27	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	ad bf       	out	0x3d, r26	; 61
     d0e:	ed b7       	in	r30, 0x3d	; 61
     d10:	fe b7       	in	r31, 0x3e	; 62
     d12:	31 96       	adiw	r30, 0x01	; 1
     d14:	5f 01       	movw	r10, r30
     d16:	18 16       	cp	r1, r24
     d18:	19 06       	cpc	r1, r25
     d1a:	24 f5       	brge	.+72     	; 0xd64 <localization_calc+0x138>
     d1c:	9e 01       	movw	r18, r28
     d1e:	2f 5e       	subi	r18, 0xEF	; 239
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	df 01       	movw	r26, r30
     d24:	ce 0e       	add	r12, r30
     d26:	df 1e       	adc	r13, r31
     d28:	f9 01       	movw	r30, r18
     d2a:	41 91       	ld	r20, Z+
     d2c:	51 91       	ld	r21, Z+
     d2e:	9f 01       	movw	r18, r30
     d30:	fa 01       	movw	r30, r20
     d32:	ee 0f       	add	r30, r30
     d34:	ff 1f       	adc	r31, r31
     d36:	ee 0f       	add	r30, r30
     d38:	ff 1f       	adc	r31, r31
     d3a:	41 e0       	ldi	r20, 0x01	; 1
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	4c 0f       	add	r20, r28
     d40:	5d 1f       	adc	r21, r29
     d42:	e4 0f       	add	r30, r20
     d44:	f5 1f       	adc	r31, r21
     d46:	40 81       	ld	r20, Z
     d48:	51 81       	ldd	r21, Z+1	; 0x01
     d4a:	11 96       	adiw	r26, 0x01	; 1
     d4c:	5c 93       	st	X, r21
     d4e:	4e 93       	st	-X, r20
     d50:	42 81       	ldd	r20, Z+2	; 0x02
     d52:	53 81       	ldd	r21, Z+3	; 0x03
     d54:	13 96       	adiw	r26, 0x03	; 3
     d56:	5c 93       	st	X, r21
     d58:	4e 93       	st	-X, r20
     d5a:	12 97       	sbiw	r26, 0x02	; 2
     d5c:	14 96       	adiw	r26, 0x04	; 4
     d5e:	ac 15       	cp	r26, r12
     d60:	bd 05       	cpc	r27, r13
     d62:	11 f7       	brne	.-60     	; 0xd28 <localization_calc+0xfc>
     d64:	db 01       	movw	r26, r22
     d66:	4d 90       	ld	r4, X+
     d68:	5d 90       	ld	r5, X+
     d6a:	6d 90       	ld	r6, X+
     d6c:	7c 90       	ld	r7, X
     d6e:	13 97       	sbiw	r26, 0x03	; 3
     d70:	e8 e7       	ldi	r30, 0x78	; 120
     d72:	f1 e0       	ldi	r31, 0x01	; 1
     d74:	40 82       	st	Z, r4
     d76:	51 82       	std	Z+1, r5	; 0x01
     d78:	62 82       	std	Z+2, r6	; 0x02
     d7a:	73 82       	std	Z+3, r7	; 0x03
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	4d 90       	ld	r4, X+
     d80:	5d 90       	ld	r5, X+
     d82:	6d 90       	ld	r6, X+
     d84:	7c 90       	ld	r7, X
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	44 82       	std	Z+4, r4	; 0x04
     d8a:	55 82       	std	Z+5, r5	; 0x05
     d8c:	66 82       	std	Z+6, r6	; 0x06
     d8e:	77 82       	std	Z+7, r7	; 0x07
     d90:	18 96       	adiw	r26, 0x08	; 8
     d92:	4d 91       	ld	r20, X+
     d94:	5d 91       	ld	r21, X+
     d96:	6d 91       	ld	r22, X+
     d98:	7c 91       	ld	r23, X
     d9a:	1b 97       	sbiw	r26, 0x0b	; 11
     d9c:	40 87       	std	Z+8, r20	; 0x08
     d9e:	51 87       	std	Z+9, r21	; 0x09
     da0:	62 87       	std	Z+10, r22	; 0x0a
     da2:	73 87       	std	Z+11, r23	; 0x0b
     da4:	04 97       	sbiw	r24, 0x04	; 4
     da6:	29 f4       	brne	.+10     	; 0xdb2 <localization_calc+0x186>
     da8:	c5 01       	movw	r24, r10
     daa:	0e 94 05 03 	call	0x60a	; 0x60a <fourPointCalc>
     dae:	dc 01       	movw	r26, r24
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <localization_calc+0x18a>
     db2:	a8 e7       	ldi	r26, 0x78	; 120
     db4:	b1 e0       	ldi	r27, 0x01	; 1
     db6:	4d 91       	ld	r20, X+
     db8:	5d 91       	ld	r21, X+
     dba:	6d 91       	ld	r22, X+
     dbc:	7c 91       	ld	r23, X
     dbe:	13 97       	sbiw	r26, 0x03	; 3
     dc0:	ec e6       	ldi	r30, 0x6C	; 108
     dc2:	f1 e0       	ldi	r31, 0x01	; 1
     dc4:	40 83       	st	Z, r20
     dc6:	51 83       	std	Z+1, r21	; 0x01
     dc8:	62 83       	std	Z+2, r22	; 0x02
     dca:	73 83       	std	Z+3, r23	; 0x03
     dcc:	14 96       	adiw	r26, 0x04	; 4
     dce:	4d 91       	ld	r20, X+
     dd0:	5d 91       	ld	r21, X+
     dd2:	6d 91       	ld	r22, X+
     dd4:	7c 91       	ld	r23, X
     dd6:	17 97       	sbiw	r26, 0x07	; 7
     dd8:	44 83       	std	Z+4, r20	; 0x04
     dda:	55 83       	std	Z+5, r21	; 0x05
     ddc:	66 83       	std	Z+6, r22	; 0x06
     dde:	77 83       	std	Z+7, r23	; 0x07
     de0:	18 96       	adiw	r26, 0x08	; 8
     de2:	8d 91       	ld	r24, X+
     de4:	9d 91       	ld	r25, X+
     de6:	0d 90       	ld	r0, X+
     de8:	bc 91       	ld	r27, X
     dea:	a0 2d       	mov	r26, r0
     dec:	80 87       	std	Z+8, r24	; 0x08
     dee:	91 87       	std	Z+9, r25	; 0x09
     df0:	a2 87       	std	Z+10, r26	; 0x0a
     df2:	b3 87       	std	Z+11, r27	; 0x0b
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	fe be       	out	0x3e, r15	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	ed be       	out	0x3d, r14	; 61
     dfe:	20 c0       	rjmp	.+64     	; 0xe40 <localization_calc+0x214>
     e00:	fb 01       	movw	r30, r22
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	a2 81       	ldd	r26, Z+2	; 0x02
     e08:	b3 81       	ldd	r27, Z+3	; 0x03
     e0a:	ec e6       	ldi	r30, 0x6C	; 108
     e0c:	f1 e0       	ldi	r31, 0x01	; 1
     e0e:	80 83       	st	Z, r24
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	a2 83       	std	Z+2, r26	; 0x02
     e14:	b3 83       	std	Z+3, r27	; 0x03
     e16:	db 01       	movw	r26, r22
     e18:	14 96       	adiw	r26, 0x04	; 4
     e1a:	cd 90       	ld	r12, X+
     e1c:	dd 90       	ld	r13, X+
     e1e:	ed 90       	ld	r14, X+
     e20:	fc 90       	ld	r15, X
     e22:	17 97       	sbiw	r26, 0x07	; 7
     e24:	c4 82       	std	Z+4, r12	; 0x04
     e26:	d5 82       	std	Z+5, r13	; 0x05
     e28:	e6 82       	std	Z+6, r14	; 0x06
     e2a:	f7 82       	std	Z+7, r15	; 0x07
     e2c:	18 96       	adiw	r26, 0x08	; 8
     e2e:	4d 91       	ld	r20, X+
     e30:	5d 91       	ld	r21, X+
     e32:	6d 91       	ld	r22, X+
     e34:	7c 91       	ld	r23, X
     e36:	1b 97       	sbiw	r26, 0x0b	; 11
     e38:	40 87       	std	Z+8, r20	; 0x08
     e3a:	51 87       	std	Z+9, r21	; 0x09
     e3c:	62 87       	std	Z+10, r22	; 0x0a
     e3e:	73 87       	std	Z+11, r23	; 0x0b
     e40:	8c e6       	ldi	r24, 0x6C	; 108
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	1e bf       	out	0x3e, r17	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0d bf       	out	0x3d, r16	; 61
     e4e:	68 96       	adiw	r28, 0x18	; 24
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	df 90       	pop	r13
     e68:	cf 90       	pop	r12
     e6a:	bf 90       	pop	r11
     e6c:	af 90       	pop	r10
     e6e:	7f 90       	pop	r7
     e70:	6f 90       	pop	r6
     e72:	5f 90       	pop	r5
     e74:	4f 90       	pop	r4
     e76:	08 95       	ret

00000e78 <motor_update>:
Initialization of Subsystem Components
************************************************************/

/* Called On Timer 3 Rollover */
void motor_update(void)
{
     e78:	af 92       	push	r10
     e7a:	bf 92       	push	r11
     e7c:	cf 92       	push	r12
     e7e:	df 92       	push	r13
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
	set(TIFR3,OCF3A);		// Reset flag
     e88:	c1 9a       	sbi	0x18, 1	; 24
	run_motor_control_loop(x_target, y_target, max_duty_cycle, max_theta, theta_kp, theta_kd, linear_kp, linear_kd); // Update control
     e8a:	a0 90 0e 01 	lds	r10, 0x010E
     e8e:	b0 90 0f 01 	lds	r11, 0x010F
     e92:	c0 90 10 01 	lds	r12, 0x0110
     e96:	d0 90 11 01 	lds	r13, 0x0111
     e9a:	e0 90 12 01 	lds	r14, 0x0112
     e9e:	f0 90 13 01 	lds	r15, 0x0113
     ea2:	00 91 14 01 	lds	r16, 0x0114
     ea6:	10 91 15 01 	lds	r17, 0x0115
     eaa:	20 91 b1 01 	lds	r18, 0x01B1
     eae:	30 91 b2 01 	lds	r19, 0x01B2
     eb2:	40 91 b3 01 	lds	r20, 0x01B3
     eb6:	50 91 b4 01 	lds	r21, 0x01B4
     eba:	60 91 b5 01 	lds	r22, 0x01B5
     ebe:	70 91 b6 01 	lds	r23, 0x01B6
     ec2:	80 91 b7 01 	lds	r24, 0x01B7
     ec6:	90 91 b8 01 	lds	r25, 0x01B8
     eca:	e0 91 05 01 	lds	r30, 0x0105
     ece:	ef 93       	push	r30
     ed0:	e0 91 04 01 	lds	r30, 0x0104
     ed4:	ef 93       	push	r30
     ed6:	e0 91 03 01 	lds	r30, 0x0103
     eda:	ef 93       	push	r30
     edc:	e0 91 02 01 	lds	r30, 0x0102
     ee0:	ef 93       	push	r30
     ee2:	e0 91 09 01 	lds	r30, 0x0109
     ee6:	ef 93       	push	r30
     ee8:	e0 91 08 01 	lds	r30, 0x0108
     eec:	ef 93       	push	r30
     eee:	e0 91 07 01 	lds	r30, 0x0107
     ef2:	ef 93       	push	r30
     ef4:	e0 91 06 01 	lds	r30, 0x0106
     ef8:	ef 93       	push	r30
     efa:	e0 91 b0 01 	lds	r30, 0x01B0
     efe:	ef 93       	push	r30
     f00:	e0 91 af 01 	lds	r30, 0x01AF
     f04:	ef 93       	push	r30
     f06:	e0 91 ae 01 	lds	r30, 0x01AE
     f0a:	ef 93       	push	r30
     f0c:	e0 91 ad 01 	lds	r30, 0x01AD
     f10:	ef 93       	push	r30
     f12:	e0 91 0d 01 	lds	r30, 0x010D
     f16:	ef 93       	push	r30
     f18:	e0 91 0c 01 	lds	r30, 0x010C
     f1c:	ef 93       	push	r30
     f1e:	e0 91 0b 01 	lds	r30, 0x010B
     f22:	ef 93       	push	r30
     f24:	e0 91 0a 01 	lds	r30, 0x010A
     f28:	ef 93       	push	r30
     f2a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <run_motor_control_loop>
     f2e:	8d b7       	in	r24, 0x3d	; 61
     f30:	9e b7       	in	r25, 0x3e	; 62
     f32:	40 96       	adiw	r24, 0x10	; 16
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	9e bf       	out	0x3e, r25	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	8d bf       	out	0x3d, r24	; 61

}
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	08 95       	ret

00000f50 <adc_update>:
	
}

/* Called on ADC Conversion Completion */
void adc_update(void)
{
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	28 97       	sbiw	r28, 0x08	; 8
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
	set(ADCSRA,ADIF);	 // Reset flag
     f64:	ea e7       	ldi	r30, 0x7A	; 122
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 61       	ori	r24, 0x10	; 16
     f6c:	80 83       	st	Z, r24
	if(adc_switch()){
     f6e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <adc_switch>
     f72:	88 23       	and	r24, r24
     f74:	01 f1       	breq	.+64     	; 0xfb6 <adc_update+0x66>
		float puck_buffer[2];
		puck_dist = get_puck_location(puck_buffer);
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	0e 94 95 14 	call	0x292a	; 0x292a <get_puck_location>
     f7e:	90 93 87 01 	sts	0x0187, r25
     f82:	80 93 86 01 	sts	0x0186, r24
		x_puck = puck_buffer[0];
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	ab 81       	ldd	r26, Y+3	; 0x03
     f8c:	bc 81       	ldd	r27, Y+4	; 0x04
     f8e:	80 93 8c 01 	sts	0x018C, r24
     f92:	90 93 8d 01 	sts	0x018D, r25
     f96:	a0 93 8e 01 	sts	0x018E, r26
     f9a:	b0 93 8f 01 	sts	0x018F, r27
		y_puck = puck_buffer[1];
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	9e 81       	ldd	r25, Y+6	; 0x06
     fa2:	af 81       	ldd	r26, Y+7	; 0x07
     fa4:	b8 85       	ldd	r27, Y+8	; 0x08
     fa6:	80 93 88 01 	sts	0x0188, r24
     faa:	90 93 89 01 	sts	0x0189, r25
     fae:	a0 93 8a 01 	sts	0x018A, r26
     fb2:	b0 93 8b 01 	sts	0x018B, r27
	}
}
     fb6:	28 96       	adiw	r28, 0x08	; 8
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <positioning_LED>:
	
}

void positioning_LED(int color)
{
	switch(color)
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	91 05       	cpc	r25, r1
     fcc:	41 f0       	breq	.+16     	; 0xfde <positioning_LED+0x16>
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	91 05       	cpc	r25, r1
     fd2:	41 f0       	breq	.+16     	; 0xfe4 <positioning_LED+0x1c>
     fd4:	89 2b       	or	r24, r25
     fd6:	41 f4       	brne	.+16     	; 0xfe8 <positioning_LED+0x20>
	{ 
		case OFF:	//OFF
			clear(PORTC,7);
     fd8:	47 98       	cbi	0x08, 7	; 8
			clear(PORTC,6);
     fda:	46 98       	cbi	0x08, 6	; 8
			break;
     fdc:	08 95       	ret
		
		case BLUE:	//BLUE
			set(PORTC,6);
     fde:	46 9a       	sbi	0x08, 6	; 8
			clear(PORTC,7);
     fe0:	47 98       	cbi	0x08, 7	; 8
			break;
     fe2:	08 95       	ret
			
		case RED: //RED
			clear(PORTC,6);
     fe4:	46 98       	cbi	0x08, 6	; 8
			set(PORTC,7);
     fe6:	47 9a       	sbi	0x08, 7	; 8
     fe8:	08 95       	ret

00000fea <play>:
void play(void)
{
	/* Light LED of defending goal */
	
	/* Play */
	set(TCCR1B,CS10);
     fea:	e1 e8       	ldi	r30, 0x81	; 129
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	81 60       	ori	r24, 0x01	; 1
     ff2:	80 83       	st	Z, r24
	positioning_LED(goal);
     ff4:	80 91 92 01 	lds	r24, 0x0192
     ff8:	90 91 93 01 	lds	r25, 0x0193
     ffc:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <positioning_LED>
    1000:	08 95       	ret

00001002 <pause>:
}

void pause(void)
{
	/* Stop within 3  seconds */
	clear(TCCR1B,CS10);
    1002:	e1 e8       	ldi	r30, 0x81	; 129
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8e 7f       	andi	r24, 0xFE	; 254
    100a:	80 83       	st	Z, r24
	clear(PORTB,0); // B0 Left motor off
    100c:	28 98       	cbi	0x05, 0	; 5
	clear(PORTB,2); // B2 Right motor off
    100e:	2a 98       	cbi	0x05, 2	; 5
	positioning_LED(OFF);
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <positioning_LED>
    1018:	08 95       	ret

0000101a <halftime>:
}

void halftime(void)
{
	/* Stop play */
	pause();
    101a:	0e 94 01 08 	call	0x1002	; 0x1002 <pause>
	
	/* Switch assigned goal */
	if (x_goal>0) {
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	a9 01       	movw	r20, r18
    1024:	60 91 98 01 	lds	r22, 0x0198
    1028:	70 91 99 01 	lds	r23, 0x0199
    102c:	80 91 9a 01 	lds	r24, 0x019A
    1030:	90 91 9b 01 	lds	r25, 0x019B
    1034:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__gesf2>
    1038:	18 16       	cp	r1, r24
    103a:	9c f4       	brge	.+38     	; 0x1062 <halftime+0x48>
		x_goal = -1*GOAL_X_DIST;
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	a8 ec       	ldi	r26, 0xC8	; 200
    1042:	b3 ec       	ldi	r27, 0xC3	; 195
    1044:	80 93 98 01 	sts	0x0198, r24
    1048:	90 93 99 01 	sts	0x0199, r25
    104c:	a0 93 9a 01 	sts	0x019A, r26
    1050:	b0 93 9b 01 	sts	0x019B, r27
		goal = RED;
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	90 93 93 01 	sts	0x0193, r25
    105c:	80 93 92 01 	sts	0x0192, r24
    1060:	08 95       	ret
		} else {
		x_goal = GOAL_X_DIST;
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a8 ec       	ldi	r26, 0xC8	; 200
    1068:	b3 e4       	ldi	r27, 0x43	; 67
    106a:	80 93 98 01 	sts	0x0198, r24
    106e:	90 93 99 01 	sts	0x0199, r25
    1072:	a0 93 9a 01 	sts	0x019A, r26
    1076:	b0 93 9b 01 	sts	0x019B, r27
		goal = BLUE;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	90 93 93 01 	sts	0x0193, r25
    1082:	80 93 92 01 	sts	0x0192, r24
    1086:	08 95       	ret

00001088 <select_goal>:
			break;
	}
}

void select_goal(void) 
{
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	2c 97       	sbiw	r28, 0x0c	; 12
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
	/* Assign Defending goal */
	update_position();
    109c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <update_position>
	
	float position_buffer[3];
	get_position(position_buffer);
    10a0:	ce 01       	movw	r24, r28
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <get_position>
	//m_usb_tx_int((int)position_buffer[0]);
	
	if (position_buffer[0]>0) {
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	a9 01       	movw	r20, r18
    10ae:	69 81       	ldd	r22, Y+1	; 0x01
    10b0:	7a 81       	ldd	r23, Y+2	; 0x02
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	9c 81       	ldd	r25, Y+4	; 0x04
    10b6:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__gesf2>
    10ba:	18 16       	cp	r1, r24
    10bc:	9c f4       	brge	.+38     	; 0x10e4 <select_goal+0x5c>
		x_goal = -1*GOAL_X_DIST;
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a8 ec       	ldi	r26, 0xC8	; 200
    10c4:	b3 ec       	ldi	r27, 0xC3	; 195
    10c6:	80 93 98 01 	sts	0x0198, r24
    10ca:	90 93 99 01 	sts	0x0199, r25
    10ce:	a0 93 9a 01 	sts	0x019A, r26
    10d2:	b0 93 9b 01 	sts	0x019B, r27
		goal = RED;
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	90 93 93 01 	sts	0x0193, r25
    10de:	80 93 92 01 	sts	0x0192, r24
    10e2:	12 c0       	rjmp	.+36     	; 0x1108 <select_goal+0x80>
		//positioning_LED(RED);
		} else {
		x_goal = GOAL_X_DIST;
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a8 ec       	ldi	r26, 0xC8	; 200
    10ea:	b3 e4       	ldi	r27, 0x43	; 67
    10ec:	80 93 98 01 	sts	0x0198, r24
    10f0:	90 93 99 01 	sts	0x0199, r25
    10f4:	a0 93 9a 01 	sts	0x019A, r26
    10f8:	b0 93 9b 01 	sts	0x019B, r27
		goal = BLUE;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	90 93 93 01 	sts	0x0193, r25
    1104:	80 93 92 01 	sts	0x0192, r24
		//positioning_LED(BLUE);
	}
	
	goal_init = 1;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	90 93 91 01 	sts	0x0191, r25
    1110:	80 93 90 01 	sts	0x0190, r24
}
    1114:	2c 96       	adiw	r28, 0x0c	; 12
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	08 95       	ret

00001126 <comm_test>:
	}
}

void comm_test(void)
{
	if (!goal_init){
    1126:	80 91 90 01 	lds	r24, 0x0190
    112a:	90 91 91 01 	lds	r25, 0x0191
    112e:	89 2b       	or	r24, r25
    1130:	11 f4       	brne	.+4      	; 0x1136 <comm_test+0x10>
		select_goal();
    1132:	0e 94 44 08 	call	0x1088	; 0x1088 <select_goal>
	}
	/* Flash color of LED for defending goal */
	set(TCCR0B,CS02); //start timer 
    1136:	85 b5       	in	r24, 0x25	; 37
    1138:	84 60       	ori	r24, 0x04	; 4
    113a:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS00);
    113c:	85 b5       	in	r24, 0x25	; 37
    113e:	81 60       	ori	r24, 0x01	; 1
    1140:	85 bd       	out	0x25, r24	; 37
	positioning_LED(goal); //turn on LED 
    1142:	80 91 92 01 	lds	r24, 0x0192
    1146:	90 91 93 01 	lds	r25, 0x0193
    114a:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <positioning_LED>
    114e:	08 95       	ret

00001150 <update_game_state>:
}

/* Update Game State Based on Comm Protocol */
void update_game_state(void)
{
	switch(game_state){
    1150:	e0 91 a2 01 	lds	r30, 0x01A2
    1154:	8e 2f       	mov	r24, r30
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	fc 01       	movw	r30, r24
    115a:	e0 5a       	subi	r30, 0xA0	; 160
    115c:	f1 09       	sbc	r31, r1
    115e:	e8 30       	cpi	r30, 0x08	; 8
    1160:	f1 05       	cpc	r31, r1
    1162:	40 f5       	brcc	.+80     	; 0x11b4 <update_game_state+0x64>
    1164:	ea 5a       	subi	r30, 0xAA	; 170
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__tablejump2__>
		case 0xA0: // Comm Test
		comm_test();
    116c:	0e 94 93 08 	call	0x1126	; 0x1126 <comm_test>
		break;
    1170:	08 95       	ret
		case 0xA1: // Play
		play();
    1172:	0e 94 f5 07 	call	0xfea	; 0xfea <play>
		break;
    1176:	08 95       	ret
		case 0xA2: // Goal R
		SR = buffer[1];
    1178:	e3 ea       	ldi	r30, 0xA3	; 163
    117a:	f1 e0       	ldi	r31, 0x01	; 1
    117c:	81 81       	ldd	r24, Z+1	; 0x01
    117e:	80 93 a1 01 	sts	0x01A1, r24
		SB = buffer[2];
    1182:	82 81       	ldd	r24, Z+2	; 0x02
    1184:	80 93 a0 01 	sts	0x01A0, r24
		pause();
    1188:	0e 94 01 08 	call	0x1002	; 0x1002 <pause>
		break;
    118c:	08 95       	ret
		case 0xA3: // Goal B
		SR = buffer[1];
    118e:	e3 ea       	ldi	r30, 0xA3	; 163
    1190:	f1 e0       	ldi	r31, 0x01	; 1
    1192:	81 81       	ldd	r24, Z+1	; 0x01
    1194:	80 93 a1 01 	sts	0x01A1, r24
		SB = buffer[2];
    1198:	82 81       	ldd	r24, Z+2	; 0x02
    119a:	80 93 a0 01 	sts	0x01A0, r24
		pause();
    119e:	0e 94 01 08 	call	0x1002	; 0x1002 <pause>
		break;
    11a2:	08 95       	ret
		case 0xA4: // Pause
		pause();
    11a4:	0e 94 01 08 	call	0x1002	; 0x1002 <pause>
		break;
    11a8:	08 95       	ret
		case 0xA6: // Halftime
		halftime();
    11aa:	0e 94 0d 08 	call	0x101a	; 0x101a <halftime>
		break;
    11ae:	08 95       	ret
}

void game_over(void)
{
	// Stop play
	pause();
    11b0:	0e 94 01 08 	call	0x1002	; 0x1002 <pause>
    11b4:	08 95       	ret

000011b6 <wireless_recieve>:
}

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
    11b6:	6a e0       	ldi	r22, 0x0A	; 10
    11b8:	83 ea       	ldi	r24, 0xA3	; 163
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <m_rf_read>
	game_state = buffer[0];
    11c0:	80 91 a3 01 	lds	r24, 0x01A3
    11c4:	80 93 a2 01 	sts	0x01A2, r24
	update_game_state();
    11c8:	0e 94 a8 08 	call	0x1150	; 0x1150 <update_game_state>
    11cc:	08 95       	ret

000011ce <attack_action>:
	
	goal_init = 1;
}

void attack_action(){
	if (has_puck())
    11ce:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <has_puck>
    11d2:	88 23       	and	r24, r24
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <attack_action+0xa>
    11d6:	6b c0       	rjmp	.+214    	; 0x12ae <attack_action+0xe0>
	{
		x_target = x_goal;
    11d8:	80 91 98 01 	lds	r24, 0x0198
    11dc:	90 91 99 01 	lds	r25, 0x0199
    11e0:	a0 91 9a 01 	lds	r26, 0x019A
    11e4:	b0 91 9b 01 	lds	r27, 0x019B
    11e8:	80 93 b5 01 	sts	0x01B5, r24
    11ec:	90 93 b6 01 	sts	0x01B6, r25
    11f0:	a0 93 b7 01 	sts	0x01B7, r26
    11f4:	b0 93 b8 01 	sts	0x01B8, r27
		y_target = y_goal;
    11f8:	80 91 94 01 	lds	r24, 0x0194
    11fc:	90 91 95 01 	lds	r25, 0x0195
    1200:	a0 91 96 01 	lds	r26, 0x0196
    1204:	b0 91 97 01 	lds	r27, 0x0197
    1208:	80 93 b1 01 	sts	0x01B1, r24
    120c:	90 93 b2 01 	sts	0x01B2, r25
    1210:	a0 93 b3 01 	sts	0x01B3, r26
    1214:	b0 93 b4 01 	sts	0x01B4, r27
		max_theta = M_PI/2;
    1218:	8b ed       	ldi	r24, 0xDB	; 219
    121a:	9f e0       	ldi	r25, 0x0F	; 15
    121c:	a9 ec       	ldi	r26, 0xC9	; 201
    121e:	bf e3       	ldi	r27, 0x3F	; 63
    1220:	80 93 0e 01 	sts	0x010E, r24
    1224:	90 93 0f 01 	sts	0x010F, r25
    1228:	a0 93 10 01 	sts	0x0110, r26
    122c:	b0 93 11 01 	sts	0x0111, r27
		theta_kd = 0.05;
    1230:	8d ec       	ldi	r24, 0xCD	; 205
    1232:	9c ec       	ldi	r25, 0xCC	; 204
    1234:	ac e4       	ldi	r26, 0x4C	; 76
    1236:	bd e3       	ldi	r27, 0x3D	; 61
    1238:	80 93 ad 01 	sts	0x01AD, r24
    123c:	90 93 ae 01 	sts	0x01AE, r25
    1240:	a0 93 af 01 	sts	0x01AF, r26
    1244:	b0 93 b0 01 	sts	0x01B0, r27
		theta_kp = 1.2;
    1248:	8a e9       	ldi	r24, 0x9A	; 154
    124a:	99 e9       	ldi	r25, 0x99	; 153
    124c:	a9 e9       	ldi	r26, 0x99	; 153
    124e:	bf e3       	ldi	r27, 0x3F	; 63
    1250:	80 93 0a 01 	sts	0x010A, r24
    1254:	90 93 0b 01 	sts	0x010B, r25
    1258:	a0 93 0c 01 	sts	0x010C, r26
    125c:	b0 93 0d 01 	sts	0x010D, r27
		linear_kd = 0.01;
    1260:	8a e0       	ldi	r24, 0x0A	; 10
    1262:	97 ed       	ldi	r25, 0xD7	; 215
    1264:	a3 e2       	ldi	r26, 0x23	; 35
    1266:	bc e3       	ldi	r27, 0x3C	; 60
    1268:	80 93 02 01 	sts	0x0102, r24
    126c:	90 93 03 01 	sts	0x0103, r25
    1270:	a0 93 04 01 	sts	0x0104, r26
    1274:	b0 93 05 01 	sts	0x0105, r27
		linear_kp = 0.2;
    1278:	8d ec       	ldi	r24, 0xCD	; 205
    127a:	9c ec       	ldi	r25, 0xCC	; 204
    127c:	ac e4       	ldi	r26, 0x4C	; 76
    127e:	be e3       	ldi	r27, 0x3E	; 62
    1280:	80 93 06 01 	sts	0x0106, r24
    1284:	90 93 07 01 	sts	0x0107, r25
    1288:	a0 93 08 01 	sts	0x0108, r26
    128c:	b0 93 09 01 	sts	0x0109, r27
		max_duty_cycle = DUTY_CYCLE_PUCK;
    1290:	8d ec       	ldi	r24, 0xCD	; 205
    1292:	9c ec       	ldi	r25, 0xCC	; 204
    1294:	ac ec       	ldi	r26, 0xCC	; 204
    1296:	be e3       	ldi	r27, 0x3E	; 62
    1298:	80 93 12 01 	sts	0x0112, r24
    129c:	90 93 13 01 	sts	0x0113, r25
    12a0:	a0 93 14 01 	sts	0x0114, r26
    12a4:	b0 93 15 01 	sts	0x0115, r27
		m_green(OFF);
    12a8:	6a 9a       	sbi	0x0d, 2	; 13
    12aa:	72 9a       	sbi	0x0e, 2	; 14
    12ac:	08 95       	ret
		return;
	
	}

	if (!has_puck())
    12ae:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <has_puck>
    12b2:	81 11       	cpse	r24, r1
    12b4:	66 c0       	rjmp	.+204    	; 0x1382 <attack_action+0x1b4>
	{
		x_target = x_puck;
    12b6:	80 91 8c 01 	lds	r24, 0x018C
    12ba:	90 91 8d 01 	lds	r25, 0x018D
    12be:	a0 91 8e 01 	lds	r26, 0x018E
    12c2:	b0 91 8f 01 	lds	r27, 0x018F
    12c6:	80 93 b5 01 	sts	0x01B5, r24
    12ca:	90 93 b6 01 	sts	0x01B6, r25
    12ce:	a0 93 b7 01 	sts	0x01B7, r26
    12d2:	b0 93 b8 01 	sts	0x01B8, r27
		y_target = y_puck;
    12d6:	80 91 88 01 	lds	r24, 0x0188
    12da:	90 91 89 01 	lds	r25, 0x0189
    12de:	a0 91 8a 01 	lds	r26, 0x018A
    12e2:	b0 91 8b 01 	lds	r27, 0x018B
    12e6:	80 93 b1 01 	sts	0x01B1, r24
    12ea:	90 93 b2 01 	sts	0x01B2, r25
    12ee:	a0 93 b3 01 	sts	0x01B3, r26
    12f2:	b0 93 b4 01 	sts	0x01B4, r27
		max_theta = M_PI;
    12f6:	8b ed       	ldi	r24, 0xDB	; 219
    12f8:	9f e0       	ldi	r25, 0x0F	; 15
    12fa:	a9 e4       	ldi	r26, 0x49	; 73
    12fc:	b0 e4       	ldi	r27, 0x40	; 64
    12fe:	80 93 0e 01 	sts	0x010E, r24
    1302:	90 93 0f 01 	sts	0x010F, r25
    1306:	a0 93 10 01 	sts	0x0110, r26
    130a:	b0 93 11 01 	sts	0x0111, r27
		theta_kd = 0;
    130e:	10 92 ad 01 	sts	0x01AD, r1
    1312:	10 92 ae 01 	sts	0x01AE, r1
    1316:	10 92 af 01 	sts	0x01AF, r1
    131a:	10 92 b0 01 	sts	0x01B0, r1
		theta_kp = 1.8;
    131e:	86 e6       	ldi	r24, 0x66	; 102
    1320:	96 e6       	ldi	r25, 0x66	; 102
    1322:	a6 ee       	ldi	r26, 0xE6	; 230
    1324:	bf e3       	ldi	r27, 0x3F	; 63
    1326:	80 93 0a 01 	sts	0x010A, r24
    132a:	90 93 0b 01 	sts	0x010B, r25
    132e:	a0 93 0c 01 	sts	0x010C, r26
    1332:	b0 93 0d 01 	sts	0x010D, r27
		linear_kd = 0.01;
    1336:	8a e0       	ldi	r24, 0x0A	; 10
    1338:	97 ed       	ldi	r25, 0xD7	; 215
    133a:	a3 e2       	ldi	r26, 0x23	; 35
    133c:	bc e3       	ldi	r27, 0x3C	; 60
    133e:	80 93 02 01 	sts	0x0102, r24
    1342:	90 93 03 01 	sts	0x0103, r25
    1346:	a0 93 04 01 	sts	0x0104, r26
    134a:	b0 93 05 01 	sts	0x0105, r27
		linear_kp = 0.2;
    134e:	8d ec       	ldi	r24, 0xCD	; 205
    1350:	9c ec       	ldi	r25, 0xCC	; 204
    1352:	ac e4       	ldi	r26, 0x4C	; 76
    1354:	be e3       	ldi	r27, 0x3E	; 62
    1356:	80 93 06 01 	sts	0x0106, r24
    135a:	90 93 07 01 	sts	0x0107, r25
    135e:	a0 93 08 01 	sts	0x0108, r26
    1362:	b0 93 09 01 	sts	0x0109, r27
		max_duty_cycle = DUTY_CYCLE_SEEK;
    1366:	8d ec       	ldi	r24, 0xCD	; 205
    1368:	9c ec       	ldi	r25, 0xCC	; 204
    136a:	ac ec       	ldi	r26, 0xCC	; 204
    136c:	be e3       	ldi	r27, 0x3E	; 62
    136e:	80 93 12 01 	sts	0x0112, r24
    1372:	90 93 13 01 	sts	0x0113, r25
    1376:	a0 93 14 01 	sts	0x0114, r26
    137a:	b0 93 15 01 	sts	0x0115, r27
		m_green(ON);
    137e:	6a 9a       	sbi	0x0d, 2	; 13
    1380:	72 98       	cbi	0x0e, 2	; 14
    1382:	08 95       	ret

00001384 <home_dist>:
	m_green(OFF);
	return goalie_home;
}

float home_dist()
{	
    1384:	4f 92       	push	r4
    1386:	5f 92       	push	r5
    1388:	6f 92       	push	r6
    138a:	7f 92       	push	r7
    138c:	8f 92       	push	r8
    138e:	9f 92       	push	r9
    1390:	af 92       	push	r10
    1392:	bf 92       	push	r11
    1394:	cf 92       	push	r12
    1396:	df 92       	push	r13
    1398:	ef 92       	push	r14
    139a:	ff 92       	push	r15
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	2c 97       	sbiw	r28, 0x0c	; 12
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
	/* Calculates the distance to from your own goal */
	float position_buffer[3];
	get_position(position_buffer);
    13b0:	ce 01       	movw	r24, r28
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <get_position>
	float x = position_buffer[0];
	float y = position_buffer[1];
	float theta = position_buffer[2];
	return sqrtf((x+x_goal)*(x+x_goal)+(y-y_goal)*(y-y_goal));
    13b8:	20 91 98 01 	lds	r18, 0x0198
    13bc:	30 91 99 01 	lds	r19, 0x0199
    13c0:	40 91 9a 01 	lds	r20, 0x019A
    13c4:	50 91 9b 01 	lds	r21, 0x019B
    13c8:	69 81       	ldd	r22, Y+1	; 0x01
    13ca:	7a 81       	ldd	r23, Y+2	; 0x02
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
    13d4:	4b 01       	movw	r8, r22
    13d6:	5c 01       	movw	r10, r24
    13d8:	20 91 94 01 	lds	r18, 0x0194
    13dc:	30 91 95 01 	lds	r19, 0x0195
    13e0:	40 91 96 01 	lds	r20, 0x0196
    13e4:	50 91 97 01 	lds	r21, 0x0197
    13e8:	6d 81       	ldd	r22, Y+5	; 0x05
    13ea:	7e 81       	ldd	r23, Y+6	; 0x06
    13ec:	8f 81       	ldd	r24, Y+7	; 0x07
    13ee:	98 85       	ldd	r25, Y+8	; 0x08
    13f0:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
    13f4:	6b 01       	movw	r12, r22
    13f6:	7c 01       	movw	r14, r24
    13f8:	a5 01       	movw	r20, r10
    13fa:	94 01       	movw	r18, r8
    13fc:	c5 01       	movw	r24, r10
    13fe:	b4 01       	movw	r22, r8
    1400:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1404:	4b 01       	movw	r8, r22
    1406:	5c 01       	movw	r10, r24
    1408:	a7 01       	movw	r20, r14
    140a:	96 01       	movw	r18, r12
    140c:	c7 01       	movw	r24, r14
    140e:	b6 01       	movw	r22, r12
    1410:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1414:	9b 01       	movw	r18, r22
    1416:	ac 01       	movw	r20, r24
    1418:	c5 01       	movw	r24, r10
    141a:	b4 01       	movw	r22, r8
    141c:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
    1420:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <sqrt>
}
    1424:	2c 96       	adiw	r28, 0x0c	; 12
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	ff 90       	pop	r15
    1436:	ef 90       	pop	r14
    1438:	df 90       	pop	r13
    143a:	cf 90       	pop	r12
    143c:	bf 90       	pop	r11
    143e:	af 90       	pop	r10
    1440:	9f 90       	pop	r9
    1442:	8f 90       	pop	r8
    1444:	7f 90       	pop	r7
    1446:	6f 90       	pop	r6
    1448:	5f 90       	pop	r5
    144a:	4f 90       	pop	r4
    144c:	08 95       	ret

0000144e <goalie_action>:
		return;
	}
}

int goalie_action(int goalie_home)
{
    144e:	cf 92       	push	r12
    1450:	df 92       	push	r13
    1452:	ef 92       	push	r14
    1454:	ff 92       	push	r15
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	ec 01       	movw	r28, r24
	/* If the puck is within range, become an attacker and get the puck */
	if (puck_dist > 90){	
    145c:	80 91 86 01 	lds	r24, 0x0186
    1460:	90 91 87 01 	lds	r25, 0x0187
    1464:	8b 35       	cpi	r24, 0x5B	; 91
    1466:	91 05       	cpc	r25, r1
    1468:	3c f0       	brlt	.+14     	; 0x1478 <goalie_action+0x2a>
		role = ATTACK;
    146a:	10 92 01 01 	sts	0x0101, r1
    146e:	10 92 00 01 	sts	0x0100, r1
		return goalie_home;
    1472:	8c 2f       	mov	r24, r28
    1474:	9d 2f       	mov	r25, r29
    1476:	01 c1       	rjmp	.+514    	; 0x167a <goalie_action+0x22c>
	}
	
	float dist = home_dist();	//find distance from own goal
    1478:	0e 94 c2 09 	call	0x1384	; 0x1384 <home_dist>
    147c:	6b 01       	movw	r12, r22
    147e:	7c 01       	movw	r14, r24
	//m_usb_tx_string("\n distance");
	//m_usb_tx_int((int) dist);
	
	/* If the goalie is far from our goal, and hasn't registered as home, return home*/
	if (dist > 150 && (!goalie_home)) {	
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	46 e1       	ldi	r20, 0x16	; 22
    1486:	53 e4       	ldi	r21, 0x43	; 67
    1488:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__gesf2>
    148c:	18 16       	cp	r1, r24
    148e:	0c f0       	brlt	.+2      	; 0x1492 <goalie_action+0x44>
    1490:	82 c0       	rjmp	.+260    	; 0x1596 <goalie_action+0x148>
    1492:	20 97       	sbiw	r28, 0x00	; 0
    1494:	09 f0       	breq	.+2      	; 0x1498 <goalie_action+0x4a>
    1496:	7f c0       	rjmp	.+254    	; 0x1596 <goalie_action+0x148>
		x_target = -x_goal*0.8;
    1498:	80 91 98 01 	lds	r24, 0x0198
    149c:	90 91 99 01 	lds	r25, 0x0199
    14a0:	a0 91 9a 01 	lds	r26, 0x019A
    14a4:	b0 91 9b 01 	lds	r27, 0x019B
    14a8:	bc 01       	movw	r22, r24
    14aa:	cd 01       	movw	r24, r26
    14ac:	90 58       	subi	r25, 0x80	; 128
    14ae:	2d ec       	ldi	r18, 0xCD	; 205
    14b0:	3c ec       	ldi	r19, 0xCC	; 204
    14b2:	4c e4       	ldi	r20, 0x4C	; 76
    14b4:	5f e3       	ldi	r21, 0x3F	; 63
    14b6:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    14ba:	60 93 b5 01 	sts	0x01B5, r22
    14be:	70 93 b6 01 	sts	0x01B6, r23
    14c2:	80 93 b7 01 	sts	0x01B7, r24
    14c6:	90 93 b8 01 	sts	0x01B8, r25
		y_target = y_goal;
    14ca:	80 91 94 01 	lds	r24, 0x0194
    14ce:	90 91 95 01 	lds	r25, 0x0195
    14d2:	a0 91 96 01 	lds	r26, 0x0196
    14d6:	b0 91 97 01 	lds	r27, 0x0197
    14da:	80 93 b1 01 	sts	0x01B1, r24
    14de:	90 93 b2 01 	sts	0x01B2, r25
    14e2:	a0 93 b3 01 	sts	0x01B3, r26
    14e6:	b0 93 b4 01 	sts	0x01B4, r27
		max_theta = M_PI;
    14ea:	8b ed       	ldi	r24, 0xDB	; 219
    14ec:	9f e0       	ldi	r25, 0x0F	; 15
    14ee:	a9 e4       	ldi	r26, 0x49	; 73
    14f0:	b0 e4       	ldi	r27, 0x40	; 64
    14f2:	80 93 0e 01 	sts	0x010E, r24
    14f6:	90 93 0f 01 	sts	0x010F, r25
    14fa:	a0 93 10 01 	sts	0x0110, r26
    14fe:	b0 93 11 01 	sts	0x0111, r27
		theta_kd = 0.01;
    1502:	8a e0       	ldi	r24, 0x0A	; 10
    1504:	97 ed       	ldi	r25, 0xD7	; 215
    1506:	a3 e2       	ldi	r26, 0x23	; 35
    1508:	bc e3       	ldi	r27, 0x3C	; 60
    150a:	80 93 ad 01 	sts	0x01AD, r24
    150e:	90 93 ae 01 	sts	0x01AE, r25
    1512:	a0 93 af 01 	sts	0x01AF, r26
    1516:	b0 93 b0 01 	sts	0x01B0, r27
		theta_kp = 1.8;
    151a:	46 e6       	ldi	r20, 0x66	; 102
    151c:	56 e6       	ldi	r21, 0x66	; 102
    151e:	66 ee       	ldi	r22, 0xE6	; 230
    1520:	7f e3       	ldi	r23, 0x3F	; 63
    1522:	40 93 0a 01 	sts	0x010A, r20
    1526:	50 93 0b 01 	sts	0x010B, r21
    152a:	60 93 0c 01 	sts	0x010C, r22
    152e:	70 93 0d 01 	sts	0x010D, r23
		linear_kd = 0.01;
    1532:	80 93 02 01 	sts	0x0102, r24
    1536:	90 93 03 01 	sts	0x0103, r25
    153a:	a0 93 04 01 	sts	0x0104, r26
    153e:	b0 93 05 01 	sts	0x0105, r27
		linear_kp = 0.2;
    1542:	8d ec       	ldi	r24, 0xCD	; 205
    1544:	9c ec       	ldi	r25, 0xCC	; 204
    1546:	ac e4       	ldi	r26, 0x4C	; 76
    1548:	be e3       	ldi	r27, 0x3E	; 62
    154a:	80 93 06 01 	sts	0x0106, r24
    154e:	90 93 07 01 	sts	0x0107, r25
    1552:	a0 93 08 01 	sts	0x0108, r26
    1556:	b0 93 09 01 	sts	0x0109, r27
		max_duty_cycle = DUTY_CYCLE_PUCK;
    155a:	8d ec       	ldi	r24, 0xCD	; 205
    155c:	9c ec       	ldi	r25, 0xCC	; 204
    155e:	ac ec       	ldi	r26, 0xCC	; 204
    1560:	be e3       	ldi	r27, 0x3E	; 62
    1562:	80 93 12 01 	sts	0x0112, r24
    1566:	90 93 13 01 	sts	0x0113, r25
    156a:	a0 93 14 01 	sts	0x0114, r26
    156e:	b0 93 15 01 	sts	0x0115, r27
		m_green(ON)
    1572:	6a 9a       	sbi	0x0d, 2	; 13
    1574:	72 98       	cbi	0x0e, 2	; 14
		
		if (dist < 155){	//If you are within 5 pixels of home, consider yourself home
    1576:	d1 e0       	ldi	r29, 0x01	; 1
    1578:	c0 e0       	ldi	r28, 0x00	; 0
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	4b e1       	ldi	r20, 0x1B	; 27
    1580:	53 e4       	ldi	r21, 0x43	; 67
    1582:	c7 01       	movw	r24, r14
    1584:	b6 01       	movw	r22, r12
    1586:	0e 94 2f 18 	call	0x305e	; 0x305e <__cmpsf2>
    158a:	88 23       	and	r24, r24
    158c:	0c f0       	brlt	.+2      	; 0x1590 <goalie_action+0x142>
    158e:	d0 e0       	ldi	r29, 0x00	; 0
int goalie_action(int goalie_home)
{
	/* If the puck is within range, become an attacker and get the puck */
	if (puck_dist > 90){	
		role = ATTACK;
		return goalie_home;
    1590:	8d 2f       	mov	r24, r29
    1592:	9c 2f       	mov	r25, r28
    1594:	72 c0       	rjmp	.+228    	; 0x167a <goalie_action+0x22c>
		}
		return goalie_home;
	}
	
	/* If goalie is home, turn off linear motion */
	linear_kd = 0.0;
    1596:	10 92 02 01 	sts	0x0102, r1
    159a:	10 92 03 01 	sts	0x0103, r1
    159e:	10 92 04 01 	sts	0x0104, r1
    15a2:	10 92 05 01 	sts	0x0105, r1
	linear_kp = 0.0;
    15a6:	10 92 06 01 	sts	0x0106, r1
    15aa:	10 92 07 01 	sts	0x0107, r1
    15ae:	10 92 08 01 	sts	0x0108, r1
    15b2:	10 92 09 01 	sts	0x0109, r1
	theta_kd = 0.02;
    15b6:	8a e0       	ldi	r24, 0x0A	; 10
    15b8:	97 ed       	ldi	r25, 0xD7	; 215
    15ba:	a3 ea       	ldi	r26, 0xA3	; 163
    15bc:	bc e3       	ldi	r27, 0x3C	; 60
    15be:	80 93 ad 01 	sts	0x01AD, r24
    15c2:	90 93 ae 01 	sts	0x01AE, r25
    15c6:	a0 93 af 01 	sts	0x01AF, r26
    15ca:	b0 93 b0 01 	sts	0x01B0, r27
	theta_kp = 0.8;
    15ce:	8d ec       	ldi	r24, 0xCD	; 205
    15d0:	9c ec       	ldi	r25, 0xCC	; 204
    15d2:	ac e4       	ldi	r26, 0x4C	; 76
    15d4:	bf e3       	ldi	r27, 0x3F	; 63
    15d6:	80 93 0a 01 	sts	0x010A, r24
    15da:	90 93 0b 01 	sts	0x010B, r25
    15de:	a0 93 0c 01 	sts	0x010C, r26
    15e2:	b0 93 0d 01 	sts	0x010D, r27
	
	/* If the robot drifts away from its own goal, return home*/
	if (dist > 160){
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e2       	ldi	r20, 0x20	; 32
    15ec:	53 e4       	ldi	r21, 0x43	; 67
    15ee:	c7 01       	movw	r24, r14
    15f0:	b6 01       	movw	r22, r12
    15f2:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__gesf2>
    15f6:	18 16       	cp	r1, r24
    15f8:	f4 f1       	brlt	.+124    	; 0x1676 <goalie_action+0x228>
		goalie_home = 0;
		return goalie_home;
	}
	
	/* if the puck is visible, face the puck */
	if (puck_dist>60){
    15fa:	80 91 86 01 	lds	r24, 0x0186
    15fe:	90 91 87 01 	lds	r25, 0x0187
    1602:	cd 97       	sbiw	r24, 0x3d	; 61
    1604:	1c f1       	brlt	.+70     	; 0x164c <goalie_action+0x1fe>
		x_target = x_puck;
    1606:	80 91 8c 01 	lds	r24, 0x018C
    160a:	90 91 8d 01 	lds	r25, 0x018D
    160e:	a0 91 8e 01 	lds	r26, 0x018E
    1612:	b0 91 8f 01 	lds	r27, 0x018F
    1616:	80 93 b5 01 	sts	0x01B5, r24
    161a:	90 93 b6 01 	sts	0x01B6, r25
    161e:	a0 93 b7 01 	sts	0x01B7, r26
    1622:	b0 93 b8 01 	sts	0x01B8, r27
		y_target = y_puck;
    1626:	80 91 88 01 	lds	r24, 0x0188
    162a:	90 91 89 01 	lds	r25, 0x0189
    162e:	a0 91 8a 01 	lds	r26, 0x018A
    1632:	b0 91 8b 01 	lds	r27, 0x018B
    1636:	80 93 b1 01 	sts	0x01B1, r24
    163a:	90 93 b2 01 	sts	0x01B2, r25
    163e:	a0 93 b3 01 	sts	0x01B3, r26
    1642:	b0 93 b4 01 	sts	0x01B4, r27
		return goalie_home;
    1646:	8c 2f       	mov	r24, r28
    1648:	9d 2f       	mov	r25, r29
    164a:	17 c0       	rjmp	.+46     	; 0x167a <goalie_action+0x22c>
	}
	
	/*otherwise, face the center */
	x_target = 0;
    164c:	10 92 b5 01 	sts	0x01B5, r1
    1650:	10 92 b6 01 	sts	0x01B6, r1
    1654:	10 92 b7 01 	sts	0x01B7, r1
    1658:	10 92 b8 01 	sts	0x01B8, r1
	y_target = 0;
    165c:	10 92 b1 01 	sts	0x01B1, r1
    1660:	10 92 b2 01 	sts	0x01B2, r1
    1664:	10 92 b3 01 	sts	0x01B3, r1
    1668:	10 92 b4 01 	sts	0x01B4, r1

	m_green(OFF);
    166c:	6a 9a       	sbi	0x0d, 2	; 13
    166e:	72 9a       	sbi	0x0e, 2	; 14
	return goalie_home;
    1670:	8c 2f       	mov	r24, r28
    1672:	9d 2f       	mov	r25, r29
    1674:	02 c0       	rjmp	.+4      	; 0x167a <goalie_action+0x22c>
	theta_kp = 0.8;
	
	/* If the robot drifts away from its own goal, return home*/
	if (dist > 160){
		goalie_home = 0;
		return goalie_home;
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
	x_target = 0;
	y_target = 0;

	m_green(OFF);
	return goalie_home;
}
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	08 95       	ret

00001688 <bot_behavior_update>:

/* Update Targets, Gains, and Max Vals */
void bot_behavior_update()
{
	static int goalie_home = 0;
	switch (role) {
    1688:	80 91 00 01 	lds	r24, 0x0100
    168c:	90 91 01 01 	lds	r25, 0x0101
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	19 f0       	breq	.+6      	; 0x169a <bot_behavior_update+0x12>
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	21 f0       	breq	.+8      	; 0x16a0 <bot_behavior_update+0x18>
    1698:	08 95       	ret
		case ATTACK: 
			attack_action();
    169a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <attack_action>
			break;
    169e:	08 95       	ret
		
		case GOALIE: 
			goalie_home = goalie_action(goalie_home);
    16a0:	80 91 84 01 	lds	r24, 0x0184
    16a4:	90 91 85 01 	lds	r25, 0x0185
    16a8:	0e 94 27 0a 	call	0x144e	; 0x144e <goalie_action>
    16ac:	90 93 85 01 	sts	0x0185, r25
    16b0:	80 93 84 01 	sts	0x0184, r24
    16b4:	08 95       	ret

000016b6 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
    16b6:	6e 9a       	sbi	0x0d, 6	; 13
    16b8:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	initialize_robockey();
    16ba:	0e 94 09 01 	call	0x212	; 0x212 <initialize_robockey>
	pause();
    16be:	0e 94 01 08 	call	0x1002	; 0x1002 <pause>

	/* Confirm successful initialization(s) */
	m_green(ON);
    16c2:	6a 9a       	sbi	0x0d, 2	; 13
    16c4:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_position();
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    16c6:	ca e7       	ldi	r28, 0x7A	; 122
    16c8:	d0 e0       	ldi	r29, 0x00	; 0
		bot_behavior_update();
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
		if (wifi_flag) {
			wifi_flag = 0;
			m_red(TOGGLE);
    16ca:	10 e4       	ldi	r17, 0x40	; 64
	/* Confirm successful initialization(s) */
	m_green(ON);

	/* Run */
	while (1){
		update_position();
    16cc:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <update_position>
		if (check(ADCSRA,ADIF)){adc_update();} // Check if ADC conversion has completed
    16d0:	88 81       	ld	r24, Y
    16d2:	84 fd       	sbrc	r24, 4
    16d4:	0e 94 a8 07 	call	0xf50	; 0xf50 <adc_update>
		bot_behavior_update();
    16d8:	0e 94 44 0b 	call	0x1688	; 0x1688 <bot_behavior_update>
		if (check(TIFR3,OCF3A)){motor_update();}	// Check if timestep has completed
    16dc:	c1 99       	sbic	0x18, 1	; 24
    16de:	0e 94 3c 07 	call	0xe78	; 0xe78 <motor_update>
		if (wifi_flag) {
    16e2:	80 91 9e 01 	lds	r24, 0x019E
    16e6:	90 91 9f 01 	lds	r25, 0x019F
    16ea:	89 2b       	or	r24, r25
    16ec:	79 f3       	breq	.-34     	; 0x16cc <main+0x16>
			wifi_flag = 0;
    16ee:	10 92 9f 01 	sts	0x019F, r1
    16f2:	10 92 9e 01 	sts	0x019E, r1
			m_red(TOGGLE);
    16f6:	6e 9a       	sbi	0x0d, 6	; 13
    16f8:	8e b1       	in	r24, 0x0e	; 14
    16fa:	81 27       	eor	r24, r17
    16fc:	8e b9       	out	0x0e, r24	; 14
			wireless_recieve();
    16fe:	0e 94 db 08 	call	0x11b6	; 0x11b6 <wireless_recieve>
    1702:	e4 cf       	rjmp	.-56     	; 0x16cc <main+0x16>

00001704 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Motor PWM Control (Enable both at rollover) */
ISR(TIMER1_COMPA_vect){
    1704:	1f 92       	push	r1
    1706:	0f 92       	push	r0
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	0f 92       	push	r0
    170c:	11 24       	eor	r1, r1
	set(PORTB,0); // B0 Left motor enable
    170e:	28 9a       	sbi	0x05, 0	; 5
	set(PORTB,2); // B2 Right motor enable
    1710:	2a 9a       	sbi	0x05, 2	; 5
}
    1712:	0f 90       	pop	r0
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	0f 90       	pop	r0
    1718:	1f 90       	pop	r1
    171a:	18 95       	reti

0000171c <__vector_18>:

/* Motor PWM Control (Disable left at TCNT1 = OCR1B) */
ISR(TIMER1_COMPB_vect){
    171c:	1f 92       	push	r1
    171e:	0f 92       	push	r0
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	0f 92       	push	r0
    1724:	11 24       	eor	r1, r1
	clear(PORTB,0); // B0 Left motor disable
    1726:	28 98       	cbi	0x05, 0	; 5
}
    1728:	0f 90       	pop	r0
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	0f 90       	pop	r0
    172e:	1f 90       	pop	r1
    1730:	18 95       	reti

00001732 <__vector_19>:

/* Motor PWM Control (Disable right at TCNT1 = OCR1C) */
ISR(TIMER1_COMPC_vect){
    1732:	1f 92       	push	r1
    1734:	0f 92       	push	r0
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	0f 92       	push	r0
    173a:	11 24       	eor	r1, r1
	clear(PORTB,2); // B2 Right motor disable
    173c:	2a 98       	cbi	0x05, 2	; 5
}
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <__vector_3>:


/* Recieve Wireless Comm */
ISR(INT2_vect){
    1748:	1f 92       	push	r1
    174a:	0f 92       	push	r0
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	0f 92       	push	r0
    1750:	11 24       	eor	r1, r1
    1752:	8f 93       	push	r24
    1754:	9f 93       	push	r25
	//m_red(TOGGLE);
	wifi_flag = 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	90 93 9f 01 	sts	0x019F, r25
    175e:	80 93 9e 01 	sts	0x019E, r24
}
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	0f 90       	pop	r0
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	0f 90       	pop	r0
    176c:	1f 90       	pop	r1
    176e:	18 95       	reti

00001770 <__vector_23>:

ISR(TIMER0_OVF_vect){
    1770:	1f 92       	push	r1
    1772:	0f 92       	push	r0
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	0f 92       	push	r0
    1778:	11 24       	eor	r1, r1
    177a:	2f 93       	push	r18
    177c:	3f 93       	push	r19
    177e:	4f 93       	push	r20
    1780:	5f 93       	push	r21
    1782:	6f 93       	push	r22
    1784:	7f 93       	push	r23
    1786:	8f 93       	push	r24
    1788:	9f 93       	push	r25
    178a:	af 93       	push	r26
    178c:	bf 93       	push	r27
    178e:	ef 93       	push	r30
    1790:	ff 93       	push	r31
	
	if (tim0_counts < 10) {
    1792:	80 91 9c 01 	lds	r24, 0x019C
    1796:	90 91 9d 01 	lds	r25, 0x019D
    179a:	8a 30       	cpi	r24, 0x0A	; 10
    179c:	91 05       	cpc	r25, r1
    179e:	34 f4       	brge	.+12     	; 0x17ac <__vector_23+0x3c>
		tim0_counts++; //increment timer counter
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	90 93 9d 01 	sts	0x019D, r25
    17a6:	80 93 9c 01 	sts	0x019C, r24
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <__vector_23+0x56>
		
	} else {
		positioning_LED(OFF); //turn LED off
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <positioning_LED>
		
		clear(TCCR0B,CS02); //turn timer off
    17b4:	85 b5       	in	r24, 0x25	; 37
    17b6:	8b 7f       	andi	r24, 0xFB	; 251
    17b8:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS01);
    17ba:	85 b5       	in	r24, 0x25	; 37
    17bc:	8d 7f       	andi	r24, 0xFD	; 253
    17be:	85 bd       	out	0x25, r24	; 37
		clear(TCCR0B,CS00);
    17c0:	85 b5       	in	r24, 0x25	; 37
    17c2:	8e 7f       	andi	r24, 0xFE	; 254
    17c4:	85 bd       	out	0x25, r24	; 37
	}
}
    17c6:	ff 91       	pop	r31
    17c8:	ef 91       	pop	r30
    17ca:	bf 91       	pop	r27
    17cc:	af 91       	pop	r26
    17ce:	9f 91       	pop	r25
    17d0:	8f 91       	pop	r24
    17d2:	7f 91       	pop	r23
    17d4:	6f 91       	pop	r22
    17d6:	5f 91       	pop	r21
    17d8:	4f 91       	pop	r20
    17da:	3f 91       	pop	r19
    17dc:	2f 91       	pop	r18
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <get_position>:
/************************************************************
Public Functions
************************************************************/

/* Return current x,y, theta */
char get_position(float* postition_buffer){
    17e8:	fc 01       	movw	r30, r24
	postition_buffer[0] = x;
    17ea:	80 91 c9 01 	lds	r24, 0x01C9
    17ee:	90 91 ca 01 	lds	r25, 0x01CA
    17f2:	a0 91 cb 01 	lds	r26, 0x01CB
    17f6:	b0 91 cc 01 	lds	r27, 0x01CC
    17fa:	80 83       	st	Z, r24
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	a2 83       	std	Z+2, r26	; 0x02
    1800:	b3 83       	std	Z+3, r27	; 0x03
	postition_buffer[1] = y;
    1802:	80 91 c5 01 	lds	r24, 0x01C5
    1806:	90 91 c6 01 	lds	r25, 0x01C6
    180a:	a0 91 c7 01 	lds	r26, 0x01C7
    180e:	b0 91 c8 01 	lds	r27, 0x01C8
    1812:	84 83       	std	Z+4, r24	; 0x04
    1814:	95 83       	std	Z+5, r25	; 0x05
    1816:	a6 83       	std	Z+6, r26	; 0x06
    1818:	b7 83       	std	Z+7, r27	; 0x07
	postition_buffer[2] = theta;
    181a:	80 91 c1 01 	lds	r24, 0x01C1
    181e:	90 91 c2 01 	lds	r25, 0x01C2
    1822:	a0 91 c3 01 	lds	r26, 0x01C3
    1826:	b0 91 c4 01 	lds	r27, 0x01C4
    182a:	80 87       	std	Z+8, r24	; 0x08
    182c:	91 87       	std	Z+9, r25	; 0x09
    182e:	a2 87       	std	Z+10, r26	; 0x0a
    1830:	b3 87       	std	Z+11, r27	; 0x0b
	return 1;
}
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	08 95       	ret

00001836 <theta_error_correction>:
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
}

/* Ensures that bot doesn't turn more that PI in search of theta_target */
float theta_error_correction(float error)
{
    1836:	8f 92       	push	r8
    1838:	9f 92       	push	r9
    183a:	af 92       	push	r10
    183c:	bf 92       	push	r11
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ef 92       	push	r14
    1844:	ff 92       	push	r15
    1846:	6b 01       	movw	r12, r22
    1848:	7c 01       	movw	r14, r24
	if(fabs(error)>M_PI){return error-2.0*M_PI*error/fabs(error);}
    184a:	4b 01       	movw	r8, r22
    184c:	5c 01       	movw	r10, r24
    184e:	e8 94       	clt
    1850:	b7 f8       	bld	r11, 7
    1852:	2b ed       	ldi	r18, 0xDB	; 219
    1854:	3f e0       	ldi	r19, 0x0F	; 15
    1856:	49 e4       	ldi	r20, 0x49	; 73
    1858:	50 e4       	ldi	r21, 0x40	; 64
    185a:	c5 01       	movw	r24, r10
    185c:	b4 01       	movw	r22, r8
    185e:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__gesf2>
    1862:	18 16       	cp	r1, r24
    1864:	bc f4       	brge	.+46     	; 0x1894 <theta_error_correction+0x5e>
    1866:	2b ed       	ldi	r18, 0xDB	; 219
    1868:	3f e0       	ldi	r19, 0x0F	; 15
    186a:	49 ec       	ldi	r20, 0xC9	; 201
    186c:	50 e4       	ldi	r21, 0x40	; 64
    186e:	c7 01       	movw	r24, r14
    1870:	b6 01       	movw	r22, r12
    1872:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1876:	a5 01       	movw	r20, r10
    1878:	94 01       	movw	r18, r8
    187a:	0e 94 39 18 	call	0x3072	; 0x3072 <__divsf3>
    187e:	9b 01       	movw	r18, r22
    1880:	ac 01       	movw	r20, r24
    1882:	c7 01       	movw	r24, r14
    1884:	b6 01       	movw	r22, r12
    1886:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
    188a:	56 2f       	mov	r21, r22
    188c:	47 2f       	mov	r20, r23
    188e:	38 2f       	mov	r19, r24
    1890:	29 2f       	mov	r18, r25
    1892:	04 c0       	rjmp	.+8      	; 0x189c <theta_error_correction+0x66>
	else{return error;}
    1894:	5c 2d       	mov	r21, r12
    1896:	4d 2d       	mov	r20, r13
    1898:	3e 2d       	mov	r19, r14
    189a:	2f 2d       	mov	r18, r15
}
    189c:	65 2f       	mov	r22, r21
    189e:	74 2f       	mov	r23, r20
    18a0:	83 2f       	mov	r24, r19
    18a2:	92 2f       	mov	r25, r18
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	df 90       	pop	r13
    18aa:	cf 90       	pop	r12
    18ac:	bf 90       	pop	r11
    18ae:	af 90       	pop	r10
    18b0:	9f 90       	pop	r9
    18b2:	8f 90       	pop	r8
    18b4:	08 95       	ret

000018b6 <update_position>:
}


/* Get x, y, theta, filterupdate control */
void update_position(void)
{
    18b6:	2f 92       	push	r2
    18b8:	3f 92       	push	r3
    18ba:	4f 92       	push	r4
    18bc:	5f 92       	push	r5
    18be:	6f 92       	push	r6
    18c0:	7f 92       	push	r7
    18c2:	8f 92       	push	r8
    18c4:	9f 92       	push	r9
    18c6:	af 92       	push	r10
    18c8:	bf 92       	push	r11
    18ca:	cf 92       	push	r12
    18cc:	df 92       	push	r13
    18ce:	ef 92       	push	r14
    18d0:	ff 92       	push	r15
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	a8 97       	sbiw	r28, 0x28	; 40
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
	// Create Buffer
	unsigned int blobs[12];
	float* robotCenter;

	// Read in Locations
	m_wii_read(blobs);
    18ea:	ce 01       	movw	r24, r28
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	0e 94 02 14 	call	0x2804	; 0x2804 <m_wii_read>
	unsigned int x1 = blobs[0];
	unsigned int y1 = blobs[1];
    18f2:	6b 81       	ldd	r22, Y+3	; 0x03
    18f4:	7c 81       	ldd	r23, Y+4	; 0x04
	unsigned int x2 = blobs[3];
    18f6:	0f 81       	ldd	r16, Y+7	; 0x07
    18f8:	18 85       	ldd	r17, Y+8	; 0x08
	unsigned int y2 = blobs[4];
    18fa:	49 85       	ldd	r20, Y+9	; 0x09
    18fc:	5a 85       	ldd	r21, Y+10	; 0x0a
	unsigned int x3 = blobs[6];
    18fe:	ad 85       	ldd	r26, Y+13	; 0x0d
    1900:	be 85       	ldd	r27, Y+14	; 0x0e
	unsigned int y3 = blobs[7];
    1902:	2f 85       	ldd	r18, Y+15	; 0x0f
    1904:	38 89       	ldd	r19, Y+16	; 0x10
	unsigned int x4 = blobs[9];
    1906:	eb 89       	ldd	r30, Y+19	; 0x13
    1908:	fc 89       	ldd	r31, Y+20	; 0x14
	unsigned int y4 = blobs[10];
    190a:	8d 89       	ldd	r24, Y+21	; 0x15
    190c:	9e 89       	ldd	r25, Y+22	; 0x16
	
	int rawStarData[8] = {x1, x2, x3, x4, y1, y2, y3, y4};
    190e:	e9 80       	ldd	r14, Y+1	; 0x01
    1910:	fa 80       	ldd	r15, Y+2	; 0x02
    1912:	fa 8e       	std	Y+26, r15	; 0x1a
    1914:	e9 8e       	std	Y+25, r14	; 0x19
    1916:	1c 8f       	std	Y+28, r17	; 0x1c
    1918:	0b 8f       	std	Y+27, r16	; 0x1b
    191a:	be 8f       	std	Y+30, r27	; 0x1e
    191c:	ad 8f       	std	Y+29, r26	; 0x1d
    191e:	f8 a3       	std	Y+32, r31	; 0x20
    1920:	ef 8f       	std	Y+31, r30	; 0x1f
    1922:	7a a3       	std	Y+34, r23	; 0x22
    1924:	69 a3       	std	Y+33, r22	; 0x21
    1926:	5c a3       	std	Y+36, r21	; 0x24
    1928:	4b a3       	std	Y+35, r20	; 0x23
    192a:	3e a3       	std	Y+38, r19	; 0x26
    192c:	2d a3       	std	Y+37, r18	; 0x25
    192e:	98 a7       	std	Y+40, r25	; 0x28
    1930:	8f a3       	std	Y+39, r24	; 0x27
	robotCenter = localization_calc(rawStarData, robotCenterPrev);
    1932:	6e e1       	ldi	r22, 0x1E	; 30
    1934:	71 e0       	ldi	r23, 0x01	; 1
    1936:	ce 01       	movw	r24, r28
    1938:	49 96       	adiw	r24, 0x19	; 25
    193a:	0e 94 16 06 	call	0xc2c	; 0xc2c <localization_calc>
    193e:	8c 01       	movw	r16, r24
	
	robotCenterPrev[2] = robotCenter[2];
    1940:	fc 01       	movw	r30, r24
    1942:	80 85       	ldd	r24, Z+8	; 0x08
    1944:	91 85       	ldd	r25, Z+9	; 0x09
    1946:	a2 85       	ldd	r26, Z+10	; 0x0a
    1948:	b3 85       	ldd	r27, Z+11	; 0x0b
    194a:	0f 2e       	mov	r0, r31
    194c:	fe e1       	ldi	r31, 0x1E	; 30
    194e:	2f 2e       	mov	r2, r31
    1950:	f1 e0       	ldi	r31, 0x01	; 1
    1952:	3f 2e       	mov	r3, r31
    1954:	f0 2d       	mov	r31, r0
    1956:	f1 01       	movw	r30, r2
    1958:	80 87       	std	Z+8, r24	; 0x08
    195a:	91 87       	std	Z+9, r25	; 0x09
    195c:	a2 87       	std	Z+10, r26	; 0x0a
    195e:	b3 87       	std	Z+11, r27	; 0x0b
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
    1960:	f8 01       	movw	r30, r16
    1962:	60 85       	ldd	r22, Z+8	; 0x08
    1964:	71 85       	ldd	r23, Z+9	; 0x09
    1966:	82 85       	ldd	r24, Z+10	; 0x0a
    1968:	93 85       	ldd	r25, Z+11	; 0x0b
    196a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <theta_error_correction>
    196e:	2b 01       	movw	r4, r22
    1970:	3c 01       	movw	r6, r24
    1972:	f8 01       	movw	r30, r16
    1974:	60 87       	std	Z+8, r22	; 0x08
    1976:	71 87       	std	Z+9, r23	; 0x09
    1978:	82 87       	std	Z+10, r24	; 0x0a
    197a:	93 87       	std	Z+11, r25	; 0x0b
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    197c:	24 ea       	ldi	r18, 0xA4	; 164
    197e:	30 e7       	ldi	r19, 0x70	; 112
    1980:	4d e7       	ldi	r20, 0x7D	; 125
    1982:	5f e3       	ldi	r21, 0x3F	; 63
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1990:	4b 01       	movw	r8, r22
    1992:	5c 01       	movw	r10, r24
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	37 ed       	ldi	r19, 0xD7	; 215
    1998:	43 e2       	ldi	r20, 0x23	; 35
    199a:	5c e3       	ldi	r21, 0x3C	; 60
    199c:	60 91 c9 01 	lds	r22, 0x01C9
    19a0:	70 91 ca 01 	lds	r23, 0x01CA
    19a4:	80 91 cb 01 	lds	r24, 0x01CB
    19a8:	90 91 cc 01 	lds	r25, 0x01CC
    19ac:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    19b0:	9b 01       	movw	r18, r22
    19b2:	ac 01       	movw	r20, r24
    19b4:	c5 01       	movw	r24, r10
    19b6:	b4 01       	movw	r22, r8
    19b8:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
    19bc:	4b 01       	movw	r8, r22
    19be:	5c 01       	movw	r10, r24
	robotCenterPrev[2] = robotCenter[2];
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
    19c0:	60 93 c9 01 	sts	0x01C9, r22
    19c4:	70 93 ca 01 	sts	0x01CA, r23
    19c8:	80 93 cb 01 	sts	0x01CB, r24
    19cc:	90 93 cc 01 	sts	0x01CC, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    19d0:	24 ea       	ldi	r18, 0xA4	; 164
    19d2:	30 e7       	ldi	r19, 0x70	; 112
    19d4:	4d e7       	ldi	r20, 0x7D	; 125
    19d6:	5f e3       	ldi	r21, 0x3F	; 63
    19d8:	f8 01       	movw	r30, r16
    19da:	64 81       	ldd	r22, Z+4	; 0x04
    19dc:	75 81       	ldd	r23, Z+5	; 0x05
    19de:	86 81       	ldd	r24, Z+6	; 0x06
    19e0:	97 81       	ldd	r25, Z+7	; 0x07
    19e2:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    19e6:	6b 01       	movw	r12, r22
    19e8:	7c 01       	movw	r14, r24
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	37 ed       	ldi	r19, 0xD7	; 215
    19ee:	43 e2       	ldi	r20, 0x23	; 35
    19f0:	5c e3       	ldi	r21, 0x3C	; 60
    19f2:	60 91 c5 01 	lds	r22, 0x01C5
    19f6:	70 91 c6 01 	lds	r23, 0x01C6
    19fa:	80 91 c7 01 	lds	r24, 0x01C7
    19fe:	90 91 c8 01 	lds	r25, 0x01C8
    1a02:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1a06:	9b 01       	movw	r18, r22
    1a08:	ac 01       	movw	r20, r24
    1a0a:	c7 01       	movw	r24, r14
    1a0c:	b6 01       	movw	r22, r12
    1a0e:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
    1a12:	6b 01       	movw	r12, r22
    1a14:	7c 01       	movw	r14, r24
	
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
    1a16:	60 93 c5 01 	sts	0x01C5, r22
    1a1a:	70 93 c6 01 	sts	0x01C6, r23
    1a1e:	80 93 c7 01 	sts	0x01C7, r24
    1a22:	90 93 c8 01 	sts	0x01C8, r25
************************************************************/

/* Lowpass Filter using Alpha_low */
float lowpass(float alpha, float previous_output, float reading)
{
	return ((float)reading*alpha +(1-alpha)*(float)previous_output);
    1a26:	24 ea       	ldi	r18, 0xA4	; 164
    1a28:	30 e7       	ldi	r19, 0x70	; 112
    1a2a:	4d e7       	ldi	r20, 0x7D	; 125
    1a2c:	5f e3       	ldi	r21, 0x3F	; 63
    1a2e:	c3 01       	movw	r24, r6
    1a30:	b2 01       	movw	r22, r4
    1a32:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1a36:	2b 01       	movw	r4, r22
    1a38:	3c 01       	movw	r6, r24
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	37 ed       	ldi	r19, 0xD7	; 215
    1a3e:	43 e2       	ldi	r20, 0x23	; 35
    1a40:	5c e3       	ldi	r21, 0x3C	; 60
    1a42:	60 91 c1 01 	lds	r22, 0x01C1
    1a46:	70 91 c2 01 	lds	r23, 0x01C2
    1a4a:	80 91 c3 01 	lds	r24, 0x01C3
    1a4e:	90 91 c4 01 	lds	r25, 0x01C4
    1a52:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1a56:	9b 01       	movw	r18, r22
    1a58:	ac 01       	movw	r20, r24
    1a5a:	c3 01       	movw	r24, r6
    1a5c:	b2 01       	movw	r22, r4
    1a5e:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
	// Correct for offset discontinuity
	robotCenter[2] = theta_error_correction(robotCenter[2]);
	
	x = lowpass(ALPHA_LOW, x, robotCenter[0]);
	y = lowpass(ALPHA_LOW, y, robotCenter[1]);
	theta = lowpass(ALPHA_LOW, theta, robotCenter[2]);
    1a62:	60 93 c1 01 	sts	0x01C1, r22
    1a66:	70 93 c2 01 	sts	0x01C2, r23
    1a6a:	80 93 c3 01 	sts	0x01C3, r24
    1a6e:	90 93 c4 01 	sts	0x01C4, r25
	
	robotCenterPrev[0] = x;
    1a72:	f1 01       	movw	r30, r2
    1a74:	80 82       	st	Z, r8
    1a76:	91 82       	std	Z+1, r9	; 0x01
    1a78:	a2 82       	std	Z+2, r10	; 0x02
    1a7a:	b3 82       	std	Z+3, r11	; 0x03
	robotCenterPrev[1] = y;
    1a7c:	c4 82       	std	Z+4, r12	; 0x04
    1a7e:	d5 82       	std	Z+5, r13	; 0x05
    1a80:	e6 82       	std	Z+6, r14	; 0x06
    1a82:	f7 82       	std	Z+7, r15	; 0x07
}
    1a84:	a8 96       	adiw	r28, 0x28	; 40
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	ff 90       	pop	r15
    1a9a:	ef 90       	pop	r14
    1a9c:	df 90       	pop	r13
    1a9e:	cf 90       	pop	r12
    1aa0:	bf 90       	pop	r11
    1aa2:	af 90       	pop	r10
    1aa4:	9f 90       	pop	r9
    1aa6:	8f 90       	pop	r8
    1aa8:	7f 90       	pop	r7
    1aaa:	6f 90       	pop	r6
    1aac:	5f 90       	pop	r5
    1aae:	4f 90       	pop	r4
    1ab0:	3f 90       	pop	r3
    1ab2:	2f 90       	pop	r2
    1ab4:	08 95       	ret

00001ab6 <run_motor_control_loop>:



/* PID Control */
void run_motor_control_loop(float x_target, float y_target, float max_duty_cycle, float max_theta, float theta_kp, float theta_kd, float linear_kp, float linear_kd)
{
    1ab6:	4f 92       	push	r4
    1ab8:	5f 92       	push	r5
    1aba:	6f 92       	push	r6
    1abc:	7f 92       	push	r7
    1abe:	8f 92       	push	r8
    1ac0:	9f 92       	push	r9
    1ac2:	af 92       	push	r10
    1ac4:	bf 92       	push	r11
    1ac6:	cf 92       	push	r12
    1ac8:	df 92       	push	r13
    1aca:	ef 92       	push	r14
    1acc:	ff 92       	push	r15
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	68 97       	sbiw	r28, 0x18	; 24
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	29 01       	movw	r4, r18
    1ae8:	3a 01       	movw	r6, r20
    1aea:	e9 8a       	std	Y+17, r14	; 0x11
    1aec:	fa 8a       	std	Y+18, r15	; 0x12
    1aee:	0b 8b       	std	Y+19, r16	; 0x13
    1af0:	1c 8b       	std	Y+20, r17	; 0x14
	// Set theta target
	float theta_target = atan2(y_target-y,x_target-x);
    1af2:	20 91 c9 01 	lds	r18, 0x01C9
    1af6:	30 91 ca 01 	lds	r19, 0x01CA
    1afa:	40 91 cb 01 	lds	r20, 0x01CB
    1afe:	50 91 cc 01 	lds	r21, 0x01CC
    1b02:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
    1b06:	6d 83       	std	Y+5, r22	; 0x05
    1b08:	7e 83       	std	Y+6, r23	; 0x06
    1b0a:	8f 83       	std	Y+7, r24	; 0x07
    1b0c:	98 87       	std	Y+8, r25	; 0x08
    1b0e:	20 91 c5 01 	lds	r18, 0x01C5
    1b12:	30 91 c6 01 	lds	r19, 0x01C6
    1b16:	40 91 c7 01 	lds	r20, 0x01C7
    1b1a:	50 91 c8 01 	lds	r21, 0x01C8
    1b1e:	c3 01       	movw	r24, r6
    1b20:	b2 01       	movw	r22, r4
    1b22:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
    1b26:	69 87       	std	Y+9, r22	; 0x09
    1b28:	7a 87       	std	Y+10, r23	; 0x0a
    1b2a:	8b 87       	std	Y+11, r24	; 0x0b
    1b2c:	9c 87       	std	Y+12, r25	; 0x0c
    1b2e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b30:	3e 81       	ldd	r19, Y+6	; 0x06
    1b32:	4f 81       	ldd	r20, Y+7	; 0x07
    1b34:	58 85       	ldd	r21, Y+8	; 0x08
    1b36:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <atan2>

	// Get theta error based output
	float theta_error = theta_target - theta;
    1b3a:	20 91 c1 01 	lds	r18, 0x01C1
    1b3e:	30 91 c2 01 	lds	r19, 0x01C2
    1b42:	40 91 c3 01 	lds	r20, 0x01C3
    1b46:	50 91 c4 01 	lds	r21, 0x01C4
    1b4a:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
	theta_error = theta_error_correction(theta_error);
    1b4e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <theta_error_correction>
    1b52:	69 83       	std	Y+1, r22	; 0x01
    1b54:	7a 83       	std	Y+2, r23	; 0x02
    1b56:	8b 83       	std	Y+3, r24	; 0x03
    1b58:	9c 83       	std	Y+4, r25	; 0x04

	// Resctict turn radius based on max_theta
	if(fabs(theta_error)>max_theta){
    1b5a:	2b 01       	movw	r4, r22
    1b5c:	3c 01       	movw	r6, r24
    1b5e:	e8 94       	clt
    1b60:	77 f8       	bld	r7, 7
    1b62:	a6 01       	movw	r20, r12
    1b64:	95 01       	movw	r18, r10
    1b66:	c3 01       	movw	r24, r6
    1b68:	b2 01       	movw	r22, r4
    1b6a:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__gesf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	84 f4       	brge	.+32     	; 0x1b92 <run_motor_control_loop+0xdc>
		theta_error = fabs(theta_error)/theta_error*max_theta;
    1b72:	29 81       	ldd	r18, Y+1	; 0x01
    1b74:	3a 81       	ldd	r19, Y+2	; 0x02
    1b76:	4b 81       	ldd	r20, Y+3	; 0x03
    1b78:	5c 81       	ldd	r21, Y+4	; 0x04
    1b7a:	c3 01       	movw	r24, r6
    1b7c:	b2 01       	movw	r22, r4
    1b7e:	0e 94 39 18 	call	0x3072	; 0x3072 <__divsf3>
    1b82:	a6 01       	movw	r20, r12
    1b84:	95 01       	movw	r18, r10
    1b86:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1b8a:	69 83       	std	Y+1, r22	; 0x01
    1b8c:	7a 83       	std	Y+2, r23	; 0x02
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
    1b90:	9c 83       	std	Y+4, r25	; 0x04
	}

	float angular_derivative = (theta_error-previous_theta_error)/TIMESTEP;
    1b92:	20 91 bd 01 	lds	r18, 0x01BD
    1b96:	30 91 be 01 	lds	r19, 0x01BE
    1b9a:	40 91 bf 01 	lds	r20, 0x01BF
    1b9e:	50 91 c0 01 	lds	r21, 0x01C0
    1ba2:	69 81       	ldd	r22, Y+1	; 0x01
    1ba4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
    1bae:	2f e6       	ldi	r18, 0x6F	; 111
    1bb0:	32 e1       	ldi	r19, 0x12	; 18
    1bb2:	43 e8       	ldi	r20, 0x83	; 131
    1bb4:	5a e3       	ldi	r21, 0x3A	; 58
    1bb6:	0e 94 39 18 	call	0x3072	; 0x3072 <__divsf3>
    1bba:	6d 8b       	std	Y+21, r22	; 0x15
    1bbc:	7e 8b       	std	Y+22, r23	; 0x16
    1bbe:	8f 8b       	std	Y+23, r24	; 0x17
    1bc0:	98 8f       	std	Y+24, r25	; 0x18
	float angular_output = theta_kp*theta_error - theta_kd*angular_derivative; //If output > 0, turn left
    1bc2:	29 81       	ldd	r18, Y+1	; 0x01
    1bc4:	3a 81       	ldd	r19, Y+2	; 0x02
    1bc6:	4b 81       	ldd	r20, Y+3	; 0x03
    1bc8:	5c 81       	ldd	r21, Y+4	; 0x04
    1bca:	6b a5       	ldd	r22, Y+43	; 0x2b
    1bcc:	7c a5       	ldd	r23, Y+44	; 0x2c
    1bce:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bd0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bd2:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1bd6:	6b 01       	movw	r12, r22
    1bd8:	7c 01       	movw	r14, r24
    1bda:	2d 89       	ldd	r18, Y+21	; 0x15
    1bdc:	3e 89       	ldd	r19, Y+22	; 0x16
    1bde:	4f 89       	ldd	r20, Y+23	; 0x17
    1be0:	58 8d       	ldd	r21, Y+24	; 0x18
    1be2:	6f a5       	ldd	r22, Y+47	; 0x2f
    1be4:	78 a9       	ldd	r23, Y+48	; 0x30
    1be6:	89 a9       	ldd	r24, Y+49	; 0x31
    1be8:	9a a9       	ldd	r25, Y+50	; 0x32
    1bea:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1bee:	9b 01       	movw	r18, r22
    1bf0:	ac 01       	movw	r20, r24
    1bf2:	c7 01       	movw	r24, r14
    1bf4:	b6 01       	movw	r22, r12
    1bf6:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
	previous_theta_error = theta_error;
    1bfa:	29 81       	ldd	r18, Y+1	; 0x01
    1bfc:	3a 81       	ldd	r19, Y+2	; 0x02
    1bfe:	4b 81       	ldd	r20, Y+3	; 0x03
    1c00:	5c 81       	ldd	r21, Y+4	; 0x04
    1c02:	20 93 bd 01 	sts	0x01BD, r18
    1c06:	30 93 be 01 	sts	0x01BE, r19
    1c0a:	40 93 bf 01 	sts	0x01BF, r20
    1c0e:	50 93 c0 01 	sts	0x01C0, r21
	angular_output = angular_output/M_PI; //Normalize to max value of 1 given Kp gain of 1
    1c12:	2b ed       	ldi	r18, 0xDB	; 219
    1c14:	3f e0       	ldi	r19, 0x0F	; 15
    1c16:	49 e4       	ldi	r20, 0x49	; 73
    1c18:	50 e4       	ldi	r21, 0x40	; 64
    1c1a:	0e 94 39 18 	call	0x3072	; 0x3072 <__divsf3>
    1c1e:	6d 87       	std	Y+13, r22	; 0x0d
    1c20:	7e 87       	std	Y+14, r23	; 0x0e
    1c22:	8f 87       	std	Y+15, r24	; 0x0f
    1c24:	98 8b       	std	Y+16, r25	; 0x10

	
	// Get linear error based output
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
    1c26:	69 81       	ldd	r22, Y+1	; 0x01
    1c28:	7a 81       	ldd	r23, Y+2	; 0x02
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2e:	0e 94 34 18 	call	0x3068	; 0x3068 <cos>
    1c32:	2b 01       	movw	r4, r22
    1c34:	3c 01       	movw	r6, r24
    1c36:	29 85       	ldd	r18, Y+9	; 0x09
    1c38:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c3a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c3c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c3e:	ca 01       	movw	r24, r20
    1c40:	b9 01       	movw	r22, r18
    1c42:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1c46:	6b 01       	movw	r12, r22
    1c48:	7c 01       	movw	r14, r24
    1c4a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c4c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c4e:	4f 81       	ldd	r20, Y+7	; 0x07
    1c50:	58 85       	ldd	r21, Y+8	; 0x08
    1c52:	ca 01       	movw	r24, r20
    1c54:	b9 01       	movw	r22, r18
    1c56:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1c5a:	9b 01       	movw	r18, r22
    1c5c:	ac 01       	movw	r20, r24
    1c5e:	c7 01       	movw	r24, r14
    1c60:	b6 01       	movw	r22, r12
    1c62:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
    1c66:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <sqrt>
    1c6a:	9b 01       	movw	r18, r22
    1c6c:	ac 01       	movw	r20, r24
    1c6e:	c3 01       	movw	r24, r6
    1c70:	b2 01       	movw	r22, r4
    1c72:	9f 77       	andi	r25, 0x7F	; 127
    1c74:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1c78:	6b 01       	movw	r12, r22
    1c7a:	7c 01       	movw	r14, r24
	if (has_puck()) {
    1c7c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <has_puck>
    1c80:	88 23       	and	r24, r24
    1c82:	e1 f0       	breq	.+56     	; 0x1cbc <run_motor_control_loop+0x206>
		if (linear_error<0){
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	a9 01       	movw	r20, r18
    1c8a:	c7 01       	movw	r24, r14
    1c8c:	b6 01       	movw	r22, r12
    1c8e:	0e 94 2f 18 	call	0x305e	; 0x305e <__cmpsf2>
    1c92:	88 23       	and	r24, r24
    1c94:	5c f0       	brlt	.+22     	; 0x1cac <run_motor_control_loop+0x1f6>
			linear_error = 30;
		} else {
			linear_error += 30;
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 ef       	ldi	r20, 0xF0	; 240
    1c9c:	51 e4       	ldi	r21, 0x41	; 65
    1c9e:	c7 01       	movw	r24, r14
    1ca0:	b6 01       	movw	r22, r12
    1ca2:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
    1ca6:	6b 01       	movw	r12, r22
    1ca8:	7c 01       	movw	r14, r24
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <run_motor_control_loop+0x206>
	float y_delta = y_target-y;
	float x_delta = x_target-x;
	float linear_error = fabs(cos(theta_error))*sqrt(y_delta*y_delta+x_delta*x_delta); // Gets component of translational error in direction bot is facing
	if (has_puck()) {
		if (linear_error<0){
			linear_error = 30;
    1cac:	0f 2e       	mov	r0, r31
    1cae:	c1 2c       	mov	r12, r1
    1cb0:	d1 2c       	mov	r13, r1
    1cb2:	f0 ef       	ldi	r31, 0xF0	; 240
    1cb4:	ef 2e       	mov	r14, r31
    1cb6:	f1 e4       	ldi	r31, 0x41	; 65
    1cb8:	ff 2e       	mov	r15, r31
    1cba:	f0 2d       	mov	r31, r0
		} else {
			linear_error += 30;
		}
	}
	float linear_derivative = (linear_error-previous_linear_error)/TIMESTEP;
    1cbc:	20 91 b9 01 	lds	r18, 0x01B9
    1cc0:	30 91 ba 01 	lds	r19, 0x01BA
    1cc4:	40 91 bb 01 	lds	r20, 0x01BB
    1cc8:	50 91 bc 01 	lds	r21, 0x01BC
    1ccc:	c7 01       	movw	r24, r14
    1cce:	b6 01       	movw	r22, r12
    1cd0:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
    1cd4:	2f e6       	ldi	r18, 0x6F	; 111
    1cd6:	32 e1       	ldi	r19, 0x12	; 18
    1cd8:	43 e8       	ldi	r20, 0x83	; 131
    1cda:	5a e3       	ldi	r21, 0x3A	; 58
    1cdc:	0e 94 39 18 	call	0x3072	; 0x3072 <__divsf3>
    1ce0:	4b 01       	movw	r8, r22
    1ce2:	5c 01       	movw	r10, r24
	float linear_output = linear_kp*linear_error - linear_kd*linear_derivative;
    1ce4:	a7 01       	movw	r20, r14
    1ce6:	96 01       	movw	r18, r12
    1ce8:	6b a9       	ldd	r22, Y+51	; 0x33
    1cea:	7c a9       	ldd	r23, Y+52	; 0x34
    1cec:	8d a9       	ldd	r24, Y+53	; 0x35
    1cee:	9e a9       	ldd	r25, Y+54	; 0x36
    1cf0:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1cf4:	2b 01       	movw	r4, r22
    1cf6:	3c 01       	movw	r6, r24
    1cf8:	a5 01       	movw	r20, r10
    1cfa:	94 01       	movw	r18, r8
    1cfc:	6f a9       	ldd	r22, Y+55	; 0x37
    1cfe:	78 ad       	ldd	r23, Y+56	; 0x38
    1d00:	89 ad       	ldd	r24, Y+57	; 0x39
    1d02:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d04:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1d08:	9b 01       	movw	r18, r22
    1d0a:	ac 01       	movw	r20, r24
    1d0c:	c3 01       	movw	r24, r6
    1d0e:	b2 01       	movw	r22, r4
    1d10:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
    1d14:	2b 01       	movw	r4, r22
    1d16:	3c 01       	movw	r6, r24
	previous_linear_error = linear_error;
    1d18:	c0 92 b9 01 	sts	0x01B9, r12
    1d1c:	d0 92 ba 01 	sts	0x01BA, r13
    1d20:	e0 92 bb 01 	sts	0x01BB, r14
    1d24:	f0 92 bc 01 	sts	0x01BC, r15
	if(linear_output>40.0){linear_output=40.0;}
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e2       	ldi	r20, 0x20	; 32
    1d2e:	52 e4       	ldi	r21, 0x42	; 66
    1d30:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__gesf2>
    1d34:	18 16       	cp	r1, r24
    1d36:	44 f4       	brge	.+16     	; 0x1d48 <run_motor_control_loop+0x292>
    1d38:	0f 2e       	mov	r0, r31
    1d3a:	41 2c       	mov	r4, r1
    1d3c:	51 2c       	mov	r5, r1
    1d3e:	f0 e2       	ldi	r31, 0x20	; 32
    1d40:	6f 2e       	mov	r6, r31
    1d42:	f2 e4       	ldi	r31, 0x42	; 66
    1d44:	7f 2e       	mov	r7, r31
    1d46:	f0 2d       	mov	r31, r0
	linear_output = linear_output/40; //Normalize to value of 1 at 40 pixels (~10 cm) given Kp gain of 1
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	52 e4       	ldi	r21, 0x42	; 66
    1d50:	c3 01       	movw	r24, r6
    1d52:	b2 01       	movw	r22, r4
    1d54:	0e 94 39 18 	call	0x3072	; 0x3072 <__divsf3>
    1d58:	6b 01       	movw	r12, r22
    1d5a:	7c 01       	movw	r14, r24
	
	if (linear_derivative < 0.1 && angular_derivative < 0.01) {
    1d5c:	2d ec       	ldi	r18, 0xCD	; 205
    1d5e:	3c ec       	ldi	r19, 0xCC	; 204
    1d60:	4c ec       	ldi	r20, 0xCC	; 204
    1d62:	5d e3       	ldi	r21, 0x3D	; 61
    1d64:	c5 01       	movw	r24, r10
    1d66:	b4 01       	movw	r22, r8
    1d68:	0e 94 2f 18 	call	0x305e	; 0x305e <__cmpsf2>
    1d6c:	88 23       	and	r24, r24
    1d6e:	0c f5       	brge	.+66     	; 0x1db2 <run_motor_control_loop+0x2fc>
    1d70:	2a e0       	ldi	r18, 0x0A	; 10
    1d72:	37 ed       	ldi	r19, 0xD7	; 215
    1d74:	43 e2       	ldi	r20, 0x23	; 35
    1d76:	5c e3       	ldi	r21, 0x3C	; 60
    1d78:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d80:	0e 94 2f 18 	call	0x305e	; 0x305e <__cmpsf2>
    1d84:	88 23       	and	r24, r24
    1d86:	ac f4       	brge	.+42     	; 0x1db2 <run_motor_control_loop+0x2fc>
		angular_output = 0.2*fabs(theta_error)/theta_error;
    1d88:	2d ec       	ldi	r18, 0xCD	; 205
    1d8a:	3c ec       	ldi	r19, 0xCC	; 204
    1d8c:	4c e4       	ldi	r20, 0x4C	; 76
    1d8e:	5e e3       	ldi	r21, 0x3E	; 62
    1d90:	69 81       	ldd	r22, Y+1	; 0x01
    1d92:	7a 81       	ldd	r23, Y+2	; 0x02
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	9c 81       	ldd	r25, Y+4	; 0x04
    1d98:	9f 77       	andi	r25, 0x7F	; 127
    1d9a:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1d9e:	29 81       	ldd	r18, Y+1	; 0x01
    1da0:	3a 81       	ldd	r19, Y+2	; 0x02
    1da2:	4b 81       	ldd	r20, Y+3	; 0x03
    1da4:	5c 81       	ldd	r21, Y+4	; 0x04
    1da6:	0e 94 39 18 	call	0x3072	; 0x3072 <__divsf3>
    1daa:	6d 87       	std	Y+13, r22	; 0x0d
    1dac:	7e 87       	std	Y+14, r23	; 0x0e
    1dae:	8f 87       	std	Y+15, r24	; 0x0f
    1db0:	98 8b       	std	Y+16, r25	; 0x10
	}
	
	// Update duty cycle based on angle
	left_duty_cycle = - angular_output;
    1db2:	8d 84       	ldd	r8, Y+13	; 0x0d
    1db4:	9e 84       	ldd	r9, Y+14	; 0x0e
    1db6:	af 84       	ldd	r10, Y+15	; 0x0f
    1db8:	b8 88       	ldd	r11, Y+16	; 0x10
    1dba:	b7 fa       	bst	r11, 7
    1dbc:	b0 94       	com	r11
    1dbe:	b7 f8       	bld	r11, 7
    1dc0:	b0 94       	com	r11
	right_duty_cycle = angular_output;
	
	// Update duty cycle based on linear distance
	if (fabs(theta_error) < M_PI/2){
    1dc2:	69 81       	ldd	r22, Y+1	; 0x01
    1dc4:	7a 81       	ldd	r23, Y+2	; 0x02
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dca:	9f 77       	andi	r25, 0x7F	; 127
    1dcc:	2b ed       	ldi	r18, 0xDB	; 219
    1dce:	3f e0       	ldi	r19, 0x0F	; 15
    1dd0:	49 ec       	ldi	r20, 0xC9	; 201
    1dd2:	5f e3       	ldi	r21, 0x3F	; 63
    1dd4:	0e 94 2f 18 	call	0x305e	; 0x305e <__cmpsf2>
    1dd8:	88 23       	and	r24, r24
    1dda:	0c f5       	brge	.+66     	; 0x1e1e <run_motor_control_loop+0x368>
		left_duty_cycle += linear_output;
    1ddc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1dde:	3e 85       	ldd	r19, Y+14	; 0x0e
    1de0:	4f 85       	ldd	r20, Y+15	; 0x0f
    1de2:	58 89       	ldd	r21, Y+16	; 0x10
    1de4:	c7 01       	movw	r24, r14
    1de6:	b6 01       	movw	r22, r12
    1de8:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
    1dec:	60 93 1a 01 	sts	0x011A, r22
    1df0:	70 93 1b 01 	sts	0x011B, r23
    1df4:	80 93 1c 01 	sts	0x011C, r24
    1df8:	90 93 1d 01 	sts	0x011D, r25
		right_duty_cycle += linear_output;
    1dfc:	a7 01       	movw	r20, r14
    1dfe:	96 01       	movw	r18, r12
    1e00:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e02:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e06:	98 89       	ldd	r25, Y+16	; 0x10
    1e08:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
    1e0c:	60 93 16 01 	sts	0x0116, r22
    1e10:	70 93 17 01 	sts	0x0117, r23
    1e14:	80 93 18 01 	sts	0x0118, r24
    1e18:	90 93 19 01 	sts	0x0119, r25
    1e1c:	1e c0       	rjmp	.+60     	; 0x1e5a <run_motor_control_loop+0x3a4>
		} else{
		left_duty_cycle -= linear_output;
    1e1e:	a7 01       	movw	r20, r14
    1e20:	96 01       	movw	r18, r12
    1e22:	c5 01       	movw	r24, r10
    1e24:	b4 01       	movw	r22, r8
    1e26:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
    1e2a:	60 93 1a 01 	sts	0x011A, r22
    1e2e:	70 93 1b 01 	sts	0x011B, r23
    1e32:	80 93 1c 01 	sts	0x011C, r24
    1e36:	90 93 1d 01 	sts	0x011D, r25
		right_duty_cycle -= linear_output;
    1e3a:	a7 01       	movw	r20, r14
    1e3c:	96 01       	movw	r18, r12
    1e3e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e40:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e44:	98 89       	ldd	r25, Y+16	; 0x10
    1e46:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__subsf3>
    1e4a:	60 93 16 01 	sts	0x0116, r22
    1e4e:	70 93 17 01 	sts	0x0117, r23
    1e52:	80 93 18 01 	sts	0x0118, r24
    1e56:	90 93 19 01 	sts	0x0119, r25
	
	//If it has the puck, don't let either of the motors spin backwards 

		
	// Set motor direction based on pos/neg
	if (left_duty_cycle<0){clear(PORTB,1);}
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	a9 01       	movw	r20, r18
    1e60:	60 91 1a 01 	lds	r22, 0x011A
    1e64:	70 91 1b 01 	lds	r23, 0x011B
    1e68:	80 91 1c 01 	lds	r24, 0x011C
    1e6c:	90 91 1d 01 	lds	r25, 0x011D
    1e70:	0e 94 2f 18 	call	0x305e	; 0x305e <__cmpsf2>
    1e74:	88 23       	and	r24, r24
    1e76:	14 f4       	brge	.+4      	; 0x1e7c <run_motor_control_loop+0x3c6>
    1e78:	29 98       	cbi	0x05, 1	; 5
    1e7a:	01 c0       	rjmp	.+2      	; 0x1e7e <run_motor_control_loop+0x3c8>
	else{set(PORTB,1);}
    1e7c:	29 9a       	sbi	0x05, 1	; 5
	
	if (right_duty_cycle<0){clear(PORTB,3);}
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	a9 01       	movw	r20, r18
    1e84:	60 91 16 01 	lds	r22, 0x0116
    1e88:	70 91 17 01 	lds	r23, 0x0117
    1e8c:	80 91 18 01 	lds	r24, 0x0118
    1e90:	90 91 19 01 	lds	r25, 0x0119
    1e94:	0e 94 2f 18 	call	0x305e	; 0x305e <__cmpsf2>
    1e98:	88 23       	and	r24, r24
    1e9a:	14 f4       	brge	.+4      	; 0x1ea0 <run_motor_control_loop+0x3ea>
    1e9c:	2b 98       	cbi	0x05, 3	; 5
    1e9e:	01 c0       	rjmp	.+2      	; 0x1ea2 <run_motor_control_loop+0x3ec>
	else{set(PORTB,3);}
    1ea0:	2b 9a       	sbi	0x05, 3	; 5
	
	// Set duty cycle
	left_duty_cycle = fabs(left_duty_cycle);
    1ea2:	80 90 1a 01 	lds	r8, 0x011A
    1ea6:	90 90 1b 01 	lds	r9, 0x011B
    1eaa:	a0 90 1c 01 	lds	r10, 0x011C
    1eae:	b0 90 1d 01 	lds	r11, 0x011D
    1eb2:	e8 94       	clt
    1eb4:	b7 f8       	bld	r11, 7
    1eb6:	80 92 1a 01 	sts	0x011A, r8
    1eba:	90 92 1b 01 	sts	0x011B, r9
    1ebe:	a0 92 1c 01 	sts	0x011C, r10
    1ec2:	b0 92 1d 01 	sts	0x011D, r11
	right_duty_cycle = fabs(right_duty_cycle);
    1ec6:	c0 90 16 01 	lds	r12, 0x0116
    1eca:	d0 90 17 01 	lds	r13, 0x0117
    1ece:	e0 90 18 01 	lds	r14, 0x0118
    1ed2:	f0 90 19 01 	lds	r15, 0x0119
    1ed6:	e8 94       	clt
    1ed8:	f7 f8       	bld	r15, 7
    1eda:	c0 92 16 01 	sts	0x0116, r12
    1ede:	d0 92 17 01 	sts	0x0117, r13
    1ee2:	e0 92 18 01 	sts	0x0118, r14
    1ee6:	f0 92 19 01 	sts	0x0119, r15
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
    1eea:	a7 01       	movw	r20, r14
    1eec:	96 01       	movw	r18, r12
    1eee:	c5 01       	movw	r24, r10
    1ef0:	b4 01       	movw	r22, r8
    1ef2:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__gesf2>
    1ef6:	18 16       	cp	r1, r24
    1ef8:	2c f0       	brlt	.+10     	; 0x1f04 <run_motor_control_loop+0x44e>
	{
		max = left_duty_cycle;
	} else
	{
		max = right_duty_cycle;
    1efa:	1c 2d       	mov	r17, r12
    1efc:	0d 2d       	mov	r16, r13
    1efe:	7e 2c       	mov	r7, r14
    1f00:	6f 2c       	mov	r6, r15
    1f02:	04 c0       	rjmp	.+8      	; 0x1f0c <run_motor_control_loop+0x456>
	
	// Get larger of two duty cycles
	float max = 0;
	if (left_duty_cycle > right_duty_cycle)
	{
		max = left_duty_cycle;
    1f04:	18 2d       	mov	r17, r8
    1f06:	09 2d       	mov	r16, r9
    1f08:	7a 2c       	mov	r7, r10
    1f0a:	6b 2c       	mov	r6, r11
	{
		max = right_duty_cycle;
	}
	
	// Normalize duty cycles
	if (max > max_duty_cycle)
    1f0c:	29 89       	ldd	r18, Y+17	; 0x11
    1f0e:	3a 89       	ldd	r19, Y+18	; 0x12
    1f10:	4b 89       	ldd	r20, Y+19	; 0x13
    1f12:	5c 89       	ldd	r21, Y+20	; 0x14
    1f14:	61 2f       	mov	r22, r17
    1f16:	70 2f       	mov	r23, r16
    1f18:	87 2d       	mov	r24, r7
    1f1a:	96 2d       	mov	r25, r6
    1f1c:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__gesf2>
    1f20:	18 16       	cp	r1, r24
    1f22:	64 f5       	brge	.+88     	; 0x1f7c <run_motor_control_loop+0x4c6>
	{
		left_duty_cycle = left_duty_cycle/max*max_duty_cycle;
    1f24:	21 2f       	mov	r18, r17
    1f26:	30 2f       	mov	r19, r16
    1f28:	47 2d       	mov	r20, r7
    1f2a:	56 2d       	mov	r21, r6
    1f2c:	c5 01       	movw	r24, r10
    1f2e:	b4 01       	movw	r22, r8
    1f30:	0e 94 39 18 	call	0x3072	; 0x3072 <__divsf3>
    1f34:	29 89       	ldd	r18, Y+17	; 0x11
    1f36:	3a 89       	ldd	r19, Y+18	; 0x12
    1f38:	4b 89       	ldd	r20, Y+19	; 0x13
    1f3a:	5c 89       	ldd	r21, Y+20	; 0x14
    1f3c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1f40:	60 93 1a 01 	sts	0x011A, r22
    1f44:	70 93 1b 01 	sts	0x011B, r23
    1f48:	80 93 1c 01 	sts	0x011C, r24
    1f4c:	90 93 1d 01 	sts	0x011D, r25
		right_duty_cycle = right_duty_cycle/max*max_duty_cycle;
    1f50:	21 2f       	mov	r18, r17
    1f52:	30 2f       	mov	r19, r16
    1f54:	47 2d       	mov	r20, r7
    1f56:	56 2d       	mov	r21, r6
    1f58:	c7 01       	movw	r24, r14
    1f5a:	b6 01       	movw	r22, r12
    1f5c:	0e 94 39 18 	call	0x3072	; 0x3072 <__divsf3>
    1f60:	29 89       	ldd	r18, Y+17	; 0x11
    1f62:	3a 89       	ldd	r19, Y+18	; 0x12
    1f64:	4b 89       	ldd	r20, Y+19	; 0x13
    1f66:	5c 89       	ldd	r21, Y+20	; 0x14
    1f68:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1f6c:	60 93 16 01 	sts	0x0116, r22
    1f70:	70 93 17 01 	sts	0x0117, r23
    1f74:	80 93 18 01 	sts	0x0118, r24
    1f78:	90 93 19 01 	sts	0x0119, r25
	}
	


	// Update timer values
	OCR1B = ((float)OCR1A)*left_duty_cycle;
    1f7c:	08 e8       	ldi	r16, 0x88	; 136
    1f7e:	10 e0       	ldi	r17, 0x00	; 0
    1f80:	f8 01       	movw	r30, r16
    1f82:	60 81       	ld	r22, Z
    1f84:	71 81       	ldd	r23, Z+1	; 0x01
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__floatunsisf>
    1f8e:	20 91 1a 01 	lds	r18, 0x011A
    1f92:	30 91 1b 01 	lds	r19, 0x011B
    1f96:	40 91 1c 01 	lds	r20, 0x011C
    1f9a:	50 91 1d 01 	lds	r21, 0x011D
    1f9e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1fa2:	0e 94 ab 18 	call	0x3156	; 0x3156 <__fixunssfsi>
    1fa6:	70 93 8b 00 	sts	0x008B, r23
    1faa:	60 93 8a 00 	sts	0x008A, r22
	OCR1C = ((float)OCR1A)*right_duty_cycle;
    1fae:	f8 01       	movw	r30, r16
    1fb0:	60 81       	ld	r22, Z
    1fb2:	71 81       	ldd	r23, Z+1	; 0x01
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__floatunsisf>
    1fbc:	20 91 16 01 	lds	r18, 0x0116
    1fc0:	30 91 17 01 	lds	r19, 0x0117
    1fc4:	40 91 18 01 	lds	r20, 0x0118
    1fc8:	50 91 19 01 	lds	r21, 0x0119
    1fcc:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    1fd0:	0e 94 ab 18 	call	0x3156	; 0x3156 <__fixunssfsi>
    1fd4:	70 93 8d 00 	sts	0x008D, r23
    1fd8:	60 93 8c 00 	sts	0x008C, r22

}
    1fdc:	68 96       	adiw	r28, 0x18	; 24
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	df 91       	pop	r29
    1fea:	cf 91       	pop	r28
    1fec:	1f 91       	pop	r17
    1fee:	0f 91       	pop	r16
    1ff0:	ff 90       	pop	r15
    1ff2:	ef 90       	pop	r14
    1ff4:	df 90       	pop	r13
    1ff6:	cf 90       	pop	r12
    1ff8:	bf 90       	pop	r11
    1ffa:	af 90       	pop	r10
    1ffc:	9f 90       	pop	r9
    1ffe:	8f 90       	pop	r8
    2000:	7f 90       	pop	r7
    2002:	6f 90       	pop	r6
    2004:	5f 90       	pop	r5
    2006:	4f 90       	pop	r4
    2008:	08 95       	ret

0000200a <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    200a:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    200c:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    200e:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    2010:	8c e0       	ldi	r24, 0x0C	; 12
    2012:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    2016:	e9 e6       	ldi	r30, 0x69	; 105
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	80 62       	ori	r24, 0x20	; 32
    201e:	80 83       	st	Z, r24
    2020:	80 81       	ld	r24, Z
    2022:	8f 7e       	andi	r24, 0xEF	; 239
    2024:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    2026:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    2028:	78 94       	sei
    202a:	08 95       	ret

0000202c <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    202c:	1f 93       	push	r17
    202e:	cf 93       	push	r28
    2030:	df 93       	push	r29
    2032:	18 2f       	mov	r17, r24
    2034:	d6 2f       	mov	r29, r22
    2036:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    2038:	0e 94 05 10 	call	0x200a	; 0x200a <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    203c:	94 ea       	ldi	r25, 0xA4	; 164
    203e:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2042:	ec eb       	ldi	r30, 0xBC	; 188
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	90 81       	ld	r25, Z
    2048:	99 23       	and	r25, r25
    204a:	ec f7       	brge	.-6      	; 0x2046 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    204c:	90 e5       	ldi	r25, 0x50	; 80
    204e:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2052:	94 e8       	ldi	r25, 0x84	; 132
    2054:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2058:	ec eb       	ldi	r30, 0xBC	; 188
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	90 81       	ld	r25, Z
    205e:	99 23       	and	r25, r25
    2060:	ec f7       	brge	.-6      	; 0x205c <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2062:	90 91 b9 00 	lds	r25, 0x00B9
    2066:	98 7f       	andi	r25, 0xF8	; 248
    2068:	90 32       	cpi	r25, 0x20	; 32
    206a:	29 f4       	brne	.+10     	; 0x2076 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    206c:	84 e9       	ldi	r24, 0x94	; 148
    206e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	2d c0       	rjmp	.+90     	; 0x20d0 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    207c:	84 e8       	ldi	r24, 0x84	; 132
    207e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2082:	ec eb       	ldi	r30, 0xBC	; 188
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	90 81       	ld	r25, Z
    2088:	99 23       	and	r25, r25
    208a:	ec f7       	brge	.-6      	; 0x2086 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    208c:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    2090:	84 e8       	ldi	r24, 0x84	; 132
    2092:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2096:	ec eb       	ldi	r30, 0xBC	; 188
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	88 23       	and	r24, r24
    209e:	ec f7       	brge	.-6      	; 0x209a <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    20a0:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    20a4:	84 e8       	ldi	r24, 0x84	; 132
    20a6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    20aa:	ec eb       	ldi	r30, 0xBC	; 188
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	88 23       	and	r24, r24
    20b2:	ec f7       	brge	.-6      	; 0x20ae <m_rf_open+0x82>
	
	TWDR = packet_length;
    20b4:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    20b8:	84 e8       	ldi	r24, 0x84	; 132
    20ba:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    20be:	ec eb       	ldi	r30, 0xBC	; 188
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	88 23       	and	r24, r24
    20c6:	ec f7       	brge	.-6      	; 0x20c2 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    20c8:	84 e9       	ldi	r24, 0x94	; 148
    20ca:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
}
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	08 95       	ret

000020d8 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    20de:	84 ea       	ldi	r24, 0xA4	; 164
    20e0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    20e4:	ec eb       	ldi	r30, 0xBC	; 188
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	90 81       	ld	r25, Z
    20ea:	99 23       	and	r25, r25
    20ec:	ec f7       	brge	.-6      	; 0x20e8 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    20ee:	81 e5       	ldi	r24, 0x51	; 81
    20f0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    20f4:	84 e8       	ldi	r24, 0x84	; 132
    20f6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    20fa:	ec eb       	ldi	r30, 0xBC	; 188
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	90 81       	ld	r25, Z
    2100:	99 23       	and	r25, r25
    2102:	ec f7       	brge	.-6      	; 0x20fe <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    2104:	80 91 b9 00 	lds	r24, 0x00B9
    2108:	88 7f       	andi	r24, 0xF8	; 248
    210a:	88 34       	cpi	r24, 0x48	; 72
    210c:	29 f4       	brne	.+10     	; 0x2118 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    210e:	84 e9       	ldi	r24, 0x94	; 148
    2110:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	41 c0       	rjmp	.+130    	; 0x219a <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2118:	84 ec       	ldi	r24, 0xC4	; 196
    211a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    211e:	ec eb       	ldi	r30, 0xBC	; 188
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	90 81       	ld	r25, Z
    2124:	99 23       	and	r25, r25
    2126:	ec f7       	brge	.-6      	; 0x2122 <m_rf_read+0x4a>
	bytes = TWDR;
    2128:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    212c:	46 13       	cpse	r20, r22
    212e:	09 c0       	rjmp	.+18     	; 0x2142 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2130:	84 2f       	mov	r24, r20
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	18 16       	cp	r1, r24
    2138:	19 06       	cpc	r1, r25
    213a:	44 f0       	brlt	.+16     	; 0x214c <m_rf_read+0x74>
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	50 e0       	ldi	r21, 0x00	; 0
    2140:	1a c0       	rjmp	.+52     	; 0x2176 <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2142:	84 e9       	ldi	r24, 0x94	; 148
    2144:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	27 c0       	rjmp	.+78     	; 0x219a <m_rf_read+0xc2>
    214c:	d9 01       	movw	r26, r18
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	41 50       	subi	r20, 0x01	; 1
    2152:	51 09       	sbc	r21, r1
    2154:	b9 01       	movw	r22, r18
    2156:	64 0f       	add	r22, r20
    2158:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    215a:	ec eb       	ldi	r30, 0xBC	; 188
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    2160:	cb eb       	ldi	r28, 0xBB	; 187
    2162:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2164:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2166:	90 81       	ld	r25, Z
    2168:	99 23       	and	r25, r25
    216a:	ec f7       	brge	.-6      	; 0x2166 <m_rf_read+0x8e>
		buffer[i] = TWDR;
    216c:	98 81       	ld	r25, Y
    216e:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2170:	a6 17       	cp	r26, r22
    2172:	b7 07       	cpc	r27, r23
    2174:	b9 f7       	brne	.-18     	; 0x2164 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2176:	84 e8       	ldi	r24, 0x84	; 132
    2178:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    217c:	ec eb       	ldi	r30, 0xBC	; 188
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	90 81       	ld	r25, Z
    2182:	99 23       	and	r25, r25
    2184:	ec f7       	brge	.-6      	; 0x2180 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
    2186:	80 91 bb 00 	lds	r24, 0x00BB
    218a:	f9 01       	movw	r30, r18
    218c:	e4 0f       	add	r30, r20
    218e:	f5 1f       	adc	r31, r21
    2190:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2192:	84 e9       	ldi	r24, 0x94	; 148
    2194:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
}
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	08 95       	ret

000021a0 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    21a6:	80 ea       	ldi	r24, 0xA0	; 160
    21a8:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    21ac:	82 e1       	ldi	r24, 0x12	; 18
    21ae:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    21b0:	09 b4       	in	r0, 0x29	; 41
    21b2:	00 fe       	sbrs	r0, 0
    21b4:	fd cf       	rjmp	.-6      	; 0x21b0 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    21b6:	80 e9       	ldi	r24, 0x90	; 144
    21b8:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    21bc:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    21c0:	10 92 cf 01 	sts	0x01CF, r1
	cdc_line_rtsdtr = 0;
    21c4:	10 92 cd 01 	sts	0x01CD, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    21c8:	8c e0       	ldi	r24, 0x0C	; 12
    21ca:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    21ce:	78 94       	sei
    21d0:	08 95       	ret

000021d2 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    21d2:	1f 92       	push	r1
    21d4:	0f 92       	push	r0
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	0f 92       	push	r0
    21da:	11 24       	eor	r1, r1
    21dc:	8f 93       	push	r24
    21de:	9f 93       	push	r25
    21e0:	ef 93       	push	r30
    21e2:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    21e4:	e1 ee       	ldi	r30, 0xE1	; 225
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
        UDINT = 0;
    21ea:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    21ec:	83 ff       	sbrs	r24, 3
    21ee:	11 c0       	rjmp	.+34     	; 0x2212 <__vector_10+0x40>
		UENUM = 0;
    21f0:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    21f4:	91 e0       	ldi	r25, 0x01	; 1
    21f6:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    21fa:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    21fe:	92 e1       	ldi	r25, 0x12	; 18
    2200:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    2204:	98 e0       	ldi	r25, 0x08	; 8
    2206:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    220a:	10 92 cf 01 	sts	0x01CF, r1
		cdc_line_rtsdtr = 0;
    220e:	10 92 cd 01 	sts	0x01CD, r1
        }
	if (intbits & (1<<SOFI)) {
    2212:	82 ff       	sbrs	r24, 2
    2214:	13 c0       	rjmp	.+38     	; 0x223c <__vector_10+0x6a>
		if (usb_configuration) {
    2216:	80 91 cf 01 	lds	r24, 0x01CF
    221a:	88 23       	and	r24, r24
    221c:	79 f0       	breq	.+30     	; 0x223c <__vector_10+0x6a>
			t = transmit_flush_timer;
    221e:	80 91 ce 01 	lds	r24, 0x01CE
			if (t) {
    2222:	88 23       	and	r24, r24
    2224:	59 f0       	breq	.+22     	; 0x223c <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2226:	81 50       	subi	r24, 0x01	; 1
    2228:	80 93 ce 01 	sts	0x01CE, r24
				if (!t) {
    222c:	81 11       	cpse	r24, r1
    222e:	06 c0       	rjmp	.+12     	; 0x223c <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    2230:	84 e0       	ldi	r24, 0x04	; 4
    2232:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2236:	8a e3       	ldi	r24, 0x3A	; 58
    2238:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    223c:	ff 91       	pop	r31
    223e:	ef 91       	pop	r30
    2240:	9f 91       	pop	r25
    2242:	8f 91       	pop	r24
    2244:	0f 90       	pop	r0
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	0f 90       	pop	r0
    224a:	1f 90       	pop	r1
    224c:	18 95       	reti

0000224e <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    224e:	1f 92       	push	r1
    2250:	0f 92       	push	r0
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	0f 92       	push	r0
    2256:	11 24       	eor	r1, r1
    2258:	0f 93       	push	r16
    225a:	1f 93       	push	r17
    225c:	2f 93       	push	r18
    225e:	3f 93       	push	r19
    2260:	4f 93       	push	r20
    2262:	5f 93       	push	r21
    2264:	6f 93       	push	r22
    2266:	7f 93       	push	r23
    2268:	8f 93       	push	r24
    226a:	9f 93       	push	r25
    226c:	af 93       	push	r26
    226e:	bf 93       	push	r27
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	ef 93       	push	r30
    2276:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    2278:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    227c:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    2280:	83 ff       	sbrs	r24, 3
    2282:	4c c1       	rjmp	.+664    	; 0x251c <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    2284:	e1 ef       	ldi	r30, 0xF1	; 241
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    228a:	80 81       	ld	r24, Z
                wValue = UEDATX;
    228c:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    228e:	90 81       	ld	r25, Z
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    2294:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    2296:	90 81       	ld	r25, Z
    2298:	50 e0       	ldi	r21, 0x00	; 0
    229a:	59 2b       	or	r21, r25
                wLength = UEDATX;
    229c:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    229e:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    22a0:	92 ef       	ldi	r25, 0xF2	; 242
    22a2:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    22a6:	86 30       	cpi	r24, 0x06	; 6
    22a8:	09 f0       	breq	.+2      	; 0x22ac <__vector_11+0x5e>
    22aa:	58 c0       	rjmp	.+176    	; 0x235c <__vector_11+0x10e>
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    22ae:	81 e2       	ldi	r24, 0x21	; 33
    22b0:	80 93 eb 00 	sts	0x00EB, r24
					return;
    22b4:	3a c1       	rjmp	.+628    	; 0x252a <__vector_11+0x2dc>
    22b6:	66 e0       	ldi	r22, 0x06	; 6
    22b8:	80 e2       	ldi	r24, 0x20	; 32
    22ba:	91 e0       	ldi	r25, 0x01	; 1
				}
				desc_val = pgm_read_word(list);
    22bc:	fc 01       	movw	r30, r24
    22be:	a5 91       	lpm	r26, Z+
    22c0:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    22c2:	2a 17       	cp	r18, r26
    22c4:	3b 07       	cpc	r19, r27
    22c6:	11 f0       	breq	.+4      	; 0x22cc <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    22c8:	07 96       	adiw	r24, 0x07	; 7
					continue;
    22ca:	23 c0       	rjmp	.+70     	; 0x2312 <__vector_11+0xc4>
				}
				list += 2;
    22cc:	fc 01       	movw	r30, r24
    22ce:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    22d0:	a5 91       	lpm	r26, Z+
    22d2:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    22d4:	4a 17       	cp	r20, r26
    22d6:	5b 07       	cpc	r21, r27
    22d8:	11 f0       	breq	.+4      	; 0x22de <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    22da:	07 96       	adiw	r24, 0x07	; 7
					continue;
    22dc:	1a c0       	rjmp	.+52     	; 0x2312 <__vector_11+0xc4>
				}
				list += 2;
    22de:	fc 01       	movw	r30, r24
    22e0:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    22e2:	45 91       	lpm	r20, Z+
    22e4:	54 91       	lpm	r21, Z
				list += 2;
    22e6:	fc 01       	movw	r30, r24
    22e8:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    22ea:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    22ec:	87 2f       	mov	r24, r23
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    22f2:	8f 3f       	cpi	r24, 0xFF	; 255
    22f4:	91 05       	cpc	r25, r1
    22f6:	19 f0       	breq	.+6      	; 0x22fe <__vector_11+0xb0>
    22f8:	10 f0       	brcs	.+4      	; 0x22fe <__vector_11+0xb0>
    22fa:	8f ef       	ldi	r24, 0xFF	; 255
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	82 17       	cp	r24, r18
    2300:	08 f4       	brcc	.+2      	; 0x2304 <__vector_11+0xb6>
    2302:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2304:	a8 ee       	ldi	r26, 0xE8	; 232
    2306:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2308:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    230a:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    230c:	c1 ef       	ldi	r28, 0xF1	; 241
    230e:	d0 e0       	ldi	r29, 0x00	; 0
    2310:	03 c0       	rjmp	.+6      	; 0x2318 <__vector_11+0xca>
    2312:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2314:	99 f6       	brne	.-90     	; 0x22bc <__vector_11+0x6e>
    2316:	cb cf       	rjmp	.-106    	; 0x22ae <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2318:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    231a:	98 2f       	mov	r25, r24
    231c:	95 70       	andi	r25, 0x05	; 5
    231e:	e1 f3       	breq	.-8      	; 0x2318 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    2320:	82 fd       	sbrc	r24, 2
    2322:	03 c1       	rjmp	.+518    	; 0x252a <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2324:	32 2f       	mov	r19, r18
    2326:	21 31       	cpi	r18, 0x11	; 17
    2328:	08 f0       	brcs	.+2      	; 0x232c <__vector_11+0xde>
    232a:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    232c:	33 23       	and	r19, r19
    232e:	09 f4       	brne	.+2      	; 0x2332 <__vector_11+0xe4>
    2330:	f9 c0       	rjmp	.+498    	; 0x2524 <__vector_11+0x2d6>
    2332:	fa 01       	movw	r30, r20
    2334:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    2336:	94 91       	lpm	r25, Z
    2338:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    233a:	81 50       	subi	r24, 0x01	; 1
    233c:	31 96       	adiw	r30, 0x01	; 1
    233e:	81 11       	cpse	r24, r1
    2340:	fa cf       	rjmp	.-12     	; 0x2336 <__vector_11+0xe8>
    2342:	8f ef       	ldi	r24, 0xFF	; 255
    2344:	83 0f       	add	r24, r19
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	01 96       	adiw	r24, 0x01	; 1
    234a:	48 0f       	add	r20, r24
    234c:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    234e:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2350:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2352:	21 11       	cpse	r18, r1
    2354:	e1 cf       	rjmp	.-62     	; 0x2318 <__vector_11+0xca>
    2356:	30 31       	cpi	r19, 0x10	; 16
    2358:	f9 f2       	breq	.-66     	; 0x2318 <__vector_11+0xca>
    235a:	e7 c0       	rjmp	.+462    	; 0x252a <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    235c:	85 30       	cpi	r24, 0x05	; 5
    235e:	61 f4       	brne	.+24     	; 0x2378 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2360:	8e ef       	ldi	r24, 0xFE	; 254
    2362:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2366:	e8 ee       	ldi	r30, 0xE8	; 232
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	80 ff       	sbrs	r24, 0
    236e:	fd cf       	rjmp	.-6      	; 0x236a <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    2370:	20 68       	ori	r18, 0x80	; 128
    2372:	20 93 e3 00 	sts	0x00E3, r18
			return;
    2376:	d9 c0       	rjmp	.+434    	; 0x252a <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    2378:	89 30       	cpi	r24, 0x09	; 9
    237a:	09 f0       	breq	.+2      	; 0x237e <__vector_11+0x130>
    237c:	35 c0       	rjmp	.+106    	; 0x23e8 <__vector_11+0x19a>
    237e:	61 11       	cpse	r22, r1
    2380:	cd c0       	rjmp	.+410    	; 0x251c <__vector_11+0x2ce>
			usb_configuration = wValue;
    2382:	20 93 cf 01 	sts	0x01CF, r18
			cdc_line_rtsdtr = 0;
    2386:	10 92 cd 01 	sts	0x01CD, r1
			transmit_flush_timer = 0;
    238a:	10 92 ce 01 	sts	0x01CE, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    238e:	8e ef       	ldi	r24, 0xFE	; 254
    2390:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2394:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    2396:	29 ec       	ldi	r18, 0xC9	; 201
    2398:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    239a:	c9 ee       	ldi	r28, 0xE9	; 233
    239c:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    239e:	ab ee       	ldi	r26, 0xEB	; 235
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    23a2:	0c ee       	ldi	r16, 0xEC	; 236
    23a4:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    23a6:	6d ee       	ldi	r22, 0xED	; 237
    23a8:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    23aa:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    23ac:	a9 01       	movw	r20, r18
    23ae:	4f 5f       	subi	r20, 0xFF	; 255
    23b0:	5f 4f       	sbci	r21, 0xFF	; 255
    23b2:	f9 01       	movw	r30, r18
    23b4:	94 91       	lpm	r25, Z
				UECONX = en;
    23b6:	9c 93       	st	X, r25
				if (en) {
    23b8:	99 23       	and	r25, r25
    23ba:	61 f0       	breq	.+24     	; 0x23d4 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    23bc:	fa 01       	movw	r30, r20
    23be:	44 91       	lpm	r20, Z
    23c0:	f8 01       	movw	r30, r16
    23c2:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    23c4:	f9 01       	movw	r30, r18
    23c6:	32 96       	adiw	r30, 0x02	; 2
    23c8:	94 91       	lpm	r25, Z
    23ca:	2d 5f       	subi	r18, 0xFD	; 253
    23cc:	3f 4f       	sbci	r19, 0xFF	; 255
    23ce:	fb 01       	movw	r30, r22
    23d0:	90 83       	st	Z, r25
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    23d4:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    23d6:	8f 5f       	subi	r24, 0xFF	; 255
    23d8:	85 30       	cpi	r24, 0x05	; 5
    23da:	39 f7       	brne	.-50     	; 0x23aa <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    23dc:	ea ee       	ldi	r30, 0xEA	; 234
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	8e e1       	ldi	r24, 0x1E	; 30
    23e2:	80 83       	st	Z, r24
        		UERST = 0;
    23e4:	10 82       	st	Z, r1
			return;
    23e6:	a1 c0       	rjmp	.+322    	; 0x252a <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    23e8:	88 30       	cpi	r24, 0x08	; 8
    23ea:	81 f4       	brne	.+32     	; 0x240c <__vector_11+0x1be>
    23ec:	60 38       	cpi	r22, 0x80	; 128
    23ee:	09 f0       	breq	.+2      	; 0x23f2 <__vector_11+0x1a4>
    23f0:	95 c0       	rjmp	.+298    	; 0x251c <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    23f2:	e8 ee       	ldi	r30, 0xE8	; 232
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	80 ff       	sbrs	r24, 0
    23fa:	fd cf       	rjmp	.-6      	; 0x23f6 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    23fc:	80 91 cf 01 	lds	r24, 0x01CF
    2400:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2404:	8e ef       	ldi	r24, 0xFE	; 254
    2406:	80 93 e8 00 	sts	0x00E8, r24
    240a:	8f c0       	rjmp	.+286    	; 0x252a <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    240c:	81 32       	cpi	r24, 0x21	; 33
    240e:	b9 f4       	brne	.+46     	; 0x243e <__vector_11+0x1f0>
    2410:	61 3a       	cpi	r22, 0xA1	; 161
    2412:	09 f0       	breq	.+2      	; 0x2416 <__vector_11+0x1c8>
    2414:	83 c0       	rjmp	.+262    	; 0x251c <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2416:	e8 ee       	ldi	r30, 0xE8	; 232
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	80 ff       	sbrs	r24, 0
    241e:	fd cf       	rjmp	.-6      	; 0x241a <__vector_11+0x1cc>
    2420:	ea e2       	ldi	r30, 0x2A	; 42
    2422:	f1 e0       	ldi	r31, 0x01	; 1
    2424:	21 e3       	ldi	r18, 0x31	; 49
    2426:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2428:	a1 ef       	ldi	r26, 0xF1	; 241
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	81 91       	ld	r24, Z+
    242e:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2430:	e2 17       	cp	r30, r18
    2432:	f3 07       	cpc	r31, r19
    2434:	d9 f7       	brne	.-10     	; 0x242c <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2436:	8e ef       	ldi	r24, 0xFE	; 254
    2438:	80 93 e8 00 	sts	0x00E8, r24
    243c:	76 c0       	rjmp	.+236    	; 0x252a <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    243e:	80 32       	cpi	r24, 0x20	; 32
    2440:	d1 f4       	brne	.+52     	; 0x2476 <__vector_11+0x228>
    2442:	61 32       	cpi	r22, 0x21	; 33
    2444:	09 f0       	breq	.+2      	; 0x2448 <__vector_11+0x1fa>
    2446:	6a c0       	rjmp	.+212    	; 0x251c <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2448:	e8 ee       	ldi	r30, 0xE8	; 232
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	82 ff       	sbrs	r24, 2
    2450:	fd cf       	rjmp	.-6      	; 0x244c <__vector_11+0x1fe>
    2452:	ea e2       	ldi	r30, 0x2A	; 42
    2454:	f1 e0       	ldi	r31, 0x01	; 1
    2456:	21 e3       	ldi	r18, 0x31	; 49
    2458:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    245a:	a1 ef       	ldi	r26, 0xF1	; 241
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	8c 91       	ld	r24, X
    2460:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2462:	e2 17       	cp	r30, r18
    2464:	f3 07       	cpc	r31, r19
    2466:	d9 f7       	brne	.-10     	; 0x245e <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2468:	e8 ee       	ldi	r30, 0xE8	; 232
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	8b ef       	ldi	r24, 0xFB	; 251
    246e:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2470:	8e ef       	ldi	r24, 0xFE	; 254
    2472:	80 83       	st	Z, r24
    2474:	5a c0       	rjmp	.+180    	; 0x252a <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    2476:	82 32       	cpi	r24, 0x22	; 34
    2478:	71 f4       	brne	.+28     	; 0x2496 <__vector_11+0x248>
    247a:	61 32       	cpi	r22, 0x21	; 33
    247c:	09 f0       	breq	.+2      	; 0x2480 <__vector_11+0x232>
    247e:	4e c0       	rjmp	.+156    	; 0x251c <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    2480:	20 93 cd 01 	sts	0x01CD, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2484:	e8 ee       	ldi	r30, 0xE8	; 232
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	80 ff       	sbrs	r24, 0
    248c:	fd cf       	rjmp	.-6      	; 0x2488 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    248e:	8e ef       	ldi	r24, 0xFE	; 254
    2490:	80 93 e8 00 	sts	0x00E8, r24
    2494:	4a c0       	rjmp	.+148    	; 0x252a <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    2496:	81 11       	cpse	r24, r1
    2498:	1a c0       	rjmp	.+52     	; 0x24ce <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    249a:	e8 ee       	ldi	r30, 0xE8	; 232
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	80 ff       	sbrs	r24, 0
    24a2:	fd cf       	rjmp	.-6      	; 0x249e <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    24a4:	62 38       	cpi	r22, 0x82	; 130
    24a6:	51 f4       	brne	.+20     	; 0x24bc <__vector_11+0x26e>
				UENUM = wIndex;
    24a8:	e9 ee       	ldi	r30, 0xE9	; 233
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    24ae:	80 91 eb 00 	lds	r24, 0x00EB
    24b2:	85 fb       	bst	r24, 5
    24b4:	88 27       	eor	r24, r24
    24b6:	80 f9       	bld	r24, 0
				UENUM = 0;
    24b8:	10 82       	st	Z, r1
    24ba:	01 c0       	rjmp	.+2      	; 0x24be <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    24bc:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    24be:	e1 ef       	ldi	r30, 0xF1	; 241
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 83       	st	Z, r24
			UEDATX = 0;
    24c4:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    24c6:	8e ef       	ldi	r24, 0xFE	; 254
    24c8:	80 93 e8 00 	sts	0x00E8, r24
    24cc:	2e c0       	rjmp	.+92     	; 0x252a <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    24ce:	98 2f       	mov	r25, r24
    24d0:	9d 7f       	andi	r25, 0xFD	; 253
    24d2:	91 30       	cpi	r25, 0x01	; 1
    24d4:	19 f5       	brne	.+70     	; 0x251c <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    24d6:	62 30       	cpi	r22, 0x02	; 2
    24d8:	09 f5       	brne	.+66     	; 0x251c <__vector_11+0x2ce>
    24da:	23 2b       	or	r18, r19
    24dc:	f9 f4       	brne	.+62     	; 0x251c <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    24de:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    24e0:	9f ef       	ldi	r25, 0xFF	; 255
    24e2:	94 0f       	add	r25, r20
    24e4:	94 30       	cpi	r25, 0x04	; 4
    24e6:	d0 f4       	brcc	.+52     	; 0x251c <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    24e8:	9e ef       	ldi	r25, 0xFE	; 254
    24ea:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    24ee:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    24f2:	83 30       	cpi	r24, 0x03	; 3
    24f4:	21 f4       	brne	.+8      	; 0x24fe <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    24f6:	81 e2       	ldi	r24, 0x21	; 33
    24f8:	80 93 eb 00 	sts	0x00EB, r24
    24fc:	16 c0       	rjmp	.+44     	; 0x252a <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    24fe:	89 e1       	ldi	r24, 0x19	; 25
    2500:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	02 c0       	rjmp	.+4      	; 0x250e <__vector_11+0x2c0>
    250a:	88 0f       	add	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	4a 95       	dec	r20
    2510:	e2 f7       	brpl	.-8      	; 0x250a <__vector_11+0x2bc>
    2512:	ea ee       	ldi	r30, 0xEA	; 234
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 83       	st	Z, r24
					UERST = 0;
    2518:	10 82       	st	Z, r1
    251a:	07 c0       	rjmp	.+14     	; 0x252a <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    251c:	81 e2       	ldi	r24, 0x21	; 33
    251e:	80 93 eb 00 	sts	0x00EB, r24
    2522:	03 c0       	rjmp	.+6      	; 0x252a <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2524:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2526:	21 11       	cpse	r18, r1
    2528:	f7 ce       	rjmp	.-530    	; 0x2318 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    252a:	ff 91       	pop	r31
    252c:	ef 91       	pop	r30
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	bf 91       	pop	r27
    2534:	af 91       	pop	r26
    2536:	9f 91       	pop	r25
    2538:	8f 91       	pop	r24
    253a:	7f 91       	pop	r23
    253c:	6f 91       	pop	r22
    253e:	5f 91       	pop	r21
    2540:	4f 91       	pop	r20
    2542:	3f 91       	pop	r19
    2544:	2f 91       	pop	r18
    2546:	1f 91       	pop	r17
    2548:	0f 91       	pop	r16
    254a:	0f 90       	pop	r0
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	0f 90       	pop	r0
    2550:	1f 90       	pop	r1
    2552:	18 95       	reti

00002554 <twi_wait>:
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	ec eb       	ldi	r30, 0xBC	; 188
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	88 23       	and	r24, r24
    2560:	34 f0       	brlt	.+12     	; 0x256e <twi_wait+0x1a>
    2562:	2f 5f       	subi	r18, 0xFF	; 255
    2564:	3f 4f       	sbci	r19, 0xFF	; 255
    2566:	29 3e       	cpi	r18, 0xE9	; 233
    2568:	83 e0       	ldi	r24, 0x03	; 3
    256a:	38 07       	cpc	r19, r24
    256c:	b9 f7       	brne	.-18     	; 0x255c <twi_wait+0x8>
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	28 3e       	cpi	r18, 0xE8	; 232
    2572:	33 40       	sbci	r19, 0x03	; 3
    2574:	09 f4       	brne	.+2      	; 0x2578 <twi_wait+0x24>
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	08 95       	ret

0000257a <send_byte>:
    257a:	80 93 bb 00 	sts	0x00BB, r24
    257e:	84 e8       	ldi	r24, 0x84	; 132
    2580:	80 93 bc 00 	sts	0x00BC, r24
    2584:	0e 94 aa 12 	call	0x2554	; 0x2554 <twi_wait>
    2588:	88 23       	and	r24, r24
    258a:	19 f0       	breq	.+6      	; 0x2592 <send_byte+0x18>
    258c:	80 91 b9 00 	lds	r24, 0x00B9
    2590:	88 7f       	andi	r24, 0xF8	; 248
    2592:	08 95       	ret

00002594 <start_write>:
    2594:	cf 93       	push	r28
    2596:	c8 2f       	mov	r28, r24
    2598:	94 ea       	ldi	r25, 0xA4	; 164
    259a:	90 93 bc 00 	sts	0x00BC, r25
    259e:	0e 94 aa 12 	call	0x2554	; 0x2554 <twi_wait>
    25a2:	88 23       	and	r24, r24
    25a4:	61 f0       	breq	.+24     	; 0x25be <start_write+0x2a>
    25a6:	8c 2f       	mov	r24, r28
    25a8:	88 0f       	add	r24, r24
    25aa:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    25ae:	80 32       	cpi	r24, 0x20	; 32
    25b0:	29 f4       	brne	.+10     	; 0x25bc <start_write+0x28>
    25b2:	84 e9       	ldi	r24, 0x94	; 148
    25b4:	80 93 bc 00 	sts	0x00BC, r24
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	01 c0       	rjmp	.+2      	; 0x25be <start_write+0x2a>
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	cf 91       	pop	r28
    25c0:	08 95       	ret

000025c2 <m_wii_open>:
    25c2:	0e 94 05 10 	call	0x200a	; 0x200a <m_bus_init>
    25c6:	88 e5       	ldi	r24, 0x58	; 88
    25c8:	0e 94 ca 12 	call	0x2594	; 0x2594 <start_write>
    25cc:	88 23       	and	r24, r24
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <m_wii_open+0x10>
    25d0:	cd c0       	rjmp	.+410    	; 0x276c <m_wii_open+0x1aa>
    25d2:	80 e3       	ldi	r24, 0x30	; 48
    25d4:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    25d8:	88 23       	and	r24, r24
    25da:	09 f4       	brne	.+2      	; 0x25de <m_wii_open+0x1c>
    25dc:	c9 c0       	rjmp	.+402    	; 0x2770 <m_wii_open+0x1ae>
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    25e4:	88 23       	and	r24, r24
    25e6:	09 f4       	brne	.+2      	; 0x25ea <m_wii_open+0x28>
    25e8:	c5 c0       	rjmp	.+394    	; 0x2774 <m_wii_open+0x1b2>
    25ea:	84 e9       	ldi	r24, 0x94	; 148
    25ec:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25f0:	83 ec       	ldi	r24, 0xC3	; 195
    25f2:	99 e0       	ldi	r25, 0x09	; 9
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <m_wii_open+0x32>
    25f8:	00 c0       	rjmp	.+0      	; 0x25fa <m_wii_open+0x38>
    25fa:	00 00       	nop
    25fc:	88 e5       	ldi	r24, 0x58	; 88
    25fe:	0e 94 ca 12 	call	0x2594	; 0x2594 <start_write>
    2602:	88 23       	and	r24, r24
    2604:	09 f4       	brne	.+2      	; 0x2608 <m_wii_open+0x46>
    2606:	b8 c0       	rjmp	.+368    	; 0x2778 <m_wii_open+0x1b6>
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    260e:	88 23       	and	r24, r24
    2610:	09 f4       	brne	.+2      	; 0x2614 <m_wii_open+0x52>
    2612:	b4 c0       	rjmp	.+360    	; 0x277c <m_wii_open+0x1ba>
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    261a:	88 23       	and	r24, r24
    261c:	09 f4       	brne	.+2      	; 0x2620 <m_wii_open+0x5e>
    261e:	b0 c0       	rjmp	.+352    	; 0x2780 <m_wii_open+0x1be>
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    2626:	88 23       	and	r24, r24
    2628:	09 f4       	brne	.+2      	; 0x262c <m_wii_open+0x6a>
    262a:	ac c0       	rjmp	.+344    	; 0x2784 <m_wii_open+0x1c2>
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    2632:	88 23       	and	r24, r24
    2634:	09 f4       	brne	.+2      	; 0x2638 <m_wii_open+0x76>
    2636:	a8 c0       	rjmp	.+336    	; 0x2788 <m_wii_open+0x1c6>
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    263e:	88 23       	and	r24, r24
    2640:	09 f4       	brne	.+2      	; 0x2644 <m_wii_open+0x82>
    2642:	a4 c0       	rjmp	.+328    	; 0x278c <m_wii_open+0x1ca>
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    264a:	88 23       	and	r24, r24
    264c:	09 f4       	brne	.+2      	; 0x2650 <m_wii_open+0x8e>
    264e:	a0 c0       	rjmp	.+320    	; 0x2790 <m_wii_open+0x1ce>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    2656:	88 23       	and	r24, r24
    2658:	09 f4       	brne	.+2      	; 0x265c <m_wii_open+0x9a>
    265a:	9c c0       	rjmp	.+312    	; 0x2794 <m_wii_open+0x1d2>
    265c:	80 e9       	ldi	r24, 0x90	; 144
    265e:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    2662:	88 23       	and	r24, r24
    2664:	09 f4       	brne	.+2      	; 0x2668 <m_wii_open+0xa6>
    2666:	98 c0       	rjmp	.+304    	; 0x2798 <m_wii_open+0x1d6>
    2668:	84 e9       	ldi	r24, 0x94	; 148
    266a:	80 93 bc 00 	sts	0x00BC, r24
    266e:	83 ec       	ldi	r24, 0xC3	; 195
    2670:	99 e0       	ldi	r25, 0x09	; 9
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <m_wii_open+0xb0>
    2676:	00 c0       	rjmp	.+0      	; 0x2678 <m_wii_open+0xb6>
    2678:	00 00       	nop
    267a:	88 e5       	ldi	r24, 0x58	; 88
    267c:	0e 94 ca 12 	call	0x2594	; 0x2594 <start_write>
    2680:	88 23       	and	r24, r24
    2682:	09 f4       	brne	.+2      	; 0x2686 <m_wii_open+0xc4>
    2684:	8b c0       	rjmp	.+278    	; 0x279c <m_wii_open+0x1da>
    2686:	87 e0       	ldi	r24, 0x07	; 7
    2688:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    268c:	88 23       	and	r24, r24
    268e:	09 f4       	brne	.+2      	; 0x2692 <m_wii_open+0xd0>
    2690:	87 c0       	rjmp	.+270    	; 0x27a0 <m_wii_open+0x1de>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    2698:	88 23       	and	r24, r24
    269a:	09 f4       	brne	.+2      	; 0x269e <m_wii_open+0xdc>
    269c:	83 c0       	rjmp	.+262    	; 0x27a4 <m_wii_open+0x1e2>
    269e:	81 e4       	ldi	r24, 0x41	; 65
    26a0:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    26a4:	88 23       	and	r24, r24
    26a6:	09 f4       	brne	.+2      	; 0x26aa <m_wii_open+0xe8>
    26a8:	7f c0       	rjmp	.+254    	; 0x27a8 <m_wii_open+0x1e6>
    26aa:	84 e9       	ldi	r24, 0x94	; 148
    26ac:	80 93 bc 00 	sts	0x00BC, r24
    26b0:	83 ec       	ldi	r24, 0xC3	; 195
    26b2:	99 e0       	ldi	r25, 0x09	; 9
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <m_wii_open+0xf2>
    26b8:	00 c0       	rjmp	.+0      	; 0x26ba <m_wii_open+0xf8>
    26ba:	00 00       	nop
    26bc:	88 e5       	ldi	r24, 0x58	; 88
    26be:	0e 94 ca 12 	call	0x2594	; 0x2594 <start_write>
    26c2:	88 23       	and	r24, r24
    26c4:	09 f4       	brne	.+2      	; 0x26c8 <m_wii_open+0x106>
    26c6:	72 c0       	rjmp	.+228    	; 0x27ac <m_wii_open+0x1ea>
    26c8:	8a e1       	ldi	r24, 0x1A	; 26
    26ca:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    26ce:	88 23       	and	r24, r24
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <m_wii_open+0x112>
    26d2:	6e c0       	rjmp	.+220    	; 0x27b0 <m_wii_open+0x1ee>
    26d4:	80 e4       	ldi	r24, 0x40	; 64
    26d6:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    26da:	88 23       	and	r24, r24
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <m_wii_open+0x11e>
    26de:	6a c0       	rjmp	.+212    	; 0x27b4 <m_wii_open+0x1f2>
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    26e6:	88 23       	and	r24, r24
    26e8:	09 f4       	brne	.+2      	; 0x26ec <m_wii_open+0x12a>
    26ea:	66 c0       	rjmp	.+204    	; 0x27b8 <m_wii_open+0x1f6>
    26ec:	84 e9       	ldi	r24, 0x94	; 148
    26ee:	80 93 bc 00 	sts	0x00BC, r24
    26f2:	83 ec       	ldi	r24, 0xC3	; 195
    26f4:	99 e0       	ldi	r25, 0x09	; 9
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <m_wii_open+0x134>
    26fa:	00 c0       	rjmp	.+0      	; 0x26fc <m_wii_open+0x13a>
    26fc:	00 00       	nop
    26fe:	88 e5       	ldi	r24, 0x58	; 88
    2700:	0e 94 ca 12 	call	0x2594	; 0x2594 <start_write>
    2704:	88 23       	and	r24, r24
    2706:	09 f4       	brne	.+2      	; 0x270a <m_wii_open+0x148>
    2708:	59 c0       	rjmp	.+178    	; 0x27bc <m_wii_open+0x1fa>
    270a:	83 e3       	ldi	r24, 0x33	; 51
    270c:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    2710:	88 23       	and	r24, r24
    2712:	09 f4       	brne	.+2      	; 0x2716 <m_wii_open+0x154>
    2714:	55 c0       	rjmp	.+170    	; 0x27c0 <m_wii_open+0x1fe>
    2716:	83 e0       	ldi	r24, 0x03	; 3
    2718:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    271c:	88 23       	and	r24, r24
    271e:	09 f4       	brne	.+2      	; 0x2722 <m_wii_open+0x160>
    2720:	51 c0       	rjmp	.+162    	; 0x27c4 <m_wii_open+0x202>
    2722:	84 e9       	ldi	r24, 0x94	; 148
    2724:	80 93 bc 00 	sts	0x00BC, r24
    2728:	83 ec       	ldi	r24, 0xC3	; 195
    272a:	99 e0       	ldi	r25, 0x09	; 9
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <m_wii_open+0x16a>
    2730:	00 c0       	rjmp	.+0      	; 0x2732 <m_wii_open+0x170>
    2732:	00 00       	nop
    2734:	88 e5       	ldi	r24, 0x58	; 88
    2736:	0e 94 ca 12 	call	0x2594	; 0x2594 <start_write>
    273a:	88 23       	and	r24, r24
    273c:	09 f4       	brne	.+2      	; 0x2740 <m_wii_open+0x17e>
    273e:	44 c0       	rjmp	.+136    	; 0x27c8 <m_wii_open+0x206>
    2740:	80 e3       	ldi	r24, 0x30	; 48
    2742:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    2746:	88 23       	and	r24, r24
    2748:	09 f4       	brne	.+2      	; 0x274c <m_wii_open+0x18a>
    274a:	40 c0       	rjmp	.+128    	; 0x27cc <m_wii_open+0x20a>
    274c:	88 e0       	ldi	r24, 0x08	; 8
    274e:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    2752:	88 23       	and	r24, r24
    2754:	e9 f1       	breq	.+122    	; 0x27d0 <m_wii_open+0x20e>
    2756:	84 e9       	ldi	r24, 0x94	; 148
    2758:	80 93 bc 00 	sts	0x00BC, r24
    275c:	83 ec       	ldi	r24, 0xC3	; 195
    275e:	99 e0       	ldi	r25, 0x09	; 9
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <m_wii_open+0x19e>
    2764:	00 c0       	rjmp	.+0      	; 0x2766 <m_wii_open+0x1a4>
    2766:	00 00       	nop
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	08 95       	ret
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	08 95       	ret
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	08 95       	ret
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	08 95       	ret
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	08 95       	ret
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	08 95       	ret
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	08 95       	ret
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	08 95       	ret
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	08 95       	ret
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	08 95       	ret
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	08 95       	ret
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	08 95       	ret
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	08 95       	ret
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	08 95       	ret
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	08 95       	ret
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	08 95       	ret
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	08 95       	ret
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	08 95       	ret
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	08 95       	ret
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	08 95       	ret
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	08 95       	ret
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	08 95       	ret
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	08 95       	ret
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	08 95       	ret
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	08 95       	ret
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	08 95       	ret
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	08 95       	ret

000027d4 <start_read>:
    27d4:	cf 93       	push	r28
    27d6:	c8 2f       	mov	r28, r24
    27d8:	84 ea       	ldi	r24, 0xA4	; 164
    27da:	80 93 bc 00 	sts	0x00BC, r24
    27de:	0e 94 aa 12 	call	0x2554	; 0x2554 <twi_wait>
    27e2:	88 23       	and	r24, r24
    27e4:	69 f0       	breq	.+26     	; 0x2800 <start_read+0x2c>
    27e6:	8c 2f       	mov	r24, r28
    27e8:	88 0f       	add	r24, r24
    27ea:	8f 5f       	subi	r24, 0xFF	; 255
    27ec:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    27f0:	88 34       	cpi	r24, 0x48	; 72
    27f2:	29 f4       	brne	.+10     	; 0x27fe <start_read+0x2a>
    27f4:	84 e9       	ldi	r24, 0x94	; 148
    27f6:	80 93 bc 00 	sts	0x00BC, r24
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	01 c0       	rjmp	.+2      	; 0x2800 <start_read+0x2c>
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	cf 91       	pop	r28
    2802:	08 95       	ret

00002804 <m_wii_read>:
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	60 97       	sbiw	r28, 0x10	; 16
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	8c 01       	movw	r16, r24
    281e:	fe 01       	movw	r30, r28
    2820:	31 96       	adiw	r30, 0x01	; 1
    2822:	80 e1       	ldi	r24, 0x10	; 16
    2824:	df 01       	movw	r26, r30
    2826:	1d 92       	st	X+, r1
    2828:	8a 95       	dec	r24
    282a:	e9 f7       	brne	.-6      	; 0x2826 <m_wii_read+0x22>
    282c:	88 e5       	ldi	r24, 0x58	; 88
    282e:	0e 94 ca 12 	call	0x2594	; 0x2594 <start_write>
    2832:	88 23       	and	r24, r24
    2834:	09 f4       	brne	.+2      	; 0x2838 <m_wii_read+0x34>
    2836:	69 c0       	rjmp	.+210    	; 0x290a <m_wii_read+0x106>
    2838:	86 e3       	ldi	r24, 0x36	; 54
    283a:	0e 94 bd 12 	call	0x257a	; 0x257a <send_byte>
    283e:	88 23       	and	r24, r24
    2840:	09 f4       	brne	.+2      	; 0x2844 <m_wii_read+0x40>
    2842:	65 c0       	rjmp	.+202    	; 0x290e <m_wii_read+0x10a>
    2844:	84 e9       	ldi	r24, 0x94	; 148
    2846:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    284a:	b8 e0       	ldi	r27, 0x08	; 8
    284c:	ba 95       	dec	r27
    284e:	f1 f7       	brne	.-4      	; 0x284c <m_wii_read+0x48>
    2850:	00 00       	nop
    2852:	88 e5       	ldi	r24, 0x58	; 88
    2854:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <start_read>
    2858:	88 23       	and	r24, r24
    285a:	09 f4       	brne	.+2      	; 0x285e <m_wii_read+0x5a>
    285c:	5a c0       	rjmp	.+180    	; 0x2912 <m_wii_read+0x10e>
    285e:	be 01       	movw	r22, r28
    2860:	6f 5f       	subi	r22, 0xFF	; 255
    2862:	7f 4f       	sbci	r23, 0xFF	; 255
    2864:	ae 01       	movw	r20, r28
    2866:	40 5f       	subi	r20, 0xF0	; 240
    2868:	5f 4f       	sbci	r21, 0xFF	; 255
    286a:	ec eb       	ldi	r30, 0xBC	; 188
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	84 ec       	ldi	r24, 0xC4	; 196
    2870:	2b eb       	ldi	r18, 0xBB	; 187
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	80 83       	st	Z, r24
    2876:	90 81       	ld	r25, Z
    2878:	99 23       	and	r25, r25
    287a:	ec f7       	brge	.-6      	; 0x2876 <m_wii_read+0x72>
    287c:	d9 01       	movw	r26, r18
    287e:	9c 91       	ld	r25, X
    2880:	db 01       	movw	r26, r22
    2882:	9d 93       	st	X+, r25
    2884:	bd 01       	movw	r22, r26
    2886:	a4 17       	cp	r26, r20
    2888:	b5 07       	cpc	r27, r21
    288a:	a1 f7       	brne	.-24     	; 0x2874 <m_wii_read+0x70>
    288c:	84 e8       	ldi	r24, 0x84	; 132
    288e:	80 93 bc 00 	sts	0x00BC, r24
    2892:	ec eb       	ldi	r30, 0xBC	; 188
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	88 23       	and	r24, r24
    289a:	ec f7       	brge	.-6      	; 0x2896 <m_wii_read+0x92>
    289c:	80 91 bb 00 	lds	r24, 0x00BB
    28a0:	88 8b       	std	Y+16, r24	; 0x10
    28a2:	84 e9       	ldi	r24, 0x94	; 148
    28a4:	80 93 bc 00 	sts	0x00BC, r24
    28a8:	be 01       	movw	r22, r28
    28aa:	6c 5f       	subi	r22, 0xFC	; 252
    28ac:	7f 4f       	sbci	r23, 0xFF	; 255
    28ae:	f8 01       	movw	r30, r16
    28b0:	08 5e       	subi	r16, 0xE8	; 232
    28b2:	1f 4f       	sbci	r17, 0xFF	; 255
    28b4:	db 01       	movw	r26, r22
    28b6:	2c 91       	ld	r18, X
    28b8:	32 2f       	mov	r19, r18
    28ba:	30 73       	andi	r19, 0x30	; 48
    28bc:	cb 01       	movw	r24, r22
    28be:	02 97       	sbiw	r24, 0x02	; 2
    28c0:	dc 01       	movw	r26, r24
    28c2:	8c 91       	ld	r24, X
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	b0 e1       	ldi	r27, 0x10	; 16
    28c8:	3b 9f       	mul	r19, r27
    28ca:	80 0d       	add	r24, r0
    28cc:	91 1d       	adc	r25, r1
    28ce:	11 24       	eor	r1, r1
    28d0:	91 83       	std	Z+1, r25	; 0x01
    28d2:	80 83       	st	Z, r24
    28d4:	42 2f       	mov	r20, r18
    28d6:	40 7c       	andi	r20, 0xC0	; 192
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	44 0f       	add	r20, r20
    28dc:	55 1f       	adc	r21, r21
    28de:	44 0f       	add	r20, r20
    28e0:	55 1f       	adc	r21, r21
    28e2:	cb 01       	movw	r24, r22
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	dc 01       	movw	r26, r24
    28e8:	8c 91       	ld	r24, X
    28ea:	48 0f       	add	r20, r24
    28ec:	51 1d       	adc	r21, r1
    28ee:	53 83       	std	Z+3, r21	; 0x03
    28f0:	42 83       	std	Z+2, r20	; 0x02
    28f2:	2f 70       	andi	r18, 0x0F	; 15
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	35 83       	std	Z+5, r19	; 0x05
    28f8:	24 83       	std	Z+4, r18	; 0x04
    28fa:	6d 5f       	subi	r22, 0xFD	; 253
    28fc:	7f 4f       	sbci	r23, 0xFF	; 255
    28fe:	36 96       	adiw	r30, 0x06	; 6
    2900:	e0 17       	cp	r30, r16
    2902:	f1 07       	cpc	r31, r17
    2904:	b9 f6       	brne	.-82     	; 0x28b4 <m_wii_read+0xb0>
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	05 c0       	rjmp	.+10     	; 0x2914 <m_wii_read+0x110>
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <m_wii_read+0x110>
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	01 c0       	rjmp	.+2      	; 0x2914 <m_wii_read+0x110>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	60 96       	adiw	r28, 0x10	; 16
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	08 95       	ret

0000292a <get_puck_location>:
Public Functions
************************************************************/

/* Returns x,y, location of puck (angle more accurate) */
int get_puck_location(float* puck_buffer)
{
    292a:	2f 92       	push	r2
    292c:	3f 92       	push	r3
    292e:	4f 92       	push	r4
    2930:	5f 92       	push	r5
    2932:	6f 92       	push	r6
    2934:	7f 92       	push	r7
    2936:	8f 92       	push	r8
    2938:	9f 92       	push	r9
    293a:	af 92       	push	r10
    293c:	bf 92       	push	r11
    293e:	cf 92       	push	r12
    2940:	df 92       	push	r13
    2942:	ef 92       	push	r14
    2944:	ff 92       	push	r15
    2946:	0f 93       	push	r16
    2948:	1f 93       	push	r17
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	62 97       	sbiw	r28, 0x12	; 18
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	9a 8b       	std	Y+18, r25	; 0x12
    2960:	89 8b       	std	Y+17, r24	; 0x11
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta
    2962:	ce 01       	movw	r24, r28
    2964:	01 96       	adiw	r24, 0x01	; 1
    2966:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <get_position>
    296a:	0f 2e       	mov	r0, r31
    296c:	f4 ed       	ldi	r31, 0xD4	; 212
    296e:	8f 2e       	mov	r8, r31
    2970:	f1 e0       	ldi	r31, 0x01	; 1
    2972:	9f 2e       	mov	r9, r31
    2974:	f0 2d       	mov	r31, r0
    2976:	0f 2e       	mov	r0, r31
    2978:	f3 e3       	ldi	r31, 0x33	; 51
    297a:	ef 2e       	mov	r14, r31
    297c:	f1 e0       	ldi	r31, 0x01	; 1
    297e:	ff 2e       	mov	r15, r31
    2980:	f0 2d       	mov	r31, r0
    2982:	0f 2e       	mov	r0, r31
    2984:	fb e5       	ldi	r31, 0x5B	; 91
    2986:	af 2e       	mov	r10, r31
    2988:	f1 e0       	ldi	r31, 0x01	; 1
    298a:	bf 2e       	mov	r11, r31
    298c:	f0 2d       	mov	r31, r0

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
    298e:	1d 86       	std	Y+13, r1	; 0x0d
    2990:	1e 86       	std	Y+14, r1	; 0x0e
    2992:	1f 86       	std	Y+15, r1	; 0x0f
    2994:	18 8a       	std	Y+16, r1	; 0x10
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
    2996:	c1 2c       	mov	r12, r1
    2998:	d1 2c       	mov	r13, r1
{
	float position_buffer[3]; // x, y, theta buffer
	get_position(position_buffer); // get x, y, theta

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
    299a:	21 2c       	mov	r2, r1
    299c:	31 2c       	mov	r3, r1
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
		scaler += transistor_vals[i];
    299e:	f4 01       	movw	r30, r8
    29a0:	01 91       	ld	r16, Z+
    29a2:	11 91       	ld	r17, Z+
    29a4:	4f 01       	movw	r8, r30
    29a6:	c0 0e       	add	r12, r16
    29a8:	d1 1e       	adc	r13, r17
		global_theta += transistor_angles[i] * (float)transistor_vals[i];
    29aa:	f7 01       	movw	r30, r14
    29ac:	41 90       	ld	r4, Z+
    29ae:	51 90       	ld	r5, Z+
    29b0:	61 90       	ld	r6, Z+
    29b2:	71 90       	ld	r7, Z+
    29b4:	7f 01       	movw	r14, r30
    29b6:	b8 01       	movw	r22, r16
    29b8:	01 2e       	mov	r0, r17
    29ba:	00 0c       	add	r0, r0
    29bc:	88 0b       	sbc	r24, r24
    29be:	99 0b       	sbc	r25, r25
    29c0:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
    29c4:	9b 01       	movw	r18, r22
    29c6:	ac 01       	movw	r20, r24
    29c8:	c3 01       	movw	r24, r6
    29ca:	b2 01       	movw	r22, r4
    29cc:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    29d0:	9b 01       	movw	r18, r22
    29d2:	ac 01       	movw	r20, r24
    29d4:	6d 85       	ldd	r22, Y+13	; 0x0d
    29d6:	7e 85       	ldd	r23, Y+14	; 0x0e
    29d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29da:	98 89       	ldd	r25, Y+16	; 0x10
    29dc:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
    29e0:	6d 87       	std	Y+13, r22	; 0x0d
    29e2:	7e 87       	std	Y+14, r23	; 0x0e
    29e4:	8f 87       	std	Y+15, r24	; 0x0f
    29e6:	98 8b       	std	Y+16, r25	; 0x10
    29e8:	20 16       	cp	r2, r16
    29ea:	31 06       	cpc	r3, r17
    29ec:	0c f4       	brge	.+2      	; 0x29f0 <get_puck_location+0xc6>
    29ee:	18 01       	movw	r2, r16

	/* Calculate Weighted Average of angles & Max Value */
	int max_val = 0;
	int scaler = 0;
	float global_theta = 0;
	for(int i=0; i<10; i++){
    29f0:	ea 14       	cp	r14, r10
    29f2:	fb 04       	cpc	r15, r11
    29f4:	a1 f6       	brne	.-88     	; 0x299e <get_puck_location+0x74>
	}
	global_theta = global_theta/((float)scaler);


	/* If no puck found */
	if(max_val<100){
    29f6:	f4 e6       	ldi	r31, 0x64	; 100
    29f8:	2f 16       	cp	r2, r31
    29fa:	31 04       	cpc	r3, r1
    29fc:	6c f4       	brge	.+26     	; 0x2a18 <get_puck_location+0xee>
		puck_buffer[0] = 0;
    29fe:	e9 89       	ldd	r30, Y+17	; 0x11
    2a00:	fa 89       	ldd	r31, Y+18	; 0x12
    2a02:	10 82       	st	Z, r1
    2a04:	11 82       	std	Z+1, r1	; 0x01
    2a06:	12 82       	std	Z+2, r1	; 0x02
    2a08:	13 82       	std	Z+3, r1	; 0x03
		puck_buffer[1] = 0;
    2a0a:	14 82       	std	Z+4, r1	; 0x04
    2a0c:	15 82       	std	Z+5, r1	; 0x05
    2a0e:	16 82       	std	Z+6, r1	; 0x06
    2a10:	17 82       	std	Z+7, r1	; 0x07
		return 0;
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	68 c0       	rjmp	.+208    	; 0x2ae8 <get_puck_location+0x1be>

		if(transistor_vals[i]>max_val){
			max_val = transistor_vals[i];
		}
	}
	global_theta = global_theta/((float)scaler);
    2a18:	b6 01       	movw	r22, r12
    2a1a:	dd 0c       	add	r13, r13
    2a1c:	88 0b       	sbc	r24, r24
    2a1e:	99 0b       	sbc	r25, r25
    2a20:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
    2a24:	9b 01       	movw	r18, r22
    2a26:	ac 01       	movw	r20, r24
    2a28:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a2a:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2e:	98 89       	ldd	r25, Y+16	; 0x10
    2a30:	0e 94 39 18 	call	0x3072	; 0x3072 <__divsf3>
		puck_buffer[1] = 0;
		return 0;
	}

	/* Create vector pointing to puck in global coordinates */
	global_theta += position_buffer[2];
    2a34:	29 85       	ldd	r18, Y+9	; 0x09
    2a36:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a38:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a3a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a3c:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
    2a40:	4b 01       	movw	r8, r22
    2a42:	5c 01       	movw	r10, r24
	puck_buffer[0] = cos(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/200.0 + position_buffer[0]; // Assign X val
    2a44:	0e 94 34 18 	call	0x3068	; 0x3068 <cos>
    2a48:	2b 01       	movw	r4, r22
    2a4a:	3c 01       	movw	r6, r24
    2a4c:	6f ef       	ldi	r22, 0xFF	; 255
    2a4e:	73 e0       	ldi	r23, 0x03	; 3
    2a50:	62 19       	sub	r22, r2
    2a52:	73 09       	sbc	r23, r3
    2a54:	07 2e       	mov	r0, r23
    2a56:	00 0c       	add	r0, r0
    2a58:	88 0b       	sbc	r24, r24
    2a5a:	99 0b       	sbc	r25, r25
    2a5c:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__floatsisf>
    2a60:	6b 01       	movw	r12, r22
    2a62:	7c 01       	movw	r14, r24
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	4f e2       	ldi	r20, 0x2F	; 47
    2a6a:	54 e4       	ldi	r21, 0x44	; 68
    2a6c:	c3 01       	movw	r24, r6
    2a6e:	b2 01       	movw	r22, r4
    2a70:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    2a74:	a7 01       	movw	r20, r14
    2a76:	96 01       	movw	r18, r12
    2a78:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	48 e4       	ldi	r20, 0x48	; 72
    2a82:	53 e4       	ldi	r21, 0x43	; 67
    2a84:	0e 94 39 18 	call	0x3072	; 0x3072 <__divsf3>
    2a88:	29 81       	ldd	r18, Y+1	; 0x01
    2a8a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a8c:	4b 81       	ldd	r20, Y+3	; 0x03
    2a8e:	5c 81       	ldd	r21, Y+4	; 0x04
    2a90:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
    2a94:	e9 89       	ldd	r30, Y+17	; 0x11
    2a96:	fa 89       	ldd	r31, Y+18	; 0x12
    2a98:	60 83       	st	Z, r22
    2a9a:	71 83       	std	Z+1, r23	; 0x01
    2a9c:	82 83       	std	Z+2, r24	; 0x02
    2a9e:	93 83       	std	Z+3, r25	; 0x03
	puck_buffer[1] = sin(global_theta)*PUCK_VECTOR_LEN*(1023-max_val)/200.0 + position_buffer[1]; // Assign Y val
    2aa0:	c5 01       	movw	r24, r10
    2aa2:	b4 01       	movw	r22, r8
    2aa4:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <sin>
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	4f e2       	ldi	r20, 0x2F	; 47
    2aae:	54 e4       	ldi	r21, 0x44	; 68
    2ab0:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    2ab4:	9b 01       	movw	r18, r22
    2ab6:	ac 01       	movw	r20, r24
    2ab8:	c7 01       	movw	r24, r14
    2aba:	b6 01       	movw	r22, r12
    2abc:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	48 e4       	ldi	r20, 0x48	; 72
    2ac6:	53 e4       	ldi	r21, 0x43	; 67
    2ac8:	0e 94 39 18 	call	0x3072	; 0x3072 <__divsf3>
    2acc:	2d 81       	ldd	r18, Y+5	; 0x05
    2ace:	3e 81       	ldd	r19, Y+6	; 0x06
    2ad0:	4f 81       	ldd	r20, Y+7	; 0x07
    2ad2:	58 85       	ldd	r21, Y+8	; 0x08
    2ad4:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__addsf3>
    2ad8:	e9 89       	ldd	r30, Y+17	; 0x11
    2ada:	fa 89       	ldd	r31, Y+18	; 0x12
    2adc:	64 83       	std	Z+4, r22	; 0x04
    2ade:	75 83       	std	Z+5, r23	; 0x05
    2ae0:	86 83       	std	Z+6, r24	; 0x06
    2ae2:	97 83       	std	Z+7, r25	; 0x07
	
	return max_val;
    2ae4:	82 2d       	mov	r24, r2
    2ae6:	93 2d       	mov	r25, r3

}
    2ae8:	62 96       	adiw	r28, 0x12	; 18
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	f8 94       	cli
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	cd bf       	out	0x3d, r28	; 61
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	1f 91       	pop	r17
    2afa:	0f 91       	pop	r16
    2afc:	ff 90       	pop	r15
    2afe:	ef 90       	pop	r14
    2b00:	df 90       	pop	r13
    2b02:	cf 90       	pop	r12
    2b04:	bf 90       	pop	r11
    2b06:	af 90       	pop	r10
    2b08:	9f 90       	pop	r9
    2b0a:	8f 90       	pop	r8
    2b0c:	7f 90       	pop	r7
    2b0e:	6f 90       	pop	r6
    2b10:	5f 90       	pop	r5
    2b12:	4f 90       	pop	r4
    2b14:	3f 90       	pop	r3
    2b16:	2f 90       	pop	r2
    2b18:	08 95       	ret

00002b1a <has_puck>:

/* Return 1 If Has Puck */
char has_puck(void)
{
	static int had_puck = 5;
	if(check(ADCSRA,ADEN)){		//check if ADC is enabled 
    2b1a:	80 91 7a 00 	lds	r24, 0x007A
    2b1e:	88 23       	and	r24, r24
    2b20:	14 f5       	brge	.+68     	; 0x2b66 <has_puck+0x4c>
		if(((transistor_3 + transistor_9) > HAS_PUCK_THRESHOLD)){
    2b22:	20 91 d2 01 	lds	r18, 0x01D2
    2b26:	30 91 d3 01 	lds	r19, 0x01D3
    2b2a:	80 91 d0 01 	lds	r24, 0x01D0
    2b2e:	90 91 d1 01 	lds	r25, 0x01D1
    2b32:	82 0f       	add	r24, r18
    2b34:	93 1f       	adc	r25, r19
    2b36:	85 36       	cpi	r24, 0x65	; 101
    2b38:	91 05       	cpc	r25, r1
    2b3a:	44 f0       	brlt	.+16     	; 0x2b4c <has_puck+0x32>
			had_puck = 5;
    2b3c:	85 e0       	ldi	r24, 0x05	; 5
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	90 93 32 01 	sts	0x0132, r25
    2b44:	80 93 31 01 	sts	0x0131, r24
			return 1;
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	08 95       	ret
		}
		if(had_puck){
    2b4c:	80 91 31 01 	lds	r24, 0x0131
    2b50:	90 91 32 01 	lds	r25, 0x0132
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	49 f0       	breq	.+18     	; 0x2b6a <has_puck+0x50>
			had_puck -= 1;
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	90 93 32 01 	sts	0x0132, r25
    2b5e:	80 93 31 01 	sts	0x0131, r24
			return 1;
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	08 95       	ret
		}
	}
	return 0;
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	08 95       	ret
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
}
    2b6c:	08 95       	ret

00002b6e <adc_switch>:
/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated

	clear(ADCSRA,ADEN); // Disable ADC subsystem
    2b6e:	ea e7       	ldi	r30, 0x7A	; 122
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	8f 77       	andi	r24, 0x7F	; 127
    2b76:	80 83       	st	Z, r24
	
	switch(state){
    2b78:	e0 91 e8 01 	lds	r30, 0x01E8
    2b7c:	f0 91 e9 01 	lds	r31, 0x01E9
    2b80:	ec 30       	cpi	r30, 0x0C	; 12
    2b82:	f1 05       	cpc	r31, r1
    2b84:	08 f0       	brcs	.+2      	; 0x2b88 <adc_switch+0x1a>
    2b86:	82 c1       	rjmp	.+772    	; 0x2e8c <adc_switch+0x31e>
    2b88:	e2 5a       	subi	r30, 0xA2	; 162
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__tablejump2__>

		case 0:
			state = 1;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	90 93 e9 01 	sts	0x01E9, r25
    2b98:	80 93 e8 01 	sts	0x01E8, r24
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
    2b9c:	eb e7       	ldi	r30, 0x7B	; 123
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	8f 7d       	andi	r24, 0xDF	; 223
    2ba4:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 8
    2ba6:	ec e7       	ldi	r30, 0x7C	; 124
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	8b 7f       	andi	r24, 0xFB	; 251
    2bae:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2bb0:	80 81       	ld	r24, Z
    2bb2:	8d 7f       	andi	r24, 0xFD	; 253
    2bb4:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2bb6:	80 81       	ld	r24, Z
    2bb8:	8e 7f       	andi	r24, 0xFE	; 254
    2bba:	80 83       	st	Z, r24
			transistor_vals[2] = ADC;			
    2bbc:	80 91 78 00 	lds	r24, 0x0078
    2bc0:	90 91 79 00 	lds	r25, 0x0079
    2bc4:	90 93 d9 01 	sts	0x01D9, r25
    2bc8:	80 93 d8 01 	sts	0x01D8, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC0 at pin F0
			clear(ADMUX,MUX2); // Transistor 8
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[2] = ADC;			
			break;
    2bce:	5f c1       	rjmp	.+702    	; 0x2e8e <adc_switch+0x320>

		case 1:
			state = 2;
    2bd0:	82 e0       	ldi	r24, 0x02	; 2
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	90 93 e9 01 	sts	0x01E9, r25
    2bd8:	80 93 e8 01 	sts	0x01E8, r24
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
    2bdc:	eb e7       	ldi	r30, 0x7B	; 123
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	8f 7d       	andi	r24, 0xDF	; 223
    2be4:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 9
    2be6:	ec e7       	ldi	r30, 0x7C	; 124
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 81       	ld	r24, Z
    2bec:	8b 7f       	andi	r24, 0xFB	; 251
    2bee:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2bf0:	80 81       	ld	r24, Z
    2bf2:	8d 7f       	andi	r24, 0xFD	; 253
    2bf4:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2bf6:	80 81       	ld	r24, Z
    2bf8:	81 60       	ori	r24, 0x01	; 1
    2bfa:	80 83       	st	Z, r24
			transistor_vals[4] = ADC;			
    2bfc:	80 91 78 00 	lds	r24, 0x0078
    2c00:	90 91 79 00 	lds	r25, 0x0079
    2c04:	90 93 dd 01 	sts	0x01DD, r25
    2c08:	80 93 dc 01 	sts	0x01DC, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC1 at pin F1
			clear(ADMUX,MUX2); // Transistor 9
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[4] = ADC;			
			break;
    2c0e:	3f c1       	rjmp	.+638    	; 0x2e8e <adc_switch+0x320>

		case 2:
			state = 3;
    2c10:	83 e0       	ldi	r24, 0x03	; 3
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	90 93 e9 01 	sts	0x01E9, r25
    2c18:	80 93 e8 01 	sts	0x01E8, r24
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
    2c1c:	eb e7       	ldi	r30, 0x7B	; 123
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	80 81       	ld	r24, Z
    2c22:	8f 7d       	andi	r24, 0xDF	; 223
    2c24:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 10
    2c26:	ec e7       	ldi	r30, 0x7C	; 124
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	84 60       	ori	r24, 0x04	; 4
    2c2e:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2c30:	80 81       	ld	r24, Z
    2c32:	8d 7f       	andi	r24, 0xFD	; 253
    2c34:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2c36:	80 81       	ld	r24, Z
    2c38:	8e 7f       	andi	r24, 0xFE	; 254
    2c3a:	80 83       	st	Z, r24
			transistor_9 = ADC;			
    2c3c:	80 91 78 00 	lds	r24, 0x0078
    2c40:	90 91 79 00 	lds	r25, 0x0079
    2c44:	90 93 d1 01 	sts	0x01D1, r25
    2c48:	80 93 d0 01 	sts	0x01D0, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC4 at pin F4
			set(ADMUX,MUX2); // Transistor 10
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_9 = ADC;			
			break;
    2c4e:	1f c1       	rjmp	.+574    	; 0x2e8e <adc_switch+0x320>

		case 3:
			state = 4;
    2c50:	84 e0       	ldi	r24, 0x04	; 4
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	90 93 e9 01 	sts	0x01E9, r25
    2c58:	80 93 e8 01 	sts	0x01E8, r24
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
    2c5c:	eb e7       	ldi	r30, 0x7B	; 123
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 81       	ld	r24, Z
    2c62:	8f 7d       	andi	r24, 0xDF	; 223
    2c64:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 13
    2c66:	ec e7       	ldi	r30, 0x7C	; 124
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	84 60       	ori	r24, 0x04	; 4
    2c6e:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2c70:	80 81       	ld	r24, Z
    2c72:	8d 7f       	andi	r24, 0xFD	; 253
    2c74:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2c76:	80 81       	ld	r24, Z
    2c78:	81 60       	ori	r24, 0x01	; 1
    2c7a:	80 83       	st	Z, r24
			transistor_vals[5] = ADC;			
    2c7c:	80 91 78 00 	lds	r24, 0x0078
    2c80:	90 91 79 00 	lds	r25, 0x0079
    2c84:	90 93 df 01 	sts	0x01DF, r25
    2c88:	80 93 de 01 	sts	0x01DE, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC5 at pin F5
			set(ADMUX,MUX2); // Transistor 13
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[5] = ADC;			
			break;
    2c8e:	ff c0       	rjmp	.+510    	; 0x2e8e <adc_switch+0x320>

		case 4:
			state = 5;
    2c90:	85 e0       	ldi	r24, 0x05	; 5
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	90 93 e9 01 	sts	0x01E9, r25
    2c98:	80 93 e8 01 	sts	0x01E8, r24
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
    2c9c:	eb e7       	ldi	r30, 0x7B	; 123
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8f 7d       	andi	r24, 0xDF	; 223
    2ca4:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 14
    2ca6:	ec e7       	ldi	r30, 0x7C	; 124
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	84 60       	ori	r24, 0x04	; 4
    2cae:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2cb0:	80 81       	ld	r24, Z
    2cb2:	82 60       	ori	r24, 0x02	; 2
    2cb4:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2cb6:	80 81       	ld	r24, Z
    2cb8:	8e 7f       	andi	r24, 0xFE	; 254
    2cba:	80 83       	st	Z, r24
			transistor_vals[7] = ADC;			
    2cbc:	80 91 78 00 	lds	r24, 0x0078
    2cc0:	90 91 79 00 	lds	r25, 0x0079
    2cc4:	90 93 e3 01 	sts	0x01E3, r25
    2cc8:	80 93 e2 01 	sts	0x01E2, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC6 at pin F6
			set(ADMUX,MUX2); // Transistor 14
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[7] = ADC;			
			break;
    2cce:	df c0       	rjmp	.+446    	; 0x2e8e <adc_switch+0x320>

		case 5:
			state = 6;
    2cd0:	86 e0       	ldi	r24, 0x06	; 6
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	90 93 e9 01 	sts	0x01E9, r25
    2cd8:	80 93 e8 01 	sts	0x01E8, r24
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
    2cdc:	eb e7       	ldi	r30, 0x7B	; 123
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	8f 7d       	andi	r24, 0xDF	; 223
    2ce4:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 15
    2ce6:	ec e7       	ldi	r30, 0x7C	; 124
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	84 60       	ori	r24, 0x04	; 4
    2cee:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2cf0:	80 81       	ld	r24, Z
    2cf2:	82 60       	ori	r24, 0x02	; 2
    2cf4:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2cf6:	80 81       	ld	r24, Z
    2cf8:	81 60       	ori	r24, 0x01	; 1
    2cfa:	80 83       	st	Z, r24
			transistor_vals[8] = ADC;			
    2cfc:	80 91 78 00 	lds	r24, 0x0078
    2d00:	90 91 79 00 	lds	r25, 0x0079
    2d04:	90 93 e5 01 	sts	0x01E5, r25
    2d08:	80 93 e4 01 	sts	0x01E4, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
			clear(ADCSRB,MUX5); // Select ADC7 at pin F7
			set(ADMUX,MUX2); // Transistor 15
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[8] = ADC;			
			break;
    2d0e:	bf c0       	rjmp	.+382    	; 0x2e8e <adc_switch+0x320>

		case 6:
			state = 7;
    2d10:	87 e0       	ldi	r24, 0x07	; 7
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	90 93 e9 01 	sts	0x01E9, r25
    2d18:	80 93 e8 01 	sts	0x01E8, r24
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
    2d1c:	eb e7       	ldi	r30, 0x7B	; 123
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	80 62       	ori	r24, 0x20	; 32
    2d24:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 1, 16
    2d26:	ec e7       	ldi	r30, 0x7C	; 124
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	8b 7f       	andi	r24, 0xFB	; 251
    2d2e:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2d30:	80 81       	ld	r24, Z
    2d32:	8d 7f       	andi	r24, 0xFD	; 253
    2d34:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2d36:	80 81       	ld	r24, Z
    2d38:	8e 7f       	andi	r24, 0xFE	; 254
    2d3a:	80 83       	st	Z, r24
			transistor_vals[9] = ADC;			
    2d3c:	80 91 78 00 	lds	r24, 0x0078
    2d40:	90 91 79 00 	lds	r25, 0x0079
    2d44:	90 93 e7 01 	sts	0x01E7, r25
    2d48:	80 93 e6 01 	sts	0x01E6, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC8 at pin D4
			clear(ADMUX,MUX2); // Transistor 1, 16
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[9] = ADC;			
			break;
    2d4e:	9f c0       	rjmp	.+318    	; 0x2e8e <adc_switch+0x320>

		case 7:
			state = 8;
    2d50:	88 e0       	ldi	r24, 0x08	; 8
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	90 93 e9 01 	sts	0x01E9, r25
    2d58:	80 93 e8 01 	sts	0x01E8, r24
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
    2d5c:	eb e7       	ldi	r30, 0x7B	; 123
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	80 62       	ori	r24, 0x20	; 32
    2d64:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 11, 12
    2d66:	ec e7       	ldi	r30, 0x7C	; 124
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	8b 7f       	andi	r24, 0xFB	; 251
    2d6e:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2d70:	80 81       	ld	r24, Z
    2d72:	8d 7f       	andi	r24, 0xFD	; 253
    2d74:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2d76:	80 81       	ld	r24, Z
    2d78:	81 60       	ori	r24, 0x01	; 1
    2d7a:	80 83       	st	Z, r24
			transistor_vals[0] = ADC;			
    2d7c:	80 91 78 00 	lds	r24, 0x0078
    2d80:	90 91 79 00 	lds	r25, 0x0079
    2d84:	90 93 d5 01 	sts	0x01D5, r25
    2d88:	80 93 d4 01 	sts	0x01D4, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC9 at pin D6
			clear(ADMUX,MUX2); // Transistor 11, 12
			clear(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[0] = ADC;			
			break;
    2d8e:	7f c0       	rjmp	.+254    	; 0x2e8e <adc_switch+0x320>

		case 8:
			state = 9;
    2d90:	89 e0       	ldi	r24, 0x09	; 9
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	90 93 e9 01 	sts	0x01E9, r25
    2d98:	80 93 e8 01 	sts	0x01E8, r24
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
    2d9c:	eb e7       	ldi	r30, 0x7B	; 123
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	80 62       	ori	r24, 0x20	; 32
    2da4:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
    2da6:	ec e7       	ldi	r30, 0x7C	; 124
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	8b 7f       	andi	r24, 0xFB	; 251
    2dae:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2db0:	80 81       	ld	r24, Z
    2db2:	82 60       	ori	r24, 0x02	; 2
    2db4:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2db6:	80 81       	ld	r24, Z
    2db8:	8e 7f       	andi	r24, 0xFE	; 254
    2dba:	80 83       	st	Z, r24
			transistor_vals[6] = ADC;			
    2dbc:	80 91 78 00 	lds	r24, 0x0078
    2dc0:	90 91 79 00 	lds	r25, 0x0079
    2dc4:	90 93 e1 01 	sts	0x01E1, r25
    2dc8:	80 93 e0 01 	sts	0x01E0, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC10 at pin D7
			clear(ADMUX,MUX2); // Transistor 5, 6, 7
			set(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[6] = ADC;			
			break;
    2dce:	5f c0       	rjmp	.+190    	; 0x2e8e <adc_switch+0x320>

		case 9:
			state = 10;
    2dd0:	8a e0       	ldi	r24, 0x0A	; 10
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	90 93 e9 01 	sts	0x01E9, r25
    2dd8:	80 93 e8 01 	sts	0x01E8, r24
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
    2ddc:	eb e7       	ldi	r30, 0x7B	; 123
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	80 62       	ori	r24, 0x20	; 32
    2de4:	80 83       	st	Z, r24
			clear(ADMUX,MUX2); // Transistor 2
    2de6:	ec e7       	ldi	r30, 0x7C	; 124
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	8b 7f       	andi	r24, 0xFB	; 251
    2dee:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
    2df0:	80 81       	ld	r24, Z
    2df2:	82 60       	ori	r24, 0x02	; 2
    2df4:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2df6:	80 81       	ld	r24, Z
    2df8:	81 60       	ori	r24, 0x01	; 1
    2dfa:	80 83       	st	Z, r24
			transistor_vals[3] = ADC;			
    2dfc:	80 91 78 00 	lds	r24, 0x0078
    2e00:	90 91 79 00 	lds	r25, 0x0079
    2e04:	90 93 db 01 	sts	0x01DB, r25
    2e08:	80 93 da 01 	sts	0x01DA, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC11 at pin B4
			clear(ADMUX,MUX2); // Transistor 2
			set(ADMUX,MUX1);
			set(ADMUX,MUX0);
			transistor_vals[3] = ADC;			
			break;
    2e0e:	3f c0       	rjmp	.+126    	; 0x2e8e <adc_switch+0x320>

		case 10:
			state = 11;
    2e10:	8b e0       	ldi	r24, 0x0B	; 11
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	90 93 e9 01 	sts	0x01E9, r25
    2e18:	80 93 e8 01 	sts	0x01E8, r24
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
    2e1c:	eb e7       	ldi	r30, 0x7B	; 123
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	80 62       	ori	r24, 0x20	; 32
    2e24:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 3
    2e26:	ec e7       	ldi	r30, 0x7C	; 124
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	84 60       	ori	r24, 0x04	; 4
    2e2e:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2e30:	80 81       	ld	r24, Z
    2e32:	8d 7f       	andi	r24, 0xFD	; 253
    2e34:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
    2e36:	80 81       	ld	r24, Z
    2e38:	8e 7f       	andi	r24, 0xFE	; 254
    2e3a:	80 83       	st	Z, r24
			transistor_vals[1] = ADC;			
    2e3c:	80 91 78 00 	lds	r24, 0x0078
    2e40:	90 91 79 00 	lds	r25, 0x0079
    2e44:	90 93 d7 01 	sts	0x01D7, r25
    2e48:	80 93 d6 01 	sts	0x01D6, r24
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
			set(ADCSRB,MUX5); // Select ADC12 at pin B5
			set(ADMUX,MUX2); // Transistor 3
			clear(ADMUX,MUX1);
			clear(ADMUX,MUX0);
			transistor_vals[1] = ADC;			
			break;
    2e4e:	1f c0       	rjmp	.+62     	; 0x2e8e <adc_switch+0x320>

		case 11:
			state = 0;
    2e50:	10 92 e9 01 	sts	0x01E9, r1
    2e54:	10 92 e8 01 	sts	0x01E8, r1
			set(ADCSRB,MUX5); // Select ADC13 at pin B6
    2e58:	eb e7       	ldi	r30, 0x7B	; 123
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	80 62       	ori	r24, 0x20	; 32
    2e60:	80 83       	st	Z, r24
			set(ADMUX,MUX2); // Transistor 4
    2e62:	ec e7       	ldi	r30, 0x7C	; 124
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	84 60       	ori	r24, 0x04	; 4
    2e6a:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
    2e6c:	80 81       	ld	r24, Z
    2e6e:	8d 7f       	andi	r24, 0xFD	; 253
    2e70:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
    2e72:	80 81       	ld	r24, Z
    2e74:	81 60       	ori	r24, 0x01	; 1
    2e76:	80 83       	st	Z, r24
			transistor_3 = ADC;			
    2e78:	80 91 78 00 	lds	r24, 0x0078
    2e7c:	90 91 79 00 	lds	r25, 0x0079
    2e80:	90 93 d3 01 	sts	0x01D3, r25
    2e84:	80 93 d2 01 	sts	0x01D2, r24
			return_val = 1;
    2e88:	81 e0       	ldi	r24, 0x01	; 1
			// m_usb_tx_string("  IR14: ");
			// m_usb_tx_int(transistor_vals[8]);
			// m_usb_tx_string("  IR15: ");
			// m_usb_tx_int(transistor_vals[9]);

			break;
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <adc_switch+0x320>
}

/* Control ADC Pin Switching */
char adc_switch(void)
{
	char return_val = 0; // Return if last pin has been updated
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
			// m_usb_tx_int(transistor_vals[9]);

			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
    2e8e:	ea e7       	ldi	r30, 0x7A	; 122
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	90 81       	ld	r25, Z
    2e94:	90 68       	ori	r25, 0x80	; 128
    2e96:	90 83       	st	Z, r25
	set(ADCSRA,ADSC); // Begin new conversion
    2e98:	90 81       	ld	r25, Z
    2e9a:	90 64       	ori	r25, 0x40	; 64
    2e9c:	90 83       	st	Z, r25

	return return_val;
}
    2e9e:	08 95       	ret

00002ea0 <__subsf3>:
    2ea0:	50 58       	subi	r21, 0x80	; 128

00002ea2 <__addsf3>:
    2ea2:	bb 27       	eor	r27, r27
    2ea4:	aa 27       	eor	r26, r26
    2ea6:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__addsf3x>
    2eaa:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__fp_round>
    2eae:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fp_pscA>
    2eb2:	38 f0       	brcs	.+14     	; 0x2ec2 <__addsf3+0x20>
    2eb4:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__fp_pscB>
    2eb8:	20 f0       	brcs	.+8      	; 0x2ec2 <__addsf3+0x20>
    2eba:	39 f4       	brne	.+14     	; 0x2eca <__addsf3+0x28>
    2ebc:	9f 3f       	cpi	r25, 0xFF	; 255
    2ebe:	19 f4       	brne	.+6      	; 0x2ec6 <__addsf3+0x24>
    2ec0:	26 f4       	brtc	.+8      	; 0x2eca <__addsf3+0x28>
    2ec2:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__fp_nan>
    2ec6:	0e f4       	brtc	.+2      	; 0x2eca <__addsf3+0x28>
    2ec8:	e0 95       	com	r30
    2eca:	e7 fb       	bst	r30, 7
    2ecc:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__fp_inf>

00002ed0 <__addsf3x>:
    2ed0:	e9 2f       	mov	r30, r25
    2ed2:	0e 94 c9 19 	call	0x3392	; 0x3392 <__fp_split3>
    2ed6:	58 f3       	brcs	.-42     	; 0x2eae <__addsf3+0xc>
    2ed8:	ba 17       	cp	r27, r26
    2eda:	62 07       	cpc	r22, r18
    2edc:	73 07       	cpc	r23, r19
    2ede:	84 07       	cpc	r24, r20
    2ee0:	95 07       	cpc	r25, r21
    2ee2:	20 f0       	brcs	.+8      	; 0x2eec <__addsf3x+0x1c>
    2ee4:	79 f4       	brne	.+30     	; 0x2f04 <__addsf3x+0x34>
    2ee6:	a6 f5       	brtc	.+104    	; 0x2f50 <__addsf3x+0x80>
    2ee8:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__fp_zero>
    2eec:	0e f4       	brtc	.+2      	; 0x2ef0 <__addsf3x+0x20>
    2eee:	e0 95       	com	r30
    2ef0:	0b 2e       	mov	r0, r27
    2ef2:	ba 2f       	mov	r27, r26
    2ef4:	a0 2d       	mov	r26, r0
    2ef6:	0b 01       	movw	r0, r22
    2ef8:	b9 01       	movw	r22, r18
    2efa:	90 01       	movw	r18, r0
    2efc:	0c 01       	movw	r0, r24
    2efe:	ca 01       	movw	r24, r20
    2f00:	a0 01       	movw	r20, r0
    2f02:	11 24       	eor	r1, r1
    2f04:	ff 27       	eor	r31, r31
    2f06:	59 1b       	sub	r21, r25
    2f08:	99 f0       	breq	.+38     	; 0x2f30 <__addsf3x+0x60>
    2f0a:	59 3f       	cpi	r21, 0xF9	; 249
    2f0c:	50 f4       	brcc	.+20     	; 0x2f22 <__addsf3x+0x52>
    2f0e:	50 3e       	cpi	r21, 0xE0	; 224
    2f10:	68 f1       	brcs	.+90     	; 0x2f6c <__addsf3x+0x9c>
    2f12:	1a 16       	cp	r1, r26
    2f14:	f0 40       	sbci	r31, 0x00	; 0
    2f16:	a2 2f       	mov	r26, r18
    2f18:	23 2f       	mov	r18, r19
    2f1a:	34 2f       	mov	r19, r20
    2f1c:	44 27       	eor	r20, r20
    2f1e:	58 5f       	subi	r21, 0xF8	; 248
    2f20:	f3 cf       	rjmp	.-26     	; 0x2f08 <__addsf3x+0x38>
    2f22:	46 95       	lsr	r20
    2f24:	37 95       	ror	r19
    2f26:	27 95       	ror	r18
    2f28:	a7 95       	ror	r26
    2f2a:	f0 40       	sbci	r31, 0x00	; 0
    2f2c:	53 95       	inc	r21
    2f2e:	c9 f7       	brne	.-14     	; 0x2f22 <__addsf3x+0x52>
    2f30:	7e f4       	brtc	.+30     	; 0x2f50 <__addsf3x+0x80>
    2f32:	1f 16       	cp	r1, r31
    2f34:	ba 0b       	sbc	r27, r26
    2f36:	62 0b       	sbc	r22, r18
    2f38:	73 0b       	sbc	r23, r19
    2f3a:	84 0b       	sbc	r24, r20
    2f3c:	ba f0       	brmi	.+46     	; 0x2f6c <__addsf3x+0x9c>
    2f3e:	91 50       	subi	r25, 0x01	; 1
    2f40:	a1 f0       	breq	.+40     	; 0x2f6a <__addsf3x+0x9a>
    2f42:	ff 0f       	add	r31, r31
    2f44:	bb 1f       	adc	r27, r27
    2f46:	66 1f       	adc	r22, r22
    2f48:	77 1f       	adc	r23, r23
    2f4a:	88 1f       	adc	r24, r24
    2f4c:	c2 f7       	brpl	.-16     	; 0x2f3e <__addsf3x+0x6e>
    2f4e:	0e c0       	rjmp	.+28     	; 0x2f6c <__addsf3x+0x9c>
    2f50:	ba 0f       	add	r27, r26
    2f52:	62 1f       	adc	r22, r18
    2f54:	73 1f       	adc	r23, r19
    2f56:	84 1f       	adc	r24, r20
    2f58:	48 f4       	brcc	.+18     	; 0x2f6c <__addsf3x+0x9c>
    2f5a:	87 95       	ror	r24
    2f5c:	77 95       	ror	r23
    2f5e:	67 95       	ror	r22
    2f60:	b7 95       	ror	r27
    2f62:	f7 95       	ror	r31
    2f64:	9e 3f       	cpi	r25, 0xFE	; 254
    2f66:	08 f0       	brcs	.+2      	; 0x2f6a <__addsf3x+0x9a>
    2f68:	b0 cf       	rjmp	.-160    	; 0x2eca <__addsf3+0x28>
    2f6a:	93 95       	inc	r25
    2f6c:	88 0f       	add	r24, r24
    2f6e:	08 f0       	brcs	.+2      	; 0x2f72 <__addsf3x+0xa2>
    2f70:	99 27       	eor	r25, r25
    2f72:	ee 0f       	add	r30, r30
    2f74:	97 95       	ror	r25
    2f76:	87 95       	ror	r24
    2f78:	08 95       	ret
    2f7a:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fp_pscA>
    2f7e:	60 f0       	brcs	.+24     	; 0x2f98 <__addsf3x+0xc8>
    2f80:	80 e8       	ldi	r24, 0x80	; 128
    2f82:	91 e0       	ldi	r25, 0x01	; 1
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <__addsf3x+0xb8>
    2f86:	9e ef       	ldi	r25, 0xFE	; 254
    2f88:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__fp_pscB>
    2f8c:	28 f0       	brcs	.+10     	; 0x2f98 <__addsf3x+0xc8>
    2f8e:	40 e8       	ldi	r20, 0x80	; 128
    2f90:	51 e0       	ldi	r21, 0x01	; 1
    2f92:	71 f4       	brne	.+28     	; 0x2fb0 <atan2+0x10>
    2f94:	5e ef       	ldi	r21, 0xFE	; 254
    2f96:	0c c0       	rjmp	.+24     	; 0x2fb0 <atan2+0x10>
    2f98:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__fp_nan>
    2f9c:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__fp_zero>

00002fa0 <atan2>:
    2fa0:	e9 2f       	mov	r30, r25
    2fa2:	e0 78       	andi	r30, 0x80	; 128
    2fa4:	0e 94 c9 19 	call	0x3392	; 0x3392 <__fp_split3>
    2fa8:	40 f3       	brcs	.-48     	; 0x2f7a <__addsf3x+0xaa>
    2faa:	09 2e       	mov	r0, r25
    2fac:	05 2a       	or	r0, r21
    2fae:	b1 f3       	breq	.-20     	; 0x2f9c <__addsf3x+0xcc>
    2fb0:	26 17       	cp	r18, r22
    2fb2:	37 07       	cpc	r19, r23
    2fb4:	48 07       	cpc	r20, r24
    2fb6:	59 07       	cpc	r21, r25
    2fb8:	38 f0       	brcs	.+14     	; 0x2fc8 <atan2+0x28>
    2fba:	0e 2e       	mov	r0, r30
    2fbc:	07 f8       	bld	r0, 7
    2fbe:	e0 25       	eor	r30, r0
    2fc0:	69 f0       	breq	.+26     	; 0x2fdc <atan2+0x3c>
    2fc2:	e0 25       	eor	r30, r0
    2fc4:	e0 64       	ori	r30, 0x40	; 64
    2fc6:	0a c0       	rjmp	.+20     	; 0x2fdc <atan2+0x3c>
    2fc8:	ef 63       	ori	r30, 0x3F	; 63
    2fca:	07 f8       	bld	r0, 7
    2fcc:	00 94       	com	r0
    2fce:	07 fa       	bst	r0, 7
    2fd0:	db 01       	movw	r26, r22
    2fd2:	b9 01       	movw	r22, r18
    2fd4:	9d 01       	movw	r18, r26
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	ca 01       	movw	r24, r20
    2fda:	ad 01       	movw	r20, r26
    2fdc:	ef 93       	push	r30
    2fde:	0e 94 50 18 	call	0x30a0	; 0x30a0 <__divsf3_pse>
    2fe2:	0e 94 a4 19 	call	0x3348	; 0x3348 <__fp_round>
    2fe6:	0e 94 00 18 	call	0x3000	; 0x3000 <atan>
    2fea:	5f 91       	pop	r21
    2fec:	55 23       	and	r21, r21
    2fee:	39 f0       	breq	.+14     	; 0x2ffe <atan2+0x5e>
    2ff0:	2b ed       	ldi	r18, 0xDB	; 219
    2ff2:	3f e0       	ldi	r19, 0x0F	; 15
    2ff4:	49 e4       	ldi	r20, 0x49	; 73
    2ff6:	50 fd       	sbrc	r21, 0
    2ff8:	49 ec       	ldi	r20, 0xC9	; 201
    2ffa:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__addsf3>
    2ffe:	08 95       	ret

00003000 <atan>:
    3000:	df 93       	push	r29
    3002:	dd 27       	eor	r29, r29
    3004:	b9 2f       	mov	r27, r25
    3006:	bf 77       	andi	r27, 0x7F	; 127
    3008:	40 e8       	ldi	r20, 0x80	; 128
    300a:	5f e3       	ldi	r21, 0x3F	; 63
    300c:	16 16       	cp	r1, r22
    300e:	17 06       	cpc	r1, r23
    3010:	48 07       	cpc	r20, r24
    3012:	5b 07       	cpc	r21, r27
    3014:	18 f4       	brcc	.+6      	; 0x301c <atan+0x1c>
    3016:	d9 2f       	mov	r29, r25
    3018:	0e 94 f7 19 	call	0x33ee	; 0x33ee <inverse>
    301c:	9f 93       	push	r25
    301e:	8f 93       	push	r24
    3020:	7f 93       	push	r23
    3022:	6f 93       	push	r22
    3024:	0e 94 ba 1a 	call	0x3574	; 0x3574 <square>
    3028:	e4 ed       	ldi	r30, 0xD4	; 212
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	0e 94 44 19 	call	0x3288	; 0x3288 <__fp_powser>
    3030:	0e 94 a4 19 	call	0x3348	; 0x3348 <__fp_round>
    3034:	2f 91       	pop	r18
    3036:	3f 91       	pop	r19
    3038:	4f 91       	pop	r20
    303a:	5f 91       	pop	r21
    303c:	0e 94 12 1a 	call	0x3424	; 0x3424 <__mulsf3x>
    3040:	dd 23       	and	r29, r29
    3042:	51 f0       	breq	.+20     	; 0x3058 <atan+0x58>
    3044:	90 58       	subi	r25, 0x80	; 128
    3046:	a2 ea       	ldi	r26, 0xA2	; 162
    3048:	2a ed       	ldi	r18, 0xDA	; 218
    304a:	3f e0       	ldi	r19, 0x0F	; 15
    304c:	49 ec       	ldi	r20, 0xC9	; 201
    304e:	5f e3       	ldi	r21, 0x3F	; 63
    3050:	d0 78       	andi	r29, 0x80	; 128
    3052:	5d 27       	eor	r21, r29
    3054:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__addsf3x>
    3058:	df 91       	pop	r29
    305a:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__fp_round>

0000305e <__cmpsf2>:
    305e:	0e 94 17 19 	call	0x322e	; 0x322e <__fp_cmp>
    3062:	08 f4       	brcc	.+2      	; 0x3066 <__cmpsf2+0x8>
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	08 95       	ret

00003068 <cos>:
    3068:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__fp_rempio2>
    306c:	e3 95       	inc	r30
    306e:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__fp_sinus>

00003072 <__divsf3>:
    3072:	0e 94 4d 18 	call	0x309a	; 0x309a <__divsf3x>
    3076:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__fp_round>
    307a:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__fp_pscB>
    307e:	58 f0       	brcs	.+22     	; 0x3096 <__divsf3+0x24>
    3080:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fp_pscA>
    3084:	40 f0       	brcs	.+16     	; 0x3096 <__divsf3+0x24>
    3086:	29 f4       	brne	.+10     	; 0x3092 <__divsf3+0x20>
    3088:	5f 3f       	cpi	r21, 0xFF	; 255
    308a:	29 f0       	breq	.+10     	; 0x3096 <__divsf3+0x24>
    308c:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__fp_inf>
    3090:	51 11       	cpse	r21, r1
    3092:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__fp_szero>
    3096:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__fp_nan>

0000309a <__divsf3x>:
    309a:	0e 94 c9 19 	call	0x3392	; 0x3392 <__fp_split3>
    309e:	68 f3       	brcs	.-38     	; 0x307a <__divsf3+0x8>

000030a0 <__divsf3_pse>:
    30a0:	99 23       	and	r25, r25
    30a2:	b1 f3       	breq	.-20     	; 0x3090 <__divsf3+0x1e>
    30a4:	55 23       	and	r21, r21
    30a6:	91 f3       	breq	.-28     	; 0x308c <__divsf3+0x1a>
    30a8:	95 1b       	sub	r25, r21
    30aa:	55 0b       	sbc	r21, r21
    30ac:	bb 27       	eor	r27, r27
    30ae:	aa 27       	eor	r26, r26
    30b0:	62 17       	cp	r22, r18
    30b2:	73 07       	cpc	r23, r19
    30b4:	84 07       	cpc	r24, r20
    30b6:	38 f0       	brcs	.+14     	; 0x30c6 <__divsf3_pse+0x26>
    30b8:	9f 5f       	subi	r25, 0xFF	; 255
    30ba:	5f 4f       	sbci	r21, 0xFF	; 255
    30bc:	22 0f       	add	r18, r18
    30be:	33 1f       	adc	r19, r19
    30c0:	44 1f       	adc	r20, r20
    30c2:	aa 1f       	adc	r26, r26
    30c4:	a9 f3       	breq	.-22     	; 0x30b0 <__divsf3_pse+0x10>
    30c6:	35 d0       	rcall	.+106    	; 0x3132 <__divsf3_pse+0x92>
    30c8:	0e 2e       	mov	r0, r30
    30ca:	3a f0       	brmi	.+14     	; 0x30da <__divsf3_pse+0x3a>
    30cc:	e0 e8       	ldi	r30, 0x80	; 128
    30ce:	32 d0       	rcall	.+100    	; 0x3134 <__divsf3_pse+0x94>
    30d0:	91 50       	subi	r25, 0x01	; 1
    30d2:	50 40       	sbci	r21, 0x00	; 0
    30d4:	e6 95       	lsr	r30
    30d6:	00 1c       	adc	r0, r0
    30d8:	ca f7       	brpl	.-14     	; 0x30cc <__divsf3_pse+0x2c>
    30da:	2b d0       	rcall	.+86     	; 0x3132 <__divsf3_pse+0x92>
    30dc:	fe 2f       	mov	r31, r30
    30de:	29 d0       	rcall	.+82     	; 0x3132 <__divsf3_pse+0x92>
    30e0:	66 0f       	add	r22, r22
    30e2:	77 1f       	adc	r23, r23
    30e4:	88 1f       	adc	r24, r24
    30e6:	bb 1f       	adc	r27, r27
    30e8:	26 17       	cp	r18, r22
    30ea:	37 07       	cpc	r19, r23
    30ec:	48 07       	cpc	r20, r24
    30ee:	ab 07       	cpc	r26, r27
    30f0:	b0 e8       	ldi	r27, 0x80	; 128
    30f2:	09 f0       	breq	.+2      	; 0x30f6 <__divsf3_pse+0x56>
    30f4:	bb 0b       	sbc	r27, r27
    30f6:	80 2d       	mov	r24, r0
    30f8:	bf 01       	movw	r22, r30
    30fa:	ff 27       	eor	r31, r31
    30fc:	93 58       	subi	r25, 0x83	; 131
    30fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3100:	3a f0       	brmi	.+14     	; 0x3110 <__divsf3_pse+0x70>
    3102:	9e 3f       	cpi	r25, 0xFE	; 254
    3104:	51 05       	cpc	r21, r1
    3106:	78 f0       	brcs	.+30     	; 0x3126 <__divsf3_pse+0x86>
    3108:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__fp_inf>
    310c:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__fp_szero>
    3110:	5f 3f       	cpi	r21, 0xFF	; 255
    3112:	e4 f3       	brlt	.-8      	; 0x310c <__divsf3_pse+0x6c>
    3114:	98 3e       	cpi	r25, 0xE8	; 232
    3116:	d4 f3       	brlt	.-12     	; 0x310c <__divsf3_pse+0x6c>
    3118:	86 95       	lsr	r24
    311a:	77 95       	ror	r23
    311c:	67 95       	ror	r22
    311e:	b7 95       	ror	r27
    3120:	f7 95       	ror	r31
    3122:	9f 5f       	subi	r25, 0xFF	; 255
    3124:	c9 f7       	brne	.-14     	; 0x3118 <__divsf3_pse+0x78>
    3126:	88 0f       	add	r24, r24
    3128:	91 1d       	adc	r25, r1
    312a:	96 95       	lsr	r25
    312c:	87 95       	ror	r24
    312e:	97 f9       	bld	r25, 7
    3130:	08 95       	ret
    3132:	e1 e0       	ldi	r30, 0x01	; 1
    3134:	66 0f       	add	r22, r22
    3136:	77 1f       	adc	r23, r23
    3138:	88 1f       	adc	r24, r24
    313a:	bb 1f       	adc	r27, r27
    313c:	62 17       	cp	r22, r18
    313e:	73 07       	cpc	r23, r19
    3140:	84 07       	cpc	r24, r20
    3142:	ba 07       	cpc	r27, r26
    3144:	20 f0       	brcs	.+8      	; 0x314e <__divsf3_pse+0xae>
    3146:	62 1b       	sub	r22, r18
    3148:	73 0b       	sbc	r23, r19
    314a:	84 0b       	sbc	r24, r20
    314c:	ba 0b       	sbc	r27, r26
    314e:	ee 1f       	adc	r30, r30
    3150:	88 f7       	brcc	.-30     	; 0x3134 <__divsf3_pse+0x94>
    3152:	e0 95       	com	r30
    3154:	08 95       	ret

00003156 <__fixunssfsi>:
    3156:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fp_splitA>
    315a:	88 f0       	brcs	.+34     	; 0x317e <__fixunssfsi+0x28>
    315c:	9f 57       	subi	r25, 0x7F	; 127
    315e:	98 f0       	brcs	.+38     	; 0x3186 <__fixunssfsi+0x30>
    3160:	b9 2f       	mov	r27, r25
    3162:	99 27       	eor	r25, r25
    3164:	b7 51       	subi	r27, 0x17	; 23
    3166:	b0 f0       	brcs	.+44     	; 0x3194 <__fixunssfsi+0x3e>
    3168:	e1 f0       	breq	.+56     	; 0x31a2 <__fixunssfsi+0x4c>
    316a:	66 0f       	add	r22, r22
    316c:	77 1f       	adc	r23, r23
    316e:	88 1f       	adc	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	1a f0       	brmi	.+6      	; 0x317a <__fixunssfsi+0x24>
    3174:	ba 95       	dec	r27
    3176:	c9 f7       	brne	.-14     	; 0x316a <__fixunssfsi+0x14>
    3178:	14 c0       	rjmp	.+40     	; 0x31a2 <__fixunssfsi+0x4c>
    317a:	b1 30       	cpi	r27, 0x01	; 1
    317c:	91 f0       	breq	.+36     	; 0x31a2 <__fixunssfsi+0x4c>
    317e:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__fp_zero>
    3182:	b1 e0       	ldi	r27, 0x01	; 1
    3184:	08 95       	ret
    3186:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__fp_zero>
    318a:	67 2f       	mov	r22, r23
    318c:	78 2f       	mov	r23, r24
    318e:	88 27       	eor	r24, r24
    3190:	b8 5f       	subi	r27, 0xF8	; 248
    3192:	39 f0       	breq	.+14     	; 0x31a2 <__fixunssfsi+0x4c>
    3194:	b9 3f       	cpi	r27, 0xF9	; 249
    3196:	cc f3       	brlt	.-14     	; 0x318a <__fixunssfsi+0x34>
    3198:	86 95       	lsr	r24
    319a:	77 95       	ror	r23
    319c:	67 95       	ror	r22
    319e:	b3 95       	inc	r27
    31a0:	d9 f7       	brne	.-10     	; 0x3198 <__fixunssfsi+0x42>
    31a2:	3e f4       	brtc	.+14     	; 0x31b2 <__fixunssfsi+0x5c>
    31a4:	90 95       	com	r25
    31a6:	80 95       	com	r24
    31a8:	70 95       	com	r23
    31aa:	61 95       	neg	r22
    31ac:	7f 4f       	sbci	r23, 0xFF	; 255
    31ae:	8f 4f       	sbci	r24, 0xFF	; 255
    31b0:	9f 4f       	sbci	r25, 0xFF	; 255
    31b2:	08 95       	ret

000031b4 <__floatunsisf>:
    31b4:	e8 94       	clt
    31b6:	09 c0       	rjmp	.+18     	; 0x31ca <__floatsisf+0x12>

000031b8 <__floatsisf>:
    31b8:	97 fb       	bst	r25, 7
    31ba:	3e f4       	brtc	.+14     	; 0x31ca <__floatsisf+0x12>
    31bc:	90 95       	com	r25
    31be:	80 95       	com	r24
    31c0:	70 95       	com	r23
    31c2:	61 95       	neg	r22
    31c4:	7f 4f       	sbci	r23, 0xFF	; 255
    31c6:	8f 4f       	sbci	r24, 0xFF	; 255
    31c8:	9f 4f       	sbci	r25, 0xFF	; 255
    31ca:	99 23       	and	r25, r25
    31cc:	a9 f0       	breq	.+42     	; 0x31f8 <__floatsisf+0x40>
    31ce:	f9 2f       	mov	r31, r25
    31d0:	96 e9       	ldi	r25, 0x96	; 150
    31d2:	bb 27       	eor	r27, r27
    31d4:	93 95       	inc	r25
    31d6:	f6 95       	lsr	r31
    31d8:	87 95       	ror	r24
    31da:	77 95       	ror	r23
    31dc:	67 95       	ror	r22
    31de:	b7 95       	ror	r27
    31e0:	f1 11       	cpse	r31, r1
    31e2:	f8 cf       	rjmp	.-16     	; 0x31d4 <__floatsisf+0x1c>
    31e4:	fa f4       	brpl	.+62     	; 0x3224 <__floatsisf+0x6c>
    31e6:	bb 0f       	add	r27, r27
    31e8:	11 f4       	brne	.+4      	; 0x31ee <__floatsisf+0x36>
    31ea:	60 ff       	sbrs	r22, 0
    31ec:	1b c0       	rjmp	.+54     	; 0x3224 <__floatsisf+0x6c>
    31ee:	6f 5f       	subi	r22, 0xFF	; 255
    31f0:	7f 4f       	sbci	r23, 0xFF	; 255
    31f2:	8f 4f       	sbci	r24, 0xFF	; 255
    31f4:	9f 4f       	sbci	r25, 0xFF	; 255
    31f6:	16 c0       	rjmp	.+44     	; 0x3224 <__floatsisf+0x6c>
    31f8:	88 23       	and	r24, r24
    31fa:	11 f0       	breq	.+4      	; 0x3200 <__floatsisf+0x48>
    31fc:	96 e9       	ldi	r25, 0x96	; 150
    31fe:	11 c0       	rjmp	.+34     	; 0x3222 <__floatsisf+0x6a>
    3200:	77 23       	and	r23, r23
    3202:	21 f0       	breq	.+8      	; 0x320c <__floatsisf+0x54>
    3204:	9e e8       	ldi	r25, 0x8E	; 142
    3206:	87 2f       	mov	r24, r23
    3208:	76 2f       	mov	r23, r22
    320a:	05 c0       	rjmp	.+10     	; 0x3216 <__floatsisf+0x5e>
    320c:	66 23       	and	r22, r22
    320e:	71 f0       	breq	.+28     	; 0x322c <__floatsisf+0x74>
    3210:	96 e8       	ldi	r25, 0x86	; 134
    3212:	86 2f       	mov	r24, r22
    3214:	70 e0       	ldi	r23, 0x00	; 0
    3216:	60 e0       	ldi	r22, 0x00	; 0
    3218:	2a f0       	brmi	.+10     	; 0x3224 <__floatsisf+0x6c>
    321a:	9a 95       	dec	r25
    321c:	66 0f       	add	r22, r22
    321e:	77 1f       	adc	r23, r23
    3220:	88 1f       	adc	r24, r24
    3222:	da f7       	brpl	.-10     	; 0x321a <__floatsisf+0x62>
    3224:	88 0f       	add	r24, r24
    3226:	96 95       	lsr	r25
    3228:	87 95       	ror	r24
    322a:	97 f9       	bld	r25, 7
    322c:	08 95       	ret

0000322e <__fp_cmp>:
    322e:	99 0f       	add	r25, r25
    3230:	00 08       	sbc	r0, r0
    3232:	55 0f       	add	r21, r21
    3234:	aa 0b       	sbc	r26, r26
    3236:	e0 e8       	ldi	r30, 0x80	; 128
    3238:	fe ef       	ldi	r31, 0xFE	; 254
    323a:	16 16       	cp	r1, r22
    323c:	17 06       	cpc	r1, r23
    323e:	e8 07       	cpc	r30, r24
    3240:	f9 07       	cpc	r31, r25
    3242:	c0 f0       	brcs	.+48     	; 0x3274 <__fp_cmp+0x46>
    3244:	12 16       	cp	r1, r18
    3246:	13 06       	cpc	r1, r19
    3248:	e4 07       	cpc	r30, r20
    324a:	f5 07       	cpc	r31, r21
    324c:	98 f0       	brcs	.+38     	; 0x3274 <__fp_cmp+0x46>
    324e:	62 1b       	sub	r22, r18
    3250:	73 0b       	sbc	r23, r19
    3252:	84 0b       	sbc	r24, r20
    3254:	95 0b       	sbc	r25, r21
    3256:	39 f4       	brne	.+14     	; 0x3266 <__fp_cmp+0x38>
    3258:	0a 26       	eor	r0, r26
    325a:	61 f0       	breq	.+24     	; 0x3274 <__fp_cmp+0x46>
    325c:	23 2b       	or	r18, r19
    325e:	24 2b       	or	r18, r20
    3260:	25 2b       	or	r18, r21
    3262:	21 f4       	brne	.+8      	; 0x326c <__fp_cmp+0x3e>
    3264:	08 95       	ret
    3266:	0a 26       	eor	r0, r26
    3268:	09 f4       	brne	.+2      	; 0x326c <__fp_cmp+0x3e>
    326a:	a1 40       	sbci	r26, 0x01	; 1
    326c:	a6 95       	lsr	r26
    326e:	8f ef       	ldi	r24, 0xFF	; 255
    3270:	81 1d       	adc	r24, r1
    3272:	81 1d       	adc	r24, r1
    3274:	08 95       	ret

00003276 <__fp_inf>:
    3276:	97 f9       	bld	r25, 7
    3278:	9f 67       	ori	r25, 0x7F	; 127
    327a:	80 e8       	ldi	r24, 0x80	; 128
    327c:	70 e0       	ldi	r23, 0x00	; 0
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	08 95       	ret

00003282 <__fp_nan>:
    3282:	9f ef       	ldi	r25, 0xFF	; 255
    3284:	80 ec       	ldi	r24, 0xC0	; 192
    3286:	08 95       	ret

00003288 <__fp_powser>:
    3288:	df 93       	push	r29
    328a:	cf 93       	push	r28
    328c:	1f 93       	push	r17
    328e:	0f 93       	push	r16
    3290:	ff 92       	push	r15
    3292:	ef 92       	push	r14
    3294:	df 92       	push	r13
    3296:	7b 01       	movw	r14, r22
    3298:	8c 01       	movw	r16, r24
    329a:	68 94       	set
    329c:	06 c0       	rjmp	.+12     	; 0x32aa <__fp_powser+0x22>
    329e:	da 2e       	mov	r13, r26
    32a0:	ef 01       	movw	r28, r30
    32a2:	0e 94 12 1a 	call	0x3424	; 0x3424 <__mulsf3x>
    32a6:	fe 01       	movw	r30, r28
    32a8:	e8 94       	clt
    32aa:	a5 91       	lpm	r26, Z+
    32ac:	25 91       	lpm	r18, Z+
    32ae:	35 91       	lpm	r19, Z+
    32b0:	45 91       	lpm	r20, Z+
    32b2:	55 91       	lpm	r21, Z+
    32b4:	a6 f3       	brts	.-24     	; 0x329e <__fp_powser+0x16>
    32b6:	ef 01       	movw	r28, r30
    32b8:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__addsf3x>
    32bc:	fe 01       	movw	r30, r28
    32be:	97 01       	movw	r18, r14
    32c0:	a8 01       	movw	r20, r16
    32c2:	da 94       	dec	r13
    32c4:	69 f7       	brne	.-38     	; 0x32a0 <__fp_powser+0x18>
    32c6:	df 90       	pop	r13
    32c8:	ef 90       	pop	r14
    32ca:	ff 90       	pop	r15
    32cc:	0f 91       	pop	r16
    32ce:	1f 91       	pop	r17
    32d0:	cf 91       	pop	r28
    32d2:	df 91       	pop	r29
    32d4:	08 95       	ret

000032d6 <__fp_pscA>:
    32d6:	00 24       	eor	r0, r0
    32d8:	0a 94       	dec	r0
    32da:	16 16       	cp	r1, r22
    32dc:	17 06       	cpc	r1, r23
    32de:	18 06       	cpc	r1, r24
    32e0:	09 06       	cpc	r0, r25
    32e2:	08 95       	ret

000032e4 <__fp_pscB>:
    32e4:	00 24       	eor	r0, r0
    32e6:	0a 94       	dec	r0
    32e8:	12 16       	cp	r1, r18
    32ea:	13 06       	cpc	r1, r19
    32ec:	14 06       	cpc	r1, r20
    32ee:	05 06       	cpc	r0, r21
    32f0:	08 95       	ret
    32f2:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__fp_nan>

000032f6 <__fp_rempio2>:
    32f6:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fp_splitA>
    32fa:	d8 f3       	brcs	.-10     	; 0x32f2 <__fp_pscB+0xe>
    32fc:	e8 94       	clt
    32fe:	e0 e0       	ldi	r30, 0x00	; 0
    3300:	bb 27       	eor	r27, r27
    3302:	9f 57       	subi	r25, 0x7F	; 127
    3304:	f0 f0       	brcs	.+60     	; 0x3342 <__fp_rempio2+0x4c>
    3306:	2a ed       	ldi	r18, 0xDA	; 218
    3308:	3f e0       	ldi	r19, 0x0F	; 15
    330a:	49 ec       	ldi	r20, 0xC9	; 201
    330c:	06 c0       	rjmp	.+12     	; 0x331a <__fp_rempio2+0x24>
    330e:	ee 0f       	add	r30, r30
    3310:	bb 0f       	add	r27, r27
    3312:	66 1f       	adc	r22, r22
    3314:	77 1f       	adc	r23, r23
    3316:	88 1f       	adc	r24, r24
    3318:	28 f0       	brcs	.+10     	; 0x3324 <__fp_rempio2+0x2e>
    331a:	b2 3a       	cpi	r27, 0xA2	; 162
    331c:	62 07       	cpc	r22, r18
    331e:	73 07       	cpc	r23, r19
    3320:	84 07       	cpc	r24, r20
    3322:	28 f0       	brcs	.+10     	; 0x332e <__fp_rempio2+0x38>
    3324:	b2 5a       	subi	r27, 0xA2	; 162
    3326:	62 0b       	sbc	r22, r18
    3328:	73 0b       	sbc	r23, r19
    332a:	84 0b       	sbc	r24, r20
    332c:	e3 95       	inc	r30
    332e:	9a 95       	dec	r25
    3330:	72 f7       	brpl	.-36     	; 0x330e <__fp_rempio2+0x18>
    3332:	80 38       	cpi	r24, 0x80	; 128
    3334:	30 f4       	brcc	.+12     	; 0x3342 <__fp_rempio2+0x4c>
    3336:	9a 95       	dec	r25
    3338:	bb 0f       	add	r27, r27
    333a:	66 1f       	adc	r22, r22
    333c:	77 1f       	adc	r23, r23
    333e:	88 1f       	adc	r24, r24
    3340:	d2 f7       	brpl	.-12     	; 0x3336 <__fp_rempio2+0x40>
    3342:	90 48       	sbci	r25, 0x80	; 128
    3344:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__fp_mpack_finite>

00003348 <__fp_round>:
    3348:	09 2e       	mov	r0, r25
    334a:	03 94       	inc	r0
    334c:	00 0c       	add	r0, r0
    334e:	11 f4       	brne	.+4      	; 0x3354 <__fp_round+0xc>
    3350:	88 23       	and	r24, r24
    3352:	52 f0       	brmi	.+20     	; 0x3368 <__fp_round+0x20>
    3354:	bb 0f       	add	r27, r27
    3356:	40 f4       	brcc	.+16     	; 0x3368 <__fp_round+0x20>
    3358:	bf 2b       	or	r27, r31
    335a:	11 f4       	brne	.+4      	; 0x3360 <__fp_round+0x18>
    335c:	60 ff       	sbrs	r22, 0
    335e:	04 c0       	rjmp	.+8      	; 0x3368 <__fp_round+0x20>
    3360:	6f 5f       	subi	r22, 0xFF	; 255
    3362:	7f 4f       	sbci	r23, 0xFF	; 255
    3364:	8f 4f       	sbci	r24, 0xFF	; 255
    3366:	9f 4f       	sbci	r25, 0xFF	; 255
    3368:	08 95       	ret

0000336a <__fp_sinus>:
    336a:	ef 93       	push	r30
    336c:	e0 ff       	sbrs	r30, 0
    336e:	07 c0       	rjmp	.+14     	; 0x337e <__fp_sinus+0x14>
    3370:	a2 ea       	ldi	r26, 0xA2	; 162
    3372:	2a ed       	ldi	r18, 0xDA	; 218
    3374:	3f e0       	ldi	r19, 0x0F	; 15
    3376:	49 ec       	ldi	r20, 0xC9	; 201
    3378:	5f eb       	ldi	r21, 0xBF	; 191
    337a:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__addsf3x>
    337e:	0e 94 a4 19 	call	0x3348	; 0x3348 <__fp_round>
    3382:	0f 90       	pop	r0
    3384:	03 94       	inc	r0
    3386:	01 fc       	sbrc	r0, 1
    3388:	90 58       	subi	r25, 0x80	; 128
    338a:	e1 e0       	ldi	r30, 0x01	; 1
    338c:	f1 e0       	ldi	r31, 0x01	; 1
    338e:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__fp_powsodd>

00003392 <__fp_split3>:
    3392:	57 fd       	sbrc	r21, 7
    3394:	90 58       	subi	r25, 0x80	; 128
    3396:	44 0f       	add	r20, r20
    3398:	55 1f       	adc	r21, r21
    339a:	59 f0       	breq	.+22     	; 0x33b2 <__fp_splitA+0x10>
    339c:	5f 3f       	cpi	r21, 0xFF	; 255
    339e:	71 f0       	breq	.+28     	; 0x33bc <__fp_splitA+0x1a>
    33a0:	47 95       	ror	r20

000033a2 <__fp_splitA>:
    33a2:	88 0f       	add	r24, r24
    33a4:	97 fb       	bst	r25, 7
    33a6:	99 1f       	adc	r25, r25
    33a8:	61 f0       	breq	.+24     	; 0x33c2 <__fp_splitA+0x20>
    33aa:	9f 3f       	cpi	r25, 0xFF	; 255
    33ac:	79 f0       	breq	.+30     	; 0x33cc <__fp_splitA+0x2a>
    33ae:	87 95       	ror	r24
    33b0:	08 95       	ret
    33b2:	12 16       	cp	r1, r18
    33b4:	13 06       	cpc	r1, r19
    33b6:	14 06       	cpc	r1, r20
    33b8:	55 1f       	adc	r21, r21
    33ba:	f2 cf       	rjmp	.-28     	; 0x33a0 <__fp_split3+0xe>
    33bc:	46 95       	lsr	r20
    33be:	f1 df       	rcall	.-30     	; 0x33a2 <__fp_splitA>
    33c0:	08 c0       	rjmp	.+16     	; 0x33d2 <__fp_splitA+0x30>
    33c2:	16 16       	cp	r1, r22
    33c4:	17 06       	cpc	r1, r23
    33c6:	18 06       	cpc	r1, r24
    33c8:	99 1f       	adc	r25, r25
    33ca:	f1 cf       	rjmp	.-30     	; 0x33ae <__fp_splitA+0xc>
    33cc:	86 95       	lsr	r24
    33ce:	71 05       	cpc	r23, r1
    33d0:	61 05       	cpc	r22, r1
    33d2:	08 94       	sec
    33d4:	08 95       	ret

000033d6 <__fp_zero>:
    33d6:	e8 94       	clt

000033d8 <__fp_szero>:
    33d8:	bb 27       	eor	r27, r27
    33da:	66 27       	eor	r22, r22
    33dc:	77 27       	eor	r23, r23
    33de:	cb 01       	movw	r24, r22
    33e0:	97 f9       	bld	r25, 7
    33e2:	08 95       	ret

000033e4 <__gesf2>:
    33e4:	0e 94 17 19 	call	0x322e	; 0x322e <__fp_cmp>
    33e8:	08 f4       	brcc	.+2      	; 0x33ec <__gesf2+0x8>
    33ea:	8f ef       	ldi	r24, 0xFF	; 255
    33ec:	08 95       	ret

000033ee <inverse>:
    33ee:	9b 01       	movw	r18, r22
    33f0:	ac 01       	movw	r20, r24
    33f2:	60 e0       	ldi	r22, 0x00	; 0
    33f4:	70 e0       	ldi	r23, 0x00	; 0
    33f6:	80 e8       	ldi	r24, 0x80	; 128
    33f8:	9f e3       	ldi	r25, 0x3F	; 63
    33fa:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__divsf3>

000033fe <__mulsf3>:
    33fe:	0e 94 12 1a 	call	0x3424	; 0x3424 <__mulsf3x>
    3402:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__fp_round>
    3406:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fp_pscA>
    340a:	38 f0       	brcs	.+14     	; 0x341a <__mulsf3+0x1c>
    340c:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__fp_pscB>
    3410:	20 f0       	brcs	.+8      	; 0x341a <__mulsf3+0x1c>
    3412:	95 23       	and	r25, r21
    3414:	11 f0       	breq	.+4      	; 0x341a <__mulsf3+0x1c>
    3416:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__fp_inf>
    341a:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__fp_nan>
    341e:	11 24       	eor	r1, r1
    3420:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__fp_szero>

00003424 <__mulsf3x>:
    3424:	0e 94 c9 19 	call	0x3392	; 0x3392 <__fp_split3>
    3428:	70 f3       	brcs	.-36     	; 0x3406 <__mulsf3+0x8>

0000342a <__mulsf3_pse>:
    342a:	95 9f       	mul	r25, r21
    342c:	c1 f3       	breq	.-16     	; 0x341e <__mulsf3+0x20>
    342e:	95 0f       	add	r25, r21
    3430:	50 e0       	ldi	r21, 0x00	; 0
    3432:	55 1f       	adc	r21, r21
    3434:	62 9f       	mul	r22, r18
    3436:	f0 01       	movw	r30, r0
    3438:	72 9f       	mul	r23, r18
    343a:	bb 27       	eor	r27, r27
    343c:	f0 0d       	add	r31, r0
    343e:	b1 1d       	adc	r27, r1
    3440:	63 9f       	mul	r22, r19
    3442:	aa 27       	eor	r26, r26
    3444:	f0 0d       	add	r31, r0
    3446:	b1 1d       	adc	r27, r1
    3448:	aa 1f       	adc	r26, r26
    344a:	64 9f       	mul	r22, r20
    344c:	66 27       	eor	r22, r22
    344e:	b0 0d       	add	r27, r0
    3450:	a1 1d       	adc	r26, r1
    3452:	66 1f       	adc	r22, r22
    3454:	82 9f       	mul	r24, r18
    3456:	22 27       	eor	r18, r18
    3458:	b0 0d       	add	r27, r0
    345a:	a1 1d       	adc	r26, r1
    345c:	62 1f       	adc	r22, r18
    345e:	73 9f       	mul	r23, r19
    3460:	b0 0d       	add	r27, r0
    3462:	a1 1d       	adc	r26, r1
    3464:	62 1f       	adc	r22, r18
    3466:	83 9f       	mul	r24, r19
    3468:	a0 0d       	add	r26, r0
    346a:	61 1d       	adc	r22, r1
    346c:	22 1f       	adc	r18, r18
    346e:	74 9f       	mul	r23, r20
    3470:	33 27       	eor	r19, r19
    3472:	a0 0d       	add	r26, r0
    3474:	61 1d       	adc	r22, r1
    3476:	23 1f       	adc	r18, r19
    3478:	84 9f       	mul	r24, r20
    347a:	60 0d       	add	r22, r0
    347c:	21 1d       	adc	r18, r1
    347e:	82 2f       	mov	r24, r18
    3480:	76 2f       	mov	r23, r22
    3482:	6a 2f       	mov	r22, r26
    3484:	11 24       	eor	r1, r1
    3486:	9f 57       	subi	r25, 0x7F	; 127
    3488:	50 40       	sbci	r21, 0x00	; 0
    348a:	9a f0       	brmi	.+38     	; 0x34b2 <__mulsf3_pse+0x88>
    348c:	f1 f0       	breq	.+60     	; 0x34ca <__mulsf3_pse+0xa0>
    348e:	88 23       	and	r24, r24
    3490:	4a f0       	brmi	.+18     	; 0x34a4 <__mulsf3_pse+0x7a>
    3492:	ee 0f       	add	r30, r30
    3494:	ff 1f       	adc	r31, r31
    3496:	bb 1f       	adc	r27, r27
    3498:	66 1f       	adc	r22, r22
    349a:	77 1f       	adc	r23, r23
    349c:	88 1f       	adc	r24, r24
    349e:	91 50       	subi	r25, 0x01	; 1
    34a0:	50 40       	sbci	r21, 0x00	; 0
    34a2:	a9 f7       	brne	.-22     	; 0x348e <__mulsf3_pse+0x64>
    34a4:	9e 3f       	cpi	r25, 0xFE	; 254
    34a6:	51 05       	cpc	r21, r1
    34a8:	80 f0       	brcs	.+32     	; 0x34ca <__mulsf3_pse+0xa0>
    34aa:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__fp_inf>
    34ae:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__fp_szero>
    34b2:	5f 3f       	cpi	r21, 0xFF	; 255
    34b4:	e4 f3       	brlt	.-8      	; 0x34ae <__mulsf3_pse+0x84>
    34b6:	98 3e       	cpi	r25, 0xE8	; 232
    34b8:	d4 f3       	brlt	.-12     	; 0x34ae <__mulsf3_pse+0x84>
    34ba:	86 95       	lsr	r24
    34bc:	77 95       	ror	r23
    34be:	67 95       	ror	r22
    34c0:	b7 95       	ror	r27
    34c2:	f7 95       	ror	r31
    34c4:	e7 95       	ror	r30
    34c6:	9f 5f       	subi	r25, 0xFF	; 255
    34c8:	c1 f7       	brne	.-16     	; 0x34ba <__mulsf3_pse+0x90>
    34ca:	fe 2b       	or	r31, r30
    34cc:	88 0f       	add	r24, r24
    34ce:	91 1d       	adc	r25, r1
    34d0:	96 95       	lsr	r25
    34d2:	87 95       	ror	r24
    34d4:	97 f9       	bld	r25, 7
    34d6:	08 95       	ret

000034d8 <sin>:
    34d8:	9f 93       	push	r25
    34da:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__fp_rempio2>
    34de:	0f 90       	pop	r0
    34e0:	07 fc       	sbrc	r0, 7
    34e2:	ee 5f       	subi	r30, 0xFE	; 254
    34e4:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__fp_sinus>
    34e8:	19 f4       	brne	.+6      	; 0x34f0 <sin+0x18>
    34ea:	16 f4       	brtc	.+4      	; 0x34f0 <sin+0x18>
    34ec:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__fp_nan>
    34f0:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__fp_mpack>

000034f4 <sqrt>:
    34f4:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fp_splitA>
    34f8:	b8 f3       	brcs	.-18     	; 0x34e8 <sin+0x10>
    34fa:	99 23       	and	r25, r25
    34fc:	c9 f3       	breq	.-14     	; 0x34f0 <sin+0x18>
    34fe:	b6 f3       	brts	.-20     	; 0x34ec <sin+0x14>
    3500:	9f 57       	subi	r25, 0x7F	; 127
    3502:	55 0b       	sbc	r21, r21
    3504:	87 ff       	sbrs	r24, 7
    3506:	0e 94 cc 1a 	call	0x3598	; 0x3598 <__fp_norm2>
    350a:	00 24       	eor	r0, r0
    350c:	a0 e6       	ldi	r26, 0x60	; 96
    350e:	40 ea       	ldi	r20, 0xA0	; 160
    3510:	90 01       	movw	r18, r0
    3512:	80 58       	subi	r24, 0x80	; 128
    3514:	56 95       	lsr	r21
    3516:	97 95       	ror	r25
    3518:	28 f4       	brcc	.+10     	; 0x3524 <sqrt+0x30>
    351a:	80 5c       	subi	r24, 0xC0	; 192
    351c:	66 0f       	add	r22, r22
    351e:	77 1f       	adc	r23, r23
    3520:	88 1f       	adc	r24, r24
    3522:	20 f0       	brcs	.+8      	; 0x352c <sqrt+0x38>
    3524:	26 17       	cp	r18, r22
    3526:	37 07       	cpc	r19, r23
    3528:	48 07       	cpc	r20, r24
    352a:	30 f4       	brcc	.+12     	; 0x3538 <sqrt+0x44>
    352c:	62 1b       	sub	r22, r18
    352e:	73 0b       	sbc	r23, r19
    3530:	84 0b       	sbc	r24, r20
    3532:	20 29       	or	r18, r0
    3534:	31 29       	or	r19, r1
    3536:	4a 2b       	or	r20, r26
    3538:	a6 95       	lsr	r26
    353a:	17 94       	ror	r1
    353c:	07 94       	ror	r0
    353e:	20 25       	eor	r18, r0
    3540:	31 25       	eor	r19, r1
    3542:	4a 27       	eor	r20, r26
    3544:	58 f7       	brcc	.-42     	; 0x351c <sqrt+0x28>
    3546:	66 0f       	add	r22, r22
    3548:	77 1f       	adc	r23, r23
    354a:	88 1f       	adc	r24, r24
    354c:	20 f0       	brcs	.+8      	; 0x3556 <sqrt+0x62>
    354e:	26 17       	cp	r18, r22
    3550:	37 07       	cpc	r19, r23
    3552:	48 07       	cpc	r20, r24
    3554:	30 f4       	brcc	.+12     	; 0x3562 <sqrt+0x6e>
    3556:	62 0b       	sbc	r22, r18
    3558:	73 0b       	sbc	r23, r19
    355a:	84 0b       	sbc	r24, r20
    355c:	20 0d       	add	r18, r0
    355e:	31 1d       	adc	r19, r1
    3560:	41 1d       	adc	r20, r1
    3562:	a0 95       	com	r26
    3564:	81 f7       	brne	.-32     	; 0x3546 <sqrt+0x52>
    3566:	b9 01       	movw	r22, r18
    3568:	84 2f       	mov	r24, r20
    356a:	91 58       	subi	r25, 0x81	; 129
    356c:	88 0f       	add	r24, r24
    356e:	96 95       	lsr	r25
    3570:	87 95       	ror	r24
    3572:	08 95       	ret

00003574 <square>:
    3574:	9b 01       	movw	r18, r22
    3576:	ac 01       	movw	r20, r24
    3578:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__mulsf3>

0000357c <__fp_mpack>:
    357c:	9f 3f       	cpi	r25, 0xFF	; 255
    357e:	31 f0       	breq	.+12     	; 0x358c <__fp_mpack_finite+0xc>

00003580 <__fp_mpack_finite>:
    3580:	91 50       	subi	r25, 0x01	; 1
    3582:	20 f4       	brcc	.+8      	; 0x358c <__fp_mpack_finite+0xc>
    3584:	87 95       	ror	r24
    3586:	77 95       	ror	r23
    3588:	67 95       	ror	r22
    358a:	b7 95       	ror	r27
    358c:	88 0f       	add	r24, r24
    358e:	91 1d       	adc	r25, r1
    3590:	96 95       	lsr	r25
    3592:	87 95       	ror	r24
    3594:	97 f9       	bld	r25, 7
    3596:	08 95       	ret

00003598 <__fp_norm2>:
    3598:	91 50       	subi	r25, 0x01	; 1
    359a:	50 40       	sbci	r21, 0x00	; 0
    359c:	66 0f       	add	r22, r22
    359e:	77 1f       	adc	r23, r23
    35a0:	88 1f       	adc	r24, r24
    35a2:	d2 f7       	brpl	.-12     	; 0x3598 <__fp_norm2>
    35a4:	08 95       	ret

000035a6 <__fp_powsodd>:
    35a6:	9f 93       	push	r25
    35a8:	8f 93       	push	r24
    35aa:	7f 93       	push	r23
    35ac:	6f 93       	push	r22
    35ae:	ff 93       	push	r31
    35b0:	ef 93       	push	r30
    35b2:	9b 01       	movw	r18, r22
    35b4:	ac 01       	movw	r20, r24
    35b6:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsf3>
    35ba:	ef 91       	pop	r30
    35bc:	ff 91       	pop	r31
    35be:	0e 94 44 19 	call	0x3288	; 0x3288 <__fp_powser>
    35c2:	2f 91       	pop	r18
    35c4:	3f 91       	pop	r19
    35c6:	4f 91       	pop	r20
    35c8:	5f 91       	pop	r21
    35ca:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__mulsf3>

000035ce <__tablejump2__>:
    35ce:	ee 0f       	add	r30, r30
    35d0:	ff 1f       	adc	r31, r31
    35d2:	05 90       	lpm	r0, Z+
    35d4:	f4 91       	lpm	r31, Z
    35d6:	e0 2d       	mov	r30, r0
    35d8:	09 94       	ijmp

000035da <_exit>:
    35da:	f8 94       	cli

000035dc <__stop_program>:
    35dc:	ff cf       	rjmp	.-2      	; 0x35dc <__stop_program>
